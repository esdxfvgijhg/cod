<?xml version="1.0"?><st-source><!-- Name: Com- Automation ExamplesNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: This parcel contains COM Automation example codeDbIdentifier: bear73DbTrace: 497458DbUsername: alexDbVersion: 8.3 - 1DevelopmentPrerequisites: #(#(#any 'Com- Ole Examples' '') #(#any 'Com- Automation' '') #(#any 'Com- Automation Examples Pools' '') #(#any 'Com- Automation Development' '') #(#any 'Com- Automation Pools' '') #(#any 'Com- CodeAnnotations' '') #(#any 'Com- ExtensionsToBase' '') #(#any 'Com- Interface Adaptors' '') #(#any 'Com- Ole' '') #(#any 'Com- Ole Pools' '') #(#any 'Com- System Configuration Services' '') #(#any 'Com- Win32' '') #(#any 'DLLCC' ''))DialectVersion: VisualWorks 7.9DisregardedPrerequisites: #(#(#name 'Com-Obsolete' #componentType #package) #(#name 'Glorp' #componentType #bundle) #(#name 'ActiveX-Container' #componentType #package) #(#name 'ActiveX-Interfaces' #componentType #package))HideSource: falsePackageName: Com- Automation ExamplesParcel: #('ComAutomationExamples')ParcelName: Com- Automation ExamplesPrerequisiteDescriptions: #(#(#name 'Com- Ole Examples') #(#name 'Com- Automation' #componentType #package) #(#name 'Com- Automation Examples Pools' #componentType #package) #(#name 'Com- Automation Development' #componentType #package) #(#name 'Com- Automation Pools' #componentType #package) #(#name 'Com- CodeAnnotations' #componentType #package) #(#name 'Com- ExtensionsToBase' #componentType #package) #(#name 'Com- Interface Adaptors' #componentType #package) #(#name 'Com- Ole' #componentType #package) #(#name 'Com- Ole Pools' #componentType #package) #(#name 'Com- System Configuration Services' #componentType #package) #(#name 'Com- Win32' #componentType #package) #(#name 'DLLCC' #componentType #package #applicability #store))PrerequisiteParcels: #(#('Com- Ole Examples' '') #('Com- Automation' '') #('Com- Automation Examples Pools' '') #('Com- Automation Development' '') #('Com- Automation Pools' '') #('Com- CodeAnnotations' '') #('Com- ExtensionsToBase' '') #('Com- Interface Adaptors' '') #('Com- Ole' '') #('Com- Ole Pools' '') #('Com- System Configuration Services' '') #('Com- Win32' ''))PrintStringCache: (8.3 - 1,alex)SaveSource: trueVersion: 8.3 - 1Post-Load Block: 	[:package | ]Date: 1:50:07 PM April 12, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.1) of 7. April 2017 on 12. April 2017 at 13:50:07</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ISmalltalkCommanderDispPointer</name><environment>Examples</environment><super>External.COMDispatchInterfacePointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderDispPointer</class-id><body>Automatic prototype generation:---------------------------------------------COMInterfacePointerClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderDisp.Initialization utilities:-----------------------------ISmalltalkCommanderDispPointer ClassInitializer. "First since it defines the IID in our example."</body></comment><class><name>IAllDataTypesDispPointer</name><environment>Examples</environment><super>External.COMDispatchInterfacePointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-All Data Types</category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>IAllDataTypesDispImplementation</name><environment>Examples</environment><super>External.COMDispatchInterfaceImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-All Data Types</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.IAllDataTypesDispImplementation</class-id><body>To generate a prototype interface implementation binding class for a specific interface evaluate:	COMInterfaceImplementationClassGenerator 		generateInterfacePrototypeFor: #IAllDataTypesDisp		typeLibrary: AllDataTypesCOMObject typeLibraryEnglish</body></comment><class><name>ISmalltalkCommanderDisp</name><environment>Examples</environment><super>External.COMDispatchInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderDisp</class-id><body>	"Get a dispatch driver running on the dual interface. Inspect: "	 ( ( IClassFactory 		createInstance: SmalltalkCommanderCOMObject clsid 		iid: ISmalltalkCommanderDisp iid ) asDispatchDriver ) inspect.	"Get a dispatch driver running on the automation interface. Inspect: "	( COMDispatchDriver createObject: 'VisualWorks.SmalltalkCommander' ) inspect.	"Copy and Paste the expressions in the inspector:"self invokeMethod: 'Evaluate' with: '3+4'.self invokeMethod: 'EvaluateAsString' with: '100 factorial'.self invokeMethod: 'Quit'.self specificationPolicy: COMSpecificationPolicy newTypeLibraryPolicy.self specificationPolicy: COMSpecificationPolicy newVariantPolicy.self release.Automatic prototype generation:---------------------------------------------For the private classes in this applications COM object model:1) ISmalltalkCommanderEventDispCOMInterfacePointerClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderEventDisp.COMInterfaceImplementationClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderEventDisp.COMInterfaceClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderEventDisp.2) ISmalltalkCommanderLogDispCOMInterfacePointerClassGenerator 	generateInterfacePrototypeFor: #ISmalltalkCommanderLogDisp	typeLibrary: SmalltalkCommanderCOMObject typeLibraryEnglish.COMInterfaceImplementationClassGenerator 	generateInterfacePrototypeFor: #ISmalltalkCommanderLogDisp	typeLibrary: SmalltalkCommanderCOMObject typeLibraryEnglish.COMInterfaceClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderLogDisp.3) ISmalltalkCommanderDispCOMInterfacePointerClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderDisp.COMInterfaceImplementationClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderDisp.COMInterfaceClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderDisp.Initialization utilities:-----------------------------ISmalltalkCommanderEventDispPointer ClassInitializer. "First since it defines the IID in our example."ISmalltalkCommanderEventDispImplementation ClassInitializer.ISmalltalkCommanderEventDisp ClassInitializer.ISmalltalkCommanderLogDispPointer ClassInitializer. "First since it defines the IID in our example."ISmalltalkCommanderLogDispImplementation ClassInitializer.ISmalltalkCommanderLogDisp ClassInitializer.ISmalltalkCommanderDispPointer ClassInitializer. "First since it defines the IID in our example."ISmalltalkCommanderDispImplementation ClassInitializer.ISmalltalkCommanderDisp ClassInitializer.</body></comment><class><name>SmalltalkCommanderEventCOMObject</name><environment>Examples</environment><super>External.COMDualInterfaceObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>SmalltalkCommanderCOMObject</name><environment>Examples</environment><super>External.COMDualInterfaceObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>log </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.SmalltalkCommanderCOMObject</class-id><body>This class is an example of publishing a Smalltalk object through an Automation dual interface. An instance of this class can operate as a regular Automation object since it supports the IDispatch interface. In addition, custom entry points provide the most efficient access to the object by letting COM clients circumvent the use of the Automation IDispatch APIs to get to the object directly.This COM Object contains an installRuntime method which is used to initialize the receiver and all related classes.SmalltalkCommanderCOMObject is a public class that can be create from the clients.SmalltalkCommanderLogCOMObject and SmalltalkCommanderEventCOMObject are private classes. Only interfaces are answered on these objects. They cannot be created from clients.-----	"Get a dispatch driver running on the dual interface. Inspect: "	 ( ( IClassFactory 		createInstance: SmalltalkCommanderCOMObject clsid 		iid: ISmalltalkCommanderDisp iid ) asDispatchDriver ) inspect.	"Copy and Paste the expressions in the inspector:""Use IDispatch:"self invokeMethod: 'Evaluate' with: '3+4'.self invokeMethod: 'EvaluateAsString' with: '100 factorial'."Use the vtable:"self dispatchInterface evaluate: '3+4'.self dispatchInterface evaluateAsString: '100 factorial'.self invokeMethod: 'Quit'.self specificationPolicy: COMSpecificationPolicy newTypeLibraryPolicy.self specificationPolicy: COMSpecificationPolicy newVariantPolicy.self release.</body></comment><class><name>AllDataTypesCOMObject</name><environment>Examples</environment><super>External.COMDualInterfaceObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-All Data Types</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.AllDataTypesCOMObject</class-id><body>This class is an example of publishing a Smalltalk object through an Automation dual interface. An instance of this class can operate as a regular Automation object since it supports the IDispatch interface. In addition, custom entry points provide the most efficient access to the object by letting COM clients circumvent the use of the Automation IDispatch APIs to get to the object directly.	"Get a dispatch driver running on the dual interface. Inspect: "	 ( ( IClassFactory 		createInstance: AllDataTypesCOMObject clsid		iid: IAllDataTypesDisp iid ) asDispatchDriver ) inspect.	"Copy and Paste the expressions in the inspector:"	"Using IDispatch."	"Setting properties."	| anIUnknown anIDispatch aDualInterface |	self setProperty: 'LONGValue' value: 76000.	self setProperty: 'BYTEValue' value: 1.	self setProperty: 'SHORTValue' value: 2.	self setProperty: 'FLOATValue' value: 0.333.	self setProperty: 'DOUBLEValue' value: 800.001.	self setProperty: 'VARIANT_BOOLValue' value: true.	self setProperty: 'SCODEValue' value: 0.	self setProperty: 'CURRENCYValue' value: 		( FixedPoint numerator: 9223372036854775807 denominator: 10000 scale: 4 ). "The largest CY value"	self setProperty: 'DATEValue' value: Timestamp now.	self setProperty: 'BSTRValue' value: 'Bonjour'.	anIUnknown := self dispatchInterface queryInterface: IUnknown iid.	[ self setProperty: 'IUnknownReference' value: anIUnknown ] ensure: [ anIUnknown release ].	anIDispatch := self dispatchInterface queryInterface: IDispatch iid.	[ self setProperty: 'IDispatchReference' value: anIDispatch ] ensure: [ anIDispatch release ].	self setProperty: 'VARIANTValue' value: ( Array with: 1 with: 2 with: 3 with: 4 ).	self setProperty: 'SAFEARRAY_I4Value' value: ( Array with: 10 with: 20 with: 30 with: 40 ).	anIDispatch := self dispatchInterface queryInterface: IDispatch iid.	[ aDualInterface := self dispatchInterface queryInterface: IAllDataTypesDisp iid.	self setProperty: 'SAFEARRAY_DISPATCHValue' value: ( Array with: anIDispatch with: aDualInterface ) ] ensure: [ anIDispatch release. aDualInterface release ].	"Getting properties."	self getProperty: 'LONGValue'.	self getProperty: 'BYTEValue'. 	self getProperty: 'SHORTValue'. 	self getProperty: 'FLOATValue'. 	self getProperty: 'DOUBLEValue'. 	self getProperty: 'VARIANT_BOOLValue'. 	self getProperty: 'SCODEValue'. 	self getProperty: 'CURRENCYValue'. 	self getProperty: 'DATEValue'. 	self getProperty: 'BSTRValue'. 	( self getProperty: 'IUnknownReference' ) release.	( self getProperty: 'IDispatchReference' ) release.	self getProperty: 'VARIANTValue'. 	self getProperty: 'SAFEARRAY_I4Value'.	( self getProperty: 'SAFEARRAY_DISPATCHValue' ) do: [ : anInterface | anInterface release ].	"Using vtable:"	"Setting properties."	| anIUnknown anIDispatch aDualInterface |	self dispatchInterface reset.	self dispatchInterface put_LONGValue: 76000.	self dispatchInterface put_BYTEValue: 1.	self dispatchInterface put_SHORTValue: 2.	self dispatchInterface put_FLOATValue: 0.333.	self dispatchInterface put_DOUBLEValue: 800.001.	self dispatchInterface put_VARIANT_BOOLValue: true.	self dispatchInterface put_SCODEValue: 0.	self dispatchInterface put_CURRENCYValue: 		( FixedPoint numerator: 9223372036854775807 denominator: 10000 scale: 4 ). "The largest CY value."	self dispatchInterface put_DATEValue: Timestamp now.	self dispatchInterface put_BSTRValue: 'Bonjour'.	anIUnknown := self dispatchInterface queryInterface: IUnknown iid.	[ self dispatchInterface put_IUnknownReference: anIUnknown ] ensure: [ anIUnknown release ].	anIDispatch := self dispatchInterface queryInterface: IDispatch iid.	[ self dispatchInterface put_IDispatchReference: anIDispatch ] ensure: [ anIDispatch release ].	self dispatchInterface put_IDispatchReference: self dispatchInterface.	self dispatchInterface put_VARIANTValue: ( Array with: 1 with: 2 with: 3 with: 4 ).	self dispatchInterface put_SAFEARRAY_I4Value: ( Array with: 10 with: 20 with: 30 with: 40 ).	anIDispatch := self dispatchInterface queryInterface: IDispatch iid.	[ aDualInterface := self dispatchInterface queryInterface: IAllDataTypesDisp iid.	self dispatchInterface put_SAFEARRAY_DISPATCHValue: ( Array with: anIDispatch with: aDualInterface ) ] ensure: [ anIDispatch release. aDualInterface release ].	"Getting properties."	self dispatchInterface get_LONGValue.	self dispatchInterface get_BYTEValue. 	self dispatchInterface get_SHORTValue. 	self dispatchInterface get_FLOATValue. 	self dispatchInterface get_DOUBLEValue. 	self dispatchInterface get_VARIANT_BOOLValue. 	self dispatchInterface get_SCODEValue. 	self dispatchInterface get_DATEValue. 	self dispatchInterface get_BSTRValue. 	( self dispatchInterface get_IUnknownReference ) release.	( self dispatchInterface get_IDispatchReference ) release.	self dispatchInterface get_VARIANTValue. 	self dispatchInterface get_SAFEARRAY_I4Value. 	self dispatchInterface get_SAFEARRAY_DISPATCHValue do: [ : anInterface | anInterface release ].	"Calling methods"	"ManyArguments"	| anIDispatch answer |	anIDispatch := self getProperty: 'IDispatchReference'.	[ answer := self dispatchInterface 		manyArguments: anIDispatch 		propertyName: 'BSTRValue' 		aLong: 888 ]	ensure: [ anIDispatch release ].	answer.	"ManyArgumentsByRef"	| ref1 ref2 ref3 ref4 refs |	ref1 := ValueReference new. "out"	ref2 := ValueReference new. "out"	ref3 := ValueReference on: 1. "in,out"	ref4 := ValueReference on: 2. "in,out"	refs := Array with: ref1 with: ref2 with: ref3 with: ref4.	self dispatchInterface		manyByRefArguments: ref1 		with: ref2 		with: ref3		with: ref4.	refs inspect.	ref1 value release. "Release IDispatch answered by reference."	self invokeMethod: 'Quit'.	self specificationPolicy: COMSpecificationPolicy newTypeLibraryPolicy.	self specificationPolicy: COMSpecificationPolicy newVariantPolicy.	self release.</body></comment><class><name>AutomationAllDataTypes</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertyLONGValue propertyBYTEValue propertySHORTValue propertyFLOATValue propertyDOUBLEValue propertyVARIANT_BOOLValue propertySCODEValue propertyDATEValue propertyBSTRValue propertyIUnknownReference propertyIDispatchReference propertyVARIANTValue propertyCURRENCYValue propertySAFEARRAY_I4Value propertySAFEARRAY_DISPATCHValue propertySAFEARRAY_UNKNOWNValue propertySAFEARRAY_BSTRValue propertySAFEARRAY_VARIANTValue </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-All Data Types</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.AutomationAllDataTypes</class-id><body>This class is an example of publishing a Smalltalk object through Automation. All Automation data types are represented in this example. To see how to publish this class with a dual interface, see the subclass of COMDualInterfaceObject called AllDataTypesCOMObject.	"Install the type library in the registration database."	self registerTypeLibraries.	"Update the type library in the registration database."	self updateTypeLibraries.	"Create the specification for all dispatch interfaces in the type library."	COMAutomationTypeAnalyzer 		generateTypeLibrarySpecifications: self typeLibraryEnglish 		forRole: #server.	"Run the server from here. Inspect the expression:"	( COMDispatchDriver createObject: 'VisualWorks.AllDataTypes' ) inspect.	"Paste the following in an inspector to run some tests."	"Setting properties."	| anIUnknown |	self setProperty: 'LONGValue' value: 76000.	self setProperty: 'BYTEValue' value: 1.	self setProperty: 'SHORTValue' value: 2.	self setProperty: 'FLOATValue' value: 0.333.	self setProperty: 'DOUBLEValue' value: 800.001.	self setProperty: 'VARIANT_BOOLValue' value: true.	self setProperty: 'SCODEValue' value: 0.	self setProperty: 'DATEValue' value: Timestamp now.	self setProperty: 'BSTRValue' value: 'Bonjour'.	anIUnknown := self dispatchInterface queryInterface: IUnknown iid.	[ self setProperty: 'IUnknownReference' value: anIUnknown ] ensure: [ anIUnknown release ].	self setProperty: 'IDispatchReference' value: self dispatchInterface.	self setProperty: 'VARIANTValue' value: ( Array with: 1 with: 2 with: 3 with: 4 ).	self setProperty: 'CURRENCYValue' value: 10.	"Getting properties."	| anInterface |	self getProperty: 'LONGValue'.	self getProperty: 'BYTEValue'. 	self getProperty: 'SHORTValue'. 	self getProperty: 'FLOATValue'. 	self getProperty: 'DOUBLEValue'. 	self getProperty: 'VARIANT_BOOLValue'. 	self getProperty: 'SCODEValue'. 	self getProperty: 'DATEValue'. 	self getProperty: 'BSTRValue'. 	[ anInterface := self getProperty: 'IUnknownReference' ] ensure: [ anInterface release ].	[ anInterface := self getProperty: 'IDispatchReference' ] ensure: [ anInterface release ].	self getProperty: 'VARIANTValue'. 	self getProperty: 'CURRENCYValue'. 	"Calling methods"	| anIDispatch answer |	anIDispatch := self getProperty: 'IDispatchReference'.	[ answer := self 		invokeMethod: 'ManyArguments' 		withArguments: ( Array with: anIDispatch with: 'BSTRValue' with: 888 ). ]	ensure: [ anIDispatch release ].	answer.	| ref1 ref2 ref3 ref4 refs |	ref1 := ValueReference new. "out"	ref2 := ValueReference new. "out"	ref3 := ValueReference on: 1. "in,out"	ref4 := ValueReference on: 2. "in,out"	refs := Array with: ref1 with: ref2 with: ref3 with: ref4.	self 		invokeMethod: 'ManyByRefArguments' 		withArguments: refs.	refs inspect.	ref1 value release. "Release IDispatch answered by reference."	self invokeMethod: 'Quit'.	self specificationPolicy: COMSpecificationPolicy newTypeLibraryPolicy.	self specificationPolicy: COMSpecificationPolicy newVariantPolicy.	self release.</body></comment><class><name>AutomationOnlySmalltalkCommander</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMAutomationConstants.*			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.AutomationOnlySmalltalkCommander</class-id><body>This class is an example of publishing a Smalltalk object through Automation. To see how to publish this class with a dual interface, see the subclass of COMDualInterfaceObject called SmalltalkCommanderCOMObject.	"Install the type library in the registration database."	self registerTypeLibraries.	"Update the type library in the registration database."	self updateTypeLibraries.	"If the type library has changed, clear the cache."	self releaseTypeLibraries.	"Create the specification for all dispatch interfaces in the type library."	COMAutomationTypeAnalyzer 		generateTypeLibrarySpecifications: self typeLibraryEnglish 		forRole: #server.	"Run the server from here. Inspect the expression:"	( COMDispatchDriver createObject: 'VisualWorks.SmalltalkCommander' ) inspect.	"Copy and Paste the expressions in the inspector:"self invokeMethod: 'Evaluate' with: '3+4'.self invokeMethod: 'EvaluateAsString' with: '100 factorial'.self invokeMethod: 'Quit'.self specificationPolicy: COMSpecificationPolicy newTypeLibraryPolicy.self specificationPolicy: COMSpecificationPolicy newVariantPolicy.self release.</body></comment><class><name>ISmalltalkCommanderLogDispPointer</name><environment>Examples</environment><super>External.COMDispatchInterfacePointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMAutomationConstants.*			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderLogDispPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the ISmalltalkCommanderLogDisp interface.Automatic prototype generation:---------------------------------------------COMInterfacePointerClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderLogDisp.Initialization utilities:-----------------------------ISmalltalkCommanderEventDispLogPointer ClassInitializer. "First since it defines the IID in our example."</body></comment><class><name>ISmalltalkCommanderLogDispImplementation</name><environment>Examples</environment><super>External.COMDispatchInterfaceImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMAutomationConstants.*			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderLogDispImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the ISmalltalkCommanderLogDisp interface.Automatic prototype generation:---------------------------------------------COMInterfaceImplementationClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderLogDisp.Initialization utilities:-----------------------------ISmalltalkCommanderLogDispImplementation ClassInitializer.</body></comment><class><name>SmalltalkCommanderLog</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>list </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.SmalltalkCommanderLog</class-id><body>This class is used to illustrate publishing a COM interface on a private COM object, an object that does not have a CLSID and cannot be created from the outside world with Visual Basic's CreateObject().Instance Variables:list	&lt;OrderedCollection&gt;	 a list of SmalltalkCommanderEvent in the order submitted</body></comment><class><name>ISmalltalkCommanderLogDisp</name><environment>Examples</environment><super>External.COMDispatchInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderLogDisp</class-id><body>Automatic prototype generation:---------------------------------------------COMInterfaceClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderLogDisp.Initialization utilities:-----------------------------ISmalltalkCommanderLogDisp ClassInitializer.</body></comment><class><name>OfficeAutomationApplication</name><environment>Examples</environment><super>Examples.AutomationApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>ExcelApplication</name><environment>Examples</environment><super>Examples.OfficeAutomationApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.ExcelConstants.*			</imports><category>COM-Automation-Controller Samples</category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>ExcelExample</name><environment>Examples</environment><super>Examples.ExcelApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars>saveToFileName printReport </inst-vars><class-inst-vars></class-inst-vars><imports>			External.ExcelConstants.*			</imports><category>COM-Automation-Controller Samples</category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>ExcelExampleMonsterDamage</name><environment>Examples</environment><super>Examples.ExcelExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars>data </inst-vars><class-inst-vars></class-inst-vars><imports>			External.ExcelConstants.*			</imports><category>COM-Automation-Controller Samples</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ExcelExampleMonsterDamage</class-id><body>Documentation on Excel 7 (Office 95) objects, methods and properties can be found in the file Vba_xl.hlp. This Microsoft Excel 7 file can be found on the Microsoft CD, it is not normally copied during installation.Excel OLE Automation Programming Tips:o	If you're unsure as to how to create or change code, record your actions in Excel as a Macro and then examine the Visual Basic code.o	While in a module, click in a word and then press F1 to display the Help topic for that keyword.Evaluate these expressions to run the examples:To run this example, use these expressions:		"The following examples will create its Monster.xls output file in the COM\Automation\Examples directory."	"Run and save the report in a background invisible Excel process."	ExcelExampleMonsterDamage runInvisible.	"Make Excel visible to run and chart the report in the foreground."	ExcelExampleMonsterDamage runVisible.	"Run, save and print the report in a background invisible Excel process."	ExcelExampleMonsterDamage runInvisibleAndPrint.	"Test all specification policies."	Excel95ApplicationController defaultSpecificationPolicy: #newVariantPolicy.	Excel97ApplicationController defaultSpecificationPolicy: #newVariantPolicy.	ExcelExampleMonsterDamage runInvisible.	Excel95ApplicationController defaultSpecificationPolicy: #newTypeLibraryPolicy.	Excel97ApplicationController defaultSpecificationPolicy: #newTypeLibraryPolicy.	ExcelExampleMonsterDamage runInvisible.	Excel95ApplicationController defaultSpecificationPolicy: #newTypeCompilerPolicy.	Excel97ApplicationController defaultSpecificationPolicy: #newTypeCompilerPolicy.	ExcelExampleMonsterDamage runInvisible.	Excel95ApplicationController defaultSpecificationPolicy: #newCompletePolicy.	Excel97ApplicationController defaultSpecificationPolicy: #newCompletePolicy.	ExcelExampleMonsterDamage runInvisible.	"Test all specification policies without dialogs poping up (exercies a little less code though)."	COMSpecificationPolicy validDefaultPolicies do: [ : aPolicySymbol |		Excel95ApplicationController defaultSpecificationPolicy: aPolicySymbol.		Excel97ApplicationController defaultSpecificationPolicy: aPolicySymbol.		ExcelExampleMonsterDamage runTest ].	ExcelApplicationController defaultSpecificationPolicy: #newVariantPolicy.</body></comment><class><name>ISmalltalkCommanderDispImplementation</name><environment>Examples</environment><super>External.COMDispatchInterfaceImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderDispImplementation</class-id><body>Automatic prototype generation:---------------------------------------------COMInterfaceImplementationClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderDisp.Initialization utilities:-----------------------------ISmalltalkCommanderDispImplementation ClassInitializer.</body></comment><class><name>ExcelExampleFileImport</name><environment>Examples</environment><super>Examples.ExcelExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars>importFileName workbookData </inst-vars><class-inst-vars></class-inst-vars><imports>			External.ExcelConstants.*			</imports><category>COM-Automation-Controller Samples</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ExcelExampleFileImport</class-id><body>To run this example, use these expressions:	"Run and save the report in a background invisible Excel process."	ExcelExampleFileImport runInvisible.	"Make Excel visible to run and chart the report in the foreground."	ExcelExampleFileImport runVisible.	"Run, save and print the report in a background invisible Excel process."	ExcelExampleFileImport runInvisibleAndPrint.	"Test all specification policies."	COMSpecificationPolicy validDefaultPolicies do: [ : aPolicySymbol |		ExcelApplicationController defaultSpecificationPolicy: aPolicySymbol.		ExcelExampleFileImport runTest ].</body></comment><class><name>SmalltalkCommanderEvent</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>timestamp command </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.SmalltalkCommanderEvent</class-id><body>This class is used to illustrate publishing a COM interface on a private COM object, an object that does not have a CLSID and cannot be created from the outside world with Visual Basic's CreateObject().Instances of this class hold information for a single command submitted to the SmalltalkCommander  COM Connect example.Instance Variables:timestamp	&lt;TimeStamp&gt;	the timestamp when the object was createdcommand	&lt;String&gt;	a String containing a Smalltalk expression</body></comment><class><name>WordApplication</name><environment>Examples</environment><super>Examples.OfficeAutomationApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>WordExampleClassFormatter</name><environment>Examples</environment><super>Examples.WordApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classDefinition classMethodOrganizer methodOrganizer document </inst-vars><class-inst-vars></class-inst-vars><imports>			private External.Word95Constants.*			</imports><category>COM-Automation-Controller Samples</category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>COMAutomationControllerTestDriver</name><environment>Examples</environment><super>Examples.COMTestDriverFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports>			private COMAutomationConstants.*			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation Test Framework</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.COMAutomationControllerTestDriver</class-id><body>COMAutomationControllerTestDriver is an abstract superclass which provides a simple framework for implementing test drivers to exercise controller classes which wrap a COM automation dispatch interface.</body></comment><class><name>SmalltalkCommanderLogCOMObject</name><environment>Examples</environment><super>External.COMDualInterfaceObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>ISmalltalkCommanderEventDispPointer</name><environment>Examples</environment><super>External.COMDispatchInterfacePointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderEventDispPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the ISmalltalkCommanderEventDisp interface.Automatic prototype generation:---------------------------------------------COMInterfacePointerClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderEventDisp.Initialization utilities:-----------------------------ISmalltalkCommanderEventDispPointer ClassInitializer. "First since it defines the IID in our example."</body></comment><class><name>ISmalltalkCommanderEventDispImplementation</name><environment>Examples</environment><super>External.COMDispatchInterfaceImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderEventDispImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the ISmalltalkCommanderEventDisp interface.Automatic prototype generation:---------------------------------------------COMInterfaceImplementationClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderEventDisp.Initialization utilities:-----------------------------ISmalltalkCommanderEventDispImplementation ClassInitializer.</body></comment><class><name>COMAutomationObjectTestDriver</name><environment>Examples</environment><super>Examples.COMObjectTestDriver</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMStatusCodeConstants.*			External.COMConstants.*			External.COMAutomationPools.COMAutomationConstants.*			</imports><category>COM-Automation Test Framework</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.COMAutomationObjectTestDriver</class-id><body>COMAutomationObjectTestDriver is an abstract superclass which provides a simple framework for implementing test drivers to exercise interfaces of a COMDispatchObject implementation.  COMAutomationObjectTestDriver extends the basic COMObjectTestDriver framework to provide additional facilities specific to automation objects and IDispatch support.</body></comment><class><name>AutomationSmalltalkCommander</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lastError lastErrorStack answerErrors log </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.AutomationSmalltalkCommander</class-id><body>This 'domain' or 'business' class is published through COM Automation with the class AutomationOnlySmalltalkCommanderPublisher.To see how to publish this class with a dual interface, see the subclass of COMDualInterfaceObject called SmalltalkCommanderCOMObject.AutomationSmalltalkCommander was renamed to SmalltalkCommander in 1.1e patcheschange.Note portingISSUE. "rename to SmalltalkCommander later". false</body></comment><class><name>AutomationAllDataTypesTestDriver</name><environment>Examples</environment><super>Examples.COMAutomationObjectTestDriver</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMStatusCodeConstants.*			External.COMConstants.*			External.COMAutomationPools.COMAutomationConstants.*			</imports><category>COM-Automation-Server Samples-All Data Types</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.AutomationAllDataTypesTestDriver</class-id><body>AutomationAllDataTypesTestDriver defines test cases to exercise the interfaces implemented by the COM object implementation allDataTypesCOMObject.  Please refer to the class method #checkListTestCases for expressions that you can evaluate to configure the test environment and execute various test cases." browse checklist expressions "	AutomationAllDataTypesTestDriver browseChecklistMethod: #checkListTestCases.</body></comment><class><name>AutomationSmalltalkCommanderTestDriver</name><environment>Examples</environment><super>Examples.COMAutomationObjectTestDriver</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMStatusCodeConstants.*			External.COMConstants.*			External.COMAutomationPools.COMAutomationConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.AutomationSmalltalkCommanderTestDriver</class-id><body>AutomationSmalltalkCommanderTestDriver defines test cases to exercise the interfaces implemented by the AutomationSmalltalkCommander COM automation object.  Please refer to the class method #checkListTestCases for expressions that you can evaluate to configure the test environment and execute various test cases." browse checklist expressions "	AutomationSmalltalkCommanderTestDriver browseChecklistMethod: #checkListTestCases.</body></comment><class><name>COMAutomationRNGTestDriver</name><environment>Examples</environment><super>Examples.COMAutomationObjectTestDriver</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMStatusCodeConstants.*			External.COMConstants.*			External.COMAutomationPools.COMAutomationConstants.*			</imports><category>COM-Automation-Server Samples-RNG</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.COMAutomationRNGTestDriver</class-id><body>COMAutomationRNGTestDriver defines test cases to exercise the interfaces implemented by the COM object implementation COMAutomationRandomNumberGenerator.  Please refer to the class method #checkListTestCases for expressions that you can evaluate to configure the test environment and execute various test cases." browse checklist expressions "	COMAutomationRNGTestDriver browseChecklistMethod: #checkListTestCases.</body></comment><class><name>IAllDataTypesDisp</name><environment>Examples</environment><super>External.COMDispatchInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-All Data Types</category><attributes><package>Com- Automation Examples</package></attributes></class><class><name>COMAutomationRNGObject</name><environment>Examples</environment><super>Examples.COMRandomNumberGeneratorObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>automationServer </inst-vars><class-inst-vars>iidIRandomNumberGeneratorDisp </class-inst-vars><imports>			External.COMStatusCodeConstants.*			External.COMConstants.*			External.COMAutomationPools.COMAutomationConstants.*			</imports><category>COM-Automation-Server Samples-RNG</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.COMAutomationRNGObject</class-id><body>COMAutomationRNGObject demonstrates adding support for a dispatch interface on an existing COM object by using the generic COMAutomationServer to handle the dispatching support.  This class also demonstrates COM reuse through aggregation: it is implemented as an aggregate object which directly exposes the interface of a contained inner object to clients, namely the IDispatch interface of its automation server.</body></comment><class><name>ISmalltalkCommanderEventDisp</name><environment>Examples</environment><super>External.COMDispatchInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private COMConstants.*			private COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples-Smalltalk Commander</category><attributes><package>Com- Automation Examples</package></attributes></class><comment><class-id>Examples.ISmalltalkCommanderEventDisp</class-id><body>Automatic prototype generation:---------------------------------------------COMInterfaceClassGenerator generateInterfacePrototypeFor: #ISmalltalkCommanderEventDisp.Initialization utilities:-----------------------------ISmalltalkCommanderEventDisp ClassInitializer.</body></comment><class><name>COMAutomationControllerTests</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>missingMethods missingProperties </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Controller Samples</category><attributes><package>Com- Automation Examples</package></attributes></class><shared-variable><name>TypeLibraries</name><environment>Examples.AutomationAllDataTypes</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Com- Automation Examples</package></attributes></shared-variable><shared-variable><name>TypeLibraries</name><environment>Examples.AutomationOnlySmalltalkCommander</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Com- Automation Examples</package></attributes></shared-variable><methods><class-id>Examples.ISmalltalkCommanderDispPointer</class-id> <category>interface operations</category><body package="Com- Automation Examples">Quit	"Invoke the ISmalltalkCommanderDisp::Quit function. Raise an exception if an error occurs. Answer the result code."	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Quit )(             ISmalltalkCommanderDisp __RPC_FAR * This);"	&lt;COM: HRESULT __stdcall Quit( void ) = 9&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Examples.ISmalltalkCommanderDispPointer</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeEvaluate: aBSTR _: resultValue	"Private."	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Evaluate )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [in] */ BSTR Expression,            /* [retval][out] */ VARIANT __RPC_FAR *retval);"	&lt;COM: HRESULT __stdcall Evaluate(BSTR aBSTR, VARIANT* resultValue) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeEvaluateAsString: aBSTR _: resultValue	"Private."		"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EvaluateAsString )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [in] */ BSTR Expression,            /* [retval][out] */ BSTR __RPC_FAR *retval);"	&lt;COM: HRESULT __stdcall EvaluateAsString(BSTR aBSTR, BSTR* resultValue) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeGetLastError: resultValue	"Private."		"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLastError )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [retval][out] */ BSTR __RPC_FAR *retval);"	&lt;COM: HRESULT __stdcall GetLastError(BSTR* resultValue) = 10&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeGetLastErrorStack: resultValue	"Private."		"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLastErrorStack )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [retval][out] */ BSTR __RPC_FAR *retval);"	&lt;COM: HRESULT __stdcall GetLastErrorStack(BSTR* resultValue) = 11&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeGetLog: retval	" Private - invoke the ISmalltalkCommanderDisp::GetLog function. "	&lt;COM: HRESULT __stdcall  GetLog(ISmalltalkCommanderLogDisp * * retval) = 14&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_AnswerErrors: Value	"Private."		"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_AnswerErrors )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_AnswerErrors(VARIANT_BOOL * Value) = 13&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_AnswerErrors: Value	"Private."		"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_AnswerErrors )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [in] */ VARIANT_BOOL Value);"	&lt;COM: HRESULT __stdcall put_AnswerErrors(VARIANT_BOOL Value) = 12&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Examples.IAllDataTypesDispPointer</class-id> <category>interface operations</category><body package="Com- Automation Examples">Quit	"Invoke the IAllDataTypesDisp::Quit function. Raise an exception if an error occurs. Answer the result code."	"/* [helpstring] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Quit )(             IAllDataTypesDisp __RPC_FAR * This);"	&lt;COM: HRESULT __stdcall Quit(void) = 43&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">Reset	"Invoke the IAllDataTypesDisp::Reset function. Raise an exception if an error occurs. Answer the result code."	"/* [helpstring] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )(             IAllDataTypesDisp __RPC_FAR * This);"	&lt;COM: HRESULT __stdcall Reset(void) = 44&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">put_BYTEValue: Value	"Invoke the IAllDataTypesDisp::put_BYTEValue function. Raise an exception if an error occurs. Answer the result code."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BYTEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ BYTE Value);"	&lt;COM: HRESULT __stdcall put_BYTEValue(BYTE Value) = 9&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">put_DOUBLEValue: Value	"Invoke the IAllDataTypesDisp::put_DOUBLEValue function. Raise an exception if an error occurs. Answer the result code."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_DOUBLEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ DOUBLE Value);"	&lt;COM: HRESULT __stdcall put_DOUBLEValue(DOUBLE Value) = 15&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">put_FLOATValue: Value	"Invoke the IAllDataTypesDisp::put_FLOATValue function. Raise an exception if an error occurs. Answer the result code."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_FLOATValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ FLOAT Value);"	&lt;COM: HRESULT __stdcall put_FLOATValue(FLOAT Value) = 13&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">put_LONGValue: Value	"Invoke the IAllDataTypesDisp::put_LONGValue function. Raise an exception if an error occurs. Answer the result code."        "/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_LONGValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ LONG Value);"	&lt;COM: HRESULT __stdcall put_LONGValue(LONG Value) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">put_SCODEValue: Value	"Invoke the IAllDataTypesDisp::put_SCODEValue function. Raise an exception if an error occurs. Answer the result code."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SCODEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SCODE Value);"	&lt;COM: HRESULT __stdcall put_SCODEValue(SCODE Value) = 19&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">put_SHORTValue: Value	"Invoke the IAllDataTypesDisp::put_SHORTValue function. Raise an exception if an error occurs. Answer the result code."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SHORTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SHORT Value);"	&lt;COM: HRESULT __stdcall put_SHORTValue(SHORT Value) = 11&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Examples.IAllDataTypesDispPointer</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeManyArguments: AnIDispatch _: PropertyName _: ANumber _: Value	"Private."        "/* [helpstring] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ManyArguments )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ IDispatch __RPC_FAR *AnIDispatch,            /* [in] */ BSTR PropertyName,            /* [in] */ LONG Number,            /* [retval][out] */ VARIANT __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall ManyArguments(		            IDispatch *AnIDispatch,            		BSTR PropertyName,		            LONG ANumber,		            VARIANT *Value) = 45&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeManyByRefArguments: anIDispatch _: propertyName _: number _: value	" Private - invoke the IAllDataTypesDisp::ManyByRefArguments function. "	"/* [helpstring] */ HRESULT STDMETHODCALLTYPE ManyByRefArguments(             /* [out] */ IDispatch __RPC_FAR *__RPC_FAR *AnIDispatch,            /* [out] */ BSTR __RPC_FAR *PropertyName,            /* [out][in] */ LONG __RPC_FAR *Number,            /* [out][in] */ VARIANT __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall  ManyByRefArguments(		IDispatch * * anIDispatch, 		BSTR * propertyName, 		LONG * number, 		VARIANT * value) = 46&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_BSTRValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ BSTR __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_BSTRValue(BSTR *Value) = 24&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_BYTEValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BYTEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ BYTE __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_BYTEValue(BYTE *Value) = 10&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_CURRENCYValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_CURRENCYValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ CURRENCY __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_CURRENCYValue(CURRENCY *Value) = 32&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_DATEValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_DATEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ DATE __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_DATEValue(DATE *Value) = 22&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_DOUBLEValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_DOUBLEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ DOUBLE __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_DOUBLEValue(DOUBLE *Value) = 16&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_FLOATValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_FLOATValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ FLOAT __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_FLOATValue(FLOAT *Value) = 14&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_IDispatchReference: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_IDispatchReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_IDispatchReference(IDispatch **Value) = 28&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_IUnknownReference: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_IUnknownReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ IUnknown __RPC_FAR *__RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_IUnknownReference(IUnknown **Value) = 26&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_LONGValue: Value	"Private."        "/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_LONGValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ LONG __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_LONGValue(LONG *Value) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_BSTRValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_SAFEARRAY_BSTRValue(SAFEARRAY **Value) = 40&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_DISPATCHValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_DISPATCHValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_SAFEARRAY_DISPATCHValue(SAFEARRAY **Value) = 36&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_I4Value: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_I4Value )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_SAFEARRAY_I4Value(SAFEARRAY **Value) = 34&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_UNKNOWNValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_UNKNOWNValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_SAFEARRAY_UNKNOWNValue(SAFEARRAY **Value) = 38&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_VARIANTValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_SAFEARRAY_VARIANTValue(SAFEARRAY **Value) = 42&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_SCODEValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SCODEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SCODE __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_SCODEValue(SCODE *Value) = 20&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_SHORTValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SHORTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SHORT __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_SHORTValue(SHORT *Value) = 12&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_VARIANTValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ VARIANT __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_VARIANTValue(VARIANT *Value) = 30&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeget_VARIANT_BOOLValue: Value	"Private."	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_VARIANT_BOOLValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall get_VARIANT_BOOLValue(VARIANT_BOOL *Value) = 18&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_BSTRValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ BSTR Value);"	&lt;COM: HRESULT __stdcall put_BSTRValue(BSTR Value) = 23&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_CURRENCYValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_CURRENCYValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ CURRENCY Value);"	&lt;COM: HRESULT __stdcall put_CURRENCYValue(CURRENCY Value) = 31&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_DATEValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_DATEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ DATE Value);"	&lt;COM: HRESULT __stdcall put_DATEValue(DATE Value) = 21&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_IDispatchReference: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_IDispatchReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ IDispatch __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall put_IDispatchReference(IDispatch *Value) = 27&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_IUnknownReference: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_IUnknownReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ IUnknown __RPC_FAR *Value);"	&lt;COM: HRESULT __stdcall put_IUnknownReference(IUnknown *Value) = 25&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_BSTRValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	&lt;COM: HRESULT __stdcall put_SAFEARRAY_BSTRValue(SAFEARRAY *Value) = 39&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_DISPATCHValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_DISPATCHValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	&lt;COM: HRESULT __stdcall put_SAFEARRAY_DISPATCHValue(SAFEARRAY *Value) = 35&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_I4Value: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_I4Value )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	&lt;COM: HRESULT __stdcall put_SAFEARRAY_I4Value(SAFEARRAY *Value) = 33&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_UNKNOWNValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_UNKNOWNValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	&lt;COM: HRESULT __stdcall put_SAFEARRAY_UNKNOWNValue(SAFEARRAY *Value) = 37&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_VARIANTValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	&lt;COM: HRESULT __stdcall put_SAFEARRAY_VARIANTValue(SAFEARRAY *Value) = 41&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_VARIANTValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ VARIANT Value);"	&lt;COM: HRESULT __stdcall put_VARIANTValue(VARIANT Value) = 29&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeput_VARIANT_BOOLValue: Value	"Private."	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_VARIANT_BOOLValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ VARIANT_BOOL Value);"	&lt;COM: HRESULT __stdcall put_VARIANT_BOOLValue(VARIANT_BOOL Value) = 17&gt;	^self externalAccessFailedWith: _errorCode" Note that:/* 0 == FALSE, -1 == TRUE */typedef short VARIANT_BOOL;"</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDispPointer</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeGetDataList: value	" Private - invoke the ISmalltalkCommanderLogDisp::GetDataList function. "	&lt;COM: HRESULT __stdcall  GetDataList(SAFEARRAY * * value) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeGetEvent: index _: retval	" Private - invoke the ISmalltalkCommanderLogDisp::GetEvent function. "	&lt;COM: HRESULT __stdcall  GetEvent(LONG index, ISmalltalkCommanderEventDisp * * retval) = 9&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeGetSize: value	" Private - invoke the ISmalltalkCommanderLogDisp::GetSize function. "	&lt;COM: HRESULT __stdcall  GetSize(LONG * value) = 7&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDispPointer</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeGetCommand: value	" Private - invoke the ISmalltalkCommanderEventDisp::GetCommand function. "	&lt;COM: HRESULT __stdcall  GetCommand(BSTR * value) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Com- Automation Examples">invokeGetTimeStamp: value	" Private - invoke the ISmalltalkCommanderEventDisp::GetTimeStamp function. "	&lt;COM: HRESULT __stdcall  GetTimeStamp(DATE * value) = 7&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Examples.ISmalltalkCommanderDispPointer</class-id> <category>interface operations</category><body package="Com- Automation Examples">Evaluate: aString _: resultReference	"Invoke the ISmalltalkCommanderDisp::Evaluate function. Raise an exception if an error occurs. Answer the result code."	| hresult aBSTR resultBuffer |	aBSTR := BSTR allocateString: aString.	resultBuffer := COMStructure resultValueBufferFor: #VARIANT.	hresult := self invokeEvaluate: aBSTR asPointerParameter _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">EvaluateAsString: aString _: resultReference	"Invoke the ISmalltalkCommanderDisp::Evaluate function. Raise an exception if an error occurs. Answer the result code. "	| hresult aBSTR resultBuffer |	aBSTR := BSTR allocateString: aString.	resultBuffer := BSTR resultValueBuffer.	hresult := self invokeEvaluateAsString: aBSTR asPointerParameter				_: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">GetLastError: resultReference	"Invoke the ISmalltalkCommanderDisp::GetLastError function. Raise an exception if an error occurs. Answer the result code. "	| hresult resultBuffer |	resultBuffer := BSTR resultValueBuffer.	hresult := self invokeGetLastError: resultBuffer asPointerParameter.	resultReference value:  resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">GetLastErrorStack: resultReference	"Invoke the ISmalltalkCommanderDisp::GetLastErrorStack function. Raise an exception if an error occurs. Answer the result code. "	| hresult resultBuffer |	resultBuffer := BSTR resultValueBuffer.	hresult := self invokeGetLastErrorStack: resultBuffer asPointerParameter.	resultReference value:  resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">GetLog: resultReference	" Invoke the ISmalltalkCommanderDisp::GetLog function. "	| hresult resultBuffer |	resultBuffer := ISmalltalkCommanderLogDispPointer resultValueBuffer.	hresult := self invokeGetLog: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_AnswerErrors: resultReference	"Invoke the IAllDataTypesDisp::get_AnswerErrors function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #VARIANT_BOOL.	hresult := self invokeget_AnswerErrors: resultBuffer asPointerParameter.	resultReference value: ( COMExternalInterface booleanFromVARIANT_BOOL: resultBuffer contents ). 	^hresult</body><body package="Com- Automation Examples">put_AnswerErrors: aValue	"Invoke the IAllDataTypesDisp::put_AnswerErrors function. Raise an exception if an error occurs. Answer the result code."	^self invokeput_AnswerErrors: ( COMExternalInterface asVARIANT_BOOL: aValue )</body></methods><methods><class-id>Examples.ISmalltalkCommanderDispPointer class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: (GUID				fromBytes: #[16rB3 16rD2 16rD2 16r5F 16rA8 16r95 16rD0 16r11 16rAC 16rAB 16rE8 4 16r67 0 0 0]).	self updateAndRegister</body></methods><methods><class-id>Examples.IAllDataTypesDispPointer</class-id> <category>interface operations</category><body package="Com- Automation Examples">ManyArguments: anIDispatch _: aPropertyName _: aLong _: aValueReference	"Invoke the IAllDataTypesDisp::ManyArguments function. Raise an exception if an error occurs. Answer the result code."	| aBSTR hresult comVariant |	aBSTR := BSTR allocateString: aPropertyName.	[	comVariant := nil asCOMVariant.	hresult := self invokeManyArguments: anIDispatch asPointerParameter 		_: aBSTR asPointerParameter		_: aLong 		_: comVariant asPointerParameter. "[out,retval]"	aValueReference value: comVariant value	] ensure: [ 		aBSTR enforceRelease. 		comVariant enforceRelease ].	^hresult</body><body package="Com- Automation Examples">ManyByRefArguments: resultReferenceForDispatchOut 	_: resultReferenceForStringOut	_: resultReferenceForLongInOut 	_: resultReferenceForAnyInOut	" Invoke the IAllDataTypesDisp::ManyByRefArguments function. "	| hresult anIDispatch propertyName number comVariant |	anIDispatch := IDispatchPointer resultValueBuffer.	propertyName := BSTR resultValueBuffer.	number := COMExternalInterface scalarResultBufferFor: #LONG.	number value: resultReferenceForLongInOut value.	comVariant := resultReferenceForAnyInOut value asCOMVariant.	hresult := self 		invokeManyByRefArguments: anIDispatch asPointerParameter "out"		_: propertyName asPointerParameter "out"		_: number asPointerParameter "in,out"		_: comVariant asPointerParameter. "in,out"	resultReferenceForDispatchOut value: anIDispatch contents.	resultReferenceForStringOut value: propertyName contents.	resultReferenceForLongInOut value: number contents.	resultReferenceForAnyInOut value: comVariant value.	^hresult</body><body package="Com- Automation Examples">get_BSTRValue: resultReference	"Invoke the IAllDataTypesDisp::get_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| resultBuffer hresult |	resultBuffer := BSTR resultValueBuffer.	hresult := self invokeget_BSTRValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_BYTEValue: resultReference	"Invoke the IAllDataTypesDisp::get_BYTEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #BYTE.	hresult := self invokeget_BYTEValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_CURRENCYValue: resultReference	"Invoke the IAllDataTypesDisp::get_CURRENCYValue function. Raise an exception if an error occurs. Answer the result code."	| hresult cyBuffer |	cyBuffer := COMStructure resultValueBufferFor: #CY.	hresult := self invokeget_CURRENCYValue: cyBuffer asPointerParameter.	resultReference value: cyBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_DATEValue: resultReference	"Invoke the IAllDataTypesDisp::get_DATEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMDate resultValueBuffer.	hresult := self invokeget_DATEValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_DOUBLEValue: resultReference	"Invoke the IAllDataTypesDisp::get_DOUBLEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #DOUBLE.	hresult := self invokeget_DOUBLEValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_FLOATValue: resultReference	"Invoke the IAllDataTypesDisp::get_FLOATValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #FLOAT.	hresult := self invokeget_FLOATValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_IDispatchReference: resultReference	"Invoke the IAllDataTypesDisp::get_IDispatchReference function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := IDispatchPointer resultValueBuffer.	hresult := self invokeget_IDispatchReference: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_IUnknownReference: resultReference	"Invoke the IAllDataTypesDisp::get_IUnknownReference function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := IUnknownPointer resultValueBuffer.	hresult := self invokeget_IUnknownReference: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_LONGValue: resultReference	"Invoke the IAllDataTypesDisp::get_LONGValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #LONG.	hresult := self invokeget_LONGValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_BSTRValue: resultReference	"Invoke the IAllDataTypesDisp::get_SAFEARRAY_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMSafeArray resultValueBufferFor: VT_BSTR.	hresult := self invokeget_SAFEARRAY_BSTRValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_DISPATCHValue: resultReference	"Invoke the IAllDataTypesDisp::get_SAFEARRAY_DISPATCHValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMSafeArray resultValueBufferFor: VT_DISPATCH.	hresult := self invokeget_SAFEARRAY_DISPATCHValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_I4Value: resultReference	"Invoke the IAllDataTypesDisp::get_SAFEARRAY_I4Value function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMSafeArray resultValueBufferFor: VT_I4.	hresult := self invokeget_SAFEARRAY_I4Value: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_UNKNOWNValue: resultReference	"Invoke the IAllDataTypesDisp::get_SAFEARRAY_UNKNOWNValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMSafeArray resultValueBufferFor: VT_UNKNOWN.	hresult := self invokeget_SAFEARRAY_UNKNOWNValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_VARIANTValue: resultReference	"Invoke the IAllDataTypesDisp::get_SAFEARRAY_VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMSafeArray resultValueBufferFor: VT_VARIANT.	hresult := self invokeget_SAFEARRAY_VARIANTValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_SCODEValue: resultReference	"Invoke the IAllDataTypesDisp::get_SCODEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #SCODE.	hresult := self invokeget_SCODEValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_SHORTValue: resultReference	"Invoke the IAllDataTypesDisp::get_SHORTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #SHORT.	hresult := self invokeget_SHORTValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_VARIANTValue: resultReference	"Invoke the IAllDataTypesDisp::VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMStructure resultValueBufferFor: #VARIANT.	hresult := self invokeget_VARIANTValue: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">get_VARIANT_BOOLValue: resultReference	"Invoke the IAllDataTypesDisp::get_VARIANT_BOOLValue function. Raise an exception if an error occurs. Answer the result code."	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #VARIANT_BOOL.	hresult := self invokeget_VARIANT_BOOLValue: resultBuffer asPointerParameter.	resultReference value: ( COMExternalInterface booleanFromVARIANT_BOOL: resultBuffer contents ).	^hresult</body><body package="Com- Automation Examples">put_BSTRValue: aValue	"Invoke the IAllDataTypesDisp::put_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| aBSTR hresult |	aBSTR := BSTR allocateString: aValue.	hresult := self invokeput_BSTRValue: aBSTR asPointerParameter.	^hresult</body><body package="Com- Automation Examples">put_CURRENCYValue: aNumber	"Invoke the IAllDataTypesDisp::put_CURRENCYValue function. Raise an exception if an error occurs. Answer the result code. &lt;aNumber&gt; represents a CURRENCY with a scale of 4."	^self invokeput_CURRENCYValue: ( COMExternalInterface asCYParameter: aNumber )</body><body package="Com- Automation Examples">put_DATEValue: aValue	"Invoke the IAllDataTypesDisp::put_DATEValue function with the argument &lt;aValue&gt; is a Timestamp or a Date. Raise an exception if an error occurs. Answer the result code."	^self invokeput_DATEValue: ( COMExternalInterface asDATEParameter: aValue )</body><body package="Com- Automation Examples">put_IDispatchReference: aValue	"Invoke the IAllDataTypesDisp::put_IDispatchReference function. Raise an exception if an error occurs. Answer the result code."	^self invokeput_IDispatchReference: aValue asPointerParameter</body><body package="Com- Automation Examples">put_IUnknownReference: aValue	"Invoke the IAllDataTypesDisp::put_IUnknownReference function. Raise an exception if an error occurs. Answer the result code."	^self invokeput_IUnknownReference: aValue asPointerParameter</body><body package="Com- Automation Examples">put_SAFEARRAY_BSTRValue: aValue	"Invoke the IAllDataTypesDisp::put_SAFEARRAY_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| hresult aComSA |	aComSA := COMSafeArray fromCollection: aValue elementType: VT_BSTR.	hresult := self invokeput_SAFEARRAY_BSTRValue: aComSA asPointerParameter.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_DISPATCHValue: aValue	"Invoke the IAllDataTypesDisp::put_SAFEARRAY_DISPATCHValue function. Raise an exception if an error occurs. Answer the result code."	| hresult aComSA |	aComSA := COMSafeArray fromCollection: aValue elementType: VT_DISPATCH.	hresult := self invokeput_SAFEARRAY_DISPATCHValue: aComSA asPointerParameter.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_I4Value: aValue	"Invoke the IAllDataTypesDisp::put_SAFEARRAY_I4Value function. Raise an exception if an error occurs. Answer the result code."	| hresult aComSA |	aComSA := COMSafeArray fromCollection: aValue elementType: VT_I4.	hresult := self invokeput_SAFEARRAY_I4Value: aComSA asPointerParameter.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_UNKNOWNValue: aValue	"Invoke the IAllDataTypesDisp::put_SAFEARRAY_UNKNOWNValue function. Raise an exception if an error occurs. Answer the result code."	| hresult aComSA |	aComSA := COMSafeArray fromCollection: aValue elementType: VT_UNKNOWN.	hresult := self invokeput_SAFEARRAY_UNKNOWNValue: aComSA asPointerParameter.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_VARIANTValue: aValue	"Invoke the IAllDataTypesDisp::put_SAFEARRAY_VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	| aComSA |	aComSA := COMSafeArray fromCollection: aValue elementType: VT_VARIANT.	^ self invokeput_SAFEARRAY_VARIANTValue: aComSA asPointerParameter.</body><body package="Com- Automation Examples">put_VARIANTValue: aValue	"Invoke the IAllDataTypesDisp::put_VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	^self invokeput_VARIANTValue: aValue asCOMVariant asStructureParameter</body><body package="Com- Automation Examples">put_VARIANT_BOOLValue: aValue	"Invoke the IAllDataTypesDisp::put_VARIANT_BOOLValue function. Raise an exception if an error occurs. Answer the result code."	^self invokeput_VARIANT_BOOLValue: ( COMExternalInterface asVARIANT_BOOL: aValue )</body></methods><methods><class-id>Examples.IAllDataTypesDispPointer class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: ISmalltalkCommanderDispPointer;"		addLast: IAllDataTypesDispImplementation;  "		yourself</body></methods><methods><class-id>Examples.IAllDataTypesDispPointer class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: (GUID				fromBytes: #[16rE2 16rE8 16r5D 16rDB 16r1F 16rAD 16rD0 16r11 16rAC 16rBE 16r5E 16r86 16rB1 0 0 0]).	self updateAndRegister</body></methods><methods><class-id>Examples.IAllDataTypesDispImplementation</class-id> <category>interface operations</category><body package="Com- Automation Examples">ManyArguments: anIDispatch _: aPropertyName _: aLong _: resultReference 	"Invoke the IAllDataTypes::ManyArguments function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ManyArguments: anIDispatch _: aPropertyName _: aLong _: resultReference 		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">ManyByRefArguments: resultReference _: resultReference1 _: resultReference2 _: value	" Invoke the IAllDataTypesDisp::ManyByRefArguments function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ManyByRefArguments: resultReference _: resultReference1 _: resultReference2 _: value		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">Quit	"Invoke the IAllDataTypes::Quit function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Quit		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">Reset	"Invoke the IAllDataTypes::Reset function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Reset		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_BSTRValue: resultReference 	"Invoke the IAllDataTypes::get_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_BSTRValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_BYTEValue: resultReference 	"Invoke the IAllDataTypes::get_BYTEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_BYTEValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_CURRENCYValue: resultReference 	"Invoke the IAllDataTypes::get_CURRENCYValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_CURRENCYValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_DATEValue: resultReference 	"Invoke the IAllDataTypes::get_DATEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_DATEValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_DOUBLEValue: resultReference 	"Invoke the IAllDataTypes::get_DOUBLEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_DOUBLEValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_FLOATValue: resultReference 	"Invoke the IAllDataTypes::get_FLOATValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_FLOATValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_IDispatchReference: resultReference 	"Invoke the IAllDataTypes::get_IDispatchReference function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_IDispatchReference: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_IUnknownReference: resultReference 	"Invoke the IAllDataTypes::get_IUnknownReference function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_IUnknownReference: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_LONGValue: resultReference 	"Invoke the IAllDataTypes::get_LONGValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_LONGValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_BSTRValue: resultReference 	"Invoke the IAllDataTypes::get_SAFEARRAY_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_SAFEARRAY_BSTRValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_DISPATCHValue: resultReference 	"Invoke the IAllDataTypes::get_SAFEARRAY_DISPATCHValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_SAFEARRAY_DISPATCHValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_I4Value: resultReference 	"Invoke the IAllDataTypes::get_SAFEARRAY_I4Value function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_SAFEARRAY_I4Value: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_UNKNOWNValue: resultReference 	"Invoke the IAllDataTypes::get_SAFEARRAY_UNKNOWNValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_SAFEARRAY_UNKNOWNValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_SAFEARRAY_VARIANTValue: resultReference 	"Invoke the IAllDataTypes::get_SAFEARRAY_VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_SAFEARRAY_VARIANTValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_SCODEValue: resultReference 	"Invoke the IAllDataTypes::get_SCODEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_SCODEValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_SHORTValue: resultReference 	"Invoke the IAllDataTypes::get_SHORTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_SHORTValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_VARIANTValue: resultReference 	"Invoke the IAllDataTypes::get_VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_VARIANTValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_VARIANT_BOOLValue: resultReference 	"Invoke the IAllDataTypes::get_VARIANT_BOOLValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_VARIANT_BOOLValue: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_BSTRValue: aValue	"Invoke the IAllDataTypes::put_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_BSTRValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_BYTEValue: aValue	"Invoke the IAllDataTypes::put_BYTEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_BYTEValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_CURRENCYValue: aValue	"Invoke the IAllDataTypes::put_CURRENCYValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_CURRENCYValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_DATEValue: aValue	"Invoke the IAllDataTypes::put_DATEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_DATEValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_DOUBLEValue: aValue	"Invoke the IAllDataTypes::put_DOUBLEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_DOUBLEValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_FLOATValue: aValue	"Invoke the IAllDataTypes::put_FLOATValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_FLOATValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_IDispatchReference: aValue	"Invoke the IAllDataTypes::put_IDispatchReference function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_IDispatchReference: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_IUnknownReference: aValue	"Invoke the IAllDataTypes::put_IUnknownReference function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_IUnknownReference: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_LONGValue: aValue	"Invoke the IAllDataTypes::put_LONGValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_LONGValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_BSTRValue: aValue	"Invoke the IAllDataTypes::put_SAFEARRAY_BSTRValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_SAFEARRAY_BSTRValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_DISPATCHValue: aValue	"Invoke the IAllDataTypes::put_SAFEARRAY_DISPATCHValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_SAFEARRAY_DISPATCHValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_I4Value: aValue	"Invoke the IAllDataTypes::put_SAFEARRAY_I4Value function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_SAFEARRAY_I4Value: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_UNKNOWNValue: aValue	"Invoke the IAllDataTypes::put_SAFEARRAY_UNKNOWNValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_SAFEARRAY_UNKNOWNValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_SAFEARRAY_VARIANTValue: aValue	"Invoke the IAllDataTypes::put_SAFEARRAY_VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_SAFEARRAY_VARIANTValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_SCODEValue: aValue	"Invoke the IAllDataTypes::put_SCODEValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_SCODEValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_SHORTValue: aValue	"Invoke the IAllDataTypes::put_SHORTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_SHORTValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_VARIANTValue: aValue	"Invoke the IAllDataTypes::put_VARIANTValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_VARIANTValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_VARIANT_BOOLValue: aValue	"Invoke the IAllDataTypes::put_VARIANT_BOOLValue function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_VARIANT_BOOLValue: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>Examples.IAllDataTypesDispImplementation</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeManyArguments: this _: anIDispatch _: aPropertyName _: aLong _: pvarResult	"Private. Invoke the IAllDataTypes::get_VARIANTValue function for an external caller. "	"/* [helpstring] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ManyArguments )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ IDispatch __RPC_FAR *AnIDispatch,            /* [in] */ BSTR PropertyName,            /* [in] */ LONG Number,            /* [retval][out] */ VARIANT __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := COMVariantValueReference new.	hresult := implementor				ManyArguments: (self interfaceAtAddress: anIDispatch type: IDispatch)				_: (self stringAtBSTRPointer: aPropertyName)				_: aLong				_: resultReference.	hresult succeeded		ifTrue: [self variantResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeManyByRefArguments: this _: anIDispatch _: propertyName _: number _: pvariantAny	" Private - invoke the IAllDataTypesDisp::ManyByRefArguments function for an external caller. "	" HRESULT __stdcall  ManyByRefArguments(		IDispatch * * anIDispatch, 		BSTR * propertyName, 		LONG * number, 		VARIANT * value) = 46 "	^	[" terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:"	| hresult resultReferenceForDispatch resultReferenceForName resultReferenceForLong resultReferenceForAny |	self reportExternalFunctionEntry.	anIDispatch isNull ifTrue: [^E_INVALIDARG].	propertyName isNull ifTrue: [^E_INVALIDARG].	number isNull ifTrue: [^E_INVALIDARG].	pvariantAny isNull ifTrue: [^E_INVALIDARG].	"###"	resultReferenceForDispatch := nil asValueReference.	resultReferenceForName := nil asValueReference.	resultReferenceForLong := number asValueReference.	resultReferenceForAny := (self variantValueFrom: pvariantAny)				asValueReference.	self clearResultBufferAtAddress: anIDispatch.	self clearResultBufferAtAddress: propertyName.	self clearResultBufferAtAddress: number.	hresult := implementor				ManyByRefArguments: resultReferenceForDispatch				_: resultReferenceForName				_: resultReferenceForLong				_: resultReferenceForAny.	hresult succeeded		ifTrue: 			[self interfaceResultAtAddress: anIDispatch				put: resultReferenceForDispatch value.			self bstrResultAtAddress: propertyName put: resultReferenceForName value.			self scalarResultAtAddress: number put: resultReferenceForLong value.			self variantResultAtAddress: pvariantAny put: resultReferenceForAny value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeQuit: this 	"Private. Invoke the IAllDataTypesDisp::Quit function for an external caller. "	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Quit )(             IAllDataTypesDisp __RPC_FAR * This);"	^[   " terminate exception stack unwind at external callin boundary "	implementor Quit.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeReset: this 	"Private. Invoke the IAllDataTypesDisp::Quit function for an external caller. "	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )(             IAllDataTypesDisp __RPC_FAR * This);"	^[   " terminate exception stack unwind at external callin boundary "	implementor Reset.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeget_BSTRValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_BSTRValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ BSTR __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_BSTRValue: resultReference.	hresult succeeded		ifTrue: [self bstrResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_BYTEValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_BYTEValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BYTEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ BYTE __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_BYTEValue: resultReference.	hresult succeeded		ifTrue: [self scalarResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_CURRENCYValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_CURRENCYValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_CURRENCYValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ CURRENCY __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_CURRENCYValue: resultReference.	hresult succeeded		ifTrue: [self currencyResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_DATEValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_DATEValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_DATEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ DATE __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_DATEValue: resultReference.	hresult succeeded		ifTrue: [self dateResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_DOUBLEValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_DOUBLEValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_DOUBLEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ DOUBLE __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_DOUBLEValue: resultReference.	hresult succeeded		ifTrue: [self scalarResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_FLOATValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_FLOATValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_FLOATValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ FLOAT __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_FLOATValue: resultReference.	hresult succeeded		ifTrue: [self scalarResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_IDispatchReference: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_IDispatchReference function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_IDispatchReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_IDispatchReference: resultReference.	hresult succeeded		ifTrue: [self interfaceResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_IUnknownReference: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_IUnknownReference function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_IUnknownReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ IUnknown __RPC_FAR *__RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_IUnknownReference: resultReference.	hresult succeeded		ifTrue: [self interfaceResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_LONGValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_LONGValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_LONGValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ LONG __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_LONGValue: resultReference.	hresult succeeded		ifTrue: [self scalarResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_BSTRValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_SAFEARRAY_BSTRValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_SAFEARRAY_BSTRValue: resultReference.	hresult succeeded		ifTrue: 			[self				safeArrayResultPointerAtAddress: pvarResult				put: resultReference value				elementType: VT_BSTR].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_DISPATCHValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_SAFEARRAY_DISPATCHValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_DISPATCHValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_SAFEARRAY_DISPATCHValue: resultReference.	hresult succeeded		ifTrue: 			[self				safeArrayResultPointerAtAddress: pvarResult				put: resultReference value				elementType: VT_DISPATCH].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_I4Value: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_SAFEARRAY_I4Value function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_I4Value )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_SAFEARRAY_I4Value: resultReference.	hresult succeeded		ifTrue: 			[self				safeArrayResultPointerAtAddress: pvarResult				put: resultReference value				elementType: VT_I4].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_UNKNOWNValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_SAFEARRAY_UNKNOWNValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_UNKNOWNValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_SAFEARRAY_UNKNOWNValue: resultReference.	hresult succeeded		ifTrue: 			[self				safeArrayResultPointerAtAddress: pvarResult				put: resultReference value				elementType: VT_UNKNOWN].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_SAFEARRAY_VARIANTValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_SAFEARRAY_VARIANTValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SAFEARRAY_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_SAFEARRAY_VARIANTValue: resultReference.	hresult succeeded		ifTrue: 			[self				safeArrayResultPointerAtAddress: pvarResult				put: resultReference value				elementType: VT_VARIANT].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_SCODEValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_SCODEValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SCODEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SCODE __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_SCODEValue: resultReference.	hresult succeeded		ifTrue: [self scalarResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_SHORTValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_SHORTValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SHORTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ SHORT __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_SHORTValue: resultReference.	hresult succeeded		ifTrue: [self scalarResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_VARIANTValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_VARIANTValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ VARIANT __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := COMVariantValueReference new.	hresult := implementor get_VARIANTValue: resultReference.	hresult succeeded		ifTrue: [self variantResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeget_VARIANT_BOOLValue: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_VARIANT_BOOLValue function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_VARIANT_BOOLValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_VARIANT_BOOLValue: resultReference.	hresult succeeded		ifTrue: 			[self variantBoolResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeput_BSTRValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_BSTRValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ BSTR Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_BSTRValue: ( self stringAtBSTRPointer: aValue ).	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_BYTEValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_BYTEValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BYTEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ BYTE Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_BYTEValue: aValue.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_CURRENCYValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_CURRENCYValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_CURRENCYValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ CURRENCY Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_CURRENCYValue: ( self currencyValueAtAddress: aValue ).	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_DATEValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_DATEValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_DATEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ DATE Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_DATEValue: ( self dateValueAtAddress: aValue ).	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_DOUBLEValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_DOUBLEValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_DOUBLEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ DOUBLE Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_DOUBLEValue: aValue.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_FLOATValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_FLOATValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_FLOATValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ FLOAT Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_FLOATValue: aValue.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_IDispatchReference: this _: aValue	"Private. Invoke the IAllDataTypes::put_IDispatchReference function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_IDispatchReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ IDispatch *Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_IDispatchReference: ( self interfaceAtAddress: aValue type: IDispatch )	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_IUnknownReference: this _: aValue	"Private. Invoke the IAllDataTypes::put_IUnknownReference function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_IUnknownReference )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ IUnknown *Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_IUnknownReference: ( self interfaceAtAddress: aValue type: IUnknown )	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_LONGValue: this _: aValue        "Private. Invoke the IAllDataTypes::put_LONGValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_LONGValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ LONG Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_LONGValue: aValue.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_BSTRValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_SAFEARRAY_BSTRValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_BSTRValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_SAFEARRAY_BSTRValue: ( self safeArrayValueAtAddress: aValue typeCode: VT_BSTR )	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_DISPATCHValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_SAFEARRAY_DISPATCHValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_DISPATCHValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	| safeArray |	^[   " terminate exception stack unwind at external callin boundary "	safeArray := ( self safeArrayValueAtAddress: aValue typeCode: VT_DISPATCH ).	implementor put_SAFEARRAY_DISPATCHValue: safeArray.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_I4Value: this _: aValue	"Private. Invoke the IAllDataTypes::put_SAFEARRAY_I4Value function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_I4Value )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_SAFEARRAY_I4Value: ( self safeArrayValueAtAddress: aValue typeCode: VT_I4 ) 	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_UNKNOWNValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_SAFEARRAY_UNKNOWNValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_UNKNOWNValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	| safeArray |	^	[" terminate exception stack unwind at external callin boundary "	safeArray := self safeArrayValueAtAddress: aValue typeCode: VT_UNKNOWN.	implementor put_SAFEARRAY_UNKNOWNValue: safeArray		]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeput_SAFEARRAY_VARIANTValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_SAFEARRAY_VARIANTValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SAFEARRAY_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SAFEARRAY __RPC_FAR * Value);"	| array |	^	[" terminate exception stack unwind at external callin boundary "	array := self safeArrayValueAtAddress: aValue typeCode: VT_VARIANT.	implementor put_SAFEARRAY_VARIANTValue: array.]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeput_SCODEValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_SCODEValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SCODEValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SCODE Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_SCODEValue: aValue.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_SHORTValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_SHORTValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SHORTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ SHORT Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_SHORTValue: aValue.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_VARIANTValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_VARIANTValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_VARIANTValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ VARIANT Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_VARIANTValue: ( self variantValueFrom: aValue ).	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeput_VARIANT_BOOLValue: this _: aValue	"Private. Invoke the IAllDataTypes::put_VARIANT_BOOLValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_VARIANT_BOOLValue )(             IAllDataTypesDisp __RPC_FAR * This,            /* [in] */ VARIANT_BOOL Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_VARIANT_BOOLValue: ( self booleanFromVariantBool: aValue ).	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>Examples.IAllDataTypesDispImplementation class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: IAllDataTypesDispPointer;		yourself</body></methods><methods><class-id>Examples.IAllDataTypesDispImplementation class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: IAllDataTypesDispPointer iid.	self vtableSignatureTypeName: #__IAllDataTypesDispVtbl.	self updateAndRegister</body></methods><methods><class-id>Examples.ISmalltalkCommanderDisp</class-id> <category>interface operations</category><body package="Com- Automation Examples">evaluate: aString	"Evaluate the Smalltalk expression in &lt;aString&gt; and answer an object."	| resultReference |	resultReference := nil asValueReference.	interface Evaluate: aString _: resultReference.	^resultReference value</body><body package="Com- Automation Examples">evaluateAsString: aString	"Evaluate the Smalltalk expression in &lt;aString&gt; and answer a String."	| resultReference |	resultReference := nil asValueReference.	interface EvaluateAsString: aString _: resultReference.	^resultReference value</body><body package="Com- Automation Examples">getLastError	"Answer the last error message"	| resultReference |	resultReference := nil asValueReference.	interface GetLastError: resultReference.	^resultReference value</body><body package="Com- Automation Examples">getLastErrorStack	"Answer the last error message stack."	| resultReference |	resultReference := nil asValueReference.	interface GetLastErrorStack: resultReference.	^resultReference value</body><body package="Com- Automation Examples">getLog	" Invoke the ISmalltalkCommanderDisp::GetLog function. "	| resultReference |	resultReference := ISmalltalkCommanderLogDisp new asValueReference.	interface GetLog: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_AnswerErrors	"Answer the AnswerErrors property."	| resultReference |	resultReference := nil asValueReference.	interface get_AnswerErrors: resultReference.	^resultReference value</body><body package="Com- Automation Examples">put_AnswerErrors: aValue	"Set the AnswerErrors property."	interface put_AnswerErrors: aValue</body><body package="Com- Automation Examples">quit	"Quit the Smalltalk process."	interface Quit</body></methods><methods><class-id>Examples.ISmalltalkCommanderDisp class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: IAllDataTypesDispImplementation;		yourself</body></methods><methods><class-id>Examples.ISmalltalkCommanderDisp class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: ISmalltalkCommanderDispPointer iid.	self updateAndRegister</body></methods><methods><class-id>Examples.SmalltalkCommanderEventCOMObject</class-id> <category>operations</category><body package="Com- Automation Examples">GetCommand: resultReference	" Invoke the ISmalltalkCommanderEventDisp::GetCommand function. "	resultReference value: self publishedObject command.	^S_OK</body><body package="Com- Automation Examples">GetTimeStamp: resultReference	" Invoke the ISmalltalkCommanderEventDisp::GetTimeStamp function. "	resultReference value: self publishedObject timestamp.	^S_OK</body></methods><methods><class-id>Examples.SmalltalkCommanderEventCOMObject</class-id> <category>accessing</category><body package="Com- Automation Examples">queryEventDualInterface	"Query the receiver for the interface specified by the GUID for this object's event dual interface.  Answer the interface if it is supported, else answer nil. "	^self queryInterface: ISmalltalkCommanderEventDisp iid</body></methods><methods><class-id>Examples.SmalltalkCommanderEventCOMObject class</class-id> <category>private-initialization</category><body package="Com- Automation Examples">initialize	"This method is run at COM Connect installation time. 	Public objects have a CLSID, private objects need not. 	Only objects with a CLSID can have a class factory registered for them."	"self initialize"	super initialize.	self 		clsid: nil; 		dualInterfaceClass: ISmalltalkCommanderEventDisp; 		specificationTable: nil " specificationTable "</body></methods><methods><class-id>Examples.SmalltalkCommanderEventCOMObject class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: ISmalltalkCommanderDisp;		yourself</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject</class-id> <category>operations</category><body package="Com- Automation Examples">Evaluate: aString _: resultValueReference	"Implement ISmalltalkCommanderDisp::Evaluate."		| result |	result := self publishedObject Evaluate: aString.	resultValueReference value: result.	^S_OK</body><body package="Com- Automation Examples">EvaluateAsString: aString _: resultValueReference	"Implement ISmalltalkCommanderDisp::EvaluateAsString."	| result |	result := self publishedObject EvaluateAsString: aString.	resultValueReference value: result.	^S_OK</body><body package="Com- Automation Examples">GetLastError: resultValueReference	"Implement ISmalltalkCommanderDisp::GetLastError."	| result |	result := self publishedObject GetLastError.	resultValueReference value: result.	^S_OK</body><body package="Com- Automation Examples">GetLastErrorStack: resultValueReference	"Implement ISmalltalkCommanderDisp::GetLastError."	| result |	result := self publishedObject GetLastErrorStack.	resultValueReference value: result.	^S_OK</body><body package="Com- Automation Examples">GetLog: resultValueReference	"Implement ISmalltalkCommanderDisp::GetLog."	| result |	result := self log queryLogDualInterface.	resultValueReference value: result.	^S_OK</body><body package="Com- Automation Examples">Quit	"Implement ISmalltalkCommanderDisp::Quit."		self publishedObject Quit.	^S_OK</body><body package="Com- Automation Examples">get_AnswerErrors: resultValueReference	"Implement ISmalltalkCommanderDisp::get_AnswerErrors."	| result |	result := self publishedObject getAnswerErrors.	resultValueReference value: result.	^S_OK</body><body package="Com- Automation Examples">put_AnswerErrors: aValue	"Implement ISmalltalkCommanderDisp::put_AnswerErrors."	self publishedObject setAnswerErrors: aValue.	^S_OK</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject</class-id> <category>private-access</category><body package="Com- Automation Examples">log	"Answer the log wrapped by a SmalltalkCommanderLogCOMObject. Cache the SmalltalkCommanderLogCOMObject in the receiver."	log isNil ifTrue: [log := SmalltalkCommanderLogCOMObject on: self publishedObject log].	^log</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject</class-id> <category>initialize</category><body package="Com- Automation Examples">initialize	"Answer a new initialized instance of the receiver."	super initialize.	^self publishedObject: AutomationSmalltalkCommander new "This is the domain object"</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject class</class-id> <category>private-initialization</category><body package="Com- Automation Examples">finalize	"This method is run at COM Connect un-installation time."	" self finalize "	super finalize.	self clsid: nil.	self dualInterfaceClass: nil.</body><body package="Com- Automation Examples">initialize	"This method is run at COM Connect installation time. 	Public objects have a CLSID, private objects need not. 	Only objects with a CLSID can have a class factory registered for them."	"self initialize"	super initialize.	self 		clsid: AutomationOnlySmalltalkCommander clsid; 		dualInterfaceClass: ISmalltalkCommanderDisp; 		specificationTable: AutomationOnlySmalltalkCommander specificationTable</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: ISmalltalkCommanderDisp;		yourself</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject class</class-id> <category>session management</category><body package="Com- Automation Examples">startUpApplication	"Start up the Automation object server."	super startUpApplication.	"You can override the default for server application termination:"	"self exitIfNotInUse: true."	"You can also change the adaptor binding policy:"	"self useAdaptorBinding: true."	"You can register other class factories from public objects."	"MyOtherCOMObject1 registerServerClassFactory"	"You can register other class factories and type libraries from public objects at the same time too."	"MyOtherCOMObject2 registerClassFactoryAndLibraries"	"Or just the type libraries in the case of a private object."	"MyOtherCOMObject3 updateTypeLibraries"</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject class</class-id> <category>registering</category><body package="Com- Automation Examples">comRegistrationSpec	"Returns the specification which allows registering the component from the command-line"	^ COMAutomationRegistration new		versionIndependentDescription: 'VisualWorks Smalltalk Commander';		versionIndependentProgID: 'VisualWorks.SmalltalkCommander';		majorVersion: 1;		minorVersion: 0;		clsid: self clsid;		typeLibraries: self typeLibraries;		yourself</body></methods><methods><class-id>Examples.SmalltalkCommanderCOMObject class</class-id> <category>type libraries</category><body package="Com- Automation Examples">getTypeLibraries	"Answer a Collection of the type libraries used for the application. The locale ID must be specified for each COMTypeLibrary since the framework will use this field as an index."	| myTypeLibraries |	myTypeLibraries := OrderedCollection new.	myTypeLibraries 		add: self newTypeLibraryNeutral.	^myTypeLibraries</body><body package="Com- Automation Examples">newTypeLibraryNeutral	"Answer a type library for the English language for the application."	^COMTypeLibrary new		libraryID: AutomationOnlySmalltalkCommander typeLibraryID;		lcid: Win32ExternalInterface lcidNeutral;		directoryName: COMSessionManager absoluteCOMDirectoryName, 'Examples\COMAuto\StCom\DualInterfaceTypeLibrary';		fileName: 'VwStCom.tlb';		majorVersion: 1;				minorVersion: 0</body></methods><methods><class-id>Examples.AllDataTypesCOMObject</class-id> <category>operations-properties</category><body package="Com- Automation Examples">get_BSTRValue: resultValueReference	"Implement IAllDataTypesDisp::get_BSTRValue."		resultValueReference value: ( self publishedObject getBSTRValue ).	^S_OK</body><body package="Com- Automation Examples">get_BYTEValue: resultValueReference	"Implement IAllDataTypesDisp::get_BYTEValue."		resultValueReference value: ( self publishedObject getBYTEValue ).	^S_OK</body><body package="Com- Automation Examples">get_CURRENCYValue: resultValueReference	"Implement IAllDataTypesDisp::get_CURRENCYValue."		resultValueReference value: ( self publishedObject getCURRENCYValue ).	^S_OK</body><body package="Com- Automation Examples">get_DATEValue: resultValueReference	"Implement IAllDataTypesDisp::get_DATEValue."		resultValueReference value: ( self publishedObject getDATEValue ).	^S_OK</body><body package="Com- Automation Examples">get_DOUBLEValue: resultValueReference	"Implement IAllDataTypesDisp::get_DOUBLEValue."		resultValueReference value: ( self publishedObject getDOUBLEValue ).	^S_OK</body><body package="Com- Automation Examples">get_FLOATValue: resultValueReference	"Implement IAllDataTypesDisp::get_FLOATValue."		resultValueReference value: ( self publishedObject getFLOATValue ).	^S_OK</body><body package="Com- Automation Examples">get_IDispatchReference: resultValueReference	"Implement IAllDataTypesDisp::get_IDispatchReference."		resultValueReference value: ( self publishedObject getIDispatchReference ).	^S_OK</body><body package="Com- Automation Examples">get_IUnknownReference: resultValueReference	"Implement IAllDataTypesDisp::get_IUnknownReference."		resultValueReference value: ( self publishedObject getIUnknownReference ).	^S_OK</body><body package="Com- Automation Examples">get_LONGValue: resultValueReference	"Implement IAllDataTypesDisp::get_LONGValue."		resultValueReference value: ( self publishedObject getLONGValue ).	^S_OK</body><body package="Com- Automation Examples">get_SAFEARRAY_BSTRValue: resultValueReference	"Implement IAllDataTypesDisp::get_SAFEARRAY_BSTRValue."		resultValueReference value: ( self publishedObject getSAFEARRAY_BSTRValue ).	^S_OK</body><body package="Com- Automation Examples">get_SAFEARRAY_DISPATCHValue: resultValueReference	"Implement IAllDataTypesDisp::get_SAFEARRAY_DISPATCHValue."		resultValueReference value: ( self publishedObject getSAFEARRAY_DISPATCHValue ).	^S_OK</body><body package="Com- Automation Examples">get_SAFEARRAY_I4Value: resultValueReference	"Implement IAllDataTypesDisp::get_SAFEARRAY_I4Value."		resultValueReference value: ( self publishedObject getSAFEARRAY_I4Value ).	^S_OK</body><body package="Com- Automation Examples">get_SAFEARRAY_UNKNOWNValue: resultValueReference	"Implement IAllDataTypesDisp::get_SAFEARRAY_UNKNOWNValue."		resultValueReference value: ( self publishedObject getSAFEARRAY_UNKNOWNValue ).	^S_OK</body><body package="Com- Automation Examples">get_SAFEARRAY_VARIANTValue: resultValueReference	"Implement IAllDataTypesDisp::get_SAFEARRAY_VARIANTValue."		resultValueReference value: ( self publishedObject getSAFEARRAY_VARIANTValue ).	^S_OK</body><body package="Com- Automation Examples">get_SCODEValue: resultValueReference	"Implement IAllDataTypesDisp::get_SCODEValue."		resultValueReference value: ( self publishedObject getSCODEValue ).	^S_OK</body><body package="Com- Automation Examples">get_SHORTValue: resultValueReference	"Implement IAllDataTypesDisp::get_SHORTValue."		resultValueReference value: ( self publishedObject getSHORTValue ).	^S_OK</body><body package="Com- Automation Examples">get_VARIANTValue: resultValueReference	"Implement IAllDataTypesDisp::get_VARIANTValue."		resultValueReference value: ( self publishedObject getVARIANTValue ).	^S_OK</body><body package="Com- Automation Examples">get_VARIANT_BOOLValue: resultValueReference	"Implement IAllDataTypesDisp::get_VARIANT_BOOLValue."		resultValueReference value: ( self publishedObject getVARIANT_BOOLValue ).	^S_OK</body><body package="Com- Automation Examples">put_BSTRValue: aValue	"Implement IAllDataTypesDisp::setBSTRValue."		self publishedObject setBSTRValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_BYTEValue: aValue	"Implement IAllDataTypesDisp::setBYTEValue."		self publishedObject setBYTEValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_CURRENCYValue: aValue	"Implement IAllDataTypesDisp::setCURRENCYValue."		self publishedObject setCURRENCYValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_DATEValue: aValue	"Implement IAllDataTypesDisp::setDATEValue."		self publishedObject setDATEValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_DOUBLEValue: aValue	"Implement IAllDataTypesDisp::setDOUBLEValue."		self publishedObject setDOUBLEValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_FLOATValue: aValue	"Implement IAllDataTypesDisp::setFLOATValue."		self publishedObject setFLOATValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_IDispatchReference: aValue	"Implement IAllDataTypesDisp::setIDispatchReference."		self publishedObject setIDispatchReference: aValue.	^S_OK</body><body package="Com- Automation Examples">put_IUnknownReference: aValue	"Implement IAllDataTypesDisp::setIUnknownReference."		self publishedObject setIUnknownReference: aValue.	^S_OK</body><body package="Com- Automation Examples">put_LONGValue: aValue	"Implement IAllDataTypesDisp::setLONGValue."		self publishedObject setLONGValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_SAFEARRAY_BSTRValue: aValue	"Implement IAllDataTypesDisp::setSAFEARRAY_BSTRValue."		self publishedObject setSAFEARRAY_BSTRValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_SAFEARRAY_DISPATCHValue: aValue	"Implement IAllDataTypesDisp::setSAFEARRAY_DISPATCHValue."		self publishedObject setSAFEARRAY_DISPATCHValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_SAFEARRAY_I4Value: aValue	"Implement IAllDataTypesDisp::setSAFEARRAY_I4Value."		self publishedObject setSAFEARRAY_I4Value: aValue.	^S_OK</body><body package="Com- Automation Examples">put_SAFEARRAY_UNKNOWNValue: aValue	"Implement IAllDataTypesDisp::setSAFEARRAY_UNKNOWNValue."		self publishedObject setSAFEARRAY_UNKNOWNValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_SAFEARRAY_VARIANTValue: aValue	"Implement IAllDataTypesDisp::setSAFEARRAY_VARIANTValue."		self publishedObject setSAFEARRAY_VARIANTValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_SCODEValue: aValue	"Implement IAllDataTypesDisp::setSCODEValue."		self publishedObject setSCODEValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_SHORTValue: aValue	"Implement IAllDataTypesDisp::setSHORTValue."		self publishedObject setSHORTValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_VARIANTValue: aValue	"Implement IAllDataTypesDisp::setVARIANTValue."		self publishedObject setVARIANTValue: aValue.	^S_OK</body><body package="Com- Automation Examples">put_VARIANT_BOOLValue: aValue	"Implement IAllDataTypesDisp::setVARIANT_BOOLValue."		self publishedObject setVARIANT_BOOLValue: aValue.	^S_OK</body></methods><methods><class-id>Examples.AllDataTypesCOMObject</class-id> <category>operations-methods</category><body package="Com- Automation Examples">ManyArguments: anIDispatch _: aPropertyName _: aLong _: resultReference	"Implement ISmalltalkCommanderDisp::ManyArguments."	resultReference value: ( self publishedObject 		manyArguments: anIDispatch 		propertyName: aPropertyName 		aLong: aLong ).	^S_OK</body><body package="Com- Automation Examples">ManyByRefArguments: aValueReferenceIDispatch 	_: aValueReferenceString 	_: aValueReferenceLong	_: aValueReferenceAny 	self publishedObject 		manyByRefArguments: aValueReferenceIDispatch 		propertyName: aValueReferenceString 		aLong: aValueReferenceLong 		variantReference: aValueReferenceAny.	^S_OK</body><body package="Com- Automation Examples">Quit	"Implement ISmalltalkCommanderDisp::Quit."		self publishedObject Quit.	^S_OK</body><body package="Com- Automation Examples">Reset	"Implement ISmalltalkCommanderDisp::Reset."		self publishedObject Reset.	^S_OK</body></methods><methods><class-id>Examples.AllDataTypesCOMObject</class-id> <category>subclass-releasing</category><body package="Com- Automation Examples">releaseResources	" Private - release resources associated with the receiver. "	self publishedObject releaseResources.	super releaseResources.</body></methods><methods><class-id>Examples.AllDataTypesCOMObject</class-id> <category>initialize</category><body package="Com- Automation Examples">initialize	"Answer a new initialized instance of the receiver."	super initialize.	^self publishedObject: AutomationAllDataTypes new "This is the domain object"</body></methods><methods><class-id>Examples.AllDataTypesCOMObject</class-id> <category>subclass-reference counting</category><body package="Com- Automation Examples">incrementReferenceCount	" Private - increment the receiver's reference count.  This is the sum of the outstanding reference counts on all of its interfaces. "	^ super incrementReferenceCount</body></methods><methods><class-id>Examples.AllDataTypesCOMObject class</class-id> <category>private-initialization</category><body package="Com- Automation Examples">finalize	"This method is run at COM Connect un-installation time."	" self finalize "	super finalize.	self clsid: nil.	self dualInterfaceClass: nil.</body><body package="Com- Automation Examples">initialize	"This method is run at COM Connect installation time. 	Public objects have a CLSID, private objects need not. 	Only objects with a CLSID can have a class factory registered for them."	"self initialize"	super initialize.	self		clsid: self defaultClsid;		dualInterfaceClass: IAllDataTypesDisp;		specificationTable: AutomationAllDataTypes specificationTable</body></methods><methods><class-id>Examples.AllDataTypesCOMObject class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: SmalltalkCommanderCOMObject;		yourself</body></methods><methods><class-id>Examples.AllDataTypesCOMObject class</class-id> <category>registering</category><body package="Com- Automation Examples">comRegistrationSpec	"Returns the specification which allows registering the component from the command-line"	^ COMAutomationRegistration new		versionIndependentDescription: 'VisualWorks All Data Types Example';		versionIndependentProgID: 'VisualWorks.AllDataTypes';		typeLibraries: self typeLibraries;		majorVersion: 1;		minorVersion: 0;		clsid: self clsid;		yourself</body></methods><methods><class-id>Examples.AllDataTypesCOMObject class</class-id> <category>type libraries</category><body package="Com- Automation Examples">defaultClsid	^GUID		fromBytes: #[16rC6 16r94 16rD7 16rEA 16r58 16r96 16r2C 16r4C 16rBE 16r97 16rF8 16r6B 16rDA 16r33 16r38 16rFB]</body><body package="Com- Automation Examples">getTypeLibraries	"Answer a Collection of the type libraries used for the application. The locale ID must be specified for each COMTypeLibrary since the framework will use this field as an index."	| myTypeLibraries |	myTypeLibraries := OrderedCollection new.	myTypeLibraries 		add: self newTypeLibraryNeutral.	^myTypeLibraries</body><body package="Com- Automation Examples">lcid	^Win32ExternalInterface lcidNeutral</body><body package="Com- Automation Examples">newTypeLibraryNeutral	"Answer a type library for the English language for the application."	^(COMTypeLibrary new)		libraryID: self typeLibraryID;		lcid: self lcid;		directoryName: COMSessionManager absoluteCOMDirectoryName					, 'Examples\COMAuto\AllDataT\TypeLibrary';		fileName: 'VwAllDT.tlb';		majorVersion: 1;		minorVersion: 0</body><body package="Com- Automation Examples">typeLibraryID	^ GUID fromString: '{6A693FAC-D5E6-4D5B-909B-0C05834A58A1}'</body></methods><methods><class-id>Examples.AutomationAllDataTypes</class-id> <category>operations-properties</category><body package="Com- Automation Examples">getBSTRValue	"Answer the BSTRValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyBSTRValue</body><body package="Com- Automation Examples">getBYTEValue	"Answer the BYTEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyBYTEValue</body><body package="Com- Automation Examples">getCURRENCYValue	"Answer the CURRENCYValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyCURRENCYValue</body><body package="Com- Automation Examples">getDATEValue	"Answer the DATEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyDATEValue</body><body package="Com- Automation Examples">getDOUBLEValue	"Answer the DOUBLEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyDOUBLEValue</body><body package="Com- Automation Examples">getFLOATValue	"Answer the FLOATValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyFLOATValue</body><body package="Com- Automation Examples">getIDispatchReference	"Answer the IDispatchReference property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. The answer is a separate reference of the interface that must be released by the caller."	^propertyIDispatchReference</body><body package="Com- Automation Examples">getIUnknownReference	"Answer the IUnknownReference property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. The answer is a separate reference of the interface that must be released by the caller."	^propertyIUnknownReference</body><body package="Com- Automation Examples">getLONGValue	"Answer the LONGValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyLONGValue</body><body package="Com- Automation Examples">getSAFEARRAY_BSTRValue	"Answer the SAFEARRAY_BSTRValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertySAFEARRAY_BSTRValue</body><body package="Com- Automation Examples">getSAFEARRAY_DISPATCHValue	"Answer the SAFEARRAY_DISPATCHValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. The answer is made of separate references of the interfaces that must each be released by the caller."	^propertySAFEARRAY_DISPATCHValue</body><body package="Com- Automation Examples">getSAFEARRAY_I4Value	"Answer the SAFEARRAY_I4Value property. Answer an array of Smalltalk object that have been mapped to it's Automation counterpart."	^propertySAFEARRAY_I4Value</body><body package="Com- Automation Examples">getSAFEARRAY_UNKNOWNValue	"Answer the SAFEARRAY_UNKNOWNValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. The answer is made of separate references of the interfaces that must each be released by the caller."	^propertySAFEARRAY_UNKNOWNValue</body><body package="Com- Automation Examples">getSAFEARRAY_VARIANTValue	"Answer the propertySAFEARRAY_VARIANTValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. If the array contains interfaces, the answer is made of separate references of the interfaces that must each be released by the caller."	^propertySAFEARRAY_VARIANTValue</body><body package="Com- Automation Examples">getSCODEValue	"Answer the SCODEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertySCODEValue</body><body package="Com- Automation Examples">getSHORTValue	"Answer the SHORTValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertySHORTValue</body><body package="Com- Automation Examples">getVARIANTValue	"Answer the VARIANTValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	" A Variant may hold an Interface which must be separate reference counted [AA 08/2004]"	^ propertyVARIANTValue</body><body package="Com- Automation Examples">getVARIANT_BOOLValue	"Answer the VARIANT_BOOLValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	^propertyVARIANT_BOOLValue</body><body package="Com- Automation Examples">setBSTRValue: aValue	"Set the BSTRValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyBSTRValue := aValue</body><body package="Com- Automation Examples">setBYTEValue: aValue	"Set the BYTEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyBYTEValue := aValue</body><body package="Com- Automation Examples">setCURRENCYValue: aValue	"Set the CURRENCYValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyCURRENCYValue := aValue</body><body package="Com- Automation Examples">setDATEValue: aValue	"Set the DATEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyDATEValue := aValue</body><body package="Com- Automation Examples">setDOUBLEValue: aValue	"Set the DOUBLEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyDOUBLEValue := aValue</body><body package="Com- Automation Examples">setFLOATValue: aValue	"Set the FLOATValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyFLOATValue := aValue</body><body package="Com- Automation Examples">setIDispatchReference: aValue	"Set the IDispatchReference property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyIDispatchReference := aValue</body><body package="Com- Automation Examples">setIUnknownReference: aValue	"Set the IUnknownReference property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyIUnknownReference := aValue.</body><body package="Com- Automation Examples">setLONGValue: aValue	"Set the LONGValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyLONGValue := aValue</body><body package="Com- Automation Examples">setSAFEARRAY_BSTRValue: aValue	"Set the SAFEARRAY_BSTRValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertySAFEARRAY_BSTRValue := aValue</body><body package="Com- Automation Examples">setSAFEARRAY_DISPATCHValue: aValue	"Set the SAFEARRAY_DISPATCHValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart. Make sure to free the current value."	propertySAFEARRAY_DISPATCHValue := aValue</body><body package="Com- Automation Examples">setSAFEARRAY_I4Value: aValue	"Set the SAFEARRAY_I4Value property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertySAFEARRAY_I4Value := aValue</body><body package="Com- Automation Examples">setSAFEARRAY_UNKNOWNValue: aValue	"Set the SAFEARRAY_UNKNOWNValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertySAFEARRAY_UNKNOWNValue := aValue.</body><body package="Com- Automation Examples">setSAFEARRAY_VARIANTValue: aValue	"Set the SAFEARRAY_DISPATCHValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertySAFEARRAY_VARIANTValue := aValue.</body><body package="Com- Automation Examples">setSCODEValue: aValue	"Set the SCODEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertySCODEValue := aValue</body><body package="Com- Automation Examples">setSHORTValue: aValue	"Set the SHORTValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertySHORTValue := aValue</body><body package="Com- Automation Examples">setVARIANTValue: aValue	"Set the VARIANTValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's 	Automation counterpart. Make sure to free the current value."	propertyVARIANTValue := aValue</body><body package="Com- Automation Examples">setVARIANT_BOOLValue: aValue	"Set the VARIANT_BOOLValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	propertyVARIANT_BOOLValue := aValue</body></methods><methods><class-id>Examples.AutomationAllDataTypes</class-id> <category>operations-methods</category><body package="Com- Automation Examples">ManyArguments: anIDispatch _: aPropertyName _: aLong	"An example with multiple arguments. Answer a String containing the result of getting the property &lt;aPropertyName&gt; from &lt;anIDispatch&gt; followed by the string version of &lt;aLong&gt;."	^self manyArguments: anIDispatch propertyName: aPropertyName aLong: aLong</body><body package="Com- Automation Examples">ManyByRefArguments: aValueReferenceIDispatch _: aValueReferenceString _: aValueReferenceLong _: aValueReferenceAny	"An example with multiple arguments by reference. No answer. Fill in the arguments with some data."	^self 		manyByRefArguments: aValueReferenceIDispatch 		propertyName: aValueReferenceString 		aLong: aValueReferenceLong 		variantReference: aValueReferenceAny</body><body package="Com- Automation Examples">Quit	"Quit the Smalltalk process."	COMSessionManager terminateServerDeferred.</body><body package="Com- Automation Examples">Reset	"Reset the values in the receiver to the initialized state."	self initialize</body><body package="Com- Automation Examples">manyArguments: anIDispatch propertyName: aPropertyName aLong: aLong	"An example with multiple arguments. Answer a String containing the result of getting the property &lt;aPropertyName&gt; from &lt;anIDispatch&gt; followed by the string version of &lt;aLong&gt;."	| aValue |	[ aValue := anIDispatch asDispatchDriver getProperty: aPropertyName ]		on: COMError do: [ :exp | (#ErrorInManyArguments &lt;&lt; #com &gt;&gt; 'Error getting the property in method ''ManyArguments''.') asString ].	^aValue printString, ', ', aLong printString</body><body package="Com- Automation Examples">manyByRefArguments: aValueReferenceIDispatch propertyName: aValueReferenceString aLong: aValueReferenceInteger variantReference: aValueReferenceAny	"An example with multiple by reference arguments. No answer. Fill in the arguments with some data"	aValueReferenceIDispatch		ifNotNil: [aValueReferenceIDispatch value: self getIDispatchReference].	aValueReferenceString		ifNotNil: 			[aValueReferenceString				value: (#StringValueByReference &lt;&lt; #com						&gt;&gt; 'This String value filled in by reference') asString].	aValueReferenceInteger ifNotNil: [aValueReferenceInteger value: 999].	aValueReferenceAny ifNotNil: [aValueReferenceAny value: 1000]</body></methods><methods><class-id>Examples.AutomationAllDataTypes</class-id> <category>initialize</category><body package="Com- Automation Examples">initialize	"Initialize the receiver with default values."	self setLONGValue: 0.	self setBYTEValue: 0.	self setSHORTValue: 0 .	self setFLOATValue: 0.0.	self setDOUBLEValue: 0.0d.	self setVARIANT_BOOLValue: 0 .	self setSCODEValue: 0.	self setDATEValue: Timestamp now.	self setBSTRValue: (#NothingAtAll &lt;&lt; #com &gt;&gt; 'Nothing at all') asString.	self setIUnknownReference: nil.	self setIDispatchReference: nil.	self setVARIANTValue: 0.		self setCURRENCYValue: FixedPoint zero.	self setSAFEARRAY_I4Value: Array new.	self setSAFEARRAY_DISPATCHValue: Array new.	self setSAFEARRAY_UNKNOWNValue: Array new.	self setSAFEARRAY_BSTRValue: Array new.	self setSAFEARRAY_VARIANTValue: Array new.</body></methods><methods><class-id>Examples.AutomationAllDataTypes</class-id> <category>releasing</category><body package="Com- Automation Examples">releaseResources	"Private - Release resources associated with the receiver."	self setIDispatchReference: nil.	self setIUnknownReference: nil.	self setSAFEARRAY_DISPATCHValue: nil.	self setSAFEARRAY_UNKNOWNValue: nil.	self setSAFEARRAY_VARIANTValue: nil.	self setVARIANTValue: nil.</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>identity</category><body package="Com- Automation Examples">clsid	"Answer the CLSID under which a the receiver is published as an Automation object."	" '{DB5DE8E3-AD1F-11d0-ACBE-5E86B1000000}' asGUID storeString "		^GUID fromBytes: #[ 16rE3 16rE8 16r5D 16rDB 16r1F 16rAD 16rD0 16r11 16rAC 16rBE 16r5E 16r86 16rB1 0 0 0 ]</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>instance creation</category><body package="Com- Automation Examples">new	"Answer a new initialized instance of the receiver."	^super new initialize</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>private-initialization</category><body package="Com- Automation Examples">obsolete	"The receiver was removed from the system and is now obsolete. Perform any necessary clean-up. Answer the receiver."	self removeSessionEventHandlers.	^super obsolete</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>private-specification table construction</category><body package="Com- Automation Examples">literalSpecification	"Private. Answer a collection containing the dispatch specifications for publishing."	" Type Library VWALLDT Dispatch Interfaces "	" Generated by COMAutomationTypeAnalyzer on November 23, 1998 14:49:42.000 "	" From VisualWorksÂ®, Release 3.0 of February 5, 1998 "	" This is the specification table literal for the dispatch Interface: 			Name:		IAllDataTypesDisp			Locale ID:	1033			IID:			{DB5DE8E2-AD1F-11D0-ACBE-5E86B1000000}			Methods:	4			Properties:	18	 This interface is indexed for use by a server. "	" Specification Table Header "	^#( #COMDispatchSpecificationTable		#specificationKey: #memberID		#name: 'IAllDataTypesAuto'		#iid: #( #GUID #[ 16rE4 16r43 16rA1 4 16r3D 16r88 16rE4 16r4E 16rB2 16rD2 16r7F 16rB7 16r44 16r73 16rA5 16r1E ]  )		#lcid: 1033		" Methods (4) "		" The selector sent to the published object is by default the method name itself. "		" The keyword for method arguments is by default #with: "		" The selector can be set manually in each method specification by using the pattern: "		" 	#selector: #mySelector "		#( 'method' 'Quit' 16r60020024			)		#( 'method' 'Reset' 16r60020025			)		#( 'method' 'ManyArguments' 16r60020026			#typeCode: #VT_VARIANT			#parameterTypes: #( #VT_DISPATCH #VT_BSTR #VT_I4 )			#parameterNames: #( 'AnIDispatch' 'PropertyName' 'Number' )			)		#( 'method' 'ManyByRefArguments' 16r60020027			#parameterTypes: #( #( #VT_DISPATCH #VT_BYREF ) #( #VT_BSTR #VT_BYREF ) #( #VT_I4 #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'AnIDispatch' 'PropertyName' 'Number' 'Value' )			)		"  Properties (18)  "		" The selector sent to the published object to set a property is by default set&lt;PropertyName&gt;: "		" The selector sent to the published object to get a property is by default get&lt;PropertyName&gt;: "		" The selector can be set manually in each property specification by using the pattern: "		" 	#setSelector: #mySelector: "		" 	#getSelector: #mySelector "		#( 'property' 'LONGValue' 16r60020000			#typeCode: #VT_I4			#parameterTypes: #( #VT_I4 )			)		#( 'property' 'BYTEValue' 16r60020002			#typeCode: #VT_UI1			#parameterTypes: #( #VT_UI1 )			)		#( 'property' 'SHORTValue' 16r60020004			#typeCode: #VT_I2			#parameterTypes: #( #VT_I2 )			)		#( 'property' 'FLOATValue' 16r60020006			#typeCode: #VT_R4			#parameterTypes: #( #VT_R4 )			)		#( 'property' 'DOUBLEValue' 16r60020008			#typeCode: #VT_R8			#parameterTypes: #( #VT_R8 )			)		#( 'property' 'VARIANT_BOOLValue' 16r6002000A			#typeCode: #VT_BOOL			#parameterTypes: #( #VT_BOOL )			)		#( 'property' 'SCODEValue' 16r6002000C			#typeCode: #VT_ERROR			#parameterTypes: #( #VT_ERROR )			)		#( 'property' 'DATEValue' 16r6002000E			#typeCode: #VT_DATE			#parameterTypes: #( #VT_DATE )			)		#( 'property' 'BSTRValue' 16r60020010			#typeCode: #VT_BSTR			#parameterTypes: #( #VT_BSTR )			)		#( 'property' 'IUnknownReference' 16r60020012			#typeCode: #VT_UNKNOWN			#parameterTypes: #( #VT_UNKNOWN )			)		#( 'property' 'IDispatchReference' 16r60020014			#typeCode: #VT_DISPATCH			#parameterTypes: #( #VT_DISPATCH )			)		#( 'property' 'VARIANTValue' 16r60020016			#typeCode: #VT_VARIANT			#parameterTypes: #( #VT_VARIANT )			)		#( 'property' 'CURRENCYValue' 16r60020018			#typeCode: #VT_CY			#parameterTypes: #( #VT_CY )			)		#( 'property' 'SAFEARRAY_I4Value' 16r6002001A			#typeCode: #( #VT_ARRAY #VT_I4 )			#parameterTypes: #( #( #VT_ARRAY #VT_I4 ) )			)		#( 'property' 'SAFEARRAY_DISPATCHValue' 16r6002001C			#typeCode: #( #VT_ARRAY #VT_DISPATCH )			#parameterTypes: #( #( #VT_ARRAY #VT_DISPATCH ) )			)		#( 'property' 'SAFEARRAY_UNKNOWNValue' 16r6002001E			#typeCode: #( #VT_ARRAY #VT_UNKNOWN )			#parameterTypes: #( #( #VT_ARRAY #VT_UNKNOWN ) )			)		#( 'property' 'SAFEARRAY_BSTRValue' 16r60020020			#typeCode: #( #VT_ARRAY #VT_BSTR )			#parameterTypes: #( #( #VT_ARRAY #VT_BSTR ) )			)		#( 'property' 'SAFEARRAY_VARIANTValue' 16r60020022			#typeCode: #( #VT_ARRAY #VT_VARIANT )			#parameterTypes: #( #( #VT_ARRAY #VT_VARIANT ) )			)		).	" End of specification "</body><body package="Com- Automation Examples">specificationTable	"Private. Answer the specification table for the receiver."		^self literalSpecification decodeAsLiteralArray</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>installation</category><body package="Com- Automation Examples">installRuntime	" Prepare the receiver for deployment in a runtime image configuration.  You can extend this method and place installation code in it. "	" self installRuntime "	self registerSessionEventHandlers;		releaseTypeLibraries;		registerTypeLibraries.</body><body package="Com- Automation Examples">registerSessionEventHandlers	"Install the event handlers for the receiver."	"Tests	COMSessionManager actionListForEvent: #shutdownImage.	COMSessionManager actionListForEvent: #confirmSaveImage.	COMSystem current actionListForEvent: #deploymentStartup	"	self removeSessionEventHandlers.  " always safe "	COMSessionManager 		when: #shutdownImage		send: #releaseTypeLibraries to: self.	COMSessionManager 		when: #confirmSaveImage		send: #releaseTypeLibraries to: self.	COMSystem current 		when: #deploymentStartup		send: #startUpApplication to: self.</body><body package="Com- Automation Examples">removeSessionEventHandlers	"Remove the registration of any session event handlers for the receiver."	COMSystem current removeAllActionsWithReceiver: self.	COMSessionManager removeAllActionsWithReceiver: self.</body><body package="Com- Automation Examples">startUpApplication	"Start up the Automation object server."	"Initialize COM and verify that the application is being run as an object server."	Transcript cr; show: ((#RunningStartUpApp &lt;&lt; #com &gt;&gt; 'Running: &lt;1s&gt; %&gt;%&gt; startUpApplication')			expandMacrosWith: self class name) ;cr.	COMSessionManager initializeAutomationServer.	"Make sure the type libraries are ok."	self updateTypeLibraries.	"Register the class factory for the object server application."	COMAutomationServer registerServerClassFactoryForClass: self.	"Arrange for server application termination "	COMSessionManager exitIfNotInUse: false.</body><body package="Com- Automation Examples">unregister	"Uninstall this Automation server sample."	" self unregister "	self unregisterTypeLibraries.	self releaseTypeLibraries.	COMSystem current removeAllActionsWithReceiver: self.</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: AllDataTypesCOMObject;		yourself</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>private-type library</category><body package="Com- Automation Examples">newTypeLibraryNeutral	"Answer a type library for the English language for the application."	^AllDataTypesCOMObject newTypeLibraryNeutral</body><body package="Com- Automation Examples">registerTypeLibraries	"Register the type libraries."	^AllDataTypesCOMObject registerTypeLibraries</body><body package="Com- Automation Examples">releaseTypeLibraries	"Release the type libraries."	^AllDataTypesCOMObject releaseTypeLibraries</body><body package="Com- Automation Examples">typeLibraries	"Answer the type library dictionary. The dictionary keys are LCIDs and the values are instances of COMTypeLibrary."	^AllDataTypesCOMObject typeLibraries</body><body package="Com- Automation Examples">typeLibraryEnglish	"Answer a type library for the english language for the application."	^AllDataTypesCOMObject typeLibraryEnglish</body><body package="Com- Automation Examples">typeLibraryID	"Answer the IID of the receiver's type library."	^AllDataTypesCOMObject typeLibraryID</body><body package="Com- Automation Examples">typeLibraryNeutral	"Answer a type library for the english language for the application."	^AllDataTypesCOMObject typeLibraryNeutral</body><body package="Com- Automation Examples">unregisterTypeLibraries	"Unregister the type libraries."	^AllDataTypesCOMObject unregisterTypeLibraries</body><body package="Com- Automation Examples">updateTypeLibraries	"Update the registry for each type library defined by the application. See also COMTypeLibrary&gt;&gt;updateRegistration."	^AllDataTypesCOMObject updateTypeLibraries</body></methods><methods><class-id>Examples.AutomationAllDataTypes class</class-id> <category>registering</category><body package="Com- Automation Examples">comRegistrationSpec	"Returns the specification which allows registering the component from the command-line"	^COMAutomationRegistration new		versionIndependentDescription: 'VisualWorks All Data Types Example';		versionIndependentProgID: 'VisualWorks.AllDataTypesAuto';		typeLibraries: self typeLibraries;		majorVersion: 1;		minorVersion: 0;		clsid: self clsid;		yourself</body></methods><methods><class-id>Examples.AutomationOnlySmalltalkCommander class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: AutomationAllDataTypes;		yourself</body></methods><methods><class-id>Examples.AutomationOnlySmalltalkCommander class</class-id> <category>private-type library</category><body package="Com- Automation Examples">newTypeLibraryNeutral	"Answer a type library for the English language for the application."	^COMTypeLibrary new		libraryID: self typeLibraryID;		lcid: Win32ExternalInterface lcidNeutral;		directoryName: COMSessionManager absoluteCOMDirectoryName, 'Examples\COMAuto\StCom\AutomationOnlyTypeLibrary';		fileName: 'VwStCom.tlb';		majorVersion: 1;				minorVersion: 0</body><body package="Com- Automation Examples">registerTypeLibraries	"Register the type libraries." 	self typeLibraries do: [ : aTypeLibrary | 		aTypeLibrary createRegistration ]</body><body package="Com- Automation Examples">releaseTypeLibraries	"Release the type libraries."	" self releaseTypeLibraries "	| toBeReleased |	"This test does not use self to avoid loading."	TypeLibraries isNil ifTrue: [ ^self ].	toBeReleased := TypeLibraries.	TypeLibraries := nil.	toBeReleased do: [ : aTypeLibrary | aTypeLibrary enforceRelease ].</body><body package="Com- Automation Examples">typeLibraries	"Answer the type library dictionary. The dictionary keys are LCIDs and the values are instances of COMTypeLibrary."	| aTypeLibrary |	TypeLibraries isNil ifTrue: [		TypeLibraries := Dictionary new.		aTypeLibrary := self newTypeLibraryNeutral.		TypeLibraries at: aTypeLibrary lcid put: aTypeLibrary.		"Other type libraries can be added for additional languages...		aTypeLibrary := self typeLibraryLanguageX.		TypeLibraries at: aTypeLibrary lcid put: aTypeLibrary."	 ].				^TypeLibraries</body><body package="Com- Automation Examples">typeLibraryEnglish	"Answer a type library for the english language for the application."	^self typeLibraries at: Win32ExternalInterface lcidEnglish</body><body package="Com- Automation Examples">typeLibraryID	"Answer the IID of the receiver's type library."	" '{5FD2D2B2-95A8-11d0-ACAB-E80467000000}' asGUID storeString "	^GUID fromBytes: #[ 16rB2 16rD2 16rD2 16r5F 16rA8 16r95 16rD0 16r11 16rAC 16rAB 16rE8 4 16r67 0 0 0 ]</body><body package="Com- Automation Examples">unregisterTypeLibraries	"Unregister the type libraries." 	self typeLibraries do: [ : aTypeLibrary | 		aTypeLibrary removeRegistration ]</body><body package="Com- Automation Examples">updateTypeLibraries"Update the registry for each type library defined by the application. See also COMTypeLibrary&gt;&gt;updateRegistration."	self typeLibraries do: [ : aTypeLibrary | 		aTypeLibrary updateRegistration ]</body></methods><methods><class-id>Examples.AutomationOnlySmalltalkCommander class</class-id> <category>private-specification table construction</category><body package="Com- Automation Examples">literalSpecification	"Private. Answer a collection containing the dispatch specifications for publishing."	" Type Library VWSTCOM Dispatch Interfaces "	" Generated by COMAutomationTypeAnalyzer on June 19, 1997 17:43:32.000 "	" From VisualWorks(R), Release 2.5.2 of September 26, 1995 "	" This is the specification table literal for the dispatch Interface: 			Name:		ISmalltalkCommanderDisp			Locale ID:	1033			IID:			{5FD2D2B3-95A8-11D0-ACAB-E80467000000}			Methods:	5			Properties:	1	 This interface is indexed for use by a server. "	" Specification Table Header "	^#( #COMDispatchSpecificationTable		#specificationKey: #memberID		#name: 'ISmalltalkCommanderDisp'		#iid: #( #GUID #[ 16rB3 16rD2 16rD2 16r5F 16rA8 16r95 16rD0 16r11 16rAC 16rAB 16rE8 4 16r67 0 0 0 ] )		#lcid: 1033		" Methods (5) "		" The selector sent to the published object is by default the method name itself. "		" The keyword for method arguments is by default #with: "		" The selector can be set manually in each method specification by using the pattern: "		" 	#selector: #mySelector "		#( 'method' 'Evaluate' 16r60020000			#typeCode: #VT_VARIANT			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Expression' )			)		#( 'method' 'EvaluateAsString' 16r60020001			#typeCode: #VT_BSTR			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Expression' )			)		#( 'method' 'Quit' 16r60020002			)		#( 'method' 'GetLastError' 16r60020003			#typeCode: #VT_BSTR			)		#( 'method' 'GetLastErrorStack' 16r60020004			#typeCode: #VT_BSTR			)		"  Properties (1)  "		" The selector sent to the published object to set a property is by default set&lt;PropertyName&gt;: "		" The selector sent to the published object to get a property is by default get&lt;PropertyName&gt;: "		" The selector can be set manually in each property specification by using the pattern: "		" 	#setSelector: #mySelector: "		" 	#getSelector: #mySelector "		#( 'property' 'AnswerErrors' 16r60020005			#typeCode: #VT_BOOL			#parameterTypes: #( #VT_BOOL )			)		).	" End of specification "</body><body package="Com- Automation Examples">literalSpecificationNEW	"Private. Answer a collection containing the dispatch specifications for publishing."	" Type Library VWSTCOM Dispatch Interfaces "	" Generated by COMAutomationTypeAnalyzer on March 10, 1999 12:12:28.000 "	" From VisualWorksÂ®, Release 3.0 of February 5, 1998 "	" This is the specification table literal for the dispatch Interface: 			Name:		ISmalltalkCommanderDisp			Locale ID:	1033			IID:			{5FD2D2B3-95A8-11D0-ACAB-E80467000000}			Methods:	6			Properties:	1	 This interface is indexed for use by a server. "	" Specification Table Header "	^#( #COMDispatchSpecificationTable		#specificationKey: #memberID		#name: 'ISmalltalkCommanderDisp'		#iid: #( #GUID #[ 16rB3 16rD2 16rD2 16r5F 16rA8 16r95 16rD0 16r11 16rAC 16rAB 16rE8 4 16r67 0 0 0 ] )		#lcid: 1033		" Methods (6) "		" The selector sent to the published object is by default the method name itself. "		" The keyword for method arguments is by default #with: "		" The selector can be set manually in each method specification by using the pattern: "		" 	#selector: #mySelector "		#( 'method' 'Evaluate' 16r60020000			#typeCode: #VT_VARIANT			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Expression' )			)		#( 'method' 'EvaluateAsString' 16r60020001			#typeCode: #VT_BSTR			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Expression' )			)		#( 'method' 'Quit' 16r60020002			)		#( 'method' 'GetLastError' 16r60020003			#typeCode: #VT_BSTR			)		#( 'method' 'GetLastErrorStack' 16r60020004			#typeCode: #VT_BSTR			)		#( 'method' 'GetLog' 16r60020007			#typeCode: #( #GUID #[ 16rC0 16r79 16r98 16r5B 16r15 16rD7 16rD2 16r11 16r95 16r69 0 0 0 0 0 0 ] )			)		"  Properties (1)  "		" The selector sent to the published object to set a property is by default set&lt;PropertyName&gt;: "		" The selector sent to the published object to get a property is by default get&lt;PropertyName&gt;: "		" The selector can be set manually in each property specification by using the pattern: "		" 	#setSelector: #mySelector: "		" 	#getSelector: #mySelector "		#( 'property' 'AnswerErrors' 16r60020005			#typeCode: #VT_BOOL			#parameterTypes: #( #VT_BOOL )			)		).	" End of specification "</body><body package="Com- Automation Examples">literalSpecificationOLD	"Private. Answer a collection containing the dispatch specifications for publishing."	" Type Library VWSTCOM Dispatch Interfaces "	" Generated by COMAutomationTypeAnalyzer on June 19, 1997 17:43:32.000 "	" From VisualWorks(R), Release 2.5.2 of September 26, 1995 "	" This is the specification table literal for the dispatch Interface: 			Name:		ISmalltalkCommanderDisp			Locale ID:	1033			IID:			{5FD2D2B3-95A8-11D0-ACAB-E80467000000}			Methods:	5			Properties:	1	 This interface is indexed for use by a server. "	" Specification Table Header "	^#( #COMDispatchSpecificationTable		#specificationKey: #memberID		#name: 'ISmalltalkCommanderDisp'		#iid: #( #GUID #[ 16rB3 16rD2 16rD2 16r5F 16rA8 16r95 16rD0 16r11 16rAC 16rAB 16rE8 4 16r67 0 0 0 ] )		#lcid: 1033		" Methods (5) "		" The selector sent to the published object is by default the method name itself. "		" The keyword for method arguments is by default #with: "		" The selector can be set manually in each method specification by using the pattern: "		" 	#selector: #mySelector "		#( 'method' 'Evaluate' 16r60020000			#typeCode: #VT_VARIANT			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Expression' )			)		#( 'method' 'EvaluateAsString' 16r60020001			#typeCode: #VT_BSTR			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Expression' )			)		#( 'method' 'Quit' 16r60020002			)		#( 'method' 'GetLastError' 16r60020003			#typeCode: #VT_BSTR			)		#( 'method' 'GetLastErrorStack' 16r60020004			#typeCode: #VT_BSTR			)		"  Properties (1)  "		" The selector sent to the published object to set a property is by default set&lt;PropertyName&gt;: "		" The selector sent to the published object to get a property is by default get&lt;PropertyName&gt;: "		" The selector can be set manually in each property specification by using the pattern: "		" 	#setSelector: #mySelector: "		" 	#getSelector: #mySelector "		#( 'property' 'AnswerErrors' 16r60020005			#typeCode: #VT_BOOL			#parameterTypes: #( #VT_BOOL )			)		).	" End of specification "</body><body package="Com- Automation Examples">specificationTable	"Private. Answer the specification table for the receiver."		^self literalSpecification decodeAsLiteralArray</body></methods><methods><class-id>Examples.AutomationOnlySmalltalkCommander class</class-id> <category>identity</category><body package="Com- Automation Examples">clsid	"Answer the CLSID under which a the receiver is published as an Automation object."	" '{5FD2D2B1-95A8-11d0-ACAB-E80467000000}' asGUID storeString "		^GUID fromBytes: #[ 16rB1 16rD2 16rD2 16r5F 16rA8 16r95 16rD0 16r11 16rAC 16rAB 16rE8 4 16r67 0 0 0 ]</body></methods><methods><class-id>Examples.AutomationOnlySmalltalkCommander class</class-id> <category>installation</category><body package="Com- Automation Examples">installRuntime	" Prepare the receiver for deployment in a runtime image configuration.  Each subclass can extend this method and place installation code in it.  You should make sure this version gets called in any case."	" self installRuntime "		self		registerSessionEventHandlers;		releaseTypeLibraries;		registerTypeLibraries</body><body package="Com- Automation Examples">registerSessionEventHandlers	"Install the event handlers for the receiver."	self removeSessionEventHandlers.  " always safe "	COMSessionManager 		when: #shutdownImage		send: #releaseTypeLibraries to: self.	COMSessionManager 		when: #confirmSaveImage		send: #releaseTypeLibraries to: self.	COMSystem current 		when: #deploymentStartup		send: #startUpApplication to: self.</body><body package="Com- Automation Examples">removeSessionEventHandlers	"Remove the registration of any session event handlers for the receiver."	COMSystem current removeAllActionsWithReceiver: self.	COMSessionManager removeAllActionsWithReceiver: self.</body><body package="Com- Automation Examples">startUpApplication	"Start up the Automation object server."	"Initialize COM and verify that the application is being run as an object server."	COMSessionManager initializeAutomationServer.	"Make sure the type libraries are ok."	self updateTypeLibraries.	"Register the class factory for the object server application."	COMAutomationServer 		registerClassFactoryForClass: AutomationSmalltalkCommander 		clsid: self clsid		specificationTable: self specificationTable		typeLibraries: self typeLibraries.	"Arrange for server application termination "	COMSessionManager exitIfNotInUse: false.</body><body package="Com- Automation Examples">unregister	"Uninstall this Automation server sample."	" self unregister "	self unregisterTypeLibraries.	self releaseTypeLibraries.	COMSystem current removeAllActionsWithReceiver: self.</body></methods><methods><class-id>Examples.AutomationOnlySmalltalkCommander class</class-id> <category>private-initialization</category><body package="Com- Automation Examples">obsolete	"The receiver was removed from the system and is now obsolete. Perform any necessary clean-up. Answer the receiver."	self removeSessionEventHandlers.	^super obsolete</body></methods><methods><class-id>Examples.AutomationOnlySmalltalkCommander class</class-id> <category>registering</category><body package="Com- Automation Examples">comRegistrationSpec	"Returns the specification which allows registering the component from the command-line"	^ COMAutomationRegistration new		versionIndependentDescription: 'VisualWorks Smalltalk Commander';		versionIndependentProgID: 'VisualWorks.SmalltalkCommander';		majorVersion: 1;		minorVersion: 0;		clsid: self clsid;		typeLibraries: self typeLibraries;		yourself</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDispPointer</class-id> <category>interface operations</category><body package="Com- Automation Examples">GetDataList: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetDataList function. "	| hresult resultBuffer |	resultBuffer := COMSafeArray resultValueBufferFor: VT_VARIANT.	hresult := self invokeGetDataList: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">GetEvent: index _: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetEvent function. "	| hresult resultBuffer |	resultBuffer := ISmalltalkCommanderEventDispPointer resultValueBuffer.	hresult := self invokeGetEvent: index _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">GetSize: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetSize function. "	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #LONG.	hresult := self invokeGetSize: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDispPointer class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: (GUID				fromBytes: #[16r60 16rA5 16r24 16r7A 16r11 16rD7 16rD2 16r11 16r95 16r69 0 0 0 0 0 0]).	self updateAndRegister</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDispImplementation</class-id> <category>interface operations</category><body package="Com- Automation Examples">GetDataList: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetDataList function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetDataList: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">GetEvent: index _: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetEvent function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetEvent: index _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">GetSize: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetSize function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetSize: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDispImplementation</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeGetDataList: this _: value	" Private - invoke the ISmalltalkCommanderLogDisp::GetDataList function for an external caller. "	" HRESULT __stdcall  GetDataList(SAFEARRAY * * value) = 8 "	^	[" terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	value isNull ifTrue: [ ^E_INVALIDARG ].	###"	| hresult resultReference |	self clearResultBufferAtAddress: value.	resultReference := nil asValueReference.	hresult := implementor GetDataList: resultReference.	hresult succeeded		ifTrue: 			[self				safeArrayResultPointerAtAddress: value				put: resultReference value				elementType: VT_VARIANT].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeGetEvent: this _: index _: retval	" Private - invoke the ISmalltalkCommanderLogDisp::GetEvent function for an external caller. "	" HRESULT __stdcall  GetEvent(LONG index, ISmalltalkCommanderEventDisp * * retval) = 9 "	^	[" terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	retval isNull ifTrue: [ ^E_INVALIDARG ].	###"	| hresult resultReference |	self clearResultBufferAtAddress: retval.	resultReference := nil asValueReference.	hresult := implementor GetEvent: index _: resultReference.	hresult succeeded		ifTrue: [self interfaceResultAtAddress: retval put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeGetSize: this _: value	" Private - invoke the ISmalltalkCommanderLogDisp::GetSize function for an external caller. "	" HRESULT __stdcall  GetSize(LONG * value) = 7 "	^	[" terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	value isNull ifTrue: [ ^E_INVALIDARG ].	###"	| hresult resultReference |	self clearResultBufferAtAddress: value.	resultReference := nil asValueReference.	hresult := implementor GetSize: resultReference.	hresult succeeded		ifTrue: [self scalarResultAtAddress: value put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDispImplementation class</class-id> <category>installation</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: ISmalltalkCommanderLogDispPointer;		yourself</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDispImplementation class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: ISmalltalkCommanderLogDispPointer iid.	self vtableSignatureTypeName: #__ISmalltalkCommanderLogDispVtbl.	self updateAndRegister</body></methods><methods><class-id>Examples.SmalltalkCommanderLog</class-id> <category>initialization</category><body package="Com- Automation Examples">initialize	list := OrderedCollection new</body></methods><methods><class-id>Examples.SmalltalkCommanderLog</class-id> <category>accessing</category><body package="Com- Automation Examples">list	^list</body><body package="Com- Automation Examples">size	^self list size</body></methods><methods><class-id>Examples.SmalltalkCommanderLog</class-id> <category>private-operation</category><body package="Com- Automation Examples">addEvent: aSmalltalkCommanderEvent	self list add: aSmalltalkCommanderEvent</body></methods><methods><class-id>Examples.SmalltalkCommanderLog</class-id> <category>operation</category><body package="Com- Automation Examples">addEventForCommand: aCommand	self addEvent: (SmalltalkCommanderEvent for: aCommand)</body></methods><methods><class-id>Examples.SmalltalkCommanderLog class</class-id> <category>instance creation</category><body package="Com- Automation Examples">new	"Answer a new initialized instance of the receiver."	^super new initialize</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDisp</class-id> <category>interface operations</category><body package="Com- Automation Examples">getDataList	" Invoke the ISmalltalkCommanderLogDisp::GetDataList function. "	| resultReference |	resultReference := nil asValueReference.	interface GetDataList: resultReference.	^resultReference value</body><body package="Com- Automation Examples">getEvent: index	" Invoke the ISmalltalkCommanderLogDisp::GetEvent function. "	| resultReference |	resultReference := ISmalltalkCommanderEventDisp new asValueReference.	interface GetEvent: index _: resultReference.	^resultReference value</body><body package="Com- Automation Examples">getSize	" Invoke the ISmalltalkCommanderLogDisp::GetSize function. "	| resultReference |	resultReference := nil asValueReference.	interface GetSize: resultReference.	^resultReference value</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDisp class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: ISmalltalkCommanderLogDispPointer iid.	self updateAndRegister</body></methods><methods><class-id>Examples.ISmalltalkCommanderLogDisp class</class-id> <category>installation</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: ISmalltalkCommanderLogDispPointer;		yourself</body></methods><methods><class-id>Examples.OfficeAutomationApplication</class-id> <category>convenience</category><body package="Com- Automation Examples">quit	self application Quit.</body><body package="Com- Automation Examples">visible	^  self application getVisible</body><body package="Com- Automation Examples">visible: aBoolean	^  self application setVisible: aBoolean.</body></methods><methods><class-id>Examples.OfficeAutomationApplication</class-id> <category>releasing</category><body package="Com- Automation Examples">releaseApplication	application notNil ifTrue: [self quit].	super releaseApplication</body></methods><methods><class-id>Examples.ExcelApplication</class-id> <category>operations - sheets</category><body package="Com- Automation Examples">activeSheetName: sheetName	"Before setting the name make sure the name is valid"	| newName |		[newName := (sheetName copyWithout: Character lf) copyReplaceAll: '/' with: '-'.	newName := newName copyFrom: 1 to: (newName size min: 31).	self application getActiveSheet setName: newName]			on: Error			do: [:ex | ^self]</body><body package="Com- Automation Examples">addSheet	^ self application getWorksheets Add: nil after: self application getActiveSheet.</body><body package="Com- Automation Examples">selectSheet: indexOrName	| sheet |	sheet := (self application getWorksheets getItem: indexOrName).	sheet Select.	^ sheet</body></methods><methods><class-id>Examples.ExcelApplication</class-id> <category>operations</category><body package="Com- Automation Examples">autoformat	| excel |	excel := self application.	excel getCells Select.	excel getSelection getColumns AutoFit.	excel getSelection getRows AutoFit</body><body package="Com- Automation Examples">copyAllCellsAsString	"use the copy past buffer to get all elements as string. This is a fast method."	self application getCells Select.	self application setCutCopyMode: false.	self application getSelection Copy.	^Screen default getExternalSelection</body><body package="Com- Automation Examples">isVisible: aBoolean	"Show or hide the Excel window."	self application setVisible: aBoolean</body><body package="Com- Automation Examples">open: aFilename	^ self application getWorkbooks Open: aFilename</body><body package="Com- Automation Examples">print: aWorkbook	"Print the workbook."	self application getActivePrinter 		ifNil: [ self error: (#NoPrinterInstalled &lt;&lt; #com &gt;&gt; 'No printer installed') ]		ifNotNil: [ aWorkbook PrintOut ].</body><body package="Com- Automation Examples">saveAs: filename	| displayAlerts |	displayAlerts := self application getDisplayAlerts.	self application setDisplayAlerts: false.	self application getActiveWorkbook SaveAs: filename.	self application getActiveWorkbook Close: false.	self application setDisplayAlerts: displayAlerts</body></methods><methods><class-id>Examples.ExcelApplication</class-id> <category>tools</category><body package="Com- Automation Examples">excelColumn: aNumber	"Utility method to convert numbers into Excel column names"	| code |	aNumber &lt;= 26 ifTrue: [^String with: (Character value: aNumber + 16r40)].	code := aNumber - 1.	^String with: (Character value: code // 26 + 16r40)		with: (Character value: code \\ 26 + 16r41)</body><body package="Com- Automation Examples">excelIndexOfColumn: stringOrNumber	"Utility method to convert Excel column names into numbers"	stringOrNumber isString ifFalse: [^stringOrNumber].	stringOrNumber size = 1 ifTrue: [^stringOrNumber first asInteger - 16r40].	stringOrNumber size = 2		ifTrue: 			[^(stringOrNumber first asInteger - 16r40) * 26				+ (stringOrNumber last asInteger - 16r40)].	self error: 'String too long'</body><body package="Com- Automation Examples">getAllCells	^self application getActiveSheet getUsedRange getValue</body></methods><methods><class-id>Examples.ExcelApplication</class-id> <category>operations - workbook</category><body package="Com- Automation Examples">closeWorkbook: aWorkbook saveAs: aFilenameOrNil		[aFilenameOrNil isNil				ifTrue: [aWorkbook Close: false ]				ifFalse: [aWorkbook Close: true filename: aFilenameOrNil]]			on: COMDispatchError			do: 				[:ex |				"Ignore the error generated by Excel when the user pressed the 'No' button in when prompted to save."				ex exceptionInfo wCode = 1004 ifFalse: [ex pass]]</body><body package="Com- Automation Examples">newExcelWorkbookWithOneSheet	| workBook worksheets |	workBook := self application getWorkbooks Add.	worksheets := self application getWorksheets.	2 to: worksheets getCount do: [:i | (worksheets getItem: 2) Delete].	^workBook</body></methods><methods><class-id>Examples.ExcelApplication class</class-id> <category>accessing</category><body package="Com- Automation Examples">applicationName	^ 'Excel.Application'</body></methods><methods><class-id>Examples.ExcelExample</class-id> <category>accessing</category><body package="Com- Automation Examples">printReport	"Answer whether or not to print the report."	^printReport</body><body package="Com- Automation Examples">printReport: aBoolean	"Set whether or not to print the report."	printReport := aBoolean</body><body package="Com- Automation Examples">saveToFileName	"Answer the file name to save to."	^saveToFileName</body><body package="Com- Automation Examples">saveToFileName: aFileName	"Set the file name to save to."	saveToFileName := aFileName</body><body package="Com- Automation Examples">shouldSaveToFile	"Answer whether to save the results to a file."	^self saveToFileName notNil</body></methods><methods><class-id>Examples.ExcelExample</class-id> <category>run</category><body package="Com- Automation Examples">closeWorkbook: aWorkbook	"Close the workbook."	^ self closeWorkbook: aWorkbook saveAs: (self shouldSaveToFile ifTrue: [self saveToFileName] ifFalse: [nil])</body><body package="Com- Automation Examples">noPrinterMessage	"Answer the error string expected when there is not an active printer."	^(#UnknownPrinter &lt;&lt; #com &gt;&gt; 'unknown printer (check your Control Panel)') asString</body><body package="Com- Automation Examples">print: aWorkbook	"Print the workbook."	self printReport ifFalse: [ ^self ].	super print: aWorkbook.</body></methods><methods><class-id>Examples.ExcelExampleMonsterDamage</class-id> <category>accessing</category><body package="Com- Automation Examples">data	"Answer the data the receiver is working with."		^data</body><body package="Com- Automation Examples">data: aDictionary	"Specify the data the receiver is working with."		data := aDictionary</body></methods><methods><class-id>Examples.ExcelExampleMonsterDamage</class-id> <category>run</category><body package="Com- Automation Examples">createChartFromCellRange: aRangeString	"Create the chart based on the data in the cell range &lt;aRangeString&gt;."	"Add a new Chart object to the Excel workbook."	| chart aRangeController sheet spellDetails chartArea font |	chart := self application getCharts Add.		"Get the Excel Range object for the cells in the worksheet where	our data has been inserted. We will need the Range object as an 	argument to the Chart Wizard."	sheet := self application getWorksheets getItem: self sheetName.	aRangeController := sheet getRange: aRangeString.	"Get the Excel ChartArea's Font property and change some Font attributes."	chartArea := chart getChartArea.	"The Font Controller we get back is a Standard COM Object."	font := chartArea getFont.	font		setSize: 16;		setBold: true;		setOutlineFont: true.	"Create a Dictionary for all of the named arguments we want to invoke the	Chart Wizard with. Note that the Source argument is a controller."	spellDetails := (Dictionary new)				at: 'Source' put: aRangeController ;				at: 'Gallery' put: xl3DColumn;				at: 'Format' put: 4;				at: 'HasLegend' put: true;				at: 'Title' put: 'Los Angeles Monster Damage';				at: 'CategoryLabels' put: 1;				at: 'ValueTitle' put: 'USD in Billions';				yourself.	"Invoke the Chart Wizard."	chart invokeMethod: #ChartWizard withNamedArguments: spellDetails.</body><body package="Com- Automation Examples">fillWorkbook: sheet	"Fill the active sheet with column headings and values."	| names lastColumn values filledRange |	names := self data keys asSortedCollection asArray.	"Calculate the last column letter."	lastColumn := String with: ( $A asInteger + ( names size - 1 ) ) asCharacter.	"Set the first row in the worksheet to the names (keys in the dictionary)."	(sheet getRange: 'A1:', lastColumn, '1' ) setValue: names.	values := OrderedCollection new.	names do: [ :aName |		values add: ( self data at: aName ) ].	"Set the second row in the worksheet to the values (from the dictionary)."	(sheet getRange: 'A2:', lastColumn, '2' ) setValue: values.	filledRange := 'A1:', lastColumn, '2'.	^filledRange</body><body package="Com- Automation Examples">runReport	"Run and chart the damage report."	"Set the caption of the Excel Window."	| workbook sheet filledRange |	self application setCaption: 'Los Angeles Monster Damage'.	"Add a new workbook."	workbook := self application getWorkbooks Add.	"Get the first worksheet in the new workbook."	sheet := self application getWorksheets getItem: self sheetName.	"Copy our data to the new worksheet."	filledRange := self fillWorkbook: sheet.	"Create a chart from the data."	self createChartFromCellRange: filledRange.	"Print the workbook."	self print: workbook.	"Close the workbook."	self closeWorkbook: workbook</body><body package="Com- Automation Examples">runReportSafely	"Run and chart the damage report making sure that resources are always released."	[ self runReport ]		ensure: [ self enforceRelease ]</body><body package="Com- Automation Examples">sheetName	"Answer the Excel sheet name the data is in. Answer an integer which will work for any language"	^1</body></methods><methods><class-id>Examples.ExcelExampleMonsterDamage class</class-id> <category>instance creation</category><body package="Com- Automation Examples">runInvisible	"Run and chart the report in a background invisible Excel process."	"Run!"	self 		runOn: self sampleData 		saveToFileName: self saveToFileName		isVisible: false		printReport: false</body><body package="Com- Automation Examples">runInvisibleAndPrint	"Run, chart and print the report in a background invisible Excel process."	"Run!"	self 		runOn: self sampleData 		saveToFileName: self saveToFileName		isVisible: false		printReport: true</body><body package="Com- Automation Examples">runOn: aDictionary saveToFileName: saveToFileName isVisible: isVisible printReport: printReport	"Run and chart report on the date in &lt;aDictionary&gt;. Save it to &lt;saveToFileName&gt;. If &lt;isVisible&gt; is true, make Excel visible so you can see it all happen, othewise let Excel stay as an invisible process. if &lt;printReport&gt; is true, print the report."	^self new		data: aDictionary;		saveToFileName: saveToFileName;		isVisible: isVisible;		printReport: printReport;		runReportSafely;		yourself</body><body package="Com- Automation Examples">runTest	"Run and chart the report in a background invisible Excel process."	self 		runOn: self sampleData 		saveToFileName: nil "No filename in order to test without user interaction (dialog poping up to overwrite files"		isVisible: false		printReport: false</body><body package="Com- Automation Examples">runTests	"Test all specification policies."	"Run and chart the report in a background invisible Excel process."	COMSpecificationPolicy validDefaultPolicies do: [ : aPolicySymbol |		self specificationPolicyName: aPolicySymbol.		ExcelExampleMonsterDamage runTest ].	self specificationPolicyName: nil.</body><body package="Com- Automation Examples">runVisible	"Make Excel visible to run and chart the report in the foreground."	"self runVisible"	"Run!"	self 		runOn: self sampleData 		saveToFileName: self saveToFileName		isVisible: true		printReport: false</body></methods><methods><class-id>Examples.ExcelExampleMonsterDamage class</class-id> <category>sample data</category><body package="Com- Automation Examples">sampleData	"Answer a Dictionary of Sample data"	^Dictionary new		at: 'King Kong' put: 231;		at: 'Godzilla' put: 573;		at: 'Mothra' put: 309;		yourself</body><body package="Com- Automation Examples">saveToFileName	"Answer the sample file name to save."	^COMSessionManager absoluteCOMDirectoryName, 'Examples\COMAuto\Output\Monster'</body></methods><methods><class-id>Examples.ISmalltalkCommanderDispImplementation</class-id> <category>interface operations</category><body package="Com- Automation Examples">Evaluate: aString _: resultReference 	"Invoke the ISmalltalkCommanderDisp::Evaluate function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Evaluate: aString _: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">EvaluateAsString: aString _: resultReference 	"Invoke the ISmalltalkCommanderDisp::EvaluateAsString function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor EvaluateAsString: aString			_: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">GetLastError: resultReference 	"Invoke the ISmalltalkCommanderDisp::GetLastError function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetLastError: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">GetLastErrorStack: resultReference 	"Invoke the ISmalltalkCommanderDisp::GetLastError function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetLastErrorStack: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">GetLog: resultReference	" Invoke the ISmalltalkCommanderDisp::GetLog function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetLog: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">Quit	"Invoke the ISmalltalkCommanderDisp::Quit function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Quit		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">get_AnswerErrors: resultReference 	"Invoke the IAllDataTypes::get_AnswerErrors function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor get_AnswerErrors: resultReference		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">put_AnswerErrors: aValue	"Invoke the IAllDataTypes::put_AnswerErrors function. Raise an exception if an error occurs. Answer the result code."	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor put_AnswerErrors: aValue		] on: self rootExceptions   			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>Examples.ISmalltalkCommanderDispImplementation</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeEvaluate: this _: aBSTRPointer _: pvarResult	"Private. Invoke the ISmalltalkCommanderDisp::Evaluate function for an external caller. "	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Evaluate )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [in] */ BSTR Expression,            /* [retval][out] */ VARIANT __RPC_FAR *retval);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult aString |	self reportExternalFunctionEntry.	aBSTRPointer isValid ifFalse: [^E_INVALIDARG].	pvarResult isValid ifFalse: [^E_INVALIDARG].	aString := self stringAtBSTRPointer: aBSTRPointer.	resultReference := COMVariantValueReference new.	hresult := implementor Evaluate: aString _: resultReference.	hresult succeeded		ifTrue: [self variantResultAtAddress: pvarResult put: resultReference].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeEvaluateAsString: this _: aBSTR _: resultBSTRPointer	"Private. Invoke the ISmalltalkCommanderDisp::EvaluateAsString function for an external caller. "	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EvaluateAsString )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [in] */ BSTR Expression,            /* [retval][out] */ BSTR __RPC_FAR *retval);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult aString |	self reportExternalFunctionEntry.	aBSTR isValid ifFalse: [^E_INVALIDARG].	resultBSTRPointer isValid ifFalse: [^E_INVALIDARG].	aString := self stringAtBSTRPointer: aBSTR.	resultReference := nil asValueReference.	hresult := implementor EvaluateAsString: aString _: resultReference.	hresult succeeded		ifTrue: 			[self bstrResultAtAddress: resultBSTRPointer put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeGetLastError: this _: resultBSTRPointer	"Private. Invoke the ISmalltalkCommanderDisp::GetLastError function for an external caller. "	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLastError )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [retval][out] */ BSTR __RPC_FAR *retval);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	resultBSTRPointer isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor GetLastError: resultReference.	hresult succeeded		ifTrue: 			[self bstrResultAtAddress: resultBSTRPointer put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeGetLastErrorStack: this _: resultBSTRPointer	"Private. Invoke the ISmalltalkCommanderDisp::GetLastErrorStack function for an external caller. "	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLastErrorStack )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [retval][out] */ BSTR __RPC_FAR *retval);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	resultBSTRPointer isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor GetLastErrorStack: resultReference.	hresult succeeded		ifTrue: 			[self bstrResultAtAddress: resultBSTRPointer put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeGetLog: this _: retval	" Private - invoke the ISmalltalkCommanderDisp::GetLog function for an external caller. "	" HRESULT __stdcall  GetLog(ISmalltalkCommanderLogDisp * * retval) = 14 "	"**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^	[" terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	retval isNull ifTrue: [ ^E_INVALIDARG ].	###"	| hresult resultReference |	self clearResultBufferAtAddress: retval.	resultReference := nil asValueReference.	hresult := implementor GetLog: resultReference.	hresult succeeded		ifTrue: [self interfaceResultAtAddress: retval put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeQuit: this 	"Private. Invoke the ISmalltalkCommanderDisp::Quit function for an external caller. "	"HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Quit )(             ISmalltalkCommanderDisp __RPC_FAR * This);"	^[   " terminate exception stack unwind at external callin boundary "	implementor Quit.	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="Com- Automation Examples">invokeget_AnswerErrors: this _: pvarResult	"Private. Invoke the IAllDataTypes::get_AnswerErrors function for an external caller. "	"/* [propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_AnswerErrors )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Value);"	^	[" terminate exception stack unwind at external callin boundary "	| resultReference hresult |	self reportExternalFunctionEntry.	pvarResult isValid ifFalse: [^E_INVALIDARG].	resultReference := nil asValueReference.	hresult := implementor get_AnswerErrors: resultReference.	hresult succeeded		ifTrue: 			[self variantBoolResultAtAddress: pvarResult put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeput_AnswerErrors: this _: aValue	"Private. Invoke the IAllDataTypes::put_VARIANT_BOOLValue function for an external caller. "	"/* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_AnswerErrors )(             ISmalltalkCommanderDisp __RPC_FAR * This,            /* [in] */ VARIANT_BOOL Value);"	^[   " terminate exception stack unwind at external callin boundary "	implementor put_AnswerErrors: ( self booleanFromVariantBool: aValue ).	] on: self rootExceptions   		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>Examples.ISmalltalkCommanderDispImplementation class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: IAllDataTypesDispPointer;		yourself</body></methods><methods><class-id>Examples.ISmalltalkCommanderDispImplementation class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: ISmalltalkCommanderDispPointer iid.	self vtableSignatureTypeName: #__ISmalltalkCommanderDispVtbl.	self updateAndRegister</body></methods><methods><class-id>Examples.ExcelExampleFileImport</class-id> <category>accessing</category><body package="Com- Automation Examples">getFileNameFromUser	"Prompt the user for the location of the input file." 	^FileDialog openFile</body><body package="Com- Automation Examples">importFileName	"Answer the file name to import into Excel."	^importFileName</body><body package="Com- Automation Examples">importFileName: aName	"Set the file name to import into Excel."	| filename |	filename := aName asFilename definitelyExists		ifFalse: [ 			MessageBox message: ((#SampleFileNotFound &lt;&lt; #com &gt;&gt; 'The sample file &lt;1s&gt; could not be found. I will now prompt you for it''s location.')			expandMacrosWith: aName asString).			self getFileNameFromUser ]		ifTrue: [ aName ].	filename isNil		ifTrue: [ MessageBox message: (#CantContinueWithoutFileName &lt;&lt; #com &gt;&gt; 'Unable to continue this example without a file name.') asString ].	importFileName := filename</body><body package="Com- Automation Examples">sampleCellRange	"Answer the sample file range of cells to format."	^self class sampleCellRange</body><body package="Com- Automation Examples">shouldShowData	"Answer whether to save the results to a file."	^self saveToFileName notNil</body><body package="Com- Automation Examples">workbookData	"Answer the cell matrix. It was read from the text file into Excel and then from Excel into Smalltalk."	^workbookData</body><body package="Com- Automation Examples">workbookData: aCollection	"Set the cell matrix. It was read from the text file into Excel and then from Excel into Smalltalk."	^workbookData := aCollection</body></methods><methods><class-id>Examples.ExcelExampleFileImport</class-id> <category>operations</category><body package="Com- Automation Examples">close	"Save the report."	| activeWorkbook saveToFile |	saveToFile := self shouldSaveToFile.	saveToFile		ifTrue: 			[self save.			saveToFile := false].	activeWorkbook := self application getActiveWorkbook.	self closeWorkbook: activeWorkbook.</body><body package="Com- Automation Examples">format	"Format the sample data."	self formatRange: self sampleCellRange to: xlColor1</body><body package="Com- Automation Examples">getWorkbookData	"Get the cell matrix from Excel into Smalltalk."	| range |	range := self application getRange: self sampleCellRange.	self workbookData: range getValue.</body><body package="Com- Automation Examples">import	"Import the file."	| fullFileName |	fullFileName := self importFileName.	fullFileName isNil		ifTrue: [ ^self ].	self importStocksTextFile: fullFileName</body><body package="Com- Automation Examples">importStocksTextFile: pathName	"Import the stocks text file &lt;aFileName&gt;. We know the column format field information for this file in advance. It was saved from CompuServ's stock quote system. In this method we use named arguments and the ExcelConstants pool dictionary variable 'xlFixedWidth'."	| fieldInfo openOptions |	fieldInfo := #(#(0 2) #(7 1) #(16 1) #(27 1) #(35 1) #(45 1) #(55 2)).		openOptions := Dictionary new		at: 'Filename' put: pathName;		at: 'DataType' put: xlFixedWidth;		at: 'FieldInfo' put: fieldInfo;		yourself.	^self application getWorkbooks 			invokeMethod: 'OpenText'		withNamedArguments: openOptions.</body><body package="Com- Automation Examples">isVisible: aBoolean	"Show or hide the Excel window."	self okToRun ifFalse: [ ^self ].	super isVisible: aBoolean.</body><body package="Com- Automation Examples">okToRun	"Answer whether it is OK to run the sample."	^self importFileName notNil</body><body package="Com- Automation Examples">print	"Print the report if the configured to do so."	self print: self application getActiveWorkbook</body><body package="Com- Automation Examples">runReport	"Import the file and format it making sure resources are released."	self okToRun ifFalse: [ ^self ].	self 		import; 		format; 		print; 		showData;		close</body><body package="Com- Automation Examples">runReportSafely	"Import the file and format it making sure resources are released."	self okToRun ifFalse: [ ^self ].	[ self runReport ]		ensure: [ self enforceRelease ]</body><body package="Com- Automation Examples">save	"Save the report."	self shouldSaveToFile ifFalse: [^self].	[self application getActiveWorkbook SaveAs: self saveToFileName fileFormat: xlNormal]		on: COMDispatchError		do: 			[:ex |			"Ignore the error generated by Excel when the user pressed the 'No' button in when prompted to save."			ex parameter exceptionInfo wCode = 1004 ifFalse: [ex pass]]</body><body package="Com- Automation Examples">showData	"Format the data as a String and show it in a text window."	| stream |	self getWorkbookData.	stream := ReadWriteStream on: String new.	self workbookData do: [ : aRow |		stream cr.		( aRow at: 1 ) isNil			ifFalse: [ aRow do: [ : each | 				each printOn: stream.				stream nextPutAll: '  ' ] ] ].	self shouldShowData ifTrue: [		TextWindow openOn: stream contents			label: #DailyStockQuotes &lt;&lt; #com &gt;&gt; 'Daily Stock Quotes' ].</body></methods><methods><class-id>Examples.ExcelExampleFileImport</class-id> <category>utilities</category><body package="Com- Automation Examples">formatRange: aRangeString to: xlRangeConstant	"Automatically formats the range &lt;aRangeString&gt; of cells using a predefined format &lt;xlRangeConstant&gt;."	| range |	range := self application getRange: aRangeString.	range AutoFormat: xlRangeConstant.</body></methods><methods><class-id>Examples.ExcelExampleFileImport class</class-id> <category>instance creation</category><body package="Com- Automation Examples">runInvisible	"Run and save the report in a background invisible Excel process. The spreadsheet is read back from Excel in a Smalltalk Collection and displayed in a text window."	self 		runOn: self sampleFileName 		saveToFileName: self saveToFileName 		isVisible: false		printReport: false</body><body package="Com- Automation Examples">runInvisibleAndPrint	"Run, save and print the report in a background invisible Excel process. The spreadsheet is read back from Excel in a Smalltalk Collection and displayed in a text window."	self 		runOn: self sampleFileName 		saveToFileName: self saveToFileName 		isVisible: false		printReport: true</body><body package="Com- Automation Examples">runOn: aFileName saveToFileName: saveToFileName isVisible: aBoolean printReport: printReport	"Run and chart report on the data in &lt;aFileName&gt;. Save it to &lt;saveToFileName&gt;. If &lt;aBoolean&gt; is &lt;true&gt;, make Excel visible so you can see it all happen, othewise let Excel stay as an invisible process."	^self new		importFileName: aFileName;		saveToFileName: saveToFileName;		isVisible: aBoolean;		printReport: printReport;		runReportSafely;		yourself</body><body package="Com- Automation Examples">runTest	"Run the report in a background invisible Excel process. The spreadsheet is read back from Excel in Smalltalk."	self 		runOn: self sampleFileName 		saveToFileName: nil "No filename in order to test without user interaction (dialog poping up to overwrite files"		isVisible: false		printReport: false</body><body package="Com- Automation Examples">runTests	"Test all specification policies."	"Run the report in a background invisible Excel process. The spreadsheet is read back from Excel in Smalltalk."	COMSpecificationPolicy validDefaultPolicies do: [ : aPolicySymbol |		self specificationPolicyName: aPolicySymbol.		self runTest ].	self specificationPolicyName: nil.</body><body package="Com- Automation Examples">runVisible	"Make Excel visible to run and chart the report in the foreground. The spreadsheet is read back from Excel in a Smalltalk Collection and displayed in a text window."	self 		runOn: self sampleFileName 		saveToFileName: self saveToFileName 		isVisible: true		printReport: false</body></methods><methods><class-id>Examples.ExcelExampleFileImport class</class-id> <category>sample data</category><body package="Com- Automation Examples">sampleCellRange	"Answer the sample file range of cells to format. This size must match the dimensions in the sample stocks text file that is imported."	^'A1:G21'</body><body package="Com- Automation Examples">sampleFileName	"Answer the sample file name. The file name extension must be specified."	^COMSessionManager absoluteCOMDirectoryName, 'Examples\COMAuto\Input\Stocks.txt'</body><body package="Com- Automation Examples">saveToFileName	"Answer the file name to save. Excel will place the proper extension."	^COMSessionManager absoluteCOMDirectoryName, 'Examples\COMAuto\Output\Stocks'</body></methods><methods><class-id>Examples.SmalltalkCommanderEvent</class-id> <category>accessing</category><body package="Com- Automation Examples">command	"Answer the receiver's command."	^command</body><body package="Com- Automation Examples">command: aCommand	"Set the receiver's command to a &lt;aCommand&gt;."	command := aCommand</body><body package="Com- Automation Examples">timestamp	"Answer the receiver's timestamp."	^timestamp</body></methods><methods><class-id>Examples.SmalltalkCommanderEvent</class-id> <category>initialization</category><body package="Com- Automation Examples">initialize	timestamp := Timestamp now</body></methods><methods><class-id>Examples.SmalltalkCommanderEvent class</class-id> <category>instance creation</category><body package="Com- Automation Examples">for: aCommand	"Answer a new initialized instance of the receiver."	^self new 		command: aCommand;		yourself</body><body package="Com- Automation Examples">new	"Answer a new initialized instance of the receiver."	^super new initialize</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>formatting</category><body package="Com- Automation Examples">activeDocumentSelection	^self application getSelection</body><body package="Com- Automation Examples">applyStyle: name 	"Apply the style &lt;name&gt; to the selection."	self activeDocument getSelection setStyle: name.</body><body package="Com- Automation Examples">charColor: aNumber	"The CharColor statement sets the character color of the selection to the specified color"	^self activeDocumentSelection getFont setCharColor: aNumber</body><body package="Com- Automation Examples">format: aFormatBlock withStyle: aStyleBlock	"Evaluate &lt;aFormatBlock&gt; then select the document from the pre to post position 	of the insertion point. Evaluate &lt;aStyleBlock&gt;."	| bookmark1 bookmark2 unique |	unique := ( aFormatBlock hash + aStyleBlock hash ) abs printString.	bookmark1 := 'Start', unique.	bookmark2 := 'End', unique.	self addBookmark: bookmark1.	aFormatBlock value.	self addBookmark: bookmark2;		extendSelection;		editGoTo: bookmark1.	aStyleBlock value.	self cancel;		deleteBookmark: bookmark1;		gotoBookmark: bookmark2;		deleteBookmark: bookmark2</body><body package="Com- Automation Examples">formatShading: aNumber	^ self activeDocument getSelection setTexture: aNumber</body><body package="Com- Automation Examples">isBold: aBoolean	"The isBold: statement adds or removes the bold character format for the selected text, or controls bold formatting for characters to be inserted at the insertion point."	^self activeDocumentSelection getFont setBold: aBoolean.</body><body package="Com- Automation Examples">keepParagraphWithNext	"Keep the selected paragraphs together on a page."	^self activeDocumentSelection getParagraphs setKeepWithNext: -1.</body><body package="Com- Automation Examples">setFont: aName	"Set the font in the selection to &lt;aName&gt;."	^self activeDocumentSelection getFont setName: aName</body><body package="Com- Automation Examples">setFont: aName size: aNumber	"Set the font in the selection to &lt;aName&gt; of point size &lt;aNumber&gt;."	^(self activeDocumentSelection getFont)		setName: aName;		setSize: aNumber</body><body package="Com- Automation Examples">shadingPattern: aNumber	"Set the selection's shading pattern to &lt;aNumber&gt;."	^self activeDocumentSelection getShading setTexture: aNumber</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>documents</category><body package="Com- Automation Examples">createNewDocument	"Create a new document."	^self application getDocuments Add</body><body package="Com- Automation Examples">fileSaveAs: name 	"Saves the active document with a new name."	^self  activeDocument SaveAs: name asValueReference</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>selection</category><body package="Com- Automation Examples">activeDocument	^self application getActiveDocument</body><body package="Com- Automation Examples">editSelectAll	"Selects the entire document."	^self activeDocument Select</body><body package="Com- Automation Examples">extendSelection	"If extend mode is off, activates extend mode (in extend mode, actions that normally move the insertion point move the active end of the selection).	If extend mode is already on, extends the selection to the next unit of text (the progression is as follows: word, sentence, paragraph, section, entire document)."	^(self activeDocumentSelection)		setExtendMode: true;		Expand</body><body package="Com- Automation Examples">selectToStartOfLine	"The StartOfLine statement moves the active end of the selection (the end that moves when you press SHIFT+HOME) to the beginning of the current line or the line that contains the active end of the selection."	^self startOfLine: #wdExtend</body><body package="Com- Automation Examples">startOfLine: aSelect	"The StartOfLine statement moves the insertion point or, if aSelect is nonzero, the active end of the selection (the end that moves when you press SHIFT+HOME) to the beginning of the current line or the line that contains the active end of the selection."	| unitsType movementType |	unitsType := self application typeNamed: #WdUnits.	movementType := self application typeNamed: #WdMovementType.	^self activeDocumentSelection HomeKey:  (unitsType elements at: #wdLine) value with: (movementType elements at: aSelect) value</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>insertion</category><body package="Com- Automation Examples">insertFooterPageNumbers: aSymbol		"Inserts a PAGE field inside a frame in the header or footer and positions the frame as specified. The arguments for the InsertPageNumbers statement correspond to the options in the Page Numbers dialog box (Insert menu)."		| footerIndexType pageNumbers alignmentType alignment |	footerIndexType := self application typeNamed: #WdHeaderFooterIndex.	alignmentType := self application typeNamed: #WdPageNumberAlignment.	alignment := alignmentType elements at: (#wdAlignPageNumber, aSymbol capitalized) asSymbol.	pageNumbers := ((self activeDocument getSections Item: 1) getFooters Item: (footerIndexType elements at: #wdHeaderFooterPrimary)) getPageNumbers.	 pageNumbers Add: alignment value asValue firstPage: 1 asValue.</body><body package="Com- Automation Examples">insertHeading: aString	"Insert the argument &lt;aString&gt; as a heading."	self format: [ self insertLine: aString ]		withStyle: [ self outlinePromote ]</body><body package="Com- Automation Examples">insertLine: aString	"Insert &lt;aString&gt; in the current document at the insertion point followed by a cariage return."	^self insertString: aString , (String with: Character cr)</body><body package="Com- Automation Examples">insertLineBreak	"Insert a line break in the current document at the insertion point."	^self insertString: ( String with: Character cr )</body><body package="Com- Automation Examples">insertPicture: name	"Inserts the graphic specified by &lt;name&gt; at the insertion point."	^self insertPicture: name linkToFile: false new: nil</body><body package="Com- Automation Examples">insertPicture: name linkToFile: linkToFile new: newEmpty	"Inserts a graphic at the insertion point. If LinkToFile is set to 1 or 2, the graphic is inserted as an INCLUDEPICTURE field that you can update when the graphics file changes.Argument	ExplanationName	The path and filename of the graphic to insert. If the path is omitted, the current folder is assumed.LinkToFile	Specifies whether to insert the graphic as a field and whether to save graphic data in the document:	0 (zero) or omitted    Inserts the graphic specified in the Name argument.	1	Inserts an INCLUDEPICTURE field at the insertion point and saves graphic data in the document.	2	Inserts an INCLUDEPICTURE field at the insertion point and prevents graphic data from being stored in the document by adding a \ d switch.newEmpty	Inserts a 1-inch-square empty metafile graphic, surrounded by a border."	| anchor unitType |	anchor := self activeDocumentSelection getRange.	self activeDocument getInlineShapes				AddPicture: name				linktToFile: linkToFile asValueReference				saveWithDocument: true asValueReference				anchor: anchor asValueReference.	unitType := self application typeNamed: #wdUnits.	self activeDocumentSelection MoveRight: (unitType elements at: #wdCharacter) value count:1</body><body package="Com- Automation Examples">insertString: aString	"Insert &lt;aString&gt; in the current document at the insertion point."	^self activeDocumentSelection TypeText: aString</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>editing</category><body package="Com- Automation Examples">cancel	"Cancels a mode activated by the ColumnSelect, CopyFormat, CopyText, or ExtendSelection statements."	^self activeDocumentSelection			setColumnSelectMode: false;			setExtendMode: false;			EscapeKey</body><body package="Com- Automation Examples">editGoTo: aDestination 	"Moves the insertion point or selection to the specified location or item, such as a page, bookmark, footnote, line, or field. To move the insertion point to a destination listed in the following table, use the corresponding identifier in combination with a number, the plus sign (+) or minus sign (-), or a string."	| type what args |	type := self application typeNamed: #WdGoToItem.	what := (type elements at: #wdGoToBookmark) value.	args := Dictionary new		at: #What put: what asValueReference;		at: #Name put: aDestination asValueReference ;			yourself.	self activeDocumentSelection invokeMethod: #GoTo withNamedArguments: args.</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>views</category><body package="Com- Automation Examples">closeViewHeaderFooter	"Hides the Header and Footer toolbar and moves the insertion point to its previous location in the document area. If the insertion point is not in a header or footer, an error occurs."	self application getActiveWindow getView 		"Closing the headers is only available in Print view"		setType: #wdOutlineView;		setSeekView: #wdSeekMainDocument</body><body package="Com- Automation Examples">viewFooter	"The viewFooter message switches the active document to page layout view, positions the insertion point in the footer area, and then displays the Header and Footer toolbar. If the Header and Footer toolbar is already displayed, viewFooter hides it and moves the insertion point to the document area."	^self application getActiveWindow getView setSplitSpecial: #wdPaneCurrentPageFooter.</body><body package="Com- Automation Examples">viewHeader	"The viewHeader message switches the active document to page layout view, positions the insertion point in the header area, and then displays the Header and Footer toolbar. If the Header and Footer toolbar is already displayed, viewHeader hides it and moves the insertion point to the document area."	^self application getActiveWindow getView setSplitSpecial: #wdPaneCurrentPageHeader.</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>outline</category><body package="Com- Automation Examples">outlinePromote	"Applies the previous heading level style to the selected headings (Heading 2 through Heading 9) or body text."	^self activeDocumentSelection getParagraphs OutlinePromote</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>utilities</category><body package="Com- Automation Examples">createParagraphStyle: name basedOn: basedOn	"Create a paragraph style called &lt;named&gt; based on the existing style &lt;basedOn&gt;."	| style styles |	styles := self application typeNamed: 'WdStyleType'.	style := self activeDocument getStyles Add: name type: (styles elements at: #wdStyleTypeParagraph).	style setBaseStyle: basedOn</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>bookmarks-operations</category><body package="Com- Automation Examples">addBookmark: aName	"Adds the specified bookmark."	^ (self activeDocument getBookmarks Add: aName) Select</body><body package="Com- Automation Examples">deleteBookmark: aName	"Deletes the specified bookmark."	^ (self activeDocument getBookmarks Item: aName asValue) Delete</body><body package="Com- Automation Examples">gotoBookmark: aName	"Go to the specified bookmark."	^ (self activeDocument getBookmarks Item: aName asValue) Select</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>printing</category><body package="Com- Automation Examples">filePrintDefault	"Prints the active document using the current settings in the Print and Print Setup (Word version 6.0) dialog boxes (File menu) and on the Print tab in the Options dialog box (Tools menu)."	^self activeDocument PrintOut</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>standard operations</category><body package="Com- Automation Examples">isItalic: aBoolean	"Set the Italic property to &lt;aBoolean&gt;."	^self activeDocumentSelection getFont setItalic: aBoolean</body></methods><methods><class-id>Examples.WordApplication</class-id> <category>house keeping</category><body package="Com- Automation Examples">closeAndRelease	"Quit Word without saving and release the controller."	| saveType |	saveType := self application typeNamed: #WdSaveOptions.	self application getDocuments Close: (saveType elements at: #wdDoNotSaveChanges) value.	self enforceRelease</body></methods><methods><class-id>Examples.WordApplication class</class-id> <category>accessing</category><body package="Com- Automation Examples">applicationName	^ 'Word.Application'</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>accessing-class information</category><body package="Com- Automation Examples">categoryName	"Answer the class category name."	^self classDefinition category asString</body><body package="Com- Automation Examples">classComment	"Answer the class comment."	"Starting with 5i, Class comments are stored as Text"	^self classDefinition comment asString</body><body package="Com- Automation Examples">classDefName	"Answer the class name."	^self classDefinition name</body><body package="Com- Automation Examples">classInitialization	"Answer the class initialization."	^nil</body><body package="Com- Automation Examples">classInstanceVariables	"Answer the class instance variable names."	^self classDefinition class instVarNames</body><body package="Com- Automation Examples">classVariables	"Answer the class variable names."	^self classDefinition classVarNames</body><body package="Com- Automation Examples">indexableType	"Answer whether the class is of variable or fixed size."	^self classDefinition isVariable		ifTrue: [ 'Variable size' ]		ifFalse: [ 'Fixed size' ]</body><body package="Com- Automation Examples">instanceVariables	"Answer the instance variable names."	^self classDefinition instVarNames</body><body package="Com- Automation Examples">poolNames	"Answer the pool dictionary names used by the class."	^self classDefinition sharedPoolsString</body><body package="Com- Automation Examples">repository	"Answer the repository for the class."	^'Image'</body><body package="Com- Automation Examples">subclassNames	"Answer the subclass names for the class."	| names |	names := String new.	self classDefinition subclasses collect: [ : each | 		names := names, each printString, ' ' ].	^names</body><body package="Com- Automation Examples">superclassName	"Answer the superclass name for the class."	^self classDefinition superclass printString</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>accessing-style formating</category><body package="Com- Automation Examples">categoryTableStyle	"Answer the category table style."	^None</body><body package="Com- Automation Examples">closedFolderFileName	"Answer the full path name to the bitmap file to use for closed folders."	^self pictureDirectory, 'Sodir.bmp'</body><body package="Com- Automation Examples">defaultFontName	"Answer the font to use in the report."	^'Garamond'</body><body package="Com- Automation Examples">format	"Answer the object containing format information. "	^self "for now"</body><body package="Com- Automation Examples">openedFolderFileName	"Answer the full path name to the bitmap file to use for open folders."	^self pictureDirectory, 'Sodir.bmp'</body><body package="Com- Automation Examples">pictureDirectory	"Answer the directory containing the bitmaps used by this sample."	^COMSessionManager absoluteCOMDirectoryName, 'Examples\COMAuto\Input\'</body><body package="Com- Automation Examples">tableStyle	"Answer the MS Word table style we like for this report."	^Columns5</body><body package="Com- Automation Examples">variableTableStyle	"Answer the MS Word table style we like for variables in this report."	^Columns5</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>accessing-members</category><body package="Com- Automation Examples">classDefinition	"Answer the class definition being studied."	^classDefinition</body><body package="Com- Automation Examples">classDefinition: aClass	"Set  the class definition being studied."	classDefinition := aClass</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>accessing-methods</category><body package="Com- Automation Examples">classMethodOrganizer	"Answer a class method organizer for the class."	classMethodOrganizer isNil		ifTrue: [ classMethodOrganizer := self getMethodOrganizer: true ].	^classMethodOrganizer</body><body package="Com- Automation Examples">getMethodOrganizer: isMeta	"Answer a method organizer for the class. If &lt;isMeta&gt; is true, answer a class method organizer. If &lt;isMeta&gt; is false, answer an instance method organizer."	^isMeta 		ifTrue: [ self classDefinition class organization ]		ifFalse: [ self classDefinition organization ]</body><body package="Com- Automation Examples">methodOrganizer	"Answer an instance method organizer for the class."	methodOrganizer isNil		ifTrue: [ methodOrganizer := self getMethodOrganizer: false ].	^methodOrganizer</body><body package="Com- Automation Examples">sortedClassMethodCategories	"Answer the sorted class method categories."	^self classMethodOrganizer categories</body><body package="Com- Automation Examples">sortedMethodCategories	"Answer the sorted instance method categories."	^self methodOrganizer categories</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>format-utilities</category><body package="Com- Automation Examples">createSmalltalkStyle	"Create a style in the word processor to use for our report."	| style |	[self createParagraphStyle: self smalltalkStyleName basedOn: 'Standard'] on: COMError		do: 			[:ex |			self createParagraphStyle: self smalltalkStyleName basedOn: 'Standard'].	style := self activeDocument getStyles Item:self smalltalkStyleName asValue.	style getParagraphFormat getTabStops Add: 0.2.</body><body package="Com- Automation Examples">createStyles	"Create all styles required to run this report."	self createSmalltalkStyle</body><body package="Com- Automation Examples">formatTableFor: aFormatBlock	"Format a table according to the formatting code in &lt;aFormatBlock&gt;."	| args |	self format: aFormatBlock		withStyle: 			[args := (Dictionary new)						at: #Format put: self format tableStyle;						at: #ApplyHeadingRows put: true;						yourself.			self activeDocumentSelection invokeMethod: #ConvertToTable				withNamedArguments: args]</body><body package="Com- Automation Examples">smalltalkStyleName	"Answer the style name we use for Smalltalk formating."	^'Smalltalk'</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>utilities</category><body package="Com- Automation Examples">crString	"Answer a String with a carriage return character."	^String with: Character cr</body><body package="Com- Automation Examples">dotCharacter	"Answer a String with a dot character."	^String with: (Character value: 16rB7)</body><body package="Com- Automation Examples">newlineString	"Answer a String with a new line character."	^String with: (Character value: 11)</body><body package="Com- Automation Examples">saveToFileName	"Answer the full path of the file to save."	^COMSessionManager absoluteCOMDirectoryName, 'Examples\COMAuto\Output\', self classDefName</body><body package="Com- Automation Examples">tabString	"Answer a String with a tab character."	^String with: Character tab</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>format-header and footer</category><body package="Com- Automation Examples">footerString	"Answer the String to use in the page footer."	^self repositoryDescription</body><body package="Com- Automation Examples">setFooter	"Format the page footer."	self		viewFooter;		shadingPatternBlack;		isBold: true;		insertString: self footerString;		selectToStartOfLine;		setFont: self format defaultFontName;		insertFooterPageNumbers: #right;		closeViewHeaderFooter</body><body package="Com- Automation Examples">setHeader	"Format the page header."	self		viewHeader;		shadingPatternBlack;		isBold: true;		isItalic: true;		insertString: 'Class ';		isItalic: false;		insertString: self classDefName asString;		selectToStartOfLine;		setFont: self format defaultFontName size: 20;		closeViewHeaderFooter</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>format-class</category><body package="Com- Automation Examples">formatClassComment	"Insert and format the class comment."	| line |	line := self classComment.	line isNil		ifTrue: [ line := 'No class comment' ]		ifFalse: [ self  insertHeading: 'Class Comment' ].	self insertLine: line</body><body package="Com- Automation Examples">formatClassHeading	"Insert and format a heading for the class definition."	self insertHeading: 'Class Definition'</body><body package="Com- Automation Examples">formatClassInformation	"Insert and format all the class information."	self		formatClassHeading;		formatClassTable;		formatClassComment;		formatInstanceVariables;		formatClassVariables;				formatClassInstanceVariables;		formatPoolVariables;		formatClassInitialization</body><body package="Com- Automation Examples">formatClassInitialization	"Insert and format the class initialization."	| line |	self insertHeading: 'Class Initialization'.	line := self classInitialization.	line isNil ifTrue: [^self insertLine: 'No class initialization defined.'].	self format: [self insertLine: line]		withStyle: 			[self				applyStyle: self smalltalkStyleName;				formatShading: External.Word95Constants.Shadding10PerCent].	self insertLineBreak</body><body package="Com- Automation Examples">formatClassName	"Insert and format the class name."	self insertLine: 'Class' , self tabString , self classDefName</body><body package="Com- Automation Examples">formatClassTable	"Insert and format a table for class information."	self formatTableFor: [ self formatClassTableRows ]</body><body package="Com- Automation Examples">formatClassTableRows	"Insert and format all the rows for the table describing a class."	self		formatClassName;		formatSuperclassName;		formatSubclassNames;		formatIndexableType</body><body package="Com- Automation Examples">formatIndexableType	"Insert and format the indexable type class property."	self insertLine: 'Indexable type' , self tabString , self indexableType</body><body package="Com- Automation Examples">formatInstanceVariables	"Insert and format the instance variable."	self formatVariablesTable: self instanceVariables type: 'Instance'</body><body package="Com- Automation Examples">formatSubclassNames	"Insert and format the subclass names."	| subclassNames |	subclassNames := self subclassNames.	self insertLine: 'Subclasses' , self tabString				, (subclassNames size = 0 ifTrue: ['none'] ifFalse: [subclassNames])</body><body package="Com- Automation Examples">formatSuperclassName	"Insert and format the superclass name."	self insertLine: 'Superclass' , self tabString , self superclassName</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>format-variables</category><body package="Com- Automation Examples">formatClassInstanceVariables	"Insert and format class instance variables."	self formatVariablesTable: self classInstanceVariables type: 'Class instance'</body><body package="Com- Automation Examples">formatClassVariables	"Insert and format class variables."	self formatVariablesTable: self classVariables type: 'Class'</body><body package="Com- Automation Examples">formatPoolVariables	"Insert and format pool dictionary names."	| aString |	self insertHeading: 'Pools'.	aString := self poolNames.	aString isEmpty		ifTrue: [self insertLine: 'No Pools used.']		ifFalse: [self insertLine: aString]</body><body package="Com- Automation Examples">formatVariableDefinitions: aCollection	"Format the variable definitions in &lt;aCollection&gt;."	| comment |	aCollection do: 			[:each |			comment := 'none'.			self insertLine: each , self tabString , comment]</body><body package="Com- Automation Examples">formatVariablesHeader: aVarTypeString variables: aCollection	"Insert and format the variable headings if &lt;aCollection&gt; is not empty."	aCollection isEmpty		ifFalse: [self insertLine: 'Name' , self tabString , 'Comment']</body><body package="Com- Automation Examples">formatVariablesTable: aCollection type: aVarTypeString	"Insert and format a variable table if &lt;aCollection&gt; is not empty."	self insertHeading: aVarTypeString , ' variables'.	aCollection isEmpty		ifTrue: [self insertLine: 'No ' , aVarTypeString , ' variables defined.']		ifFalse: 			[self formatTableFor: 					[self						formatVariablesHeader: aVarTypeString variables: aCollection;						formatVariableDefinitions: aCollection]]</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>format-methods</category><body package="Com- Automation Examples">formatClassMethodCategories	"Insert and format the class method categories."	self formatMethodCategories: self classMethodOrganizer name: 'Class Method Categories'</body><body package="Com- Automation Examples">formatMethodCategories	"Insert and format the instance method categories."	self formatMethodCategories: self methodOrganizer name: 'Method Categories'</body><body package="Com- Automation Examples">formatMethodCategories: aCategory from: anOrganizer depth: aDepth	"Insert and format the method categories in &lt;anOrganizer&gt; at a nested depth of &lt;aDepth&gt;."	self insertCategory: aCategory from: anOrganizer depth: aDepth.</body><body package="Com- Automation Examples">formatMethodCategories: anOrganizer name: aHeading	"Insert and format method categories in &lt;anOrganizer&gt; under the new heading &lt;aHeading&gt;."	self insertHeading: aHeading.	anOrganizer categories isEmpty		ifTrue: [^self insertLine: 'No categories defined.'].	anOrganizer categories		do: [:aCategory | self formatMethodCategories: aCategory from: anOrganizer depth: 0]</body><body package="Com- Automation Examples">insertCategory: aCategory from: anOrganizer depth: aDepth	"Insert and format the category name &lt;aCategory&gt; contained in &lt;anOrganizer&gt; at a nested indentation level of &lt;aDepth&gt;."	| aCollection line |	self insertTabs: aDepth.	self insertCategoryPicture: aCategory.	aCollection := anOrganizer listAtCategoryNamed: aCategory.	line := ' ' , aCategory asString.	aCollection isEmpty		ifFalse: 			[| plural |			plural := aCollection size &gt; 1 ifTrue: ['s'] ifFalse: [''].			line := line , ': ' , aCollection size printString , ' method' , plural].	self insertLine: line.	self		insertMethodSelectors: aCategory		from: anOrganizer		depth: aDepth + 1</body><body package="Com- Automation Examples">insertCategoryPicture: aCategory	"Insert a bitmap to mark a category. If the bitmap cannot be found insert a dot character instead."	[self insertPicture: self openedFolderFileName] on: COMDispatchError		do: 			[:ex |			"Ignore bad file name errors"			self insertString: self dotCharacter]</body><body package="Com- Automation Examples">insertLine: aString modified: isModified inPackage: inPackage	"Insert a line containing &lt;aString&gt;. Apply formatting from the values of &lt;isModified&gt; and &lt;inPackage&gt;."	self  		format: [			self  insertLine: aString ]		withStyle: [ 			self  				isItalic: isModified;				isBold: inPackage.			isModified 				ifTrue: [ self  charColor: Blue ] ]</body><body package="Com- Automation Examples">insertMethodSelectors: aCategory from: anOrganizer depth: aDepth	"Insert and format the method names from &lt;aCategory&gt; contained in &lt;anOrganizer&gt; at an indentation level of depth &lt;aDepth&gt;."	| elements |	elements := anOrganizer listAtCategoryNamed: aCategory.	elements asSortedCollection do: [ : sel |		self insertTabs: aDepth.		self insertLine: sel asString			modified: false			inPackage: false ]</body><body package="Com- Automation Examples">insertTabs: aDepth	"Insert &lt;aDepth&gt; number of tab characters."	| tabStr |	tabStr := ''.	aDepth timesRepeat: [tabStr := tabStr , self tabString].	self insertString: tabStr</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>format-package</category><body package="Com- Automation Examples">formatCategory	"Insert a line containing the class category."	self insertLine: 'Category', self tabString, self categoryName</body><body package="Com- Automation Examples">formatPackageInformation	"Insert and format category and repository information for the package the class is in."	self format: 			[self insertHeading: 'Category'.			self formatTableFor: 					[self						formatCategory;						formatRepository]]		withStyle: [self keepParagraphWithNext]</body><body package="Com- Automation Examples">formatRepository	"Insert a line for the repository the class is in."	self insertLine: 'Repository' , self tabString , self repository</body><body package="Com- Automation Examples">repositoryDescription	"Insert a line for the repository description the class is in."	^'Image file'</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>operations</category><body package="Com- Automation Examples">print	"Prints the active document using the current settings in the Print and Print Setup (Word version 6.0) dialog boxes (File menu) and on the Print tab in the Options dialog box (Tools menu)."	^self filePrintDefault</body><body package="Com- Automation Examples">save	"Save the report."	self fileSaveAs: self saveToFileName</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>format-main</category><body package="Com- Automation Examples">formatClassDocument	"Format the document with the all of the class information."	self createNewDocument.	self editSelectAll.	self setFont: self format defaultFontName.	self createStyles.	self 		setHeader;		setFooter;		formatClassInformation;		formatPackageInformation;		formatClassMethodCategories;		formatMethodCategories</body></methods><methods><class-id>Examples.WordExampleClassFormatter</class-id> <category>formatting</category><body package="Com- Automation Examples">shadingPatternBlack	"Set the selection's shading pattern to black."	^self shadingPattern: #wdTextureSolid.</body></methods><methods><class-id>Examples.WordExampleClassFormatter class</class-id> <category>operations</category><body package="Com- Automation Examples">formatClass: aClassDefinition 	"Format and save the &lt;aClassDefinition&gt;."	"self formatClass: Object"	| formatter |	formatter := self forClass: aClassDefinition.	[ formatter 		formatClassDocument 	] ensure: [ formatter closeAndRelease ]</body><body package="Com- Automation Examples">formatTestClass: aClassDefinition 	"Format and save the &lt;aClassDefinition&gt;."	"self formatTestClass: Object"	| formatter |	formatter := self forClass: aClassDefinition.	[ formatter 		formatClassDocument 	] ensure: [ formatter enforceRelease ]</body><body package="Com- Automation Examples">printClass: aClassDefinition 	"Format and print the &lt;aClassDefinition&gt;."	"self printClass: Object"	| formatter |	formatter := self forClass: aClassDefinition.	[ formatter 		formatClassDocument;		print 	] ensure: [ formatter closeAndRelease ]</body><body package="Com- Automation Examples">saveClass: aClassDefinition 	"Format and save the &lt;aClassDefinition&gt; in a file named after the class name."	"self saveClass: Object"	| formatter |	formatter := self forClass: aClassDefinition.	[ formatter 		formatClassDocument;		save 	] ensure: [ formatter closeAndRelease ]</body><body package="Com- Automation Examples">showClass: aClassDefinition 	"Format and show the &lt;aClassDefinition&gt;."	"self showClass: Object"	| formatter |	formatter := self forClass: aClassDefinition.	[ formatter 		visible: true;		formatClassDocument	] ensure: [ 		MessageBox message: 'Click OK when you want to release Word'.		formatter release ]</body></methods><methods><class-id>Examples.WordExampleClassFormatter class</class-id> <category>instance creation</category><body package="Com- Automation Examples">forClass: aClassDefinition	"Answer a new instance of the receiver to run a report on &lt;aClassDefinition&gt;."	| aController |	aController := COMDispatchDriver createObject: 'Word.Application'				specificationPolicy: COMSpecificationPolicy newVariantPolicy.	^self forClass: aClassDefinition controller: aController</body><body package="Com- Automation Examples">forClass: aClassDefinition controller: aController	"Answer a new instance of the receiver to run a report on &lt;aClassDefinition&gt; through the word processor controller &lt;aController&gt;."	^self new		classDefinition: aClassDefinition;		application: aController;		yourself</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver</class-id> <category>test cases</category><body package="Com- Automation Examples">testStandardAutomationObjectOperations	" Test standard services that should be provided by an automation object controller "	self testStandardAutomationObjectOperations: self createTestController.</body><body package="Com- Automation Examples">testStandardControllerClassMethods	" Test the standard services that should be provided by an automation controller class "	self testStandardControllerClassMethods: self subjectClass.</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver</class-id> <category>test execution</category><body package="Com- Automation Examples">createTestController	^self class newController</body><body package="Com- Automation Examples">releaseTestController    controller notNil        ifTrue: [            controller release.            controller := nil ].</body><body package="Com- Automation Examples">testStandardAutomationCollectionOperations: aCollectionController	" Test standard services that should be provided by an automation collection controller "	self controller: aCollectionController.	self logTestCaseDescription: 'Testing standard automation collection services'.	["##TO DO###" self log nextPutAll: '(standard collection tests not yet defined)'; cr.	] ensure: [		self releaseTestController ].	self logTestCompletion.</body><body package="Com- Automation Examples">testStandardAutomationObjectOperations: aController	" Test standard services that should be provided by an automation object controller "	| anotherController |	self controller: aController.	self logTestCaseDescription: 'Testing standard automation object services'.	[	[	anotherController :=  [ controller application ]		on: COMError, MessageNotUnderstood			do: [ :ex | ex return: '(property not supported: ', ex description, ')' ].	self log tab; nextPutAll: 'Application property: ', anotherController printString; cr.	] ensure: [		anotherController release ].	[	anotherController := [ controller parent ]		on: COMError, MessageNotUnderstood			do: [ :ex | ex return: '(property not supported: ', ex description, ')' ].	self log tab; nextPutAll: 'Parent property: ', anotherController printString; cr.	] ensure: [		anotherController release ].	] ensure: [		self releaseTestController ].	self logTestCompletion.</body><body package="Com- Automation Examples">testStandardControllerClassMethods: aControllerClass	" Test the standard services that should be provided by an automation controller class "	self logTestCaseDescription: 'Testing standard services on ', aControllerClass name.	self log 		nextPutAll: 'Controlled Class Identity'; cr;		tab; nextPutAll: 'Version independent ProgID: ', 			( self describeID: aControllerClass versionIndependentProgID ); cr;		tab; nextPutAll: 'ProgID: ', 			( self describeID: aControllerClass progID ); cr;		tab; nextPutAll: 'CLSID: ', aControllerClass clsid printString; cr;		cr.	self log nextPutAll: 'Test creating new controller...'; cr.	[	controller := aControllerClass new.	[	self log nextPutAll: '... ', controller printString; cr.	] on: COMError		do: [ :ex | 			self log nextPutAll: '***Error creating controller object: ', ex description; cr.			ex pass ].	] ensure: [		self releaseTestController ].	self logTestCompletion.</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver</class-id> <category>accessing</category><body package="Com- Automation Examples">controller	" Answer the controller currently being tested. "	^controller</body><body package="Com- Automation Examples">controller: aController	" Set the controller currently being tested. "	controller := aController.</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver</class-id> <category>subclass-logging</category><body package="Com- Automation Examples">describeID: anID	" Answer a string for &lt;anID&gt;, which is typically a GUID, a string, or nil. "	^anID isNil		ifTrue: [ nil printString ]		ifFalse: [ anID asString ]</body><body package="Com- Automation Examples">logTestCaseDescription: descriptionString    " Log a description of the test case being executed. "    self log nextPutAll: descriptionString; cr.    self controller notNil        ifTrue: [ log tab; nextPutAll: 'Controller: ', self controller printString; cr ].    log cr.</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver class</class-id> <category>test execution</category><body package="Com- Automation Examples">testInAutomationEditor	^self testInAutomationEditor: self newControllerForAutomationEditor</body><body package="Com- Automation Examples">testInAutomationEditor: aController	" Open an automation editor on &lt;aController&gt;. "	^COMAutomationEditor openOnDispatcher: aController 		description: ( aController printString, ' from ', self name ) 		dispatcherName: self automationEditorDispatcherName		initialText: self automationEditorInitialText</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver class</class-id> <category>test object creation</category><body package="Com- Automation Examples">applicationServerContext	" Answer the class context in which the application object server is executed. "	^CLSCTX_ALL</body><body package="Com- Automation Examples">createApplicationObject	" Create a new instance of an Application automation object and answer its IDispatch interface.	This method may be reimplemented by a subclass to control the controlling IUnknown and context	arguments that govern the instantiation of the Application object. "	^IClassFactory createInstance: self clsidApplication		iid: IID_IDispatch		controllingUnknown: nil		context: self applicationServerContext.</body><body package="Com- Automation Examples">newController	^self applicationControllerClass new</body><body package="Com- Automation Examples">newControllerForAutomationEditor	^self newController</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver class</class-id> <category>accessing</category><body package="Com- Automation Examples">applicationControllerClass	self subclassResponsibility</body><body package="Com- Automation Examples">clsidApplication	^self applicationControllerClass clsid</body><body package="Com- Automation Examples">dispatchDriverClass	^self applicationControllerClass dispatchDriverClass</body><body package="Com- Automation Examples">subjectClass    " Answer the COM class exercised by the receiver. "	^self applicationControllerClass</body></methods><methods><class-id>Examples.COMAutomationControllerTestDriver class</class-id> <category>subclass-test execution</category><body package="Com- Automation Examples">automationEditorDispatcherName	^'controller'</body><body package="Com- Automation Examples">automationEditorInitialText	^COMAutomationEditor defaultInitialText: self automationEditorDispatcherName</body></methods><methods><class-id>Examples.SmalltalkCommanderLogCOMObject</class-id> <category>operations</category><body package="Com- Automation Examples">GetDataList: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetDataList function. "	| list stringList |	list := self publishedObject list.	stringList := Array new: list size.	1 to: list size do: [ : index |		| eventArray event |		event := list at: index.		eventArray := Array new: 2.		eventArray 			at: 1 put: event command;			at: 2 put: event timestamp.		stringList at: index put: eventArray ].	resultReference value: stringList.	^S_OK</body><body package="Com- Automation Examples">GetEvent: index _: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetEvent function. "	| list scoEvent domainEvent |	list := self publishedObject list.	index &gt; list size ifTrue: [ ^S_OK ].	domainEvent := list at: index.	scoEvent := SmalltalkCommanderEventCOMObject on: domainEvent.	resultReference value: scoEvent queryEventDualInterface.	^S_OK</body><body package="Com- Automation Examples">GetSize: resultReference	" Invoke the ISmalltalkCommanderLogDisp::GetSize function. "	resultReference value: self publishedObject size.	^S_OK</body></methods><methods><class-id>Examples.SmalltalkCommanderLogCOMObject</class-id> <category>accessing</category><body package="Com- Automation Examples">queryLogDualInterface	"Query the receiver for the interface specified by the GUID for this object's log dual interface.  Answer the interface if it is supported, else answer nil. "	^self queryInterface: ISmalltalkCommanderLogDisp iid</body></methods><methods><class-id>Examples.SmalltalkCommanderLogCOMObject class</class-id> <category>private-initialization</category><body package="Com- Automation Examples">initialize	"This method is run at COM Connect installation time. 	Public objects have a CLSID, private objects need not. 	Only objects with a CLSID can have a class factory registered for them."	"self initialize"	super initialize.	self 		clsid: nil; 		dualInterfaceClass: ISmalltalkCommanderLogDisp; 		specificationTable: nil " specificationTable "</body></methods><methods><class-id>Examples.SmalltalkCommanderLogCOMObject class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: ISmalltalkCommanderDisp;		yourself</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDispPointer</class-id> <category>interface operations</category><body package="Com- Automation Examples">GetCommand: resultReference	" Invoke the ISmalltalkCommanderEventDisp::GetCommand function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := BSTR resultValueBuffer.	hresult := self invokeGetCommand: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="Com- Automation Examples">GetTimeStamp: resultReference	" Invoke the ISmalltalkCommanderEventDisp::GetTimeStamp function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := COMDate resultValueBuffer.	hresult := self invokeGetTimeStamp: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDispPointer class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: (GUID				fromBytes: #[16r20 16r20 16r2D 3 16r21 16rD7 16rD2 16r11 16r95 16r69 0 0 0 0 0 0]).	self updateAndRegister</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDispImplementation</class-id> <category>interface operations</category><body package="Com- Automation Examples">GetCommand: resultReference	" Invoke the ISmalltalkCommanderEventDisp::GetCommand function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetCommand: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="Com- Automation Examples">GetTimeStamp: resultReference	" Invoke the ISmalltalkCommanderEventDisp::GetTimeStamp function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetTimeStamp: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDispImplementation</class-id> <category>private-invocation</category><body package="Com- Automation Examples">invokeGetCommand: this _: value	" Private - invoke the ISmalltalkCommanderEventDisp::GetCommand function for an external caller. "	" HRESULT __stdcall  GetCommand(BSTR * value) = 8 "	"**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^	[" terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	value isNull ifTrue: [ ^E_INVALIDARG ].	###"	| hresult resultReference |	self clearResultBufferAtAddress: value.	resultReference := nil asValueReference.	hresult := implementor GetCommand: resultReference.	hresult succeeded		ifTrue: [self bstrResultAtAddress: value put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="Com- Automation Examples">invokeGetTimeStamp: this _: value	" Private - invoke the ISmalltalkCommanderEventDisp::GetTimeStamp function for an external caller. "	" HRESULT __stdcall  GetTimeStamp(DATE * value) = 7 "	"**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^	[" terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	value isNull ifTrue: [ ^E_INVALIDARG ].	###"	| hresult resultReference |	self clearResultBufferAtAddress: value.	resultReference := nil asValueReference.	hresult := implementor GetTimeStamp: resultReference.	hresult succeeded		ifTrue: [self dateResultAtAddress: value put: resultReference value].	hresult]			on: self rootExceptions			do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDispImplementation class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		copyWith: ISmalltalkCommanderEventDispPointer</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDispImplementation class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: ISmalltalkCommanderEventDispPointer iid.	self vtableSignatureTypeName: #__ISmalltalkCommanderEventDispVtbl.	self updateAndRegister</body></methods><methods><class-id>Examples.COMAutomationObjectTestDriver</class-id> <category>prototypes</category><body package="Com- Automation Examples">doesNotUnderstand: aMessage 	"The default behavior is to create a Notifier containing the 	appropriate message and to allow the user to open a Debugger. 	Subclasses can override this message in order to modify this behavior."	| selectorString |	selectorString :=		Object errorSignal			handle: [:ex | ex returnWith: (#UnprintableSelector &lt;&lt; #com &gt;&gt; '** unprintable selector **')]			do: [aMessage selector printString].	^Object messageNotUnderstoodSignal		raiseRequestWith: aMessage		errorString: ((#MessageNotUnderstoodC1s &lt;&lt; #com &gt;&gt; 'Message not understood: &lt;1s&gt;')			expandMacrosWith: selectorString)</body></methods><methods><class-id>Examples.COMAutomationObjectTestDriver class</class-id> <category>test object creation</category><body package="Com- Automation Examples">createDispatchTestObject: aBindingType	" Create a new instance of the COM object class specified by &lt;aCLSID&gt; for use in testing and answer a dispatcher on the dispatch interface identified by &lt;anIID&gt;.  Construct the test object so that the interface is excercised through an interface binding of type &lt;aBindingType&gt;. "	^self createDispatchTestObject: self subjectCLSID 		iid: self subjectDispatchInterfaceIID 		bindingType: aBindingType 		specificationTable: self dispatchSpecificationTable</body><body package="Com- Automation Examples">createDispatchTestObject: aCLSID iid: anIID bindingType: aBindingType specificationTable: aSpecificationTable	" Create a new instance of the COM object class specified by &lt;aCLSID&gt; for use in testing and answer a dispatcher on the dispatch interface identified by &lt;anIID&gt;.  Construct the test object so that the interface is excercised through an interface binding of type &lt;aBindingType&gt;. "	| aDispatchInterface |	aDispatchInterface := self createTestObject: aCLSID		iid: anIID		bindingType: aBindingType.	^( aSpecificationTable notNil		ifTrue: [ COMDispatchDriver onNew: aDispatchInterface specificationTable: aSpecificationTable ]		ifFalse: [ COMDispatchDriver onNew: aDispatchInterface ] )</body></methods><methods><class-id>Examples.COMAutomationObjectTestDriver class</class-id> <category>subclass-accessing</category><body package="Com- Automation Examples">dispatchSpecificationTable	" Answer the dispatch specifications for a dispatcher controlling the test object. "	| serverSpecificationTable controllerSpecificationTable |	serverSpecificationTable := [ self subjectClass specificationTable ]		on: MessageNotUnderstood		do: [ :ex | ex return: nil ].	serverSpecificationTable isNil		ifTrue: [ ^nil ].	Assert isTrue: [ serverSpecificationTable specificationKey = #memberID ].	controllerSpecificationTable := COMDispatchSpecificationTable newNamedTable.	serverSpecificationTable do: [ :aDispatchSpec |		controllerSpecificationTable add: aDispatchSpec ].	^controllerSpecificationTable</body><body package="Com- Automation Examples">subjectDispatchInterfaceIID	" Answer the IID of the dispatch interface of the COM object implementation class exercised by the receiver. "	^[ self subjectClass dispatchInterfaceIID ]		on: MessageNotUnderstood		do: [ :ex | ex return: IID_IDispatch ]</body></methods><methods><class-id>Examples.COMAutomationObjectTestDriver class</class-id> <category>test execution</category><body package="Com- Automation Examples">testCLSIDInAutomationEditor: aCLSID iid: anIID bindingType: aBindingType specificationTable: aSpecificationTable	" Open an automation editor on the dispatch object identified by &lt;aCLSID&gt; to allow interface invocation of method and properties.  Dispatch specifications are installed on the dispatch driver if provided. "	| aDispatcher |	aDispatcher := self createDispatchTestObject: aCLSID 		iid: anIID 		bindingType: aBindingType 		specificationTable: aSpecificationTable.	COMAutomationEditor openOnDispatcher: aDispatcher		description: ((#AutomationTestObject &lt;&lt; #com &gt;&gt; 'Automation Test Object (CLSID &lt;1s&gt;)')			expandMacrosWith: aCLSID asString)</body><body package="Com- Automation Examples">testInAutomationEditor	" Open an automation editor on the subject class to allow interface invocation of method and properties.  Dispatch specifications are installed on the dispatch driver if provided. "	| aDispatcher |	aDispatcher := self createDispatchTestObject: self subjectCLSID 		iid: self subjectDispatchInterfaceIID 		bindingType: #externalLocal 		specificationTable: self dispatchSpecificationTable.	COMAutomationEditor openOnDispatcher: aDispatcher		description:  ((#x1sTestObjectCLSID2s &lt;&lt; #com &gt;&gt; '&lt;1s&gt; Test Object (CLSID &lt;2s&gt;)')			expandMacrosWith: self subjectClass name			with: self subjectCLSID asString)		dispatcherName: self automationEditorDispatcherName		initialText: self automationEditorInitialText</body><body package="Com- Automation Examples">testInAutomationEditor: anIID bindingType: aBindingType	" Open an automation editor on the dispatch object identified by &lt;aCLSID&gt; to allow interface invocation of method and properties.  Dispatch specifications are installed on the dispatch driver if provided. "	| aDispatcher |	aDispatcher := self createDispatchTestObject: self subjectCLSID 		iid: anIID 		bindingType: aBindingType 		specificationTable: nil.	COMAutomationEditor openOnDispatcher: aDispatcher		description: ((#x1sTestObjectCLSID2s &lt;&lt; #com &gt;&gt; '&lt;1s&gt; Test Object (CLSID &lt;2s&gt;)')			expandMacrosWith: self subjectClass name			with: self subjectCLSID asString)</body></methods><methods><class-id>Examples.COMAutomationObjectTestDriver class</class-id> <category>subclass-test execution</category><body package="Com- Automation Examples">automationEditorDispatcherName	" Answer the name of the dispatcher variable used in an automation editor on the receiver's subject. "	^COMAutomationEditor defaultDispatcherName</body><body package="Com- Automation Examples">automationEditorInitialText	" Answer the initial text displayed in an automation editor on the receiver's subject. "	^COMAutomationEditor defaultInitialText: self automationEditorDispatcherName</body></methods><methods><class-id>Examples.AutomationSmalltalkCommander</class-id> <category>private-evaluation</category><body package="Com- Automation Examples">clearLastError	"Clear the last error."	self 		lastError: nil;		lastErrorStack: nil</body><body package="Com- Automation Examples">errorPrefix	"Answer the String to prefix error messages."	^'SmalltalkCommander: '</body><body package="Com- Automation Examples">evaluateExpression: aString	"Evaluate the current text selection as an expression"	| result |	self clearLastError.	self log addEventForCommand: aString.	Cursor execute showWhile: 		[ result := self evaluator			evaluate: ( ReadStream on: aString )			in: nil			receiver: nil			notifying: nil			ifFail: [ 				self lastError: ((#x1sFailedToEvaluateC2s &lt;&lt; #com &gt;&gt; '&lt;1s&gt;Failed to evaluate: &lt;2s&gt;')			expandMacrosWith: self errorPrefix			with: aString printString).				result := nil ]].	^result</body><body package="Com- Automation Examples">evaluateSmalltalk: aString	"Evaluate the current text selection as an expression"	| result |	[ result := self evaluateExpression: aString ] 		on: Error 		do: ( self exceptionHandler ).	( self answerErrors and: [ self lastError notNil ] )		ifTrue: [ ^self lastError ].	^result</body><body package="Com- Automation Examples">exceptionHandler	^[: ex |		self lastError: self errorPrefix, ex description asString.		self lastErrorStack: ( COMErrorReporter reportErrorString: ex context: thisContext sender ) ]</body></methods><methods><class-id>Examples.AutomationSmalltalkCommander</class-id> <category>accessing</category><body package="Com- Automation Examples">answerErrors	"Answer whether the answers of evaluation expression answers nil or answers an error string. True means answer an error string, false means answer nil."	^answerErrors</body><body package="Com- Automation Examples">answerErrors: aBoolean	"Set whether the answers of evaluation expression answers nil or answers an error string. True means answer an error string, false means answer nil."	answerErrors := aBoolean</body><body package="Com- Automation Examples">evaluator	"Answer an evaluator class appropriate for evaluating expressions in the 	context of instances of this class."	^self class evaluatorClass new</body><body package="Com- Automation Examples">lastError	"Answer the last error String or nil if no error."	^lastError</body><body package="Com- Automation Examples">lastError: aString	"Set the last error String or nil if no error."	lastError := aString</body><body package="Com- Automation Examples">lastErrorStack	"Answer the last error stack String or nil if no error."	^lastErrorStack</body><body package="Com- Automation Examples">lastErrorStack: aValue	"Set the last error stack or nil if no error."	lastErrorStack := aValue</body><body package="Com- Automation Examples">log	"Answer the SmalltalkCommanderLog for the receiver"	^log</body></methods><methods><class-id>Examples.AutomationSmalltalkCommander</class-id> <category>operations</category><body package="Com- Automation Examples">Evaluate: aString	"Evaluate the current text selection as an expression"	| result stExpression |	stExpression := aString isValueReference		ifTrue: [ aString value ] 		ifFalse: [ aString ].	result := self evaluateSmalltalk: stExpression.	"You would normally answer the result since the COM Connect makes sure the result can be mapped to a COM Automation type. In this example, we want to give a detailed error message as an normal answer, which makes then examples easier to write and use. "	( COMVariant isValid: result )		ifFalse: [ ^((#CantMapResultToType &lt;&lt; #com &gt;&gt; 'The result cannot be mapped to a COM Automation data type. The class of the object is &lt;1s&gt; and the object is &lt;2s&gt;. The SmalltalkCommander also has a method called EvaluateAsString.')			expandMacrosWith: result class name			with: result printString) ].	^result</body><body package="Com- Automation Examples">EvaluateAsString: aString	"Evaluate the current text selection as an expression"	| stExpression |	stExpression := aString isValueReference		ifTrue: [ aString value ] 		ifFalse: [ aString ].	^( self evaluateSmalltalk: stExpression ) printString</body><body package="Com- Automation Examples">GetLastError	"Answer the last error String or nil if no error."	^self lastError</body><body package="Com- Automation Examples">GetLastErrorStack	"Answer the last error String or nil if no error. Answer a String with Cr/Lfs."	self lastErrorStack isNil		ifTrue: [ ^nil ].	^self lastErrorStack copyReplaceAll: ( String with: Character cr ) with: Win32ExternalInterface crString</body><body package="Com- Automation Examples">Quit	"Quit the Smalltalk process."	COMSessionManager terminateServerDeferred.</body><body package="Com- Automation Examples">getAnswerErrors	"Answer whether the answers of evaluation expression answers nil or answers an error string. True means answer an error string, false means answer nil."	^self answerErrors</body><body package="Com- Automation Examples">setAnswerErrors: aBoolean	"Set whether the answers of evaluation expression answers nil or answers an error string. True means answer an error string, false means answer nil."	self answerErrors: aBoolean</body></methods><methods><class-id>Examples.AutomationSmalltalkCommander</class-id> <category>private-initialization</category><body package="Com- Automation Examples">initialize	"Initialize the receiver."	self clearLastError.	self answerErrors: true.	self log: SmalltalkCommanderLog new</body></methods><methods><class-id>Examples.AutomationSmalltalkCommander</class-id> <category>private-accessing</category><body package="Com- Automation Examples">log: aSmalltalkCommanderLog	"Private. Set the SmalltalkCommanderLog for the receiver"	log := aSmalltalkCommanderLog</body></methods><methods><class-id>Examples.AutomationSmalltalkCommander class</class-id> <category>instance creation</category><body package="Com- Automation Examples">new	"Answer a new initialized instance of the receiver."	^super new initialize</body></methods><methods><class-id>Examples.AutomationSmalltalkCommander class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: AutomationAllDataTypes;		yourself</body></methods><methods><class-id>Examples.AutomationAllDataTypesTestDriver class</class-id> <category>subclass-accessing</category><body package="Com- Automation Examples">subjectClass	" Answer the COM object implementation class exercised by the receiver. "	^AllDataTypesCOMObject</body></methods><methods><class-id>Examples.AutomationAllDataTypesTestDriver class</class-id> <category>checklists</category><body package="Com- Automation Examples">checkListTestCases	" enable/disable tracing during test execution "	AutomationAllDataTypesTestDriver displayTrace: true.	AutomationAllDataTypesTestDriver displayTrace: false.	" Verify that there are no COM resources left lying around after running test cases "	AutomationAllDataTypesTestDriver checkCOMResources.	" exercise the dispatch interface functions interactively "	AutomationAllDataTypesTestDriver testInAutomationEditor.</body></methods><methods><class-id>Examples.AutomationAllDataTypesTestDriver class</class-id> <category>subclass-test execution</category><body package="Com- Automation Examples">automationEditorInitialText	" Answer the initial text displayed in an automation editor on the receiver's subject. "	^super automationEditorInitialText, '" Setting properties "    dispatcher setProperty: ''LONGValue'' value: 76000.    dispatcher setProperty: ''BYTEValue'' value: 1.    dispatcher setProperty: ''SHORTValue'' value: 2.    dispatcher setProperty: ''FLOATValue'' value: 0.333.    dispatcher setProperty: ''DOUBLEValue'' value: 800.001.    dispatcher setProperty: ''VARIANT_BOOLValue'' value: true.    dispatcher setProperty: ''SCODEValue'' value: 0.    dispatcher setProperty: ''CURRENCYValue'' value:        ( FixedPoint numerator: 9223372036854775807 denominator: 10000 scale: 4 ). "The largest CY value"    dispatcher setProperty: ''DATEValue'' value: Timestamp now.    dispatcher setProperty: ''BSTRValue'' value: ''Bonjour''.    dispatcher setProperty: ''VARIANTValue'' value: ( Array with: 1 with: 2 with: 3 with: 4 ).    dispatcher setProperty: ''SAFEARRAY_I4Value'' value: ( Array with: 10 with: 20 with: 30 with: 40 )." setting interface properties "	| anInterface |	anInterface := dispatcher dispatchInterface queryInterface: External.COMConstants.IID_IUnknown.    [ dispatcher setProperty: ''IUnknownReference'' value: anInterface ] 		ensure: [ anInterface release ].	anInterface := dispatcher dispatchInterface queryInterface: External.COMConstants.IID_IDispatch.    [ dispatcher setProperty: ''IDispatchReference'' value: anInterface ] 		ensure: [ anInterface release ]." setting more interface properties "	| anIDispatch anIAllDataTypesDisp |    anIDispatch := dispatcher dispatchInterface queryInterface: External.COMConstants.IID_IDispatch.	anIAllDataTypesDisp := dispatcher dispatchInterface queryInterface: Examples.IAllDataTypesDisp iid.	[    dispatcher setProperty: ''SAFEARRAY_DISPATCHValue''		value: ( Array with: anIDispatch with: anIAllDataTypesDisp )	] ensure: [ 		anIDispatch release. anIAllDataTypesDisp release ]."Getting properties."    dispatcher getProperty: ''LONGValue''.    dispatcher getProperty: ''BYTEValue''.    dispatcher getProperty: ''SHORTValue''.    dispatcher getProperty: ''FLOATValue''.    dispatcher getProperty: ''DOUBLEValue''.    dispatcher getProperty: ''VARIANT_BOOLValue''.    dispatcher getProperty: ''SCODEValue''.    dispatcher getProperty: ''CURRENCYValue''.    dispatcher getProperty: ''DATEValue''.    dispatcher getProperty: ''BSTRValue''.    ( dispatcher getProperty: ''IUnknownReference'' ) release.    ( dispatcher getProperty: ''IDispatchReference'' ) release.    dispatcher getProperty: ''VARIANTValue''.    " dispatcher getProperty: ''CURRENCYValue''. "    dispatcher getProperty: ''SAFEARRAY_I4Value''.    ( dispatcher getProperty: ''SAFEARRAY_DISPATCHValue'' ) do: [ : anInterface | anInterface release ]." calling method ManyArguments"    | anIDispatch answer |    anIDispatch := dispatcher dispatchInterface queryInterface: External.COMConstants.IID_IDispatch.    [ answer := dispatcher dispatchInterface        manyArguments: anIDispatch        propertyName: ''BSTRValue''        aLong: 888 ]    ensure: [ anIDispatch release ].    answer" calling method ManyArgumentsByRef "    | ref1 ref2 ref3 ref4 refs |    ref1 := ValueReference new. "out"    ref2 := ValueReference new. "out"    ref3 := ValueReference on: 1. "in,out"    ref4 := ValueReference on: 2. "in,out"    refs := Array with: ref1 with: ref2 with: ref3 with: ref4.    dispatcher dispatchInterface manyByRefArguments: ref1        with: ref2        with: ref3        with: ref4.    refs inspect.    ref1 value release. "Release IDispatch answered by reference.""terminating"    dispatcher invokeMethod: ''Quit''.'</body></methods><methods><class-id>Examples.AutomationSmalltalkCommanderTestDriver class</class-id> <category>subclass-accessing</category><body package="Com- Automation Examples">subjectClass	" Answer the COM object implementation class exercised by the receiver. "	^SmalltalkCommanderCOMObject</body></methods><methods><class-id>Examples.AutomationSmalltalkCommanderTestDriver class</class-id> <category>subclass-test execution</category><body package="Com- Automation Examples">automationEditorInitialText	" Answer the initial text displayed in an automation editor on the receiver's subject. "	^super automationEditorInitialText, '" evaluating expressions "    dispatcher invokeMethod: ''Evaluate'' with: ''3+4''.    dispatcher invokeMethod: ''EvaluateAsString'' with: ''3+4''.    dispatcher invokeMethod: ''EvaluateAsString'' with: ''100 factorial''." accessing error information "    dispatcher invokeMethod: ''GetLastError''    dispatcher invokeMethod: ''GetLastErrorStack''" terminating "   dispatcher invokeMethod: ''Quit''.'</body></methods><methods><class-id>Examples.AutomationSmalltalkCommanderTestDriver class</class-id> <category>checklists</category><body package="Com- Automation Examples">checkListTestCases	" enable/disable tracing during test execution "	AutomationSmalltalkCommanderTestDriver displayTrace: true.	AutomationSmalltalkCommanderTestDriver displayTrace: false.	" Verify that there are no COM resources left lying around after running test cases "	AutomationSmalltalkCommanderTestDriver checkCOMResources.	" exercise the dispatch interface functions interactively "	AutomationSmalltalkCommanderTestDriver testInAutomationEditor.</body></methods><methods><class-id>Examples.COMAutomationRNGTestDriver</class-id> <category>private-test cases</category><body package="Com- Automation Examples">defaultTestCount	" Answer the number of random values to get in a test run. "	^10</body><body package="Com- Automation Examples">exerciseRNGDisp: count	" Private - describe the current state of the RNG and exercise it "	log nextPutAll: 'Current RNG settings:'; cr.	#( 'LowerBound' 'UpperBound'  'Seed' ) do: [ :aPropertyName |		log tab; nextPutAll: aPropertyName, ': ', 			( dispatcher getProperty: aPropertyName ) printString; cr ].	log 		nextPutAll: 'Next ', count printString, ' random numbers generated are:'; cr;		tab.	( ( 1 to: count ) collect: [ :i | dispatcher invokeMethod: 'Next' ] ) 		do: [ :aNumber | log nextPutAll: aNumber printString ]		separatedBy: [ log space ].	log cr; cr.</body><body package="Com- Automation Examples">testRNGDisp: count	" Exercise a Smalltalk random number generator through COM automation.  Exercise all the members in the dispatch interface. "	| initialLowerBound initialUpperBound |	initialLowerBound :=  dispatcher getProperty: 'LowerBound'.	initialUpperBound := dispatcher getProperty: 'UpperBound'.	log nextPutAll: 'Test 1: initial settings'; cr.	self exerciseRNGDisp: count.	log nextPutAll: 'Test 2: Large range of positive values'; cr.	dispatcher		setProperty: 'LowerBound' value: 1;		setProperty: 'UpperBound' value: 1000.	self exerciseRNGDisp: count.	log nextPutAll: 'Test 3: A range of negative values'; cr.	dispatcher		setProperty: 'LowerBound' value: -100;		setProperty: 'UpperBound' value: -1.	self exerciseRNGDisp: count.	log nextPutAll: 'Test 4: A mix of positive and negative values'; cr.	dispatcher		setProperty: 'LowerBound' value: -100;		setProperty: 'UpperBound' value: 100.	self exerciseRNGDisp: count.	log nextPutAll: 'Test 5: Default bounds but a different seed'; cr.	dispatcher		setProperty: 'LowerBound' value: initialLowerBound;		setProperty: 'UpperBound' value: initialUpperBound;		setProperty: 'Seed' value: 12345.	self exerciseRNGDisp: count.</body></methods><methods><class-id>Examples.COMAutomationRNGTestDriver</class-id> <category>test cases</category><body package="Com- Automation Examples">testRNGDisp	" Exercise a Smalltalk random number generator through COM automation.  Exercise all the members in the dispatch interface. "	self logTestCaseDescription: (#TestingRNGThroughAutomation &lt;&lt; #com &gt;&gt; 'Testing a COM Random Number Generator through automation') asString.	Assert isEqual: self testInterface iid 		to: self class subjectDispatchInterfaceIID.	dispatcher := COMDispatchDriver on: self testInterface		specificationTable: self class subjectClass dispatchSpecificationsForController.	self testRNGDisp: self defaultTestCount.	self logTestCompletion.</body></methods><methods><class-id>Examples.COMAutomationRNGTestDriver class</class-id> <category>test cases</category><body package="Com- Automation Examples">testExternalLocalRNG	" Test case to exercise the COM random number generator through an external interface binding to a local object. "	" COMAutomationRNGTestDriver testExternalLocalRNG "	| originalTraceSetting |	originalTraceSetting := COMRNGTestDriver displayTrace.	[	COMRNGTestDriver displayTrace: self displayTrace.	COMRNGTestDriver testCLSID: self subjectCLSID		iid: IRandomNumberGenerator 		bindingType: #externalLocal		perform: #testRNG.	] ensure: [		COMRNGTestDriver displayTrace: originalTraceSetting ].</body><body package="Com- Automation Examples">testExternalLocalRNGDisp	" Test case to exercise the COM random number generator dispatch interface through an external interface binding to a local object. "	" COMAutomationRNGTestDriver testExternalLocalRNGDisp "	self testInterface: self subjectDispatchInterfaceIID		bindingType: #externalLocal		perform: #testRNGDisp</body><body package="Com- Automation Examples">testExternalServerRNGDisp	" Test case to exercise the COM random number generator dispatch interface through an external interface binding to an object is a separate server process. "	" COMAutomationRNGTestDriver testExternalServerRNGDisp "	self testInterface: self subjectDispatchInterfaceIID		bindingType: #externalServer		perform: #testRNGDisp</body><body package="Com- Automation Examples">testInternalRNG	" Test case to exercise the COM random number generator through an internal interface binding to a local object. "	" COMAutomationRNGTestDriver testInternalRNG "	| originalTraceSetting |	originalTraceSetting := COMRNGTestDriver displayTrace.	[	COMRNGTestDriver displayTrace: self displayTrace.	COMRNGTestDriver testCLSID: self subjectCLSID		iid: IRandomNumberGenerator 		bindingType: #internalLocal		perform: #testRNG.	] ensure: [		COMRNGTestDriver displayTrace: originalTraceSetting ].</body><body package="Com- Automation Examples">testInternalRNGDisp	" Test case to exercise the COM random number generator dispatch interface through an internal interface binding. "	" COMAutomationRNGTestDriver testInternalRNGDisp "	self testInterface: self subjectDispatchInterfaceIID		bindingType: #internalLocal		perform: #testRNGDisp</body></methods><methods><class-id>Examples.COMAutomationRNGTestDriver class</class-id> <category>subclass-accessing</category><body package="Com- Automation Examples">subjectClass	" Answer the COM object implementation class exercised by the receiver. "	^COMAutomationRNGObject</body><body package="Com- Automation Examples">subjectDispatchInterfaceIID	" Answer the IID of the dispatch interface of the COM object implementation class exercised by the receiver. "	^self subjectClass iidIRandomNumberGeneratorDisp</body></methods><methods><class-id>Examples.COMAutomationRNGTestDriver class</class-id> <category>subclass-test execution</category><body package="Com- Automation Examples">automationEditorInitialText	" Answer the initial text displayed in an automation editor on the receiver's subject. "	^super automationEditorInitialText, '" methods "    dispatcher invokeMethod: ''Next''    ( 1 to: 10 ) collect: [ :i | dispatcher invokeMethod: ''Next'' ]" properties "    dispatcher getProperty: ''LowerBound''    dispatcher getProperty: ''UpperBound''" test over a positive range "    dispatcher setProperty: ''LowerBound'' value: 10.    dispatcher setProperty: ''UpperBound'' value: 20.    ( 1 to: 10 ) collect: [ :i | dispatcher invokeMethod: ''Next'' ]" test over a negative range "    dispatcher setProperty: ''LowerBound'' value: -20.    dispatcher setProperty: ''UpperBound'' value: -10.    ( 1 to: 10 ) collect: [ :i | dispatcher invokeMethod: ''Next'' ]" test over a mixed range "    dispatcher setProperty: ''LowerBound'' value: -10.    dispatcher setProperty: ''UpperBound'' value: 10.    ( 1 to: 10 ) collect: [ :i | dispatcher invokeMethod: ''Next'' ]'</body></methods><methods><class-id>Examples.COMAutomationRNGTestDriver class</class-id> <category>checklists</category><body package="Com- Automation Examples">checkListTestCases	" enable/disable tracing during test execution "	COMAutomationRNGTestDriver displayTrace: true.	COMAutomationRNGTestDriver displayTrace: false.	" Verify that there are no COM resources left lying around after running test cases "	COMAutomationRNGTestDriver checkCOMResources.	" exercise the dispatch interface functions interactively "	COMAutomationRNGTestDriver testInAutomationEditor.	" exercise the RNG functions through the dispatch interface "	COMAutomationRNGTestDriver testInternalRNGDisp.	COMAutomationRNGTestDriver testExternalLocalRNGDisp.	" the following will work only if you have built and installed a server application for the automation RNG class "	COMAutomationRNGTestDriver testExternalServerRNGDisp.	" test the IRandomNumberGenerator functions "	COMAutomationRNGTestDriver testInternalRNG.	COMAutomationRNGTestDriver testExternalLocalRNG.</body></methods><methods><class-id>Examples.IAllDataTypesDisp</class-id> <category>interface operations</category><body package="Com- Automation Examples">get_BSTRValue	"Answer the BSTRValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_BSTRValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_BYTEValue	"Answer the BYTEValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_BYTEValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_CURRENCYValue	"Answer the CURRENCYValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_CURRENCYValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_DATEValue	"Answer the DATEValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_DATEValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_DOUBLEValue	"Answer the DOUBLEValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_DOUBLEValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_FLOATValue	"Answer the FLOATValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_FLOATValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_IDispatchReference	"Answer the IDispatchReference property."	| resultReference |	resultReference := IDispatch new asValueReference.	interface get_IDispatchReference: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_IUnknownReference	"Answer the IUnknownReference property."	| resultReference |	resultReference := IUnknown new asValueReference.	interface get_IUnknownReference: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_LONGValue	"Answer the LONGValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_LONGValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_SAFEARRAY_BSTRValue	"Answer the SAFEARRAY_BSTRValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_SAFEARRAY_BSTRValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_SAFEARRAY_DISPATCHValue	"Answer the SAFEARRAY_DISPATCHValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_SAFEARRAY_DISPATCHValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_SAFEARRAY_I4Value	"Answer the SAFEARRAY_I4Value property."	| resultReference |	resultReference := nil asValueReference.	interface get_SAFEARRAY_I4Value: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_SAFEARRAY_UNKNOWNValue	"Answer the SAFEARRAY_UNKNOWNValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_SAFEARRAY_UNKNOWNValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_SAFEARRAY_VARIANTValue	"Answer the SAFEARRAY_VARIANTValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_SAFEARRAY_VARIANTValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_SCODEValue	"Answer the SCODEValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_SCODEValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_SHORTValue	"Answer the SHORTValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_SHORTValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_VARIANTValue	"Answer the VARIANTValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_VARIANTValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">get_VARIANT_BOOLValue	"Answer the VARIANT_BOOLValue property."	| resultReference |	resultReference := nil asValueReference.	interface get_VARIANT_BOOLValue: resultReference.	^resultReference value</body><body package="Com- Automation Examples">manyArguments: anIDispatch propertyName: aPropertyName aLong: aLong	"Call ManyArguments and answer a VARIANT value."	| resultReference |	resultReference := nil asValueReference.	interface ManyArguments: anIDispatch _: aPropertyName _: aLong _: resultReference.	^resultReference value</body><body package="Com- Automation Examples">manyByRefArguments: anIDispatchRef with: propertyNameRef with: numberRef with: valueRef	" Invoke the IAllDataTypesDisp::ManyByRefArguments function. "	interface ManyByRefArguments: anIDispatchRef _: propertyNameRef _: numberRef _: valueRef</body><body package="Com- Automation Examples">put_BSTRValue: aValue	"Set the BYTEValue property."	interface put_BSTRValue: aValue</body><body package="Com- Automation Examples">put_BYTEValue: aValue	"Set the BYTEValue property."	interface put_BYTEValue: aValue</body><body package="Com- Automation Examples">put_CURRENCYValue: aValue	"Set the CURRENCYValue property."	interface put_CURRENCYValue: aValue</body><body package="Com- Automation Examples">put_DATEValue: aValue	"Set the DATEValue property."	interface put_DATEValue: aValue</body><body package="Com- Automation Examples">put_DOUBLEValue: aValue	"Set the DOUBLEValue property."	interface put_DOUBLEValue: aValue</body><body package="Com- Automation Examples">put_FLOATValue: aValue	"Set the FLOATValue property."	interface put_FLOATValue: aValue</body><body package="Com- Automation Examples">put_IDispatchReference: aValue	"Set the IDispatchReference property."	interface put_IDispatchReference: aValue</body><body package="Com- Automation Examples">put_IUnknownReference: aValue	"Set the IUnknownReference property."	interface put_IUnknownReference: aValue</body><body package="Com- Automation Examples">put_LONGValue: aValue	"Set the LONGValue property."	interface put_LONGValue: aValue</body><body package="Com- Automation Examples">put_SAFEARRAY_BSTRValue: aValue	"Set the SAFEARRAY_BSTRValue property."	interface put_SAFEARRAY_BSTRValue: aValue</body><body package="Com- Automation Examples">put_SAFEARRAY_DISPATCHValue: aValue	"Set the SAFEARRAY_DISPATCHValue property."	interface put_SAFEARRAY_DISPATCHValue: aValue</body><body package="Com- Automation Examples">put_SAFEARRAY_I4Value: aValue	"Set the SAFEARRAY_I4Value property."	interface put_SAFEARRAY_I4Value: aValue</body><body package="Com- Automation Examples">put_SAFEARRAY_UNKNOWNValue: aValue	"Set the SAFEARRAY_UNKNOWNValue property."	interface put_SAFEARRAY_UNKNOWNValue: aValue</body><body package="Com- Automation Examples">put_SAFEARRAY_VARIANTValue: aValue	"Set the SAFEARRAY_VARIANTValue property."	interface put_SAFEARRAY_VARIANTValue: aValue</body><body package="Com- Automation Examples">put_SCODEValue: aValue	"Set the SCODEValue property."	interface put_SCODEValue: aValue</body><body package="Com- Automation Examples">put_SHORTValue: aValue	"Set the SHORTValue property."	interface put_SHORTValue: aValue</body><body package="Com- Automation Examples">put_VARIANTValue: aValue	"Set the VARIANTValue property."	interface put_VARIANTValue: aValue</body><body package="Com- Automation Examples">put_VARIANT_BOOLValue: aValue	"Set the VARIANT_BOOLValue property."	interface put_VARIANT_BOOLValue: aValue</body><body package="Com- Automation Examples">quit	"Reset the values in the receiver to the initialized state."	interface Quit</body><body package="Com- Automation Examples">reset	"Quit the Smalltalk process."	interface Reset</body></methods><methods><class-id>Examples.IAllDataTypesDisp class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: ISmalltalkCommanderDisp;		yourself</body></methods><methods><class-id>Examples.IAllDataTypesDisp class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: IAllDataTypesDispPointer iid.	self updateAndRegister</body></methods><methods><class-id>Examples.COMAutomationRNGObject</class-id> <category>subclass-initializing</category><body package="Com- Automation Examples">initialize	" Private - initialize a new instance. "	super initialize.	" create inner objects used to implement the receiver as an aggregate "	self automationServer: self createAutomationServer.</body></methods><methods><class-id>Examples.COMAutomationRNGObject</class-id> <category>subclass-releasing</category><body package="Com- Automation Examples">releaseInnerObjects	" Private - release any inner objects owned by the receiver. "	self releaseAutomationServer.</body></methods><methods><class-id>Examples.COMAutomationRNGObject</class-id> <category>private-accessing</category><body package="Com- Automation Examples">automationServer	" Private - answer the automation server which dispatches incoming automation invocations to the receiver. "	^automationServer</body><body package="Com- Automation Examples">automationServer: anAutomationServer	" Private - specify the automation server which dispatches incoming automation invocations to the receiver. "	automationServer := anAutomationServer.</body></methods><methods><class-id>Examples.COMAutomationRNGObject</class-id> <category>prototypes</category><body package="Com- Automation Examples">doesNotUnderstand: aMessage 	"The default behavior is to create a Notifier containing the 	appropriate message and to allow the user to open a Debugger. 	Subclasses can override this message in order to modify this behavior."	| selectorString |	selectorString :=		Object errorSignal			handle: [:ex | ex returnWith: (#UnprintableSelector &lt;&lt; #com &gt;&gt; '** unprintable selector **') asString ]			do: [aMessage selector printString].	^Object messageNotUnderstoodSignal		raiseRequestWith: aMessage		errorString: ((#MessageNotUnderstoodC1s &lt;&lt; #com &gt;&gt; 'Message not understood: &lt;1s&gt;')			expandMacrosWith: selectorString)</body></methods><methods><class-id>Examples.COMAutomationRNGObject</class-id> <category>private-initializing</category><body package="Com- Automation Examples">createAutomationServer	" Private - answer the inner IUnknown of an automation server object which will be contained within this aggregate object so that its IDispatch interface can be exposed by the aggregate. "	| automationServerObject |	automationServerObject := ( COMAutomationServer forControllingUnknown: self controllingUnknown )		publishedObject: rng;		specificationTable: self class dispatchSpecificationsForServer;		clsid: self clsid;		yourself.	" explicitly reference count the inner object which we reuse as an aggregate "		" Implementation note: we need to increment the aggregated object's		reference count here when directly instantiating a locally-implemented		object.  This is not necessary when the inner object is created		using its class factory, which by definition always returns a separately 		reference counted inner IUnknown to the creator. "	^automationServerObject innerUnknown</body></methods><methods><class-id>Examples.COMAutomationRNGObject</class-id> <category>subclass-accessing</category><body package="Com- Automation Examples">getInnerObjectInterfaceForIID: iid	" Private - answer a separate reference to the interface identified by the GUID &lt;iid&gt; of an inner object which is to be directly exposed to clients as an interface of the controlling object of an aggregate.  Answer nil there is no such interface. "    " Note that the controlling object of an aggregate which directly        exposes interfaces of an contained object must query the        inner IUnknown of the aggregated object by reimplementing        this method.  In contrast, recall that the usual implementation        of QueryInterface support for interfaces implemented directly        by the receiver is done by reimplementing #getInterfaceForIID:.        If aggregated objects are queried there, however, double        reference counting on the controlling object will result.        Consequently, the controlling object of an aggregate may        implement its QueryInterface support in two places:        - here in #getInnerObjectInterfaceForIID: for any interfaces            of contained objects which are directly exposed to clients        - in the usual #getInterfaceForIID: for any interfaces            implemented directly by the controlling object. "    ( iid = IID_IDispatch or: [ iid = self class iidIRandomNumberGeneratorDisp ] )        ifTrue: [ 		| anIDispatch |		" observe that it is always the controlling object of the aggregate			which should be reference counted when an interface			of an inner object of the aggregate is exposed directly to clients "		anIDispatch := self automationServer queryInterface: iid.		^anIDispatch ].    ^super getInnerObjectInterfaceForIID: iid</body></methods><methods><class-id>Examples.COMAutomationRNGObject</class-id> <category>private-releasing</category><body package="Com- Automation Examples">releaseAutomationServer	" Private - release the automation server object which publishes the receiver. "	automationServer notNil		ifTrue: [  " release the inner object carefully to avoid any release cycles "			| innerObject |			innerObject := automationServer.			automationServer := nil.			innerObject enforceRelease ].</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>private-specifications</category><body package="Com- Automation Examples">constructDispatchSpecificationsWithKey: aSymbol	" Answer the dispatch specification table describing the methods and properties supported through COM automation by the receiver.. "	^self newDispatchSpecificationTable		specificationKey: aSymbol;		decodeSpecificationsFromLiteralArray: self methodSpecificationsLiteral;		decodeSpecificationsFromLiteralArray: self propertySpecificationsLiteral;		yourself</body><body package="Com- Automation Examples">dispatchSpecificationsForController	" Answer the dispatch specification table for accessing instances of the receiver though a COM automation controller dispatch driver. "	" self dispatchSpecificationsForController "	^self constructDispatchSpecificationsWithKey: #name</body><body package="Com- Automation Examples">dispatchSpecificationsForServer	" Answer the dispatch specification table for publishing instances of the receiver though a COM automation controller dispatch driver. "	" self dispatchSpecificationsForServer "	^( self constructDispatchSpecificationsWithKey: #memberID )		clsid: self clsid;		yourself</body><body package="Com- Automation Examples">methodSpecificationsLiteral	" Answer the literal definition of the dispatch specification describing the methods supported through COM automation by the COMRandomNumberGenerator. "	^#( 		#( 'method' 'Next' 16r60020006			#typeCode: #VT_I4			#selector: #next			)		)</body><body package="Com- Automation Examples">newDispatchSpecificationTable	" Private - answer a new empty dispatch specification table for publishing or controlling instances of the receiver. "	^COMDispatchSpecificationTable new		iid: self iidIRandomNumberGeneratorDisp;		name: self iidIRandomNumberGeneratorDescription;		yourself</body><body package="Com- Automation Examples">propertySpecificationsLiteral	" Answer the literal definition of the dispatch specification describing the properties supported through COM automation by the receiver. "    ^#( 		#( 'property' 'Seed' 16r60020000			#typeCode: #VT_I4			#getSelector: #seed 			#setSelector: #seed:			)		#( 'property' 'UpperBound' 16r60020002			#typeCode: #VT_I4			#getSelector: #upperBound 			#setSelector: #upperBound:			)		#( 'property' 'LowerBound' 16r60020004			#typeCode: #VT_I4			#getSelector: #lowerBound 			#setSelector: #lowerBound:			)		)</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>controller specifications</category><body package="Com- Automation Examples">dispatchSpecifications	" Answer the dispatch specification table for accessing instances of the receiver though a COM automation controller dispatch driver. "	" COMAutomationTypeAnalyzer describeSpecificationTable: self dispatchSpecifications "	^self dispatchSpecificationsForController</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>identity</category><body package="Com- Automation Examples">iidIRandomNumberGeneratorDescription	" Answer a description of the the dispatch interface with which a Smalltalk RNG is published as a COM automation object. "	^'IRandomNumberGeneratorDisp'</body><body package="Com- Automation Examples">iidIRandomNumberGeneratorDisp	" Answer the IID of the receiver's dispatch interface specifications in its type library for the IRandomNumberGenerator methods and properties. "	^iidIRandomNumberGeneratorDisp</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>private-accessing</category><body package="Com- Automation Examples">iidIRandomNumberGeneratorDisp: anIID	" Private - set the IID of the receiver's dispatch interface specifications in its type library for the IRandomNumberGenerator methods and properties. "	iidIRandomNumberGeneratorDisp := anIID.</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>session management</category><body package="Com- Automation Examples">startUpApplication        " Start up a COM automation object server application constructed to publish the COM automation RNG object class.  Tracing support is included to demonstrate tracing and debugging of a runtime configuration.  Note that activation of this tracing capability requires that the COM trace support be included in the deployed configuration, which is not the standard deployment configuration; it is an optional technique, generally employed to facilitate debugging. "	" log application activity to a trace log if trace support is installed in a runtime configuration "	COMSessionManager activateRuntimeTracing.	"Initialize COM and verify that the application is being run as an object server."	COMSessionManager initializeAutomationServer.	"Register the class factory for the object server application."	self registerServerClassFactory.	"Arrange for server application termination "	COMSessionManager exitIfNotInUse: true.</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>private-installation</category><body package="Com- Automation Examples">obsolete	"The receiver was removed from the system and is now obsolete. Perform any necessary clean-up. Answer the receiver."	IDispatch removeDispatchIID: self iidIRandomNumberGeneratorDisp.	^super obsolete</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>parcel load/unload/save</category><body package="Com- Automation Examples">prerequisitesForLoading	^super prerequisitesForLoading		addLast: IAllDataTypesDisp;		yourself</body></methods><methods><class-id>Examples.COMAutomationRNGObject class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self clsid: (GUID				fromBytes: #[16rC1 16rB5 16rD9 16rAB 16r15 16r95 16rD0 16r11 16rA7 16r50 0 16rA0 16r24 16rCD 16r45 16rB2]).	" '{ABD9B5C1-9515-11D0-A750-00A024CD45B2}' asGUID "	self iidIRandomNumberGeneratorDisp: (GUID				fromBytes: #[16rC3 16rB5 16rD9 16rAB 16r15 16r95 16rD0 16r11 16rA7 16r50 0 16rA0 16r24 16rCD 16r45 16rB2]).	" '{ABD9B5C3-9515-11d0-A750-00A024CD45B2}' asGUID "	IDispatch registerDispatchIID: self iidIRandomNumberGeneratorDisp</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDisp</class-id> <category>interface operations</category><body package="Com- Automation Examples">getCommand	" Invoke the ISmalltalkCommanderEventDisp::GetCommand function. "	| resultReference |	resultReference := nil asValueReference.	interface GetCommand: resultReference.	^resultReference value</body><body package="Com- Automation Examples">getTimeStamp	" Invoke the ISmalltalkCommanderEventDisp::GetTimeStamp function. "	| resultReference |	resultReference := nil asValueReference.	interface GetTimeStamp: resultReference.	^resultReference value</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDisp class</class-id> <category>class initialization</category><body package="Com- Automation Examples">initialize	self iid: ISmalltalkCommanderEventDispPointer iid.	self updateAndRegister</body></methods><methods><class-id>Examples.ISmalltalkCommanderEventDisp class</class-id> <category>installation</category><body package="Com- Automation Examples">prerequisitesForLoading	^(super prerequisitesForLoading)		addLast: ISmalltalkCommanderEventDispPointer;		yourself</body></methods><methods><class-id>Examples.COMAutomationControllerTests</class-id> <category>accessing</category><body package="Com- Automation Examples">initialize	missingMethods := Bag new.		missingProperties := Bag new.</body><body package="Com- Automation Examples">missingMethods	^missingMethods</body><body package="Com- Automation Examples">missingProperties	^missingProperties</body></methods><methods><class-id>Examples.COMAutomationControllerTests</class-id> <category>test Application object</category><body package="Com- Automation Examples">testApplicationMethods: aCoClassName	| aController application parent |	aController := COMDispatchDriver createObject: aCoClassName.	application := aController application.	parent := aController parent</body><body package="Com- Automation Examples">testApplicationProperties: aController</body><body package="Com- Automation Examples">testExcelApplicationMethods	"self testApplicationMethods: self msWordClass."	self testApplicationMethods: self msExcelApplicationCoClass.</body></methods><methods><class-id>Examples.COMAutomationControllerTests</class-id> <category>test Object object</category><body package="Com- Automation Examples">testObjectMethods	self testObjectMethods: self msExcelApplicationCoClass.</body><body package="Com- Automation Examples">testObjectMethods: aControllerClass	| aController application parent |	aController := aControllerClass createObject.	[		application := aController application.		[		] ensure: [ application release ].		parent := aController parent.		[		] ensure: [ parent release ].	] ensure: [ aController release ].</body></methods><methods><class-id>Examples.COMAutomationControllerTests</class-id> <category>test Internet Explorer</category><body package="Com- Automation Examples">msInternetExplorerApplicationCoClass	^ 'InternetExplorer.Application'</body></methods><methods><class-id>Examples.COMAutomationControllerTests</class-id> <category>test Collection object</category><body package="Com- Automation Examples">testCollectionMethods: aController	1 to: aController getCount do: [:index | aController getItem: index]</body><body package="Com- Automation Examples">testExcelCollectionMethods	| aController |	aController := COMDispatchDriver				createObject: self msExcelApplicationCoClass.	[self testCollectionMethods: aController getWorkbooks]		ensure: [aController release]</body></methods><methods><class-id>Examples.COMAutomationControllerTests</class-id> <category>test MS Excel</category><body package="Com- Automation Examples">msExcelApplicationCoClass	^'Excel.Application'.</body></methods><methods><class-id>Examples.COMAutomationControllerTests class</class-id> <category>instance creation</category><body package="Com- Automation Examples">new	^super new initialize</body></methods><methods><class-id>Examples.WizardAutomationAllDataTypes class</class-id> <category>instance creation</category><body package="Com- Automation Examples">new	"Answer a new initialized instance of the receiver."	^super new initialize</body></methods><methods><class-id>Examples.WizardAutomationAllDataTypes</class-id> <category>initialize</category><body package="Com- Automation Examples">initialize	"Initialize the receiver with default values."	self setLONGValue: 0.	self setBYTEValue: 0.	self setSHORTValue: 0 .	self setFLOATValue: 0.0.	self setDOUBLEValue: 0.0d.	self setVARIANT_BOOLValue: 0 .	self setSCODEValue: 0.	self setDATEValue: Timestamp now.	self setBSTRValue: (#NothingAtAll &lt;&lt; #com &gt;&gt; 'Nothing at all') asString.	self setIUnknownReference: nil.	self setIDispatchReference: nil.	self setVARIANTValue: 0.		self setCURRENCYValue: FixedPoint zero.	self setSAFEARRAY_I4Value: Array new.	self setSAFEARRAY_DISPATCHValue: Array new.	self setSAFEARRAY_UNKNOWNValue: Array new.	self setSAFEARRAY_BSTRValue: Array new.	self setSAFEARRAY_VARIANTValue: Array new.</body></methods><methods><class-id>Examples.WizardAutomationAllDataTypes</class-id> <category>operations-methods</category><body package="Com- Automation Examples">manyArguments: anIDispatch propertyName: aPropertyName aLong: aLong	"An example with multiple arguments. Answer a String containing the result of getting the property &lt;aPropertyName&gt; from &lt;anIDispatch&gt; followed by the string version of &lt;aLong&gt;."	| aValue |	[ aValue := anIDispatch asDispatchDriver getProperty: aPropertyName ]		on: COMError do: [ :exp | (#ErrorInManyArguments &lt;&lt; #com &gt;&gt; 'Error getting the property in method ''ManyArguments''.') asString ].	^aValue printString, ', ', aLong printString</body><body package="Com- Automation Examples">manyByRefArguments: aValueReferenceIDispatch propertyName: aValueReferenceString aLong: aValueReferenceInteger variantReference: aValueReferenceAny 	"An example with multiple by reference arguments. No answer. Fill in the arguments with some data"	aValueReferenceIDispatch value: self getIDispatchReference.	aValueReferenceString value: (#StringValueByReference &lt;&lt; #com &gt;&gt; 'This String value filled in by reference') asString.	aValueReferenceInteger value: 999.	aValueReferenceAny value: 1000</body></methods><methods><class-id>Examples.WizardAutomationAllDataTypes</class-id> <category>releasing</category><body package="Com- Automation Examples">releaseResources	"Private - Release resources associated with the receiver."	self setIDispatchReference: nil.	self setIUnknownReference: nil.	self setSAFEARRAY_DISPATCHValue: nil.	self setSAFEARRAY_UNKNOWNValue: nil.	self setSAFEARRAY_VARIANTValue: nil.	self setVARIANTValue: nil.</body></methods><methods><class-id>Examples.WizardAutomationAllDataTypes</class-id> <category>operations-properties</category><body package="Com- Automation Examples">getBSTRValue	"Answer the BSTRValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #BSTRValue		type: #BSTR		helpString: 'Returns the BSTRValue property (VT_BSTR).'&gt;	^propertyBSTRValue</body><body package="Com- Automation Examples">getBYTEValue	"Answer the BYTEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #BYTEValue		type: #BYTE		helpString: 'Returns the BYTEValue property '&gt;	^propertyBYTEValue</body><body package="Com- Automation Examples">getCURRENCYValue	"Answer the CURRENCYValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #CURRENCYValue		type: #CURRENCY		helpString: 'Returns the CURRENCYValue property '&gt;	^propertyCURRENCYValue</body><body package="Com- Automation Examples">getDATEValue	"Answer the DATEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #DATEValue		type: #DATE		helpString: 'Returns the DATEValue property '&gt;	^propertyDATEValue</body><body package="Com- Automation Examples">getDOUBLEValue	"Answer the DOUBLEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #DOUBLEValue		type: #DOUBLE		helpString: 'Returns the DOUBLEValue property '&gt;	^propertyDOUBLEValue</body><body package="Com- Automation Examples">getFLOATValue	"Answer the FLOATValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #FLOATValue		type: #FLOAT		helpString: 'Returns the FLOATValue property '&gt;	^propertyFLOATValue</body><body package="Com- Automation Examples">getIDispatchReference	"Answer the IDispatchReference property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. The answer is a separate reference of the interface that must be released by the caller."	&lt;getProperty: #IDispatchReference		type: #'IDispatch*'		helpString: 'Returns the IDispatchReference property '&gt;	^propertyIDispatchReference</body><body package="Com- Automation Examples">getIUnknownReference	"Answer the IUnknownReference property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. The answer is a separate reference of the interface that must be released by the caller."	&lt;getProperty: #IUnknownReference		type: #'IUnknown*'		helpString: 'Returns the IUnknownReference property '&gt;	^propertyIUnknownReference</body><body package="Com- Automation Examples">getLONGValue	"Answer the LONGValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #LONGValue		type: #LONG		helpString: 'Returns the LONGValue property '&gt;	^propertyLONGValue</body><body package="Com- Automation Examples">getSAFEARRAY_BSTRValue	"Answer the SAFEARRAY_BSTRValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #SAFEARRAY_BSTRValue		type: #'SAFEARRAY(BSTR)'		helpString: 'Returns the SAFEARRAY_BSTRValue property '&gt;	^propertySAFEARRAY_BSTRValue</body><body package="Com- Automation Examples">getSAFEARRAY_DISPATCHValue	"Answer the SAFEARRAY_DISPATCHValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #SAFEARRAY_DISPATCHValue		type: #'SAFEARRAY(IDispatch*)'		helpString: 'Returns the SAFEARRAY_DISPATCHValue property '&gt;	^propertySAFEARRAY_DISPATCHValue</body><body package="Com- Automation Examples">getSAFEARRAY_I4Value	"Answer the SAFEARRAY_I4Value property. Answer an array of Smalltalk object that have been mapped to it's Automation counterpart."	&lt;getProperty: #SAFEARRAY_I4Value		type: #'SAFEARRAY(LONG)'		helpString: 'Returns the SAFEARRAY_I4Value property '&gt;	^propertySAFEARRAY_I4Value</body><body package="Com- Automation Examples">getSAFEARRAY_UNKNOWNValue	"Answer the SAFEARRAY_UNKNOWNValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #SAFEARRAY_UNKNOWNValue		type: #'SAFEARRAY(IUnknown*)'		helpString: 'Returns the SAFEARRAY_UNKNOWNValue property '&gt;	^propertySAFEARRAY_UNKNOWNValue</body><body package="Com- Automation Examples">getSAFEARRAY_VARIANTValue	"Answer the propertySAFEARRAY_VARIANTValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart. If the array contains interfaces, the answer is made of separate references of the interfaces that must each be released by the caller."	&lt;getProperty: #SAFEARRAY_VARIANTValue		type: #'SAFEARRAY(VARIANT)'		helpString: 'Returns the SAFEARRAY_VARIANTValue property '&gt;	^propertySAFEARRAY_VARIANTValue</body><body package="Com- Automation Examples">getSCODEValue	"Answer the SCODEValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #SCODEValue		type: #SCODE		helpString: 'Returns the SCODEValue property '&gt;	^propertySCODEValue</body><body package="Com- Automation Examples">getSHORTValue	"Answer the SHORTValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #SHORTValue		type: #SHORT		helpString: 'Returns the SHORTValue property '&gt;	^propertySHORTValue</body><body package="Com- Automation Examples">getVARIANT_BOOLValue	"Answer the VARIANT_BOOLValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #VARIANT_BOOLValue		type: #VARIANT_BOOL		helpString: 'Returns the VARIANT_BOOL property '&gt;	^propertyVARIANT_BOOLValue</body><body package="Com- Automation Examples">getVARIANTValue	"Answer the VARIANTValue property. Answer a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;getProperty: #VARIANTValue		type: #VARIANT		helpString: 'Returns the VARIANTValue property '&gt;	^propertyVARIANTValue</body></methods><methods><class-id>Examples.WizardAutomationAllDataTypes</class-id> <category>operations-methods</category><body package="Com- Automation Examples">ManyArguments: anIDispatch _: aPropertyName _: aLong	"An example with multiple arguments. Answer a String containing the result of getting the property &lt;aPropertyName&gt; from &lt;anIDispatch&gt; followed by the string version of &lt;aLong&gt;."	&lt;methodName: #ManyArguments		parameters: #('AnIDispatch' PropertyName Number Value)		parameterTypes: #('IDispatch*' BSTR LONG VARIANT)		returnTypes: #(in in in 'out, retval' )		helpString: 'An example with multiple arguments. Answer a String containing the result of getting the property PropertyName from AnIDispatch followed by the string version of LONG.'&gt;	^self manyArguments: anIDispatch propertyName: aPropertyName aLong: aLong</body><body package="Com- Automation Examples">ManyByRefArguments: aValueReferenceIDispatch _: aValueReferenceString _: aValueReferenceLong _: aValueReferenceAny	"An example with multiple arguments by reference. No answer. Fill in the arguments with some data."	&lt;methodName: #ManyByRefArguments		parameters: #(AValueReferenceIDispatch AValueReferenceString AValueReferenceLong AValueReferenceAny Value)		parameterTypes: #('IDispatch*' BSTR LONG VARIANT)		returnTypes: #(out out 'in, out' 'in,out')		helpString: 'An example with multiple arguments by reference. No answer. Fill in the arguments with some data.'&gt;	^self 		manyByRefArguments: aValueReferenceIDispatch 		propertyName: aValueReferenceString 		aLong: aValueReferenceLong 		variantReference: aValueReferenceAny</body><body package="Com- Automation Examples">Quit	"Quit the Smalltalk process."&lt;methodName: #Quit		parameters: #()		parameterTypes: #()		returnTypes: #()		helpString: 'Release the Smalltalk Automation server from memory.'&gt;	COMSessionManager terminateServerDeferred.</body><body package="Com- Automation Examples">Reset	"Reset the values in the receiver to the initialized state."&lt;methodName: #Reset		parameters: #()		parameterTypes: #()		returnTypes: #()		helpString: 'Reset the values in the receiver to the initialized state.'&gt;	self initialize</body></methods><methods><class-id>Examples.WizardAutomationAllDataTypes</class-id> <category>operations-properties</category><body package="Com- Automation Examples">setBSTRValue: aValue	"Set the BSTRValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #BSTRValue		type: #BSTR		helpString: 'Sets or returns the BSTRValue property (VT_BSTR).'&gt;	propertyBSTRValue := aValue</body><body package="Com- Automation Examples">setBYTEValue: aValue	"Set the BYTEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #BYTEValue		type: #BYTE		helpString: 'Sets the BYTEValue property '&gt;	propertyBYTEValue := aValue</body><body package="Com- Automation Examples">setCURRENCYValue: aValue	"Set the CURRENCYValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #CURRENCYValue		type: #CURRENCY		helpString: 'Sets the CURRENCYValue property '&gt;	propertyCURRENCYValue := aValue</body><body package="Com- Automation Examples">setDATEValue: aValue	"Set the DATEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #DATEValue		type: #DATE		helpString: 'Sets the DATEValue property '&gt;	propertyDATEValue := aValue</body><body package="Com- Automation Examples">setDOUBLEValue: aValue	"Set the DOUBLEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #DOUBLEValue		type: #DOUBLE		helpString: 'Returns the DOUBLEValue property '&gt;	propertyDOUBLEValue := aValue</body><body package="Com- Automation Examples">setFLOATValue: aValue	"Set the FLOATValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #FLOATValue		type: #FLOAT		helpString: 'Sets the FLOATValue property '&gt;	propertyFLOATValue := aValue</body><body package="Com- Automation Examples">setIDispatchReference: aValue	"Set the IDispatchReference property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #IDispatchReference		type: #'IDispatch*'		helpString: 'Sets the IDispatchReference property '&gt;	propertyIDispatchReference := aValue</body><body package="Com- Automation Examples">setIUnknownReference: aValue	"Set the IUnknownReference property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #IUnknownReference		type: #'IUnknown*'		helpString: 'Sets the IUnknownReference property '&gt;	propertyIUnknownReference := aValue</body><body package="Com- Automation Examples">setLONGValue: aValue	"Set the LONGValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #LONGValue		type: #LONG		helpString: 'Sets the LONGValue property '&gt;	propertyLONGValue := aValue</body><body package="Com- Automation Examples">setSAFEARRAY_BSTRValue: aValue	"Set the SAFEARRAY_BSTRValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #SAFEARRAY_BSTRValue		type: #'SAFEARRAY(BSTR)'		helpString: 'Sets the SAFEARRAY_BSTRValue property '&gt;	propertySAFEARRAY_BSTRValue := aValue</body><body package="Com- Automation Examples">setSAFEARRAY_DISPATCHValue: aValue	"Set the SAFEARRAY_DISPATCHValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart. Make sure to free the current value."	&lt;setProperty: #SAFEARRAY_DISPATCHValue		type: #'SAFEARRAY(IDispatch*)'		helpString: 'Sets the SAFEARRAY_DISPATCHValue property '&gt;	propertySAFEARRAY_DISPATCHValue := aValue.</body><body package="Com- Automation Examples">setSAFEARRAY_I4Value: aValue	"Set the SAFEARRAY_I4Value property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #SAFEARRAY_I4Value		type: #'SAFEARRAY(LONG)'		helpString: 'Sets the SAFEARRAY_I4Value property '&gt;	propertySAFEARRAY_I4Value := aValue</body><body package="Com- Automation Examples">setSAFEARRAY_UNKNOWNValue: aValue	"Set the SAFEARRAY_UNKNOWNValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #SAFEARRAY_UNKNOWNValue		type: #'SAFEARRAY(IUnknown*)'		helpString: 'Sets the SAFEARRAY_UNKNOWNValue property '&gt;	propertySAFEARRAY_UNKNOWNValue := aValue.</body><body package="Com- Automation Examples">setSAFEARRAY_VARIANTValue: aValue	"Set the SAFEARRAY_DISPATCHValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #SAFEARRAY_VARIANTValue		type: #'SAFEARRAY(VARIANT)'		helpString: 'Sets the SAFEARRAY_VARIANTValue property '&gt;	propertySAFEARRAY_VARIANTValue := aValue.</body><body package="Com- Automation Examples">setSCODEValue: aValue	"Set the SCODEValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #SCODEValue		type: #SCODE		helpString: 'Sets the SCODEValue property '&gt;	propertySCODEValue := aValue</body><body package="Com- Automation Examples">setSHORTValue: aValue	"Set the SHORTValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #SHORTValue		type: #SHORT		helpString: 'Sets the SHORTValue property '&gt;	propertySHORTValue := aValue</body><body package="Com- Automation Examples">setVARIANT_BOOLValue: aValue	"Set the VARIANT_BOOLValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's Automation counterpart."	&lt;setProperty: #VARIANT_BOOLValue		type: #VARIANT_BOOL		helpString: 'Sets the VARIANT_BOOL property '&gt;	propertyVARIANT_BOOLValue := aValue</body><body package="Com- Automation Examples">setVARIANTValue: aValue 	"Set the VARIANTValue property. &lt;aValue&gt; is a Smalltalk object that has been mapped from it's 	Automation counterpart. "	&lt;setProperty: #VARIANTValue		type: #VARIANT		helpString: 'Sets the VARIANTValue property '&gt;	propertyVARIANTValue := aValue</body></methods><methods><class-id>External.COMInterfaceVTableSignatures</class-id> <category>vtables-automation samples</category><body package="Com- Automation Examples">__IAllDataTypesDispVtbl	&lt;C: struct __IAllDataTypesDispVtbl { 			HRESULT ( __stdcall * QueryInterface)(IAllDataTypesDisp * This, const IID * const riid, void * * ppvObject);			ULONG ( __stdcall * AddRef)(IAllDataTypesDisp * This);			ULONG ( __stdcall * Release)(IAllDataTypesDisp * This);			HRESULT ( __stdcall * GetTypeInfoCount)(IAllDataTypesDisp * This, UINT * pctinfo);			HRESULT ( __stdcall * GetTypeInfo)(IAllDataTypesDisp * This, UINT itinfo, LCID lcid, ITypeInfo * * pptinfo);			HRESULT ( __stdcall * GetIDsOfNames)(IAllDataTypesDisp * This, const IID * const riid, LPOLESTR * rgszNames, UINT cNames, LCID lcid, DISPID * rgdispid);			HRESULT ( __stdcall * Invoke)(IAllDataTypesDisp * This, DISPID dispidMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS * pdispparams, VARIANT * pvarResult, EXCEPINFO * pexcepinfo, UINT * puArgErr);			HRESULT ( __stdcall * put_LONGValue )( IAllDataTypesDisp * This, LONG Value);			HRESULT ( __stdcall * get_LONGValue )( IAllDataTypesDisp * This, LONG *Value);			HRESULT ( __stdcall * put_BYTEValue )( IAllDataTypesDisp * This, BYTE Value);			HRESULT ( __stdcall * get_BYTEValue )( IAllDataTypesDisp * This, BYTE *Value);			HRESULT ( __stdcall * put_SHORTValue )( IAllDataTypesDisp * This, SHORT Value);			HRESULT ( __stdcall * get_SHORTValue )( IAllDataTypesDisp * This, SHORT *Value);			HRESULT ( __stdcall * put_FLOATValue )( IAllDataTypesDisp * This, FLOAT Value);			HRESULT ( __stdcall * get_FLOATValue )( IAllDataTypesDisp * This, FLOAT *Value);			HRESULT ( __stdcall * put_DOUBLEValue )( IAllDataTypesDisp * This, DOUBLE Value);			HRESULT ( __stdcall * get_DOUBLEValue )( IAllDataTypesDisp * This, DOUBLE *Value);			HRESULT ( __stdcall * put_VARIANT_BOOLValue )( IAllDataTypesDisp * This, VARIANT_BOOL Value);			HRESULT ( __stdcall * get_VARIANT_BOOLValue )( IAllDataTypesDisp * This, VARIANT_BOOL *Value);			HRESULT ( __stdcall * put_SCODEValue )( IAllDataTypesDisp * This, SCODE Value);			HRESULT ( __stdcall * get_SCODEValue )( IAllDataTypesDisp * This, SCODE *Value);			HRESULT ( __stdcall * put_DATEValue )( IAllDataTypesDisp * This, DATE Value);			HRESULT ( __stdcall * get_DATEValue )( IAllDataTypesDisp * This, DATE *Value);			HRESULT ( __stdcall * put_BSTRValue )( IAllDataTypesDisp * This, BSTR Value);			HRESULT ( __stdcall * get_BSTRValue )( IAllDataTypesDisp * This, BSTR *Value);			HRESULT ( __stdcall * put_IUnknownReference )( IAllDataTypesDisp * This, IUnknown *Value);			HRESULT ( __stdcall * get_IUnknownReference )( IAllDataTypesDisp * This, IUnknown **Value);			HRESULT ( __stdcall * put_IDispatchReference )( IAllDataTypesDisp * This, IDispatch *Value);			HRESULT ( __stdcall * get_IDispatchReference )( IAllDataTypesDisp * This, IDispatch **Value);			HRESULT ( __stdcall * put_VARIANTValue )( IAllDataTypesDisp * This, VARIANT Value);			HRESULT ( __stdcall * get_VARIANTValue )( IAllDataTypesDisp * This, VARIANT *Value);			HRESULT ( __stdcall * put_CURRENCYValue )( IAllDataTypesDisp * This, CURRENCY Value);			HRESULT ( __stdcall * get_CURRENCYValue )( IAllDataTypesDisp * This, CURRENCY *Value);			HRESULT ( __stdcall * put_SAFEARRAY_I4Value )( IAllDataTypesDisp * This, SAFEARRAY *Value);			HRESULT ( __stdcall * get_SAFEARRAY_I4Value )( IAllDataTypesDisp * This, SAFEARRAY **Value);			HRESULT ( __stdcall * put_SAFEARRAY_DISPATCHValue )( IAllDataTypesDisp * This, SAFEARRAY *Value);			HRESULT ( __stdcall * get_SAFEARRAY_DISPATCHValue )( IAllDataTypesDisp * This, SAFEARRAY **Value);			HRESULT ( __stdcall * put_SAFEARRAY_UNKNOWNValue )( IAllDataTypesDisp * This, SAFEARRAY *Value);			HRESULT ( __stdcall * get_SAFEARRAY_UNKNOWNValue )( IAllDataTypesDisp * This, SAFEARRAY **Value);			HRESULT ( __stdcall * put_SAFEARRAY_BSTRValue )( IAllDataTypesDisp * This, SAFEARRAY *Value);			HRESULT ( __stdcall * get_SAFEARRAY_BSTRValue )( IAllDataTypesDisp * This, SAFEARRAY **Value);			HRESULT ( __stdcall * put_SAFEARRAY_VARIANTValue )( IAllDataTypesDisp * This, SAFEARRAY *Value);			HRESULT ( __stdcall * get_SAFEARRAY_VARIANTValue )( IAllDataTypesDisp * This, SAFEARRAY **Value);			HRESULT ( __stdcall *Quit )( IAllDataTypesDisp * This);			HRESULT ( __stdcall *Reset )( IAllDataTypesDisp * This);			HRESULT ( __stdcall *ManyArguments )( IAllDataTypesDisp * This,		            /* [in] */ IDispatch *AnIDispatch,            		/* [in] */ BSTR PropertyName,		            /* [in] */ LONG Number,		            /* [retval][out] */ VARIANT *Value);			HRESULT ( __stdcall *ManyByRefArguments )( IAllDataTypesDisp * This,				/* [out] */ IDispatch **AnIDispatch,				/* [out] */ BSTR *PropertyName,				/* [out][in] */ LONG *Number,				/* [out][in] */ VARIANT *Value);	}&gt;</body><body package="Com- Automation Examples">__ISmalltalkCommanderDispVtbl	&lt;C: struct __ISmalltalkCommanderDispVtbl { 			HRESULT ( __stdcall * QueryInterface)(ISmalltalkCommanderDisp * This, const IID * const riid, void * * ppvObject);			ULONG ( __stdcall * AddRef)(ISmalltalkCommanderDisp * This);			ULONG ( __stdcall * Release)(ISmalltalkCommanderDisp * This);			HRESULT ( __stdcall * GetTypeInfoCount)(ISmalltalkCommanderDisp * This, UINT * pctinfo);			HRESULT ( __stdcall * GetTypeInfo)(ISmalltalkCommanderDisp * This, UINT itinfo, LCID lcid, ITypeInfo * * pptinfo);			HRESULT ( __stdcall * GetIDsOfNames)(ISmalltalkCommanderDisp * This, const IID * const riid, LPOLESTR * rgszNames, UINT cNames, LCID lcid, DISPID * rgdispid);			HRESULT ( __stdcall * Invoke)(ISmalltalkCommanderDisp * This, DISPID dispidMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS * pdispparams, VARIANT * pvarResult, EXCEPINFO * pexcepinfo, UINT * puArgErr);			HRESULT ( __stdcall * Evaluate)(ISmalltalkCommanderDisp * This, BSTR aBSTR, VARIANT* resultValue);								HRESULT ( __stdcall * EvaluateAsString)(ISmalltalkCommanderDisp * This, BSTR aBSTR, BSTR* resultValue);								HRESULT ( __stdcall * Quit)(ISmalltalkCommanderDisp * This);								HRESULT ( __stdcall * GetLastError)(ISmalltalkCommanderDisp * This, BSTR* resultValue);								HRESULT ( __stdcall * GetLastErrorStack)(ISmalltalkCommanderDisp * This, BSTR* resultValue);						/* [helpstring][propput] */ HRESULT ( __stdcall * put_AnswerErrors )( ISmalltalkCommanderDisp * This,				/* [in] */ VARIANT_BOOL Value);			/* [propget] */ HRESULT ( __stdcall * get_AnswerErrors )( ISmalltalkCommanderDisp * This,				/* [retval][out] */ VARIANT_BOOL * Value);	        /* [helpstring] */ HRESULT ( __stdcall *GetLog )( 	            ISmalltalkCommanderDisp * This,	            /* [retval][out] */ ISmalltalkCommanderLogDisp * *retval);		}&gt;</body><body package="Com- Automation Examples">__ISmalltalkCommanderEventDispVtbl	&lt;C: struct __ISmalltalkCommanderEventDispVtbl { 			HRESULT ( __stdcall * QueryInterface)(ISmalltalkCommanderEventDisp * This, const IID * const riid, void * * ppvObject);			ULONG ( __stdcall * AddRef)(ISmalltalkCommanderEventDisp * This);			ULONG ( __stdcall * Release)(ISmalltalkCommanderEventDisp * This);			HRESULT ( __stdcall * GetTypeInfoCount)(ISmalltalkCommanderEventDisp * This, UINT * pctinfo);			HRESULT ( __stdcall * GetTypeInfo)(ISmalltalkCommanderEventDisp * This, UINT itinfo, LCID lcid, ITypeInfo * * pptinfo);			HRESULT ( __stdcall * GetIDsOfNames)(ISmalltalkCommanderEventDisp * This, const IID * const riid, LPOLESTR * rgszNames, UINT cNames, LCID lcid, DISPID * rgdispid);			HRESULT ( __stdcall * Invoke)(ISmalltalkCommanderEventDisp * This, DISPID dispidMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS * pdispparams, VARIANT * pvarResult, EXCEPINFO * pexcepinfo, UINT * puArgErr);        /* [helpstring] */ HRESULT ( __stdcall *GetTimeStamp )(             ISmalltalkCommanderEventDisp * This,            /* [retval][out] */ DATE *Value);                /* [helpstring] */ HRESULT ( __stdcall *GetCommand )(             ISmalltalkCommanderEventDisp * This,            /* [retval][out] */ BSTR *Value);		}&gt;</body><body package="Com- Automation Examples">__ISmalltalkCommanderLogDispVtbl	&lt;C: struct __ISmalltalkCommanderLogDispVtbl { 			HRESULT ( __stdcall * QueryInterface)(ISmalltalkCommanderLogDisp * This, const IID * const riid, void * * ppvObject);			ULONG ( __stdcall * AddRef)(ISmalltalkCommanderLogDisp * This);			ULONG ( __stdcall * Release)(ISmalltalkCommanderLogDisp * This);			HRESULT ( __stdcall * GetTypeInfoCount)(ISmalltalkCommanderLogDisp * This, UINT * pctinfo);			HRESULT ( __stdcall * GetTypeInfo)(ISmalltalkCommanderLogDisp * This, UINT itinfo, LCID lcid, ITypeInfo * * pptinfo);			HRESULT ( __stdcall * GetIDsOfNames)(ISmalltalkCommanderLogDisp * This, const IID * const riid, LPOLESTR * rgszNames, UINT cNames, LCID lcid, DISPID * rgdispid);			HRESULT ( __stdcall * Invoke)(ISmalltalkCommanderLogDisp * This, DISPID dispidMember, const IID * const riid, LCID lcid, WORD wFlags, DISPPARAMS * pdispparams, VARIANT * pvarResult, EXCEPINFO * pexcepinfo, UINT * puArgErr);               /* [helpstring] */ HRESULT ( __stdcall *GetSize )(             ISmalltalkCommanderLogDisp * This,            /* [retval][out] */ LONG *Value);        /* [helpstring] */ HRESULT ( __stdcall *GetDataList )(             ISmalltalkCommanderLogDisp * This,            /* [retval][out] */ SAFEARRAY * *Value);                /* [helpstring] */ HRESULT ( __stdcall *GetEvent )(             ISmalltalkCommanderLogDisp * This,            /* [in] */ LONG Index,            /* [retval][out] */ ISmalltalkCommanderEventDisp * *retval);		}&gt;</body></methods><methods><class-id>External.COMExternalInterface</class-id> <category>unknown</category><body package="Com- Automation Examples">IGlobalInterfaceTable	&lt;C: typedef struct __IAnonymous IGlobalInterfaceTable&gt;</body><body package="Com- Automation Examples">ISmalltalkCommanderEventDisp	"Define the interface data type. Using __IAnonymous instead of __ISmalltalkCommanderEventDisp is a space optimization that avoids defining extraneous data types that are not needed by the COM Connect runtime."	"&lt;C: typedef struct __ISmalltalkCommanderEventDisp ISmalltalkCommanderEventDisp&gt;"	&lt;C: typedef struct __IAnonymous ISmalltalkCommanderEventDisp&gt;</body><body package="Com- Automation Examples">ISmalltalkCommanderLogDisp	"Define the interface data type. Using __IAnonymous instead of __ISmalltalkCommanderLogDisp is a space optimization that avoids defining extraneous data types that are not needed by the COM Connect runtime."	"&lt;C: typedef struct __ISmalltalkCommanderLogDisp ISmalltalkCommanderLogDisp&gt;"	&lt;C: typedef struct __IAnonymous ISmalltalkCommanderLogDisp&gt;</body></methods><initialize><class-id>Examples.ISmalltalkCommanderDispPointer</class-id></initialize><initialize><class-id>Examples.IAllDataTypesDispPointer</class-id></initialize><initialize><class-id>Examples.IAllDataTypesDispImplementation</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderDisp</class-id></initialize><initialize><class-id>Examples.SmalltalkCommanderEventCOMObject</class-id></initialize><initialize><class-id>Examples.SmalltalkCommanderCOMObject</class-id></initialize><initialize><class-id>Examples.AllDataTypesCOMObject</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderLogDispPointer</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderLogDispImplementation</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderLogDisp</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderDispImplementation</class-id></initialize><initialize><class-id>Examples.SmalltalkCommanderLogCOMObject</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderEventDispPointer</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderEventDispImplementation</class-id></initialize><initialize><class-id>Examples.IAllDataTypesDisp</class-id></initialize><initialize><class-id>Examples.COMAutomationRNGObject</class-id></initialize><initialize><class-id>Examples.ISmalltalkCommanderEventDisp</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>COMRandomNumberGeneratorObject</name><environment>Examples</environment><super>External.COMObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rng iRandomNumberGenerator iDataObject </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-COM Samples</category><attributes><package>Com- Ole Examples</package></attributes></class><class><name>COMExternalInterface</name><environment>External</environment><super>External.Win32ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			private External.COMExternalInterfaceDictionary.*			</imports><category>COM-Host Binding Framework</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>Com- Ole</package></attributes></class><class><name>COMDispatchInterfacePointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Host Bindings</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMDispatchInterfaceImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Host Bindings</category><attributes><package>Com- Automation</package></attributes></class><class><name>AutomationApplication</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>application </inst-vars><class-inst-vars>defaultSpecificationPolicy </class-inst-vars><imports></imports><category>COM-Automation-Controller Samples</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMTestDriverFramework</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>logWindow log </inst-vars><class-inst-vars>displayTrace </class-inst-vars><imports></imports><category>COM-Object Test Framework</category><attributes><package>Com- Ole Examples</package></attributes></class><class><name>COMObjectTestDriver</name><environment>Examples</environment><super>Examples.COMTestDriverFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testObject testInterface bindingType </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Object Test Framework</category><attributes><package>Com- Ole Examples</package></attributes></class><class><name>COMInterfaceVTableSignatures</name><environment>External</environment><super>External.COMExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private External.COMInterfaceVTableSignaturesDictionary.*			</imports><category>COM-Development Support</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>Com- Ole</package></attributes></class><class><name>WizardAutomationAllDataTypes</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertyLONGValue propertyBYTEValue propertySHORTValue propertyFLOATValue propertyDOUBLEValue propertyVARIANT_BOOLValue propertySCODEValue propertyDATEValue propertyBSTRValue propertyIUnknownReference propertyIDispatchReference propertyVARIANTValue propertyCURRENCYValue propertySAFEARRAY_I4Value propertySAFEARRAY_DISPATCHValue propertySAFEARRAY_UNKNOWNValue propertySAFEARRAY_BSTRValue propertySAFEARRAY_VARIANTValue </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Server Samples</category><attributes><package>Com- Automation Examples Pools</package></attributes></class><class><name>COMDualInterfaceObject</name><environment>External</environment><super>External.COMDispatchObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>dualInterfaceClass specificationTable typeLibraries useAdaptorBinding </class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-COM Objects</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMDispatchInterface</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			External.Win32NLSConstants.*			</imports><category>COM-Automation-Interfaces</category><attributes><package>Com- Automation</package></attributes></class></st-source>