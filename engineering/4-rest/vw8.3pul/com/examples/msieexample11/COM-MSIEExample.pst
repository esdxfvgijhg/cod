<?xml version="1.0"?><st-source><!-- Name: COM-MSIEExampleNotice: Copyright © 2007-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This parcel contains the COM event sample application using Microsoft Internet Explorer.DbIdentifier: bear73DbTrace: 89617DevelopmentPrerequisites: #(#(#any 'Com- Automation Development' ''))HideSource: falsePackageName: COM-MSIEExampleParcel: #('COM-MSIEExample')ParcelName: COM-MSIEExamplePrerequisiteParcels: #(#('Com- Automation Development' ''))PrintStringCache: ([BINARY] 7.5.1 - 1.4,bobw)SaveSource: trueVersion: Pre-Release 7.5.1 - nov07.2Pre-Save Block: 	[:pkg|  ]Date: 2:38:16 pm November 12, 2007 --><time-stamp>From VisualWorks®, Pre-Release 7.5.1 (nov07.2) of November 12, 2007 on November 12, 2007 at 2:38:16 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MSIEEventTraceViewer</name><environment>Examples</environment><super>UI.EventEnabledApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>browserController eventSink enableNavigationTracing enableProgressTracing enableStatusTracing openInNewWindow traceLog url defaultURLs </inst-vars><class-inst-vars></class-inst-vars><imports>			Examples.MSIEApplicationController.MSIEAutomationConstants.*			</imports><category>COM-Automation-MSIE Events Example</category><attributes><package>COM-MSIEExample</package></attributes></class><comment><class-id>Examples.MSIEEventTraceViewer</class-id><body>MSIEEventTracer is a simple example of hooking up an event sink to the web browser control in Microsoft Internet Explorer.  The trace viewer displays a simple report about events that it deems interesting.To open an event tracer on IE:	MSIEEventTraceViewer open</body></comment><class><name>MSIEDevExperiments</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COM-Automation-MSIE Events Example</category><attributes><package>COM-MSIEExample</package></attributes></class><comment><class-id>Examples.MSIEDevExperiments</class-id><body>MSIEDevExperiments is a collector for exploration and test utilities while prototyping a simple automation controller and event sink handler for the web browser control in Microsoft's Internet Explorer 4.0." generate description reports on the main interfaces "	MSIEDevExperiments describeIWebBrowser2.	MSIEDevExperiments describeDWebBrowserEvents2.	MSIEDevExperiments describeTypeLibraryConstants." generate spec tables for interfaces of interest "	MSIEDevExperiments generateIWebBrowser2Specifications.	MSIEDevExperiments generateDWebBrowserEvents2Specifications." generate definition of a single merged pool dictionary with all the constants "	MSIEDevExperiments generateTypeLibraryConstantPoolSource." launch IE with a low-level automation controller on it "	MSIEDevExperiments launchWebBrowser. " launch IE with an automation controller and an event tracer on it "	MSIEDevExperiments launchWebBrowserWithEventTraceViewer. </body></comment><class><name>MSIEApplicationController</name><environment>Examples</environment><super>External.COMAutomationApplicationController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Examples.MSIEApplicationController.MSIEAutomationConstants.*			</imports><category>COM-Automation-MSIE Events Example</category><attributes><package>COM-MSIEExample</package></attributes></class><comment><class-id>Examples.MSIEApplicationController</class-id><body>MSIEApplicationController is simple automation object controller class for supporting client access to the Microsoft Internet Explorer application through COM automation.  Only a few of the operations available in the IWebBrowser2 interface are currently supported, since the purpose of this class is to support a very simple client application.  Additional protocol can be added as convenient.The controller also provides a #newEventSink service which returns a COM event sink for the MSIE event interface which is configured and connected to the controller's application object.Dispatch specifications:	MSIEApplicationController specificationTable.	MSIEApplicationController specificationTableEventSink.</body></comment><shared-variable><name>MSIEAutomationConstants</name><environment>Examples.MSIEApplicationController</environment><private>false</private><constant>false</constant><category>local globals</category><attributes><package>COM-MSIEExample</package></attributes></shared-variable><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>testing</category><body package="COM-MSIEExample" selector="isConnected">isConnected	^( browserController notNil or: [ eventSink notNil ] )</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-accessing</category><body package="COM-MSIEExample" selector="browserController">browserController	^browserController</body><body package="COM-MSIEExample" selector="browserController:">browserController: aWebBrowserController	" Private "	browserController := aWebBrowserController.</body><body package="COM-MSIEExample" selector="eventSink">eventSink	" Private "	^eventSink</body><body package="COM-MSIEExample" selector="eventSink:">eventSink: anEventSink	" Private "	eventSink := anEventSink.</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-aspects</category><body package="COM-MSIEExample" selector="defaultURLs">defaultURLs	^defaultURLs</body><body package="COM-MSIEExample" selector="enableNavigationTracing">enableNavigationTracing	" Answer the value holder for the flag indicating whether navigation event tracing is currently enabled. "	^enableNavigationTracing</body><body package="COM-MSIEExample" selector="enableProgressTracing">enableProgressTracing	" Answer the value holder for the flag indicating whether progress event tracing is currently enabled. "	^enableProgressTracing</body><body package="COM-MSIEExample" selector="enableStatusTracing">enableStatusTracing	" Answer the value holder for the flag indicating whether status event tracing is currently enabled. "	^enableStatusTracing</body><body package="COM-MSIEExample" selector="openInNewWindow">openInNewWindow	" Answer the value holder for the flag indicating whether a navigate request should open a new window. "	^openInNewWindow</body><body package="COM-MSIEExample" selector="traceLog">traceLog	" Answer the model for the trace log text. "	^traceLog</body><body package="COM-MSIEExample" selector="url">url	^url</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-browser events</category><body package="COM-MSIEExample" selector="aboutToDownload">aboutToDownload	" Private - MSIE event handler "	self reportEvent: 'DownloadBegin'.	traceLog cr.</body><body package="COM-MSIEExample" selector="aboutToQuitApplication">aboutToQuitApplication	" Private - MSIE event handler - The Web browser we're watching is about to go away, we need to update UI to indicate that operations are no longer available. "	self reportEvent: 'OnQuit'.	traceLog		cr;		nextPutAll: '***The IE application has shut down***'; cr;		cr.	" Historical note: The original implementation of this event handler simply closed		the event watcher window when IE shut down while we were still open. "	"self closeRequest."	" Here is the second generation of application Quit notification handling, which		 behaves a little more conservatively and leaves the window open so you can 		peruse the event trace if you desire, but disables the browser navigation 		operations because the application is no longer available. "	self disableAllBrowserOperations.	self releaseBrowserConnections.</body><body package="COM-MSIEExample" selector="browserStatusTextChanged:">browserStatusTextChanged: newText	" Private - MSIE event handler "	self reportEvent: 'StatusTextChange'.	self reportEventArgument: 'text' 		value: ( newText size = 0 ifTrue: [ '(no text provided)' ] ifFalse: [ newText ] ).	traceLog cr.</body><body package="COM-MSIEExample" selector="commandStateChanged:enabled:">commandStateChanged: cscCommand enabled: enabledState	" Private - MSIE event handler - keep forward/back buttons properly synched "	| navButtonId |	cscCommand = CSC_NAVIGATEFORWARD		ifTrue: [ navButtonId := #goForwardButton ].	cscCommand = CSC_NAVIGATEBACK		ifTrue: [ navButtonId := #goBackButton ].	navButtonId isNil ifTrue: [ ^self ].  " not one of the ones we care about "	enabledState		ifTrue: [ self enableComponentNamed: navButtonId ]		ifFalse: [ self disableComponentNamed: navButtonId ].</body><body package="COM-MSIEExample" selector="documentComplete:url:">documentComplete: anIDispatch url: documentURLRef	" Private - MSIE event handler - A document download is complete.  Note that the document's URL is passed as a VT_BYREF argument and thus must be dereferenced. "	self reportEvent: 'DocumentComplete'.	self reportEventArgument: 'URL' value: documentURLRef value.	traceLog cr.</body><body package="COM-MSIEExample" selector="downloadCompleted">downloadCompleted	" Private - MSIE event handler "	self reportEvent: 'DownloadComplete'.	traceLog cr.</body><body package="COM-MSIEExample" selector="navigateCompleted:to:">navigateCompleted: frameDispatchInterface to: locationURLRef	" Private - MSIE event handler - the browser has just navigated to a new location.  Note that that the URL of the new location is passed as a VT_BYREF argument, so we must dereference the argument to get the actual value. "	self reportEvent: 'NavigateComplete2'.	self reportEventArgument: 'Frame'		value: ( self describeDispInterface: frameDispatchInterface ).	self reportEventArgument: 'Location URL' value: locationURLRef value.	traceLog cr.</body><body package="COM-MSIEExample" selector="progressChange:max:">progressChange: amount max: maxAmount	" Private - MSIE event handler "	self reportEvent: 'ProgressChange'.	traceLog 		tab; nextPutAll: amount printString, ' out of ', maxAmount printString, ' completed...'; cr;		cr.</body><body package="COM-MSIEExample" selector="proposeNavigate:to:flags:targetFrame:postData:headers:cancelFlag:">proposeNavigate: frameDispatchInterface to: locationURLRef flags: navigateFlagsRef targetFrame: targetFrameNameRef postData: postDataArrayRef headers: headersRef cancelFlag: cancelFlagRef	" Private - MSIE event handler -  The browser is about to navigate to a new location.  Report the event and allow the controlling user to veto the proposed navigation.  Note that most of the arguments for this event are declared as VT_BYREF, so we must dereference the argument to get to the actual value. "	| locationURL |	locationURL := locationURLRef value.	self reportEvent: 'BeforeNavigate2'.	self 		reportEventArgument: 'pDisp' value: ( self describeDispInterface: frameDispatchInterface );		reportEventArgument: 'Location URL' value: locationURL;		reportEventArgument: 'Flags' value: navigateFlagsRef value;		reportEventArgument: 'TargetFrameName' value: targetFrameNameRef value;		reportEventArgument: 'PostData' value: postDataArrayRef value;		reportEventArgument: 'Headers' value: headersRef value;		reportEventArgument: 'Cancel' value: cancelFlagRef value.	" we check to see if the operation has already been vetoed by some other listener, although		in this case we ought to be the only client and so the cancel flag should still be off when we see it "	cancelFlagRef value		ifFalse: [  " nobody else has vetoed this proposed operation yet, let's consider it ourselves "			( MessageBox confirm: 'The browser is about to link to ', locationURL printString,					'.', ( String with: Character cr with: Character cr ),					'Allow the navigation operation to proceed?' )				ifFalse: [					| msg |					msg := '*****Navigation operation vetoed*****'.					browserController statusText: msg.					traceLog nextPutAll: msg; cr.					cancelFlagRef value: true.  " cancel the navigation "					].			].	traceLog cr.</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-initialization</category><body package="COM-MSIEExample" selector="constructDefaultURLs">constructDefaultURLs	^#(	"Root location for Internet SDK"		'http://support.microsoft.com/default.aspx?scid=kb;en-us;177877'	"Reusing the WebBrowser and MSHTML"		'http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/prog_browser_node_entry.asp'	"Reusing the WebBrowser Control"		'http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/webbrowser/webbrowser.asp'		) 		"??asList??" asValue</body><body package="COM-MSIEExample" selector="initialize">initialize	" Private - initialize a new instance. "	" browser operations items "	openInNewWindow := false asValue.	url := String new asValue.	defaultURLs := self constructDefaultURLs.	" event tracing items "	enableNavigationTracing := false asValue.	enableNavigationTracing onChangeSend: #toggleNavigationTraceSetting to: self.	enableProgressTracing := false asValue.	enableProgressTracing onChangeSend: #toggleProgressTraceSetting to: self.	enableStatusTracing  := false asValue.	enableStatusTracing onChangeSend: #toggleStatusTraceSetting to: self.	traceLog := TextWindowTextCollector new.</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-operation</category><body package="COM-MSIEExample" selector="disableAllBrowserOperations">disableAllBrowserOperations	" Private "	| operationalWidgetNames |	" these are the UI elements that we need to disable if IE is shut down while our view is still open "	operationalWidgetNames := #( 		#goForwardButton #goBackButton #stopBrowserButton		#quitBrowserButton		#gotoButton #openInNewWindowCheckBox		#urlEntryList		#enableNavigationTracingCheckBox #enableProgressTracingCheckBox #enableStatusTracingCheckBox ).	operationalWidgetNames do: [ :id |		self disableComponentNamed: id ].</body><body package="COM-MSIEExample" selector="displayInitialText">displayInitialText	" Private - display some initial information in the trace view when it is first opened. "	self eventSink isNil		ifTrue: [  " should not be... "			traceLog nextPutAll: 'No MSIE event source available'; cr.			self disableComponentNamed: #traceLogPane.			^self ].	traceLog		nextPutAll: 'Tracing interesting events from the MS Internet Explorer'; cr;		cr.</body><body package="COM-MSIEExample" selector="navigationEventHandlerInfo">navigationEventHandlerInfo	" Private "	^#(		" #( &lt;event name&gt; &lt;handlerSelector&gt; ) "		#( #BeforeNavigate2:_:_:_:_:_:_:  "('pDisp' 'URL' 'Flags' 'TargetFrameName' 'PostData' 'Headers' 'Cancel')"			#proposeNavigate:to:flags:targetFrame:postData:headers:cancelFlag: )		" note: NavigateComplete2 is always monitored "		#( #DownloadBegin #aboutToDownload )		#( #DownloadComplete #downloadCompleted )		#( #DocumentComplete:_:  #documentComplete:url: )		)</body><body package="COM-MSIEExample" selector="registerNavigationEventHandlers">registerNavigationEventHandlers	" Private - register a handler for navigation events supported by the IE application that we want to trace. "	self navigationEventHandlerInfo do: [ :handlerInfo |		self eventSink when: ( handlerInfo at: 1 )  " event name "			send: ( handlerInfo at: 2 )  " handler selector "			to: self ].</body><body package="COM-MSIEExample" selector="registerPermanentEventHandlers">registerPermanentEventHandlers	" Private - Register handlers for the events we want to watch regardless of whether tracing is currently enabled. "	self eventSink 		when: #CommandStateChange:_:			send: #commandStateChanged:enabled:			to: self;		when: #NavigateComplete2:_:  " with: &lt;anIDispatch&gt; with: &lt;url&gt; "			send: #navigateCompleted:to: 			to: self;		when: #OnQuit			send: #aboutToQuitApplication			to: self.</body><body package="COM-MSIEExample" selector="registerProgressEventHandlers">registerProgressEventHandlers	" Private - register a handler for progress events supported by the IE application that we want to trace. "	self eventSink when: #ProgressChange:_:  " with: progress with: progressMax "		send: #progressChange:max:		to: self.</body><body package="COM-MSIEExample" selector="registerStatusEventHandlers">registerStatusEventHandlers	" Private - register a handler for status events supported by the IE application that we want to trace. "	self eventSink when: #StatusTextChange:  " with: &lt;text&gt; "		send: #browserStatusTextChanged:		to: self.</body><body package="COM-MSIEExample" selector="removeNavigationEventHandlers">removeNavigationEventHandlers	" Private - disable tracing by removing the event handlers. "	self navigationEventHandlerInfo do: [ :handlerInfo |		self eventSink removeActionsWithReceiver: self 			forEvent: ( handlerInfo at: 1 ) ]."Historical note: The original implementation of the method was the less efficient:	eventSink removeAllActionsWithReceiver: self.	self registerPermanentEventHandlers."</body><body package="COM-MSIEExample" selector="removeProgressEventHandlers">removeProgressEventHandlers	" Private - disable tracing by removing the event handlers. "	self eventSink removeActionsWithReceiver: self 		forEvent: #ProgressChange:_: .</body><body package="COM-MSIEExample" selector="removeStatusEventHandlers">removeStatusEventHandlers	" Private - disable tracing by removing the event handlers. "	self eventSink removeActionsWithReceiver: self 		forEvent: #StatusTextChange: .</body><body package="COM-MSIEExample" selector="toggleNavigationTraceSetting">toggleNavigationTraceSetting	" Private "	enableNavigationTracing value		ifTrue: [ self registerNavigationEventHandlers ]		ifFalse: [ self removeNavigationEventHandlers ].</body><body package="COM-MSIEExample" selector="toggleProgressTraceSetting">toggleProgressTraceSetting	" Private "	enableProgressTracing value		ifTrue: [ self registerProgressEventHandlers ]		ifFalse: [ self removeProgressEventHandlers ].</body><body package="COM-MSIEExample" selector="toggleStatusTraceSetting">toggleStatusTraceSetting	" Private "	enableStatusTracing value		ifTrue: [ self registerStatusEventHandlers ]		ifFalse: [ self removeStatusEventHandlers ].</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-releasing</category><body package="COM-MSIEExample" selector="releaseBrowserConnections">releaseBrowserConnections	" Private "	self releaseEventSink.	self releaseBrowserController.</body><body package="COM-MSIEExample" selector="releaseBrowserController">releaseBrowserController	" Private "	browserController notNil		ifTrue: [			browserController release.			browserController := nil ].</body><body package="COM-MSIEExample" selector="releaseEventSink">releaseEventSink	" Private "	eventSink notNil		ifTrue: [			eventSink releaseConnection.			eventSink := nil ].</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-tracing</category><body package="COM-MSIEExample" selector="describeDispInterface:">describeDispInterface: anIDispatch	" Private - answer a description of the dispatch interface &lt;anIDispatch&gt; "	| anITypeInfo interfaceName descr |	anIDispatch isNil		ifTrue: [ ^'(null)' ].	( anIDispatch hasTypeInfo	and: [ ( anITypeInfo := anIDispatch getTypeInfo ) notNil ] )		ifTrue: [			interfaceName := anITypeInfo getDocumentationName.			anITypeInfo release ].	descr := WriteStream on: ( String new: 48 ).	descr nextPutAll: 'IDispatch {'.	anIDispatch asInterfacePointer asInteger printOn: descr paddedWith: $0 to: 8 base: 16.	descr nextPutAll: '}'.	interfaceName notNil		ifTrue: [ descr nextPutAll: ' - ', interfaceName ].	^descr contents</body><body package="COM-MSIEExample" selector="reportEvent:">reportEvent: anEventName	" Private "	traceLog nextPutAll: 'Event: ', anEventName; cr.</body><body package="COM-MSIEExample" selector="reportEventArgument:value:">reportEventArgument: argName value: argValue	" Private "	| descr |	descr := ( argValue isString		ifTrue: [ argValue ]		ifFalse: [ argValue printString ] ).	traceLog tab; nextPutAll: argName, ': ', descr; cr.</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-user actions</category><body package="COM-MSIEExample" selector="goBack">goBack	browserController goBack.</body><body package="COM-MSIEExample" selector="goForward">goForward	browserController goForward.</body><body package="COM-MSIEExample" selector="goto">goto	| anURL |	anURL := url value.	anURL size = 0		ifTrue: [			MessageBox warning: 'Cannot navigate the browser to a new location - you have not entered an URL to specify your desired destination.'.			^self ].	openInNewWindow value		ifTrue: [ browserController navigateTo: anURL flags: BNC_OpenInNewWindow ]		ifFalse: [ browserController navigateTo: anURL ].</body><body package="COM-MSIEExample" selector="quitBrowser">quitBrowser	( MessageBox confirm: 'Are you sure you want shut down the Web browser?' )		ifFalse: [ ^self ].	browserController quit.</body><body package="COM-MSIEExample" selector="stopBrowser">stopBrowser	browserController stop.</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-view creation</category><body package="COM-MSIEExample" selector="textMenu">textMenu	"Answer a Menu of operations on the source code that is to 	be displayed when the operate menu button is pressed."	^Menu		labelList: ParagraphEditor editGroupLabels		values: ParagraphEditor editGroupSelectors</body><body package="COM-MSIEExample" selector="traceLogComponent">traceLogComponent	"Construct a view for the trace log text."	| aTextView textEditor |	aTextView := TextWindowTextCollectorView new model: self traceLog.	textEditor := TextEditorController new.	textEditor menuHolder: ( ValueHolder with: self textMenu ).	aTextView controller: textEditor.	self eventSink notNil		ifTrue: [ builder sendKeyboardTo: aTextView ].	^aTextView</body></methods><methods><class-id>Examples.MSIEEventTraceViewer</class-id> <category>private-window events</category><body package="COM-MSIEExample" selector="aboutToCloseWindow">aboutToCloseWindow	" Private - the window being closed. "	self releaseBrowserConnections.</body><body package="COM-MSIEExample" selector="windowOpened">windowOpened	" Private - the window has been opened. "	self registerPermanentEventHandlers.	"self displayInitialText."  " defer until window opened... "	self eventSink isNil		ifTrue: [			self disableComponentNamed: #enableTracingCheckBox.			"self disableComponentNamed: #traceLogPane."  " must defer until initial text displayed "			].</body></methods><methods><class-id>Examples.MSIEEventTraceViewer class</class-id> <category>opening</category><body package="COM-MSIEExample" selector="open">open	" Open an MSIE event trace viewer on a newly launched Web browser. "	" MSIEEventTraceViewer open "	^self openOn: self launchWebBrowser</body><body package="COM-MSIEExample" selector="openOn:">openOn: aBrowserController	" Open a event trace viewer window which establishes an event sink on the MSIE web browser object represented by &lt;aBrowserController&gt; and  reports interesting events triggered by the event source object.  Answer the trace viewer. "	| anEventViewer |	anEventViewer := self new.	anEventViewer 		browserController: aBrowserController;		eventSink: aBrowserController newEventSink.	" open the trace log view which allows us to view event reporting "	self openOn: anEventViewer withSpec: #windowSpec.	anEventViewer displayInitialText.	^anEventViewer</body></methods><methods><class-id>Examples.MSIEEventTraceViewer class</class-id> <category>utilities</category><body package="COM-MSIEExample" selector="launchWebBrowser">launchWebBrowser	" Launch an MSIE Web Browser application.  Answer the controller for the application automation object. "	" self launchWebBrowser "	| aController |	aController := MSIEApplicationController new.  " instantiate a new IE automation object "	aController isVisible: true.	^aController</body></methods><methods><class-id>Examples.MSIEEventTraceViewer class</class-id> <category>interface specs</category><body package="COM-MSIEExample" selector="eventHandlersSpec">eventHandlersSpec	" Answer the specifications for connecting components of the application using events "	^super eventHandlersSpec, #(		#( #applicationWindow			#( #opened #windowOpened ) 			#( #aboutToClose #aboutToCloseWindow )			)		)</body></methods><methods><class-id>Examples.MSIEDevExperiments class</class-id> <category>app info</category><body package="COM-MSIEExample" selector="getTypeLibrary">getTypeLibrary	" Answer the type library.  The client must release when done. "	" MSIEDevExperiments getTypeLibrary "	^COMTypeLibrary libraryID: self ieTypeLibID</body><body package="COM-MSIEExample" selector="ieCLSID">ieCLSID	" MSIEDevExperiments ieCLSID "	"^'{0002DF01-0000-0000-C000-000000000046}' asGUID "	^GUID fromBytes: #[ 1 16rDF 2 0 0 0 0 0 16rC0 0 0 0 0 0 0 16r46 ]"( GUID clsidFromProgID: MSIEDevExperiments ieProgID ) hexByteString	 '#[ 1 16rDF 2 0 0 0 0 0 16rC0 0 0 0 0 0 0 16r46 ]'"</body><body package="COM-MSIEExample" selector="ieProgID">ieProgID	" MSIEDevExperiments ieProgId "	^'InternetExplorer.Application'"GUID clsidFromProgID: MSIEDevExperiments ieProgID"</body><body package="COM-MSIEExample" selector="ieTypeLibID">ieTypeLibID	" MSIEDevExperiments ieTypeLibID "	"^'{EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B}' asGUID"	^GUID fromBytes:#[ 16rC0 16r2A 16rB2 16rEA 16rC1 16r30 16rCF 16r11 16rA7 16rEB 0 0 16rC0 16r5B 16rAE 16rB ]"( COMRegistryInterface typeLibraryIDForCLSID: MSIEDevExperiments ieCLSID ) hexByteString	 '#[ 16rC0 16r2A 16rB2 16rEA 16rC1 16r30 16rCF 16r11 16rA7 16rEB 0 0 16rC0 16r5B 16rAE 16rB ]'"</body></methods><methods><class-id>Examples.MSIEDevExperiments class</class-id> <category>constructing specifications</category><body package="COM-MSIEExample" selector="constantPoolName">constantPoolName	" Answer the name of the pool dictionary constructed to contain the type library enumeration constants. "	^#MSIEAutomationConstants</body><body package="COM-MSIEExample" selector="generateDWebBrowserEvents2Specifications">generateDWebBrowserEvents2Specifications	" Generate a specification table for the DWebBrowserEvents2 event interface "	" MSIEDevExperiments generateDWebBrowserEvents2Specifications "	| aTypeLib anITypeInfo |	aTypeLib := self getTypeLibrary.	[	anITypeInfo := COMAutomationTypeAnalyzer getTypeInfoOfDispatchInterfaceNamed: 'DWebBrowserEvents2' 		typeLibrary: aTypeLib typeLib.	COMAutomationTypeAnalyzer generateEventTypeInfoSpecification: anITypeInfo.	] ensure: [		anITypeInfo notNil ifTrue: [ anITypeInfo release ].		aTypeLib release ].</body><body package="COM-MSIEExample" selector="generateIWebBrowser2Specifications">generateIWebBrowser2Specifications	" Generate a specification table for the IWebBrowser2 interface "	" MSIEDevExperiments generateIWebBrowser2Specifications "	| aTypeLib |	aTypeLib := self getTypeLibrary.	[	COMAutomationTypeAnalyzer generateDispatchInterfaceNamed: 'IWebBrowser2' 		typeLibrary: aTypeLib.	] ensure: [		aTypeLib release ].</body><body package="COM-MSIEExample" selector="generateTypeLibraryConstantPoolSource">generateTypeLibraryConstantPoolSource	" Run this to create a source code specification for a single combined IdentityDictionary to be installed as a static on a selected class. "	" MSIEDevExperiments generateTypeLibraryConstantPoolSource "	| aTypeLib pools allKeys aStream theTarget msg |	aTypeLib := self getTypeLibrary.	[	pools := COMAutomationTypeAnalyzer makeDictionaries: aTypeLib.	] ensure: [		aTypeLib release ].	(MessageBox confirm: 'You must first decide what class will own any new Dictionaries that are created.')		ifFalse: [^ MessageBox warning: 'Operation Aborted.  No owner given for new Dictionaries that might be created.' ].	(theTarget := COMAutomationTypeAnalyzer targetClass) isNil		ifTrue: [^ MessageBox warning: 'Operation Aborted.  No owner given for new Dictionaries that might be created.' ].	aStream := ( TextWindow label: 'MSIE Automation Constants' )		textCollector.	self appendConstantDefinitionHeaderOn: aStream forClass: theTarget.	msg := 'You should consider moving the code that\populates the newly created IdentityDictionary\to a class side method for &lt;1s&gt;\and invoking that method from the\&lt;1s&gt;''s class side initilize method.\\This is too ensure that you have a method that\will re-initialize the IdentityDictionary if\you file the class into a new image.' withCRs expandMacrosWith: theTarget unambiguousName.		aStream 		nextPutAll: 'Dialog warn: ';		nextPutAll: msg printString; 		nextPutAll: '!'; cr;cr.		allKeys := Set new.	pools keys asSortedCollection do: [ :enumName |		| aPool |		aPool := pools at: enumName.		aPool keys do: [ :varName | 			( allKeys includes: varName )				ifTrue: [ self error: 'dup key' ]				ifFalse: [ allKeys add: varName ] ].		self appendEnum: enumName values: aPool on: aStream forClass: theTarget.		].</body></methods><methods><class-id>Examples.MSIEDevExperiments class</class-id> <category>description reports</category><body package="COM-MSIEExample" selector="describeDWebBrowserEvents2">describeDWebBrowserEvents2	" Generate a description of the DWebBrowserEvents2 interface "	" MSIEDevExperiments describeDWebBrowserEvents2 "	| aTypeLib |	aTypeLib := self getTypeLibrary.	[	COMAutomationTypeAnalyzer describeDispatchInterfaceNamed: 'DWebBrowserEvents2' 		typeLibrary: aTypeLib.	] ensure: [		aTypeLib release ].</body><body package="COM-MSIEExample" selector="describeIWebBrowser2">describeIWebBrowser2	" Generate a description of the IWebBrowser2 interface "	" MSIEDevExperiments describeIWebBrowser2 "	| aTypeLib |	aTypeLib := self getTypeLibrary.	[	COMAutomationTypeAnalyzer describeDispatchInterfaceNamed: 'IWebBrowser2' 		typeLibrary: aTypeLib.	] ensure: [		aTypeLib release ].</body><body package="COM-MSIEExample" selector="describeTypeLibraryConstants">describeTypeLibraryConstants	" Generate a description of constant values defined in enumeration types in the type library "	" MSIEDevExperiments describeTypeLibraryConstants "	| aTypeLib |	aTypeLib := self getTypeLibrary.	[	COMAutomationTypeAnalyzer describeTypeLibraryConstants: aTypeLib.	] ensure: [		aTypeLib release ].</body></methods><methods><class-id>Examples.MSIEDevExperiments class</class-id> <category>testing</category><body package="COM-MSIEExample" selector="constructMSIEEventSink">constructMSIEEventSink	" Construct an event sink for the DWebBrowserEvents2 event interface. "	| eventSpecTable anEventSink |	eventSpecTable := MSIEApplicationController eventSinkSpecificationTable.	anEventSink := COMEventSink iid: eventSpecTable iid		specificationTable: eventSpecTable.	" we realize after the first time we use the event sink that we want to ensure that it is 		properly shut down when the MSIE application notifies us that it is being shut down.		We can ensure this by making the event sink itself disconnect itself when a quit event		is received.  This is reliable and doesn't require clients of the event sink to have to		be involved in this careful shutdown process. "	anEventSink when: #OnQuit		send: #releaseConnection		to: anEventSink.	^anEventSink</body><body package="COM-MSIEExample" selector="initialAutomationEditorText">initialAutomationEditorText	" Prime our automation editor with some expressions for MSIE "	^'" Invoke methods and properties of the MSIE automation object by sending messages to the dispatcher.  Select an expression to evaluate and invoke DoIt, PrintIt, or InspectIt. "" MSIE application properties "	dispatcher getProperty: ''Name''.	dispatcher getProperty: ''FullName''.	dispatcher getProperty: ''Path''." play with zooming the IE window "	dispatcher getProperty: ''FullScreen''.	dispatcher setProperty: ''FullScreen'' value: true.	dispatcher setProperty: ''FullScreen'' value: false." simple navigation operations "	dispatcher invokeMethod: ''GoBack''.	dispatcher invokeMethod: ''GoForward''.	dispatcher invokeMethod: ''GoHome''.	dispatcher invokeMethod: ''Stop''." current page "	dispatcher getProperty: ''LocationName''.	dispatcher getProperty: ''LocationURL''." force the application to shut down underneath us "	dispatcher invokeMethod: ''Quit''.'</body><body package="COM-MSIEExample" selector="launchWebBrowser">launchWebBrowser	" Launch an MSIE Web Browser application with an automation editor on it so we can poke at it.  Answer the controller. "	" MSIEDevExperiments launchWebBrowser "	| aController |	aController := MSIEApplicationController new.  " instantiate a new IE automation object "	aController isVisible: true.	COMAutomationEditor openOnDispatcher: aController dispatchDriver		description: ( 'an MS IE application object: ', aController dispatchDriver printString )		dispatcherName: COMAutomationEditor defaultDispatcherName  " the local var name for the dispatcher "		initialText: self initialAutomationEditorText.	^aController</body><body package="COM-MSIEExample" selector="launchWebBrowserWithEventTraceViewer">launchWebBrowserWithEventTraceViewer	" Launch a Web Browser with an automation editor and an event trace viewer on it.  Answer the controller. "	" MSIEDevExperiments launchWebBrowserWithEventTraceViewer "	| aController anEventSink |	aController := self launchWebBrowser.	" establish an event sink on the MSIE app and watch events arrive in a trace viewer "	anEventSink := self constructMSIEEventSink.	anEventSink establishConnectionTo: aController dispatchDriver dispatchInterface.	COMEventTraceViewer openOnSink: anEventSink.	^aController</body></methods><methods><class-id>Examples.MSIEDevExperiments class</class-id> <category>unused spec construction services</category><body package="COM-MSIEExample" selector="generateTypeLibraryConstantPools">generateTypeLibraryConstantPools	" Run this to create one or more Identity dictionaries in your image, one for each enumeration type that you select. You must provide	a class where the Identity dictionaries will be stored as statics.  NOTE:  pre 5i we used to use PoolDictionary -- now we use a static 	and imports"	" MSIEDevExperiments generateTypeLibraryConstantPools "	| aTypeLib |	aTypeLib := self getTypeLibrary.	[	COMAutomationTypeAnalyzer promptAndDefineDictionaries: aTypeLib.	] ensure: [		aTypeLib release]."	| aTypeLib pools |	[aTypeLib := self getTypeLibrary.	pools := COMAutomationTypeAnalyzer makeDictionaries: self getTypeLibrary.] 		ensure: [aTypeLib release].	pools inspect."</body><body package="COM-MSIEExample" selector="generateTypeLibrarySpecTables">generateTypeLibrarySpecTables	" Run this to create the specification tables for one or more interfaces. "	" MSIEDevExperiments generateTypeLibrarySpecTables "	| aTypeLib |	aTypeLib := self getTypeLibrary.	[	COMAutomationTypeAnalyzer generateTypeLibrarySpecificationsFromUser: aTypeLib.	] ensure: [		aTypeLib release ].</body></methods><methods><class-id>Examples.MSIEDevExperiments class</class-id> <category>private-dev utilities</category><body package="COM-MSIEExample" selector="appendConstantDefinitionHeaderOn:forClass:">appendConstantDefinitionHeaderOn: aStream forClass: aClass	aStream 		nextPutAll: '" Pool Variables in ', self constantPoolName, ' (for InternetExplorer.Application.1) "'; cr;		tab; nextPutAll: '" Source: Type Library SHDocVw Enumeration Constants "'; cr;		cr;		nextPutAll: ('(&lt;1s&gt; asNameSpace includesKey: #&lt;2s&gt;)' expandMacrosWith: aClass unambiguousName  with: self constantPoolName);cr;		tab; 		nextPutAll: 'ifFalse: '; cr;		tab;tab; 		nextPutAll: '[ ';cr;		tab;tab;		nextPutAll: ('(&lt;1s&gt; asNameSpace ' expandMacrosWith: aClass unambiguousName) ;cr;		tab;tab;tab;		nextPutAll: ('defineStatic: #&lt;1s&gt;' expandMacrosWith: self constantPoolName); cr;		tab;tab;tab;		nextPutAll: 'private: true' ;cr;		tab;tab;tab;		nextPutAll: 'constant: false' ;cr;		tab;tab;tab;		nextPutAll: 'category: NameSpaceOrganizer  defaultProtocol' ;cr;		tab;tab;tab;		nextPutAll: 'initializer: ', 'Core.IdentityDictionary new' printString , ') initialize ]!';cr;		cr.</body><body package="COM-MSIEExample" selector="appendEnum:values:on:forClass:">appendEnum: enumName values: aPool on: aStream forClass: aClass	" Private "	aStream 		nextPutAll: '" ', enumName, ' Enumeration"'; cr;		nextPutAll: 'false ifTrue: [   " enable to install desired enumeration constants "'; cr.	aPool keys asSortedCollection do: [ :varName |		| value |		value := aPool at: varName.		aStream nextPutAll: aClass unambiguousName, '.' , self constantPoolName, ' at: #', varName, ' put: '.		value &lt; 10			ifTrue: [ value printOn: aStream ]			ifFalse: [ aStream nextPutAll: ( value storeStringRadix: 16 ) ].		aStream nextPutAll: '.'; cr ].	aStream 		nextPutAll: ']!'; cr; 		cr.</body></methods><methods><class-id>Examples.MSIEApplicationController</class-id> <category>dispatching-events</category><body package="COM-MSIEExample" selector="newEventSink">newEventSink	" Answer a new event sink connected to the application object to receive notifications from the primary event interface. "	^self class newEventSink		establishConnectionTo: self dispatchDriver dispatchInterface;		yourself</body></methods><methods><class-id>Examples.MSIEApplicationController</class-id> <category>dispatching-methods</category><body package="COM-MSIEExample" selector="goBack">goBack	^self invokeMethod: 'GoBack'</body><body package="COM-MSIEExample" selector="goForward">goForward	^self invokeMethod: 'GoForward'</body><body package="COM-MSIEExample" selector="navigateTo:">navigateTo: urlString	" only URL argument is required, all others are optional "	^self invokeMethod: 'Navigate' with: urlString</body><body package="COM-MSIEExample" selector="navigateTo:flags:">navigateTo: urlString flags: navigateFlags	| args |	args := ( Array 		"URL" with: urlString		"Flags" with: navigateFlags		"TargetFrameName" with: nil		"PostData" with: nil ), ( Array		"Headers" with: nil ).	" only URL argument is required, all others are optional "	self invokeMethod: 'Navigate' withArguments: args.</body><body package="COM-MSIEExample" selector="stop">stop	^self invokeMethod: 'Stop'</body></methods><methods><class-id>Examples.MSIEApplicationController</class-id> <category>dispatching-properties</category><body package="COM-MSIEExample" selector="locationName">locationName	" Answer the title of the current location in the web browser. "	^self getProperty: 'LocationName'</body><body package="COM-MSIEExample" selector="locationURL">locationURL	" Answer the URL of the current location in the web browser. "	^self getProperty: 'LocationURL'</body><body package="COM-MSIEExample" selector="statusText">statusText	^self getProperty: 'StatusText'</body><body package="COM-MSIEExample" selector="statusText:">statusText: aString	self setProperty: 'StatusText' value: aString.</body></methods><methods><class-id>Examples.MSIEApplicationController class</class-id> <category>dispatching</category><body package="COM-MSIEExample" selector="newEventSink">newEventSink	" Answer a new event sink that can be connected to an IE web browser. "	" MSIEApplicationController newEventSink "	| anEventSink |	anEventSink := COMEventSink iid: IID_DWebBrowserEvents2		specificationTable: self eventSinkSpecificationTable.	"Assert isTrue: [ anEventSink specificationTable iid = IID_DWebBrowserEvents2 ]."	" configure the event sink so it knows how to disconnect on app shutdown "	anEventSink when: #OnQuit		send: #releaseConnection		to: anEventSink.	^anEventSink</body></methods><methods><class-id>Examples.MSIEApplicationController class</class-id> <category>identity</category><body package="COM-MSIEExample" selector="typeLibraryID">typeLibraryID	"Answer the LIBID for the application's type library."	"^'{EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B}' asGUID "	^GUID fromBytes: #[ 16rC0 16r2A 16rB2 16rEA 16rC1 16r30 16rCF 16r11 16rA7 16rEB 0 0 16rC0 16r5B 16rAE 16rB ]" ( COMRegistryInterface typeLibraryIDForCLSID: self versionIndependentProgID asGUID )	hexByteString"</body><body package="COM-MSIEExample" selector="versionIndependentProgID">versionIndependentProgID	"Answer the ProgID describing the recevier in the registration database."	^'InternetExplorer.Application'</body></methods><methods><class-id>Examples.MSIEApplicationController class</class-id> <category>private-dispatching</category><body package="COM-MSIEExample" selector="initializeDefaultSpecificationPolicy">initializeDefaultSpecificationPolicy	"Set the default Specification Policy. "	" Because we will be configuring our MSIE application dispatcher with the complete specification table for the IWebBrowser2 interface, imported from the type library during development and recorded in the #literalSpecification method in this class, we install a default specification policy for the most efficient dispatching policy, because we already know everything we need to about the dispinterface members and require no further lookups to dynamically obtain type information during execution. "	self defaultSpecificationPolicy: #newCompletePolicy.</body></methods><methods><class-id>Examples.MSIEApplicationController class</class-id> <category>private-specification table</category><body package="COM-MSIEExample" selector="eventSinkSpecificationTable">eventSinkSpecificationTable	" Answer the specification table for an event sink on the receiver's primary event interface."		^self literalSpecificationEvents decodeAsLiteralArray</body><body package="COM-MSIEExample" selector="literalSpecification">literalSpecification    "Answer a collection of all method and property specification literals. This only needs to be here if you want to use the complete specification policy #newCompleteSpecification with this controller."" Dispatch Interface IWebBrowser2, IID {D30C1661-CDAF-11D0-8A3E-00C04FC9E26E} "	^#( #COMDispatchSpecificationTable		#specificationKey: #name		#name: 'IWebBrowser2'		#iid: #( #GUID #[ 16r61 16r16 16rC 16rD3 16rAF 16rCD 16rD0 16r11 16r8A 16r3E 0 16rC0 16r4F 16rC9 16rE2 16r6E ] )		#lcid: 0		" Methods (16) "		" The selector sent to the published object is by default the method name itself. "		" The keyword for method arguments is by default #with: "		" The selector can be set manually in each method specification by using the pattern: "		" 	#selector: #mySelector "		#( 'method' 'ClientToWindow' 16r12D			#parameterTypes: #( #( #VT_INT #VT_BYREF ) #( #VT_INT #VT_BYREF ) )			#parameterNames: #( 'pcx' 'pcy' )			)		#( 'method' 'ExecWB' 16r1F6			#parameterTypes: #( #VT_I4 #VT_I4 #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'cmdID' 'cmdexecopt' 'pvaIn' 'pvaOut' )			#optionalParameterCount: 2			)		#( 'method' 'GetProperty' 16r12F			#typeCode: #VT_VARIANT			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Property' )			)		#( 'method' 'GoBack' 16r64			)		#( 'method' 'GoForward' 16r65			)		#( 'method' 'GoHome' 16r66			)		#( 'method' 'GoSearch' 16r67			)		#( 'method' 'Navigate' 16r68			#parameterTypes: #( #VT_BSTR #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'URL' 'Flags' 'TargetFrameName' 'PostData' 'Headers' )			#optionalParameterCount: 4			)		#( 'method' 'Navigate2' 16r1F4			#parameterTypes: #( #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'URL' 'Flags' 'TargetFrameName' 'PostData' 'Headers' )			#optionalParameterCount: 4			)		#( 'method' 'PutProperty' 16r12E			#parameterTypes: #( #VT_BSTR #VT_VARIANT )			#parameterNames: #( 'Property' 'vtValue' )			)		#( 'method' 'QueryStatusWB' 16r1F5			#typeCode: #VT_I4			#parameterTypes: #( #VT_I4 )			#parameterNames: #( 'cmdID' )			)		#( 'method' 'Quit' 16r12C			)		#( 'method' 'Refresh' -550			)		#( 'method' 'Refresh2' 16r69			#parameterTypes: #( #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'Level' )			#optionalParameterCount: 1			)		#( 'method' 'ShowBrowserBar' 16r1F7			#parameterTypes: #( #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'pvaClsid' 'pvarShow' 'pvarSize' )			#optionalParameterCount: 2			)		#( 'method' 'Stop' 16r6A			)		"  Properties (31)  "		" The selector sent to the published object to set a property is by default set&lt;PropertyName&gt;: "		" The selector sent to the published object to get a property is by default get&lt;PropertyName&gt;: "		" The selector can be set manually in each property specification by using the pattern: "		" 	#setSelector: #mySelector: "		" 	#getSelector: #mySelector "		#( 'property' 'AddressBar' 16r22B			#typeCode: #VT_BOOL			)		#( 'property' 'Application' 16rC8			#typeCode: #VT_DISPATCH			)		#( 'property' 'Busy' 16rD4			#typeCode: #VT_BOOL			)		#( 'property' 'Container' 16rCA			#typeCode: #VT_DISPATCH			)		#( 'property' 'Document' 16rCB			#typeCode: #VT_DISPATCH			)		#( 'property' 'FullName' 16r190			#typeCode: #VT_BSTR			)		#( 'property' 'FullScreen' 16r197			#typeCode: #VT_BOOL			)		#( 'property' 'Height' 16rD1			#typeCode: #VT_I4			)		#( 'property' 'HWND' -515			#typeCode: #VT_I4			)		#( 'property' 'Left' 16rCE			#typeCode: #VT_I4			)		#( 'property' 'LocationName' 16rD2			#typeCode: #VT_BSTR			)		#( 'property' 'LocationURL' 16rD3			#typeCode: #VT_BSTR			)		#( 'property' 'MenuBar' 16r196			#typeCode: #VT_BOOL			)		#( 'property' 'Name' 0			#typeCode: #VT_BSTR			)		#( 'property' 'Offline' 16r226			#typeCode: #VT_BOOL			)		#( 'property' 'Parent' 16rC9			#typeCode: #VT_DISPATCH			)		#( 'property' 'Path' 16r191			#typeCode: #VT_BSTR			)		#( 'property' 'ReadyState' -525			#typeCode: #VT_I4			)		#( 'property' 'RegisterAsBrowser' 16r228			#typeCode: #VT_BOOL			)		#( 'property' 'RegisterAsDropTarget' 16r229			#typeCode: #VT_BOOL			)		#( 'property' 'Resizable' 16r22C			#typeCode: #VT_BOOL			)		#( 'property' 'Silent' 16r227			#typeCode: #VT_BOOL			)		#( 'property' 'StatusBar' 16r193			#typeCode: #VT_BOOL			)		#( 'property' 'StatusText' 16r194			#typeCode: #VT_BSTR			)		#( 'property' 'TheaterMode' 16r22A			#typeCode: #VT_BOOL			)		#( 'property' 'ToolBar' 16r195			#typeCode: #VT_INT			)		#( 'property' 'Top' 16rCF			#typeCode: #VT_I4			)		#( 'property' 'TopLevelContainer' 16rCC			#typeCode: #VT_BOOL			)		#( 'property' 'Type' 16rCD			#typeCode: #VT_BSTR			)		#( 'property' 'Visible' 16r192			#typeCode: #VT_BOOL			)		#( 'property' 'Width' 16rD0			#typeCode: #VT_I4			)		)</body><body package="COM-MSIEExample" selector="literalSpecificationEvents">literalSpecificationEvents    "Answer a collection of all event specification literals for the receiver's primary event interface. "" Dispatch Interface DWebBrowserEvents2, IID {34A715A0-6587-11D0-924A-0020AFC7AC4D} "	" Specification Table Header "	^#( #COMDispatchSpecificationTable		#specificationKey: #memberID		#name: 'DWebBrowserEvents2'		#iid: #( #GUID #[ 16rA0 16r15 16rA7 16r34 16r87 16r65 16rD0 16r11 16r92 16r4A 0 16r20 16rAF 16rC7 16rAC 16r4D ] )		#lcid: 0		" Methods (18) "		" The selector sent to the published object is by default the method name itself. "		" The keyword for method arguments is by default #with: "		" The selector can be set manually in each method specification by using the pattern: "		" 	#selector: #mySelector "		#( 'method' 'BeforeNavigate2' 16rFA			#parameterTypes: #( #VT_DISPATCH #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_VARIANT #VT_BYREF ) #( #VT_BOOL #VT_BYREF ) )			#parameterNames: #( 'pDisp' 'URL' 'Flags' 'TargetFrameName' 'PostData' 'Headers' 'Cancel' )			)		#( 'method' 'CommandStateChange' 16r69			#parameterTypes: #( #VT_I4 #VT_BOOL )			#parameterNames: #( 'Command' 'Enable' )			)		#( 'method' 'DocumentComplete' 16r103			#parameterTypes: #( #VT_DISPATCH #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'pDisp' 'URL' )			)		#( 'method' 'DownloadBegin' 16r6A			)		#( 'method' 'DownloadComplete' 16r68			)		#( 'method' 'NavigateComplete2' 16rFC			#parameterTypes: #( #VT_DISPATCH #( #VT_VARIANT #VT_BYREF ) )			#parameterNames: #( 'pDisp' 'URL' )			)		#( 'method' 'NewWindow2' 16rFB			#parameterTypes: #( #( #VT_DISPATCH #VT_BYREF ) #( #VT_BOOL #VT_BYREF ) )			#parameterNames: #( 'ppDisp' 'Cancel' )			)		#( 'method' 'OnFullScreen' 16r102			#parameterTypes: #( #VT_BOOL )			#parameterNames: #( 'FullScreen' )			)		#( 'method' 'OnMenuBar' 16r100			#parameterTypes: #( #VT_BOOL )			#parameterNames: #( 'MenuBar' )			)		#( 'method' 'OnQuit' 16rFD			)		#( 'method' 'OnStatusBar' 16r101			#parameterTypes: #( #VT_BOOL )			#parameterNames: #( 'StatusBar' )			)		#( 'method' 'OnTheaterMode' 16r104			#parameterTypes: #( #VT_BOOL )			#parameterNames: #( 'TheaterMode' )			)		#( 'method' 'OnToolBar' 16rFF			#parameterTypes: #( #VT_BOOL )			#parameterNames: #( 'ToolBar' )			)		#( 'method' 'OnVisible' 16rFE			#parameterTypes: #( #VT_BOOL )			#parameterNames: #( 'Visible' )			)		#( 'method' 'ProgressChange' 16r6C			#parameterTypes: #( #VT_I4 #VT_I4 )			#parameterNames: #( 'Progress' 'ProgressMax' )			)		#( 'method' 'PropertyChange' 16r70			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'szProperty' )			)		#( 'method' 'StatusTextChange' 16r66			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Text' )			)		#( 'method' 'TitleChange' 16r71			#parameterTypes: #( #VT_BSTR )			#parameterNames: #( 'Text' )			)		"  Properties (0)  "		" The selector sent to the published object to set a property is by default set&lt;PropertyName&gt;: "		" The selector sent to the published object to get a property is by default get&lt;PropertyName&gt;: "		" The selector can be set manually in each property specification by using the pattern: "		" 	#setSelector: #mySelector: "		" 	#getSelector: #mySelector "		" (none) "		)</body></methods><methods><class-id>Examples.MSIEApplicationController class</class-id> <category>private-type library</category><body package="COM-MSIEExample" selector="getTypeLibrary">getTypeLibrary	"Answer a new Type Library proxy for the application."	" self getTypeLibrary "	^COMTypeLibrary libraryID: self typeLibraryID"??? Something more specific a la Word???	^COMTypeLibrary new		libraryID: self typeLibraryID;	      lcid: 16r0409;		majorVersion: 7;		minorVersion: 0;		directoryName: 'c:\MsOffice\Winword';	""Modify this entry to match your MS-Office 95 installation.""		fileName: 'Wb70en32.tlb'"</body></methods><methods><class-id>Examples.MSIEApplicationController class</class-id> <category>class-initialization</category><body package="COM-MSIEExample" selector="initialize">initialize	self initMSIEAutomationConstants</body><body package="COM-MSIEExample" selector="initMSIEAutomationConstants">initMSIEAutomationConstants	"self initMSIEAutomationConstants"	MSIEAutomationConstants := IdentityDictionary new.	self 		initMSIEAutomationConstantsPart1;		initMSIEAutomationConstantsPart2</body><body package="COM-MSIEExample" selector="initMSIEAutomationConstantsPart1">initMSIEAutomationConstantsPart1	" Pool Variables in MSIEAutomationConstants (for InternetExplorer.Application.1) "	" Source: Type Library SHDocVw Enumeration Constants "	" IID constants "	MSIEAutomationConstants at: #IID_IWebBrowser2  put: (		" '{D30C1661-CDAF-11D0-8A3E-00C04FC9E26E}' asGUID "		GUID fromBytes: #[ 16r61 16r16 16rC 16rD3 16rAF 16rCD 16rD0 16r11 16r8A 16r3E 0 16rC0 16r4F 16rC9 16rE2 16r6E ]		).	MSIEAutomationConstants at: #IID_DWebBrowserEvents2 put: (		"'{34A715A0-6587-11D0-924A-0020AFC7AC4D}' asGUID "		GUID fromBytes: #[ 16rA0 16r15 16rA7 16r34 16r87 16r65 16rD0 16r11 16r92 16r4A 0 16r20 16rAF 16rC7 16rAC 16r4D ]		).		" BrowserNavConstants Enumeration - navigate methods and events "	" typedef enum BrowserNavConstants "	" NOTE: Lowercase 'nav' prefix manually change to BNC_ in for pool constant names "	MSIEAutomationConstants at: #BNC_OpenInNewWindow put: 1.	MSIEAutomationConstants at: #BNC_NoHistory put: 2.	MSIEAutomationConstants at: #BNC_NoReadFromCache put: 4.	MSIEAutomationConstants at: #BNC_NoWriteToCache put: 8.	MSIEAutomationConstants at: #BNC_AllowAutosearch put: 16r10.	MSIEAutomationConstants at: #BNC_BrowserBar put: 16r20.		" RefreshConstants Enumeration - Refresh2 method "	MSIEAutomationConstants at: #REFRESH_NORMAL put: 0.	MSIEAutomationConstants at: #REFRESH_IFEXPIRED put: 1.	MSIEAutomationConstants at: #REFRESH_CONTINUE put: 2.	MSIEAutomationConstants at: #REFRESH_COMPLETELY put: 3.	</body><body package="COM-MSIEExample" selector="initMSIEAutomationConstantsPart2">initMSIEAutomationConstantsPart2" Pool Variables in MSIEAutomationConstants (for InternetExplorer.Application.1) "	" Source: Type Library SHDocVw Enumeration Constants "" CommandStateChangeConstants Enumeration - CommandStateChange event "	true ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #CSC_NAVIGATEBACK put: 2.		MSIEAutomationConstants at: #CSC_NAVIGATEFORWARD put: 1.		MSIEAutomationConstants at: #CSC_UPDATECOMMANDS put: -1.  		" ( CIntegerType long cast: 16rFFFFFFFF ) "	].		" OLECMDEXECOPT Enumeration - ExecWB method "	true ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #OLECMDEXECOPT_DODEFAULT put: 0.		MSIEAutomationConstants at: #OLECMDEXECOPT_DONTPROMPTUSER put: 2.		MSIEAutomationConstants at: #OLECMDEXECOPT_PROMPTUSER put: 1.		MSIEAutomationConstants at: #OLECMDEXECOPT_SHOWHELP put: 3.	].		" OLECMDF Enumeration - QueryStatusWB method "	true ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #OLECMDF_ENABLED put: 2.		MSIEAutomationConstants at: #OLECMDF_LATCHED put: 4.		MSIEAutomationConstants at: #OLECMDF_NINCHED put: 8.		MSIEAutomationConstants at: #OLECMDF_SUPPORTED put: 1.	].		" OLECMDID Enumeration  - ExecWB, QueryStatusWB methods "	true ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #OLECMDID_CLEARSELECTION put: 16r12.		MSIEAutomationConstants at: #OLECMDID_COPY put: 16rC.		MSIEAutomationConstants at: #OLECMDID_CUT put: 16rB.		MSIEAutomationConstants at: #OLECMDID_DELETE put: 16r21.		MSIEAutomationConstants at: #OLECMDID_ENABLE_INTERACTION put: 16r24.		MSIEAutomationConstants at: #OLECMDID_FIND put: 16r20.		MSIEAutomationConstants at: #OLECMDID_GETZOOMRANGE put: 16r14.		MSIEAutomationConstants at: #OLECMDID_HIDETOOLBARS put: 16r18.		MSIEAutomationConstants at: #OLECMDID_HTTPEQUIV put: 16r22.		MSIEAutomationConstants at: #OLECMDID_HTTPEQUIV_DONE put: 16r23.		MSIEAutomationConstants at: #OLECMDID_NEW put: 2.		MSIEAutomationConstants at: #OLECMDID_ONTOOLBARACTIVATED put: 16r1F.		MSIEAutomationConstants at: #OLECMDID_ONUNLOAD put: 16r25.		MSIEAutomationConstants at: #OLECMDID_OPEN put: 1.		MSIEAutomationConstants at: #OLECMDID_PAGESETUP put: 8.		MSIEAutomationConstants at: #OLECMDID_PASTE put: 16rD.		MSIEAutomationConstants at: #OLECMDID_PASTESPECIAL put: 16rE.		MSIEAutomationConstants at: #OLECMDID_PREREFRESH put: 16r27.		MSIEAutomationConstants at: #OLECMDID_PRINT put: 6.		MSIEAutomationConstants at: #OLECMDID_PRINTPREVIEW put: 7.		MSIEAutomationConstants at: #OLECMDID_PROPERTIES put: 16rA.		MSIEAutomationConstants at: #OLECMDID_PROPERTYBAG2 put: 16r26.		MSIEAutomationConstants at: #OLECMDID_REDO put: 16r10.		MSIEAutomationConstants at: #OLECMDID_REFRESH put: 16r16.		MSIEAutomationConstants at: #OLECMDID_SAVE put: 3.		MSIEAutomationConstants at: #OLECMDID_SAVEAS put: 4.		MSIEAutomationConstants at: #OLECMDID_SAVECOPYAS put: 5.		MSIEAutomationConstants at: #OLECMDID_SELECTALL put: 16r11.		MSIEAutomationConstants at: #OLECMDID_SETDOWNLOADSTATE put: 16r1D.		MSIEAutomationConstants at: #OLECMDID_SETPROGRESSMAX put: 16r19.		MSIEAutomationConstants at: #OLECMDID_SETPROGRESSPOS put: 16r1A.		MSIEAutomationConstants at: #OLECMDID_SETPROGRESSTEXT put: 16r1B.		MSIEAutomationConstants at: #OLECMDID_SETTITLE put: 16r1C.		MSIEAutomationConstants at: #OLECMDID_SPELL put: 9.		MSIEAutomationConstants at: #OLECMDID_STOP put: 16r17.		MSIEAutomationConstants at: #OLECMDID_STOPDOWNLOAD put: 16r1E.		MSIEAutomationConstants at: #OLECMDID_UNDO put: 16rF.		MSIEAutomationConstants at: #OLECMDID_UPDATECOMMANDS put: 16r15.		MSIEAutomationConstants at: #OLECMDID_ZOOM put: 16r13.	].		" SHDocVwShellFolderViewOptions Enumeration"	false ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #SFVVO_DESKTOPHTML put: 16r200.		MSIEAutomationConstants at: #SFVVO_DOUBLECLICKINWEBVIEW put: 16r80.		MSIEAutomationConstants at: #SFVVO_SHOWALLOBJECTS put: 1.		MSIEAutomationConstants at: #SFVVO_SHOWCOMPCOLOR put: 8.		MSIEAutomationConstants at: #SFVVO_SHOWEXTENSIONS put: 2.		MSIEAutomationConstants at: #SFVVO_SHOWSYSFILES put: 16r20.		MSIEAutomationConstants at: #SFVVO_WIN95CLASSIC put: 16r40.	].		" SHDocVwShellSpecialFolderConstants Enumeration"	false ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #ssfBITBUCKET put: 16rA.		MSIEAutomationConstants at: #ssfCONTROLS put: 3.		MSIEAutomationConstants at: #ssfDESKTOP put: 0.		MSIEAutomationConstants at: #ssfDESKTOPDIRECTORY put: 16r10.		MSIEAutomationConstants at: #ssfDRIVES put: 16r11.		MSIEAutomationConstants at: #ssfFAVORITES put: 6.		MSIEAutomationConstants at: #ssfFONTS put: 16r14.		MSIEAutomationConstants at: #ssfNETHOOD put: 16r13.		MSIEAutomationConstants at: #ssfNETWORK put: 16r12.		MSIEAutomationConstants at: #ssfPERSONAL put: 5.		MSIEAutomationConstants at: #ssfPRINTERS put: 4.		MSIEAutomationConstants at: #ssfPROGRAMS put: 2.		MSIEAutomationConstants at: #ssfRECENT put: 8.		MSIEAutomationConstants at: #ssfSENDTO put: 9.		MSIEAutomationConstants at: #ssfSTARTMENU put: 16rB.		MSIEAutomationConstants at: #ssfSTARTUP put: 7.		MSIEAutomationConstants at: #ssfTEMPLATES put: 16r15.	].		" SHDocVwShellWindowFindWindowOptions Enumeration"	false ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #SWFO_COOKIEPASSED put: 4.		MSIEAutomationConstants at: #SWFO_INCLUDEPENDING put: 2.		MSIEAutomationConstants at: #SWFO_NEEDDISPATCH put: 1.	].		" SHDocVwShellWindowTypeConstants Enumeration"	false ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #SWC_3RDPARTY put: 2.		MSIEAutomationConstants at: #SWC_BROWSER put: 1.		MSIEAutomationConstants at: #SWC_CALLBACK put: 4.		MSIEAutomationConstants at: #SWC_EXPLORER put: 0.	].		" READYSTATE Enumeration - READYState web browser property "	true ifTrue: [   " enable to install desired enumeration constants "		MSIEAutomationConstants at: #READYSTATE_COMPLETE put: 4.		MSIEAutomationConstants at: #READYSTATE_INTERACTIVE put: 3.		MSIEAutomationConstants at: #READYSTATE_LOADED put: 2.		MSIEAutomationConstants at: #READYSTATE_LOADING put: 1.		MSIEAutomationConstants at: #READYSTATE_UNINITIALIZED put: 0.	].		</body><body package="COM-MSIEExample" selector="postLoad:">postLoad: aParcel	"I do want to be initialized!"	self initialize</body></methods><methods><class-id>Tools.COMEventTraceViewer class</class-id> <category>opening</category><body package="COM-MSIEExample" selector="openOnSink:">openOnSink: anEventSink	" Open a event trace viewer window on &lt;anEventSink&gt; which reports each event triggered by the event source object.  Answer the trace viewer. "	| anEventViewer |	" register event handlers on the event sink so the viewer is notified of events "	anEventViewer := self new.	anEventViewer 		eventSink: anEventSink;		registerEventHandlers.	" open the trace log view which allows us to view event reporting "	self openOn: anEventViewer withSpec: #windowSpec.	anEventViewer displayInitialText.	^anEventViewer</body></methods><methods><class-id>Examples.MSIEEventTraceViewer class</class-id> <category>interface specs</category><body package="COM-MSIEExample" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'MS Internet Explorer Event Trace Viewer' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 196 214 683 694 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 88 151 ) 					#name: #enableNavigationTracingCheckBox 					#model: #enableNavigationTracing 					#label: 'Navigation' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 185 0 0 0.985626 0 0.98125 ) 					#name: #traceLogPane 					#flags: 9 					#component: #traceLogComponent ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 8 0 -8 1 132 0 ) 					#label: 'Browser Operations' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 20 30 112 55 ) 					#name: #goForwardButton 					#flags: 40 					#model: #goForward 					#label: 'Go Forward' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 123 30 208 55 ) 					#name: #goBackButton 					#flags: 40 					#model: #goBack 					#label: 'Go Back' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 1 30 0 -16 1 56 0 ) 					#name: #quitBrowserButton 					#model: #quitBrowser 					#label: 'Quit' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 218 30 303 55 ) 					#name: #stopBrowserButton 					#model: #stopBrowser 					#label: 'Stop' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 20 64 105 89 ) 					#name: #gotoButton 					#model: #goto 					#label: 'Go' 					#defaultable: true ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 96 0 -16 1 121 0 ) 					#name: #urlEntryList 					#model: #url 					#isReadOnly: false 					#comboList: #defaultURLs ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 201 151 ) 					#name: #enableProgressTracingCheckBox 					#model: #enableProgressTracing 					#label: 'Progress' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 309 151 ) 					#name: #enableStatusTracingCheckBox 					#model: #enableStatusTracing 					#label: 'Status' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 114 67 ) 					#name: #openInNewWindowCheckBox 					#model: #openInNewWindow 					#label: 'Open in new browser window' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 8 131 479 179 ) 					#label: 'Event tracing' ) ) ) )</body></methods><initialize><class-id>Examples.MSIEApplicationController</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>EventEnabledApplicationModel</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Event Extensions</category><attributes><package>Com- Event-Enabled Application Extensions</package></attributes></class><class><name>COMAutomationApplicationController</name><environment>External</environment><super>External.COMAutomationObjectController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>knownClasses </class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Automation-Controllers</category><attributes><package>Com- Automation</package></attributes></class></st-source>