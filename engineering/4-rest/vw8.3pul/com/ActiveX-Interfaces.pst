<?xml version="1.0"?><st-source><!-- Name: ActiveX-InterfacesNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: This package contains interface definitions used by ActiveXDbIdentifier: bear73DbTrace: 452731DbUsername: aaugustinDbVersion: 8.1 - 1DevelopmentPrerequisites: #(#(#any 'Com- Ole Development' '') #(#any 'Com- Automation' '') #(#any 'ActiveX-CInterfaces' '') #(#any 'Com- Ole' '') #(#any 'Com- Ole Pools' '') #(#any 'Com- Win32' '') #(#any 'Com- External Data Enhancements' '') #(#any 'DLLCC' '') #(#any 'Com- ExtensionsToBase' ''))DialectVersion: VisualWorks 7.9PackageName: ActiveX-InterfacesParcel: #('ActiveX-Interfaces')ParcelName: ActiveX-InterfacesPrerequisiteDescriptions: #(#(#name 'Com- Ole Development') #(#name 'Com- Automation') #(#name 'ActiveX-CInterfaces') #(#name 'Com- Ole' #componentType #package) #(#name 'Com- Ole Pools' #componentType #package) #(#name 'Com- Win32' #componentType #package) #(#name 'Com- External Data Enhancements' #componentType #package) #(#name 'DLLCC' #componentType #package #applicability #store) #(#name 'Com- ExtensionsToBase' #componentType #package))PrerequisiteParcels: #(#('Com- Ole Development' '') #('Com- Automation' '') #('ActiveX-CInterfaces' '') #('Com- Ole' '') #('Com- Ole Pools' '') #('Com- Win32' '') #('Com- External Data Enhancements' '') #('Com- ExtensionsToBase' ''))PrintStringCache: (8.1 - 1,aaugustin)Version: 8.1 - 1Date: 3:07:37 PM April 21, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.2) of April 21, 2017 on April 21, 2017 at 3:07:37 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>IViewObjectImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IViewObjectImplementation</class-id><body>IViewObjectImplementation is the implementation of IViewObject.</body></comment><class><name>IOleControlSitePointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleControlSitePointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleControlSite interface.</body></comment><class><name>IViewObject</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IViewObject</class-id><body>IViewObject is the an interface class.</body></comment><class><name>IOleWindowImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleWindowImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleWindow interface.</body></comment><class><name>IOleInPlaceSiteImplementation</name><environment>Smalltalk</environment><super>External.IOleWindowImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleInPlaceSiteImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleInPlaceSite interface.</body></comment><class><name>IOleInPlaceSiteExImplementation</name><environment>Smalltalk</environment><super>IOleInPlaceSiteImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleInPlaceSiteExImplementation</class-id><body>IOleInPlaceSiteExImplementation is the interface implementation class for IOleInPlaceSiteEx</body></comment><class><name>IOleWindow</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleWindow</class-id><body>### Provide a brief explanation of the IOleWindow interface ####</body></comment><class><name>IOleWindowPointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleWindowPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleWindow interface.</body></comment><class><name>IOleInPlaceActiveObjectPointer</name><environment>External</environment><super>External.IOleWindowPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceActiveObjectPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleInPlaceActiveObject interface.</body></comment><class><name>IOleClientSitePointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleClientSitePointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleClientSite interface.</body></comment><class><name>IPropertyNotifySinkPointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IPropertyNotifySinkPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IPropertyNotifySink interface.</body></comment><class><name>IViewObjectPointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IViewObjectPointer</class-id><body>IViewObjectPointer is the interfacepointer class for IViewObject.</body></comment><class><name>IOleInPlaceSitePointer</name><environment>Smalltalk</environment><super>External.IOleWindowPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleInPlaceSitePointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleInPlaceSite interface.</body></comment><class><name>IOleInPlaceSiteExPointer</name><environment>Smalltalk</environment><super>IOleInPlaceSitePointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleInPlaceSiteExPointer</class-id><body>IOleInPlaceSiteExPointer is the interface pointer class for IOleInPlaceSiteEx</body></comment><class><name>IOleInPlaceSiteWindowlessPointer</name><environment>External</environment><super>IOleInPlaceSiteExPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceSiteWindowlessPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleInPlaceSiteWindowless interface.</body></comment><class><name>IOleInPlaceActiveObjectImplementation</name><environment>External</environment><super>External.IOleWindowImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceActiveObjectImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleInPlaceActiveObject interface.</body></comment><class><name>IOleDocumentSitePointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleDocumentSitePointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleDocumentSite interface.</body></comment><class><name>IOleDocumentSite</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleDocumentSite</class-id><body>### Provide a brief explanation of the IOleDocumentSite interface ####</body></comment><class><name>IViewObject2</name><environment>External</environment><super>External.IViewObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IViewObject2</class-id><body>### Provide a brief explanation of the IViewObject2 interface ####</body></comment><class><name>IOleInPlaceObject</name><environment>External</environment><super>External.IOleWindow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceObject</class-id><body>### Provide a brief explanation of the IOleInPlaceObject interface ####</body></comment><class><name>IOleControlSite</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleControlSite</class-id><body>### Provide a brief explanation of the IOleControlSite interface ####</body></comment><class><name>IOleDocumentViewPointer</name><environment>Smalltalk</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleDocumentViewPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleDocumentView interface.</body></comment><class><name>IOleInPlaceSite</name><environment>Smalltalk</environment><super>External.IOleWindow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleInPlaceSite</class-id><body>### Provide a brief explanation of the IOleInPlaceSite interface ####</body></comment><class><name>IOleInPlaceSiteEx</name><environment>External</environment><super>IOleInPlaceSite</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceSiteEx</class-id><body>IOleInPlaceSiteEx is an interface class which provides in place site services.</body></comment><class><name>IOleControl</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleControl</class-id><body>### Provide a brief explanation of the IOleControl interface ####</body></comment><class><name>IOleInPlaceUIWindowImplementation</name><environment>External</environment><super>External.IOleWindowImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceUIWindowImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleInPlaceUIWindow interface.</body></comment><class><name>IOleInPlaceFrameImplementation</name><environment>External</environment><super>External.IOleInPlaceUIWindowImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceFrameImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleInPlaceFrame interface.</body></comment><class><name>IOleObject</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleObject</class-id><body>### Provide a brief explanation of the IOleObject interface ####</body></comment><class><name>IOleControlSiteImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleControlSiteImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleControlSite interface.</body></comment><class><name>IOleDocumentSiteImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleDocumentSiteImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleDocumentSite interface.</body></comment><class><name>IOleControlPointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleControlPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleControl interface.</body></comment><class><name>IOleInPlaceSiteWindowlessImplementation</name><environment>External</environment><super>IOleInPlaceSiteExImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceSiteWindowlessImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleInPlaceSiteWindowless interface.</body></comment><class><name>IPropertyNotifySink</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IPropertyNotifySink</class-id><body>### Provide a brief explanation of the IPropertyNotifySink interface ####</body></comment><class><name>IOleDocumentView</name><environment>Smalltalk</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleDocumentView</class-id><body>### Provide a brief explanation of the IOleDocumentView interface ####</body></comment><class><name>IOleInPlaceUIWindowPointer</name><environment>External</environment><super>External.IOleWindowPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceUIWindowPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleInPlaceUIWindow interface.</body></comment><class><name>IOleObjectImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleObjectImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleObject interface.</body></comment><class><name>IOleInPlaceUIWindow</name><environment>External</environment><super>External.IOleWindow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceUIWindow</class-id><body>### Provide a brief explanation of the IOleInPlaceUIWindow interface ####</body></comment><class><name>IOleInPlaceFrame</name><environment>External</environment><super>External.IOleInPlaceUIWindow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceFrame</class-id><body>### Provide a brief explanation of the IOleInPlaceFrame interface ####</body></comment><class><name>IOleContainer</name><environment>External</environment><super>External.IParseDisplayName</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleContainer</class-id><body>### Provide a brief explanation of the IOleContainer interface ####</body></comment><class><name>IViewObject2Pointer</name><environment>External</environment><super>External.IViewObjectPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IViewObject2Pointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IViewObject2 interface.</body></comment><class><name>IViewObject2Implementation</name><environment>External</environment><super>External.IViewObjectImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IViewObject2Implementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IViewObject2 interface.</body></comment><class><name>IOleControlImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleControlImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleControl interface.</body></comment><class><name>IPropertyNotifySinkImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IPropertyNotifySinkImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IPropertyNotifySink interface.</body></comment><class><name>IOleInPlaceSiteWindowless</name><environment>External</environment><super>External.IOleInPlaceSiteEx</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceSiteWindowless</class-id><body>### Provide a brief explanation of the IOleInPlaceSiteWindowless interface ####</body></comment><class><name>IOleClientSite</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleClientSite</class-id><body>### Provide a brief explanation of the IOleClientSite interface ####</body></comment><class><name>IOleInPlaceObjectImplementation</name><environment>External</environment><super>External.IOleWindowImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceObjectImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleInPlaceObject interface.</body></comment><class><name>IOleContainerImplementation</name><environment>External</environment><super>External.IParseDisplayNameImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleContainerImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleContainer interface.</body></comment><class><name>IOleContainerPointer</name><environment>External</environment><super>External.IParseDisplayNamePointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleContainerPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleContainer interface.</body></comment><class><name>IOleInPlaceFramePointer</name><environment>External</environment><super>External.IOleInPlaceUIWindowPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceFramePointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleInPlaceFrame interface.</body></comment><class><name>IOleObjectPointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleObjectPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleObject interface.</body></comment><class><name>IOleInPlaceActiveObject</name><environment>External</environment><super>External.IOleWindow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceActiveObject</class-id><body>### Provide a brief explanation of the IOleInPlaceActiveObject interface ####</body></comment><class><name>IOleDocumentViewImplementation</name><environment>Smalltalk</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>IOleDocumentViewImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleDocumentView interface.</body></comment><class><name>IOleClientSiteImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleClientSiteImplementation</class-id><body>Instances of the receiver provide the host-level external callback binding for the IOleClientSite interface.</body></comment><class><name>IOleInPlaceObjectPointer</name><environment>External</environment><super>External.IOleWindowPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.GUID.COMConstants.*			External.GUID.COMStatusCodeConstants.*			</imports><category>COM-Interface Binding Prototypes</category><attributes><package>ActiveX-Interfaces</package></attributes></class><comment><class-id>External.IOleInPlaceObjectPointer</class-id><body>Instances of the receiver provide the host-level external callout binding for the IOleInPlaceObject interface.</body></comment><methods><class-id>External.IOleControlSitePointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetExtendedControl: ppDisp	" Private - invoke the IOleControlSite::GetExtendedControl function. "	&lt;COM: HRESULT __stdcall  GetExtendedControl(IDispatch * * ppDisp) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeLockInPlaceActive: fLock	" Private - invoke the IOleControlSite::LockInPlaceActive function. "	&lt;COM: HRESULT __stdcall  LockInPlaceActive(BOOL fLock) = 4&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnControlInfoChanged	" Private - invoke the IOleControlSite::OnControlInfoChanged function. "	&lt;COM: HRESULT __stdcall  OnControlInfoChanged(void) = 3&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnFocus: fGotFocus	" Private - invoke the IOleControlSite::OnFocus function. "	&lt;COM: HRESULT __stdcall  OnFocus(BOOL fGotFocus) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeShowPropertyFrame	" Private - invoke the IOleControlSite::ShowPropertyFrame function. "	&lt;COM: HRESULT __stdcall  ShowPropertyFrame(void) = 9&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeTransformCoords: pPtlHimetric _: pPtfContainer _: dwFlags	" Private - invoke the IOleControlSite::TransformCoords function. "	&lt;COM: HRESULT __stdcall  TransformCoords(POINTL * pPtlHimetric, POINTF * pPtfContainer, DWORD dwFlags) = 6&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeTranslateAccelerator: pMsg _: grfModifiers	" Private - invoke the IOleControlSite::TranslateAccelerator function. "	&lt;COM: HRESULT __stdcall  TranslateAccelerator(MSG * pMsg, DWORD grfModifiers) = 7&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleWindowPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeContextSensitiveHelp: fEnterMode	" Private - invoke the IOleWindow::ContextSensitiveHelp function. "	&lt;COM: HRESULT __stdcall  ContextSensitiveHelp(BOOL fEnterMode) = 4&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetWindow: phwnd	" Private - invoke the IOleWindow::GetWindow function. "	&lt;COM: HRESULT __stdcall  GetWindow(HWND * phwnd) = 3&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleInPlaceActiveObjectPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeEnableModeless: fEnable	" Private - invoke the IOleInPlaceActiveObject::EnableModeless function. "	&lt;COM: HRESULT __stdcall  EnableModeless(BOOL fEnable) = 9&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnDocWindowActivate: fActivate	" Private - invoke the IOleInPlaceActiveObject::OnDocWindowActivate function. "	&lt;COM: HRESULT __stdcall  OnDocWindowActivate(BOOL fActivate) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnFrameWindowActivate: fActivate	" Private - invoke the IOleInPlaceActiveObject::OnFrameWindowActivate function. "	&lt;COM: HRESULT __stdcall  OnFrameWindowActivate(BOOL fActivate) = 6&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeResizeBorder: prcBorder _: pUIWindow _: fFrameWindow	" Private - invoke the IOleInPlaceActiveObject::ResizeBorder function. "	&lt;COM: HRESULT __stdcall  ResizeBorder(LPCRECT prcBorder, IOleInPlaceUIWindow * pUIWindow, BOOL fFrameWindow) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeTranslateAccelerator: lpmsg	" Private - invoke the IOleInPlaceActiveObject::TranslateAccelerator function. "	&lt;COM: HRESULT __stdcall  TranslateAccelerator(LPMSG lpmsg) = 5&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleClientSitePointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetContainer: ppContainer	" Private - invoke the IOleClientSite::GetContainer function. "	&lt;COM: HRESULT __stdcall  GetContainer(IOleContainer * * ppContainer) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetMoniker: dwAssign _: dwWhichMoniker _: ppmk	" Private - invoke the IOleClientSite::GetMoniker function. "	&lt;COM: HRESULT __stdcall  GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker, IMoniker * * ppmk) = 4&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnShowWindow: fShow	" Private - invoke the IOleClientSite::OnShowWindow function. "	&lt;COM: HRESULT __stdcall  OnShowWindow(BOOL fShow) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeRequestNewObjectLayout	" Private - invoke the IOleClientSite::RequestNewObjectLayout function. "	&lt;COM: HRESULT __stdcall  RequestNewObjectLayout(void) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSaveObject	" Private - invoke the IOleClientSite::SaveObject function. "	&lt;COM: HRESULT __stdcall  SaveObject(void) = 3&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeShowObject	" Private - invoke the IOleClientSite::ShowObject function. "	&lt;COM: HRESULT __stdcall  ShowObject(void) = 6&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IPropertyNotifySinkPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeOnChanged: dispID	" Private - invoke the IPropertyNotifySink::OnChanged function. "	&lt;COM: HRESULT __stdcall  OnChanged(DISPID dispID) = 3&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnRequestEdit: dispID	" Private - invoke the IPropertyNotifySink::OnRequestEdit function. "	&lt;COM: HRESULT __stdcall  OnRequestEdit(DISPID dispID) = 4&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IViewObjectPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeDraw: dwDrawAspect _: lindex _: pvAspect _: ptd _: hdcTargetDev _: hdcDraw _: lprcBounds _: lprcWBounds _: pfnContinue _: dwContinue	" Private - invoke the IViewObject2::Draw function. "	&lt;COM: HRESULT __stdcall  Draw(DWORD dwDrawAspect, LONG lindex, void * pvAspect, DVTARGETDEVICE * ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( __stdcall * pfnContinue)(DWORD dwContinue), DWORD dwContinue) = 3&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeFreeze: dwDrawAspect _: lindex _: pvAspect _: pdwFreeze	" Private - invoke the IViewObject2::Freeze function. "	&lt;COM: HRESULT __stdcall  Freeze(DWORD dwDrawAspect, LONG lindex, void * pvAspect, DWORD * pdwFreeze) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetAdvise: pAspects _: pAdvf _: ppAdvSink	" Private - invoke the IViewObject2::GetAdvise function. "	&lt;COM: HRESULT __stdcall  GetAdvise(DWORD * pAspects, DWORD * pAdvf, IAdviseSink * * ppAdvSink) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetColorSet: dwDrawAspect _: lindex _: pvAspect _: ptd _: hicTargetDev _: ppColorSet	" Private - invoke the IViewObject2::GetColorSet function. "	&lt;COM: HRESULT __stdcall  GetColorSet(DWORD dwDrawAspect, LONG lindex, void * pvAspect, DVTARGETDEVICE * ptd, HDC hicTargetDev, LOGPALETTE * * ppColorSet) = 4&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetAdvise: aspects _: advf _: pAdvSink	" Private - invoke the IViewObject2::SetAdvise function. "	&lt;COM: HRESULT __stdcall  SetAdvise(DWORD aspects, DWORD advf, IAdviseSink * pAdvSink) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeUnfreeze: dwFreeze	" Private - invoke the IViewObject2::Unfreeze function. "	&lt;COM: HRESULT __stdcall  Unfreeze(DWORD dwFreeze) = 6&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>IOleInPlaceSitePointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeCanInPlaceActivate	" Private - invoke the IOleInPlaceSite::CanInPlaceActivate function. "	&lt;COM: HRESULT __stdcall  CanInPlaceActivate(void) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeDeactivateAndUndo	" Private - invoke the IOleInPlaceSite::DeactivateAndUndo function. "	&lt;COM: HRESULT __stdcall  DeactivateAndUndo(void) = 13&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeDiscardUndoState	" Private - invoke the IOleInPlaceSite::DiscardUndoState function. "	&lt;COM: HRESULT __stdcall  DiscardUndoState(void) = 12&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetWindowContext: ppFrame _: ppDoc _: lprcPosRect _: lprcClipRect _: lpFrameInfo	" Private - invoke the IOleInPlaceSite::GetWindowContext function. "	&lt;COM: HRESULT __stdcall  GetWindowContext(IOleInPlaceFrame * * ppFrame, IOleInPlaceUIWindow * * ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnInPlaceActivate	" Private - invoke the IOleInPlaceSite::OnInPlaceActivate function. "	&lt;COM: HRESULT __stdcall  OnInPlaceActivate(void) = 6&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnInPlaceDeactivate	" Private - invoke the IOleInPlaceSite::OnInPlaceDeactivate function. "	&lt;COM: HRESULT __stdcall  OnInPlaceDeactivate(void) = 11&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnPosRectChange: lprcPosRect	" Private - invoke the IOleInPlaceSite::OnPosRectChange function. "	&lt;COM: HRESULT __stdcall  OnPosRectChange(LPCRECT lprcPosRect) = 14&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnUIActivate	" Private - invoke the IOleInPlaceSite::OnUIActivate function. "	&lt;COM: HRESULT __stdcall  OnUIActivate(void) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnUIDeactivate: fUndoable	" Private - invoke the IOleInPlaceSite::OnUIDeactivate function. "	&lt;COM: HRESULT __stdcall  OnUIDeactivate(BOOL fUndoable) = 10&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeScroll: scrollExtant	" Private - invoke the IOleInPlaceSite::Scroll function. "	&lt;COM: HRESULT __stdcall  Scroll(SIZE scrollExtant) = 9&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>IOleInPlaceSiteExPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeOnInPlaceActivateEx: pfNoRedraw _: dwFlags	" Private - invoke the IOleInPlaceSiteWindowless::OnInPlaceActivateEx function. "	&lt;COM: HRESULT __stdcall  OnInPlaceActivateEx(BOOL * pfNoRedraw, DWORD dwFlags) = 15&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnInPlaceDeactivateEx: fNoRedraw	" Private - invoke the IOleInPlaceSiteWindowless::OnInPlaceDeactivateEx function. "	&lt;COM: HRESULT __stdcall  OnInPlaceDeactivateEx(BOOL fNoRedraw) = 16&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeRequestUIActivate	" Private - invoke the IOleInPlaceSiteWindowless::RequestUIActivate function. "	&lt;COM: HRESULT __stdcall  RequestUIActivate(void) = 17&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleInPlaceSiteWindowlessPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeAdjustRect: prc	" Private - invoke the IOleInPlaceSiteWindowless::AdjustRect function. "	&lt;COM: HRESULT __stdcall  AdjustRect(LPRECT prc) = 28&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeCanWindowlessActivate	" Private - invoke the IOleInPlaceSiteWindowless::CanWindowlessActivate function. "	&lt;COM: HRESULT __stdcall  CanWindowlessActivate(void) = 18&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetCapture	" Private - invoke the IOleInPlaceSiteWindowless::GetCapture function. "	&lt;COM: HRESULT __stdcall  GetCapture(void) = 19&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetDC: pRect _: grfFlags _: phDC	" Private - invoke the IOleInPlaceSiteWindowless::GetDC function. "	&lt;COM: HRESULT __stdcall  GetDC(LPCRECT pRect, DWORD grfFlags, HDC * phDC) = 23&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetFocus	" Private - invoke the IOleInPlaceSiteWindowless::GetFocus function. "	&lt;COM: HRESULT __stdcall  GetFocus(void) = 21&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeInvalidateRect: pRect _: fErase	" Private - invoke the IOleInPlaceSiteWindowless::InvalidateRect function. "	&lt;COM: HRESULT __stdcall  InvalidateRect(LPCRECT pRect, BOOL fErase) = 25&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeInvalidateRgn: hRGN _: fErase	" Private - invoke the IOleInPlaceSiteWindowless::InvalidateRgn function. "	&lt;COM: HRESULT __stdcall  InvalidateRgn(HRGN hRGN, BOOL fErase) = 26&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnDefWindowMessage: msg _: wParam _: lParam _: plResult	" Private - invoke the IOleInPlaceSiteWindowless::OnDefWindowMessage function. "	&lt;COM: HRESULT __stdcall  OnDefWindowMessage(UINT msg, WPARAM wParam, LPARAM lParam, LRESULT * plResult) = 29&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeReleaseDC: hDC	" Private - invoke the IOleInPlaceSiteWindowless::ReleaseDC function. "	&lt;COM: HRESULT __stdcall  ReleaseDC(HDC hDC) = 24&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeScrollRect: dx _: dy _: pRectScroll _: pRectClip	" Private - invoke the IOleInPlaceSiteWindowless::ScrollRect function. "	&lt;COM: HRESULT __stdcall  ScrollRect(INT dx, INT dy, LPCRECT pRectScroll, LPCRECT pRectClip) = 27&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetCapture: fCapture	" Private - invoke the IOleInPlaceSiteWindowless::SetCapture function. "	&lt;COM: HRESULT __stdcall  SetCapture(BOOL fCapture) = 20&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetFocus: fFocus	" Private - invoke the IOleInPlaceSiteWindowless::SetFocus function. "	&lt;COM: HRESULT __stdcall  SetFocus(BOOL fFocus) = 22&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleDocumentSitePointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeActivateMe: pViewToActivate	" Private - invoke the IOleDocumentSite::ActivateMe function. "	&lt;COM: HRESULT __stdcall  ActivateMe(IOleDocumentView * pViewToActivate) = 3&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>IOleDocumentViewPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeApplyViewState: pstm	" Private - invoke the IOleDocumentView::ApplyViewState function. "	&lt;COM: HRESULT __stdcall  ApplyViewState(LPSTREAM pstm) = 14&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeClone: pIPSiteNew _: ppViewNew	" Private - invoke the IOleDocumentView::Clone function. "	&lt;COM: HRESULT __stdcall  Clone(IOleInPlaceSite * pIPSiteNew, IOleDocumentView * * ppViewNew) = 15&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeCloseView: dwReserved	" Private - invoke the IOleDocumentView::CloseView function. "	&lt;COM: HRESULT __stdcall  CloseView(DWORD dwReserved) = 12&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetDocument: ppunk	" Private - invoke the IOleDocumentView::GetDocument function. "	&lt;COM: HRESULT __stdcall  GetDocument(IUnknown * * ppunk) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetInPlaceSite: ppIPSite	" Private - invoke the IOleDocumentView::GetInPlaceSite function. "	&lt;COM: HRESULT __stdcall  GetInPlaceSite(IOleInPlaceSite * * ppIPSite) = 4&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetRect: prcView	" Private - invoke the IOleDocumentView::GetRect function. "	&lt;COM: HRESULT __stdcall  GetRect(LPRECT prcView) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOpen	" Private - invoke the IOleDocumentView::Open function. "	&lt;COM: HRESULT __stdcall  Open(void) = 11&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSaveViewState: pstm	" Private - invoke the IOleDocumentView::SaveViewState function. "	&lt;COM: HRESULT __stdcall  SaveViewState(LPSTREAM pstm) = 13&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetInPlaceSite: pIPSite	" Private - invoke the IOleDocumentView::SetInPlaceSite function. "	&lt;COM: HRESULT __stdcall  SetInPlaceSite(IOleInPlaceSite * pIPSite) = 3&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetRect: prcView	" Private - invoke the IOleDocumentView::SetRect function. "	&lt;COM: HRESULT __stdcall  SetRect(LPRECT prcView) = 6&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetRectComplex: prcView _: prcHScroll _: prcVScroll _: prcSizeBox	" Private - invoke the IOleDocumentView::SetRectComplex function. "	&lt;COM: HRESULT __stdcall  SetRectComplex(LPRECT prcView, LPRECT prcHScroll, LPRECT prcVScroll, LPRECT prcSizeBox) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeShow: fShow	" Private - invoke the IOleDocumentView::Show function. "	&lt;COM: HRESULT __stdcall  Show(BOOL fShow) = 9&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeUIActivate: fUIActivate	" Private - invoke the IOleDocumentView::UIActivate function. "	&lt;COM: HRESULT __stdcall  UIActivate(BOOL fUIActivate) = 10&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleControlPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeFreezeEvents: bFreeze	" Private - invoke the IOleControl::FreezeEvents function. "	&lt;COM: HRESULT __stdcall  FreezeEvents(BOOL bFreeze) = 6&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetControlInfo: pCI	" Private - invoke the IOleControl::GetControlInfo function. "	&lt;COM: HRESULT __stdcall  GetControlInfo(CONTROLINFO * pCI) = 3&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnAmbientPropertyChange: dispID	" Private - invoke the IOleControl::OnAmbientPropertyChange function. "	&lt;COM: HRESULT __stdcall  OnAmbientPropertyChange(DISPID dispID) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeOnMnemonic: pMsg	" Private - invoke the IOleControl::OnMnemonic function. "	&lt;COM: HRESULT __stdcall  OnMnemonic(MSG * pMsg) = 4&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleInPlaceUIWindowPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetBorder: lprectBorder	" Private - invoke the IOleInPlaceUIWindow::GetBorder function. "	&lt;COM: HRESULT __stdcall  GetBorder(LPRECT lprectBorder) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeRequestBorderSpace: pborderwidths	" Private - invoke the IOleInPlaceUIWindow::RequestBorderSpace function. "	&lt;COM: HRESULT __stdcall  RequestBorderSpace(LPCBORDERWIDTHS pborderwidths) = 6&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetActiveObject: pActiveObject _: pszObjName	" Private - invoke the IOleInPlaceUIWindow::SetActiveObject function. "	&lt;COM: HRESULT __stdcall  SetActiveObject(IOleInPlaceActiveObject * pActiveObject, LPCOLESTR pszObjName) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetBorderSpace: pborderwidths	" Private - invoke the IOleInPlaceUIWindow::SetBorderSpace function. "	&lt;COM: HRESULT __stdcall  SetBorderSpace(LPCBORDERWIDTHS pborderwidths) = 7&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IViewObject2Pointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetExtent: dwDrawAspect _: lindex _: ptd _: lpsizel	" Private - invoke the IViewObject2::GetExtent function. "	&lt;COM: HRESULT __stdcall  GetExtent(DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE * ptd, LPSIZEL lpsizel) = 9&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleContainerPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeEnumObjects: grfFlags _: ppenum	" Private - invoke the IOleContainer::EnumObjects function. "	&lt;COM: HRESULT __stdcall  EnumObjects(DWORD grfFlags, IEnumUnknown * * ppenum) = 4&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeLockContainer: fLock	" Private - invoke the IOleContainer::LockContainer function. "	&lt;COM: HRESULT __stdcall  LockContainer(BOOL fLock) = 5&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleInPlaceFramePointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeEnableModeless: fEnable	" Private - invoke the IOleInPlaceFrame::EnableModeless function. "	&lt;COM: HRESULT __stdcall  EnableModeless(BOOL fEnable) = 13&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeInsertMenus: hmenuShared _: lpMenuWidths	" Private - invoke the IOleInPlaceFrame::InsertMenus function. "	&lt;COM: HRESULT __stdcall  InsertMenus(HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths) = 9&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeRemoveMenus: hmenuShared	" Private - invoke the IOleInPlaceFrame::RemoveMenus function. "	&lt;COM: HRESULT __stdcall  RemoveMenus(HMENU hmenuShared) = 11&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetMenu: hmenuShared _: holemenu _: hwndActiveObject	" Private - invoke the IOleInPlaceFrame::SetMenu function. "	&lt;COM: HRESULT __stdcall  SetMenu(HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject) = 10&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetStatusText: pszStatusText	" Private - invoke the IOleInPlaceFrame::SetStatusText function. "	&lt;COM: HRESULT __stdcall  SetStatusText(LPCOLESTR pszStatusText) = 12&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeTranslateAccelerator: lpmsg _: wID	" Private - invoke the IOleInPlaceFrame::TranslateAccelerator function. "	&lt;COM: HRESULT __stdcall  TranslateAccelerator(LPMSG lpmsg, WORD wID) = 14&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleObjectPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeAdvise: pAdvSink _: pdwConnection	" Private - invoke the IOleObject::Advise function. "	&lt;COM: HRESULT __stdcall  Advise(IAdviseSink * pAdvSink, DWORD * pdwConnection) = 19&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeClose: dwSaveOption	" Private - invoke the IOleObject::Close function. "	&lt;COM: HRESULT __stdcall  Close(DWORD dwSaveOption) = 6&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeDoVerb: iVerb _: lpmsg _: pActiveSite _: lindex _: hwndParent _: lprcPosRect	" Private - invoke the IOleObject::DoVerb function. "	&lt;COM: HRESULT __stdcall  DoVerb(LONG iVerb, LPMSG lpmsg, IOleClientSite * pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect) = 11&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeEnumAdvise: ppenumAdvise	" Private - invoke the IOleObject::EnumAdvise function. "	&lt;COM: HRESULT __stdcall  EnumAdvise(IEnumSTATDATA * * ppenumAdvise) = 21&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeEnumVerbs: ppEnumOleVerb	" Private - invoke the IOleObject::EnumVerbs function. "	&lt;COM: HRESULT __stdcall  EnumVerbs(IEnumOLEVERB * * ppEnumOleVerb) = 12&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetClientSite: ppClientSite	" Private - invoke the IOleObject::GetClientSite function. "	&lt;COM: HRESULT __stdcall  GetClientSite(IOleClientSite * * ppClientSite) = 4&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetClipboardData: dwReserved _: ppDataObject	" Private - invoke the IOleObject::GetClipboardData function. "	&lt;COM: HRESULT __stdcall  GetClipboardData(DWORD dwReserved, IDataObject * * ppDataObject) = 10&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetExtent: dwDrawAspect _: psizel	" Private - invoke the IOleObject::GetExtent function. "	&lt;COM: HRESULT __stdcall  GetExtent(DWORD dwDrawAspect, SIZEL * psizel) = 18&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetMiscStatus: dwAspect _: pdwStatus	" Private - invoke the IOleObject::GetMiscStatus function. "	&lt;COM: HRESULT __stdcall  GetMiscStatus(DWORD dwAspect, DWORD * pdwStatus) = 22&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetMoniker: dwAssign _: dwWhichMoniker _: ppmk	" Private - invoke the IOleObject::GetMoniker function. "	&lt;COM: HRESULT __stdcall  GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker, IMoniker * * ppmk) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetUserClassID: pClsid	" Private - invoke the IOleObject::GetUserClassID function. "	&lt;COM: HRESULT __stdcall  GetUserClassID(CLSID * pClsid) = 15&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeGetUserType: dwFormOfType _: pszUserType	" Private - invoke the IOleObject::GetUserType function. "	&lt;COM: HRESULT __stdcall  GetUserType(DWORD dwFormOfType, LPOLESTR * pszUserType) = 16&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeInitFromData: pDataObject _: fCreation _: dwReserved	" Private - invoke the IOleObject::InitFromData function. "	&lt;COM: HRESULT __stdcall  InitFromData(IDataObject * pDataObject, BOOL fCreation, DWORD dwReserved) = 9&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeIsUpToDate	" Private - invoke the IOleObject::IsUpToDate function. "	&lt;COM: HRESULT __stdcall  IsUpToDate(void) = 14&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetClientSite: pClientSite	" Private - invoke the IOleObject::SetClientSite function. "	&lt;COM: HRESULT __stdcall  SetClientSite(IOleClientSite * pClientSite) = 3&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetColorScheme: pLogpal	" Private - invoke the IOleObject::SetColorScheme function. "	&lt;COM: HRESULT __stdcall  SetColorScheme(LOGPALETTE * pLogpal) = 23&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetExtent: dwDrawAspect _: psizel	" Private - invoke the IOleObject::SetExtent function. "	&lt;COM: HRESULT __stdcall  SetExtent(DWORD dwDrawAspect, SIZEL * psizel) = 17&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetHostNames: szContainerApp _: szContainerObj	" Private - invoke the IOleObject::SetHostNames function. "	&lt;COM: HRESULT __stdcall  SetHostNames(LPCOLESTR szContainerApp, LPCOLESTR szContainerObj) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetMoniker: dwWhichMoniker _: pmk	" Private - invoke the IOleObject::SetMoniker function. "	&lt;COM: HRESULT __stdcall  SetMoniker(DWORD dwWhichMoniker, IMoniker * pmk) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeUnadvise: dwConnection	" Private - invoke the IOleObject::Unadvise function. "	&lt;COM: HRESULT __stdcall  Unadvise(DWORD dwConnection) = 20&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeUpdate	" Private - invoke the IOleObject::Update function. "	&lt;COM: HRESULT __stdcall  Update(void) = 13&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IOleInPlaceObjectPointer</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeInPlaceDeactivate	" Private - invoke the IOleInPlaceObject::InPlaceDeactivate function. "	&lt;COM: HRESULT __stdcall  InPlaceDeactivate(void) = 5&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeReactivateAndUndo	" Private - invoke the IOleInPlaceObject::ReactivateAndUndo function. "	&lt;COM: HRESULT __stdcall  ReactivateAndUndo(void) = 8&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeSetObjectRects: lprcPosRect _: lprcClipRect	" Private - invoke the IOleInPlaceObject::SetObjectRects function. "	&lt;COM: HRESULT __stdcall  SetObjectRects(LPCRECT lprcPosRect, LPCRECT lprcClipRect) = 7&gt;	^self externalAccessFailedWith: _errorCode</body><body package="ActiveX-Interfaces">invokeUIDeactivate	" Private - invoke the IOleInPlaceObject::UIDeactivate function. "	&lt;COM: HRESULT __stdcall  UIDeactivate(void) = 6&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.IViewObjectImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">Draw: dwDrawAspect _: lindex _: pvAspect _: ptd _: hdcTargetDev _: hdcDraw _: lprcBounds _: lprcWBounds _: resultReference _: dwContinue	" Invoke the IViewObject2::Draw function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Draw: dwDrawAspect _: lindex _: pvAspect _: ptd _: hdcTargetDev _: hdcDraw _: lprcBounds _: lprcWBounds _: resultReference _: dwContinue		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Freeze: dwDrawAspect _: lindex _: pvAspect _: resultReference	" Invoke the IViewObject2::Freeze function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Freeze: dwDrawAspect _: lindex _: pvAspect _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetAdvise: resultReference _: resultReference1 _: resultReference2	" Invoke the IViewObject2::GetAdvise function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetAdvise: resultReference _: resultReference1 _: resultReference2		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetColorSet: dwDrawAspect _: lindex _: pvAspect _: ptd _: hicTargetDev _: resultReference	" Invoke the IViewObject2::GetColorSet function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetColorSet: dwDrawAspect _: lindex _: pvAspect _: ptd _: hicTargetDev _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetAdvise: aspects _: advf _: pAdvSink	" Invoke the IViewObject2::SetAdvise function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetAdvise: aspects _: advf _: pAdvSink		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Unfreeze: dwFreeze	" Invoke the IViewObject2::Unfreeze function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Unfreeze: dwFreeze		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IViewObjectImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeDraw: this _: dwDrawAspect _: lindex _: pvAspect _: ptd _: hdcTargetDev _: hdcDraw _: lprcBounds _: lprcWBounds _: pfnContinue _: dwContinue	" Private - invoke the IViewObject2::Draw function for an external caller. "	" HRESULT __stdcall  Draw(DWORD dwDrawAspect, LONG lindex, void * pvAspect, DVTARGETDEVICE * ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( __stdcall * pfnContinue)(DWORD dwContinue), DWORD dwContinue) = 3 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pvAspect isNull ifTrue: [ ^E_INVALIDARG ].	ptd isNull ifTrue: [ ^E_INVALIDARG ].	hdcTargetDev isNull ifTrue: [ ^E_INVALIDARG ].	hdcDraw isNull ifTrue: [ ^E_INVALIDARG ].	lprcBounds isNull ifTrue: [ ^E_INVALIDARG ].	lprcWBounds isNull ifTrue: [ ^E_INVALIDARG ].	pfnContinue isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: pfnContinue.	resultReference := nil asValueReference.	hresult := implementor Draw: dwDrawAspect _: lindex _: pvAspect  "### UNKNOWN TYPE ###" _: ( self structureAtAddress: ptd ) _: hdcTargetDev  "### UNKNOWN TYPE ###" _: hdcDraw  "### UNKNOWN TYPE ###" _: ( self structureAtAddress: lprcBounds ) _: ( self structureAtAddress: lprcWBounds ) _: resultReference _: dwContinue.	( HRESULT succeeded: hresult )		ifTrue: [			self scalarResultAtAddress: pfnContinue put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeFreeze: this _: dwDrawAspect _: lindex _: pvAspect _: pdwFreeze	" Private - invoke the IViewObject2::Freeze function for an external caller. "	" HRESULT __stdcall  Freeze(DWORD dwDrawAspect, LONG lindex, void * pvAspect, DWORD * pdwFreeze) = 5 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pvAspect isNull ifTrue: [ ^E_INVALIDARG ].	pdwFreeze isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: pdwFreeze.	resultReference := nil asValueReference.	hresult := implementor Freeze: dwDrawAspect _: lindex _: pvAspect  "### UNKNOWN TYPE ###" _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self scalarResultAtAddress: pdwFreeze put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetAdvise: this _: pAspects _: pAdvf _: ppAdvSink	" Private - invoke the IViewObject2::GetAdvise function for an external caller. "	" HRESULT __stdcall  GetAdvise(DWORD * pAspects, DWORD * pAdvf, IAdviseSink * * ppAdvSink) = 8 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference resultReference resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pAspects isNull ifTrue: [ ^E_INVALIDARG ].	pAdvf isNull ifTrue: [ ^E_INVALIDARG ].	ppAdvSink isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: pAspects.	self clearResultBufferAtAddress: pAdvf.	self clearResultBufferAtAddress: ppAdvSink.	resultReference := nil asValueReference.	resultReference := nil asValueReference.	resultReference := nil asValueReference.	hresult := implementor GetAdvise: resultReference _: resultReference _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self scalarResultAtAddress: pAspects put: resultReference value.			self scalarResultAtAddress: pAdvf put: resultReference value.			self interfaceResultAtAddress: ppAdvSink put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetColorSet: this _: dwDrawAspect _: lindex _: pvAspect _: ptd _: hicTargetDev _: ppColorSet	" Private - invoke the IViewObject2::GetColorSet function for an external caller. "	" HRESULT __stdcall  GetColorSet(DWORD dwDrawAspect, LONG lindex, void * pvAspect, DVTARGETDEVICE * ptd, HDC hicTargetDev, LOGPALETTE * * ppColorSet) = 4 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pvAspect isNull ifTrue: [ ^E_INVALIDARG ].	ptd isNull ifTrue: [ ^E_INVALIDARG ].	hicTargetDev isNull ifTrue: [ ^E_INVALIDARG ].	ppColorSet isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: ppColorSet.	resultReference := nil asValueReference.	hresult := implementor GetColorSet: dwDrawAspect _: lindex _: pvAspect  "### UNKNOWN TYPE ###" _: ( self structureAtAddress: ptd ) _: hicTargetDev  "### UNKNOWN TYPE ###" _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self structureResultAtAddress: ppColorSet put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetAdvise: this _: aspects _: advf _: pAdvSink	" Private - invoke the IViewObject2::SetAdvise function for an external caller. "	" HRESULT __stdcall  SetAdvise(DWORD aspects, DWORD advf, IAdviseSink * pAdvSink) = 7 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pAdvSink isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetAdvise: aspects _: advf _: ( "self interfaceAtAddress: "pAdvSink "### type: IFoo ##" )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeUnfreeze: this _: dwFreeze	" Private - invoke the IViewObject2::Unfreeze function for an external caller. "	" HRESULT __stdcall  Unfreeze(DWORD dwFreeze) = 6 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor Unfreeze: dwFreeze	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IViewObjectImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IViewObject.	self vtableSignatureTypeName: #__IViewObjectVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleControlSitePointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetExtendedControl: resultReference	" Invoke the IOleControlSite::GetExtendedControl function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := '### TBD: ''IFooPointer resultValueBuffer'' or ''COMInterfacePointer resultValueBufferForIID: iid'' ###'.	hresult := self invokeGetExtendedControl: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">LockInPlaceActive: fLock	" Invoke the IOleControlSite::LockInPlaceActive function. "	^self invokeLockInPlaceActive: fLock</body><body package="ActiveX-Interfaces">OnControlInfoChanged	" Invoke the IOleControlSite::OnControlInfoChanged function. "	^self invokeOnControlInfoChanged</body><body package="ActiveX-Interfaces">OnFocus: fGotFocus	" Invoke the IOleControlSite::OnFocus function. "	^self invokeOnFocus: fGotFocus</body><body package="ActiveX-Interfaces">ShowPropertyFrame	" Invoke the IOleControlSite::ShowPropertyFrame function. "	^self invokeShowPropertyFrame</body><body package="ActiveX-Interfaces">TransformCoords: pPtlHimetric _: pPtfContainer _: dwFlags	" Invoke the IOleControlSite::TransformCoords function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeTransformCoords: pPtlHimetric asPointerParameter _: pPtfContainer asPointerParameter _: dwFlags</body><body package="ActiveX-Interfaces">TranslateAccelerator: pMsg _: grfModifiers	" Invoke the IOleControlSite::TranslateAccelerator function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeTranslateAccelerator: pMsg asPointerParameter _: grfModifiers</body></methods><methods><class-id>External.IOleControlSitePointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleControlSite.	self updateAndRegister</body></methods><methods><class-id>External.IViewObject</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">drawAspect: dwDrawAspect lIndex: lindex pvAspect: pvAspect ptd: ptd targetDevice: hdcTargetDev hdcDraw: hdcDraw lprcBounds: lprcBounds lprcWBounds: lprcWBounds pfnContinue: pfnContinue dwContinue: dwContinue	" Invoke the IViewObject2::Draw function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: ptd lprcBounds lprcWBounds "	"***WARNING: Possible [out] arguments: pfnContinue "	^interface Draw: dwDrawAspect _: lindex _: pvAspect _: ptd _: hdcTargetDev _: hdcDraw _: lprcBounds _: lprcWBounds _: pfnContinue _: dwContinue</body><body package="ActiveX-Interfaces">freeze: dwDrawAspect with: lindex with: pvAspect	" Invoke the IViewObject2::Freeze function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := nil asValueReference.	interface Freeze: dwDrawAspect _: lindex _: pvAspect _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">getAdvise: pAspects with: pAdvf	" Invoke the IViewObject2::GetAdvise function. ""**** NOTE: Automatically generated method, requires manual review ****"	"***WARNING: Possible [out] arguments: pAspects pAdvf "	| resultReference |	resultReference := '### TBD: ''IFoo new asResultValue'' or ''COMInterfaceValueReference forIID: iid'' ###'.	interface GetAdvise: pAspects _: pAdvf _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">getColorSet: dwDrawAspect with: lindex with: pvAspect with: ptd with: hicTargetDev	" Invoke the IViewObject2::GetColorSet function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: ptd "	| resultReference |	resultReference := nil asValueReference.	interface GetColorSet: dwDrawAspect _: lindex _: pvAspect _: ptd _: hicTargetDev _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">setAdvise: aspects with: advf with: pAdvSink	" Invoke the IViewObject2::SetAdvise function. "	^interface SetAdvise: aspects _: advf _: pAdvSink</body><body package="ActiveX-Interfaces">unfreeze: dwFreeze	" Invoke the IViewObject2::Unfreeze function. "	^interface Unfreeze: dwFreeze</body></methods><methods><class-id>External.IViewObject</class-id> <category>IOleObject protocol compatibility</category><body package="ActiveX-Interfaces">advise: iAdviseSink	"connect the most common DVASPECT_CONTENT. Return the interface itself to fake a token."	self setAdvise: DVASPECT_CONTENT with: 0 with: iAdviseSink.	^ true</body><body package="ActiveX-Interfaces">unadvise: aToken	"disconnect the most common DVASPECT_CONTENT aspect"	self setAdvise: DVASPECT_CONTENT with: 0 with: nil.</body></methods><methods><class-id>External.IViewObject class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IViewObject.	self updateAndRegister</body></methods><methods><class-id>External.IOleWindowImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">ContextSensitiveHelp: fEnterMode	" Invoke the IOleWindow::ContextSensitiveHelp function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ContextSensitiveHelp: fEnterMode		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetWindow: phwnd	" Invoke the IOleWindow::GetWindow function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetWindow: phwnd		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleWindowImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeContextSensitiveHelp: this _: fEnterMode	" Private - invoke the IOleWindow::ContextSensitiveHelp function for an external caller. "	" HRESULT __stdcall  ContextSensitiveHelp(BOOL fEnterMode) = 4 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor ContextSensitiveHelp: fEnterMode	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetWindow: this _: phwnd	" Private - invoke the IOleWindow::GetWindow function for an external caller. "	" HRESULT __stdcall  GetWindow(HWND * phwnd) = 3 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| resultReference result |	^[  " terminate exception stack unwind at function invocation boundary "	self reportExternalFunctionEntry.	phwnd isNull ifTrue: [ ^E_INVALIDARG ].	resultReference := nil asValue.	result := implementor GetWindow: resultReference. 	phwnd contents: resultReference value.	result	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleWindowImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleWindow.	self vtableSignatureTypeName: #__IOleWindowVtbl.	self updateAndRegister</body></methods><methods><class-id>IOleInPlaceSiteImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">CanInPlaceActivate	" Invoke the IOleInPlaceSite::CanInPlaceActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor CanInPlaceActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">DeactivateAndUndo	" Invoke the IOleInPlaceSite::DeactivateAndUndo function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor DeactivateAndUndo		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">DiscardUndoState	" Invoke the IOleInPlaceSite::DiscardUndoState function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor DiscardUndoState		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetWindowContext: ppFrame _: ppDoc _: lprcPosRect _: lprcClipRect _: lpFrameInfo	" Invoke the IOleInPlaceSite::GetWindowContext function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetWindowContext: ppFrame _: ppDoc _: lprcPosRect _: lprcClipRect _: lpFrameInfo		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnInPlaceActivate	" Invoke the IOleInPlaceSite::OnInPlaceActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnInPlaceActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnInPlaceDeactivate	" Invoke the IOleInPlaceSite::OnInPlaceDeactivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnInPlaceDeactivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnPosRectChange: lprcPosRect	" Invoke the IOleInPlaceSite::OnPosRectChange function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnPosRectChange: lprcPosRect		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnUIActivate	" Invoke the IOleInPlaceSite::OnUIActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnUIActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnUIDeactivate: fUndoable	" Invoke the IOleInPlaceSite::OnUIDeactivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnUIDeactivate: fUndoable		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Scroll: scrollExtant	" Invoke the IOleInPlaceSite::Scroll function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Scroll: scrollExtant		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>IOleInPlaceSiteImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeCanInPlaceActivate: this	" Private - invoke the IOleInPlaceSite::CanInPlaceActivate function for an external caller. "	" HRESULT __stdcall  CanInPlaceActivate(void) = 5 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor CanInPlaceActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeDeactivateAndUndo: this	" Private - invoke the IOleInPlaceSite::DeactivateAndUndo function for an external caller. "	" HRESULT __stdcall  DeactivateAndUndo(void) = 13 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor DeactivateAndUndo	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeDiscardUndoState: this	" Private - invoke the IOleInPlaceSite::DiscardUndoState function for an external caller. "	" HRESULT __stdcall  DiscardUndoState(void) = 12 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor DiscardUndoState	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetWindowContext: this _: ppFrame _: ppDoc _: lprcPosRect _: lprcClipRect _: lpFrameInfo	" Private - invoke the IOleInPlaceSite::GetWindowContext function for an external caller. "	" HRESULT __stdcall  GetWindowContext(IOleInPlaceFrame * * ppFrame, IOleInPlaceUIWindow * * ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo) = 8 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| frameReference result docReference |	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppFrame isNull ifTrue: [ ^E_INVALIDARG ].	ppDoc isNull ifTrue: [ ^E_INVALIDARG ].	lprcPosRect isNull ifTrue: [ ^E_INVALIDARG ].	lprcClipRect isNull ifTrue: [ ^E_INVALIDARG ].	lpFrameInfo isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearPointerResultValueAtAddress: ppFrame.	self clearPointerResultValueAtAddress: ppDoc.	frameReference := ValueReference new.	docReference := ValueReference new.	result := implementor 			GetWindowContext: frameReference 			_: docReference			_: ( self structureAtAddress: lprcPosRect ) 					_: ( self structureAtAddress: lprcClipRect ) 			_: (self structureAtAddress: lpFrameInfo)  "### UNKNOWN TYPE ###".		(HRESULT succeeded: result) ifTrue: [		self interfaceResultAtAddress: ppFrame put: frameReference value.		self interfaceResultAtAddress: ppDoc put: docReference value. ].	result	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnInPlaceActivate: this	" Private - invoke the IOleInPlaceSite::OnInPlaceActivate function for an external caller. "	" HRESULT __stdcall  OnInPlaceActivate(void) = 6 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnInPlaceActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnInPlaceDeactivate: this	" Private - invoke the IOleInPlaceSite::OnInPlaceDeactivate function for an external caller. "	" HRESULT __stdcall  OnInPlaceDeactivate(void) = 11 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnInPlaceDeactivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnPosRectChange: this _: lprcPosRect	" Private - invoke the IOleInPlaceSite::OnPosRectChange function for an external caller. "	" HRESULT __stdcall  OnPosRectChange(LPCRECT lprcPosRect) = 14 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	lprcPosRect isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor OnPosRectChange: ( self structureAtAddress: lprcPosRect )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnUIActivate: this	" Private - invoke the IOleInPlaceSite::OnUIActivate function for an external caller. "	" HRESULT __stdcall  OnUIActivate(void) = 7 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnUIActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnUIDeactivate: this _: fUndoable	" Private - invoke the IOleInPlaceSite::OnUIDeactivate function for an external caller. "	" HRESULT __stdcall  OnUIDeactivate(BOOL fUndoable) = 10 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnUIDeactivate: fUndoable	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeScroll: this _: scrollExtant	" Private - invoke the IOleInPlaceSite::Scroll function for an external caller. "	" HRESULT __stdcall  Scroll(SIZE scrollExtant) = 9 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	implementor Scroll: ( self structureFrom: scrollExtant )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>IOleInPlaceSiteImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSite.	self vtableSignatureTypeName: #__IOleInPlaceSiteVtbl.	self updateAndRegister</body></methods><methods><class-id>IOleInPlaceSiteExImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeOnInPlaceActivateEx: this _: pfNoRedraw _: dwFlags	" Private - invoke the IOleInPlaceSiteWindowless::OnInPlaceActivateEx function for an external caller. "	" HRESULT __stdcall  OnInPlaceActivateEx(BOOL * pfNoRedraw, DWORD dwFlags) = 15 "	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pfNoRedraw isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: pfNoRedraw.	resultReference := nil asValueReference.	hresult := implementor OnInPlaceActivateEx: resultReference _: dwFlags.	( HRESULT succeeded: hresult )		ifTrue: [			self scalarResultAtAddress: pfNoRedraw put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnInPlaceDeactivateEx: this _: fNoRedraw	" Private - invoke the IOleInPlaceSiteWindowless::OnInPlaceDeactivateEx function for an external caller. "	" HRESULT __stdcall  OnInPlaceDeactivateEx(BOOL fNoRedraw) = 16 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnInPlaceDeactivateEx: fNoRedraw	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeRequestUIActivate: this	" Private - invoke the IOleInPlaceSiteWindowless::RequestUIActivate function for an external caller. "	" HRESULT __stdcall  RequestUIActivate(void) = 17 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor RequestUIActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>IOleInPlaceSiteExImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">OnInPlaceActivateEx: resultReference _: dwFlags	" Invoke the IOleInPlaceSiteWindowless::OnInPlaceActivateEx function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnInPlaceActivateEx: resultReference _: dwFlags		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnInPlaceDeactivateEx: fNoRedraw	" Invoke the IOleInPlaceSiteWindowless::OnInPlaceDeactivateEx function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnInPlaceDeactivateEx: fNoRedraw		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">RequestUIActivate	" Invoke the IOleInPlaceSiteWindowless::RequestUIActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor RequestUIActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>IOleInPlaceSiteExImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	" IOleInPlaceSiteImplementation ClassInitializer "	self iid: IID_IOleInPlaceSiteEx.	self vtableSignatureTypeName: #__IOleInPlaceSiteExVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleWindow</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">contextSensitiveHelp: fEnterMode	" Invoke the IOleWindow::ContextSensitiveHelp function. "	^interface ContextSensitiveHelp: fEnterMode</body><body package="ActiveX-Interfaces">getWindow		| phwnd pointer |	phwnd := COMExternalInterface current HWND gcMalloc.	self getWindow: phwnd.	pointer := phwnd contents.	^ pointer isValid 		ifTrue: 	[ Win32Window withHandle: pointer ]		ifFalse: 	[ nil ]</body><body package="ActiveX-Interfaces">getWindow: phwnd	" Invoke the IOleWindow::GetWindow function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface GetWindow: phwnd</body></methods><methods><class-id>External.IOleWindow class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleWindow.	self updateAndRegister</body></methods><methods><class-id>External.IOleWindowPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">ContextSensitiveHelp: fEnterMode	" Invoke the IOleWindow::ContextSensitiveHelp function. "	^self invokeContextSensitiveHelp: fEnterMode</body><body package="ActiveX-Interfaces">GetWindow: phwnd	" Invoke the IOleWindow::GetWindow function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetWindow: phwnd  "### UNKNOWN TYPE ###"</body></methods><methods><class-id>External.IOleWindowPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleWindow.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceActiveObjectPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">EnableModeless: fEnable	" Invoke the IOleInPlaceActiveObject::EnableModeless function. "	^self invokeEnableModeless: fEnable</body><body package="ActiveX-Interfaces">OnDocWindowActivate: fActivate	" Invoke the IOleInPlaceActiveObject::OnDocWindowActivate function. "	^self invokeOnDocWindowActivate: fActivate</body><body package="ActiveX-Interfaces">OnFrameWindowActivate: fActivate	" Invoke the IOleInPlaceActiveObject::OnFrameWindowActivate function. "	^self invokeOnFrameWindowActivate: fActivate</body><body package="ActiveX-Interfaces">ResizeBorder: prcBorder _: pUIWindow _: fFrameWindow	" Invoke the IOleInPlaceActiveObject::ResizeBorder function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeResizeBorder: prcBorder asPointerParameter _: pUIWindow asPointerParameter  "### UNKNOWN TYPE ###" _: fFrameWindow</body><body package="ActiveX-Interfaces">TranslateAccelerator: lpmsg	" Invoke the IOleInPlaceActiveObject::TranslateAccelerator function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeTranslateAccelerator: lpmsg asPointerParameter</body></methods><methods><class-id>External.IOleInPlaceActiveObjectPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceActiveObject.	self updateAndRegister</body></methods><methods><class-id>External.IOleClientSitePointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetContainer: ppContainer	" Invoke the IOleClientSite::GetContainer function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetContainer: ppContainer  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">GetMoniker: dwAssign _: dwWhichMoniker _: resultReference	" Invoke the IOleClientSite::GetMoniker function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := '### TBD: ''IFooPointer resultValueBuffer'' or ''COMInterfacePointer resultValueBufferForIID: iid'' ###'.	hresult := self invokeGetMoniker: dwAssign _: dwWhichMoniker _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">OnShowWindow: fShow	" Invoke the IOleClientSite::OnShowWindow function. "	^self invokeOnShowWindow: fShow</body><body package="ActiveX-Interfaces">RequestNewObjectLayout	" Invoke the IOleClientSite::RequestNewObjectLayout function. "	^self invokeRequestNewObjectLayout</body><body package="ActiveX-Interfaces">SaveObject	" Invoke the IOleClientSite::SaveObject function. "	^self invokeSaveObject</body><body package="ActiveX-Interfaces">ShowObject	" Invoke the IOleClientSite::ShowObject function. "	^self invokeShowObject</body></methods><methods><class-id>External.IOleClientSitePointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleClientSite.	self updateAndRegister</body></methods><methods><class-id>External.IPropertyNotifySinkPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">OnChanged: dispID	" Invoke the IPropertyNotifySink::OnChanged function. "	^self invokeOnChanged: dispID</body><body package="ActiveX-Interfaces">OnRequestEdit: dispID	" Invoke the IPropertyNotifySink::OnRequestEdit function. "	^self invokeOnRequestEdit: dispID</body></methods><methods><class-id>External.IPropertyNotifySinkPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IPropertyNotifySink.	self updateAndRegister</body></methods><methods><class-id>External.IViewObjectPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">Draw: dwDrawAspect _: lindex _: pvAspect _: ptd _: hdcTargetDev _: hdcDraw _: lprcBounds _: lprcWBounds _: callback _: dwContinue	" Invoke the IViewObject2::Draw function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult pfnContinue |	pfnContinue := callback asPointerParameter.	hresult := self invokeDraw: dwDrawAspect _: lindex _: pvAspect  "### UNKNOWN TYPE ###" _: ptd asPointerParameter _: hdcTargetDev  "### UNKNOWN TYPE ###" _: hdcDraw  "### UNKNOWN TYPE ###" _: lprcBounds asPointerParameter _: lprcWBounds asPointerParameter _: pfnContinue asPointerParameter _: dwContinue.	^hresult</body><body package="ActiveX-Interfaces">Freeze: dwDrawAspect _: lindex _: pvAspect _: resultReference	" Invoke the IViewObject2::Freeze function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #DWORD.	hresult := self invokeFreeze: dwDrawAspect _: lindex _: pvAspect  "### UNKNOWN TYPE ###" _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">GetAdvise: resultReference _: resultReference1 _: resultReference2	" Invoke the IViewObject2::GetAdvise function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult pAspects pAdvf resultBuffer |	pAspects := COMExternalInterface scalarResultBufferFor: #DWORD.	pAdvf := COMExternalInterface scalarResultBufferFor: #DWORD.	resultBuffer := '### TBD: ''IFooPointer resultValueBuffer'' or ''COMInterfacePointer resultValueBufferForIID: iid'' ###'.	hresult := self invokeGetAdvise: pAspects asPointerParameter _: pAdvf asPointerParameter _: resultBuffer asPointerParameter.	resultReference value: pAspects contents.	resultReference1 value: pAdvf contents.	resultReference2 value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">GetColorSet: dwDrawAspect _: lindex _: pvAspect _: ptd _: hicTargetDev _: resultReference	" Invoke the IViewObject2::GetColorSet function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := COMStructure resultValuePointerBufferFor: #tagLOGPALETTE.	hresult := self invokeGetColorSet: dwDrawAspect _: lindex _: pvAspect  "### UNKNOWN TYPE ###" _: ptd asPointerParameter _: hicTargetDev  "### UNKNOWN TYPE ###" _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">SetAdvise: aspects _: advf _: pAdvSink	" Invoke the IViewObject2::SetAdvise function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetAdvise: aspects _: advf _: pAdvSink asPointerParameter</body><body package="ActiveX-Interfaces">Unfreeze: dwFreeze	" Invoke the IViewObject2::Unfreeze function. "	^self invokeUnfreeze: dwFreeze</body></methods><methods><class-id>External.IViewObjectPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IViewObject.	self updateAndRegister</body></methods><methods><class-id>IOleInPlaceSitePointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">CanInPlaceActivate	" Invoke the IOleInPlaceSite::CanInPlaceActivate function. "	^self invokeCanInPlaceActivate</body><body package="ActiveX-Interfaces">DeactivateAndUndo	" Invoke the IOleInPlaceSite::DeactivateAndUndo function. "	^self invokeDeactivateAndUndo</body><body package="ActiveX-Interfaces">DiscardUndoState	" Invoke the IOleInPlaceSite::DiscardUndoState function. "	^self invokeDiscardUndoState</body><body package="ActiveX-Interfaces">GetWindowContext: ppFrame _: ppDoc _: lprcPosRect _: lprcClipRect _: lpFrameInfo	" Invoke the IOleInPlaceSite::GetWindowContext function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetWindowContext: ppFrame  "### UNKNOWN TYPE ###" _: ppDoc  "### UNKNOWN TYPE ###" _: lprcPosRect asPointerParameter _: lprcClipRect asPointerParameter _: lpFrameInfo  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">OnInPlaceActivate	" Invoke the IOleInPlaceSite::OnInPlaceActivate function. "	^self invokeOnInPlaceActivate</body><body package="ActiveX-Interfaces">OnInPlaceDeactivate	" Invoke the IOleInPlaceSite::OnInPlaceDeactivate function. "	^self invokeOnInPlaceDeactivate</body><body package="ActiveX-Interfaces">OnPosRectChange: lprcPosRect	" Invoke the IOleInPlaceSite::OnPosRectChange function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeOnPosRectChange: lprcPosRect asPointerParameter</body><body package="ActiveX-Interfaces">OnUIActivate	" Invoke the IOleInPlaceSite::OnUIActivate function. "	^self invokeOnUIActivate</body><body package="ActiveX-Interfaces">OnUIDeactivate: fUndoable	" Invoke the IOleInPlaceSite::OnUIDeactivate function. "	^self invokeOnUIDeactivate: fUndoable</body><body package="ActiveX-Interfaces">Scroll: scrollExtant	" Invoke the IOleInPlaceSite::Scroll function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeScroll: scrollExtant asStructureParameter</body></methods><methods><class-id>IOleInPlaceSitePointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSite.	self updateAndRegister</body></methods><methods><class-id>IOleInPlaceSiteExPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">OnInPlaceActivateEx: resultReference _: dwFlags	" Invoke the IOleInPlaceSiteWindowless::OnInPlaceActivateEx function. "	| hresult pfNoRedraw |	pfNoRedraw := COMExternalInterface scalarResultBufferFor: #BOOL.	hresult := self invokeOnInPlaceActivateEx: pfNoRedraw asPointerParameter _: dwFlags.	resultReference value: pfNoRedraw contents.	^hresult</body><body package="ActiveX-Interfaces">OnInPlaceDeactivateEx: fNoRedraw	" Invoke the IOleInPlaceSiteWindowless::OnInPlaceDeactivateEx function. "	^self invokeOnInPlaceDeactivateEx: fNoRedraw</body><body package="ActiveX-Interfaces">RequestUIActivate	" Invoke the IOleInPlaceSiteWindowless::RequestUIActivate function. "	^self invokeRequestUIActivate</body></methods><methods><class-id>IOleInPlaceSiteExPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSiteEx.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceSiteWindowlessPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">AdjustRect: prc	" Invoke the IOleInPlaceSiteWindowless::AdjustRect function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeAdjustRect: prc asPointerParameter</body><body package="ActiveX-Interfaces">CanWindowlessActivate	" Invoke the IOleInPlaceSiteWindowless::CanWindowlessActivate function. "	^self invokeCanWindowlessActivate</body><body package="ActiveX-Interfaces">GetCapture	" Invoke the IOleInPlaceSiteWindowless::GetCapture function. "	^self invokeGetCapture</body><body package="ActiveX-Interfaces">GetDC: pRect _: grfFlags _: phDC	" Invoke the IOleInPlaceSiteWindowless::GetDC function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetDC: pRect asPointerParameter _: grfFlags _: phDC  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">GetFocus	" Invoke the IOleInPlaceSiteWindowless::GetFocus function. "	^self invokeGetFocus</body><body package="ActiveX-Interfaces">InvalidateRect: pRect _: fErase	" Invoke the IOleInPlaceSiteWindowless::InvalidateRect function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeInvalidateRect: pRect asPointerParameter _: fErase</body><body package="ActiveX-Interfaces">InvalidateRgn: hRGN _: fErase	" Invoke the IOleInPlaceSiteWindowless::InvalidateRgn function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeInvalidateRgn: hRGN  "### UNKNOWN TYPE ###" _: fErase</body><body package="ActiveX-Interfaces">OnDefWindowMessage: msg _: wParam _: lParam _: resultReference	" Invoke the IOleInPlaceSiteWindowless::OnDefWindowMessage function. "	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #LRESULT.	hresult := self invokeOnDefWindowMessage: msg _: wParam _: lParam _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">ReleaseDC: hDC	" Invoke the IOleInPlaceSiteWindowless::ReleaseDC function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeReleaseDC: hDC  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">ScrollRect: dx _: dy _: pRectScroll _: pRectClip	" Invoke the IOleInPlaceSiteWindowless::ScrollRect function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeScrollRect: dx _: dy _: pRectScroll asPointerParameter _: pRectClip asPointerParameter</body><body package="ActiveX-Interfaces">SetCapture: fCapture	" Invoke the IOleInPlaceSiteWindowless::SetCapture function. "	^self invokeSetCapture: fCapture</body><body package="ActiveX-Interfaces">SetFocus: fFocus	" Invoke the IOleInPlaceSiteWindowless::SetFocus function. "	^self invokeSetFocus: fFocus</body></methods><methods><class-id>External.IOleInPlaceSiteWindowlessPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSiteWindowless.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceActiveObjectImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">EnableModeless: fEnable	" Invoke the IOleInPlaceActiveObject::EnableModeless function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor EnableModeless: fEnable		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnDocWindowActivate: fActivate	" Invoke the IOleInPlaceActiveObject::OnDocWindowActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnDocWindowActivate: fActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnFrameWindowActivate: fActivate	" Invoke the IOleInPlaceActiveObject::OnFrameWindowActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnFrameWindowActivate: fActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">ResizeBorder: prcBorder _: pUIWindow _: fFrameWindow	" Invoke the IOleInPlaceActiveObject::ResizeBorder function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ResizeBorder: prcBorder _: pUIWindow _: fFrameWindow		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">TranslateAccelerator: lpmsg	" Invoke the IOleInPlaceActiveObject::TranslateAccelerator function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor TranslateAccelerator: lpmsg		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleInPlaceActiveObjectImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeEnableModeless: this _: fEnable	" Private - invoke the IOleInPlaceActiveObject::EnableModeless function for an external caller. "	" HRESULT __stdcall  EnableModeless(BOOL fEnable) = 9 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor EnableModeless: fEnable	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnDocWindowActivate: this _: fActivate	" Private - invoke the IOleInPlaceActiveObject::OnDocWindowActivate function for an external caller. "	" HRESULT __stdcall  OnDocWindowActivate(BOOL fActivate) = 7 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnDocWindowActivate: fActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnFrameWindowActivate: this _: fActivate	" Private - invoke the IOleInPlaceActiveObject::OnFrameWindowActivate function for an external caller. "	" HRESULT __stdcall  OnFrameWindowActivate(BOOL fActivate) = 6 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnFrameWindowActivate: fActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeResizeBorder: this _: prcBorder _: pUIWindow _: fFrameWindow	" Private - invoke the IOleInPlaceActiveObject::ResizeBorder function for an external caller. "	" HRESULT __stdcall  ResizeBorder(LPCRECT prcBorder, IOleInPlaceUIWindow * pUIWindow, BOOL fFrameWindow) = 8 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	prcBorder isNull ifTrue: [ ^E_INVALIDARG ].	pUIWindow isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor ResizeBorder: ( self structureAtAddress: prcBorder ) _: pUIWindow  "### UNKNOWN TYPE ###" _: fFrameWindow	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeTranslateAccelerator: this _: lpmsg	" Private - invoke the IOleInPlaceActiveObject::TranslateAccelerator function for an external caller. "	" HRESULT __stdcall  TranslateAccelerator(LPMSG lpmsg) = 5 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	lpmsg isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor TranslateAccelerator: ( self structureAtAddress: lpmsg )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleInPlaceActiveObjectImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceActiveObject.	self vtableSignatureTypeName: #__IOleInPlaceActiveObjectVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleDocumentSitePointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">ActivateMe: pViewToActivate	" Invoke the IOleDocumentSite::ActivateMe function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeActivateMe: pViewToActivate  "### UNKNOWN TYPE ###"</body></methods><methods><class-id>External.IOleDocumentSitePointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleDocumentSite.	self updateAndRegister</body></methods><methods><class-id>External.IOleDocumentSite</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">activateMe: pViewToActivate	" Invoke the IOleDocumentSite::ActivateMe function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface ActivateMe: pViewToActivate</body></methods><methods><class-id>External.IOleDocumentSite class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleDocumentSite.	self updateAndRegister</body></methods><methods><class-id>External.IViewObject2</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">getExtent: dwDrawAspect with: lindex with: ptd with: lpsizel	" Invoke the IViewObject2::GetExtent function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: ptd lpsizel "	^interface GetExtent: dwDrawAspect _: lindex _: ptd _: lpsizel</body></methods><methods><class-id>External.IViewObject2 class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IViewObject2.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceObject</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">inPlaceDeactivate	" Invoke the IOleInPlaceObject::InPlaceDeactivate function. "	^interface InPlaceDeactivate</body><body package="ActiveX-Interfaces">reactivateAndUndo	" Invoke the IOleInPlaceObject::ReactivateAndUndo function. "	^interface ReactivateAndUndo</body><body package="ActiveX-Interfaces">setObjectRects: posRect with: clipRect	" Invoke the IOleInPlaceObject::SetObjectRects function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: lprcPosRect lprcClipRect "	^interface SetObjectRects: posRect asTemporaryCStructure _: clipRect asTemporaryCStructure</body><body package="ActiveX-Interfaces">uIDeactivate	" Invoke the IOleInPlaceObject::UIDeactivate function. "	^interface UIDeactivate</body></methods><methods><class-id>External.IOleInPlaceObject class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceObject.	self updateAndRegister</body></methods><methods><class-id>External.IOleControlSite</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">getExtendedControl	" Invoke the IOleControlSite::GetExtendedControl function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := '### TBD: ''IFoo new asResultValue'' or ''COMInterfaceValueReference forIID: iid'' ###'.	interface GetExtendedControl: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">lockInPlaceActive: fLock	" Invoke the IOleControlSite::LockInPlaceActive function. "	^interface LockInPlaceActive: fLock</body><body package="ActiveX-Interfaces">onControlInfoChanged	" Invoke the IOleControlSite::OnControlInfoChanged function. "	^interface OnControlInfoChanged</body><body package="ActiveX-Interfaces">onFocus: fGotFocus	" Invoke the IOleControlSite::OnFocus function. "	^interface OnFocus: fGotFocus</body><body package="ActiveX-Interfaces">showPropertyFrame	" Invoke the IOleControlSite::ShowPropertyFrame function. "	^interface ShowPropertyFrame</body><body package="ActiveX-Interfaces">transformCoords: pPtlHimetric with: pPtfContainer with: dwFlags	" Invoke the IOleControlSite::TransformCoords function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: pPtlHimetric pPtfContainer "	^interface TransformCoords: pPtlHimetric _: pPtfContainer _: dwFlags</body><body package="ActiveX-Interfaces">translateAccelerator: pMsg with: grfModifiers	" Invoke the IOleControlSite::TranslateAccelerator function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: pMsg "	^interface TranslateAccelerator: pMsg _: grfModifiers</body></methods><methods><class-id>External.IOleControlSite class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleControlSite.	self updateAndRegister</body></methods><methods><class-id>IOleDocumentViewPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">ApplyViewState: pstm	" Invoke the IOleDocumentView::ApplyViewState function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeApplyViewState: pstm asPointerParameter</body><body package="ActiveX-Interfaces">Clone: pIPSiteNew _: ppViewNew	" Invoke the IOleDocumentView::Clone function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeClone: pIPSiteNew  "### UNKNOWN TYPE ###" _: ppViewNew  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">CloseView: dwReserved	" Invoke the IOleDocumentView::CloseView function. "	^self invokeCloseView: dwReserved</body><body package="ActiveX-Interfaces">GetDocument: resultReference	" Invoke the IOleDocumentView::GetDocument function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := '### TBD: ''IFooPointer resultValueBuffer'' or ''COMInterfacePointer resultValueBufferForIID: iid'' ###'.	hresult := self invokeGetDocument: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">GetInPlaceSite: ppIPSite	" Invoke the IOleDocumentView::GetInPlaceSite function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetInPlaceSite: ppIPSite  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">GetRect: prcView	" Invoke the IOleDocumentView::GetRect function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetRect: prcView asPointerParameter</body><body package="ActiveX-Interfaces">Open	" Invoke the IOleDocumentView::Open function. "	^self invokeOpen</body><body package="ActiveX-Interfaces">SaveViewState: pstm	" Invoke the IOleDocumentView::SaveViewState function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSaveViewState: pstm asPointerParameter</body><body package="ActiveX-Interfaces">SetInPlaceSite: pIPSite	" Invoke the IOleDocumentView::SetInPlaceSite function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetInPlaceSite: pIPSite  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">SetRect: prcView	" Invoke the IOleDocumentView::SetRect function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetRect: prcView asPointerParameter</body><body package="ActiveX-Interfaces">SetRectComplex: prcView _: prcHScroll _: prcVScroll _: prcSizeBox	" Invoke the IOleDocumentView::SetRectComplex function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetRectComplex: prcView asPointerParameter _: prcHScroll asPointerParameter _: prcVScroll asPointerParameter _: prcSizeBox asPointerParameter</body><body package="ActiveX-Interfaces">Show: fShow	" Invoke the IOleDocumentView::Show function. "	^self invokeShow: fShow</body><body package="ActiveX-Interfaces">UIActivate: fUIActivate	" Invoke the IOleDocumentView::UIActivate function. "	^self invokeUIActivate: fUIActivate</body></methods><methods><class-id>IOleDocumentViewPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleDocumentView.	self updateAndRegister</body></methods><methods><class-id>IOleInPlaceSite</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">canInPlaceActivate	" Invoke the IOleInPlaceSite::CanInPlaceActivate function. "	^interface CanInPlaceActivate</body><body package="ActiveX-Interfaces">deactivateAndUndo	" Invoke the IOleInPlaceSite::DeactivateAndUndo function. "	^interface DeactivateAndUndo</body><body package="ActiveX-Interfaces">discardUndoState	" Invoke the IOleInPlaceSite::DiscardUndoState function. "	^interface DiscardUndoState</body><body package="ActiveX-Interfaces">getWindowContext: ppFrame with: ppDoc with: lprcPosRect with: lprcClipRect with: lpFrameInfo	" Invoke the IOleInPlaceSite::GetWindowContext function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: lprcPosRect lprcClipRect "	^interface GetWindowContext: ppFrame _: ppDoc _: lprcPosRect _: lprcClipRect _: lpFrameInfo</body><body package="ActiveX-Interfaces">onInPlaceActivate	" Invoke the IOleInPlaceSite::OnInPlaceActivate function. "	^interface OnInPlaceActivate</body><body package="ActiveX-Interfaces">onInPlaceDeactivate	" Invoke the IOleInPlaceSite::OnInPlaceDeactivate function. "	^interface OnInPlaceDeactivate</body><body package="ActiveX-Interfaces">onPosRectChange: lprcPosRect	" Invoke the IOleInPlaceSite::OnPosRectChange function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: lprcPosRect "	^interface OnPosRectChange: lprcPosRect</body><body package="ActiveX-Interfaces">onUIActivate	" Invoke the IOleInPlaceSite::OnUIActivate function. "	^interface OnUIActivate</body><body package="ActiveX-Interfaces">onUIDeactivate: fUndoable	" Invoke the IOleInPlaceSite::OnUIDeactivate function. "	^interface OnUIDeactivate: fUndoable</body><body package="ActiveX-Interfaces">scroll: scrollExtant	" Invoke the IOleInPlaceSite::Scroll function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface Scroll: scrollExtant</body></methods><methods><class-id>IOleInPlaceSite class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSite.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceSiteEx</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">onInPlaceActivateEx: pfNoRedraw with: dwFlags	" Invoke the IOleInPlaceSiteWindowless::OnInPlaceActivateEx function. "	^interface OnInPlaceActivateEx: pfNoRedraw _: dwFlags</body><body package="ActiveX-Interfaces">onInPlaceDeactivateEx: fNoRedraw	" Invoke the IOleInPlaceSiteWindowless::OnInPlaceDeactivateEx function. "	^interface OnInPlaceDeactivateEx: fNoRedraw</body><body package="ActiveX-Interfaces">requestUIActivate	" Invoke the IOleInPlaceSiteWindowless::RequestUIActivate function. "	^interface RequestUIActivate</body></methods><methods><class-id>External.IOleInPlaceSiteEx class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSiteEx.	self updateAndRegister</body></methods><methods><class-id>External.IOleControl</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">freezeEvents: bFreeze	" Invoke the IOleControl::FreezeEvents function. "	^interface FreezeEvents: bFreeze</body><body package="ActiveX-Interfaces">getControlInfo: pCI	" Invoke the IOleControl::GetControlInfo function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface GetControlInfo: pCI</body><body package="ActiveX-Interfaces">onAmbientPropertyChange: dispID	" Invoke the IOleControl::OnAmbientPropertyChange function. "	^interface OnAmbientPropertyChange: dispID</body><body package="ActiveX-Interfaces">onMnemonic: pMsg	" Invoke the IOleControl::OnMnemonic function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: pMsg "	^interface OnMnemonic: pMsg</body></methods><methods><class-id>External.IOleControl class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleControl.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceUIWindowImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetBorder: this _: lprectBorder	" Private - invoke the IOleInPlaceUIWindow::GetBorder function for an external caller. "	" HRESULT __stdcall  GetBorder(LPRECT lprectBorder) = 5 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	lprectBorder isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetBorder: ( self structureAtAddress: lprectBorder )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeRequestBorderSpace: this _: pborderwidths	" Private - invoke the IOleInPlaceUIWindow::RequestBorderSpace function for an external caller. "	" HRESULT __stdcall  RequestBorderSpace(LPCBORDERWIDTHS pborderwidths) = 6 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pborderwidths isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor RequestBorderSpace: pborderwidths  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetActiveObject: this _: pActiveObject _: pszObjName	" Private - invoke the IOleInPlaceUIWindow::SetActiveObject function for an external caller. "	" HRESULT __stdcall  SetActiveObject(IOleInPlaceActiveObject * pActiveObject, LPCOLESTR pszObjName) = 8 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| iActiveObject |	^[  " terminate exception stack unwind at function invocation boundary "	self reportExternalFunctionEntry.	pActiveObject isNull ifTrue: [ ^E_INVALIDARG ].	pszObjName isNull ifTrue: [ ^E_INVALIDARG ].	iActiveObject := (IOleInPlaceActiveObjectPointer newTemporaryInterfacePointerAtAddress: pActiveObject) asInterfaceReference.	implementor SetActiveObject: iActiveObject _: ( self stringAtAddress: pszObjName )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetBorderSpace: this _: pborderwidths	" Private - invoke the IOleInPlaceUIWindow::SetBorderSpace function for an external caller. "	" HRESULT __stdcall  SetBorderSpace(LPCBORDERWIDTHS pborderwidths) = 7 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pborderwidths isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetBorderSpace: pborderwidths  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleInPlaceUIWindowImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetBorder: lprectBorder	" Invoke the IOleInPlaceUIWindow::GetBorder function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetBorder: lprectBorder		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">RequestBorderSpace: pborderwidths	" Invoke the IOleInPlaceUIWindow::RequestBorderSpace function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor RequestBorderSpace: pborderwidths		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetActiveObject: pActiveObject _: pszObjName	" Invoke the IOleInPlaceUIWindow::SetActiveObject function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetActiveObject: pActiveObject _: pszObjName		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetBorderSpace: pborderwidths	" Invoke the IOleInPlaceUIWindow::SetBorderSpace function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetBorderSpace: pborderwidths		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleInPlaceUIWindowImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceUIWindow.	self vtableSignatureTypeName: #__IOleInPlaceUIWindowVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceFrameImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">EnableModeless: fEnable	" Invoke the IOleInPlaceFrame::EnableModeless function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor EnableModeless: fEnable		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">InsertMenus: hmenuShared _: lpMenuWidths	" Invoke the IOleInPlaceFrame::InsertMenus function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor InsertMenus: hmenuShared _: lpMenuWidths		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">RemoveMenus: hmenuShared	" Invoke the IOleInPlaceFrame::RemoveMenus function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor RemoveMenus: hmenuShared		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetMenu: hmenuShared _: holemenu _: hwndActiveObject	" Invoke the IOleInPlaceFrame::SetMenu function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetMenu: hmenuShared _: holemenu _: hwndActiveObject		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetStatusText: pszStatusText	" Invoke the IOleInPlaceFrame::SetStatusText function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetStatusText: pszStatusText		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">TranslateAccelerator: lpmsg _: wID	" Invoke the IOleInPlaceFrame::TranslateAccelerator function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor TranslateAccelerator: lpmsg _: wID		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleInPlaceFrameImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeEnableModeless: this _: fEnable	" Private - invoke the IOleInPlaceFrame::EnableModeless function for an external caller. "	" HRESULT __stdcall  EnableModeless(BOOL fEnable) = 13 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor EnableModeless: fEnable	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeInsertMenus: this _: hmenuShared _: lpMenuWidths	" Private - invoke the IOleInPlaceFrame::InsertMenus function for an external caller. "	" HRESULT __stdcall  InsertMenus(HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths) = 9 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	hmenuShared isNull ifTrue: [ ^E_INVALIDARG ].	lpMenuWidths isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor InsertMenus: hmenuShared  "### UNKNOWN TYPE ###" _: lpMenuWidths  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeRemoveMenus: this _: hmenuShared	" Private - invoke the IOleInPlaceFrame::RemoveMenus function for an external caller. "	" HRESULT __stdcall  RemoveMenus(HMENU hmenuShared) = 11 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	hmenuShared isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor RemoveMenus: hmenuShared  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetMenu: this _: hmenuShared _: holemenu _: hwndActiveObject	" Private - invoke the IOleInPlaceFrame::SetMenu function for an external caller. "	" HRESULT __stdcall  SetMenu(HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject) = 10 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	hmenuShared isNull ifTrue: [ ^E_INVALIDARG ].	holemenu isNull ifTrue: [ ^E_INVALIDARG ].	hwndActiveObject isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetMenu: hmenuShared  "### UNKNOWN TYPE ###" _: holemenu  "### UNKNOWN TYPE ###" _: hwndActiveObject  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetStatusText: this _: pszStatusText	" Private - invoke the IOleInPlaceFrame::SetStatusText function for an external caller. "	" HRESULT __stdcall  SetStatusText(LPCOLESTR pszStatusText) = 12 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pszStatusText isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetStatusText: ( self stringAtAddress: pszStatusText )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeTranslateAccelerator: this _: lpmsg _: wID	" Private - invoke the IOleInPlaceFrame::TranslateAccelerator function for an external caller. "	" HRESULT __stdcall  TranslateAccelerator(LPMSG lpmsg, WORD wID) = 14 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	lpmsg isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor TranslateAccelerator: ( self structureAtAddress: lpmsg ) _: wID	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleInPlaceFrameImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceFrame.	self vtableSignatureTypeName: #__IOleInPlaceFrameVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleObject</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">advise: pAdvSink	" Invoke the IOleObject::Advise function. "	| resultReference |	resultReference := nil asValueReference.	interface Advise: pAdvSink _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">close: dwSaveOption	" Invoke the IOleObject::Close function. Sets the object from running to loaded state "	^interface Close: dwSaveOption</body><body package="ActiveX-Interfaces">doVerb: iVerb with: lpmsg with: pActiveSite with: lindex with: hwndParent with: lprcPosRect	" Invoke the IOleObject::DoVerb function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: lpmsg lprcPosRect "	^interface DoVerb: iVerb _: lpmsg _: pActiveSite _: lindex _: hwndParent _: lprcPosRect</body><body package="ActiveX-Interfaces">enumAdvise	" Invoke the IOleObject::EnumAdvise function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := ( IEnum forIID: IID_IEnumSTATDATA ) asValueReference.	interface EnumAdvise: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">enumVerbs	" Invoke the IOleObject::EnumVerbs function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := ( IEnum forIID: IID_IEnumOLEVERB ) asValueReference.	interface EnumVerbs: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">getClientSite: ppClientSite	" Invoke the IOleObject::GetClientSite function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface GetClientSite: ppClientSite</body><body package="ActiveX-Interfaces">getClipboardData: dwReserved	" Invoke the IOleObject::GetClipboardData function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := '### TBD: ''IFoo new asResultValue'' or ''COMInterfaceValueReference forIID: iid'' ###'.	interface GetClipboardData: dwReserved _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">getExtent: dwDrawAspect with: psizel	" Invoke the IOleObject::GetExtent function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: psizel "	^interface GetExtent: dwDrawAspect _: psizel</body><body package="ActiveX-Interfaces">getMiscStatus: dwAspect	" Invoke the IOleObject::GetMiscStatus function. "	| resultReference |	resultReference := nil asValueReference.	interface GetMiscStatus: dwAspect _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">getMoniker: dwAssign with: dwWhichMoniker	" Invoke the IOleObject::GetMoniker function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := '### TBD: ''IFoo new asResultValue'' or ''COMInterfaceValueReference forIID: iid'' ###'.	interface GetMoniker: dwAssign _: dwWhichMoniker _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">getUserClassID: pClsid	" Invoke the IOleObject::GetUserClassID function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface GetUserClassID: pClsid</body><body package="ActiveX-Interfaces">getUserType: dwFormOfType	" Invoke the IOleObject::GetUserType function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := nil asValueReference.	interface GetUserType: dwFormOfType _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">initFromData: pDataObject with: fCreation with: dwReserved	" Invoke the IOleObject::InitFromData function. "	^interface InitFromData: pDataObject _: fCreation _: dwReserved</body><body package="ActiveX-Interfaces">isUpToDate	" Invoke the IOleObject::IsUpToDate function. "	^interface IsUpToDate</body><body package="ActiveX-Interfaces">setClientSite: pClientSite	" Invoke the IOleObject::SetClientSite function. "	^( interface SetClientSite: pClientSite) = S_OK		ifTrue: [ S_OK ]		ifFalse: [ self error: (#SetClientSiteFailed &lt;&lt; #com &gt;&gt; 'SetClientSite failed') ].</body><body package="ActiveX-Interfaces">setColorScheme: pLogpal	" Invoke the IOleObject::SetColorScheme function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface SetColorScheme: pLogpal</body><body package="ActiveX-Interfaces">setExtent: dwDrawAspect with: psizel	" Invoke the IOleObject::SetExtent function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: psizel "	^interface SetExtent: dwDrawAspect _: psizel</body><body package="ActiveX-Interfaces">setHostNames: szContainerApp with: szContainerObj	" Invoke the IOleObject::SetHostNames function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface SetHostNames: szContainerApp _: szContainerObj</body><body package="ActiveX-Interfaces">setMoniker: dwWhichMoniker with: pmk	" Invoke the IOleObject::SetMoniker function. "	^interface SetMoniker: dwWhichMoniker _: pmk</body><body package="ActiveX-Interfaces">unadvise: dwConnection	" Invoke the IOleObject::Unadvise function. "	^interface Unadvise: dwConnection</body><body package="ActiveX-Interfaces">update	" Invoke the IOleObject::Update function. "	^interface Update</body></methods><methods><class-id>External.IOleObject class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleObject.	self updateAndRegister</body></methods><methods><class-id>External.IOleControlSiteImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetExtendedControl: resultReference	" Invoke the IOleControlSite::GetExtendedControl function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetExtendedControl: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">LockInPlaceActive: fLock	" Invoke the IOleControlSite::LockInPlaceActive function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor LockInPlaceActive: fLock		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnControlInfoChanged	" Invoke the IOleControlSite::OnControlInfoChanged function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnControlInfoChanged		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnFocus: fGotFocus	" Invoke the IOleControlSite::OnFocus function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnFocus: fGotFocus		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">ShowPropertyFrame	" Invoke the IOleControlSite::ShowPropertyFrame function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ShowPropertyFrame		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">TransformCoords: pPtlHimetric _: pPtfContainer _: dwFlags	" Invoke the IOleControlSite::TransformCoords function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor TransformCoords: pPtlHimetric _: pPtfContainer _: dwFlags		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">TranslateAccelerator: pMsg _: grfModifiers	" Invoke the IOleControlSite::TranslateAccelerator function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor TranslateAccelerator: pMsg _: grfModifiers		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleControlSiteImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetExtendedControl: this _: ppDisp	" Private - invoke the IOleControlSite::GetExtendedControl function for an external caller. "	" HRESULT __stdcall  GetExtendedControl(IDispatch * * ppDisp) = 5 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppDisp isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: ppDisp.	resultReference := nil asValueReference.	hresult := implementor GetExtendedControl: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self interfaceResultAtAddress: ppDisp put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeLockInPlaceActive: this _: fLock	" Private - invoke the IOleControlSite::LockInPlaceActive function for an external caller. "	" HRESULT __stdcall  LockInPlaceActive(BOOL fLock) = 4 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor LockInPlaceActive: fLock	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnControlInfoChanged: this	" Private - invoke the IOleControlSite::OnControlInfoChanged function for an external caller. "	" HRESULT __stdcall  OnControlInfoChanged(void) = 3 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnControlInfoChanged	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnFocus: this _: fGotFocus	" Private - invoke the IOleControlSite::OnFocus function for an external caller. "	" HRESULT __stdcall  OnFocus(BOOL fGotFocus) = 8 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnFocus: fGotFocus	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeShowPropertyFrame: this	" Private - invoke the IOleControlSite::ShowPropertyFrame function for an external caller. "	" HRESULT __stdcall  ShowPropertyFrame(void) = 9 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor ShowPropertyFrame	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeTransformCoords: this _: pPtlHimetric _: pPtfContainer _: dwFlags	" Private - invoke the IOleControlSite::TransformCoords function for an external caller. "	" HRESULT __stdcall  TransformCoords(POINTL * pPtlHimetric, POINTF * pPtfContainer, DWORD dwFlags) = 6 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pPtlHimetric isNull ifTrue: [ ^E_INVALIDARG ].	pPtfContainer isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor TransformCoords: ( self structureAtAddress: pPtlHimetric ) _: ( self structureAtAddress: pPtfContainer ) _: dwFlags	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeTranslateAccelerator: this _: pMsg _: grfModifiers	" Private - invoke the IOleControlSite::TranslateAccelerator function for an external caller. "	" HRESULT __stdcall  TranslateAccelerator(MSG * pMsg, DWORD grfModifiers) = 7 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pMsg isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor TranslateAccelerator: ( self structureAtAddress: pMsg ) _: grfModifiers	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleControlSiteImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	" IOleControlSiteImplementation ClassInitializer "	self iid: IID_IOleControlSite.	self vtableSignatureTypeName: #__IOleControlSiteVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleDocumentSiteImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">ActivateMe: pViewToActivate	" Invoke the IOleDocumentSite::ActivateMe function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ActivateMe: pViewToActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleDocumentSiteImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeActivateMe: this _: pViewToActivate	" Private - invoke the IOleDocumentSite::ActivateMe function for an external caller. "	" HRESULT __stdcall  ActivateMe(IOleDocumentView * pViewToActivate) = 3 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pViewToActivate isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor ActivateMe: (IOleDocumentViewPointer newTemporaryInterfacePointerAtAddress: pViewToActivate)  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleDocumentSiteImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleDocumentSite.	self vtableSignatureTypeName: #__IOleDocumentSiteVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleControlPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">FreezeEvents: bFreeze	" Invoke the IOleControl::FreezeEvents function. "	^self invokeFreezeEvents: bFreeze</body><body package="ActiveX-Interfaces">GetControlInfo: pCI	" Invoke the IOleControl::GetControlInfo function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetControlInfo: pCI  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">OnAmbientPropertyChange: dispID	" Invoke the IOleControl::OnAmbientPropertyChange function. "	^self invokeOnAmbientPropertyChange: dispID</body><body package="ActiveX-Interfaces">OnMnemonic: pMsg	" Invoke the IOleControl::OnMnemonic function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeOnMnemonic: pMsg asPointerParameter</body></methods><methods><class-id>External.IOleControlPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleControl.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceSiteWindowlessImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">AdjustRect: prc	" Invoke the IOleInPlaceSiteWindowless::AdjustRect function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor AdjustRect: prc		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">CanWindowlessActivate	" Invoke the IOleInPlaceSiteWindowless::CanWindowlessActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor CanWindowlessActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetCapture	" Invoke the IOleInPlaceSiteWindowless::GetCapture function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetCapture		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetDC: pRect _: grfFlags _: phDC	" Invoke the IOleInPlaceSiteWindowless::GetDC function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetDC: pRect _: grfFlags _: phDC		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetFocus	" Invoke the IOleInPlaceSiteWindowless::GetFocus function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetFocus		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">InvalidateRect: pRect _: fErase	" Invoke the IOleInPlaceSiteWindowless::InvalidateRect function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor InvalidateRect: pRect _: fErase		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">InvalidateRgn: hRGN _: fErase	" Invoke the IOleInPlaceSiteWindowless::InvalidateRgn function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor InvalidateRgn: hRGN _: fErase		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnDefWindowMessage: msg _: wParam _: lParam _: resultReference	" Invoke the IOleInPlaceSiteWindowless::OnDefWindowMessage function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnDefWindowMessage: msg _: wParam _: lParam _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">ReleaseDC: hDC	" Invoke the IOleInPlaceSiteWindowless::ReleaseDC function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ReleaseDC: hDC		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">ScrollRect: dx _: dy _: pRectScroll _: pRectClip	" Invoke the IOleInPlaceSiteWindowless::ScrollRect function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ScrollRect: dx _: dy _: pRectScroll _: pRectClip		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetCapture: fCapture	" Invoke the IOleInPlaceSiteWindowless::SetCapture function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetCapture: fCapture		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetFocus: fFocus	" Invoke the IOleInPlaceSiteWindowless::SetFocus function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetFocus: fFocus		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleInPlaceSiteWindowlessImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeAdjustRect: this _: prc	" Private - invoke the IOleInPlaceSiteWindowless::AdjustRect function for an external caller. "	" HRESULT __stdcall  AdjustRect(LPRECT prc) = 28 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	prc isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor AdjustRect: ( self structureAtAddress: prc )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeCanWindowlessActivate: this	" Private - invoke the IOleInPlaceSiteWindowless::CanWindowlessActivate function for an external caller. "	" HRESULT __stdcall  CanWindowlessActivate(void) = 18 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor CanWindowlessActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetCapture: this	" Private - invoke the IOleInPlaceSiteWindowless::GetCapture function for an external caller. "	" HRESULT __stdcall  GetCapture(void) = 19 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor GetCapture	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetDC: this _: pRect _: grfFlags _: phDC	" Private - invoke the IOleInPlaceSiteWindowless::GetDC function for an external caller. "	" HRESULT __stdcall  GetDC(LPCRECT pRect, DWORD grfFlags, HDC * phDC) = 23 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pRect isNull ifTrue: [ ^E_INVALIDARG ].	phDC isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetDC: ( self structureAtAddress: pRect ) _: grfFlags _: phDC  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetFocus: this	" Private - invoke the IOleInPlaceSiteWindowless::GetFocus function for an external caller. "	" HRESULT __stdcall  GetFocus(void) = 21 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor GetFocus	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeInvalidateRect: this _: pRect _: fErase	" Private - invoke the IOleInPlaceSiteWindowless::InvalidateRect function for an external caller. "	" HRESULT __stdcall  InvalidateRect(LPCRECT pRect, BOOL fErase) = 25 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pRect isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor InvalidateRect: ( self structureAtAddress: pRect ) _: fErase	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeInvalidateRgn: this _: hRGN _: fErase	" Private - invoke the IOleInPlaceSiteWindowless::InvalidateRgn function for an external caller. "	" HRESULT __stdcall  InvalidateRgn(HRGN hRGN, BOOL fErase) = 26 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	hRGN isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor InvalidateRgn: hRGN  "### UNKNOWN TYPE ###" _: fErase	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnDefWindowMessage: this _: msg _: wParam _: lParam _: plResult	" Private - invoke the IOleInPlaceSiteWindowless::OnDefWindowMessage function for an external caller. "	" HRESULT __stdcall  OnDefWindowMessage(UINT msg, WPARAM wParam, LPARAM lParam, LRESULT * plResult) = 29 "	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	plResult isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: plResult.	resultReference := nil asValueReference.	hresult := implementor OnDefWindowMessage: msg _: wParam _: lParam _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self scalarResultAtAddress: plResult put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeReleaseDC: this _: hDC	" Private - invoke the IOleInPlaceSiteWindowless::ReleaseDC function for an external caller. "	" HRESULT __stdcall  ReleaseDC(HDC hDC) = 24 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	hDC isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor ReleaseDC: hDC  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeScrollRect: this _: dx _: dy _: pRectScroll _: pRectClip	" Private - invoke the IOleInPlaceSiteWindowless::ScrollRect function for an external caller. "	" HRESULT __stdcall  ScrollRect(INT dx, INT dy, LPCRECT pRectScroll, LPCRECT pRectClip) = 27 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pRectScroll isNull ifTrue: [ ^E_INVALIDARG ].	pRectClip isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor ScrollRect: dx _: dy _: ( self structureAtAddress: pRectScroll ) _: ( self structureAtAddress: pRectClip )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetCapture: this _: fCapture	" Private - invoke the IOleInPlaceSiteWindowless::SetCapture function for an external caller. "	" HRESULT __stdcall  SetCapture(BOOL fCapture) = 20 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor SetCapture: fCapture	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetFocus: this _: fFocus	" Private - invoke the IOleInPlaceSiteWindowless::SetFocus function for an external caller. "	" HRESULT __stdcall  SetFocus(BOOL fFocus) = 22 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor SetFocus: fFocus	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleInPlaceSiteWindowlessImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSiteWindowless.	self vtableSignatureTypeName: #__IOleInPlaceSiteWindowlessVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IPropertyNotifySink</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">onChanged: dispID	" Invoke the IPropertyNotifySink::OnChanged function. "	^interface OnChanged: dispID</body><body package="ActiveX-Interfaces">onRequestEdit: dispID	" Invoke the IPropertyNotifySink::OnRequestEdit function. "	^interface OnRequestEdit: dispID</body></methods><methods><class-id>External.IPropertyNotifySink class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IPropertyNotifySink.	self updateAndRegister</body></methods><methods><class-id>IOleDocumentView</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">applyViewState: pstm	" Invoke the IOleDocumentView::ApplyViewState function. "	^interface ApplyViewState: pstm</body><body package="ActiveX-Interfaces">clone: pIPSiteNew with: ppViewNew	" Invoke the IOleDocumentView::Clone function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface Clone: pIPSiteNew _: ppViewNew</body><body package="ActiveX-Interfaces">closeView: dwReserved	" Invoke the IOleDocumentView::CloseView function. "	^interface CloseView: dwReserved</body><body package="ActiveX-Interfaces">getDocument	" Invoke the IOleDocumentView::GetDocument function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := '### TBD: ''IFoo new asResultValue'' or ''COMInterfaceValueReference forIID: iid'' ###'.	interface GetDocument: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">getInPlaceSite: ppIPSite	" Invoke the IOleDocumentView::GetInPlaceSite function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface GetInPlaceSite: ppIPSite</body><body package="ActiveX-Interfaces">getRect: prcView	" Invoke the IOleDocumentView::GetRect function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: prcView "	^interface GetRect: prcView</body><body package="ActiveX-Interfaces">open	" Invoke the IOleDocumentView::Open function. "	^interface Open</body><body package="ActiveX-Interfaces">saveViewState: pstm	" Invoke the IOleDocumentView::SaveViewState function. "	^interface SaveViewState: pstm</body><body package="ActiveX-Interfaces">setInPlaceSite: pIPSite	" Invoke the IOleDocumentView::SetInPlaceSite function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface SetInPlaceSite: pIPSite</body><body package="ActiveX-Interfaces">setRect: prcView	" Invoke the IOleDocumentView::SetRect function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: prcView "	^interface SetRect: prcView</body><body package="ActiveX-Interfaces">setRectComplex: prcView with: prcHScroll with: prcVScroll with: prcSizeBox	" Invoke the IOleDocumentView::SetRectComplex function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: prcView prcHScroll prcVScroll prcSizeBox "	^interface SetRectComplex: prcView _: prcHScroll _: prcVScroll _: prcSizeBox</body><body package="ActiveX-Interfaces">show: fShow	" Invoke the IOleDocumentView::Show function. "	^interface Show: fShow</body><body package="ActiveX-Interfaces">uIActivate: fUIActivate	" Invoke the IOleDocumentView::UIActivate function. "	^interface UIActivate: fUIActivate</body></methods><methods><class-id>IOleDocumentView class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleDocumentView.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceUIWindowPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetBorder: lprectBorder	" Invoke the IOleInPlaceUIWindow::GetBorder function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetBorder: lprectBorder asPointerParameter</body><body package="ActiveX-Interfaces">RequestBorderSpace: pborderwidths	" Invoke the IOleInPlaceUIWindow::RequestBorderSpace function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeRequestBorderSpace: pborderwidths  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">SetActiveObject: pActiveObject _: pszObjName	" Invoke the IOleInPlaceUIWindow::SetActiveObject function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetActiveObject: pActiveObject  "### UNKNOWN TYPE ###" _: pszObjName asUnicodeParameter</body><body package="ActiveX-Interfaces">SetBorderSpace: pborderwidths	" Invoke the IOleInPlaceUIWindow::SetBorderSpace function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetBorderSpace: pborderwidths  "### UNKNOWN TYPE ###"</body></methods><methods><class-id>External.IOleInPlaceUIWindowPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceUIWindow.	self updateAndRegister</body></methods><methods><class-id>External.IOleObjectImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">Advise: pAdvSink _: resultReference	" Invoke the IOleObject::Advise function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Advise: pAdvSink _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Close: dwSaveOption	" Invoke the IOleObject::Close function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Close: dwSaveOption		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">DoVerb: iVerb _: lpmsg _: pActiveSite _: lindex _: hwndParent _: lprcPosRect	" Invoke the IOleObject::DoVerb function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor DoVerb: iVerb _: lpmsg _: pActiveSite _: lindex _: hwndParent _: lprcPosRect		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">EnumAdvise: resultReference	" Invoke the IOleObject::EnumAdvise function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor EnumAdvise: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">EnumVerbs: resultReference	" Invoke the IOleObject::EnumVerbs function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor EnumVerbs: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetClientSite: ppClientSite	" Invoke the IOleObject::GetClientSite function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetClientSite: ppClientSite		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetClipboardData: dwReserved _: resultReference	" Invoke the IOleObject::GetClipboardData function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetClipboardData: dwReserved _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetExtent: dwDrawAspect _: psizel	" Invoke the IOleObject::GetExtent function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetExtent: dwDrawAspect _: psizel		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetMiscStatus: dwAspect _: resultReference	" Invoke the IOleObject::GetMiscStatus function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetMiscStatus: dwAspect _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetMoniker: dwAssign _: dwWhichMoniker _: resultReference	" Invoke the IOleObject::GetMoniker function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetMoniker: dwAssign _: dwWhichMoniker _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetUserClassID: pClsid	" Invoke the IOleObject::GetUserClassID function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetUserClassID: pClsid		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetUserType: dwFormOfType _: resultReference	" Invoke the IOleObject::GetUserType function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetUserType: dwFormOfType _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">InitFromData: pDataObject _: fCreation _: dwReserved	" Invoke the IOleObject::InitFromData function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor InitFromData: pDataObject _: fCreation _: dwReserved		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">IsUpToDate	" Invoke the IOleObject::IsUpToDate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor IsUpToDate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetClientSite: pClientSite	" Invoke the IOleObject::SetClientSite function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetClientSite: pClientSite		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetColorScheme: pLogpal	" Invoke the IOleObject::SetColorScheme function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetColorScheme: pLogpal		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetExtent: dwDrawAspect _: psizel	" Invoke the IOleObject::SetExtent function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetExtent: dwDrawAspect _: psizel		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetHostNames: szContainerApp _: szContainerObj	" Invoke the IOleObject::SetHostNames function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetHostNames: szContainerApp _: szContainerObj		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetMoniker: dwWhichMoniker _: pmk	" Invoke the IOleObject::SetMoniker function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetMoniker: dwWhichMoniker _: pmk		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Unadvise: dwConnection	" Invoke the IOleObject::Unadvise function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Unadvise: dwConnection		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Update	" Invoke the IOleObject::Update function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Update		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleObjectImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeAdvise: this _: pAdvSink _: pdwConnection	" Private - invoke the IOleObject::Advise function for an external caller. "	" HRESULT __stdcall  Advise(IAdviseSink * pAdvSink, DWORD * pdwConnection) = 19 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pAdvSink isNull ifTrue: [ ^E_INVALIDARG ].	pdwConnection isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: pdwConnection.	resultReference := nil asValueReference.	hresult := implementor Advise: ( "self interfaceAtAddress: "pAdvSink "### type: IFoo ##" ) _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self scalarResultAtAddress: pdwConnection put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeClose: this _: dwSaveOption	" Private - invoke the IOleObject::Close function for an external caller. "	" HRESULT __stdcall  Close(DWORD dwSaveOption) = 6 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor Close: dwSaveOption	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeDoVerb: this _: iVerb _: lpmsg _: pActiveSite _: lindex _: hwndParent _: lprcPosRect	" Private - invoke the IOleObject::DoVerb function for an external caller. "	" HRESULT __stdcall  DoVerb(LONG iVerb, LPMSG lpmsg, IOleClientSite * pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect) = 11 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	lpmsg isNull ifTrue: [ ^E_INVALIDARG ].	pActiveSite isNull ifTrue: [ ^E_INVALIDARG ].	hwndParent isNull ifTrue: [ ^E_INVALIDARG ].	lprcPosRect isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor DoVerb: iVerb _: ( self structureAtAddress: lpmsg ) _: pActiveSite  "### UNKNOWN TYPE ###" _: lindex _: hwndParent  "### UNKNOWN TYPE ###" _: ( self structureAtAddress: lprcPosRect )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeEnumAdvise: this _: ppenumAdvise	" Private - invoke the IOleObject::EnumAdvise function for an external caller. "	" HRESULT __stdcall  EnumAdvise(IEnumSTATDATA * * ppenumAdvise) = 21 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppenumAdvise isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: ppenumAdvise.	resultReference := nil asValueReference.	hresult := implementor EnumAdvise: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self interfaceResultAtAddress: ppenumAdvise put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeEnumVerbs: this _: ppEnumOleVerb	" Private - invoke the IOleObject::EnumVerbs function for an external caller. "	" HRESULT __stdcall  EnumVerbs(IEnumOLEVERB * * ppEnumOleVerb) = 12 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppEnumOleVerb isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: ppEnumOleVerb.	resultReference := nil asValueReference.	hresult := implementor EnumVerbs: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self interfaceResultAtAddress: ppEnumOleVerb put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetClientSite: this _: ppClientSite	" Private - invoke the IOleObject::GetClientSite function for an external caller. "	" HRESULT __stdcall  GetClientSite(IOleClientSite * * ppClientSite) = 4 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppClientSite isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetClientSite: ppClientSite  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetClipboardData: this _: dwReserved _: ppDataObject	" Private - invoke the IOleObject::GetClipboardData function for an external caller. "	" HRESULT __stdcall  GetClipboardData(DWORD dwReserved, IDataObject * * ppDataObject) = 10 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppDataObject isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: ppDataObject.	resultReference := nil asValueReference.	hresult := implementor GetClipboardData: dwReserved _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self interfaceResultAtAddress: ppDataObject put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetExtent: this _: dwDrawAspect _: psizel	" Private - invoke the IOleObject::GetExtent function for an external caller. "	" HRESULT __stdcall  GetExtent(DWORD dwDrawAspect, SIZEL * psizel) = 18 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	psizel isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetExtent: dwDrawAspect _: ( self structureAtAddress: psizel )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetMiscStatus: this _: dwAspect _: pdwStatus	" Private - invoke the IOleObject::GetMiscStatus function for an external caller. "	" HRESULT __stdcall  GetMiscStatus(DWORD dwAspect, DWORD * pdwStatus) = 22 "	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pdwStatus isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: pdwStatus.	resultReference := nil asValueReference.	hresult := implementor GetMiscStatus: dwAspect _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self scalarResultAtAddress: pdwStatus put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetMoniker: this _: dwAssign _: dwWhichMoniker _: ppmk	" Private - invoke the IOleObject::GetMoniker function for an external caller. "	" HRESULT __stdcall  GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker, IMoniker * * ppmk) = 8 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppmk isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: ppmk.	resultReference := nil asValueReference.	hresult := implementor GetMoniker: dwAssign _: dwWhichMoniker _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self interfaceResultAtAddress: ppmk put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetUserClassID: this _: pClsid	" Private - invoke the IOleObject::GetUserClassID function for an external caller. "	" HRESULT __stdcall  GetUserClassID(CLSID * pClsid) = 15 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pClsid isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetUserClassID: ( self guidAtAddress: pClsid )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetUserType: this _: dwFormOfType _: pszUserType	" Private - invoke the IOleObject::GetUserType function for an external caller. "	" HRESULT __stdcall  GetUserType(DWORD dwFormOfType, LPOLESTR * pszUserType) = 16 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pszUserType isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: pszUserType.	resultReference := nil asValueReference.	hresult := implementor GetUserType: dwFormOfType _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self stringResultAtAddress: pszUserType put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeInitFromData: this _: pDataObject _: fCreation _: dwReserved	" Private - invoke the IOleObject::InitFromData function for an external caller. "	" HRESULT __stdcall  InitFromData(IDataObject * pDataObject, BOOL fCreation, DWORD dwReserved) = 9 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pDataObject isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor InitFromData: ( "self interfaceAtAddress: "pDataObject "### type: IFoo ##" ) _: fCreation _: dwReserved	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeIsUpToDate: this	" Private - invoke the IOleObject::IsUpToDate function for an external caller. "	" HRESULT __stdcall  IsUpToDate(void) = 14 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor IsUpToDate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetClientSite: this _: pClientSite	" Private - invoke the IOleObject::SetClientSite function for an external caller. "	" HRESULT __stdcall  SetClientSite(IOleClientSite * pClientSite) = 3 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pClientSite isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetClientSite: pClientSite  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetColorScheme: this _: pLogpal	" Private - invoke the IOleObject::SetColorScheme function for an external caller. "	" HRESULT __stdcall  SetColorScheme(LOGPALETTE * pLogpal) = 23 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pLogpal isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetColorScheme: pLogpal  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetExtent: this _: dwDrawAspect _: psizel	" Private - invoke the IOleObject::SetExtent function for an external caller. "	" HRESULT __stdcall  SetExtent(DWORD dwDrawAspect, SIZEL * psizel) = 17 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	psizel isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetExtent: dwDrawAspect _: ( self structureAtAddress: psizel )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetHostNames: this _: szContainerApp _: szContainerObj	" Private - invoke the IOleObject::SetHostNames function for an external caller. "	" HRESULT __stdcall  SetHostNames(LPCOLESTR szContainerApp, LPCOLESTR szContainerObj) = 5 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	szContainerApp isNull ifTrue: [ ^E_INVALIDARG ].	szContainerObj isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetHostNames: ( self stringAtAddress: szContainerApp ) _: ( self stringAtAddress: szContainerObj )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetMoniker: this _: dwWhichMoniker _: pmk	" Private - invoke the IOleObject::SetMoniker function for an external caller. "	" HRESULT __stdcall  SetMoniker(DWORD dwWhichMoniker, IMoniker * pmk) = 7 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pmk isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetMoniker: dwWhichMoniker _: ( "self interfaceAtAddress: "pmk "### type: IFoo ##" )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeUnadvise: this _: dwConnection	" Private - invoke the IOleObject::Unadvise function for an external caller. "	" HRESULT __stdcall  Unadvise(DWORD dwConnection) = 20 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor Unadvise: dwConnection	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeUpdate: this	" Private - invoke the IOleObject::Update function for an external caller. "	" HRESULT __stdcall  Update(void) = 13 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor Update	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleObjectImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleObject.	self vtableSignatureTypeName: #__IOleObjectVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceUIWindow</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">getBorder: lprectBorder	" Invoke the IOleInPlaceUIWindow::GetBorder function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: lprectBorder "	^interface GetBorder: lprectBorder</body><body package="ActiveX-Interfaces">requestBorderSpace: pborderwidths	" Invoke the IOleInPlaceUIWindow::RequestBorderSpace function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface RequestBorderSpace: pborderwidths</body><body package="ActiveX-Interfaces">setActiveObject: pActiveObject with: pszObjName	" Invoke the IOleInPlaceUIWindow::SetActiveObject function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface SetActiveObject: pActiveObject _: pszObjName</body><body package="ActiveX-Interfaces">setBorderSpace: pborderwidths	" Invoke the IOleInPlaceUIWindow::SetBorderSpace function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface SetBorderSpace: pborderwidths</body></methods><methods><class-id>External.IOleInPlaceUIWindow class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceUIWindow.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceFrame</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">enableModeless: fEnable	" Invoke the IOleInPlaceFrame::EnableModeless function. "	^interface EnableModeless: fEnable</body><body package="ActiveX-Interfaces">insertMenus: hmenuShared with: lpMenuWidths	" Invoke the IOleInPlaceFrame::InsertMenus function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface InsertMenus: hmenuShared _: lpMenuWidths</body><body package="ActiveX-Interfaces">removeMenus: hmenuShared	" Invoke the IOleInPlaceFrame::RemoveMenus function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface RemoveMenus: hmenuShared</body><body package="ActiveX-Interfaces">setMenu: hmenuShared with: holemenu with: hwndActiveObject	" Invoke the IOleInPlaceFrame::SetMenu function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface SetMenu: hmenuShared _: holemenu _: hwndActiveObject</body><body package="ActiveX-Interfaces">setStatusText: pszStatusText	" Invoke the IOleInPlaceFrame::SetStatusText function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface SetStatusText: pszStatusText</body><body package="ActiveX-Interfaces">translateAccelerator: lpmsg with: wID	" Invoke the IOleInPlaceFrame::TranslateAccelerator function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: lpmsg "	^interface TranslateAccelerator: lpmsg _: wID</body></methods><methods><class-id>External.IOleInPlaceFrame class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceFrame.	self updateAndRegister</body></methods><methods><class-id>External.IOleContainer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">enumObjects: grfFlags	" Invoke the IOleContainer::EnumObjects function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := ( IEnum forIID: IID_IEnumUnknown ) asValueReference.	interface EnumObjects: grfFlags _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">lockContainer: fLock	" Invoke the IOleContainer::LockContainer function. "	^interface LockContainer: fLock</body></methods><methods><class-id>External.IOleContainer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleContainer.	self updateAndRegister</body></methods><methods><class-id>External.IViewObject2Pointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetExtent: dwDrawAspect _: lindex _: ptd _: lpsizel	" Invoke the IViewObject2::GetExtent function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetExtent: dwDrawAspect _: lindex _: ptd asPointerParameter _: lpsizel asPointerParameter</body></methods><methods><class-id>External.IViewObject2Pointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IViewObject2.	self updateAndRegister</body></methods><methods><class-id>External.IViewObject2Implementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetExtent: dwDrawAspect _: lindex _: ptd _: lpsizel	" Invoke the IViewObject2::GetExtent function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetExtent: dwDrawAspect _: lindex _: ptd _: lpsizel		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IViewObject2Implementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetExtent: this _: dwDrawAspect _: lindex _: ptd _: lpsizel	" Private - invoke the IViewObject2::GetExtent function for an external caller. "	" HRESULT __stdcall  GetExtent(DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE * ptd, LPSIZEL lpsizel) = 9 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ptd isNull ifTrue: [ ^E_INVALIDARG ].	lpsizel isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetExtent: dwDrawAspect _: lindex _: ( self structureAtAddress: ptd ) _: ( self structureAtAddress: lpsizel )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IViewObject2Implementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IViewObject2.	self vtableSignatureTypeName: #__IViewObject2Vtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleControlImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeFreezeEvents: this _: bFreeze	" Private - invoke the IOleControl::FreezeEvents function for an external caller. "	" HRESULT __stdcall  FreezeEvents(BOOL bFreeze) = 6 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor FreezeEvents: bFreeze	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetControlInfo: this _: pCI	" Private - invoke the IOleControl::GetControlInfo function for an external caller. "	" HRESULT __stdcall  GetControlInfo(CONTROLINFO * pCI) = 3 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pCI isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetControlInfo: pCI  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnAmbientPropertyChange: this _: dispID	" Private - invoke the IOleControl::OnAmbientPropertyChange function for an external caller. "	" HRESULT __stdcall  OnAmbientPropertyChange(DISPID dispID) = 5 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnAmbientPropertyChange: dispID	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnMnemonic: this _: pMsg	" Private - invoke the IOleControl::OnMnemonic function for an external caller. "	" HRESULT __stdcall  OnMnemonic(MSG * pMsg) = 4 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pMsg isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor OnMnemonic: ( self structureAtAddress: pMsg )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleControlImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">FreezeEvents: bFreeze	" Invoke the IOleControl::FreezeEvents function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor FreezeEvents: bFreeze		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetControlInfo: pCI	" Invoke the IOleControl::GetControlInfo function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetControlInfo: pCI		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnAmbientPropertyChange: dispID	" Invoke the IOleControl::OnAmbientPropertyChange function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnAmbientPropertyChange: dispID		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnMnemonic: pMsg	" Invoke the IOleControl::OnMnemonic function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnMnemonic: pMsg		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleControlImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleControl.	self vtableSignatureTypeName: #__IOleControlVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IPropertyNotifySinkImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeOnChanged: this _: dispID	" Private - invoke the IPropertyNotifySink::OnChanged function for an external caller. "	" HRESULT __stdcall  OnChanged(DISPID dispID) = 3 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnChanged: dispID	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnRequestEdit: this _: dispID	" Private - invoke the IPropertyNotifySink::OnRequestEdit function for an external caller. "	" HRESULT __stdcall  OnRequestEdit(DISPID dispID) = 4 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnRequestEdit: dispID	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IPropertyNotifySinkImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">OnChanged: dispID	" Invoke the IPropertyNotifySink::OnChanged function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnChanged: dispID		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnRequestEdit: dispID	" Invoke the IPropertyNotifySink::OnRequestEdit function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnRequestEdit: dispID		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IPropertyNotifySinkImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IPropertyNotifySink.	self vtableSignatureTypeName: #__IPropertyNotifySinkVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceSiteWindowless</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">adjustRect: prc	" Invoke the IOleInPlaceSiteWindowless::AdjustRect function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: prc "	^interface AdjustRect: prc</body><body package="ActiveX-Interfaces">canWindowlessActivate	" Invoke the IOleInPlaceSiteWindowless::CanWindowlessActivate function. "	^interface CanWindowlessActivate</body><body package="ActiveX-Interfaces">getCapture	" Invoke the IOleInPlaceSiteWindowless::GetCapture function. "	^interface GetCapture</body><body package="ActiveX-Interfaces">getDC: pRect with: grfFlags with: phDC	" Invoke the IOleInPlaceSiteWindowless::GetDC function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: pRect "	^interface GetDC: pRect _: grfFlags _: phDC</body><body package="ActiveX-Interfaces">getFocus	" Invoke the IOleInPlaceSiteWindowless::GetFocus function. "	^interface GetFocus</body><body package="ActiveX-Interfaces">invalidateRect: pRect with: fErase	" Invoke the IOleInPlaceSiteWindowless::InvalidateRect function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: pRect "	^interface InvalidateRect: pRect _: fErase</body><body package="ActiveX-Interfaces">invalidateRgn: hRGN with: fErase	" Invoke the IOleInPlaceSiteWindowless::InvalidateRgn function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface InvalidateRgn: hRGN _: fErase</body><body package="ActiveX-Interfaces">onDefWindowMessage: msg with: wParam with: lParam	" Invoke the IOleInPlaceSiteWindowless::OnDefWindowMessage function. "	| resultReference |	resultReference := nil asValueReference.	interface OnDefWindowMessage: msg _: wParam _: lParam _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">releaseDC: hDC	" Invoke the IOleInPlaceSiteWindowless::ReleaseDC function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface ReleaseDC: hDC</body><body package="ActiveX-Interfaces">scrollRect: dx with: dy with: pRectScroll with: pRectClip	" Invoke the IOleInPlaceSiteWindowless::ScrollRect function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: pRectScroll pRectClip "	^interface ScrollRect: dx _: dy _: pRectScroll _: pRectClip</body><body package="ActiveX-Interfaces">setCapture: fCapture	" Invoke the IOleInPlaceSiteWindowless::SetCapture function. "	^interface SetCapture: fCapture</body><body package="ActiveX-Interfaces">setFocus: fFocus	" Invoke the IOleInPlaceSiteWindowless::SetFocus function. "	^interface SetFocus: fFocus</body></methods><methods><class-id>External.IOleInPlaceSiteWindowless class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceSiteWindowless.	self updateAndRegister</body></methods><methods><class-id>External.IOleClientSite</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">getContainer: ppContainer	" Invoke the IOleClientSite::GetContainer function. ""**** NOTE: Automatically generated method, requires manual review ****"	^interface GetContainer: ppContainer</body><body package="ActiveX-Interfaces">getMoniker: dwAssign with: dwWhichMoniker	" Invoke the IOleClientSite::GetMoniker function. ""**** NOTE: Automatically generated method, requires manual review ****"	| resultReference |	resultReference := '### TBD: ''IFoo new asResultValue'' or ''COMInterfaceValueReference forIID: iid'' ###'.	interface GetMoniker: dwAssign _: dwWhichMoniker _: resultReference.	^resultReference value</body><body package="ActiveX-Interfaces">onShowWindow: fShow	" Invoke the IOleClientSite::OnShowWindow function. "	^interface OnShowWindow: fShow</body><body package="ActiveX-Interfaces">requestNewObjectLayout	" Invoke the IOleClientSite::RequestNewObjectLayout function. "	^interface RequestNewObjectLayout</body><body package="ActiveX-Interfaces">saveObject	" Invoke the IOleClientSite::SaveObject function. "	^interface SaveObject</body><body package="ActiveX-Interfaces">showObject	" Invoke the IOleClientSite::ShowObject function. "	^interface ShowObject</body></methods><methods><class-id>External.IOleClientSite class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleClientSite.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceObjectImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">InPlaceDeactivate	" Invoke the IOleInPlaceObject::InPlaceDeactivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor InPlaceDeactivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">ReactivateAndUndo	" Invoke the IOleInPlaceObject::ReactivateAndUndo function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ReactivateAndUndo		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetObjectRects: lprcPosRect _: lprcClipRect	" Invoke the IOleInPlaceObject::SetObjectRects function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetObjectRects: lprcPosRect _: lprcClipRect		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">UIDeactivate	" Invoke the IOleInPlaceObject::UIDeactivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor UIDeactivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleInPlaceObjectImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeInPlaceDeactivate: this	" Private - invoke the IOleInPlaceObject::InPlaceDeactivate function for an external caller. "	" HRESULT __stdcall  InPlaceDeactivate(void) = 5 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor InPlaceDeactivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeReactivateAndUndo: this	" Private - invoke the IOleInPlaceObject::ReactivateAndUndo function for an external caller. "	" HRESULT __stdcall  ReactivateAndUndo(void) = 8 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor ReactivateAndUndo	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetObjectRects: this _: lprcPosRect _: lprcClipRect	" Private - invoke the IOleInPlaceObject::SetObjectRects function for an external caller. "	" HRESULT __stdcall  SetObjectRects(LPCRECT lprcPosRect, LPCRECT lprcClipRect) = 7 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	lprcPosRect isNull ifTrue: [ ^E_INVALIDARG ].	lprcClipRect isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetObjectRects: ( self structureAtAddress: lprcPosRect ) _: ( self structureAtAddress: lprcClipRect )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeUIDeactivate: this	" Private - invoke the IOleInPlaceObject::UIDeactivate function for an external caller. "	" HRESULT __stdcall  UIDeactivate(void) = 6 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor UIDeactivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleInPlaceObjectImplementation class</class-id> <category>private-installation</category><body package="ActiveX-Interfaces">intialize	self iid: IID_IOleInPlaceObject.	self vtableSignatureTypeName: #__IOleInPlaceObjectVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleContainerImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">EnumObjects: grfFlags _: resultReference	" Invoke the IOleContainer::EnumObjects function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor EnumObjects: grfFlags _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">LockContainer: fLock	" Invoke the IOleContainer::LockContainer function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor LockContainer: fLock		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleContainerImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeEnumObjects: this _: grfFlags _: ppenum	" Private - invoke the IOleContainer::EnumObjects function for an external caller. "	" HRESULT __stdcall  EnumObjects(DWORD grfFlags, IEnumUnknown * * ppenum) = 4 "		^[ " terminate exception stack unwind at function invocation boundary " | hresult resultReference |			self reportExternalFunctionEntry.			ppenum isValid 				ifFalse: [^E_INVALIDARG].			self clearResultBufferAtAddress: ppenum.			resultReference := nil asValueReference.			hresult := implementor EnumObjects: grfFlags _: resultReference.			(HRESULT succeeded: hresult)  ifTrue: [							self						interfaceResultAtAddress: ppenum						put: resultReference value].			hresult																											]		on: self rootExceptions		do: (self exceptionHandlerForHRESULTReturnValue: #externalCallin)</body><body package="ActiveX-Interfaces">invokeLockContainer: this _: fLock	" Private - invoke the IOleContainer::LockContainer function for an external caller. "	" HRESULT __stdcall  LockContainer(BOOL fLock) = 5 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor LockContainer: fLock	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleContainerImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleContainer.	self vtableSignatureTypeName: #__IOleContainerVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleContainerPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">EnumObjects: grfFlags _: resultReference	" Invoke the IOleContainer::EnumObjects function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := IEnumPointer resultValueBufferForIID: IID_IEnumUnknown.	hresult := self invokeEnumObjects: grfFlags _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">LockContainer: fLock	" Invoke the IOleContainer::LockContainer function. "	^self invokeLockContainer: fLock</body></methods><methods><class-id>External.IOleContainerPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleContainer.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceFramePointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">EnableModeless: fEnable	" Invoke the IOleInPlaceFrame::EnableModeless function. "	^self invokeEnableModeless: fEnable</body><body package="ActiveX-Interfaces">InsertMenus: hmenuShared _: lpMenuWidths	" Invoke the IOleInPlaceFrame::InsertMenus function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeInsertMenus: hmenuShared  "### UNKNOWN TYPE ###" _: lpMenuWidths  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">RemoveMenus: hmenuShared	" Invoke the IOleInPlaceFrame::RemoveMenus function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeRemoveMenus: hmenuShared  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">SetMenu: hmenuShared _: holemenu _: hwndActiveObject	" Invoke the IOleInPlaceFrame::SetMenu function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetMenu: hmenuShared  "### UNKNOWN TYPE ###" _: holemenu  "### UNKNOWN TYPE ###" _: hwndActiveObject  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">SetStatusText: pszStatusText	" Invoke the IOleInPlaceFrame::SetStatusText function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetStatusText: pszStatusText asUnicodeParameter</body><body package="ActiveX-Interfaces">TranslateAccelerator: lpmsg _: wID	" Invoke the IOleInPlaceFrame::TranslateAccelerator function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeTranslateAccelerator: lpmsg asPointerParameter _: wID</body></methods><methods><class-id>External.IOleInPlaceFramePointer</class-id> <category>subclass-initialization</category><body package="ActiveX-Interfaces">initialize	^ super initialize.</body></methods><methods><class-id>External.IOleInPlaceFramePointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceFrame.	self updateAndRegister</body></methods><methods><class-id>External.IOleObjectPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">Advise: pAdvSink _: resultReference	" Invoke the IOleObject::Advise function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #DWORD.	hresult := self invokeAdvise: pAdvSink asPointerParameter _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">Close: dwSaveOption	" Invoke the IOleObject::Close function. "	^self invokeClose: dwSaveOption</body><body package="ActiveX-Interfaces">DoVerb: iVerb _: lpmsg _: pActiveSite _: lindex _: hwndParent _: lprcPosRect	" Invoke the IOleObject::DoVerb function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeDoVerb: iVerb _: lpmsg asPointerParameter _: pActiveSite asPointerParameter _: lindex _: hwndParent  _: lprcPosRect asPointerParameter</body><body package="ActiveX-Interfaces">EnumAdvise: resultReference	" Invoke the IOleObject::EnumAdvise function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := IEnumPointer resultValueBufferForIID: IID_IEnumSTATDATA.	hresult := self invokeEnumAdvise: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">EnumVerbs: resultReference	" Invoke the IOleObject::EnumVerbs function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := IEnumPointer resultValueBufferForIID: IID_IEnumOLEVERB.	hresult := self invokeEnumVerbs: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">GetClientSite: ppClientSite	" Invoke the IOleObject::GetClientSite function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetClientSite: ppClientSite  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">GetClipboardData: dwReserved _: resultReference	" Invoke the IOleObject::GetClipboardData function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := '### TBD: ''IFooPointer resultValueBuffer'' or ''COMInterfacePointer resultValueBufferForIID: iid'' ###'.	hresult := self invokeGetClipboardData: dwReserved _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">GetExtent: dwDrawAspect _: psizel	" Invoke the IOleObject::GetExtent function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetExtent: dwDrawAspect _: psizel asPointerParameter</body><body package="ActiveX-Interfaces">GetMiscStatus: dwAspect _: resultReference	" Invoke the IOleObject::GetMiscStatus function. "	| hresult resultBuffer |	resultBuffer := COMExternalInterface scalarResultBufferFor: #DWORD.	hresult := self invokeGetMiscStatus: dwAspect _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">GetMoniker: dwAssign _: dwWhichMoniker _: resultReference	" Invoke the IOleObject::GetMoniker function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := '### TBD: ''IFooPointer resultValueBuffer'' or ''COMInterfacePointer resultValueBufferForIID: iid'' ###'.	hresult := self invokeGetMoniker: dwAssign _: dwWhichMoniker _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">GetUserClassID: pClsid	" Invoke the IOleObject::GetUserClassID function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeGetUserClassID: pClsid</body><body package="ActiveX-Interfaces">GetUserType: dwFormOfType _: resultReference	" Invoke the IOleObject::GetUserType function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	| hresult resultBuffer |	resultBuffer := COMExternalInterface unicodeResultBuffer.	hresult := self invokeGetUserType: dwFormOfType _: resultBuffer asPointerParameter.	resultReference value: resultBuffer contents.	^hresult</body><body package="ActiveX-Interfaces">InitFromData: pDataObject _: fCreation _: dwReserved	" Invoke the IOleObject::InitFromData function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeInitFromData: pDataObject asPointerParameter _: fCreation _: dwReserved</body><body package="ActiveX-Interfaces">IsUpToDate	" Invoke the IOleObject::IsUpToDate function. "	^self invokeIsUpToDate</body><body package="ActiveX-Interfaces">SetClientSite: pClientSite	" Invoke the IOleObject::SetClientSite function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetClientSite: pClientSite asPointerParameter "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">SetColorScheme: pLogpal	" Invoke the IOleObject::SetColorScheme function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetColorScheme: pLogpal  "### UNKNOWN TYPE ###"</body><body package="ActiveX-Interfaces">SetExtent: dwDrawAspect _: psizel	" Invoke the IOleObject::SetExtent function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetExtent: dwDrawAspect _: psizel asPointerParameter</body><body package="ActiveX-Interfaces">SetHostNames: szContainerApp _: szContainerObj	" Invoke the IOleObject::SetHostNames function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetHostNames: szContainerApp asUnicodeParameter _: szContainerObj asUnicodeParameter</body><body package="ActiveX-Interfaces">SetMoniker: dwWhichMoniker _: pmk	" Invoke the IOleObject::SetMoniker function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetMoniker: dwWhichMoniker _: pmk asPointerParameter</body><body package="ActiveX-Interfaces">Unadvise: dwConnection	" Invoke the IOleObject::Unadvise function. "	^self invokeUnadvise: dwConnection</body><body package="ActiveX-Interfaces">Update	" Invoke the IOleObject::Update function. "	^self invokeUpdate</body></methods><methods><class-id>External.IOleObjectPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleObject.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceActiveObject</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">enableModeless: fEnable	" Invoke the IOleInPlaceActiveObject::EnableModeless function. "	^interface EnableModeless: fEnable</body><body package="ActiveX-Interfaces">onDocWindowActivate: fActivate	" Invoke the IOleInPlaceActiveObject::OnDocWindowActivate function. "	^interface OnDocWindowActivate: fActivate</body><body package="ActiveX-Interfaces">onFrameWindowActivate: fActivate	" Invoke the IOleInPlaceActiveObject::OnFrameWindowActivate function. "	^interface OnFrameWindowActivate: fActivate</body><body package="ActiveX-Interfaces">resizeBorder: prcBorder with: pUIWindow with: fFrameWindow	" Invoke the IOleInPlaceActiveObject::ResizeBorder function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: prcBorder "	^interface ResizeBorder: prcBorder asTemporaryCStructure _: pUIWindow _: fFrameWindow</body><body package="ActiveX-Interfaces">translateAccelerator: lpmsg	" Invoke the IOleInPlaceActiveObject::TranslateAccelerator function. ""**** NOTE: Automatically generated method, requires manual review ****"	" Check [in, out] arguments: lpmsg "	^interface TranslateAccelerator: lpmsg</body></methods><methods><class-id>External.IOleInPlaceActiveObject class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceActiveObject.	self updateAndRegister</body></methods><methods><class-id>IOleDocumentViewImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">ApplyViewState: pstm	" Invoke the IOleDocumentView::ApplyViewState function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ApplyViewState: pstm		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Clone: pIPSiteNew _: ppViewNew	" Invoke the IOleDocumentView::Clone function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Clone: pIPSiteNew _: ppViewNew		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">CloseView: dwReserved	" Invoke the IOleDocumentView::CloseView function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor CloseView: dwReserved		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetDocument: resultReference	" Invoke the IOleDocumentView::GetDocument function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetDocument: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetInPlaceSite: ppIPSite	" Invoke the IOleDocumentView::GetInPlaceSite function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetInPlaceSite: ppIPSite		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetRect: prcView	" Invoke the IOleDocumentView::GetRect function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetRect: prcView		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Open	" Invoke the IOleDocumentView::Open function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Open		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SaveViewState: pstm	" Invoke the IOleDocumentView::SaveViewState function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SaveViewState: pstm		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetInPlaceSite: pIPSite	" Invoke the IOleDocumentView::SetInPlaceSite function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetInPlaceSite: pIPSite		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetRect: prcView	" Invoke the IOleDocumentView::SetRect function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetRect: prcView		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SetRectComplex: prcView _: prcHScroll _: prcVScroll _: prcSizeBox	" Invoke the IOleDocumentView::SetRectComplex function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SetRectComplex: prcView _: prcHScroll _: prcVScroll _: prcSizeBox		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">Show: fShow	" Invoke the IOleDocumentView::Show function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor Show: fShow		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">UIActivate: fUIActivate	" Invoke the IOleDocumentView::UIActivate function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor UIActivate: fUIActivate		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>IOleDocumentViewImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeApplyViewState: this _: pstm	" Private - invoke the IOleDocumentView::ApplyViewState function for an external caller. "	" HRESULT __stdcall  ApplyViewState(LPSTREAM pstm) = 14 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pstm isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor ApplyViewState: ( "self interfaceAtAddress: "pstm "### type: IFoo ##" )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeClone: this _: pIPSiteNew _: ppViewNew	" Private - invoke the IOleDocumentView::Clone function for an external caller. "	" HRESULT __stdcall  Clone(IOleInPlaceSite * pIPSiteNew, IOleDocumentView * * ppViewNew) = 15 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pIPSiteNew isNull ifTrue: [ ^E_INVALIDARG ].	ppViewNew isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor Clone: pIPSiteNew  "### UNKNOWN TYPE ###" _: ppViewNew  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeCloseView: this _: dwReserved	" Private - invoke the IOleDocumentView::CloseView function for an external caller. "	" HRESULT __stdcall  CloseView(DWORD dwReserved) = 12 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor CloseView: dwReserved	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetDocument: this _: ppunk	" Private - invoke the IOleDocumentView::GetDocument function for an external caller. "	" HRESULT __stdcall  GetDocument(IUnknown * * ppunk) = 5 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppunk isNull ifTrue: [ ^E_INVALIDARG ].	###"	self clearResultBufferAtAddress: ppunk.	resultReference := nil asValueReference.	hresult := implementor GetDocument: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self interfaceResultAtAddress: ppunk put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetInPlaceSite: this _: ppIPSite	" Private - invoke the IOleDocumentView::GetInPlaceSite function for an external caller. "	" HRESULT __stdcall  GetInPlaceSite(IOleInPlaceSite * * ppIPSite) = 4 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	ppIPSite isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetInPlaceSite: ppIPSite  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetRect: this _: prcView	" Private - invoke the IOleDocumentView::GetRect function for an external caller. "	" HRESULT __stdcall  GetRect(LPRECT prcView) = 7 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	prcView isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor GetRect: ( self structureAtAddress: prcView )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOpen: this	" Private - invoke the IOleDocumentView::Open function for an external caller. "	" HRESULT __stdcall  Open(void) = 11 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor Open	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSaveViewState: this _: pstm	" Private - invoke the IOleDocumentView::SaveViewState function for an external caller. "	" HRESULT __stdcall  SaveViewState(LPSTREAM pstm) = 13 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pstm isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SaveViewState: ( "self interfaceAtAddress: "pstm "### type: IFoo ##" )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetInPlaceSite: this _: pIPSite	" Private - invoke the IOleDocumentView::SetInPlaceSite function for an external caller. "	" HRESULT __stdcall  SetInPlaceSite(IOleInPlaceSite * pIPSite) = 3 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	pIPSite isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetInPlaceSite: pIPSite  "### UNKNOWN TYPE ###"	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetRect: this _: prcView	" Private - invoke the IOleDocumentView::SetRect function for an external caller. "	" HRESULT __stdcall  SetRect(LPRECT prcView) = 6 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	prcView isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetRect: ( self structureAtAddress: prcView )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSetRectComplex: this _: prcView _: prcHScroll _: prcVScroll _: prcSizeBox	" Private - invoke the IOleDocumentView::SetRectComplex function for an external caller. "	" HRESULT __stdcall  SetRectComplex(LPRECT prcView, LPRECT prcHScroll, LPRECT prcVScroll, LPRECT prcSizeBox) = 8 ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^[  " terminate exception stack unwind at function invocation boundary "	"### optional - add checking for NULL argument pointers:	self reportExternalFunctionEntry.	prcView isNull ifTrue: [ ^E_INVALIDARG ].	prcHScroll isNull ifTrue: [ ^E_INVALIDARG ].	prcVScroll isNull ifTrue: [ ^E_INVALIDARG ].	prcSizeBox isNull ifTrue: [ ^E_INVALIDARG ].	###"	implementor SetRectComplex: ( self structureAtAddress: prcView ) _: ( self structureAtAddress: prcHScroll ) _: ( self structureAtAddress: prcVScroll ) _: ( self structureAtAddress: prcSizeBox )	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeShow: this _: fShow	" Private - invoke the IOleDocumentView::Show function for an external caller. "	" HRESULT __stdcall  Show(BOOL fShow) = 9 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor Show: fShow	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeUIActivate: this _: fUIActivate	" Private - invoke the IOleDocumentView::UIActivate function for an external caller. "	" HRESULT __stdcall  UIActivate(BOOL fUIActivate) = 10 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor UIActivate: fUIActivate	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>IOleDocumentViewImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleDocumentView.	self vtableSignatureTypeName: #__IOleDocumentViewVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleClientSiteImplementation</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">GetContainer: ppContainer	" Invoke the IOleClientSite::GetContainer function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetContainer: ppContainer		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">GetMoniker: dwAssign _: dwWhichMoniker _: resultReference	" Invoke the IOleClientSite::GetMoniker function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor GetMoniker: dwAssign _: dwWhichMoniker _: resultReference		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">OnShowWindow: fShow	" Invoke the IOleClientSite::OnShowWindow function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor OnShowWindow: fShow		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">RequestNewObjectLayout	" Invoke the IOleClientSite::RequestNewObjectLayout function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor RequestNewObjectLayout		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">SaveObject	" Invoke the IOleClientSite::SaveObject function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor SaveObject		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body><body package="ActiveX-Interfaces">ShowObject	" Invoke the IOleClientSite::ShowObject function. "	| hresult |	hresult := [  " terminate exception stack unwind at function invocation boundary "		implementor ShowObject		] on: self rootExceptions			do: ( self exceptionHandlerForHRESULTReturnValue: #internalCallin ).	self checkHresult: hresult.	^hresult</body></methods><methods><class-id>External.IOleClientSiteImplementation</class-id> <category>private-invocation</category><body package="ActiveX-Interfaces">invokeGetContainer: this _: ppContainer	" Private - invoke the IOleClientSite::GetContainer function for an external caller. "	" HRESULT __stdcall  GetContainer(IOleContainer * * ppContainer) = 5 "	| resultReference hresult |	^[  " terminate exception stack unwind at function invocation boundary "	self reportExternalFunctionEntry.	ppContainer isValid ifFalse: [ ^E_INVALIDARG ].	resultReference := nil asValueReference.	self clearResultBufferAtAddress: ppContainer.	hresult := implementor GetContainer: resultReference . "### UNKNOWN TYPE ###"	(HRESULT succeeded: hresult)		ifTrue: [ self interfaceResultAtAddress: ppContainer put: resultReference value ].		hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeGetMoniker: this _: dwAssign _: dwWhichMoniker _: ppmk	" Private - invoke the IOleClientSite::GetMoniker function for an external caller. "	" HRESULT __stdcall  GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker, IMoniker * * ppmk) = 4 "	^[  " terminate exception stack unwind at function invocation boundary "	| hresult resultReference |	self reportExternalFunctionEntry.	ppmk isValid ifFalse: [ ^E_INVALIDARG ].	self clearResultBufferAtAddress: ppmk.	resultReference := nil asValueReference.	hresult := implementor GetMoniker: dwAssign _: dwWhichMoniker _: resultReference.	( HRESULT succeeded: hresult )		ifTrue: [			self interfaceResultAtAddress: ppmk put: resultReference value.			].	hresult	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeOnShowWindow: this _: fShow	" Private - invoke the IOleClientSite::OnShowWindow function for an external caller. "	" HRESULT __stdcall  OnShowWindow(BOOL fShow) = 7 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor OnShowWindow: fShow	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeRequestNewObjectLayout: this	" Private - invoke the IOleClientSite::RequestNewObjectLayout function for an external caller. "	" HRESULT __stdcall  RequestNewObjectLayout(void) = 8 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor RequestNewObjectLayout	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeSaveObject: this	" Private - invoke the IOleClientSite::SaveObject function for an external caller. "	" HRESULT __stdcall  SaveObject(void) = 3 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor SaveObject	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body><body package="ActiveX-Interfaces">invokeShowObject: this	" Private - invoke the IOleClientSite::ShowObject function for an external caller. "	" HRESULT __stdcall  ShowObject(void) = 6 "	^[  " terminate exception stack unwind at function invocation boundary "	implementor ShowObject	] on: self rootExceptions		do: ( self exceptionHandlerForHRESULTReturnValue: #externalCallin )</body></methods><methods><class-id>External.IOleClientSiteImplementation class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	" IOleClientSiteImplementation ClassInitializer "	self iid: IID_IOleClientSite.	self vtableSignatureTypeName: #__IOleClientSiteVtbl.	self updateAndRegister</body></methods><methods><class-id>External.IOleInPlaceObjectPointer</class-id> <category>interface operations</category><body package="ActiveX-Interfaces">InPlaceDeactivate	" Invoke the IOleInPlaceObject::InPlaceDeactivate function. "	^self invokeInPlaceDeactivate</body><body package="ActiveX-Interfaces">ReactivateAndUndo	" Invoke the IOleInPlaceObject::ReactivateAndUndo function. "	^self invokeReactivateAndUndo</body><body package="ActiveX-Interfaces">SetObjectRects: lprcPosRect _: lprcClipRect	" Invoke the IOleInPlaceObject::SetObjectRects function. ""**** NOTE: Automatically generated method, requires manual review of argument marshalling logic ****"	^self invokeSetObjectRects: lprcPosRect asPointerParameter _: lprcClipRect asPointerParameter</body><body package="ActiveX-Interfaces">UIDeactivate	" Invoke the IOleInPlaceObject::UIDeactivate function. "	^self invokeUIDeactivate</body></methods><methods><class-id>External.IOleInPlaceObjectPointer class</class-id> <category>class initialization</category><body package="ActiveX-Interfaces">initialize	self iid: IID_IOleInPlaceObject.	self updateAndRegister</body></methods><methods><class-id>External.OLEAutomationDLL</class-id> <category>private-invocation-time</category><body package="ActiveX-Interfaces">extractColorValues: aValue	^ ColorValue 			red: 	(aValue bitAnd: 16rFF)			green: 	((aValue bitShift: -8) bitAnd: 16rFF)			blue: 	((aValue bitShift: -16) bitAnd: 16rFF)			range:  	255</body></methods><methods><class-id>External.OLEAutomationDLL</class-id> <category>API operations-storage</category><body package="ActiveX-Interfaces">oleTranslateColor: clr	"self new oleTranslateColor: 16r80000000"	| pcolorref result |	pcolorref := COLORREF gcCalloc.	result := self OleTranslateColor: clr _: nil _: pcolorref.	^result succeeded		ifTrue: [self extractColorValues: pcolorref contents]		ifFalse: [COMError hresult: result]</body></methods><methods><class-id>External.OLEAutomationDLL</class-id> <category>API operations-colors</category><body package="ActiveX-Interfaces">OleTranslateColor: clr _: hpal _: pcolorref	^(self invokeOleTranslateColor: clr _: hpal _: pcolorref) asHRESULT</body></methods><methods><class-id>External.OLEAutomationDLL</class-id> <category>API operations-storage</category><body package="ActiveX-Interfaces">simpleOleTranslateColor: clr	"self new oleTranslateColor: 16r80000000"	| pcolorref result |	pcolorref := COLORREF gcCalloc.	result := self OleTranslateColor: clr _: nil _: pcolorref.	^result succeeded		ifTrue: [pcolorref contents]		ifFalse: [COMError hresult: result]</body></methods><methods><class-id>External.OLEAutomationDLL</class-id> <category>types</category><body package="ActiveX-Interfaces">COLORREF	&lt;C: typedef DWORD COLORREF&gt;</body><body package="ActiveX-Interfaces">HPALETTE	&lt;C: typedef HANDLE HPALETTE&gt;</body><body package="ActiveX-Interfaces">OLE_COLOR	&lt;C: typedef DWORD OLE_COLOR&gt;</body></methods><methods><class-id>External.OLEAutomationDLL</class-id> <category>private-invocation-GUID services</category><body package="ActiveX-Interfaces">invokeOleTranslateColor: clr _: hpal _: pcolorref	&lt;C: HRESULT _stdcall OleTranslateColor ( 			OLE_COLOR clr,    			HPALETTE hpal, 			COLORREF *pcolorref  )&gt;</body></methods><initialize><class-id>External.IViewObjectImplementation</class-id></initialize><initialize><class-id>External.IOleControlSitePointer</class-id></initialize><initialize><class-id>External.IViewObject</class-id></initialize><initialize><class-id>External.IOleWindowImplementation</class-id></initialize><initialize><class-id>IOleInPlaceSiteImplementation</class-id></initialize><initialize><class-id>IOleInPlaceSiteExImplementation</class-id></initialize><initialize><class-id>External.IOleWindow</class-id></initialize><initialize><class-id>External.IOleWindowPointer</class-id></initialize><initialize><class-id>External.IOleInPlaceActiveObjectPointer</class-id></initialize><initialize><class-id>External.IOleClientSitePointer</class-id></initialize><initialize><class-id>External.IPropertyNotifySinkPointer</class-id></initialize><initialize><class-id>External.IViewObjectPointer</class-id></initialize><initialize><class-id>IOleInPlaceSitePointer</class-id></initialize><initialize><class-id>IOleInPlaceSiteExPointer</class-id></initialize><initialize><class-id>External.IOleInPlaceSiteWindowlessPointer</class-id></initialize><initialize><class-id>External.IOleInPlaceActiveObjectImplementation</class-id></initialize><initialize><class-id>External.IOleDocumentSitePointer</class-id></initialize><initialize><class-id>External.IOleDocumentSite</class-id></initialize><initialize><class-id>External.IViewObject2</class-id></initialize><initialize><class-id>External.IOleInPlaceObject</class-id></initialize><initialize><class-id>External.IOleControlSite</class-id></initialize><initialize><class-id>IOleDocumentViewPointer</class-id></initialize><initialize><class-id>IOleInPlaceSite</class-id></initialize><initialize><class-id>External.IOleInPlaceSiteEx</class-id></initialize><initialize><class-id>External.IOleControl</class-id></initialize><initialize><class-id>External.IOleInPlaceUIWindowImplementation</class-id></initialize><initialize><class-id>External.IOleInPlaceFrameImplementation</class-id></initialize><initialize><class-id>External.IOleObject</class-id></initialize><initialize><class-id>External.IOleControlSiteImplementation</class-id></initialize><initialize><class-id>External.IOleDocumentSiteImplementation</class-id></initialize><initialize><class-id>External.IOleControlPointer</class-id></initialize><initialize><class-id>External.IOleInPlaceSiteWindowlessImplementation</class-id></initialize><initialize><class-id>External.IPropertyNotifySink</class-id></initialize><initialize><class-id>IOleDocumentView</class-id></initialize><initialize><class-id>External.IOleInPlaceUIWindowPointer</class-id></initialize><initialize><class-id>External.IOleObjectImplementation</class-id></initialize><initialize><class-id>External.IOleInPlaceUIWindow</class-id></initialize><initialize><class-id>External.IOleInPlaceFrame</class-id></initialize><initialize><class-id>External.IOleContainer</class-id></initialize><initialize><class-id>External.IViewObject2Pointer</class-id></initialize><initialize><class-id>External.IViewObject2Implementation</class-id></initialize><initialize><class-id>External.IOleControlImplementation</class-id></initialize><initialize><class-id>External.IPropertyNotifySinkImplementation</class-id></initialize><initialize><class-id>External.IOleInPlaceSiteWindowless</class-id></initialize><initialize><class-id>External.IOleClientSite</class-id></initialize><initialize><class-id>External.IOleContainerImplementation</class-id></initialize><initialize><class-id>External.IOleContainerPointer</class-id></initialize><initialize><class-id>External.IOleInPlaceFramePointer</class-id></initialize><initialize><class-id>External.IOleObjectPointer</class-id></initialize><initialize><class-id>External.IOleInPlaceActiveObject</class-id></initialize><initialize><class-id>IOleDocumentViewImplementation</class-id></initialize><initialize><class-id>External.IOleClientSiteImplementation</class-id></initialize><initialize><class-id>External.IOleInPlaceObjectPointer</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>OLEAutomationDLL</name><environment>External</environment><super>External.COMDynamicLinkLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.CConstants.*			External.COMConstants.*			External.COMStatusCodeConstants.*			private External.OLEAutomationDLLDictionary.*			</imports><category>COM-Automation-Host Bindings</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>oleaut32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>Com- Automation</package></attributes></class><class><name>IUnknown</name><environment>External</environment><super>External.COMInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Interfaces</category><attributes><package>Com- Ole</package></attributes></class><class><name>IParseDisplayName</name><environment>External</environment><super>External.IUnknown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			</imports><category>COM-Interfaces</category><attributes><package>Com- Ole</package></attributes></class><class><name>IUnknownImplementation</name><environment>External</environment><super>External.COMInterfaceImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>referenceCount </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Host Bindings</category><attributes><package>Com- Ole</package></attributes></class><class><name>IUnknownPointer</name><environment>External</environment><super>External.COMInterfacePointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Host Bindings</category><attributes><package>Com- Ole</package></attributes></class><class><name>IParseDisplayNameImplementation</name><environment>External</environment><super>External.IUnknownImplementation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Host Bindings</category><attributes><package>Com- Ole</package></attributes></class><class><name>IParseDisplayNamePointer</name><environment>External</environment><super>External.IUnknownPointer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMConstants.*			External.COMStatusCodeConstants.*			</imports><category>COM-Host Bindings</category><attributes><package>Com- Ole</package></attributes></class></st-source>