<?xml version="1.0"?><st-source><!-- Name: Com- ToolsNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.BundleName: Com- ToolsBundleStructure: a Store.BundleForParcelComment: This is the automation browser bundle, which contains several packages with extensions to the automation system itself, a special inspector extension for dispatch drivers and an automation browser.DevelopmentPrerequisites: #(#(#any 'Com- Automation' '') #(#any 'Com- Automation Pools' '') #(#any 'Com- Ole' '') #(#any 'Com- Win32' '') #(#any 'Com- ExtensionsToBase' '') #(#any 'Com- System Configuration Services' ''))DialectVersion: VisualWorks 7.9Parcel: nilParcelName: Com- ToolsPrerequisiteDescriptions: #(#(#name 'Com- Automation' #componentType #package) #(#name 'Com- Automation Pools' #componentType #package) #(#name 'Com- Ole' #componentType #package) #(#name 'Com- Win32' #componentType #package) #(#name 'Com- ExtensionsToBase' #componentType #package) #(#name 'Com- System Configuration Services' #componentType #package))PrerequisiteParcels: #(#('Com- Automation' '') #('Com- Automation Pools' '') #('Com- Ole' '') #('Com- Win32' '') #('Com- ExtensionsToBase' '') #('Com- System Configuration Services' '') #('Com- Automation' '') #('Com- Automation Pools' '') #('Com- Ole' '') #('Com- Win32' '') #('Com- System Configuration Services' '') #('Browser-BaseUI' '') #('Browser-Environments' '') #('Tools-Trippy' '') #('Com- ExtensionsToBase' '') #('Browser-BrowserUI' '') #('Tools-IDE-ListIcons' ''))Version: 8.3 - 2Post-Load Block: 	[:package | ]Date: 1:50:07 PM April 12, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.1) of 7. April 2017 on 12. April 2017 at 13:50:07</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AutomationElementReference</name><environment>External</environment><super>External.AutomationOwnedReference</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Com- Automation</category><attributes><package>Com- Automation Shared Extensions</package></attributes></class><comment><class-id>External.AutomationElementReference</class-id><body>An AutomationElementReference is a reference to an element, which may be a parameter of a method or, e.g. an element of a structure.</body></comment><class><name>DispMemberElement</name><environment>External</environment><super>Tools.Trippy.KeyedElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Tools.Trippy.*			</imports><category>Tools-Trippy</category><attributes><package>Com- Automation Trippy Extensions</package></attributes></class><comment><class-id>External.DispMemberElement</class-id><body>DispMemberElement is used by the DispMemberInspector to display DispatchSpecificationTable members.</body></comment><class><name>DispSpecEmphasisPolicy</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation Shared Extensions</package></attributes></class><comment><class-id>External.DispSpecEmphasisPolicy</class-id><body>DispSpecEmphasisPolicy is a class which stores text attributes for emphasizing textual representations of Automation things like methods, properties, structures etc.</body></comment><class><name>ProtocolFilter</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.ProtocolFilter</class-id><body>ProtocolFilter is a block with a key. It is used in the AutomationBrowser in the List of Filters.Instance Variables	block	&lt;BlockClosure&gt;	a block which is executed to determine whether a value will pass the test	key	&lt;Symbol | UserMessage&gt;	The key which is used for comparison but also for displaying the filter in a list.</body></comment><class><name>AutomationSelectorProtocolNavigatorPart</name><environment>External</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationSelectorProtocolNavigatorPart</class-id><body>AutomationSelectorProtocolNavigatorPart is a navigator part used by the navigator usuall to browse protocol/selector tuples. It usually has a protocol and a selector part.</body></comment><class><name>AutomationCoclassSelectorProtocolNavigatorPart</name><environment>External</environment><super>External.AutomationSelectorProtocolNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showMethods showProperties showEvents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart</class-id><body>AutomationCoclassSelectorProtocolNavigatorPart is a Protocol selector navigator part with the ability of selecting whether or not a specific kind of member should be displayed.</body></comment><class><name>AutomationTypeLibNavigatorPart</name><environment>External</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationTypeLibNavigatorPart</class-id><body>AutomationTypeLibNavigatorPart is a navigator part used to browse type libraries</body></comment><class><name>ParameterAssignmentDialog</name><environment>External</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parameterDescriptions paramList parameterAssignments memberName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation Trippy Extensions</package></attributes></class><comment><class-id>External.ParameterAssignmentDialog</class-id><body>ParameterAssignmentDialog is a dialog used to assign values to parameters of a method.Instance Variables:	memberName	&lt;Object&gt;									name of the member to call	parameterAssignments	&lt;Object&gt;							parameterAssignments (value + description)	parameterDescriptions	&lt;(Collection of: DispParamSpec)&gt;	parameterDescriptions	paramList	&lt;SelectionInList&gt;								the actual param list</body></comment><class><name>AutomationNavigatorState</name><environment>External</environment><super>Refactory.Browser.NavigatorState</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeLib libraryElement automationProtocols automationMember flags </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Shared Extensions</package></attributes></class><comment><class-id>External.AutomationNavigatorState</class-id><body>AutomationNavigatorState is a specific state class used in the AutomationBrowser.Instance Variables:	automationMember	&lt;AutomationOwnedReference&gt;	maybe a method/property description, but also al enum 									constant or structure element wrapped in an owned Reference	automationProtocols	 &lt;Collection&gt; an automation specific protocol used to avoid showing the "Source code tool in the browser"	libraryElement		&lt;Object&gt;	maybe a coclass/interface/dispatch description, an enumeration									or some other type	typeLib				&lt;Object&gt;	a type library description</body></comment><class><name>AutomationCodeTool</name><environment>External</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>helpProvider updateProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BrowserUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationCodeTool</class-id><body>AutomationCodeTool is a codetool used by the AutomationNavigator.Instance Variables:	helpProvider		&lt;HelpProvider&gt;		the help provider used to display help file entries for specific elements</body></comment><class><name>AutomationClassCreationDialog</name><environment>Tools</environment><super>Tools.ClassCreationDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>createSpecificationTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation Browser</package></attributes></class><class><name>AutomationNameSpaceItemTabNavigatorPart</name><environment>External</environment><super>Refactory.Browser.TabNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showMethods showProperties showEvents coclassProtocols protocolClass </inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationNameSpaceItemTabNavigatorPart</class-id><body>AutomationNameSpaceItemTabNavigatorPart is a navigator part specific to the Automation Browser</body></comment><class><name>DispMemberInspector</name><environment>External</environment><super>Tools.Trippy.DictionaryInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>helpProvider filterValue path </inst-vars><class-inst-vars></class-inst-vars><imports>			Tools.Trippy.*			</imports><category>Tools-Trippy</category><attributes><package>Com- Automation Trippy Extensions</package></attributes></class><comment><class-id>External.DispMemberInspector</class-id><body>DispMemberInspector provides an Inspector tab which displays definitions of methods and properties. It allow sending of Automation methods and propertie accessor and dialog-driven parameter specification.Instance Variables:	filterValue	&lt;ValueModel&gt;		Used for filtering displayed methods/properties	helpProvider	&lt;HelpProvider&gt;	used for displaying help information for items if possible.	path			&lt;String&gt;			contains the path from the start element to the current (when diving)</body></comment><class><name>AutomationMemberReference</name><environment>External</environment><super>External.AutomationOwnedReference</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Com- Automation</category><attributes><package>Com- Automation Shared Extensions</package></attributes></class><comment><class-id>External.AutomationMemberReference</class-id><body>This class is used to store automation method reference results. Since method specifications do not store the coclass or interface they appear in, this class is used to save this relationship.</body></comment><class><name>ExtDerivedAttribute</name><environment>External</environment><super>Tools.Trippy.DerivedAttribute</super><private>false</private><indexed-type>none</indexed-type><inst-vars>setValueBlock textBlock displayIconBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Com- Automation Trippy Extensions</package></attributes></class><comment><class-id>External.ExtDerivedAttribute</class-id><body>ExtDerivedAttribute has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	setValueBlock	&lt;BlockClosure&gt;	the block used for setting the value	textBlock	&lt;BlockClosure&gt;	the block used for computing the display text</body></comment><class><name>AutomationExplainer</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationExplainer</class-id><body>AutomationExplainer is an explainer specific to Automation.</body></comment><class><name>AutomationCodeComponentTabNavigatorPart</name><environment>External</environment><super>Refactory.Browser.CodeComponentTabNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationCodeComponentTabNavigatorPart</class-id><body>This component is specific to the AutomationBrowserInstance Variables:	automationTypesNavigatorPart	&lt;NavigatorPart&gt;	the navigator part used to navigate through automation types	automationTypelibsNavigatorPart	&lt;NavigatorPart&gt;	the navigator part used to navigate through automation typelibs</body></comment><class><name>HelpProvider</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>openHelp </inst-vars><class-inst-vars></class-inst-vars><imports>			Tools.HtmlHelpInterfaceDictionary.*			</imports><category>HtmlHelp</category><attributes><package>Com- Automation Shared Extensions</package></attributes></class><comment><class-id>Tools.HelpProvider</class-id><body>This class provides simple Help displaying abilities</body></comment><class><name>DispatchCollectionInspector</name><environment>External</environment><super>Tools.Trippy.SequenceInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Com- Automation Trippy Extensions</package></attributes></class><comment><class-id>External.DispatchCollectionInspector</class-id><body>This is an inspector for Dispatch Drivers which represent a collection.</body></comment><class><name>AutomationTypeNavigatorPart</name><environment>External</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showHidden fullList showOther showClassesAndInterfaces </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationTypeNavigatorPart</class-id><body>AutomationTypeNavigatorPart is a navigator part used to browse the types described by a typelibraryInstance Variables:	fullList						&lt;Collection&gt;		a cache for the unfiltered element list of the typelibrary	showClassesAndInterfaces	&lt;ValueHolder&gt;		describes whether classes and interfaces should be shown	showHidden					&lt;ValueHolder&gt;		reflects whether hidden elements should be displayed	showOther					&lt;ValueHolder&gt;		reflects whether no-class/itf elements should be shown</body></comment><class><name>AutomationSelectorNavigatorPart</name><environment>External</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationSelectorNavigatorPart</class-id><body>AutomationSelectorNavigatorPart is a navigator part used to browse methods/properties and type elements</body></comment><class><name>AutomationReferenceEnvironment</name><environment>External</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>references </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Com- Automation Shared Extensions</package></attributes></class><comment><class-id>External.AutomationReferenceEnvironment</class-id><body>AutomationReferenceEnvironment is an automation specific browser environment used to browse references  to automation types.Instance Variables:	references	&lt;Collection&gt;	a list of found references to other elements</body></comment><class><name>DispCollectionElement</name><environment>External</environment><super>Tools.Trippy.KeyedElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Com- Automation Trippy Extensions</package></attributes></class><comment><class-id>External.DispCollectionElement</class-id><body></body></comment><class><name>AutomationReferenceNavigatorPart</name><environment>External</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationReferenceNavigatorPart</class-id><body>AutomationReferenceNavigatorPart is an automation specific browser navigator part used to browse references  to automation types.</body></comment><class><name>AutomationNavigator</name><environment>External</environment><super>Refactory.Browser.BrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BrowserUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.AutomationNavigator</class-id><body>AutomationNavigator is a navigator class used by the automation browser.</body></comment><class><name>AutomationBrowserEnvironment</name><environment>External</environment><super>Refactory.Browser.BrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BaseUI</category><attributes><package>Com- Automation Shared Extensions</package></attributes></class><comment><class-id>External.AutomationBrowserEnvironment</class-id><body>AutomationBrowserEnvironment is a browserenvironment specific to the AutomationBrowser</body></comment><class><name>DispParamConfiguration</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>param value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation Trippy Extensions</package></attributes></class><comment><class-id>External.DispParamConfiguration</class-id><body>DispParamConfiguration is an assignment of a value to a parameterInstance Variables:	param	&lt;DispParamSpec&gt;	the parameter the value should be assigned to	value	&lt;Object&gt;			the assigned value</body></comment><class><name>SearchMatch</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value quality </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BrowserUI</category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>External.SearchMatch</class-id><body>SearchResult has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables	quality	&lt;Integer&gt;		describes the quality of the match - 1 ist best.	value	&lt;Object&gt;		The value of the match</body></comment><class><name>EventNotification</name><environment>Core</environment><super>Core.Notification</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation Browser</package></attributes></class><comment><class-id>Core.EventNotification</class-id><body>EventNotification is a notification which is raised to inform the caller about some event or to directly pass some sort of information to it.</body></comment><methods><class-id>External.AutomationElementReference</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">memberReference: anObject	self container: anObject</body><body package="Com- Automation Shared Extensions">param	^ self element</body><body package="Com- Automation Shared Extensions">param: anObject	self element: anObject</body></methods><methods><class-id>External.AutomationElementReference</class-id> <category>testing</category><body package="Com- Automation Shared Extensions">isConstant	^ element isConstant</body><body package="Com- Automation Shared Extensions">isMethodOrPropertySpecification	^ false</body><body package="Com- Automation Shared Extensions">isMethodSpecification	^ false</body><body package="Com- Automation Shared Extensions">isPropertySpecification	^ false</body><body package="Com- Automation Shared Extensions">showInNavigatorWithFlags: flags	"All elementes (struct, enum elements) are always displayed in the browser"	^ true</body></methods><methods><class-id>External.AutomationElementReference</class-id> <category>As yet unclassified</category><body package="Com- Automation Browser">needsDeferredCodeToolUpdate		^ element needsDeferredCodeToolUpdate</body></methods><methods><class-id>External.AutomationElementReference class</class-id> <category>instance creation</category><body package="Com- Automation Shared Extensions">element: aParam memberReference: aMethodReference	^ self new 		param: aParam;		memberReference: aMethodReference;		yourself</body></methods><methods><class-id>External.DispMemberElement</class-id> <category>testing</category><body package="Com- Automation Trippy Extensions">isProtected	"Protected parts are parts assignment to which, even if physically possible	(as reported by #isReadOnly) is potentially dangerous and should be done 	with extreme caution, after explicitly warning the user."	^true</body></methods><methods><class-id>External.DispMemberElement</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">displayIcon	^[ self value browserIcon]		on: Error		do: [:ex | ToolListIcons inaccessibleToolIcon]</body><body package="Com- Automation Trippy Extensions">displayString	^Inspector safeDisplayStringOf: key name</body><body package="Com- Automation Trippy Extensions">text	"return the text that is displayed for this element"	^[self value completeDocumentation] on: Error		do: [:ex | Inspector safePrintStringOf: object]</body><body package="Com- Automation Trippy Extensions">value	"get the specification table entry at my key"	^ key</body><body package="Com- Automation Trippy Extensions">value: anObject	"change a specification table entry"	^object specificationTable at: key put: anObject</body></methods><methods><class-id>External.DispMemberElement</class-id> <category>As yet unclassified</category><body package="Com- Automation Trippy Extensions">member	^ AutomationMemberReference member: key implementor: object type</body><body package="Com- Automation Trippy Extensions">simplifiedGetCode	^ key simplifiedGetCodeParams: #()</body></methods><methods><class-id>External.DispMemberElement</class-id> <category>printing</category><body package="Com- Automation Trippy Extensions">printOn: aStream	super printOn: aStream.	aStream nextPutAll: '(', key name,')'</body></methods><methods><class-id>External.DispSpecEmphasisPolicy</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">commentEmphasis	"return the emphasis used for displaying comments"	^ (self rbCodeHighlightingEmphasisFor: #code_comment) ifNil: [ Array with: #italic		with: #color-&gt;ColorValue darkGreen ]</body></methods><methods><class-id>External.DispSpecEmphasisPolicy</class-id> <category>emphasizing</category><body package="Com- Automation Shared Extensions">emphasizeComment: aString	^ Text string: aString emphasis: self commentEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeError: aString	^ Text string: aString emphasis: self errorEmpahsis</body><body package="Com- Automation Shared Extensions">emphasizeHeadline: aString	^ Text string: aString emphasis: self privateHeadlineEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeNumberLiteral: aString	"emphasize a numeric literal contained in &lt;aString&gt;"	^ Text string: aString emphasis: self stNumberEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeParenthesis: aString	"style a parenthesis"	^ Text string: aString emphasis: #()</body><body package="Com- Automation Shared Extensions">emphasizeSelector: aString	"return a text styled like a Selector"	^ Text string: aString emphasis: self stSelectorEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeStClass: aString	"emphasize an ST class"	^ Text string: aString emphasis: self stClassEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeStParam: aString	"emphasize an ST parameter"	^ Text string: aString emphasis: self stParamEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeStString: aString	"return a text styled like a string"	^ Text string: aString emphasis: self stStringEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeStSymbol: aString	"return a text styled like a symbol"	^ Text string: aString emphasis: self stSymbolEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeStTempVar: aString	"emphasize an ST parameter"	^ Text string: aString emphasis: self stTempVarEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeSymbol: aString	"return a text styled like a symbol"	^ Text string: aString emphasis: self stSymbolEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeVBType: aString	"emphasize a VB type"	^ Text string: aString emphasis: self vbTypeEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeVbConstantName: aString	"emphasize a VB parameter"	^ Text string: aString emphasis: self vbParamNameEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeVbFuncName: aString	"style a vb function name"	^ Text string: aString emphasis: self vbFuncTypeEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeVbKeyword: aString	"emphasize a VB keyword"	^ Text string: aString emphasis: self vbKeywordEmphasis</body><body package="Com- Automation Shared Extensions">emphasizeVbParamName: aString	"emphasize a VB parameter"	^ Text string: aString emphasis: self vbParamNameEmphasis</body></methods><methods><class-id>External.DispSpecEmphasisPolicy</class-id> <category>other emphasis</category><body package="Com- Automation Shared Extensions">errorEmpahsis	"emphasis used for errors"	^ Array with: #bold with: (#color-&gt;ColorValue red).</body></methods><methods><class-id>External.DispSpecEmphasisPolicy</class-id> <category>private</category><body package="Com- Automation Shared Extensions">privateHeadlineEmphasis	^ #(#underline).</body><body package="Com- Automation Shared Extensions">privateStLiteralEmphasis	"return the internal ST literal emphasis, used if RB is not loaded"	^ Array with: #color-&gt;ColorValue magenta</body><body package="Com- Automation Shared Extensions">privateStTempVarEmphasis	^ Array with: #color-&gt;ColorValue darkMagenta</body><body package="Com- Automation Shared Extensions">rbCodeHighlightingEmphasisFor: aSymbol	"return the emphasis used by RB codeHighlighting after checking it exists.	 Otherwise return nil."	^ (Store.Registry packageNamed: 'RBCodeHighlighting') 		ifNil: [ nil ]		ifNotNil: [ aSymbol ]</body></methods><methods><class-id>External.DispSpecEmphasisPolicy</class-id> <category>st emphasis</category><body package="Com- Automation Shared Extensions">stClassEmphasis	"return the emphasis used to display classes"	^ (self rbCodeHighlightingEmphasisFor: #code_classReference) 		ifNil: [ Array with: #color-&gt;ColorValue purple ]</body><body package="Com- Automation Shared Extensions">stNumberEmphasis	"return the emphasis used to display numbers"	^ (self rbCodeHighlightingEmphasisFor: #code_string) 		ifNil: [ self privateStLiteralEmphasis]</body><body package="Com- Automation Shared Extensions">stParamEmphasis	"return the emphasis used to display parameters"	^(self rbCodeHighlightingEmphasisFor: #code_blockArgument) 		ifNil: [Array with: #bold with: #color -&gt; ColorValue darkMagenta]</body><body package="Com- Automation Shared Extensions">stSelectorEmphasis	"return the emphasis used for selectors"	^(self rbCodeHighlightingEmphasisFor: #code_messageSend) 		ifNil: [Array with: #italic with: #color -&gt; ColorValue black]</body><body package="Com- Automation Shared Extensions">stStringEmphasis	"return the emphasis used to display literal strings"	^ (self rbCodeHighlightingEmphasisFor: #code_string) 		ifNil: [ self privateStLiteralEmphasis]</body><body package="Com- Automation Shared Extensions">stSymbolEmphasis	"return the emphasis used for symbols"		^(self rbCodeHighlightingEmphasisFor: #code_symbol) 		ifNil: [self privateStLiteralEmphasis]</body><body package="Com- Automation Shared Extensions">stTempVarEmphasis	"return the emphasis used to display numbers"	^ (self rbCodeHighlightingEmphasisFor: #code_temporaryVariable) 		ifNil: [ self privateStTempVarEmphasis]</body></methods><methods><class-id>External.DispSpecEmphasisPolicy</class-id> <category>vb emphasis</category><body package="Com- Automation Shared Extensions">vbFuncNameEmphasis	"return the emphasis used to mark vb function types"	^ self vbMethodNameEmphasis</body><body package="Com- Automation Shared Extensions">vbFuncTypeEmphasis	"return the emphasis used to mark vb function types, 	 e.g. 'Sub', 'Function' or 'Property' "	^ self stSelectorEmphasis</body><body package="Com- Automation Shared Extensions">vbKeywordEmphasis	"return the emphasis used for VB keywords"	^ self stSelectorEmphasis</body><body package="Com- Automation Shared Extensions">vbMethodNameEmphasis	"return the emphasis used for vb method names"	^  (self rbCodeHighlightingEmphasisFor: #code_keywordMethodName) ifNil: [Array with: #bold		with: #color-&gt;ColorValue blue ]</body><body package="Com- Automation Shared Extensions">vbParamNameEmphasis	"return the emphasis used to mark vb function types"	^ self stParamEmphasis</body><body package="Com- Automation Shared Extensions">vbTypeEmphasis	"return th emphasis used for VB types"	^ self stClassEmphasis</body></methods><methods><class-id>External.DispSpecEmphasisPolicy class</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">default	^ self new</body></methods><methods><class-id>External.ProtocolFilter</class-id> <category>accessing</category><body package="Com- Automation Browser">block	^block</body><body package="Com- Automation Browser">block: anObject	block := anObject</body><body package="Com- Automation Browser">key	^key</body><body package="Com- Automation Browser">key: anObject	key := anObject</body></methods><methods><class-id>External.ProtocolFilter</class-id> <category>comparing</category><body package="Com- Automation Browser">= aProtocolFilter	^ self class = aProtocolFilter class and: [ self key = aProtocolFilter key ]</body></methods><methods><class-id>External.ProtocolFilter class</class-id> <category>instance creation</category><body package="Com- Automation Browser">key: aKey block: aBlock	^ self new		key: aKey;		block: aBlock;		yourself</body></methods><methods><class-id>External.AutomationSelectorProtocolNavigatorPart</class-id> <category>menus</category><body package="Com- Automation Browser">defaultMenu	^ Menu new</body></methods><methods><class-id>External.AutomationSelectorProtocolNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">displayTextFor: anObject 	^anObject key asString</body><body package="Com- Automation Browser">protocolListForElement: aType	^ aType ifNil: [ #() ] ifNotNil: [ aType protocolFilters ]</body><body package="Com- Automation Browser">sortBlock	"Return a sort block that defines a total order on our elements."	^[:a :b | a key asString &lt; b key asString]</body></methods><methods><class-id>External.AutomationSelectorProtocolNavigatorPart</class-id> <category>accessing-navigator</category><body package="Com- Automation Browser">fillInState: aNavigatorState	aNavigatorState automationProtocols: self selections.</body></methods><methods><class-id>External.AutomationSelectorProtocolNavigatorPart</class-id> <category>updating widgets</category><body package="Com- Automation Browser">selectState: aNavigatorState	self updateListWith: (self protocolListForElement: aNavigatorState libraryElement).	self objectList selections: aNavigatorState automationProtocols</body><body package="Com- Automation Browser">updateWithState: aNavigatorState	| initialSelections |	initialSelections := self selections.	self updateListWith: (self protocolListForElement: aNavigatorState libraryElement).	self objectList selections: initialSelections.	aNavigatorState automationProtocols: self selections.</body></methods><methods><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart</class-id> <category>accessing-navigator</category><body package="Com- Automation Browser">displayFlags	| flags |	flags := IdentitySet new.	self showMethods value ifTrue: [ flags add: #showMethods ].	self showEvents value ifTrue: [ flags add: #showEvents ].	self showProperties value ifTrue: [ flags add: #showProperties ].	^ flags</body><body package="Com- Automation Browser">fillInState: aNavigatorState	super fillInState: aNavigatorState.	self fillCheckBoxesInto: aNavigatorState.</body></methods><methods><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">fillCheckBoxesInto: aNavigatorState		aNavigatorState showMethods: self showMethods value.	aNavigatorState showProperties: self showProperties value. 	aNavigatorState showEvents: self showEvents value.</body><body package="Com- Automation Browser">protocolListForElement: aCoclass	^ aCoclass ifNil: [ #() ] ifNotNil: [ aCoclass protocolFiltersFor: self ]</body><body package="Com- Automation Browser">updateCheckBoxesFrom: aNavigatorState	self showMethods value: (aNavigatorState showMethods).	self showProperties value: (aNavigatorState showProperties).	self showEvents value: (aNavigatorState showEvents).</body></methods><methods><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart</class-id> <category>icons</category><body package="Com- Automation Browser">eventIcon	^ ListIconLibrary visualFor: #lightning</body><body package="Com- Automation Browser">methodIcon	^ ListIconLibrary visualFor: #automationFunction</body><body package="Com- Automation Browser">propertyIcon	^ ListIconLibrary visualFor: #automationEnum</body></methods><methods><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart</class-id> <category>events</category><body package="Com- Automation Browser">showEventsChanged		self someCheckboxChanged</body><body package="Com- Automation Browser">showMethodsChanged		self someCheckboxChanged</body><body package="Com- Automation Browser">showPropertiesChanged		self someCheckboxChanged</body><body package="Com- Automation Browser">someCheckboxChanged		| state |	state := navigator getState.	self fillCheckBoxesInto: state.	self updateWithState: state.	self changed</body></methods><methods><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart</class-id> <category>updating widgets</category><body package="Com- Automation Browser">selectState: aNavigatorState	self updateCheckBoxesFrom: aNavigatorState.	super selectState: aNavigatorState.</body></methods><methods><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart</class-id> <category>aspects</category><body package="Com- Automation Browser">showEvents	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^showEvents isNil		ifTrue:			[showEvents := true asValue]		ifFalse:			[showEvents]</body><body package="Com- Automation Browser">showMethods	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^showMethods isNil		ifTrue:			[showMethods := true asValue]		ifFalse:			[showMethods]</body><body package="Com- Automation Browser">showProperties	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^showProperties isNil		ifTrue:			[showProperties := true asValue]		ifFalse:			[showProperties]</body></methods><methods><class-id>External.AutomationTypeLibNavigatorPart</class-id> <category>menus</category><body package="Com- Automation Browser">defaultMenu	^ self class basicMenu</body></methods><methods><class-id>External.AutomationTypeLibNavigatorPart</class-id> <category>accessing-navigator</category><body package="Com- Automation Browser">fillInState: aNavigatorState	aNavigatorState typeLib: self selection.</body></methods><methods><class-id>External.AutomationTypeLibNavigatorPart</class-id> <category>updating widgets</category><body package="Com- Automation Browser">selectState: aNavigatorState 	self list isEmpty ifTrue: [		self updateListWith: COMRegistryInterface extTypeLibraryIDMap ].	aNavigatorState typeLib ifNotNil: [:typeLib |		self objectList selections: (Array with: typeLib) ].</body><body package="Com- Automation Browser">updateWithState: aNavigatorState</body></methods><methods><class-id>External.AutomationTypeLibNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">sortBlock	"Return a sort block that defines a total order on our elements."	^[:a :b | a printString &lt; b printString]</body></methods><methods><class-id>External.ParameterAssignmentDialog</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">actualParameters	| value |	^ self paramList list collect: [:each |			value := each value.			(each param isByref and: [ each isValueReference not])				ifTrue: [ value asValueReference ]				ifFalse: [ value ]]</body><body package="Com- Automation Trippy Extensions">memberName	^ memberName</body><body package="Com- Automation Trippy Extensions">memberName: aString	memberName := aString.</body><body package="Com- Automation Trippy Extensions">parameterDescriptions: anObject	parameterDescriptions := anObject</body><body package="Com- Automation Trippy Extensions">parametersDescriptions	^parameterDescriptions</body></methods><methods><class-id>External.ParameterAssignmentDialog</class-id> <category>actions</category><body package="Com- Automation Trippy Extensions">addParam	"add a parameter"	self setParamList: (self parameterAssignments copyFrom: 1 to: self paramList list size +1).</body><body package="Com- Automation Trippy Extensions">maxParams	"set the maximal number of parameters"	self setParamList: self parameterAssignments.</body><body package="Com- Automation Trippy Extensions">minParams	"Set the minimal number of parameters"	self setParamList: (self parameterAssignments select: [:param | param isOptional not]).</body><body package="Com- Automation Trippy Extensions">removeParam	"remove a parameter"	self setParamList: (self parameterAssignments copyFrom: 1 to: self paramList list size - 1).</body><body package="Com- Automation Trippy Extensions">selectDirForListEntry	| filename |	filename := Dialog requestDirectoryName: (#SelectDirectory &lt;&lt; #dialogs &gt;&gt; 'Please select directory').	self selectedRow value value: filename.</body><body package="Com- Automation Trippy Extensions">selectFileForListEntry	| filename |	filename := Dialog requestFileName: '*.*'.	self selectedRow value value: filename.</body></methods><methods><class-id>External.ParameterAssignmentDialog</class-id> <category>events</category><body package="Com- Automation Trippy Extensions">checkValue: controller	^ [ Compiler evaluate: controller editValue. true ] on: Error do: [:ex | ex return: false ]</body><body package="Com- Automation Trippy Extensions">labelFor: aSymbol	aSymbol = #windowTitle		ifTrue: [ ^ (#ParametersFor1s &lt;&lt; #com &gt;&gt; 'Parameters for &lt;1s&gt;') expandMacrosWith: self memberName ].	^ super labelFor: aSymbol</body><body package="Com- Automation Trippy Extensions">valueChanged	self paramList selection ifNotNil: [:assignment |		assignment value ].</body></methods><methods><class-id>External.ParameterAssignmentDialog</class-id> <category>menus</category><body package="Com- Automation Trippy Extensions">listFieldInputMenu	^(Menu new)		addItem: ((MenuItem labeled: #SelectFile &lt;&lt; #menus &gt;&gt; 'Select file')					nameKey: #selectFileForListEntry;					value: [self selectFileForListEntry];					enabled: [self selectionMayContainFile]);		addItem: ((MenuItem labeled: #SelectDirectory &lt;&lt; #menus &gt;&gt; 'Select directory')					nameKey: #selectDirForListEntry;					value: [self selectDirForListEntry];					enabled: [self selectionMayContainDir]);		yourself</body></methods><methods><class-id>External.ParameterAssignmentDialog</class-id> <category>private</category><body package="Com- Automation Trippy Extensions">parameterAssignments	^parameterAssignments ifNil: 			[parameterAssignments := self parametersDescriptions 						collect: [:param | param asAssignmentValue: nil]]</body><body package="Com- Automation Trippy Extensions">selectionMayContainDir	^ self selectionMayContainFile</body><body package="Com- Automation Trippy Extensions">selectionMayContainFile	^ self selectedRow value ifNil: [ false ]		ifNotNil: [:paramAssignment |  			paramAssignment param isString or: [paramAssignment param isVariant ]]</body><body package="Com- Automation Trippy Extensions">setParamList: aList		| oldSelectionIndex |	oldSelectionIndex := self paramList selectionIndex.	paramList listHolder value: aList.	(self widgetAt: #removeParameter) isEnabled: 		(aList size &gt;0 and: [aList last isOptional]).	(self widgetAt: #addParameter) isEnabled: (aList size &lt; self parameterAssignments size).	oldSelectionIndex &lt;= aList size ifTrue: [		paramList selectionIndex: oldSelectionIndex ].</body></methods><methods><class-id>External.ParameterAssignmentDialog</class-id> <category>aspects</category><body package="Com- Automation Trippy Extensions">paramList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^paramList isNil		ifTrue:			[paramList := SelectionInList new.			self setParamList: self parameterAssignments.			paramList]		ifFalse:			[paramList]</body><body package="Com- Automation Trippy Extensions">selectedRow	^ self paramList selectionHolder</body></methods><methods><class-id>External.ParameterAssignmentDialog class</class-id> <category>labels</category><body package="Com- Automation Trippy Extensions">labelFor: aSymbol	^ self perform: aSymbol</body><body package="Com- Automation Trippy Extensions">maxParamsHelp	^ 'Press this button to pass all parameters, mandatory as well as optional ones.'</body><body package="Com- Automation Trippy Extensions">minParamsHelp	^ 'Press this button to set the the parameter list to the minimal possible,removing all optional parameters and leaving only mandatory ones.'</body><body package="Com- Automation Trippy Extensions">paramListHelpText	^ 'This is the list of parameters passed to the function.Please Use the +/-/min/max buttons on the bottom to add/remove optional parameters'</body></methods><methods><class-id>External.ParameterAssignmentDialog class</class-id> <category>interface opening</category><body package="Com- Automation Trippy Extensions">requestActualParams: params memberName: aString	| instance |	instance := self new.	instance 		parameterDescriptions: params;		memberName: aString.	self openOn: instance.	instance accept value == true ifFalse: [^nil].	^instance actualParameters</body></methods><methods><class-id>External.AutomationNavigatorState</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">automationMember	"return the selected automation member, a function/property of a coclass or interface,	 a constant of an enumeration etc."	^automationMember</body><body package="Com- Automation Shared Extensions">automationMember: anObject	automationMember := anObject</body><body package="Com- Automation Shared Extensions">automationProtocols	^automationProtocols ifNil: [ #() ]</body><body package="Com- Automation Shared Extensions">automationProtocols: anObject	automationProtocols := anObject</body><body package="Com- Automation Shared Extensions">flags	^flags ifNil: [ flags := IdentitySet new ]</body><body package="Com- Automation Shared Extensions">libraryElement	"return the library element, which may be a coclass, an interface, an enumeration etc"	^libraryElement</body><body package="Com- Automation Shared Extensions">libraryElement: anObject 	libraryElement := anObject.</body><body package="Com- Automation Shared Extensions">showEvents	^ self getFlag: #showEvents</body><body package="Com- Automation Shared Extensions">showEvents: aBoolean	self setFlag: #showEvents to: aBoolean.</body><body package="Com- Automation Shared Extensions">showMethods	^ self getFlag: #showMethods</body><body package="Com- Automation Shared Extensions">showMethods: aBoolean	self setFlag: #showMethods to: aBoolean.</body><body package="Com- Automation Shared Extensions">showProperties	^ self getFlag: #showProperties</body><body package="Com- Automation Shared Extensions">showProperties: aBoolean	self setFlag: #showProperties to: aBoolean.</body><body package="Com- Automation Shared Extensions">typeLib	^typeLib</body><body package="Com- Automation Shared Extensions">typeLib: anObject 	typeLib := anObject.</body></methods><methods><class-id>External.AutomationNavigatorState</class-id> <category>testing</category><body package="Com- Automation Shared Extensions">hasSelection	^(self typeLib isNil 		and: [self libraryElement isNil and: [self automationMember isNil]]) not 		or: [super hasSelection]</body><body package="Com- Automation Shared Extensions">isAutomationState	^ true</body></methods><methods><class-id>External.AutomationNavigatorState</class-id> <category>private</category><body package="Com- Automation Shared Extensions">getFlag: aFlag	^ self flags includes: aFlag</body><body package="Com- Automation Shared Extensions">setDefaultFlags	self showMethods: true.	self showEvents: true.	self showProperties: true.</body><body package="Com- Automation Shared Extensions">setFlag: aFlag to: aBoolean	aBoolean		ifTrue: [  self flags add: aFlag ]		ifFalse: [ self flags remove: aFlag ifAbsent: []]</body></methods><methods><class-id>External.AutomationNavigatorState</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">printOn: aStream		(self automationMember notNil and: [self libraryElement notNil])		ifTrue:			[^aStream				nextPutAll:					self automationMember typeName , ' ' , self libraryElement fullName , '.'						, automationMember name].	self libraryElement notNil		ifTrue:			[^aStream				nextPutAll:					self libraryElement kindname , ' ' , self libraryElement fullName].	self typeLib notNil		ifTrue:			[^aStream				nextPutAll: 'TypeLibrary ';				print: self typeLib].	super printOn: aStream</body></methods><methods><class-id>External.AutomationNavigatorState</class-id> <category>comparing</category><body package="Com- Automation Shared Extensions">= anObject		^ anObject class = self class and: [ 		super = anObject and: [ 			automationMember	= anObject automationMember and: [			libraryElement = anObject libraryElement and: [			typeLib	= anObject typeLib ]]]]</body></methods><methods><class-id>External.AutomationNavigatorState</class-id> <category>initialize-release</category><body package="Com- Automation Shared Extensions">initialize	super initialize.	self setDefaultFlags.</body></methods><methods><class-id>External.AutomationCodeTool</class-id> <category>accepting</category><body package="Com- Automation Browser">accept: aText from: aController</body><body package="Com- Automation Browser">explain: fullText from: aController 	AutomationExplainer 		explain: aController selection string		class: codeModel state libraryElement		member: codeModel state automationMember		text: self textController text		for: self</body></methods><methods><class-id>External.AutomationCodeTool</class-id> <category>accessing</category><body package="Com- Automation Browser">helpButtonTitle	^ (#Help &lt;&lt; #com &gt;&gt; 'Help') asString</body><body package="Com- Automation Browser">helpProvider	^ helpProvider ifNil: [ helpProvider := HelpProvider new ]</body><body package="Com- Automation Browser">labelFor: aSymbol	aSymbol = #helpButtonTitle		ifTrue: [ ^ (#Help &lt;&lt; #com &gt;&gt; 'Help') asString ].	^ nil</body><body package="Com- Automation Browser">model	^ codeModel automationElement</body><body package="Com- Automation Browser">typeLib	^ codeModel typeLib</body></methods><methods><class-id>External.AutomationCodeTool</class-id> <category>tab APIs</category><body package="Com- Automation Browser">isActive	^ codeModel state isAutomationState</body></methods><methods><class-id>External.AutomationCodeTool</class-id> <category>actions</category><body package="Com- Automation Browser">openHelp	"This stub method was generated by UIDefiner"	| typeLibDescription typeDescription memberDescription |	typeLibDescription := codeModel state typeLib.	typeDescription := codeModel state libraryElement.	memberDescription := codeModel state automationMember.	memberDescription ifNotNil: 			[^memberDescription 				openHelpClass: typeDescription				typeLib: typeLibDescription				in: self helpProvider].	typeDescription ifNotNil: 			[^typeDescription openHelpTypeLib: typeLibDescription				in: self helpProvider].	typeLibDescription 		ifNotNil: [^typeLibDescription openHelpIn: self helpProvider]</body></methods><methods><class-id>External.AutomationCodeTool</class-id> <category>interface opening</category><body package="Com- Automation Browser">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(self widgetAt: #textEditor)		controller doNotHandleLocally: #explain</body></methods><methods><class-id>External.AutomationCodeTool</class-id> <category>updating</category><body package="Com- Automation Browser">deferredUpdateDisplayWith: aBlockClosure	| delayedBlock |	(updateProcess notNil and: [updateProcess isTerminated not])		ifTrue: [updateProcess terminate].	aBlockClosure		ifNil: 			[updateProcess := nil.			^self].	delayedBlock :=			[(Delay forMilliseconds: 500) wait.			aBlockClosure value].	updateProcess := delayedBlock forkAt: Processor activeProcess priority - 1</body><body package="Com- Automation Browser">updateContents	| element |	element := codeModel automationElement.	element ifNil: [^self text: '' asText].	element needsDeferredCodeToolUpdate		ifTrue: 			[self text: element immediateCompleteDocumentation.			self deferredUpdateDisplayWith: 					[self environment class						comToolsaveDo: [self text: element completeDocumentation]]]		ifFalse: 			[self text: element completeDocumentation.			self deferredUpdateDisplayWith: nil]</body></methods><methods><class-id>Tools.AutomationClassCreationDialog</class-id> <category>initialize-release</category><body package="Com- Automation Browser">initialize	super initialize.	superclassModule := EntryWithPasteButtonModule forAutomationClasses</body></methods><methods><class-id>Tools.AutomationClassCreationDialog</class-id> <category>aspects</category><body package="Com- Automation Browser">createSpecificationTable	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^createSpecificationTable isNil		ifTrue:			[createSpecificationTable := false asValue]		ifFalse:			[createSpecificationTable]</body></methods><methods><class-id>Tools.AutomationClassCreationDialog</class-id> <category>As yet unclassified</category><body package="Com- Automation Browser">className: aString	self nameHolder value: aString</body></methods><methods><class-id>External.AutomationNameSpaceItemTabNavigatorPart</class-id> <category>accessing</category><body package="Com- Automation Browser">isCoClass: aNavigatorState	^ aNavigatorState libraryElement 		ifNil: [ true ]		ifNotNil: [:type | type isCoclass ]</body><body package="Com- Automation Browser">isNotCoClass: aNavigatorState	^ (self isCoClass: aNavigatorState) not</body><body package="Com- Automation Browser">protocols	| protocols |	protocols := self componentNamed: #protocols.	protocols isNil 		ifTrue: 			[protocols := protocolClass new.			navigator notNil ifTrue: [protocols navigator: navigator].			self componentNamed: #protocols put: protocols].	^protocols</body><body package="Com- Automation Browser">selectors	| selectors |	selectors := self componentNamed: #selectors.	selectors isNil 		ifTrue: 			[selectors := AutomationSelectorNavigatorPart new.			navigator notNil ifTrue: [selectors navigator: navigator].			self componentNamed: #selectors put: selectors].	^selectors</body></methods><methods><class-id>External.AutomationNameSpaceItemTabNavigatorPart</class-id> <category>aspects</category><body package="Com- Automation Browser">showEvents	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^ self protocols showEvents</body><body package="Com- Automation Browser">showMethods	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^self protocols showMethods</body><body package="Com- Automation Browser">showProperties	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^ self protocols showProperties</body></methods><methods><class-id>External.AutomationNameSpaceItemTabNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">buildAutomationInstanceSubcanvas	| subcanvases |	subcanvases := self components.	protocolClass := Refactory.Browser.AutomationSelectorProtocolNavigatorPart.	(subcanvases size = 1 		and: [subcanvases first class = SelectorNavigatorPart]) 			ifFalse: [self installSubcanvas: #selectorWindowSpec using: self]</body><body package="Com- Automation Browser">buildCoclassAutomationInstanceSubcanvas	| subcanvases |	subcanvases := self components.	protocolClass := Refactory.Browser.AutomationCoclassSelectorProtocolNavigatorPart.	(subcanvases size = 1 		and: [subcanvases first class = SelectorNavigatorPart]) 			ifFalse: [self installSubcanvas: #coclassSelectorWindowSpec using: self]</body><body package="Com- Automation Browser">eventIcon	^ ListIconLibrary visualFor: #lightning</body><body package="Com- Automation Browser">methodIcon	^ ListIconLibrary visualFor: #automationFunction</body><body package="Com- Automation Browser">propertyIcon	^ ListIconLibrary visualFor: #automationEnum</body></methods><methods><class-id>External.AutomationNameSpaceItemTabNavigatorPart class</class-id> <category>accessing</category><body package="Com- Automation Browser">defaultTabDescriptions	| descriptions |	descriptions := OrderedCollection new.	descriptions add: (TabPartDescription 					named: #Instance &lt;&lt; #labels &gt;&gt; 'Instance'					buildWith: #buildCoclassAutomationInstanceSubcanvas					match: #isCoClass:					enabled: #isCoClass:).	descriptions add: (TabPartDescription 					named: #Instance2 &lt;&lt; #labels &gt;&gt; 'Instance2'					buildWith: #buildAutomationInstanceSubcanvas					match: #isNotCoClass:					enabled: #isNotCoClass:).	^descriptions</body></methods><methods><class-id>External.AutomationNameSpaceItemTabNavigatorPart class</class-id> <category>tab descriptions</category><body package="Com- Automation Browser">tabDescriptions	^self defaultTabDescriptions</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>testing</category><body package="Com- Automation Trippy Extensions">canRemoveParts	"don't allow removing specification table entries"	^false</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>private</category><body package="Com- Automation Trippy Extensions">checkProtectionOf: partCollection ifCancelled: aBlock	self notSupported: #OverwritingElements &lt;&lt; #com &gt;&gt; 'Overwriting elements'.	^aBlock value</body><body package="Com- Automation Trippy Extensions">createInsertionUndo: partCollection before: anIndex	" insertion not supported"	^ self</body><body package="Com- Automation Trippy Extensions">diveInto: anObject		self container diveInto: 			(ExtDerivedAttribute 				label: ((#x1sCSent2s &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt;: sent &lt;2s&gt;')					expandMacrosWith: Time now printString					with: self selection value name)				getBlock: [ anObject ]				setBlock: [:newValue |]				textBlock: [ self selection simplifiedGetCode ]				)</body><body package="Com- Automation Trippy Extensions">getPath	^ container isNil 		ifTrue: [ nil ]		ifFalse: [ (self getPathFrom: container visit) asValue ]</body><body package="Com- Automation Trippy Extensions">getPathFrom: aVisit		^aVisit isNil		ifTrue: ['']		ifFalse: [ aVisit pathText]</body><body package="Com- Automation Trippy Extensions">getPropertyAndDo: aBlock	| property params |	property := self selection value.	property getSpecification hasParameters 		ifFalse: [ ^ aBlock value: (self object getProperty: property name) ].	params := ParameterAssignmentDialog 				requestActualParams: property getSpecification parameters				memberName: property name.	params ifNil: [^self].	^ aBlock value: (self object getProperty: property name withArguments: params)</body><body package="Com- Automation Trippy Extensions">helpProvider	^ helpProvider ifNil: [ helpProvider := HelpProvider new ].</body><body package="Com- Automation Trippy Extensions">notSupported: aUserMessage	| aString |	aString := aUserMessage asString copy.	aString notEmpty ifTrue: [ aString at: 1 put: (aString first asUppercase) ].	Dialog warn: ((#NotSupported1s &lt;&lt; #com &gt;&gt; '&lt;1s&gt; is not supported') expandMacrosWith: aString).</body><body package="Com- Automation Trippy Extensions">openHelpOn: aDispSpec 	| descriptions helpFilename helpContextId typeInfo |	object isValid 		ifFalse: 			[^Dialog warn: object comClientInvalidMessage asString , ' ' 						, (#UnableToOpenHelp &lt;&lt; #com &gt;&gt; 'Unable to open help') asString].	 typeInfo := object getTypeInfo .	descriptions := typeInfo getDocumentation: aDispSpec memberID.	helpFilename := descriptions at: 'helpFile'.	helpContextId := descriptions at: 'helpContextID'.	(helpFilename isNil or: [helpContextId isNil]) 		ifTrue: 			[Dialog 				warn: (#NoHelpAvailable &lt;&lt; #com 						&gt;&gt; 'No help available') asString.			^self].	self helpProvider 		displayForFile: helpFilename		context: helpContextId		lcid: object specificationTable lcid		ifFail: [Dialog warn: (#CouldNotOpenHelp &lt;&lt; #com) &gt;&gt; 'Could not open help']</body><body package="Com- Automation Trippy Extensions">performDefaultActionWithResultDo: aBlock 	| aDispatchMemberSpec |	aDispatchMemberSpec := self selection value.	aDispatchMemberSpec isMethodSpecification 		ifTrue: [^self sendItAndDo: [:result | aBlock value: result]].	aDispatchMemberSpec isPropertySpecification 		ifTrue: 			[aDispatchMemberSpec isWriteOnly 				ifTrue: [^self setPropertyAndDo: [:result | aBlock value: result]]				ifFalse: [^self getPropertyAndDo: [:result | aBlock value: result]]]</body><body package="Com- Automation Trippy Extensions">refresh	"Keys in a dictionary are unordered, but for presentation arrange them	in the increasing order of their displayStrings. Do not use #collect: to collect	pairs, because #collect: coalesces equal elements, which we need to avoid."	| pairs |	pairs := self collection associations collect: [:each | (Inspector safeDisplayStringOf: each key) -&gt; each value].	pairs := pairs asSortedCollection: [:a :b | a key &lt;= b key].	linearizedParts := pairs collect: [:each | DispMemberElement of: self object at: each value].	self superRefresh</body><body package="Com- Automation Trippy Extensions">selectionIsMethod	^ self selection ifNil: [ false ] ifNotNil: [:selection | selection value isMethodSpecification ]</body><body package="Com- Automation Trippy Extensions">selectionIsProperty	^ self selection ifNil: [ false ] ifNotNil: [:selection | selection value isPropertySpecification ]</body><body package="Com- Automation Trippy Extensions">sendItAndDo: aBlock	| method params result |	method := self selection value.	method hasParameters 		ifFalse: 			[(self object getMethod: method name) inspect.			^self].	params := ParameterAssignmentDialog requestActualParams: method parameters				memberName: method name.	params ifNil: [^self].	result := (self object getMethod: method name withArguments: params).	^ aBlock value: result.</body><body package="Com- Automation Trippy Extensions">setPropertyAndDo: aBlock	| property params |	property := self selection value.	params := ParameterAssignmentDialog				requestActualParams: property anyWriteSpecification parameters				memberName: property name.	params ifNil: [^self].	^aBlock		value: (self object setProperty: property name withArguments: params)</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>interface closing</category><body package="Com- Automation Trippy Extensions">closeAndUnschedule	self helpProvider release.	super closeAndUnschedule</body><body package="Com- Automation Trippy Extensions">noticeOfWindowClose: aWindow 	"The ApplicationWindow aWindow is in the process of closing. 	You have been notified."	self helpProvider release.	super noticeOfWindowClose: aWindow</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>actions</category><body package="Com- Automation Trippy Extensions">browseClass	"Open a browser on the inspector object."	self selectedObjectOrInspectedObject browseMemberOfClass: object type</body><body package="Com- Automation Trippy Extensions">dive	^self performDefaultActionWithResultDo: [:result | self diveInto: result]</body><body package="Com- Automation Trippy Extensions">filterChanged	self refresh.</body><body package="Com- Automation Trippy Extensions">getPropertyAndInspect		^ self getPropertyAndDo: [:result | result inspect ]</body><body package="Com- Automation Trippy Extensions">help	"This stub method was generated by UIDefiner"	self hasSingleSelection ifTrue: [		self openHelpOn: self selection value ]</body><body package="Com- Automation Trippy Extensions">pasteIntoSelf: partCollection	"we don't allow overwriting specification table entries"	self notSupported: #OverwritingElements &lt;&lt; #com &gt;&gt; 'Overwriting elements'.</body><body package="Com- Automation Trippy Extensions">sendIt		^ self sendItAndDo: [:result | result inspect ].</body><body package="Com- Automation Trippy Extensions">sendItAndDive	self sendItAndDo: [:result | self diveInto: result ].</body><body package="Com- Automation Trippy Extensions">setPropertyAndInspect	^ self setPropertyAndDo: [:result | result inspect ]</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>aspects</category><body package="Com- Automation Trippy Extensions">filterValue	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^filterValue isNil		ifTrue:			[filterValue := String new asValue]		ifFalse:			[filterValue]</body><body package="Com- Automation Trippy Extensions">path	^ path ifNil: [ path := self getPath ].</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>initialize-release</category><body package="Com- Automation Trippy Extensions">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	((aBuilder componentAt: #filterField) widget controller)		continuousAccept: true</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>menu management</category><body package="Com- Automation Trippy Extensions">addAddAndRemoveItemsTo: aMenu	"Add appropriate things to the Edit dropdown menu	of the shell inspector menu bar. "	super addAddAndRemoveItemsTo: aMenu.	(aMenu atNameKey: #spawn) ifNotNil: [:item | aMenu removeItem: item ].	(aMenu atNameKey: #dive) ifNotNil: [: item | aMenu removeItem: item ].	aMenu		addItem: ((MenuItem labeled: (#Sen_dIt &lt;&lt; #menus &gt;&gt; 'Sen&amp;d It'))			nameKey: #sendIt;			value: [self sendIt];			enabled: [ self selectionIsMethod]);		addItem: ((MenuItem labeled: (#SendItAndDive &lt;&lt; #menus &gt;&gt; '&amp;SendIt &amp;&amp; Dive'))			nameKey: #sendItAndDive;			value: [self sendItAndDive];			enabled: [ self selectionIsMethod]);		addItem: ((MenuItem labeled: (#GetProperty &lt;&lt; #menus &gt;&gt; 'Get Property'))			nameKey: #getPropertyAndInspect;			value: [self getPropertyAndInspect];			enabled: [ self selectionIsProperty and: [self selection value isWriteOnly not]]);		addItem: ((MenuItem labeled: (#SetProperty &lt;&lt; #menus &gt;&gt; 'Set Property'))			nameKey: #setPropertyAndInspect;			value: [self setPropertyAndInspect];			enabled: [ self selectionIsProperty and: [self selection value isReadOnly not]]).</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>properties</category><body package="Com- Automation Trippy Extensions">isSegmented	^ false</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">collection	| string array events dict |	string := '*',self filterValue value ,'*'. 	dict := Dictionary new.	self object specificationTable specificationTable values do: [:each |		dict at: each name put: each ].	array := (dict values			select: [:each | string match: each name ]) collect: [:each | each name -&gt; each ].			object eventSink ifNotNil: [:sink |			events := sink specificationTable specificationTable associations select: [:each |  string match: each value name ].			events := events collect: [:each | each value name ,' (Event)' -&gt; (COMDispatchEventSpecification forMethodSpec: each value) ].			array addAll:  events].	^ Dictionary withAll: array.</body></methods><methods><class-id>External.DispMemberInspector</class-id> <category>printing</category><body package="Com- Automation Trippy Extensions">explain: aText for: aModel	| element aString member |	aString := aText asString.	element := self selection.	member := element member.	^ AutomationExplainer explain: aString class: member implementor member: member text: nil for: self.</body></methods><methods><class-id>External.DispMemberInspector class</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">tabLabel	^(#_DispatchMemberDesc &lt;&lt; #dialogs &gt;&gt; '&amp;Autom. Member Desc.')</body></methods><methods><class-id>External.AutomationMemberReference</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">completeDocumentation	^self methodSpec completeDocumentation "WithTypeInfo: self implementor asTypeInfo"</body><body package="Com- Automation Shared Extensions">fullName	^ self implementor fullName, '.', self methodSpec name,'()'</body><body package="Com- Automation Shared Extensions">fullNameWithKind	^ self methodSpec typeName,' ', self implementor fullName, '.', self methodSpec name,'()'</body><body package="Com- Automation Shared Extensions">implementor	^ self container</body><body package="Com- Automation Shared Extensions">implementor: anObject	self container: anObject</body><body package="Com- Automation Shared Extensions">interface	^ element interface</body><body package="Com- Automation Shared Extensions">member	^ self</body><body package="Com- Automation Shared Extensions">methodSpec	^ self element</body><body package="Com- Automation Shared Extensions">methodSpec: anObject	self element: anObject</body><body package="Com- Automation Shared Extensions">type	"return the type this reference belongs to"	^ self implementor</body></methods><methods><class-id>External.AutomationMemberReference</class-id> <category>testing</category><body package="Com- Automation Shared Extensions">isConstant	^ false</body><body package="Com- Automation Shared Extensions">isEventSpecification	^ self methodSpec isEventSpecification</body><body package="Com- Automation Shared Extensions">isMethodOrPropertySpecification	"return whether I describe a function or property"	^ true</body><body package="Com- Automation Shared Extensions">isMethodSpecification	^ self methodSpec isMethodSpecification</body><body package="Com- Automation Shared Extensions">isPropertySpecification	^ self methodSpec isPropertySpecification</body><body package="Com- Automation Shared Extensions">isReadOnly	^ self methodSpec isReadOnly</body><body package="Com- Automation Shared Extensions">isTypeSpecification	"return whether I describe a type which is false as I specify a member (method/property) of a type"	^ false</body><body package="Com- Automation Shared Extensions">isWriteOnly	^ self methodSpec isWriteOnly</body><body package="Com- Automation Browser">showInNavigatorWithFlags: flags	^ container showMember: element inBrowserWithFlags: flags</body></methods><methods><class-id>External.AutomationMemberReference</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">printOn: aStream	aStream nextPutAll: self methodSpec typeName,' ',self implementor fullName, '.', self methodSpec name,'()'</body></methods><methods><class-id>External.AutomationMemberReference</class-id> <category>enumerating</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	^ self methodSpec referencedTypesDo: aBlock</body></methods><methods><class-id>External.AutomationMemberReference</class-id> <category>As yet unclassified</category><body package="Com- Automation Browser">needsDeferredCodeToolUpdate	^ element needsDeferredCodeToolUpdate</body></methods><methods><class-id>External.AutomationMemberReference class</class-id> <category>instance creation</category><body package="Com- Automation Shared Extensions">member: aMethodSpec implementor: aTypeSpec	^ self new		methodSpec: aMethodSpec;		implementor: aTypeSpec;		yourself</body></methods><methods><class-id>External.ExtDerivedAttribute</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">displayIcon		^ displayIconBlock ifNil: [ super displayIcon ] 		ifNotNil: [ displayIconBlock on: Error		do: [:ex | ToolListIcons inaccessibleToolIcon]]</body><body package="Com- Automation Trippy Extensions">displayIconBlock	^displayIconBlock</body><body package="Com- Automation Trippy Extensions">displayIconBlock: anObject	displayIconBlock := anObject</body><body package="Com- Automation Trippy Extensions">setValueBlock	"return the block used to set my value"	^setValueBlock</body><body package="Com- Automation Trippy Extensions">setValueBlock: anObject	"set the block used to set my value. The block must have one argument"	setValueBlock := anObject</body><body package="Com- Automation Trippy Extensions">text	"return my text"	^ textBlock value</body><body package="Com- Automation Trippy Extensions">textBlock	"return the block used to retrieve my text"	^textBlock</body><body package="Com- Automation Trippy Extensions">textBlock: anObject	"set the block used to retrieve my text"	textBlock := anObject</body><body package="Com- Automation Trippy Extensions">value: aValue	"set my value"	setValueBlock value: aValue.</body></methods><methods><class-id>External.ExtDerivedAttribute</class-id> <category>testing</category><body package="Com- Automation Trippy Extensions">isReadOnly	"answer whether this attribute may be overwritten"	^ setValueBlock isNil</body></methods><methods><class-id>External.ExtDerivedAttribute class</class-id> <category>instance creation</category><body package="Com- Automation Trippy Extensions">label: aString getBlock: aBlock setBlock: block2 textBlock: aTextBlock	^(self label: aString valueBlock: aBlock)		setValueBlock: block2;		textBlock: aTextBlock;		yourself</body><body package="Com- Automation Trippy Extensions">label: aString getBlock: aBlock setBlock: block2 textBlock: aTextBlock iconBlock: iconBlock	^ (self label: aString getBlock: aBlock setBlock: block2 textBlock: aTextBlock)			displayIconBlock: iconBlock;			yourself</body></methods><methods><class-id>External.AutomationExplainer</class-id> <category>explaining</category><body package="Com- Automation Browser">explainMemberString: aString member: automationMember requestor: aRequestor		| result elements |	elements := automationMember elementsNamed: aString.	elements isEmpty		ifTrue:			[^Dialog warn: #SorryCantExplain &lt;&lt; #dialogs &gt;&gt; 'Sorry, can''t explain'].	result := self openDialogForElements: elements shownMember: automationMember.	result ifNil: [^self].	self dispatchExplain: result</body><body package="Com- Automation Browser">explainTypeString: aString type: aType requestor: aRequestor		| elements result |	elements := aType elementsNamed: aString.	elements isEmpty		ifTrue:			[^Dialog warn: #SorryCantExplain &lt;&lt; #dialogs &gt;&gt; 'Sorry, can''t explain'].	result := self openDialogForElements: elements shownMember: aType.	result ifNil: [^self].	self dispatchExplain: result</body></methods><methods><class-id>External.AutomationExplainer</class-id> <category>private</category><body package="Com- Automation Browser">addUIElements: elements to: dialog shownElement: anObject		| resultHolder aState |	resultHolder := nil asValue.	elements		do:			[:element | 			dialog				addMessage: element explanation				centered: false.			element = anObject ifFalse: [				aState := element createBrowserState.				aState				ifNotNil:					[dialog						addGap: 8;						addLabels: #('Browse')							values: (Array with: aState)							default: aState							storeInto: resultHolder							takeKeyboard: false							equalize: false]].			dialog				addGap: 8;				addDivider].	^resultHolder</body><body package="Com- Automation Browser">dispatchExplain: aState	Refactory.Browser.RefactoringBrowser		openOnEnvironment: Refactory.Browser.AutomationBrowserEnvironment new		withSelection: aState</body><body package="Com- Automation Browser">openDialogForElements: elements shownMember: anObject		| resultHolder dialog spec |	dialog := SimpleDialog new.	spec := dialog class interfaceSpecFor: #emptySpec.	dialog builder add: spec window.	dialog builder add: spec component.	dialog setInitialGap.	resultHolder := self addUIElements: elements to: dialog shownElement: anObject.	dialog		addGap: 8;		addLabels: #('Ok') values: #(nil) default: nil storeInto: resultHolder			takeKeyboard: false equalize: false;		addGap: 8.	dialog preOpen.	dialog builder		openDialogWithExtent: dialog builder window displayBox extent.	^resultHolder value</body></methods><methods><class-id>External.AutomationExplainer class</class-id> <category>explaining</category><body package="Com- Automation Browser">explain: aString class: automationClass member: automationMember text: text for: aRequestor 	| instance |	instance := self new.	automationMember ifNotNil: 			[^instance 				explainMemberString: aString				member: automationMember				requestor: aRequestor].	automationClass ifNotNil: 			[^instance 				explainTypeString: aString				type: automationClass				requestor: aRequestor]</body></methods><methods><class-id>External.AutomationCodeComponentTabNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">buildAutomationCategorySubcanvas	| state |	state := navigator state.	self installSubcanvas: #typeLibraryCoClassesWindowSpec using: self.	self selectStateForComponents: state</body></methods><methods><class-id>External.AutomationCodeComponentTabNavigatorPart</class-id> <category>testing</category><body package="Com- Automation Browser">isAutomation: aState	^ true</body></methods><methods><class-id>External.AutomationCodeComponentTabNavigatorPart</class-id> <category>accessing</category><body package="Com- Automation Browser">automationTypelibsNavigatorPart	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	| automationTypelibsNavigatorPart |	automationTypelibsNavigatorPart := self componentNamed: #automationTypelibsNavigatorPart.	automationTypelibsNavigatorPart isNil 		ifTrue: 			[automationTypelibsNavigatorPart := Refactory.Browser.AutomationTypeLibNavigatorPart new.			navigator notNil ifTrue: [automationTypelibsNavigatorPart navigator: navigator].			self componentNamed: #automationTypelibsNavigatorPart put: automationTypelibsNavigatorPart].	^automationTypelibsNavigatorPart</body><body package="Com- Automation Browser">automationTypesNavigatorPart	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	| automationTypesNavigatorPart |	automationTypesNavigatorPart := self componentNamed: #automationTypesNavigatorPart.	automationTypesNavigatorPart isNil 		ifTrue: 			[automationTypesNavigatorPart := Refactory.Browser.AutomationTypeNavigatorPart new.			navigator notNil ifTrue: [automationTypesNavigatorPart navigator: navigator].			self componentNamed: #automationTypesNavigatorPart put: automationTypesNavigatorPart].	^automationTypesNavigatorPart</body></methods><methods><class-id>External.AutomationCodeComponentTabNavigatorPart class</class-id> <category>accessing</category><body package="Com- Automation Browser">defaultTabDescriptions	| descriptions |	"We don't want other Navigator tools in the Automation browser"	descriptions := OrderedCollection new.	descriptions add: (TabPartDescription  					named: #Automation &lt;&lt; #labels &gt;&gt; 'Automation'					buildWith: #buildAutomationCategorySubcanvas					match: #alwaysEnabled:					enabled: #isAutomation:).	^descriptions</body></methods><methods><class-id>External.AutomationCodeComponentTabNavigatorPart class</class-id> <category>tab descriptions</category><body package="Com- Automation Browser">tabDescriptions	^self  defaultTabDescriptions</body></methods><methods><class-id>Tools.HelpProvider</class-id> <category>opening help</category><body package="Com- Automation Shared Extensions">displayForFile: file context: context lcid: anLCID ifFail: aBlock 	"Display a help for the given file and HelpContextID. Close previously opened help instances.	 If multiple versions of the file exist,	 use the one with the given LCID. If an error occurs return the given block's value "	| aFile |	file ifNil: [ ^ aBlock value ].	aFile := (self findFile: file lcid: anLCID) ifNil: [^aBlock value].	self privateCloseHelpIfNeeded.	self 		privateDisplayForFile: aFile asString		context: context		ifFail: aBlock</body></methods><methods><class-id>Tools.HelpProvider</class-id> <category>private</category><body package="Com- Automation Shared Extensions">findFile: file lcid: anLCID 	"try to find the file if it is not where specified"	| fn baseDir subDirs tail |	fn := file asFilename.	fn definitelyExists ifTrue: [^fn].	tail := fn tail.	baseDir := fn directory.	baseDir definitelyExists ifFalse: [ ^ nil ].	subDirs := baseDir directoryContents 				select: [:aString | ((baseDir construct: aString) construct: tail) definitelyExists].	subDirs isEmpty ifTrue: [^nil].	^(baseDir construct: ((Array with: anLCID) , self preferredLCIDs 				detect: [:preferredID | subDirs includes: preferredID]				ifNone: [subDirs first])) 		construct: tail</body><body package="Com- Automation Shared Extensions">openHtmlHelp: aFile using: systemSupport context: context 	"	| originalDir |	originalDir := Filename currentDirectory asAbsoluteFilename.		Filename setCurrentDirectory: aFile asFilename directory."	^ self 		setOpenHelp: (systemSupport openHtmlHelpFile: aFile context: context)."	] ensure: [ Filename setCurrentDirectory: originalDir ]"</body><body package="Com- Automation Shared Extensions">preferredLCIDs	^ Array with: Win32ExternalInterface lcidEnglish</body><body package="Com- Automation Shared Extensions">privateCloseHelpIfNeeded	openHelp ifNil: [^self].	openHelp isValid ifFalse: [		openHelp := nil.		^ self ].	OSSystemSupport concreteClass TerminateProcess: openHelp.	openHelp := nil</body><body package="Com- Automation Shared Extensions">privateDisplayForFile: aFile context: context ifFail: aBlock 	"Display a help for the given file and HelpContextID"	| systemSupport extension |	systemSupport := OSSystemSupport concreteClass.	extension := aFile asFilename extension asUppercase.	extension = '.CHM' 		ifTrue: 			[^self 				openHtmlHelp: aFile				using: systemSupport				context: context].	extension = '.HLP' 		ifTrue: 			[^self setOpenHelp: (systemSupport openWinHelpFile: aFile context: context)].	^aBlock value</body><body package="Com- Automation Shared Extensions">setOpenHelp: aProcess 	openHelp := aProcess</body></methods><methods><class-id>Tools.HelpProvider</class-id> <category>initialize-release</category><body package="Com- Automation Shared Extensions">invalidate	openHelp := nil.</body><body package="Com- Automation Shared Extensions">release	self privateCloseHelpIfNeeded.	openHelp := nil.	^ super release</body></methods><methods><class-id>Tools.HelpProvider class</class-id> <category>private</category><body package="Com- Automation Shared Extensions">invalidateAllHelpProviders	self allInstances do: [:anInstance | anInstance invalidate ].</body><body package="Com- Automation Shared Extensions">releaseAllHelpProviders	self allInstances do: [:anInstance | anInstance release ].</body><body package="Com- Automation Shared Extensions">setUp	self invalidateAllHelpProviders.</body><body package="Com- Automation Shared Extensions">tearDown	self releaseAllHelpProviders.</body></methods><methods><class-id>Tools.HelpProvider class</class-id> <category>initialize-release</category><body package="Com- Automation Shared Extensions">obsolete	COMSystem current removeAllActionsWithReceiver: self.	^ super obsolete.</body></methods><methods><class-id>Tools.HelpProvider class</class-id> <category>class initialization</category><body package="Com- Automation Shared Extensions">initialize	(COMSystem current)		when: #setUp send: #setUp to: self;		when: #tearDown send: #tearDown to: self</body></methods><methods><class-id>External.DispatchCollectionInspector</class-id> <category>testing</category><body package="Com- Automation Trippy Extensions">canAddPart	^ self object specificationTable includesKey: 'Add'.</body><body package="Com- Automation Trippy Extensions">canRemoveParts	^ self object specificationTable includesKey: 'Remove'</body><body package="Com- Automation Trippy Extensions">isInsertableBefore: aPartOrNil	"Don't allow inserts"	^ false</body></methods><methods><class-id>External.DispatchCollectionInspector</class-id> <category>initialize-release</category><body package="Com- Automation Trippy Extensions">initialize: anObject	^ super initialize: anObject accessor</body><body package="Com- Automation Trippy Extensions">initialize: anObject container: anApplication	^ super initialize: anObject accessor container: anApplication</body></methods><methods><class-id>External.DispatchCollectionInspector</class-id> <category>private</category><body package="Com- Automation Trippy Extensions">notSupported: aUserMessage	| aString |	aString := aUserMessage asString copy.	aString notEmpty ifTrue: [ aString at: 1 put: (aString first asUppercase) ].	Dialog warn: ((#NotSupported1s &lt;&lt; #com &gt;&gt; '&lt;1s&gt; is not supported') expandMacrosWith: aString).</body><body package="Com- Automation Trippy Extensions">privateAdd: anObject	"Yes we can resize arrays in the inspector. It can be handy so why not?"	self error: (#AddingNotSupported &lt;&lt; #com &gt;&gt; 'Adding not supported')</body><body package="Com- Automation Trippy Extensions">privateInsertAll: aCollection beforeIndex: anIndex	"Insert elements of the argument collection into the object being inspected. Subclasses may override this if the notion of insertion they support is different. Answer indices (keys, in page terminology) of objects just added."	| addedElements |	addedElements := aCollection inject: 0 into:		[:sum :each | sum + ([ object add: each. 1] on: Error do: [:ex | ex return: 0 ]) ].	^ object size - addedElements +1  to: object size</body><body package="Com- Automation Trippy Extensions">privateMoveAllAtIndices: aCollection beforeIndex: anIndex	"Reposition elements at indices listed in aCollection so that they are all located at indices {anIndex, anIndex+1, ...}. The size of the resulting collection is the same as that of the original."	Dialog warn: (#MovingNotSupported &lt;&lt; #com &gt;&gt; 'Moving elements is not supported').	^ #()</body><body package="Com- Automation Trippy Extensions">privateRemoveAtIndices: anIntegerCollection	"Remove elements of the object being inspected with indices	listed in the argument array."	Dialog warn: (#RemovingNotSupported &lt;&lt; #com &gt;&gt; 'Removing elements is not supported')</body></methods><methods><class-id>External.DispatchCollectionInspector</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">object	"Answer the object being inspected."	^object driver</body></methods><methods><class-id>External.DispatchCollectionInspector</class-id> <category>decomposing</category><body package="Com- Automation Trippy Extensions">partAt: anIndex	^DispCollectionElement of: object at: anIndex</body></methods><methods><class-id>External.DispatchCollectionInspector</class-id> <category>actions</category><body package="Com- Automation Trippy Extensions">add	Dialog warn: (#AddingElementsNotSupported &lt;&lt; #com &gt;&gt; 'Adding elements is not supported.')</body><body package="Com- Automation Trippy Extensions">dive	(self hasSingleSelection and: [self selection hasValue])		ifTrue: [self container diveInto: (ExtDerivedAttribute 				label: ((#x1sCSent2s &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt;: sent &lt;2s&gt;')					expandMacrosWith: Time now printString					with:  'item: ',self selection key printString )				getBlock: [ self selection value ]				setBlock: [:newValue |]				textBlock: [ self selection simplifiedGetCode]				)].	^self</body><body package="Com- Automation Trippy Extensions">removeSelected	"Remove the selected elements."	Dialog warn: (#RemovingNotSupported &lt;&lt; #com &gt;&gt; 'Removing elements is not supported')</body></methods><methods><class-id>External.DispatchCollectionInspector class</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">tabLabel	^(#AutomationItems &lt;&lt; #dialogs &gt;&gt; '&amp;Automation Items')</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">createListForTypeLib: aTypeLib 		^ self typesFor: aTypeLib.</body><body package="Com- Automation Browser">createListFrom: aList 	^aList select: 			[:each | 			(each showInBrowser or: [self showHidden value]) 				and: [self showTypeKind: each]]</body><body package="Com- Automation Browser">displayTextFor: anObject 	| text invisEmphasis |	invisEmphasis := Array with: #italic with: #color-&gt;(ColorValue gray).	text := super displayTextFor: anObject.	^ anObject showInBrowser 		ifTrue: 	[ text ]		ifFalse:	[ text asText emphasizeAllWith: invisEmphasis]</body><body package="Com- Automation Browser">iconFor: aType 	^ aType browserIcon</body><body package="Com- Automation Browser">refreshSelection 	self navigator state libraryElement ifNotNil: [:type |		self objectList selections: (Array with: type).		].</body><body package="Com- Automation Browser">selectType: libraryElement 	libraryElement ifNil: [ ^self ].	self showHidden value ifFalse: [ 		libraryElement showInBrowser ifFalse: [ 	self showHidden value: true ]].	libraryElement isClassOrInterface 		ifTrue:  [ self showClassesAndInterfaces value ifFalse: [ self showClassesAndInterfaces value: true ]]		ifFalse: [ self showOther value ifFalse: [ self showOther value: true ]].	^self objectList selections: (Array with: libraryElement)</body><body package="Com- Automation Browser">showTypeKind: aTypeDescription	((Array with: TKIND_COCLASS with: TKIND_DISPATCH with: TKIND_INTERFACE) includes: aTypeDescription typekind)		ifTrue: [ ^ self showClassesAndInterfaces value ].	^ self showOther value</body><body package="Com- Automation Browser">sortBlock	"Return a sort block that defines a total order on our elements."	^[:a :b | a printString &lt; b printString]</body><body package="Com- Automation Browser">typesFor: aTypeLibDescriptor 	aTypeLibDescriptor ifNil: [ ^#() ].	^ aTypeLibDescriptor containedTypeDescriptions</body><body package="Com- Automation Browser">updateList	| oldSelections |	oldSelections := self selections.	self updateListWith: (self createListFrom: self fullList).	self objectList selections: oldSelections.	self objectList selections ~= oldSelections ifTrue: [ 		self changed ].</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>accessing-navigator</category><body package="Com- Automation Browser">fillInState: aNavigatorState	aNavigatorState libraryElement: self selection</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>aspects</category><body package="Com- Automation Browser">fullList	^ fullList ifNil: [ #() ].</body><body package="Com- Automation Browser">fullList: aList	fullList := aList.</body><body package="Com- Automation Browser">showClassesAndInterfaces	"Return whether the browser should display classes and interface types"	^showClassesAndInterfaces ifNil: [		showClassesAndInterfaces := true asValue.		showClassesAndInterfaces addDependent: self.		showClassesAndInterfaces ]</body><body package="Com- Automation Browser">showHidden	"return a valueholder which defines whether the browser will show hidden elements"	^ showHidden ifNil: [ 		showHidden := false asValue.		showHidden addDependent: self.		showHidden ]</body><body package="Com- Automation Browser">showOther	"return a valueholder which defines whether the browser will show other elements	 (Enums, Aliases, Structs, Unions)"	^showOther ifNil: [		showOther := false asValue.		showOther addDependent: self.		showOther ]</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>menus</category><body package="Com- Automation Browser">createInterfaceClasses	| selection |	selection := self selection ifNil: [^self].	#{External.COMInterfaceWrapperClassGenerator} ifDefinedDo: [:generator |		generator generateClassPrototypesForInterface: selection vtableType ]		elseDo: [ Dialog warn: #ClassGenerationRequiresComAutomationDevelopment &lt;&lt; #com &gt;&gt; 'Generation of classes requires package "Com- Automation development to be loaded.'  ]</body><body package="Com- Automation Browser">defaultMenu	^ Menu new		addItem: ((MenuItem 						labeled: (#CreateAndInspect &lt;&lt; #com &gt;&gt; 'Create And Inspect')) 						nameKey: #createAndInspect; 						value: #menuCreateAndInspect;						enabled: [ self selectionIsRegisteredDispatchCoclass ]);		addItem: ((MenuItem 						labeled: (#LocalReferences &lt;&lt; #com &gt;&gt; 'Local References')) 						nameKey: #localReferences; 						value: #menuBrowseLocalReferences);		addItem: ((MenuItem 						labeled: (#GlobalReferences &lt;&lt; #com &gt;&gt; 'Global References')) 						nameKey: #globalReferences; 						value: #menuBrowseGlobalReferences);		addItem: ((MenuItem 						labeled: (#CreateClasses &lt;&lt; #com &gt;&gt; 'Generate Class(es)')) 						nameKey: #createClasses; 						value: #menuCreateClasses;						enabled: [self canGenerateClassesForSelection ]);		addItem: ((MenuItem 						labeled: (#CreateSpecificationTables &lt;&lt; #com &gt;&gt; 'Generate Specification tables')) 						nameKey: #createSpecificationTables; 						value: #menuCreateSpecificationTables;						enabled: [self canGenerateSpecificationTableForSelection ]);		yourself</body><body package="Com- Automation Browser">generateAutomationClass	| dialog newClass |	dialog := AutomationClassCreationDialog new.	dialog		className: self selection suggestedAutomationClassName;		superclass: Examples.AutomationApplication;		indexedType: Examples.AutomationApplication behaviorType.	dialog nameSpace: Examples.	dialog open		ifTrue: 			[newClass := self navigator createClassFromDialog: dialog for: self selection.			newClass notNil ifTrue: [newClass browse]]</body><body package="Com- Automation Browser">menuBrowseGlobalReferences	| selection |	selection := self selection ifNil: [ ^ self ].	self navigator browseGlobalReferencesTo: selection.</body><body package="Com- Automation Browser">menuBrowseLocalReferences	| selection |	selection := self selection ifNil: [ ^ self ].	self navigator browseLocalReferencesTo: selection.</body><body package="Com- Automation Browser">menuCreateAndInspect	self selection ifNotNil: [:coclass |		(COMDispatchDriver createObject: coclass guid) inspect ].</body><body package="Com- Automation Browser">menuCreateClasses	self canGenerateInterfaceClassesForSelection		ifTrue: [^self createInterfaceClasses].	self canGenerateAutomationClass 		ifTrue: [ ^ self generateAutomationClass ].	self error: #DontKnowWhatToCreate &lt;&lt; #com &gt;&gt; 'Don''t know what to create'</body><body package="Com- Automation Browser">menuCreateSpecificationTables	| aCoclass |	aCoclass := self selection.	self navigator generateSpecificationTablesFor: aCoclass</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>interface closing</category><body package="Com- Automation Browser">noticeOfWindowClose: aWindow 	"The ApplicationWindow aWindow is in the process of closing. 	You have been notified."	showClassesAndInterfaces removeDependent: self.	showOther removeDependent: self.	showHidden removeDependent: self.	super noticeOfWindowClose: aWindow.</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>updating widgets</category><body package="Com- Automation Browser">selectState: aNavigatorState		self fullList: (self createListForTypeLib: aNavigatorState typeLib).		self updateList.		self selectType: aNavigatorState libraryElement.</body><body package="Com- Automation Browser">updateWithState: aNavigatorState 	self fullList: (self createListForTypeLib: aNavigatorState typeLib).	self updateList.	aNavigatorState libraryElement: self selection.</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>testing</category><body package="Com- Automation Browser">canGenerateAutomationClass	^self selection		ifNil: [false]		ifNotNil: [:aSelection | aSelection isCoclass and: [aSelection isCreatable]]</body><body package="Com- Automation Browser">canGenerateClassesForSelection	^self canGenerateInterfaceClassesForSelection		or: [self canGenerateAutomationClass]</body><body package="Com- Automation Browser">canGenerateInterfaceClassesForSelection	"Answer whether the selection is a registered Coclass which implements the IDispatch interface"	^#{COMInterfaceWrapperClassGenerator} ifDefinedDo: 			[:generator | self selection				ifNotNil: 					[:aSelection |					aSelection isInterface						and: [aSelection representsVTableInterface or: [aSelection isDualInterface]]]]		elseDo: [false]</body><body package="Com- Automation Browser">canGenerateSpecificationTableForSelection	^self canGenerateAutomationClass</body><body package="Com- Automation Browser">selectionIsRegisteredDispatchCoclass	"Answer whether the selection is a registered Coclass which implements the IDispatch interface"	^ self selection ifNotNil: [:aSelection |		aSelection isCoclass and: [ aSelection isCreatable]]</body><body package="Com- Automation Browser">showIcons	^true</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>updating</category><body package="Com- Automation Browser">update: anAspect with: aParameter from: anObject	anObject = self showHidden		ifTrue: [ ^ self updateList].	anObject = self showClassesAndInterfaces		ifTrue: [ ^ self updateList].	anObject = self showOther		ifTrue: [ ^ self updateList ].	^ super update: anAspect with: aParameter from: anObject.</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>binding</category><body package="Com- Automation Browser">visualFor: aKey 	"Return an instance of any non-abstract subclass of 	VisualComponent (in practice usually either ComposedText or 	Image) for use as a label for a widget."	aKey = #showClassesIcon		ifTrue: [ ^ ListIconLibrary visualFor: #automationCoclass ].	aKey = #showOthersIcon		ifTrue: [ ^ ListIconLibrary visualFor: #automationUnknownType ].	aKey = #showHiddenIcon		ifTrue: [ ^ ListIconLibrary visualFor: #showHidden ].	^ super visualFor: aKey</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>labels</category><body package="Com- Automation Browser">labelFor: aKey	aKey = #showClassesFlyByHelp		ifTrue: [ ^ (#ShowClassesAndInterfaces &lt;&lt; #com &gt;&gt; 'Show coclasses and interfaces') ].	aKey = #showHiddenFlyByHelp		ifTrue: [ ^ (#ShowHiddenTypes &lt;&lt; #com &gt;&gt; 'Show hidden types') ].	aKey = #showOtherTypesFlyByHelp		ifTrue: [ ^ (#ShowOtherTypes &lt;&lt; #com &gt;&gt; 'Show other types(Aliases, Enums, Modules, Records, Unions ...)')].	^ super labelFor: aKey</body></methods><methods><class-id>External.AutomationTypeNavigatorPart</class-id> <category>flyByHelp</category><body package="Com- Automation Browser">showClassesFlyByHelp	^ (#ShowClassesAndInterfaces &lt; #com &gt;&gt; 'Show coclasses and interfaces')</body><body package="Com- Automation Browser">showHiddenFlyByHelp	^ (#ShowHiddenTypes &lt; #com &gt;&gt; 'Show hidden types')</body><body package="Com- Automation Browser">showOtherTypesFlyByHelp	^ (#ShowOtherTypes &lt; #com &gt;&gt; 'Show other types(Aliases, Enums, Modules, Records, Unions ...)')</body></methods><methods><class-id>External.AutomationSelectorNavigatorPart</class-id> <category>menus</category><body package="Com- Automation Browser">defaultMenu	^ Menu new		addItem: ((MenuItem 						labeled: (#BrowseLocalImplementors &lt;&lt; #com &gt;&gt; 'Browse Local Implementors')) 						nameKey: #BrowseLocalImplementors; 						value: #menuBrowseLocalImplementors;						enabled: [ self selectionIsMethodOrProperty ]);		addItem: ((MenuItem 						labeled: (#BrowseGlobalImplementors &lt;&lt; #com &gt;&gt; 'Browse global implementors')) 						nameKey: #BrowseGlobalImplementors; 						value: #menuBrowseGlobalImplementors;						enabled: [ self selectionIsMethodOrProperty ]);		addItem: ((MenuItem 						labeled: (#BrowseSmalltalkSenders &lt;&lt; #com &gt;&gt; 'Browse Smalltalk Senders')) 						nameKey: #BrowseSmalltalkSender; 						value: #menuBrowseSmalltalkSenders;						enabled: [ self selectionIsMethodOrProperty ]);		yourself</body><body package="Com- Automation Browser">menuBrowseGlobalImplementors	^ self navigator browseGlobalImplementors</body><body package="Com- Automation Browser">menuBrowseLocalImplementors	^ self navigator browseLocalImplementors</body><body package="Com- Automation Browser">menuBrowseSmalltalkSenders	^ self navigator browseSmalltalkSenders</body></methods><methods><class-id>External.AutomationSelectorNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">allSelectorsIn: aNavigatorState 	| selectors class |	class := aNavigatorState libraryElement ifNil: [ ^#() ].	selectors := self environment selectorsForClass: class.	selectors := selectors select: [:each | self show: each ].	^selectors 		collect: [:each | RBMethodDefinition class: class selector: each]</body><body package="Com- Automation Browser">displayTextFor: aMethodSpecification 	^ aMethodSpecification name</body><body package="Com- Automation Browser">fillInListFor: aNavigatorState 	| protocols |	protocols := aNavigatorState automationProtocols.	(protocols isEmpty and: [self class showAllItemsWhenNothingSelected]) 		ifTrue: [protocols := self allProtocolsIn: aNavigatorState].	^self protocolItemsFor: protocols for: aNavigatorState</body><body package="Com- Automation Browser">iconFor: aMethodDefinition 	^ aMethodDefinition browserIcon</body><body package="Com- Automation Browser">protocolItemsFor: protocols for: aNavigatorState 	| descriptions filterBlock aTypeDescription |	aTypeDescription := aNavigatorState libraryElement.	protocols isEmpty ifTrue: [^#()].	aTypeDescription isNil ifTrue: [^#()].	descriptions := self unfilteredProtocolItemsFor: aTypeDescription.	descriptions := descriptions select: [:each | self show: each flags: aNavigatorState flags ].	filterBlock := protocols inject: nil				into: 					[:curr :protocol | 					curr ifNil: [protocol block]						ifNotNil: [[:each | (curr value: each) or: [protocol block value: each]]]].	^descriptions select: filterBlock</body><body package="Com- Automation Browser">selectionIsMethodOrProperty	| selection |	selection := self selection ifNil: [ ^ false ].	^ selection isMethodOrPropertySpecification</body><body package="Com- Automation Browser">sortBlock	"Return a sort block that defines a total order on our elements."	^[:a :b | a name &lt; b name]</body><body package="Com- Automation Browser">unfilteredProtocolItemsFor: aTypeDescription 	^aTypeDescription possibleProtocolItems</body></methods><methods><class-id>External.AutomationSelectorNavigatorPart</class-id> <category>accessing-navigator</category><body package="Com- Automation Browser">fillInState: aNavigatorState 	aNavigatorState automationMember: self selection</body></methods><methods><class-id>External.AutomationSelectorNavigatorPart</class-id> <category>updating widgets</category><body package="Com- Automation Browser">selectState: aNavigatorState	self fillInListWith: aNavigatorState.	self objectList selections: (Array with: aNavigatorState automationMember)</body><body package="Com- Automation Browser">updateWithState: aNavigatorState 	| initialSelections |	initialSelections := self selections.	self fillInListWith: aNavigatorState.	self select: initialSelections.	aNavigatorState protocols: self selections</body></methods><methods><class-id>External.AutomationSelectorNavigatorPart</class-id> <category>updating</category><body package="Com- Automation Browser">removeMethodChange: aParameter 	^ self</body></methods><methods><class-id>External.AutomationSelectorNavigatorPart</class-id> <category>widget properties</category><body package="Com- Automation Browser">show: aMemberReference flags: flags	^ aMemberReference showInNavigatorWithFlags: flags</body></methods><methods><class-id>External.AutomationSelectorNavigatorPart</class-id> <category>subcanvases</category><body package="Com- Automation Browser">updateDisplay	super updateDisplay.	self updateListWith: self objectList list.</body></methods><methods><class-id>External.AutomationReferenceEnvironment</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">bindingReferences	^ COMRegistryInterface extTypeLibraryIDMap</body><body package="Com- Automation Browser">navigatorClass	^AutomationNavigator</body><body package="Com- Automation Shared Extensions">objectsDo: aBlock		| set |	set := Set new.	^references		do:			[:each | 			(set includes: each type)				ifFalse:					[set add: each type.					aBlock value: each type]]</body><body package="Com- Automation Shared Extensions">references	^references</body><body package="Com- Automation Shared Extensions">references: anObject	references ifNotNil: [ references removeDependent: self ].	references := anObject.	references ifNotNil: [ references addDependent: self ].</body><body package="Com- Automation Shared Extensions">selectorsForClass: aClass do: aBlock 	aClass methods do: [:each  |			(self includesSelector: each in: aClass) ifTrue: [aBlock value: each]]</body><body package="Com- Automation Shared Extensions">typesDo: aBlock		| set |	set := Set new.	^references		do:			[:each | 			(set includes: each type)				ifFalse:					[set add: each type.					aBlock value: each type]]</body></methods><methods><class-id>External.AutomationReferenceEnvironment</class-id> <category>testing</category><body package="Com- Automation Shared Extensions">isEmpty	^references isEmpty</body><body package="Com- Automation Shared Extensions">isSelector	^true</body></methods><methods><class-id>External.AutomationReferenceEnvironment</class-id> <category>environments</category><body package="Com- Automation Browser">findClass: aString for: aNavigator ifNotFound: aBlock type: testBlock 	^ aNavigator	immediateFindClass: aString ifNotFound: aBlock type: testBlock</body><body package="Com- Automation Shared Extensions">globalReferencesTo: aType 	^self class globalReferencesTo: aType</body><body package="Com- Automation Shared Extensions">implementorsMatching: aString 	^self class immediateImplementorsMatching: aString in: self</body><body package="Com- Automation Shared Extensions">referencesTo: aType in: aTypeLibDescription	^ self class referencesTo: aType in: aTypeLibDescription</body></methods><methods><class-id>External.AutomationReferenceEnvironment</class-id> <category>accessing-classes</category><body package="Com- Automation Shared Extensions">allClassesDo: aBlock 	^ self typesDo: [:each | each isClassOrInterface ifTrue: [ aBlock value: each]]</body></methods><methods><class-id>External.AutomationReferenceEnvironment</class-id> <category>initialize-release</category><body package="Com- Automation Shared Extensions">initialize	super initialize.	references := OrderedCollection new.</body></methods><methods><class-id>External.AutomationReferenceEnvironment class</class-id> <category>instance creation</category><body package="Com- Automation Browser">globalReferencesTo: aType 	^ self new 		searchStrings: (Array with: aType name);		label: aType fullName;		references: (self allReferencesTo: aType);		yourself</body><body package="Com- Automation Shared Extensions">immediateImplementorsMatching: aString in: anEnvironment	| references currentLib |	currentLib := nil.	references := OrderedCollection new.	self comToolsaveDo: 			[anEnvironment classesDo: 					[:class |					anEnvironment selectorsForClass: class						do: 							[:each |							(aString match: each name)								ifTrue: 									[references										add: (AutomationMemberReference member: each implementor: class)]].					class typelib ~= currentLib						ifTrue: 							[currentLib ifNotNil: [IncrementNotification raiseSignal].							currentLib := class typelib]]].	^(self onEnvironment: anEnvironment)		references: references;		label: (#ImplementorsOf1s &lt;&lt; #browser &gt;&gt; 'Implementors of &lt;1s&gt;'					expandMacrosWith: aString);		yourself</body><body package="Com- Automation Shared Extensions">implementorsOf: anAutomationMember in: aTypeLib	^self comToolsaveDo: 			[(self new)				searchStrings: (Array with: anAutomationMember name);				label: (#ImplementorsOf &lt;&lt; #com &gt;&gt; 'Implementors of') asString , ' '							, anAutomationMember name;				references: (aTypeLib implementorsOf: anAutomationMember name);				yourself]</body><body package="Com- Automation Shared Extensions">referencesTo: aType in: aTypeLibDescription	^self comToolsaveDo: 			[(self new)				searchStrings: (Array with: aType name);				label: aType fullName;				references: (aTypeLibDescription referencesTo: aType);				yourself]</body></methods><methods><class-id>External.AutomationReferenceEnvironment class</class-id> <category>private</category><body package="Com- Automation Shared Extensions">basicPutImplementorsMatching: aString into: members in: anEnvironment cancel: cancel	self comToolsaveDo: 			[anEnvironment classesDo: 					[:class |					cancel value == true ifTrue: [^self].					anEnvironment selectorsForClass: class						do: 							[:each |							(aString match: each name)								ifTrue: 									[members add: (AutomationMemberReference member: each implementor: class)]]]]</body><body package="Com- Automation Browser">putAllReferencesTo: aType into: aCollection cancel: aValueHolder	self comToolsaveDo: 			[COMRegistryInterface extTypeLibraryIDMap do: 					[:typeLibDesc |					"This may be a little late but in the worst case this will stop searching at the next typelibrary"					aValueHolder value ifTrue: [^self].					typeLibDesc referencesTo: aType into: aCollection.					IncrementNotification raiseSignal]]</body></methods><methods><class-id>External.AutomationReferenceEnvironment class</class-id> <category>tools</category><body package="Com- Automation Browser">allReferencesTo: aType		^IncrementalSearchDialog		selectWithBackgroundSearch:			[:aCollection :cancel | self putAllReferencesTo: aType into: aCollection cancel: cancel]		collection:			(SortedCollection sortBlock: [:a :b | a fullName &lt; b fullName])		filter: [:filter :element | ('*' , filter) , '*' match: element fullName]		windowTitle:			((#ReferencesTo1s &lt;&lt; #com) &gt;&gt; 'References to: "&lt;1s&gt;"' expandMacrosWith: aType name)		toStringSelector: #fullName		iconSelector: #browserIcon		selectMultiple: true</body><body package="Com- Automation Browser">backgroundImplementorsMatching: aString in: anEnvironment		| result |	result := IncrementalSearchDialog		selectWithBackgroundSearch:			[:aCollection :cancel | 			self basicPutImplementorsMatching: aString into: aCollection in:					anEnvironment cancel: cancel]		collection:			(SortedCollection sortBlock: [:a :b | a fullName &lt; b fullName])		filter: [:filter :element | ('*' , filter) , '*' match: element fullName]		windowTitle:			((#FindMember1S &lt;&lt; #com) &gt;&gt; 'Implementors of: "&lt;1s&gt;"' expandMacrosWith: aString)		toStringSelector: #fullName		iconSelector: #browserIcon		selectMultiple: true.	^(self onEnvironment: anEnvironment)		references: result;		label:				(#ImplementorsOf1s &lt;&lt; #browser &gt;&gt; 'Implementors of &lt;1s&gt;' expandMacrosWith:							aString);		yourself</body></methods><methods><class-id>External.DispCollectionElement</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">simplifiedGetCode	^ object codeForAccessingItem: key</body><body package="Com- Automation Trippy Extensions">text	object isValid ifFalse: [		 ^ DispSpecEmphasisPolicy default emphasizeError: object driver comClientInvalidMessage asString ].	^ super text</body><body package="Com- Automation Trippy Extensions">value	"Return the element's value, but also check whether the dispatch driver is valid"	^ object driver isValid 			ifTrue: [object at: key ]		ifFalse: [ DispSpecEmphasisPolicy default emphasizeError: object driver comClientInvalidMessage asString]</body><body package="Com- Automation Trippy Extensions">value: anObject 	"Set the elements value if possible. Catch occuring errors and inform the user in	 a civilized way"	object isValid 		ifFalse: [^Dialog warn: object comClientInvalidMessage asString].	(object specificationTable at: 'Item') isReadOnly		ifTrue: [ ^ Dialog warn: (#ItemsCantBeOverwrittenInThisCollection &lt;&lt;  #com &gt;&gt; 'Items in this collection can not be overwritten') asString].	^[object at: key put: anObject] on: Error		do: 			[:ex | 			Dialog 				warn: (#ErrorSettingValue1p2p3s &lt;&lt; #com 						&gt;&gt; 'Error when setting Item[&lt;2p&gt;] to value &lt;1p&gt;:&lt;n&gt;&lt;3s&gt;' 							expandMacrosWith: anObject							with: key							with: ex description).			ex return: nil]</body></methods><methods><class-id>External.AutomationReferenceNavigatorPart</class-id> <category>private</category><body package="Com- Automation Browser">displayTextFor: aMethodDefinition 		^ aMethodDefinition fullNameWithKind asText</body><body package="Com- Automation Browser">fillInListFor: aNavigatorState 	| defs |	defs := navigator environment references.	(defs size = self list size and: [defs size &gt; 100]) ifTrue: [^self list].	"Optimization hack -- sorting the defs is really slow."	^defs</body><body package="Com- Automation Browser">iconFor: anItem	^ anItem browserIcon</body><body package="Com- Automation Browser">selectDefinitions: aNavigatorState 	aNavigatorState automationMember ifNotNil: [:member | 			^ self select: (Array with: member) ].	aNavigatorState libraryElement 				ifNil: [ ^ self select: #() ]			ifNotNil: [:element |				self select: (self list select: [:each | each container = element])].</body><body package="Com- Automation Browser">sortBlock	"Return a sort block that defines a total order on our elements."	^[:a :b | a printString &lt; b printString]</body></methods><methods><class-id>External.AutomationReferenceNavigatorPart</class-id> <category>accessing-navigator</category><body package="Com- Automation Browser">fillInState: aNavigatorState 	self selection		ifNil: [ aNavigatorState 				automationMember: nil;				libraryElement: nil;				typeLib: nil]		ifNotNil: [:selection |			aNavigatorState 				automationMember: selection member;				libraryElement: selection type;				typeLib: (selection type ifNil: [nil ] ifNotNil: [:type | type typelib]) ].</body></methods><methods><class-id>External.AutomationReferenceNavigatorPart</class-id> <category>actions</category><body package="Com- Automation Browser">menuBrowseGlobalReferences	| selection |	selection := self selection ifNil: [ ^ self ].	self navigator browseGlobalReferencesTo: selection.</body><body package="Com- Automation Browser">menuBrowseLocalReferences	| selection |	selection := self selection ifNil: [ ^ self ].	self navigator browseLocalReferencesTo: selection.</body><body package="Com- Automation Browser">menuOpenInFullBrowser	self selection ifNil: [ ^self ].	Refactory.Browser.RefactoringBrowser 		openOnEnvironment: Refactory.Browser.AutomationBrowserEnvironment new		type: #Automation 		state: self selection createBrowserState.</body></methods><methods><class-id>External.AutomationReferenceNavigatorPart</class-id> <category>private testing</category><body package="Com- Automation Browser">selectionIsType	| selection | 	selection := self selection ifNil: [ ^ false ].	^ (selection isTypeSpecification)</body></methods><methods><class-id>External.AutomationReferenceNavigatorPart</class-id> <category>updating widgets</category><body package="Com- Automation Browser">selectState: aNavigatorState 	self fillInListWith: aNavigatorState.	self selectDefinitions: aNavigatorState</body><body package="Com- Automation Browser">updateWithState: aNavigatorState 	self fillInListWith: aNavigatorState.	self selectDefinitions: aNavigatorState</body></methods><methods><class-id>External.AutomationReferenceNavigatorPart</class-id> <category>menus</category><body package="Com- Automation Browser">defaultMenu	^ Menu new		addItem: ((MenuItem 						labeled: (#OpenInFullBrowser &lt;&lt; #com &gt;&gt; 'Open in full browser')) 						nameKey: #openInFullBrowser; 						value: #menuOpenInFullBrowser;						enabled: [ true ]);		addItem: ((MenuItem 						labeled: (#LocalReferences &lt;&lt; #com &gt;&gt; 'Local References')) 						nameKey: #localReferences; 						value: #menuBrowseLocalReferences;						enabled: [ self selectionIsType ]);		addItem: ((MenuItem 						labeled: (#GlobalReferences &lt;&lt; #com &gt;&gt; 'Global References')) 						nameKey: #GlobalReferences; 						value: #menuBrowseGlobalReferences;						enabled: [ self selectionIsType ]);		yourself</body></methods><methods><class-id>External.AutomationReferenceNavigatorPart</class-id> <category>updating</category><body package="Com- Automation Browser">removeMethodChange: aParameter</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>aspects</category><body package="Com- Automation Browser">AutomationReferenceNavigatorPart	^partsDictionary at: AutomationReferenceNavigatorPart		ifAbsentPut: [parts add: (AutomationReferenceNavigatorPart onNavigator: self)]</body><body package="Com- Automation Browser">automationCodeComponentTabNavigatorPart	^partsDictionary at: #AutomationCodeComponentTabNavigatorPart		ifAbsentPut: [parts add: (AutomationCodeComponentTabNavigatorPart onNavigator: self)]</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>accessing</category><body package="Com- Automation Browser">AutomationNameSpaceItemTabNavigatorPart	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^partsDictionary at: #AutomationNameSpaceItemTabNavigatorPart		ifAbsentPut: [parts add: (AutomationNameSpaceItemTabNavigatorPart onNavigator: self)]</body><body package="Com- Automation Browser">defaultSourceCodeToolClass	^ nil</body><body package="Com- Automation Browser">find: aString 	| typeDescription |	aString isEmpty ifTrue: [^self].	aString first = $# 		ifTrue: [^self findMethod: (aString copyFrom: 2 to: aString size)].	typeDescription := self findClass: aString				ifNotFound: 					[^(self 						confirm: (#DidNotFindAnyMatchingTypes &lt;&lt; #com &gt;&gt; 'I did not find any matching types.&lt;n&gt;Do you wish to look for matching methods?') expandMacros) 							ifTrue: [self findMethod: aString]							ifFalse: [self] ].	typeDescription isNil ifTrue: [^self].	self setBinding: typeDescription</body><body package="Com- Automation Browser">setBinding: aBinding 	| newState target |	newState := self getState.	newState clearClassDependentFields.	target := aBinding createBrowserState.	newState 		typeLib: target typeLib;		libraryElement: target libraryElement.	newState automationProtocols: target automationProtocols.	newState automationMember ifNotNil: [:member |		newState automationMember: 			(target automationMember ifNil: [ nil ]			ifNotNil: [:aMember | aMember possibleProtocolItems detect: [:each | each name = member name] ifNone: [ nil]])].	self updateWithState: newState</body><body package="Com- Automation Browser">setState: aNavigatorState	COMSystem current whenActiveDo: [super setState: aNavigatorState]</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>browsing</category><body package="Com- Automation Browser">browseGlobalImplementors	self browseGlobalImplementorsOf: self state automationMember.</body><body package="Com- Automation Browser">browseGlobalImplementorsOf: aSelector 	self showWaitCursorWhile: 		[ [ self 			browseEnvironment:				(self globalImplementorsOf: aSelector) ] on: EventNotification do: [:ex | ex return ]]</body><body package="Com- Automation Browser">browseGlobalReferencesTo: aLiteral 		^ [ self browseEnvironment: (self globalReferencesTo: aLiteral) ] on: EventNotification do: [:ex |		ex parameter = #cancel 			ifTrue: [ ex return: nil ]				ifFalse: [ ex resume ]].</body><body package="Com- Automation Browser">browseLocalImplementors	self browseLocalImplementorsOf: self state automationMember in: self state typeLib</body><body package="Com- Automation Browser">browseLocalImplementorsOf: anAutomationMember in: aTypeLib	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment implementorsOf: anAutomationMember in: aTypeLib )]</body><body package="Com- Automation Browser">browseLocalReferencesTo: aLiteral 	self showWaitCursorWhile:		[self browseEnvironment:			(self environment referencesTo: aLiteral in: self state typeLib)]</body><body package="Com- Automation Browser">browseSmalltalkSenders		| firstEnvironment new |	firstEnvironment := nil.	self state automationMember element selectors do: [:selector |		new := Refactory.Browser.BrowserEnvironment new referencesTo: selector.		firstEnvironment := firstEnvironment ifNil: [ new ] ifNotNil: [			firstEnvironment := Refactory.Browser.OrEnvironment onEnvironment: firstEnvironment or: new ]].	^ self browseEnvironment:firstEnvironment</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>menus</category><body package="Com- Automation Browser">menuBarFor: aBrowser	^ aBrowser automationMenuBar</body><body package="Com- Automation Browser">windowMenuItems	^#()</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>private</category><body package="Com- Automation Browser">findMethod: aSelector 	^ [ self browseEnvironment: (self globalImplementorsMatching: '*', aSelector trimBlanks,'*') ] on: EventNotification do: [:ex | 		ex parameter = #cancel 			ifTrue: [ ^ self ]			ifFalse: [ ex resume ]].</body><body package="Com- Automation Browser">globalImplementorsMatching: aString	^ self environment implementorsMatching: aString</body><body package="Com- Automation Browser">globalImplementorsOf: aMember	^ self environment globalImplementorsOf: aMember</body><body package="Com- Automation Browser">globalReferencesTo: aType 	^self environment globalReferencesTo: aType</body><body package="Com- Automation Browser">navigatorStateClass	^AutomationNavigatorState</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>private-category</category><body package="Com- Automation Browser">backgroundFindClass: aString ifNotFound: aBlock type: testBlock		| result |	[result := IncrementalSearchDialog		selectWithBackgroundSearch:			[:typeDescriptions :cancel | 			self putReferencesMatchingInBackground: aString type: testBlock into:					typeDescriptions cancel: cancel]		collection:			(SortedCollection				sortBlock: [:a :b | (a value) fullName &lt; (b value) fullName])		filter:			[:filter :element | ('*' , filter) , '*' match: element valuePrintString]		windowTitle:			((#Find1S &lt;&lt; #com) &gt;&gt; 'Find: "&lt;1s&gt;"' expandMacrosWith: aString)		toStringSelector: #valuePrintString		iconSelector: #browserIcon		selectMultiple: false.	] on: EventNotification do: [:ex | 		ex parameter = #cancel 			ifTrue: [ ^ nil]			ifFalse: [ ex resume ]].	^result value ifNil: [ aBlock value ]</body><body package="Com- Automation Browser">findClass: aString ifNotFound: aBlock type: testBlock 	^ environment findClass: aString for: self ifNotFound: aBlock type: testBlock</body><body package="Com- Automation Browser">findReferencesMatching: aString type: testBlock		| destClassName allNames extDestClassName |	destClassName := aString trimBlanks.	extDestClassName := '*' , destClassName , '*'.	allNames := self		objectsMatchingAnyOf:			(Array				with: [:each | each name notNil and: [(destClassName match: each name) and: [testBlock value: each]]]				with: [:each | each name notNil and: [(destClassName match: each fullName) and: [testBlock value: each]]]				with: [:each | each name notNil and: [(extDestClassName match: each name) and: [testBlock value: each]]]				with: [:each | each name notNil and: [(extDestClassName match: each fullName) and: [testBlock value: each]]]).	^ allNames detect: [:names | names notEmpty] ifNone: [ #() ].</body><body package="Com- Automation Browser">immediateFindClass: aString ifNotFound: aBlock type: testBlock 	| typeDescriptions  |	typeDescriptions := SortedCollection sortBlock: [:a :b | a isBetterThan: b ].	self putReferencesMatching: aString type: testBlock into: typeDescriptions.	typeDescriptions isEmpty ifTrue: [aBlock value].	typeDescriptions := typeDescriptions collect: [:each | each value ].	typeDescriptions size = 1 ifTrue: [^typeDescriptions first].	^self 		choose: (#WhatTypeDoYouWant &lt;&lt; #com &gt;&gt;'What Automation Type do you want?')		fromList: (typeDescriptions collect: [:name | name fullName ])		values: typeDescriptions		lines: 10		cancel: [^nil]</body><body package="Com- Automation Browser">objectsMatchingAnyOf: blocks		| names |	names := Array new: blocks size.	1		to: blocks size		do:			[:index | 			names				at: index				put: OrderedCollection new].	self environment		typesAndLibsDo:			[:each | 			blocks				keysAndValuesDo:					[:index :aBlock | (aBlock value: each) ifTrue: [(names at: index) add: each]]].	^names</body><body package="Com- Automation Browser">objectsMatchingAnyOf: blocks into: aCollection		| index |	self environment		objectsDo:			[:each | 			index := blocks findFirst: [ :aBlock | aBlock value: each].			index = 0 ifFalse: [ aCollection add: (SearchMatch value: each quality: index)]]</body><body package="Com- Automation Browser">objectsMatchingAnyOf: blocks into: aCollection cancel: cancel		| index |	self environment		objectsDo:			[:each | 			cancel value == true ifTrue: [^ self ].			index := blocks findFirst: [ :aBlock | aBlock value: each].			index = 0 ifFalse: [ aCollection add: (SearchMatch value: each quality: index)]]</body><body package="Com- Automation Browser">putReferencesMatching: aString type: testBlock into: aCollection		| destClassName extDestClassName |	destClassName := aString trimBlanks.	extDestClassName := '*' , destClassName , '*'.	self		objectsMatchingAnyOf:			(Array				with:					[:each | 					each name notNil						and: [(destClassName match: each name) and: [testBlock value: each]]]				with:					[:each | 					each name notNil						and:							[(destClassName match: each fullName) and: [testBlock value: each]]]				with:					[:each | 					each name notNil						and:							[(extDestClassName match: each name) and: [testBlock value: each]]]				with:					[:each | 					each name notNil						and:							[(extDestClassName match: each fullName) and: [testBlock value: each]]])		into: aCollection</body><body package="Com- Automation Browser">putReferencesMatchingInBackground: aString type: testBlock into: aCollection cancel: cancel		| destClassName extDestClassName |	destClassName := aString trimBlanks.	extDestClassName := '*' , destClassName , '*'.	self		objectsMatchingAnyOf:			(Array"				with: [:each | each name notNil and: [(destClassName match: each name) and: [testBlock value: each]]]				with: [:each | each name notNil and: [(destClassName match: each fullName) and: [testBlock value: each]]]				with: [:each | each name notNil and: [(extDestClassName match: each name) and: [testBlock value: each]]]"				with: [:each | each name notNil and: [(extDestClassName match: each fullName) and: [testBlock value: each]]])		into: aCollection		cancel: cancel</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>updating</category><body package="Com- Automation Browser">updateNavigator	self changeRequest ifFalse: [^self].	COMSystem current whenActiveDo: [ self refreshLists].</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>interface opening</category><body package="Com- Automation Browser">postBuildWith: aBuilder	COMSystem current whenActiveDo: [super postBuildWith: aBuilder]</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>code generation</category><body package="Com- Automation Browser">generateClassNameMethodFor: aCoclassDescriptor in: aClass	| stream |	stream := String new writeStream.	stream		nextPutAll: 'applicationName';		cr;		crtab;		nextPutAll: '^' , aCoclassDescriptor progID storeString.	^aClass class compile: stream contents classified: #accessing</body><body package="Com- Automation Browser">generateClientSpecificationFor: aCoclassDescriptor in: aClass	^self		generateLiteralSpecMethod: #literalSpecification		for: aCoclassDescriptor implementedDispatchInterfaces		key: #name		in: aClass</body><body package="Com- Automation Browser">generateEventSpecificationFor: aCoclassDescriptor in: aClass	^self		generateLiteralSpecMethod: #literalEventSpecification		for: aCoclassDescriptor eventDispatchInterfaces		key: #memberID		in: aClass</body><body package="Com- Automation Browser">generateLiteralSpecMethod: methodName for: interfaces key: aKey in: aClass	| table tables |	interfaces isEmpty		ifTrue: 			[^Dialog warn: #ThisClassDoesNotImplementAnyDispatchInterfaces &lt;&lt; #com						&gt;&gt; 'This class does not seem to implement any dispatch interfaces. Specification table generation canceled'].	tables := interfaces collect: [:each | each specificationTable withSpecificationKey: aKey].	interfaces size ~= 1		ifTrue: 			[table := Dialog						choose: #CoClassImplementsMoreThanOneDispatchInterface &lt;&lt; #com								&gt;&gt; 'This coclass implements more than one suitable interface. Please select one to use.'						fromList: (tables collect: 									[:each |									each name , ', ' , each size printString , ' '										, (#members &lt;&lt; #com &gt;&gt; 'members') asString])						values: tables						lines: 8						cancel: [^self]]		ifFalse: [table := tables first ].	self generateMethodNamed: methodName forTable: table in: aClass</body><body package="Com- Automation Browser">generateMethodNamed: aMethodName forTable: aCOMDispatchSpecificationTable in: aClass	| stream |	stream := String new writeStream.	stream		nextPutAll: aMethodName;		cr;		crtab.	stream nextPutAll: '^'				, aCOMDispatchSpecificationTable literalArrayEncoding storeString.	aClass class compile: stream contents classified: #accessing.</body><body package="Com- Automation Browser">generateSpecificationTablesFor: aCoclassDescriptor	| aClass |	aClass := (self retrieveTargetClassFor: aCoclassDescriptor) ifNil: [^self].	self generateSpecificationTablesFor: aCoclassDescriptor in: aClass</body><body package="Com- Automation Browser">generateSpecificationTablesFor: aCoclassDescriptor in: aClass	self generateClientSpecificationFor: aCoclassDescriptor in: aClass.	self generateEventSpecificationFor: aCoclassDescriptor in: aClass</body><body package="Com- Automation Browser">retrieveTargetClassFor: aCoclassDescriptor	| choices current class appName result |	choices := OrderedCollection new.	current := OrderedCollection with: Examples.AutomationApplication.	[current isEmpty] whileFalse: 			[class := current removeFirst.			class subclasses do: 					[:subclass |					appName := [subclass applicationName] on: Error do: [:ex | ex return: nil].					(appName notNil and: 							[appName = aCoclassDescriptor progID								or: [appName = aCoclassDescriptor versionIndependentProgID]])						ifTrue: [choices add: subclass]						ifFalse: [current add: subclass]]].	choices isEmpty		ifTrue: 			[^IncrementalSearchDialog selectClass: #PleaseSelectTargetClass &lt;&lt; #com						&gt;&gt; 'Please select target class'].	result := Dialog				choose: #FoundAppClassesForCoclass &lt;&lt; #com						&gt;&gt; 'We have detected existing application class(es) supporting this coclass.Please select one of them or chose other to select another class'				fromList: (choices collect: [:each | each fullName])				values: choices				buttons: #('other')				values: #(#other)				lines: 8				cancel: [#noChoice]				for: Dialog defaultParentWindow.	result = #noChoice ifTrue: [^nil].	result = #other		ifTrue: 			[^IncrementalSearchDialog selectClass: #PleaseSelectTargetClass &lt;&lt; #com						&gt;&gt; 'Please select target class'].	^result</body></methods><methods><class-id>External.AutomationNavigator</class-id> <category>private-class</category><body package="Com- Automation Browser">createClassFromDialog: aCreateClassDialog for: aCoclass	| aClass |	aClass := self createClassFromDialog: aCreateClassDialog.	aClass ifNil: [^nil].	self generateClassNameMethodFor: aCoclass in: aClass.	aCreateClassDialog createSpecificationTable value		ifTrue: [self generateSpecificationTablesFor: aCoclass in: aClass].	^aClass</body><body package="Com- Automation Browser">subclassResponsibilityMethodsIn: aClass	| results |	results := OrderedCollection new.	aClass withAllSuperclasses reverseDo:		[:class |		class selectors do: 			[:each | results := results reject: [:some | some selector = each]].		(class whichSelectorsReferTo: #subclassResponsibility) do:			[:each |			results add: (MethodDefinition class: class selector: each)]].	^results</body></methods><methods><class-id>External.AutomationBrowserEnvironment</class-id> <category>environments</category><body package="Com- Automation Browser">findClass: aString for: aNavigator ifNotFound: aBlock type: testBlock	^aNavigator backgroundFindClass: aString ifNotFound: aBlock type: testBlock</body><body package="Com- Automation Browser">globalImplementorsOf: anAutomationMember	^ self implementorsMatching: anAutomationMember name</body><body package="Com- Automation Shared Extensions">globalReferencesTo: aType 	^AutomationReferenceEnvironment globalReferencesTo: aType</body><body package="Com- Automation Browser">implementorsMatching: aString		^ AutomationReferenceEnvironment backgroundImplementorsMatching: aString in: self</body><body package="Com- Automation Shared Extensions"> implementorsOf: anAutomationMember in: aTypeLib	^ AutomationReferenceEnvironment implementorsOf: anAutomationMember in: aTypeLib</body><body package="Com- Automation Shared Extensions">referencesTo: aLiteral 	^ self</body><body package="Com- Automation Shared Extensions">referencesTo: aType in: aTypeLibDescription	^ AutomationReferenceEnvironment referencesTo: aType in: aTypeLibDescription</body></methods><methods><class-id>External.AutomationBrowserEnvironment</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">bindingReferences	^ COMRegistryInterface extTypeLibraryIDMap</body><body package="Com- Automation Shared Extensions">bindingReferencesDo: aBlock 	COMRegistryInterface extTypeLibraryIDMap do: 			[:typeLibDescription | 			typeLibDescription containedTypeDescriptions do: aBlock ]</body><body package="Com- Automation Browser">navigatorClass	^AutomationNavigator</body><body package="Com- Automation Shared Extensions">objectsDo: aBlock		^COMRegistryInterface extTypeLibraryIDMap				do:					[:typeLibDescription | 					aBlock value: typeLibDescription.					typeLibDescription containedTypeDescriptions do: aBlock]</body><body package="Com- Automation Shared Extensions">selectorsForClass: aClass do: aBlock 	aClass methods do: [:each  |			(self includesSelector: each in: aClass) ifTrue: [aBlock value: each]]</body><body package="Com- Automation Shared Extensions">stateClass	^ AutomationNavigatorState</body><body package="Com- Automation Browser">typesAndLibsDo: aBlock		^Notice		showProgress: 'Seaching ...'		complete: self bindingReferences size		while:			[COMRegistryInterface extTypeLibraryIDMap				do:					[:typeLibDescription | 					aBlock value: typeLibDescription.					typeLibDescription containedTypeDescriptions do: aBlock.					IncrementNotification raiseSignal]]</body><body package="Com- Automation Shared Extensions">typesDo: aBlock		^Notice		showProgress: 'Seaching ...'		complete: self bindingReferences size		while:			[COMRegistryInterface extTypeLibraryIDMap				do:					[:typeLibDescription | 					typeLibDescription containedTypeDescriptions do: aBlock.					IncrementNotification raiseSignal]]</body></methods><methods><class-id>External.AutomationBrowserEnvironment</class-id> <category>accessing-classes</category><body package="Com- Automation Shared Extensions">allClassesDo: aBlock 	^ self bindingReferencesDo: [:each |		each isClassOrInterface ifTrue: [ aBlock value: each ]]</body></methods><methods><class-id>External.DispParamConfiguration</class-id> <category>testing</category><body package="Com- Automation Trippy Extensions">isOptional	^ param isOptional</body></methods><methods><class-id>External.DispParamConfiguration</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">param	^param</body><body package="Com- Automation Trippy Extensions">param: anObject	param := anObject</body><body package="Com- Automation Trippy Extensions">paramName	^ param name</body><body package="Com- Automation Trippy Extensions">paramTypeName	^ param vbTypeName</body><body package="Com- Automation Trippy Extensions">value	^value</body><body package="Com- Automation Trippy Extensions">value: anObject	value := anObject</body><body package="Com- Automation Trippy Extensions">valueString	^self value printString</body><body package="Com- Automation Trippy Extensions">valueString: aString	"added for UI support"	self value: ([Compiler evaluate: aString ] on: Error do: [:ex | ex return: nil ]).</body></methods><methods><class-id>External.DispParamConfiguration</class-id> <category>printing</category><body package="Com- Automation Trippy Extensions">printOn: aStream	param name printOn: aStream.	aStream nextPutAll: ': '.	value printOn: aStream.</body></methods><methods><class-id>External.DispParamConfiguration class</class-id> <category>instance creation</category><body package="Com- Automation Trippy Extensions">param: aParam value: aValue	^ self new 		param: aParam;		value: aValue;		yourself</body></methods><methods><class-id>External.SearchMatch</class-id> <category>accessing</category><body package="Com- Automation Browser">browserIcon	^ value browserIcon</body><body package="Com- Automation Browser">isBetterThan: aMatch	^ self quality &lt; aMatch quality</body><body package="Com- Automation Browser">quality	^quality</body><body package="Com- Automation Browser">quality: anObject	quality := anObject</body><body package="Com- Automation Browser">value	^value</body><body package="Com- Automation Browser">value: anObject	value := anObject</body><body package="Com- Automation Browser">valuePrintString	^ self value fullName</body></methods><methods><class-id>External.SearchMatch</class-id> <category>printing</category><body package="Com- Automation Browser">printString	^ self valuePrintString</body></methods><methods><class-id>External.SearchMatch class</class-id> <category>instance creation</category><body package="Com- Automation Browser">value: aValue quality: aNumber	^ self new		value: aValue;		quality: aNumber;		yourself</body></methods><methods><class-id>External.DispAliasTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation	| aStream headlineEmphasis |	headlineEmphasis := #(#underline).	aStream := TextStream on: String new.	aStream 		nextPutAllText: (Text string: self name emphasis: headlineEmphasis) , ' (' 				, self kindname , ')'.	aStream nextPutAll: ' = ' , actualType name;cr.	aStream nextPutAll: 'guid: ', guid printString;cr.	^aStream contents</body><body package="Com- Automation Shared Extensions">printStringForParamValue: aValue	^ actualType printStringForParamValue: aValue</body></methods><methods><class-id>External.DispAliasTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	^ actualType ifNotNil: [ aBlock value: actualType ]</body></methods><methods><class-id>External.DispAliasTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">stPointerRepresentation	^ actualType stPointerRepresentation</body><body package="Com- Automation Shared Extensions">stRepresentation	^ actualType stRepresentation</body></methods><methods><class-id>External.AutomationClassMember</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation	^member completeDocumentation</body><body package="Com- Automation Shared Extensions">printOn: aStream	(AutomationMemberReference member: self member implementor: self interface) printOn: aStream.</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>tools</category><body package="Com- Automation Shared Extensions">importedTypeLibs	| set |	set := Set new.	self containedTypeDescriptions do: [:typeDescription |		typeDescription referencedTypesDo: [:type |			type isUserdefined ifTrue: [ 				set add: type typelib  ]]].	set remove: self ifAbsent: [].	^ set</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>help</category><body package="Com- Automation Shared Extensions">openHelpIn: helpProvider 	helpProvider 			displayForFile: self helpFile 				context: self helpContextId 				lcid: self lcid 				ifFail: [ Dialog warn: (#NoHelpAvailable &lt;&lt; #com &gt;&gt; 'No help available')].</body></methods><methods><class-id>OS.Win32SystemSupport class</class-id> <category>private</category><body package="Com- Automation Shared Extensions">CreateProcess: aProgramNameString arguments: anArgumentString creationFlags: creationFlags workingDirectory: workingDirectory	"Create a new detached process with a specific argument list and creationFlags. 	Answer aCCompositePointer to a PROCESS_INFORMATION struct."	| interface startupInfo processInfo workDir progName args |	interface := self new.	startupInfo := interface STARTUPINFO gcMalloc.	self initializeStartupInfo: startupInfo.	processInfo := interface PROCESS_INFORMATION gcMalloc.	workDir := workingDirectory ifNil: [ nil ] ifNotNil: [:dir | dir gcCopyToHeapUnicode ].	progName := aProgramNameString ifNil: [ nil ] ifNotNil: [:aName | aName gcCopyToHeapUnicode ].	args := anArgumentString ifNil: [ nil ] ifNotNil: [:argString | argString gcCopyToHeapUnicode ].	interface		CreateProcess: progName		commandLine: args		pSecurity: nil		tSecurity: nil		inheritHandles: 0		creationFlags: creationFlags		environment: nil		currentDirectoryName: workDir 		startupInfo: startupInfo		processInfo: processInfo.	^processInfo</body></methods><methods><class-id>OS.Win32SystemSupport class</class-id> <category>utilities</category><body package="Com- Automation Shared Extensions">CreateProcess: aProgramNameString arguments: anArgumentString workingDirectory: workDir	"Create a new process with a specific argument list. 	Answer aCCompositePointer to a PROCESS_INFORMATION struct."	"self CreateProcess: nil arguments: 'notepad'"	^self		CreateProcess: aProgramNameString		arguments: anArgumentString		creationFlags: 0		workingDirectory: workDir		.</body><body package="Com- Automation Shared Extensions">openHtmlHelpFile: aFile context: context	"open the HTML Help file (chm) with the given context id."	| dir aString |	dir := aFile asFilename directory asAbsoluteFilename asString.	aString :=  'hh.exe '.	context ifNotNil: [ aString := aString,'-mapid ',context printString,' ' ].	aString := aString , ((aFile includes: $ ) ifTrue: [ '"', aFile, '"' ] ifFalse: [ aFile]).	"MS Office 2003 help files throw script errors and are lose format if the working 	 directory is not set to the file's directory"	^ self CreateProcess: nil arguments: aString workingDirectory: dir.</body><body package="Com- Automation Shared Extensions">openWinHelpFile: aFile context: context	| aString |	aString := (aFile includes: $ ) ifTrue: [ '"', aFile, '"' ] ifFalse: [ aFile].	context ifNotNil: [ aString := '-n ',context printString,' ',aString ].	^ self CreateProcess: nil arguments: 'winhelp ' , aString</body></methods><methods><class-id>External.DispModuleTypeSpec</class-id> <category>private browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	"do nothing"</body></methods><methods><class-id>External.DispModuleTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">stRepresentation	self halt.	^ 'Object'</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation	| aStream headlineEmphasis |	headlineEmphasis := #(#underline).	aStream := TextStream on: String new.	aStream 		nextPutAllText: (Text string: self name emphasis: headlineEmphasis) , ' (' 				, self kindname , ')'.	^aStream contents</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>help</category><body package="Com- Automation Shared Extensions">openHelpTypeLib: typeLibDescription in: helpProvider 	helpProvider displayForFile: self helpFile 				context: self helpContextId 				lcid: typeLibDescription lcid 				ifFail: [ Dialog warn: (#NoHelpAvailable &lt;&lt; #com &gt;&gt; 'No help available') ].</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	^ self subclassResponsibility</body><body package="Com- Automation Shared Extensions">type	"browser support - return the type which is myself"	^ self</body></methods><methods><class-id>Core.Object</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">emphasizedStRepresentationOn: aStream policy: aPolicy comment: comment 		aStream nextPutAll: self storeString.</body></methods><methods><class-id>External.DispSimpleTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">printStringForParamValue: aValue 	^self isString 		ifTrue: ['"' , (aValue ifNil: [''] ifNotNil: [aValue]) , '"']		ifFalse: [super printStringForParamValue: aValue ]</body><body package="Com- Automation Shared Extensions">printStringForPtrParamValue: aValue	^ self isVoid		ifTrue: [ '16r',aValue paddedBinaryPrintString]		ifFalse: [ super printStringForPtrParamValue: aValue ]</body><body package="Com- Automation Shared Extensions">vbParamTypeName	^ self isVariant 			ifTrue: [ 'Object' ]			ifFalse: [ super vbParamTypeName ]</body><body package="Com- Automation Shared Extensions">vbPtrTypeRepresentationPolicy: aPolicy on: aStream	^self isVoid		ifTrue: 			[aStream nextPutAllText: (aPolicy emphasizeVbKeyword: ' as ').			aStream nextPutAllText: (aPolicy emphasizeVBType: 'VoidPointer')]		ifFalse: [super vbPtrTypeRepresentationPolicy: aPolicy on: aStream]</body></methods><methods><class-id>External.DispRefTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">vbParamTypeName	^ referentType name</body></methods><methods><class-id>External.InterfaceTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">protocolFilterName	self subclassResponsibility</body><body package="Com- Automation Shared Extensions">stPointerRepresentation	| class |	class := COMInterface classForIID: self guid				ifNone: [self defaultInterfaceClass].	^class name</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>converting</category><body package="Com- Automation Shared Extensions">asTextEmphasis: anEmphasis	"Answer a Text whose string is the receiver."	^Text string: self emphasis: anEmphasis</body><body package="Com- Automation Shared Extensions">withFirstLowercase	| copy |	self isEmpty ifTrue: [ ^ self ].	self first isAlphabetic ifFalse: [^ self ].	self first isLowercase ifTrue: [ ^ self ].		copy := self copy.	copy at: 1 put: copy first asLowercase.	^ copy</body></methods><methods><class-id>External.CoclassDescriptor</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation		| aStream policy |	policy := DispSpecEmphasisPolicy default.	aStream := TextStream on: String new.	aStream nextPutAllText: super completeDocumentation.	aStream cr.	aStream		nextPutAll: self locale typeLibLanguageAndCountryString;		cr.	aStream		nextPutAll: 'Version: ' , self version;		cr.	self documentation		ifNotNil:			[aStream				nextPutAll: 'documentation: ' , self documentation;				cr].	self isCreatable		ifTrue:			[aStream				cr;				nextPutAllText:						(policy								emphasizeHeadline:									(#InstanceCreation &lt;&lt; #com &gt;&gt; 'Instance creation') asString);				cr.			aStream				nextPutAllText:						(COMDispatchDriver instanceCreationCodeFor: self emphasisPolicy: policy);				cr].	^aStream contents</body><body package="Com- Automation Shared Extensions">stPointerRepresentation	| class |	class := COMInterface classForIID: self guid ifNone: [IAnonymous].	^class name</body></methods><methods><class-id>External.PropertyAccessSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">emphasizedSmalltalkRepresentations	"return ST representations of this member"	^ self shouldNotImplement</body></methods><methods><class-id>External.PropertyAccessSpecification</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">emphasizedSTCode	self subclassResponsibility</body></methods><methods><class-id>External.PropertyAccessSpecification</class-id> <category>private-accessing</category><body package="Com- Automation Shared Extensions">typeName	^ self propertySpecification typeName</body></methods><methods><class-id>External.COMParameterDescription</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">emphasizedStRepresentationOn: aStream policy: aPolicy comment: comment	"print the emphasized Smalltalk representation of this parameter on the stream.	 If &lt;comment&gt; is set, add the parameter's name as a comment "	comment		ifTrue: 			[aStream nextPutAllText: (aPolicy emphasizeComment: '"' , self name , '" ')].	aStream nextPutAllText: (aPolicy				emphasizeStParam: '&lt;' , self type stRepresentation , (self isOptional								ifTrue: [' | &lt;1s&gt;&gt;' expandMacrosWith: Nothing name]								ifFalse: ['&gt;'])).	^aStream contents</body><body package="Com- Automation Shared Extensions">emphasizedStRepresentationPolicy: aPolicy 	"return a text containing the Smalltalk representation of this parameter"	| aStream |	aStream := TextStream on: String new.	self 		emphasizedStRepresentationOn: aStream		policy: aPolicy		comment: true.	^aStream contents</body><body package="Com- Automation Shared Extensions">emphasizedVbRepresentationPolicy: aPolicy	"return a text containing the VB representation of this parameter"	| aStream |	aStream := TextStream on: String new.	self isOptional		ifTrue: [aStream nextPutAllText: (aPolicy emphasizeVbKeyword: 'Optional ')].	self type isByref		ifTrue: [aStream nextPutAllText: (aPolicy emphasizeVbKeyword: 'Byref ')].	aStream nextPutAllText: (aPolicy emphasizeVbParamName: self name).	self type vbTypeRepresentationPolicy: aPolicy on: aStream.	self hasDefaultValue		ifTrue: 			[aStream				nextPutAllText: ' = ' , (aPolicy								emphasizeVBType: (self type printStringForParamValue: self defaultValue))].	^aStream contents</body></methods><methods><class-id>External.COMParameterDescription</class-id> <category>converting</category><body package="Com- Automation Shared Extensions">nonOptionalCopy	^ self copy		beOptional: false;		yourself</body></methods><methods><class-id>External.ConstantDescription</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">completeDocumentation	| policy stream |	policy := DispSpecEmphasisPolicy default.	stream := TextStream on: (String new: 20).	stream nextPutAllText: (policy emphasizeVbKeyword: 'Constant ').	stream nextPutAllText: (policy emphasizeVbConstantName: self name).	stream 		nextPutAllText: (policy emphasizeVbKeyword: ' = ' , self value printString).	^stream contents</body><body package="Com- Automation Shared Extensions">elementDocumentationOn: aStream using: aPolicy 	"print my element documentation on aStream using the given emphasisPolicy"	aStream		nextPutAllText: (aPolicy emphasizeVbConstantName: self name) , ' = ' 					, (aPolicy emphasizeNumberLiteral: self value printString).	self documentation ifNotNil: 			[:doc | 			aStream				tab;				nextPutAllText: (aPolicy emphasizeComment: '"' , doc , '"')]</body><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock		"Nothing to do for enum constants"	^ self</body></methods><methods><class-id>External.COMVTableMethodSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">resultValueForDisplay	"Return the resultvalue which should be used for displaying. Subclasses may override this behavior"	^ self lastParameterIsResultValue		ifTrue: [ self parameters last asReturnValueDescription] 			ifFalse: [ self resultValue ]</body></methods><methods><class-id>External.WindowsLocale</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">typeLibLanguageAndCountryString		| aString |	aString := #LanguageAndCountry &lt;&lt; #com &gt;&gt; 'Language: &lt;1s&gt; Country: &lt;2s&gt;'.	^aString		expandMacrosWithArguments:			(self id = 0				ifTrue: [Array with: 'Any' with: 'Any']				ifFalse:					[Array						with: self englishLanguageName						with: self englishCountryName])</body></methods><methods><class-id>External.AbstractCOMClient</class-id> <category>code generation</category><body package="Com- Automation Shared Extensions">getCodeForAccessingMemberNamed: memberName withParameters: params	^ (self specificationNamed: memberName asString ifNone: [^ nil ]) ifNotNil: [:member | member simplifiedGetCodeParams: params ].</body></methods><methods><class-id>External.COMDispatchEventSpecification</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">browserIcon	^ ListIconLibrary visualFor: #lightning</body></methods><methods><class-id>External.COMDispatchEventSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">emphasizedSmalltalkRepresentations	"return ST representations of this member"	^Array with: (COMDispatchDriver eventHandlerCodeName: self name params: self parameters emphasisUsing: self emphasisPolicy)</body></methods><methods><class-id>External.COMDispatchEventSpecification</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">stDocumentationOn: aStream headlineEmphasis: headlineEmphasis	aStream		nextPutAllText: ((#SmalltalkSyntax &lt;&lt; #com &gt;&gt; 'Smalltalk Syntax:') asString					asTextEmphasis: headlineEmphasis);		cr.	self emphasizedSmalltalkRepresentations do: [:aString |			aStream				nextPutAllText: aString;				cr].	aStream cr.	self getSpecification hasOptionalParameters		ifTrue: [aStream				nextPutAllText: (self emphasisPolicy							emphasizeComment: (#OptionalParametersCanBeOmitted &lt;&lt; #com									&gt;&gt; '*Optional parameters can be omitted from right to left') asString);				cr]</body></methods><methods><class-id>External.COMDispatchMethodSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">emphasizedSmalltalkRepresentations	"return ST representations of this member"	^Array with: (COMDispatchDriver 				methodInvokationCodeName: self name				params: self getSpecificationForDisplay parameters				emphasisUsing: self emphasisPolicy)</body></methods><methods><class-id>External.COMDispatchMethodSpecification</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">selectors	| names |	names := self parameters.	^ (0 to: self optionalParameterCount) collect: [:i |		COMDispatchDriver simplifiedMethodSelectorName: self name params: (names copyFrom: 1 to: names size- i) ].</body></methods><methods><class-id>External.COMDispatchMethodSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">simplifiedGetCode	^ self simplifiedGetCodeParams: self getSpecificationForDisplay parameters</body><body package="Com- Automation Shared Extensions">simplifiedGetCodeOptParamSupport	^ self simplifiedGetCodeWithOptParamsSupport: self getSpecificationForDisplay parameters</body><body package="Com- Automation Shared Extensions">simplifiedGetCodeParams: params		^COMDispatchDriver		simplifiedMethodInvokationCodeName: self name		params: params		emphasisUsing: self emphasisPolicy</body><body package="Com- Automation Shared Extensions">simplifiedGetCodeWithArgArray	^COMDispatchDriver simplyfiedMethodInvokationCodeWithArray: self name		emphasizeUsing: self emphasisPolicy</body><body package="Com- Automation Shared Extensions">simplifiedGetCodeWithOptParamsSupport: params		^COMDispatchDriver		simplifiedMethodInvokationCodeNamedParamSupport: self name		params: params		emphasisUsing: self emphasisPolicy</body><body package="Com- Automation Shared Extensions">simplifiedStRepresentations	"return ST representations of this member"	| result |	result := Array with: self simplifiedGetCode.	self hasOptionalParameters		ifTrue: [result := result copyWith: self simplifiedGetCodeOptParamSupport].	^(self parameters size &gt; 2 and: [self hasOptionalParameters])		ifTrue: [result copyWith: self simplifiedGetCodeWithArgArray]		ifFalse: [result]</body></methods><methods><class-id>External.COMDispatchMethodSpecification</class-id> <category>private-accessing</category><body package="Com- Automation Shared Extensions">typeName	^ self hasResultToDisplay ifTrue: [ 'Function' ] ifFalse: [ 'Sub' ]</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation	| aStream headlineEmphasis |	headlineEmphasis := #(#underline).	aStream := TextStream on: String new.	self vbDocumentatioOn: aStream headlineEmphasis: headlineEmphasis.	aStream		cr;		cr.	self stDocumentationOn: aStream headlineEmphasis: headlineEmphasis.	self		printDoc: self description		on: aStream		headlineEmphasis: headlineEmphasis.	^aStream contents</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">emphasisedName		"Answer the name of the receiver."	^ Text string: self name emphasis: self emphasisPolicy vbFuncNameEmphasis</body><body package="Com- Automation Shared Extensions">emphasisedTypeName	^ self emphasisPolicy emphasizeVbFuncName: self typeName</body><body package="Com- Automation Shared Extensions">emphasisPolicy	^ DispSpecEmphasisPolicy default</body><body package="Com- Automation Shared Extensions">emphasizedSmalltalkRepresentations	"return ST representations of this member"	^ self subclassResponsibility</body><body package="Com- Automation Shared Extensions">emphasizedVbParamRepresentation	| aStream |	aStream := TextStream on: String new.	self getSpecificationForDisplay parameters		do: [:aParam | aStream nextPutAllText: (aParam emphasizedVbRepresentationPolicy: self emphasisPolicy)]		separatedBy: [aStream nextPutAll: ', '].	^aStream contents</body><body package="Com- Automation Shared Extensions">emphasizedVbRepresentation	^self emphasisedTypeName , ' ' , self emphasisedName , '('		, self emphasizedVbParamRepresentation , ')'		, (self hasResultToDisplay				ifFalse: ['']				ifTrue: 					[self resultValueForDisplay						emphasizedVbRepresentationPolicy: self emphasisPolicy])</body><body package="Com- Automation Shared Extensions">hasResultToDisplay	"Answer whether I have a result type which can be displayed in the browser.	 Subclasses may override this behavior"	self subclassResponsibility</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">newReferenceContainer: aContainerType	^AutomationMemberReference element: self container: aContainerType</body><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	self subclassResponsibility</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">resultValueForDisplay	"Return the resultvalue which should be used for displaying. Subclasses may override this behavior"	^ self subclassResponsibility</body><body package="Com- Automation Shared Extensions">simplifiedStRepresentations	"return ST representations of this member with simplified syntax"	^ self subclassResponsibility</body><body package="Com- Automation Shared Extensions">stDocumentationOn: aStream headlineEmphasis: headlineEmphasis	aStream		nextPutAllText: ((#SmalltalkSyntax &lt;&lt; #com &gt;&gt; 'Smalltalk Syntax:') asString					asTextEmphasis: headlineEmphasis);		cr.	self emphasizedSmalltalkRepresentations do: 			[:aString |			aStream				nextPutAllText: aString;				cr].	aStream cr.	aStream		nextPutAll: (#SimplifiedSyntax &lt;&lt; #com &gt;&gt; 'Simplified Syntax:') asString;		cr.	self simplifiedStRepresentations do: 			[:aString |			aStream				nextPutAllText: aString;				cr].	aStream cr</body><body package="Com- Automation Shared Extensions">vbDocumentatioOn: aStream headlineEmphasis: headlineEmphasis	aStream		nextPutAllText: (Text string: 'Visual Basic representation:'					emphasis: headlineEmphasis);		cr.	aStream nextPutAllText: self emphasizedVbRepresentation</body></methods><methods><class-id>External.COMDispatchDriver class</class-id> <category>private code generation</category><body package="Com- Automation Shared Extensions">addOptionalNamedParameterCommentOn: aStream using: aPolicy	aStream		cr;		nextPutAllText: (aPolicy					emphasizeComment: (#OptionalParametersCanBeOmittedNamedParamsMustBeMarked							&lt;&lt; #com								&gt;&gt; '*Any optional NAMED parameters (must be marked with underscore) can be omitted irrespective of its position. This syntax also allows use of positioned parameters before the first named parameter usage.')								asString);		cr</body><body package="Com- Automation Shared Extensions">addOptionalParameterCommentOn: aStream using: aPolicy	aStream		cr;		nextPutAllText: (aPolicy					emphasizeComment: (#OptParamsCanBeOmittedOrReplacedWithNothing &lt;&lt; #com							&gt;&gt; '*Optional parameters can be omitted from right to left or represented as "Nothing"')								asString);		cr</body><body package="Com- Automation Shared Extensions">emphasizedArgCreationCodeForParams: params policy: aPolicy	| aStream emphasizedWith emphasizedArray |	aStream := TextStream on: String new.	emphasizedArray := Text string: 'Array' emphasis: aPolicy stClassEmphasis.	(params size &lt; 5) 		ifTrue: [			emphasizedWith := Text string: ' with: ' emphasis: aPolicy stSelectorEmphasis.			aStream nextPutAllText: (aPolicy emphasizeSelector: '('),emphasizedArray.			params do: [:param | aStream nextPutAllText: emphasizedWith ,(param emphasizedStRepresentationPolicy: aPolicy) ].			aStream nextPut: $) ]		ifFalse: [			aStream nextPutAllText: (aPolicy emphasizeParenthesis:'(('), emphasizedArray,(aPolicy emphasizeSelector: ' new: '), params size printString,')'.			params keysAndValuesDo: [:index :param | 				aStream nextPutAllText: (aPolicy emphasizeSelector: ' at: '), index printString ,(aPolicy emphasizeSelector: ' put: '), (param emphasizedStRepresentationPolicy: aPolicy),';' ].			aStream nextPutAll: 'yourself)' ].	^ aStream contents</body><body package="Com- Automation Shared Extensions">eventHandlerCodeName: aName params: params emphasisUsing: aPolicy	| aStream |	aStream := TextStream on: (String new).	aStream nextPutAllText: (aPolicy emphasizeStTempVar: 'aCOMDispatchDriver ').	aStream nextPutAllText: (Text string: 'when:' emphasis: aPolicy stSelectorEmphasis).	aStream nextPutAllText: (aPolicy emphasizeSymbol: ' #' , aName).	aStream nextPutAllText: (Text string: ' do: ' emphasis: aPolicy stSelectorEmphasis).	aStream nextPutAllText: '['.	params do: [:each | 			aStream nextPutAllText:  (aPolicy emphasizeStParam: ':', each name asLowercase,' ')].	params notEmpty ifTrue: [ aStream nextPutAllText: '| ' ].	aStream nextPutAllText: (aPolicy emphasizeComment: '"Code to be executed"').	aStream nextPutAllText: ']'.	^ aStream contents</body><body package="Com- Automation Shared Extensions">instanceCreationCodeFor: aCoclassType emphasisPolicy: aPolicy		| aStream |	aStream := TextStream on: String new.	aCoclassType progID ifNotNil: [:progID |		self instanceCreationCodeForProdId: progID comment: '"Version dependent"' on:			aStream policy: aPolicy ].	aCoclassType versionIndependentProgID ifNotNil: [:progID |		self instanceCreationCodeForProdId: progID comment: '"Version independent"' on:			aStream policy: aPolicy ].	^aStream contents</body><body package="Com- Automation Shared Extensions">instanceCreationCodeForProdId: aProgID comment: aString on: aStream policy: aPolicy		aStream		nextPutAllText: (aPolicy emphasizeStClass: self name) , ' ';		nextPutAllText:				(aPolicy emphasizeSelector: self instanceCreationSelector , ' ');		nextPutAllText: (aPolicy emphasizeStString: aProgID printString);		nextPutAll: ' ';		nextPutAllText: (aPolicy emphasizeComment: aString);		cr</body><body package="Com- Automation Shared Extensions">instanceCreationSelector	^ #createObject:</body><body package="Com- Automation Shared Extensions">invokationCode: keyword name: aName params: params additionalKeyword: subkeyWord emphasizeUsing: aPolicy	| emphasizedKeyword emphasizedSubKeyword emphasizedName |	emphasizedKeyword := Text string: keyword				emphasis: aPolicy stSelectorEmphasis.	emphasizedSubKeyword := Text string: subkeyWord				emphasis: aPolicy stSelectorEmphasis.	emphasizedName := aPolicy emphasizeStSymbol: ' #' , aName.	params isEmpty ifTrue: [^emphasizedKeyword , emphasizedName].	params size = 1		ifTrue: 			[^emphasizedKeyword , emphasizedName , ' ' , emphasizedSubKeyword , ' '				, (params first emphasizedStRepresentationPolicy: aPolicy)].	^emphasizedKeyword , emphasizedName		, (aPolicy emphasizeSelector: ' withArguments: ')			, (self emphasizedArgCreationCodeForParams: params policy: aPolicy)</body></methods><methods><class-id>External.COMDispatchDriver class</class-id> <category>code generation</category><body package="Com- Automation Shared Extensions">methodInvokationCodeName: aName params: params emphasisUsing: aPolicy	^self 		invokationCode: 'invokeMethod:'		name: aName		params: params		additionalKeyword: 'with:'		emphasizeUsing: aPolicy</body><body package="Com- Automation Shared Extensions">propertyGetCodeName: aName params: params emphasizeUsing:  emphasisPolicy	^self 		invokationCode: 'getProperty:'		name: aName		params: params		additionalKeyword: 'with:'		emphasizeUsing: emphasisPolicy</body><body package="Com- Automation Shared Extensions">propertyPutCodeName: aName params: params emphasizeUsing: emphasisPolicy	^self 		invokationCode: 'setProperty:'		name: aName		params: params		additionalKeyword: 'value:'		emphasizeUsing: emphasisPolicy</body><body package="Com- Automation Shared Extensions">simplifiedMethodInvokationCodeName: aName params: params emphasisUsing: aPolicy	^self 		simplyfiedInvokationCodePrefix: '' 		name: aName		params: params		emphasizeUsing: aPolicy</body><body package="Com- Automation Shared Extensions">simplifiedMethodInvokationCodeNamedParamSupport: aName params: params emphasisUsing: aPolicy	^self simplyfiedMethodInvokationCodeWithNamedParamSupportName: aName params: params emphasizeUsing: aPolicy</body><body package="Com- Automation Shared Extensions">simplifiedMethodSelectorName: aName params: params	^self simplyfiedSelectorPrefix: '' name: aName params: params</body><body package="Com- Automation Shared Extensions">simplifiedPropertyGetCodeName: aName params: params emphasisUsing: aPolicy	^self 		simplyfiedInvokationCodePrefix: 'get' 		name: aName		params: params		emphasizeUsing: aPolicy</body><body package="Com- Automation Shared Extensions">simplifiedPropertyPutCodeName: aName params: params emphasisUsing: aPolicy	^self 		simplyfiedInvokationCodePrefix: 'set' 		name: aName		params: params		emphasizeUsing: aPolicy</body></methods><methods><class-id>External.COMDispatchDriver class</class-id> <category>private code generation</category><body package="Com- Automation Shared Extensions">simplyfiedInvokationCodePrefix: aPrefix name: aName params: params emphasizeUsing: aPolicy	"Display the simplified syntax using indexed parameters for the given member "	| keyword aStream param memberName |	memberName := aPrefix , aName.	aStream := TextStream on: String new.	aStream nextPutAllText: (aPolicy emphasizeSelector: memberName).	params isEmpty ifTrue: [^aStream contents].	1 to: params size		do: 			[:index |			param := params at: index.			keyword := index = 1						ifTrue: [':']						ifFalse: [ ' ',param name withFirstLowercase , ':'].			aStream nextPutAllText: (aPolicy emphasizeSelector: keyword) , ' '.			"The parameter shall not display '| Nothing' here"			param emphasizedStRepresentationOn: aStream policy: aPolicy comment: (index =1)].	(params contains: [:each | each isOptional])		ifTrue: [self addOptionalParameterCommentOn: aStream using: aPolicy].	^aStream contents</body></methods><methods><class-id>External.COMDispatchDriver class</class-id> <category>code generation</category><body package="Com- Automation Shared Extensions">simplyfiedMethodInvokationCodeWithArray: aName emphasizeUsing: aPolicy	| keyword emphasizedKeyword aStream |	keyword := aName , COMCall withArgumentsSuffix.	emphasizedKeyword := aPolicy emphasizeSelector: keyword.	aStream := TextStream on: String new.	aStream nextPutAllText: emphasizedKeyword , ' '.	aStream		nextPutAllText: (aPolicy emphasizeStParam: '&lt;anArray | aDictionary&gt;').	aStream		cr;		nextPutAllText: (aPolicy					emphasizeComment: (#ArrayParameterExplaination &lt;&lt; #com							&gt;&gt; '* Parameters in arrays need to be passed in the correct order. Optional parameters can be omitted from right to left or by passing Nothing as parameter value. * When passing parameters as dictionary, please use the parameter names as keys. Optional parameters can be omitted by not adding entries for the these parameters.')								asString);		cr.	^aStream contents</body></methods><methods><class-id>External.COMDispatchDriver class</class-id> <category>private code generation</category><body package="Com- Automation Shared Extensions">simplyfiedMethodInvokationCodeWithNamedParamSupportName: aName params: params emphasizeUsing: aPolicy	"return the simplified syntax code with named parameter support for the given method "	| keyword aStream param |	aStream := TextStream on: String new.	aStream nextPutAllText: (aPolicy emphasizeSelector: aName).	params isEmpty ifTrue: [^aStream contents].	1 to: params size		do: 			[:index |			param := params at: index.			index &gt; 1 ifTrue: [aStream nextPut: $ ].			param isOptional ifTrue: [aStream nextPut: $[].			keyword := param isOptional						ifTrue: ['_' , param name , '_:']						ifFalse: 							[index = 1 ifTrue: [':'] ifFalse: [param name withFirstLowercase , ':']].			aStream nextPutAllText: (aPolicy emphasizeSelector: keyword) , ' '.			"The parameter shall not display '| Nothing' here"			param nonOptionalCopy				emphasizedStRepresentationOn: aStream				policy: aPolicy				comment: (index = 1 and: [ param isOptional not]).			param isOptional ifTrue: [aStream nextPut: $]]].	(params contains: #isOptional)		ifTrue: [self addOptionalNamedParameterCommentOn: aStream using: aPolicy].	^aStream contents</body><body package="Com- Automation Shared Extensions">simplyfiedSelectorPrefix: aPrefix name: aName params: params	| keyword selector param |	keyword := aPrefix , aName.	params isEmpty ifTrue: [^keyword asSymbol].	keyword := keyword , ':'.	selector := keyword.	2 to: params size		do: 			[:index |			param := params at: index.			selector := selector , param name withFirstLowercase , ':'].	^selector asSymbol</body></methods><methods><class-id>External.DispTypeSpec</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">membersNamed: aName	"return all members with the given name"	^ #()</body></methods><methods><class-id>External.DispTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">printStringForParamValue: aValue	^ aValue printString</body><body package="Com- Automation Shared Extensions">printStringForPtrParamValue: aValue	^ self printStringForParamValue: aValue</body><body package="Com- Automation Shared Extensions">stPointerRepresentation	"return the ST representation of a pointer type of myself"	^ self stRepresentation ,' [asValueReference]'</body><body package="Com- Automation Shared Extensions">stRepresentation	^ COMVariant stRepresentationFor: self typecode</body><body package="Com- Automation Shared Extensions">vbParamTypeName	^ self name ifNil: [ '&lt;unknown type&gt;' ]</body><body package="Com- Automation Shared Extensions">vbPtrTypeRepresentationPolicy: aPolicy on: aStream	self vbTypeRepresentationPolicy: aPolicy on: aStream.</body><body package="Com- Automation Shared Extensions">vbTypeRepresentationPolicy: aPolicy on: aStream	aStream nextPutAllText: (aPolicy emphasizeVbKeyword: ' as ').	aStream nextPutAllText: (aPolicy emphasizeVBType: self vbParamTypeName)</body></methods><methods><class-id>External.COMDispatchPropertySpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">emphasizedVbRepresentation	^super emphasizedVbRepresentation , ' '		, self attributeDescriptions asString</body><body package="Com- Automation Shared Extensions">hasResultToDisplay	^ self propertyGetSpecificationForDisplay hasResult</body></methods><methods><class-id>External.CArrayTypeSpec</class-id> <category>private printing</category><body package="Com- Automation Shared Extensions">printArrayBoundsOn: aStream 	aStream nextPut: $(.	self bounds do: [:bound | bound printVBBoundsOn: aStream]		separatedBy: [aStream  nextPutAll: ', '].	aStream nextPut: $)</body></methods><methods><class-id>External.CArrayTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">vbTypeRepresentationPolicy: aPolicy on: aStream	self printArrayBoundsOn: aStream.	aStream nextPutAllText: (aPolicy emphasizeVbKeyword: ' as ').	aStream nextPutAllText: (aPolicy emphasizeVBType: self vbParamTypeName)</body></methods><methods><class-id>Core.String</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">emphasizedStRepresentationOn: aStream policy: aPolicy comment: comment 		aStream nextPutAllText: (aPolicy emphasizeStString: self storeString).</body></methods><methods><class-id>External.ComponentElementDescription</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">completeDocumentation	| policy stream |	policy := DispSpecEmphasisPolicy default.	stream := TextStream on: (String new: 20).	self elementDocumentationOn: stream using: policy.	^stream contents</body><body package="Com- Automation Shared Extensions">elementDocumentationOn: aStream using: aPolicy	"print my element documentation on aStream using the given emphasisPolicy"	aStream nextPutAllText: (aPolicy emphasizeVbParamName: self name).	self type vbTypeRepresentationPolicy: aPolicy on: aStream.	self documentation		ifNotNil: 			[:doc |			aStream				tab;				nextPutAllText: (aPolicy emphasizeComment: '"' , doc , '"')]</body><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock		"Nothing to do for enum constants"	^ self type ifNotNil: [:aType | aBlock value: aType ]</body></methods><methods><class-id>External.TypeElementDescription</class-id> <category>testing</category><body package="Com- Automation Shared Extensions">isMethodOrPropertySpecification	"return whether I describe a function or property"	^ false</body></methods><methods><class-id>External.TypeElementDescription</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">newReferenceContainer: aContainerType	^AutomationElementReference element: self container: aContainerType</body><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	self subclassResponsibility</body></methods><methods><class-id>External.DispArrayTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">stRepresentation	^ 'Array of ', referentType stRepresentation</body><body package="Com- Automation Shared Extensions">vbTypeRepresentationPolicy: aPolicy on: aStream	aStream nextPutAllText: (aPolicy emphasizeVbKeyword: ' as ').	aStream nextPutAllText: (aPolicy emphasizeVBType: self name).	aStream nextPutAllText: (aPolicy emphasizeVbKeyword: ' of ').	aStream nextPutAllText: (aPolicy emphasizeVBType: self vbParamTypeName)</body></methods><methods><class-id>External.PropertySetAccessSpecification</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">emphasizedSTCode	^ COMDispatchDriver		propertyPutCodeName: self name		params: self parameters		emphasizeUsing: self emphasisPolicy</body></methods><methods><class-id>External.PropertySetAccessSpecification</class-id> <category>As yet unclassified</category><body package="Com- Automation Shared Extensions">simplifiedStRepresentation		^ COMDispatchDriver		simplifiedPropertyPutCodeName: self name		params: self parameters		emphasisUsing: self emphasisPolicy</body></methods><methods><class-id>External.AutomationOwnedReference class</class-id> <category>instance creation</category><body package="Com- Automation Shared Extensions">element: element container: aContainer	^ self new		element: element;		container: aContainer;		yourself</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>comparing</category><body package="Com- Automation Shared Extensions">= anObject	^ self class = anObject class and: [		anObject element = self element and: [			self container = anObject container ]]</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">browserIcon	^ element browserIcon</body><body package="Com- Automation Shared Extensions">completeDocumentation	^element completeDocumentation</body><body package="Com- Automation Shared Extensions">container	^container</body><body package="Com- Automation Shared Extensions">container: anObject	container := anObject</body><body package="Com- Automation Shared Extensions">element	^element</body><body package="Com- Automation Shared Extensions">element: anObject	element := anObject</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>comparing</category><body package="Com- Automation Shared Extensions">hash	^ (self element hash bitShift: 5) bitOr: (self container hash)</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>testing</category><body package="Com- Automation Shared Extensions">isConstant	"Answer whether this reference is some kind of constant. This is usually only true for Enumeration elements"	self subclassResponsibility</body><body package="Com- Automation Shared Extensions">isMethodOrPropertySpecification	self subclassResponsibility</body><body package="Com- Automation Shared Extensions">isMethodSpecification	^ self subclassResponsibility</body><body package="Com- Automation Shared Extensions">isPropertySpecification	^ self subclassResponsibility</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">name	^ element name</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>help</category><body package="Com- Automation Shared Extensions">openHelpClass: coclassDescription typeLib: typeLibDescription in: helpProvider 	^ element openHelpClass: coclassDescription typeLib: typeLibDescription in: helpProvider</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>testing</category><body package="Com- Automation Shared Extensions">showInNavigatorWithFlags: flags	"All elementes (struct, enum elements) are always displayed in the browser"	self subclassResponsibility</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">typeName	^ element typeName</body></methods><methods><class-id>External.DispPtrTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">printStringForParamValue: aValue	^ referentType printStringForPtrParamValue: aValue</body><body package="Com- Automation Shared Extensions">stRepresentation	^ referentType stPointerRepresentation</body><body package="Com- Automation Shared Extensions">vbTypeRepresentationPolicy: aPolicy on: aStream	referentType vbPtrTypeRepresentationPolicy: aPolicy on: aStream</body></methods><methods><class-id>External.COMDispatchMemberSpecification</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	self returnValueDescription ifNotNil: [:result | result type ifNotNil: [ aBlock value: result type] ].	self parameters do: [:param | param type ifNotNil: [:type | aBlock value: type] ].</body></methods><methods><class-id>External.COMDispatchMemberSpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">resultValueForDisplay	"Return the resultvalue which should be used for displaying. Subclasses may override this behavior"	^ self resultValue</body></methods><methods><class-id>External.COMDispatchMemberSpecification</class-id> <category>accessing</category><body package="Com- Automation Shared Extensions">selectors	^ self subclassResponsibility</body></methods><methods><class-id>External.DispObjectTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation	| aStream |	aStream := TextStream on: String new.	aStream nextPutAllText: super completeDocumentation.	aStream cr.	aStream nextPutAll: self guidName , ':' , self guid asString.	^aStream contents</body></methods><methods><class-id>External.DispObjectTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock 	^ self elements do: [:each | each referencedTypesDo: aBlock ]</body></methods><methods><class-id>External.GeneralPropertySpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">emphasizedSmalltalkRepresentations	"return ST representations of this member"	| coll |	coll := OrderedCollection new.	self subSpecificationsDo: [:spec | coll add: spec asDispatchSpecification emphasizedSTCode].	^coll</body><body package="Com- Automation Shared Extensions">emphasizedVbRepresentation	^self propertyGetSpecificationForDisplay emphasizedVbRepresentation , ' '		, self attributeDescriptions asString</body></methods><methods><class-id>External.GeneralPropertySpecification</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	self subSpecificationsDo: [:spec | spec referencedTypesDo: aBlock]</body></methods><methods><class-id>External.GeneralPropertySpecification</class-id> <category>private emphasised texts</category><body package="Com- Automation Shared Extensions">resultValueForDisplay	"Return the resultvalue which should be used for displaying. Subclasses may override this behavior"	^ self propertyGetSpecificationForDisplay resultValue</body><body package="Com- Automation Shared Extensions">simplifiedGetCodeParams: params		^ self propertyGetSpecificationForDisplay simplifiedStRepresentationParams: params</body><body package="Com- Automation Shared Extensions">simplifiedStRepresentations	"return ST representations of this member"	| coll |	coll := OrderedCollection new.	self subSpecificationsDo: 			[:spec |			coll add: spec asDispatchSpecification simplifiedStRepresentation].	^coll</body></methods><methods><class-id>External.DispEnumTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation	| aStream headlineEmphasis |	DispSpecEmphasisPolicy default.	headlineEmphasis := #(#underline).	aStream := TextStream on: String new.	aStream 		nextPutAllText: super completeDocumentation; cr;cr;		nextPutAllText: (Text string: 'Usage:' emphasis: headlineEmphasis); cr;		nextPutAll: 'Enumeration constants may be passed as numbers but also as symbols which do NOT include the enumeration name but only the name of the constant itself. Functions and Properties returning an Enumeration will return a ConstantDescription which can be compared with an integer or a symbol.'.	^aStream contents</body><body package="Com- Automation Shared Extensions">printStringForParamValue: aValue	^ (self constantForValue: aValue ifNone: [ ^ aValue printString ]) name</body></methods><methods><class-id>External.DispEnumTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock		"enums do not reference other types"	^ self</body></methods><methods><class-id>External.DispEnumTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">stRepresentation	^ 'anInteger'</body></methods><methods><class-id>External.DispComponentTypeSpec</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">completeDocumentation	| aStream headlineEmphasis policy |	policy := DispSpecEmphasisPolicy default.	headlineEmphasis := #(#underline).	aStream := TextStream on: String new.	aStream 		nextPutAllText: (Text string: self name emphasis: headlineEmphasis) , ' (' 				, self kindname , ')'.	aStream cr.	aStream nextPutAll: 'guid: ', (guid ifNil: [ '' ] ifNotNil: [ guid printString ]) ;cr.	self elements 		do: [:each | each elementDocumentationOn: aStream using: policy]		separatedBy: [aStream cr].	^aStream contents</body></methods><methods><class-id>External.DispComponentTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Shared Extensions">referencedTypesDo: aBlock	self elements do: [:each | each referencedTypesDo: aBlock ]</body></methods><methods><class-id>External.COMReturnValueDescription</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">emphasizedVbRepresentationPolicy: aPolicy 	^self carriesValue 		ifTrue: 			[(aPolicy emphasizeVbKeyword: ' as ') 				, (aPolicy emphasizeVBType: self vbTypeName)]		ifFalse: ['']</body></methods><methods><class-id>External.COMVariant class</class-id> <category>type description</category><body package="Com- Automation Shared Extensions">basicStRepresentationFor: type on: aStream oneElement: oneObject	| object |	object := self stRepresentations at: (self arrayElementTypeCodeOf: type) ifAbsent: [ Object].	object := object name.	oneObject		ifTrue: [ aStream nextPutAll: (object first isVowel ifTrue: [ 'an' ] ifFalse: [ 'a' ]) , object]		ifFalse: [ aStream nextPutAll: object, 's' ].</body></methods><methods><class-id>External.COMVariant class</class-id> <category>private computing</category><body package="Com- Automation Shared Extensions">computeSTTypeCodeRepresentations	| integer |	integer := Integer.		^ STRepresentations := Dictionary new		at: VT_INT put: integer;		at: VT_UINT put: Integer;		at: VT_I1 put: Integer;		at: VT_I2 put: Integer;		at: VT_I4 put: Integer;		at: VT_I8 put: LargeInteger;		at: VT_UI1 put: Integer;		at: VT_UI2 put: Integer;		at: VT_UI4 put: Integer;		at: VT_UI8 put: LargePositiveInteger;		at: VT_R4 put: Float;		at: VT_R8 put: Float;		at: VT_CY put: LimitedPrecisionReal;		at: VT_DATE put: Date;	"	at: VT_DECIMAL put: (#VBDecimal &lt;&lt; #com &gt;&gt;'Fixedpoint');  not yet supported"		at: VT_BOOL put: Boolean;		at: VT_BSTR put: String;		at: VT_LPSTR put: ByteString; 		at: VT_LPWSTR put: TwoByteString; 		at: VT_DISPATCH put: IDispatch;		at: VT_UNKNOWN put: IUnknown;		at: VT_VARIANT put: Object;		yourself</body></methods><methods><class-id>External.COMVariant class</class-id> <category>type description</category><body package="Com- Automation Shared Extensions">stRepresentationFor: aTypeCode 	| aStream |	aStream := (String new: 5) writeStream.	self stRepresentationFor: aTypeCode on: aStream.	^ aStream contents</body><body package="Com- Automation Shared Extensions">stRepresentationFor: aTypeCode on: aStream 	| isArray |	isArray := self isArrayType: aTypeCode.	isArray ifTrue: [aStream nextPutAll: 'an Array of '].	self 		basicStRepresentationFor: aTypeCode		on: aStream		oneElement: isArray not.</body></methods><methods><class-id>External.COMVariant class</class-id> <category>private-accessing</category><body package="Com- Automation Shared Extensions">stRepresentations	^ STRepresentations ifNil: [ self computeSTTypeCodeRepresentations ]</body></methods><methods><class-id>External.PropertyGetAccessSpecification</class-id> <category>printing</category><body package="Com- Automation Shared Extensions">emphasizedSTCode	^ COMDispatchDriver		propertyGetCodeName: self name		params: self parameters		emphasizeUsing: self emphasisPolicy</body></methods><methods><class-id>External.PropertyGetAccessSpecification</class-id> <category>error raising</category><body package="Com- Automation Shared Extensions">simplifiedStRepresentation		^ COMDispatchDriver		simplifiedPropertyGetCodeName: self name		params: self parameters		emphasisUsing: self emphasisPolicy</body><body package="Com- Automation Shared Extensions">simplifiedStRepresentationParams: paramters		^ COMDispatchDriver		simplifiedPropertyGetCodeName: self name		params: parameters		emphasisUsing: self emphasisPolicy</body></methods><methods><class-id>External.AutomationClassMember</class-id> <category>browser support</category><body package="Com- Automation Browser">createBrowserStateContainer: aMember	| state |	state := member createBrowserStateContainer: aMember.	state automationMember element: self.	^ state</body><body package="Com- Automation Browser">elementsNamed: aString container: container	| elements result |	elements := Set new.	self member name = aString		ifTrue: 			[elements				add: (AutomationMemberReference member: self implementor: container)].	result := self member elementsNamed: aString container: container.	"fix - methods/properties may be added twice"	result := result reject: [:each | each class = AutomationMemberReference and: [ each element = self member]].	elements addAll: result.	^elements</body></methods><methods><class-id>External.AutomationClassMember</class-id> <category>As yet unclassified</category><body package="Com- Automation Browser">needsDeferredCodeToolUpdate	^ member needsDeferredCodeToolUpdate</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>accessing</category><body package="Com- Automation Browser">basicDocumentation		| aStream headlineEmphasis |	headlineEmphasis := #(#underline).	aStream := TextStream on: String new.	aStream		nextPutAllText:				(Text						string: self printString						emphasis: headlineEmphasis);		cr.	aStream		nextPutAllText: 'Version: ' , self version;		cr.	aStream		nextPutAllText: 'Platform: ' , self platform;		cr.	aStream		nextPutAllText: 'GUID: ' , self guid asString;		cr.	aStream nextPutAll: self locale typeLibLanguageAndCountryString; cr.	aStream		nextPutAllText: 'Filename: ' , (self filename ifNil: ['']);		cr.	^aStream contents</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #closedBook</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>accessing</category><body package="Com- Automation Browser">completeDocumentation	| aStream libs |	aStream := TextStream on: String new.	aStream nextPutAllText: self basicDocumentation.	aStream nextPutAllText: 'imports: '.	libs := self importedTypeLibs.	libs isEmpty		ifTrue: [aStream nextPutAll: 'none']		ifFalse: 			[libs				do: [:typeLib | aStream nextPutAll: typeLib name , ' ' , typeLib version]				separatedBy: [aStream nextPutAll: ', ']].	^aStream contents</body><body package="Com- Automation Browser">createBrowserState	^ Refactory.Browser.AutomationNavigatorState new		libraryElement: nil;		typeLib: self;		yourself</body><body package="Com- Automation Browser">immediateCompleteDocumentation		| aStream  |	aStream := TextStream on: String new.	aStream nextPutAll: self basicDocumentation.	aStream nextPutAllText: 'imports:  ... are being calculated'.	^aStream contents</body><body package="Com- Automation Browser">implementorsOf: aName	| coll |	coll := Set new.	self containedTypeDescriptionsDo: [:typeDesc |		coll addAll: ((typeDesc membersNamed: aName) select: [:each | each isTypeSpecification not ])].	^ coll</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>testing</category><body package="Com- Automation Browser">needsDeferredCodeToolUpdate	^ true</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>accessing</category><body package="Com- Automation Browser">referencesTo: aType	| aCollection |	aCollection := OrderedCollection new.	self referencesTo: aType into: aCollection.	^ aCollection</body><body package="Com- Automation Browser">referencesTo: aType into: aCollection	self containedTypeDescriptions do:[:each |		each referencesTo: aType into: aCollection].</body><body package="Com- Automation Browser">versionStringForClassName	| tokens |	tokens := self versionTokensFromName				ifNil: [self versionTokens ifNil: [^'']].	^tokens first</body></methods><methods><class-id>External.TypeLibDescriptor</class-id> <category>private</category><body package="Com- Automation Browser">versionTokensFromName	| tokens |	tokens := self fullName tokensBasedOn: Character space.	^(tokens detect: [:token | token possiblyIsVersionNumber] ifNone: [ ^ nil])		tokensBasedOn: $.</body></methods><methods><class-id>External.DispUnionDescription</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationUnion</body><body package="Com- Automation Browser">protocolFilters	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	^(Array new: 1) at: 1		put: (ProtocolFilter key: (#elements &lt;&lt; #com &gt;&gt; 'elements') block: [:each | true]);				yourself</body></methods><methods><class-id>External.DispModuleTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationUnknownType</body><body package="Com- Automation Browser">possibleProtocolItems	"return all possible protocol items"	^ self elements collect: [:each | each newReferenceContainer: self]</body><body package="Com- Automation Browser">protocolFilters	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	^(OrderedCollection new)		add: (ProtocolFilter key: (#all &lt;&lt; #com &gt;&gt; 'all') block: [:each | true]);		add: (ProtocolFilter key: (#methods &lt;&lt; #com &gt;&gt; 'methods') 					block: [:each | each isMethodSpecification]);		add: (ProtocolFilter key: (#properties &lt;&lt; #com &gt;&gt; 'properties') 					block: [:each | each isPropertySpecification]);		add: (ProtocolFilter key: (#propertiesReadOnly &lt;&lt; #com &gt;&gt; 'properties [readonly]') 					block: [:each | each isPropertySpecification and: [each isReadOnly]]);		add: (ProtocolFilter key: (#propertiesWriteOnly &lt;&lt; #com &gt;&gt; 'properties [writeonly]') 					block: [:each | each isPropertySpecification and: [each isWriteOnly]]);		add: (ProtocolFilter key: (#constants &lt;&lt; #com &gt;&gt; 'constants') 					block: [:each | each isConstant]);		asArray</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ nil</body><body package="Com- Automation Browser">createBrowserState	^ Refactory.Browser.AutomationNavigatorState new		libraryElement: self;		typeLib: self typelib;		yourself</body><body package="Com- Automation Browser">explanation 	^(#CustomElementInTypeLib &lt;&lt; #com 		&gt;&gt; '&lt;1p&gt; is a custom &lt;2s&gt; defined in TypeLibrary &lt;3s&gt; &lt;4s&gt;.')			expandMacrosWith: self name			with: self kindname			with: self typelib name			with: self typelib version</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>accessing</category><body package="Com- Automation Browser">membersNamed: aName	"return all members with the given name"	^ self possibleProtocolItems select: [:each |		each name = aName ]</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>testing</category><body package="Com- Automation Browser">needsDeferredCodeToolUpdate	^ false</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>accessing</category><body package="Com- Automation Browser">possibleProtocolItems	self subclassResponsibility</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">protocolFilters	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	^ #()</body><body package="Com- Automation Browser">referencesTo: aType into: aCollection	"Add References to the given type to &lt;aCollection&gt;"	self referencedTypesDo: [:each |		(each derivesFromType: aType) ifTrue: [ ^ aCollection add: self ] ].</body></methods><methods><class-id>External.DispUserDefTypeSpec</class-id> <category>testing</category><body package="Com- Automation Browser">showInBrowser	^ (self isControl or: [self isHidden ]) not or: [self isCoclass]</body></methods><methods><class-id>External.DispRefTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">elementsNamed: aString into: anOrderedCollection	"put all elements with the given name into the given collection"	^ referentType elementsNamed: aString into: anOrderedCollection</body></methods><methods><class-id>External.CoclassDescriptor</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationCoclass</body><body package="Com- Automation Browser">protocolFilters	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	^ ( self dispatchInterfaces collect: [:each | ProtocolFilter key: each protocolFilterName block: [:spec | spec interface = each ]]).</body><body package="Com- Automation Browser">protocolFiltersFor: aNavigator	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	| interfaces |	interfaces := (aNavigator displayFlags anySatisfy: [:each | #(#showMethods #showProperties) includes: each ])		ifTrue: [ self implementedInterfaces ]		ifFalse:[  #() ].	interfaces := interfaces, ((aNavigator displayFlags includes: #showEvents)		ifTrue: [ self eventDispatchInterfaces ]		ifFalse:[  #() ]).	^ interfaces collect: [:each | ProtocolFilter key: each protocolFilterName block: [:spec | spec interface = each ]]</body><body package="Com- Automation Browser">showMember: element inBrowserWithFlags: flags	^ element showInNavigatorWithFlags: flags</body></methods><methods><class-id>External.CoclassDescriptor</class-id> <category>accessing</category><body package="Com- Automation Browser">suggestedAutomationClassName	^(self typelib		ifNil: ['']		ifNotNil: [:typeLib | typeLib shortName capitalized , typeLib versionStringForClassName])			, self name capitalized</body></methods><methods><class-id>Tools.EntryWithPasteButtonModule class</class-id> <category>instance creation</category><body package="Com- Automation Browser">forAutomationClasses	^self new pasteBlock: [self selectAutomationClass]</body></methods><methods><class-id>Tools.EntryWithPasteButtonModule class</class-id> <category>private</category><body package="Com- Automation Browser">selectAutomationClass	^IncrementalSearchDialog selectAutomationClass		ifNotNil: [:class | class fullName]</body></methods><methods><class-id>External.COMParameterDescription</class-id> <category>browser support</category><body package="Com- Automation Browser">createBrowserState	^ nil</body><body package="Com- Automation Browser">createBrowserStateContainer: aMemberReference	"Return a state used to browse this element in a full AutomationBrowser. We do not want to 	browse parameters separately, therefore return nil here"	^ nil</body><body package="Com- Automation Browser">explanationUsing: automationMemberReference 	^(#IAmAParameter &lt;&lt; #com &gt;&gt; '&lt;1p&gt; is a parameter of &lt;2s&gt; &lt;3s&gt;.')		expandMacrosWith: self name		with: automationMemberReference typeName		with: automationMemberReference name</body></methods><methods><class-id>Tools.IncrementalSearchDialog class</class-id> <category>private</category><body package="Com- Automation Browser">createDialogIconSelector: iconSelector toStringSelector: toStringSelector forCollection: aCollection filterBlock: filterBlock title: lastTitle		| dialog |	dialog := self forSelectionFrom: aCollection filterBlock: filterBlock.	dialog		objectToStringBlock: [:member | member perform: toStringSelector];		displayStringSelector: toStringSelector;		iconBlock: [:member | member perform: iconSelector];		firstLabel: #FilterC &lt;&lt; #browser &gt;&gt; 'Filter:';		windowLabel:				lastTitle , ' '						, (#StillPopulating &lt;&lt; #com &gt;&gt; '(Still populating)') asString.	^dialog</body></methods><methods><class-id>Tools.IncrementalSearchDialog class</class-id> <category>dialog opening-predefined</category><body package="Com- Automation Browser">selectAutomationClass	^self selectAutomationClass: (#ClassC &lt;&lt; #labels &gt;&gt; 'Class:')</body><body package="Com- Automation Browser">selectAutomationClass: aUserMessageOrString 	"self selectClass: 'Browse class:' "	| dialog |	dialog := self new 		module: (IncrementalSearchModule forAutomationClassSelection: aUserMessageOrString);		requireSelection: true.	^dialog select</body><body package="Com- Automation Browser">selectWithBackgroundSearch: searchBlock collection: aCollection filter: filterBlock windowTitle: windowTitle toStringSelector: toStringSelector iconSelector: iconSelector selectMultiple: selectMultiple		| members result dialog cancel nothingFound |	members := aCollection.	cancel := false asValue.	nothingFound := false asValue.	dialog := self createDialogIconSelector: iconSelector toStringSelector:			toStringSelector forCollection: aCollection filterBlock: filterBlock title: windowTitle.	self startBackgroundSearch: searchBlock into: aCollection forDialog:			dialog windowTitle: windowTitle noteNothingFoundIn: nothingFound		cancelValue: cancel.	self startDialogUpdateProcess: dialog collection: members cancelHolder:			cancel.	[result := selectMultiple		ifTrue: [dialog selectMultiple]		ifFalse: [dialog select]]		ensure:			["ask the search process to terminate"			cancel value: true].	"If the Dialog was explicirtely cancelled we raise an exception so the caller can react on this"	"Check whether the Dialog was explicitely canceled and raise a notification in this case"	(((selectMultiple and: [result isEmpty])		or: [selectMultiple not and: [result isNil]])		and: [nothingFound value not])		ifTrue: [EventNotification raiseWith: #cancel].	^result</body><body package="Com- Automation Browser">startBackgroundSearch: searchBlock into: aCollection forDialog: dialog windowTitle: windowTitle noteNothingFoundIn: nothingFound cancelValue: cancel		[searchBlock value: aCollection value: cancel.	cancel value		ifFalse:			[cancel value: true.			aCollection isEmpty				ifTrue:					[nothingFound value: true.					dialog closeCancel]				ifFalse:					[dialog builder						ifNotNil:							[:abuilder | abuilder window ifNotNil: [:win | win label: windowTitle]]]]]		forkAt: Kernel.ProcessorScheduler.UserBackgroundPriority</body></methods><methods><class-id>Tools.IncrementalSearchDialog class</class-id> <category>private</category><body package="Com- Automation Browser">startDialogUpdateProcess: dialog collection: members cancelHolder: cancel		[[cancel value]		whileFalse:			[| listSize |			listSize := members size.			(Delay forSeconds: 2) wait.			listSize ~= members size ifTrue: [dialog module refreshList]]] fork</body></methods><methods><class-id>External.ConstantDescription</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationEnumConst</body></methods><methods><class-id>External.AbstractCOMClient</class-id> <category>user interface</category><body package="Com- Automation Browser">browse	"Create and schedule a system class browser on the class of the object."	Refactory.Browser.RefactoringBrowser 		openOnEnvironment: Refactory.Browser.AutomationBrowserEnvironment new		type: #Automation 		state: self createBrowserState.</body><body package="Com- Automation Browser">createBrowserState	^ self type createBrowserState</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>testing</category><body package="Com- Automation Browser">isAutomationState	^ false</body></methods><methods><class-id>External.COMDispatchEventSpecification</class-id> <category>testing</category><body package="Com- Automation Browser">showInNavigatorWithFlags: newFlags	^ newFlags includes: #showEvents</body></methods><methods><class-id>External.COMDispatchMethodSpecification</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationFunction</body></methods><methods><class-id>External.COMDispatchMethodSpecification</class-id> <category>testing</category><body package="Com- Automation Browser">showInNavigatorWithFlags: newFlags	^ newFlags includes: #showMethods</body></methods><methods><class-id>External.DispTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">createBrowserState	^ nil</body><body package="Com- Automation Browser">elementsNamed: aString	"return all elements with the given name"	| aCollection |	aCollection := Set new.	self	elementsNamed: aString into: aCollection.	^ aCollection</body><body package="Com- Automation Browser">elementsNamed: aString into: anOrderedCollection	"put all elements with the given name into the given collection"	self name = aString ifTrue: [ anOrderedCollection add: self ].</body><body package="Com- Automation Browser">explanation 	^(#IAmAPredefinedAutomationType &lt;&lt; #com 		&gt;&gt; '&lt;1p&gt; is a predefined Automation type.') expandMacrosWith: self name</body></methods><methods><class-id>External.DispTypeSpec</class-id> <category>testing</category><body package="Com- Automation Browser">isTypeSpecification	^ true</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ self subclassResponsibility</body><body package="Com- Automation Browser">createBrowserState	"We just browse this function - so creating a new browser state for opening a browser 	 is not useful. Therefore we return nil to say there is nothing to browse"	^ nil</body><body package="Com- Automation Browser">createBrowserStateContainer: aType	^ Refactory.Browser.AutomationNavigatorState new			typeLib: aType typelib;			libraryElement: aType;			automationProtocols: aType protocolFilters;			automationMember: (AutomationMemberReference member: self implementor: aType);			yourself</body><body package="Com- Automation Browser">elementsNamed: aString container: anImplementor	self subclassResponsibility</body><body package="Com- Automation Browser">explanationUsing: aTypeDescription 	^(#IAmAMember1sDefinedIn2s &lt;&lt; #com &gt;&gt; '&lt;1p&gt; is a &lt;2s&gt; defined in &lt;3s&gt;.')		expandMacrosWith: self name		with: self typeName		with: aTypeDescription fullName</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>error raising</category><body package="Com- Automation Browser">needsDeferredCodeToolUpdate	^ false</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>help</category><body package="Com- Automation Browser">openHelpClass: coclassDescription typeLib: typeLibDescription in: helpProvider 	| typeInfo docs helpFile helpContextId |	typeLibDescription withTypeLibDo: 			[:typeLib | 			typeInfo := coclassDescription asTypeInfoUsing: typeLib.			docs := typeInfo getDocumentation: self memberID.			helpFile := (docs at: 'helpFile') 						ifNil: [^Dialog warn: #NoHelpAvailable &lt;&lt; #com &gt;&gt; 'No help available'].			helpContextId := docs at: 'helpContextID'.			helpProvider 				displayForFile: helpFile				context: helpContextId				lcid: typeLibDescription lcid				ifFail: [Dialog warn: #NoHelpAvailable &lt;&lt; #com &gt;&gt; 'No help available']]</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>testing</category><body package="Com- Automation Browser">showInNavigatorWithFlags: newFlags	^ self subclassResponsibility</body></methods><methods><class-id>Core.String</class-id> <category>testing</category><body package="Com- Automation Browser">containsInteger	^self isEmpty not and: [self allSatisfy: [:char | char isDigit]]</body><body package="Com- Automation Browser">possiblyIsVersionNumber	| tokens |	self containsInteger ifTrue: [^true].	tokens := self tokensBasedOn: $..	tokens size = 2 ifFalse: [^false].	^tokens allSatisfy: [:token | token containsInteger]</body></methods><methods><class-id>External.DispStructureSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationStruct</body><body package="Com- Automation Browser">protocolFilters	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	^(Array new: 1) at: 1		put: (ProtocolFilter key:(#elements &lt;&lt; #com &gt;&gt; 'elements') block: [:each | true]);				yourself</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing</category><body package="Com- Automation Browser">defaultSourceCodeToolClass	^BrowserCodeTool</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>menus</category><body package="Com- Automation Browser">menuBarFor: aBrowser	^ aBrowser defaultMenuBar</body></methods><methods><class-id>External.ComponentElementDescription</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationComponent</body><body package="Com- Automation Browser">elementsNamed: aString into: aCollection container: aContainer 	super elementsNamed: aString into: aCollection container: aContainer .	self type elementsNamed: aString into: aCollection</body></methods><methods><class-id>External.TypeElementDescription</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationUnknownType</body><body package="Com- Automation Browser">createBrowserStateContainer: aContainer	^ Refactory.Browser.AutomationNavigatorState new		libraryElement: aContainer;		typeLib: aContainer typelib;		automationProtocols: aContainer  protocolFilters;		automationMember: (AutomationElementReference element: self container: aContainer);		yourself</body><body package="Com- Automation Browser">elementsNamed: aString container: container	| aSet |	aSet := Set new.	self elementsNamed: aString into: aSet container: container.	^ aSet</body><body package="Com- Automation Browser">elementsNamed: aString into: aCollection container: aContainer 	self name = aString  ifTrue: [aCollection add: 		(AutomationElementReference element: self container: aContainer)].</body><body package="Com- Automation Browser">explanationUsing: aTypeDescription 	^(#IsElementOf &lt;&lt; #com &gt;&gt; '&lt;1p&gt; is a element of &lt;2s&gt;.')		expandMacrosWith: self name		with: aTypeDescription fullName</body></methods><methods><class-id>External.TypeElementDescription</class-id> <category>As yet unclassified</category><body package="Com- Automation Browser">needsDeferredCodeToolUpdate		^ false</body></methods><methods><class-id>External.TypeElementDescription</class-id> <category>help support</category><body package="Com- Automation Browser">openHelpClass: type typeLib: typeLibDescription in: helpProvider	helpProvider 				displayForFile: (self docs at: 'helpFile')				context: (self docs at: 'helpContextID')				lcid: typeLibDescription lcid				ifFail: [Dialog warn: #NoHelpAvailable &lt;&lt; #com &gt;&gt; 'No help available']</body></methods><methods><class-id>External.AutomationOwnedReference</class-id> <category>accessing</category><body package="Com- Automation Browser">createBrowserState	^ element createBrowserStateContainer: container</body><body package="Com- Automation Browser">elementsNamed: aString	"return all elements with the given name"	^ element elementsNamed: aString container: container</body><body package="Com- Automation Browser">explanation	^ element explanationUsing: container</body></methods><methods><class-id>Tools.IncrementalSearchModule class</class-id> <category>private</category><body package="Com- Automation Browser">findClassesMatching: aString in: aCollection	| pattern results nameSelector |	pattern := aString trimBlanks.	pattern isEmpty ifTrue: [^Array new].	pattern := pattern , '*'.	nameSelector := (pattern includes: $.) ifTrue: [#fullName] ifFalse: [#name].	results := OrderedCollection new: 100.	aCollection do: 			[:each |			(pattern match: (each perform: nameSelector)) ifTrue: [results add: each]].	^results		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString]</body></methods><methods><class-id>Tools.IncrementalSearchModule class</class-id> <category>instance creation-predefined</category><body package="Com- Automation Browser">forAutomationClassSelection: prompt	"Answer a module that allows to select an existing class with search by a partial name."	| instance aCollection |	instance := self new.	aCollection := Examples.AutomationApplication withAllSubclasses.	instance 		firstLabel: prompt;		secondLabel: #ClassesC &lt;&lt; #labels &gt;&gt; 'Classes:';		searchBlock: [:string | self findClassesMatching: string in: aCollection];		objectToStringBlock: [:class | class name asString];		displayStringSelector: #toolListDisplayString;		iconSelector: #toolListIcon.	^instance</body></methods><methods><class-id>External.COMDispatchMemberSpecification</class-id> <category>browser support</category><body package="Com- Automation Browser">elementsNamed: aString container: anImplementor	| elements memberRef |	elements := Set new.	memberRef := AutomationMemberReference member: self actualMember				implementor: anImplementor.	self name = aString ifTrue: [elements add: memberRef].	self resultValue		ifNotNil: [:result | result elementsNamed: aString into: elements member: memberRef].	self parameters		do: [:param | param elementsNamed: aString into: elements member: memberRef].	^elements</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment class</class-id> <category>instance creation</category><body package="Com- Automation Browser">comToolsaveDo: aBlock	^aBlock on: COMDevelopmentWarning do: [:ex | ex resume]</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>accessing</category><body package="Com- Automation Browser">stateClass	^ NavigatorState</body></methods><methods><class-id>External.DispObjectTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationInterface</body><body package="Com- Automation Browser">possibleProtocolItems	"return all possible protocol items"	^ self methods collect: [:each | AutomationMemberReference member: each implementor: self ]</body><body package="Com- Automation Browser">protocolFilters	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	^(OrderedCollection new)		add: (ProtocolFilter key: (#all &lt;&lt; #com &gt;&gt; 'all') block: [:each | true]);		add: (ProtocolFilter key:(#methods &lt;&lt; #com &gt;&gt; 'methods') 					block: [:each | each isMethodSpecification]);		add: (ProtocolFilter key:(#properties &lt;&lt; #com &gt;&gt; 'properties') 					block: [:each | each isPropertySpecification]);		add: (ProtocolFilter key:(#propertiesReadOnly &lt;&lt; #com &gt;&gt; 'properties [readonly]') 					block: [:each | each isPropertySpecification and: [each isReadOnly]]);		add: (ProtocolFilter key:(#propertiesWriteOnly &lt;&lt; #com &gt;&gt; 'properties [writeonly]') 					block: [:each | each isPropertySpecification and: [each isWriteOnly]]);		asArray</body><body package="Com- Automation Browser">referencesTo: aType into: aCollection 	self possibleProtocolItems do: 			[:each | 			each referencedTypesDo: 					[:type | 					(type derivesFromType: aType)						ifTrue: 							[aCollection add: each]]]</body><body package="Com- Automation Browser">showMember: element inBrowserWithFlags: flags	^ true</body></methods><methods><class-id>External.GeneralPropertySpecification</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationEnumConst</body><body package="Com- Automation Browser">elementsNamed: aString container: anImplementor	| res |	res := Set new.	self subSpecificationsDo: 			[:spec |			res addAll: (spec elementsNamed: aString container: anImplementor)].	^res</body></methods><methods><class-id>External.GeneralPropertySpecification</class-id> <category>testing</category><body package="Com- Automation Browser">showInNavigatorWithFlags: newFlags	^ newFlags includes: #showProperties</body></methods><methods><class-id>External.DispEnumTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationEnum</body><body package="Com- Automation Browser">possibleProtocolItems	"return all possible protocol items"	^self constants values collect: [:each | AutomationElementReference element: each container: self ]</body><body package="Com- Automation Browser">protocolFilters	"Return a collection with associations whose keys are the names of the protocols	 and the values filter blocks which return true or false for each element"	^(Array new: 1) at: 1		put: (ProtocolFilter key: (#constants &lt;&lt; #com &gt;&gt; 'constants') block: [:each | each isConstant]);				yourself</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>navigator accessing</category><body package="Com- Automation Browser">automationElement	^ self state isAutomationState 		ifTrue: [ self state automationMember ifNil: [ self state libraryElement ifNil: [ self state typeLib ]]]		ifFalse: [ nil ]</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>accessing</category><body package="Com- Automation Browser">defaultSourceCodeToolClass	^ navigator defaultSourceCodeToolClass</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>navigator accessing</category><body package="Com- Automation Browser">typeLib	^ self state isAutomationState 		ifTrue: [self state typeLib ]		ifFalse: [ nil ]</body></methods><methods><class-id>External.DispComponentTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">elementsNamed: aString into: anOrderedCollection 	"put all elements with the given name into the given collection"	super elementsNamed: aString into: anOrderedCollection.	self elements do: 			[:each | each elementsNamed: aString into: anOrderedCollection container: self ]</body><body package="Com- Automation Browser">possibleProtocolItems	"return all possible protocol items"	^self elements collect: [:each | AutomationElementReference element: each container: self ]</body></methods><methods><class-id>External.COMReturnValueDescription</class-id> <category>browser support</category><body package="Com- Automation Browser">elementsNamed: aString into: anOrderedCollection member: memberReference 	self name = aString 		ifTrue: 			[anOrderedCollection add: (AutomationElementReference element: self						memberReference: memberReference)].	^self type elementsNamed: aString into: anOrderedCollection</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>interface opening</category><body package="Com- Automation Browser">openOnEnvironment: anEnvironment type: aNavigatorTypeSymbol state: aState	^self 		openOnEnvironment: anEnvironment		withSelection: aState</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu</category><body package="Com- Automation Browser">automationMenuBar	| menu |	menu := Menu new.	menu		addItem: ((MenuItem labeled: (#_Browser &lt;&lt; #browser &gt;&gt; '&amp;Browser'))					nameKey: #Browser;					submenu: (self buildTopLevelMenuFrom: #automationBrowserMenu);					yourself);		addItem: ((MenuItem labeled: (#_View &lt;&lt; #browser &gt;&gt; '&amp;View'))					nameKey: #View;					submenu: (self buildTopLevelMenuFrom: #viewMenu);					yourself).	navigator windowMenuItems do: 			[:each | 			menu addItem: ((MenuItem labeled: each key)						nameKey: (each key copyWithout: $&amp;) asSymbol;						submenu: each value;						yourself)].	menu		addItem: ((MenuItem labeled: (#Help &lt;&lt; #browser &gt;&gt; 'Help'))					nameKey: #Help;					submenu: (self buildTopLevelMenuFrom: #helpMenu);					yourself).	menu 		augmentFrom: self class		to: BrowserApplicationModel		menuName: #menuBar		for: self.	^menu</body><body package="Com- Automation Browser">defaultMenuBar	| menu |	menu := Menu new.	menu		addItem:				((MenuItem labeled: #_Browser &lt;&lt; #browser &gt;&gt; '&amp;Browser')						nameKey: #Browser;						submenu: (self buildTopLevelMenuFrom: #browserMenu);						yourself);		addItem:				((MenuItem labeled: #_Edit &lt;&lt; #browser &gt;&gt; '&amp;Edit')						nameKey: #Edit;						submenu: [self currentToolset menu value];						yourself);		addItem:				((MenuItem labeled: #_Find &lt;&lt; #browser &gt;&gt; '&amp;Find')						nameKey: #Find;						submenu: (self buildTopLevelMenuFrom: #findMenu);						yourself);		addItem:				((MenuItem labeled: #_View &lt;&lt; #browser &gt;&gt; '&amp;View')						nameKey: #View;						submenu: (self buildTopLevelMenuFrom: #viewMenu);						yourself).	navigator windowMenuItems		do:			[:each | 			menu				addItem:					((MenuItem labeled: each key)						nameKey: (each key copyWithout: $&amp;) asSymbol;						submenu: each value;						yourself)].	menu		addItem:				((MenuItem labeled: #Tools &lt;&lt; #browser &gt;&gt; 'Tools')						nameKey: #Tools;						submenu: (self buildTopLevelMenuFrom: #toolsMenu);						yourself);		addItem:				((MenuItem labeled: #Help &lt;&lt; #browser &gt;&gt; 'Help')						nameKey: #Help;						submenu: (self buildTopLevelMenuFrom: #helpMenu);						yourself).	menu		augmentFrom: self class		to: BrowserApplicationModel		menuName: #menuBar		for: self.	^menu</body><body package="Com- Automation Browser">menuBar	^ self navigator menuBarFor: self</body></methods><methods><class-id>External.DispAliasTypeSpec</class-id> <category>browser support</category><body package="Com- Automation Browser">browserIcon	^ ListIconLibrary visualFor: #automationAlias</body><body package="Com- Automation Browser">elementsNamed: aString into: anOrderedCollection	"put all elements with the given name into the given collection"	super elementsNamed: aString into: anOrderedCollection.	actualType elementsNamed: aString into: anOrderedCollection.</body></methods><methods><class-id>External.DispAliasTypeSpec</class-id> <category>accessing</category><body package="Com- Automation Browser">possibleProtocolItems	^ #()</body></methods><methods><class-id>Core.Object</class-id> <category>printing</category><body package="Com- Automation Trippy Extensions">explain: aString for: aModel	^ Explainer explain: aString for: aModel</body><body package="Com- Automation Trippy Extensions">safePrintStringForInspector	^ Tools.Trippy.Inspector safeBasicPrintStringOf: self</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>menu messages</category><body package="Com- Automation Trippy Extensions">explainFor: aModel	"Evaluate the current text selection as an expression."	self maybeSelectCurrentWord.	self hasRangeSelection ifTrue: 		[performer explain: self selection for: aModel]</body></methods><methods><class-id>External.COMParameterDescription</class-id> <category>converting</category><body package="Com- Automation Trippy Extensions">asAssignmentValue: aValue	^ DispParamConfiguration param: self value: aValue</body></methods><methods><class-id>Tools.Trippy.DictionaryInspector</class-id> <category>private</category><body package="Com- Automation Trippy Extensions">superRefresh	"bypass the method in this class calling the super implementation"	^ super refresh</body></methods><methods><class-id>External.AbstractCOMClient</class-id> <category>private</category><body package="Com- Automation Trippy Extensions">informAboutPropSetFail: anException	| text |	text := self isValid 		ifTrue: [((#AnExceptionOccuredWhileSettingProperty1s &lt;&lt; #com &gt;&gt; 'An exception occured while setting the property: &lt;n&gt;&lt;1s&gt;') expandMacrosWith: anException description) ]		ifFalse: [ self comClientInvalidMessage asString].		Dialog warn: text.	^ nil.</body></methods><methods><class-id>External.AbstractCOMClient</class-id> <category>user interface</category><body package="Com- Automation Trippy Extensions">inspectorClasses	^ self specificationPolicy providesFullSpecificationTables			ifTrue: [ self accessor driverInspectorClasses ]			ifFalse: [ super inspectorClasses ]</body><body package="Com- Automation Trippy Extensions">inspectorExtraAttributes	| properties dict |	properties := self accessor nonUnknownParameterlessPropertySpecs.	dict := Dictionary new.	properties do: [:each |		dict at: each name put: each ].	properties := dict values				asSortedCollection: [:propA :propB | propA name &lt; propB name].	^properties collect: 			[:propSpec | 			Tools.Trippy.ExtDerivedAttribute 				label: propSpec name				getBlock: 					[[self getProperty: propSpec name] on: Error do: [:ex | ex return: nil]]				setBlock: 					[:value | 					[self setProperty: propSpec name value: value] on: Error						do: [:ex | self informAboutPropSetFail: ex]]				textBlock: [self inspectorTextForProperty: propSpec]]</body><body package="Com- Automation Trippy Extensions">inspectorTextForProperty: propSpec 	| result |	^	[result := self getProperty: propSpec name.	result printString] on: Error			do: [:ex | self textForException: ex]</body></methods><methods><class-id>External.AbstractCOMClient</class-id> <category>private</category><body package="Com- Automation Trippy Extensions">textForException: anException 	^Text 		string: '"' , (self isValid 						ifFalse: [self comClientInvalidMessage asString]						ifTrue: 							[(#ErrorWhileQueryingValue1s &lt;&lt; #com 								&gt;&gt; 'An exception occured while querying the value: &lt;n&gt;&lt;1s&gt;' 									expandMacrosWith: anException description) asString]) 				, '"'		emphasis: (Array with: #color -&gt; ColorValue red)</body></methods><methods><class-id>External.COMRecord</class-id> <category>trippy support</category><body package="Com- Automation Trippy Extensions">inspectorExtraAttributes	| attributes |	attributes := self memberNames collect: [:name |			(Tools.Trippy.ExtDerivedAttribute 				label: name				getBlock: [self memberAt: name]				setBlock: [:value | self memberAt: name put: value]				textBlock: [ (self memberAt: name) printString  ]				iconBlock: [ToolListIcons inaccessibleToolIcon])].	^ attributes copyWith: (Tools.Trippy.DerivedAttribute			label: (#Bytes &lt;&lt; #com &gt;&gt; 'Bytes')			valueBlock: [self bytes])</body></methods><methods><class-id>Tools.Trippy.PartVisit</class-id> <category>printing</category><body package="Com- Automation Trippy Extensions">displayString	| result |	result := WriteStream on: (String new: 20).	self ownerPart notNil ifTrue:		[result nextPutAll: self ownerPart partName.		result nextPutAll: ': '].	result nextPutAll: self object safePrintStringForInspector.	^result contents</body></methods><methods><class-id>Tools.Trippy.PartVisit</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">pathText	| postFix result |	postFix := self ownerPart text.	result := self owner pathText,' ', postFix.	(postFix includes: $:)		ifTrue: [ result := '(',result,')' ].	^ result</body></methods><methods><class-id>External.CollectionDispDriverAccessor</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">codeForAccessingItem: index	^ self driver getCodeForAccessingMemberNamed: #Item withParameters: (Array with: index).</body></methods><methods><class-id>External.CollectionDispDriverAccessor</class-id> <category>accessing classes</category><body package="Com- Automation Trippy Extensions">driverInspectorClasses	"return the inspector classes which are used for inspecting the dispatch driver I	 belong to"	^(Array with: Tools.Trippy.DispatchCollectionInspector) 		, super driverInspectorClasses</body></methods><methods><class-id>Tools.Trippy.Navigator</class-id> <category>notifications</category><body package="Com- Automation Trippy Extensions">inspectorSelectionChanged	| index newBuilder |	index := self inspectorHolder selectionIndex.	inspector := (inspectorCache at: index) isNil		ifTrue: 			[inspectorCache				at: index				put: ((inspectorClasses at: index) on: self object in: self)]		ifFalse: 			[inspectorCache at: index].	inspector builder: nil.	(builder componentAt: #inspector) widget		client: inspector		spec: inspector specName		builder: (newBuilder := builder newSubBuilder).	inspector installedWith: newBuilder.	shell focusObjectChanged "it didn't but the UI update may be needed anyway"</body></methods><methods><class-id>External.COMAbstractMemberSpecification</class-id> <category>user interface</category><body package="Com- Automation Trippy Extensions">browseMemberOfClass: aCoclass	^#{Refactory.Browser.RefactoringBrowser} ifDefinedDo: 			[:browserClass |			browserClass				openOnEnvironment: Refactory.Browser.AutomationBrowserEnvironment new				type: #Automation				state: (self referenceToMemberOfClass: aCoclass)]			elseDo: [ Dialog warn: #RefactoringBrowserNotInImage &lt;&lt; #com &gt;&gt; 'The RefactoringBrowser is not loaded in this image']</body><body package="Com- Automation Trippy Extensions">referenceToMemberOfClass: aCoclass	^ Refactory.Browser.AutomationNavigatorState new			typeLib: aCoclass typelib;			libraryElement: aCoclass;			automationProtocols: aCoclass protocolFilters;			automationMember: (self newReferenceContainer: aCoclass);			yourself</body></methods><methods><class-id>External.COMSpecificationPolicy</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">providesFullSpecificationTables	^ #(#newCompletePolicy #newLazyInitializePolicy) includes: self policySymbol</body></methods><methods><class-id>Tools.Trippy.Visit</class-id> <category>printing</category><body package="Com- Automation Trippy Extensions">displayString	| printString |	printString := self object safePrintStringForInspector.	^self object isImmutable		ifTrue: [printString, ' (', (#immutable &lt;&lt; #dialogs &gt;&gt; 'immutable') asString, ')']		ifFalse: [printString]</body></methods><methods><class-id>Tools.Trippy.Visit</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">pathText 	^ 'self'</body></methods><methods><class-id>External.DispDriverAccessor</class-id> <category>accessing</category><body package="Com- Automation Trippy Extensions">comClientInvalidMessage	"Return the message which is used if an invalid dispatch driver appears"	^ driver comClientInvalidMessage</body></methods><methods><class-id>External.DispDriverAccessor</class-id> <category>accessing classes</category><body package="Com- Automation Trippy Extensions">driverInspectorClasses	"return the inspector classes which are used for inspecting the dispatch driver I	 belong to"	^ Array 		with: Tools.Trippy.DispMemberInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>External.DispDriverAccessor</class-id> <category>accessing specs</category><body package="Com- Automation Trippy Extensions">nonUnknownParameterlessPropertySpecs	"return only my parameterless property specifications which do not return an IUnknown Interface.	 IUnknowns can not be interpreted here"	^ self parameterlessPropertySpecs reject: [:each | each isIUnknownType ]</body></methods><methods><class-id>External.AutomationCoclassSelectorProtocolNavigatorPart class</class-id> <category>interface specs</category><body package="Com- Automation Browser">basicWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #basicWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 960 600 1160 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dropSelector 						#drop: #dragStartSelector 						#doDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -30 1 ) 					#name: #objectList 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#doubleClickSelector: #doubleClickItem 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.CheckBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutOrigin} 4 0 -20 1 ) 					#name: #CheckBox1 					#model: #showMethods 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #showMethodsChanged ) 					#label: #methodIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.CheckBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutOrigin} 44 0 -20 1 ) 					#name: #CheckBox2 					#model: #showProperties 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #showPropertiesChanged ) 					#label: #propertyIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.CheckBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutOrigin} 84 0 -20 1 ) 					#name: #CheckBox3 					#model: #showEvents 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #showEventsChanged ) 					#label: #eventIcon 					#hasCharacterOrientedLabel: false ) ) ) )</body></methods><methods><class-id>External.AutomationTypeLibNavigatorPart class</class-id> <category>resources</category><body package="Com- Automation Browser">basicMenu	"Tools.MenuEditor new openOnClass: self andSelector: #basicMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Help' 				#nameKey: #help 				#value: #help ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>External.ParameterAssignmentDialog class</class-id> <category>interface specs</category><body package="Com- Automation Trippy Extensions">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #windowTitle 			#bounds: #(#{Graphics.Rectangle} 640 512 1039 777 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -169 1 -28 1 0 0.776942 -4 1 ) 					#name: #ActionButton1 					#model: #accept 					#label: 					#(#{Kernel.UserMessage} 						#key: #Ok 						#defaultString: 'Ok' 						#catalogID: #com ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.789474 -28 1 0 0.989975 -4 1 ) 					#name: #ActionButton2 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #labels ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -69 1 -70 1 -38 1 -46 1 ) 					#name: #addParameter 					#model: #addParam 					#label: '+' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -104 1 -70 1 -73 1 -46 1 ) 					#name: #removeParameter 					#model: #removeParam 					#label: '-' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines false #allowColumnReordering false #showLineNumbers true ) 					#layout: #(#{Graphics.LayoutFrame} 4 0 8 0 -4 1 -74 1 ) 					#name: #Dataset1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) 						#setSelectionForegroundColor: #(#{Graphics.ColorValue} #black ) ) 					#model: #paramList 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow paramName' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Name 								#defaultString: 'Name' 								#catalogID: #com ) 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow paramTypeName' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Type 								#defaultString: 'Type' 								#catalogID: #com ) 							#labelIsImage: false 							#width: 60 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow valueString' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#requestFocusOutSelector: 								#checkValue: ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Value 								#defaultString: 'Value' 								#catalogID: #com ) 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #InputField 							#menu: #listFieldInputMenu 							#noScroll: false 							#formatString: '' ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow isOptional' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Optional 								#defaultString: 'Optional' 								#catalogID: #com ) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#type: #boolean 							#noScroll: false 							#formatString: '' ) ) 					#labelsAsButtons: false ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} -139 1 -70 1 -108 1 -46 1 ) 					#name: #minParameters 					#model: #minParams 					#helpText: #minParamsHelp 					#label: 					#(#{Kernel.UserMessage} 						#key: #min 						#defaultString: 'min' 						#catalogID: #com ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutFrame} -34 1 -70 1 -4 1 -46 1 ) 					#name: #maxParameters 					#model: #maxParams 					#helpText: #maxParamsHelp 					#label: 					#(#{Kernel.UserMessage} 						#key: #max 						#defaultString: 'max' 						#catalogID: #com ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>External.AutomationCodeTool class</class-id> <category>resources</category><body package="Com- Automation Browser">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Explain' 				#nameKey: #explain 				#value: #explain ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>External.AutomationCodeTool class</class-id> <category>interface specs</category><body package="Com- Automation Browser">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 512 384 878 609 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 32 0 0 1 0 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 0 4 83 28 ) 					#name: #ActionButton1 					#model: #openHelp 					#label: #helpButtonTitle 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Tools.AutomationClassCreationDialog class</class-id> <category>interface specs</category><body package="Com- Automation Browser">detailsSpec	"Tools.UIPainter new openOnClass: self andSelector: #detailsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #NewClass 				#defaultString: 'New Class' 				#catalogID: #dialogs ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 570 323 1030 577 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 84 0 -10 1 109 0 ) 					#name: #nameField 					#model: #nameHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 109 0 0 1 ) 					#name: #nameLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #NameC 						#defaultString: 'Name:' 						#catalogID: #labels ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 114 0 -10 1 139 0 ) 					#name: #superclassModule 					#flags: 0 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #superclassModule ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 139 0 0 1 ) 					#name: #superclassLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #SuperclassC 						#defaultString: 'Superclass:' 						#catalogID: #labels ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 144 0 -10 1 169 0 ) 					#name: #instanceVariablesField 					#model: #instanceVariablesHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 169 0 0 1 ) 					#name: #instanceVariablesLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #InstanceVariablesC 						#defaultString: 'Instance Variables:' 						#catalogID: #labels ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 160 0 199 0 0 1 ) 					#name: #createAccessorsBox 					#model: #createAccessorsHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #Accessors 						#defaultString: 'Accessors' 						#catalogID: #labels ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 160 0 219 0 0 1 ) 					#name: #createInitializeBox 					#model: #createInitializeHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #InitializationAndNew 						#defaultString: 'Initializer' 						#catalogID: #labels ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 160 0 239 0 0 1 ) 					#name: #subclassResponsibilitiesBox 					#model: #defineSubclassResponsibilitiesHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #SubclassResponsibilities 						#defaultString: 'Subclass responsibilities' 						#catalogID: #labels ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 199 0 0 1 ) 					#name: #createMethodLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #CreateMethodsC 						#defaultString: 'Create methods:' 						#catalogID: #labels ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 70 0 ) 					#name: #locationSubcanvas 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 74 0 -10 1 76 0 ) 					#name: #divider ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 87 0 18 18 ) 					#name: #nameErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 117 0 18 18 ) 					#name: #superclassErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 147 0 18 18 ) 					#name: #instanceVariablesErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.666666 179 0 ) 					#name: #CheckBox1 					#model: #createSpecificationTable 					#label: 					#(#{Kernel.UserMessage} 						#key: #specificationTable 						#defaultString: 'specification table' 						#catalogID: #com ) ) ) ) )</body></methods><methods><class-id>External.AutomationNameSpaceItemTabNavigatorPart class</class-id> <category>interface specs</category><body package="Com- Automation Browser">coclassSelectorWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #coclassSelectorWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 960 600 1160 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #protocols 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationCoclassSelectorProtocolNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #protocols ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #selectors 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationSelectorNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #selectors ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'protocols' 					#belowWidgets: 'selectors' ) ) ) )</body><body package="Com- Automation Browser">selectorWindowSpec	"UIPainter new openOnClass: self andSelector: #selectorWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 980 720 1180 920 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #protocols 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationSelectorProtocolNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #protocols ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #selectors 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationSelectorNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #selectors ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'protocols' 					#belowWidgets: 'selectors' ) ) ) )</body></methods><methods><class-id>External.DispMemberInspector class</class-id> <category>interface specs</category><body package="Com- Automation Trippy Extensions">unsegmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #unsegmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window: #(#{UI.WindowSpec}			#label: #(#{Kernel.UserMessage}				#key: #UnlabeledCanvas				#defaultString: 'Unlabeled Canvas'				#catalogID: #labels)			#bounds: #(#{Graphics.Rectangle} 960 600 1267 935))		#component: #(#{UI.SpecCollection}			#collection: #(#(#{UI.SequenceViewSpec}				#properties: #(#{UI.PropertyListDictionary} #dragOkSelector #wantToDrag: #dragEnterSelector #dragEntry: #dropSelector #drop: #dragStartSelector #doDrag: #dragOverSelector #dragOver: #dragExitSelector #dragExit:)				#layout: #(#{Graphics.LayoutFrame} 0 0 25 0 0 0.4 -26 1)				#name: #fieldList				#flags: 15				#model: #fieldListHolder				#callbacksSpec: #(#{UI.UIEventCallbackSubSpec}					#doubleClickSelector: #dive					#requestValueChangeSelector: #changeRequest)				#menu: #fieldListMenu				#multipleSelections: true				#useModifierKeys: true				#selectionType: #normalSelection) #(#{Refactory.Browser.SourceCodeEditorSpec}				#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 -26 1)				#name: #document				#isOpaque: true				#model: #documentHolder				#isWrapped: true				#isReadOnly: false				#showHiddenCharacters: false				#showLineStriping: false				#autoAccept: false				#showInputCursor: true				#showSelection: true) #(#{UI.ActionButtonSpec}				#layout: #(#{Graphics.LayoutFrame} -80 1 -25 1 -1 1 -1 1)				#name: #HelpButton				#model: #help				#label: 'Help'				#defaultable: true) #(#{UI.InputFieldSpec}				#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 24 0)				#name: #filterField				#model: #filterValue				#callbacksSpec: #(#{UI.UIEventCallbackSubSpec}					#valueChangeSelector: #filterChanged)				#tabable: false) #(#{UI.InputFieldSpec}				#layout: #(#{Graphics.LayoutFrame} 35 0 -25 1 -100 1 -1 1)				#name: #InputField1				#model: #path				#isReadOnly: true) #(#{UI.LabelSpec}				#layout: #(#{UI.AlignmentOrigin} 0 0 -24 1 0 0)				#name: #Label1				#label: 'Path'))))</body></methods><methods><class-id>External.AutomationCodeComponentTabNavigatorPart class</class-id> <category>interface specs</category><body package="Com- Automation Browser">typeLibraryCoClassesWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #typeLibraryCoClassesWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #automationTypelibsNavigatorPart 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationTypeLibNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #automationTypelibsNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #automationTypesNavigatorPart 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationTypeNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #automationTypesNavigatorPart ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'automationTypelibsNavigatorPart' 					#belowWidgets: 'automationTypesNavigatorPart' ) ) ) )</body></methods><methods><class-id>External.AutomationTypeNavigatorPart class</class-id> <category>interface specs</category><body package="Com- Automation Browser">basicWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #basicWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 1709 455 1909 655 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dropSelector 						#drop: #dragStartSelector 						#doDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -20 1 ) 					#name: #objectList 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#doubleClickSelector: #doubleClickItem 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.CheckBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0 -18 1 40 16 ) 					#name: #CheckBox1 					#model: #showClassesAndInterfaces 					#helpText: #showClassesFlyByHelp 					#label: #showClassesIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.CheckBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 40 0 -18 1 40 16 ) 					#name: #CheckBox4 					#model: #showOther 					#helpText: #showOtherTypesFlyByHelp 					#label: #showOthersIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.CheckBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 80 0 -18 1 100 16 ) 					#name: #CheckBox2 					#model: #showHidden 					#helpText: #showHiddenFlyByHelp 					#label: #showHiddenIcon 					#hasCharacterOrientedLabel: false ) ) ) )</body></methods><methods><class-id>External.AutomationNavigator class</class-id> <category>interface specs</category><body package="Com- Automation Browser">methodWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #methodWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 384 384 1024 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #methodPart 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationReferenceNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #AutomationReferenceNavigatorPart ) ) ) )</body><body package="Com- Automation Browser">systemWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #systemWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 384 384 1024 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'classList' 					#belowWidgets: 'selectorList' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #classList 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationCodeComponentTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #automationCodeComponentTabNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{Refactory.Browser.AutomationNameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #AutomationNameSpaceItemTabNavigatorPart ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Com- Automation Browser">comAutomationClasses	"Open the COM resource browser."	&lt;menuItem: #(#BrowseClasses #com 'Browse Automation Classes...')		nameKey: nil		menu: #(#menuBar  #tools #comc)		position: 10.02&gt;	Refactory.Browser.RefactoringBrowser openOnEnvironment: Refactory.Browser.AutomationBrowserEnvironment new 		withSelection: Refactory.Browser.NavigatorState new</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="Com- Automation Browser">automationAlias16x16	"UIMaskEditor new openOnClass: self andSelector: #automationAlias16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 5557 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 5203 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3950 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6584 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6938 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7966 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 7805 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 3758 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6874 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 8191 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 2633 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 3822 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 2794 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 3661 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 4400 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 4464 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 4079 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 1991 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 1830 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 2312 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 2794 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 4786 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6745 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3918 2858)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0L@I LC@1XC@0LC@0LC@0@@@@@C@1XME LC@0LC@0@C@0@&amp;@0LMHP4C@0LC@0LC@0LC@0LVCRDME LC@0LCLSD1LSD''B@ HG#TC@0LC@2H#H1,[A@&lt;EK1 %L0LC@0L4DA0\D!L]A DYC!(C@0LCIAD_G3HKB0,0JB (@0LC@20)JP\GEAP*H@LC@0LC@0LIER,JB HWCB4C@0LC@0LCK"8.K"8.K"8.@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0@a')))</body><body package="Com- Automation Browser">automationAlias16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationAlias16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 6 32 0 0 62 112 0 0 38 112 0 0 0 248 0 0 63 248 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 224 0 0 63 224 0 0 63 224 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationCoclass16x16	"UIMaskEditor new openOnClass: self andSelector: #automationCoclass16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4497 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5203 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2826 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4625 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4850 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5139 5171)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@\KQ00LC@0LC@0LC@0LC@0KS@-LC@0LC@0LC@0LC@0LA0-GC@0LC@0LC@0LC@0LC@0KS@0LC@0LC@0LC@0LC@0LB40LC@0LC@0LC@0APTTK# SD24-KR40LC@0LA@RD!H]JAH*O1(2LC@0LC@UG &lt;+PAT5CR$)ES@0LC@0@ @,PQ0&gt;B10\GCX0LC@0LAX4P!,[F3(II  FLC@0LC@CB"\LFB&lt;;IBP"G3@0LC@0H2L#H2L#H2L#H2L0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0L@@a')))</body><body package="Com- Automation Browser">automationCoclass16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationCoclass16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 3 128 0 0 3 128 0 0 3 128 0 0 1 0 0 0 1 0 0 0 63 248 0 0 63 248 0 0 63 248 0 0 63 248 0 0 63 248 0 0 63 248 0 0 63 248 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationComponent16x16	"UIMaskEditor new openOnClass: self andSelector: #automationComponent16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 0 0)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[51 51 51 51 51 51 51 51 51 51 51 34 36 51 51 51 51 51 51 37 70 51 51 51 51 51 51 53 99 51 51 51 51 51 34 37 82 34 33 51 51 51 37 85 85 85 86 51 51 51 37 85 85 70 102 51 51 51 37 85 85 99 54 51 50 35 37 85 85 99 51 51 50 85 85 85 85 99 51 51 50 86 36 102 101 66 32 51 52 99 38 51 50 85 86 51 51 51 38 51 50 85 86 51 51 51 6 99 48 102 102 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51]))</body><body package="Com- Automation Browser">automationComponent16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationComponent16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 3 192 0 0 3 192 0 0 1 128 0 0 15 252 0 0 15 252 0 0 15 252 0 0 15 228 0 0 111 224 0 0 127 224 0 0 127 252 0 0 108 124 0 0 12 124 0 0 14 124 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationEnum16x16	"UIMaskEditor new openOnClass: self andSelector: #automationEnum16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5139 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2794 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5203 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7934 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2794 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5814 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2858 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7934 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4143 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JS4=OS4=OS4=OS4)JR$)JR$=JR$)JR$)JR$=JR$)JS4=OS4=OS4=OS4)OR$)JR$(C#LDFRTZIPD(IP0)JR$)J2X+J20,KAH_M1P]JR$)JSTC@0( N0\.BB\HI2$)JR$KHP,/BQX&lt;LAL9G#()JR$)GB4-@AT=OSXEDB$)JR$)JSP4M@4[F3H2L#H)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)JP@a')))</body><body package="Com- Automation Browser">automationEnum16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationEnum16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 31 248 0 0 31 248 0 0 127 248 0 0 127 248 0 0 127 248 0 0 127 248 0 0 127 248 0 0 127 224 0 0 127 224 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationEnumConst16x16	"UIMaskEditor new openOnClass: self andSelector: #automationEnumConst16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7869 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7291 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4111 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3565 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5878 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7130 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7227 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8030 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5717 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PD(JB (JB (JB (JB A@PDAJ@DA@PDA@PDA@PD(@PDA@R A@R AJ@DAJ@DAJ@DA@PD(@R (JB (JB (@R A@PDAJAL*A1XSD3DOL@@.@PDA@P8BGP0BH0($C"L+EPDA@PD)AA XFCL3I"XRM LA@PDAHQ@MKA0KKC\,M@TZ@PDA@Q$YFQ$YFR\''MR\''L DA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a')))</body><body package="Com- Automation Browser">automationEnumConst16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationEnumConst16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationFunction16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #automationFunction16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[170 170 170 170 170 171 58 170 170 168 74 170 170 164 170 170 170 172 170 170 170 192 58 170 170 160 170 170 170 160 170 170 170 163 170 170 170 161 170 170 170 162 170 170 170 18 170 170 170 206 170 170 170 170 170 170 170 170 170 170 170 170 170 170])</body><body package="Com- Automation Browser">automationFunction16x16mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #automationFunction16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 192 0 0 1 192 0 0 3 0 0 0 3 0 0 0 15 192 0 0 3 0 0 0 3 0 0 0 3 0 0 0 3 0 0 0 2 0 0 0 14 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationInterface16x16	"UIMaskEditor new openOnClass: self andSelector: #automationInterface16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3629 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[68 68 68 68 68 68 68 68 68 68 70 0 6 68 68 68 68 68 64 68 64 68 68 68 68 68 64 68 64 68 68 68 68 68 64 68 64 68 68 68 68 68 70 0 6 68 68 68 68 68 68 64 68 68 68 68 68 68 68 72 68 68 68 68 68 68 68 65 68 68 68 68 68 68 68 69 68 68 68 68 68 68 68 71 68 68 68 68 68 68 68 66 68 68 68 68 68 68 68 67 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68]))</body><body package="Com- Automation Browser">automationInterface16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationInterface16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 192 0 0 4 64 0 0 4 64 0 0 4 64 0 0 7 192 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationStruct16x16	"UIMaskEditor new openOnClass: self andSelector: #automationStruct16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3983 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1477 1477 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3597 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3244 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 1670 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 3597 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 3244 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1509 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 3565 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1670 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 3212 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1541 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 2858 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 2505 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 1702 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 1413 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 2826 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 2473 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1284 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1734 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2890 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PD#H2L#H2L#H2L#H2LA@PDAH0@@@@@@@BL''I2\#@PDA@RL@@@@@@@@#I2\''H0DA@PD#@@@@@@@@H2\''I2LA@PDAC0&lt;OC0&lt;IFQ$CD!HY@PDA@P4B@ 4NC (MA!TUCPDA@PDMB1(MDQDLCP XF@4A@PDAIR@EIQ8TEBT$GQ4D@PDA@Q@\GA@!E!XPI"X_F0DA@PD"H!\(JB (JB (JB A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a')))</body><body package="Com- Automation Browser">automationStruct16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationStruct16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationUnion16x16	"UIMaskEditor new openOnClass: self andSelector: #automationUnion16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 8191 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 8191 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 8191 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7355 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 6103 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 2248 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 2344 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 449 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7741 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 8191 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 1798 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5332 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 2601 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 5492 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 4850 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 5300 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 8191 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 4914 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 8191 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7259 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 4850 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 8191 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 8191 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 4047 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 5267 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 1060 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 5717 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 6745 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 5460 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 8191 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 4786 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 4850 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 8191 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 4882 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 6456 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6520 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 4593 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 4272 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 8191 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 5492 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 3276 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 8126 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 2987 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 4593 385)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5524 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 3918 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4207 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 8191 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6456 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 8191 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 8191 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 6103 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 8191 192)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 706 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 8191 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 3115 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 3180 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 7966 0)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'MST5MST5MST5MST5MST5MST5MST5MST5MQTUEQUNMST5MST5MST5MR]DG$(UERT5MST5MST5MSUEKQ4XEQTDMST5MST5MST[N0ABB!TDM#T5MST5MST5P0 AMA)HM"&lt;5MST5MSU@JS@1@0IGDQ02MST5I@&lt;ER1\*H04?I!P=MST5DB0+PRALG1$3Q#T5MST5MQ@.K ,7A 8&lt;MST5MST5MSTPKC(PRT4LNCT5MST5MST5DA@PDA@SHST5MST5MST5MQ@PDC$&gt;D \5MST5MST5MST5H" &gt;BQX5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MP@a')))</body><body package="Com- Automation Browser">automationUnion16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationUnion16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 124 0 0 0 254 0 0 0 254 0 0 1 254 0 0 1 254 0 0 7 254 0 0 63 252 0 0 127 224 0 0 127 128 0 0 127 128 0 0 127 0 0 0 127 0 0 0 62 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">automationUnknownType16x16	"UIMaskEditor new openOnClass: self andSelector: #automationUnknownType16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3629 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 119 119 116 68 68 68 68 71 116 68 119 68 68 68 68 68 68 68 119 68 68 68 68 68 68 71 116 68 68 68 68 68 68 167 68 68 68 68 68 68 65 20 68 68 68 68 68 68 69 36 68 68 68 68 68 68 72 100 68 68 68 68 68 68 68 68 68 68 68 68 68 68 67 52 68 68 68 68 68 68 73 148 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68]))</body><body package="Com- Automation Browser">automationUnknownType16x16mask	"UIMaskEditor new openOnClass: self andSelector: #automationUnknownType16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 3 224 0 0 6 48 0 0 0 48 0 0 0 96 0 0 0 192 0 0 1 128 0 0 1 128 0 0 1 128 0 0 0 0 0 0 1 128 0 0 1 128 0 0 0 0 0 0 0 0 0 0])</body><body package="Com- Automation Browser">showHidden16x16	"UIMaskEditor new openOnClass: self andSelector: #showHidden16x16"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2633 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2794 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1798 1798 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4753 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 3597 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3051 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2890 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2601 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3051 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDAADDA@PDA@PDA@PDA@PDAADDA@PMCP4MCP4MCP4MCQDDA@PDCP@@@@@@@@43DQDMA@PDA@4@@@@@@@@MDR@DC PDA@PM@@@@@@@@DRDDA@4DA@PDK"8MCP4MDP44E1\NA@PDAA0GA28XDR$,CCX6K PDA@PJC2PJDP SB"X_G1@DA@PDLB #DR&lt;%IS@1BP$JA@PDA@,QDP,CD!H[GQ4TF0PDA@PQL T2AR\UB2HKE ,DA@PQA@PDA@PDA@PDA@PDA@PQA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@@a')))</body><body package="Com- Automation Browser">showHidden16x16mask	"UIMaskEditor new openOnClass: self andSelector: #showHidden16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 1 0 0 0 2 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 63 252 0 0 64 0 0 0 128 0 0 0 0 0 0 0])</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="Com- Automation Browser">automationToolClass	&lt;tool: 10.1&gt;	^AutomationCodeTool</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>resources</category><body package="Com- Automation Browser">automationBrowserMenu	"Tools.MenuEditor new openOnClass: self andSelector: #automationBrowserMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Open_NewBrowser 					#defaultString: 'Open &amp;New Browser' 					#catalogID: #browser ) 				#nameKey: #'Spawn Browser' 				#value: 				#action: 				#shortcutKeyCharacter: $N 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Refresh 					#defaultString: '&amp;Refresh' 					#catalogID: #browser ) 				#nameKey: #'Update Navigator' 				#value: 				#action: 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 0 ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><initialize><class-id>Tools.HelpProvider</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>DispDriverAccessor</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>driver </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>CollectionDispDriverAccessor</name><environment>External</environment><super>External.DispDriverAccessor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>Navigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment state dispatcher parts partsDictionary menus showOnlyFiltered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ListNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.NavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menu visualBlock objectList </inst-vars><class-inst-vars>defaultVisualBlock </class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SequenceInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>COMAbstractMemberSpecification</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>COM-Automation-Dispatch Specifications</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMDispatchMemberSpecification</name><environment>External</environment><super>External.COMAbstractMemberSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>memberID returnValueDescription vtableIndex flags parameters description optionalParameterCount </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>COM-Automation-Dispatch Specifications</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMSpecificationPolicy</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>updateSpecificationTable lookupPolicy autoWrapIDispatch policySymbol </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			External.Win32NLSConstants.*			</imports><category>COM-Automation-Dispatch Policies</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMDispatchMethodSpecification</name><environment>External</environment><super>External.COMDispatchMemberSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>COM-Automation-Dispatch Specifications</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMDispatchEventSpecification</name><environment>External</environment><super>External.COMDispatchMethodSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class><class><name>TypeElementDescription</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>docs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>ConstantDescription</name><environment>External</environment><super>External.TypeElementDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>ComponentElementDescription</name><environment>External</environment><super>External.TypeElementDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type index </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation Browser</category><attributes><package>Com- Automation</package></attributes></class><class><name>Visit</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object owner children </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>PartVisit</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Visit</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ownerInspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>AutomationOwnedReference</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element container </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>GeneralPropertySpecification</name><environment>External</environment><super>External.COMAbstractMemberSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertyGetSpecification propertySetSpecification isVTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class><class><name>TabNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.NavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabDescriptionList subcanvasBuilder namedComponents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>CodeComponentTabNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.TabNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>KeyedElement</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>COMDispatchPropertySpecification</name><environment>External</environment><super>External.GeneralPropertySpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessMode memberID vtableIndex returnValueDescription flags </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class><class><name>COMReturnValueDescription</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type flags </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMParameterDescription</name><environment>External</environment><super>External.COMReturnValueDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name defaultValue </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>DictionaryInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>linearizedParts valueOrKeyHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>COMRecord</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>structure recordInfo memberNames typeDescription ownsMemory </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>COM- UDT Support</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispTypeSpec</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispRefTypeSpec</name><environment>External</environment><super>External.DispTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>referentType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispArrayTypeSpec</name><environment>External</environment><super>External.DispRefTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>DerivedAttribute</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label value valueBlock definition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>Notification</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>ProtocolItemNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>protocolHolder listSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>DispUserDefTypeSpec</name><environment>External</environment><super>External.DispTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typelib docs typeFlags guid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispComponentTypeSpec</name><environment>External</environment><super>External.DispUserDefTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation Extensions</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispEnumTypeSpec</name><environment>External</environment><super>External.DispComponentTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>TypeLibDescriptor</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>guid version lcid name platform filename docs types cache </inst-vars><class-inst-vars></class-inst-vars><imports>			External.COMAutomationConstants.*			</imports><category>Com- Ole</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispModuleTypeSpec</name><environment>External</environment><super>External.DispUserDefTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>PropertyAccessSpecification</name><environment>External</environment><super>External.COMDispatchMemberSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector propertySpecification </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class><class><name>PropertyGetAccessSpecification</name><environment>External</environment><super>External.PropertyAccessSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class><class><name>BrowserEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>NavigatorState</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractNavigatorState</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ParagraphEditor</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>beginTypeInIndex anchorIndex emphasisHere dispatchTable charComposer textHasChanged feelPolicy supportCodeEditingFeels localMenuItems extendingDown </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>AbstractCOMClient</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventSink specificationTable propAccessor localeID valueAdaptor eventSpecificationTable type </inst-vars><class-inst-vars></class-inst-vars><imports>			private External.COMAutomationConstants.*			private External.COMConstants.*			private External.External.COMStatusCodeConstants.*			private Win32NLSConstants.*			</imports><category>COM-Automation-Basics</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispUnionDescription</name><environment>External</environment><super>External.DispComponentTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sizeInBytes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation Extensions</category><attributes><package>Com- Automation</package></attributes></class><class><name>BrowserEnvironmentWrapper</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>DispStructureSpec</name><environment>External</environment><super>External.DispComponentTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sizeInBytes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation Extensions</category><attributes><package>Com- Automation</package></attributes></class><class><name>Navigator</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visit shell inspector inspectorClasses inspectorCache inspectorHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>PropertySetAccessSpecification</name><environment>External</environment><super>External.PropertyAccessSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class><class><name>CodeModel</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractCodeModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>ClassCreationDialog</name><environment>Tools</environment><super>Tools.DefinitionCreationDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>indexedTypeHolder instanceVariablesHolder indexedTypeChoices superclassModule createInitializeHolder createAccessorsHolder defineSubclassResponsibilitiesHolder tabHolder classInstanceVariablesHolder lastSubBuilder </inst-vars><class-inst-vars></class-inst-vars><imports>			private Refactory.Browser.Navigator			</imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>AutomationClassMember</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>member interface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class><class><name>DispPtrTypeSpec</name><environment>External</environment><super>External.DispRefTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>BrowserTextTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>savedText changed textHolder originalText menuBarMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>DispObjectTypeSpec</name><environment>External</environment><super>External.DispUserDefTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>CoclassDescriptor</name><environment>External</environment><super>External.DispObjectTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Ole</category><attributes><package>Com- Automation</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>history future </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>WindowsLocale</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports>			private External.Win32NLSConstants.*			</imports><category>Com- Ole</category><attributes><package>Com- Automation</package></attributes></class><class><name>CArrayTypeSpec</name><environment>External</environment><super>External.DispArrayTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation Extensions</category><attributes><package>Com- Automation</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>DispSimpleTypeSpec</name><environment>External</environment><super>External.DispTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typecode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>InterfaceTypeSpec</name><environment>External</environment><super>External.DispObjectTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>alternativeRepresentation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation Extensions</category><attributes><package>Com- Automation</package></attributes></class><class><name>DispAliasTypeSpec</name><environment>External</environment><super>External.DispUserDefTypeSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actualType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Com- Automation</category><attributes><package>Com- Automation</package></attributes></class><class><name>COMVTableMethodSpecification</name><environment>External</environment><super>External.COMDispatchMethodSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Com- Automation</package></attributes></class></st-source>