<?xml version="1.0"?><st-source><!-- Name: DragDrop-List-ExampleNotice: Copyright 2005-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package demonstrates how to use drag-drop to sort, insert, and replace selections between list widgets in an application.  Use the example class ListDDExample to demonstrate how to drag single items from a list and MultiListDDExample to drag one or more items at once from a list.DbIdentifier: bear73DbTrace: 427985DbUsername: smichaelDbVersion: 8.0 - 1HideSource: falsePackageName: DragDrop-List-ExampleParcel: #('DragDrop-List-Example')ParcelName: DragDrop-List-ExamplePrintStringCache: (8.0 - 1,smichael)SaveSource: trueVersion: 8.0 - 1Date: 5:06:47 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:47 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ListDragDropExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numberList dropType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Drag Drop-Examples</category><attributes><package>DragDrop-List-Example</package></attributes></class><comment><class-id>Examples.ListDragDropExample</class-id><body>ListDragDropExample combines behavior and definitions common to the ListDDExample and MultiListDDExample list drag-drop example classes.Instance Variables:	dropType	&lt;ValueHolder on:Symbol&gt;	Selector for choice of drop method that determines drop feedback shown in list.	numberList	&lt;MultiSelectionInList&gt;	List model for items available to select, sort, replace, and remove. </body></comment><class><name>ListDDExample</name><environment>Examples</environment><super>Examples.ListDragDropExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Drag Drop-Examples</category><attributes><package>DragDrop-List-Example</package></attributes></class><comment><class-id>Examples.ListDDExample</class-id><body>ListDDExample demonstrates how drag-drop may be used to sort, replace, and insert selected items from a source list widget to a destination list widget.  Only a single item in the ListDDExample list may be selected at a time. The source and destination list may belong in the same ListDDExample application window or be from another ListDDExample or MultiListDDExample application window.   Items dragged from its list will be removed upon drop to another list or will be copied if the &lt;Shift&gt; key is held during drag. The drop action performed for items dragged to a ListDDExample list is selectable by three radio buttons as either		Insert only	Replace only	Insert or ReplaceTry dragging and dropping items between multiple ListDDExample or MultiListDDExample windows.</body></comment><class><name>MultiListDDExample</name><environment>Examples</environment><super>Examples.ListDragDropExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Drag Drop-Examples</category><attributes><package>DragDrop-List-Example</package></attributes></class><comment><class-id>Examples.MultiListDDExample</class-id><body>MultiListDDExample demonstrates how drag-drop may be used to sort, replace, and insert selected items from a source list widget to a destination list widget.  One or more items in the MultiListDDExample list may be selected at a time.  The source and destination list may belong in the same MultiListDDExample application window or be from another ListDDExample or MultiListDDExample application window.  Items dragged from its list will be removed upon drop to another list or will be copied if the &lt;Shift&gt; key is held during drag. The drop action performed for items dragged to a MultiListDDExample list is selectable by three radio buttons as either		Insert only	Replace only	Insert or ReplaceTry dragging and dropping items between multiple ListDDExample or MultiListDDExample windows.</body></comment><methods><class-id>Examples.ListDragDropExample</class-id> <category>drag and drop</category><body package="DragDrop-List-Example">doDrag: aController 	"Drag the currently selected change. Include all available	 information so that the drop target can use whatever it needs."	| data |	data := DragDropData new.	data contextWindow: builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: self numberList.	(DragDropManager			withDropSource: DropSource new			withData: data) doDragDrop</body><body package="DragDrop-List-Example">dragEnter: aDragContext 	"A drag has entered the list. If the receiver is	 happy to accept a drag then fill-in the appropriate data and answer that dragging should continue."	(aDragContext data contextApplication isKindOf: ListDragDropExample) ifFalse: [^#dropEffectNone].	aDragContext dropTarget 		clientData: (self initialDropState: (self widgetAt: #List1)).	^aDragContext shiftDown 		ifTrue: [#dropEffectCopy]		ifFalse: [#dropEffectMove]</body><body package="DragDrop-List-Example">dragExit: aDragContext	"A drag has left the list"	^#dropEffectNone</body><body package="DragDrop-List-Example">dragOver: aDragContext 	"A drag is over the list view.  Enable a drop if the drag originated in this application"	^(aDragContext data contextApplication isKindOf: ListDragDropExample)		ifTrue: 			[(self widgetAt: #List1) 				perform: self dropType value				with: aDragContext				with: true.			aDragContext shiftDown ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]]		ifFalse: [#dropEffectNone]</body><body package="DragDrop-List-Example">drop: aDragContext 	"A drop has occurred on the list.  Remove the object(s) dragged from its source and place it in the drop target at position targetIndex."	^aDragContext data clientData selectionIndex isInteger		ifTrue:[self dropSingle: aDragContext]		ifFalse:[self dropMultiple: aDragContext]</body><body package="DragDrop-List-Example">wantToDrag: treeController		^self numberList list notEmpty</body></methods><methods><class-id>Examples.ListDragDropExample</class-id> <category>aspects</category><body package="DragDrop-List-Example">dropType	^dropType isNil		ifTrue:			[dropType := #showInsertDropFeedbackIn:allowScrolling: asValue]		ifFalse:			[dropType]</body><body package="DragDrop-List-Example">numberList	^numberList isNil		ifTrue:			[numberList := SelectionInList with: (1 to:100) asList]		ifFalse:			[numberList]</body></methods><methods><class-id>Examples.ListDragDropExample</class-id> <category>private</category><body package="DragDrop-List-Example">initialDropState: aListView	"Answer the initial state of aListView when a drag has begun within its 	bounds. The state will be used to re-establish the appearance of aListView when 	a drag leaves."	| dict |	dict := IdentityDictionary new.	aListView hasFocus: true.	^dict</body></methods><methods><class-id>Examples.ListDragDropExample</class-id> <category>accessing</category><body package="DragDrop-List-Example">multiSelectApp	^MultiListDDExample new</body><body package="DragDrop-List-Example">singleSelectApp	^ListDDExample new</body></methods><methods><class-id>Examples.ListDragDropExample</class-id> <category>actions</category><body package="DragDrop-List-Example">spawn	self class open</body></methods><methods><class-id>Examples.ListDDExample</class-id> <category>drag and drop</category><body package="DragDrop-List-Example">dropMultiple: aDragContext	| targetIndex targetView source dragObjects |	targetView := self widgetAt: #List1.	source := aDragContext data clientData.	targetIndex := targetView targetIndex.	dragObjects := source selections.	aDragContext shiftDown 				ifFalse: 					["Remove objects from source for a move drag"					source list removeAll: source selections].	targetIndex isInteger 		ifTrue: 			["Replace selection"			self numberList list removeAtIndex: targetIndex].	self numberList list addAll: dragObjects beforeIndex: targetIndex ceiling.	self numberList selectionIndex: targetIndex ceiling.	^#dropEffectNone</body><body package="DragDrop-List-Example">dropSingle: aDragContext 	"A drop has occurred on the list.  Remove the object dragged from its source and place it in the drop target in position targetIndex."	| targetIndex sourceIndex dragObject targetView sourceView source |	targetView := self widgetAt: #List1.	sourceView := aDragContext data contextWidget.	source := aDragContext data clientData.	sourceIndex := source selectionIndex.	targetIndex := targetView targetIndex.	dragObject := aDragContext shiftDown 				ifTrue: 					["Leave in source for a copy drag"					source selection]				ifFalse: 					["Remove from source for a move drag"					(sourceView = targetView and: [targetIndex &gt; sourceIndex]) 						ifTrue: 							["The target and source are the same list. Reorder the targetIndex"							targetIndex := targetIndex - 1].					source list removeAtIndex: sourceIndex].	targetIndex isInteger 		ifTrue: 			["Replace"			self numberList list at: targetIndex put: dragObject]		ifFalse: 			["Insert"			self numberList list add: dragObject beforeIndex: targetIndex ceiling].	self numberList selectionIndex: targetIndex ceiling.	^#dropEffectNone</body></methods><methods><class-id>Examples.MultiListDDExample</class-id> <category>drag and drop</category><body package="DragDrop-List-Example">dropMultiple: aDragContext 	| targetIndex targetView source dragObjects sourceView |	targetView := self widgetAt: #List1.	sourceView := aDragContext data contextWidget.	source := aDragContext data clientData.	targetIndex := targetView targetIndex.	dragObjects := source selections.	aDragContext shiftDown 		ifFalse: 			["Remove objects from source for a move drag"			targetView = sourceView 				ifTrue: 					[targetIndex := source selectionIndexes inject: targetIndex								into: [:sofar :each | each &lt; targetIndex ifTrue: [sofar - 1] ifFalse: [sofar]]].			"Remove by index instead by value to prevent removing any prior duplicate"			(source selectionIndexes asSortedCollection: [:a :b | a &gt; b]) 				do: [:each | source list removeAtIndex: each]].	targetIndex isInteger 		ifTrue: 			["Replace selection"			self numberList list removeAtIndex: targetIndex].	targetIndex := targetIndex ceiling.	self numberList list addAll: dragObjects beforeIndex: targetIndex.	self numberList 		selectionIndexes: (targetIndex to: targetIndex + dragObjects size - 1) 				asSet.	^#dropEffectNone</body><body package="DragDrop-List-Example">dropSingle: aDragContext 	"A drop has occurred on the list.  Remove the object dragged from its source and place it in the drop target in position targetIndex."	| targetIndex dragObject targetView source |	targetView := self widgetAt: #List1.	source := aDragContext data clientData.	targetIndex := targetView targetIndex.	dragObject := source selection.	aDragContext shiftDown 				ifFalse: 					["Remove from source for a move drag"					source list removeAtIndex: source selectionIndex].	targetIndex isInteger 		ifTrue: 			["Replace"			self numberList list at: targetIndex put: dragObject]		ifFalse: 			["Insert"			self numberList list add: dragObject beforeIndex: targetIndex ceiling].	self numberList selectionIndexes: (Set with: targetIndex ceiling).	^#dropEffectNone</body></methods><methods><class-id>Examples.MultiListDDExample</class-id> <category>aspects</category><body package="DragDrop-List-Example">numberList	^numberList isNil		ifTrue:			[numberList := MultiSelectionInList with: (1 to:100) asList]		ifFalse:			[numberList]</body></methods><methods><class-id>Examples.ListDragDropExample class</class-id> <category>interface specs</category><body package="DragDrop-List-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'List Drag/Drop Examples' 			#bounds: #(#{Graphics.Rectangle} 640 512 1089 813 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 -2 0.5 -5 1 ) 					#name: #Subcanvas1 					#majorKey: #{ListDDExample} 					#minorKey: #windowSpec 					#clientKey: #singleSelectApp ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 25 0 -5 1 -5 1 ) 					#name: #Subcanvas2 					#majorKey: #{MultiListDDExample} 					#minorKey: #windowSpec 					#clientKey: #multiSelectApp ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 5 ) 					#name: #Label2 					#label: 'Single selection' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.505568 5 0 ) 					#name: #Label3 					#label: 'Multi-selection' ) ) ) )</body></methods><methods><class-id>Examples.ListDDExample class</class-id> <category>interface specs</category><body package="DragDrop-List-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #cascade #openType #advanced ) 			#label: 'Single Select Drag/Drop Reordering' 			#min: #(#{Core.Point} 208 162 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 886 788 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 10 0 20 0 -10 1 -85 1 ) 					#name: #List1 					#model: #numberList 					#multipleSelections: false 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0 -68 1 ) 					#name: #RadioButton1 					#model: #dropType 					#label: 'Insert' 					#select: 					#showInsertDropFeedbackIn:allowScrolling: ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0 -48 1 ) 					#name: #RadioButton2 					#model: #dropType 					#label: 'Insert or Replace' 					#select: 					#showInsertReplaceDropFeedbackIn:allowScrolling: ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0 -28 1 ) 					#name: #RadioButton3 					#model: #dropType 					#label: 'Replace' 					#select: 					#showReplaceDropFeedbackIn:allowScrolling: ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 -85 1 140 0 -5 1 ) 					#name: #GroupBox1 					#label: 'Drop Action' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 8 0 ) 					#name: #Label1 					#label: 'Hold &lt;Shift&gt; to drag a copy' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -10 1 -5 1 1 1 ) 					#name: #ActionButton1 					#model: #spawn 					#label: 'Spawn' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.MultiListDDExample class</class-id> <category>interface specs</category><body package="DragDrop-List-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #cascade #openType #advanced ) 			#label: 'Multi Select Drag/Drop Reordering' 			#min: #(#{Core.Point} 208 162 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 886 788 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 10 0 20 0 -10 1 -85 1 ) 					#name: #List1 					#model: #numberList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0 -68 1 ) 					#name: #RadioButton1 					#model: #dropType 					#label: 'Insert' 					#select: 					#showInsertDropFeedbackIn:allowScrolling: ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0 -48 1 ) 					#name: #RadioButton2 					#model: #dropType 					#label: 'Insert or Replace' 					#select: 					#showInsertReplaceDropFeedbackIn:allowScrolling: ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0 -28 1 ) 					#name: #RadioButton3 					#model: #dropType 					#label: 'Replace' 					#select: 					#showReplaceDropFeedbackIn:allowScrolling: ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 -85 1 140 0 -5 1 ) 					#name: #GroupBox1 					#label: 'Drop Action' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 8 0 ) 					#name: #Label1 					#label: 'Hold &lt;Shift&gt; to drag a copy' )					#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -10 1 -5 1 1 1 ) 					#name: #ActionButton1 					#model: #spawn 					#label: 'Spawn' 					#defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>