<?xml version="1.0"?><st-source><!-- Name: Protocols-LibraryDemoNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: The Library Demo illustrates the use of communication protocols using the model of a public library.To generate a sample instance of class Library with precreated Holdings, Patrons and Services, evaluate:	Protocols.Library.Library PortNowhereThe demo is based upon a model of the Port Nowhere Public Library System. Port Nowhere is a ficticious place name in North America, not to be confused with an Internet port. For a short narrative, see the comment for class Library.Class Library provides services to its Patrons that are either Persons or Organizations. It lends its Holdings that can be loaned (LoandedHoldings) or provides on-site access to RetainedHoldings. Library also provides other Services like Copying, Searching, WeatherForecast, etc. Finally, a Library can be affiliated with other Libraries to share their offerings. See the class comments for more details about the domain model.All activity in the Library demo is performed via requests to the offered library Services, for example AdministrativeService>>addPatron: or Search>>searchByTitleWord:includeAffiliatedLibraries:. All activities are recorded in the form of Transactions. Transactions are stored in a history record associated with Accounts Every Agent (Libraries and Patrons are Agents) have an associated Account. Some transactions can include a monetary charge, so Accounts mantain a balance as well.Other samples can be easily generated using PortNowhere as an example.An effort has been made to build the Library demo using as many different types as possible, so that marshaling may be decently exercised (review the instance variable designations in class comments for more details on which types are expected where).Implementation Notes:Sample data gets generated, but this demo still needs work. More of the services need to be finished, in particular, 'AdministrativeService' and 'GeneralPublicService'.  For an idea of how to proceed, look at the way in which these services have been, very briefly, begun, and at the services 'WeatherForecast' and 'Search'.  When making code additions, be sure to check that only the operations in 'public api' protocols are used remotely.Several transaction types in the Transaction hierarchy are not yet all added to account histories, but should be.DbIdentifier: bear73DbTrace: 445690DbUsername: tkoganDbVersion: 8.1 - 0DevelopmentPrerequisites: #(#(#any 'Protocol-Common-Namespace' ''))PackageName: Protocols-LibraryDemoParcel: #('Protocols-LibraryDemo')ParcelName: Protocols-LibraryDemoPrerequisiteDescriptions: #(#(#name 'Protocol-Common-Namespace' #componentType #package))PrerequisiteParcels: #(#('Protocol-Common-Namespace' ''))PrintStringCache: (8.1 - 0,tkogan)Version: 8.1 - 0Date: 1:17:53 PM July 14, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jul17.2) of July 14, 2017 on July 14, 2017 at 1:17:53 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Library</name><environment>Protocols</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Protocols-LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></name-space><class><name>AbstractRandom</name><environment>Protocols.Library</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.AbstractRandom</class-id><body>AbstractRandom is the abstract superclass of all the library demo (LD) classes that do or may employ a random number generator.Shared Variables:	Random		&lt;MinimumStandardRandom&gt;	a random number generator</body></comment><class><name>Holding</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>acquisitionCost acquisitionDate acquisitionNumber catalogNumber collectionId dueDate libraryName statusId </inst-vars><class-inst-vars>nextHoldingId collectionIds statusIds </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Holding</class-id><body>This is the abstract supercalss of all Library holdings, such as Books and Recordings.  The instance variable 'dueDate' is used to test 'Date or nil'.Instance Variables:	acquisitionCost	&lt;FixedPoint&gt; the cost of the holding	acquisitionDate	&lt;Date&gt; the date when the holding was acquired by the Library	acquisitionNumber	&lt;Integer&gt; 	catalogNumber	&lt;CatalogNumber&gt; 	collectionId			&lt;Symbol&gt; the Library collection in which the holding resides	dueDate			&lt;Date | nil&gt; if not nil, the date by which the LDHolding should be returned by its borrower	libraryName		&lt;String&gt; the name of the owning library	statusId			&lt;Symbol&gt; library workflow status indicator one of the #statusIds from the class sideClass Instance Variables:	nextHoldingId		&lt;Object&gt; undocumented	collectionIds		&lt;Array of: Symbol&gt; names of various library collections	statusIds			&lt;Array of: Symbol&gt; undocumentedShared Class Variables:	NextAcquisitionNumber	&lt;Integer&gt; </body></comment><class><name>LoanedHolding</name><environment>Protocols.Library</environment><super>Protocols.Library.Holding</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reservationList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.LoanedHolding</class-id><body>This an abstract superclass of holdings that can be loaned to patrons. The 'reservationList' is used to test LinkedLists.Instance Variables:	reservationList	&lt;LinkedList of: Reservation&gt; patrons can make reservations on loaned holdings</body></comment><class><name>Recording</name><environment>Protocols.Library</environment><super>Protocols.Library.LoanedHolding</super><private>false</private><indexed-type>none</indexed-type><inst-vars>authors coverPhoto tracks year publisher title </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Recording</class-id><body>This class represents a "recording" of some kind. Recordings have a title, authors, tracks etc.Instance Variables:	authors		&lt;Array of: AuthorialName&gt;	qualified list of book authors	coverPhoto	&lt;Image&gt;	optional picture of the book cover	tracks			&lt;Array of: String&gt;	the list of tracks on the CD	year			&lt;Integer&gt; 	publisher		&lt;String&gt;	the name of the publisher	title				&lt;String&gt;	title of the book</body></comment><class><name>AnalogRecording</name><environment>Protocols.Library</environment><super>Protocols.Library.Recording</super><private>false</private><indexed-type>none</indexed-type><inst-vars>format </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.AnalogRecording</class-id><body>This is an abstract superclass of all non-digital recordings.Instance Variables:	format	&lt;Symbol&gt; different kinds of recordings use different formats</body></comment><class><name>AudioTape</name><environment>Protocols.Library</environment><super>Protocols.Library.AnalogRecording</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.AudioTape</class-id><body>This is an AudioTape.</body></comment><class><name>LibraryError</name><environment>Protocols.Library</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.LibraryError</class-id><body>Abstract superclass of LibraryDemo specific errors.</body></comment><class><name>PatronNotFound</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.PatronNotFound</class-id><body>Error signalled when a search for patron fails.</body></comment><class><name>Transaction</name><environment>Protocols.Library</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>timestamp transactionId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Transaction</class-id><body>A library transaction records the time when it occurred and acquires a transaction identifier.Instance Variables:	timestamp		&lt;Timestamp&gt; 		When the transaction occured	transactionId	&lt;DwordArray&gt;Shared Class Variables:	NextTransactionId	&lt;DwordArray&gt; </body></comment><class><name>FinancialTransaction</name><environment>Protocols.Library</environment><super>Protocols.Library.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>amount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.FinancialTransaction</class-id><body>This is an abstract superclass for all financial transaction involving some amount of funds.Instance Variables:	amount	&lt;FixedPoint&gt; </body></comment><class><name>Payment</name><environment>Protocols.Library</environment><super>Protocols.Library.FinancialTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>LibraryService</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>library serviceCharge serviceId </inst-vars><class-inst-vars>defaultServiceCharge defaultServiceId </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.LibraryService</class-id><body>This is the abstract superclass of all the classes that include APIs for the manipulation of the Library demo.The intention is that when writing IDL or WSDL for the library demo, only the interfaces of the classes in the service hierarchy need be addressed. A service is offered by a library for an optional service charge.Instance Variables:	library			&lt;Library&gt; the library offering the service	serviceCharge	&lt;FixedPoint&gt; 	serviceId		&lt;Symbol&gt; the service identifierClass Instance Variables:	defaultServiceCharge	&lt;FixedPoint&gt;	defaultServiceId		&lt;Symbol&gt;</body></comment><class><name>InformationService</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.InformationService</class-id><body>This is an abstract superclass for information services provided by the library. For example, things like weather information.</body></comment><class><name>WeatherForecastService</name><environment>Protocols.Library</environment><super>Protocols.Library.InformationService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.WeatherForecastService</class-id><body>WeatherForecastService is a library-optional, charged library service.Invoking the service entails a nominal fee. It affects the account of the patron invoking it by changing the account balance and adding a transaction to the parton's account transaction history. It does not affect the library account.</body></comment><class><name>AgentTransaction</name><environment>Protocols.Library</environment><super>Protocols.Library.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>agentId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.AgentTransaction</class-id><body>This is an abstract superclass of all transactions for agent relationship changes.Instance Variables:	agentId	&lt;Symbol&gt; subject of the transaction</body></comment><class><name>RetireAffiliatedLibrary</name><environment>Protocols.Library</environment><super>Protocols.Library.AgentTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>ServiceCharge</name><environment>Protocols.Library</environment><super>Protocols.Library.FinancialTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serviceId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.ServiceCharge</class-id><body>Represents a service charge.Instance Variables:	serviceId	&lt;Symbol&gt; for which service was charged</body></comment><class><name>Account</name><environment>Protocols.Library</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>balance transactionHistory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Account</class-id><body>Account represents the account of an Agent, that is, of either a library or a library patron.Instance Variables:	balance				&lt;FixedPoint&gt;			current balance of funds	transactionHistory		&lt;OrderedCollection of: Transaction&gt;</body></comment><class><name>PhonographRecord</name><environment>Protocols.Library</environment><super>Protocols.Library.AnalogRecording</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.PhonographRecord</class-id><body>This is a vinyl record popular in pre-CD era.</body></comment><class><name>TelephoneNumber</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type description number </inst-vars><class-inst-vars>telephoneNumberTypes </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.TelephoneNumber</class-id><body>Instance Variables:	type		&lt;Symbol&gt; one of #telephoneNumberTypes	description	&lt;String&gt; 	number	&lt;String&gt; Class Instance Variables:	telephoneNumberTypes	&lt;Array of: Symbol&gt; available types #(#voice #fax #home #office #cell #work)</body></comment><class><name>Agent</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>account borrowedHoldings emailAddresses physicalAddress serviceApprovals telephoneNumbers </inst-vars><class-inst-vars>serviceApprovals </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Agent</class-id><body>Agent is the abstract superclass of those entities in the library demo (LD) that can are the nominal initiators of actions affecting the state of the simulation.  However, note that entities in the LibraryService hierarchy may do so as well.Instance Variables:	account				&lt;Account&gt; the associated account of an agent	borrowedHoldings		&lt;Bag of: Holding&gt; a potentially empty Bag of items borrowed from Libraries indexed by 'dueDate'	emailAddresses		&lt;Array of: EmailAddress&gt; a potentially empty Array of email addresses	physicalAddress		&lt;PhysicalAddress&gt; a mailing and street address	serviceApprovals		&lt;Set of: Symbol&gt; list of services that are approved for agent's use	telephoneNumbers	&lt;Set of: TelephoneNumber&gt; a potentially empty set of phone numberClass Instance Variables:	serviceApprovals		&lt;Set of: Symbol&gt; the list of recognized service approvalsShared Class Variables:	NextAgentId			&lt;Array&gt;</body></comment><class><name>Patron</name><environment>Protocols.Library</environment><super>Protocols.Library.Agent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>patronId patronName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Patron</class-id><body>Patron represents private patrons of a Library.Instance Variables:	patronId	&lt;Symbol&gt; a library-specific patron identifier	patronName	&lt;PersonName | OrganizationName&gt; the patron's name</body></comment><class><name>Person</name><environment>Protocols.Library</environment><super>Protocols.Library.Patron</super><private>false</private><indexed-type>none</indexed-type><inst-vars>birthDate sex ssn </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Person</class-id><body>Persons are library patrons representing people. They are identified by their social security number (SSN) and carry few additional attributes.Instance Variables:	birthDate		&lt;Date&gt;		person's birth date	sex				&lt;Symbol&gt;	one of #F or #M	ssn				&lt;Integer&gt;	social security number</body></comment><class><name>HoldingNotFound</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.HoldingNotFound</class-id><body>Error signalled when a holding is not found.</body></comment><class><name>AcquirePatron</name><environment>Protocols.Library</environment><super>Protocols.Library.AgentTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>Book</name><environment>Protocols.Library</environment><super>Protocols.Library.LoanedHolding</super><private>false</private><indexed-type>none</indexed-type><inst-vars>authors braille coverPhoto language largePrint pages publicationYear publisher title </inst-vars><class-inst-vars>publishers libraryBookData archiveBookData </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Book</class-id><body>Book represents a printed book.Instance Variables:	authors		&lt;Array of: AuthorialName&gt; qualified list of book authors	braille			&lt;Boolean&gt; is the book printed in Braille	coverPhoto	&lt;Image&gt; optional picture of the book cover	language		&lt;Symbol&gt; book language	largePrint		&lt;Boolean&gt; is the book printed in large print	pages			&lt;Integer&gt; the number of pages	publicationYear	&lt;Integer&gt; 	publisher		&lt;String&gt; the name of the publisher	title				&lt;String&gt; title of the bookClass Instance Variables:	publishers			&lt;Array of: String&gt; list of publisher names	libraryBookData	&lt;Object&gt; sample categorized library holdings	archiveBookData	&lt;Object&gt; sample categorized naval archive holdings</body></comment><class><name>SearchService</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.SearchService</class-id><body>SearchService presents an API for searching the library's holdings, or that of its affiliates, for books and other holdings of interest.SearchService provides a free-of-charge, library-mandatory service. Invoking the service does not entail either balance or transaction history changes. It has no effect on either the library's or the invoking patron's account.</body></comment><class><name>CopyService</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.CopyService</class-id><body>CopyService presents an API for patrons to request copies of the library's holdings.A copy request debits a patron's account and adds a service charge transaction to the patron's transaction history.The libraries of Port Nowhere have a somewhat cavalier attitude toward copyright legislation.  Several of their more generous patrons are professionally engaged in smuggling books to countries with aggressive censorship, and the Port Nowhere Library System Bindery stands ever ready to assist enlightened book distributors of this kind.  If this were not sufficient to justify the service, mariners, on the eve of a voyage or shortly thereafter, often realize that they wish to take along a copy of, say, the 'Collected Poems' of Joseph Brodsky, or Rabelais' 'The Adventures of Gargantua and Pantagruel', and have no opportunity to rummage through a bookstore.  In response, the Port Nowhere Library System Bindery is highly automated.  It is noted for its guaranteed four-hour turnaround on all orders up to 500 volumes, and for the excellence of its offshore, speedboat delivery service.  Naval architects and boat builders are also likely to experience a sudden interest in ship plans at odd hours of the morning or night.  To serve the needs of such trusted patrons, the libraries of Port Nowhere, in conjunction with their bindery, offer unique book and ship plan copying and delivery services for a nearly nominal fee, that, nonetheless, accounts for much of their income, and allows them to purchase the additional books and plans that, in connection with this service, ever increase both their trade and the breadth of their holdings.  </body></comment><class><name>AuthorialName</name><environment>Protocols.Library</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>authorialType name </inst-vars><class-inst-vars>authorialTypes </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.AuthorialName</class-id><body>AuthorialName represents the name and role of an 'author', as widely understood.  The class is intended to provide an occasion for the testing of unions insofar as its 'name' instance variable may take either of two types.Instance Variables:	authorialType	&lt;Symbol&gt;											identifies the authorial role	name			&lt;LDDataPersonName|LDDataOrganizationName&gt;		a name</body></comment><class><name>DigitalRecording</name><environment>Protocols.Library</environment><super>Protocols.Library.Recording</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.DigitalRecording</class-id><body>This is an abstract superclass of all digital recordings.</body></comment><class><name>DigitalVideoDisc</name><environment>Protocols.Library</environment><super>Protocols.Library.DigitalRecording</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.DigitalVideoDisc</class-id><body>This is a DVD.</body></comment><class><name>PatronNotApprovedForService</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.PatronNotApprovedForService</class-id><body>Error signalled when a patron requests a service that is not approved for his/her use.</body></comment><class><name>HoldingTransaction</name><environment>Protocols.Library</environment><super>Protocols.Library.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>holding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.HoldingTransaction</class-id><body>This an abstract superclass for all transactions dealing with library holdings.Instance Variables:	holding	&lt;Holding&gt;</body></comment><class><name>RetireHolding</name><environment>Protocols.Library</environment><super>Protocols.Library.HoldingTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>AcquireAffiliatedLibrary</name><environment>Protocols.Library</environment><super>Protocols.Library.AgentTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>Organization</name><environment>Protocols.Library</environment><super>Protocols.Library.Patron</super><private>false</private><indexed-type>none</indexed-type><inst-vars>taxIdNumber </inst-vars><class-inst-vars>nextTaxIdNumber </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Organization</class-id><body>Organization represents an organizational patron of the library.  Organizations are idenified by a 'tax id number' or TIN rather than by a 'social security number' or SSN.Instance Variables:	taxIdNumber	&lt;WordArray&gt; a putatively unique organization identifierClass Instance Variables:	nextTaxIdNumber	&lt;WordArray&gt;</body></comment><class><name>EmailAddress</name><environment>Protocols.Library</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>address description </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.EmailAddress</class-id><body>Represents the e-mail address of a patron or an organization.Instance Variables:	address	&lt;String&gt;	description	&lt;String&gt;</body></comment><class><name>PlaceReservation</name><environment>Protocols.Library</environment><super>Protocols.Library.HoldingTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>CatalogNumber</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>part1 part2 part3 part4 </inst-vars><class-inst-vars>nextPart3 </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.CatalogNumber</class-id><body>CatalogNumber represents a catalog number something like the Library of Congress catalog number.  It provides an occasion to test the marshaling of assorted types.  Since it is used as a key in an IdentityDictionary (Library&gt;&gt;ownedHoldings), there are occasions when it may be a good idea to pass CatalogNumbers by reference.Instance Variables:	part1	&lt;TwoByteString&gt; part1 of the LDDataCatalogNumber	part2	&lt;ByteArray&gt; part2 of the LDDataCatalogNumber	part3	&lt;Double&gt; part3 of the LDDataCatalogNumber	part4	&lt;Character&gt; part4 of the LDDataCatalogNumberClass Instance Variables:	nextPart3	&lt;Object&gt; undocumented</body></comment><class><name>ServiceTransaction</name><environment>Protocols.Library</environment><super>Protocols.Library.Transaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serviceId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.ServiceTransaction</class-id><body>This an abstract superclass for all transactions dealing with library services.Instance Variables:	serviceId	&lt;Symbol&gt; the subject of the transaction</body></comment><class><name>PublishService</name><environment>Protocols.Library</environment><super>Protocols.Library.ServiceTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>RetainedHolding</name><environment>Protocols.Library</environment><super>Protocols.Library.Holding</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.RetainedHolding</class-id><body>This is a library holding that isn't for loan, but can be used by patrons on the library premises.</body></comment><class><name>GeneralPublicService</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.GeneralPublicService</class-id><body>GeneralPublicService provides an interface for queries about some free services provided by the library.Ordinary users of the Port Nowhere Library System need to inspect the current balance of their account, find out which of the books they have borrowed are due when, and so on.GeneralPublicService is a library-mandatory, free library service, that supports the interface for such queries.</body></comment><class><name>AdministrativeService</name><environment>Protocols.Library</environment><super>Protocols.Library.GeneralPublicService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.AdministrativeService</class-id><body>The librarians of the Port Nowhere Library System need to modify the state of that system in ways that ordinary library patrons may not.  An AdministrativeService provides the interface for their activities.</body></comment><class><name>PersonName</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title firstName middleNames lastName </inst-vars><class-inst-vars>femaleTitles maleTitles femaleFirstNames maleFirstNames femaleMiddleNames maleMiddleNames lastNames </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.PersonName</class-id><body>Represents that name of a Person.Instance Variables:	title	&lt;String&gt;	firstName	&lt;String&gt;	middleNames	&lt;String&gt;	lastName	&lt;String&gt;Class Instance Variables:	femaleTitles	&lt;Array of: String&gt;	maleTitles	&lt;Array of: String&gt;	femaleFirstNames	&lt;Array of: String&gt;	maleFirstNames	&lt;Array of: String&gt;	femaleMiddleNames	&lt;Array of: String&gt;	maleMiddleNames	&lt;Array of: String&gt;	lastNames	&lt;Array of: String&gt;</body></comment><class><name>AcquireGrant</name><environment>Protocols.Library</environment><super>Protocols.Library.FinancialTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>OrganizationName</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars>organizationTypes </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.OrganizationName</class-id><body>Instance Variables:	name	&lt;String&gt; name of an organizationClass Instance Variables:	organizationTypes	&lt;Array of: String&gt; various organization types</body></comment><class><name>BorrowHolding</name><environment>Protocols.Library</environment><super>Protocols.Library.HoldingTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>CompactDisc</name><environment>Protocols.Library</environment><super>Protocols.Library.DigitalRecording</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.CompactDisc</class-id><body>This is a CD.</body></comment><class><name>PhysicalAddress</name><environment>Protocols.Library</environment><super>Protocols.Library.AbstractRandom</super><private>false</private><indexed-type>none</indexed-type><inst-vars>streetAddress1 streetAddress2 city stateOrProvince postalCode country </inst-vars><class-inst-vars>address1StreetNames address2Descriptions </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.PhysicalAddress</class-id><body>Represents a phyical address (a.k.a. street address).Instance Variables:	streetAddress1	&lt;String&gt;	streetAddress2	&lt;String&gt;	city					&lt;String&gt;	stateOrProvince	&lt;Symbol&gt;	postalCode		&lt;String&gt;	country				&lt;Symbol&gt;Class Instance Variables:	address1StreetNames	&lt;Array of: String&gt;	address2Descriptions	&lt;Array of: String&gt;</body></comment><class><name>OverdueCharge</name><environment>Protocols.Library</environment><super>Protocols.Library.FinancialTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>RetirePatron</name><environment>Protocols.Library</environment><super>Protocols.Library.AgentTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>ReturnHolding</name><environment>Protocols.Library</environment><super>Protocols.Library.HoldingTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><class><name>HoldingNotCopiedByBindery</name><environment>Protocols.Library</environment><super>Protocols.Library.LibraryError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.HoldingNotCopiedByBindery</class-id><body>Error signalled when a holding cannot be copied by the library.</body></comment><class><name>Library</name><environment>Protocols.Library</environment><super>Protocols.Library.Agent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>affiliatedLibraries libraryId libraryName loanedHoldings ownedHoldings patrons reservedHoldings services </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Library</class-id><body>Library loans its holdings and provides additional services to its patrons. Libraries can be affiliated with each other to be able to share their offerings.Description:The Library Demo includes one pre-packaged example, based upon the model of a public library in a ficticious place called Port Nowhere.Port Nowhere is nestled on the shore of a mid-sized bay on the Pacific Coast of North America. The Disappearing Mountains of the Coast Range, largely granitic in composition, rise behind the town, which is nevertheless bordered by significant areas of mixed forest and oak scrubland.Port Nowhere is the home of the Port Nowhere Public Library.  This library is affiliated with the Library and Ship Plan Archive of the well-respected Port Nowhere Maritime Museum.The economic life of Port Nowhere is principally maritime.  It is the major port of The Lost Coast, a commercial and sport fishing center, the site of several canneries, as well as the home of several well-reputed naval architects, ship building firms, expedition outfitters, and smugglers.  The mountains behind the town support a significant, but carefully-managed lumber industry.  Many of the firms in Port Nowhere are have organizational accounts with the public library.Port Nowhere was settled by immigrants from throughout Europe and the Pacific Rim, and its inhabitants, though strongly given to intermarriage, maintain a strong attachment to both their native languages and the memory of the great maritime figures of their homelands. Thus, in Port Nowhere, one meets people with names like 'Heihachiro Guiseppe Tordenskjold' or 'Brendan Boris Caboto' as a matter of course. Almost all of the residents of Port Nowhere have library cards and read avidly in several languages.To serve the varied interests of its patrons, the Port Nowhere Public Library System provides a number of services. In the Library demo, these are represented by parts of the class hierarchy.GeneralPublicService:	ordinary users of the Library System need to inspect the current balance of their account, find out which of the books they have borrowed are due when, and so on.  Subclasses of GeneralPublicService represent library-mandatory, free library services, and so GeneralPublicService defines the interface for such queries.AdministrativeService:	the librarians need to modify the state of the library system in ways that ordinary library patrons may not.  AdministrativeService (a subclass of GeneralPublicService) provides the interface for their activities.SearchHoldingsService: users of the Library System often search its holdings, or the holdings of its affiliated libraries, for books and other holdings of interest. A Search is a free-of-charge, library-mandatory service. Invoking the service does not entail either balance or transaction history changes.  Invoking it has no effect on either the library's or the invoking patron's account.WeatherForecastService: the mariners and foresters of Port Nowhere have a professional interest in the weather.  A WeatherForecast is a library-optional, charged library service.  Invoking the service entails a nominal use fee.  It affects the account of the patron invoking it by changing the account balance and adding a transaction to the patron's account transaction history.  It does not affect the library account.CopyRequestService:	Copy requests debit a patron's account and add a service charge transaction to the patron's transaction history.Instance Variables:	affiliatedLibraries	&lt;Set of: Library&gt; affiliated libraries	libraryId			&lt;Symbol&gt; identifier	libraryName		&lt;String&gt; the name of the institution	loanedHoldings	&lt;OrderedCollection of: Holding&gt; holdings currently on loan	ownedHoldings	&lt;Dictionary key: Integer value: Holding&gt; registry of all the library holdings	patrons			&lt;SortedCollection of: Patron&gt; registry of all the library patrons	reservedHoldings	&lt;IdentitySet of: Holding&gt; holdings currently reserved for future loan	services			&lt;IdentityDictionary key: Symbol value: LibraryService&gt; registry of available library servicesShared Class Variables:	LibraryDepartments	&lt;Array of: Symbol&gt; various deparments in a library</body></comment><class><name>VideoTape</name><environment>Protocols.Library</environment><super>Protocols.Library.AnalogRecording</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.VideoTape</class-id><body>This is a video tape used in VCRs.</body></comment><class><name>RequestDueDateExtension</name><environment>Protocols.Library</environment><super>Protocols.Library.HoldingTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newDueDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.RequestDueDateExtension</class-id><body>Instance Variables:	newDueDate	&lt;Date&gt;</body></comment><class><name>ShipPlan</name><environment>Protocols.Library</environment><super>Protocols.Library.RetainedHolding</super><private>false</private><indexed-type>none</indexed-type><inst-vars>architects numberOfSheets scale sheetDimensions shipName yearDrawn </inst-vars><class-inst-vars>shipNames </class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.ShipPlan</class-id><body>This class represents drawings and specification of a ship.Instance Variables:	architects			&lt;Array of: AuthorialName&gt; qualified list of ship architects	numberOfSheets	&lt;Integer&gt;	scale				&lt;Fraction&gt; the scale of the drawings	sheetDimensions	&lt;Point&gt;	shipName			&lt;String&gt; the name of the ship design	yearDrawn			&lt;Integer&gt;Class Instance Variables:	shipNames			&lt;Array of: String&gt; list of various ship names</body></comment><class><name>Reservation</name><environment>Protocols.Library</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>holdingCatalogNumber patronId reservationType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><comment><class-id>Protocols.Library.Reservation</class-id><body>Reservation represents a revervation on an Holding by an Patron.A reservation should be allowed only if the Holding is a LoanedHolding and has a 'statusId' of '#borrowed'. Normally, a LoanedHolding is reserved for #borrowing.  But, if the Library provides a copying service, it can be reserved for #copying, in which case it's copied before it is loaned again.Instance Variables:	holdingCatalogNumber	&lt;CatalogNumber&gt; of the holding being reserved	patronId					&lt;Symbol&gt; the 'partonId' of the patron placing the reservation	reservationType			&lt;Symbol&gt; either #borrowing or #copying</body></comment><class><name>AcquireHolding</name><environment>Protocols.Library</environment><super>Protocols.Library.HoldingTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LibraryDemo</category><attributes><package>Protocols-LibraryDemo</package></attributes></class><shared-variable><name>NextAgentId</name><environment>Protocols.Library.Agent</environment><private>false</private><constant>false</constant><category>ids</category><attributes><package>Protocols-LibraryDemo</package></attributes></shared-variable><shared-variable><name>LibraryDepartments</name><environment>Protocols.Library.Library</environment><private>false</private><constant>false</constant><category>accessing</category><initializer></initializer><attributes><package>Protocols-LibraryDemo</package></attributes></shared-variable><shared-variable><name>NextTransactionId</name><environment>Protocols.Library.Transaction</environment><private>false</private><constant>false</constant><category>ids</category><attributes><package>Protocols-LibraryDemo</package></attributes></shared-variable><shared-variable><name>Random</name><environment>Protocols.Library.AbstractRandom</environment><private>false</private><constant>false</constant><category>random</category><attributes><package>Protocols-LibraryDemo</package></attributes></shared-variable><shared-variable><name>NextAcquisitionNumber</name><environment>Protocols.Library.Holding</environment><private>false</private><constant>false</constant><category>shared</category><attributes><package>Protocols-LibraryDemo</package></attributes></shared-variable><methods><class-id>Protocols.Library.AbstractRandom</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">random	^self class random</body></methods><methods><class-id>Protocols.Library.AbstractRandom</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize</body></methods><methods><class-id>Protocols.Library.AbstractRandom class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">new	^super new initialize</body></methods><methods><class-id>Protocols.Library.AbstractRandom class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomDoubleLessThan: aPositiveNumber	^( self random next * aPositiveNumber ) asDouble</body><body package="Protocols-LibraryDemo">randomFloatLessThan: aPositiveNumber	^( self random next * aPositiveNumber ) asFloat</body><body package="Protocols-LibraryDemo">randomIntegerLessThan: aPositiveNumber	"((( LDAbstractRandom randomIntegerLessThan: 3 )))"	^( self random next * aPositiveNumber ) truncated</body><body package="Protocols-LibraryDemo">randomPositiveIntegerWithMax: aPositiveNumber	"((( LDAbstractRandom randomPositiveIntegerWithMax: 3 )))"	^1 + ( self random next * aPositiveNumber ) truncated</body><body package="Protocols-LibraryDemo">randomYear	^1800 + ( self randomPositiveIntegerWithMax: ( Date today year - 1800 ) )</body><body package="Protocols-LibraryDemo">setSeed: anInteger	self random seed: anInteger</body></methods><methods><class-id>Protocols.Library.AbstractRandom class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDAbstractRandom initialize )))"	Random := MinimumStandardRandom new.	self setSeed: 1072299453</body></methods><methods><class-id>Protocols.Library.AbstractRandom class</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">random	^Random</body></methods><methods><class-id>Protocols.Library.Holding</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">acquisitionCost	^acquisitionCost</body><body package="Protocols-LibraryDemo">acquisitionCost: aFixedPoint	acquisitionCost := aFixedPoint</body><body package="Protocols-LibraryDemo">acquisitionDate	^acquisitionDate</body><body package="Protocols-LibraryDemo">acquisitionDate: aDate	acquisitionDate := aDate</body><body package="Protocols-LibraryDemo">acquisitionNumber	^acquisitionNumber</body><body package="Protocols-LibraryDemo">acquisitionNumber: aLargePositiveInteger	acquisitionNumber := aLargePositiveInteger</body><body package="Protocols-LibraryDemo">catalogNumber	^catalogNumber</body><body package="Protocols-LibraryDemo">catalogNumber: aLDCatalogNumber	catalogNumber := aLDCatalogNumber</body><body package="Protocols-LibraryDemo">collectionId	^collectionId</body><body package="Protocols-LibraryDemo">collectionId: aCollectionId	collectionId := aCollectionId</body><body package="Protocols-LibraryDemo">dueDate	^dueDate</body><body package="Protocols-LibraryDemo">dueDate: aDate	dueDate := aDate</body><body package="Protocols-LibraryDemo">libraryName	^libraryName</body><body package="Protocols-LibraryDemo">libraryName: aString	libraryName := aString</body><body package="Protocols-LibraryDemo">statusId	^statusId</body><body package="Protocols-LibraryDemo">statusId: aStatusId	statusId := aStatusId</body></methods><methods><class-id>Protocols.Library.Holding</class-id> <category>utility</category><body package="Protocols-LibraryDemo">availableForLDSrvcCopyRequest	^false</body><body package="Protocols-LibraryDemo">isLoaned	^statusId == ( (#loaned &lt;&lt; #librarydemo &gt;&gt; 'loaned') asString asSymbol )</body><body package="Protocols-LibraryDemo">isShelved	^statusId == ( (#shelved &lt;&lt; #librarydemo &gt;&gt; 'shelved') asString asSymbol )</body><body package="Protocols-LibraryDemo">searchAuthorialLastNames	^self subclassResponsibility</body><body package="Protocols-LibraryDemo">searchTitles	^self subclassResponsibility</body></methods><methods><class-id>Protocols.Library.Holding</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.	acquisitionCost := self class randomAcquisitionCost.	acquisitionDate := self class randomAcquisitionDate.	acquisitionNumber := self class newAcquisitionNumber.	catalogNumber := CatalogNumber randomLDDataCatalogNumber.	"collectionId := nil."	"dueDate := nil."	"libraryName := nil."	statusId := (#shelved &lt;&lt; #librarydemo &gt;&gt; 'shelved') asString asSymbol</body></methods><methods><class-id>Protocols.Library.Holding class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDHolding initialize )))"	NextAcquisitionNumber := SmallInteger maxVal + 1.	self initializeCollectionIds.	self initializeStatusIds.	collectionIds := 		#(			#'Books on Tape'			#'Biography and Autobiography'			#'Braille'			#'Computer Science and Mathematics'			#'Electronic Books'			#'Historical Fiction'				#'History and Archaeology'			#'Instructional Videos'			#'Large Print'			#'Literature'			#'Meteorology'			#'Movies'			#'Musicology'			#'Musical Recordings'			#'Mystery'			#'Naval Architecture'			#'Nautical History and Literature'			#'Philosophy'			#Poetry'			#'Rare Books'			#'Readings'			#Reference'			#'Science Fiction'			#'Theology and Religion'		).		statusIds := 			( Array new: 7 )				at: 1 put: #shelving;				at: 2 put: #shelved;				at: 3 put: #loaned;				at: 4 put: #shipping;				at: 5 put: #receiving;				at: 6 put: #bindery;				at: 7 put: #cataloging;				yourself.</body><body package="Protocols-LibraryDemo">initializeCollectionIds	collectionIds := 		( OrderedCollection new )			add: (#BooksOnTape &lt;&lt; #librarydemo &gt;&gt; 'Books on Tape') asString asSymbol;			add: (#BiographyAndAutobiography &lt;&lt; #librarydemo &gt;&gt; 'Biography and Autobiography') asString asSymbol;			add: (#Braille &lt;&lt; #librarydemo &gt;&gt; 'Braille') asString asSymbol;			add: (#ComputerScienceAndMathematics &lt;&lt; #librarydemo &gt;&gt; 'Computer Science and Mathematics') asString asSymbol;			add: (#DigitalBooks &lt;&lt; #librarydemo &gt;&gt; 'Digital Books') asString asSymbol;			add: (#HistoricalFiction &lt;&lt; #librarydemo &gt;&gt; 'Historical Fiction') asString asSymbol;			add: (#HistoryandArchaeology &lt;&lt; #librarydemo &gt;&gt; 'History and Archaeology') asString asSymbol;			add: (#InstructionalVideos &lt;&lt; #librarydemo &gt;&gt; 'Instructional Videos') asString asSymbol;			add: (#LargePrint &lt;&lt; #librarydemo &gt;&gt; 'Large Print') asString asSymbol;			add: (#Literature &lt;&lt; #librarydemo &gt;&gt; 'Literature') asString asSymbol;			add: (#Meteorology &lt;&lt; #librarydemo &gt;&gt; 'Meteorology') asString asSymbol;			add: (#Movies &lt;&lt; #librarydemo &gt;&gt; 'Movies') asString asSymbol;			add: (#Musicology &lt;&lt; #librarydemo &gt;&gt; 'Musicology') asString asSymbol;			add: (#MusicalRecordings &lt;&lt; #librarydemo &gt;&gt; 'Musical Recordings') asString asSymbol;			add: (#Mystery &lt;&lt; #librarydemo &gt;&gt; 'Mystery') asString asSymbol;			add: (#NavalArchitecture &lt;&lt; #librarydemo &gt;&gt; 'Naval Architecture') asString asSymbol;			add: (#NauticalHistoryAndLiterature &lt;&lt; #librarydemo &gt;&gt; 'Nautical History and Literature') asString asSymbol;			add: (#Philosophy &lt;&lt; #librarydemo &gt;&gt; 'Philosophy') asString asSymbol;			add: (#Poetry &lt;&lt; #librarydemo &gt;&gt; 'Poetry') asString asSymbol;			add: (#RareBooks &lt;&lt; #librarydemo &gt;&gt; 'Rare Books') asString asSymbol;			add: (#Readings &lt;&lt; #librarydemo &gt;&gt; 'Readings') asString asSymbol;			add: (#Reference &lt;&lt; #librarydemo &gt;&gt; 'Reference') asString asSymbol;			add: (#ScienceFiction &lt;&lt; #librarydemo &gt;&gt; 'Science Fiction') asString asSymbol;			add: (#TheologyAndReligion &lt;&lt; #librarydemo &gt;&gt; 'Theology and Religion') asString asSymbol;			asArray</body><body package="Protocols-LibraryDemo">initializeStatusIds		statusIds := 			( Array new: 8 )				at: 1 put: (#shelving &lt;&lt; #librarydemo &gt;&gt; 'shelving') asString asSymbol;				at: 2 put: (#shelved &lt;&lt; #librarydemo &gt;&gt; 'shelved') asString asSymbol;				at: 3 put: (#loaned &lt;&lt; #librarydemo &gt;&gt; 'loaned') asString asSymbol;				at: 4 put: (#shipping &lt;&lt; #librarydemo &gt;&gt; 'shipping') asString asSymbol;				at: 5 put: (#receiving &lt;&lt; #librarydemo &gt;&gt; 'receiving') asString asSymbol;				at: 6 put: (#bindery &lt;&lt; #librarydemo &gt;&gt; 'bindery') asString asSymbol;				at: 7 put: (#cataloging &lt;&lt; #librarydemo &gt;&gt; 'cataloging') asString asSymbol;				at: 8 put: (#copying &lt;&lt; #librarydemo &gt;&gt; 'copying') asString asSymbol;				yourself</body></methods><methods><class-id>Protocols.Library.Holding class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">newAcquisitionNumber	^NextAcquisitionNumber := ( NextAcquisitionNumber + 1 ).</body><body package="Protocols-LibraryDemo">randomAcquisitionCost	^FixedPoint 		numerator: ( 2900 + ( self randomIntegerLessThan: 9700 ) )		denominator: 100 		scale: 2</body><body package="Protocols-LibraryDemo">randomAcquisitionDate	"... assume the library opened a year ago."	^Date today subtractDays: ( self randomIntegerLessThan: 365 )</body></methods><methods><class-id>Protocols.Library.Holding class</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">collectionIds	^collectionIds</body><body package="Protocols-LibraryDemo">statusIds	^statusIds</body></methods><methods><class-id>Protocols.Library.LoanedHolding</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.	reservationList := LinkedList new.</body></methods><methods><class-id>Protocols.Library.Transaction</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">timestamp	^timestamp</body><body package="Protocols-LibraryDemo">timestamp: aTimestamp	timestamp := aTimestamp</body><body package="Protocols-LibraryDemo">transactionId	^transactionId</body><body package="Protocols-LibraryDemo">transactionId: aDwordArray	transactionId := aDwordArray</body></methods><methods><class-id>Protocols.Library.Transaction</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	timestamp := Timestamp now.	transactionId := self class newTransactionId.</body></methods><methods><class-id>Protocols.Library.Transaction class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">new	^super new initialize</body></methods><methods><class-id>Protocols.Library.Transaction class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">newTransactionId	| id |	id := NextTransactionId.	id at: 1 put: ( id at: 1 ) + 11.	id at: 1 put: ( id at: 2 ) + 13.	id at: 1 put: ( id at: 3 ) + 17.	id at: 1 put: ( id at: 4 ) + 19.	^id</body></methods><methods><class-id>Protocols.Library.Transaction class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDTrans initialize )))"	NextTransactionId := DwordArray new: 4.	NextTransactionId		at: 1 put: ( 2 raisedTo: 15 );		at: 2 put: ( 2 raisedTo: 16 );		at: 3 put: ( 2 raisedTo: 30 );		at: 4 put: ( 2 raisedTo: 31 ).</body></methods><methods><class-id>Protocols.Library.FinancialTransaction</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">amount	^amount</body><body package="Protocols-LibraryDemo">amount: aNumber	amount := aNumber</body></methods><methods><class-id>Protocols.Library.FinancialTransaction class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">amount: aNumber	^( self new )		amount: aNumber;		yourself</body></methods><methods><class-id>Protocols.Library.LibraryService</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">library	^library</body><body package="Protocols-LibraryDemo">library: aLDLibrary	library := aLDLibrary</body><body package="Protocols-LibraryDemo">serviceCharge	^( serviceCharge isNil )		ifTrue:	[ serviceCharge := self class defaultServiceCharge ]		ifFalse:	[ serviceCharge ]</body><body package="Protocols-LibraryDemo">serviceCharge: aFixedPoint	serviceCharge := aFixedPoint</body><body package="Protocols-LibraryDemo">serviceId	^( serviceId isNil )		ifTrue:	[ serviceId := self class defaultServiceId ]		ifFalse:	[ serviceId ]</body><body package="Protocols-LibraryDemo">serviceId: aSymbol	serviceId := aSymbol</body></methods><methods><class-id>Protocols.Library.LibraryService</class-id> <category>utility</category><body package="Protocols-LibraryDemo">serviceFee	^self serviceCharge</body></methods><methods><class-id>Protocols.Library.LibraryService class</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">defaultServiceCharge	^( defaultServiceCharge isNil )		ifTrue:	[ defaultServiceCharge := FixedPoint numerator: 0 denominator: 100 scale: 2 ]		ifFalse:	[ defaultServiceCharge ]</body><body package="Protocols-LibraryDemo">defaultServiceId	^( defaultServiceId isNil )		ifTrue:	[ defaultServiceId := self name ]		ifFalse:	[ defaultServiceId ]</body></methods><methods><class-id>Protocols.Library.WeatherForecastService</class-id> <category>public api</category><body package="Protocols-LibraryDemo">currentWeatherForecastForPatronId: aLDPatron_patronId	"receiver: LDSrvcWeatherForecast"	"arguments: Symbol"	"returns: Text"	"possible exceptions: LDExcPatronNotFound"		| patron trans |	patron := library patronById: aLDPatron_patronId.	trans := ServiceCharge				amount: self serviceFee				serviceId: self serviceId.	patron account addTransaction: trans.	^self class randomWeatherForecast</body></methods><methods><class-id>Protocols.Library.WeatherForecastService class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDSrvcWeatherForecast initialize )))"	defaultServiceCharge := FixedPoint numerator: 1 denominator: 100 scale: 2.	defaultServiceId := #WeatherForecastService</body></methods><methods><class-id>Protocols.Library.WeatherForecastService class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomWeatherForecast	"((( LDSrvcWeatherForecast randomWeatherForecast )))"	| dat tstr |	dat := Date today.	tstr := TextStream on: ( String new: 256 ).	tstr		cr;		emphasis: #( #bold #underline );		nextPutAll:	(#FORECASTTITLE &lt;&lt; #librarydemo &gt;&gt; 'FORECAST FOR CAPE NEMO AND THE LOST COAST') asString;		emphasis: nil;		cr;		crtab; nextPutAll: (#REGIONALWEATHERSERVICE &lt;&lt; #librarydemo &gt;&gt; 'REGIONAL WEATHER SERVICE') asString;		crtab; nextPutAll: (#APORIABAYCALIFORNIA &lt;&lt; #librarydemo &gt;&gt; 'APORIA BAY, CALIFORNIA') asString;		crtab; nextPutAll: '0400 AM PST';		crtab; nextPutAll: ( dat weekday, ' ', dat printString ) asUppercase;		cr;		cr;		emphasis: #( #bold #italic );		nextPutAll: (#TODAY &lt;&lt; #librarydemo &gt;&gt; 'TODAY') asString;		emphasis: nil;		cr;		cr; nextPutAll: (#PARTLYCLOUDY &lt;&lt; #librarydemo &gt;&gt; '...PARTLY CLOUDY WITH PATCHY MORNING FOG...THEN MOSTLY SUNNY THIS AFTERNOON. HIGHS IN THE UPPER 50S TO THE MID 60S. NORTH WIND TO 15 MPH.') asString;		cr;		cr;		emphasis: #( #bold #italic );		nextPutAll: (#TONIGHT &lt;&lt; #librarydemo &gt;&gt; 'TONIGHT') asString;		emphasis: nil;		cr;		cr; nextPutAll: (#MOSTLYCLEAR &lt;&lt; #librarydemo &gt;&gt; '...MOSTLY CLEAR WITH PATCHY FOG LATE... LOWS IN THE 30S TO THE LOWER 40S. NORTH WIND 5 TO 10 MPH.') asString;		cr.	^tstr contents</body></methods><methods><class-id>Protocols.Library.AgentTransaction</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">agentId	^agentId</body><body package="Protocols-LibraryDemo">agentId: aSymbol	agentId := aSymbol</body></methods><methods><class-id>Protocols.Library.AgentTransaction class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">agentId: aSymbol	^( self new )		agentId: aSymbol;		yourself</body></methods><methods><class-id>Protocols.Library.ServiceCharge</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">serviceId	^serviceId</body><body package="Protocols-LibraryDemo">serviceId: aSymbol	serviceId := aSymbol</body></methods><methods><class-id>Protocols.Library.ServiceCharge class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">amount: aNumber serviceId: aSymbol	^( self new )		amount: aNumber;		serviceId: aSymbol;		yourself</body></methods><methods><class-id>Protocols.Library.Account</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">balance	^balance</body><body package="Protocols-LibraryDemo">balance: aFixedPoint	balance := aFixedPoint</body><body package="Protocols-LibraryDemo">transactionHistory	^transactionHistory</body><body package="Protocols-LibraryDemo">transactionHistory: anOrderedCollection	transactionHistory := anOrderedCollection</body></methods><methods><class-id>Protocols.Library.Account</class-id> <category>private</category><body package="Protocols-LibraryDemo">addTransaction: aLDTransaction	( aLDTransaction isKindOf: FinancialTransaction )		ifTrue:	[ balance := balance + aLDTransaction amount ].	transactionHistory addLast: aLDTransaction</body><body package="Protocols-LibraryDemo">agentTransactions	^transactionHistory select: [ :x | x isKindOf: AgentTransaction ]</body><body package="Protocols-LibraryDemo">currentBalance	^balance</body><body package="Protocols-LibraryDemo">financialTransactions	^transactionHistory select: [ :x | x isKindOf: FinancialTransaction ]</body><body package="Protocols-LibraryDemo">holdingTransactions	^transactionHistory select: [ :x | x isKindOf: HoldingTransaction ]</body><body package="Protocols-LibraryDemo">lastTransaction	^transactionHistory last</body><body package="Protocols-LibraryDemo">serviceTransactions	^transactionHistory select: [ :x | x isKindOf: ServiceCharge ]</body></methods><methods><class-id>Protocols.Library.Account</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	balance := FixedPoint numerator: 0 denominator: 100 scale: 2.	transactionHistory := OrderedCollection new</body></methods><methods><class-id>Protocols.Library.Account class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">balance: aFixedPoint transactionHistory: anOrderedCollection	^( self new )		balance: aFixedPoint;		transactionHistory: anOrderedCollection;		yourself</body><body package="Protocols-LibraryDemo">new	^super new initialize</body></methods><methods><class-id>Protocols.Library.TelephoneNumber</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">description	^description</body><body package="Protocols-LibraryDemo">description: aString	description := aString</body><body package="Protocols-LibraryDemo">number	^number</body><body package="Protocols-LibraryDemo">number: aString	number := aString</body><body package="Protocols-LibraryDemo">type	^type</body><body package="Protocols-LibraryDemo">type: aSymbol	type := aSymbol</body></methods><methods><class-id>Protocols.Library.TelephoneNumber</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	type := #voice.	description := String new.	number := String new</body></methods><methods><class-id>Protocols.Library.TelephoneNumber</class-id> <category>printing</category><body package="Protocols-LibraryDemo">printOn: stream	type ifNotNil: [ stream nextPutAll: type; nextPutAll: ': ' ].	number ifNotNil: [ stream nextPutAll: number ].	description ifNotNil: [ stream nextPutAll: ' ('; nextPutAll: description; nextPut: $) ].</body></methods><methods><class-id>Protocols.Library.TelephoneNumber class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomCellLDDataTelephoneNumber	"((( LDDataTelephoneNumber randomCellLDDataTelephoneNumber )))"	^self		type: (#cell &lt;&lt; #librarydemo &gt;&gt; 'cell') asString asSymbol		number: self randomLDDataTelephoneNumber</body><body package="Protocols-LibraryDemo">randomFaxLDDataTelephoneNumber	"((( LDDataTelephoneNumber randomFaxLDDataTelephoneNumber )))"	^self		type: (#fax &lt;&lt; #librarydemo &gt;&gt; 'fax') asString asSymbol		number: self randomLDDataTelephoneNumber</body><body package="Protocols-LibraryDemo">randomHomeLDDataTelephoneNumber	"((( LDDataTelephoneNumber randomHomeLDDataTelephoneNumber )))"	^self		type: (#home &lt;&lt; #librarydemo &gt;&gt; 'home') asString asSymbol		number: self randomLDDataTelephoneNumber</body><body package="Protocols-LibraryDemo">randomLDDataTelephoneNumber	"((( LDDataTelephoneNumber randomLDDataTelephoneNumber )))"	| str |	str := WriteStream on: ( String new: 12 ).	str nextPutAll: '923-579-'.	4 timesRepeat: [ str nextPutAll: ( ( self randomIntegerLessThan: 10 ) printString ) ].	^str contents</body><body package="Protocols-LibraryDemo">randomVoiceLDDataTelephoneNumber	"((( LDDataTelephoneNumber randomVoiceLDDataTelephoneNumber )))"	^self		type: (#voice &lt;&lt; #librarydemo &gt;&gt; 'voice') asString asSymbol		number: self randomLDDataTelephoneNumber</body><body package="Protocols-LibraryDemo">randomWorkLDDataTelephoneNumber	"((( LDDataTelephoneNumber randomWorkLDDataTelephoneNumber )))"	^self		type: (#work &lt;&lt; #librarydemo &gt;&gt; 'work') asString asSymbol		number: self randomLDDataTelephoneNumber</body></methods><methods><class-id>Protocols.Library.TelephoneNumber class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	telephoneNumberTypes :=		( Array new: 6 )			at: 1 put: (#voice &lt;&lt; #librarydemo &gt;&gt; 'voice') asString asSymbol;			at: 2 put: (#fax &lt;&lt; #librarydemo &gt;&gt; 'fax') asString asSymbol;			at: 3 put: (#home &lt;&lt; #librarydemo &gt;&gt; 'home') asString asSymbol;			at: 4 put: (#office &lt;&lt; #librarydemo &gt;&gt; 'office') asString asSymbol;			at: 5 put: (#cell &lt;&lt; #librarydemo &gt;&gt; 'cell') asString asSymbol;			at: 6 put: (#work &lt;&lt; #librarydemo &gt;&gt; 'work') asString asSymbol;			yourself</body></methods><methods><class-id>Protocols.Library.TelephoneNumber class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">randomOrganizationalLDDataTelephoneNumbers	| n s |	n := self randomIntegerLessThan: 3.	s := Set new: n.	( n &gt; 0 )		ifTrue:	[ s add: self randomVoiceLDDataTelephoneNumber ].	( n &gt; 1 )		ifTrue:	[ s add: self randomFaxLDDataTelephoneNumber ].	^s</body><body package="Protocols-LibraryDemo">randomPersonalLDDataTelephoneNumbers	| n s |	n := self randomIntegerLessThan: 5.	s := Set new: n.	( n &gt; 0 )		ifTrue:	[ s add: self randomHomeLDDataTelephoneNumber ].	( n &gt; 1 )		ifTrue:	[ s add: self randomWorkLDDataTelephoneNumber ].	( n &gt; 2 )		ifTrue:	[ s add: self randomCellLDDataTelephoneNumber ].	( n &gt; 3 )		ifTrue:	[ s add: self randomFaxLDDataTelephoneNumber ].	^s</body><body package="Protocols-LibraryDemo">type: aSymbol description: aString1 number: aString2	^( self new )		type: aSymbol;		description: aString1;		number: aString2;		yourself</body><body package="Protocols-LibraryDemo">type: aSymbol number: aString	^( self new )		type: aSymbol;		number: aString;		yourself</body></methods><methods><class-id>Protocols.Library.Agent</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">account	^account</body><body package="Protocols-LibraryDemo">account: aAccount	account := aAccount</body><body package="Protocols-LibraryDemo">borrowedHoldings	^borrowedHoldings</body><body package="Protocols-LibraryDemo">borrowedHoldings: aBag	borrowedHoldings := aBag</body><body package="Protocols-LibraryDemo">emailAddresses	^emailAddresses</body><body package="Protocols-LibraryDemo">emailAddresses: anArray	emailAddresses := anArray</body><body package="Protocols-LibraryDemo">physicalAddress	^physicalAddress</body><body package="Protocols-LibraryDemo">physicalAddress: aPhysicalAddress	^physicalAddress := aPhysicalAddress</body><body package="Protocols-LibraryDemo">serviceApprovals	^serviceApprovals</body><body package="Protocols-LibraryDemo">serviceApprovals: aSet	^serviceApprovals := aSet</body><body package="Protocols-LibraryDemo">telephoneNumbers	^telephoneNumbers</body><body package="Protocols-LibraryDemo">telephoneNumbers: aSet	^telephoneNumbers := aSet</body></methods><methods><class-id>Protocols.Library.Agent</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	account := Account new.	borrowedHoldings := Bag new.	emailAddresses := Array new.	physicalAddress := PhysicalAddress randomLDDataPhysicalAddress.	serviceApprovals := self class randomServiceApprovals.	telephoneNumbers := Set new.</body></methods><methods><class-id>Protocols.Library.Agent class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDAgent initialize )))"	NextAgentId := #( 65 65 65 ).	self initializeServiceApprovals.</body><body package="Protocols-LibraryDemo">initializeServiceApprovals		serviceApprovals :=  			#(	#GeneralPublicService				#SearchService				#WeatherForecastService				#CopyRequestService			) asSet</body></methods><methods><class-id>Protocols.Library.Agent class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">newAgentId	"Cycles agent identifiers from 'AAA' through 'ZZZ'."	| a b c |	a := NextAgentId at: 1.	b := NextAgentId at: 2.	c := NextAgentId at: 3.	( c == 90 )		ifFalse:	[ c := c + 1 ]		ifTrue:	[ c := 65.				  ( b == 90 )					ifFalse:	[ b := b + 1 ]					ifTrue:	[ b := 65.							  ( a == 90 )								ifFalse:	[ a := a + 1 ]								ifTrue:	[ a := 65 ] ] ].	NextAgentId := ( Array with: a with: b with: c ).	^String withAll: ( NextAgentId collect: [ :z | z asCharacter ] )</body><body package="Protocols-LibraryDemo">randomServiceApprovals	| s n |	s := Set new: 4.	s		addAll:	#(	#GeneralPublicService					#SearchService					#WeatherForecastService				).	n := self randomPositiveIntegerWithMax: 5.	( n == 5 )		ifTrue:	[ s add: #CopyRequestService ].	^s</body></methods><methods><class-id>Protocols.Library.Patron</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">patronId	^patronId</body><body package="Protocols-LibraryDemo">patronId: aPatronId	patronId := aPatronId</body><body package="Protocols-LibraryDemo">patronName	^patronName</body><body package="Protocols-LibraryDemo">patronName: aPersonNameOrOrganizationName	patronName := aPersonNameOrOrganizationName.	emailAddresses := aPersonNameOrOrganizationName emailAddresses</body></methods><methods><class-id>Protocols.Library.Patron</class-id> <category>printing</category><body package="Protocols-LibraryDemo">printOn: aStream	aStream		nextPut: $(;		nextPutAll: self class name;		nextPut: Character space;		print: patronName;		nextPut: $)</body></methods><methods><class-id>Protocols.Library.Patron</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.		patronId := self class newPatronId.	"patronName := nil."</body></methods><methods><class-id>Protocols.Library.Patron class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">randomLDPatron	"((( LDAgentPatron randomLDPatron )))"	| n |	n := self randomPositiveIntegerWithMax: 10.	^( n &lt; 8 )		ifTrue:	[ Person randomLDPersonalPatron ]		ifFalse:	[ Organization randomLDOrganizationalPatron ]</body></methods><methods><class-id>Protocols.Library.Patron class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">newPatronId	^( 'P-', super newAgentId ) asSymbol</body><body package="Protocols-LibraryDemo">patronIdSortBlock	^[:x :y | x patronId &lt;= y patronId ]</body></methods><methods><class-id>Protocols.Library.Person</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">birthDate	^birthDate</body><body package="Protocols-LibraryDemo">birthDate: aDate	birthDate := aDate</body><body package="Protocols-LibraryDemo">sex	^sex</body><body package="Protocols-LibraryDemo">sex: aSymbol	sex := aSymbol</body><body package="Protocols-LibraryDemo">ssn	^ssn</body><body package="Protocols-LibraryDemo">ssn: aLargePositiveInteger	ssn := aLargePositiveInteger</body></methods><methods><class-id>Protocols.Library.Person</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.	telephoneNumbers := TelephoneNumber randomPersonalLDDataTelephoneNumbers.	birthDate := self class randomBirthDate.	"sex := nil."	ssn := self class randomSSN.</body></methods><methods><class-id>Protocols.Library.Person class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">patronName: aString sex: aSymbol	^( self new )		patronName: aString;		sex: aSymbol;		yourself</body><body package="Protocols-LibraryDemo">randomBirthDate	"((( LDAgentPersonalPatron randomBirthDate )))"	^Date today subtractDays: ( ( 12 * 365 ) + ( self randomPositiveIntegerWithMax: ( ( 100 - 12 ) * 365 ) ) )</body><body package="Protocols-LibraryDemo">randomFemaleLDPersonalPatron	"((( LDAgentPersonalPatron randomFemaleLDPersonalPatron )))"	^self		patronName: PersonName randomFemaleLDDataPersonName		sex: #F</body><body package="Protocols-LibraryDemo">randomMaleLDPersonalPatron	"((( LDAgentPersonalPatron randomMaleLDPersonalPatron )))"	^self		patronName: PersonName randomMaleLDDataPersonName		sex: #M</body><body package="Protocols-LibraryDemo">randomSSN	"((( LDAgentPersonalPatron randomSSN )))"	^100000000 + ( self randomIntegerLessThan: 899999999 )</body></methods><methods><class-id>Protocols.Library.Person class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">randomLDPersonalPatron	"((( LDAgentPersonalPatron randomLDPersonalPatron )))"	| n |	n := self randomPositiveIntegerWithMax: 2.	^( n == 1 )		ifTrue:	[ self randomMaleLDPersonalPatron ]		ifFalse:	[ self randomFemaleLDPersonalPatron ]</body></methods><methods><class-id>Protocols.Library.Book</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">authors	^authors</body><body package="Protocols-LibraryDemo">authors: anArray	authors := anArray</body><body package="Protocols-LibraryDemo">braille	^braille</body><body package="Protocols-LibraryDemo">braille: aBoolean	braille := aBoolean</body><body package="Protocols-LibraryDemo">coverPhoto	^coverPhoto</body><body package="Protocols-LibraryDemo">coverPhoto: anImage	coverPhoto := anImage</body><body package="Protocols-LibraryDemo">language	^language</body><body package="Protocols-LibraryDemo">language: aSymbol	language := aSymbol</body><body package="Protocols-LibraryDemo">largePrint	^largePrint</body><body package="Protocols-LibraryDemo">largePrint: aBoolean	largePrint := aBoolean</body><body package="Protocols-LibraryDemo">pages	^pages</body><body package="Protocols-LibraryDemo">pages: anInteger	pages := anInteger</body><body package="Protocols-LibraryDemo">publicationYear	^publicationYear</body><body package="Protocols-LibraryDemo">publicationYear: anInteger	publicationYear := anInteger</body><body package="Protocols-LibraryDemo">publisher	^publisher</body><body package="Protocols-LibraryDemo">publisher: aString	publisher := aString</body><body package="Protocols-LibraryDemo">title	^title</body><body package="Protocols-LibraryDemo">title: aString	title := aString</body></methods><methods><class-id>Protocols.Library.Book</class-id> <category>utility</category><body package="Protocols-LibraryDemo">availableForLDSrvcCopyRequest	^true</body><body package="Protocols-LibraryDemo">searchAuthorialLastNames	^( authors collect: [ :x | x name lastName ] ) asSet</body><body package="Protocols-LibraryDemo">searchTitles	^Set with: title</body></methods><methods><class-id>Protocols.Library.Book</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.	"authors := nil."	braille := false.	"coverPhoto := nil."	language := #English.	largePrint := false.	pages := self class randomPages.	publicationYear := self class randomYear.	publisher := self class randomPublisher.	"title := nil."</body></methods><methods><class-id>Protocols.Library.Book class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">authors: anArray title: aString	^( self new )		authors: anArray;		title: aString;		yourself</body><body package="Protocols-LibraryDemo">randomArchiveLDHoldingBook	"((( LDHoldingBook randomArchiveLDHoldingBook )))"	| cassoc ck cv t |	cassoc := archiveBookData at: ( self randomPositiveIntegerWithMax: archiveBookData size ).	ck := cassoc key.	cv := cassoc value.	t := ( cv at: ( 1 + ( self randomIntegerLessThan: cv size ) ) ) asString.	^( self		authors: self randomAuthors		title: t )			collectionId: ck;			yourself</body><body package="Protocols-LibraryDemo">randomLibraryLDHoldingBook	"((( LDHoldingBook randomLibraryLDHoldingBook )))"	| cassoc ck cv t |	cassoc := libraryBookData at: ( self randomPositiveIntegerWithMax: libraryBookData size ).	ck := cassoc key.	cv := cassoc value.	t := ( cv at: ( 1 + ( self randomIntegerLessThan: cv size ) ) ) asString.	^( self		authors: self randomAuthors		title: t )			collectionId: ck;			yourself</body></methods><methods><class-id>Protocols.Library.Book class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( self initialize )))"	self initializeArchiveBookData.	self initializeLibraryBookData.	self initializePublishers.</body><body package="Protocols-LibraryDemo">initializeArchiveBookData	| oc |	oc := OrderedCollection new.	oc		addLast:					( (#NauticalHistoryAndLiterature &lt;&lt; #librarydemo &gt;&gt; 'Nautical History and Literature') asString asSymbol -&gt;				(OrderedCollection new 					add: (#BuildingTheTrireme &lt;&lt; #librarydemo &gt;&gt; 'Building the Trireme');					add: (#HandReefAndSteer &lt;&lt; #librarydemo &gt;&gt; 'Hand, Reef, and Steer');					add: (#Lofting &lt;&lt; #librarydemo &gt;&gt; 'Lofting');					add: (#SeamanshipInTheAgeOfSail &lt;&lt; #librarydemo &gt;&gt; 'Seamanship in the Age of Sail');					add: (#SextantHandbook &lt;&lt; #librarydemo &gt;&gt; 'Sextant Handbook');					add: (#TheGaffRigHandbook &lt;&lt; #librarydemo &gt;&gt; 'The Gaff Rig Handbook');					add: (#TheLastOfTheCapeHorners &lt;&lt; #librarydemo &gt;&gt; 'The Last of the Cape Horners');					add: (#TheTudorNavy &lt;&lt; #librarydemo &gt;&gt; 'The Tudor Navy'); asArray) 			);		addLast:			( (#NavalArchitecture &lt;&lt; #librarydemo &gt;&gt; 'Naval Architecture') asString asSymbol -&gt;				(OrderedCollection new					add: (#FortyWoodenBoats &lt;&lt; #librarydemo &gt;&gt; 'Forty Wooden Boats');					add: (#HMSSultana &lt;&lt; #librarydemo &gt;&gt; 'H. M. S. Sultana');					add: (#PrinciplesOfYachtDesign &lt;&lt; #librarydemo &gt;&gt; 'Principles of Yacht Design');					add: (#TheSearchForSpeedUnderSail &lt;&lt; #librarydemo &gt;&gt; 'The Search for Speed Under Sail');					add: (#Trimcomalee &lt;&lt; #librarydemo &gt;&gt; 'Trimcomalee'); asArray) 			).	archiveBookData := oc asArray</body><body package="Protocols-LibraryDemo">initializeLibraryBookData	| oc |	oc := OrderedCollection new.	oc		addLast:			( (#BiographyAndAutobiography &lt;&lt; #librarydemo &gt;&gt; 'Biography and Autobiography') asString asSymbol		-&gt;				(Array 					with: (#MyLifeInGermany &lt;&lt; #librarydemo &gt;&gt; 'My Life in Germany')					with: (#PatrickOBrian &lt;&lt; #librarydemo &gt;&gt; 'Patrick O''Brian'))			);		addLast:			( (#ComputerScienceAndMathematics &lt;&lt; #librarydemo &gt;&gt; 'Computer Science and Mathematics') asString asSymbol		-&gt;				(OrderedCollection new					add: (#ACMTuringAwardLectures &lt;&lt; #librarydemo &gt;&gt; 'ACM Turing Award Lectures');					add: (#ArtificialIntelligenceProgramming &lt;&lt; #librarydemo &gt;&gt; 'Artificial Intelligence Programming');					add: (#AstronomicalAlgorithms &lt;&lt; #librarydemo &gt;&gt; 'Astronomical Algorithms');					add: (#ComputabilityAndLogic &lt;&lt; #librarydemo &gt;&gt; 'Computability and Logic');					add: (#DistributedAlgorithms &lt;&lt; #librarydemo &gt;&gt; 'Distributed Algorithms');					add: (#HandbookOfAppliedCryptography &lt;&lt; #librarydemo &gt;&gt; 'Handbook of Applied Cryptography');					add: (#LambdaCalculusCombinatorsAnd &lt;&lt; #librarydemo &gt;&gt; 'Lambda-Calculus, Combinators, and Functional Programming');					add: (#MathematicalLogic &lt;&lt; #librarydemo &gt;&gt; 'Mathematical Logic');					add: (#PrinciplesOfArtificialIntelligence &lt;&lt; #librarydemo &gt;&gt; 'Principles of Artificial Intelligence');					add: (#TheLambdaCalculus &lt;&lt; #librarydemo &gt;&gt; 'The Lambda Calculus'); asArray)			);		addLast:			( (#HistoryandArchaeology &lt;&lt; #librarydemo &gt;&gt; 'History and Archaeology') asString asSymbol		-&gt;				(OrderedCollection new					add: (#AShortHistoryOfByzantium &lt;&lt; #librarydemo &gt;&gt; 'A Short History of Byzantium');					add: (#BlackSea &lt;&lt; #librarydemo &gt;&gt; 'Black Sea');					add: (#CathedralForgeAndWaterwheel &lt;&lt; #librarydemo &gt;&gt; 'Cathedral, Forge, and Waterwheel');					add: (#EarlyChristianity &lt;&lt; #librarydemo &gt;&gt; 'Early Christianity and Greek Paideia');					add: (#NewWorldsAncientTexts &lt;&lt; #librarydemo &gt;&gt; 'New Worlds, Ancient Texts');					add: (#TheArchaeologyOfGreece &lt;&lt; #librarydemo &gt;&gt; 'The Archaeology of Greece');					add: (#TheDawnOfHumanCulture &lt;&lt; #librarydemo &gt;&gt; 'The Dawn of Human Culture');					add: (#TheEndOfTheBronzeAge &lt;&lt; #librarydemo &gt;&gt; 'The End of the Bronze Age');					add: (#TheGrandStrategy &lt;&lt; #librarydemo &gt;&gt; 'The Grand Strategy of the Roman Empire');					add: (#MindOfTheMiddleAges &lt;&lt; #librarydemo &gt;&gt; 'The Mind of the Middle Ages: An Historical Survey A.D. 200 - 1500');					asArray)			);		addLast:			( (#Literature &lt;&lt; #librarydemo &gt;&gt; 'Literature') asString asSymbol		-&gt;				(OrderedCollection new					add: (#Hamlet &lt;&lt; #librarydemo &gt;&gt; 'Hamlet');					add: (#JuliusCaesar &lt;&lt; #librarydemo &gt;&gt; 'Julius Caesar');					add: (#Macbeth &lt;&lt; #librarydemo &gt;&gt; 'Macbeth');					add: (#Oblomov &lt;&lt; #librarydemo &gt;&gt; 'Oblomov');					add: (#TheMasterAndMargarita &lt;&lt; #librarydemo &gt;&gt; 'The Master and Margarita');					add: (#DonQuixote &lt;&lt; #librarydemo &gt;&gt; 'Don Quixote');					add: (#TheSongOfRoland &lt;&lt; #librarydemo &gt;&gt; 'The Song of Roland');					add: (#PoemaDelCid &lt;&lt; #librarydemo &gt;&gt; 'Poema del Cid');					add: (#TheMoonIsDown &lt;&lt; #librarydemo &gt;&gt; 'The Moon is Down'); asArray)			);		addLast:			( (#Musicology &lt;&lt; #librarydemo &gt;&gt; 'Musicology') asString asSymbol		-&gt;				(Array					with: (#SanctiRomani &lt;&lt; #librarydemo &gt;&gt; 'Sancti Romani Melodi Cantica: Cantica Genuina'))			);		addLast:					( (#Philosophy &lt;&lt; #librarydemo &gt;&gt; 'Philosophy') asString asSymbol			-&gt;				(OrderedCollection new					add: (#BeingAndTime &lt;&lt; #librarydemo &gt;&gt; 'Being and Time');					add: (#Daybreak &lt;&lt; #librarydemo &gt;&gt; 'Daybreak');					add: (#DeAnima &lt;&lt; #librarydemo &gt;&gt; 'De anima');					add: (#DePrimoPrincipio &lt;&lt; #librarydemo &gt;&gt; 'De primo principio');					add: (#Ethics &lt;&lt; #librarydemo &gt;&gt; 'Ethics');					add: (#HumanAllTooHuman &lt;&lt; #librarydemo &gt;&gt; 'Human, All Too Human');					add: (#Kommentar &lt;&lt; #librarydemo &gt;&gt; 'Kommentar zur Kritik der reinen Vernunft');					add: (#KritikDerReinenVernunft &lt;&lt; #librarydemo &gt;&gt; 'Kritik der reinen Vernunft');					add: (#HeideggerAndNihilism &lt;&lt; #librarydemo &gt;&gt; 'Martin Heidegger and European Nihilism');					add: (#MutualAid &lt;&lt; #librarydemo &gt;&gt; 'Mutual Aid');					add: (#NichomacheanEthics &lt;&lt; #librarydemo &gt;&gt; 'Nichomachean Ethics');					add: (#PhanomenologieDesGeistes &lt;&lt; #librarydemo &gt;&gt; 'Phanomenologie des Geistes');					add: (#PeriPsyche &lt;&lt; #librarydemo &gt;&gt; 'Peri psyche');					add: (#QuaestionesQuodlibetales &lt;&lt; #librarydemo &gt;&gt; 'Quaestiones quodlibetales');					add: (#ReportataParisiensia &lt;&lt; #librarydemo &gt;&gt; 'Reportata parisiensia');					add: (#SkepicismAndNaturalism &lt;&lt; #librarydemo &gt;&gt; 'Skepicism and Naturalism');					add: (#SpeculumSpinozanum &lt;&lt; #librarydemo &gt;&gt; 'Speculum Spinozanum');					add: (#SummaTheologiae &lt;&lt; #librarydemo &gt;&gt; 'Summa theologiae');					add: (#TheOxfordCommentary &lt;&lt; #librarydemo &gt;&gt; 'The Oxford Commentary');					add: (#ThePreSocratics &lt;&lt; #librarydemo &gt;&gt; 'The Pre-Socratics');					add: (#WhatIsArt &lt;&lt; #librarydemo &gt;&gt; 'What is Art?');					asArray) 			);		addLast:			( (#Poetry &lt;&lt; #librarydemo &gt;&gt; 'Poetry') asString asSymbol	-&gt;				(OrderedCollection new					add: (#Beowulf &lt;&lt; #librarydemo &gt;&gt; 'Beowulf');					add: (#CloudlessAtFirst &lt;&lt; #librarydemo &gt;&gt; 'Cloudless at First');					add: (#SelectedAndNewPoems &lt;&lt; #librarydemo &gt;&gt; 'Selected and New Poems');					add: (#TheInfiniteMoment &lt;&lt; #librarydemo &gt;&gt; 'The Infinite Moment');					add: (#TheMinersPaleChildren &lt;&lt; #librarydemo &gt;&gt; 'The Miner''s Pale Children');					add: (#TheNarrowRoad &lt;&lt; #librarydemo &gt;&gt; 'The Narrow Road to the Deep North');					add: (#TheNoiseOfTime &lt;&lt; #librarydemo &gt;&gt; 'The Noise of Time');					add: (#TheVoronezhNotebooks &lt;&lt; #librarydemo &gt;&gt; 'The Voronezh Notebooks');					asArray)			);		addLast:			( (#Reference &lt;&lt; #librarydemo &gt;&gt; 'Reference') asString asSymbol	-&gt;				(OrderedCollection new					add: (#TahitianAndEnglish &lt;&lt; #librarydemo &gt;&gt; 'A Tahitian and English Dictionary with Introductory Remarks on the Polynesian Language');					add: (#GreekEnglishLexicon &lt;&lt; #librarydemo &gt;&gt; 'Greek-English Lexicon');					add: (#JapaneseEnglishCharacterDictionary &lt;&lt; #librarydemo &gt;&gt; 'Japanese-English Character Dictionary');					add: (#PatristicGreekLexicon &lt;&lt; #librarydemo &gt;&gt; 'Patristic Greek Lexicon');					add: (#RussianDictionary &lt;&lt; #librarydemo &gt;&gt; 'Russian Dictionary');					add: (#PortableWorld &lt;&lt; #librarydemo &gt;&gt; 'The Portable World: A Complete Pocket Atlas');					asArray)			);		addLast:			( (#ScienceFiction &lt;&lt; #librarydemo &gt;&gt; 'Science Fiction') asString asSymbol	-&gt;				(OrderedCollection new					add: (#CosmonautKeep &lt;&lt; #librarydemo &gt;&gt; 'Cosmonaut Keep');					add: (#CourtshipRite &lt;&lt; #librarydemo &gt;&gt; 'Courtship Rite');					add: (#Solaris &lt;&lt; #librarydemo &gt;&gt; 'Solaris');					add: (#TheCassiniDivision &lt;&lt; #librarydemo &gt;&gt; 'The Cassini Division');					add: (#TheMoonIsAHarshMistress &lt;&lt; #librarydemo &gt;&gt; 'The Moon is a Harsh Mistress');					add: (#TheSkyRoad &lt;&lt; #librarydemo &gt;&gt; 'The Sky Road');					add: (#TheStarFraction &lt;&lt; #librarydemo &gt;&gt; 'The Star Fraction');					add: (#TheStoneCanal &lt;&lt; #librarydemo &gt;&gt; 'The Stone Canal');					asArray)			);		addLast:			( (#TheologyAndReligion &lt;&lt; #librarydemo &gt;&gt; 'Theology and Religion') asString asSymbol	-&gt;				(Array					with: (#Shobogenzo &lt;&lt; #librarydemo &gt;&gt; 'Shobogenzo')					with: (#TheBlueCliffRecord &lt;&lt; #librarydemo &gt;&gt; 'The Blue Cliff Record'))			).	libraryBookData := oc asArray</body><body package="Protocols-LibraryDemo">initializePublishers	publishers :=		(OrderedCollection new			add: (#BallantinePublishing &lt;&lt; #librarydemo &gt;&gt; 'Ballantine Publishing');			add: (#ClarendonPress &lt;&lt; #librarydemo &gt;&gt; 'Clarendon Press');			add: (#CopperCanyonPress &lt;&lt; #librarydemo &gt;&gt; 'Copper Canyon Press');			add: (#Dover &lt;&lt; #librarydemo &gt;&gt; 'Dover');			add: (#FarrarStrausAndGiroux &lt;&lt; #librarydemo &gt;&gt; 'Farrar, Straus, and Giroux');			add: (#GrovePress &lt;&lt; #librarydemo &gt;&gt; 'Grove Press');			add: (#IgnatiusPress &lt;&lt; #librarydemo &gt;&gt; 'Ignatius Press');			add: (#MorganKaufmann &lt;&lt; #librarydemo &gt;&gt; 'Morgan Kaufmann');			add: (#NakayamaShobo &lt;&lt; #librarydemo &gt;&gt; 'Nakayama Shobo');			add: (#NewDirections &lt;&lt; #librarydemo &gt;&gt; 'New Directions');			add: (#NorthpointPress &lt;&lt; #librarydemo &gt;&gt; 'Northpoint Press');			add: (#OxfordUniversityPress &lt;&lt; #librarydemo &gt;&gt; 'Oxford University Press');			add: (#Penguin &lt;&lt; #librarydemo &gt;&gt; 'Penguin');			add: (#SpringerVerlag &lt;&lt; #librarydemo &gt;&gt; 'Springer-Verlag');			add: (#Tor &lt;&lt; #librarydemo &gt;&gt; 'Tor');			asArray)</body></methods><methods><class-id>Protocols.Library.Book class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomAuthors	| numericSpread n a typeSpread |	numericSpread := #[ 1 1 1 1 1 1 1 1 2 2 2 3 3 4 ].	n := numericSpread at: ( self randomPositiveIntegerWithMax: numericSpread size ).	typeSpread := 		( ( self randomIntegerLessThan: 7 ) == 0 )			ifTrue:	[ #( #editor #editor #editor #translator ) ]			ifFalse:	[ #( #writer #writer #writer #writer #translator #translator #illustrator ) ].	a := Array new: n.	1 to: n do:		[ :ndx |	a 					at: ndx					put: ( AuthorialName							authorialType: ( typeSpread at: ( 1 + ( self randomIntegerLessThan: typeSpread size ) ) )							name: ( PersonName randomLDDataPersonName ) )		].	^a</body><body package="Protocols-LibraryDemo">randomPages	^173 + 		( self randomPositiveIntegerWithMax: 191 ) + 			( self randomPositiveIntegerWithMax: 239 )</body><body package="Protocols-LibraryDemo">randomPublisher	^( publishers at: ( self randomPositiveIntegerWithMax: publishers size ) ) asString</body></methods><methods><class-id>Protocols.Library.SearchService</class-id> <category>public api</category><body package="Protocols-LibraryDemo">searchByAuthorsLastName: aString includeAffiliatedLibraries: aBoolean	"receiver: LDSrvcSearch"	"arguments: Symbol Boolean"	"returns: Dictionary"	"possible exceptions: "	^self		searchServices: ( self searchServicesInclusive: aBoolean )		onAspect: #searchAuthorialLastNames 		withMatchString: aString</body><body package="Protocols-LibraryDemo">searchByExactTitle: aString includeAffiliatedLibraries: aBoolean	"receiver: LDSrvcSearch"	"arguments: Symbol Boolean"	"returns: Dictionary"	"possible exceptions: "	^self		searchServices: ( self searchServicesInclusive: aBoolean )		onAspect: #searchTitles		withMatchString: aString</body><body package="Protocols-LibraryDemo">searchByTitleWord: aString includeAffiliatedLibraries: aBoolean	"receiver: LDSrvcSearch"	"arguments: Symbol Boolean"	"returns: Dictionary"	"possible exceptions: "	^self		searchServices: ( self searchServicesInclusive: aBoolean )		onAspect: #searchTitles		withMatchString: ( '*', aString, '*' )</body></methods><methods><class-id>Protocols.Library.SearchService</class-id> <category>private</category><body package="Protocols-LibraryDemo">searchHoldingsOnAspect: aSymbol withMatchString: aString	^( library searchHoldingsOnAspect: aSymbol withMatchString: aString )</body><body package="Protocols-LibraryDemo">searchServices: anOrderedCollection onAspect: aSymbol withMatchString: aString	| rd |	rd := Dictionary new.	anOrderedCollection do:		[ :srv | rd addAll: ( srv searchHoldingsOnAspect: aSymbol withMatchString: aString ) ].	^rd</body><body package="Protocols-LibraryDemo">searchServicesInclusive: aBoolean	| oc |	oc := OrderedCollection new.	oc add: self.	aBoolean		ifTrue:	[ library affiliatedLibraries do:					[ :al |	| ss |							( ( ss := ( al serviceById: SearchService defaultServiceId ) ) notNil )								ifTrue:	[ oc add: ss ]					]				].	^oc</body></methods><methods><class-id>Protocols.Library.SearchService class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDSrvcSearch initialize )))"	defaultServiceId := #SearchService</body></methods><methods><class-id>Protocols.Library.CopyService</class-id> <category>public api</category><body package="Protocols-LibraryDemo">requestCopyOfAcquisitionNumber: aLDHolding_acquisitionNumber forPatronId: aLDAgentPatron_patronId	| patron srvc holding |	patron := library patronById: aLDAgentPatron_patronId.	( patron serviceApprovals includes: serviceId )		ifFalse:	[ ^PatronNotApprovedForService raiseErrorString: ((#Patron1sNotApprovedFor2s &lt;&lt; #librarydemo &gt;&gt; 'Patron &lt;1s&gt; not approved for &lt;2s&gt;.')			expandMacrosWith: aLDAgentPatron_patronId			with: serviceId) ].	srvc := library serviceById: #GeneralPublicService.	holding := srvc holdingByAcquisitionNumber: aLDHolding_acquisitionNumber.	( holding availableForLDSrvcCopyRequest )		ifFalse: [ ^HoldingNotCopiedByBindery raiseErrorString: ((#GenKey4 &lt;&lt; #librarydemo &gt;&gt; 'Holding ,  &lt;1s&gt; cannot be copied by the Port Nowhere Bindery.')			expandMacrosWith: aLDHolding_acquisitionNumber) ]</body></methods><methods><class-id>Protocols.Library.CopyService class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDSrvcGeneralPublic initialize )))"	defaultServiceCharge := FixedPoint numerator: 11 denominator: 100 scale: 2.	defaultServiceId := #CopyRequestService</body></methods><methods><class-id>Protocols.Library.AuthorialName</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">authorialType	^authorialType</body><body package="Protocols-LibraryDemo">authorialType: aSymbol	authorialType := aSymbol</body><body package="Protocols-LibraryDemo">name	^name</body><body package="Protocols-LibraryDemo">name: aPersonNameOrOrganizationName	name := aPersonNameOrOrganizationName</body></methods><methods><class-id>Protocols.Library.AuthorialName class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDDataAuthorialName initialize )))"	authorialTypes := #( #writer #translator #editor #illustrator #performer #architect #draftsman)</body></methods><methods><class-id>Protocols.Library.AuthorialName class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo"> authorialType: aSymbol name: aLDPersonNameOrLDOrganizationName	^( self new )		authorialType: aSymbol;		name: aLDPersonNameOrLDOrganizationName;		yourself</body></methods><methods><class-id>Protocols.Library.HoldingTransaction</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">holding	^holding</body><body package="Protocols-LibraryDemo">holding: aLDHolding	holding := aLDHolding</body></methods><methods><class-id>Protocols.Library.Organization</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.	telephoneNumbers := TelephoneNumber randomOrganizationalLDDataTelephoneNumbers.	taxIdNumber := self class newTaxIdNumber</body></methods><methods><class-id>Protocols.Library.Organization</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">taxIdNumber	^taxIdNumber</body><body package="Protocols-LibraryDemo">taxIdNumber: aWordArray	taxIdNumber := aWordArray</body></methods><methods><class-id>Protocols.Library.Organization class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">patronName: aString	^( self new )		patronName: aString</body><body package="Protocols-LibraryDemo">randomLDOrganizationalPatron	"((( LDAgentOrganizationalPatron randomLDOrganizationalPatron )))"	^self patronName: OrganizationName randomLDDataOrganizationName</body></methods><methods><class-id>Protocols.Library.Organization class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDAgentOrganizationalPatron initialize )))"	nextTaxIdNumber := WordArray new: 4.	nextTaxIdNumber		at: 1 put: ( 2 raisedTo: 7 );		at: 2 put: ( 2 raisedTo: 8 );		at: 3 put: ( 2 raisedTo: 14 );		at: 4 put: ( 2 raisedTo: 15 ).</body></methods><methods><class-id>Protocols.Library.Organization class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">newTaxIdNumber	"((( LDAgentOrganizationalPatron newTaxIdNumber )))"	| tin ntin |	tin := nextTaxIdNumber copy.	ntin := WordArray new: 4.	ntin		at: 1 put: ( ( tin at: 1 ) + 11 );		at: 2 put: ( ( tin at: 2 ) + 13 );		at: 3 put: ( ( tin at: 3 ) + 17 );		at: 4 put: ( ( tin at: 4 ) + 19 ).	nextTaxIdNumber := ntin.	^tin</body></methods><methods><class-id>Protocols.Library.EmailAddress</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">address	^address</body><body package="Protocols-LibraryDemo">address: aString	address := aString</body><body package="Protocols-LibraryDemo">description	^description</body><body package="Protocols-LibraryDemo">description: aString	description := aString</body></methods><methods><class-id>Protocols.Library.EmailAddress class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">address: aString1 description: aString2	^( self new )		address: aString1;		description: aString2;		yourself</body></methods><methods><class-id>Protocols.Library.CatalogNumber</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">part1	^part1</body><body package="Protocols-LibraryDemo">part1: aTwoByteString	part1 := aTwoByteString</body><body package="Protocols-LibraryDemo">part2	^part2</body><body package="Protocols-LibraryDemo">part2: aByteArray	part2 := aByteArray</body><body package="Protocols-LibraryDemo">part3	^part3</body><body package="Protocols-LibraryDemo">part3: aDouble	part3 := aDouble</body><body package="Protocols-LibraryDemo">part4	^part4</body><body package="Protocols-LibraryDemo">part4: aCharacter	part4 := aCharacter</body></methods><methods><class-id>Protocols.Library.CatalogNumber class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDDataCatalogNumber initialize )))"	nextPart3 := 281 / 7.</body></methods><methods><class-id>Protocols.Library.CatalogNumber class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">newPart1	"Generates the TwoByteString part of an LDCatalogNumber."	| str |	str := String new: 2.	1 to: 2 do:		[ :ndx |	str					at: ndx					put: ( Character value: ( 65 + ( self randomIntegerLessThan: 26 ) ) )		].	^str asTwoByteString</body><body package="Protocols-LibraryDemo">newPart2	"Generates the ByteArray part of a LDCatalogNumber."	| ba |	ba := ByteArray new: 7.	1 to: 7 do:		[ :ndx |	ba					at: ndx					put: ( self randomIntegerLessThan: 256 )		].	^ba</body><body package="Protocols-LibraryDemo">newPart3	"Cycles the Double part of a LDCatalogNumber."	nextPart3 := ( nextPart3 numerator + 7 ) / ( nextPart3 denominator + 11 ).	^nextPart3 asDouble</body><body package="Protocols-LibraryDemo">newPart4	"Generates the Character part of an LDCatalogNumber."	^Character value: ( 97 + ( self randomIntegerLessThan: 26 ) )</body></methods><methods><class-id>Protocols.Library.CatalogNumber class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">part1: aTwoByteString part2: aByteArray part3: aDouble part4: aCharacter	^( self new )		part1: aTwoByteString;		part2: aByteArray;		part3: aDouble;		part4: aCharacter;		yourself</body><body package="Protocols-LibraryDemo">randomLDDataCatalogNumber	"((( LDDataCatalogNumber randomLDDataCatalogNumber )))"	^self		part1: self newPart1		part2: self newPart2		part3: self newPart3		part4: self newPart4</body></methods><methods><class-id>Protocols.Library.ServiceTransaction</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">serviceId	^serviceId</body><body package="Protocols-LibraryDemo">serviceId: aSymbol	serviceId := aSymbol</body></methods><methods><class-id>Protocols.Library.GeneralPublicService</class-id> <category>public api</category><body package="Protocols-LibraryDemo">holdingByAcquisitionNumber: aLDHolding_acquisitionNumber	^library ownedHoldings		detect:	[ :x | x acquisitionNumber =  aLDHolding_acquisitionNumber ]		ifNone:	[ HoldingNotFound 					raiseErrorString:	((#NoHoldingFoundWithAcquisitionNumber1s &lt;&lt; #librarydemo &gt;&gt; 'No holding found with acquisition number &lt;1s&gt;.')			expandMacrosWith: aLDHolding_acquisitionNumber printString)				]</body><body package="Protocols-LibraryDemo">lastFiveTransactionsForPatronId: aLDAgentPatron_patronId	| patron th |	patron := library patronById: aLDAgentPatron_patronId.	th := patron account transactionHistory.	^( th size &lt; 5 )		ifTrue:	[ th ]		ifFalse: 	[ th copyFrom: ( th size - 4 ) to: ( th size ) ]</body><body package="Protocols-LibraryDemo">libraryServicesDictionary	^library services</body><body package="Protocols-LibraryDemo">libraryServicesIds	^library services keys</body><body package="Protocols-LibraryDemo">providesServices	^library services isEmpty not</body></methods><methods><class-id>Protocols.Library.GeneralPublicService class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDSrvcGeneralPublic initialize )))"	defaultServiceCharge := FixedPoint numerator: 0 denominator: 100 scale: 2.	defaultServiceId := #GeneralPublicService</body></methods><methods><class-id>Protocols.Library.AdministrativeService</class-id> <category>public api</category><body package="Protocols-LibraryDemo">addAffiliatedLibrary: aLibrary	library affiliatedLibraries add: aLibrary.	library account addTransaction:		( AcquireAffiliatedLibrary agentId: aLibrary libraryId )</body><body package="Protocols-LibraryDemo">addMonetaryGrant: aPositiveNumber	library account addTransaction:		( AcquireGrant amount: aPositiveNumber )</body><body package="Protocols-LibraryDemo">addPatron: aLDPatron	library patrons add: aLDPatron.	library account addTransaction:			( AcquirePatron agentId: aLDPatron patronId )</body><body package="Protocols-LibraryDemo">addService: aLDSrvc	library addService: aLDSrvc.	library account addTransaction:			( PublishService serviceId: aLDSrvc serviceId )</body></methods><methods><class-id>Protocols.Library.AdministrativeService class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDSrvcAdministrative initialize )))"	defaultServiceCharge := FixedPoint numerator: 0 denominator: 100 scale: 2.	defaultServiceId := #AdministrativeService</body></methods><methods><class-id>Protocols.Library.PersonName</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">firstName	^firstName</body><body package="Protocols-LibraryDemo">firstName: aString	firstName := aString</body><body package="Protocols-LibraryDemo">lastName	^lastName</body><body package="Protocols-LibraryDemo">lastName: aString	lastName := aString</body><body package="Protocols-LibraryDemo">middleNames	^middleNames</body><body package="Protocols-LibraryDemo">middleNames: aString	middleNames := aString</body><body package="Protocols-LibraryDemo">title	^title</body><body package="Protocols-LibraryDemo">title: aString	title := aString</body></methods><methods><class-id>Protocols.Library.PersonName</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize		title := String new.	firstName := String new.	middleNames := String new.	lastName := String new.</body></methods><methods><class-id>Protocols.Library.PersonName</class-id> <category>printing</category><body package="Protocols-LibraryDemo">printOn: aStream	aStream		nextPutAll: title;		nextPut: Character space;		nextPutAll: firstName;		nextPut: Character space;		nextPutAll: middleNames;		nextPut: Character space;		nextPutAll: lastName</body></methods><methods><class-id>Protocols.Library.PersonName</class-id> <category>utility</category><body package="Protocols-LibraryDemo">emailAddresses	| str |	str := WriteStream on: ( String new: 26 ).	str			nextPutAll: ( firstName select: [ :x | x isUppercase ] );		nextPutAll: ( middleNames select: [ :x | x isUppercase ] );		nextPutAll: ( lastName copyFrom: 1 to: ( ( 12 - str size ) min: lastName size ) );		nextPutAll: (#portnowherenet &lt;&lt; #librarydemo &gt;&gt; '@portnowhere.net') asString.	^Array		with: ( EmailAddress				address: str contents asLowercase				description: (#Personal &lt;&lt; #librarydemo &gt;&gt; 'Personal') asString )</body></methods><methods><class-id>Protocols.Library.PersonName class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDDataPersonName initialize )))"	self initializeFemaleFirstNames.	self initializeFemaleMiddleNames.	self initializeFemaleTitles.	self initializeMaleFirstNames.	self initializeMaleMiddleNames.	self initializeMaleTitles.	self initializeLastNames.</body><body package="Protocols-LibraryDemo">initializeFemaleFirstNames	"((( LDPersonName initializeFemaleFirstNames )))"	femaleFirstNames :=		(OrderedCollection new			add: (#Agnes &lt;&lt; #librarydemo &gt;&gt; 'Agnes');			add: (#Anne &lt;&lt; #librarydemo &gt;&gt; 'Anne');			add: (#Athene &lt;&lt; #librarydemo &gt;&gt; 'Athene');			add: (#Azalais &lt;&lt; #librarydemo &gt;&gt; 'Azalais');			add: (#Brigette &lt;&lt; #librarydemo &gt;&gt; 'Brigette');			add: (#Calliope &lt;&lt; #librarydemo &gt;&gt; 'Calliope');			add: (#Constance &lt;&lt; #librarydemo &gt;&gt; 'Constance');			add: (#Daria &lt;&lt; #librarydemo &gt;&gt; 'Daria');			add: (#Effie &lt;&lt; #librarydemo &gt;&gt; 'Effie');			add: (#Ekaterina &lt;&lt; #librarydemo &gt;&gt; 'Ekaterina');			add: (#Elizabeth &lt;&lt; #librarydemo &gt;&gt; 'Elizabeth');			add: (#Filomena &lt;&lt; #librarydemo &gt;&gt; 'Filomena');			add: (#Francesca &lt;&lt; #librarydemo &gt;&gt; 'Francesca');			add: (#Gayle &lt;&lt; #librarydemo &gt;&gt; 'Gayle');			add: (#Henrietta &lt;&lt; #librarydemo &gt;&gt; 'Henrietta');			add: (#Isobella &lt;&lt; #librarydemo &gt;&gt; 'Isobella');			add: (#Juliana &lt;&lt; #librarydemo &gt;&gt; 'Juliana');			add: (#Katerina &lt;&lt; #librarydemo &gt;&gt; 'Katerina');			add: (#Karolina &lt;&lt; #librarydemo &gt;&gt; 'Karolina');			add: (#Krystyna &lt;&lt; #librarydemo &gt;&gt; 'Krystyna');			add: (#Kyoko &lt;&lt; #librarydemo &gt;&gt; 'Kyoko');			add: (#Lillian &lt;&lt; #librarydemo &gt;&gt; 'Lillian');			add: (#Lisa &lt;&lt; #librarydemo &gt;&gt; 'Lisa');			add: (#Ludwika &lt;&lt; #librarydemo &gt;&gt; 'Ludwika');			add: (#Margaret &lt;&lt; #librarydemo &gt;&gt; 'Margaret');			add: (#Mollie &lt;&lt; #librarydemo &gt;&gt; 'Mollie');			add: (#Nancy &lt;&lt; #librarydemo &gt;&gt; 'Nancy');			add: (#Naomi &lt;&lt; #librarydemo &gt;&gt; 'Naomi');			add: (#Natella &lt;&lt; #librarydemo &gt;&gt; 'Natella');			add: (#Olga &lt;&lt; #librarydemo &gt;&gt; 'Olga');			add: (#Ophelia &lt;&lt; #librarydemo &gt;&gt; 'Ophelia');			add: (#Patricia &lt;&lt; #librarydemo &gt;&gt; 'Patricia');			add: (#Philippa &lt;&lt; #librarydemo &gt;&gt; 'Philippa');			add: (#Q &lt;&lt; #librarydemo &gt;&gt; 'Q.');			add: (#Rozalia &lt;&lt; #librarydemo &gt;&gt; 'Rozalia');			add: (#Sophia &lt;&lt; #librarydemo &gt;&gt; 'Sophia');			add: (#Suzanna &lt;&lt; #librarydemo &gt;&gt; 'Suzanna');			add: (#Terpsichore &lt;&lt; #librarydemo &gt;&gt; 'Terpsichore');			add: (#Ulricha &lt;&lt; #librarydemo &gt;&gt; 'Ulricha');			add: (#Violeta &lt;&lt; #librarydemo &gt;&gt; 'Violeta');			add: (#Wilhelmina &lt;&lt; #librarydemo &gt;&gt; 'Wilhelmina');			add: (#Xavirea &lt;&lt; #librarydemo &gt;&gt; 'Xavirea');			add: (#Yoshiko &lt;&lt; #librarydemo &gt;&gt; 'Yoshiko');			add: (#Yvette &lt;&lt; #librarydemo &gt;&gt; 'Yvette');			add: (#Yvonne &lt;&lt; #librarydemo &gt;&gt; 'Yvonne');			add: (#Zaza &lt;&lt; #librarydemo &gt;&gt; 'Zaza');			add: (#Zoe &lt;&lt; #librarydemo &gt;&gt; 'Zoe');			asArray)</body><body package="Protocols-LibraryDemo">initializeFemaleMiddleNames	femaleMiddleNames :=		(OrderedCollection new			add: (#Alienor &lt;&lt; #librarydemo &gt;&gt; 'Alienor');			add: (#Almodis &lt;&lt; #librarydemo &gt;&gt; 'Almodis');			add: (#Artemisia &lt;&lt; #librarydemo &gt;&gt; 'Artemisia');			add: (#Beatrice &lt;&lt; #librarydemo &gt;&gt; 'Beatrice');			add: (#Catherine &lt;&lt; #librarydemo &gt;&gt; 'Catherine');			add: (#Diana &lt;&lt; #librarydemo &gt;&gt; 'Diana');			add: (#Douce &lt;&lt; #librarydemo &gt;&gt; 'Douce');			add: (#Ermengard &lt;&lt; #librarydemo &gt;&gt; 'Ermengard');			add: (#Ermessend &lt;&lt; #librarydemo &gt;&gt; 'Ermessend');			"add: (#F &lt;&lt; #librarydemo &gt;&gt; 'F.');"			add: (#Gerberga &lt;&lt; #librarydemo &gt;&gt; 'Gerberga');			"add: (#H &lt;&lt; #librarydemo &gt;&gt; 'H.');"			"add: (#I &lt;&lt; #librarydemo &gt;&gt; 'I.');"			"add: (#J &lt;&lt; #librarydemo &gt;&gt; 'J.');"			add: (#Klytemnestra &lt;&lt; #librarydemo &gt;&gt; 'Klytemnestra');			"add: (#L &lt;&lt; #librarydemo &gt;&gt; 'L.');"			add: (#Moira &lt;&lt; #librarydemo &gt;&gt; 'Moira');			"add: (#N &lt;&lt; #librarydemo &gt;&gt; 'N.');"			"add: (#O &lt;&lt; #librarydemo &gt;&gt; 'O.');"			"add: (#P &lt;&lt; #librarydemo &gt;&gt; 'P.');"			"add: (#Q &lt;&lt; #librarydemo &gt;&gt; 'Q.');"			add: (#Richildis &lt;&lt; #librarydemo &gt;&gt; 'Richildis');			"add: (#S &lt;&lt; #librarydemo &gt;&gt; 'S.');"			"add: (#T &lt;&lt; #librarydemo &gt;&gt; 'T.');"			"add: (#U &lt;&lt; #librarydemo &gt;&gt; 'U.');"			"add: (#V &lt;&lt; #librarydemo &gt;&gt; 'V.');"			"add: (#W &lt;&lt; #librarydemo &gt;&gt; 'W.');"			"add: (#X &lt;&lt; #librarydemo &gt;&gt; 'X.');"			"add: (#Y &lt;&lt; #librarydemo &gt;&gt; 'Y.');"			"add: (#Z &lt;&lt; #librarydemo &gt;&gt; 'Z.');"			asArray)</body><body package="Protocols-LibraryDemo">initializeFemaleTitles	| oc |	oc := OrderedCollection new.	10 timesRepeat: [ oc addLast: (#Ms &lt;&lt; #librarydemo &gt;&gt; 'Ms.') ].	7 timesRepeat: [ oc addLast: (#Mrs &lt;&lt; #librarydemo &gt;&gt; 'Mrs.') ].	femaleTitles := oc asArray.</body><body package="Protocols-LibraryDemo">initializeLastNames	lastNames :=		(OrderedCollection new			add: (#Abruzzi &lt;&lt; #librarydemo &gt;&gt; 'Abruzzi');			add: (#Achenbach &lt;&lt; #librarydemo &gt;&gt; 'Achenbach');			add: (#Agricola &lt;&lt; #librarydemo &gt;&gt; 'Agricola');			add: (#Alarcon &lt;&lt; #librarydemo &gt;&gt; 'Alarcon');			add: (#Amundsen &lt;&lt; #librarydemo &gt;&gt; 'Amundsen');			add: (#Anson &lt;&lt; #librarydemo &gt;&gt; 'Anson');			add: (#Atkin &lt;&lt; #librarydemo &gt;&gt; 'Atkin');			add: (#Aviles &lt;&lt; #librarydemo &gt;&gt; 'Aviles');			add: (#Ayllon &lt;&lt; #librarydemo &gt;&gt; 'Ayllon');			add: (#Bakhuysen &lt;&lt; #librarydemo &gt;&gt; 'Bakhuysen');			add: (#Bandiera &lt;&lt; #librarydemo &gt;&gt; 'Bandiera');			add: (#Bart &lt;&lt; #librarydemo &gt;&gt; 'Bart');			add: (#Bassett &lt;&lt; #librarydemo &gt;&gt; 'Bassett');			add: (#Bazan &lt;&lt; #librarydemo &gt;&gt; 'Bazan');			add: (#Beaufort &lt;&lt; #librarydemo &gt;&gt; 'Beaufort');			add: (#Behring &lt;&lt; #librarydemo &gt;&gt; 'Behring');			add: (#Bonny &lt;&lt; #librarydemo &gt;&gt; 'Bonny');			add: (#Boscawen &lt;&lt; #librarydemo &gt;&gt; 'Boscawen');			add: (#Bougainville &lt;&lt; #librarydemo &gt;&gt; 'Bougainville');			add: (#Bowditch &lt;&lt; #librarydemo &gt;&gt; 'Bowditch');			add: (#Brangwyn &lt;&lt; #librarydemo &gt;&gt; 'Brangwyn');			add: (#Bretheryn &lt;&lt; #librarydemo &gt;&gt; 'Bretheryn');			add: (#Caboto &lt;&lt; #librarydemo &gt;&gt; 'Caboto');			add: (#Cadamosto &lt;&lt; #librarydemo &gt;&gt; 'Cadamosto');			add: (#Cam &lt;&lt; #librarydemo &gt;&gt; 'Cam');			add: (#Canute &lt;&lt; #librarydemo &gt;&gt; 'Canute');			add: (#Carraciolo &lt;&lt; #librarydemo &gt;&gt; 'Carraciolo');			add: (#Cassabianca &lt;&lt; #librarydemo &gt;&gt; 'Cassabianca');			add: (#Castex &lt;&lt; #librarydemo &gt;&gt; 'Castex');			add: (#Cavendish &lt;&lt; #librarydemo &gt;&gt; 'Cavendish');			add: (#Celikkale &lt;&lt; #librarydemo &gt;&gt; 'Celikkale');			add: (#Cervera &lt;&lt; #librarydemo &gt;&gt; 'Cervera');			add: (#Chabaud &lt;&lt; #librarydemo &gt;&gt; 'Chabaud');			add: (#ChateauRenault &lt;&lt; #librarydemo &gt;&gt; 'Chateau-Renault');			add: (#ChojnowskaLiskiewicz &lt;&lt; #librarydemo &gt;&gt; 'Chojnowska-Liskiewicz');			add: (#DAiguilliers &lt;&lt; #librarydemo &gt;&gt; 'D''Aiguilliers');			add: (#Dallman &lt;&lt; #librarydemo &gt;&gt; 'Dallman');			add: (#Dandolo &lt;&lt; #librarydemo &gt;&gt; 'Dandolo');			add: (#Dawson &lt;&lt; #librarydemo &gt;&gt; 'Dawson');			add: (#DeGrasse &lt;&lt; #librarydemo &gt;&gt; 'De Grasse');			add: (#Decatur &lt;&lt; #librarydemo &gt;&gt; 'Decatur');			add: (#DesBarres &lt;&lt; #librarydemo &gt;&gt; 'Des Barres');			add: (#Doria &lt;&lt; #librarydemo &gt;&gt; 'Doria');			add: (#DuguayTrouin &lt;&lt; #librarydemo &gt;&gt; 'Duguay-Trouin');			add: (#Dumas &lt;&lt; #librarydemo &gt;&gt; 'Dumas');			add: (#Esenc &lt;&lt; #librarydemo &gt;&gt; 'Esenc');			add: (#Fletcher &lt;&lt; #librarydemo &gt;&gt; 'Fletcher');			add: (#Ford &lt;&lt; #librarydemo &gt;&gt; 'Ford');			add: (#Gaius &lt;&lt; #librarydemo &gt;&gt; 'Gaius');			add: (#Garden &lt;&lt; #librarydemo &gt;&gt; 'Garden');			add: (#Herreshoff &lt;&lt; #librarydemo &gt;&gt; 'Herreshoff');			add: (#Hylan &lt;&lt; #librarydemo &gt;&gt; 'Hylan');			add: (#Imakiire &lt;&lt; #librarydemo &gt;&gt; 'Imakiire');			"add: (#J &lt;&lt; #librarydemo &gt;&gt; 'J.');"			add: (#Karlsefni &lt;&lt; #librarydemo &gt;&gt; 'Karlsefni');			add: (#KerguelenTremarec &lt;&lt; #librarydemo &gt;&gt; 'Kerguelen-Tremarec');			add: (#King &lt;&lt; #librarydemo &gt;&gt; 'King');			add: (#Korzeniowski &lt;&lt; #librarydemo &gt;&gt; 'Korzeniowski');			add: (#Kulczycki &lt;&lt; #librarydemo &gt;&gt; 'Kulczycki');			add: (#L &lt;&lt; #librarydemo &gt;&gt; 'L.');			add: (#Mickiewicz &lt;&lt; #librarydemo &gt;&gt; 'Mickiewicz');			add: (#Munk &lt;&lt; #librarydemo &gt;&gt; 'Munk');			add: (#Nagumo &lt;&lt; #librarydemo &gt;&gt; 'Nagumo');			add: (#Nakhimov &lt;&lt; #librarydemo &gt;&gt; 'Nakhimov');			add: (#Nansen &lt;&lt; #librarydemo &gt;&gt; 'Nansen');			add: (#Napier &lt;&lt; #librarydemo &gt;&gt; 'Napier');			add: (#Nepos &lt;&lt; #librarydemo &gt;&gt; 'Nepos');			add: (#Oudray &lt;&lt; #librarydemo &gt;&gt; 'Oudray');			add: (#Oughtred &lt;&lt; #librarydemo &gt;&gt; 'Oughtred');			add: (#Payne &lt;&lt; #librarydemo &gt;&gt; 'Payne');			add: (#Pellegrini &lt;&lt; #librarydemo &gt;&gt; 'Pellegrini');			add: (#Pepys &lt;&lt; #librarydemo &gt;&gt; 'Pepys');			add: (#Pinzon &lt;&lt; #librarydemo &gt;&gt; 'Pinzon');			add: (#Pisani &lt;&lt; #librarydemo &gt;&gt; 'Pisani');			add: (#Polo &lt;&lt; #librarydemo &gt;&gt; 'Polo');			add: (#Pompeius &lt;&lt; #librarydemo &gt;&gt; 'Pompeius');			add: (#Prien &lt;&lt; #librarydemo &gt;&gt; 'Prien');			add: (#Quiros &lt;&lt; #librarydemo &gt;&gt; 'Quiros');			add: (#Rasmusssen &lt;&lt; #librarydemo &gt;&gt; 'Rasmusssen');			add: (#Reinel &lt;&lt; #librarydemo &gt;&gt; 'Reinel');			add: (#Ribault &lt;&lt; #librarydemo &gt;&gt; 'Ribault');			add: (#Rigaud &lt;&lt; #librarydemo &gt;&gt; 'Rigaud');			add: (#Riou &lt;&lt; #librarydemo &gt;&gt; 'Riou');			add: (#Roggeveen &lt;&lt; #librarydemo &gt;&gt; 'Roggeveen');			add: (#Rozhestvensky &lt;&lt; #librarydemo &gt;&gt; 'Rozhestvensky');			add: (#Ruyter &lt;&lt; #librarydemo &gt;&gt; 'Ruyter');			add: (#Ryan &lt;&lt; #librarydemo &gt;&gt; 'Ryan');			add: (#Sabran &lt;&lt; #librarydemo &gt;&gt; 'Sabran');			add: (#Sanuto &lt;&lt; #librarydemo &gt;&gt; 'Sanuto');			add: (#Schetky &lt;&lt; #librarydemo &gt;&gt; 'Schetky');			add: (#Schouten &lt;&lt; #librarydemo &gt;&gt; 'Schouten');			add: (#Selkirk &lt;&lt; #librarydemo &gt;&gt; 'Selkirk');			add: (#Serres &lt;&lt; #librarydemo &gt;&gt; 'Serres');			add: (#Semmes &lt;&lt; #librarydemo &gt;&gt; 'Semmes');			add: (#Sniadecka &lt;&lt; #librarydemo &gt;&gt; 'Sniadecka');			add: (#Spalding &lt;&lt; #librarydemo &gt;&gt; 'Spalding');			add: (#Stambaugh &lt;&lt; #librarydemo &gt;&gt; 'Stambaugh');			add: (#Suffren &lt;&lt; #librarydemo &gt;&gt; 'Suffren');			add: (#Surcouf &lt;&lt; #librarydemo &gt;&gt; 'Surcouf');			add: (#Tabarly &lt;&lt; #librarydemo &gt;&gt; 'Tabarly');			add: (#Tattnall &lt;&lt; #librarydemo &gt;&gt; 'Tattnall');			add: (#Tegetthof &lt;&lt; #librarydemo &gt;&gt; 'Tegetthof');			add: (#Thurlow &lt;&lt; #librarydemo &gt;&gt; 'Thurlow');			add: (#Tilman &lt;&lt; #librarydemo &gt;&gt; 'Tilman');			add: (#Trompe &lt;&lt; #librarydemo &gt;&gt; 'Trompe');			add: (#Togo &lt;&lt; #librarydemo &gt;&gt; 'Togo');			add: (#Tordenskjold &lt;&lt; #librarydemo &gt;&gt; 'Tordenskjold');			add: (#Toulouse &lt;&lt; #librarydemo &gt;&gt; 'Toulouse');			add: (#Umberto &lt;&lt; #librarydemo &gt;&gt; 'Umberto');			add: (#Vesconte &lt;&lt; #librarydemo &gt;&gt; 'Vesconte');			add: (#Vespucci &lt;&lt; #librarydemo &gt;&gt; 'Vespucci');			add: (#Vilkitsiy &lt;&lt; #librarydemo &gt;&gt; 'Vilkitsiy');			add: (#Villaret &lt;&lt; #librarydemo &gt;&gt; 'Villaret');			add: (#Villeneuve &lt;&lt; #librarydemo &gt;&gt; 'Villeneuve');			add: (#Vivaldo &lt;&lt; #librarydemo &gt;&gt; 'Vivaldo');			add: (#Weld &lt;&lt; #librarydemo &gt;&gt; 'Weld');			add: (#White &lt;&lt; #librarydemo &gt;&gt; 'White');			add: (#Woods &lt;&lt; #librarydemo &gt;&gt; 'Woods');			add: (#Yamamoto &lt;&lt; #librarydemo &gt;&gt; 'Yamamoto');			add: (#Yanez &lt;&lt; #librarydemo &gt;&gt; 'Yanez');			add: (#Yarnell &lt;&lt; #librarydemo &gt;&gt; 'Yarnell');			add: (#Yevgenov &lt;&lt; #librarydemo &gt;&gt; 'Yevgenov');			add: (#Yokosuka &lt;&lt; #librarydemo &gt;&gt; 'Yokosuka');			add: (#Zeebrugge &lt;&lt; #librarydemo &gt;&gt; 'Zeebrugge');			add: (#Zimmer &lt;&lt; #librarydemo &gt;&gt; 'Zimmer');			add: (#Zimmerman &lt;&lt; #librarydemo &gt;&gt; 'Zimmerman');			add: (#Zubian &lt;&lt; #librarydemo &gt;&gt; 'Zubian');			asArray)</body><body package="Protocols-LibraryDemo">initializeMaleFirstNames	maleFirstNames :=		(OrderedCollection new			add: (#Abel &lt;&lt; #librarydemo &gt;&gt; 'Abel');			add: (#Adam &lt;&lt; #librarydemo &gt;&gt; 'Adam');			add: (#Alphonse &lt;&lt; #librarydemo &gt;&gt; 'Alphonse');			add: (#Amadeo &lt;&lt; #librarydemo &gt;&gt; 'Amadeo');			add: (#Anatoly &lt;&lt; #librarydemo &gt;&gt; 'Anatoly');			add: (#Andrea &lt;&lt; #librarydemo &gt;&gt; 'Andrea');			add: (#Andreas &lt;&lt; #librarydemo &gt;&gt; 'Andreas');			add: (#Antoine &lt;&lt; #librarydemo &gt;&gt; 'Antoine');			add: (#Attilio &lt;&lt; #librarydemo &gt;&gt; 'Attilio');			add: (#Baptiste &lt;&lt; #librarydemo &gt;&gt; 'Baptiste');			add: (#Barnard &lt;&lt; #librarydemo &gt;&gt; 'Barnard');			add: (#Baruch &lt;&lt; #librarydemo &gt;&gt; 'Baruch');			add: (#Basil &lt;&lt; #librarydemo &gt;&gt; 'Basil');			add: (#Bela &lt;&lt; #librarydemo &gt;&gt; 'Bela');			add: (#Bernart &lt;&lt; #librarydemo &gt;&gt; 'Bernart');			add: (#Bertran &lt;&lt; #librarydemo &gt;&gt; 'Bertran');			add: (#Brendan &lt;&lt; #librarydemo &gt;&gt; 'Brendan');			add: (#Cesar &lt;&lt; #librarydemo &gt;&gt; 'Cesar');			add: (#Chay &lt;&lt; #librarydemo &gt;&gt; 'Chay');			add: (#Chris &lt;&lt; #librarydemo &gt;&gt; 'Chris');			add: (#Chuichi &lt;&lt; #librarydemo &gt;&gt; 'Chuichi');			add: (#Claude &lt;&lt; #librarydemo &gt;&gt; 'Claude');			add: (#Cyril &lt;&lt; #librarydemo &gt;&gt; 'Cyril');			add: (#Dario &lt;&lt; #librarydemo &gt;&gt; 'Dario');			add: (#David &lt;&lt; #librarydemo &gt;&gt; 'David');			add: (#Diodorus &lt;&lt; #librarydemo &gt;&gt; 'Diodorus');			add: (#Diogo &lt;&lt; #librarydemo &gt;&gt; 'Diogo');			add: (#Douglas &lt;&lt; #librarydemo &gt;&gt; 'Douglas');			add: (#Errol &lt;&lt; #librarydemo &gt;&gt; 'Errol');			add: (#Fedor &lt;&lt; #librarydemo &gt;&gt; 'Fedor');			add: (#Fernando &lt;&lt; #librarydemo &gt;&gt; 'Fernando');			add: (#Fridtjof &lt;&lt; #librarydemo &gt;&gt; 'Fridtjof');			add: (#Fritz &lt;&lt; #librarydemo &gt;&gt; 'Fritz');			add: (#Gerardus &lt;&lt; #librarydemo &gt;&gt; 'Gerardus');			add: (#Gilbert &lt;&lt; #librarydemo &gt;&gt; 'Gilbert');			add: (#Giraut &lt;&lt; #librarydemo &gt;&gt; 'Giraut');			add: (#Giuseppe &lt;&lt; #librarydemo &gt;&gt; 'Giuseppe');			add: (#Gnaeus &lt;&lt; #librarydemo &gt;&gt; 'Gnaeus');			add: (#Guilhem &lt;&lt; #librarydemo &gt;&gt; 'Guilhem');			add: (#Gunther &lt;&lt; #librarydemo &gt;&gt; 'Gunther');			add: (#Heihachiro &lt;&lt; #librarydemo &gt;&gt; 'Heihachiro');			add: (#Hektor &lt;&lt; #librarydemo &gt;&gt; 'Hektor');			add: (#Hernando &lt;&lt; #librarydemo &gt;&gt; 'Hernando');			add: (#Herve &lt;&lt; #librarydemo &gt;&gt; 'Herve');			add: (#Iain &lt;&lt; #librarydemo &gt;&gt; 'Iain');			add: (#Isoroku &lt;&lt; #librarydemo &gt;&gt; 'Isoroku');			add: (#Ivanovich &lt;&lt; #librarydemo &gt;&gt; 'Ivanovich');			add: (#Jacques &lt;&lt; #librarydemo &gt;&gt; 'Jacques');			add: (#Jan &lt;&lt; #librarydemo &gt;&gt; 'Jan');			add: (#Jean &lt;&lt; #librarydemo &gt;&gt; 'Jean');			add: (#Joel &lt;&lt; #librarydemo &gt;&gt; 'Joel');			add: (#John &lt;&lt; #librarydemo &gt;&gt; 'John');			add: (#Jorge &lt;&lt; #librarydemo &gt;&gt; 'Jorge');			add: (#Jurgen &lt;&lt; #librarydemo &gt;&gt; 'Jurgen');			add: (#Karl &lt;&lt; #librarydemo &gt;&gt; 'Karl');			add: (#Ken &lt;&lt; #librarydemo &gt;&gt; 'Ken');			add: (#Knud &lt;&lt; #librarydemo &gt;&gt; 'Knud');			add: (#Krzystof &lt;&lt; #librarydemo &gt;&gt; 'Krzystof');			add: (#Lemuel &lt;&lt; #librarydemo &gt;&gt; 'Lemuel');			add: (#Lev &lt;&lt; #librarydemo &gt;&gt; 'Lev');			add: (#Ludolph &lt;&lt; #librarydemo &gt;&gt; 'Ludolph');			add: (#Luigi &lt;&lt; #librarydemo &gt;&gt; 'Luigi');			add: (#Marc &lt;&lt; #librarydemo &gt;&gt; 'Marc');			add: (#Marco &lt;&lt; #librarydemo &gt;&gt; 'Marco');			add: (#Maarten &lt;&lt; #librarydemo &gt;&gt; 'Maarten');			add: (#Marino &lt;&lt; #librarydemo &gt;&gt; 'Marino');			add: (#Mathurin &lt;&lt; #librarydemo &gt;&gt; 'Mathurin');			add: (#Michal &lt;&lt; #librarydemo &gt;&gt; 'Michal');			add: (#Michiel &lt;&lt; #librarydemo &gt;&gt; 'Michiel');			add: (#Mohammed &lt;&lt; #librarydemo &gt;&gt; 'Mohammed');			add: (#Mustafa &lt;&lt; #librarydemo &gt;&gt; 'Mustafa');			add: (#Nikolai &lt;&lt; #librarydemo &gt;&gt; 'Nikolai');			add: (#Norman &lt;&lt; #librarydemo &gt;&gt; 'Norman');			add: (#Olin &lt;&lt; #librarydemo &gt;&gt; 'Olin');			add: (#Patricio &lt;&lt; #librarydemo &gt;&gt; 'Patricio');			add: (#Pascual &lt;&lt; #librarydemo &gt;&gt; 'Pascual');			add: (#Paul &lt;&lt; #librarydemo &gt;&gt; 'Paul');			add: (#Pedro &lt;&lt; #librarydemo &gt;&gt; 'Pedro');			add: (#Petrovich &lt;&lt; #librarydemo &gt;&gt; 'Petrovich');			add: (#Pieter &lt;&lt; #librarydemo &gt;&gt; 'Pieter');			"add: (#Q &lt;&lt; #librarydemo &gt;&gt; 'Q.');"			add: (#Raphael &lt;&lt; #librarydemo &gt;&gt; 'Raphael');			add: (#Reginald &lt;&lt; #librarydemo &gt;&gt; 'Reginald');			add: (#Roald &lt;&lt; #librarydemo &gt;&gt; 'Roald');			add: (#Rob &lt;&lt; #librarydemo &gt;&gt; 'Rob');			add: (#Rollin &lt;&lt; #librarydemo &gt;&gt; 'Rollin');			add: (#Samuel &lt;&lt; #librarydemo &gt;&gt; 'Samuel');			add: (#Semyon &lt;&lt; #librarydemo &gt;&gt; 'Semyon');			add: (#Sextus &lt;&lt; #librarydemo &gt;&gt; 'Sextus');			add: (#Stefan &lt;&lt; #librarydemo &gt;&gt; 'Stefan');			add: (#Tadeusz &lt;&lt; #librarydemo &gt;&gt; 'Tadeusz');			add: (#Teodor &lt;&lt; #librarydemo &gt;&gt; 'Teodor');			add: (#Tevfic &lt;&lt; #librarydemo &gt;&gt; 'Tevfic');			add: (#Thorfinn &lt;&lt; #librarydemo &gt;&gt; 'Thorfinn');			add: (#Ugolino &lt;&lt; #librarydemo &gt;&gt; 'Ugolino');			add: (#Ulysses &lt;&lt; #librarydemo &gt;&gt; 'Ulysses');			add: (#Vettor &lt;&lt; #librarydemo &gt;&gt; 'Vettor');			add: (#Vilhjalmur &lt;&lt; #librarydemo &gt;&gt; 'Vilhjalmur');			add: (#Vincente &lt;&lt; #librarydemo &gt;&gt; 'Vincente');			add: (#Vito &lt;&lt; #librarydemo &gt;&gt; 'Vito');			add: (#Vitus &lt;&lt; #librarydemo &gt;&gt; 'Vitus');			add: (#Wilhelm &lt;&lt; #librarydemo &gt;&gt; 'Wilhelm');			"add: (#X &lt;&lt; #librarydemo &gt;&gt; 'X.');"			"add: (#Y &lt;&lt; #librarydemo &gt;&gt; 'Y.');"			add: (#Zinovi &lt;&lt; #librarydemo &gt;&gt; 'Zinovi');			asArray)</body><body package="Protocols-LibraryDemo">initializeMaleMiddleNames	maleMiddleNames :=		(OrderedCollection new			add: (#Adlard &lt;&lt; #librarydemo &gt;&gt; 'Adlard');			add: (#Alain &lt;&lt; #librarydemo &gt;&gt; 'Alain');			add: (#Alexandre &lt;&lt; #librarydemo &gt;&gt; 'Alexandre');			add: (#Alonzo &lt;&lt; #librarydemo &gt;&gt; 'Alonzo');			add: (#Alvaro &lt;&lt; #librarydemo &gt;&gt; 'Alvaro');			add: (#Alvise &lt;&lt; #librarydemo &gt;&gt; 'Alvise');			add: (#Ambrose &lt;&lt; #librarydemo &gt;&gt; 'Ambrose');			add: (#Amerigo &lt;&lt; #librarydemo &gt;&gt; 'Amerigo');			add: (#Andrienszoon &lt;&lt; #librarydemo &gt;&gt; 'Andrienszoon');			add: (#Anton &lt;&lt; #librarydemo &gt;&gt; 'Anton');			add: (#Arleigh &lt;&lt; #librarydemo &gt;&gt; 'Arleigh');			add: (#Arno &lt;&lt; #librarydemo &gt;&gt; 'Arno');			add: (#Aymeri &lt;&lt; #librarydemo &gt;&gt; 'Aymeri');			add: (#Augustine &lt;&lt; #librarydemo &gt;&gt; 'Augustine');			add: (#Bartholomaus &lt;&lt; #librarydemo &gt;&gt; 'Bartholomaus');			add: (#Belisarius &lt;&lt; #librarydemo &gt;&gt; 'Belisarius');			add: (#Benedetto &lt;&lt; #librarydemo &gt;&gt; 'Benedetto');			add: (#Bernhardus &lt;&lt; #librarydemo &gt;&gt; 'Bernhardus');			add: (#Boris &lt;&lt; #librarydemo &gt;&gt; 'Boris');			add: (#Christoval &lt;&lt; #librarydemo &gt;&gt; 'Christoval');			add: (#Cornelis &lt;&lt; #librarydemo &gt;&gt; 'Cornelis');			add: (#Cornelisz &lt;&lt; #librarydemo &gt;&gt; 'Cornelisz');			add: (#Cuthbert &lt;&lt; #librarydemo &gt;&gt; 'Cuthbert');			add: (#Diego &lt;&lt; #librarydemo &gt;&gt; 'Diego');			add: (#Dudley &lt;&lt; #librarydemo &gt;&gt; 'Dudley');			add: (#Duillius &lt;&lt; #librarydemo &gt;&gt; 'Duillius');			add: (#Eratosthenes &lt;&lt; #librarydemo &gt;&gt; 'Eratosthenes');			add: (#Ericus &lt;&lt; #librarydemo &gt;&gt; 'Ericus');			add: (#Ernle &lt;&lt; #librarydemo &gt;&gt; 'Ernle');			add: (#Eudoxus &lt;&lt; #librarydemo &gt;&gt; 'Eudoxus');			add: (#Eugene &lt;&lt; #librarydemo &gt;&gt; 'Eugene');			add: (#Fenimore &lt;&lt; #librarydemo &gt;&gt; 'Fenimore');			add: (#Fernandez &lt;&lt; #librarydemo &gt;&gt; 'Fernandez');			add: (#Flores &lt;&lt; #librarydemo &gt;&gt; 'Flores');			add: (#Francois &lt;&lt; #librarydemo &gt;&gt; 'Francois');			add: (#Francesco &lt;&lt; #librarydemo &gt;&gt; 'Francesco');			add: (#Geoffrey &lt;&lt; #librarydemo &gt;&gt; 'Geoffrey');			add: (#Gerhard &lt;&lt; #librarydemo &gt;&gt; 'Gerhard');			add: (#Giovanni &lt;&lt; #librarydemo &gt;&gt; 'Giovanni');			add: (#Graeme &lt;&lt; #librarydemo &gt;&gt; 'Graeme');			add: (#Griffith &lt;&lt; #librarydemo &gt;&gt; 'Griffith');			add: (#Henryk &lt;&lt; #librarydemo &gt;&gt; 'Henryk');			add: (#Herlup &lt;&lt; #librarydemo &gt;&gt; 'Herlup');			add: (#Hieronym &lt;&lt; #librarydemo &gt;&gt; 'Hieronym');			add: (#Igor &lt;&lt; #librarydemo &gt;&gt; 'Igor');			add: (#Isambard &lt;&lt; #librarydemo &gt;&gt; 'Isambard');			add: (#Ivanov &lt;&lt; #librarydemo &gt;&gt; 'Ivanov');			add: (#Jacob &lt;&lt; #librarydemo &gt;&gt; 'Jacob');			add: (#Janszoon &lt;&lt; #librarydemo &gt;&gt; 'Janszoon');			add: (#JeanBaptiste &lt;&lt; #librarydemo &gt;&gt; 'Jean-Baptiste');			add: (#Jens &lt;&lt; #librarydemo &gt;&gt; 'Jens');			add: (#Johan &lt;&lt; #librarydemo &gt;&gt; 'Johan');			add: (#Jozef &lt;&lt; #librarydemo &gt;&gt; 'Jozef');			add: (#Julius &lt;&lt; #librarydemo &gt;&gt; 'Julius');			"add: (#K &lt;&lt; #librarydemo &gt;&gt; 'K.');"			add: (#Lech &lt;&lt; #librarydemo &gt;&gt; 'Lech');			add: (#Leon &lt;&lt; #librarydemo &gt;&gt; 'Leon');			add: (#Lucas &lt;&lt; #librarydemo &gt;&gt; 'Lucas');			add: (#Luis &lt;&lt; #librarydemo &gt;&gt; 'Luis');			add: (#Manrique &lt;&lt; #librarydemo &gt;&gt; 'Manrique');			add: (#Marcin &lt;&lt; #librarydemo &gt;&gt; 'Marcin');			add: (#MarinMarie &lt;&lt; #librarydemo &gt;&gt; 'Marin-Marie');			add: (#Mario &lt;&lt; #librarydemo &gt;&gt; 'Mario');			add: (#Mathieu &lt;&lt; #librarydemo &gt;&gt; 'Mathieu');			add: (#Maurice &lt;&lt; #librarydemo &gt;&gt; 'Maurice');			add: (#Menendez &lt;&lt; #librarydemo &gt;&gt; 'Menendez');			add: (#Nathaniel &lt;&lt; #librarydemo &gt;&gt; 'Nathaniel');			add: (#Nelson &lt;&lt; #librarydemo &gt;&gt; 'Nelson');			add: (#Oswald &lt;&lt; #librarydemo &gt;&gt; 'Oswald');			add: (#Owyn &lt;&lt; #librarydemo &gt;&gt; 'Owyn');			add: (#Peder &lt;&lt; #librarydemo &gt;&gt; 'Peder');			add: (#Petrovich &lt;&lt; #librarydemo &gt;&gt; 'Petrovich');			add: (#Petrus &lt;&lt; #librarydemo &gt;&gt; 'Petrus');			add: (#Picard &lt;&lt; #librarydemo &gt;&gt; 'Picard');			add: (#Pierre &lt;&lt; #librarydemo &gt;&gt; 'Pierre');			add: (#Philippe &lt;&lt; #librarydemo &gt;&gt; 'Philippe');			add: (#Pythias &lt;&lt; #librarydemo &gt;&gt; 'Pythias'); 			"add: (#Q &lt;&lt; #librarydemo &gt;&gt; 'Q.');"			add: (#Raimon &lt;&lt; #librarydemo &gt;&gt; 'Raimon');			add: (#Raoul &lt;&lt; #librarydemo &gt;&gt; 'Raoul');			add: (#Rene &lt;&lt; #librarydemo &gt;&gt; 'Rene');			add: (#Reuben &lt;&lt; #librarydemo &gt;&gt; 'Reuben');			add: (#Romeo &lt;&lt; #librarydemo &gt;&gt; 'Romeo');			add: (#Sebastien &lt;&lt; #librarydemo &gt;&gt; 'Sebastien');			add: (#Stepanovich &lt;&lt; #librarydemo &gt;&gt; 'Stepanovich');			add: (#Stephan &lt;&lt; #librarydemo &gt;&gt; 'Stephan');			add: (#Tedo &lt;&lt; #librarydemo &gt;&gt; 'Tedo');			add: (#Thaddeus &lt;&lt; #librarydemo &gt;&gt; 'Thaddeus');			add: (#Theodat &lt;&lt; #librarydemo &gt;&gt; 'Theodat');			"add: (#U &lt;&lt; #librarydemo &gt;&gt; 'U.');"			add: (#Vasquez &lt;&lt; #librarydemo &gt;&gt; 'Vasquez');			add: (#Victor &lt;&lt; #librarydemo &gt;&gt; 'Victor');			add: (#Willem &lt;&lt; #librarydemo &gt;&gt; 'Willem');			"add: (#X &lt;&lt; #librarydemo &gt;&gt; 'X.');"			add: (#Yulyevich &lt;&lt; #librarydemo &gt;&gt; 'Yulyevich');			add: (#Yves &lt;&lt; #librarydemo &gt;&gt; 'Yves');			"add: (#Z &lt;&lt; #librarydemo &gt;&gt; 'Z.');"			asArray)</body><body package="Protocols-LibraryDemo">initializeMaleTitles	| oc |	oc := OrderedCollection new.	oc addLast: (#Mr &lt;&lt; #librarydemo &gt;&gt; 'Mr.').	maleTitles := oc asArray.</body></methods><methods><class-id>Protocols.Library.PersonName class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomFemaleFirstName	^( femaleFirstNames at: ( self randomPositiveIntegerWithMax: ( femaleFirstNames size ) ) ) asString</body><body package="Protocols-LibraryDemo">randomFemaleMiddleName	^( femaleMiddleNames at: ( self randomPositiveIntegerWithMax: ( femaleMiddleNames size ) ) ) asString</body><body package="Protocols-LibraryDemo">randomFemaleTitle	^( femaleTitles at: ( self randomPositiveIntegerWithMax: ( femaleTitles size ) ) ) asString</body><body package="Protocols-LibraryDemo">randomLastName	^( lastNames at: ( self randomPositiveIntegerWithMax: ( lastNames size ) ) ) asString</body><body package="Protocols-LibraryDemo">randomMaleFirstName	^( maleFirstNames at: ( self randomPositiveIntegerWithMax: ( maleFirstNames size ) ) ) asString</body><body package="Protocols-LibraryDemo">randomMaleMiddleName	| siz ndx |	siz := maleMiddleNames size.	ndx := 1 + ( self randomIntegerLessThan: siz ).	^( maleMiddleNames at: ndx ) asString</body><body package="Protocols-LibraryDemo">randomMaleTitle	| siz ndx |	siz := maleTitles size.	ndx := 1 + ( self randomIntegerLessThan: siz ).	^( maleTitles at: ndx ) asString</body></methods><methods><class-id>Protocols.Library.PersonName class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">randomFemaleLDDataPersonName	"((( LDDataPersonName randomFemaleLDDataPersonName )))"	^self		title: self randomFemaleTitle		firstName: self randomFemaleFirstName		middleNames: self randomFemaleMiddleName		lastName: self randomLastName</body><body package="Protocols-LibraryDemo">randomLDDataPersonName	"((( LDDataPersonalName randomLDDataPersonName )))"	| n |	n := self randomIntegerLessThan: 2.	^( n == 0 )		ifTrue:	[ self randomMaleLDDataPersonName ]		ifFalse:	[ self randomFemaleLDDataPersonName ]</body><body package="Protocols-LibraryDemo">randomMaleLDDataPersonName	"((( LDDataPersonName randomMaleLDDataPersonName )))"	^self		title: self randomMaleTitle		firstName: self randomMaleFirstName		middleNames: self randomMaleMiddleName		lastName: self randomLastName</body><body package="Protocols-LibraryDemo">title: aString1 firstName: aString2 middleNames: aString3 lastName: aString4	^( self new )		title: aString1;		firstName: aString2;		middleNames: aString3;		lastName: aString4;		yourself</body></methods><methods><class-id>Protocols.Library.OrganizationName</class-id> <category>printing</category><body package="Protocols-LibraryDemo">printOn: aStream	aStream		nextPutAll: name</body></methods><methods><class-id>Protocols.Library.OrganizationName</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">name	^name</body><body package="Protocols-LibraryDemo">name: aString	name := aString</body></methods><methods><class-id>Protocols.Library.OrganizationName</class-id> <category>utility</category><body package="Protocols-LibraryDemo">emailAddresses	| str tok |	str := WriteStream on: ( String new: 26 ).	tok := name tokensBasedOn: Character space.	1 to: ( tok size - 1 ) do: 		[ :ndx |	( ( ( tok at: ndx ) at: 1 ) isUppercase )					ifTrue:	[ str nextPutAll: ( ( tok at: ndx ) copyFrom: 1 to: 2 ) ]				].	str		nextPutAll: ( tok last copyFrom: 1 to: ( ( 12 - str size ) min: ( tok last size ) ) );		nextPutAll: (#portnowherenet &lt;&lt; #librarydemo &gt;&gt; '@portnowhere.net') asString.	^Array		with: ( EmailAddress				address: str contents asLowercase				description: (#Business &lt;&lt; #librarydemo &gt;&gt; 'Business') asString )</body></methods><methods><class-id>Protocols.Library.OrganizationName class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">name: aString	^( self new )		name: aString;		yourself</body><body package="Protocols-LibraryDemo">randomLDDataOrganizationName	"((( self randomLDDataOrganizationName )))"	| str |	str := WriteStream on: ( String new: 64 ).	str		nextPutAll: PersonName randomLastName;		nextPut: Character space;		nextPutAll: self randomOrganizationType.	^self		name: str contents</body></methods><methods><class-id>Protocols.Library.OrganizationName class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDDataOrganizationName initialize )))"	self initializeOrganizationTypes</body><body package="Protocols-LibraryDemo">initializeOrganizationTypes	organizationTypes :=		(OrderedCollection new 			add: (#BaitShop &lt;&lt; #librarydemo &gt;&gt; 'Bait Shop');			add: (#Barbershop &lt;&lt; #librarydemo &gt;&gt; 'Barbershop');			add: (#BoatStorage &lt;&lt; #librarydemo &gt;&gt; 'Boat Storage');			add: (#Cannery &lt;&lt; #librarydemo &gt;&gt; 'Cannery');			add: (#Chandlery &lt;&lt; #librarydemo &gt;&gt; 'Chandlery');			add: (#Chartering &lt;&lt; #librarydemo &gt;&gt; 'Chartering');			add: (#Clothiers &lt;&lt; #librarydemo &gt;&gt; 'Clothiers');			add: (#Cordage &lt;&lt; #librarydemo &gt;&gt; 'Cordage');			add: (#GeneralContracting &lt;&lt; #librarydemo &gt;&gt; 'General Contracting');			add: (#GeneralStore &lt;&lt; #librarydemo &gt;&gt; 'General Store');			add: (#Hotel &lt;&lt; #librarydemo &gt;&gt; 'Hotel');			add: (#KayakAndCanoe &lt;&lt; #librarydemo &gt;&gt; 'Kayak and Canoe');			add: (#LoftingServices &lt;&lt; #librarydemo &gt;&gt; 'Lofting Services');			add: (#Marina &lt;&lt; #librarydemo &gt;&gt; 'Marina');			add: (#MarineElectronics &lt;&lt; #librarydemo &gt;&gt; 'Marine Electronics');			add: (#MarineSalvage &lt;&lt; #librarydemo &gt;&gt; 'Marine Salvage');			add: (#MarineSurvey &lt;&lt; #librarydemo &gt;&gt; 'Marine Survey');			add: (#NavalArchitecture &lt;&lt; #librarydemo &gt;&gt; 'Naval Architecture');			add: (#NavigationSupply &lt;&lt; #librarydemo &gt;&gt; 'Navigation Supply');			add: (#PaperMill &lt;&lt; #librarydemo &gt;&gt; 'Paper Mill');			add: (#PilotService &lt;&lt; #librarydemo &gt;&gt; 'Pilot Service');			add: (#Restaurant &lt;&lt; #librarydemo &gt;&gt; 'Restaurant');			add: (#RiggingSupply &lt;&lt; #librarydemo &gt;&gt; 'Rigging Supply');			add: (#RopeWalk &lt;&lt; #librarydemo &gt;&gt; 'Rope Walk');			add: (#Sailmakers &lt;&lt; #librarydemo &gt;&gt; 'Sailmakers');			add: (#ShipBuilding &lt;&lt; #librarydemo &gt;&gt; 'Ship Building');			add: (#SportFishing &lt;&lt; #librarydemo &gt;&gt; 'Sport Fishing');			add: (#Supermarket &lt;&lt; #librarydemo &gt;&gt; 'Supermarket');			add: (#VacationRental &lt;&lt; #librarydemo &gt;&gt; 'Vacation Rental');			add: (#Victuallers &lt;&lt; #librarydemo &gt;&gt; 'Victuallers');			asArray)</body></methods><methods><class-id>Protocols.Library.OrganizationName class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomOrganizationType	^( organizationTypes at: ( self randomPositiveIntegerWithMax: ( organizationTypes size ) ) ) asString</body></methods><methods><class-id>Protocols.Library.PhysicalAddress</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">city	^city</body><body package="Protocols-LibraryDemo">city: aString	city := aString</body><body package="Protocols-LibraryDemo">country	^country</body><body package="Protocols-LibraryDemo">country: aSymbol	country := aSymbol</body><body package="Protocols-LibraryDemo">postalCode	^postalCode</body><body package="Protocols-LibraryDemo">postalCode: aString	postalCode := aString</body><body package="Protocols-LibraryDemo">stateOrProvince	^stateOrProvince</body><body package="Protocols-LibraryDemo">stateOrProvince: aSymbol	stateOrProvince := aSymbol</body><body package="Protocols-LibraryDemo">streetAddress1	^streetAddress1</body><body package="Protocols-LibraryDemo">streetAddress1: aString	streetAddress1 := aString</body><body package="Protocols-LibraryDemo">streetAddress2	^streetAddress2</body><body package="Protocols-LibraryDemo">streetAddress2: aString	streetAddress2 := aString</body></methods><methods><class-id>Protocols.Library.PhysicalAddress</class-id> <category>printing</category><body package="Protocols-LibraryDemo">printOn: stream	streetAddress1 ifNotNil: [ stream nextPutAll: streetAddress1; nextPutAll: ', ' ].	streetAddress2 ifNotNil: [ stream nextPutAll: streetAddress2; nextPutAll: ', ' ].	city ifNotNil: [ stream nextPutAll: city; nextPutAll: ', ' ].	stateOrProvince ifNotNil: [ stream nextPutAll: stateOrProvince; nextPutAll: ', ' ].	postalCode ifNotNil: [ stream nextPutAll: postalCode; nextPutAll: ', ' ].	country ifNotNil: [ stream nextPutAll: country; nextPutAll: ', ' ].</body></methods><methods><class-id>Protocols.Library.PhysicalAddress class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomStreetAddress1	| siz ndx str |	siz := address1StreetNames size.	ndx := 1 + ( self randomIntegerLessThan: siz ).	str := WriteStream on: ( String new: 16 ). 	str		nextPutAll: ( 1 + ( self randomIntegerLessThan: 103 ) ) printString;		nextPut: Character space;		nextPutAll: ( address1StreetNames at: ndx ) asString;		nextPut: Character space;		nextPutAll: (#Road &lt;&lt; #librarydemo &gt;&gt; 'Road') asString.	^str contents</body><body package="Protocols-LibraryDemo">randomStreetAddress2	| str bool |		str := WriteStream on: ( String new: 16 ).	bool := ( self randomIntegerLessThan: 3 ) == 2.	bool		ifTrue:	[	| siz ndx |					siz := address2Descriptions size.					ndx := 1 + ( self randomIntegerLessThan: siz ).					str						nextPutAll: ( address2Descriptions at: ndx ) asString;						nextPut: Character space;						nextPutAll: ( 1 + ( self randomIntegerLessThan: 73 ) ) printString				].	^str contents</body></methods><methods><class-id>Protocols.Library.PhysicalAddress class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDDataPhysicalAddress initialize )))"	self initializeAddress1StreetNames.	self initializeAddress2Descriptions.</body><body package="Protocols-LibraryDemo">initializeAddress1StreetNames	| oc |	oc := ( OrderedCollection new )			add: (#Admiralty &lt;&lt; #librarydemo &gt;&gt; 'Admiralty');			add: (#Alfa &lt;&lt; #librarydemo &gt;&gt; 'Alfa');			add: (#Artemon &lt;&lt; #librarydemo &gt;&gt; 'Artemon');			add: (#BarcaLonga &lt;&lt; #librarydemo &gt;&gt; 'Barca Longa');			add: (#Binnacle &lt;&lt; #librarydemo &gt;&gt; 'Binnacle');			add: (#Bravo &lt;&lt; #librarydemo &gt;&gt; 'Bravo');			add: (#Caravel &lt;&lt; #librarydemo &gt;&gt; 'Caravel');			add: (#Carling &lt;&lt; #librarydemo &gt;&gt; 'Carling');			add: (#Carrack &lt;&lt; #librarydemo &gt;&gt; 'Carrack');			add: (#Caisson &lt;&lt; #librarydemo &gt;&gt; 'Caisson');			add: (#Catharpings &lt;&lt; #librarydemo &gt;&gt; 'Catharpings');			add: (#Charlie &lt;&lt; #librarydemo &gt;&gt; 'Charlie');			add: (#Chubasco &lt;&lt; #librarydemo &gt;&gt; 'Chubasco');			add: (#Culverin &lt;&lt; #librarydemo &gt;&gt; 'Culverin');			add: (#Davit &lt;&lt; #librarydemo &gt;&gt; 'Davit');			add: (#Diaphone &lt;&lt; #librarydemo &gt;&gt; 'Diaphone');			add: (#Delta &lt;&lt; #librarydemo &gt;&gt; 'Delta');			add: (#Echo &lt;&lt; #librarydemo &gt;&gt; 'Echo');			add: (#Ecliptic &lt;&lt; #librarydemo &gt;&gt; 'Ecliptic');			add: (#Equinoctial &lt;&lt; #librarydemo &gt;&gt; 'Equinoctial');			add: (#Esnecca &lt;&lt; #librarydemo &gt;&gt; 'Esnecca');			add: (#Fairlead &lt;&lt; #librarydemo &gt;&gt; 'Fairlead');			add: (#Flotsam &lt;&lt; #librarydemo &gt;&gt; 'Flotsam');			add: (#Foxtrot &lt;&lt; #librarydemo &gt;&gt; 'Foxtrot');			add: (#Gaiassa &lt;&lt; #librarydemo &gt;&gt; 'Gaiassa');			add: (#Golf &lt;&lt; #librarydemo &gt;&gt; 'Golf');			add: (#Gregale &lt;&lt; #librarydemo &gt;&gt; 'Gregale');			add: (#Hailshot &lt;&lt; #librarydemo &gt;&gt; 'Hailshot');			add: (#Hank &lt;&lt; #librarydemo &gt;&gt; 'Hank');			add: (#Hawser &lt;&lt; #librarydemo &gt;&gt; 'Hawser');			add: (#Hotel &lt;&lt; #librarydemo &gt;&gt; 'Hotel');			add: (#Idlers &lt;&lt; #librarydemo &gt;&gt; 'Idlers');			add: (#India &lt;&lt; #librarydemo &gt;&gt; 'India');			add: (#Jackstay &lt;&lt; #librarydemo &gt;&gt; 'Jackstay');			add: (#Jiggers &lt;&lt; #librarydemo &gt;&gt; 'Jiggers');			add: (#Juliett &lt;&lt; #librarydemo &gt;&gt; 'Juliett');			add: (#Kauskip &lt;&lt; #librarydemo &gt;&gt; 'Kauskip');			add: (#Killick &lt;&lt; #librarydemo &gt;&gt; 'Killick');			add: (#Kilo &lt;&lt; #librarydemo &gt;&gt; 'Kilo');			add: (#Lagan &lt;&lt; #librarydemo &gt;&gt; 'Lagan');			add: (#Lazaretto &lt;&lt; #librarydemo &gt;&gt; 'Lazaretto');			add: (#Lima &lt;&lt; #librarydemo &gt;&gt; 'Lima');			add: (#Manila &lt;&lt; #librarydemo &gt;&gt; 'Manila');			add: (#Mike &lt;&lt; #librarydemo &gt;&gt; 'Mike');			add: (#Mitre &lt;&lt; #librarydemo &gt;&gt; 'Mitre');			add: (#Neap &lt;&lt; #librarydemo &gt;&gt; 'Neap');			add: (#Nettle &lt;&lt; #librarydemo &gt;&gt; 'Nettle');			add: (#Nipper &lt;&lt; #librarydemo &gt;&gt; 'Nipper');			add: (#November &lt;&lt; #librarydemo &gt;&gt; 'November');			add: (#Offing &lt;&lt; #librarydemo &gt;&gt; 'Offing');			add: (#Oscar &lt;&lt; #librarydemo &gt;&gt; 'Oscar');			add: (#Otter &lt;&lt; #librarydemo &gt;&gt; 'Otter');			add: (#Pirogue &lt;&lt; #librarydemo &gt;&gt; 'Pirogue');			add: (#Proa &lt;&lt; #librarydemo &gt;&gt; 'Proa');			add: (#Quadrant &lt;&lt; #librarydemo &gt;&gt; 'Quadrant');			add: (#Quay &lt;&lt; #librarydemo &gt;&gt; 'Quay');			add: (#Quebec &lt;&lt; #librarydemo &gt;&gt; 'Quebec');			add: (#Ribband &lt;&lt; #librarydemo &gt;&gt; 'Ribband');			add: (#Ringtail &lt;&lt; #librarydemo &gt;&gt; 'Ringtail');			add: (#Romeo &lt;&lt; #librarydemo &gt;&gt; 'Romeo');			add: (#Scantlings &lt;&lt; #librarydemo &gt;&gt; 'Scantlings');			add: (#Sextant &lt;&lt; #librarydemo &gt;&gt; 'Sextant');			add: (#Sierra &lt;&lt; #librarydemo &gt;&gt; 'Sierra');			add: (#Sirocco &lt;&lt; #librarydemo &gt;&gt; 'Sirocco');			add: (#Swivel &lt;&lt; #librarydemo &gt;&gt; 'Swivel');			add: (#Tango &lt;&lt; #librarydemo &gt;&gt; 'Tango');			add: (#Thrum &lt;&lt; #librarydemo &gt;&gt; 'Thrum');			add: (#Timoneer &lt;&lt; #librarydemo &gt;&gt; 'Timoneer');			add: (#Ullage &lt;&lt; #librarydemo &gt;&gt; 'Ullage');			add: (#Uniform &lt;&lt; #librarydemo &gt;&gt; 'Uniform');			add: (#Uphroe &lt;&lt; #librarydemo &gt;&gt; 'Uphroe');			add: (#Vakka &lt;&lt; #librarydemo &gt;&gt; 'Vakka');			add: (#Victor &lt;&lt; #librarydemo &gt;&gt; 'Victor');			add: (#Victualler &lt;&lt; #librarydemo &gt;&gt; 'Victualler');			add: (#Whaleboat &lt;&lt; #librarydemo &gt;&gt; 'Whaleboat');			add: (#Wheelhouse &lt;&lt; #librarydemo &gt;&gt; 'Wheelhouse');			add: (#Whiskey &lt;&lt; #librarydemo &gt;&gt; 'Whiskey');			add: (#Xebec &lt;&lt; #librarydemo &gt;&gt; 'Xebec');			add: (#Yankee &lt;&lt; #librarydemo &gt;&gt; 'Yankee');			add: (#Yawl &lt;&lt; #librarydemo &gt;&gt; 'Yawl');			add: (#Yuloh &lt;&lt; #librarydemo &gt;&gt; 'Yuloh');			add: (#Zenith &lt;&lt; #librarydemo &gt;&gt; 'Zenith');			add: (#Zulu &lt;&lt; #librarydemo &gt;&gt; 'Zulu');			yourself.	address1StreetNames := oc asArray</body><body package="Protocols-LibraryDemo">initializeAddress2Descriptions	| oc |	oc := OrderedCollection new.	oc addAll:	(Array 					with: (#Building &lt;&lt; #librarydemo &gt;&gt; 'Building')					with: (#Unit &lt;&lt; #librarydemo &gt;&gt; 'Unit')					with: (#RuralRoute &lt;&lt; #librarydemo &gt;&gt; 'Rural Route')).	address2Descriptions := oc asArray</body></methods><methods><class-id>Protocols.Library.PhysicalAddress class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">randomLDDataPhysicalAddress"	self randomLDDataPhysicalAddress"	^self		streetAddress1: self randomStreetAddress1		streetAddress2: self randomStreetAddress2		city: (#PortNowhere &lt;&lt; #librarydemo &gt;&gt; 'Port Nowhere') asString		stateOrProvince: (#California &lt;&lt; #librarydemo &gt;&gt; 'California') asString asSymbol		postalCode: '99999'		country: (#USA &lt;&lt; #librarydemo &gt;&gt; 'United States of America') asString asSymbol</body><body package="Protocols-LibraryDemo">streetAddress1: aString1 streetAddress2: aString2 city: aString3 stateOrProvince: aString4 postalCode: aString5 country: aString6	^( self new )		streetAddress1: aString1;		streetAddress2: aString2;		city: aString3;		stateOrProvince: aString4;		postalCode: aString5;		country: aString6;		yourself</body></methods><methods><class-id>Protocols.Library.Library</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">affiliatedLibraries	^affiliatedLibraries</body><body package="Protocols-LibraryDemo">affiliatedLibraries: anIdentitySet	affiliatedLibraries := anIdentitySet</body><body package="Protocols-LibraryDemo">libraryId	^libraryId</body><body package="Protocols-LibraryDemo">libraryId: aSymbol	libraryId := aSymbol</body><body package="Protocols-LibraryDemo">libraryName	^libraryName</body><body package="Protocols-LibraryDemo">libraryName: aString	libraryName := aString.	emailAddresses := self emailAddresses</body><body package="Protocols-LibraryDemo">loanedHoldings	^loanedHoldings</body><body package="Protocols-LibraryDemo">loanedHoldings: aCollection	loanedHoldings := aCollection</body><body package="Protocols-LibraryDemo">ownedHoldings	^ownedHoldings</body><body package="Protocols-LibraryDemo">ownedHoldings: aDictionary	ownedHoldings := aDictionary</body><body package="Protocols-LibraryDemo">patrons	^patrons</body><body package="Protocols-LibraryDemo">patrons: aCollection	patrons := aCollection</body><body package="Protocols-LibraryDemo">reservedHoldings	^reservedHoldings</body><body package="Protocols-LibraryDemo">reservedHoldings: aSet	reservedHoldings := aSet</body><body package="Protocols-LibraryDemo">services	^services</body><body package="Protocols-LibraryDemo">services: anIdentityDictionary	^services := anIdentityDictionary</body></methods><methods><class-id>Protocols.Library.Library</class-id> <category>public api</category><body package="Protocols-LibraryDemo">randomAffiliatedLibraryExistingAuthorialLastName	| als al |	als := affiliatedLibraries asOrderedCollection.	al := als at: ( self class randomPositiveIntegerWithMax: als size ).	^al randomExistingAuthorialLastName</body><body package="Protocols-LibraryDemo">randomAffiliatedLibraryExistingSearchTitle	| als al |	als := affiliatedLibraries asOrderedCollection.	al := als at: ( self class randomPositiveIntegerWithMax: als size ).	^al randomExistingSearchTitle</body><body package="Protocols-LibraryDemo">randomExistingAuthorialLastName	| hs ns |	hs := self ownedHoldings values asOrderedCollection.	ns := ( hs at: ( self class randomPositiveIntegerWithMax: hs size ) ) 			searchAuthorialLastNames asArray.	^ ns at: ( self class randomPositiveIntegerWithMax: ns size )</body><body package="Protocols-LibraryDemo">randomExistingPatronId	| ps |	ps := self patrons asOrderedCollection.	^( ps at: ( self class randomPositiveIntegerWithMax: ps size ) ) patronId</body><body package="Protocols-LibraryDemo">randomExistingSearchTitle	| hs |	hs := self ownedHoldings values asOrderedCollection.	^( hs at: ( self class randomPositiveIntegerWithMax: hs size ) ) searchTitles asOrderedCollection first</body><body package="Protocols-LibraryDemo">searchHoldingsOnAspect: aSymbol withMatchString: aString	| rs |	rs := Set new.	ownedHoldings associationsDo:			[ :assoc | ( assoc value perform: aSymbol ) do:							[ :item |	( aString match: item )										ifTrue: [ rs add: assoc ]							]			].	^rs</body><body package="Protocols-LibraryDemo">serviceById: aSymbol	^services at: aSymbol</body></methods><methods><class-id>Protocols.Library.Library</class-id> <category>private</category><body package="Protocols-LibraryDemo">addLDHolding: aLDHolding	"... adds a holding without adding a transaction or affecting the library account balance."	aLDHolding libraryName: libraryName.	ownedHoldings add: ( aLDHolding acquisitionNumber ) -&gt; aLDHolding</body><body package="Protocols-LibraryDemo">addService: aLDSrvc	aLDSrvc library: self.	self 		registerService: aLDSrvc		id: aLDSrvc serviceId</body><body package="Protocols-LibraryDemo">patronById: aLDAgentPatron_patronId	^patrons 		detect: [ :x | x patronId == aLDAgentPatron_patronId ] 		ifNone: [ PatronNotFound raiseErrorString: ((#Patron1sNotFound &lt;&lt; #librarydemo &gt;&gt; 'Patron &lt;1s&gt; not found.')			expandMacrosWith: aLDAgentPatron_patronId) ]</body><body package="Protocols-LibraryDemo">registerService: aLDLibraryService id: aSymbol	services at: aSymbol put: aLDLibraryService</body></methods><methods><class-id>Protocols.Library.Library</class-id> <category>utility</category><body package="Protocols-LibraryDemo">emailAddresses	| oc |	oc := OrderedCollection new.	self class libraryDepartments do:		[ :ld |	| x y z |				x := libraryName, ', ', ld asString.				y := ( x select: [ :c | c isUppercase ] ) asLowercase.				z := ((#x1sportnowherenet &lt;&lt; #librarydemo &gt;&gt; '&lt;1s&gt;@portnowhere.net')			expandMacrosWith: y).				oc add: ( EmailAddress							address: z							description: ld asString )		].	^ oc asArray</body></methods><methods><class-id>Protocols.Library.Library</class-id> <category>printing</category><body package="Protocols-LibraryDemo">printOn: aStream	aStream		nextPut: $(;		nextPutAll: self class name;		nextPutAll: ': ';		nextPutAll: self libraryName;		nextPut: $)</body></methods><methods><class-id>Protocols.Library.Library</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.	telephoneNumbers := TelephoneNumber randomOrganizationalLDDataTelephoneNumbers.	affiliatedLibraries := Set new.	libraryId := self class newLibraryId.	"libraryName := nil."	loanedHoldings := OrderedCollection new.	ownedHoldings := Dictionary new.	patrons := SortedCollection sortBlock: Patron patronIdSortBlock.	"requestBroker := nil."	reservedHoldings := IdentitySet new.	services := IdentityDictionary new</body></methods><methods><class-id>Protocols.Library.Library class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDAgentLibrary initialize )))"	self initializeLibraryDepartments</body><body package="Protocols-LibraryDemo">initializeLibraryDepartments	LibraryDepartments :=		( Array 			with: (#Director &lt;&lt; #librarydemo &gt;&gt; 'Director')			with: (#Cataloging &lt;&lt; #librarydemo &gt;&gt; 'Cataloging')			with: (#InformationDesk &lt;&lt; #librarydemo &gt;&gt; 'Information Desk')			with: (#ShippingAndReceiving &lt;&lt; #librarydemo &gt;&gt; 'Shipping and Receiving'))</body></methods><methods><class-id>Protocols.Library.Library class</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">libraryDepartments	^LibraryDepartments</body></methods><methods><class-id>Protocols.Library.Library class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">newLibraryId	^( 'L-', super newAgentId ) asSymbol</body></methods><methods><class-id>Protocols.Library.Library class</class-id> <category>ADvance</category><body package="Protocols-LibraryDemo">ad2diagram_Library	^#(#{ICC.ADvance.AD2DiagramSpec} 		#name: 'Library' 		#creationDateSeconds: 3334311807 		#modificationDateSeconds: 3334313356 		#author: 		#(#{ICC.ADvance.AD2Identity} 			#nickName: '' 			#name: '' 			#company: '' ) 		#state: 		#(#{ICC.ADvance.AD2DiagramState} 			#bits: 15 			#zoom: '85%' 			#translation: #(#{Core.Point} -60 300 ) 			#scriptDepth: 3 			#associationDepth: 2 ) 		#filter: 		#(#{ICC.ADvance.AD2StructureFilter} 			#bits: 77 			#filteredInstProtocols: #('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' 'resources' ) 			#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 			#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' 'resources' 'signal*' ) 			#filteredClassMethods: #('initialize' 'new' ) 			#filteredInstVars: #() 			#filteredClassInstVars: #() 			#filteredSharedVars: #() ) 		#classes: #(#(#{Protocols.Library.TelephoneNumber} 7288 295 0 ) #(#{Protocols.Library.AgentTransaction} 160 314 0 ) #(#{Protocols.Library.RetireAffiliatedLibrary} -8 426 0 ) 			#(#{Protocols.Library.ShipPlan} 4944 678 0 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.AuthorialName} 						#attribute: 'architects' ) ) ) #(#{Protocols.Library.AuthorialName} 248 1088 0 ) #(#{Protocols.Library.ReturnHolding} 1992 426 0 ) #(#{Protocols.Library.Person} 368 112 1 ) #(#{Protocols.Library.ServiceCharge} 2816 426 0 ) #(#{Protocols.Library.CatalogNumber} 6464 295 0 ) #(#{Protocols.Library.BorrowHolding} 1016 426 0 ) #(#{Protocols.Library.RequestDueDateExtension} 1496 426 0 ) #(#{Protocols.Library.LibraryError} 8056 186 0 ) #(#{Protocols.Library.DigitalVideoDisc} 640 866 0 ) 			#(#{Protocols.Library.HoldingTransaction} 1056 130 0 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Holding} 						#attribute: 'holding' 						#layout1: #(0.0 1.0 ) 						#layout2: #(1.0 0.0269058 ) ) ) ) 			#(#{Protocols.Library.Recording} 5760 679 0 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.AuthorialName} 						#attribute: 'authors' ) ) ) 			#(#{Protocols.Library.Reservation} 88 1089 0 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.CatalogNumber} 						#attribute: 'holdingCatalogNumber' ) ) ) #(#{Protocols.Library.AcquireGrant} 2608 426 0 ) #(#{Protocols.Library.PublishService} 784 426 0 ) #(#{Protocols.Library.AnalogRecording} 1048 754 0 ) #(#{Protocols.Library.ServiceTransaction} 784 314 0 ) 			#(#{Protocols.Library.Book} 200 570 0 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.AuthorialName} 						#attribute: 'authors' ) ) ) #(#{Protocols.Library.HoldingNotCopiedByBindery} 8208 298 0 ) #(#{Protocols.Library.HoldingNotFound} 7928 298 0 ) #(#{Protocols.Library.DigitalRecording} 528 754 0 ) 			#(#{Protocols.Library.Patron} 472 -30 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.AbstractRandom} 						#attribute: 'patronName' ) ) ) #(#{Protocols.Library.PatronNotFound} 8512 298 0 ) #(#{Protocols.Library.Payment} 2432 426 0 ) #(#{Protocols.Library.CompactDisc} 5400 978 0 ) 			#(#{Protocols.Library.Holding} 856 -333 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.CatalogNumber} 						#attribute: 'catalogNumber' ) ) ) #(#{Protocols.Library.EmailAddress} -64 1089 0 ) #(#{Protocols.Library.FinancialTransaction} 280 290 0 ) 			#(#{Protocols.Library.Library} 856 -31 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Library} 						#attribute: 'affiliatedLibraries' 						#layout2: #(1.0 0.534513 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Holding} 						#attribute: 'loanedHoldings' 						#layout1: #(0.251938 0.0 ) 						#layout2: #(0.341584 1.0 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Holding} 						#attribute: 'ownedHoldings' 						#layout1: #(0.507752 0.0 ) 						#layout2: #(0.504951 1.0 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Patron} 						#attribute: 'patrons' 						#layout1: #(0.0 0.447917 ) 						#layout2: #(1.0 0.540984 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Holding} 						#attribute: 'reservedHoldings' 						#layout1: #(0.693798 0.0 ) 						#layout2: #(0.623762 1.0 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.LibraryService} 						#attribute: 'services' ) ) ) #(#{Protocols.Library.VideoTape} 6008 978 0 ) #(#{Protocols.Library.GeneralPublicService} 288 402 0 ) #(#{Protocols.Library.PersonName} 3528 298 0 ) #(#{Protocols.Library.RetireHolding} 1784 426 0 ) 			#(#{Protocols.Library.LoanedHolding} 184 434 0 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Reservation} 						#attribute: 'reservationList' ) ) ) #(#{Protocols.Library.WeatherForecastService} 4424 570 0 ) #(#{Protocols.Library.InformationService} 912 402 0 ) #(#{Protocols.Library.SearchService} 4040 458 0 ) #(#{Protocols.Library.PatronNotApprovedForService} 7600 298 0 ) #(#{Protocols.Library.CopyService} 4208 458 0 ) #(#{Protocols.Library.AcquireAffiliatedLibrary} 280 426 0 ) #(#{Protocols.Library.Organization} 568 113 1 ) #(#{Protocols.Library.AbstractRandom} 5280 186 0 ) #(#{Protocols.Library.RetainedHolding} -128 434 0 ) #(#{Protocols.Library.AudioTape} 5824 978 0 ) 			#(#{Protocols.Library.Agent} 472 -199 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Account} 						#attribute: 'account' 						#layout1: #(0.0 0.448718 ) 						#layout2: #(1.0 0.557377 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Holding} 						#attribute: 'borrowedHoldings' ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.EmailAddress} 						#attribute: 'emailAddresses' ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.PhysicalAddress} 						#attribute: 'physicalAddress' ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.TelephoneNumber} 						#attribute: 'telephoneNumbers' ) ) ) 			#(#{Protocols.Library.Account} 192 -198 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Transaction} 						#attribute: 'transactionHistory' ) ) ) #(#{Protocols.Library.Transaction} 192 -23 1 ) #(#{Protocols.Library.OrganizationName} 3272 297 0 ) #(#{Protocols.Library.PlaceReservation} 2216 426 0 ) #(#{Protocols.Library.AcquireHolding} 1240 426 0 ) #(#{Protocols.Library.PhysicalAddress} 4680 300 0 ) #(#{Protocols.Library.OverdueCharge} 3040 426 0 ) 			#(#{Protocols.Library.LibraryService} 856 191 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{Protocols.Library.Library} 						#attribute: 'library' ) ) ) #(#{Protocols.Library.AcquirePatron} 560 426 0 ) #(#{Protocols.Library.AdministrativeService} 288 514 0 ) #(#{Protocols.Library.PhonographRecord} 6216 978 0 ) #(#{Protocols.Library.RetirePatron} -240 426 0 ) ) )</body><body package="Protocols-LibraryDemo">advanceSubjectSpec	^#(#{ICC.ADvance.AD2Subject} #classNames: #('Protocols.Library.OverdueCharge' 'Protocols.Library.DigitalVideoDisk' 'Protocols.Library.ShipPlan' 'Protocols.Library.CopyRequest' 'Protocols.Library.AcquireGrant' 'Protocols.Library.Book' 'Protocols.Library.HoldingNotFound' 'Protocols.Library.Person' 'Protocols.Library.Patron' 'Protocols.Library.GeneralPublicService' 'Protocols.Library.WeatherForecast' 'Protocols.Library.Reservation' 'Protocols.Library.Search' 'Protocols.Library.PatronNotApprovedForService' 'Protocols.Library.Transaction' 'Protocols.Library.PhonographRecord' 'Protocols.Library.AcquirePatron' 'Protocols.Library.Payment' 'Protocols.Library.HoldingNotCopiedByBindery' 'Protocols.Library.AcquireAffiliatedLibrary' 'Protocols.Library.AgentTransaction' 'Protocols.Library.Library' 'Protocols.Library.PublishService' 'Protocols.Library.Account' 'Protocols.Library.RetireAffiliatedLibrary' 'Protocols.Library.HoldingTransaction' 'Protocols.Library.PlaceReservation' 'Protocols.Library.FinancialTransaction' 'Protocols.Library.PhysicalAddress' 'Protocols.Library.LibraryService' 'Protocols.Library.ReturnHolding' 'Protocols.Library.BorrowHolding' 'Protocols.Library.RetireHolding' 'Protocols.Library.LoanedHolding' 'Protocols.Library.DigitalRecording' 'Protocols.Library.ServiceTransaction' 'Protocols.Library.AnalogRecording' 'Protocols.Library.PatronNotFound' 'Protocols.Library.VideoTape' 'Protocols.Library.RetainedHolding' 'Protocols.Library.AudioTape' 'Protocols.Library.AuthorialName' 'Protocols.Library.Recording' 'Protocols.Library.Organization' 'Protocols.Library.RetirePatron' 'Protocols.Library.Agent' 'Protocols.Library.OrganizationName' 'Protocols.Library.EmailAddress' 'Protocols.Library.InformationService' 'Protocols.Library.CatalogNumber' 'Protocols.Library.LibraryError' 'Protocols.Library.AdministrativeService' 'Protocols.Library.TelephoneNumber' 'Protocols.Library.RequestDueDateExtension' 'Protocols.Library.CompactDisk' 'Protocols.Library.PersonName' 'Protocols.Library.AbstractRandom' 'Protocols.Library.AcquireHolding' 'Protocols.Library.ServiceCharge' 'Protocols.Library.Holding'))</body><body package="Protocols-LibraryDemo">markedAsSubjectClass</body></methods><methods><class-id>Protocols.Library.Library class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">PortNowhere	"Return an instance of the Port Nowhere &lt;Library&gt;"	"self PortNowhere"	| main affiliate |	main := self portNowherePublicLibrary.	affiliate := self portNowhereMaritimeMuseumLibraryAndShipPlanArchive.	main affiliatedLibraries add: affiliate.	^main</body><body package="Protocols-LibraryDemo">portNowhereMaritimeMuseumLibraryAndShipPlanArchive	"self portNowhereMaritimeMuseumLibraryAndShipPlanArchive"	| lib |	lib := (self new)				libraryName: (#PNMMLaSPA &lt;&lt; #librarydemo 							&gt;&gt; 'Port Nowhere Maritime Museum Library And Ship Plan Archive') asString;				yourself.	"... fake up an account balance."	lib account balance: lib account balance + 7000.	"... add some ship plans to the archive without touching the transaction record."	20 timesRepeat: 			[| sp |			sp := ShipPlan randomLDHoldingShipPlan.			lib addLDHolding: sp].	"... also add books on naval architecture without touching the transaction record."	10 timesRepeat: 			[| ab |			ab := Book randomArchiveLDHoldingBook.			lib addLDHolding: ab].	"... add some patrons to the archive without touching the transaction record."	20 timesRepeat: [lib patrons add: Patron randomLDPatron].	"... add services without touching the trsansaction record."	lib addService: SearchService new.	^lib</body><body package="Protocols-LibraryDemo">portNowherePublicLibrary	"self portNowherePublicLibrary"	| lib |	lib := (self new)				libraryName: (#PNPL &lt;&lt; #librarydemo &gt;&gt; 'Port Nowhere Public Library') 							asString;				yourself.	"... fake up an account balance."	lib account balance: lib account balance + 11000.	"... add books to the library without touching the transaction record."	20 timesRepeat: 			[| sp |			sp := Book randomLibraryLDHoldingBook.			lib addLDHolding: sp].	"... add some patrons to the library without touching the transaction record."	20 timesRepeat: [lib patrons add: Patron randomLDPatron].	"... add services."	lib		addService: WeatherForecastService new;		addService: SearchService new.	^lib</body></methods><methods><class-id>Protocols.Library.RequestDueDateExtension</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">newDueDate	^newDueDate</body><body package="Protocols-LibraryDemo">newDueDate: aDate	newDueDate := aDate</body></methods><methods><class-id>Protocols.Library.ShipPlan</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">architects	^architects</body><body package="Protocols-LibraryDemo">architects: anArray	^architects := anArray</body><body package="Protocols-LibraryDemo">numberOfSheets	^numberOfSheets</body><body package="Protocols-LibraryDemo">numberOfSheets: aSmallInteger	numberOfSheets := aSmallInteger</body><body package="Protocols-LibraryDemo">scale	^scale</body><body package="Protocols-LibraryDemo">scale: aFraction	scale := aFraction</body><body package="Protocols-LibraryDemo">sheetDimensions	^sheetDimensions</body><body package="Protocols-LibraryDemo">sheetDimensions: aPoint	sheetDimensions := aPoint</body><body package="Protocols-LibraryDemo">shipName	^shipName</body><body package="Protocols-LibraryDemo">shipName: aString	shipName := aString</body><body package="Protocols-LibraryDemo">yearDrawn	^yearDrawn</body><body package="Protocols-LibraryDemo">yearDrawn: aSmallInteger	yearDrawn := aSmallInteger</body></methods><methods><class-id>Protocols.Library.ShipPlan</class-id> <category>utility</category><body package="Protocols-LibraryDemo">availableForLDSrvcCopyRequest	^true</body><body package="Protocols-LibraryDemo">searchAuthorialLastNames	^( architects collect: [ :x | x name lastName ] ) asSet</body><body package="Protocols-LibraryDemo">searchTitles	^Set with: shipName</body></methods><methods><class-id>Protocols.Library.ShipPlan</class-id> <category>initialize-release</category><body package="Protocols-LibraryDemo">initialize	super initialize.	"architects := nil."	numberOfSheets := self class randomNumberOfSheets.	scale := self class randomScale.	sheetDimensions := self class randomSheetDimensions.	"shipName := nil."	yearDrawn := self class randomYearDrawn.</body></methods><methods><class-id>Protocols.Library.ShipPlan class</class-id> <category>class initialization</category><body package="Protocols-LibraryDemo">initialize	"((( LDHoldingShipPlan initialize )))"	self initializeShipNames</body><body package="Protocols-LibraryDemo">initializeShipNames	shipNames := 		(OrderedCollection new			add: (#Achates &lt;&lt; #librarydemo &gt;&gt; 'Achates');			add: (#Ailenroc &lt;&lt; #librarydemo &gt;&gt; 'Ailenroc');			add: (#Alarm &lt;&lt; #librarydemo &gt;&gt; 'Alarm');			add: (#AnneGallant &lt;&lt; #librarydemo &gt;&gt; 'Anne Gallant');			add: (#Arethusa &lt;&lt; #librarydemo &gt;&gt; 'Arethusa');			add: (#Astral &lt;&lt; #librarydemo &gt;&gt; 'Astral');			add: (#Barnswallow &lt;&lt; #librarydemo &gt;&gt; 'Barnswallow');			add: (#BlackBark &lt;&lt; #librarydemo &gt;&gt; 'Black Bark');			add: (#Bluefin &lt;&lt; #librarydemo &gt;&gt; 'Bluefin');			add: (#Bluejay &lt;&lt; #librarydemo &gt;&gt; 'Bluejay');			add: (#BlueWater &lt;&lt; #librarydemo &gt;&gt; 'Blue Water');			add: (#Bobcat &lt;&lt; #librarydemo &gt;&gt; 'Bobcat');			add: (#BonnieLassie &lt;&lt; #librarydemo &gt;&gt; 'Bonnie Lassie');			add: (#Cayuse &lt;&lt; #librarydemo &gt;&gt; 'Cayuse');			add: (#Christmas &lt;&lt; #librarydemo &gt;&gt; 'Christmas');			add: (#Congar &lt;&lt; #librarydemo &gt;&gt; 'Congar');			add: (#Diana &lt;&lt; #librarydemo &gt;&gt; 'Diana');			add: (#Dispatch &lt;&lt; #librarydemo &gt;&gt; 'Dispatch');			add: (#Dormouse &lt;&lt; #librarydemo &gt;&gt; 'Dormouse');			add: (#DueRepulse &lt;&lt; #librarydemo &gt;&gt; 'Due Repulse');			add: (#Enterprise &lt;&lt; #librarydemo &gt;&gt; 'Enterprise');			add: (#FalconInTheFetterlock &lt;&lt; #librarydemo &gt;&gt; 'Falcon in the Fetterlock');			add: (#Felisi &lt;&lt; #librarydemo &gt;&gt; 'Felisi');			add: (#Gadget &lt;&lt; #librarydemo &gt;&gt; 'Gadget');			add: (#Growler &lt;&lt; #librarydemo &gt;&gt; 'Growler');			add: (#Halcyon &lt;&lt; #librarydemo &gt;&gt; 'Halcyon');			add: (#Highlander &lt;&lt; #librarydemo &gt;&gt; 'Highlander');			add: (#Istalena &lt;&lt; #librarydemo &gt;&gt; 'Istalena');			add: (#Javelin &lt;&lt; #librarydemo &gt;&gt; 'Javelin');			add: (#Kingfisher &lt;&lt; #librarydemo &gt;&gt; 'Kingfisher');			add: (#Lagavulin &lt;&lt; #librarydemo &gt;&gt; 'Lagavulin');			add: (#LaVolatilla &lt;&lt; #librarydemo &gt;&gt; 'La Volatilla');			add: (#Lightning &lt;&lt; #librarydemo &gt;&gt; 'Lightning');			add: (#Lion &lt;&lt; #librarydemo &gt;&gt; 'Lion');			add: (#LiveYankee &lt;&lt; #librarydemo &gt;&gt; 'Live Yankee');			add: (#Lizard &lt;&lt; #librarydemo &gt;&gt; 'Lizard');			add: (#MadreDeDios &lt;&lt; #librarydemo &gt;&gt; 'Madre de Dios');			add: (#Mandalay &lt;&lt; #librarydemo &gt;&gt; 'Mandalay');			add: (#Marjelia &lt;&lt; #librarydemo &gt;&gt; 'Marjelia');			add: (#MaryRose &lt;&lt; #librarydemo &gt;&gt; 'Mary Rose');			add: (#Mitena &lt;&lt; #librarydemo &gt;&gt; 'Mitena');			add: (#Nautilus &lt;&lt; #librarydemo &gt;&gt; 'Nautilus');			add: (#Nimbus &lt;&lt; #librarydemo &gt;&gt; 'Nimbus');			add: (#Nina &lt;&lt; #librarydemo &gt;&gt; 'Nina');			add: (#Ninette &lt;&lt; #librarydemo &gt;&gt; 'Ninette');			add: (#NorEaster &lt;&lt; #librarydemo &gt;&gt; 'Nor''Easter');			add: (#Ophiucus &lt;&lt; #librarydemo &gt;&gt; 'Ophiucus');			add: (#Pawnee &lt;&lt; #librarydemo &gt;&gt; 'Pawnee');			add: (#Phalarope &lt;&lt; #librarydemo &gt;&gt; 'Phalarope');			add: (#Potemkin &lt;&lt; #librarydemo &gt;&gt; 'Potemkin');			add: (#Prestige &lt;&lt; #librarydemo &gt;&gt; 'Prestige');			add: (#Questa &lt;&lt; #librarydemo &gt;&gt; 'Questa');			add: (#Rainbow &lt;&lt; #librarydemo &gt;&gt; 'Rainbow');			add: (#Ranger &lt;&lt; #librarydemo &gt;&gt; 'Ranger');			add: (#Rawalpindi &lt;&lt; #librarydemo &gt;&gt; 'Rawalpindi');			add: (#Retriever &lt;&lt; #librarydemo &gt;&gt; 'Retriever');			add: (#RoaringForty &lt;&lt; #librarydemo &gt;&gt; 'Roaring Forty');			add: (#RoseGalley &lt;&lt; #librarydemo &gt;&gt; 'Rose Galley');			add: (#Rowdy &lt;&lt; #librarydemo &gt;&gt; 'Rowdy');			add: (#Rufina &lt;&lt; #librarydemo &gt;&gt; 'Rufina');			add: (#Siva &lt;&lt; #librarydemo &gt;&gt; 'Siva');			add: (#Tere &lt;&lt; #librarydemo &gt;&gt; 'Tere');			add: (#Ticonderoga &lt;&lt; #librarydemo &gt;&gt; 'Ticonderoga');			add: (#Tidbit &lt;&lt; #librarydemo &gt;&gt; 'Tidbit');			add: (#Tinavire &lt;&lt; #librarydemo &gt;&gt; 'Tinavire');			add: (#Tioga &lt;&lt; #librarydemo &gt;&gt; 'Tioga');			add: (#Tradition &lt;&lt; #librarydemo &gt;&gt; 'Tradition');			add: (#TregoRonnyger &lt;&lt; #librarydemo &gt;&gt; 'Trego Ronnyger');			add: (#Unicorn &lt;&lt; #librarydemo &gt;&gt; 'Unicorn');			add: (#Valcour &lt;&lt; #librarydemo &gt;&gt; 'Valcour');			add: (#Valiant &lt;&lt; #librarydemo &gt;&gt; 'Valiant');			add: (#Vieserre &lt;&lt; #librarydemo &gt;&gt; 'Vieserre');			add: (#Walrus &lt;&lt; #librarydemo &gt;&gt; 'Walrus');			add: (#Wasp &lt;&lt; #librarydemo &gt;&gt; 'Wasp');			add: (#Whirlwind &lt;&lt; #librarydemo &gt;&gt; 'Whirlwind');			add: (#Xanthippe &lt;&lt; #librarydemo &gt;&gt; 'Xanthippe');			add: (#Yankee &lt;&lt; #librarydemo &gt;&gt; 'Yankee');			add: (#Zanzibar &lt;&lt; #librarydemo &gt;&gt; 'Zanzibar');			asArray)</body></methods><methods><class-id>Protocols.Library.ShipPlan class</class-id> <category>utility</category><body package="Protocols-LibraryDemo">randomArchitects	| spread n a |	spread := #[ 0 1 1 1 1 1 1 1 2 2 2 3 3 ].	n := spread at: ( self randomPositiveIntegerWithMax: spread size ).	a := Array new: n.	1 to: n do:		[ :ndx |	a 					at: ndx					put: ( AuthorialName							authorialType: (#architect &lt;&lt; #librarydemo &gt;&gt; 'architect') asString asSymbol							name: ( PersonName randomLDDataPersonName ) )		].	^a</body><body package="Protocols-LibraryDemo">randomNumberOfSheets	^3 + ( self randomPositiveIntegerWithMax: 7 )</body><body package="Protocols-LibraryDemo">randomScale	"((( LDShipPlan randomScale )))"	^1 / ( 1 + ( self randomPositiveIntegerWithMax: 281 ) )</body><body package="Protocols-LibraryDemo">randomSheetDimensions	^	(11.0 +  ( self randomFloatLessThan: 41.0 ) ) 			@ 		( 29.0 + ( self randomFloatLessThan: 43.0 ) )</body><body package="Protocols-LibraryDemo">randomShipName	^( shipNames at: ( self randomPositiveIntegerWithMax: shipNames size ) ) asString</body><body package="Protocols-LibraryDemo">randomYearDrawn	| y d |	y := Date today year.	d := y - 1500.	^1500 + ( self randomIntegerLessThan: d )</body></methods><methods><class-id>Protocols.Library.ShipPlan class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">architects: anArray shipName: aString	^( self new )		architects: anArray;		shipName: aString;		yourself</body><body package="Protocols-LibraryDemo">randomLDHoldingShipPlan	"((( LDHoldingShipPlan randomLDHoldingShipPlan )))"	^( self		architects: self randomArchitects		shipName: self randomShipName )			collectionId: (#NavalArchitecture &lt;&lt; #librarydemo &gt;&gt; 'Naval Architecture') asString asSymbol</body></methods><methods><class-id>Protocols.Library.Reservation</class-id> <category>accessing</category><body package="Protocols-LibraryDemo">holdingCatalogNumber	^holdingCatalogNumber</body><body package="Protocols-LibraryDemo">holdingCatalogNumber: anLDCatalogNumber	holdingCatalogNumber := anLDCatalogNumber</body><body package="Protocols-LibraryDemo">patronId	^patronId</body><body package="Protocols-LibraryDemo">patronId: aSymbol	patronId := aSymbol</body><body package="Protocols-LibraryDemo">reservationType	^reservationType</body><body package="Protocols-LibraryDemo">reservationType: aSymbol	reservationType := aSymbol</body></methods><methods><class-id>Protocols.Library.Reservation class</class-id> <category>instance creation</category><body package="Protocols-LibraryDemo">holdingCatalogNumber: aLDCatalogNumber patronId: aSymbol1 reservationType: aSymbol2	^( self new )		holdingCatalogNumber: aLDCatalogNumber;		patronId: aSymbol1;		reservationType: aSymbol2;		yourself</body></methods><initialize><class-id>Protocols.Library.AbstractRandom</class-id></initialize><initialize><class-id>Protocols.Library.Holding</class-id></initialize><initialize><class-id>Protocols.Library.Transaction</class-id></initialize><initialize><class-id>Protocols.Library.WeatherForecastService</class-id></initialize><initialize><class-id>Protocols.Library.TelephoneNumber</class-id></initialize><initialize><class-id>Protocols.Library.Agent</class-id></initialize><initialize><class-id>Protocols.Library.Book</class-id></initialize><initialize><class-id>Protocols.Library.SearchService</class-id></initialize><initialize><class-id>Protocols.Library.CopyService</class-id></initialize><initialize><class-id>Protocols.Library.AuthorialName</class-id></initialize><initialize><class-id>Protocols.Library.Organization</class-id></initialize><initialize><class-id>Protocols.Library.CatalogNumber</class-id></initialize><initialize><class-id>Protocols.Library.GeneralPublicService</class-id></initialize><initialize><class-id>Protocols.Library.AdministrativeService</class-id></initialize><initialize><class-id>Protocols.Library.PersonName</class-id></initialize><initialize><class-id>Protocols.Library.OrganizationName</class-id></initialize><initialize><class-id>Protocols.Library.PhysicalAddress</class-id></initialize><initialize><class-id>Protocols.Library.Library</class-id></initialize><initialize><class-id>Protocols.Library.ShipPlan</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Error</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class></st-source>