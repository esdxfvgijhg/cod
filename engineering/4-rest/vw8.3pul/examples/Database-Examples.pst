<?xml version="1.0"?><st-source><!-- Name: Database-ExamplesNotice: Copyright 2007-2014 Cincom Systems, Inc.  All rights reserved.Comment: This package contains some example classes and a Workbook (GUI) of examples to illustrate use of the database EXDI API.When opened, the Workbook prompts for a database to use, tries to connect, and then presents a workspace window with variables for the current connection and session.UseTo open the Workbook, evaluate:	DatabaseWorkbook openRequestingDatabaseOr, in the Launcher window, select "Database Examples Workbook" from the Tools - > Database menu.DbIdentifier: bear73DbTrace: 427989DbUsername: smichaelDbVersion: 1.11DevelopmentPrerequisites: #(#(#package 'Database' ''))PackageName: Database-ExamplesParcel: #('Database-Examples')ParcelName: Database-ExamplesPrerequisiteParcels: #(#('Database' ''))PrintStringCache: (1.11,smichael)Version: 1.11Date: 5:06:47 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:47 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DatabaseWorkbook</name><environment>Smalltalk</environment><super>Tools.Workbook</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session connection profile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DatabaseExamplesUI</category><attributes><package>Database-Examples</package></attributes></class><comment><class-id>DatabaseWorkbook</class-id><body>DatabaseWorkbook is a clone of Alan Knight's Glorp Workbook examples, and illustrates EXDI layer database usage.Instance Variables:	connection	&lt;ExternalDatabaseConnection&gt;	EXDI connection to a database.	profile		&lt;ConnectionProfile&gt; 	Holds the username/password/environment/database vendor information.	session	&lt;ExternalDatabaseSession&gt;	EXDI session for the connection.</body></comment><class><name>BindTest</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cid cname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Examples</category><attributes><package>Database-Examples</package></attributes></class><comment><class-id>Database.BindTest</class-id><body>BindTest is an example class, to illustrate use of the VisualWorks EXDI.For details, see the Database Developer's Guide, located in the /doc subdirectory of the VisualWorks distribution.Instance Variables:	cid		&lt;Integer&gt;	ID for this instance	cname	&lt;String&gt;	Name of this instance</body></comment><class><name>PhoneListEntry</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name phone </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Examples</category><attributes><package>Database-Examples</package></attributes></class><comment><class-id>Database.PhoneListEntry</class-id><body>PhoneListEntry is an example class, to illustrate use of the VisualWorks EXDI.For details, see the Database Developer's Guide, located in the /doc subdirectory of the VisualWorks distribution.Instance Variables:	name	&lt;String&gt;			Name of person who owns this phone number	phone	&lt;PhoneNumber&gt;	Phone number</body></comment><methods><class-id>DatabaseWorkbook</class-id> <category>accessing</category><body package="Database-Examples">environment	^profile environment</body><body package="Database-Examples">password	^profile password</body><body package="Database-Examples">username	^profile username</body></methods><methods><class-id>DatabaseWorkbook</class-id> <category>private</category><body package="Database-Examples">noticeOfWindowClose: aWindow	self logout</body><body package="Database-Examples">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	connection ifNotNil: [self login]</body><body package="Database-Examples">preBuildWith: aBuilder	super preBuildWith: aBuilder.	self replaceAllTextPagesWith: self class examplesPage.</body><body package="Database-Examples">tracingCollector	"Return the stream object which will recieve the database tracing (logging)."	^Transcript</body><body package="Database-Examples">tracingLevel	"Return a number from 1 to 5, where 5 provides the most detailed trace level."	^5</body></methods><methods><class-id>DatabaseWorkbook</class-id> <category>actions</category><body package="Database-Examples">logging: aBoolean 	aBoolean 		ifTrue: [session traceLevel: self tracingLevel]		ifFalse: [session traceLevel: 0]</body><body package="Database-Examples">login	[connection isConnected ifFalse: [connection connect]] 		on: ConnectionException		do: [:ex | ex return: nil].	builder window label: (self class workbookLabel , ' (&lt;1s&gt; - &lt;2s&gt;/&lt;3s&gt;)' 				expandMacrosWith: connection username				with: connection class kind asString				with: connection environment)</body><body package="Database-Examples">logout	connection disconnect.	builder window label: (self class workbookLabel,  ' (&lt;1s&gt; - not connected)' expandMacrosWith: connection username)</body></methods><methods><class-id>DatabaseWorkbook</class-id> <category>aspects</category><body package="Database-Examples">isLoggedIn	^connection ifNil: [false] ifNotNil: [connection isConnected]</body><body package="Database-Examples">isLogging	^session traceLevel &gt; 0</body><body package="Database-Examples">isNotLoggedIn	^self isLoggedIn not</body></methods><methods><class-id>DatabaseWorkbook</class-id> <category>initialize-release</category><body package="Database-Examples">initialize	super initialize.	ExternalDatabaseConnection traceCollector 		ifNil: [ExternalDatabaseConnection traceCollector: self tracingCollector]</body><body package="Database-Examples">on: aConnectionProfile 	profile := aConnectionProfile.	connection := Database.ConnectionDialog connect: profile.	connection ifNil: [session := nil]		ifNotNil: 			[connection password: profile password.			session := connection getSession].	self addLocal: #connection value: connection.	self addLocal: #session value: session</body></methods><methods><class-id>DatabaseWorkbook class</class-id> <category>examples</category><body package="Database-Examples">exampleHeader	^'"The examples below illustrate how to use the database EXDI. You can evaluate them with Do it or modify them as you like."'.</body><body package="Database-Examples">examplesOneByOne	"Return a list of alternating comments and examples for the workspace. Do this so we can automatically emphasize the text to make them stand out."^#('"Show status of the connection"''connection isConnected.' '"Establish a connection with the database"''connection isConnected	ifFalse: [connection connect].''"Show the database environment string"''connection environment.''"Disconnect from the database"''connection disconnect.''"Create a table for use as an address book"''session prepare: ''CREATE TABLE contacts (fullname VARCHAR(25), address VARCHAR(25), city VARCHAR(25), state VARCHAR(2), zip VARCHAR(10), phone VARCHAR(14), cell VARCHAR(14), email VARCHAR(25), notes VARCHAR(254))''.session execute.[(ans := session answer) = #noMoreAnswers] whileFalse: 	[(ans = #noAnswerStream) ifFalse: 		[strm := ans upToEnd]].''"Populate the address book"''data := #( #(''Alice Jones'' ''25 Maple Street'' ''Brattleborough'' ''VT'' ''01234'' ''012 345 6789'' '''' ''ajones@www.com'' '''')#(''Jim Smith'' ''12 Geary St'' ''San Francisco'' ''CA'' ''94123'' ''567 890 1234'' '''' ''jsmith@www.com'' '''') ).session prepare: ''INSERT INTO contacts VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''.data do: [:contact| 	session bindInput: contact.	session execute.	[(ans := session answer) = #noMoreAnswers] whileFalse: 		[(ans = #noAnswerStream) ifFalse: 			[strm := ans upToEnd]]	].''"Count the number of records in the address book"''session prepare: ''SELECT COUNT(*) FROM contacts''.session execute.[(ans := session answer) = #noMoreAnswers] whileFalse: 	[(ans = #noAnswerStream) ifFalse: 		[strm := ans upToEnd]].strm first inspect''"Drop the table used by the address book"''session prepare: ''DROP TABLE contacts''.session execute.[(ans := session answer) = #noMoreAnswers] whileFalse: 	[(ans = #noAnswerStream) ifFalse: 		[strm := ans upToEnd]].''"Disconnect from the database"''connection disconnect.').</body><body package="Database-Examples">examplesPage	^WorkspacePage		labeled: self workbookLabel		on: (WorkspacePage cautiousAdaptorOn: self examplesText asValue).</body><body package="Database-Examples">examplesText	| text examples |	text := TextStream on: String new.	text nextPutAllText: self exampleHeader asText allBold.	text cr; cr.	examples := self examplesOneByOne.	1 to:  examples size by: 2 do: [:i |		text nextPutAllText: (examples at: i) asText allBold.		text cr.		text nextPutAllText: (examples at: i + 1).		text cr; cr].	^text contents.</body><body package="Database-Examples">workbookLabel	^'Database Examples'.</body></methods><methods><class-id>DatabaseWorkbook class</class-id> <category>instance creation</category><body package="Database-Examples">on: aConnectionProfile	^self new on: aConnectionProfile</body><body package="Database-Examples">openRequestingDatabase	| login workbook |	login := self requestDatabase.	login ifNotNil: 			[workbook := self on: login.			workbook isLoggedIn ifTrue: [workbook open]]</body><body package="Database-Examples">requestDatabase	| login defaultProfile |	defaultProfile := nil "Database.ConnectionProfile new".	login := Database.ConnectionDialog chooseProfileInitially: defaultProfile.	^login</body></methods><methods><class-id>Database.BindTest</class-id> <category>accessing</category><body package="Database-Examples">cid	"Answer the receiver's id"	^cid</body><body package="Database-Examples">cid: anInteger	cid := anInteger</body><body package="Database-Examples">cname	"Answer the receiver's name"	^cname</body><body package="Database-Examples">cname: aString	cname := aString</body></methods><methods><class-id>Database.BindTest class</class-id> <category>instance creation</category><body package="Database-Examples">cid: anInteger cname: aString	| anInstance |	anInstance := self new.	anInstance cid: anInteger.	anInstance cname: aString.	^anInstance</body></methods><methods><class-id>Database.PhoneListEntry</class-id> <category>accessing</category><body package="Database-Examples">name	"Answer the receiver's name"	^name</body><body package="Database-Examples">name: aString	"Set the receiver's name"	name := aString</body><body package="Database-Examples">phone	"Answer the receiver's phone number"	^phone</body><body package="Database-Examples">phone: aPhoneNumber	"Set the receiver's phone number"	phone := aPhoneNumber</body></methods><methods><class-id>Database.PhoneListEntry class</class-id> <category>instance creation</category><body package="Database-Examples">name: aString phone: aPhoneNumber	| anInstance |	anInstance := self new.	anInstance name: aString.	anInstance phone: aPhoneNumber.	^anInstance</body></methods><methods><class-id>DatabaseWorkbook</class-id> <category>menus</category><body package="Database-Examples">databaseSubmenu	&lt;submenu: #(#Database #menus 'Database')		nameKey: #databaseMenu		menu: #(#menuBar)		position: 10.03&gt;</body><body package="Database-Examples">menuLogin	&lt;menuItem: '&amp;Connect'		nameKey: #databaseLoginSelect		enablement: #isNotLoggedIn		indication: nil		menu: #(menuBar databaseMenu)		position: 30.40&gt;	self isLoggedIn ifFalse: [ self login ].</body><body package="Database-Examples">menuLogout	&lt;menuItem: '&amp;Disconnect'		nameKey: #databaseLogoutSelect		enablement: #isLoggedIn		indication: nil		menu: #(menuBar databaseMenu)		position: 30.40&gt;	self isLoggedIn ifTrue: [ self logout ].</body><body package="Database-Examples">toggleLogging	&lt;menuItem: 'Log SQL' 		nameKey: #sqlLoggingToggle 		enablement: nil 		indication: #isLogging 		menu: #(#menuBar #databaseMenu) 		position: 30.5&gt;	self logging: self isLogging not.	^self.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>db examples  menus</category><body package="Database-Examples">openDatabaseWorkbook	&lt;menuItem: 'Database Examples Workbook'		icon: nil		nameKey: nil		menu: #(#menuBar #tools #database)		position: 21.5&gt;	DatabaseWorkbook openRequestingDatabase.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Workbook</name><environment>Tools</environment><super>Tools.AbstractWorkspace</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pageHolder lastInstalledPage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Workspace</category><attributes><package>Tools-Workspace</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>