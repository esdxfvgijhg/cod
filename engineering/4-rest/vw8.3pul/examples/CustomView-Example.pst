<?xml version="1.0"?><st-source><!-- Name: CustomView-ExampleNotice: Copyright 2001-2017 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains CustomViewExample, which demonstrates the integration of a domain model (Sketch) with a custom view (SketchView) and a custom controller (SketchController). DbIdentifier: bear73DbTrace: 501891DbUsername: cgundelDbVersion: 8.3 - 1PackageName: CustomView-ExampleParcel: #('CustomView-Example')ParcelName: CustomView-ExamplePrintStringCache: (8.3 - 1,cgundel)Version: 8.3 - 1Date: 5:06:42 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:42 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Sketch</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name strokes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>CustomView-Example</package></attributes></class><comment><class-id>Examples.Sketch</class-id><body>This example class demonstrates the creation of a domain model.</body></comment><class><name>CustomViewExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sketches sketchView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>CustomView-Example</package></attributes></class><comment><class-id>Examples.CustomViewExample</class-id><body>This example class demonstrates the integration of a domain model (Sketch) with a custom view (SketchView) and a custom controller (SketchController). The controller is event-driven.</body></comment><class><name>SketchView</name><environment>Examples</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>CustomView-Example</package></attributes></class><comment><class-id>Examples.SketchView</class-id><body>This example class demonstrates the creation of a custom view that uses an event-driven controller.</body></comment><class><name>SketchController</name><environment>Examples</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>strokeInProgress </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>CustomView-Example</package></attributes></class><comment><class-id>Examples.SketchController</class-id><body>This example class demonstrates the creation of a custom event-driven controller. See SketchController1 for the polling version.</body></comment><methods><class-id>Examples.Sketch</class-id> <category>comparing</category><body package="CustomView-Example">= otherSketch 	"Answer whether the receiver and otherSketch are the same species,	the same size, and have the same name and the same elements."	| size |	self species == otherSketch species ifFalse: [^false].	self name == otherSketch name ifFalse: [^false].	(size := self size) = otherSketch size ifFalse: [^false].	1 to: size do: [:index |		(self at: index) = (otherSketch at: index) ifFalse: [^false]].	^true</body></methods><methods><class-id>Examples.Sketch</class-id> <category>adding</category><body package="CustomView-Example">add: aPoint	"Add aPoint to the current stroke."	self strokes last add: aPoint.	self changed: #stroke with: self currentLineSegment.</body></methods><methods><class-id>Examples.Sketch</class-id> <category>actions</category><body package="CustomView-Example">beginStroke	"Start a new stroke subcollection."	self strokes addLast: OrderedCollection new.</body><body package="CustomView-Example">erase	"Erase my contents."	self strokes removeAll: self strokes copy.	self changed: #erase with: nil.</body><body package="CustomView-Example">eraseAll	"Erase my contents."	self strokes removeAll: self strokes copy.	self changed: #erase with: nil.</body><body package="CustomView-Example">eraseLine	"Erase the last stroke that was drawn."	self strokes isEmpty 		ifFalse: [			self strokes removeLast.			self changed: #erase with: nil].</body></methods><methods><class-id>Examples.Sketch</class-id> <category>accessing</category><body package="CustomView-Example">currentLineSegment	"Answer a line between the last two points drawn.	The view responds to a new point by drawing this line."	| points start end sz |	points := self strokes last.	sz := points size.	end := points at: sz.	"If the current stroke contains only one point, use that	point as both start and end."	sz &gt; 1		ifTrue: [start := points at: (sz - 1)]		ifFalse: [start := end].	^LineSegment		from: start		to: end.</body><body package="CustomView-Example">name	^name</body><body package="CustomView-Example">name: aString	name := aString</body><body package="CustomView-Example">strokes	^strokes</body></methods><methods><class-id>Examples.Sketch</class-id> <category>displaying</category><body package="CustomView-Example">displayString	^self name</body></methods><methods><class-id>Examples.Sketch</class-id> <category>initialize-release</category><body package="CustomView-Example">initialize	strokes := OrderedCollection new.</body></methods><methods><class-id>Examples.Sketch class</class-id> <category>instance creation</category><body package="CustomView-Example">new	^super new initialize.</body></methods><methods><class-id>Examples.CustomViewExample</class-id> <category>actions</category><body package="CustomView-Example">add	"Prompt for a sketch name, then add it to the list."	| sketchName newSketch list |	sketchName := Dialog request: 'Add sketch named...'.	sketchName isEmpty ifTrue: [^nil].	newSketch := Sketch new name: sketchName.	list := self sketches list.	list add: newSketch.	self sketches list: list.	self sketches selectionIndex: list size.</body><body package="CustomView-Example">remove	"Remove the currently selected sketch from the list."	| list selectedSketch |	selectedSketch := self sketches selection.	"If no sketch is selected, do nothing."	selectedSketch isNil ifTrue: [^self].	list := self sketches list.	list remove: selectedSketch.	self sketches list: list.	self sketches selectionIndex: 0.</body></methods><methods><class-id>Examples.CustomViewExample</class-id> <category>change messages</category><body package="CustomView-Example">changedSketch	self sketchView model: self sketches selection.</body></methods><methods><class-id>Examples.CustomViewExample</class-id> <category>initialize-release</category><body package="CustomView-Example">initialize	sketches := SelectionInList with: OrderedCollection new.	sketches selectionIndexHolder onChangeSend: #changedSketch to: self.	sketchView := SketchView new.</body></methods><methods><class-id>Examples.CustomViewExample</class-id> <category>aspects</category><body package="CustomView-Example">sketchView	^sketchView</body><body package="CustomView-Example">sketches	^sketches</body></methods><methods><class-id>Examples.SketchView</class-id> <category>controller accessing</category><body package="CustomView-Example">defaultControllerClass	^SketchController</body></methods><methods><class-id>Examples.SketchView</class-id> <category>displaying</category><body package="CustomView-Example">displayOn: aGraphicsContext	self model isNil ifTrue: [^self].	self model strokes do: [ :stroke |		aGraphicsContext displayPolyline: stroke].</body></methods><methods><class-id>Examples.SketchView</class-id> <category>model accessing</category><body package="CustomView-Example">model: aModel	super model: aModel.	self invalidate.	"Tell the controller where to send menu messages."	self controller performer: aModel.</body></methods><methods><class-id>Examples.SketchView</class-id> <category>updating</category><body package="CustomView-Example">update: anAspect with: anObject	"When a point is added to the model..."	anAspect == #stroke		ifTrue: [anObject asStroker displayOn: self graphicsContext].	"When the model erases its contents..."	anAspect == #erase		ifTrue: [self invalidate].</body></methods><methods><class-id>Examples.SketchController</class-id> <category>event driven</category><body package="CustomView-Example">desiresFocus	^true</body><body package="CustomView-Example">handlerForMouseEvent: event	^((self viewHasCursorWithEvent: event)		and: [self model notNil])			ifTrue: [self]			ifFalse: [nil]</body></methods><methods><class-id>Examples.SketchController</class-id> <category>events</category><body package="CustomView-Example">enterEvent: anEnterEvent	"Request keyboard focus."	self keyboardProcessor requestActivationFor: self.</body><body package="CustomView-Example">exitEvent: anExitEvent	"Change the cursor shape back to normal.	Also end current stroke in case red button is still being pressed."	Cursor normal show.	self strokeInProgress: false.</body><body package="CustomView-Example">keyPressedEvent: aKeyPressedEvent	"Respond to the &lt;Space&gt; key."	| char |	self model == nil ifTrue: [^nil].	char := aKeyPressedEvent keyValue.	(char == Character space)		ifTrue: [aKeyPressedEvent hasShift				ifTrue: [self model eraseAll]				ifFalse: [self model eraseLine]].</body><body package="CustomView-Example">mouseMovedEvent: aMouseMovedEvent	"Set the cursor when moving in the SketchView.	Add a new point for every mouse movement when drawing is in progress."	Cursor crossHair show.	self strokeInProgress		ifTrue: [self model			add: (self sensor cursorPointFor: aMouseMovedEvent)]</body><body package="CustomView-Example">redButtonPressedEvent: aRedButtonPressedEvent	"Start drawing a new line when the &lt;Select&gt; button is pressed.	Keep showing the crosshair when pressed."	Cursor crossHair show.	self model beginStroke.	self strokeInProgress: true.		self model add: (self sensor cursorPointFor: aRedButtonPressedEvent)</body><body package="CustomView-Example">redButtonReleasedEvent: aRedButtonReleasedEvent	"Stop drawing when the &lt;Select&gt; button is released."	self strokeInProgress: false.</body></methods><methods><class-id>Examples.SketchController</class-id> <category>initialize-release</category><body package="CustomView-Example">initialize	super initialize.	strokeInProgress := false.</body><body package="CustomView-Example">initializeMenu	| mb |	"Build the menu."	mb := MenuBuilder new.	mb add: 'Erase line 	&lt;space&gt;' -&gt; #eraseLine.	mb add: 'Erase all 	&lt;Shift-space&gt;' -&gt; #eraseAll.	"Install the menu."	self menuHolder: mb menu asValue.</body><body package="CustomView-Example">release	"Upon release, change the cursor shape back to normal."	super release.	Cursor normal show.</body></methods><methods><class-id>Examples.SketchController</class-id> <category>accessing</category><body package="CustomView-Example">strokeInProgress	^strokeInProgress</body><body package="CustomView-Example">strokeInProgress: aBoolean	strokeInProgress := aBoolean</body></methods><methods><class-id>Examples.CustomViewExample class</class-id> <category>resources</category><body package="CustomView-Example">sketchListMenu	"UIMenuEditor new openOnClass: self andSelector: #sketchListMenu"	&lt;resource: #menu&gt;	^#(#Menu #(		#(#MenuItem #label: 'Add' ) 		#(#MenuItem #label: 'Remove' ) ) 		#(2 ) 		#(#add #remove ) ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.CustomViewExample class</class-id> <category>interface specs</category><body package="CustomView-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'CustomViewExample' 			#min: #(#{Core.Point} 378 209 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 891 593 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0.333333 10 0 -10 1 -10 1 ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 39 0 0 0.332454 -11 1 ) 					#flags: 15 					#model: #sketches 					#menu: #sketchListMenu ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0.333333 11 0 -11 1 -11 1 ) 					#flags: 0 					#component: #sketchView ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0.166667 3 0 0.5 0 ) 					#model: #add 					#label: 'Add sketch' ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ControllerWithMenu</name><environment>UI</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuHolder performer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>View</name><environment>UI</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>