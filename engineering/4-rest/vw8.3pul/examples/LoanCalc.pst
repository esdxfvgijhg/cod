<?xml version="1.0"?><st-source><!-- Name: LoanCalculator-ExampleNotice: Copyright 2002-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains the LoanCalculator class, which is an application model demonstrating the use of input fields and dependencies between itself and its domain model, Amortizer.DbIdentifier: bear73DbTrace: 427941DbUsername: smichaelDbVersion: 8.0 - 1PackageName: LoanCalculator-ExampleParcel: #('LoanCalculator-Example')ParcelName: LoanCalculator-ExamplePrintStringCache: (8.0 - 1,smichael)Version: 8.0 - 1Date: 5:06:43 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:43 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Amortizer</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reportValue loan rate sumInt sumAmort accumInt balance yearTable totalTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>LoanCalculator-Example</package></attributes></class><comment><class-id>Examples.Amortizer</class-id><body>Amortizer is used by LoanCalculator to generate a report detailing the repayment of a loan with interest.Instance Variables:	reportValue	&lt;ValueHolder with: String&gt;  Holds the report being generated	loan	&lt;LoanCalculator&gt;  The instance of LoanCalculator served by this instance of Amortizer	rate	&lt;Float&gt;  Interest rate for the calculation	sumInt	&lt;Float&gt;  Running sum of the interest paid during a year	sumAmort	&lt;Float&gt;  Running sum of the amortization during a year	accumInt	&lt;Float&gt;  Running sum of the amount paid in interest	balance	&lt;Float&gt;  Running balance remaining on the principal	yearTable	&lt;OrderedCollection of: Array&gt;  Holds a year worth of the report in structured form	totalTable	&lt;Array of: Array&gt;  Holds the annual summary portion of the report in structured form</body></comment><class><name>LoanCalculatorExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>calculator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>LoanCalculator-Example</package></attributes></class><comment><class-id>Examples.LoanCalculatorExample</class-id><body>LoanCalculatorExample is the user interface for a Loan Calculator.This example demonstrates the use of input fields, and a domain model to coordinate the values underlying the constituent widgets in a user interface.  The work of calculating and displaying the loan amortization is done by Amortizer, which uses a callback to the domain model to retrieve data required for the calculation.Instance Variables:	calculator	&lt;LoanCalculator&gt;	The object that does the real work and provides the actual models for the widgets in the interface</body></comment><class><name>LoanCalculator</name><environment>Examples</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>principal paymentsPerYear years regularPayment percent computePaymentP </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>LoanCalculator-Example</package></attributes></class><comment><class-id>Examples.LoanCalculator</class-id><body>LoanCalculator is a loan calculator model, used by LoanCalculatorExample.Instance Variables:	principal	&lt;ValueHolder with: Float&gt;  comment	paymentsPerYear	&lt;ValueHolder with: Integer&gt;  Twelve	years	&lt;ValueHolder with: Number&gt;  The term of the loan	regularPayment	&lt;ValueHolder with: Float&gt;  The payment amount	percent	&lt;ValueHolder with: Float&gt;  The interest rate on the loan	computePaymentP	&lt;ValueHolder with: Boolean&gt;  Whether or not to compute and display the payment amount</body></comment><methods><class-id>Examples.Amortizer</class-id> <category>private</category><body package="LoanCalculator-Example">amortize	totalTable := Array new: loan years value.	balance := loan principal value.	accumInt := 0.	rate := loan percent value asFloat / loan paymentsPerYear value / 100.	1 to: loan years value do: [:i | self computeYear: i]</body><body package="LoanCalculator-Example">computePeriod: period withPayment: pay	| interest amortized payment|	balance = 0 ifTrue: [^self].	balance &gt; pay		ifTrue: [payment := pay]		ifFalse: [payment :=  balance +( (rate*balance) roundTo: 0.01)].	interest := balance*rate roundTo: 0.01.	accumInt := accumInt + interest.	sumInt := sumInt + interest.	amortized := payment - interest.	sumAmort := sumAmort + amortized.	balance := balance - amortized.	yearTable add: (Array with: interest with: amortized with: balance with: accumInt)</body><body package="LoanCalculator-Example">computeYear: yearNumber	sumInt := sumAmort := 0.0.	yearTable := OrderedCollection new.	1 to: loan paymentsPerYear value do:		[:period |		 self computePeriod: period withPayment: loan payment value].	totalTable at: yearNumber put: (Array with: yearTable with: (Array with: sumInt with: sumAmort)).</body><body package="LoanCalculator-Example">report	| s year pm fmtString |	reportValue == nil ifTrue: [reportValue := String new asValue].	totalTable == nil ifTrue: [self amortize].	s := (String new: 1024) writeStream.	1 to: totalTable size do: 		[:y |		s cr.		s nextPutAll: (#NumberA &lt;&lt; #examples &gt;&gt; ' No.') asString.		s nextPutAll: (#InterestA &lt;&lt; #examples &gt;&gt; '   Interest') asString.		s nextPutAll: (#AmortizedA &lt;&lt; #examples &gt;&gt; '    Amortized') asString.		s nextPutAll: (#BalanceA &lt;&lt; #examples &gt;&gt; '   Balance') asString.		s nextPutAll: (#TotInterestA &lt;&lt; #examples &gt;&gt; '    Tot Interest') asString.		s cr.			fmtString := (#FmtStringA &lt;&lt; #examples &gt;&gt; '#########.##') asString.		year := (totalTable at: y) at: 1.		1 to: year size do:			[:p |			pm := year at: p.			s nextPutAll: (PrintConverter print: p formattedBy: '###').			s nextPutAll: (PrintConverter print: (pm at: 1) formattedBy: fmtString).			s nextPutAll: (PrintConverter print: (pm at: 2) formattedBy: fmtString).			s nextPutAll: (PrintConverter print: (pm at: 3) formattedBy: fmtString).			s nextPutAll: (PrintConverter print: (pm at: 4) formattedBy: fmtString).			s cr].		s cr.		s nextPutAll: (#YearA &lt;&lt; #examples &gt;&gt; 'yr.') asString.		year :=  (totalTable at: y) at: 2.		s nextPutAll: (PrintConverter print: y formattedBy: '##').		s nextPutAll: (PrintConverter print: (year at: 1) formattedBy: fmtString).		s nextPutAll: (PrintConverter print: (year at: 2) formattedBy: fmtString).		s cr; cr].	reportValue value: s contents.	totalTable := nil.</body></methods><methods><class-id>Examples.Amortizer</class-id> <category>initialize-release</category><body package="LoanCalculator-Example">loan: aLoan	loan := aLoan</body></methods><methods><class-id>Examples.Amortizer</class-id> <category>aspects</category><body package="LoanCalculator-Example">reportValue	^reportValue</body></methods><methods><class-id>Examples.LoanCalculatorExample</class-id> <category>binding</category><body package="LoanCalculator-Example">aspectFor: aKey	^calculator perform: aKey</body></methods><methods><class-id>Examples.LoanCalculatorExample</class-id> <category>initialize-release</category><body package="LoanCalculator-Example">calculator: aCalc	calculator := aCalc</body><body package="LoanCalculator-Example">initialize	calculator := LoanCalculator new</body></methods><methods><class-id>Examples.LoanCalculatorExample</class-id> <category>actions</category><body package="LoanCalculator-Example">doAmortize	(Amortizer new)		loan: calculator;		report;		open.</body><body package="LoanCalculator-Example">doComputePrincipal	calculator computePrincipal</body></methods><methods><class-id>Examples.LoanCalculator</class-id> <category>private</category><body package="LoanCalculator-Example">changedData	computePaymentP value		ifTrue: [self computePayment]</body><body package="LoanCalculator-Example">computePayment	| rate |	rate := percent value asFloat / paymentsPerYear value / 100.	^regularPayment value: (((principal value * rate) / (1.0 - (( rate+1) ** (paymentsPerYear value negated * years value)))) roundTo: 0.01).</body></methods><methods><class-id>Examples.LoanCalculator</class-id> <category>aspects</category><body package="LoanCalculator-Example">computePaymentP	^computePaymentP</body><body package="LoanCalculator-Example">payment	^regularPayment</body><body package="LoanCalculator-Example">paymentsPerYear	^paymentsPerYear</body><body package="LoanCalculator-Example">percent	^percent</body><body package="LoanCalculator-Example">principal	^principal</body><body package="LoanCalculator-Example">years	^years</body></methods><methods><class-id>Examples.LoanCalculator</class-id> <category>initialize-release</category><body package="LoanCalculator-Example">initialize	regularPayment := 0 asValue.	paymentsPerYear := 12 asValue.	percent := 8.2 asValue.	principal := 0 asValue.	years := 30 asValue.	computePaymentP := true asValue.	computePaymentP onChangeSend: #changedData to: self.	(Array with: principal with: percent with: years with: paymentsPerYear) do: [:v | v onChangeSend: #changedData to: self].</body></methods><methods><class-id>Examples.LoanCalculator</class-id> <category>actions</category><body package="LoanCalculator-Example">computePrincipal	| rate |	regularPayment isNil ifTrue: [^self].	rate := percent value asFloat / paymentsPerYear value / 100.	^principal value: (((regularPayment value / rate) * (1.0 - (1.0 / (( rate+1) ** (paymentsPerYear value * years value))))) roundTo: 0.01).</body></methods><methods><class-id>Examples.LoanCalculator class</class-id> <category>instance creation</category><body package="LoanCalculator-Example">new	"Create a new initialized LoanCalculator"	^super new initialize</body></methods><methods><class-id>Examples.Amortizer class</class-id> <category>interface specs</category><body package="LoanCalculator-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 50 50 ) 			#max: #(#Point 1152 900 ) 			#bounds: #(#Rectangle 338 407 975 766 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#TextEditorSpec 					#layout: #(#LayoutFrame 12 0 5 0 -12 1 -3 1 ) 					#model: #reportValue 					#style: #fixed ) ) ) )</body></methods><methods><class-id>Examples.LoanCalculatorExample class</class-id> <category>interface specs</category><body package="LoanCalculator-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 376 131 ) 			#max: #(#{Core.Point} 1152 900 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 888 515 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 16 14 ) 					#name: #lblPrincipal 					#label: 					#(#{Kernel.UserMessage} 						#key: #PrincipalC 						#defaultString: 'Principal:' 						#catalogID: #examples ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 263 13 ) 					#name: #lblRate 					#label: 					#(#{Kernel.UserMessage} 						#key: #RateC 						#defaultString: 'Rate:' 						#catalogID: #examples ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 31 99 ) 					#name: #lblPayment 					#label: 					#(#{Kernel.UserMessage} 						#key: #PaymentC 						#defaultString: 'Payment:' 						#catalogID: #examples ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 17 46 ) 					#name: #lblYears 					#label: 					#(#{Kernel.UserMessage} 						#key: #YearsC 						#defaultString: 'Years:' 						#catalogID: #examples ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 96 11 214 33 ) 					#name: #principal 					#model: #principal 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 305 12 368 35 ) 					#name: #percent 					#model: #percent 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 96 45 138 68 ) 					#name: #years 					#model: #years 					#numChars: 3 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 96 97 218 123 ) 					#name: #payment 					#model: #payment 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 216 9 244 35 ) 					#name: #btnComputePrincipal 					#model: #doComputePrincipal 					#tabable: false 					#label: '?' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 9 99 ) 					#name: #ckbComputePayment 					#model: #computePaymentP 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 270 97 336 126 ) 					#name: #btnAmortize 					#model: #doAmortize 					#tabable: false 					#label: 					#(#{Kernel.UserMessage} 						#key: #AmortizeC 						#defaultString: 'Amortize' 						#catalogID: #examples ) 					#isDefault: false ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>