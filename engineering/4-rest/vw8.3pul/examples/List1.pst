<?xml version="1.0"?><st-source><!-- Name: List1-ExampleNotice: Copyright 2001-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains List1Example, while demonstrates using a List widget to populate dependent Lists.DbIdentifier: bear73DbTrace: 427938DbUsername: smichaelDbVersion: 8.0 - 1PackageName: List1-ExampleParcel: #('List1-Example')ParcelName: List1-ExamplePrintStringCache: (8.0 - 1,smichael)Version: 8.0 - 1Date: 5:06:43 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:43 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AbstractListExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes methodNames instances </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>List1-Example</package></attributes></class><comment><class-id>Examples.AbstractListExample</class-id><body>To test the widgets, take a look at the class protocol: examples in each of the concrete subclasses.</body></comment><class><name>HierarchyListExample</name><environment>Examples</environment><super>Examples.AbstractListExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars>root </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>List1-Example</package></attributes></class><comment><class-id>Examples.HierarchyListExample</class-id><body>HierarchyListExample uses a HierarchicalList widget to populate dependent lists of all classes, methods, instances from the Core namespace.Instance Variables	root	&lt;AssociationTree&gt;	the hierarchy list root tree</body></comment><class><name>SimpleListExample</name><environment>Examples</environment><super>Examples.AbstractListExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>List1-Example</package></attributes></class><comment><class-id>Examples.SimpleListExample</class-id><body>SimpleListExample uses a List widget to populate dependent lists of all classes, methods, instances from the Core namespace.</body></comment><methods><class-id>Examples.AbstractListExample</class-id> <category>private</category><body package="List1-Example">updateInstancesList: selectedItem	"Update the instances list widget subject to the selected item in the classes widget."	self subclassResponsibility</body><body package="List1-Example">updateSelectorsList: selectedItem	"Update the selectors list widget subject to the selected item in the classes widget."	self subclassResponsibility</body></methods><methods><class-id>Examples.AbstractListExample</class-id> <category>aspects</category><body package="List1-Example">classes	^classes</body><body package="List1-Example">instances	^instances</body><body package="List1-Example">methodNames	^methodNames</body></methods><methods><class-id>Examples.AbstractListExample</class-id> <category>menu messages</category><body package="List1-Example">browse	"Open a method browser on the selected methods."	| chosenSelectors cls array |	chosenSelectors  := self methodNames selections.	cls := self classes selection.	"If no method names are selected, abort."	chosenSelectors isEmpty ifTrue: [^self].	"Convert the selector names to MethodDefinitions for the class ."	array := chosenSelectors collect: [:sel| MethodDefinition class: cls selector: sel].	"Open a browser on the methods."	MethodCollector new		openListBrowserOn: array		label: 'Selected methods in ', cls name		initialSelection: chosenSelectors first.</body><body package="List1-Example">clearAll	self methodNames clearAll.</body><body package="List1-Example">inspectInstance	"Open an inspector on the selected instance."	| inst |	inst := self instances selection.	inst isNil ifFalse: [inst inspect].</body><body package="List1-Example">selectAll	self methodNames selectAll.</body></methods><methods><class-id>Examples.AbstractListExample</class-id> <category>interface opening</category><body package="List1-Example">postOpenWith: aBuilder	super postOpenWith: aBuilder.	"Uncomment the line below to auto-select the first class."	self classes selectionIndex: 1.	"Uncomment the lines below to auto-select the last class."	"self classes selection: self classes list last.	(aBuilder componentAt: #classes) widget controller cursorPointWithScrolling."	"In the classes list, use boxed highlighting instead of reverse-video."	(aBuilder componentAt: #classes) widget strokedSelection.</body></methods><methods><class-id>Examples.AbstractListExample</class-id> <category>initialize-release</category><body package="List1-Example">initialize	super initialize.	self initializeClasses.	methodNames := MultiSelectionInList new.	instances := SelectionInList new</body><body package="List1-Example">initializeClasses	"Initialize the classes widget according to the requirements of the subcanvas spec."	^self subclassResponsibility</body></methods><methods><class-id>Examples.AbstractListExample</class-id> <category>change messages</category><body package="List1-Example">changedClass	| cls |	self classes selection isNil		ifTrue: 			["No class is selected -- empty the selector list."			self methodNames list: List new.			self instances list: List new]		ifFalse: 			["A class is selected"			cls := self classes selection.			self updateSelectorsList: cls.			self updateInstancesList: cls]</body></methods><methods><class-id>Examples.HierarchyListExample</class-id> <category>accessing</category><body package="List1-Example">exampleTitle	^'Hierarchy List Example'</body><body package="List1-Example">root	^root</body></methods><methods><class-id>Examples.HierarchyListExample</class-id> <category>private</category><body package="List1-Example">updateInstancesList: selectedItem	self instances list: (selectedItem value				ifNil: [List new]				ifNotNil: [selectedItem value allInstances])</body><body package="List1-Example">updateSelectorsList: selectedItem	self methodNames list: (selectedItem value				ifNil: [List new]				ifNotNil: [selectedItem value selectors asSortedCollection])</body></methods><methods><class-id>Examples.HierarchyListExample</class-id> <category>initialize-release</category><body package="List1-Example">initializeClasses	"Initialize the classes widget according to the requirements of the subcanvas spec."	root := ((ArtificialTreeItemHolder hierarchicallyArranged: Core allClasses				usingDirectRelation: [:a :b | a subclasses includes: b]) asAssociationTree				children select: [:node | node key == #Object])				first.	classes := IndentedTreeSelectionInList				listObjectHierarchy: #root				childBlock: 					[:thing |					#root == thing ifTrue: [Array with: root] ifFalse: [thing children]]				childNameBlock: [:thing | thing displayString].	classes		expandedEmphasis: #();		selection: root children first.	classes selectionIndexHolder onChangeSend: #changedClass to: self</body></methods><methods><class-id>Examples.HierarchyListExample class</class-id> <category>examples</category><body package="List1-Example">example1	"Use a HierarchicalList widget to populate dependent lists of all classes, methods, instances from the Core namespace."	"self example1"	self open</body><body package="List1-Example">example2	"Use a HierarchicalList widget to populate dependent lists of all classes, methods, instances from the Core namespace, with a list overlay hover window configured to display the full text of any item in the view's sequence list which is otherwise clipped by its view."	"self example2"	| app |	app := self new.	self openOn: app.	(app widgetAt: #classes)		normalSelection;		exposeElementIfClipped</body><body package="List1-Example">example3	"Use a HierarchicalList widget to populate dependent lists of all classes, methods, instances from the Core namespace, with a list overlay hover window configured to display the full text of any item in the view's sequence list."	"self example3"	| app |	app := self new.	self openOn: app.	(app widgetAt: #classes)		normalSelection;		exposeElementAll</body><body package="List1-Example">example4	"Use a HierarchicalList widget to populate dependent lists of all classes, methods, instances from the Core namespace, with a list overlay hover window configured to display the text of every item in a sequence list, offset from the current mouse position."	"self example4"	| app |	app := self new.	self openOn: app.	(app widgetAt: #classes)		normalSelection;		exposeElementAll;		hoverOffset: [4 @ 10]</body></methods><methods><class-id>Examples.SimpleListExample</class-id> <category>private</category><body package="List1-Example">updateInstancesList: selectedItem	self instances list: selectedItem allInstances</body><body package="List1-Example">updateSelectorsList: selectedItem	self methodNames list: selectedItem selectors asSortedCollection</body></methods><methods><class-id>Examples.SimpleListExample</class-id> <category>initialize-release</category><body package="List1-Example">initializeClasses	"Initialize the classes widget according to the requirements of the subcanvas spec."	classes := SelectionInList				with: (Core allClasses asSortedCollection: [:a :b | a name &lt; b name]).	classes selectionIndexHolder onChangeSend: #changedClass to: self</body></methods><methods><class-id>Examples.SimpleListExample</class-id> <category>accessing</category><body package="List1-Example">exampleTitle	^'Simple List Example'</body></methods><methods><class-id>Examples.SimpleListExample class</class-id> <category>examples</category><body package="List1-Example">example1	"Use a List widget to populate dependent lists of all classes, methods, instances from the Core namespace."	"self example1"	self open</body><body package="List1-Example">example2	"Use a List widget to populate dependent lists of all classes, methods, instances from the Core namespace, with a list overlay hover window configured to display the full text of any item in the view's sequence list which is otherwise clipped by its view."	"self example2"	| app |	app := self new.	self openOn: app.	(app widgetAt: #classes)		normalSelection;		exposeElementIfClipped</body><body package="List1-Example">example3	"Use a List widget to populate dependent lists of all classes, methods, instances from the Core namespace, with a list overlay hover window configured to display the full text of any item in the view's sequence list."	"self example3"	| app |	app := self new.	self openOn: app.	(app widgetAt: #classes)		normalSelection;		exposeElementAll</body><body package="List1-Example">example4	"Use a List widget to populate dependent lists of all classes, methods, instances from the Core namespace, with a list overlay hover window configured to display the text of every item in a sequence list, offset from the current mouse position."	"self example4"	| app |	app := self new.	self openOn: app.	(app widgetAt: #classes)		normalSelection;		exposeElementAll;		hoverOffset: [4 @ 10]</body></methods><methods><class-id>Tools.ArtificialTreeItemHolder</class-id> <category>converting</category><body package="List1-Example">asAssociationTree	| node |	node := AssociationTree key: (value ifNil: [#root] ifNotNil: #name) asSymbol value: value.	(self children collect: #asAssociationTree) do: [:child | node addChild: child].	^node</body></methods><methods><class-id>Examples.AbstractListExample class</class-id> <category>resources</category><body package="List1-Example">instancesMenu	"UIMenuEditor new openOnClass: self andSelector: #instancesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(#(#MenuItem #label: 'inspect' ) ) #(1 ) #(#inspectInstance ) ) decodeAsLiteralArray</body><body package="List1-Example">selectorsMenu	"UIMenuEditor new openOnClass: self andSelector: #selectorsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(		#(#MenuItem #label: 'select all' ) 		#(#MenuItem #label: 'clear all' ) 		#(#MenuItem #label: 'browse' ) ) 		#(2 1 ) 		#(#selectAll #clearAll #browse ) ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.AbstractListExample class</class-id> <category>interface specs</category><body package="List1-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #exampleTitle 			#min: #(#{Core.Point} 50 50 ) 			#max: #(#{Core.Point} 1128 900 ) 			#bounds: #(#{Graphics.Rectangle} 534 262 907 639 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 40 0 0 0.5 -1 1 ) 					#name: #Subcanvas1 					#minorKey: #classesListSpec ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 20 ) 					#label: 'Classes' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.5 40 0 -1 1 0 0.5 ) 					#name: #methodNames 					#model: #methodNames 					#menu: #selectorsMenu 					#multipleSelections: true 					#useModifierKeys: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0.5 20 0 ) 					#label: 'Selectors' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.5 30 0.5 -1 1 -1 1 ) 					#model: #instances 					#menu: #instancesMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0.5 10 0.5 ) 					#label: 'Instances' ) ) ) )</body></methods><methods><class-id>Examples.HierarchyListExample class</class-id> <category>interface specs</category><body package="List1-Example">classesListSpec	"Tools.UIPainter new openOnClass: self andSelector: #classesListSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 50 50 ) 			#max: #(#{Core.Point} 1128 900 ) 			#bounds: #(#{Graphics.Rectangle} 534 262 907 639 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.HierarchicalViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0 -1 1 -1 1 ) 					#name: #classes 					#model: #classes ) ) ) )</body></methods><methods><class-id>Examples.SimpleListExample class</class-id> <category>interface specs</category><body package="List1-Example">classesListSpec	"Tools.UIPainter new openOnClass: self andSelector: #classesListSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 50 50 ) 			#max: #(#{Core.Point} 1128 900 ) 			#bounds: #(#{Graphics.Rectangle} 534 262 907 639 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0 -1 1 -1 1 ) 					#name: #classes 					#model: #classes ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ArtificialTreeItemHolder</name><environment>Tools</environment><super>Tools.ListItemHolder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>children </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Modules</category><attributes><package>Tools-Modules</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>