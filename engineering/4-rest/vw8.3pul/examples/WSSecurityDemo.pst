<?xml version="1.0"?><st-source><!-- Name: WSSecurityDemoNotice: Copyright 2011-2014 Cincom Systems, Inc.  All rights reserved.Comment: Visual Works Web Services framework doesn't support WS-Security specifications but using interceptor classes there is possible to add, marshal and unmarshal Security headers.OverviewThe demo demonstrates how to create X2O binding for Security headers and add headers to a message.The example of X2O Security headers binding is based on  specifications:http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wssUsageFor details on using the Web Services Security Demo, see the test class comments.ImplementationThe TestSecurityDemo class includes #testClient method that tests #TimeNow service. The Security headers are added to Soap messages in SecurityHeaderClientInterceptor processing callbacks. The #TimeNow service is not described with Security Headers in WSDL. The new implementation allows adding arbitrary Soap Header to a message. The only requirement is that there should be already registered ElementMarshaler to marshal this header.DbIdentifier: bear73DbTrace: 493912DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'WSSecurityUtilityTypes' '') #(#any 'XMLSignatureTypes' '') #(#any 'XMLEncryptionTypes' '') #(#any 'WSSecurityTypes' '') #(#any 'SOAP-Server' ''))PackageName: WSSecurityDemoParcel: #('WSSecurityDemo')PrerequisiteDescriptions: #(#(#name 'WSSecurityUtilityTypes' #componentType #package) #(#name 'XMLSignatureTypes' #componentType #package) #(#name 'XMLEncryptionTypes' #componentType #package) #(#name 'WSSecurityTypes' #componentType #package) #(#name 'SOAP-Server' #componentType #package))PrerequisiteParcels: #(#('WSSecurityUtilityTypes' '') #('XMLSignatureTypes' '') #('XMLEncryptionTypes' '') #('WSSecurityTypes' '') #('SOAP-Server' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 2:31:40 PM April 28, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.3) of April 28, 2017 on April 28, 2017 at 2:31:40 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>WSSecurityDemo</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private WebServices.*			private WSSecurityUtility.*			private XMLSignature.*			private XMLEncryption.*			private WSSecurity.*			</imports><category></category><attributes><package>WSSecurityDemo</package></attributes></name-space><class><name>SecurityHeaderClientInterceptor</name><environment>WSSecurityDemo</environment><super>WebServices.ClientMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSSecurityDemo</package></attributes></class><comment><class-id>WSSecurityDemo.SecurityHeaderClientInterceptor</class-id><body>The class uses processing callbacks to add Security headers to a request and process headers from a response. </body></comment><class><name>TestSecurityDemo</name><environment>WSSecurityDemo</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-SecurityDemo</category><attributes><package>WSSecurityDemo</package></attributes></class><comment><class-id>WSSecurityDemo.TestSecurityDemo</class-id><body>The class tests #TimeNow service. Uses WsdlSecureClient</body></comment><class><name>SecureClient</name><environment>WSSecurityDemo</environment><super>WebServices.WsdlClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WSSecurityDemo</package></attributes></class><comment><class-id>WSSecurityDemo.SecureClient</class-id><body>The class serves as Security client. The #initializeRegistries method initializes the XML Encryption, Signature and Security bindings.</body></comment><class><name>SecureResponder</name><environment>WSSecurityDemo</environment><super>WebServices.SOAPResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WSSecurityDemo</package></attributes></class><comment><class-id>WSSecurityDemo.SecureResponder</class-id><body>The class serves as Security server.</body></comment><class><name>TimeServices</name><environment>WSSecurityDemo</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSSecurityDemo</package></attributes></class><comment><class-id>WSSecurityDemo.TimeServices</class-id><body>The class provides #TimeNow service</body></comment><class><name>SecurityHeaderServerInterceptor</name><environment>WSSecurityDemo</environment><super>WebServices.SOAPMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSSecurityDemo</package></attributes></class><comment><class-id>WSSecurityDemo.SecurityHeaderServerInterceptor</class-id><body>The class uses processing callbacks to add Security headers to a response and process headers from a request. </body></comment><methods><class-id>WSSecurityDemo.SecurityHeaderClientInterceptor</class-id> <category>processing callbacks</category><body package="WSSecurityDemo">receivingReply: aReply in: aTransport" Client: received the Soap reply. The message headers and body are unmarshaled "	| header |	aReply hasFault ifTrue: [ aReply handler smalltalkEntity bodyContents inspect.  ^self error: 'Received Failed Reply' ].	header :=(aReply headerAt: self securityHeaderNode ifAbsent: [ ^self error: 'There is no #Security header in the reply ' ]) value.	header any do: [ :headerEntry | self validateTimestamp: headerEntry ].</body><body package="WSSecurityDemo">sendingRequest: aRequest in: aTransport	"Client: Add Soap headers to the request.	Note: the #Security header is not described in the WSDL. To find the header marshaler we need to create the header entry name as a NodeTag. The NodeTag provides information about the header element marshaler: 	NodeTag 		qualifier: '' 		ns: 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd' 		type: 'Security' "	| anotherHeader |	aRequest operation name type = 'TimeNow' ifTrue: [		"Add the first Security header.		#headerFor: - API creates a new header entry or returns the existing header entry with this name"		( aRequest headerFor: self securityHeaderNode )			actor: 'UserID';			value: ( SecurityHeaderType new					any: ( OrderedCollection with: self usernameToken );					yourself).		"Add the second Security header.		#addHeaderEntry: - adds header entry. The API allows adding header entries with the same name " 		aRequest addHeaderEntry: (anotherHeader := Soap11HeaderEntry name: self securityHeaderNode ).		anotherHeader 			actor: 'AppID';			value: ( SecurityHeaderType new					any: ( OrderedCollection with:  self applUsernameToken );					yourself) ]</body></methods><methods><class-id>WSSecurityDemo.SecurityHeaderClientInterceptor</class-id> <category>accessing</category><body package="WSSecurityDemo">applUsernameToken	^ XMLObjectBinding wsSecurityBinding		tag:  (UsernameTokenType new				id: 'ApplID';				username: (WSSecurity.AttributedString new								value: 'appl name';								id: 'applID';								yourself);				any: (OrderedCollection with: self password ))		withType: 'UsernameToken'</body><body package="WSSecurityDemo">password	^XMLObjectBinding wsSecurityBinding		tag: (WSSecurity.PasswordString new 				type: 'urn:xxx' asURI; 				value: 'myPassword';				id: 'passwordID';				yourself)		withType: 'Password'</body><body package="WSSecurityDemo">securityHeaderNode	^NodeTag qualifier: '' ns: XMLObjectBinding wsSecurityNS type: 'Security'</body><body package="WSSecurityDemo">timestamp		^XMLObjectBinding wsSecurityUtilityBinding		 tag: (TimestampType new				created: (AttributedDateTime new								value: 'January 1, 1970 00:00:00 PM';								id: 'createdID';								yourself );				expires: (AttributedDateTime new								value: 'January 2, 1970 1:00:00 PM';								id: 'expiresID';								yourself );				choiceValue: OrderedCollection new;				yourself)		withType: 'Timestamp'</body><body package="WSSecurityDemo">usernameToken	^ XMLObjectBinding wsSecurityBinding		tag:  (UsernameTokenType new				id: 'UsernameTokenTypeID';				username: (WSSecurity.AttributedString new								value: 'username';								id: 'usernameID';								yourself);				any: (OrderedCollection with: self password ))		withType: 'UsernameToken'</body></methods><methods><class-id>WSSecurityDemo.SecurityHeaderClientInterceptor</class-id> <category>validation</category><body package="WSSecurityDemo">validateTimestamp: headerEntry" Client "	| timestamp sent |	(headerEntry value isKindOf: TimestampType)		ifTrue: [ sent := self timestamp value. 				timestamp := headerEntry value.				timestamp created value = sent created value 					ifFalse: [self error: 'Wrong timestamp created value '].				timestamp created id  =  sent created id 					ifFalse: [self error: 'Wrong timestamp created  id  '].				timestamp expires value = sent expires value					ifFalse: [self error: 'Wrong timestamp expires value '].				timestamp expires id  = sent expires id 					ifFalse: [self error: 'Wrong timestamp expires value ']]</body></methods><methods><class-id>WSSecurityDemo.TestSecurityDemo</class-id> <category>tests</category><body package="WSSecurityDemo">testSecureClient	| client usernameToken timestampType |	[SecureResponder addToServer. 	(client := SecureClient new) timeNow.	] ensure: [SecureResponder flushResponders].	self assert: (client request header size = 2).	self assert: (client request header headerEntries first value isKindOf: WSSecurity.SecurityHeaderType).	usernameToken := client request header headerEntries first value any first value.	self assert: usernameToken id = 'UsernameTokenTypeID'.	self assert: usernameToken username value = 'username'.	self assert: usernameToken any first value value = 'myPassword'.	self assert: (client response header size = 1).	self assert: (client response header headerEntries first value isKindOf: WSSecurity.SecurityHeaderType).	timestampType := client response header headerEntries first value any first value.	self assert: timestampType created value = 'January 1, 1970 00:00:00 PM'.	self assert: timestampType  expires value = 'January 2, 1970 1:00:00 PM'.</body><body package="WSSecurityDemo">testWsdlClient	| wsdlClient int entry anotherHeader |	[SecureResponder addToServer. 	wsdlClient := WsdlClient readFrom: TimeServices wsdlSchema readStream.	int := SecurityHeaderClientInterceptor new.	entry := wsdlClient headerFor: int securityHeaderNode .	entry value: ( SecurityHeaderType new					any: ( OrderedCollection with: int usernameToken );					yourself).	wsdlClient addHeaderEntry: (anotherHeader := Soap11HeaderEntry name: int securityHeaderNode ).	anotherHeader 			actor: 'AppID';			value: ( SecurityHeaderType new					any: ( OrderedCollection with:  int applUsernameToken );					yourself).		wsdlClient executeSelector: #TimeNow args: Array new.	] ensure: [SecureResponder flushResponders].	self assert: (wsdlClient response header size = 1).	self assert: (wsdlClient response header headerEntries first value isKindOf: WSSecurity.SecurityHeaderType).	wsdlClient response header headerEntries first value any do: [ :he |		int validateTimestamp: he.]</body></methods><methods><class-id>WSSecurityDemo.SecureClient</class-id> <category>initialization</category><body package="WSSecurityDemo">initializeRegistries	TimeServices initializeSecurityBindings.	super initializeRegistries.</body></methods><methods><class-id>WSSecurityDemo.SecureClient</class-id> <category>public api</category><body package="WSSecurityDemo">timeNow		^self executeSelector: #TimeNow args: Array new.</body></methods><methods><class-id>WSSecurityDemo.SecureClient class</class-id> <category>wsdl schema</category><body package="WSSecurityDemo">bindingName	^'TimeServicesBinding'</body><body package="WSSecurityDemo">bindingTargetNamespace	^'urn:testSecurity'</body><body package="WSSecurityDemo">serviceMap	^TimeServices serviceMap</body><body package="WSSecurityDemo">soapRequestWithSecurityHeaders^'&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;SOAP-ENV:Envelope 	xmlns:ns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"	xmlns:ns1="urn:testSecurity"	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 	xmlns:ns0="http://www.w3.org/2000/09/xmldsig#"&gt;	&lt;SOAP-ENV:Header&gt;		&lt;ns:Security SOAP-ENV:actor="UserID" SOAP-ENV:mustUnderstand="1"&gt;			&lt;ns:UsernameToken Id="UsernameTokenTypeID"&gt;				&lt;ns:Username Id="usernameID"&gt;username&lt;/ns:Username&gt;				&lt;ns:Password Id="passwordID" Type="urn:xxx"&gt;myPassword&lt;/ns:Password&gt;			&lt;/ns:UsernameToken&gt;			&lt;ns0:Signature&gt;				&lt;ns0:SignedInfo&gt;					&lt;ns0:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/&gt;					&lt;ns0:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/&gt;					&lt;ns0:Reference URI="#id-17764792"&gt;						&lt;ns0:Transforms&gt;							&lt;ns0:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/&gt;&lt;/ns0:Transforms&gt;							&lt;ns0:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/&gt;							&lt;ns0:DigestValue&gt;wg+9KsR6BVBiO/hakJJwMdtU7+I=&lt;/ns0:DigestValue&gt;					&lt;/ns0:Reference&gt;				&lt;/ns0:SignedInfo&gt;				&lt;ns0:SignatureValue Id="XX123optionalID"&gt;hom9Enzu3yHBuaE=&lt;/ns0:SignatureValue&gt;				&lt;ns0:KeyInfo Id="KeyId-19475750"&gt;					&lt;ns:SecurityTokenReference Id="STRId-31156635"&gt;						&lt;ns:KeyIdentifier EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary" ValueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier"&gt;CuJdE1B2dUFd1dkLZSzQ5vj6MYg=&lt;/ns:KeyIdentifier&gt;					&lt;/ns:SecurityTokenReference&gt;				&lt;/ns0:KeyInfo&gt;			&lt;/ns0:Signature&gt;		&lt;/ns:Security&gt;		&lt;ns:Security SOAP-ENV:actor="AppID" SOAP-ENV:mustUnderstand="1"&gt;			&lt;ns:UsernameToken Id="ApplID"&gt;				&lt;ns:Username Id="applID"&gt;appl name&lt;/ns:Username&gt;				&lt;ns:Password Id="passwordID" Type="urn:xxx"&gt;myPassword&lt;/ns:Password&gt;			&lt;/ns:UsernameToken&gt;		&lt;/ns:Security&gt;	&lt;/SOAP-ENV:Header&gt;	&lt;SOAP-ENV:Body&gt;		&lt;ns1:TimeNow/&gt;	&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;'</body><body package="WSSecurityDemo">wsdlSchema	^TimeServices wsdlSchema</body><body package="WSSecurityDemo">x2oBinding	^TimeServices x2oBinding</body></methods><methods><class-id>WSSecurityDemo.SecureClient class</class-id> <category>accessing</category><body package="WSSecurityDemo">processingPolicy	^(ClientProcessingPolicy new 			interceptorClasses: (OrderedCollection with: SecurityHeaderClientInterceptor) ; 			yourself ).</body></methods><methods><class-id>WSSecurityDemo.SecureClient class</class-id> <category>initialize-release</category><body package="WSSecurityDemo">initializeRegistries	TimeServices initializeSecurityBindings.</body></methods><methods><class-id>WSSecurityDemo.SecureResponder</class-id> <category>initialize-release</category><body package="WSSecurityDemo">initialize	super initialize.	TimeServices initializeSecurityBindings.</body></methods><methods><class-id>WSSecurityDemo.SecureResponder class</class-id> <category>accessing</category><body package="WSSecurityDemo">interceptors	^OrderedCollection with: SecurityHeaderServerInterceptor</body><body package="WSSecurityDemo">serviceMap	^TimeServices serviceMap</body></methods><methods><class-id>WSSecurityDemo.SecureResponder class</class-id> <category>wsdl schema</category><body package="WSSecurityDemo">wsdlSchema	^TimeServices wsdlSchema</body><body package="WSSecurityDemo">x2oBinding	^TimeServices x2oBinding</body></methods><methods><class-id>WSSecurityDemo.TimeServices</class-id> <category>public api</category><body package="WSSecurityDemo">timeNow	^Time now</body></methods><methods><class-id>WSSecurityDemo.TimeServices class</class-id> <category>initialize-release</category><body package="WSSecurityDemo">initializeSecurityBindings	(XMLObjectBinding bindingAtNamespace:  'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd') ifNil: [		XMLObjectDriver loadFrom: XMLObjectBinding wsSecurityUtilitySpecification readStream ].	(XMLObjectBinding bindingAtNamespace:  'http://www.w3.org/2000/09/xmldsig#') ifNil:  [		XMLObjectDriver loadFrom: XMLObjectBinding xmlSignatureSpecification readStream ].	(XMLObjectBinding bindingAtNamespace:  'http://www.w3.org/2001/04/xmlenc#') ifNil:  [		XMLObjectDriver loadFrom: XMLObjectBinding xmlEncryptionSpecification readStream ].	(XMLObjectBinding bindingAtNamespace:  'http://docs.oasis-open.org/wss/oasis-wsswssecurity-secext-1.1.xsd') ifNil:  [		XMLObjectDriver loadFrom: XMLObjectBinding wsSecurity11Specification readStream ].	(XMLObjectBinding bindingAtNamespace:  'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd') ifNil:  [		XMLObjectDriver loadFrom: XMLObjectBinding wsSecuritySpecification readStream ].</body></methods><methods><class-id>WSSecurityDemo.TimeServices class</class-id> <category>wsdl schema</category><body package="WSSecurityDemo">serviceMap 	^'&lt;ns:serviceMap xmlns:ns0="urn:testSecurity" xmlns:ns="urn:visualworks:serviceMap"&gt;	&lt;ns:serviceClass&gt;WSSecurityDemo.TimeServices&lt;/ns:serviceClass&gt;	&lt;ns:interface&gt;ns0:TimeServices&lt;/ns:interface&gt;	&lt;ns:operation name="TimeNow" selector="timeNow"/&gt;&lt;/ns:serviceMap&gt;'</body><body package="WSSecurityDemo">wsdlSchema^'&lt;definitions targetNamespace="urn:testSecurity" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="urn:testSecurity_WSDLOperations" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="urn:testSecurity"&gt;	&lt;types&gt;		&lt;schema 			targetNamespace="urn:testSecurity_WSDLOperations" 			xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;			&lt;element name="TimeNowResponse"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="result" type="xsd:time"&gt;&lt;/element&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;		&lt;/schema&gt;	&lt;/types&gt;	&lt;message name="TimeNow"&gt;&lt;/message&gt;	&lt;message name="TimeNowResponse"&gt;		&lt;part element="ns:TimeNowResponse" name="return"&gt;&lt;/part&gt;	&lt;/message&gt;	&lt;portType name="TimeServices"&gt;		&lt;operation name="TimeNow"&gt;			&lt;input message="tns:TimeNow"&gt;&lt;/input&gt;			&lt;output message="tns:TimeNowResponse"&gt;&lt;/output&gt;		&lt;/operation&gt;	&lt;/portType&gt;	&lt;binding name="TimeServicesBinding" type="tns:TimeServices"&gt;		&lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"&gt;&lt;/soap:binding&gt;		&lt;operation name="TimeNow"&gt;			&lt;soap:operation soapAction="urn:testSecurity#TimeNow" style="document"&gt;&lt;/soap:operation&gt;			&lt;input&gt;				&lt;soap:body use="literal"&gt;&lt;/soap:body&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal"&gt;&lt;/soap:body&gt;			&lt;/output&gt;		&lt;/operation&gt;	&lt;/binding&gt;	&lt;service name="VWWsdlService"&gt;		&lt;port binding="tns:TimeServicesBinding" name="TimeServices"&gt;			&lt;soap:address location="http://localhost:4444/TestTimeServices"&gt;&lt;/soap:address&gt;		&lt;/port&gt;	&lt;/service&gt;&lt;/definitions&gt;'</body><body package="WSSecurityDemo">x2oBinding^'&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding 		targetNamespace="urn:testSecurity_WSDLOperations" 		defaultClassNamespace="WSTest" xmlns="urn:visualworks:VWSchemaBinding" 		xmlns:xsd="http://www.w3.org/2001/XMLSchema" &gt;		&lt;element name="TimeNowResponse"&gt;			&lt;struct name="TimeNowResponse"&gt;				&lt;element name="result" ref="xsd:time"/&gt;			&lt;/struct&gt;		&lt;/element&gt;	&lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;'</body></methods><methods><class-id>WSSecurityDemo.SecurityHeaderServerInterceptor</class-id> <category>accessing</category><body package="WSSecurityDemo">applUsernameToken	^ XMLObjectBinding wsSecurityBinding		tag:  (UsernameTokenType new				id: 'ApplID';				username: (WSSecurity.AttributedString new								value: 'appl name';								id: 'applID';								yourself);				any: (OrderedCollection with: self password ))		withType: 'UsernameToken'</body><body package="WSSecurityDemo">password	^XMLObjectBinding wsSecurityBinding		tag: (WSSecurity.PasswordString new 				type: 'urn:xxx' asURI; 				value: 'myPassword';				id: 'passwordID';				yourself)		withType: 'Password'</body><body package="WSSecurityDemo">reference	^OrderedCollection with: (		XMLSignature.ReferenceType new			uRI: '#id-17764792' asURI;			transforms: self transforms;			digestMethod: (XMLSignature.DigestMethodType new								algorithm: 'http://www.w3.org/2000/09/xmldsig#sha1' asURI; 								yourself );			digestValue: (ByteArray fromBase64String:  'Rkp5dGpoZy05ODc2NiooX3J1eQ==' );			yourself)</body><body package="WSSecurityDemo">securityHeaderNode	^NodeTag qualifier: '' ns: XMLObjectBinding wsSecurityNS type: 'Security'</body><body package="WSSecurityDemo">signedInfo	^XMLSignature.SignedInfoType new		canonicalizationMethod: (XMLSignature.CanonicalizationMethodType new 									algorithm: 'http://www.w3.org/2001/10/xml-exc-c14n#' asURI; 									yourself);		signatureMethod: (XMLSignature.SignatureMethodType new 								algorithm: 'http://www.w3.org/2000/09/xmldsig#rsa-sha1' asURI; 								yourself);		reference: self reference;		yourself</body><body package="WSSecurityDemo">timestamp		^XMLObjectBinding wsSecurityUtilityBinding		 tag: (TimestampType new				created: (AttributedDateTime new								value: 'January 1, 1970 00:00:00 PM';								id: 'createdID';								yourself );				expires: (AttributedDateTime new								value: 'January 2, 1970 1:00:00 PM';								id: 'expiresID';								yourself );				choiceValue: OrderedCollection new;				yourself)		withType: 'Timestamp'</body><body package="WSSecurityDemo">transforms	^XMLSignature.TransformsType new		transform: (OrderedCollection with: (						XMLSignature.TransformType new 							algorithm: 'http://www.w3.org/2001/10/xml-exc-c14n#' asURI; 							yourself));			yourself</body><body package="WSSecurityDemo">usernameToken	^ XMLObjectBinding wsSecurityBinding		tag:  (UsernameTokenType new				id: 'UsernameTokenTypeID';				username: (WSSecurity.AttributedString new								value: 'username';								id: 'usernameID';								yourself);				any: (OrderedCollection with: self password ))		withType: 'UsernameToken'</body></methods><methods><class-id>WSSecurityDemo.SecurityHeaderServerInterceptor</class-id> <category>processing callbacks</category><body package="WSSecurityDemo">receivingRequestEnvelope: aRequest in: aTransport	"Server: received the Soap request with unmarshaled header entries. The message body is not unmarshaled yet "	aRequest headerEntries isEmpty ifTrue: [self error: 'Missing Security headers in the request'].	aRequest headerEntries size = 2 ifFalse: [self error: 'Wrong number of Security headers in the request '].	aRequest headerEntries do: [ :header |		"Validate the header entry for the UserID actor"		header actor = 'UserID'			ifTrue: [ header value any size = 1 ifFalse: [self error: 'Wrong header entry number for UserID actor in the request'].				 	header value any do: [ :headerEntry | 						(headerEntry value isKindOf: WSSecurity.UsernameTokenType)							ifTrue: [self validateUsernameToken: headerEntry ]]].		"Validate the header entry for the ApplID actor"		header actor = 'AppID'			ifTrue: [header value any size = 1 ifFalse: [self error: 'Wrong header entry number for ApplID actor in the request '].					header value any do: [ :headerEntry | 						(headerEntry value isKindOf: WSSecurity.UsernameTokenType)							ifTrue: [self validateApplUsernameToken: headerEntry ]]]]</body><body package="WSSecurityDemo">sendingReply: aReply in: aTransport	"Server: Create and add response headers"	aReply failed ifTrue: [ ^nil ].	(aReply headerFor: self securityHeaderNode ) 		value: ( SecurityHeaderType new						any: (OrderedCollection with: self timestamp );						yourself)</body></methods><methods><class-id>WSSecurityDemo.SecurityHeaderServerInterceptor</class-id> <category>validation</category><body package="WSSecurityDemo">validateApplUsernameToken: headerEntry	| password username sent sentPassword |	username := headerEntry value username.	sent := self applUsernameToken value username.	username id = sent id ifFalse: [ self error: 'Wrong user token ID'].	username value = sent value ifFalse: [ self error: 'Wrong user token userName'].	(headerEntry value any first value isKindOf: WSSecurity.PasswordString)		ifTrue: [ password := headerEntry value any first value.				sentPassword := self applUsernameToken value any first value.				password id = sentPassword id ifFalse: [ self error: 'Wrong password id'].				password value = sentPassword value ifFalse: [ self error: 'Wrong password' ]]</body><body package="WSSecurityDemo">validateUsernameToken: headerEntry	| password username sent sentPassword |	username := headerEntry value username.	sent := self usernameToken value username.	username id = sent id ifFalse: [ self error: 'Wrong user token ID'].	username value = sent value ifFalse: [ self error: 'Wrong user token userName'].	(headerEntry value any first value isKindOf: WSSecurity.PasswordString)		ifTrue: [ password := headerEntry value any first value.				sentPassword := self usernameToken value any first value.				password id = sentPassword id ifFalse: [ self error: 'Wrong password id'].				password value = sentPassword value ifFalse: [ self error: 'Wrong password' ]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>SOAPResponder</name><environment>WebServices</environment><super>SiouX.NetHttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processingPolicy environmentWithHeaders binding service </inst-vars><class-inst-vars>defaultProcessingPolicyClass defaultEnvironmentWithHeaders responders </class-inst-vars><imports>			private Net.*			private SiouX.*			</imports><category></category><attributes><package>SOAP-Server</package></attributes></class><class><name>ClientMessageInterceptor</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSDLBinding</package></attributes></class><class><name>SOAPMessageInterceptor</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SOAP-Server</package></attributes></class><class><name>WsdlClient</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>port config wsdlUrl accessPoint header request response responseValue transport processingPolicy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLBinding</package></attributes></class></st-source>