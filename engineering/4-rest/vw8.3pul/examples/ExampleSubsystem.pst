<?xml version="1.0"?><st-source><!-- Name: ExampleSubsystemNotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Comment: This serves as an example of a subsystem to illustrate what is possible using them.DbIdentifier: bear73DbTrace: 492746DbUsername: smichaelDbVersion: 8.2 - 1PackageName: ExampleSubsystemParcel: #('ExampleSubsystem')PrintStringCache: (8.2 - 1,smichael)Version: 8.2 - 1Date: 11:37:18 AM July 1, 2016 --><time-stamp>From VisualWorksÂ®, 8.2 of July 1, 2016 on July 1, 2016 at 11:37:18 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExampleSubsystem</name><environment>Examples</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Subsystems</category><attributes><package>ExampleSubsystem</package></attributes></class><comment><class-id>Examples.ExampleSubsystem</class-id><body>This serves as an example of a subsystem to illustrate what is possible using them.</body></comment><methods><class-id>Examples.ExampleSubsystem</class-id> <category>actions</category><body package="ExampleSubsystem">pauseAction	"In this method we prepare for an image save. The image may start up again, or may be going to quit. If we want to know if it's going to quit, we can ask (Snapshot isAboutToQuit)."	"self suspendThingsThatNeedSuspending"</body><body package="ExampleSubsystem">resumeAction	"In this method we return from an image save. The image may or may not be going to quit. If we want to know if it's going to quit, we can ask (Snapshot isAboutToQuit)."	"self resumeSuspendedThings"</body><body package="ExampleSubsystem">setUp	"This method is called when we are activating this system, normally because the image is starting up. It should do anything that's necessary in order to make this subsystem active"	"self readConfigurationInfo.	self turnThingsOn"</body><body package="ExampleSubsystem">tearDown	"This method is called when we are deactivating this system, normally because the image is shutting down. It should do anything that's necessary in order to make this subsystem inactive, releasing resources"	"self releaseResources"</body></methods><methods><class-id>Examples.ExampleSubsystem</class-id> <category>prerequisites</category><body package="ExampleSubsystem">prerequisiteSystems	^#().</body></methods><methods><class-id>Examples.ExampleSubsystem</class-id> <category>command-line options</category><body package="ExampleSubsystem">bar: aStream	"This implements a command-line option. The method will be invoked if the -bar option is present on the command line. A stream containing the command line from the point of this option forward is available"	&lt;option: '-bar'&gt;	(CommandLineInterest argumentsFrom: aStream) do: [:each |		each yourself].</body><body package="ExampleSubsystem">foo	"This implements a command-line option. The method will be invoked if the -foo option is present on the command line. A stream containing the command line from the point of this option forward is available if the option takes arguments"	&lt;option: '-foo'&gt;</body><body package="ExampleSubsystem">xyzLevel: aStream	"This implements a command-line option that takes an argument, where the argument is directly attached to the option. That is, things of the form -xFoo, where the option is -x and the argument is Foo.The method will be invoked if the -x option is present on the command line. A stream containing the command line from the point of this option forward is available. Note that to get the argument, we actually need to back up the stream"	&lt;option: '-xyz*'&gt;	| optionString argument |	aStream skip: -1.	optionString := aStream next.	argument := optionString copyFrom: 5 to: optionString size.	self setXYZLevelTo: argument.</body></methods><methods><class-id>Examples.ExampleSubsystem</class-id> <category>prerequisites</category><body package="ExampleSubsystem">additionalPrerequisites	&lt;prerequisites&gt;	^Array with: CoreSystem with: DelaySystem.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Subsystem</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state canActivate prerequisites </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>System-Subsystems</category><attributes><package>System-Subsystems</package></attributes></class></st-source>