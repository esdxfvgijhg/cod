<?xml version="1.0"?><st-source><!-- Name: RandomWatcher-ExampleNotice: Copyright 2003-2014 Cincom Systems, Inc.  All rights reserved.Comment: RandomWatcher is a simple GUI designed to display the current value of its domain, which updates itself.  The domain, RunawayRandoms, was originally written without any GUI in mind.  The GUI was then built.  The single change to the domain, which could be made while running, was to add the notification message in #next.  Both update/change and trigger-event update mechanisms are illustrated.DbIdentifier: bear73DbTrace: 427979DbUsername: smichaelDbVersion: 1.3PackageName: RandomWatcher-ExampleParcel: #('RandomWatcher-Example')PrintStringCache: (1.3,smichael)Version: 1.3Date: 5:06:46 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:46 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RandomWatcher</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>generator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>RandomWatcher-Example</package></attributes></class><comment><class-id>Examples.RandomWatcher</class-id><body>A GUI designed to monitor the state of an independent process, a domain model that updates itself.Instance Variables:	currentValue	&lt;Object&gt;	the current display value	generator	&lt;RunawayRandoms&gt;	the random number generator being monitored</body></comment><class><name>RunawayRandoms</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>generator current running delay </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>AdaptorExplorations</category><attributes><package>RandomWatcher-Example</package></attributes></class><comment><class-id>Examples.RunawayRandoms</class-id><body>RunawayRandoms simply starts a random number generator and generatesthe next one each second.  This is used with RandomWatcher to illustrated updating a GUI from a domain model that updates itself.  Intended to simulatea display monitor on any independent process.Instance Variables:	current	&lt;Object&gt;	current random value	delay	&lt;Delay&gt;	the length between generating new randoms	generator	&lt;Stream&gt;	the random number generator	running	&lt;Boolean&gt;	state: running or not</body></comment><methods><class-id>Examples.RandomWatcher</class-id> <category>aspects</category><body package="RandomWatcher-Example">currentValue	| adaptor |		adaptor := AspectAdaptor subject: generator.	adaptor forAspect: #current.	"update using change mechanism"	adaptor subjectSendsUpdates: true.	"update using trigger-event mechanism"	"generator when: #currentChanged 		do: [ :arg | adaptor update: #current with: arg from: generator ]."	^adaptor</body></methods><methods><class-id>Examples.RandomWatcher</class-id> <category>actions</category><body package="RandomWatcher-Example">start	generator start</body><body package="RandomWatcher-Example">stop	generator stop</body></methods><methods><class-id>Examples.RandomWatcher</class-id> <category>private</category><body package="RandomWatcher-Example">update: arg	arg inspect." self currentValue valueUsingTarget: generator"</body></methods><methods><class-id>Examples.RandomWatcher</class-id> <category>initialize-release</category><body package="RandomWatcher-Example">initialize	| collection |	collection := RunawayRandoms allInstances.	generator := collection isEmpty		ifTrue: [ RunawayRandoms new start ]		ifFalse: [ collection first ]</body></methods><methods><class-id>Examples.RunawayRandoms</class-id> <category>accessing</category><body package="RandomWatcher-Example">current	^current</body></methods><methods><class-id>Examples.RunawayRandoms</class-id> <category>initialize-release</category><body package="RandomWatcher-Example">initialize	generator := Random new.	running := false.	delay := Delay forSeconds: 1</body></methods><methods><class-id>Examples.RunawayRandoms</class-id> <category>updating</category><body package="RandomWatcher-Example">next	"Get next random and notify of update"	current := generator next.	"change/update version"	self changed: #current.	"event version"	"self triggerEvent: #currentChanged with: current."</body></methods><methods><class-id>Examples.RunawayRandoms</class-id> <category>private - running</category><body package="RandomWatcher-Example">start	running := true.	[ [ running = true ] whileTrue:  		[ delay wait. 		  self next ] ] fork</body><body package="RandomWatcher-Example">stop	running := false</body></methods><methods><class-id>Examples.RunawayRandoms class</class-id> <category>instance creation</category><body package="RandomWatcher-Example">new	^super new initialize</body></methods><methods><class-id>Examples.RandomWatcher class</class-id> <category>interface specs</category><body package="RandomWatcher-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Random Watcher' 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 10 ) 					#name: #Label1 					#label: 'Current Random Value' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 16 127 97 150 ) 					#name: #ActionButton1 					#model: #start 					#label: 'Start' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 106 127 187 150 ) 					#name: #ActionButton2 					#model: #stop 					#label: 'Stop' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 19 39 180 64 ) 					#name: #InputField1 					#model: #currentValue 					#alignment: #right 					#isReadOnly: true 					#type: #number ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>