<?xml version="1.0"?><st-source><!-- Name: MenuCommand2-ExampleNotice: Copyright 2003-2016 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains MenuCommand2Example, which demonstrates how to implement a menu of commands (as opposed to a menu of values) in a menu bar, a menu button and a pop-up menu, where the menus are installed from a menu resource rather than being created programmatically.DbIdentifier: bear73DbTrace: 492749DbUsername: smichaelDbVersion: 8.2 - 1PackageName: MenuCommand2-ExampleParcel: #('MenuCommand2-Example')PrintStringCache: (8.2 - 1,smichael)Version: 8.2 - 1Date: 5:06:46 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:46 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MenuCommand2Example</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>files </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>MenuCommand2-Example</package></attributes></class><comment><class-id>Examples.MenuCommand2Example</class-id><body>This example class demonstrates how to implement a menu of commands (as opposed to a menu of values) in each of the three types of menu: menu bar, menu button and pop-up menu.  In this variation, the menus are installed from a menu resource as opposed to being created programmatically.  The old programmatic menu method of MenuCommandExample renamed from #fileMenu to #oldFileMenu has had the pragma &lt;resource: #menu&gt; added. With this pragma it served as source for the menu resource opened in and installed from the MenuEditor. </body></comment><methods><class-id>Examples.MenuCommand2Example</class-id> <category>menu messages</category><body package="MenuCommand2-Example">addFile	"Prompt for a filename and add it to the list."	| name list selectionInList |	name := Dialog 				requestFileName: 'File to add'				default: ''				version: #mustBeOld.	name isEmpty 		ifFalse: 			[name asFilename isDirectory 				ifTrue: 					[^Dialog warn: 'A directory cannot be added.'						for: ScheduledControllers activeController view].			selectionInList := self files.			list := selectionInList list.			selectionInList selection isNil 				ifTrue: [list add: name]				ifFalse: [list add: name before: selectionInList selection].			selectionInList list: list]</body><body package="MenuCommand2-Example">deleteFile	"Remove the selected file from the list."	| selectionInList list |	selectionInList := self files.	list := selectionInList list.	list removeAtIndex: selectionInList selectionIndex.	selectionInList list: list.</body><body package="MenuCommand2-Example">explainUsage	"Tell how to use the example."	Dialog warn: 'This example demonstrates a menu of commandsthat is accessible via a menu bar, a menu buttonor a pop-up menu.It can also be used to list your most-used text files for quick editing.'</body><body package="MenuCommand2-Example">openFile	"Open a File Editor on the selected file."	| selectedFile |	selectedFile := self files selection.	selectedFile asFilename edit.</body></methods><methods><class-id>Examples.MenuCommand2Example</class-id> <category>testing</category><body package="MenuCommand2-Example">anyFileSelected	^self files selection notNil</body></methods><methods><class-id>Examples.MenuCommand2Example</class-id> <category>aspects</category><body package="MenuCommand2-Example">files	^files</body><body package="MenuCommand2-Example">performer	^self</body></methods><methods><class-id>Examples.MenuCommand2Example</class-id> <category>initialize-release</category><body package="MenuCommand2-Example">initialize	files := SelectionInList new.</body></methods><methods><class-id>Examples.MenuCommand2Example class</class-id> <category>resources</category><body package="MenuCommand2-Example">fileMenu	"MenuEditor new openOnClass: self andSelector: #fileMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Open' 							#value: #openFile 							#enablementSelector: #anyFileSelected 							#shortcutKeyCharacter: $O 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Add' 							#value: #addFile 							#shortcutKeyCharacter: $A 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Delete' 							#value: #deleteFile 							#enablementSelector: #anyFileSelected 							#shortcutKeyCharacter: $D 							#shortcutModifiers: 8 ) ) #(1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Help' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Usage' 							#value: #explainUsage ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.MenuCommand2Example class</class-id> <category>old menus</category><body package="MenuCommand2-Example">oldFileMenu	"MenuEditor new openOnClass: self andSelector: #oldFileMenu"	&lt;resource: #menu&gt;	| mb menu submenu |	mb := MenuBuilder new.	mb 		beginSubMenuLabeled: 'File';		add: 'Open' -&gt; #openFile;		line;		add: 'Add' -&gt; #addFile;		add: 'Delete' -&gt; #deleteFile;		endSubMenu.	mb 		beginSubMenuLabeled: 'Help';		add: 'Usage' -&gt; #explainUsage;		endSubMenu.	"Add shortcut keys."	menu := mb menu.	submenu := (menu menuItemLabeled: 'File') submenu.	(submenu menuItemLabeled: 'Open') 		shortcutKeyCharacter: $O;	     enablement: #anyFileSelected.	(submenu menuItemLabeled: 'Add') shortcutKeyCharacter: $A.	(submenu menuItemLabeled: 'Delete') 		shortcutKeyCharacter: $D;	     enablement: #anyFileSelected.	^menu</body></methods><methods><class-id>Examples.MenuCommand2Example class</class-id> <category>interface specs</category><body package="MenuCommand2-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'MenuCommand2Example' 			#min: #(#{Core.Point} 233 200 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1033 800 ) 			#flags: 4 			#menu: #fileMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 35 0 -10 1 -10 1 ) 					#model: #files 					#menu: #fileMenu ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.5 5 0 50 0.5 30 0 ) 					#model: #performer					#label: 'Actions' 					#menu: #fileMenu ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>