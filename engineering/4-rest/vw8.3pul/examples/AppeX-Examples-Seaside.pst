<?xml version="1.0"?><st-source><!-- Name: AppeX-Examples-SeasideNotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Comment: This package holds code that demonstrates how an existing Seaside application could be enhanced and integrated with AppeX.To start the Seaside server run the following code:	(SiouX.Server id: 'Seaside')  start.	ExternalWebBrowser open: 'http://localhost:7777/'DbIdentifier: bear73DbTrace: 496314DbUsername: tkoganDbVersion: 8.3 - 4DevelopmentPrerequisites: #(#(#any 'Seaside-Examples-All' '') #(#any 'AppeX-Tools' '') #(#any 'AppeX-Client' ''))PackageName: AppeX-Examples-SeasideParcel: #('AppeX-Examples-Seaside')PrerequisiteDescriptions: #(#(#name 'Seaside-Examples-All' #componentType #package) #(#name 'AppeX-Tools' #componentType #bundle) #(#name 'AppeX-Client' #componentType #package))PrerequisiteParcels: #(#('Seaside-Examples-All' '') #('AppeX-Tools' '') #('AppeX-Client' ''))PrintStringCache: (8.3 - 4,tkogan)Version: 8.3 - 4Date: 1:46:25 PM March 17, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (mar17.3) of March 17, 2017 on March 17, 2017 at 1:46:25 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SeasideWelcomeClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Seaside</package></attributes></class><comment><class-id>AppeX.SeasideWelcomeClient</class-id><body>SeasideWelcomeClient is an example of a client code to augment an existing Seaside application. It is the Javascript counterpart to the SeasideWelcome application class.</body></comment><class><name>SeasideWelcome</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>seasideSession counter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Seaside</package></attributes></class><comment><class-id>AppeX.SeasideWelcome</class-id><body>SeasideWelcome is an example of how an AppeX application might get linked to an existing Seaside application session and be used to keep the application state.Instance Variables:	counter	&lt;Integer&gt; counter	seasideSession	&lt;WASession&gt;	the instance of a Seaside session linked to an instance of this application.</body></comment><shared-variable><name>DefaultPath</name><environment>AppeX.SeasideWelcome</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>SeasideWelcome defaultPathValue</initializer><attributes><package>AppeX-Examples-Seaside</package></attributes></shared-variable><methods><class-id>AppeX.SeasideWelcome</class-id> <category>accessing</category><body package="AppeX-Examples-Seaside">counter	^counter</body><body package="AppeX-Examples-Seaside">counter: anObject	counter := anObject</body><body package="AppeX-Examples-Seaside">path: stringOrBindingReference"	In our example, we use a binding reference in the server:path: pragma (see serverConfiguration).	To make it compatible with the default implementation, turn it into a string or nil."	super path: (stringOrBindingReference isString		ifTrue: [stringOrBindingReference]		ifFalse: [stringOrBindingReference valueOrDo: [nil]])</body><body package="AppeX-Examples-Seaside">seasideRequestDispatcher"The method is used to open Web Browser from Launcher on Seaside server"	^Seaside.WADispatcher default</body><body package="AppeX-Examples-Seaside">seasideSession	^seasideSession</body><body package="AppeX-Examples-Seaside">seasideSession: anObject	seasideSession := anObject</body></methods><methods><class-id>AppeX.SeasideWelcome</class-id> <category>initialize-release</category><body package="AppeX-Examples-Seaside">initialize	super initialize.	counter := 0</body></methods><methods><class-id>AppeX.SeasideWelcome</class-id> <category>session - services</category><body package="AppeX-Examples-Seaside">executeRequestFor: aRequestContext	(aRequestContext request url decodedPath last = self decodedPath last )		ifTrue: [			"We implement this redirect for the only purpose: to be able to open the example from tools."			aRequestContext response				code: 301;				header: 'Location' value: '/']		ifFalse: [super executeRequestFor: aRequestContext ].</body></methods><methods><class-id>AppeX.SeasideWelcome class</class-id> <category>accessing</category><body package="AppeX-Examples-Seaside">applicationClientClass	^  SeasideWelcomeClient</body><body package="AppeX-Examples-Seaside">defaultPathValue	^ '/appex'</body></methods><methods><class-id>AppeX.SeasideWelcome class</class-id> <category>augment seaside</category><body package="AppeX-Examples-Seaside">updateRoot: anHtmlRoot"	Add things that are necessary to include AppeX."	| responderPath |	"First, a hack to ensure that the default Javascript libraries are in SeasideWelcome requestActions."	self htmlDocument.		responderPath := RequestContext current responder path.	responderPath = '/'		ifTrue: [responderPath := DefaultPath]		ifFalse: [ responderPath := responderPath, DefaultPath].	responderPath last = $/ ifFalse: [ responderPath := responderPath, '/'].		anHtmlRoot link		beStylesheet;		url: responderPath, 'defaultStyle.css'.		anHtmlRoot javascript url: responderPath, JavascriptCode coreCodeLibraryName.	anHtmlRoot javascript url: responderPath, self applicationClientClass javascriptLibrary name.</body></methods><methods><class-id>AppeX.SeasideWelcome class</class-id> <category>session management</category><body package="AppeX-Examples-Seaside">sessionKey	^ '_appexSession'</body></methods><methods><class-id>Seaside.WAWelcomeGettingStarted</class-id> <category>rendering</category><body package="AppeX-Examples-Seaside">renderContentOn: html	html heading		level1;		with: 'Getting started'.				html heading		level2;		with: 'Test the water with the steps below:'.					html orderedList: [		html listItem: [ self renderExamplesStepOn: html ].		html listItem: [ self renderFirstComponentStepOn: html ].		html listItem: [ self renderDocumentationStepOn: html ] ].		html script: '$t.application.renderGettingStarted();'</body></methods><methods><class-id>Seaside.WACounter</class-id> <category>rendering</category><body package="AppeX-Examples-Seaside">renderContentOn: html	html heading		id: #count;		with: count.	html anchor		id: #increase;		callback: [ self increase ];		with: '++'.	html space.	html anchor		id: #decrease;		callback: [ self decrease ];		with: '--'.			html script: 'window.$t &amp;&amp; $t.application.renderCounterExample();'</body></methods><methods><class-id>Seaside.WAWelcome</class-id> <category>rendering</category><body package="AppeX-Examples-Seaside">renderContentOn: html	html script: '(new $t.AppeX.SeasideWelcomeClient()).installSession({		"sessionKey": "_appexSession",		"url": "appex/"});'.	html div		class: 'container';		with: [			html div				class: 'sidebar';				with: [ self renderSideBarOn: html ].			html div				class: 'content';				with: [ self renderMainContentOn: html ].			html div class: 'clear' ]</body></methods><methods><class-id>Seaside.WAWelcome</class-id> <category>accessing</category><body package="AppeX-Examples-Seaside">title	^ 'Welcome to Seaside with AppeX'</body></methods><methods><class-id>Seaside.WAWelcome</class-id> <category>updating</category><body package="AppeX-Examples-Seaside">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot beHtml5.	anHtmlRoot title: self title.	(anHtmlRoot link)		beShortcutIcon;		url: WAToolFiles / #faviconIco.	AppeX.SeasideWelcome updateRoot: anHtmlRoot.</body></methods><methods><class-id>AppeX.SeasideWelcomeClient</class-id> <category>javascript</category><body package="AppeX-Examples-Seaside">buildHtml() {	this.decorateCongrats();}</body><body package="AppeX-Examples-Seaside">decorateCongrats() {	var self = this;	var heading = $("#congrats-insert");		// If I haven't created the #congrats-insert H2 before, now is the time to do it.	if (heading.size() == 0) {		var header = $(".header");		heading = $('&lt;h2&gt;');		heading			.attr("id", "congrats-insert")			.addClass("congrats")			.css("display", "none")			.html("It is now being extended and decorated with AppeX.")			.appendTo(header);	}		heading.show("slide", {}, 1000);	heading.addClass(		"appexified",		1000,		"swing",		function(){			self.decorateGettingStarted();		}	);}</body><body package="AppeX-Examples-Seaside">decorateCounterExample() {	var self = this;	var count = $("#count");	count.data("count", count.text());	var increase = $("#increase");	// Store the initial "href" attribute in the jQuery data for the element.	increase.data("href", increase.attr("href"));	increase.removeAttr("href");	increase.button();	increase.css("cursor", "pointer");	increase.click(function() {		self.increaseCounter();	});		var decrease = $("#decrease");	// Store the initial "href" attribute in the jQuery data for the element.	decrease.data("href", decrease.attr("href"));	decrease.removeAttr("href");	decrease.button();	decrease.css("cursor", "pointer");	decrease.click(function() {		self.decreaseCounter();	});}</body><body package="AppeX-Examples-Seaside">decorateGettingStarted() {	var div = $(".getting-started");	div.addClass("appexified", 400);	div.addClass("ui-corner-all", 1000);}</body><body package="AppeX-Examples-Seaside">removeDecorations(){	// Remove all AppeX decorations from the decorated components and restore the original links and data.	$("#count").text($("#count").data("count"));	[ "#increase", "#decrease"].forEach(function(id){		var jq=$(id);		jq.off("click");		jq.button( "destroy" );		jq.attr("href", jq.data("href"))	});	var div = $(".getting-started");	div.removeClass("ui-corner-all", 1000);	div.removeClass("appexified", 400);		$("#congrats-insert").hide("slide", 500);		}</body><body package="AppeX-Examples-Seaside">toggleAppeX(){	this.isAppeX = !this.isAppeX;	if (this.isAppeX) {		this.decorateCongrats();		this.decorateCounterExample();	} else {		this.removeDecorations();	}	this.storeItemInStorage("isAppeX", this.isAppeX, window.sessionStorage);}</body></methods><methods><class-id>AppeX.SeasideWelcomeClient</class-id> <category>sessions</category><body package="AppeX-Examples-Seaside">extractSeasideSession() {	// Get the first anchor that starts with the /welcome path, and extract the value of the _s qury parameter.	var anchor = $("a[href^='/welcome?_s=']").first()[0];	var query = anchor.href.split("?")[1];	var postKey = query.split("_s=")[1];	this.seasideSession = postKey.split("&amp;")[0];}</body></methods><methods><class-id>AppeX.SeasideWelcomeClient</class-id> <category>auto-generated</category><body package="AppeX-Examples-Seaside">decreaseCounter(){/** This method was generated from pragma &lt;json: 'decreaseCounter'&gt; in method AppeX.SeasideWelcome&gt;&gt;decreaseCounter.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.SeasideWelcome&gt;&gt;decreaseCounter.*	- Click on the item labeled "Generate SeasideWelcomeClient.decreaseCounter" in the method menu.*/	var response = this.asyncMessageToServer("decreaseCounter", arguments);	response.onSuccess(		function(object) {			$("#count").html(object);		}	);	return response;}</body><body package="AppeX-Examples-Seaside">getCount(){/** This method was generated from pragma &lt;json: 'getCount'&gt; in method AppeX.SeasideWelcome&gt;&gt;getCount.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.SeasideWelcome&gt;&gt;getCount.*	- Click on the item labeled "Generate SeasideWelcomeClient.getCount" in the method menu.*/	var response = this.asyncMessageToServer("getCount");	response.onSuccess(		function(object) {			$("#count").html(object);		}	);}</body><body package="AppeX-Examples-Seaside">increaseCounter(){/** This method was generated from pragma &lt;json: 'increaseCounter'&gt; in method AppeX.SeasideWelcome&gt;&gt;increaseCounter.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.SeasideWelcome&gt;&gt;increaseCounter.*	- Click on the item labeled "Generate SeasideWelcomeClient.increaseCounter" in the method menu.*/	var response = this.asyncMessageToServer("increaseCounter", arguments);	response.onSuccess(		function(object) {			$("#count").html(object);		}	);	return response;}</body><body package="AppeX-Examples-Seaside">linkToSeaside(){/** This method was generated from pragma &lt;json: 'linkToSeaside'&gt; in method AppeX.SeasideWelcome&gt;&gt;linkToSeaside.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.SeasideWelcome&gt;&gt;linkToSeaside.*	- Click on the item labeled "Generate SeasideWelcomeClient.linkToSeaside" in the method menu.*/	var	self = this,		response = this.asyncMessageToServer("linkToSeaside", this.seasideSession);	response.onSuccess(		function(object) {			if (self.isAppeX) {				self.getCount();			}		}	);	return response;}</body></methods><methods><class-id>AppeX.SeasideWelcomeClient</class-id> <category>rendering</category><body package="AppeX-Examples-Seaside">renderCounterExample() {	if (this.counterRendered) {		return;	};	var self = this;	var decorator =	$("&lt;div&gt;")		.attr("id", "decorator")		.append("&lt;p&gt;This is a  (possibly somewhat contrived) example of Seaside / AppeX integration.  Suppose that you have a Seaside component on your page that displays some information from your web server. Now you want to AJAX-ify the component (i.e. not reload pages to display new data upon user interaction),  without using cryptic Seaside-generated AJAX code.&lt;/p&gt;")		.append("&lt;p&gt;When you click the 'Toggle' button below, the counter component will change. You will also notice that the '++' and '--' elements will toggle between simple links and buttons, and the counter will be restored to its previous state.&lt;p&gt;")		.append("&lt;p&gt;If you click the 'Back' button and then the 'Counter' link to come to this page again, the counter's state will depend on whether the page was last left as decorated or not. Seaside will always reset the counter back to zero, but AppeX will retrieve the last known value from its session.&lt;/p&gt;")		.append("&lt;p&gt;Also, clicking the '++' and '--' buttons when the page is AppeX decorated will not result in new page loads. Instead, the counter will use AJAX to update its state.&lt;/p&gt;")		.append("&lt;p&gt;You are encouraged to browse the SeasideWelcomeClient class in AppeX-Examples-Seaside package to look at how this is done.&lt;/p&gt;")		.appendTo(".seasideExample");		$("&lt;button&gt;")		.button()		.text("Toggle")		.css("padding-left", "1em")		.css("padding-right", "1em")		.click(function(){			self.toggleAppeX();		})		.appendTo(decorator);	if (this.isAppeX) {		this.decorateCongrats();		this.decorateCounterExample();	};		this.counterRendered = true;}</body><body package="AppeX-Examples-Seaside">renderGettingStarted() {	this.decorateCongrats();}</body></methods><methods><class-id>AppeX.SeasideWelcomeClient</class-id> <category>initialize</category><body package="AppeX-Examples-Seaside">postInstall() {// I have been installed. Extract seaside session and link to Seaside.	this.extractSeasideSession();	this.linkToSeaside();	this.callSuper("postInstall", []);	return this;}</body></methods><methods><class-id>AppeX.SeasideWelcomeClient</class-id> <category>javascript - initialization</category><body package="AppeX-Examples-Seaside">initialize(){	this.hrefs = {};	this.isAppeX = this.getItemFromStorage("isAppeX", window.sessionStorage);}</body></methods><methods><class-id>AppeX.SeasideWelcome</class-id> <category>services</category><body package="AppeX-Examples-Seaside">decreaseCounter	&lt;json: 'decreaseCounter'&gt;		^ counter := counter - 1</body><body package="AppeX-Examples-Seaside">getCount	&lt;json: 'getCount'&gt;	^ counter</body><body package="AppeX-Examples-Seaside">increaseCounter	&lt;json: 'increaseCounter'&gt;		^ counter := counter + 1</body><body package="AppeX-Examples-Seaside">linkToSeaside"Link myself to an instance of Seaside.WASession that represents the Seaside welcome application (WAWelcome)."	&lt;json: 'linkToSeaside'&gt;	| application seasideSessionKey |	"Assuming the Seaside welcome application has been registered, 'application' will be the default handler."	application := Seaside.WADispatcher default defaultHandler.	seasideSessionKey := self currentRequestArguments.	seasideSession ifNotNil: [		seasideSession key = seasideSessionKey ifTrue: [			(seasideSession properties at: #appexSession ifAbsent: [nil]) == self				ifTrue: [ ^self sessionId -&gt; seasideSessionKey]]].		application cache keysAndValuesDo: [ :key :object | (object isKindOf: Seaside.WASession) ifTrue: [			object key = seasideSessionKey ifTrue: [				"I've found a WASession whose key is same as passed in the arguments.				Put myself in its properties and return the association."				seasideSession := object.				seasideSession properties at: #appexSession put: self.				^ self sessionId -&gt; seasideSessionKey]]].	"If I reached this point, I didn't find the corresponding session. I has probably expired.	If I have previously cached seasideSession, remove myself from its properties and clear my seasideSession."	seasideSession ifNotNil: [ seasideSession properties removeKey: #appexSession ifAbsent: []].	seasideSession := nil.	^ self sessionId -&gt; nil</body></methods><methods><class-id>AppeX.SeasideWelcome class</class-id> <category>css</category><body package="AppeX-Examples-Seaside">defaultStyle	"Return the defaultStyle. Normally, a defaultStyle is undefined, but if an application needs one, it should override this message. "	&lt;css: 'defaultStyle.css'&gt;	^ '.header .appexified {	color: DarkOrange;//	font-weight: bold;}.getting-started.appexified {	background-color: OldLace;	border: thin dotted LightGrey;}'</body></methods><methods><class-id>AppeX.SeasideWelcome class</class-id> <category>configuration</category><body package="AppeX-Examples-Seaside">serverConfiguration	&lt;server: 'Seaside' path: #{AppeX.SeasideWelcome.DefaultPath}&gt;</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationClient</name><environment>AppeX</environment><super>AppeX.JavascriptObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>javascriptLibrary </class-inst-vars><imports></imports><category>bootstrap</category><attributes><package>AppeX-Client</package></attributes></class><class><name>Application</name><environment>AppeX</environment><super>SiouX.HttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientSubscriptions session eventStream </inst-vars><class-inst-vars>settings requestActions subscriptionRegistry codeComposer combinedJavascriptLibrary </class-inst-vars><imports>			private Tools.Pragma			private Xtreams.*			private SiouX.*			private Protocols.*			</imports><category></category><attributes><package>AppeX-Server</package></attributes></class><class><name>WACounter</name><environment>Seaside</environment><super>Seaside.WAExampleComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>count </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Examples-Misc</category><attributes><package>Seaside-Examples</package></attributes></class><class><name>WAWelcome</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component </inst-vars><class-inst-vars></class-inst-vars><imports>			Smalltalk.JQuery.*			</imports><category>Seaside-Welcome</category><attributes><package>Seaside-Welcome</package></attributes></class><class><name>WAWelcomeGettingStarted</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>componentCreator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Welcome</category><attributes><package>Seaside-Welcome</package></attributes></class></st-source>