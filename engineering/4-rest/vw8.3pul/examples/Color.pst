<?xml version="1.0"?><st-source><!-- Name: Color-ExampleNotice: Copyright 2001-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains ColorExample class, which demonstrates programmatically changing the color of widgets during runtime, by accessing the widgets' wrappers.DbIdentifier: bear73DbTrace: 427901DbUsername: smichaelDbVersion: 8.0 - 1PackageName: Color-ExampleParcel: #('Color-Example')ParcelName: Color-ExamplePrintStringCache: (8.0 - 1,smichael)Version: 8.0 - 1Date: 5:06:41 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:41 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ColorExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color colorLayer sampleText sampleList sampleTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>Color-Example</package></attributes></class><comment><class-id>Examples.ColorExample</class-id><body>ColorExample class demonstrates how to programmatically apply colors to various widgets during runtime.</body></comment><methods><class-id>Examples.ColorExample</class-id> <category>actions</category><body package="Color-Example">applyColor	| c layerMessage |	c := ColorValue perform: self color value.	layerMessage := self colorLayer value.	self perform: layerMessage with: c.</body><body package="Color-Example">backgroundColor: aColor	"For each sample widget, change the indicated color layer."	| wrapper lookPref |	self sampleWidgets do: [ :widgetID |		wrapper := (self builder componentAt: widgetID).		lookPref := wrapper lookPreferences backgroundColor: aColor.		wrapper lookPreferences: lookPref].</body><body package="Color-Example">foregroundColor: aColor	"For each sample widget, change the indicated color layer."	| wrapper lookPref |	self sampleWidgets do: [ :widgetID |		wrapper := (self builder componentAt: widgetID).		lookPref := wrapper lookPreferences foregroundColor: aColor.		wrapper lookPreferences: lookPref].</body><body package="Color-Example">selectionBackgroundColor: aColor	"For each sample widget, change the indicated color layer."	| wrapper lookPref |	self sampleWidgets do: [ :widgetID |		wrapper := (self builder componentAt: widgetID).		lookPref := wrapper lookPreferences selectionBackgroundColor: aColor.		wrapper lookPreferences: lookPref].</body><body package="Color-Example">selectionForegroundColor: aColor	"For each sample widget, change the indicated color layer."	| wrapper lookPref |	self sampleWidgets do: [ :widgetID |		wrapper := (self builder componentAt: widgetID).		lookPref := wrapper lookPreferences selectionForegroundColor: aColor.		wrapper lookPreferences: lookPref].</body></methods><methods><class-id>Examples.ColorExample</class-id> <category>aspects</category><body package="Color-Example">color	^color</body><body package="Color-Example">colorLayer	^colorLayer</body><body package="Color-Example">sampleList	^sampleList</body><body package="Color-Example">sampleTable	^sampleTable</body><body package="Color-Example">sampleText	^sampleText</body></methods><methods><class-id>Examples.ColorExample</class-id> <category>initialize-release</category><body package="Color-Example">initialize	| tableList |	color := #red asValue.	colorLayer := #backgroundColor: asValue.	"Sample data"	sampleList := SelectionInList with: ColorValue constantNames.	tableList := TwoDList		on: #( 'Red' 'Cyan' 'Green' 'Magenta' 'Blue' 'Yellow' )		columns: 2		rows: 3.	sampleTable := TableInterface new		selectionInTable: (SelectionInTable with: tableList).	sampleText := ColorValue comment asValue.</body></methods><methods><class-id>Examples.ColorExample</class-id> <category>private</category><body package="Color-Example">sampleWidgets	^#(		#actionButton		#checkBox		#radioButton		#menuButton		#inputField		#slider		#label		#divider		#box		#region		#list		#table		#textEditor )</body></methods><methods><class-id>Examples.ColorExample class</class-id> <category>interface specs</category><body package="Color-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'ColorExample' 			#min: #(#Point 20 20 ) 			#max: #(#Point 310 480 ) 			#bounds: #(#Rectangle 653 416 963 896 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 9 44 ) 					#label: 'Apply to:' ) 				#(#LabelSpec 					#layout: #(#Point 9 8 ) 					#label: 'Color:' ) 				#(#MenuButtonSpec 					#layout: #(#Rectangle 94 8 194 33 ) 					#model: #color 					#menu: #colorMenu ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 13 145 62 165 ) 					#name: #actionButton 					#label: 'Action' 					#defaultable: true ) 				#(#CheckBoxSpec 					#layout: #(#Point 14 170 ) 					#name: #checkBox 					#label: 'Check Box' ) 				#(#RadioButtonSpec 					#layout: #(#Point 11 193 ) 					#name: #radioButton 					#label: 'Radio Button' ) 				#(#MenuButtonSpec 					#layout: #(#Rectangle 9 229 109 254 ) 					#name: #menuButton 					#label: 'Choice1' ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 10 259 110 280 ) 					#name: #inputField ) 				#(#SliderSpec 					#layout: #(#Rectangle 11 288 91 312 ) 					#name: #slider 					#orientation: #horizontal ) 				#(#LabelSpec 					#layout: #(#Point 9 325 ) 					#name: #label 					#label: 'Label' ) 				#(#DividerSpec 					#layout: #(#Rectangle 10 358 110 362 ) 					#name: #divider ) 				#(#GroupBoxSpec 					#layout: #(#Rectangle 9 362 60 420 ) 					#name: #box 					#label: 'Box' ) 				#(#RegionSpec 					#layout: #(#Rectangle 4 425 78 475 ) 					#name: #region 					#lineWidth: 4 					#regionType: #ellipse ) 				#(#SequenceViewSpec 					#layout: #(#Rectangle 190 134 290 234 ) 					#name: #list 					#model: #sampleList ) 				#(#TableViewSpec 					#layout: #(#Rectangle 190 252 290 352 ) 					#name: #table 					#model: #sampleTable 					#showHGrid: true 					#showVGrid: true ) 				#(#TextEditorSpec 					#layout: #(#Rectangle 190 371 290 471 ) 					#name: #textEditor 					#model: #sampleText ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 94 81 178 106 ) 					#model: #applyColor 					#label: 'Apply' 					#isDefault: true 					#defaultable: true ) 				#(#MenuButtonSpec 					#layout: #(#Rectangle 94 44 269 69 ) 					#model: #colorLayer 					#menu: #colorLayers ) 				#(#DividerSpec 					#layout: #(#Rectangle -7 130 311 134 ) ) ) ) )</body></methods><methods><class-id>Examples.ColorExample class</class-id> <category>resources</category><body package="Color-Example">colorLayers	"MenuEditor new openOnClass: self andSelector: #colorLayers"	&lt;resource: #menu&gt;	^#(#Menu #(		#(#MenuItem #label: 'Foreground' ) 		#(#MenuItem #label: 'Background' ) 		#(#MenuItem #label: 'Selection Foreground' ) 		#(#MenuItem #label: 'Selection Background' ) ) 		#(4 ) 		#(#foregroundColor: #backgroundColor: #selectionForegroundColor: #selectionBackgroundColor: ) ) decodeAsLiteralArray</body><body package="Color-Example">colorMenu	"MenuEditor new openOnClass: self andSelector: #colorMenu"	&lt;resource: #menu&gt;	^#(#Menu #(		#(#MenuItem #label: 'white' ) 		#(#MenuItem #label: 'black' ) 		#(#MenuItem #label: 'red' ) 		#(#MenuItem #label: 'green' ) 		#(#MenuItem #label: 'blue' ) 		#(#MenuItem #label: 'cyan' ) 		#(#MenuItem #label: 'magenta' ) 		#(#MenuItem #label: 'yellow' ) ) 		#(2 6 ) 		#(#white #black #red #green #blue #cyan #magenta #yellow ) ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>