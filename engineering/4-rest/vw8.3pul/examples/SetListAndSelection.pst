<?xml version="1.0"?><st-source><!-- Name: SetListAndSelection-ExamplesNotice: Copyright 2003-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel contains two examples illustrating the use of #setList:selecting:, which updates the list in a list widget and sets the selection(s). There are two examples, one for SelectionInList and another for MultiSelectionInList.DbIdentifier: bear73DbTrace: 427983DbUsername: smichaelDbVersion: 1.3PackageName: SetListAndSelection-ExamplesParcel: #('SetListAndSelection-Examples')PrintStringCache: (1.3,smichael)Version: 1.3Date: 5:06:46 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:46 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SetListAndSelectionExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>removeSelect targetList selectionList undoList redoList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-List + Selection Updates</category><attributes><package>SetListAndSelection-Examples</package></attributes></class><comment><class-id>Examples.SetListAndSelectionExample</class-id><body>The SetListAndSelectionExample application demonstrates the use of #setList:selecting: to set both the contents and selection of a single-select list widget while maintaining visibility of the selection as much as possible. Its application interface includes one user editable supply list used to set the target list and another list to set the target list selection.  Items from the supply list may be selected for removal by the user and these changes may be later removed or restored to compare its affect on the target list.  The visible position of the targetList selection should remain unaltered when set unless the item is missing from the new list.Instance Variables:	redoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value to be removed again from the removeSelect list.	removeSelect	&lt;MultiSelectionInList&gt;	list model of class names to set the targetList list to.	selectionList &lt;SelectionInList&gt;	list model that determines the selection (if any) targetList is set to.  	targetList	&lt;SelectionInList&gt;	list model that displays a selection and list determined by selectionList and removeSelect.	undoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value to be restored to the removeSelect list.</body></comment><class><name>SetListAndMultiSelectionExample</name><environment>Examples</environment><super>Examples.SetListAndSelectionExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-List + Selection Updates</category><attributes><package>SetListAndSelection-Examples</package></attributes></class><comment><class-id>Examples.SetListAndMultiSelectionExample</class-id><body>The SetListAndMultiSelectionExample application demonstrates the use of #setList:selecting: to set both the contents and selections of a multiple selection list widget while maintaining visibility of the selections as much as possible. Its application interface includes one user editable supply list used to set the target list and another list to set the target list selections.  Items from the supply list may be selected for removal by the user and these changes may later be removed or restored to compare its affect on the target list.  The visible position of the targetList selections should remain unaltered when set unless a formerly selected item is missing from the new list.In the targetList new selections may change position between themselves as well as their order in the list.  The list and selections of targetList are set using the message #setList:selecting: which requires that the first visible selection matching any prior selection appear stationary. If there is no new selection matching a prior selection then the targetList list widget scrolls to make the first new selection visible in its place.  Or, if the new list of targetList is smaller its list widget scrolls upward as needed so that at least one list item (e.g. the last) remains visible.  This last requirement ensures the current scroll position is not altered unless the contents of the list would disappear entirely off the widget.Instance Variables:	redoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value that might be removed later from the removeSelect list.	removeSelect	&lt;MultiSelectionInList&gt;	list model of class names to set the targetList list to.	selectionList &lt;MultiSelectionInList&gt;	list model that determines the selections (if any) targetList is set to.  	targetList	&lt;SelectionInList&gt;	list model that displays selections and list determined by selectionList and removeSelect.	undoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value to be restored to the removeSelect list.</body></comment><methods><class-id>Examples.SetListAndSelectionExample</class-id> <category>actions</category><body package="SetListAndSelection-Examples">redoSelectionsRemove	| list |	list := self removeSelect list.	(undoList add: redoList removeLast) do: 			[:assoc | 			list remove: assoc value].</body><body package="SetListAndSelection-Examples">removeSelections	| list |	list := self removeSelect list.	undoList add:(self removeSelect selectionIndexes asSortedCollection asArray collect:[:index| index -&gt; (list at: index)]).	redoList := OrderedCollection new.	list removeAll: self removeSelect selections.</body><body package="SetListAndSelection-Examples">setListAndSelection	self targetList setList: self removeSelect list copy selecting: self selectionList selection</body><body package="SetListAndSelection-Examples">undoSelectionsRemove	| list |	list := self removeSelect list.	(redoList add: undoList removeLast) do: 			[:assoc | 			list add: assoc value beforeIndex: assoc key.			self removeSelect selectionIndexes add: assoc key].</body></methods><methods><class-id>Examples.SetListAndSelectionExample</class-id> <category>testing</category><body package="SetListAndSelection-Examples">hasRedo	^redoList notEmpty</body><body package="SetListAndSelection-Examples">hasSelections	^self removeSelect selectionIndexes notEmpty</body><body package="SetListAndSelection-Examples">hasUndo	^undoList notEmpty</body></methods><methods><class-id>Examples.SetListAndSelectionExample</class-id> <category>initialize-release</category><body package="SetListAndSelection-Examples">initialize	super initialize.	undoList := OrderedCollection new.	redoList := OrderedCollection new.	removeSelect := MultiSelectionInList with: (Object allSubclasses asSortedCollection:[:a :b| a name &lt; b name]) asList.</body></methods><methods><class-id>Examples.SetListAndSelectionExample</class-id> <category>aspects</category><body package="SetListAndSelection-Examples">removeSelect	^removeSelect</body><body package="SetListAndSelection-Examples">selectionList	^selectionList isNil 		ifTrue: [selectionList := SelectionInList with: self removeSelect list copy]		ifFalse: [selectionList]</body><body package="SetListAndSelection-Examples">targetList	^targetList isNil		ifTrue:			[targetList := SelectionInList new]		ifFalse:			[targetList]</body></methods><methods><class-id>Examples.SetListAndMultiSelectionExample</class-id> <category>actions</category><body package="SetListAndSelection-Examples">setListAndSelection	self targetList setList: self removeSelect list copy selecting: self selectionList selections</body></methods><methods><class-id>Examples.SetListAndMultiSelectionExample</class-id> <category>aspects</category><body package="SetListAndSelection-Examples">selectionList	^selectionList isNil 		ifTrue: [selectionList := MultiSelectionInList with: self removeSelect list copy]		ifFalse: [selectionList]</body><body package="SetListAndSelection-Examples">targetList	^targetList isNil		ifTrue:			[targetList := MultiSelectionInList new]		ifFalse:			[targetList]</body></methods><methods><class-id>Examples.SetListAndSelectionExample class</class-id> <category>resources</category><body package="SetListAndSelection-Examples">classMenu	"Tools.MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'remove' 				#enabled: false 				#value: #removeSelections 				#enablementSelector: #hasSelections ) 			#(#{UI.MenuItem} 				#rawLabel: 'undo remove' 				#enabled: false 				#value: #undoSelectionsRemove 				#enablementSelector: #hasUndo ) 			#(#{UI.MenuItem} 				#rawLabel: 'redo remove' 				#enabled: false 				#value: #redoSelectionsRemove 				#enablementSelector: #hasRedo ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.SetListAndSelectionExample class</class-id> <category>interface specs</category><body package="SetListAndSelection-Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'List update w/o selection position change'			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1600 1200 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1442 1093 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 0 ) 					#name: #Label3 					#label: 'Add/Remove List Items' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 10 0.333333 1 0 ) 					#name: #Label5 					#label: 'Select' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0.666666 1 0 ) 					#name: #Label4 					#label: 'Target' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0.333333 25 0 -20 0.666666 -10 1 ) 					#name: #List5 					#model: #selectionList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0.666666 25 0 -5 1 -10 1 ) 					#name: #List6 					#model: #targetList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -15 0.666666 -11 0.5 20 0.666666 11 0.5 ) 					#name: #ActionButton3 					#model: #setListAndSelection 					#label: '&gt;&gt;' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -10 0.333333 -10 1 ) 					#name: #List4 					#model: #removeSelect 					#menu: #classMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.333333 0 0 0.5 0 ) 					#name: #Label1 					#label: '+' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.666666 2 0 0.5 0 ) 					#name: #Label2 					#label: '=' ) ) ) )</body></methods><methods><class-id>Examples.SetListAndMultiSelectionExample class</class-id> <category>interface specs</category><body package="SetListAndSelection-Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label:  'List update w/o selection position change'			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1600 1200 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1442 1093 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 0 ) 					#name: #Label3 					#label: 'Add/Remove List Items' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 10 0.333333 1 0 ) 					#name: #Label5 					#label: 'Select' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 25 0.666666 1 0 ) 					#name: #Label4 					#label: 'Target' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -15 0.666666 -11 0.5 20 0.666666 11 0.5 ) 					#name: #ActionButton3 					#model: #setListAndSelection 					#label: '&gt;&gt;' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -10 0.333333 -10 1 ) 					#name: #List4 					#model: #removeSelect 					#menu: #classMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0.666666 25 0 -5 1 -10 1 ) 					#name: #List6 					#model: #targetList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0.333333 25 0 -20 0.666666 -10 1 ) 					#name: #List5 					#model: #selectionList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.333333 2 0 0.5 0 ) 					#name: #Label1 					#label: '+' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.666666 2 0 0.5 0 ) 					#name: #Label2 					#label: '=' ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>