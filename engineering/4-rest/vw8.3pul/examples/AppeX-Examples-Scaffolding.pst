<?xml version="1.0"?><st-source><!-- Name: AppeX-Examples-ScaffoldingNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: The parcel includes two AppeX-Scaffolding demo application:  Driver and GenealogyApplication. Usage:These demos use the  SQLite database.  Therefore, in order to run them,  you must ensure  that you have sqlite.dll installed in your system in one of the default directories. (To see the current default directories, you can inspect the SQLite3Interface class definition in a Refactoring Browser and check attributes)..To start the AppeX server:Refer to  the AppeX-Examples-Server package comments.Select DriverApplication or GenealogyApplication to open Scaffolding examples.DbIdentifier: bear73DbTrace: 502800DbUsername: vdegenDbVersion: 8.3 - 7DevelopmentPrerequisites: #(#(#any 'GlorpActiveRecord' '') #(#any 'SQLite3EXDI' '') #(#any 'AppeX-ActiveRecord' '') #(#any 'AppeX-Scaffolding' '') #(#any 'AppeX-Examples-Server' ''))PackageName: AppeX-Examples-ScaffoldingParcel: #('AppeX-Examples-Scaffolding')ParcelName: AppeX-Examples-ScaffoldingPrerequisiteDescriptions: #(#(#name 'GlorpActiveRecord' #componentType #package) #(#name 'SQLite3EXDI' #componentType #package) #(#name 'AppeX-ActiveRecord' #componentType #package) #(#name 'AppeX-Scaffolding' #componentType #package) #(#name 'AppeX-Examples-Server' #componentType #package))PrerequisiteParcels: #(#('GlorpActiveRecord' '') #('SQLite3EXDI' '') #('AppeX-ActiveRecord' '') #('AppeX-Scaffolding' '') #('AppeX-Examples-Server' ''))PrintStringCache: (8.3 - 7,vdegen)Version: 8.3 - 7Date: 3:30:55 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:30:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Avocation</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description years </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.Avocation</class-id><body>Part of the Genealogy example.  An ActiveRecord class.Personage to Avocation illustrates 1-Many table relation.Instance Variables:	description	&lt;String&gt;	years	&lt;Number&gt;	</body></comment><class><name>FamilyTreeListPresenter</name><environment>AppeX</environment><super>AppeX.ListPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.FamilyTreeListPresenter</class-id><body>FamilyTreeListPresenter corresponds the JavaScript constructor function of the same name.  This class illustrates customizing header labels for a list presentation,and deleting objects from the list (and from the underlying database).It uses the naming convention "path" capitalized + presenter type + Presenter (in this case FamilyTree + List + Presenter).The framework will automatically locate this class based on its name and use it in the appropriate circumstances (if it exists), instead of its superclass ListPresenter.</body></comment><class><name>GenealogyApplication</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Glorp.*			</imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.GenealogyApplication</class-id><body>Genealogy Application is a moderately complex database application that shows how fetch, add, update and remove objects in the database.It illustrates 1-1, 1-Many, and Many-Many mappings, as well as custom presenters and column labeling.</body></comment><class><name>DriverApplication</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Glorp.*			</imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.DriverApplication</class-id><body>The application is implemented using Scaffolding framework. The Scaffolding framework builds web pages to update records from DRIVER and VEHICLE database tables. </body></comment><class><name>PersonageEditPresenter</name><environment>AppeX</environment><super>AppeX.EditPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.PersonageEditPresenter</class-id><body>PersonageEditPresenter corresponds the JavaScript constructor function of the same name. The class illustrates extending EditPresenter behavior to allow deleting and edding relations.It uses the naming convention "path" capitalized + presenter type + Presenter (in this case Personage + Edit + Presenter).The framework will automatically locate this class based on its name and use it in the appropriate circumstances (if it exists), instead of its superclass EditPresenter.</body></comment><class><name>GenealogyClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.GenealogyClient</class-id><body>The class contains the client side Javascript code for the CustomerApplication example.</body></comment><class><name>FamilyTree</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description rootPersonage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.FamilyTree</class-id><body>An ActiveRecord class, and root of the hiearchy of domain object relationships for the Genealogy example.Instance Variables:	description	&lt;String&gt;		rootPersonage	&lt;Personage&gt; an instance of another ActiveRecord class</body></comment><class><name>AvocationEditPresenter</name><environment>AppeX</environment><super>AppeX.EditPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.AvocationEditPresenter</class-id><body>The class illustrates extending EditPresenter behavior to allow validating years.</body></comment><class><name>Driver</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address isProfessionalDriver vehicles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.Driver</class-id><body>Instance Variables:	vehicles	&lt;OrderedCollection of: Vehicle&gt;		name	&lt;String&gt; name	address &lt;String&gt;	isProfessionalDriver &lt;Boolean&gt;</body></comment><class><name>Vehicle</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model make mileage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.Vehicle</class-id><body>Vehicle Instance Variables:	model	&lt;String&gt;	a vehicle model	make &lt;String&gt;	mileage &lt;Integer&gt;</body></comment><class><name>LifeEventEditPresenter</name><environment>AppeX</environment><super>AppeX.EditPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.LifeEventEditPresenter</class-id><body>The class illustrates extending EditPresenter behavior to allow building customized widgets for Date and Time types</body></comment><class><name>Dwelling</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>realm nickName squareFootage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.Dwelling</class-id><body>Part of the Genealogy example.  An ActiveRecord class.Instance Variables:	nickName	&lt;String&gt; 	realm	&lt;String&gt; 	squareFootage	&lt;Numeric&gt;	 </body></comment><class><name>Personage</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name appellation mother father children dwelling avocations gender lifeEvents married dayOfBirth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.Personage</class-id><body>Instance Variables:	name		&lt;String&gt; name	appellation 	&lt;String&gt; appellation	mother		&lt;Personage&gt; mother	father		&lt;Personage&gt; father	children		&lt;OrderedCollection of: Personage&gt;		dwelling		&lt;Dwelling&gt; dwelling	avocations	&lt;OrderedCollection of: String&gt;	</body></comment><class><name>DriverClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.DriverClient</class-id><body>The class contains the client side Javascript code for the DriverApplication example.</body></comment><class><name>LifeEvent</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description date time </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.LifeEvent</class-id><body>Part of the Genealogy example.  An ActiveRecord class.Personage to LifeEvent illustrates 1-Many Instance Variables:	date	&lt;Date&gt; 	description	&lt;String&gt;	 	time	&lt;Time&gt;	 </body></comment><class><name>ParentSelectionPresenter</name><environment>AppeX</environment><super>AppeX.SelectionPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.ParentSelectionPresenter</class-id><body>The class illustrates extending SelectionPresenter behavior to allow displaying customized page title</body></comment><class><name>DwellingEditPresenter</name><environment>AppeX</environment><super>AppeX.EditPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.DwellingEditPresenter</class-id><body>The class illustrates extending EditPresenter behavior to allow displaying customized page title validating square footage</body></comment><class><name>DriverSchema</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Glorp.*			</imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.DriverSchema</class-id><body>The class the descriptor system for active record objects from DRIVER and VEHICLE tables.</body></comment><class><name>GenealogySchema</name><environment>AppeX</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Glorp.*			</imports><category></category><attributes><package>AppeX-Examples-Scaffolding</package></attributes></class><comment><class-id>AppeX.GenealogySchema</class-id><body>GenealogySchema describes the following tables for the Genealogy Example:FAMILYTREE PERSONAGE PERSONAGE_LIFEEVENT DWELLING PERSONAGES_TO_CHILDREN PERSONAGE_AVOCATIONLIFEEVENTAVOCATION</body></comment><methods><class-id>AppeX.Avocation</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">description	^description</body><body package="AppeX-Examples-Scaffolding">description: anObject	description := anObject</body><body package="AppeX-Examples-Scaffolding">years	^years</body><body package="AppeX-Examples-Scaffolding">years: anObject	years := anObject</body></methods><methods><class-id>AppeX.Avocation</class-id> <category>printing</category><body package="AppeX-Examples-Scaffolding">printOn: aStream	aStream nextPutAll: self description.	years ifNotNil: [ aStream nextPutAll: ' for ', years printString, ' years']</body></methods><methods><class-id>AppeX.Avocation class</class-id> <category>instance creation</category><body package="AppeX-Examples-Scaffolding">acting	^self new		description: 'Acting';		years: 4;		yourself</body><body package="AppeX-Examples-Scaffolding">hiking	^self new		description: 'Hiking';		years: 5;		yourself</body><body package="AppeX-Examples-Scaffolding">knitting	^self new		description: 'Knitting';		years: 3;		yourself</body><body package="AppeX-Examples-Scaffolding">mining	^self new		description: 'Mining';		years: 20;		yourself</body><body package="AppeX-Examples-Scaffolding">singing	^self new		description: 'Singing';		years: 10;		yourself</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>html</category><body package="AppeX-Examples-Scaffolding">presenterClasses		^(JavascriptLibrary named: 'AppeX.PresenterLibrary.js') classes</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">applicationClientClass	^GenealogyClient</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>database defaults</category><body package="AppeX-Examples-Scaffolding">activeRecordDescriptorSystem 	^GenealogySchema</body><body package="AppeX-Examples-Scaffolding">newActiveRecordLogin		^Glorp.Login new		database: Glorp.SQLite3Platform new;		username: 'example';		password: String new;		connectString: 'Genealogy.sqlite';		yourself</body><body package="AppeX-Examples-Scaffolding">newActiveRecordToPathMap	^Dictionary new		at: FamilyTree put: 'familytree';		at: Personage put: 'personage';		at: Avocation put: 'avocation';		at: Dwelling put: 'dwelling';		at: LifeEvent put: 'lifeevent';		yourself</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>css</category><body package="AppeX-Examples-Scaffolding">datePickerCSS"	Return the css rules for styling the datepicker used in this demo"	^ '.ui-datepicker {	width: 216px;	height: auto;	margin: 5px auto 0;	font: 9pt Arial, sans-serif;	box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, .5);}.ui-datepicker a {	text-decoration: none;}/* DatePicker Table */.ui-datepicker table {	width: 100%;	background-color: aliceblue;}.ui-datepicker-header {	//background: url("../img/dark_leather.png") repeat 0 0 #000;	background-color: aliceblue;	//color: #e0e0e0;	font-weight: bold;	//color: #856E6E	box-shadow: inset 0px 1px 1px 0px rgba(250, 250, 250, .2);	//text-shadow: 1px -1px 0px #000;	filter: dropshadow(color=#000, offx=1, offy=-1);	line-height: 30px;	border-width: 1px 0 0 0;	border-style: solid;	border-color: #111;}.ui-datepicker-title {	text-align: center;}.ui-datepicker-prev, .ui-datepicker-next {	display: inline-block;	width: 30px;	height: 30px;	text-align: center;	cursor: pointer;	//background-image: url("../img/arrow.png");	background-repeat: no-repeat;	background-color: gray;	line-height: 600%;	overflow: hidden;}.ui-datepicker-prev {	float: left;	background-position: center -30px;}.ui-datepicker-next {	float: right;	background-position: center 0px;}.ui-datepicker thead {	background-color: #f7f7f7;	background-image: -moz-linear-gradient(top,  #f7f7f7 0%, #f1f1f1 100%);	background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f7f7f7), color-stop(100%,#f1f1f1));	background-image: -webkit-linear-gradient(top,  #f7f7f7 0%,#f1f1f1 100%);	background-image: -o-linear-gradient(top,  #f7f7f7 0%,#f1f1f1 100%);	background-image: -ms-linear-gradient(top,  #f7f7f7 0%,#f1f1f1 100%);	background-image: linear-gradient(top,  #f7f7f7 0%,#f1f1f1 100%);	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr="#f7f7f7", endColorstr="#f1f1f1'',GradientType=0 );	border-bottom: 1px solid #bbb;}.ui-datepicker th {	text-transform: uppercase;	font-size: 6pt;	padding: 5px 0;	color: #666666;	text-shadow: 1px 0px 0px #fff;	filter: dropshadow(color=#fff, offx=1, offy=0);}.ui-datepicker tbody td {	padding: 0;	border-right: 1px solid #bbb;}.ui-datepicker tbody td:last-child {	border-right: 0px;}.ui-datepicker tbody tr {	border-bottom: 1px solid #bbb;}.ui-datepicker tbody tr:last-child {	border-bottom: 0px;}.ui-datepicker td span, .ui-datepicker td a {	display: inline-block;	font-weight: bold;	text-align: center;	width: 30px;	height: 30px;	line-height: 30px;	color: #666666;	text-shadow: 1px 1px 0px #fff;	filter: dropshadow(color=#fff, offx=1, offy=1);}.ui-datepicker-calendar .ui-state-default {	background: #ededed;	background: -moz-linear-gradient(top,  #ededed 0%, #dedede 100%);	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ededed), color-stop(100%,#dedede));	background: -webkit-linear-gradient(top,  #ededed 0%,#dedede 100%);	background: -o-linear-gradient(top,  #ededed 0%,#dedede 100%);	background: -ms-linear-gradient(top,  #ededed 0%,#dedede 100%);	background: linear-gradient(top,  #ededed 0%,#dedede 100%);	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr="#ededed", endColorstr="#dedede",GradientType=0 );	box-shadow: inset 1px 1px 0px 0px rgba(250, 250, 250, .5);}.ui-datepicker-calendar .ui-state-hover {	background: #f7f7f7;}.ui-datepicker-calendar .ui-state-active {	background: #6eafbf;	-webkit-box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, .1);	-moz-box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, .1);	box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, .1);	color: #e0e0e0;	text-shadow: 0px 1px 0px #4d7a85;	filter: dropshadow(color=#4d7a85, offx=0, offy=1);	border: 1px solid #55838f;	position: relative;	margin: -1px;}.ui-datepicker-unselectable .ui-state-default {	background: #f4f4f4;	color: #b4b3b3;}.ui-datepicker-calendar td:first-child .ui-state-active {	width: 29px;	margin-left: 0;}.ui-datepicker-calendar td:last-child .ui-state-active {	width: 29px;	margin-right: 0;}.ui-datepicker-calendar tr:last-child .ui-state-active {	height: 29px;	margin-bottom: 0;}'</body><body package="AppeX-Examples-Scaffolding">defaultStyle"	Define the styles that are specific to GenealogyApplication, regardless of theme."	^ 'body {	margin-bottom: 3em;}#theme-switcher {	position: fixed;	left: 0px;	right: 0px;	bottom: 0px;	text-align: center;	padding-top: 0.5em;	padding-bottom: 0.2em;	background-color: rgba(255, 255, 255, 0.95);}.ListPresenter .delete-column {	text-align: right;}', self datePickerCSS</body><body package="AppeX-Examples-Scaffolding">defaultTheme	^ BoldScaffoldingTheme new</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>database</category><body package="AppeX-Examples-Scaffolding">initializeDatabaseRecords	| exists |	(exists := self login connectString asFilename exists) ifFalse: [		self activeRecordDescriptorSystem createTablesFor: self login]. 			self initializeGlorpSession: self login.		exists ifFalse: [ 		self glorpSession modify: AppeX.FamilyTree example in: [].		self glorpSession modify: AppeX.FamilyTree example2 in: [].		self glorpSession modify:  AppeX.Personage grandma in: [].		].		^self glorpSession</body><body package="AppeX-Examples-Scaffolding">reInitializeDatabaseRecords	"self reInitializeDatabaseRecords"	"Useful for resetting to baseline for testing or debugging.  No senders."	self activeRecordDescriptorSystem 		dropTablesFor: self login;		createTablesFor: self login. 			self initializeGlorpSession: self login.	self glorpSession modify: AppeX.FamilyTree example in: [].	self glorpSession modify: AppeX.FamilyTree example2 in: [].	self glorpSession modify:  AppeX.Personage grandma in: [].		^self glorpSession</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">applicationClientClass	^DriverClient</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>database</category><body package="AppeX-Examples-Scaffolding">activeRecordDescriptorSystem 	^DriverSchema</body><body package="AppeX-Examples-Scaffolding">createDatabaseRecordsUsing: aGlorpSession	| vehicle driver vehicles|	vehicles := OrderedCollection new.	#(	#('Toyota' 'Highlander' 5000)	#('Ford' 'Explore' 1000)	#('Toyota' 'Sienna' 3000)	#('Honda' 'CRV' 13000)	#('Toyota' 'Venza' 7000)	#('Honda' 'Pilot' 3000)	#('Ford' 'Escape' 10000)	#('Honda' 'Odyssey' 2000)		) do: [ :coll | 		vehicle := Vehicle new 					make: coll first; 					model: (coll at: 2); 					mileage: coll last; 					yourself.				aGlorpSession modify: vehicle in: [].		vehicles add: vehicle].			#(	#('Adam Smith' '22 First Street' false)	#('Anna Smith' '22 First Street' false)	#('John Doe' '44 Second Street' true)	#('Jane Doe' '44 Second Street' false)		#('Ned Cooper' '66 Sunny Street' true)			) doWithIndex: [ :coll :ind |		driver := Driver new 					name: coll first; 					address: (coll at: 2);					isProfessionalDriver: coll last; 					vehicles: (OrderedCollection with: (vehicles at: ind) with: (vehicles at: ind + 1));					yourself.				aGlorpSession modify: driver in: [].		]</body><body package="AppeX-Examples-Scaffolding">initializeDatabaseRecords	| exists |	(exists := self login connectString asFilename exists) ifFalse: [		self activeRecordDescriptorSystem createTablesFor: self login]. 			self initializeGlorpSession: self login.	exists ifFalse: [ self createDatabaseRecordsUsing: self glorpSession].</body><body package="AppeX-Examples-Scaffolding">newActiveRecordLogin	^Glorp.Login new		database: Glorp.SQLite3Platform new;		username: 'example';		password: String new;		connectString: 'driverTest.sqlite';		yourself</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>database defaults</category><body package="AppeX-Examples-Scaffolding">newActiveRecordToPathMap	^Dictionary new		at: Driver put: 'driver';		at: Vehicle put: 'vehicle';		yourself</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>css</category><body package="AppeX-Examples-Scaffolding">defaultTheme	^ DefaultScaffoldingTheme new</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>services</category><body package="AppeX-Examples-Scaffolding">isSQLiteAvailable	| result |	result := [SQLite3NonThreadedInterface new sqlite3_libversion_number ]				on: ExternalObjectNotFoundError				do: [:ex | ex return: -1].	^result &gt; 0</body></methods><methods><class-id>AppeX.FamilyTree</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">description	^description</body><body package="AppeX-Examples-Scaffolding">description: anObject	description := anObject</body><body package="AppeX-Examples-Scaffolding">rootPersonage	^rootPersonage</body><body package="AppeX-Examples-Scaffolding">rootPersonage: aPersonage	rootPersonage := aPersonage</body></methods><methods><class-id>AppeX.FamilyTree</class-id> <category>printing</category><body package="AppeX-Examples-Scaffolding">printOn: aStream	self description 		ifNil: [ super printOn: aStream ]		ifNotNil: [ aStream nextPutAll: self description ]</body></methods><methods><class-id>AppeX.FamilyTree class</class-id> <category>instance creation</category><body package="AppeX-Examples-Scaffolding">example"(self example)"	| root son dInLaw dwelling |	dwelling := Dwelling florida.	root := Personage grandpa.	root dwelling: dwelling.	root children do:[ :c | c father: root. c dwelling: dwelling].	son := root children first.	dInLaw := Personage daughter_in_law.	dInLaw children: son children.	son children do: [ :c | c father: son. c mother: dInLaw. c dwelling: dwelling].	son dwelling: dwelling.	dInLaw dwelling: dwelling.	^self new		description: 'Smith Family';		rootPersonage: root;		yourself</body><body package="AppeX-Examples-Scaffolding">example2"(self example2)"	| root son dInLaw dwelling |	dwelling := Dwelling florida2.	root := Personage grandpa2.	root dwelling: dwelling.	root children do:[ :c | c father: root. c dwelling: dwelling].	son := root children first.	dInLaw := Personage daughter_in_law2.	dInLaw children: son children.	son children do: [ :c | c father: son. c mother: dInLaw. c dwelling: dwelling].	son dwelling: dwelling.	dInLaw dwelling: dwelling.	^self new		description: 'Cooper Family';		rootPersonage: root;		yourself</body></methods><methods><class-id>AppeX.Driver</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">address	^address</body><body package="AppeX-Examples-Scaffolding">address: anObject	address := anObject</body><body package="AppeX-Examples-Scaffolding">isProfessionalDriver	^isProfessionalDriver</body><body package="AppeX-Examples-Scaffolding">isProfessionalDriver: anObject	isProfessionalDriver := anObject</body><body package="AppeX-Examples-Scaffolding">name	^name</body><body package="AppeX-Examples-Scaffolding">name: anObject	name := anObject</body><body package="AppeX-Examples-Scaffolding">vehicles	^vehicles</body><body package="AppeX-Examples-Scaffolding">vehicles: anObject	vehicles := anObject</body></methods><methods><class-id>AppeX.Vehicle</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">make	^make</body><body package="AppeX-Examples-Scaffolding">make: anObject	make := anObject</body><body package="AppeX-Examples-Scaffolding">mileage	^mileage</body><body package="AppeX-Examples-Scaffolding">mileage: anObject	mileage := anObject</body><body package="AppeX-Examples-Scaffolding">model	^model</body><body package="AppeX-Examples-Scaffolding">model: anObject	model := anObject</body></methods><methods><class-id>AppeX.Vehicle</class-id> <category>printing</category><body package="AppeX-Examples-Scaffolding">printOn: aStream	aStream nextPutAll: self make, ' ', self model, ' mileage: ', self mileage printString</body></methods><methods><class-id>AppeX.Dwelling</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">nickName	^nickName</body><body package="AppeX-Examples-Scaffolding">nickName: anObject	nickName := anObject</body><body package="AppeX-Examples-Scaffolding">realm	^realm</body><body package="AppeX-Examples-Scaffolding">realm: anObject	realm := anObject</body><body package="AppeX-Examples-Scaffolding">squareFootage	^squareFootage</body><body package="AppeX-Examples-Scaffolding">squareFootage: anObject	squareFootage := anObject</body></methods><methods><class-id>AppeX.Dwelling</class-id> <category>printing</category><body package="AppeX-Examples-Scaffolding">printOn: aStream	(self nickName isNil and: [self realm isNil]) ifTrue: [ ^super printOn: aStream].	self nickName notNil ifTrue: [aStream nextPutAll: self nickName].	self realm notNil ifTrue: [aStream nextPutAll: ' in ', self realm].</body></methods><methods><class-id>AppeX.Dwelling class</class-id> <category>instance creation</category><body package="AppeX-Examples-Scaffolding">florida	^self new		realm: 'Florida';		nickName: 'Seashore';		squareFootage: 20000;		yourself</body><body package="AppeX-Examples-Scaffolding">florida2	^self new		realm: 'Florida';		nickName: 'Swamp';		squareFootage: 20001;		yourself</body><body package="AppeX-Examples-Scaffolding">newYork	^self new		realm: 'New York';		nickName: 'NY';		squareFootage: 2000;		yourself</body><body package="AppeX-Examples-Scaffolding">newYork2	^self new		realm: 'New York';		nickName: 'High Rise';		squareFootage: 20;		yourself</body></methods><methods><class-id>AppeX.Personage</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">appellation	^appellation</body><body package="AppeX-Examples-Scaffolding">appellation: anObject	appellation := anObject</body><body package="AppeX-Examples-Scaffolding">avocations	^avocations</body><body package="AppeX-Examples-Scaffolding">avocations: anObject	avocations := anObject</body><body package="AppeX-Examples-Scaffolding">children	^children</body><body package="AppeX-Examples-Scaffolding">children: anObject	children := anObject</body><body package="AppeX-Examples-Scaffolding">dayOfBirth	^dayOfBirth</body><body package="AppeX-Examples-Scaffolding">dayOfBirth: anObject	dayOfBirth := anObject</body><body package="AppeX-Examples-Scaffolding">dwelling	^dwelling</body><body package="AppeX-Examples-Scaffolding">dwelling: anObject	dwelling := anObject</body><body package="AppeX-Examples-Scaffolding">father	^father</body><body package="AppeX-Examples-Scaffolding">father: anObject	father := anObject</body><body package="AppeX-Examples-Scaffolding">gender	^gender</body><body package="AppeX-Examples-Scaffolding">gender: anObject	gender := anObject</body><body package="AppeX-Examples-Scaffolding">lifeEvents	^lifeEvents</body><body package="AppeX-Examples-Scaffolding">lifeEvents: anObject	lifeEvents := anObject</body><body package="AppeX-Examples-Scaffolding">married	^married</body><body package="AppeX-Examples-Scaffolding">married: anObject	married := anObject</body><body package="AppeX-Examples-Scaffolding">mother	^mother</body><body package="AppeX-Examples-Scaffolding">mother: anObject	mother := anObject</body><body package="AppeX-Examples-Scaffolding">name	^name</body><body package="AppeX-Examples-Scaffolding">name: anObject	name := anObject</body></methods><methods><class-id>AppeX.Personage</class-id> <category>printing</category><body package="AppeX-Examples-Scaffolding">printOn: aStream 	self name notNil ifTrue: [aStream nextPutAll: self name].	self appellation notNil ifTrue: [aStream nextPutAll: ' ', self appellation].	self dayOfBirth notNil ifTrue: [aStream nextPutAll: ' Age: ', (Date today year - self dayOfBirth year) printString].</body></methods><methods><class-id>AppeX.Personage class</class-id> <category>instance creation</category><body package="AppeX-Examples-Scaffolding">daughter_in_law	^self new		name: 'Anna';		appellation: 'Smith';		dayOfBirth: (Date readFrom: 'May 5, 1966' readStream);		married: true;		gender: 'female';		avocations: (OrderedCollection with: Avocation knitting);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'May 20, 1966' readStream) time: (Time readFrom: (ReadStream on: '2:23:09 pm')) )						with: (LifeEvent graduatedSchool: (Date readFrom: 'June 6, 1986' readStream))						with: (LifeEvent married: (Date readFrom: 'October 2, 1990' readStream) time: (Time readFrom: (ReadStream on: '10:00:00 am')))				);		yourself</body><body package="AppeX-Examples-Scaffolding">daughter_in_law2	^self new		name: 'Annebelle';		appellation: 'Stone';		dayOfBirth: (Date readFrom: 'May 5, 1966' readStream);		married: true;		gender: 'female';		avocations: (OrderedCollection with: Avocation knitting);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'May 20, 1966' readStream) time: (Time readFrom: (ReadStream on: '2:23:09 pm')) )						with: (LifeEvent graduatedSchool: (Date readFrom: 'June 6, 1986' readStream))						with: (LifeEvent married: (Date readFrom: 'October 2, 1990' readStream) time: (Time readFrom: (ReadStream on: '10:00:00 am')))				);		yourself</body><body package="AppeX-Examples-Scaffolding">granddaughter	^self new		name: 'Jenny';		appellation: 'Smith';		dayOfBirth: (Date readFrom: 'April 5, 2001' readStream);		married: false;		gender: 'female';		dwelling: Dwelling newYork;		avocations: (OrderedCollection with: Avocation knitting);		lifeEvents: (OrderedCollection 						with: (LifeEvent 								baptized: (Date readFrom: 'April 20, 2001' readStream) 								time: (Time readFrom: (ReadStream on: '3:23:09 pm'))));		yourself</body><body package="AppeX-Examples-Scaffolding">granddaughter2	^self new		name: 'Jennine';		appellation: 'Cooper';		dayOfBirth: (Date readFrom: 'April 5, 2001' readStream);		married: false;		gender: 'female';		avocations: (OrderedCollection with: Avocation knitting);		lifeEvents: (OrderedCollection 						with: (LifeEvent 								baptized: (Date readFrom: 'April 20, 2001' readStream) 								time: (Time readFrom: (ReadStream on: '3:23:09 pm'))));		yourself</body><body package="AppeX-Examples-Scaffolding">grandma	^self new		name: 'Eleanora';		appellation: 'Kroger';		dayOfBirth: (Date readFrom: 'Jan 30, 1921' readStream);		married: false;		gender: 'female';		dwelling: Dwelling newYork;		avocations: (OrderedCollection with: Avocation singing);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'Feb 5, 1921' readStream) time: (Time readFrom: (ReadStream on: '1:23:09 pm')) )						with: (LifeEvent married: (Date readFrom: 'October 2, 1940' readStream) time: (Time readFrom: (ReadStream on: '11:00:00 am')))						with: (LifeEvent died: (Date readFrom: 'Dec 14, 2014' readStream) time: (Time readFrom: (ReadStream on: '03:00:00 am')))				);		yourself</body><body package="AppeX-Examples-Scaffolding">grandpa	^self new		name: 'Adam';		appellation: 'Smith';		dayOfBirth: (Date readFrom: 'Jan 19, 1935' readStream);		married: false;		gender: 'male';		children: (OrderedCollection with: self son);		avocations: (OrderedCollection with: Avocation mining);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'Feb 5, 1935' readStream) time: (Time readFrom: (ReadStream on: '1:23:09 pm')) )						with: (LifeEvent married: (Date readFrom: 'October 2, 1960' readStream) time: (Time readFrom: (ReadStream on: '11:00:00 am')))						with: (LifeEvent died: (Date readFrom: 'Jan 20, 2014' readStream) time: (Time readFrom: (ReadStream on: '01:00:00 am')))				);		yourself</body><body package="AppeX-Examples-Scaffolding">grandpa2	^self new		name: 'Ned';		appellation: 'Cooper';		dayOfBirth: (Date readFrom: 'Feb 19, 1925' readStream);		married: false;		gender: 'male';		children: (OrderedCollection with: self son2);		avocations: (OrderedCollection with: Avocation mining);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'Feb 5, 1935' readStream) time: (Time readFrom: (ReadStream on: '1:23:09 pm')) )						with: (LifeEvent married: (Date readFrom: 'October 2, 1960' readStream) time: (Time readFrom: (ReadStream on: '11:00:00 am')))						with: (LifeEvent died: (Date readFrom: 'Jan 20, 2014' readStream) time: (Time readFrom: (ReadStream on: '01:00:00 am')))				);		yourself</body><body package="AppeX-Examples-Scaffolding">grandson	^self new		name: 'Bob';		appellation: 'Smith';		dayOfBirth: (Date readFrom: 'April 5, 1985' readStream);		married: false;		gender: 'male';		dwelling: Dwelling newYork;		avocations: (OrderedCollection with: Avocation hiking);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'May 5, 1985' readStream) time: (Time readFrom: (ReadStream on: '3:23:09 pm')) )						with: (LifeEvent graduatedSchool: (Date readFrom: 'June 6, 2001' readStream))						with: (LifeEvent new 								description: 'Graduated College'; 								date: (Date readFrom: 'October 2, 1990' readStream); 								time: (Time readFrom: (ReadStream on: '10:00:00 am'));								yourself)				);		yourself</body><body package="AppeX-Examples-Scaffolding">grandson2	^self new		name: 'Billy';		appellation: 'Cooper';		dayOfBirth: (Date readFrom: 'April 5, 1985' readStream);		married: false;		gender: 'male';		dwelling: Dwelling newYork2;		avocations: (OrderedCollection with: Avocation hiking);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'May 5, 1985' readStream) time: (Time readFrom: (ReadStream on: '3:23:09 pm')) )						with: (LifeEvent graduatedSchool: (Date readFrom: 'June 6, 2001' readStream))						with: (LifeEvent new 								description: 'Graduated College'; 								date: (Date readFrom: 'October 2, 2004' readStream); 								time: (Time readFrom: (ReadStream on: '10:00:00 am'));								yourself)				);		yourself</body><body package="AppeX-Examples-Scaffolding">son	^self new		name: 'John';		appellation: 'Smith';		dayOfBirth: (Date readFrom: 'April 5, 1965' readStream);		married: true;		gender: 'male';		dwelling: Dwelling newYork;		children: (OrderedCollection with: self granddaughter with: self grandson);		avocations: (OrderedCollection with: Avocation singing);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'May 5, 1965' readStream) time: (Time readFrom: (ReadStream on: '2:23:09 pm')) )						with: (LifeEvent graduatedSchool: (Date readFrom: 'June 6, 1984' readStream))						with: (LifeEvent married: (Date readFrom: 'October 2, 1990' readStream) time: (Time readFrom: (ReadStream on: '10:00:00 am')))				);		yourself</body><body package="AppeX-Examples-Scaffolding">son2	^self new		name: 'John';		appellation: 'Cooper';		dayOfBirth: (Date readFrom: 'April 5, 1965' readStream);		married: true;		gender: 'male';		children: (OrderedCollection with: self granddaughter2 with: self grandson2);		avocations: (OrderedCollection with: Avocation acting);		lifeEvents: (OrderedCollection 						with: (LifeEvent baptized: (Date readFrom: 'May 5, 1965' readStream) time: (Time readFrom: (ReadStream on: '2:23:09 pm')) )						with: (LifeEvent graduatedSchool: (Date readFrom: 'June 6, 1984' readStream))						with: (LifeEvent married: (Date readFrom: 'October 2, 1990' readStream) time: (Time readFrom: (ReadStream on: '10:00:00 am')))				);		yourself</body></methods><methods><class-id>AppeX.Personage class</class-id> <category>class initialization</category><body package="AppeX-Examples-Scaffolding">jsonInstVarNames	^#('id' 'name' 'appellation' 'married' 'gender' 'dayOfBirth' 'dwelling' 'father' 'mother' 'children' 'avocations' 'lifeEvents')</body></methods><methods><class-id>AppeX.LifeEvent</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">date	^date</body><body package="AppeX-Examples-Scaffolding">date: anObject	date := anObject</body><body package="AppeX-Examples-Scaffolding">description	^description</body><body package="AppeX-Examples-Scaffolding">description: anObject	description := anObject</body><body package="AppeX-Examples-Scaffolding">time	^time</body><body package="AppeX-Examples-Scaffolding">time: anObject	time := anObject</body></methods><methods><class-id>AppeX.LifeEvent</class-id> <category>printing</category><body package="AppeX-Examples-Scaffolding">printOn: aStream 	description ifNotNil: [aStream nextPutAll: description].	date ifNotNil: [aStream nextPutAll: ' on ', date printString].	time ifNotNil: [aStream nextPutAll: ' at ', time printString].</body></methods><methods><class-id>AppeX.LifeEvent class</class-id> <category>instance creation</category><body package="AppeX-Examples-Scaffolding">baptized: aDate time: aTime	^self new		description: 'Baptized';		date: aDate;		time: aTime;		yourself</body><body package="AppeX-Examples-Scaffolding">died: aDate time: aTime	^self new		description: 'Died';		date: aDate;		time: aTime;		yourself</body><body package="AppeX-Examples-Scaffolding">graduatedSchool: aDate	^self new		description: 'Graduated from high school ';		date: aDate;		yourself</body><body package="AppeX-Examples-Scaffolding">married: aDate time: aTime	^self new		description: 'Married';		date: aDate;		time: aTime;		yourself</body></methods><methods><class-id>AppeX.DriverSchema</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">allActiveRecordClasses	^OrderedCollection new		add: Driver;		add: Vehicle;		yourself</body><body package="AppeX-Examples-Scaffolding">allTableNames"DRIVERS_WITH_VEHICLES table holds associations between rows in the DRIVER and VEHICLE tables. Each row in thelink table represents a vehicle that belongs to a single driver"	^#('DRIVER' 'VEHICLE' 'DRIVERS_WITH_VEHICLES').</body></methods><methods><class-id>AppeX.DriverSchema</class-id> <category>descriptors</category><body package="AppeX-Examples-Scaffolding">descriptorForDriver: aDescriptor	"One or more of the commented-out lines would be needed if the existence of other tables and/or other fields and/or other foreign key constraints made the #vehicles attribute ambiguous.  As it is, this system's tables provide only one route from Driver to Vehicle, so Glorp does not need to be told any of the additional data in these lines;  it deduces it all.  The lines are provided to assist reader's understanding when this example system is presented.  (Going beyond even this, the entire toManyMapping statement below could be omitted, replaced with the statement	aClassModel newAttributeNamed: #vehicles collectionOf: Vehicle.in the class model, from which Glorp could deduce the mapping."	| driverTable |	driverTable := self tableNamed: 'DRIVER'.	aDescriptor table: driverTable.	aDescriptor directMapping		from: #name		to: (driverTable fieldNamed: 'NAME').	aDescriptor directMapping		from: #address		to: (driverTable fieldNamed: 'ADDRESS').	aDescriptor directMapping		from: #isProfessionalDriver		to: (driverTable fieldNamed: 'ISPROFESSIONALDRIVER').	aDescriptor directMapping		from: #id		to: (driverTable fieldNamed: 'ID').	"driverVehicleLinkTable := self tableNamed: 'DRIVERS_WITH_VEHICLES'."	aDescriptor manyToManyMapping		attributeName: #vehicles;		referenceClass: Vehicle.	"	usesLinkTable: true;		join: (Join from: (driverTable fieldNamed: 'ID') to: (driverVehicleLinkTable fieldNamed: 'DRIVER_ID'));		linkFields: (Array with: (driverVehicleLinkTable fieldNamed: 'VEHICLE_ID'));		reverseJoin: (Join from: (driverVehicleLinkTable fieldNamed: 'VEHICLE_ID') to: ((self tableNamed: 'VEHICLE') fieldNamed: 'ID'))."</body><body package="AppeX-Examples-Scaffolding">descriptorForVehicle: aDescriptor	| table |	table := self tableNamed: 'VEHICLE'.	aDescriptor table: table.	(aDescriptor newMapping: DirectMapping)		from: #model		to: (table fieldNamed: 'MODEL').	(aDescriptor newMapping: DirectMapping)		from: #make		to: (table fieldNamed: 'MAKE').	(aDescriptor newMapping: DirectMapping)		from: #mileage		to: (table fieldNamed: 'MILEAGE').	(aDescriptor newMapping: DirectMapping)		from: #id		to: (table fieldNamed: 'ID').</body></methods><methods><class-id>AppeX.DriverSchema</class-id> <category>tables</category><body package="AppeX-Examples-Scaffolding">tableForDRIVER: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varChar: 20).	aTable createFieldNamed: 'ADDRESS' type: (platform varChar: 40).	aTable createFieldNamed: 'ISPROFESSIONALDRIVER' type: platform boolean.</body><body package="AppeX-Examples-Scaffolding">tableForDRIVERS_WITH_VEHICLES: aTable	| driverKey vehicleKey |	driverKey := aTable createFieldNamed: 'driver_id'				type: (platform int4).	aTable		addForeignKeyFrom: driverKey		to: ((self tableNamed: 'DRIVER') fieldNamed: 'id').			vehicleKey := aTable createFieldNamed: 'vehicle_id' type: (platform int4).	aTable		addForeignKeyFrom: vehicleKey		to: ((self tableNamed: 'VEHICLE') fieldNamed: 'id').</body><body package="AppeX-Examples-Scaffolding">tableForVEHICLE: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'MODEL' type: (platform varChar: 20).		aTable createFieldNamed: 'MAKE' type: (platform varChar: 20).		aTable createFieldNamed: 'MILEAGE' type: platform integer.</body></methods><methods><class-id>AppeX.DriverSchema</class-id> <category>class models</category><body package="AppeX-Examples-Scaffolding">classModelForDriver: aClassModel	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #name.	aClassModel newAttributeNamed: #address.	aClassModel newAttributeNamed: #isProfessionalDriver type: Boolean.</body><body package="AppeX-Examples-Scaffolding">classModelForVehicle: aClassModel 	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #model.	aClassModel newAttributeNamed: #make.	aClassModel newAttributeNamed: #mileage.</body></methods><methods><class-id>AppeX.GenealogySchema</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">allActiveRecordClasses	^OrderedCollection new		add: FamilyTree;		add: Personage;		add: Dwelling;		add: Avocation;		add: LifeEvent;		yourself</body><body package="AppeX-Examples-Scaffolding">allTableNames	^#('FAMILYTREE' 'PERSONAGE' 'PERSONAGE_LIFEEVENT' 'DWELLING' 'PERSONAGES_TO_CHILDREN' 'PERSONAGE_AVOCATION').</body></methods><methods><class-id>AppeX.GenealogySchema</class-id> <category>class models</category><body package="AppeX-Examples-Scaffolding">classModelForAvocation: aClassModel 	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #description.	aClassModel newAttributeNamed: #years.</body><body package="AppeX-Examples-Scaffolding">classModelForDwelling: aClassModel 	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #squareFootage.	aClassModel newAttributeNamed: #nickName.	aClassModel newAttributeNamed: #realm.</body><body package="AppeX-Examples-Scaffolding">classModelForFamilyTree: aClassModel	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #description.	aClassModel newAttributeNamed: #rootPersonage.</body><body package="AppeX-Examples-Scaffolding">classModelForLifeEvent: aClassModel 	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #description.	aClassModel newAttributeNamed: #date.	aClassModel newAttributeNamed: #time.</body><body package="AppeX-Examples-Scaffolding">classModelForPersonage: aClassModel	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #name.	aClassModel newAttributeNamed: #appellation.	aClassModel newAttributeNamed: #gender.	aClassModel newAttributeNamed: #married type: Boolean.	aClassModel newAttributeNamed: #dayOfBirth.		aClassModel newAttributeNamed: #dwelling.	aClassModel newAttributeNamed: #avocations collectionOf: Avocation.	aClassModel newAttributeNamed: #father type: Personage.	aClassModel newAttributeNamed: #mother type: Personage.	aClassModel newAttributeNamed: #children collectionOf: Personage.	aClassModel newAttributeNamed: #lifeEvents collectionOf: LifeEvent.</body></methods><methods><class-id>AppeX.GenealogySchema</class-id> <category>descriptors</category><body package="AppeX-Examples-Scaffolding">descriptorForAvocation: aDescriptor	| table |	table := self tableNamed: 'PERSONAGE_AVOCATION'.	aDescriptor table: table.	(aDescriptor newMapping: DirectMapping)		from: #description		to: (table fieldNamed: 'DESCRIPTION').	(aDescriptor newMapping: DirectMapping)		from: #id		to: (table fieldNamed: 'ID').	(aDescriptor newMapping: DirectMapping)		from: #years		to: (table fieldNamed: 'YEARS').</body><body package="AppeX-Examples-Scaffolding">descriptorForDwelling: aDescriptor	| table |	table := self tableNamed: 'DWELLING'.	aDescriptor table: table.	(aDescriptor newMapping: DirectMapping)		from: #nickName		to: (table fieldNamed: 'NICKNAME').	(aDescriptor newMapping: DirectMapping)		from: #squareFootage		to: (table fieldNamed: 'SQUAREFOOTAGE').	(aDescriptor newMapping: DirectMapping)		from: #realm		to: (table fieldNamed: 'REALM').	(aDescriptor newMapping: DirectMapping)		from: #id		to: (table fieldNamed: 'ID').</body><body package="AppeX-Examples-Scaffolding">descriptorForFamilyTree: aDescriptor	| familyTreeTable |	familyTreeTable := self tableNamed: 'FAMILYTREE'.	aDescriptor table: familyTreeTable.	(aDescriptor newMapping: DirectMapping)		from: #id		to: (familyTreeTable fieldNamed: 'ID').		(aDescriptor newMapping: DirectMapping)		from: #description		to: (familyTreeTable fieldNamed: 'DESCRIPTION').	(aDescriptor newMapping: OneToOneMapping)		attributeName: #rootPersonage;		referenceClass: Personage.</body><body package="AppeX-Examples-Scaffolding">descriptorForLifeEvent: aDescriptor	| table |	table := self tableNamed: 'PERSONAGE_LIFEEVENT'.	aDescriptor table: table.	(aDescriptor newMapping: DirectMapping)		from: #description		to: (table fieldNamed: 'DESCRIPTION').	(aDescriptor newMapping: DirectMapping)		from: #id		to: (table fieldNamed: 'ID').	(aDescriptor newMapping: DirectMapping)		from: #date		to: (table fieldNamed: 'DATE').	(aDescriptor newMapping: DirectMapping)		from: #time		to: (table fieldNamed: 'TIME').</body><body package="AppeX-Examples-Scaffolding">descriptorForPersonage: aDescriptor	| personageTable linkTable |	personageTable := self tableNamed: 'PERSONAGE'.	aDescriptor table: personageTable.	(aDescriptor newMapping: DirectMapping)		from: #id		to: (personageTable fieldNamed: 'ID').	(aDescriptor newMapping: DirectMapping)		from: #name		to: (personageTable fieldNamed: 'NAME').	(aDescriptor newMapping: DirectMapping)		from: #appellation		to: (personageTable fieldNamed: 'APPELLATION').	(aDescriptor newMapping: DirectMapping)		from: #gender		to: (personageTable fieldNamed: 'GENDER').	(aDescriptor newMapping: DirectMapping)		from: #dayOfBirth		to: (personageTable fieldNamed: 'DAYOFBIRTH').	(aDescriptor newMapping: DirectMapping)		from: #married		to: (personageTable fieldNamed: 'MARRIED').					(aDescriptor newMapping: OneToManyMapping)		attributeName: #avocations;		referenceClass: Avocation. 		(aDescriptor newMapping: OneToOneMapping)		attributeName: #mother;		referenceClass: Personage.	(aDescriptor newMapping: OneToOneMapping)		attributeName: #father;		referenceClass: Personage.			linkTable := self tableNamed: 'PERSONAGES_TO_CHILDREN'. 		(aDescriptor newMapping: ManyToManyMapping)		attributeName: #children;		referenceClass: Personage;		join: (Join 				from: (personageTable fieldNamed: 'ID')				to: (linkTable fieldNamed: 'personage_id')).					(aDescriptor newMapping: OneToManyMapping)		attributeName: #lifeEvents;		referenceClass: LifeEvent.</body></methods><methods><class-id>AppeX.GenealogySchema</class-id> <category>tables</category><body package="AppeX-Examples-Scaffolding">tableForDWELLING: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'NICKNAME' type: (platform varChar: 20).	aTable createFieldNamed: 'REALM' type: (platform varChar: 20).	aTable createFieldNamed: 'SQUAREFOOTAGE' type: platform integer.</body><body package="AppeX-Examples-Scaffolding">tableForFAMILYTREE: aTable	| personageId |	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	(aTable createFieldNamed: 'DESCRIPTION' type: (platform varChar: 20) ) beNullable: false.	personageId := aTable createFieldNamed: 'PERSONAGE_ID' type: platform int4.	aTable addForeignKeyFrom: personageId to: ((self tableNamed: 'PERSONAGE') fieldNamed: 'ID').</body><body package="AppeX-Examples-Scaffolding">tableForPERSONAGE: aTable	| dwellingId motherId fatherId |	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	(aTable createFieldNamed: 'NAME' type: (platform varChar: 20)) beNullable: false.	(aTable createFieldNamed: 'APPELLATION' type: (platform varChar: 40)) beNullable: false.	aTable createFieldNamed: 'MARRIED' type: platform boolean.	aTable createFieldNamed: 'GENDER' type: (platform varChar: 6).	(aTable createFieldNamed: 'DAYOFBIRTH' type: platform date) beNullable: false.	(dwellingId := aTable createFieldNamed: 'DWELLING_ID' type: platform int4) beNullable: false.	aTable addForeignKeyFrom: dwellingId to: ((self tableNamed: 'DWELLING') fieldNamed: 'ID').	motherId := aTable createFieldNamed: 'MOTHER_ID' type: platform int4.	aTable addForeignKeyFrom: motherId to: ((self tableNamed: 'PERSONAGE') fieldNamed: 'ID').	fatherId := aTable createFieldNamed: 'FATHER_ID' type: platform int4.	aTable addForeignKeyFrom: fatherId to: ((self tableNamed: 'PERSONAGE') fieldNamed: 'ID').</body><body package="AppeX-Examples-Scaffolding">tableForPERSONAGES_TO_CHILDREN: aTable	| personageKey childKey |	personageKey := aTable createFieldNamed: 'personage_id'				type: (platform int4).	aTable		addForeignKeyFrom: personageKey		to: ((self tableNamed: 'PERSONAGE') fieldNamed: 'id').			childKey := aTable createFieldNamed: 'child_id' type: (platform int4).	aTable		addForeignKeyFrom: childKey		to: ((self tableNamed: 'PERSONAGE') fieldNamed: 'id').</body><body package="AppeX-Examples-Scaffolding">tableForPERSONAGE_AVOCATION: aTable 	| personageId |	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	(aTable createFieldNamed: 'DESCRIPTION' type: (platform varChar: 20)) beNullable: false.	aTable createFieldNamed: 'YEARS' type: platform integer.	personageId := aTable createFieldNamed: 'PERSONAGE_ID' type: platform int4.	aTable addForeignKeyFrom: personageId to: ((self tableNamed: 'PERSONAGE') fieldNamed: 'ID').</body><body package="AppeX-Examples-Scaffolding">tableForPERSONAGE_LIFEEVENT: aTable 	| personageId |	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'DESCRIPTION' type: (platform varChar: 20).	(aTable createFieldNamed: 'DATE' type: platform date) beNullable: false.	aTable createFieldNamed: 'TIME' type: platform time.		personageId := aTable createFieldNamed: 'PERSONAGE_ID' type: platform int4.	aTable addForeignKeyFrom: personageId to: ((self tableNamed: 'PERSONAGE') fieldNamed: 'ID').</body></methods><methods><class-id>AppeX.FamilyTreeListPresenter</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">acceptedPaths() {	return ["familytree"];}</body></methods><methods><class-id>AppeX.FamilyTreeListPresenter</class-id> <category>actions</category><body package="AppeX-Examples-Scaffolding">deleteObject(object){	var self = this,		args = {};			args.input = {};	args.input.id = object.id;	this.client		.DELETE(this.path, args)		.onSuccess(function (updatedObjects) {			var index;			$t.debug("Delete " + self.path + " success");			index = self.objects.indexOf(object);			self.objects.splice(index, 1);			self.setRenderer();			self.buildView();		});}</body></methods><methods><class-id>AppeX.FamilyTreeListPresenter</class-id> <category>open main view</category><body package="AppeX-Examples-Scaffolding">getTitleAction() {// Answer the title of this presenter. Subclasses are responsible.	return 'Browse'}</body><body package="AppeX-Examples-Scaffolding">getTitleDetails() {// Answer the details of the title. Normally, this is the path of the Active Record object(s)// Subclasses may override.	return "Genealogies"}</body></methods><methods><class-id>AppeX.FamilyTreeListPresenter</class-id> <category>build header</category><body package="AppeX-Examples-Scaffolding">labelFor_description()  {	//The presence of any function whose name follows the pattern "labelFor_ + attributeName (such as this one)  will be detected by the framework.	//Selectors to call these functions will be constructed after page load, and used to override default header strings "		return "Family Tree";	}</body><body package="AppeX-Examples-Scaffolding">labelFor_rootPersonage()  {		//The presence of any function whose name follows the pattern "labelFor_ + attributeName" (such as this one)  will be detected by the framework.	//Selectors to call these functions will be constructed after page load, and used to override default header strings "		return "Founder";	}</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>html</category><body package="AppeX-Examples-Scaffolding">bodyThemeSwitcher	&lt;body: 60&gt;	^'&lt;div id="theme-switcher" &gt;	&lt;button onclick="javascript: $t.application.setTheme(''theme-bold.css'');"&gt;Bold theme&lt;/button&gt;	&lt;button onclick="javascript: $t.application.setTheme(''theme-tiny.css'');"&gt;Tiny theme&lt;/button&gt;	&lt;button onclick="javascript: $t.application.setTheme(''theme-default.css'');"&gt;Default theme&lt;/button&gt;&lt;/div&gt;'</body><body package="AppeX-Examples-Scaffolding">headExternalLibraries	&lt;head: 200&gt;		^self jqueryMinTags, self jqueryTimepickerTags</body><body package="AppeX-Examples-Scaffolding">htmlTitle	&lt;htmlToken: #title&gt;	^'Family Tree Application'</body><body package="AppeX-Examples-Scaffolding">scaffoldingLibrary	&lt;head: 9999.15&gt;	^super scaffoldingLibrary</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>services</category><body package="AppeX-Examples-Scaffolding">deleteAvocation	&lt;DELETE&gt;	&lt;activeRecord: 'avocation' class: #{AppeX.Avocation}&gt;		^[:glorpSession :avocations| 	avocations first delete.	(glorpSession cacheForClass: Personage)		do: [:personage | glorpSession refresh: personage] ]</body><body package="AppeX-Examples-Scaffolding">deleteFamilyTree	&lt;DELETE&gt;	&lt;activeRecord: 'familytree' class: #{AppeX.FamilyTree}&gt;			^[:glorpSession :familyTrees| 		familyTrees first delete ]</body><body package="AppeX-Examples-Scaffolding">deleteLifeEvent	&lt;DELETE&gt;	&lt;activeRecord: 'lifeevent' class: #{AppeX.LifeEvent}&gt;		^[:glorpSession :lifeEvents| 		(glorpSession cacheForClass: FamilyTree)			do: [:familyTree | glorpSession refresh: familyTree].		(glorpSession cacheForClass: Personage)			do: [:person | glorpSession refresh: person].		(glorpSession cacheForClass: LifeEvent)			do: [:lifeEvent | glorpSession refresh: lifeEvent] ]</body><body package="AppeX-Examples-Scaffolding">deletePersonage	&lt;DELETE&gt;	&lt;activeRecord: 'personage' class: #{AppeX.Personage}&gt;		^[:glorpSession :personages| 		personages first delete.		(glorpSession cacheForClass: FamilyTree)			do: [:familyTree | glorpSession refresh: familyTree].		(glorpSession cacheForClass: Personage)			do: [:person | glorpSession refresh: person]]</body><body package="AppeX-Examples-Scaffolding">findChildren	&lt;GET&gt; 	&lt;activeRecord: 'findChildren' class: #{AppeX.Personage} &gt;  	^[ :glorpSession :activeRecords | | aPersonage aCollection|		aPersonage := activeRecords first.				aCollection := glorpSession 						read: Personage     						where: [:each | each dayOfBirth &gt; aPersonage dayOfBirth].		aCollection select: [:each | 			(each dayOfBirth year - 10) &gt; aPersonage dayOfBirth year] 	]</body><body package="AppeX-Examples-Scaffolding">findFather	&lt;GET&gt; 	&lt;activeRecord: 'findFather' class: #{AppeX.Personage} &gt;  	^[ :glorpSession :activeRecords | | aPersonage aCollection |		"If we got more than one activeRecords it means we are finding a father for a new personage without #id		Let's returns all males"		activeRecords size &gt; 1			ifTrue: [				activeRecords select: [ :each | each gender = 'male' ]]			ifFalse: [					aPersonage := activeRecords first.						aCollection := glorpSession      				read: Personage     					where: [:each | (each dayOfBirth &lt; aPersonage dayOfBirth) AND:[ each gender = 'male' ]].				aCollection select: [:each |					each ~= aPersonage father						and: [ each dayOfBirth year &lt; (aPersonage dayOfBirth year - 10 )]]] 	]</body><body package="AppeX-Examples-Scaffolding">findMother	&lt;GET&gt; 	&lt;activeRecord: 'findMother' class: #{AppeX.Personage} &gt;  	^[ :glorpSession :activeRecords | | aPersonage aCollection |		"If we got more than one activeRecords it means we are finding a mother for a new personage without #id		Let's returns all females"		activeRecords size &gt; 1			ifTrue: [				activeRecords select: [ :each | each gender = 'female' ]]			ifFalse: [					aPersonage := activeRecords first.						aCollection := glorpSession      				read: Personage     					where: [:each | (each dayOfBirth &lt; aPersonage dayOfBirth) AND: [ each gender = 'female' ]].				aCollection select: [:each | 					each ~= aPersonage mother									and: [each dayOfBirth year &lt; ( aPersonage dayOfBirth year - 10 )]]]. 	]</body><body package="AppeX-Examples-Scaffolding">getLifeEvents	&lt;GET&gt;	&lt;activeRecord: 'lifeevent' class: #{AppeX.LifeEvent}&gt;		^[ :glorpSession :activeRecords | 		activeRecords asSortedCollection: [ :a :b | a date &lt;= b date ] ]</body><body package="AppeX-Examples-Scaffolding">getPersonages	&lt;GET&gt;	&lt;activeRecord: 'personage' class: #{AppeX.Personage}&gt;		^[ :glorpSession :activeRecords | 		activeRecords collect: [ :person |			person lifeEvents: (person lifeEvents asSortedCollection: [ :a :b | a date &lt;= b date ] ).			person]]</body><body package="AppeX-Examples-Scaffolding">initializeActiveRecordApplication	&lt;GET&gt;	&lt;json: 'initializeActiveRecordApplication' &gt;	self initializeDatabaseRecords.	^super initializeActiveRecordApplication</body><body package="AppeX-Examples-Scaffolding">processAvocation	&lt;GET&gt;	&lt;PUT&gt;	&lt;POST&gt;	&lt;activeRecord: 'avocation' class: #{AppeX.Avocation}&gt;</body><body package="AppeX-Examples-Scaffolding">processDwelling	&lt;GET&gt;	&lt;PUT&gt;	&lt;POST&gt;	&lt;DELETE&gt;	&lt;activeRecord: 'dwelling' class: #{AppeX.Dwelling}&gt;</body><body package="AppeX-Examples-Scaffolding">processFamilyTree	&lt;GET&gt;	&lt;PUT&gt;	&lt;POST&gt;	&lt;activeRecord: 'familytree' class: #{AppeX.FamilyTree}&gt;</body><body package="AppeX-Examples-Scaffolding">processLifeEvent	&lt;PUT&gt;	&lt;POST&gt;	&lt;activeRecord: 'lifeevent' class: #{AppeX.LifeEvent}&gt;</body><body package="AppeX-Examples-Scaffolding">processPersonage	&lt;PUT&gt;	&lt;POST&gt;	&lt;activeRecord: 'personage' class: #{AppeX.Personage} &gt;</body><body package="AppeX-Examples-Scaffolding">removeAvocation	&lt;DELETE&gt;	&lt;activeRecord: 'removeAvocation'  class: #{AppeX.Personage} &gt;	| person avocation avocationId|	^[ :glorpSession :activeRecords |		person := activeRecords first.		avocationId := self currentRequestArguments at: #relationId ifAbsent: [ nil ].		avocation := avocationId ifNotNil: [			person avocations detect: [ :eAvocation | eAvocation id = avocationId] ifNone: [ nil ]].		avocationId ifNotNil: [			person avocations remove: avocation ].		activeRecords ]</body><body package="AppeX-Examples-Scaffolding">removeChild	&lt;DELETE&gt;	&lt;activeRecord: 'removeChild'  class: #{AppeX.Personage} &gt;	| person childIndex input |	^[ :glorpSession :activeRecords | 		person := activeRecords first.		input :=  self currentRequestArguments at:  #input.		"indexing numbers in javascript start at 0, those in smalltak start at 1"		childIndex := (input at:  #relationIndex ifAbsent: [-1]) + 1.		childIndex &gt; 0 &amp; (childIndex &lt;= person children asOrderedCollection size) 			ifTrue: [person children asOrderedCollection removeAtIndex: childIndex.].		activeRecords]</body><body package="AppeX-Examples-Scaffolding">removeLifeEvent	&lt;DELETE&gt;	&lt;activeRecord: 'removeLifeEvent'  class: #{AppeX.Personage} &gt;	| person lifeEvent lifeEventId|	^[ :glorpSession :activeRecords |		person := activeRecords first.		lifeEventId := self currentRequestArguments at: #relationId ifAbsent: [ nil ].		lifeEvent := lifeEventId ifNotNil: [			person lifeEvents detect: [ :le | le id = lifeEventId] ifNone: [ nil ]].		lifeEvent ifNotNil: [			glorpSession delete: lifeEvent.			person lifeEvents remove: lifeEvent ].		activeRecords ]</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>services-themes</category><body package="AppeX-Examples-Scaffolding">hrefBoldTheme"	The default theme will use its name plus the '.css' extension to add itself to the requestActions dispatch.	However, you can use any name here, so we just include two alternatives to demo that a theme can	be accesses with a URL other than just its own name..."	&lt;css: 'AppeX.BoldScaffoldingTheme.css'&gt;	&lt;css: 'theme-bold.css'&gt;		^ BoldScaffoldingTheme new</body><body package="AppeX-Examples-Scaffolding">hrefDefaultTheme"	The default theme will use its name plus the '.css' extension to add itself to the requestActions dispatch.	However, you can use any name here, so we just include two alternatives to demo that a theme can	be accesses with a URL other than just its own name..."	&lt;css: 'AppeX.DefaultScaffoldingTheme.css'&gt;	&lt;css: 'theme-default.css'&gt;		^ DefaultScaffoldingTheme new</body><body package="AppeX-Examples-Scaffolding">hrefTinyTheme"	The default theme will use its name plus the '.css' extension to add itself to the requestActions dispatch.	However, you can use any name here, so we just include two alternatives to demo that a theme can	be accesses with a URL other than just its own name..."	&lt;css: 'AppeX.TinyScaffoldingTheme.css'&gt;	&lt;css: 'theme-tiny.css'&gt;		^ TinyScaffoldingTheme new</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>custom services</category><body package="AppeX-Examples-Scaffolding">removeParentFrom: aChild relation: aString"	This is an example how to extend an application services. 	This is &lt;removeParentService:&gt; pragma implementation for 'removeParent' path"	&lt;removeParentService: 'removeParent'&gt;	| parent |	aString = 'father'		ifTrue: [parent := aChild father.			aChild father: nil ]		ifFalse: [parent := aChild mother.			aChild mother: nil].	parent children remove: aChild ifAbsent: [].</body><body package="AppeX-Examples-Scaffolding">removeParentService: pragma"	This is an example how to extend application services. 	This service executes &lt;removeParentService:&gt; pragma.	The #serviceType: argument defines a default HTTP method for this services.	Note: This method selector has to be the same as the pragma selector in #removeParentFrom:relation:"	&lt;serviceType: #DELETE&gt;	| child id  |	self glorpSession ifNil: [ self setDefaultGlorpSession.].	id := self currentRequestArguments at: #id ifAbsent: [ ^nil].	child := (self glorpSession 				read: Personage 				where: [ :each | each id = id ]) first.	child bePersistent.	self		perform: pragma selector		with: child 		with: (self currentRequestArguments at: #type ifAbsent: [ ^nil ]).					self glorpSession hasUnitOfWork ifTrue: [ self glorpSession commitUnitOfWork ].	self respondWithPlainText: 'done'</body></methods><methods><class-id>AppeX.GenealogyApplication class</class-id> <category>configuration</category><body package="AppeX-Examples-Scaffolding">serverConfiguration	&lt;server: 'AppeXExamples' path: '/scaffolding/genealogy'&gt;	&lt;requestFilter: #'AppeX.ETagRequestFilter' configuration: 'Default ETag'&gt;	&lt;requestFilter: #'AppeX.NoCacheRequestFilter' configuration: 'Active Record'&gt;</body></methods><methods><class-id>AppeX.DriverApplication</class-id> <category>services</category><body package="AppeX-Examples-Scaffolding">processDriver	&lt;GET&gt;	&lt;PUT&gt;	&lt;POST&gt;	&lt;activeRecord: 'driver' class: #{AppeX.Driver}&gt;</body><body package="AppeX-Examples-Scaffolding">processVehicle	&lt;GET&gt;	&lt;PUT&gt;	&lt;POST&gt;	&lt;activeRecord: 'vehicle' class: #{AppeX.Vehicle}&gt;</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>html</category><body package="AppeX-Examples-Scaffolding">headExternalLibraries	&lt;head: 200&gt;	^JQueryLib</body><body package="AppeX-Examples-Scaffolding">htmlTitle	&lt;htmlToken: #title&gt;	^'Driver ActiveRecord application'</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">scaffoldingLibrary	&lt;head: 9999.15&gt;	^ super scaffoldingLibrary</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>services</category><body package="AppeX-Examples-Scaffolding">initializeActiveRecordApplication	&lt;GET&gt;	&lt;json: 'initializeActiveRecordApplication' &gt;	self isSQLiteAvailable 		ifFalse: [self error: 'Before you run examples make sure you have sqlite.dll installed in your system in one of the default directories. To see the default directories open System Browser on Database.SQLite3Interface class definition and check attributes.'].	self initializeDatabaseRecords.	^super initializeActiveRecordApplication</body></methods><methods><class-id>AppeX.DriverApplication class</class-id> <category>configuration</category><body package="AppeX-Examples-Scaffolding">serverConfiguration	&lt;server: 'AppeXExamples' path: '/scaffolding/driver'&gt;	&lt;requestFilter: #'AppeX.NoCacheRequestFilter' configuration: 'Active Record'&gt;</body></methods><methods><class-id>AppeX.PersonageEditPresenter</class-id> <category>build simple data types</category><body package="AppeX-Examples-Scaffolding">buildCellDataFor_dayOfBirth(attributeValue) {		this.buildDateCellDataForAttributeNameAndValue("dayOfBirth", attributeValue)}</body><body package="AppeX-Examples-Scaffolding">buildCellDataFor_gender(attributeValue) {		this.buildRadioButtonFor("gender", "Female", attributeValue, "female");	this.buildRadioButtonFor("gender", "Male", attributeValue, "male");}</body></methods><methods><class-id>AppeX.PersonageEditPresenter</class-id> <category>actions</category><body package="AppeX-Examples-Scaffolding">addExistingRelation_children(attributeName) {	this.selectExistingRelations(attributeName, { id: this.object.id }, 'findChildren');}</body><body package="AppeX-Examples-Scaffolding">addExistingRelation_father(attributeName) {	this.selectExistingRelations(attributeName, { id: this.object.id }, 'findFather');}</body><body package="AppeX-Examples-Scaffolding">addExistingRelation_mother(attributeName) {	this.selectExistingRelations(attributeName, { id: this.object.id }, 'findMother');}</body><body package="AppeX-Examples-Scaffolding">deleteParent(attributeName, index, type){//An example of custom service	var self = this,		args = {},		path;			args.id = this.object.id;	args.type = type;	this.client		.DELETE("removeParent", args)		.onSuccess(function (statusString) {			$t.debug("Delete " + path + " success");			self.deleteRelationFromObject(attributeName, index);		});}</body><body package="AppeX-Examples-Scaffolding">deleteRelation(attributeName, index){	var self = this,		args = {},		path;			if (this.object.id === undefined) {		//the person is not persisted yet, nothing to update on the server.		//just update on the client		this.deleteRelationFromObject(attributeName, index);		return;	}	args.input = {};	args.input.id = this.object.id;	args.input.relationIndex = index;	if (attributeName === "lifeEvents") {		path = "removeLifeEvent";	} else if (attributeName === "father") {		return self.deleteParent(attributeName, index, "father")	} else if (attributeName === "mother") {		return self.deleteParent(attributeName, index, "mother")	} else if (attributeName === "children") {		path = "removeChild"	} else if (attributeName === "dwelling") {		path = "dwelling"	} else if (attributeName === "avocations") {		path = "removeAvocation"	}	this.client		.DELETE(path, args)		.onSuccess(function (updatedObjects) {			$t.debug("Delete " + path + " success");			self.deleteRelationFromObject(attributeName, index);		});}</body><body package="AppeX-Examples-Scaffolding">deleteRelationFromObject(attributeName, index){	var relation,		containerId;	relation = this.object[attributeName];	relation.removeByIndex(index);	containerId = this.scaffoldingContainerId();	this.renderer.emptyContainer(containerId);	this.buildView();}</body></methods><methods><class-id>AppeX.PersonageEditPresenter</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">acceptedPaths () {	return ["personage"];}</body></methods><methods><class-id>AppeX.PersonageEditPresenter</class-id> <category>open main view</category><body package="AppeX-Examples-Scaffolding">getTitleAction() {// Answer the title of this presenter. Subclasses are responsible.	if (this.memento.id) {		return 'Update record for'	} else {		return 'Create'	}}</body><body package="AppeX-Examples-Scaffolding">getTitleDetails() {	if (!this.memento.id) {		return "a new Personage";	}	return this.memento.name + " " + this.memento.appellation;}</body></methods><methods><class-id>AppeX.PersonageEditPresenter</class-id> <category>validation</category><body package="AppeX-Examples-Scaffolding">validationOnAccept () {	var lifeEvents,		validationTextStrings = [];					lifeEvents = this.object.lifeEvents &amp;&amp; this.object.lifeEvents.relations;	if (!lifeEvents || lifeEvents.length &lt;  1) {		validationTextStrings.push("Minimum of one life event required.")	}	return validationTextStrings;}</body></methods><methods><class-id>AppeX.PersonageEditPresenter</class-id> <category>build relation data types</category><body package="AppeX-Examples-Scaffolding">buildCellDataForRelation(attributeName, relation, index, object) {	var self = this;		if (attributeName !== 'dwelling') {		//dwelling is a 1-1 relation, and is not nullable.  		//Therefore do not provide for dwelling removal (as opposed to replacement with another dwelling).		this.renderer			.startElement("button")			.text("Delete")			.addClass("delete")			.onClick(function (event) { self.deleteRelation(attributeName, index) })			.finishElement();		}	this.buildAnchorForRelation(attributeName, relation, object);		}</body></methods><methods><class-id>AppeX.GenealogyClient</class-id> <category>javascript - API</category><body package="AppeX-Examples-Scaffolding">buildHtml() {//The method is the start point for the application. 	var scaffold, response;		scaffold = new AppeX.Scaffold(this);	//The first request retuns the application database metadata. 	response = this.GET("initializeActiveRecordApplication");	response		.onSuccess(function (dataCollection) {			//The information includes list of all database tables and table attribute types. 			//The information is saved in the this.objectTypeInfos global object			// and used by the framework to create labels and data entry fields based on table column types 			scaffold.objectTypeInfos = dataCollection;			//Create and open the main application page			scaffold.openMainView();		})		.onError(function(error){			//Set renderer to display the error			scaffold.setRenderer();			scaffold.renderer				.startElement("div")				.text( error.statusText + ":" + error.response)				.finishElement();		});	}</body><body package="AppeX-Examples-Scaffolding">mainPath() {	return 'familytree';}</body></methods><methods><class-id>AppeX.GenealogyClient</class-id> <category>labels</category><body package="AppeX-Examples-Scaffolding">labelFor_familytree_description () {	return "Line";}</body><body package="AppeX-Examples-Scaffolding">labelFor_familytree_rootPersonage () {	return "Head of House";}</body><body package="AppeX-Examples-Scaffolding">labelFor_personage_dayOfBirth() {	return "Born"}</body></methods><methods><class-id>AppeX.GenealogyClient</class-id> <category>presenters</category><body package="AppeX-Examples-Scaffolding">shouldBuildBreadCrumbs() {	// If you don't want to see breadcrumbs, change the return value to false.	return true;}</body></methods><methods><class-id>AppeX.AvocationEditPresenter</class-id> <category>validation</category><body package="AppeX-Examples-Scaffolding"> attributesNotRequiringBasicValidation() {	return ['years'];	}</body><body package="AppeX-Examples-Scaffolding">validate_years(input) {	return this.validateType_Number(input, 1, 10);}</body></methods><methods><class-id>AppeX.AvocationEditPresenter</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">acceptedPaths () {	return ["avocation"];}</body></methods><methods><class-id>AppeX.LifeEventEditPresenter</class-id> <category>validation</category><body package="AppeX-Examples-Scaffolding"> attributesNotRequiringBasicValidation() {	return [];	}</body></methods><methods><class-id>AppeX.LifeEventEditPresenter</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">acceptedPaths () {	return ["lifeevent"];}</body></methods><methods><class-id>AppeX.LifeEventEditPresenter</class-id> <category>build simple data types</category><body package="AppeX-Examples-Scaffolding">buildCellDataFor_date(attributeValue) {		this.buildDateCellDataForAttributeNameAndValue("date", attributeValue)}</body><body package="AppeX-Examples-Scaffolding">buildCellDataFor_time(attributeValue) {		var self = this,		anElement,		trimmedValue;			if (attributeValue) {		trimmedValue = attributeValue.trim();	} else {		trimmedValue = attributeValue;	}	this.renderer.startElement("input");		anElement = this.renderer.getCurrentElement();	this.renderer.onChange(function (input) {	//fires when typing in input		var timeString = input.value;		//consider adding attributeName to the params		self.updateObject("time", timeString);	});		anElement.on('changeTime', function() {  //fires wehn selecting through timepicker		var timeString = $(this).val();		//consider adding attributeName to the params		self.updateObject("time", timeString);	});	anElement.on('timeFormatError', function(event) {		anElement.val(trimmedValue); // reset the input to original 	});	this.renderer.finishElement(); //input	//anElement.timepicker({ 'timeFormat': 'H:i:s', 'forceRoundTime': true });	anElement.timepicker({ 'timeFormat': 'H:i:s' });	anElement.val(trimmedValue); 		   }</body></methods><methods><class-id>AppeX.DriverClient</class-id> <category>javascript - API</category><body package="AppeX-Examples-Scaffolding">mainPath() {	return 'driver';}</body></methods><methods><class-id>AppeX.DriverClient</class-id> <category>js - html</category><body package="AppeX-Examples-Scaffolding">buildHtml() {//The method is the start point for the application. 	var scaffold, response;		scaffold = new AppeX.Scaffold(this);	//The first request retuns the application database metadata. 	response = this.GET("initializeActiveRecordApplication");	response		.onSuccess(function (dataCollection) {			//The information includes list of all database tables and table attribute types. 			//The information is saved in the this.objectTypeInfos global object			// and used by the framework to create labels and data entry fields based on table column types 			scaffold.objectTypeInfos = dataCollection;			//Create and open the main application page			scaffold.openMainView();		})		.onError(function(error){			//Set renderer to display the error			scaffold.setRenderer();			scaffold.renderer				.startElement("div")				.text( error.statusText + ":" + error.response)				.finishElement();		});	}</body></methods><methods><class-id>AppeX.ParentSelectionPresenter</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">acceptedPaths() {	return ["findFather", "findMother"];}</body></methods><methods><class-id>AppeX.ParentSelectionPresenter</class-id> <category>open main view</category><body package="AppeX-Examples-Scaffolding">getTitleDetails() {// Answer the details of the title. Normally, this is the path of the Active Record object(s)// Subclasses may override.	return "from possible parents"}</body></methods><methods><class-id>AppeX.DwellingEditPresenter</class-id> <category>accessing</category><body package="AppeX-Examples-Scaffolding">acceptedPaths () {	return ["dwelling"];}</body></methods><methods><class-id>AppeX.DwellingEditPresenter</class-id> <category>validation</category><body package="AppeX-Examples-Scaffolding">validate_squareFootage(input) {	return this.validateType_Number(input, 20, 100000);}</body></methods><methods><class-id>AppeX.DwellingEditPresenter</class-id> <category>open main view</category><body package="AppeX-Examples-Scaffolding">getTitleDetails() {	if(!this.memento.id) {		return "a new dwelling";	}	return "dwelling '" + this.memento.nickName + "' in " + this.memento.realm;}</body></methods><methods><class-id>AppeX.JavascriptLibrary class</class-id> <category>configuration</category><body package="AppeX-Examples-Scaffolding">presenterLibrary"	This is Genealogy specific - why is it not named more appropriately?"	&lt;library: 'AppeX.PresenterLibrary.js'&gt;		^self new  		addClass: FamilyTreeListPresenter;		addClass: ParentSelectionPresenter;		addClass: AvocationEditPresenter;		addClass: LifeEventEditPresenter;		addClass: DwellingEditPresenter;		addClass: PersonageEditPresenter;	yourself.</body></methods><methods><class-id>AppeX.EditPresenter</class-id> <category>build simple data types</category><body package="AppeX-Examples-Scaffolding">buildDateCellDataForAttributeNameAndValue(attributeName, attributeValue) {		var self = this,		anElement;		this.renderer.startElement("input");		anElement = this.renderer.getCurrentElement();	anElement.datepicker();	anElement.datepicker("option", "dateFormat", "MM dd, yy");	this.renderer.val(attributeValue); //have to do this after setting datepicker format	anElement.datepicker().on("change", function (event) {			var input = event.currentTarget;		self.updateObject(attributeName, input.value);		$('.datepicker').hide();		self.validateInput(input, attributeName, "Date") ;		//date has been selected rather than manually typed, to remove invalid class from input if there is one		self.removeClassFrom('invalid', input);	});	$('.ui-datepicker').hide();	this.renderer.onChange(function (input) {		//executes when user types a date instead of selecting one through the widget.		//if its invalid, mark the input invalid and disable Accept button.		//if valid, mark input valid and enable the Accept button		try {			var aDate = $.datepicker.parseDate("MM dd, yy", input.value);		} catch (e) {			self.addClassTo('invalid', input);			self.disableAccept();		}		if (aDate) {			self.removeClassFrom('invalid', input);			self.enableAccept();		}	});	this.renderer.finishElement();	this.checkToBuildValidationDivForAttributeName(attributeName);}</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SelectionPresenter</name><environment>AppeX</environment><super>AppeX.GenericPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Scaffolding</package></attributes></class><class><name>ActiveRecord</name><environment>Glorp.ActiveRecords</environment><super>Glorp.PersistentObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpActiveRecord</package></attributes></class><class><name>ApplicationClient</name><environment>AppeX</environment><super>AppeX.JavascriptObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>javascriptLibrary </class-inst-vars><imports></imports><category>bootstrap</category><attributes><package>AppeX-Client</package></attributes></class><class><name>EditPresenter</name><environment>AppeX</environment><super>AppeX.ObjectPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Scaffolding</package></attributes></class><class><name>Application</name><environment>AppeX</environment><super>SiouX.HttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientSubscriptions session eventStream </inst-vars><class-inst-vars>settings requestActions subscriptionRegistry codeComposer combinedJavascriptLibrary </class-inst-vars><imports>			private Tools.Pragma			private Xtreams.*			private SiouX.*			private Protocols.*			</imports><category></category><attributes><package>AppeX-Server</package></attributes></class><class><name>ListPresenter</name><environment>AppeX</environment><super>AppeX.GenericPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Scaffolding</package></attributes></class><class><name>ActiveRecordDescriptorSystem</name><environment>Glorp.ActiveRecords</environment><super>Glorp.DescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metadataSession inflector currentDescriptor deferredDescriptorOperations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpActiveRecord</package></attributes></class></st-source>