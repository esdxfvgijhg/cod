<?xml version="1.0"?><st-source><!-- Name: AppeX-ExamplesNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: The AppeX-Examples package holds examples and demo apps for the development and testing of AppeX that have not been split off into subcategories (such as AppeX-Examples-Mobile).Usage	To start the AppeX examples server and explore the various examples, see the AppeX-Examples-Server package comments.DbIdentifier: bear73DbTrace: 502797DbUsername: vdegenDbVersion: 8.3 - 12DevelopmentPrerequisites: #(#(#any 'SiouX-WebSocket' '') #(#any 'Compression-Zip' '') #(#any 'AppeX-Internationalization' '') #(#any 'AppeX-Examples-Server' ''))PackageName: AppeX-ExamplesParcel: #('AppeX-Examples')PrerequisiteDescriptions: #(#(#name 'SiouX-WebSocket' #componentType #package) #(#name 'Compression-Zip' #componentType #package) #(#name 'AppeX-Internationalization' #componentType #package) #(#name 'AppeX-Examples-Server' #componentType #package))PrerequisiteParcels: #(#('SiouX-WebSocket' '') #('Compression-Zip' '') #('AppeX-Internationalization' '') #('AppeX-Examples-Server' ''))PrintStringCache: (8.3 - 12,vdegen)Version: 8.3 - 12Date: 3:30:55 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:30:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WebSocketChat</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>connections </class-inst-vars><imports>			private Xtreams.*			</imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.WebSocketChat</class-id><body>WebSocketChat is a Chat Room example based on WebSocket connectionImplementation:The WebSocketChat server does the following:	- Maintain a list of all connections and users	- When a user posts a new message, use the web socket connection to broadcast the message to all users	- If a user logs out, close the user connection and send a close notification to the remaining usersUsage:Open two web browser windows and login two users. For example: User1 and User2After loging the two users can post messages in the Enter Post window, and click Send to broadcast them to all users.Creating Secure Chat Server	(responder := WebSocketChat new)				path: '/appex/secure-websocket-chat';				addRequestFilter: (RequestFilter fromConfiguration: 'Chat Demo configuration' ).	server := (Server id: 'Secure-Chat') 				addResponder: responder; 				yourself.	listener := server listenOn: 8889 for: SiouX.HttpsConnection.	listener connectionTimeout: 2 hours.	chain := Array with: Certificate sampleRSA2048.	key := PrivateKey sampleRSA2048.	certificates := TLSCertificateStore newWithDefaults			known: chain first; "so that the client doesn't signal TLSUnknownCA"			certificate: chain key: key;			yourself.	serverContext := TLSContext newServerWithDefaults certificates: certificates; yourself.	listener tlsContext: serverContext.	server start.	server release.</body></comment><class><name>SimplestAppClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SimplestAppClient</class-id><body>SimplestAppClient contains the client side Javascript code for the SimpleApp example.</body></comment><class><name>SharedSessionApplication</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SharedSessionApplication</class-id><body>The class is a common superclass for 'pages' - classes that share session cache to create a multi-page site.This example is only one of many different ways one could accomplish building a multi-page site with AppeX - developers may want to experiment with designs different from the one described below.The &lt;b&gt;SharedSessionApplication class &gt;&gt; #serverConfiguration&lt;/b&gt; method uses the &lt;i&gt;#server:path:&lt;/i&gt; pragma to add a single responder to the 'Examples' server. The inidividual pages in the application are implemented as subclasses of SharedSessionApplication, which allows each page to declare its own HTML structure. Because the responder is a SharedSessionApplication, all 'session instances' will also be instances of the same class. Thus, only the SharedSessionApplication class should implement behavior that maintains the session state.Each of the pages in this example is declared as a service via the &lt;i&gt;html:&lt;/i&gt; pragma. The actual html content for each of these services is retrieved by sending &lt;i&gt;htmlDocument&lt;/i&gt; to the corresponding subclass. Some of the subclasses inherit the html document structure from SharedSessionApplication, some add their own html components. For examples, browse the senders of &lt;i&gt;body:&lt;/i&gt; in the SharedSessionApplication hierarchy.The 'page' subclasses use the same application client class (&lt;b&gt;SharedSessionClient&lt;/b&gt;) which implements all the client-side behavior. This is fine for a simple application like this. For a more complex application, you would probably want to break the client-side code into Javascript classes specific to each page subclass.The SharedSessionClient will check if a user is logged into the application, and if not, it will store the current URL as a 'landingPage' item in the sessionStorage, and automatically navigate to the &lt;a href="./login"&gt;login page&lt;/a&gt;. The login page does not use any authentication - you can enter pretty much anything you like. It is there only to illustrate the navigation and the session sharing capability.Upon successful login, the client code will navigate back to the landing page. For diagnostic and demonstration purposes, SharedSessionClient writes the current session information to the page. As you navigate between pages, you should see that the &lt;i&gt;sessionId&lt;/i&gt; remains the same, but the &lt;i&gt;expires&lt;/i&gt; value changes with each page navigation. The times in the stored session are in UTC.When a session expires due to inactivity (the default &lt;i&gt;ttl&lt;/i&gt; value is 600 seconds), the SharedSessionApplication sends a &lt;i&gt;SessionExpired&lt;/i&gt; event to the SharedSessionClient an event channel established at the page load. At that point, the session information is flushed from the sessionStorage, and the application will automatically navigate to an 'expired' page. After that, the navigation starts from the beginning - if you click on any of the links in the navigation bar, the page will be registered as the landingPage, and you will be brought back to the login page.</body></comment><class><name>SharedSessionClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SharedSessionClient</class-id><body>SharedSessionClient contains the client side Javascript code for the SharedSessionApplication example. To illustrate the flixibility of the Application / Client pairings, only some SharedSessionApplication subclasses have corresponding client classes. See my subclasses.</body></comment><class><name>SharedSessionLoginClient</name><environment>AppeX</environment><super>AppeX.SharedSessionClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SharedSessionLoginClient</class-id><body>SharedSessionLoginClient is the client class for SharedSessionLogin page. Its only job is to show the login form on the page.</body></comment><class><name>WebComponent</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.WebComponent</class-id><body>WebComponent is an example application using the WebComponent set of specs (http://www.w3.org/wiki/WebComponents/)</body></comment><class><name>TestDebugClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.TestDebugClient</class-id><body>TestDebugClient contains the client side Javascript code for the TestDebugApp example. The web page allows setting debug options in JS code and see debug messages in a web browse developer console.</body></comment><class><name>Chat</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.Chat</class-id><body>Chat is an example of server event notifications using the default EventSource object provided by the AppeX framework. The application uses JQuery to build the application DOM elements.Class Instance Variables	loggedInUsers &lt;OrderedCollection of Users&gt;Implementation:The clients register interest in server events: #LoggedInUser, #LoggedOutUser and #newPost. When a client sends any of the messages #LoggedInUser, #LoggedOutUser or #newPost to the server the message will be broadcasted to all clients. For more information about Server-Sent Events see Web Development documentation.Usage:Open two web browser windows and login two users. For example: User1 and User2After loging the two users can post messages in the Enter Post window, and click Send to broadcast them to all users.</body></comment><class><name>SharedSessionExpired</name><environment>AppeX</environment><super>AppeX.SharedSessionApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SharedSessionExpired</class-id><body>SharedSessionExpired produces a no-session page that the application navigates to when a session expires. It requires no session, has no applicationClientClass, and the body only has a notice about the session expiration.</body></comment><class><name>AjaxFileUpload</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>directory </class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.AjaxFileUpload</class-id><body>AJAX-based File upload demo. Note that this example only uploads file to a shared 'upload' directory, the upload destination is not session specific.</body></comment><class><name>AjaxFileUploadClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.AjaxFileUploadClient</class-id><body>AjaxFileUploadClient contains the client side Javascript code for the AjaxFileUpload example.</body></comment><class><name>WebComponentClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.WebComponentClient</class-id><body>WebComponentClient is the client side of a WebComponent example app.</body></comment><class><name>WebSocketApp</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.WebSocketApp</class-id><body>WebSocket demo is a simple application that switches HTTP protocol to WebSocket, sends a WebSocket message, prints response and closes the connection. The application also shows sending a file stream as a fragmented message (20000 bytes in a fragment). </body></comment><class><name>TestDebugApplication</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.TestDebugApplication</class-id><body>TestDebugApplication shows how to set debug options for client Javascript code.</body></comment><class><name>User</name><environment>AppeX</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name email loggedIn </inst-vars><class-inst-vars>users subscriptionRegistry </class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.User</class-id><body>User is used by UserRESTApplications.Instance Variables:	email	&lt;String&gt;	email	name	&lt;String&gt;	name	loggedIn &lt;Boolean&gt; 	whether user is logged inClass Instance Variables:	users	&lt;Collection of &lt;User&gt;&gt; poor man's database of user objects.	subscriptionRegistry &lt;SubscriptionRegistry&gt; 	to support class-side announcement API</body></comment><class><name>StaticFilesFromDisk</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.StaticFilesFromDisk</class-id><body>StaticFilesFromDisk is an example web app that shows how static files might be served from a web application server.</body></comment><class><name>HelloLocalizedClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.HelloLocalizedClient</class-id><body>HelloLocalizedClient has not been commented.  </body></comment><class><name>SharedSessionAboutClient</name><environment>AppeX</environment><super>AppeX.SharedSessionClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SharedSessionAboutClient</class-id><body>SharedSessionAboutClient is the client class for SharedSessionAbout page. Its only job is to fetch the class comment from SharedSessionApplication and present it on the page.</body></comment><class><name>UserRESTClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.UserRESTClient</class-id><body>UserRESTClient contains the client side Javascript code for the UserRESTApplication.  The client uses HTTP verbs (GET, POST, PUT, DELETE ) to add, change and remove user objects on the server. The objects are send as JSON strings.</body></comment><class><name>EventSourceClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.EventSourceClient</class-id><body>EventSource client </body></comment><class><name>FileUpload</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>directory </class-inst-vars><imports>			private Xtreams.*			</imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.FileUpload</class-id><body>File upload demo. Note that this example only uploads file to a shared 'upload' directory, the upload destination is not session specific.</body></comment><class><name>D3Bar</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.D3Bar</class-id><body>D3Bar is an example application of a bar graph using the D3 Javascript graphic library (http://d3js.org/).</body></comment><class><name>D3BarClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.D3BarClient</class-id><body>D3BarClient contains the client side Javascript code for the D3Bar example.</body></comment><class><name>EventSource</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>timer message </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.EventSource</class-id><body>EventSource is an example of using EventSource object on the client. Implementation:Click on "Start Streaming" to start pushing messages from the server every 3 seconds. Enter a message that the server pushes back to clients as an eventClick on "Stop Streaming" to stop pushing messages from the server</body></comment><class><name>ChatClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.ChatClient</class-id><body>Chat demo client</body></comment><class><name>UserRESTApplication</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.UserRESTApplication</class-id><body>UserRESTApplication is simple RESTful type of web application. It uses HTTP verbs (GET, POST, PUT, DELETE )  to add, change or remove User objects in the image. The User objects are sent using JSON encoding.Class Instance Variables:	users &lt;OrderedCollection of User&gt;</body></comment><class><name>D3ChartClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.D3ChartClient</class-id><body>D3ChartClient contains the client side Javascript code for the D3Chart example.</body></comment><class><name>SharedSessionLogin</name><environment>AppeX</environment><super>AppeX.SharedSessionApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SharedSessionLogin</class-id><body>SharedSessionLogin adds an HTML form for entering login information.</body></comment><class><name>WebSocketAppClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.WebSocketAppClient</class-id><body>WebSocketAppClient contains the client side Javascript code for the WebSocketApp example.</body></comment><class><name>WebSocketChatClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.WebSocketChatClient</class-id><body>WebSocketChatClient contains the client side Javascript code for the WebSocketChar example.</body></comment><class><name>D3Chart</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.D3Chart</class-id><body>D3Chart is an example application of a chart using the D3 Javascript graphic library (http://d3js.org/).</body></comment><class><name>SharedSessionAbout</name><environment>AppeX</environment><super>AppeX.SharedSessionApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SharedSessionAbout</class-id><body>SharedSessionAbout uses a different client class than SharedSessionApplication, otherwise it produces the same HTML.</body></comment><class><name>HelloLocalized</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>locale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.HelloLocalized</class-id><body>A Hello World example that uses the AppeX localization framework.  The AppeX session framework is used to keep track of the client-chosen locale. An alternative would have been to use a session filter as is done in the SiouX LocalHello example.This class can also be used to demonstrate message catalog generation.To aid in creating a template locale specific catalog during development, you should use Application class extensions in the AppeXTools package.e.g. Run in a workspace: HelloLocalized generateUserMessageCatalog.This will generate the file $VISUALWORKS\messages\visualworks\en\HelloLocalized.lbl.Executing this method will search the associated ApplicationClient (in this case HelloLocalizedClient) for references to the function _translate, and generate a catalog file based on whatever key/ value pairs that the references provide.</body></comment><class><name>SimplestApp</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples</package></attributes></class><comment><class-id>AppeX.SimplestApp</class-id><body>SimplestApp a minimum-requirement web application to demonstrate what developers need to get started.</body></comment><methods><class-id>AppeX.WebSocketChat</class-id> <category>accessing</category><body package="AppeX-Examples">protocolVersions	^Array with: (WebSocket new					subprotocols: #('chat');					yourself)</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^WebSocketChatClient</body><body package="AppeX-Examples">connections	^connections ifNil: [ connections := Dictionary new ]</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>dispatching - web socket</category><body package="AppeX-Examples">closedConnectionWhere: aBlock"	Go through a copy of my connections so that I don't modify the original when I found a connection to be removed.	When such a connection was found, remove it, log out the user, and return."	self connections copy keysAndValuesDo: [ :eachUser :eachConnection |		(aBlock value: eachConnection) ifTrue: [			self connections removeKey: eachUser ifAbsent: [nil].			eachUser logOut.			^ self]		]</body><body package="AppeX-Examples">establishedWSConnection: wsConnection	wsConnection server		when: ConnectionClosed		do: [ :ann | self closedHttpConnection: ann connection].</body><body package="AppeX-Examples">receivedWSControlFrame: aMessage connection: wsConnection	aMessage isClose ifFalse: [ ^ self ].		self closedConnectionWhere: [ :aWSConnection | aWSConnection == wsConnection ]</body><body package="AppeX-Examples">receivedWSDataOn: aStream connection: wsConnection message: wsMessage	"Read data from Web socket stream "	| message type str data user |	data := wsMessage isText				ifTrue: [String new writing]				ifFalse: [^self error: 'Expected text messages only!'].	data write: aStream.	data := data contents.	"Parsing JSON data "	str := data reading marshaling: JSON.	message := str get.	type := (message at: #type) asSymbol.	user := User named: (message at: #user).	type = #LoggedInUser ifTrue: [		user := User named: (message at: #user).		user logIn.		self connections at: user ifAbsentPut: [wsConnection].		self sendMessage: self userListMessage to: wsConnection.		self sendMessage: message asJsonString to: wsConnection.		^self].	type = #NewPost ifTrue: [		user postMessage: (message at: #text).		^self]</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>services</category><body package="AppeX-Examples">broadcastMessage: aString	self connections keysAndValuesDo: [:eachUser :eachWSConnection |		eachUser isLoggedIn ifTrue: [ self sendMessage: aString to: eachWSConnection]		]</body><body package="AppeX-Examples">closedHttpConnection: anHttpConnection	self closedConnectionWhere: [ :aWSConnection | aWSConnection httpConnection == anHttpConnection ]</body><body package="AppeX-Examples">sendMessage: aString to: aWebSocketConnection	^aWebSocketConnection sendTextStream: aString reading</body><body package="AppeX-Examples">userListMessage	^((Dictionary new)		at: 'type' put: #UserList;		at: 'users' put: User loggedInUserNames;		yourself) asJsonString</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>private-events</category><body package="AppeX-Examples">processUserEvent: aServerEvent	|  data |	data := Dictionary with: #type -&gt; aServerEvent eventName.	(#(LoggedInUser LoggedOutUser) includes: aServerEvent eventName)		ifTrue: [ data at: #user put: aServerEvent data ]		ifFalse: [ data addAll: aServerEvent data ].		self broadcastMessage: data asJsonString</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>initialize-release</category><body package="AppeX-Examples">obsolete	User unsubscribe: self</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>class initialization</category><body package="AppeX-Examples">initialize	User		when: ServerEvent		send: #processUserEvent:		to: self</body></methods><methods><class-id>AppeX.SharedSessionApplication</class-id> <category>configuration</category><body package="AppeX-Examples">configureFrom: aPragma	^super configureFrom: aPragma</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>services</category><body package="AppeX-Examples">ensureRootHtmlDocument"	This will ensure all 'on the fly' pragma definitions for libraries are present in SharedSessionApplication requestActions."	SharedSessionApplication htmlDocument</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^SharedSessionClient</body><body package="AppeX-Examples">asJavascriptLibraryName	"Me and my subclasses will all return the same library.	This could have an arbitrary name, but let's just return the name of the SharedSessionApplication."		^SharedSessionApplication fullName, '.js'</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>testing</category><body package="AppeX-Examples">isSessionRequired"	I and some of my subclasses require session - override the default."	^true</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>session management</category><body package="AppeX-Examples">sessionReleased: aSession	aSession data ifNotNil: [ :user | user logOut ].	super sessionReleased: aSession.</body></methods><methods><class-id>AppeX.WebComponent class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^ WebComponentClient</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^ChatClient</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>events</category><body package="AppeX-Examples">announceClientEvent: aClientEvent"	Allow User class to rebroadcast some ClientEvent instances as ServerEvent."	(#(LoggedInUser NewPost LoggedOutUser) includes: aClientEvent eventName)		ifTrue: [ User announce: aClientEvent asServerEvent ]		ifFalse: [ super announceClientEvent: aClientEvent ]</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>class initialization</category><body package="AppeX-Examples">initialize	User		when: ServerEvent		send: #doAnnounceServerEvent:		to: self</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>initialize-release</category><body package="AppeX-Examples">obsolete	User unsubscribe: self</body></methods><methods><class-id>AppeX.SharedSessionExpired class</class-id> <category>testing</category><body package="AppeX-Examples">isSessionRequired	^ false</body></methods><methods><class-id>AppeX.SharedSessionExpired class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^nil</body></methods><methods><class-id>AppeX.AjaxFileUpload class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^ AjaxFileUploadClient</body><body package="AppeX-Examples">directory	directory ifNil: [directory := Application rootDirectory / 'upload'].	directory ensureDirectory.	^directory</body></methods><methods><class-id>AppeX.WebSocketApp</class-id> <category>accessing</category><body package="AppeX-Examples">protocolVersions	^Array with: WebSocket new</body></methods><methods><class-id>AppeX.WebSocketApp class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^WebSocketAppClient</body></methods><methods><class-id>AppeX.WebSocketApp class</class-id> <category>dispatching - web socket</category><body package="AppeX-Examples">establishedWSConnection:  wsConnection	wsConnection sendMessage: (WebSocketMessage text: 'Server connection is ready')</body><body package="AppeX-Examples">receivedWSDataOn: aStream connection: wsConnection message: aMessage	| data |	"Expecting text data only and that is why using text stream to read the application data"	data := aMessage isText			ifTrue: [ String new writing ]			ifFalse: [^self error: 'Expected text messages only!'].	"Read data from web socket stream"	data write: aStream.	data := data contents.	"Process data"	('error' match: data)  ifTrue: [^self error: 'Server error!'].	('file' match: data)  ifTrue: [^self sendFile: wsConnection].	wsConnection sendTextStream: data reading</body><body package="AppeX-Examples">sendFile: wsConnection"The method creates a file and sends the file stream as fragmented text message "	| stream  filename |	" Create a file if it doesn't exists"	filename := 'WebSocketApp_tempFile.txt' asFilename.	filename exists ifFalse: [ | outputStream inputStream |		outputStream := filename writing.		[	inputStream := (ObjectMemory imagePrefix, '.cha') asFilename reading.			1 to: 100003 do: [ :ind | outputStream write: inputStream get].		] ensure: [				inputStream ifNotNil: [ inputStream close ].			outputStream ifNotNil: [ outputStream close ]]].	"Send the file as a fragmented message "		stream := filename asFilename reading.		wsConnection sendMessage: (WebSocketMessage text: 'sending file' ).		[			wsConnection payloadLimit: 20000. "set smaller limit on payload to force sending fragments"			wsConnection sendTextStream: stream		] ensure: [ 			stream close.			wsConnection payloadLimit: nil ].	wsConnection sendMessage: (WebSocketMessage text: 'file sent')</body></methods><methods><class-id>AppeX.TestDebugApplication class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^TestDebugClient</body></methods><methods><class-id>AppeX.User</class-id> <category>accessing</category><body package="AppeX-Examples">email	^email</body><body package="AppeX-Examples">email: anObject	email := anObject</body><body package="AppeX-Examples">name	^name</body><body package="AppeX-Examples">name: anObject	name := anObject</body></methods><methods><class-id>AppeX.User</class-id> <category>printing</category><body package="AppeX-Examples">printOn: aStream	name 		ifNotNil: [ aStream nextPutAll: name]		ifNil: [super printOn: aStream]</body></methods><methods><class-id>AppeX.User</class-id> <category>actions</category><body package="AppeX-Examples">announceLogIn	self class announce: (ServerEvent eventName: #LoggedInUser data: self name)</body><body package="AppeX-Examples">announceLogOut	self class announce: (ServerEvent eventName: #LoggedOutUser data: self name)</body><body package="AppeX-Examples">announceUserList	self class announce: (		ServerEvent			eventName: #UserList			data: (Dictionary with: #users -&gt; User loggedInUserNames))</body><body package="AppeX-Examples">isLoggedIn	^loggedIn == true</body><body package="AppeX-Examples">logIn	self isLoggedIn ifTrue: [^self].	loggedIn := true.	self announceLogIn.	self announceUserList.</body><body package="AppeX-Examples">logOut	self isLoggedIn ifFalse: [^self].	loggedIn := false.	self announceLogOut.	self announceUserList.</body><body package="AppeX-Examples">postMessage: messageString	self class announce: (		ServerEvent			eventName: #NewPost			data: (Dictionary				with: #user -&gt; self name				with: #text -&gt; messageString))</body></methods><methods><class-id>AppeX.User</class-id> <category>exceptions</category><body package="AppeX-Examples">validateLoginFor: anApplicationClass	self isLoggedIn ifFalse: [^self].	anApplicationClass responseForbidden		contents: 'User ', self name, ' is already logged in!';		signalReady</body></methods><methods><class-id>AppeX.User class</class-id> <category>instance creation</category><body package="AppeX-Examples">name: aString	| userName |	userName := aString copyReplaceAll: ' ' with: '.'.	^self name: aString email: (userName, '@example.com')</body><body package="AppeX-Examples">name: aString email: mailString	^self new		name: aString;		email: mailString;		yourself</body></methods><methods><class-id>AppeX.User class</class-id> <category>accessing</category><body package="AppeX-Examples">addUser: aUser	^self users add: aUser</body><body package="AppeX-Examples">defaultUsers	^ OrderedCollection new		add: (User name: 'Bob Smith' email: 'smith@example.com');		add: (User name: 'John Doe' email: 'johndoe@example.com');		add: (User name: 'Jane Doe' email: 'janedoe@example.com');		yourself</body><body package="AppeX-Examples">findMany: aBlock"	(self findMany: [ :user | user name beginsWith: 'Bob' ])"	^ self users select: aBlock</body><body package="AppeX-Examples">findOne: aBlock"	(self findOne: [ :user | user name = 'Bob Smith' ])"	^ self users		detect: aBlock		ifNone: [ nil ]</body><body package="AppeX-Examples">loggedInUserNames		^ User loggedInUsers collect: #name.</body><body package="AppeX-Examples">loggedInUsers"	(self loggedInUsers)"	^ self findMany: [ :user | user isLoggedIn ]</body><body package="AppeX-Examples">named: aString"	Find a User named aString. If none is found, automatically create one.	(self named: 'Test User')"	^ (self findOne: [:user | user name = aString ])		ifNil: [self addUser: (self name: aString)]		ifNotNil: [ :user | user ]</body><body package="AppeX-Examples">removeUser: aUser	^ self users remove: aUser ifAbsent: [ nil ]</body><body package="AppeX-Examples">removeUserNamed: userName	^ (self findOne: [ :user | user name = userName ]) ifNotNil: [ :user |		user logOut.		self removeUser: user ]</body><body package="AppeX-Examples">userNames 	^ self users collect: #name</body><body package="AppeX-Examples">users	^users ifNil: [users := self defaultUsers]</body><body package="AppeX-Examples">users: aCollectionOfUser	users := aCollectionOfUser</body></methods><methods><class-id>AppeX.User class</class-id> <category>announcements</category><body package="AppeX-Examples">subscriptionRegistry: aSubscriptionRegistry	subscriptionRegistry := aSubscriptionRegistry</body><body package="AppeX-Examples">subscriptionRegistryOrNil	^subscriptionRegistry</body></methods><methods><class-id>AppeX.User class</class-id> <category>initialize-release</category><body package="AppeX-Examples">obsolete	subscriptionRegistry := nil</body></methods><methods><class-id>AppeX.StaticFilesFromDisk class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	"All I do are static HTML files. No JS necessary."	^nil</body></methods><methods><class-id>AppeX.StaticFilesFromDisk class</class-id> <category>configuration</category><body package="AppeX-Examples">contentsOfIndexHtml	^ '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;p&gt;This app uses only static files. Click the links below to see if it works.&lt;/p&gt;&lt;a href="linkA.html"&gt;Link A&lt;/a&gt;&lt;a href="linkB.html"&gt;Link B&lt;/a&gt;&lt;a href="subdirectory/linkC.html"&gt;Link C&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'</body><body package="AppeX-Examples">contentsOfLinkAHtml	^ '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Link A!&lt;/h1&gt;&lt;p&gt;That was easy! See if other links work too.&lt;/p&gt;&lt;a href="index.html"&gt;Home&lt;/a&gt;&lt;a href="linkB.html"&gt;Link B&lt;/a&gt;&lt;a href="subdirectory/linkC.html"&gt;Link C&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'</body><body package="AppeX-Examples">contentsOfLinkBHtml	^ '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Link B!&lt;/h1&gt;&lt;p&gt;Congratulations! More clicking to be dome.&lt;/p&gt;&lt;a href="index.html"&gt;Home&lt;/a&gt;&lt;a href="linkA.html"&gt;Link A&lt;/a&gt;&lt;a href="subdirectory/linkC.html"&gt;Link C&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'</body><body package="AppeX-Examples">contentsOfLinkCHtml	^ '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Link C!&lt;/h1&gt;&lt;p&gt;Wow! Your ability to follow simple instructions is amazing.&lt;/p&gt;&lt;a href="../index.html"&gt;Home&lt;/a&gt;&lt;a href="../linkA.html"&gt;Link A&lt;/a&gt;&lt;a href="../linkB.html"&gt;Link B&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'</body><body package="AppeX-Examples">ensureDirectory: directory contains: filename with: aString	(directory / filename) exists		ifFalse: 			[((directory / filename) writing encoding: #utf8)				setLineEndCRLF;				write: aString;				close]</body><body package="AppeX-Examples">ensureFilesReady	"	self ensureFilesReady	"	| directory |	directory := Application rootDirectory / 'static-files'.	directory ensureDirectory.	self ensureDirectory: directory contains: 'index.html' with: self contentsOfIndexHtml.	self ensureDirectory: directory contains: 'linkA.html' with: self contentsOfLinkAHtml.	self ensureDirectory: directory contains: 'linkB.html' with: self contentsOfLinkBHtml.	directory := directory / 'subdirectory'.	directory ensureDirectory.	self ensureDirectory: directory contains: 'linkC.html' with: self contentsOfLinkCHtml.</body></methods><methods><class-id>AppeX.FileUpload</class-id> <category>responding</category><body package="AppeX-Examples">respondWithDownload: aFilename	^ self class respondWithDownload: aFilename</body><body package="AppeX-Examples">respondWithUpload: aFilename	^ self class respondWithUpload: aFilename</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^nil</body><body package="AppeX-Examples">directory	directory ifNil: [directory := Application rootDirectory / 'upload' ].	directory ensureDirectory.	^directory</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>responding</category><body package="AppeX-Examples">respondWithDownload: aFilename	^ aFilename exists		ifTrue: [ | resp |				resp := self currentResponse.				(resp contentDisposition: 'attachment') fileName: aFilename tail.				resp contents: aFilename.				resp ]		ifFalse: [ self responseNotFound ]</body><body package="AppeX-Examples">respondWithUpload: aString	^ self currentResponse		contents: aString;		yourself</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>private</category><body package="AppeX-Examples">acceptForUpload: aFormData ifFail: aBlock	"Accept a request to upload a file into @directoryFilename.	IF the upload fails, evaluate @aBlock with the name of the file in argument."	| files filename stream |	files := OrderedCollection new.	aFormData getMultipartFormDataFilesDo:  [ :part |		[			filename := self directory / part contentDisposition fileName.			filename exists ifTrue: [filename delete].			stream := filename writing.			[ stream write: part body ] ensure: [ stream close].			files add: filename tail.		] on: Error do: [ :ex |  aBlock value: part contentDisposition fileName]].	^ files</body></methods><methods><class-id>AppeX.D3Bar class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^D3BarClient</body></methods><methods><class-id>AppeX.EventSource</class-id> <category>initialize-release</category><body package="AppeX-Examples">initialize	timer := Timer new			period: 3 seconds;			block: [ self postMessage ];			yourself</body><body package="AppeX-Examples">postMessage"The server announces #MessageReceived event. The event is pushed to all clients who register an interest in it"	| text |	message		ifNotNil: [			text := message.			message := nil ]		ifNil: [text := 'no data'].	self postServerEvent: (ServerEvent		eventName: #MessageReceived		data: (Timestamp nowUTC printString, ' - ', text))</body></methods><methods><class-id>AppeX.EventSource class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^EventSourceClient</body></methods><methods><class-id>AppeX.UserRESTApplication</class-id> <category>accessing</category><body package="AppeX-Examples">newResponse	^super newResponse		cacheControl: 'no-cache, no-store, must-revalidate';		expires: Timestamp now;		yourself</body></methods><methods><class-id>AppeX.UserRESTApplication class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^UserRESTClient</body></methods><methods><class-id>AppeX.SharedSessionLogin class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^SharedSessionLoginClient</body></methods><methods><class-id>AppeX.D3Chart class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^D3ChartClient</body></methods><methods><class-id>AppeX.SharedSessionAbout class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^ SharedSessionAboutClient</body></methods><methods><class-id>AppeX.HelloLocalized</class-id> <category>accessing</category><body package="AppeX-Examples">locale	^locale</body><body package="AppeX-Examples">locale: anObject	locale := anObject</body></methods><methods><class-id>AppeX.HelloLocalized</class-id> <category>services</category><body package="AppeX-Examples">printLocaleInfo	"Return a dictionary of strings printed out for the current locale of this HelloLocallized instance."	"store the locale for the active  process so that it can be restored"	| originalLocale aDictionary aLocale |	originalLocale := Processor activeProcess locale.	aLocale := self locale.	[Processor activeProcess locale: aLocale.	aDictionary := Dictionary new.	aDictionary at: 'localeName' put:  aLocale name.	aDictionary at: 'millionOfCurrency' put: (aLocale printAsCurrency: 1000000) string.	aDictionary at: 'currentTimestamp' put:  Timestamp now printString] ensure: [Processor activeProcess locale: originalLocale].	^aDictionary</body><body package="AppeX-Examples">setLocaleFromPath	|  aLocale aResponderPath aRequestPath aRequestContext languageId |		aRequestContext := self currentRequestContext.	aRequestPath := aRequestContext request decodedPath.	aResponderPath := aRequestContext responder decodedPath.		"E.g. request path '/hello-localized/en-us/locale-info' and responder path '/hello-localized' gives a languageId of 'en-us'. "	aRequestPath size &gt;= (aResponderPath size + 1)		ifTrue: [			languageId := aRequestPath at:  aResponderPath size + 1. 			aLocale := Locale getLocaleNamed: languageId.			self locale: aLocale.]</body></methods><methods><class-id>AppeX.HelloLocalized class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^HelloLocalizedClient</body></methods><methods><class-id>AppeX.SimplestApp class</class-id> <category>accessing</category><body package="AppeX-Examples">applicationClientClass	^SimplestAppClient</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>html</category><body package="AppeX-Examples">bodyDivHome	&lt;body: 50&gt;	^ '	&lt;div id="page"&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">headExternalLibraries	&lt;head: 200&gt;	^JQueryCSS, 	self jqueryMinTags</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'WebSocket Chat Room'</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'.users { 	width: 29%;	float: left;	height: 200px; }.users h3, .log h3, .input h3 { 	text-align: center; 	margin: 0; }.log { 	width: 70%;	float: right;	height: 400px; }.post {	width: 29%;	float: left;	height: 200px; }.input {	width: 98%;	height: 100px;	margin: 2x; }#chat-log-container, #user-container {	position: absolute;	overflow-y: scroll;	top: 1.5em;	bottom: 0px;	width: 100%;}#log-row {	display: table-row;	padding: 10px 10px 2px;}#log-row-user, #log-row-phrase {    display: table-cell;    padding-right: 25px; }#log-row-user p, #log-row-phrase p {	margin: 1px 1px; }}'</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>services</category><body package="AppeX-Examples">loginUser	&lt;plainText: 'loginUser'&gt;	| userName user |	userName := self currentRequestArguments.	user := User named: userName.	user validateLoginFor: self.	user logIn.	^'accepted'</body></methods><methods><class-id>AppeX.WebSocketChat class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/websocket/chat'&gt;</body></methods><methods><class-id>AppeX.SimplestAppClient</class-id> <category>building</category><body package="AppeX-Examples">buildHtml() {// The main function for building the HTML.// This method is just an example, a template for building your own.// this.queryParameters and this.hashPath properties give the application a way to build// the contents based on various URL parameters.// e.g.: http://myServer/myApplication?productId=1234#view/productName	var body = document.body;	var build = function (tagName, idAndClass, text) {		var element = document.createElement(tagName);		element.id = idAndClass;		element.className = idAndClass;		element.appendChild(document.createTextNode(text));		body.appendChild(element);		return element;	};		var queryHeader = null;	// Build the header, the content, and the footer:	build("header", "header", "This is a header");	build("div", "content", "Content follows.");		for (var eachParameter in this.queryParameters) {		if (queryHeader === null) {			queryHeader = build("h3", "query-parameters", "Query Parameters:");		}		build(			"li",			"query-" + eachParameter,			eachParameter + ": " + this.queryParameters[eachParameter]		);	}	if (this.hashPath.length &gt; 0) {		build("h3", "hash-components", "Hash Components:");		for (var i = 0; i &lt; this.hashPath.length; i++) {			build(				"li",				"hash-component-" + i,				i + ": " + this.hashPath[i]			);		}	}	build("footer", "footer", "This is a footer");	return this;}</body></methods><methods><class-id>AppeX.SharedSessionApplication</class-id> <category>services</category><body package="AppeX-Examples">aboutContent	&lt;GET&gt;	&lt;html: 'about-content'&gt;	^self class comment</body><body package="AppeX-Examples">getUser""	&lt;json: 'get-user'&gt;		^self session data</body><body package="AppeX-Examples">submitLogin	&lt;json: 'submit-login'&gt;	| arguments user |	arguments := self currentRequestArguments.	user := (User named: (arguments at: #username))				email: (arguments at: #email).	user logIn.	self session data: user.	^self session data</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'body {	font-family: Arial, Helvetica, sans-serif;}header {	text-align: center;	font-weight: bold;}.content {	margin: 1em;}footer {	text-align: center;	font-size: smaller;	color: DarkGray;}'</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>html</category><body package="AppeX-Examples">bodyContainer	&lt;body: 20&gt;		^'&lt;div id="container"&gt;	&lt;h2&gt;Session Data:&lt;/h2&gt;	&lt;table id="session-data"&gt;&lt;/table&gt;	&lt;h2&gt;User Info:&lt;/h2&gt;	&lt;div id="user-data"&gt;&lt;/div&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">bodyErrors	&lt;body: 99&gt;		^ '&lt;div id="errors" style="display:none"&gt;	&lt;h2&gt;Errors&lt;/h2&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">bodyNavBar	&lt;body: 10&gt;		^ '&lt;nav id="navbar"&gt;  &lt;a href="./"&gt;Home&lt;/a&gt; |  &lt;a href="./login"&gt;Login&lt;/a&gt; |  &lt;a href="./about"&gt;About&lt;/a&gt; |  &lt;a href="../chat-room-demo"&gt;Go to Chat Room&lt;/a&gt;&lt;/nav&gt;'</body><body package="AppeX-Examples">headJQuery	&lt;head: 20&gt;		^ '&lt;script src="https://code.jquery.com/jquery-2.2.1.min.js" integrity="sha256-gvQgAFzTH6trSrAWoH1iPo9Xc96QxSZ3feW6kem+O00=" crossorigin="anonymous"&gt;&lt;/script&gt;'</body><body package="AppeX-Examples">htmlBaseURI"	Override the default. This makes a rather dangerous assumption that the path of the responder	will be the same as the URL used from the browser. This will be true if the SiouX server is accessed	directly, but if it is behind a reverse proxy this may not always be true.	However, for the purpose of this example, this assumption should always be true."	&lt;htmlToken: #baseURI&gt;	^ self currentRequestContext		ifNil: [ '/']		ifNotNil: [ :context |			| path |			path := context responder path.			path last = $/ ifFalse: [path := path, '/'].			path ]</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>services</category><body package="AppeX-Examples">htmlAbout	&lt;html: 'about'&gt;		self ensureRootHtmlDocument.	^ SharedSessionAbout htmlDocument</body><body package="AppeX-Examples">htmlExpired	&lt;html: 'expired'&gt;		self ensureRootHtmlDocument.	^ SharedSessionExpired htmlDocument</body><body package="AppeX-Examples">htmlLogin	&lt;html: 'login'&gt;		self ensureRootHtmlDocument.	^ SharedSessionLogin htmlDocument</body></methods><methods><class-id>AppeX.SharedSessionApplication class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/shared-session'&gt;		self shareSessionCacheWith: self subclasses.	self shareSessionCacheWith: Chat</body></methods><methods><class-id>AppeX.SharedSessionClient</class-id> <category>building</category><body package="AppeX-Examples">buildHtml() {	// The main function for building the HTML.	this.buildSessionData();	this.buildUserData();}</body><body package="AppeX-Examples">buildSessionData() {	var	row, label, data,		session = this.getSessionFromStorage(),		table = $("#session-data");		for (each in session) {		row = $("&lt;tr&gt;");		label = $("&lt;td&gt;")			.text(each)			.appendTo(row);		data = $("&lt;td&gt;")			.text(session[each])			.appendTo(row);		row.appendTo(table);	}}</body><body package="AppeX-Examples">buildUserData(){	var self = this;	this.POST("get-user")		.onSuccess(function (data) {			if(data == "null") {				return self.goToLogin();			};			self.user = data;			self.storeItemInStorage("appex_user", data, window.sessionStorage);			$("#user-data")				.text("You are logged in as " + data.name + "(" + data.email + ")");			$("#login-form").remove();		})		.onError(function (error) {			self.logError("get-user", error)		})}</body><body package="AppeX-Examples">logError(aTitle, aString) {	var errors = $("#errors");	$("&lt;h3&gt;")		.text(aTitle)		.appendTo(errors);	$("&lt;p&gt;")		.text(aString)		.appendTo(errors);	errors.css("display", "block")}</body></methods><methods><class-id>AppeX.SharedSessionClient</class-id> <category>session management</category><body package="AppeX-Examples">showSessionExpired(session) {	this.goToExpired();}</body></methods><methods><class-id>AppeX.SharedSessionClient</class-id> <category>navigation</category><body package="AppeX-Examples">goToExpired(){	window.location.href="./expired";}</body><body package="AppeX-Examples">goToLogin(){	sessionStorage.setItem("landingPage", window.location.pathname);	$("#container").append("&lt;p&gt;You are not logged in. You will be redirected to the login page within 3 seconds.&lt;/p&gt;");	$("#container").append("&lt;p&gt;If you are not redirected automatically, &lt;a href='./login'&gt;click here&lt;/a&gt;.&lt;/p&gt;");	setTimeout(		function () {window.location.href="./login"},		3000	);}</body></methods><methods><class-id>AppeX.SharedSessionClient</class-id> <category>server events</category><body package="AppeX-Examples">handleSessionExpired(session) {	this.removeItemFromStorage("appex_user", window.sessionStorage);	return this.callSuper("handleSessionExpired", arguments);}</body></methods><methods><class-id>AppeX.SharedSessionLoginClient</class-id> <category>building</category><body package="AppeX-Examples">buildHtml(){	// Buld the HTML the same way my superclass would.	// If there is an appex_user in the sessionStorage, nothing else is to be done.	// Otherwise, show the login form and hook an event handler to the submit button.	var self = this;	this.callSuper("buildHtml", []);	if (this.getItemFromStorage("appex_user", window.sessionStorage)) {		return;	};	$("#login-form").css("display", "block");	$("#submit-button").click(function (event) {		self.submitLogin(event);	});}</body><body package="AppeX-Examples">submitLogin(event){	var formData,		postData = {},		self = this;		formData = $("#login-form").serializeArray();	for (var i = 0; i &lt; formData.length; i++) {		var name, value;		name = formData[i].name;		value = formData[i].value;		postData[name] = value;	};	this.POST("submit-login", postData)		.onSuccess(function (response) {			window.location.href = sessionStorage.getItem("landingPage");		})		.onError(function (error) {			self.logError("Login failure", error);		});	// Prevent the form from being handled by the default handler.	event.preventDefault();	return false;}</body></methods><methods><class-id>AppeX.SharedSessionLoginClient</class-id> <category>navigation</category><body package="AppeX-Examples">goToLogin(){	// I am already a login page. Do nothing.}</body></methods><methods><class-id>AppeX.WebComponent class</class-id> <category>html - custom elements</category><body package="AppeX-Examples">bodyBeginCustomElements	&lt;body: 61&gt;	^ '&lt;div id="custom-elements" class="page-section"&gt;&lt;h1&gt;Custom Elements&lt;/h1&gt;'</body><body package="AppeX-Examples">bodyCustomElements	&lt;body: 62&gt;	^ '&lt;div id="custom-buttons"&gt;	&lt;h3&gt;These buttons are simply declared on the page:&lt;/h3&gt;	&lt;button is="custom-button"&gt; One &lt;/button&gt;	&lt;button is="custom-button"&gt; Two &lt;/button&gt;	&lt;button is="custom-button"&gt; Three &lt;/button&gt;	&lt;h3&gt;These are appended by Javascript:&lt;/h3&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">bodyCustomElementsExplained	&lt;body: 63&gt;	^ '&lt;div&gt;	&lt;p&gt;The buttons on this page were created by adapting Javascript code from &lt;a href="http://www.html5rocks.com/en/tutorials/webcomponents/customelements/" target="_blank"&gt;HTML5 Rocks Tutorial&lt;/a&gt;. The custom element tag is registerd in &lt;b&gt;WebComponentClient.registerCustomButton()&lt;/b&gt; Javascript method.&lt;/p&gt;	&lt;p&gt;The two sets of buttons above demonstrate the different ways of instantiating custom elements. In the first set, the elements are simply declared in the HTML. See &lt;b&gt;bodyCustomElement&lt;/b&gt; class method of the &lt;b&gt;WebComponent&lt;/b&gt; class. In the second set, the custom elements are created and appended by Javascript. See the Javascript method &lt;b&gt;WebComponentClient.buildCustomButton()&lt;/b&gt; and its senders.&lt;/p&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">bodyEndCustomElements	&lt;body: 69&gt;	^ '&lt;/div&gt;'</body></methods><methods><class-id>AppeX.WebComponent class</class-id> <category>html</category><body package="AppeX-Examples">bodyIntroduction	&lt;body: 20&gt;^ '&lt;div id="intro" class="page-section"&gt;	&lt;h1&gt;WebComponents Example&lt;/h1&gt;	&lt;p&gt;WebComponents is a set of emerging specs that aims to simplify the development of complex web applications through encapsulation and reuse. To find out more about WebComponents, see the &lt;a href="http://webcomponents.org/" target="_blank"&gt;WebComponents web page&lt;/a&gt;.&lt;/p&gt;	&lt;p&gt;The level of support varies across browsers. At the time this example was written, only Chrome and Opera supported the specs. If you are using a different browser, your mileage may vary.&lt;/p&gt;	&lt;div id="error" style="background-color: salmon; border: thin dotted red; padding: 0.5em; display:none;"&gt;&lt;/div&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">bodyStyles	&lt;body: 10&gt;	^ '&lt;style&gt;	.page-section {		font-family: "Trebuchet MS", Helvetica, sans-serif;		margin: 1em;		padding: 1em;		background-color: #f7f7f5;	}&lt;/style&gt;'</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'WebComponents example'</body></methods><methods><class-id>AppeX.WebComponent class</class-id> <category>html - imports</category><body package="AppeX-Examples">bodyBeginHtmlImport	&lt;body: 71&gt;	^ '&lt;div id="html-import" class="page-section"&gt;&lt;h1&gt;HTML Import&lt;/h1&gt;'</body><body package="AppeX-Examples">bodyEndHtmlImport	&lt;body: 79&gt;	^ '&lt;/div&gt;'</body><body package="AppeX-Examples">bodyHtmlImport	&lt;body: 72&gt;	^ '&lt;div id="html-import-1"&gt;&lt;/div&gt;&lt;div id="html-import-2"&gt;&lt;/div&gt;&lt;div id="html-import-3"&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">bodyHtmlImportExplained	&lt;body: 73&gt;	^ '&lt;div style="clear:both"&gt;	&lt;p&gt;The code for HTML Imports have been freely adapted from this &lt;a href="http://www.html5rocks.com/en/tutorials/webcomponents/imports/" target="_blank"&gt;HTML Import tutorial&lt;/a&gt;.&lt;/p&gt;	&lt;p&gt;The HTML snippet to be imported into the page is defined in the &lt;b&gt;importedHtml&lt;/b&gt; class method of the &lt;b&gt;WebComponent&lt;/b&gt; class. In order to import the HTML into the document, a &amp;lt;link&amp;gt; element is added to the &amp;lt;head&amp;gt; in the &lt;b&gt;headImportHtml&lt;/b&gt; method, following the AppeX standard pattern of using &lt;b&gt;head:&lt;/b&gt; pragma.&lt;/p&gt;	&lt;p&gt;Three placeholder &amp;lt;div&amp;gt; tags (&lt;i&gt;#html-import-1&lt;/i&gt;, &lt;i&gt;#html-import-2&lt;/i&gt;, &lt;i&gt;#html-import-3&lt;/i&gt;) are placed into the &amp;lt;body&amp;gt; by the &lt;b&gt;bodyHtmlImport&lt;/b&gt; method. As is the case with the templates, the placeholder tags have no contents when first rendered. Only when the client code is installed, the &lt;b&gt;WebComponentClient.importHtml()&lt;/b&gt; method is used to attach the imported DOM to the placeholder tags.&lt;/p&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">headImportHtml	&lt;head: 50&gt;	^ '&lt;link id="htmlImport" rel="import" href="imported.html"&gt;'</body><body package="AppeX-Examples">importedHtml	&lt;html: 'imported.html'&gt;	^ '&lt;div class="to-be-imported" style="font-size: smaller; width: 20em; border: thin dotted lightgrey; padding: 1em; margin: 1em; float: left; background-color: #f5f5e7"&gt;	&lt;h3 style="color: blue;"&gt;Hello!&lt;/h3&gt;	&lt;p&gt;This content is included in a separate HTML snippet (not a full document), and imported into the main page with a &lt;b&gt;&amp;lt;link rel="import" ...&amp;gt;&lt;/b&gt; tag.&lt;/p&gt;&lt;/div&gt;'</body></methods><methods><class-id>AppeX.WebComponent class</class-id> <category>html - templates</category><body package="AppeX-Examples">bodyBeginTemplates	&lt;body: 51&gt;	^ '&lt;div id="templates" class="page-section"&gt;&lt;h1&gt;WebComponents templates:&lt;/h1&gt;&lt;h3&gt;AppeX developers say "Hello!"&lt;/h3&gt;'</body><body package="AppeX-Examples">bodyEndTemplates	&lt;body: 59&gt;	^ '&lt;/div&gt;'</body><body package="AppeX-Examples">bodyNameTagTemplate	&lt;body: 52&gt;	^ '&lt;template id="nameTagTemplate"&gt;	&lt;style&gt;		.outer {			margin: 0.5em;			border: 2px solid blue;			border-radius: 1em;			background: red;			font-size: 20pt;			width: 12em;			height: 7em;			text-align: center;		}		.boilerplate {			color: white;			font-family: sans-serif;			padding: 0.5em;		}		.name {			color: black;			background: white;			font-family: "Marker Felt", cursive;			font-size: 45pt;			padding-top: 0.2em;		}	&lt;/style&gt;	&lt;div class="outer"&gt;		&lt;div class="boilerplate"&gt;			Hi! My name is		&lt;/div&gt;		&lt;div class="name"&gt;			&lt;content&gt;&lt;/content&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/template&gt;'</body><body package="AppeX-Examples">bodyNameTags	&lt;body: 53&gt;	^ '&lt;div id="tag1" style="float:left"&gt;&lt;/div&gt;&lt;div id="tag2" style="float:left"&gt;&lt;/div&gt;&lt;div id="tag3" style="float:left"&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">bodyNameTagsExplained	&lt;body: 54&gt;	^ '&lt;div style="clear:both"&gt;	&lt;p&gt;The ''name tags'' above are generated from a &amp;lt;template&amp;gt; tag. Each tag has its own &lt;a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/" target="_blank"&gt;shadow DOM&lt;/a&gt;, separated from the rest of the HTML DOM in the page.&lt;/p&gt;	&lt;p&gt;Lookup the methods &lt;b&gt;bodyNameTags&lt;/b&gt; and &lt;b&gt;bodyNameTagTemplate&lt;/b&gt; methods on the class side of &lt;b&gt;WebComponent&lt;/b&gt; class. The three &amp;lt;div&amp;gt; tags (&lt;i&gt;#tag1&lt;/i&gt;, &lt;i&gt;#tag2&lt;/i&gt;, &lt;i&gt;#tag3&lt;/i&gt;) added by the &lt;b&gt;bodyNameTags&lt;/b&gt; method have no contents at all, they are just placeholders for future content that is inserted by the application from the &lt;i&gt;#nameTagTemplate&lt;/i&gt; tag.&lt;/p&gt;	&lt;p&gt;Upon the page load, the &lt;b&gt;WebComponentClient&lt;/b&gt; is installed. It uses the template tag &lt;i&gt;#nameTagTemplate&lt;/i&gt; added by &lt;b&gt;bodyNameTagTemplate&lt;/b&gt; to build the shadow DOM for the three tags &lt;i&gt;#tag1&lt;/i&gt;, &lt;i&gt;#tag2&lt;/i&gt;, &lt;i&gt;#tag3&lt;/i&gt;. To see how that is done, see the Javascript method &lt;b&gt;WebComponentClient.buildTag()&lt;/b&gt; and its senders.&lt;/div&gt;'</body></methods><methods><class-id>AppeX.WebComponent class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/web-components'&gt;</body></methods><methods><class-id>AppeX.TestDebugClient</class-id> <category>initialize</category><body package="AppeX-Examples">buildHtml() {		var self = this,		page = $("#page"),		par,		div;	// Ensure global debugging options are set up:	$t.debug();		par = $("&lt;p&gt;Application Debugging Options:&lt;p&gt;").appendTo(page);		div = $("&lt;div&gt;").appendTo(page);		$("&lt;input type='checkbox'&gt;Log&lt;/input&gt;")		.appendTo(div)		.click(function (event) {			self._log(event.target.checked)		});	$("&lt;input type='checkbox'&gt;Trace&lt;/input&gt;")		.appendTo(div)		.click(function (event) {				self._trace(event.target.checked);		});	$("&lt;input type='checkbox'&gt;Debugger&lt;/input&gt;")		.appendTo(div)		.click(function (event) {			self._debugger(event.target.checked);			});	div = $("&lt;div&gt;").appendTo(page);		$("&lt;button&gt;Run application and show all messages&lt;/button&gt;")		.appendTo(div)		.click(function () {				self.testMessages();		});		par = $("&lt;p&gt;Global Debugging Options:&lt;p&gt;").appendTo(page);	div = $("&lt;div&gt;").appendTo(page);		$("&lt;input type='checkbox'&gt;Log&lt;/input&gt;")		.appendTo(div)		.click(function (event) {				$t._debuggingOptions.log = event.target.checked;			});	$("&lt;input type='checkbox'&gt;Trace&lt;/input&gt;")		.appendTo(div)		.click(function (event) {			$t._debuggingOptions.trace = event.target.checked;			});	$("&lt;input type='checkbox'&gt;Debugger&lt;/input&gt;")		.appendTo(div)		.click(function (event) {				$t._debuggingOptions.debugger = event.target.checked;			});	div = $("&lt;div&gt;").appendTo(page);		$("&lt;button&gt;Run application and show system messages only&lt;/button&gt;")		.appendTo(div)		.click(function () {				self.testSystemMessages();		});		return this;}</body><body package="AppeX-Examples">testMessages(){// Run the test message. Depending on the selected debugging options, if the browser development tools are active,// one of the following actions may happen:// 	* nothing//	* global debugging options may be activated//	* application debugging options may be activated//	* both of the above.// When debugging an application, developers would choose one or the other, but not both.// Here, we use both for demonstration.	var self = this;	console.clear();	this.debug("Start message");	this		.GET('successfulResponse', {})		.onSuccess(function (data) {			self.debug("Successful message:", data);			self.debug("Sending error message");				self.GET('serverError', {})				.onError(function(error){					self.debug("Application ERROR", error);					self.debug("Error processing done");					});		});}</body><body package="AppeX-Examples">testSystemMessages(){	var self = this;	console.clear();	this		.GET('successfulResponse', {})		.onSuccess(function (data) {			self.GET('serverError', {});		});}</body></methods><methods><class-id>AppeX.Chat</class-id> <category>services</category><body package="AppeX-Examples">loginUser	&lt;json: 'loginUser'&gt;	| user |	user := User named: self currentRequestArguments.	user validateLoginFor: self class.	user logIn.	self session data: user.	^user</body><body package="AppeX-Examples">logoutUser	&lt;plainText: 'logoutUser'&gt;	| userName |	userName := self currentRequestArguments.	(User named: userName) logOut.	self session data: nil.	^nil</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>html</category><body package="AppeX-Examples">bodyDivHome	&lt;body: 50&gt;	^ '	&lt;div id="pageDiv"&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">headExternalLibraries	&lt;head: 200&gt;	^JQueryCSS,	self jqueryMinTags</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'Chat Room'</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>accessing</category><body package="AppeX-Examples">getUserNames	&lt;json: 'getUserNames'&gt;		^ User loggedInUserNames</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'.users { 	width: 29%;	float: left;	height: 200px; }.users h3, .log h3, .input h3 { 	text-align: center; 	margin: 0; }.log { 	width: 70%;	float: right;	height: 400px; }.post {	width: 29%;	float: left;	height: 200px; }.input {	width: 98%;	height: 100px;	margin: 2x; }#chat-log-container, #user-container {	position: absolute;	overflow-y: scroll;	top: 1.5em;	bottom: 0px;	width: 100%;}#log-row {	display: table-row;	padding: 10px 10px 2px;}#log-row-user, #log-row-phrase {    display: table-cell;    padding-right: 25px; }#log-row-user p, #log-row-phrase p {	margin: 1px 1px; }}'</body></methods><methods><class-id>AppeX.Chat class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/chat-room-demo'&gt;</body></methods><methods><class-id>AppeX.SharedSessionExpired class</class-id> <category>html</category><body package="AppeX-Examples">bodyContainer	&lt;body: 20&gt;		^ '&lt;div id="container" class="', self name, '"&gt;	&lt;p&gt;Session Expired. You will need to log back in.&lt;/p&gt;&lt;/div&gt;'</body></methods><methods><class-id>AppeX.AjaxFileUpload class</class-id> <category>html</category><body package="AppeX-Examples">bodyElements	&lt;body: 50&gt;	^ '&lt;div id="uploadForm"&gt;	&lt;input type="file" id="files" accept="*/*" name="files" multiple /&gt;	&lt;br/&gt;	&lt;output id="list"&gt;&lt;/output&gt;	&lt;button  id="upload" style="display: none"&gt;Upload...&lt;/button&gt;	&lt;br/&gt;	&lt;span id="current-file"&gt;&lt;/span&gt;&amp;nbsp;&lt;span id="current-status"&gt;&lt;/span&gt;&amp;nbsp;&lt;span id="current-upload-time"&gt;&lt;/span&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^ 'AJAX File Upload / Download Example'</body></methods><methods><class-id>AppeX.AjaxFileUpload class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/ajax-file-upload'&gt;</body></methods><methods><class-id>AppeX.AjaxFileUpload class</class-id> <category>services</category><body package="AppeX-Examples">uploadFile	"Process the upload request here, and generate a response."	&lt;plainText: 'upload' &gt;			| filename uploadTime stream initialTime |	filename := self directory / self currentRequestUrl tail. 	filename exists ifTrue: [filename delete].	uploadTime := nil.	stream := filename writing.	initialTime := Time microsecondClock.	[stream write: self currentRequest body] ensure: [ stream close ].	uploadTime := Time microsecondClock - initialTime.	^uploadTime 		ifNil: [ '0' ]		ifNotNil: [ ((uploadTime / 10000 ) rounded / 100.0 ) printString, ' seconds' ]</body></methods><methods><class-id>AppeX.AjaxFileUploadClient</class-id> <category>events</category><body package="AppeX-Examples">handleFileSelect(event) {	var files = event.target.files; // FileList object	this.files = [];	// files is a FileList of File objects. List some properties.	var output = [];	for (var i = 0, file; file = files[i]; i++) {		this.files.push(file);		output.push('&lt;li id="file_',  i, '"&gt;&lt;strong&gt;', file.name, '&lt;/strong&gt; (', file.type || 'n/a', ') - ',			file.size, ' bytes, last modified: ',			file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a',			'&lt;/li&gt;');	};	document.getElementById('list').innerHTML = '&lt;ul&gt;' + output.join('') + '&lt;/ul&gt;';	document.getElementById("upload").style.display = "inline-block";}</body><body package="AppeX-Examples">handleUploadClick(event) {	this.uploadNextFile();}</body><body package="AppeX-Examples">handleUploadOnload(file, event) {	this.currentFileElement.innerHTML = file.name;	this.currentStatusElement.innerHTML = "Done.";	this.uploadNextFile();}</body><body package="AppeX-Examples">handleUploadOnprogress(file, event) {	if (event.lengthComputable) {		var loaded = Math.round(event.loaded / event.total * 100);		this.currentStatusElement.innerHTML = "Status: " + loaded + "% complete"	}}</body><body package="AppeX-Examples">uploadFile(file) {	var self = this;	var xhr = new XMLHttpRequest();	xhr.open("POST", this.url + "/upload/" + file.name);	xhr.upload.onprogress = function(event) {		self.handleUploadOnprogress(file, event);	};	xhr.upload.onload = function(event) {		self.handleUploadOnload(file, event);	};	xhr.onreadystatechange = function() {		if ( xhr.readyState == 4 &amp;&amp; xhr.status == 200 ) {			self.currentUploadTimeElement.innerHTML = "Upload Time: " + xhr.responseText;		}	};	xhr.send(file);	this.currentFileElement.innerHTML = "Uploading " + file.name;	return xhr;}</body><body package="AppeX-Examples">uploadNextFile() {	if (this.files.length &gt; 0) {		var file = this.files.shift();		this.uploadFile(file);	}}</body></methods><methods><class-id>AppeX.AjaxFileUploadClient</class-id> <category>initialize</category><body package="AppeX-Examples">buildHtml() {	var self = this;	document.getElementById('files').addEventListener(		'change',		function(event) {self.handleFileSelect(event)},		false);	document.getElementById('upload').addEventListener(		'click',		function(event) {self.handleUploadClick(event)},		false);	this.currentFileElement = document.getElementById("current-file");	this.currentStatusElement = document.getElementById("current-status");	this.currentUploadTimeElement = document.getElementById("current-upload-time");}</body></methods><methods><class-id>AppeX.WebComponentClient</class-id> <category>javascript - custom elements</category><body package="AppeX-Examples">buildCustomButton(parentId, buttonId, label) {	var parent = document.querySelector(parentId);	var button = new $t.AppeX.CustomButton();	button.id = buttonId;	button.innerHTML = label;	parent.appendChild(button);}</body><body package="AppeX-Examples">registerCustomButton(){	// While the code below is according to the WebComponents custom elements spec,	// in reality we would probably want to create an abstract AppeX class for extending	// and registering custom components on the page.	// Notice how $t.AppeX.CustomButton follows the AppeX class naming patterns.	if (this.supportsCustomElements()) {		$t.AppeX.CustomButton = document.registerElement(			'custom-button' ,			{	 		prototype: Object.create(HTMLButtonElement.prototype),	  		extends: 'button'			}		);	};}</body></methods><methods><class-id>AppeX.WebComponentClient</class-id> <category>javascript - html import</category><body package="AppeX-Examples">importHtml(parentId) {	var link = document.querySelector('#htmlImport');	var content = link.import;	var parent = document.querySelector(parentId);	// Grab DOM from import.html's document.	var el = content.querySelector('.to-be-imported');	parent.appendChild(el.cloneNode(true));}</body></methods><methods><class-id>AppeX.WebComponentClient</class-id> <category>javascript</category><body package="AppeX-Examples">buildHtml() {	var anyError = false;	// Build tags from template:	if(this.supportsShadowDOM()) {		this.buildTag("#tag1","Jerry");		this.buildTag("#tag2","Tamara");		this.buildTag("#tag3","Vlad");	} else {		this.removeElement("templates");		this.displayError("It does not support templates and shadow DOM.", false);		anyError = true;	}			// Build custom buttons:	if (this.supportsCustomElements()) {		this.buildCustomButton("#custom-buttons", "custom-button-1", " A Custom Button ");		this.buildCustomButton("#custom-buttons", "custom-button-2", " Another Custom Button ");		this.buildCustomButton("#custom-buttons", "custom-button-3", " ...and still one more! ");	} else {		this.removeElement("custom-elements");		this.displayError("It does not support custom elements.", anyError);		anyError = true;	};			// Build components from HTML import:	if (this.supportsImport()) {		this.importHtml("#html-import-1");		this.importHtml("#html-import-2");		this.importHtml("#html-import-3");	} else {		this.removeElement("html-import");		this.displayError("It does not support HTML import.", anyError);	}}</body><body package="AppeX-Examples">initialize() {	this.template = document.querySelector('#nameTagTemplate');	this.registerCustomButton();}</body><body package="AppeX-Examples">removeElement(elementId) {	// Hide the element given elementId.	var element = document.getElementById(elementId);	var parent = element.parentNode;	parent.removeChild(element);}</body></methods><methods><class-id>AppeX.WebComponentClient</class-id> <category>javascript - test support</category><body package="AppeX-Examples">appendTextTo(errorDiv, text) {	var paragraph = document.createElement("p");	paragraph.appendChild(document.createTextNode(text));	errorDiv.appendChild(paragraph);}</body><body package="AppeX-Examples">displayError(errorText, hadErrors) {	// Display the errorText in the (originally hidden) #error element.	var errorDiv = document.getElementById("error");	var paragraph, text;		if (!hadErrors) {		this.appendTextTo(errorDiv, "Your browser is " + navigator.userAgent);	}	this.appendTextTo(errorDiv, errorText);	errorDiv.style.display = "block";	return false;}</body><body package="AppeX-Examples">supportsCustomElements() {  return 'registerElement' in document;}</body><body package="AppeX-Examples">supportsImport() {	// Return a boolean indicating whether the browser supports the HTML import.	return 'import' in document.createElement('link');}</body><body package="AppeX-Examples">supportsShadowDOM() {  return 'createShadowRoot' in document.createElement("div");}</body></methods><methods><class-id>AppeX.WebComponentClient</class-id> <category>javascript - templates</category><body package="AppeX-Examples">buildTag(tagId, name) {	var tag = document.querySelector(tagId);	var shadow = tag.createShadowRoot();	var clone = document.importNode(this.template.content, true);	shadow.appendChild(clone);	tag.textContent = name;}</body></methods><methods><class-id>AppeX.WebSocketApp class</class-id> <category>html</category><body package="AppeX-Examples">bodyDivHome	&lt;body: 10&gt;	^ '&lt;article&gt;		&lt;h1&gt;WebSocket Demo&lt;/h1&gt;		&lt;p&gt;- "Send message" button sends and receives WebSocket messages from the input field.&lt;/p&gt;		&lt;p&gt;- "Server Error" button raises an error on the server and shows receving Control frame with status code and disconnect reason. Refresh the browser to reconnect.&lt;/p&gt;		&lt;p&gt;- "Send File" button creates an external file and sends the file stream as a fragmented message (20000 bytes in a fragment). Chrome Developer tool allows to see received Continuation Frame sizes.&lt;/p&gt;		&lt;p&gt;- "Disconnect" button sends Connection Close Frame and disconnects.&lt;/p&gt;		&lt;p&gt;- The demo has the default connection timeout 5 minutes.&lt;/p&gt;&lt;/article&gt;&lt;div id="output"&gt;	&lt;div &gt;		&lt;button id="send" &gt;Send message&lt;/button&gt;		&lt;input id="message" type="text" size=40 value="Hello World/Nazdar svÄte, jak se mÃ¡Å¡?"&gt;	&lt;/div&gt;	&lt;div&gt;		&lt;button id="error"&gt;Server Error&lt;/button&gt;		&lt;button id="file"&gt;Send File&lt;/button&gt;	&lt;/div&gt;	&lt;button id="disconnect" &gt;Disconnect&lt;/button&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'WebSocket Test'</body></methods><methods><class-id>AppeX.WebSocketApp class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/websocket/simple-app'&gt;</body></methods><methods><class-id>AppeX.TestDebugApplication class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'body {	font-family: Arial, Helvetica, sans-serif;}header {	text-align: center;	font-weight: bold;}button {	cursor: pointer;	margin: 4px;	padding: 0.2em 1em;	background-color: rgba(127,127,127,0.15);	border: solid thin;	border-radius: 4px;}'</body></methods><methods><class-id>AppeX.TestDebugApplication class</class-id> <category>services</category><body package="AppeX-Examples">errorResponse	&lt;GET&gt;	&lt;plainText: 'serverError'&gt;	^self error: '~Invalid Request!'</body><body package="AppeX-Examples">successfulResponse	&lt;GET&gt;	&lt;plainText: 'successfulResponse'&gt;	^'~Successful response!'</body></methods><methods><class-id>AppeX.TestDebugApplication class</class-id> <category>html</category><body package="AppeX-Examples">bodyDivHome	&lt;body: 50&gt;	^ '&lt;article&gt;		&lt;h1&gt;Client Debug Demo&lt;/h1&gt;		&lt;p&gt;The demo sets different options to debug a client JS application. To run the demo open Developers tool in a Web Browser. Clicking on buttons will trigger receiving messages from the server and debug the replies using different debug options. The demo shows how to debug application and system messages.&lt;/p&gt;		&lt;p&gt; - "Trace" - the debug.trace option is set on. The debug messages will be shown in Developer tool console with a stack trace where the method was called&lt;/p&gt;		&lt;p&gt; - "Log" - the debug.log option is set on. The debug messages will be displayed in Developer tool console&lt;/p&gt;		&lt;p&gt; - "Debug" - the debug.debug option is set on. On every debug message a Web Browser pauses in debugger&lt;/p&gt;&lt;/article&gt;	&lt;div id="page"&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">headExternalLibraries	&lt;head: 200&gt;	^JQueryLib</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'Test Debug Support in AppeX'</body></methods><methods><class-id>AppeX.TestDebugApplication class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/test-debug'&gt;</body></methods><methods><class-id>AppeX.StaticFilesFromDisk class</class-id> <category>services</category><body package="AppeX-Examples">indexHtml	&lt;file: 'index.html'&gt;</body><body package="AppeX-Examples">linkAHtml	&lt;file: 'linkA.html'&gt;</body><body package="AppeX-Examples">linkBHtml	&lt;file: 'linkB.html'&gt;</body><body package="AppeX-Examples">linkCHtml	&lt;file: 'subdirectory/linkC.html'&gt;</body></methods><methods><class-id>AppeX.StaticFilesFromDisk class</class-id> <category>html</category><body package="AppeX-Examples">htmlDocument	"Do a simple redirection to index.html"	&lt;html: ''&gt;	self currentResponse		code: 301;		header: 'location' value: 'static-files/index.html'.	^ nil</body></methods><methods><class-id>AppeX.StaticFilesFromDisk class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	"On responder creation, ensure I have all the static files in the file system."	&lt;server: 'AppeXExamples' path: '/sioux/appex/static-files'&gt;	self ensureFilesReady</body></methods><methods><class-id>AppeX.HelloLocalizedClient</class-id> <category>html</category><body package="AppeX-Examples">buildAnchorForLanguageId(aLanguageId) {	var self = this;	return $("&lt;a&gt;")		.text(aLanguageId)		.attr("href", "javascript:")		.click(function (event) {			$(this).addClass('currentLanguage');			self.switchToLanguageId(aLanguageId);		})	}</body><body package="AppeX-Examples">buildHtml() {	this.buildLanguageLinks();	//must ensure that the catalogs exist before setting language and building the info section	this.getCatalogFileExists();}</body><body package="AppeX-Examples">buildInfo() {	var infoDiv;		infoDiv = $('#infoDiv');	infoDiv.empty();	infoDiv.append(this._translate("languageIsSetTo", "The language is set to") + " '"+ this._language + "'"); 	this.localeInfo();	}</body><body package="AppeX-Examples">buildLanguageLinks() {	var languageIds,		eLanguageId,		languageLinksDiv,		eAnchor;		languageIds = ['cs-cz', 'de-de', 'en', 'en-au', 'en-ca', 'en-gb', 'en-us', 'fr-fr', 'ru'];	languageLinksDiv = $('#languageLinks');		for (var i = 0; i &lt; languageIds.length; i++) {		if (i !== 0) {			//add a separator			languageLinksDiv.append(" | ");		}		eLanguageId = languageIds[i];		eAnchor = this.buildAnchorForLanguageId(eLanguageId);		languageLinksDiv.append(eAnchor); 	}	}</body><body package="AppeX-Examples">buildLocalizedGreeting() {	var greetingDiv,		localizedText;			greetingDiv = $("#greetingDiv");	localizedText = this._translate("HelloWorld", "Hello, World");	greetingDiv.empty();	greetingDiv.append("&lt;h1&gt;" + localizedText + "&lt;/h1&gt;")			}</body><body package="AppeX-Examples">promptToDownloadCatalogFilesToServer() {	 var dialogText,		dialogResponse;			  dialogText= 'To run the HelloLocalized Demo you need to download the files in: ' 		+ '\nftp.cincomsmalltalk.com/pub/appex/visualworksLanguageCatalogs.zip. '		+ '\n\nIf you do not download these files, the language substitutions may not display correctly.'		+ '\n\nClick on OK to download and unzip files in .../messages/visualworks/fr, etc directories';	dialogResponse = confirm(dialogText);		console.log('dialogResponse = ' + dialogResponse);	return dialogResponse;}</body><body package="AppeX-Examples">refreshScreen() { 	this.buildLocalizedGreeting();	this.buildInfo();}</body><body package="AppeX-Examples">setHtmlLanguageTag(aLanguageId) {	$('HTML')[0].lang = aLanguageId;}</body><body package="AppeX-Examples">setInitialLanguage() {	//default to English		var aLanguageFromSessionStorage,		aLanguageFromLocalStorage,		chosenLanguage;			//get the name of the current language from session storage	aLanguageFromSessionStorage = this.getItemFromStorage('appex_language', window.sessionStorage);		if (!aLanguageFromSessionStorage) {		aLanguageFromLocalStorage = this.getItemFromStorage('appex_language', window.localStorage);		}	chosenLanguage = aLanguageFromSessionStorage || aLanguageFromLocalStorage || 'en';	this.switchToLanguageId(chosenLanguage); }</body><body package="AppeX-Examples">switchToLanguageId(aLanguageId) {	this.setLanguageInServerSession(aLanguageId); //this is application specific}</body></methods><methods><class-id>AppeX.HelloLocalizedClient</class-id> <category>server calls</category><body package="AppeX-Examples">downloadCatalogFilesToServer() {	var self = this,		response;			response = this.asyncMessageToServer("downloadCatalogFilesToServer");		response.onSuccess(		function (data) {			//the catalog files have been downloaded to the server - proceed with building html"			self.switchToLanguageId('en');				}	);}</body><body package="AppeX-Examples">getCatalogFileExists() {	var self = this,		response;			response = this.asyncMessageToServer("getCatalogFileExists");		response.onSuccess(		function (data) {			if (data === true) {				//the sample catalog file exists - proceed with building html"				self.setInitialLanguage();			} else {				var shouldDownload,					downloadResponse;									shouldDownload = self.promptToDownloadCatalogFilesToServer();				if (!shouldDownload) {					//the sample catalog is missing, but the user does not want to download it					self.setInitialLanguage();				} else  {					downloadResponse = self.downloadCatalogFilesToServer();									}			}		}	);}</body><body package="AppeX-Examples">localeInfo(){/** This method was generated from pragma &lt;json: 'locale-info'&gt; in method AppeX.HelloLocalized class&gt;&gt;localeInfo.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.HelloLocalized class&gt;&gt;localeInfo.*	- Click on the item labeled "Generate HelloLocalizedClient.localeInfo" in the method menu.*/	var self = this,		response,		infoDiv,		args = {};		//args would be the alternative to using the url to transmit the language tag	info in the request	//args = { languageId: this._language };  	response = this.asyncMessageToServer(this._language + "/locale-info", args);		response.onSuccess(		function (data) {			var infoDiv = $("#infoDiv");			infoDiv.append("&lt;br/&gt;")				.append(self._translate("localeIsSetTo", "The server locale is set to") + " " + data.localeName)				.append("&lt;br/&gt;")				.append(self._translate("millionsCurrencyIs", "Million units of currency is") + " " + data.millionOfCurrency)				.append("&lt;br/&gt;")				.append(self._translate("currentServerTimeIs", "Current local server time is") +  " " + data.currentTimestamp)		}	);	return response;}</body><body package="AppeX-Examples">setLanguageInServerSession(aLanguageId){	var self = this,		args = {}, 		response;	args.languageId = aLanguageId;	response = this.asyncMessageToServer("setLanguageInServerSession", args);	response.onSuccess(		function (object) {				self._setLanguage(				aLanguageId,				function() {self.refreshScreen()});  //_setLanguage() is part of the internationalization framework					self.setHtmlLanguageTag(aLanguageId);  		}	);	return response;}</body></methods><methods><class-id>AppeX.SharedSessionAboutClient</class-id> <category>building</category><body package="AppeX-Examples">buildHtml(){	var self = this;	this.callSuper("buildHtml", []);	this.GET("about-content")		.onSuccess(function (response) {			$("&lt;h2&gt;")				.text("About this example")				.appendTo("#container");			$("&lt;p&gt;")				.css("white-space", "pre-wrap")				.html(response)				.appendTo("#container");		})		.onError(function (error) {			self.logError("Error getting about-content", error);		})}</body></methods><methods><class-id>AppeX.UserRESTClient</class-id> <category>javascript</category><body package="AppeX-Examples">addUser() {	var self = this;	this.page.empty();	var user = {};				var nameDiv = $("&lt;div&gt;")				.appendTo(this.page)			.append ($("&lt;label&gt;")					.text("User name")					);	var name = $("&lt;input&gt;")				.val("User1")				.appendTo (nameDiv);				var emailDiv = $("&lt;div&gt;")				.appendTo(this.page)			.append ($("&lt;label&gt;")						.text("email:")					);		var email = $("&lt;input&gt;")				.val("")				.attr("placeholder", "user@example.com")				.appendTo(emailDiv);					var buttons = $("&lt;div&gt;")				.appendTo(this.page);				$("&lt;button&gt;Save&lt;/button&gt;")		.appendTo(buttons)		.click(function () {				user.name = name.val();			user.email = email.val();			self.postUser(user);		});				($("&lt;button&gt;Cancel&lt;/button&gt;")		.appendTo(buttons)		.click(function () { 			self.getUsers()		})	);	}</body><body package="AppeX-Examples">buildHtml() {	this.page = $("#page");		var self = this;		$("&lt;button&gt;Add a user&lt;/button&gt;")		.appendTo($("#addNewUserDiv"))		.click(function () {				self.addUser();		});			this.getUsers();	return this;}</body><body package="AppeX-Examples">displayUsers(users) {	var self = this;	this.page.empty();	users.forEach(function(user) {		var div = $("&lt;div&gt;")				.appendTo(this.page);		$("&lt;label&gt;")			.appendTo(div)			.text(user.name);						$("&lt;label&gt;")			.appendTo(div)			.text("   email:");					var email = ($("&lt;input&gt;")				.val(user.email)				.appendTo (div)					);						$("&lt;button&gt;Save&lt;/button&gt;")			.appendTo(div)			.click(function () {					user.email = email.val();				self.putUser(user)			});						$("&lt;button&gt;Delete&lt;/button&gt;")			.appendTo(div)			.click(function () { 				self.deleteUser(user);			 })	})}</body></methods><methods><class-id>AppeX.UserRESTClient</class-id> <category>rest operations</category><body package="AppeX-Examples">deleteUser(user) {	var self = this;	this		.DELETE("user", user)		.onSuccess(function (object) {			$t.debug("Delete user success");			self.getUsers()		});}</body><body package="AppeX-Examples">getUsers() {	var self = this;	this		.GET('user', {})		.onSuccess(function (users) {			$t.debug("Get users success");			self.displayUsers(users)		});}</body><body package="AppeX-Examples">postUser(user){	var self = this;	self		.POST("user", user)		.onSuccess(function (object) {			$t.debug("Add user success");			self.getUsers()		});		}</body><body package="AppeX-Examples">putUser(user) {	var self = this;	this		.PUT("user", user)		.onSuccess(function (object) {			$t.debug("Edit user success");			self.getUsers()		});}</body></methods><methods><class-id>AppeX.EventSourceClient</class-id> <category>build content</category><body package="AppeX-Examples">buildContent() {	var self = this;			this.buildStartStreamingButton();	this.buildEnterTextInput();	this.buildStopStreamingButton();		//Register an interest in receving #MessageReceived events. Upon receiving the event display it	this.onServerEvent(		"MessageReceived",		function(data) {			$("&lt;div&gt;")				.appendTo(self.page)				.text(data);		}	);}</body><body package="AppeX-Examples">buildEnterTextInput() {	var self = this,		button,		input,		widget;				widget = $("&lt;div&gt;")		.appendTo(this.page);	$("&lt;label&gt;")		.text("Enter text to stream from the server:")		.appendTo(widget);	input = $("&lt;input&gt;")		.val("text")		.appendTo(widget);	button = $("&lt;button&gt;Send data&lt;/button&gt;")		.appendTo(widget);	button.click(function () {		self.asyncMessageToServer("set-message", input.val());	});}</body><body package="AppeX-Examples">buildStartStreamingButton() {	var self = this,		button,		widget;			widget = $("&lt;div&gt;")		.appendTo(this.page);				button = $("&lt;button&gt;Start Streaming&lt;/button&gt;")		.appendTo(widget);			button.click(function () {		self.asyncMessageToServer("start-pushing-messages");	});	}</body><body package="AppeX-Examples">buildStopStreamingButton() {	var self = this,		button,		widget;	widget = $("&lt;div&gt;")		.appendTo(this.page);				button = $("&lt;button&gt;Stop Streaming&lt;/button&gt;")		.appendTo(widget);	button.click(function () {		self.asyncMessageToServer("stop-pushing-messages");		$("&lt;h4&gt;")			.text("Streaming stopped ")			.appendTo(self.page);	});}</body></methods><methods><class-id>AppeX.EventSourceClient</class-id> <category>initialize</category><body package="AppeX-Examples">buildHeader() {	this.page.append("&lt;h2&gt;Comet with Server-Sent Events&lt;/h2&gt;")}</body><body package="AppeX-Examples">buildHtml() {	this.page = $("#page");	this.buildHeader();	this.buildContent();	return this;}</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>html</category><body package="AppeX-Examples">bodyElements	&lt;body: 50&gt;	^ '&lt;form id="uploadForm" enctype="multipart/form-data" action="up" method="post"&gt;	&lt;input type="file" id="files" accept="*/*" name="files" multiple /&gt;&lt;br/&gt;	&lt;div id="list"&gt;Selected files: none&lt;/div&gt;	&lt;input  id="upload" type="submit" value="Upload..." style="display: none"/&gt;&lt;br/&gt;&lt;/form&gt;'</body><body package="AppeX-Examples">fileSelectionScript	&lt;body: 100&gt;	^ '&lt;script id="selection-script" &gt;handleFileSelect = function handleFileSelect(event) {	var files = event.target.files; // FileList object	// files is a FileList of File objects. List some properties.	var output = [];	for (var i = 0, file; file = files[i]; i++) {		output.push("&lt;li&gt;&lt;strong&gt;", file.name, "&lt;/strong&gt; (", file.type || "n/a", ") - ",			file.size, " bytes, last modified: ",			file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : "n/a",			"&lt;/li&gt;");	}	document.getElementById("list").innerHTML = "&lt;ul&gt;" + output.join("") + "&lt;/ul&gt;";	document.getElementById("upload").style.display = "inline-block";};document.getElementById("files").addEventListener(	"change",	function(event) {self.handleFileSelect(event)},	false);&lt;/script&gt;'</body><body package="AppeX-Examples">htmlApplicationName	&lt;htmlToken: #title&gt;	&lt;htmlToken: #applicationName&gt;	^ 'File Upload / Download Example'</body><body package="AppeX-Examples">htmlBaseURI	&lt;htmlToken: #baseURI&gt;	^ '/file-upload/'</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>dispatching</category><body package="AppeX-Examples">download: aPragma	&lt;serviceType: #GET&gt;	^self dispatchPragma: aPragma		with: [:receiver |			| contents |			contents := receiver perform: aPragma selector.			(contents isKindOf: Filename)				ifTrue: [ receiver respondWithDownload: contents ]				ifFalse: [ receiver respondWithDownload: aPragma arguments first asFilename ]]</body><body package="AppeX-Examples">upload: aPragma	&lt;serviceType: #POST&gt;	^self dispatchPragma: aPragma		with: [:receiver |			| contents |			contents := receiver perform: aPragma selector.			contents isString ifTrue: [ ^ receiver respondWithUpload: contents ].			(contents isKindOf: Filename)				ifTrue: [ receiver respondWithUpload: contents ]				ifFalse: [ receiver respondWithUpload: aPragma arguments first asFilename ]]</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>pragmas</category><body package="AppeX-Examples">uploadPragmas	&lt;pragmas: #class&gt;	^#( #download: #upload:)</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>services</category><body package="AppeX-Examples">downloadFile	"The same code can be used to generate a Filename for 'download' (content-disposition=attachment) and 'file' (no content-disposition). "	&lt;download: 'down' &gt;	&lt;file: 'inline' &gt;	^ self directory asAbsoluteFilename / self currentRequestUrl tail</body><body package="AppeX-Examples">uploadFile	"Process the upload request here, and generate a response."	&lt;upload: 'up' &gt;	| files response |	files := self		acceptForUpload: (FormData request: self currentRequest)		ifFail: [ :filename | ^ self error: ('File: &lt;1s&gt; was not uploaded ' expandMacrosWith: filename )].	response := String new writing.	response		write: '&lt;!DOCTYPE html&gt;&lt;html lang="{{languageCode}}"&gt;';		write: self htmlHeadTemplate;		cr;		write: '&lt;body&gt;';		cr; tab;		write: '&lt;div&gt;These files have been uploaded:&lt;/div&gt;';		cr; tab;		write: '&lt;ul&gt;'.	files do: [ :filename |		|  encoded |		encoded := URLEncoder new urlSpecials: '_'; encode: filename.		response			cr; tab: 2;			write: '&lt;li&gt;&lt;a href="';			write: 'down/';			write: encoded;			write: '"&gt;';			write: filename ;			write: ' (download)';			write: '&lt;/a&gt;&lt;/li&gt;';			cr; tab: 2;			write: '&lt;li&gt;&lt;a href="';			write: 'inline/';			write: encoded;			write: '"&gt;';			write: filename;			write: ' (view in browser)';			write: '&lt;/a&gt;&lt;/li&gt;' ].	response		cr; tab;		write: '&lt;/ul&gt;';		cr;		cr;		write: '&lt;a href="."&gt;Back to upload&lt;/a&gt;';		write: '&lt;/body&gt;'.	"Make the current response HTML."	self currentResponse contentType: 'text/html' charset: 'utf-8'.	^ self expandHtmlTemplate: response contents</body></methods><methods><class-id>AppeX.FileUpload class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/file-upload'&gt;</body></methods><methods><class-id>AppeX.D3Bar class</class-id> <category>configuration</category><body package="AppeX-Examples">bodySharedLibrary	&lt;body: 1&gt;	^JavascriptLibrary named: #'SharedLibrariesExamples.js'</body><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/d3/bar'&gt;</body></methods><methods><class-id>AppeX.D3Bar class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^' .chart rect {   fill: steelblue;   stroke: white;}}'</body></methods><methods><class-id>AppeX.D3Bar class</class-id> <category>html</category><body package="AppeX-Examples">headD3	&lt;head: 200&gt;	^D3Lib</body><body package="AppeX-Examples">randomNumber	&lt;plainText: 'randomNumber'&gt;	^( FastRandom new next * 1000)		printString</body></methods><methods><class-id>AppeX.D3BarClient</class-id> <category>javascript</category><body package="AppeX-Examples">buildHtml(){	var self = this;	var	t = 1297110663, // start time (seconds since epoch)		v = 70, // start value (subscribers)		next = function next() {			return {				time: ++t,				value: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))			};		},		data = d3.range(33).map(next); // starting dataset	var w = 20,		h = 80;	var x = d3.scale.linear()		.domain([0, 1])		.range([0, w]);	var y = d3.scale.linear()		.domain([0, 100])		.rangeRound([0, h]);	var chart = d3.select("body").append("svg")		.attr("class", "chart")		.attr("width", w * data.length - 1)		.attr("height", h);	//Add initial bars	chart.selectAll("rect")		.data(data)		.enter().append("rect")			.attr("x", function(d, i) { return x(i) - .5; })			.attr("y", function(d) { return h - y(d.value) - .5; })			.attr("width", w)			.attr("height", function(d) { return y(d.value); });	chart.append("line")		.attr("x1", 0)		.attr("x2", w * data.length)		.attr("y1", h - .5)		.attr("y2", h - .5)		.style("stroke", "#000");	function redraw() {	var rect = chart.selectAll("rect")		.data(data, function(d) { return d.time;});	rect.enter().insert("rect", "line")		.attr("x", function(d, i) { return x(i + 1) - .5; })		.attr("y", function(d) { return h - y(d.value) - .5; })		.attr("width", w)		.attr("height", function(d) { return y(d.value); })		.transition()			.duration(1000)			.attr("x", function(d, i) { return x(i) - .5; });		rect.transition()			.duration(1000)			.attr("x", function(d, i) { return x(i) - .5; });		rect.exit().transition()			.duration(1000)			.attr("x", function(d, i) { return x(i - 1) - .5; })			.remove();	};	setInterval(function() {		data.shift();		data.push(next());		redraw();	}, 1500);	return this}</body></methods><methods><class-id>AppeX.EventSource</class-id> <category>services</category><body package="AppeX-Examples">setMessage	&lt;plainText: 'set-message'&gt;	message := self currentRequestArguments.	^String new</body><body package="AppeX-Examples">startTimer	&lt;plainText: 'start-pushing-messages'&gt;	(timer notNil and: [timer isActive not]) ifTrue: [ timer startAfter: Duration zero ].	^String new</body><body package="AppeX-Examples">stopTimer	&lt;plainText: 'stop-pushing-messages'&gt;	timer ifNotNil: [ timer stop ].	^ String new</body></methods><methods><class-id>AppeX.EventSource class</class-id> <category>html</category><body package="AppeX-Examples">bodyDivHome	&lt;body: 50&gt;	^ '	&lt;div id="page"&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">headExternalLibraries	&lt;head: 200&gt;	^JQueryLib</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'Comet with Server-Sent Events'</body></methods><methods><class-id>AppeX.EventSource class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/event-source-demo'&gt;</body></methods><methods><class-id>AppeX.ChatClient</class-id> <category>javascript</category><body package="AppeX-Examples">addMessageToChatLog(message) {	var self = this,		row, 		textCell;			if(!this.table){ 		return	}		row = $("&lt;div&gt;");		this.table.append(row);	row		.attr("id", "log-row")		.append( $("&lt;div&gt;")					.attr("id", "log-row-user")					.append( $("&lt;p&gt;")								.text(message.user)							)				)		.append( textCell = $("&lt;div&gt;")					.attr("id", "log-row-phrase")				);	var paragraphs = message.text.split("\r");	paragraphs.forEach(function(substring) {			textCell.append($("&lt;p&gt;" + substring + "&lt;/p&gt;"));	});	$("#chat-log-container").scrollTop(row.offset().top);}</body><body package="AppeX-Examples">buildChat() {	var self = this,			pageDiv,			usersDiv,			logDiv,			postDiv;			pageDiv = $('#pageDiv');		pageDiv.html("");	usersDiv = $("&lt;div&gt;")		.addClass("ui-widget-content users")		.attr("id", "resizable-user")		.append("&lt;h3 class='ui-widget-header'&gt;Users&lt;/h3")		.resizable()		.appendTo(pageDiv);	this.userContainer = $("&lt;div&gt;")						.attr("id", "user-container")						.appendTo(usersDiv);	this.buildUserList();	logDiv = $("&lt;div&gt;")		.addClass("ui-widget-content log")		.attr("id", "resizable-log")		.append("&lt;h3 class='ui-widget-header'&gt;Chat&lt;/h3&gt;")		.resizable()		.appendTo(pageDiv);	self.buildChatLog(logDiv);	postDiv = $("&lt;div&gt;")		.addClass("ui-widget-content post")		.attr("id", "post")		.append("&lt;h3 class='ui-widget-header'&gt;Enter Post " + this.currentUser + "&lt;/h3&gt;")		.appendTo(pageDiv);	self.buildPostMessage(postDiv);	}</body><body package="AppeX-Examples">buildChatLog(log) {			this.table = $("&lt;div&gt;").attr( "id", "chat-log-container");	log.append(this.table);}</body><body package="AppeX-Examples">buildContent() {	var	self = this,		user,		widget,		input,		button;	user = this.getItemFromStorage ("appex_user", window.sessionStorage);			if (user) {		this.currentUser = user.name;		return this.buildChat();	} 	this.currentUser = "Chat User1";		widget = $("&lt;div&gt;")			.appendTo(this.pageDiv);	$("&lt;label&gt;")		.text("Enter your name:")		.appendTo(widget);	input = $("&lt;input&gt;")		.val(self.currentUser)		.appendTo(widget);	button = $("&lt;button&gt;Accept&lt;/button&gt;")		.attr("id", "send-button")		.appendTo(widget);	button.click(function () {		self.currentUser = input.val();		self.loginToServer();		});}</body><body package="AppeX-Examples">buildHeader() {		this.pageDiv.append("&lt;div data-role=\"header\"&gt;&lt;h1&gt;Chat Room&lt;/h1&gt;&lt;/div&gt;");}</body><body package="AppeX-Examples">buildHtml() {	this.pageDiv = $("#pageDiv");	this.buildHeader();	this.buildContent();	this.registerInterestInLoggedInUser();	this.registerInterestInLoggedOutUser();	this.registerInterestInNewPost();	return this;}</body><body package="AppeX-Examples">buildPostMessage(page)	{	var self = this;	var input = $("&lt;textarea&gt;")		.addClass("input" )		.attr("id", "input-field")		.appendTo(page);	$("&lt;div&gt;")		.appendTo(page)		.append ($("&lt;button&gt;Send&lt;/button&gt;")					.attr("id", "send-button")					.click(function () {						self.postClientEvent("NewPost", {"user":self.currentUser, "text":input.val()});						input.val("");					})							)		.append ($("&lt;button&gt;Logout&lt;/button&gt;")					.attr("id", "logout-button")					.click(function (){ self.logoutUser("Logged out") })				);}</body><body package="AppeX-Examples">buildUserList() {	var	aDiv = this.userContainer,		self = this;	this.asyncMessageToServer("getUserNames").onSuccess(function (userNames) {		userNames.sort().forEach(function (eUserName) {			var eString = eUserName;			if (eUserName == self.currentUser) {				eString = "&lt;b&gt;" + eString + "&lt;/b&gt;";			};			$("&lt;div&gt;" + eString + "&lt;/div&gt;")				.attr("userName", eString)				.attr("class", 'user-name')				.appendTo(aDiv);		});	});	}</body><body package="AppeX-Examples">handleSessionExpired(session) {	this.logoutUser("Session expired");	return this;}</body><body package="AppeX-Examples">loginToServer() {	var self = this;	this.asyncMessageToServer("loginUser", self.currentUser)		.onSuccess(function (data) {			self.storeItemInStorage("appex_user", data, window.sessionStorage);			self.buildChat();		})		.onError(function (error) {			var aString = '&lt;div&gt;&lt;h3&gt;Error:&lt;/h3&gt;' + error.statusText + ' - ' + error.response + '&lt;/div&gt;';			$t.debug(aString);			self.pageDiv.append(aString);		});}</body><body package="AppeX-Examples">logoutUser(message) {	var self = this,		textMessage;	this.asyncMessageToServer("logoutUser", this.currentUser)		.onError(function (error) {			self.pageDiv				.html("")				.append( $("&lt;label&gt;")					.text('Logout Error: ' + error.statusText + ': ' + error.response)				)				.append( $("&lt;h3&gt;")					.text("Bye " + self.currentUser)				);		})		.onSuccess(function (data) {			self.removeItemFromStorage("appex_user", window.sessionStorage);			self.pageDiv				.html("")				.append( $("&lt;label&gt;")					.text(message)				)				.append( $("&lt;h3&gt;")					.text("Bye " + self.currentUser)				);		});	//note that following code will execute regardless of unsuccessful logout on server.	this.closeEventChannel();	}</body></methods><methods><class-id>AppeX.ChatClient</class-id> <category>js - events</category><body package="AppeX-Examples">registerInterestInLoggedInUser() {	var self = this;	this.onServerEvent(		"LoggedInUser",		function (data) {			self.addMessageToChatLog({ user:data, text:"joined the chat room" });			if (self.userContainer) {				self.userContainer.html("");			}			self.buildUserList(self.userContainer);		});	return this;}</body><body package="AppeX-Examples">registerInterestInLoggedOutUser() {	var self = this;	this.onServerEvent(		'LoggedOutUser',		function(data) {			self.addMessageToChatLog( {user:data, text:"left the chat room" });			self.userContainer.html("");			self.buildUserList(self.userContainer);		});	return this;}</body><body package="AppeX-Examples">registerInterestInNewPost() {	var self = this;	this.onServerEvent(		"NewPost",		function(data) {			self.addMessageToChatLog(data);		});	return this;}</body></methods><methods><class-id>AppeX.UserRESTApplication class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'button {	cursor: pointer;	margin: 2px;	padding: 0.2em 1em;	background-color: rgba(127,127,127,0.15);	border: dotted thin transparent;	border-radius: 4px;}label {	font-weight: bold;	}}'</body></methods><methods><class-id>AppeX.UserRESTApplication class</class-id> <category>accessing</category><body package="AppeX-Examples">headExternalLibraries	&lt;head: 200&gt;	^JQueryLib</body></methods><methods><class-id>AppeX.UserRESTApplication class</class-id> <category>html</category><body package="AppeX-Examples">bodyDivHome	&lt;body: 50&gt;	^ '&lt;article&gt;		&lt;h1&gt;RESTful Demo&lt;/h1&gt;		&lt;p&gt;- The demo performs REST operations on in-image User objects. Think of this as a front end to a User database. Users in the database can login from other example applications such as Chat or Shared Session Application.&lt;/p&gt;		&lt;p&gt;- "Add user" button opens a dialog to add a new user by sending HTTP POST command.&lt;/p&gt;		&lt;p&gt;- "Save" button updates a selected user email by sending HTTP PUT command.&lt;/p&gt;		&lt;p&gt;- "Delete" button deletes a selected user by sending HTTP DELETE command&lt;/p&gt;&lt;/article&gt;	&lt;div id="addNewUserDiv"&gt;&lt;/div&gt;	&lt;div id="page"&gt;&lt;/div&gt;'</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'RESTful Demo'</body><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/rest-demo'&gt;</body></methods><methods><class-id>AppeX.UserRESTApplication class</class-id> <category>services</category><body package="AppeX-Examples">addUser	&lt;POST&gt;	&lt;plainText: 'user'&gt;		| arguments userName user |	arguments := self currentRequestArguments.	userName := arguments at: #name ifAbsent: [ ^nil ].	user := User named: userName.	arguments at: #email ifPresent: [ :email | user email: email ].	^'done'</body><body package="AppeX-Examples">deleteUser	&lt;DELETE&gt;	&lt;plainText: 'user'&gt;		| arguments userName |	arguments := self currentRequestArguments.	userName := arguments at: #name ifAbsent: [ ^nil ].	(User removeUserNamed: userName) ifNil: [ ^ nil ].	^'done'</body><body package="AppeX-Examples">getUsers	&lt;GET&gt;	&lt;jsonStream: 'user'&gt;		^User users</body><body package="AppeX-Examples">updateUser	&lt;PUT&gt;	&lt;plainText: 'user'&gt;		| arguments userName  |	arguments := self currentRequestArguments.	userName := arguments at: #name ifAbsent: [ ^nil ].	^ (User findOne: [ :usr | usr name = userName ]) ifNotNil: [ :user |		arguments at: #email ifPresent: [ :email | user email: email ].		'done' ]</body></methods><methods><class-id>AppeX.D3ChartClient</class-id> <category>javascript</category><body package="AppeX-Examples">buildHtml(){	var self = this;	this.data = [];	for( var i = 0; i &lt; 5; i++) { self.getRandomNumber() };	var margin = {top: 10, right: 100, bottom: 20, left: 100},	    width = 960 - margin.left - margin.right,	    height = 500 - margin.top - margin.bottom;	var x = d3.scale.linear() 	   .domain([0, 23])	    .range([0, width]);	var y = d3.scale.linear()	    .domain([ 0, 1100])	    .range([height, 0]);	var line = d3.svg.line()  	  .x(function(d, i) { return x(i); })  	  .y(function(d, i) { return y(d); });	var svg = d3.select("body").append("svg")		.attr("width", width + margin.left + margin.right)		.attr("height", height + margin.top + margin.bottom)		.append("g")		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");	svg.append("defs").append("clipPath")		.attr("id", "clip")		.append("rect")		.attr("width", width)		.attr("height", height);	svg.append("g")		.attr("class", "x axis")		.attr("transform", "translate(0," + height + ")")		.call(d3.svg.axis().scale(x).orient("bottom"));	svg.append("g")		.attr("class", "y axis")		.call(d3.svg.axis().scale(y).orient("left"));	this.path = svg.append("g")		.attr("clip-path", "url(#clip)") 		.append("path")		.data([self.data])		.attr("class", "line")		.attr("d", line);	this.runRedraw(line, 500, x )();	return this;}</body><body package="AppeX-Examples">getRandomNumber() {		var self = this;	this.asyncMessageToServer("randomNumber")		.onSuccess( function (data) { self.data.push( Number(data) ); });}</body><body package="AppeX-Examples">runRedraw(line, duration, scaleX ) {	var self = this;	var tick = function tick() {		self.getRandomNumber();  		// redraw the line, and slide it to the left		var transition = self.path			.attr("d", line)			.attr("transform", null)			.transition();		transition.duration(duration)			.ease("linear");		if (self.data.length &gt; 23) {			transition.attr("transform", "translate(" + scaleX(-1) + ")");   			// pop the old data point off the front			self.data.shift();		};		transition.each("end", tick);	};	return tick;}</body></methods><methods><class-id>AppeX.SharedSessionLogin</class-id> <category>services</category><body package="AppeX-Examples">loginUser""	&lt;json: 'login-user'&gt;	| data |	data := self currentRequestArguments.	self session data: data.	^data</body></methods><methods><class-id>AppeX.SharedSessionLogin class</class-id> <category>html</category><body package="AppeX-Examples">bodyLoginForm	&lt;body: 25&gt;		^ '&lt;form id="login-form" style="display:none"&gt;	&lt;label for="username"&gt;User Name:&lt;/label&gt;	&lt;input id="username" name="username" type="text" value="User1"&gt;	&lt;br&gt;	&lt;label for="email"&gt;Email Address:&lt;/label&gt;	&lt;input id="email" name="email" type="email" placeholder="user@example.com"&gt;	&lt;br&gt;	&lt;input id="submit-button" type="submit" value="Login"&gt;&lt;/form&gt;'</body><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'Login'</body></methods><methods><class-id>AppeX.WebSocketAppClient</class-id> <category>javascript</category><body package="AppeX-Examples">buildHtml() {	var self = this,		sendButton,		errorButton,		fileButton,		disconnectButton,		url;			url = window.location.href.replace("http", "ws");	this.websocket = new WebSocket(url);				sendButton = document.getElementById("send");	sendButton.onclick = function(evt) {		if(self.websocket) {			self.doSend() 		}	};	errorButton = document.getElementById("error");	errorButton.onclick = function(evt) {		if(self.websocket) {			self.websocket.send("error")		}	};	fileButton = document.getElementById("file");	fileButton.onclick = function(evt) {		if(self.websocket) {			self.websocket.send("file") 		}	};		disconnectButton = document.getElementById("disconnect");	disconnectButton.onclick = function(evt) {		if(self.websocket) {			self.websocket.close() 		}	};	this.websocket.onopen = function(evt) { self.onOpen(evt) };	this.websocket.onclose = function(evt) { self.onClose(evt) };	this.websocket.onmessage = function(evt) { self.onMessage(evt) };	this.websocket.onerror = function(evt) { self.onError(evt) };	//Make sure the websocket connection is closed on window refresh or close. 	//If it is not closed the server will keep the connection opened until it timeouts	window.addEventListener(		'beforeunload',		function(event) {			if(self.websocket) {				self.websocket.close();			}		});}</body><body package="AppeX-Examples">doSend() {	var message  = document.getElementById ("message");	this.writeToScreen("SENT: " + message.value);	this.websocket.send(message.value);  }</body><body package="AppeX-Examples">onClose(evt) {	this.writeToScreen('&lt;span style="color: green;"&gt;DISCONNECTED CODE:' + evt.code + ' REASON: ' + evt.reason + '&lt;/span&gt;');	this.websocket = null;  }</body><body package="AppeX-Examples">onError(evt) {	this.writeToScreen('&lt;span style="color: red;"&gt;ERROR:&lt;/span&gt; ' + evt.data);  }</body><body package="AppeX-Examples">onMessage(evt) {	var self = this;	if (evt.data == "sending file") { this.file = 1 };	if (evt.data == "file sent") { this.file = 0 };	if ( this.file == 1) 	{		var paragraphs = evt.data.split("\r");		paragraphs.forEach(function(substring) {			self.writeToScreen('&lt;pre style="color: gray;"&gt;' + substring + '&lt;/pre&gt;');		});	}	else 	{		self.writeToScreen('&lt;span style="color: blue;"&gt;RESPONSE: ' + evt.data+'&lt;/span&gt;');	}  }</body><body package="AppeX-Examples">onOpen(evt) {	this.writeToScreen("CONNECTED");  }</body><body package="AppeX-Examples">writeToScreen(message)  {	var output = document.getElementById("output");	var pre = document.createElement("p");	pre.style.wordWrap = "break-word";	pre.innerHTML = message;	output.appendChild(pre);  }</body></methods><methods><class-id>AppeX.WebSocketChatClient</class-id> <category>web socket messages</category><body package="AppeX-Examples">createWebSocket() {	var self = this;	var url = window.location.href.replace("http", "ws") + "/ws";	this.websocket = new WebSocket(url, "chat");	this.websocket.onopen = function(evt) { self.onOpen(evt) };	this.websocket.onclose = function(evt) { self.onClose(evt) };	this.websocket.onmessage = function(evt) { self.onMessage(evt) };	this.websocket.onerror = function(evt) { self.onError(evt) };		//Make sure the websocket connection is closed on window refresh or close. 	//If it is not closed the server will keep the connection opened until it timeouts	window.addEventListener(		'beforeunload',		function(event) {			if(self.websocket) {				self.websocket.close()			}		});		}</body><body package="AppeX-Examples">onClose(evt) {	this.logoutUser(evt.reason);	this.websocket = null;  }</body><body package="AppeX-Examples">onError(evt) {	var self = this;	var row, textCell;	this.table.append(row = $("&lt;div&gt;"));	row		.attr("id", "log-row")		.append( $("&lt;div&gt;")					.attr("id", "log-row-user")					.append( $("&lt;p&gt;")								.text("ERROR")							)				)		.append( textCell = $("&lt;div&gt;")					.attr("id", "log-row-phrase")					.append( $("p")								.text(evt.data)							)				);	$("#chat-log-container").scrollTop(row.offset().top);}</body><body package="AppeX-Examples">onMessage(event) {	var msg = JSON.parse(event.data); 	switch(msg.type) {		case "UserList":			this.buildUserList(msg.users);			break;		case "NewPost":			this.addMessageToChatLog( msg );			break;		case "LoggedInUser":			this.addMessageToChatLog( {user:msg.user, text:"joined the chat room"} );			break;		case "LoggedOutUser":			this.addMessageToChatLog( {user:msg.user, text:"left the chat room" });			break;	}  }</body><body package="AppeX-Examples">onOpen(evt) {	this.sendMessage("LoggedInUser", "Add User");  }</body><body package="AppeX-Examples">sendMessage(type, text) {	var self = this; 	var msg = {		type: type,  		text: text,		user:  self.currentUser 	};	this.websocket.send(JSON.stringify(msg));  }</body></methods><methods><class-id>AppeX.WebSocketChatClient</class-id> <category>javascript</category><body package="AppeX-Examples">addMessageToChatLog(message) {	var self = this;	var row, textCell;	this.table.append(row = $("&lt;div&gt;"));	row		.attr("id", "log-row")		.append( $("&lt;div&gt;")					.attr("id", "log-row-user")					.append( $("&lt;p&gt;")								.text(message.user)							)				)		.append( textCell = $("&lt;div&gt;")					.attr("id", "log-row-phrase")				);	var paragraphs = message.text.split("\r");	paragraphs.forEach(function(substring) {			textCell.append($("&lt;p&gt;" + substring + "&lt;/p&gt;"));	});	$("#chat-log-container").scrollTop(row.offset().top);}</body><body package="AppeX-Examples">buildChat() {	var self = this,		users,		log,		post;	this.page.html("");		users = $("&lt;div&gt;")		.addClass("ui-widget-content users")		.attr("id", "resizable-user")		.append("&lt;h3 class='ui-widget-header'&gt;Users&lt;/h3")		.resizable()		.appendTo(self.page);	this.userContainer = $("&lt;div&gt;")							.attr("id", "user-container")							.appendTo(users);	log = $("&lt;div&gt;")		.addClass("ui-widget-content log")		.attr("id", "resizable-log")		.append("&lt;h3 class='ui-widget-header'&gt;Chat&lt;/h3&gt;")		.resizable()		.appendTo(self.page);	this.buildChatLog(log);	post = $("&lt;div&gt;")		.addClass("ui-widget-content post")		.attr("id", "post")		.append("&lt;h3 class='ui-widget-header'&gt;Enter Post&lt;/h3&gt;")		.appendTo(self.page);			this.buildPostMessage(post);	}</body><body package="AppeX-Examples">buildChatLog(log) {	this.table = $("&lt;div&gt;") 				.attr( "id", "chat-log-container");	log.append(this.table);}</body><body package="AppeX-Examples">buildHtml() {	this.page = $("#page");	if ('WebSocket' in window)	{		this.page.append("&lt;div data-role=\"header\"&gt;&lt;h2&gt;Chat Room Demo based on WebSocket connection&lt;/h2&gt;&lt;/div&gt;");		this.login();	}	else	{		this.page.append("&lt;div data-role=\"header\"&gt;&lt;h1&gt;WebSocket is not supported by this browser&lt;/h1&gt;&lt;/div&gt;");	};	return this;}</body><body package="AppeX-Examples">buildPostMessage(div)	{	var self = this;	var input = $("&lt;textarea&gt;")		.addClass("input" )		.attr("id", "input-field")		.appendTo(div);	$("&lt;div&gt;")		.appendTo(page)		.append ($("&lt;button&gt;Send&lt;/button&gt;")					.attr("id", "send-button")					.click(function () { 						self.sendMessage("NewPost", input.val());						input.val("");					})							)		.append ($("&lt;button&gt;Logout&lt;/button&gt;")					.attr("id", "logout-button")					.click(function () { self.websocket.close() })				);}</body><body package="AppeX-Examples">buildUserList(userNames) {	var self = this;	this.userContainer.html("");	userNames.sort().forEach(function(userName) {		var string = userName;		if (userName == self.currentUser) {			string = "&lt;b&gt;" + userName + "&lt;/b&gt;";		};		$("&lt;div&gt;" + string + "&lt;/div&gt;")			.attr("userName", userName)			.attr("class", 'user-name')			.appendTo(self.userContainer);	});}</body><body package="AppeX-Examples">login() {	var self = this,		widget,		input,		button;			this.currentUser = "WebSocket Chat User1";	widget = $("&lt;div&gt;")		.appendTo(self.page);	$("&lt;label&gt;")		.text("Enter your name:")		.appendTo(widget);	input = $("&lt;input&gt;")		.val(self.currentUser)		.appendTo(widget);	button = $("&lt;button&gt;Accept&lt;/button&gt;")		.attr("id", "send-button")		.appendTo(widget);	button.click(function () {		self.currentUser = input.val();		self			.POST("loginUser", self.currentUser)			.onSuccess(function (data) {				if (data == 'accepted' )				{					self.createWebSocket();					self.buildChat();				}				else				{					self.page.append("&lt;div&gt;&lt;h3&gt;" + data + "&lt;/h3&gt;&lt;/div&gt;");				}			})			.onError(function (error){				self.page.append("&lt;div&gt;&lt;h3&gt;Error:&lt;/h3&gt;" + error.statusText + " - " + error.response + "&lt;/div&gt;");			});	});}</body><body package="AppeX-Examples">logoutUser(text) {	this.page		.html("")		.append( $("&lt;label&gt;")					.attr("style", "color: gray;")					.text(text)				)		.append( $("&lt;h3&gt;")					.text("Bye " + this.currentUser)				);	this.login();}</body></methods><methods><class-id>AppeX.D3Chart class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'.line {	fill: none;	stroke: blue;	stroke-width: 3px;}svg {font: 10px sans-serif; }.axis path, .axis line {	fill: none;	stroke: #000;	shape-rendering: crispEdges;	stroke-width: 2px;}'</body></methods><methods><class-id>AppeX.D3Chart class</class-id> <category>html</category><body package="AppeX-Examples">headD3	&lt;head: 200&gt;	^D3Lib</body><body package="AppeX-Examples">randomNumber	&lt;plainText: 'randomNumber'&gt;	^( FastRandom new next * 1000)		printString</body></methods><methods><class-id>AppeX.D3Chart class</class-id> <category>configuration</category><body package="AppeX-Examples">bodySharedLibrary	&lt;body: 1&gt;	^JavascriptLibrary named: #'SharedLibrariesExamples.js'</body><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/d3/chart'&gt;</body></methods><methods><class-id>AppeX.HelloLocalized</class-id> <category>services</category><body package="AppeX-Examples">localeInfo	&lt;json: 'cs-cz/locale-info'&gt;	&lt;json: 'de-de/locale-info'&gt;	&lt;json: 'en/locale-info'&gt;	&lt;json: 'en-au/locale-info'&gt;	&lt;json: 'en-ca/locale-info'&gt;	&lt;json: 'en-gb/locale-info'&gt;	&lt;json: 'en-us/locale-info'&gt;	&lt;json: 'fr-fr/locale-info'&gt;	&lt;json: 'ru/locale-info'&gt;		"set the locale for this HelloLocalized instance"	self setLocaleFromPath.	^self printLocaleInfo</body><body package="AppeX-Examples">localeInfoFromSession	"this method illustrates that the session can be used in conjuction with setLanguageInServerSession as a means to store and retrieve localInfo (as an alternative to using a language id embedded in path information in every call)"	&lt;json: 'locale-info'&gt;		^self printLocaleInfo</body><body package="AppeX-Examples">setLanguageInServerSession	&lt;plainText:  'setLanguageInServerSession'&gt;		| args languageId aLocale |	args := self currentRequestArguments .	languageId := args at: #languageId.	aLocale := Locale getLocaleNamed: languageId.	self locale: aLocale.	^languageId</body></methods><methods><class-id>AppeX.HelloLocalized class</class-id> <category>html</category><body package="AppeX-Examples">bodyGreetingDiv	&lt;body: 50&gt;	^'	&lt;div id="greetingDiv"&gt;	&lt;/div&gt;'</body><body package="AppeX-Examples">bodyInfoDiv	&lt;body: 60&gt;	^'	&lt;div id="infoDiv"&gt;	&lt;/div&gt;'</body><body package="AppeX-Examples">bodyLanguageLinks	&lt;body: 45&gt;	^'	&lt;div id="languageLinks"&gt;	&lt;/div&gt;'</body><body package="AppeX-Examples">headExternalLibraries	&lt;head: 200&gt;	^self jqueryMinTags</body></methods><methods><class-id>AppeX.HelloLocalized class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'	#languageLinks {		font-size: x-large;		}		#greetingDiv {		font-size: x-large;	}	#infoDiv {		font-size: x-large;	}		.currentLanguage {		color: purple	}	'</body></methods><methods><class-id>AppeX.HelloLocalized class</class-id> <category>services</category><body package="AppeX-Examples">downloadCatalogFilesToServer 	&lt;json: 'downloadCatalogFilesToServer'&gt;	"self downloadCatalogFilesToServer"	| zipStream aFilename |		aFilename := self userMessagesRootDirectory directory.		'http://ftp.cincomsmalltalk.com/pub/appex/helloLocalizedCatalogs.zip' asURI 			readStreamDo: [ :socketStream :type |				zipStream := OS.Zip.Archive on: socketStream.				aFilename ensureDirectory.				zipStream extractTo: aFilename].	^true</body><body package="AppeX-Examples">getCatalogFileExists	"self getCatalogFileExists"	&lt;json: 'getCatalogFileExists'&gt;		| sampleFilename|		sampleFilename := self userMessagesRootDirectory / 'en' / 'HelloLocalized.lbl'.	^sampleFilename exists</body></methods><methods><class-id>AppeX.HelloLocalized class</class-id> <category>user messages</category><body package="AppeX-Examples">userMessageCatalog	"self userMessageCatalog"	&lt;head: 9999.25&gt;		^ super userMessageCatalog</body></methods><methods><class-id>AppeX.HelloLocalized class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/hello-localized'&gt;</body></methods><methods><class-id>AppeX.SimplestApp class</class-id> <category>html</category><body package="AppeX-Examples">htmlTitle	&lt;htmlToken: #title&gt;	^'The Simplest Web Application Ever Built'</body></methods><methods><class-id>AppeX.SimplestApp class</class-id> <category>css</category><body package="AppeX-Examples">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'body {	font-family: Arial, Helvetica, sans-serif;}header {	text-align: center;	font-weight: bold;}.content {	margin: 1em;}footer {	text-align: center;	font-size: smaller;	color: DarkGray;}'</body></methods><methods><class-id>AppeX.SimplestApp class</class-id> <category>configuration</category><body package="AppeX-Examples">serverConfiguration	&lt;server: 'AppeXExamples' path: '/simplest-app'&gt;</body></methods><methods><class-id>AppeX.JavascriptLibrary class</class-id> <category>configuration</category><body package="AppeX-Examples">sharedSessionApplication	&lt;library: 'AppeX.SharedSessionApplication.js'&gt;		^self new  		addClass: SharedSessionClient; 		addClass: SharedSessionAboutClient; 		addClass: SharedSessionLoginClient; 		yourself.</body></methods><methods><class-id>AppeX.UserMessageCatalog class</class-id> <category>configuration</category><body package="AppeX-Examples">helloLocalized_catalogsScript	&lt;library: 'AppeX.HelloLocalized_catalogsScript.js'&gt;		^self new		applicationClass: HelloLocalized;		yourself</body></methods><initialize><class-id>AppeX.WebSocketChat</class-id></initialize><initialize><class-id>AppeX.Chat</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Application</name><environment>AppeX</environment><super>SiouX.HttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientSubscriptions session eventStream </inst-vars><class-inst-vars>settings requestActions subscriptionRegistry codeComposer combinedJavascriptLibrary </class-inst-vars><imports>			private Tools.Pragma			private Xtreams.*			private SiouX.*			private Protocols.*			</imports><category></category><attributes><package>AppeX-Server</package></attributes></class><class><name>ApplicationClient</name><environment>AppeX</environment><super>AppeX.JavascriptObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>javascriptLibrary </class-inst-vars><imports></imports><category>bootstrap</category><attributes><package>AppeX-Client</package></attributes></class></st-source>