<?xml version="1.0"?><st-source><!-- Name: ContactBrowser-ExampleNotice: Copyright 2003-2014 Cincom Systems, Inc.  All rights reserved.Comment: An example of using AspectAdaptors and PluggableAdaptors to adapt collections of collections to a GUI.DbIdentifier: bear73DbTrace: 427978DbUsername: smichaelDbVersion: 1.7PackageName: ContactBrowser-ExampleParcel: #('ContactBrowser-Example')PrintStringCache: (1.7,smichael)Version: 1.7Date: 5:06:46 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:46 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ContactList</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contacts </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>ContactBrowser-Example</package></attributes></class><comment><class-id>Examples.ContactList</class-id><body>A collection of Contact instances.  Used as part of the domain for ContactBrowserInstance Variables:	contacts	&lt;OrderedCollection of: Contact&gt;	collection of contacts</body></comment><class><name>Contact</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address email phone fax </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>ContactBrowser-Example</package></attributes></class><comment><class-id>Examples.Contact</class-id><body>A simple object containing contact information.  Used as part of the domain for ContactBrowser.Instance Variables:	address	&lt;String&gt;	contact address	email	&lt;String&gt;	contact e-mail	fax	&lt;String&gt;	contact fax	name	&lt;String&gt;	contact name	phone	&lt;String&gt;	contact phone number</body></comment><class><name>ContactBook</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listsCollection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>ContactBrowser-Example</package></attributes></class><comment><class-id>Examples.ContactBook</class-id><body>A book of ContactLists grouped by name.  Used as part of the domain for ContactBrowser.Instance Variables:	listsCollection	&lt;Dictionary&gt; dictionary of ContactLists keyed by group name.</body></comment><class><name>Contact1Browser</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>group contactsList contactChannel book </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>ContactBrowser-Example</package></attributes></class><comment><class-id>Examples.Contact1Browser</class-id><body>A GUI to display information from a selected book of contacts using AspectAdaptors and PluggableAdaptors.Instance Variables:	book	&lt;ContactBook&gt;	book of ContactLists grouped by name	contactChannel	&lt;ValueHolder on: Contact&gt;	current Contact selected	contactsList	&lt;SelectionInList&gt;	list model of contacts from a selected ContactList   	group	&lt;ValueHolder on: String&gt;	current group selection	listChannel	&lt;ValueModel&gt;	current ContactList selection</body></comment><class><name>Contact2Browser</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>group contactsList book </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Help-Examples</category><attributes><package>ContactBrowser-Example</package></attributes></class><comment><class-id>Examples.Contact2Browser</class-id><body>Contact2Browser, a variation of example Contact1Browser, minimizes coding of AspectAdaptors and change notification by making use of the application builder to build them from specifications.  Instance Variables:	book	&lt;ContactBook&gt;	book of ContactLists grouped by name	contactsList	&lt;SelectionInList&gt;	list model of contacts from a selected ContactList   	group	&lt;ValueModel&gt;	current group selection</body></comment><methods><class-id>Examples.ContactList</class-id> <category>accessing</category><body package="ContactBrowser-Example">contact: aContactNameString	^contacts select: [ :x | x name = aContactNameString ]</body><body package="ContactBrowser-Example">contacts	^contacts</body></methods><methods><class-id>Examples.ContactList</class-id> <category>initialize-release</category><body package="ContactBrowser-Example">initialize	contacts := OrderedCollection new</body></methods><methods><class-id>Examples.ContactList</class-id> <category>adding - removing</category><body package="ContactBrowser-Example">add: aContact	( aContact isKindOf: Contact )		ifTrue: [ contacts add: aContact ]		ifFalse: [ Dialog warn: 'Only Contact instances are acceptable' ]</body><body package="ContactBrowser-Example">remove: aContact	( contacts includes: aContact )		ifTrue: [ ( Dialog confirm: 'Remove selected contact?' )			ifTrue: [ contacts remove: aContact ] ]</body></methods><methods><class-id>Examples.ContactList class</class-id> <category>instance creation</category><body package="ContactBrowser-Example">new	^super new initialize</body></methods><methods><class-id>Examples.Contact</class-id> <category>accessing</category><body package="ContactBrowser-Example">address	^address</body><body package="ContactBrowser-Example">address: aValue	address := aValue</body><body package="ContactBrowser-Example">email	^email</body><body package="ContactBrowser-Example">email: aValue	email := aValue</body><body package="ContactBrowser-Example">fax	^fax</body><body package="ContactBrowser-Example">fax: aValue	fax := aValue</body><body package="ContactBrowser-Example">name	^name</body><body package="ContactBrowser-Example">name: aValue	name := aValue</body><body package="ContactBrowser-Example">phone	^phone</body><body package="ContactBrowser-Example">phone: aValue	phone := aValue</body></methods><methods><class-id>Examples.Contact</class-id> <category>initialize-release</category><body package="ContactBrowser-Example">initialize	name := address := email := phone := fax := String new</body></methods><methods><class-id>Examples.Contact</class-id> <category>printing</category><body package="ContactBrowser-Example">printOn: aStream	^aStream nextPutAll: self name.</body></methods><methods><class-id>Examples.Contact class</class-id> <category>instance creation</category><body package="ContactBrowser-Example">new 	^super new initialize</body></methods><methods><class-id>Examples.ContactBook</class-id> <category>accessing</category><body package="ContactBrowser-Example">collection	^listsCollection</body><body package="ContactBrowser-Example">groups	^self collection keys</body><body package="ContactBrowser-Example">listFor: aGroupString	^self collection at: aGroupString</body></methods><methods><class-id>Examples.ContactBook</class-id> <category>initialize-release</category><body package="ContactBrowser-Example">fillBook	| list |	list := ContactList new.	list add: (Contact new name: 'Lois'; phone: '123-765-4321'; email: 'lois@worldnet.com').	list add: (Contact new name: 'Tim'; phone: '123-765-5432'; email: 'timboyer@worldnet.com').	list add: (Contact new name: 'Megan'; phone: '890-432-2345';email: 'meganboyer@worldnet.com').	listsCollection at: 'family' put: list.	list := ContactList new.	list add: (Contact new name: 'Mark'; phone: '199-642-9753'; email: 'markk@universe.net').	list add: (Contact new name: 'Brad'; phone: '567-434-4628'; email: 'bradm@msn.com').	list add: (Contact new name: 'Michelle'; email: 'rosette@earthlink.net').	listsCollection at: 'band' put: list.</body><body package="ContactBrowser-Example">initialize	listsCollection := Dictionary new. 	self fillBook.</body></methods><methods><class-id>Examples.ContactBook class</class-id> <category>instance creation</category><body package="ContactBrowser-Example">new 	^super new initialize</body></methods><methods><class-id>Examples.Contact1Browser</class-id> <category>aspects</category><body package="ContactBrowser-Example">address	| adaptor |	adaptor := AspectAdaptor subjectChannel: contactChannel.	adaptor forAspect: #address.	^adaptor</body><body package="ContactBrowser-Example">contactsList	^contactsList</body><body package="ContactBrowser-Example">email	| adaptor |	adaptor := AspectAdaptor subjectChannel: contactChannel.	adaptor forAspect: #email.	^adaptor</body><body package="ContactBrowser-Example">fax	| adaptor |	adaptor := AspectAdaptor subjectChannel: contactChannel.	adaptor forAspect: #fax.	^adaptor</body><body package="ContactBrowser-Example">group	"The currently displayed group from groupsList, or empty if no group is selected"	^group</body><body package="ContactBrowser-Example">groupsList	"Collected from the keys in the ContactBook"	^(PluggableAdaptor on: book) 		getBlock: [:model | model groups asOrderedCollection]		putBlock: [:model :adaptor | nil]		updateBlock: [:model :adaptor :para | false]</body><body package="ContactBrowser-Example">name	| adaptor |	adaptor := AspectAdaptor subjectChannel: contactChannel.	adaptor forAspect: #name.	^adaptor</body><body package="ContactBrowser-Example">phone	| adaptor |	adaptor := AspectAdaptor subjectChannel: contactChannel.	adaptor forAspect: #phone.	^adaptor</body></methods><methods><class-id>Examples.Contact1Browser</class-id> <category>changing</category><body package="ContactBrowser-Example">changedContact	"When a new contact is selected, update the information"	contactChannel value: contactsList selection</body><body package="ContactBrowser-Example">changedGroup	"When the selected group changes, change the list."	contactsList list: (book listFor: group value) contacts asList.	contactChannel value: Contact new.</body></methods><methods><class-id>Examples.Contact1Browser</class-id> <category>initialize-release</category><body package="ContactBrowser-Example">initialize	book := ContactBook new.	contactsList := SelectionInList new.	contactChannel := Contact new asValue.	group := String new asValue.</body></methods><methods><class-id>Examples.Contact2Browser</class-id> <category>initialize-release</category><body package="ContactBrowser-Example">initialize	book := ContactBook new.	contactsList := SelectionInList new.	group := String new asValue.</body></methods><methods><class-id>Examples.Contact2Browser</class-id> <category>aspects</category><body package="ContactBrowser-Example">contactChannel		^contactsList selectionHolder</body><body package="ContactBrowser-Example">contactsList	^contactsList</body><body package="ContactBrowser-Example">group	^group</body><body package="ContactBrowser-Example">groupsList	"Collected from the keys in the ContactBook"	^(PluggableAdaptor on: book) 		getBlock: [:model | model groups asOrderedCollection]		putBlock: [:model :adaptor | nil]		updateBlock: [:model :adaptor :para | false]</body></methods><methods><class-id>Examples.Contact2Browser</class-id> <category>changing</category><body package="ContactBrowser-Example">changedGroup	"When the selected group changes, change the list."	contactsList list: (book listFor: group value) contacts asList</body></methods><methods><class-id>Examples.Contact1Browser class</class-id> <category>interface specs</category><body package="ContactBrowser-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ContactsBrowser 				#defaultString: 'Contacts Browser'				#catalogID: #examples ) 			#bounds: #(#{Graphics.Rectangle} 512 384 911 654 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 17 ) 					#name: #Label3 					#label: 'Name' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 62 ) 					#name: #Label4 					#label: 'Address' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 107 ) 					#name: #Label5 					#label: 'email' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 152 ) 					#name: #Label6 					#label: 'Phone' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 197 ) 					#name: #Label7 					#label: 'Fax' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 62 ) 					#name: #Label2 					#label: 'Contacts' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 17 ) 					#name: #Label1 					#label: 'Contact Lists' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 24 86 163 242 ) 					#name: #contacts 					#model: #contactsList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedContact ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 84 374 107 ) 					#name: #address 					#model: #address ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 129 374 152 ) 					#name: #email 					#model: #email ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 39 374 62 ) 					#name: #name 					#model: #name ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 174 374 197 ) 					#name: #phone 					#model: #phone ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 219 374 242 ) 					#name: #fax 					#model: #fax ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.Rectangle} 24 39 163 62 ) 					#name: #lists 					#model: #group 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedGroup ) 					#comboList: #groupsList ) ) ) )</body></methods><methods><class-id>Examples.Contact2Browser class</class-id> <category>interface specs</category><body package="ContactBrowser-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ContactsBrowser 				#defaultString: 'Contacts Browser' 				#catalogID: #examples) 			#bounds: #(#{Graphics.Rectangle} 800 600 1199 870 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 17 ) 					#name: #Label3 					#label: 'Name' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 62 ) 					#name: #Label4 					#label: 'Address' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 107 ) 					#name: #Label5 					#label: 'email' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 152 ) 					#name: #Label6 					#label: 'Phone' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 190 197 ) 					#name: #Label7 					#label: 'Fax' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 62 ) 					#name: #Label2 					#label: 'Contacts' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 17 ) 					#name: #Label1 					#label: 'Contact Lists' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 24 86 163 242 ) 					#name: #contacts 					#model: #contactsList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 39 374 62 ) 					#name: #name 					#model: #'contactChannel name' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 84 374 107 ) 					#name: #address 					#model: #'contactChannel address' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 129 374 152 ) 					#name: #email 					#model: #'contactChannel email' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 174 374 197 ) 					#name: #phone 					#model: #'contactChannel phone' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 202 219 374 242 ) 					#name: #fax 					#model: #'contactChannel fax' ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.Rectangle} 24 39 163 62 ) 					#name: #lists 					#model: #group 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedGroup ) 					#comboList: #groupsList ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>