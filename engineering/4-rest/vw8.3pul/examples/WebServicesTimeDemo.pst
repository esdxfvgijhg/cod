<?xml version="1.0"?><st-source><!-- Name: WebServicesTimeDemoNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: The WebServicesTimeDemo is a simple time service. It provides a server that responds to client requests with an object reporting the current time (i.e., an instance of class Time). The demo includes three simple applications to illustrate how web service clients interact with servers.OverviewEach of the three applications is simply a pair of two classes (client and server), illustrating a particular style of binding the message to the underlying protocol. All of these example classes are located in the WebServices.* name space.Three clients are provided:	TimeClient		-  uses standard document/literal style	TimeClientRPC	-  uses RPC-style invocation	HTimeClient		-  uses SOAP header processingThree server classes are provided, one for each of these clients: TimeServer, TimeServerRPC, and HTimeServer. The servers may be started using the #defaultStart method.The UpdateTimeServer shows how to update web services without using the Wizard.UsageTo try the examples, start one of the servers and then send requests using the corresponding client class.For example, evaluate the following using "Inspect It":	| client value |	WebServices.TimeServer defaultStart.	client := WebServices.TimeClient new.	client start.	value := client timeNow.	client stop.	WebServices.TimeServer defaultStop.	valueThe result in the variable "value" should be an OrderedCollection containing a Time object.ImplementationClasses TimeClient and TimeClientRPC use TimeNowService as a service class.Classes HTimeClient and HTimeServer use HTimeNowService as a service class, and HPasswordProcessor as a support class (for SOAP header processing).DbIdentifier: bear73DbTrace: 493914DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'WSDLTool' '') #(#any 'SOAP-Server' ''))ExplicitPrerequisites: #()IgnoredPrerequisites: #()PackageName: WebServicesTimeDemoParcel: #('WebServicesTimeDemo')PrerequisiteDescriptions: #(#(#name 'WSDLTool') #(#name 'SOAP-Server' #componentType #package))PrerequisiteParcels: #(#('WSDLTool' '') #('SOAP-Server' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 2:31:40 PM April 28, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.3) of April 28, 2017 on April 28, 2017 at 2:31:40 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>LoginTimeClient</name><environment>WebServices</environment><super>WebServices.WsdlClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.LoginTimeClient</class-id><body>It is a client class for making requestsThe client WSDL specification doesn't include Soap Header description. There is still possible to add a Soap header to the client request. Consider we want to add Login header. The Login header x2o specification is described in #x2oLoginSpec. To add the header we need to create the client with LoginClientInterceptor. See #processingPolicy method. The LoginClientInterceptor&gt;&gt;sendingRequest:in: adds Login header to the request. To find the Login header marshaler the HeaderEntry name is created as a NodeTag:	tag := NodeTag qualifier: '' ns: 'urn:LoginDescription' type: 'Login'.	( aRequest headerFor: tag)		value: ( Login new				username: 'username';				password: 'password';				yourself).	| client value |	LoginTimeResponder addToServer.	client := WebServices.LoginTimeClient new.	value := client timeNow.	LoginTimeResponder flushResponders.	value</body></comment><class><name>HPasswordClientInterceptor</name><environment>WebServices</environment><super>WebServices.ClientMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.HPasswordClientInterceptor</class-id><body>HPasswordClientInterceptor adds Soap Password header to a client request. It is a support class for HTimeClient.The #sendingRequest:in: method adds a header for a client request if the header has not been added by a client.</body></comment><class><name>TimeNowService</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebServicesTimeDemo</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.TimeNowService</class-id><body>TimeNowService is a service provider class, implementing  "Time now"  and "as Timestamp" services. </body></comment><class><name>TimeResponderRPC</name><environment>WebServices</environment><super>WebServices.SOAPResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.TimeResponderRPC</class-id><body>TimeServerRPC is a web services responder.The service provider class for the server is TimeNowService. The server operations are described in the rpc/literal style -- see the WSDL schema in #wsdlSchema class method.	| client |	"Find a server and add the responder to the server "	TimeResponderRPC addToServer.	client := TimeClientRPC new.	"Services invocation"	client timeNow inspect.	(client asTimestamp: Time now) inspect.	"Deregister the responder from the server and flush cashed responders "	TimeResponderRPC flushResponders.</body></comment><class><name>LoginClientInterceptor</name><environment>WebServices</environment><super>WebServices.ClientMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.LoginClientInterceptor</class-id><body>The Client Interceptor adds the #Login header to requests. It is a support class for LoginTimeClient.</body></comment><class><name>HTimeResponder</name><environment>WebServices</environment><super>WebServices.SOAPResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.HTimeResponder</class-id><body>The class is a web services responder.The service provider class for the responder is HTimeNowService. The server operations are described in the document/literal style and require the SOAP header #password. See the WSDL schema in #wsdlSchema class method.When the server is running, it may be accessed at:	http://localhost:4444/TimeNowServiceWithHeadersTo add the responder to a server, evaluate:	HTimeResponder addToServer.To release the responder from the server and flush cashed responders, evaluate:	HTimeResponder  flushResponders.See HTimeClient class comments how to invoke the web services the responder provides.</body></comment><class><name>HPasswordResponderInterceptor</name><environment>WebServices</environment><super>WebServices.SOAPMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.HPasswordResponderInterceptor</class-id><body>HPasswordResponderInterceptor implements SOAP header processing for the #password header. It is a support class for HTimeResponder.The #receivingRequestEnvelope:in:  method will process a request header on the server.</body></comment><class><name>TimeResponder</name><environment>WebServices</environment><super>WebServices.SOAPResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.TimeResponder</class-id><body>The class is Time responder.The service provider class for the server is TimeNowService. The server operations are described in the document/literal style -- see the WSDL schema in #wsdlSchema class method.	| client value |	"Find a server and add the responder to the server "	TimeResponder addToServer.	"Services invocation"	client := TimeClient new.	value := client timeNow.	"Deregister the responder from the server and flush cashed responders "	TimeResponder flushResponders.	value</body></comment><class><name>TimeClient</name><environment>WebServices</environment><super>WebServices.WsdlClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.TimeClient</class-id><body>TimeClient is a client class for making requestsTimeClient uses standard doc/literal style.	| client value |	"Find a server and add the responder to the server "	TimeResponder addToServer.	"Services invocation"	client := TimeClient new.	value := client timeNow.	"Deregister the responder from the server and flush cashed responders "	TimeResponder flushResponders.	value	| client value |	"Find a server and add the responder to the server "	TimeResponder addToServer.	"Services invocation"	client := TimeClient new.	value := client asTimestamp: Time now.	"Deregister the responder from the server and flush cashed responders "	TimeResponder flushResponders.	value</body></comment><class><name>TimeClientRPC</name><environment>WebServices</environment><super>WebServices.WsdlClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.TimeClientRPC</class-id><body>TimeClientRPC is a client class for making requests to a TimeServerRPC.TimeClientRPC uses RPC-style invocation.	| client value |	TimeResponderRPC addToServer.	client := TimeClientRPC new.	value := client timeNow.	TimeResponderRPC flushResponders.	valueFurther examples illustrating the use of this client can be found in the TimeResponderRPC class-side "script" protocol. </body></comment><class><name>Login</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>username password </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.Login</class-id><body>The class describes Login header .Instance Variables	password	&lt;String&gt;	password	username	&lt;String&gt;	username</body></comment><class><name>HTimeClient</name><environment>WebServices</environment><super>WebServices.WsdlClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.HTimeClient</class-id><body>HTimeClient is a client class for making requestsHTimeClient employs SOAP header processing (i.e., the prefix "H" stands for "Header").	| client value |	"Find a server and add the responder to the server "	WebServices.HTimeResponder addToServer.	"The password header is added to the message in HPasswordInterceptor"	"Services invocation"	WebServices.HTimeClient new timeNow inspect.	"Deregister the responder from the server and flush cashed responders "	WebServices.HTimeResponder flushResponders.</body></comment><class><name>LoginResponderInterceptor</name><environment>WebServices</environment><super>WebServices.SOAPMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.LoginResponderInterceptor</class-id><body>The Server Interceptor implements SOAP header processing for the #Login header. It is a support class for LoginTimeResponder.</body></comment><class><name>LoginTimeResponder</name><environment>WebServices</environment><super>WebServices.SOAPResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WebServicesTimeDemo</package></attributes></class><comment><class-id>WebServices.LoginTimeResponder</class-id><body>It is is a web services responder.The service provider class for the server is TimeNowService. The server operations are described in the document/literal style. See the WSDL schema in #wsdlSchema class method. The implementation allows the server to process the Soap headers that are  not described in the WSDL schema. The implementation will try to unmarshal all Soap headers that have registered marshalers. The unmarshaled Login header will be processed by the server in LoginResponderInterceptor. When the server is running, it may be accessed at:	http://localhost:4444/LoginTimeServiceTo add the responder to a server, evaluate:	LoginTimeResponder addToServer.To release responder, evaluate:	LoginTimeServer flushResponders.</body></comment><methods><class-id>WebServices.LoginTimeClient</class-id> <category>public api</category><body package="WebServicesTimeDemo">timeNow		^self executeSelector: #TimeNow args: #()</body></methods><methods><class-id>WebServices.LoginTimeClient</class-id> <category>initialization</category><body package="WebServicesTimeDemo">initializeRegistries	XMLObjectBinding loadFrom: self class x2oLoginSpec readStream.	^super initializeRegistries</body></methods><methods><class-id>WebServices.LoginTimeClient class</class-id> <category>accessing</category><body package="WebServicesTimeDemo">bindingName	^'LogingTimeNowService'</body><body package="WebServicesTimeDemo">bindingTargetNamespace	^'urn:vwservices/timeNowLoginService'</body><body package="WebServicesTimeDemo">processingPolicy		^ClientProcessingPolicy new 		interceptorClasses: (OrderedCollection with: LoginClientInterceptor) ; 		yourself</body><body package="WebServicesTimeDemo">serviceMap	^'&lt;ns:serviceMap xmlns:ns0="urn:vwservices/timeNowLoginService" xmlns:ns="urn:visualworks:serviceMap"&gt;	&lt;ns:serviceClass&gt;WebServices.TimeNowService&lt;/ns:serviceClass&gt;	&lt;ns:interface&gt;ns0:LogingTimeNowService&lt;/ns:interface&gt;	&lt;ns:operation name="TimeNow" selector="timeNow"/&gt;&lt;/ns:serviceMap&gt;'</body></methods><methods><class-id>WebServices.LoginTimeClient class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">wsdlSchema^'&lt;definitions targetNamespace="urn:vwservices/timeNowLoginService" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="urn:vwservices/timeNowLoginService"&gt;	&lt;types&gt;		&lt;schema targetNamespace="urn:vwservices/timeNowLoginService" elementFormDefault="qualified" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:vwservices/timeNowLoginService"&gt;			&lt;element name="TimeNowResponse"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="result" type="xsd:time"/&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;		&lt;/schema&gt;	&lt;/types&gt;	&lt;message name="TimeNowSoapIn"/&gt;	&lt;message name="TimeNowSoapOut"&gt;		&lt;part name="return" element="tns:TimeNowResponse"/&gt;	&lt;/message&gt;	&lt;portType name="LogingTimeNowService"&gt;		&lt;operation name="TimeNow"&gt;			&lt;input message="tns:TimeNowSoapIn"/&gt;			&lt;output message="tns:TimeNowSoapOut"/&gt;		&lt;/operation&gt;	&lt;/portType&gt;	&lt;binding name="LogingTimeNowService" type="tns:LogingTimeNowService"&gt;		&lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;		&lt;operation name="TimeNow"&gt;			&lt;soap:operation soapAction="urn:vwservices/timeNowLoginService#TimeNow" style="document"/&gt;			&lt;input&gt;				&lt;soap:body use="literal"/&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal"/&gt;			&lt;/output&gt;		&lt;/operation&gt;	&lt;/binding&gt;	&lt;service name="LogingTimeServer"&gt;		&lt;port name="LogingTimeNowService" binding="tns:LogingTimeNowService"&gt;			&lt;soap:address location="http://localhost:4444/LoginTimeService"/&gt;		&lt;/port&gt;	&lt;/service&gt;&lt;/definitions&gt;'</body><body package="WebServicesTimeDemo">x2oBinding^'&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding elementFormDefault="qualified" targetNamespace="urn:vwservices/timeNowLoginService" xmlns="urn:visualworks:VWSchemaBinding" xmlns:tns="urn:vwservices/timeNowLoginService" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;		&lt;element name="TimeNowResponse"&gt;			&lt;struct name="TimeNowResponse"&gt;				&lt;sequence&gt;					&lt;element name="result" ref="xsd:time"&gt;&lt;/element&gt;				&lt;/sequence&gt;			&lt;/struct&gt;		&lt;/element&gt;	&lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;'</body><body package="WebServicesTimeDemo">x2oLoginSpec	^'&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding targetNamespace="urn:LoginDescription" 	defaultClassNamespace="WebServices" 	xmlns="urn:visualworks:VWSchemaBinding" 	xmlns:xsd="http://www.w3.org/2001/XMLSchema"	xmlns:tns="urn:LoginDescription"&gt;		&lt;element name="Login" ref="tns:LoginType"/&gt;		&lt;object name="LoginType" smalltalkClass="Login"&gt;			&lt;sequence&gt;				&lt;element name="username" ref="xsd:string"/&gt;				&lt;element name="password" ref="xsd:string"/&gt;			&lt;/sequence&gt;		&lt;/object&gt;	&lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;'</body></methods><methods><class-id>WebServices.HPasswordClientInterceptor</class-id> <category>processing callbacks</category><body package="WebServicesTimeDemo">sendingRequest: aSOAPRequest in: aTransport	"Client can add the header entry to the request" 	"Add the #password header to the request "	(aSOAPRequest needsHeader: #password ) ifTrue: [		( aSOAPRequest headerFor: #password)			value: 'password'  ]</body></methods><methods><class-id>WebServices.TimeNowService</class-id> <category>public api</category><body package="WebServicesTimeDemo">asTimestamp: aTime	^aTime asTimestamp</body><body package="WebServicesTimeDemo">timeNow	^Time now</body></methods><methods><class-id>WebServices.TimeResponderRPC class</class-id> <category>script</category><body package="WebServicesTimeDemo">invokeServicesScript	"This code example illustrates how to invoke a web service using class TimeClient"	| client |	"Find a server and add the responder to the server "	TimeResponderRPC addToServer.	client := TimeClientRPC new.	"Services invocation"	client timeNow inspect.	(client asTimestamp: Time now) inspect.	"Deregister the responder from the server and flush cashed responders "	TimeResponderRPC flushResponders.</body><body package="WebServicesTimeDemo">wsdlClientScript	"This code example illustrates how to invoke a web service using the WsdlClient"	| client |	"Start the server"	TimeResponderRPC defaultStart.	"Create a client"	client := WsdlClient new loadFrom: 'http://localhost:4952/TimeNowServiceRPC?wsdl' asURI.	"The client can create a script to invoke services"	client createScript inspect.	"Services invocation"	(client executeSelector: #TimeNow args: Array new) inspect.	(client executeSelector: #AsTimestamp args: (Array with: Time now)) inspect.	"Stop the server"	TimeResponderRPC defaultStop.</body></methods><methods><class-id>WebServices.TimeResponderRPC class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">serviceMap	^TimeClientRPC serviceMap</body><body package="WebServicesTimeDemo">wsdlSchema	^TimeClientRPC wsdlSchema</body></methods><methods><class-id>WebServices.LoginClientInterceptor</class-id> <category>processing callbacks</category><body package="WebServicesTimeDemo">sendingRequest: aRequest in: aTransport	"Client: Using processing policy create and add Soap headers to the request "	| tag |	tag := NodeTag qualifier: '' ns: 'urn:LoginDescription' type: 'Login'.	( aRequest headerFor: tag)		value: ( Login new				username: 'username';				password: 'password';				yourself).</body></methods><methods><class-id>WebServices.HTimeResponder class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">serviceMap	^HTimeClient serviceMap</body><body package="WebServicesTimeDemo">wsdlSchema	^HTimeClient wsdlSchema</body><body package="WebServicesTimeDemo">x2oBinding	^HTimeClient x2oBinding</body></methods><methods><class-id>WebServices.HTimeResponder class</class-id> <category>script</category><body package="WebServicesTimeDemo">invokeServicesScript	"This code example illustrates how to invoke a web service using class HTimeClient"	"Find a server and add the responder to the server "	WebServices.HTimeResponder addToServer.	"The password header is added to the message in HPasswordInterceptor"	"Services invocation"	WebServices.HTimeClient new timeNow inspect.	"Deregister the responder from the server and flush cashed responders "	WebServices.HTimeResponder flushResponders.</body><body package="WebServicesTimeDemo">wsdlClientScript	"This code example illustrates how to invoke a web service using the WsdlClient"	| client |	"Find a server and add the responder to the server "	HTimeResponder addToServer.	"Create a Wsdl client "	client := WsdlClient url: 'http://localhost:4954/HTimeNowService?wsdl' asURI. 			"Add the password header to the request"		(client headerFor: #password) value: 'password'.	"Send the request and receive the reply"	(client  executeSelector: #TimeNow args: Array new) inspect.	"Deregister the responder from the server and flush cashed responders "	HTimeResponder flushResponders.</body></methods><methods><class-id>WebServices.HTimeResponder class</class-id> <category>accessing</category><body package="WebServicesTimeDemo">interceptors"Interceptors to process SOAP headers "	^OrderedCollection with: HPasswordResponderInterceptor</body></methods><methods><class-id>WebServices.HPasswordResponderInterceptor</class-id> <category>processing callbacks</category><body package="WebServicesTimeDemo">receivingRequestEnvelope: aSOAPRequest in: aTransport	"Server: Validate received request headers"	| headerEntry |	(aSOAPRequest needsHeader: #password ) ifFalse: [ Error raiseSignal: 'HTimeServer: The password is required' ].	headerEntry := (aSOAPRequest headerAt: #password ifAbsent: [ ^Error raiseSignal: 'HTimeServer:  The password header is missing in the request' ]) value.	headerEntry = 'password' 		ifTrue: [Dialog warn: 'HTimeServer: The password is accepted'.]		ifFalse: [ Error raiseSignal: 'HTimeServer: The password is not confirmed' ]</body></methods><methods><class-id>WebServices.TimeResponder class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">wsdlSchema	^TimeClient wsdlSchema</body><body package="WebServicesTimeDemo">x2oBinding	^TimeClient x2oBinding</body></methods><methods><class-id>WebServices.TimeResponder class</class-id> <category>script</category><body package="WebServicesTimeDemo">invokeServicesScript	"This code example illustrates how to invoke a web service using class TimeClient"	| client |	"Find a server and add the responder to the server "	TimeResponder addToServer.	"Create the client"	client := TimeClient new.	"WSDL schema request"	client wsdlSchemaRequest inspect.	"Services invocation"	client timeNow inspect.	(client asTimestamp: Time now) inspect.	"Deregister the responder from the server and flush cashed responders "	TimeResponder flushResponders.</body></methods><methods><class-id>WebServices.TimeResponder class</class-id> <category>accessing</category><body package="WebServicesTimeDemo">serviceMap	^TimeClient serviceMap</body></methods><methods><class-id>WebServices.TimeClient</class-id> <category>public api</category><body package="WebServicesTimeDemo">asTimestamp: aTime 		^self executeSelector: #AsTimestamp args: (Array with: aTime)</body><body package="WebServicesTimeDemo">timeNow		^self executeSelector: #TimeNow args: #()</body></methods><methods><class-id>WebServices.TimeClient class</class-id> <category>accessing</category><body package="WebServicesTimeDemo">bindingName	^'TimeNowService'</body><body package="WebServicesTimeDemo">bindingTargetNamespace	^'urn:vwservices/timeNowService'</body><body package="WebServicesTimeDemo">serviceMap	^'&lt;ns:serviceMap xmlns:ns0="urn:vwservices/timeNowService" xmlns:ns="urn:visualworks:serviceMap"&gt;	&lt;ns:serviceClass&gt;WebServices.TimeNowService&lt;/ns:serviceClass&gt;	&lt;ns:interface&gt;ns0:TimeNowService&lt;/ns:interface&gt;	&lt;ns:operation name="AsTimestamp" selector="asTimestamp:"/&gt;	&lt;ns:operation name="TimeNow" selector="timeNow"/&gt;&lt;/ns:serviceMap&gt;'</body></methods><methods><class-id>WebServices.TimeClient class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">wsdlSchema	^'&lt;definitions targetNamespace="urn:vwservices/timeNowService" xmlns:tns="urn:vwservices/timeNowService" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;	&lt;types&gt;		&lt;schema targetNamespace="urn:vwservices/timeNowService" elementFormDefault="qualified" xmlns:tns="urn:vwservices/timeNowService" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema"&gt;			&lt;element name="AsTimestamp"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="asTimestamp" type="xsd:time"/&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;			&lt;element name="AsTimestampResponse"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="result" type="xsd:dateTime"/&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;			&lt;element name="TimeNowResponse"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="result" type="xsd:time"/&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;		&lt;/schema&gt;	&lt;/types&gt;	&lt;message name="AsTimestampSoapIn"&gt;		&lt;part name="parameter" element="tns:AsTimestamp"/&gt;	&lt;/message&gt;	&lt;message name="AsTimestampSoapOut"&gt;		&lt;part name="return" element="tns:AsTimestampResponse"/&gt;	&lt;/message&gt;	&lt;message name="TimeNowSoapIn"/&gt;	&lt;message name="TimeNowSoapOut"&gt;		&lt;part name="return" element="tns:TimeNowResponse"/&gt;	&lt;/message&gt;	&lt;portType name="TimeNowService"&gt;		&lt;operation name="AsTimestamp"&gt;			&lt;input message="tns:AsTimestampSoapIn"/&gt;			&lt;output message="tns:AsTimestampSoapOut"/&gt;		&lt;/operation&gt;		&lt;operation name="TimeNow"&gt;			&lt;input message="tns:TimeNowSoapIn"/&gt;			&lt;output message="tns:TimeNowSoapOut"/&gt;		&lt;/operation&gt;	&lt;/portType&gt;	&lt;binding name="TimeNowService" type="tns:TimeNowService"&gt;		&lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;		&lt;operation name="AsTimestamp"&gt;			&lt;soap:operation soapAction="urn:vwservices/timeNowService#AsTimestamp" style="document"/&gt;			&lt;input&gt;				&lt;soap:body use="literal"/&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal"/&gt;			&lt;/output&gt;		&lt;/operation&gt;		&lt;operation name="TimeNow"&gt;			&lt;soap:operation soapAction="urn:vwservices/timeNowService#TimeNow" style="document"/&gt;			&lt;input&gt;				&lt;soap:body use="literal"/&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal"/&gt;			&lt;/output&gt;		&lt;/operation&gt;	&lt;/binding&gt;	&lt;service name="TimeServer"&gt;		&lt;port name="TimeNowService" binding="tns:TimeNowService"&gt;			&lt;soap:address location="http://localhost:4444/11/TimeNowService"/&gt;		&lt;/port&gt;	&lt;/service&gt;&lt;/definitions&gt;'</body><body package="WebServicesTimeDemo">x2oBinding^'&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding elementFormDefault="qualified" targetNamespace="urn:vwservices/timeNowService" xmlns="urn:visualworks:VWSchemaBinding" xmlns:tns="urn:vwservices/timeNowService" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;		&lt;element name="AsTimestamp"&gt;			&lt;struct name="AsTimestamp"&gt;				&lt;sequence&gt;					&lt;element name="asTimestamp" ref="xsd:time"&gt;&lt;/element&gt;				&lt;/sequence&gt;			&lt;/struct&gt;		&lt;/element&gt;		&lt;element name="AsTimestampResponse"&gt;			&lt;struct name="AsTimestampResponse"&gt;				&lt;sequence&gt;					&lt;element name="result" ref="xsd:dateTime"&gt;&lt;/element&gt;				&lt;/sequence&gt;			&lt;/struct&gt;		&lt;/element&gt;		&lt;element name="TimeNowResponse"&gt;			&lt;struct name="TimeNowResponse"&gt;				&lt;sequence&gt;					&lt;element name="result" ref="xsd:time"&gt;&lt;/element&gt;				&lt;/sequence&gt;			&lt;/struct&gt;		&lt;/element&gt;	&lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;'</body></methods><methods><class-id>WebServices.TimeClientRPC</class-id> <category>public api</category><body package="WebServicesTimeDemo">asTimestamp: aTime 		^self executeSelector: #AsTimestamp args: (Array with: aTime)</body><body package="WebServicesTimeDemo">timeNow		^self executeSelector: #TimeNow args: #()</body></methods><methods><class-id>WebServices.TimeClientRPC class</class-id> <category>accessing</category><body package="WebServicesTimeDemo">bindingName	^'TimeNowService'</body><body package="WebServicesTimeDemo">bindingTargetNamespace	^'urn:vwservices/timeNowServiceRPC'</body></methods><methods><class-id>WebServices.TimeClientRPC class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">serviceMap	^'&lt;ns:serviceMap xmlns:ns="urn:visualworks:serviceMap" xmlns:ns0="urn:vwservices/timeNowServiceRPC"&gt;	&lt;ns:serviceClass&gt;WebServices.TimeNowService&lt;/ns:serviceClass&gt;	&lt;ns:interface&gt;ns0:TimeNowService&lt;/ns:interface&gt;	&lt;ns:operation name="TimeNow" selector="timeNow"&gt;&lt;/ns:operation&gt;	&lt;ns:operation name="AsTimestamp" selector="asTimestamp:"&gt;&lt;/ns:operation&gt;&lt;/ns:serviceMap&gt;'</body><body package="WebServicesTimeDemo">wsdlSchema^'&lt;definitions targetNamespace="urn:vwservices/timeNowServiceRPC" xmlns:tns="urn:vwservices/timeNowServiceRPC" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;	&lt;message name="AsTimestampSoapIn"&gt;		&lt;part name="asTimestamp" type="xsd:time"/&gt;	&lt;/message&gt;	&lt;message name="AsTimestampSoapOut"&gt;		&lt;part name="return" type="xsd:dateTime"/&gt;	&lt;/message&gt;	&lt;message name="TimeNowSoapIn"/&gt;	&lt;message name="TimeNowSoapOut"&gt;		&lt;part name="return" type="xsd:time"/&gt;	&lt;/message&gt;	&lt;portType name="TimeNowService"&gt;		&lt;operation name="AsTimestamp" parameterOrder="asTimestamp"&gt;			&lt;input message="tns:AsTimestampSoapIn"/&gt;			&lt;output message="tns:AsTimestampSoapOut"/&gt;		&lt;/operation&gt;		&lt;operation name="TimeNow"&gt;			&lt;input message="tns:TimeNowSoapIn"/&gt;			&lt;output message="tns:TimeNowSoapOut"/&gt;		&lt;/operation&gt;	&lt;/portType&gt;	&lt;binding name="TimeNowService" type="tns:TimeNowService"&gt;		&lt;soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/&gt;		&lt;operation name="AsTimestamp"&gt;			&lt;soap:operation soapAction="urn:vwservices/timeNowServiceRPC#AsTimestamp" style="rpc"/&gt;			&lt;input&gt;				&lt;soap:body use="literal" namespace="urn:vwservices/timeNowServiceRPC"/&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal" namespace="urn:vwservices/timeNowServiceRPC"/&gt;			&lt;/output&gt;		&lt;/operation&gt;		&lt;operation name="TimeNow"&gt;			&lt;soap:operation soapAction="urn:vwservices/timeNowServiceRPC#TimeNow" style="rpc"/&gt;			&lt;input&gt;				&lt;soap:body use="literal" namespace="urn:vwservices/timeNowServiceRPC"/&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal" namespace="urn:vwservices/timeNowServiceRPC"/&gt;			&lt;/output&gt;		&lt;/operation&gt;	&lt;/binding&gt;	&lt;service name="WebServices.TimeServerRPC"&gt;		&lt;port name="TimeNowService" binding="tns:TimeNowService"&gt;			&lt;soap:address location="http://localhost:4444/TimeNowServiceRPC"/&gt;		&lt;/port&gt;	&lt;/service&gt;&lt;/definitions&gt;'</body></methods><methods><class-id>WebServices.Login</class-id> <category>accessing</category><body package="WebServicesTimeDemo">password	^password</body><body package="WebServicesTimeDemo">password: aString	password := aString</body><body package="WebServicesTimeDemo">username	^username</body><body package="WebServicesTimeDemo">username: aString	username := aString</body></methods><methods><class-id>WebServices.HTimeClient</class-id> <category>public api</category><body package="WebServicesTimeDemo">timeNow	^self executeSelector: #TimeNow args: #()</body></methods><methods><class-id>WebServices.HTimeClient class</class-id> <category>accessing</category><body package="WebServicesTimeDemo">bindingName	^'HTimeNowService'</body><body package="WebServicesTimeDemo">bindingTargetNamespace	^'urn:vwservices/timeNowServiceWithHeaders'</body><body package="WebServicesTimeDemo">processingPolicy	^ClientProcessingPolicy new 		interceptorClasses: (OrderedCollection with: HPasswordClientInterceptor) ; 		yourself</body><body package="WebServicesTimeDemo">serviceMap	 " WebServices.ServiceMap loadFrom: LoginTimeClient serviceMap readStream " 	^'&lt;ns:serviceMap xmlns:ns0="urn:vwservices/timeNowServiceWithHeaders" xmlns:ns="urn:visualworks:serviceMap"&gt;	&lt;ns:serviceClass&gt;WebServices.TimeNowService&lt;/ns:serviceClass&gt;	&lt;ns:interface&gt;ns0:HTimeNowService&lt;/ns:interface&gt;	&lt;ns:operation name="TimeNow" selector="timeNow"/&gt;&lt;/ns:serviceMap&gt;'</body></methods><methods><class-id>WebServices.HTimeClient class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">wsdlSchema^'&lt;definitions targetNamespace="urn:vwservices/timeNowServiceWithHeaders" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="urn:vwservices/timeNowServiceWithHeaders"&gt;	&lt;types&gt;		&lt;schema targetNamespace="urn:vwservices/timeNowServiceWithHeaders" elementFormDefault="qualified" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:vwservices/timeNowServiceWithHeaders"&gt;			&lt;element name="password" type="xsd:string"/&gt;			&lt;element name="TimeNowResponse"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="result" type="xsd:time"/&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;		&lt;/schema&gt;	&lt;/types&gt;	&lt;message name="TimeNowSoapIn"/&gt;	&lt;message name="TimeNowSoapOut"&gt;		&lt;part name="return" element="tns:TimeNowResponse"/&gt;	&lt;/message&gt;	&lt;message name="passwordHeader"&gt;		&lt;part name="password" element="tns:password"/&gt;	&lt;/message&gt;	&lt;portType name="HTimeNowService"&gt;		&lt;operation name="TimeNow"&gt;			&lt;input message="tns:TimeNowSoapIn"/&gt;			&lt;output message="tns:TimeNowSoapOut"/&gt;		&lt;/operation&gt;	&lt;/portType&gt;	&lt;binding name="HTimeNowService" type="tns:HTimeNowService"&gt;		&lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;		&lt;operation name="TimeNow"&gt;			&lt;soap:operation soapAction="urn:vwservices/timeNowServiceWithHeaders#TimeNow" style="document"/&gt;			&lt;input&gt;				&lt;soap:header use="literal" message="tns:passwordHeader" part="password"/&gt;				&lt;soap:body use="literal"/&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal"/&gt;			&lt;/output&gt;		&lt;/operation&gt;	&lt;/binding&gt;	&lt;service name="HTimeServer"&gt;		&lt;port name="HTimeNowService" binding="tns:HTimeNowService"&gt;			&lt;soap:address location="http://localhost:4444/HTimeNowService"/&gt;		&lt;/port&gt;	&lt;/service&gt;&lt;/definitions&gt;'</body><body package="WebServicesTimeDemo">x2oBinding^'&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding elementFormDefault="qualified" targetNamespace="urn:vwservices/timeNowServiceWithHeaders" xmlns="urn:visualworks:VWSchemaBinding" xmlns:tns="urn:vwservices/timeNowServiceWithHeaders" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;		&lt;element name="password" ref="xsd:string"&gt;&lt;/element&gt;		&lt;element name="TimeNowResponse"&gt;			&lt;struct name="TimeNowResponse"&gt;				&lt;sequence&gt;					&lt;element name="result" ref="xsd:time"&gt;&lt;/element&gt;				&lt;/sequence&gt;			&lt;/struct&gt;		&lt;/element&gt;	&lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;'</body></methods><methods><class-id>WebServices.LoginResponderInterceptor</class-id> <category>processing callbacks</category><body package="WebServicesTimeDemo">receivingRequestEnvelope: aSOAPRequest in: aTransport	"Server: Validate received request headers"	| headerEntry |	headerEntry := (aSOAPRequest headerAt: #Login ifAbsent: [ ^Error raiseSignal: 'missing login' ]) value.	( headerEntry username = 'username' and: [  headerEntry password = 'password' ]) 		ifTrue: [Dialog warn: 'LoginTimeServer: your username and password are accepted'.]		ifFalse: [ Error raiseSignal: 'not confirmed' ]</body></methods><methods><class-id>WebServices.LoginTimeResponder class</class-id> <category>wsdl schema</category><body package="WebServicesTimeDemo">wsdlSchema	^LoginTimeClient  wsdlSchema</body><body package="WebServicesTimeDemo">x2oBinding	^LoginTimeClient x2oBinding</body></methods><methods><class-id>WebServices.LoginTimeResponder class</class-id> <category>script</category><body package="WebServicesTimeDemo">invokeServicesScript	"This code example illustrates how to invoke a web service using class LoginTimeClient"	WebServices.LoginTimeResponder addToServer.	WebServices.LoginTimeClient new timeNow inspect.	WebServices.LoginTimeResponder flushResponders.</body></methods><methods><class-id>WebServices.LoginTimeResponder class</class-id> <category>accessing</category><body package="WebServicesTimeDemo">interceptors	^OrderedCollection with: LoginResponderInterceptor</body><body package="WebServicesTimeDemo">serviceMap	 " WebServices.ServiceMap loadFrom: MyServiceServer serviceMap readStream " 	^LoginTimeClient serviceMap</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SOAPResponder</name><environment>WebServices</environment><super>SiouX.NetHttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processingPolicy environmentWithHeaders binding service </inst-vars><class-inst-vars>defaultProcessingPolicyClass defaultEnvironmentWithHeaders responders </class-inst-vars><imports>			private Net.*			private SiouX.*			</imports><category></category><attributes><package>SOAP-Server</package></attributes></class><class><name>SOAPMessageInterceptor</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SOAP-Server</package></attributes></class><class><name>ClientMessageInterceptor</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSDLBinding</package></attributes></class><class><name>WsdlClient</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>port config wsdlUrl accessPoint header request response responseValue transport processingPolicy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLBinding</package></attributes></class></st-source>