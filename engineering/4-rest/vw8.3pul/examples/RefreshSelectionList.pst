<?xml version="1.0"?><st-source><!-- Name: RefreshSelectionList-ExamplesNotice: Copyright 2003-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel contains two examples illustrating the use of #refreshList:, which updates the list in a list widget but keeping the original selection(s). There are two examples, one for SelectionInList and another for MultiSelectionInList.DbIdentifier: bear73DbTrace: 427982DbUsername: smichaelDbVersion: 1.3PackageName: RefreshSelectionList-ExamplesParcel: #('RefreshSelectionList-Examples')PrintStringCache: (1.3,smichael)Version: 1.3Date: 5:06:46 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:46 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RefreshSelectListExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>removeSelect undoList targetList redoList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-List + Selection Updates</category><attributes><package>RefreshSelectionList-Examples</package></attributes></class><comment><class-id>Examples.RefreshSelectListExample</class-id><body>The RefreshSelectListExample application demonstrates how the contents of a single-select list widget may be refreshed without moving the selection visually during the transition as much as possible.  Its application interface includes a user editable supply list that determines the new content of a target list.  Items from the supply list may be selected for removal by the user and these changes may be later removed or restored to compare its affect on the target list.  The selection and its position visible in the targetList should remain unaltered unless the formerly selected item is missing in the new list.Instance Variables:	redoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value that might be removed later from the removeSelect list.	removeSelect	&lt;MultiSelectionInList&gt;	list model of class names used to set the targetList list.	targetList	&lt;SelectionInList&gt;	list model whose list but not selection and position is changed by removeSelect.	undoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value to be restored to the removeSelect list.</body></comment><class><name>RefreshMultiSelectListExample</name><environment>Examples</environment><super>Examples.RefreshSelectListExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-List + Selection Updates</category><attributes><package>RefreshSelectionList-Examples</package></attributes></class><comment><class-id>Examples.RefreshMultiSelectListExample</class-id><body>The RefreshMultiSelectListExample application demonstrates how the contents of a multiple selection list widget may be refreshed without moving selections visually during the transition as much as possible. Its application interface includes a user editable supply list that determines the new content of a target list.  Items from the supply list may be selected for removal by the user and these changes may be later removed or restored to compare its affect on the target list.  The selections and their position visible in the targetList should remain unaltered unless any formerly selected item is missing in the new list.Instance Variables:	redoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value that might be removed later from the removeSelect list.	removeSelect	&lt;MultiSelectionInList&gt;	list model of class names used to set the targetList list.	targetList	&lt;MultiSelectionInList&gt;	list model whose list but not selections and position is changed by removeSelect.	undoList	&lt;OrderedCollection of: OrderedCollection&gt;	 zero or more collections of items by index and value to be restored to the removeSelect list.</body></comment><methods><class-id>Examples.RefreshSelectListExample</class-id> <category>testing</category><body package="RefreshSelectionList-Examples">hasRedo	^redoList notEmpty</body><body package="RefreshSelectionList-Examples">hasSelections	^self removeSelect selectionIndexes notEmpty</body><body package="RefreshSelectionList-Examples">hasUndo	^undoList notEmpty</body></methods><methods><class-id>Examples.RefreshSelectListExample</class-id> <category>actions</category><body package="RefreshSelectionList-Examples">redoSelectionsRemove	| list |	list := self removeSelect list.	(undoList add: redoList removeLast) do: 			[:assoc | 			list remove: assoc value].	self targetList refreshList: list copy</body><body package="RefreshSelectionList-Examples">removeSelections	| list |	list := self removeSelect list.	undoList add:(self removeSelect selectionIndexes asSortedCollection asArray collect:[:index| index -&gt; (list at: index)]).	redoList := OrderedCollection new.	list removeAll: self removeSelect selections.	self targetList refreshList: list copy</body><body package="RefreshSelectionList-Examples">undoSelectionsRemove	| list |	list := self removeSelect list.	(redoList add: undoList removeLast) do: 			[:assoc | 			list add: assoc value beforeIndex: assoc key.			self removeSelect selectionIndexes add: assoc key].	self targetList refreshList: list copy</body></methods><methods><class-id>Examples.RefreshSelectListExample</class-id> <category>initialize-release</category><body package="RefreshSelectionList-Examples">initialize	super initialize.	undoList := OrderedCollection new.	redoList := OrderedCollection new.	removeSelect := MultiSelectionInList with: (Object allSubclasses asSortedCollection:[:a :b| a name &lt; b name]) asList.</body></methods><methods><class-id>Examples.RefreshSelectListExample</class-id> <category>aspects</category><body package="RefreshSelectionList-Examples">removeSelect	^removeSelect</body><body package="RefreshSelectionList-Examples">targetList	^targetList isNil		ifTrue:			[targetList := SelectionInList with: self removeSelect list copy]		ifFalse:			[targetList]</body></methods><methods><class-id>Examples.RefreshMultiSelectListExample</class-id> <category>aspects</category><body package="RefreshSelectionList-Examples">targetList	^targetList isNil		ifTrue:			[targetList := MultiSelectionInList with: self removeSelect list copy]		ifFalse:			[targetList]</body></methods><methods><class-id>Examples.RefreshSelectListExample class</class-id> <category>resources</category><body package="RefreshSelectionList-Examples">classMenu	"Tools.MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'remove' 				#enabled: false 				#value: #removeSelections 				#enablementSelector: #hasSelections ) 			#(#{UI.MenuItem} 				#rawLabel: 'undo remove' 				#enabled: false 				#value: #undoSelectionsRemove 				#enablementSelector: #hasUndo ) 			#(#{UI.MenuItem} 				#rawLabel: 'redo remove' 				#enabled: false 				#value: #redoSelectionsRemove 				#enablementSelector: #hasRedo ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.RefreshSelectListExample class</class-id> <category>interface specs</category><body package="RefreshSelectionList-Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Single Select List Refresh' 			#min: #(#{Core.Point} 322 491 ) 			#max: #(#{Core.Point} 1600 1200 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1235 1093 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 1 ) 					#name: #Label1 					#label: 'Any items removed here' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0.5 1 0 ) 					#name: #Label2 					#label: 'Must not change my select position' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -5 0.5 -10 1 ) 					#name: #List2 					#model: #removeSelect 					#menu: #classMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 25 0 -5 1 -10 1 ) 					#name: #List3 					#model: #targetList 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Examples.RefreshMultiSelectListExample class</class-id> <category>interface specs</category><body package="RefreshSelectionList-Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Multi Select List Refresh' 			#min: #(#{Core.Point} 322 491 ) 			#max: #(#{Core.Point} 1600 1200 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1235 1093 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 1 ) 					#name: #Label1 					#label: 'Any items removed here' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0.5 1 0 ) 					#name: #Label2 					#label: 'Must not change my select position' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -5 0.5 -10 1 ) 					#name: #List2 					#model: #removeSelect 					#menu: #classMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 25 0 -5 1 -10 1 ) 					#name: #List3 					#model: #targetList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>