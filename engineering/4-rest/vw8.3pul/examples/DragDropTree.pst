<?xml version="1.0"?><st-source><!-- Name: DragDrop-TreeView-ExampleNotice: Copyright 2005-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package demonstrates how to use drag-drop to sort, insert, and replace nodes and branches in a TreeView between one or more TreeDDExample instances.DbIdentifier: bear73DbTrace: 427986DbUsername: smichaelDbVersion: 8.0 - 1HideSource: falsePackageName: DragDrop-TreeView-ExampleParcel: #('DragDrop-TreeView-Example')ParcelName: DragDrop-TreeView-ExamplePrintStringCache: (8.0 - 1,smichael)SaveSource: trueVersion: 8.0 - 1Date: 5:06:47 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:47 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MockClassWrapper</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject children parent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Drag Drop-Examples</category><attributes><package>DragDrop-TreeView-Example</package></attributes></class><comment><class-id>Examples.MockClassWrapper</class-id><body>MockClassWrapper mocks a Class for appearence as a node in a sample TreeView heirarchyInstance Variables:	children	&lt;OrderedCollection | nil&gt;		collection of my children, if any, originally derived as subclasses of my subject class.	parent	&lt;MockClassWrapper&gt;		my parent in this heirarchy which may be distinct from my subject superclass.	subject	&lt;Class&gt;					subject class.</body></comment><class><name>TreeDDExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>treeList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Drag Drop-Examples</category><attributes><package>DragDrop-TreeView-Example</package></attributes></class><comment><class-id>Examples.TreeDDExample</class-id><body>TreeDDExample demonstrates sorting or inserting portions of a tree view heirarchy by a drag and drop of selected nodes.  To start, select 'Add new root' from the tree view menu to add 'Object' to the tree.  Press 'Spawn' to create a new instance of TreeDDExample. Any node dragged from the tree may be dropped to a new position in the tree or moved to another instance of TreeDDExample.Instance Variables:	treeList	&lt;MultiSelectionInTree&gt;	List model of sample heirarchy</body></comment><methods><class-id>Examples.MockClassWrapper</class-id> <category>comparing</category><body package="DragDrop-TreeView-Example">= aMockClassWrapper	^subject = aMockClassWrapper subject</body><body package="DragDrop-TreeView-Example">hash	^subject hash</body></methods><methods><class-id>Examples.MockClassWrapper</class-id> <category>adding</category><body package="DragDrop-TreeView-Example">addChild: aMockClassWrapper	aMockClassWrapper parent: self</body><body package="DragDrop-TreeView-Example">addChildren: anArray	anArray do:[:aMockClassWrapper| aMockClassWrapper parent: self]</body><body package="DragDrop-TreeView-Example">addChildren: anArray before: aMockClassWrapper 	anArray do: [:wrapper | wrapper parent: self insertBefore: aMockClassWrapper]</body></methods><methods><class-id>Examples.MockClassWrapper</class-id> <category>accessing</category><body package="DragDrop-TreeView-Example">children	^children isNil 		ifTrue: 			[children := subject ifNil: [OrderedCollection new]						ifNotNil: 							[subject subclasses asOrderedCollection 								collect: [:cls | MockClassWrapper on: cls parent: self]]]		ifFalse: [children]</body><body package="DragDrop-TreeView-Example">parent	^parent</body><body package="DragDrop-TreeView-Example">parent: aMockClassWrapper 	| parentChildren |	parent ifNotNil: [parent children remove: self ifAbsent: []].	parent := aMockClassWrapper.	parent ifNotNil: 			[((parentChildren := parent children) includes: self) 				ifFalse: [parentChildren add: self]]</body><body package="DragDrop-TreeView-Example">parent: aMockClassWrapper insertBefore: aMockChildWrapper 	| parentChildren |	parent isNil ifFalse: [parent children remove: self ifAbsent: []].	parent := aMockClassWrapper.	((parentChildren := parent children) includes: self) 		ifFalse: 			[parentChildren add: self				beforeIndex: (parentChildren indexOf: aMockChildWrapper						ifAbsent: [parentChildren size])]</body><body package="DragDrop-TreeView-Example">subclasses	^self children</body><body package="DragDrop-TreeView-Example">subject	^subject</body><body package="DragDrop-TreeView-Example">subject: aValue	subject := aValue</body><body package="DragDrop-TreeView-Example">subject: aValue parent: aMockClassWrapper	subject := aValue.	parent := aMockClassWrapper</body></methods><methods><class-id>Examples.MockClassWrapper</class-id> <category>printing</category><body package="DragDrop-TreeView-Example">displayString	^subject name</body></methods><methods><class-id>Examples.MockClassWrapper</class-id> <category>copying</category><body package="DragDrop-TreeView-Example">postCopy		super postCopy.	children := children ifNotNil:[self children collect:[:each| each copy]].</body></methods><methods><class-id>Examples.MockClassWrapper class</class-id> <category>instance creation</category><body package="DragDrop-TreeView-Example">on: aClass	^self new subject: aClass</body><body package="DragDrop-TreeView-Example">on: aClass parent: aParentClassWrapper	^self new subject: aClass parent: aParentClassWrapper</body></methods><methods><class-id>Examples.TreeDDExample</class-id> <category>actions</category><body package="DragDrop-TreeView-Example">addObject	self treeList list root addChild: (MockClassWrapper on: Object).	self treeList list refreshRoot</body><body package="DragDrop-TreeView-Example">deleteSelection	self treeList selectionDo: [:item | item parent: nil].	self treeList tree removeAll: (self treeList selectionIndexes 				collect: [:each | self treeList tree wrapperAt: each])</body><body package="DragDrop-TreeView-Example">spawn	self class open</body></methods><methods><class-id>Examples.TreeDDExample</class-id> <category>drag and drop</category><body package="DragDrop-TreeView-Example">doDragTree: aController	"Drag the currently selected change. Include all available information so that the drop target can use whatever it needs."	| data |	data := DragDropData new.	data contextWindow: builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: self treeList.	(DragDropManager			withDropSource: DropSource new			withData: data) doDragDrop</body><body package="DragDrop-TreeView-Example">dragEnterTree: aDragContext	"A drag has entered a target TreeView. If the receiver is happy to accept a drag then fill-in the appropriate data and answer that dragging should continue."	(aDragContext data contextApplication isKindOf: self class) ifFalse: [^#dropEffectNone].	aDragContext dropTarget 		clientData: (self initialDropState: (self widgetAt:#TreeView1)).	^#dropEffectMove</body><body package="DragDrop-TreeView-Example">dragLeave: aDragContext	"A drag has left the tree. If the drag contains a change, we must restore the tree state"	self == aDragContext data contextApplication		ifTrue:			[self restoreListStateFrom: aDragContext dropTarget clientData.			aDragContext dropTarget clientData: nil].	^#dropEffectNone</body><body package="DragDrop-TreeView-Example">dragOver: aDragContext 	"A drag is over the target TreeView.  Enable a drop if the drag originated in this application but don't drop a parent to a child or allow coexisting copies of a sibling"	^(aDragContext data contextApplication isKindOf: self class)		ifTrue: 			[| targetView treeModel targetNode targetIndex |			targetView := self widgetAt:#TreeView1.			targetView showInsertReplaceDropFeedbackIn: aDragContext				allowScrolling: true.			treeModel := targetView model value.			targetIndex := targetView targetIndex.			targetIndex &lt; 1 				ifFalse: 					[targetNode := self targetAt: targetIndex inTree: treeModel.					"Forbid any ancestor from being dropped on a child"					(self 						dragContext: aDragContext						toTree: treeModel						includesCopyOf: targetNode) ifTrue: [^#dropEffectNone].					"Forbid adding copies of siblings"  					(self 						dragContext: aDragContext						toTree: treeModel						includesAncestorsOf: targetNode) ifTrue: [^#dropEffectNone]].			aDragContext shiftDown 				ifTrue: 					["Copy"					#dropEffectCopy]				ifFalse: 					["Replace"					#dropEffectMove]]		ifFalse: [#dropEffectNone]</body><body package="DragDrop-TreeView-Example">dragOverTree: aDragContext 	"A drag is over the target TreeView.  Enable a drop if the drag originated in this application but don't drop a parent to a child or allow coexisting copies of a sibling"	^(aDragContext data contextApplication isKindOf: self class)		ifTrue: 			[| targetView treeModel targetNode targetIndex |			targetView := self widgetAt:#TreeView1.			targetView showInsertReplaceDropFeedbackIn: aDragContext				allowScrolling: true.			treeModel := targetView model value.			targetIndex := targetView targetIndex.			targetIndex &lt; 1 				ifFalse: 					[targetNode := self targetAt: targetIndex inTree: treeModel.					"Forbid any ancestor from being dropped on a child"					(self 						dragContext: aDragContext						toTree: treeModel						includesCopyOf: targetNode) ifTrue: [^#dropEffectNone].					"Forbid adding copies of siblings"  					(self 						dragContext: aDragContext						toTree: treeModel						includesAncestorsOf: targetNode) ifTrue: [^#dropEffectNone]].			aDragContext shiftDown 				ifTrue: 					["Copy"					#dropEffectCopy]				ifFalse: 					["Replace"					#dropEffectMove]]		ifFalse: [#dropEffectNone]</body><body package="DragDrop-TreeView-Example">dropTree: aDragContext 	"A drop has occurred on the target TreeView.  Reorder the drop target and drag source tree appropriately."	| items targetIndex dropTree source sourceView targetView |	targetView := self widgetAt:#TreeView1.	sourceView := aDragContext data contextWidget.	source := aDragContext data clientData.	dropTree := targetView model value.	targetIndex := targetView targetIndex.	aDragContext shiftDown 		ifTrue: 			["Copy items from source and leave"			items := source selections collect: [:each | each copy]]		ifFalse: 			["Move items from source"			| selectionIndexes |			selectionIndexes := source selectionIndexes.			items := source selections.			targetView = sourceView 				ifTrue: 					[targetIndex := selectionIndexes inject: targetIndex								into: 									[:sofar :each | 									each &lt; sofar 										ifTrue: 											[sofar - 1 												- ((dropTree wrapperAt: each) numberOfOpenChildren min: sofar - each)]										ifFalse: [sofar]]].			source tree 				removeAll: (selectionIndexes collect: [:each | source tree wrapperAt: each])].	self 		dropAll: items		atIndex: targetIndex		inTree: dropTree.	self treeList selections: items.	^#dropEffectNone</body><body package="DragDrop-TreeView-Example">wantToDragTree: treeController	"Drag any object"	^true</body></methods><methods><class-id>Examples.TreeDDExample</class-id> <category>private</category><body package="DragDrop-TreeView-Example">dragContext: aDragContext toTree: aTreeModel includesAncestorsOf: aTarget 	"Answer true if any ancestor of aTarget attempts to be dropped on aTarget"	| targetParents |	targetParents := aTreeModel allParentsFor: aTarget.	aDragContext data clientData 		selectionDo: [:any | (targetParents includes: any) ifTrue: [^true]].	^false</body><body package="DragDrop-TreeView-Example">dragContext: aDragContext toTree: targetTreeModel includesCopyOf: aTarget 	"Answer true if aTarget is a copy or has children with a copy of any dragged items"	| sourceTreeModel |	sourceTreeModel := aDragContext data contextWidget model value.	targetTreeModel = sourceTreeModel 		ifFalse: 			[| siblings |			siblings := aTarget children.			aDragContext data clientData 				selectionDo: [:any | (aTarget = any or: [siblings includes: any]) ifTrue: [^true]]].	^false</body><body package="DragDrop-TreeView-Example">dropAll: aCollection atIndex: targetIndex inTree: aTreeModel 	"Add all dragged items as children to the target at position targetIndex"	| target |	target := self targetAt: targetIndex inTree: aTreeModel.	targetIndex isInteger 		ifTrue: 			["Add dragged items as children to target node"			target addChildren: aCollection]		ifFalse: 			["Insert dragged items as children in the position dropped"			targetIndex &gt; aTreeModel size 				ifTrue: [target addChildren: aCollection]				ifFalse: 					[target addChildren: aCollection						before: (aTreeModel at: targetIndex ceiling)]].	aTreeModel refresh: target</body><body package="DragDrop-TreeView-Example">initialDropState: aTreeView 	"Answer the initial state of aTreeView when a drag has begun within its bounds. The state will be used to re-establish the appearance of aTreeView when a drag leaves."	| dict |	dict := IdentityDictionary new.	dict at: #view put: aTreeView.	dict at: #targetIndex put: aTreeView targetIndex.	dict at: #hasFocus put: aTreeView hasFocus.	aTreeView hasFocus: true.	^dict</body><body package="DragDrop-TreeView-Example">restoreListStateFrom: aDictionary 	"Reset the state of the tree when a drag has left its bounds."	| dragContextView |	dragContextView := aDictionary at: #view.	dragContextView targetIndex: (aDictionary at: #targetIndex).	dragContextView hasFocus: (aDictionary at: #hasFocus)</body><body package="DragDrop-TreeView-Example">targetAt: targetIndex inTree: aTreeModel 	"If targetIndex is: 		1. Less than 1 or greater than aTreeModel size then answer the tree root.		2. A whole number then answer the item at this index position in aTreeModel.		3. A multiple of (1/2) then answer the parent of the item next in sequence."	| target |	target := (targetIndex &lt; 1 or: [targetIndex &gt; aTreeModel size]) 				ifTrue: [aTreeModel root]				ifFalse: [aTreeModel at: targetIndex ceiling].	targetIndex isInteger 		ifFalse: [target := target parent ifNil: [aTreeModel root]].	^target</body></methods><methods><class-id>Examples.TreeDDExample</class-id> <category>aspects</category><body package="DragDrop-TreeView-Example">hasSelection	^self treeList selectionIndexes notEmpty</body><body package="DragDrop-TreeView-Example">treeList	^treeList isNil		ifTrue:			[treeList := MultiSelectionInTree new]		ifFalse:			[treeList]</body></methods><methods><class-id>Examples.TreeDDExample</class-id> <category>interface opening</category><body package="DragDrop-TreeView-Example">postBuildWith: aBuilder	self treeList list		root: (MockClassWrapper on: nil)		displayIt: false.</body></methods><methods><class-id>Examples.TreeDDExample class</class-id> <category>resources</category><body package="DragDrop-TreeView-Example">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Tree' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Add new root' 							#value: #addObject ) 						#(#{UI.MenuItem} 							#rawLabel: 'Delete selection' 							#enabled: false 							#value: #deleteSelection 							#enablementSelector: #hasSelection ) ) #(2 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body><body package="DragDrop-TreeView-Example">treeMenu	"Tools.MenuEditor new openOnClass: self andSelector: #treeMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Add new root' 				#value: #addObject ) 			#(#{UI.MenuItem} 				#rawLabel: 'Delete selection' 				#enabled: false 				#value: #deleteSelection 				#enablementSelector: #hasSelection ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.TreeDDExample class</class-id> <category>interface specs</category><body package="DragDrop-TreeView-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #cascade #openType #advanced ) 			#label: 'Drag and Drop Class Name Hierarchy' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1600 1200 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 975 868 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDragTree: #dragEnterSelector 						#dragEnterTree: #dragOverSelector 						#dragOverTree: #dragStartSelector 						#doDragTree: #dropSelector 						#dropTree: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 -40 1 ) 					#name: #TreeView1 					#model: #treeList 					#helpText: 'Reorder by drag/drop ' 					#menu: #treeMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight 					#useIcons: #folder 					#rootExpander: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -10 1 -10 1 1 1 ) 					#name: #ActionButton1 					#model: #spawn 					#label: 'Spawn' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 11 0 -32 1 ) 					#name: #Label1 					#label: 'Select ''Add new root'' from the tree menu to start' ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>