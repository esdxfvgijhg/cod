<?xml version="1.0"?><st-source><!-- Name: SiouX-Servlet-DemoNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: A simple event calendar web application to illustrate the use of SiouX servlets and Glorp.OverviewThe Calendar application provides a web interface that displays a month calendar allowing you to view, add, and edit a collection of events, and a Glorp interface for persisting the events in a database.UsageThe Calendar application requires that you first load the SiouX-Servlet package. With this package loaded, you need to create and configure a Web server. The default site  can be set using default configuration files from Web Application Server (Legacy) component. If the component is installed configure the default site as:	SiouX.WebSiteConfiguration configureFromFile: '$(VISUALWORKS)/web/', WebSiteConfiguration defaultConfigFileName.	SiouX.WebSiteConfiguration defaultSite configParameters at: 'environment' put: 'Calendar'.	(SiouX.Server id: 'Calendar')		addResponder: SiouX.ServletResponder new;		listenOn: 9009 for: SiouX.HttpConnection;		"debugging: true;"		"logging: true;"		start.To open the Calendar, use this URL:	http://localhost:9009/servlet/CalendarServletThe Event Calendar application appears in the web browser, showing the current month. To enable the application to save events in a database, you must set its configuration by clicking on the "Settings" button (upper right corner of the window) and filling in all appropriate options. To set the database configuration, click on "Accept". The Event Calendar will test the specified database connection and report success or failure.ImplementationEvent objects are represented using the domain class CalendarEvent. The application model CalendarApplication coordinates the database with the web UI. Its API for the web UI may be found in the 'actions' protocol. The descriptor class CalendarDescriptor contains the Glorp mapping metadata. The class CalendarServlet provides the main web UI, with the other servlet classes (its subclasses) providing support functions.DbIdentifier: bear73DbTrace: 492793DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'Glorp' '') #(#any 'SiouX-Servlet' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SiouX-Servlet-DemoParcel: #('SiouX-Servlet-Demo')PrerequisiteDescriptions: #(#(#name 'Glorp' #componentType #bundle) #(#name 'SiouX-Servlet' #componentType #package))PrerequisiteParcels: #(#('Glorp' '') #('SiouX-Servlet' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 1:19:07 PM July 14, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jul17.2) of July 14, 2017 on July 14, 2017 at 1:19:07 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Calendar</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></name-space><class><name>CalendarServlet</name><environment>Calendar</environment><super>SiouX.SingleThreadModelServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarServlet</class-id><body>CalendarServlet is a simple Event Calendar web application.DescriptionThis class is the main entry point for a simple event calendar application. It provides the presentation layer of a web UI. The actual nuts and bolts of the Event Calender and the interface to its persistence mechanism may be found in class CalendarApplication.The Event Calendar UI is presented as a single web page that contains different parts: below the title bar, a navigator is provided to jump to a specific month and year. The navigator also includes a button to access the application settings (e.g., database connection settings). Below this navigator, there are two regions, side by side. On the left, the currently selected month is displayed, with days highlighted that include events. On the right, a list appears, showing the events for a particular day. As you might expect, by clicking on a highlighted day in the month display, you can see details about the events for that day. By clicking on "New Event" you can add new events, and by clicking on "Edit" or "Delete" you can modify or remove events.UsageTo launch the Calendar application in a web browser, open this URL:	http://localhost:8008/servlet/CalendarServletTo persist events, you must configure the database connection using the "Settings" panel. For complete usage instructions, refer to the package comment.ImplementationThe Event Calendar UI is designed such that the main servlet provides a basic page template, including CSS and JavaScript definitions, while simpler, 'auxillary' servlets (in fact, they are subclasses) are used to generate individual portions of the UI.For example, the month display is generated by CalendarMonthServlet, and the events display by CalendarEventsServlet. The Event Calendar uses Ajax to dynamically assemble portions of the DOM. In this way the design is modular and dynamic refresh is more flexible. The various servlets also handle input from the client, either via query or form parameters.When the CalendarServlet is first invoked, an onLoad action in the &lt;body&gt; tag of the HTML is used to in turn invoke CalendarMonthServlet and CalendarEventsServlet. These servlets return chunks of HTML that are inserted into the page DOM using some JavaScript. These two sections of the DOM may be updated independently, without a full page refresh. When the client adds or removes an event, these sections are refreshed by bits of JavaScript (provided by CalendarJavaScriptServlet).</body></comment><class><name>CalendarCssServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarCssServlet</class-id><body>A simple servlet to return CSS definitions.</body></comment><class><name>CalendarEditEventServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarEditEventServlet</class-id><body>CalendarEditEventServlet provides an interface to modify events in the calendar.DescriptionThis servlet is subordinate to the CalendarServlet, in fact a subclass. It is intended to be invoked via Ajax, returning HTML fragments that are inserted in a page DOM. For an overview of the relationship between the various servlets in the Calendar application, see the class comment for CalendarServlet.CalendarEditEventServlet has two modes of operation. When it receives a GET request, it simply returns a template to edit the specified event. When it receives a POST request, it processes the form parameters and actually updates the event. The event to update is specified using a parameter called 'id'.</body></comment><class><name>CalendarSettingsServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarSettingsServlet</class-id><body>CalendarSettingsServlet provides an interface to set the database confirguration for the calendar application.DescriptionThis servlet is subordinate to the CalendarServlet, in fact a subclass. It is intended to be invoked via Ajax, returning HTML fragments that are inserted in a page DOM. For an overview of the relationship between the various servlets in the Calendar application, see the class comment for CalendarServlet.CalendarSettingsServlet has two modes of operation. When it receives a GET request, it simply returns a form containing the current settings. When it receives a POST request, it processes the form parameters and updates the settings. Normally, GET is sent first to obtain the current parameters. After these have been edited to include the database configuration parameters, the form is returned via POST, this servlet parses the incoming form data, and updates the login object associated with the application (i.e., uses CalendarApplication class&gt;&gt;login:).</body></comment><class><name>CalendarApplication</name><environment>Calendar</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Glorp.*			</imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarApplication</class-id><body>CalendarApplication is the application model for the Event Calendar.DescriptionThis application class contains the logic to maintain a simple event calendar using Glorp. The events persisted in the database are instances of class CalendarEvent. The methods in the 'actions' protocol are a simple API for queries, inserting, removing, and updating events in the calendar.</body></comment><class><name>CalendarEventsServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarEventsServlet</class-id><body>CalendarEventsServlet shows the events on a specified date.DescriptionThis servlet is subordinate to the CalendarServlet, in fact a subclass. It is intended to be invoked via Ajax, returning HTML fragments that are inserted in a page DOM. For an overview of the relationship between the various servlets in the Calendar application, see the class comment for CalendarServlet.The CalendarEvents servlet shows events for a single day, as specified by the query parameters 'day', 'month', and 'year'. It provides a button to add new events, and links to edit or remove existing events.Instance Variables:	targetDate		&lt;Date&gt;		Date specified by client</body></comment><class><name>CalendarAddEventServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarAddEventServlet</class-id><body>CalendarAddEventServlet provides an interface to add new events to the calendar.DescriptionThis servlet is subordinate to the CalendarServlet, in fact a subclass. It is intended to be invoked via Ajax, returning HTML fragments that are inserted in a page DOM. For an overview of the relationship between the various servlets in the Calendar application, see the class comment for CalendarServlet.CalendarAddEventServlet has two modes of operation. When it receives a GET request, it simply returns a template to create a new event. When it receives a POST request, it processes the form parameters and actually creates a new event.</body></comment><class><name>CalendarEvent</name><environment>Calendar</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id title startingTime endingTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarEvent</class-id><body>CalendarEvent is a domain class representing a single event.Instance Variables:	id				&lt;Number&gt;			Primary key for this object	title				&lt;String&gt;			Title of this event	startingTime	&lt;Timestamp&gt;		Starting Timestamp for this event	endingTime	&lt;Timestamp&gt;		Ending Timestamp for this event</body></comment><class><name>CalendarJavaScriptServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarJavaScriptServlet</class-id><body>A simple servlet to return JavaScript definitions.</body></comment><class><name>CalendarMonthServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarMonthServlet</class-id><body>CalendarEventsServlet shows the events on a specified date.DescriptionThis servlet is subordinate to the CalendarServlet, in fact a subclass. It is intended to be invoked via Ajax, returning HTML fragments that are inserted in a page DOM. For an overview of the relationship between the various servlets in the Calendar application, see the class comment for CalendarServlet.CalendarEventsServlet has two modes of operation. When it receives a request (either GET or POST) that includes the parameters 'month' and 'year', it returns an HTML div containing the specified month. If no parameters are provided, it defaults to the current month.Instance Variables:	targetDate		&lt;Date&gt;		Date specified by client</body></comment><class><name>CalendarRemoveEventServlet</name><environment>Calendar</environment><super>Calendar.CalendarServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarRemoveEventServlet</class-id><body>CalendarRemoveEventServlet provides an interface to remove events from the calendar.DescriptionThis servlet is subordinate to the CalendarServlet, in fact a subclass. It is intended to be invoked via Ajax, returning HTML fragments that are inserted in a page DOM. For an overview of the relationship between the various servlets in the Calendar application, see the class comment for CalendarServlet.CalendarRemoveEventServlet has two modes of operation. When it receives a GET request, it simply returns a template to confirm removal of the specified event. When it receives a POST request, it actually removes the event. The event to remove is specified using a parameter called 'id'.</body></comment><class><name>CalendarEventDescriptor</name><environment>Calendar</environment><super>Glorp.DescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Glorp.*			</imports><category></category><attributes><package>SiouX-Servlet-Demo</package></attributes></class><comment><class-id>Calendar.CalendarEventDescriptor</class-id><body>CalendarEventDescriptor is the Glorp descriptor class for the CalendarApplication project.</body></comment><shared-variable><name>Login</name><environment>Calendar.CalendarApplication</environment><private>false</private><constant>false</constant><category>resources</category><attributes><package>SiouX-Servlet-Demo</package></attributes></shared-variable><methods><class-id>Calendar.CalendarServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	self		writePageHeader;		writeHead;		writeBodyHeader;		writeBody;		writeBodyTrailer;		writePageTrailer.</body></methods><methods><class-id>Calendar.CalendarServlet</class-id> <category>private-error handling</category><body package="SiouX-Servlet-Demo">returnError: anException	"Set the HTTP return code to indicate an error, and return the &lt;Exception&gt; messageText as an error."	"This is used when invoking server code via Ajax."	| exStream |	exStream := (String new: 24) writeStream.	exStream nextPutAll: anException class name.	(anException messageText isNil or: [anException messageText isEmpty])		ifFalse: [exStream nextPutAll: ': ' , anException messageText].	response		reset;		sendError: 400;		write: exStream contents</body></methods><methods><class-id>Calendar.CalendarServlet</class-id> <category>private-header writing</category><body package="SiouX-Servlet-Demo">writeCSSHeader	"Write the CSS definitions used by this servlet."	response		cr;		write: '&lt;link rel="stylesheet" type="text/css" href="/servlet/CalendarCssServlet"&gt;&lt;/link&gt;';		cr</body><body package="SiouX-Servlet-Demo">writeHead	"Write the head of the page to the response stream."	response		write: '&lt;head&gt;'; cr;		write: '&lt;title&gt;Event Calendar&lt;/title&gt;'; cr.	self writeCSSHeader.	self writeJavaScriptHeader.	response		write: '&lt;/head&gt;'; cr</body><body package="SiouX-Servlet-Demo">writeJavaScriptHeader	"Write the JavaScript code used by this servlet."	response		cr;		write: '&lt;script type="text/javascript" src="/servlet/CalendarJavaScriptServlet"&gt;&lt;/script&gt;';		cr</body></methods><methods><class-id>Calendar.CalendarServlet</class-id> <category>private-body writing</category><body package="SiouX-Servlet-Demo">writeBody	"Write the body of the page to the response stream."		response write: '&lt;div id="wrap"&gt;'; cr.	self		writeHeaderDiv;		writeBodyNavigator;		writeMainDiv;		writeEventsDiv;		writeFooterDiv.	response write: '&lt;/div&gt;'; cr</body><body package="SiouX-Servlet-Demo">writeBodyHeader	"Write the main body tag to the response stream. Include onload actions to load parts of the page."		response write: '&lt;body onload="getAndUpdate(''servlet/CalendarMonthServlet'', ''mainMonth'', ''mainError''); getAndUpdate(''servlet/CalendarEventsServlet'', ''events'', ''mainError''); return false;"&gt;'; cr</body><body package="SiouX-Servlet-Demo">writeBodyNavigator	"Write the calendar navigator to the response stream. A month/Year selector appears on the left; and a settings button on the right."	response		write: '	&lt;div id="nav"&gt;		&lt;form action=""&gt;		&lt;table style="width: 100%;"&gt;			&lt;tr&gt;&lt;td align="left"&gt;			Select Month and Year:';		write: self monthSelector;		write: self yearSelector;		write: '			&lt;input name="submit" value="Go" type="button" onclick="postAndUpdate(''servlet/CalendarMonthServlet'', this.form, ''mainMonth'', ''mainError''); return false"&gt;&lt;/td&gt;			&lt;td align="right"&gt;&lt;input name="settings" value="Settings" type="button" onclick="getAndUpdate(''servlet/CalendarSettingsServlet'', ''mainDetails'', ''mainError''); return false;"&gt;&lt;/td&gt;&lt;/tr&gt;		&lt;/table&gt;		&lt;/form&gt;	&lt;/div&gt;'</body><body package="SiouX-Servlet-Demo">writeBodyTrailer		response write: '&lt;/body&gt;'</body><body package="SiouX-Servlet-Demo">writeEventsDiv	"Write the right-hand column div to the response stream."		response write: '	&lt;div id="events"&gt;&lt;/div&gt;'; cr</body><body package="SiouX-Servlet-Demo">writeFooterDiv	"Write the footer of the page to the response stream."		response write: '	&lt;div id="footer"&gt;&lt;/div&gt;'</body><body package="SiouX-Servlet-Demo">writeHeaderDiv	"Write the header of the body to the response stream."		response write: '	&lt;div id="header"&gt;&lt;a href="/servlet/CalendarServlet"&gt;&lt;h2&gt;Event Calendar&lt;/h2&gt;&lt;/a&gt;&lt;/div&gt;	'.</body><body package="SiouX-Servlet-Demo">writeMainDiv	"Write the main division of the page to the response stream."	response write: '	&lt;div id="main"&gt;	&lt;div id="mainMonth"&gt;&lt;/div&gt;	&lt;div id="spacer"&gt;&amp;nbsp;&lt;/div&gt;	&lt;div id="mainDetails"&gt;&lt;/div&gt;	&lt;div id="mainError"&gt;&lt;/div&gt;	&lt;/div&gt;'</body></methods><methods><class-id>Calendar.CalendarServlet</class-id> <category>private</category><body package="SiouX-Servlet-Demo">monthSelector	"Return a &lt;String&gt; containing the HTML month selector."	| currentMonth stream m |	currentMonth := Date today monthName asString.	stream := (String new: 64) writeStream.	stream nextPutAll: '			&lt;select name="month"&gt;'; cr.	Date.MonthNames do:		[:mSymbol |		m := mSymbol asString.		stream nextPutAll: '				&lt;option value="' , m , '"'.		m = currentMonth ifTrue: [stream nextPutAll: ' selected'].		stream nextPut: $&gt;; nextPutAll: m; nextPutAll: '&lt;/option&gt;'; cr].	stream nextPutAll: '			&lt;/select&gt;'; cr.	^stream contents</body><body package="SiouX-Servlet-Demo">yearSelector	"Return a &lt;String&gt; containing the HTML year selector."	| years currentYear stream yearString |	years := #(2007 2008 2009 2010 2011 2012 2013 2014 2015).	currentYear := Date today year printString.	stream := (String new: 64) writeStream.	stream nextPutAll: '			&lt;select name="year"&gt;'; cr.	1 to: years size do:		[:i |		yearString := (years at: i ) printString.		stream nextPutAll: '				&lt;option value="' , yearString , '"'.		yearString = currentYear ifTrue: [stream nextPutAll: ' selected'].		stream nextPut: $&gt;; nextPutAll: yearString; nextPutAll: '&lt;/option&gt;'; cr].	stream nextPutAll: '			&lt;/select&gt;'; cr.	^stream contents</body></methods><methods><class-id>Calendar.CalendarServlet</class-id> <category>private- page writing</category><body package="SiouX-Servlet-Demo">writePageHeader	"Write the main html tag to the response stream."	response		write: '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;'; cr;		write: '&lt;html&gt;'; cr</body><body package="SiouX-Servlet-Demo">writePageTrailer		response cr; write: '&lt;/html&gt;'</body></methods><methods><class-id>Calendar.CalendarServlet</class-id> <category>accessing</category><body package="SiouX-Servlet-Demo">getApplication	"Return the &lt;CalendarApplication&gt; object associated with our web session."	^response session at: 'app' ifAbsentPut: [CalendarApplication new]</body></methods><methods><class-id>Calendar.CalendarCssServlet</class-id> <category>private-header writing</category><body package="SiouX-Servlet-Demo">writeCSSDefinitions	"Write the CSS definitions used by this servlet."	response		contentType: 'text/css';		write: 'body, html {	font-family: Arial, Helvetica, sans-serif;	font-size: 1.0em;	margin: 16px;	padding: 0;	background: white;	color: #000; }body {	min-width: 950px; }#wrap {	margin: 0px auto;	width: 950px; }#header {	background: #ddd; }#header h1, #header h2 {	padding: 5px;	margin: 0; }#nav {	text-align: right;	background: white;	padding: 20px 5px; }#nav ul {	margin: 0;	padding: 3px 0px;	list-style: none; }#nav li {	display: inline;	margin: 0;	padding: 0; }#main {	float: left;	width: 600px; }#main h2, #main p {	padding: 0px 10px; }#main h3 {	background: #ddd;	text-align: center;	padding: 0px 10px; }#mainError {	color: red; }#events {	float: right;	width: 300px; }#events ul {	margin-bottom: 0; }#events p {	padding: 0 10px 0 0; }#events h3 {	background: #ddd;	padding: 0px 10px; }#events eventdetails.td {	background: #ddd; }#eventError {	color: red; }.dEventTime {	text-align: left;	font-size: 0.9em; }.dEventLink {	text-align: right;	font-size: 0.9em; }a.dLink:link {	color: gray;	text-decoration: none; }a.dLink:visited {	color: gray;	text-decoration: none; }a.dLink:active {	color: black;	text-decoration: none; }a.dLink:hover {	color: silver;	text-decoration: none; }#footer {	clear: both; }#footer p {	padding: 5px;	margin: 0; }'</body></methods><methods><class-id>Calendar.CalendarCssServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	self writeCSSDefinitions</body></methods><methods><class-id>Calendar.CalendarEditEventServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	"Respond to GET with a FORM for editing the specified event."	| anEvent |	[anEvent := self getApplication findEventByID: (request anyParameterValueAt: 'id') asNumber.	self writeEditEventDiv: anEvent]		on: Error		do: [:ex | ^self returnError: ex].</body><body package="SiouX-Servlet-Demo">doPost	"Process a FORM containing details to update an existing event, notifying the client of any errors."	| theEvent |	[theEvent := self getCalendarEvent.	theEvent validate.	self getApplication updateEvent: theEvent]		on: Error		do: [:ex | ^self returnError: ex].</body></methods><methods><class-id>Calendar.CalendarEditEventServlet</class-id> <category>private</category><body package="SiouX-Servlet-Demo">getCalendarEvent	"Return a &lt;CalendarEvent&gt; based upon the incoming FORM parameters."	"Throw an exception if there are any errors while parsing them."		| newEvent |	[newEvent := (CalendarEvent new)		id: (request anyParameterValueAt: 'id') asNumber;		title: (request anyParameterValueAt: 'title');		startingTime: (Timestamp readFrom: (request anyParameterValueAt: 'start') readStream);		endingTime: (Timestamp readFrom: (request anyParameterValueAt: 'end') readStream);		yourself]			on: Error			do: [:ex | Error raiseSignal: 'Please specify all details correctly'].	^newEvent</body><body package="SiouX-Servlet-Demo">writeEditEventDiv: aCalendarEvent	"Write a form for editing the specified &lt;CalendarEvent&gt; to the response stream."	| idString startTimeString endTimeString |	idString := aCalendarEvent id printString.	startTimeString := TimestampPrintPolicy print: aCalendarEvent startingTime using: 'mmm, dd yyyy hh:mm AM/PM'.	endTimeString := TimestampPrintPolicy print: aCalendarEvent endingTime using: 'mmm, dd yyyy hh:mm AM/PM'.	response		write: '&lt;div id="'; 		write: idString;		write: '"&gt;&lt;form&gt;'; cr;		write: '&lt;table style="width: 100%;"&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;&lt;input type="text" name="title" style="width: 95%;" value="' , aCalendarEvent title , '"&gt;&lt;/td&gt;'; cr;		write: '&lt;td&gt;&lt;input name="submit" style="width: 92%;" value="Update" type="submit" onclick="if (postAndUpdate(''servlet/CalendarEditEventServlet'', this.form, ''';		write: aCalendarEvent id printString;		write: ''', ''eventError'')) { getAndUpdate(''servlet/CalendarEventsServlet'', ''events'', ''mainError'')}; return false;"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td colspan="2"&gt;&lt;input type="text" name="start" style="width: 95%;" value="' , startTimeString , '"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td colspan="2"&gt;&lt;input type="text" name="end" style="width: 95%;" value="' , endTimeString , '"&gt;&lt;/td&gt;&lt;/tr&gt;'; 		write: '&lt;/table&gt;';		write: '&lt;input type="hidden" name="id" value="' , idString , '"&gt;'; 		write: '&lt;/form&gt;';		write: '&lt;/div&gt;'.</body></methods><methods><class-id>Calendar.CalendarSettingsServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	self writeEditSettingsDiv</body><body package="SiouX-Servlet-Demo">doPost	"Process a FORM containing new database connection settings."	"Update the Login object in the application object, test the database	connection, and then check that the database contains tables for	the Calendar application."	| appClass aSession |		[appClass := self getApplication class.	appClass login: self getLoginParameters.	appClass testDatabaseAccessor.	aSession := appClass getSession.	(appClass tablesExist: aSession)		ifFalse: 			[appClass createTablesSession: aSession.			"Check again to verify tables were created."			(appClass tablesExist: aSession)				ifFalse: 					[Error						raiseSignal: 'Unable to create database tables for the Event Calendar.']].	self shouldEmptyTables		ifTrue: 			[appClass dropTablesSession: aSession.			appClass createTablesSession: aSession]]			on: Error			do: [:ex | ^self returnError: ex].	response write: 'Database configuration has been updated successfully'</body></methods><methods><class-id>Calendar.CalendarSettingsServlet</class-id> <category>private-database selection</category><body package="SiouX-Servlet-Demo">interfacesSelectorStringDefault: aString	"Return an HTML &lt;String&gt; containing a &lt;SELECT&gt; element for the available database platforms."		| stream |	stream := (String new: 32) writeStream.	stream nextPutAll: '&lt;select name="interface" style="width: 95%;"&gt;'.	self knownDatabases		do:	[:name | 			stream				nextPutAll: '&lt;option value="';				nextPutAll: name;				nextPut: $".			name = aString				ifTrue: [stream nextPutAll: ' selected'].			stream				nextPut: $&gt;;				nextPutAll: name;				nextPutAll: '&lt;/option&gt;'].	stream nextPutAll: '&lt;/select&gt;'.	^stream contents</body><body package="SiouX-Servlet-Demo">knownDatabases	"Return a &lt;SortedCollection of: String&gt; containing the class names of all available Glorp DatabasePlatforms."	^(Glorp.DatabasePlatform allSubclasses collect: [:each | each fullName]) asSortedCollection</body></methods><methods><class-id>Calendar.CalendarSettingsServlet</class-id> <category>private</category><body package="SiouX-Servlet-Demo">getLoginParameters	"Return a new &lt;Login&gt; object derived from the incoming form parameters."	"Throw an exception if there are any errors while parsing them."		| newLogin |	[newLogin := (Glorp.Login new)		database: (request anyParameterValueAt: 'interface') asQualifiedReference value new;		connectString: (request anyParameterValueAt: 'environment');		username: (request anyParameterValueAt: 'username');		password: (request anyParameterValueAt: 'password');		yourself]		on: Error		do: [:ex | Error raiseSignal: 'Please specify all details correctly'].	^newLogin</body><body package="SiouX-Servlet-Demo">shouldEmptyTables	"Return true if the client requested that the database tables are cleared."		^(request anyFormValueAt: 'clearAll') = 'on'</body><body package="SiouX-Servlet-Demo">writeEditSettingsDiv	"Write a FORM to the response stream, used to capture the database settings from the client."	| currentLogin databaseClassName |	currentLogin := self getApplication class login.	databaseClassName := currentLogin database class fullName.	response		write: '&lt;div id="settings"&gt;'; cr;		write: '&lt;form&gt;'; cr;		write: '&lt;table style="width: 100%;"&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;&lt;b&gt;Database Settings&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;Interface Class:&lt;/td&gt;&lt;td&gt;';		write: (self interfacesSelectorStringDefault: databaseClassName);		write: '&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;Environment:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="environment" style="width: 95%;" value="';		write: currentLogin connectString;		write: '"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;Username:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="username" style="width: 95%;" value="';		write: currentLogin username;		write: '"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;Password:&lt;/td&gt;&lt;td&gt;&lt;input type="password" name="password" style="width: 95%;" value="';		write: currentLogin password;		write: '"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;Clear All Events:&lt;/td&gt;&lt;td align="left"&gt;&lt;input type="checkbox" name="clearAll" value="on"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;input name="submit" value="Accept" type="submit" onclick="postAndUpdate(''servlet/CalendarSettingsServlet'', this.form, ''mainDetails'', ''mainError''); return false"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;/table&gt;';		write: '&lt;/form&gt;';		write: '&lt;/div&gt;'.</body></methods><methods><class-id>Calendar.CalendarApplication</class-id> <category>initialize-release</category><body package="SiouX-Servlet-Demo">initialize</body></methods><methods><class-id>Calendar.CalendarApplication</class-id> <category>actions</category><body package="SiouX-Servlet-Demo">findEventByID: aNumber	"Return a &lt;CalendarEvent&gt; for the specified ID."		| aSession anEvent |	aSession := self class getSession.	anEvent := aSession		readOneOf: CalendarEvent		where: [:each | each id = aNumber].	aSession logout.	^anEvent</body><body package="SiouX-Servlet-Demo">findEventsInMonth: aDate	"Return a &lt;SortedCollection of: CalendarEvent&gt; for the specified month and year."	"The events either start or end (or both) during this month."		| foundEvents first daysInMonth last aSession |	foundEvents := SortedCollection new.	first := Date		newDay: 1		month: aDate monthName		year: aDate year.	daysInMonth := Date		daysInMonth: aDate monthName		forYear: aDate year.	last := first copy addDays: daysInMonth - 1.	aSession := self class getSession.	foundEvents		addAll:			(aSession				read: CalendarEvent				where:					[:each | 					((first &lt;= each startingTime) AND: [each startingTime &lt;= last])						OR: [(first &lt;= each endingTime) AND: [each endingTime &lt;= last]]]).	aSession logout.	^foundEvents</body><body package="SiouX-Servlet-Demo">findEventsOnDate: aDate	"Return a &lt;SortedCollection of: CalendarEvent&gt; for the specified &lt;Date&gt;."		| foundEvents aSession sameDay nextDay |	foundEvents := SortedCollection new.	aDate ifNil: [^foundEvents].	aSession := self class getSession.	sameDay := aDate asTimestamp.	nextDay := (aDate addDays: 1) asTimestamp.	foundEvents		addAll:			(aSession				read: CalendarEvent				where:					[:each | 					(sameDay &lt;= each startingTime AND: [each startingTime &lt; nextDay])						OR: [sameDay &lt;= each endingTime AND: [each endingTime &lt; nextDay]]]).	aSession logout.	^foundEvents</body><body package="SiouX-Servlet-Demo">insertEvent: aCalendarEvent	"Insert the specified &lt;CalendarEvent&gt; in the database."	| aSession |	aSession := self class getSession.	aSession		beginUnitOfWork;		register: aCalendarEvent;		commitUnitOfWork;		logout.	^aCalendarEvent</body><body package="SiouX-Servlet-Demo">removeEvent: aCalendarEvent	"Remove the specified &lt;CalendarEvent&gt; from the database."	| aSession |	aSession := self class getSession.	aSession		beginUnitOfWork;		delete: aCalendarEvent;		commitUnitOfWork;		logout.	^aCalendarEvent</body><body package="SiouX-Servlet-Demo">updateEvent: aCalendarEvent	"Update the specified &lt;CalendarEvent&gt; in the database."	| aSession anEvent |	aSession := self class getSession.	aSession beginUnitOfWork.	anEvent := aSession		readOneOf: CalendarEvent		where: [:each | each id = aCalendarEvent id].	anEvent		title: aCalendarEvent title;		startingTime: aCalendarEvent startingTime;		endingTime: aCalendarEvent endingTime.	aSession commitUnitOfWork.	aSession logout.	^anEvent</body></methods><methods><class-id>Calendar.CalendarApplication class</class-id> <category>database-utility</category><body package="SiouX-Servlet-Demo">getSession	"Return an active &lt;GlorpSession&gt;, using the shared variable Login, or nil on failure."		^self getSessionForLogin: self login</body><body package="SiouX-Servlet-Demo">getSessionForLogin: aLogin	"Return an active &lt;GlorpSession&gt;, using the connection information specified in aLogin. Return nil on failure."		| accessor aSession |	accessor := DatabaseAccessor forLogin: aLogin.	accessor login.	aSession := GlorpSession new.	aSession system: (CalendarEventDescriptor forPlatform: aLogin database).	aSession accessor: accessor.	aSession accessor logging: false.	^aSession</body><body package="SiouX-Servlet-Demo">tablesExist	"Return true if the tables for this application have already been created."	"CalendarApplication tablesExist"		| aSession result |	aSession := self getSession.	result := self tablesExist: aSession.	aSession accessor logout.	^result</body><body package="SiouX-Servlet-Demo">tablesExist: aSession	"Return true if the tables for this application have already been created."	"CalendarApplication tablesExist: (self getSession)"		| hasTables selectResult |	hasTables := true.	aSession system allTables		do:			[:table | 			[selectResult := aSession accessor				executeSQLString: 'SELECT COUNT(*) FROM ' , table name]				on: Error				do:					[:ex | 					hasTables := false.					ex return]].	^hasTables</body><body package="SiouX-Servlet-Demo">testDatabaseAccessor	"Verify the current database configuartion, using the shared variable Login.	Raise an exception if there are any problems."	"CalendarApplication testDatabaseAccessor"		(DatabaseAccessor forLogin: Login)		login;		logout</body></methods><methods><class-id>Calendar.CalendarApplication class</class-id> <category>database-managing tables</category><body package="SiouX-Servlet-Demo">createTables	"Create all tables for this application."	"CalendarApplication createTables"		| aSession |	aSession := self getSession.	self createTablesSession: aSession.	aSession logout.</body><body package="SiouX-Servlet-Demo">createTablesSession: aSession	"Using a &lt;GlorpSession&gt;, create all tables for this application."	"CalendarApplication createTablesSession: (self getSession)"		aSession system platform areSequencesExplicitlyCreated		ifTrue:			[aSession system allSequences				do:					[:each | 					aSession accessor						createSequence: each						ifError: [:error | "Transcript show: error messageText"]]].	aSession system allTables		do:			[:each | 			aSession accessor				createTable: each				ifError: [:error | "Transcript show: error messageText"]]</body><body package="SiouX-Servlet-Demo">dropTables	"Drop all tables for this application."	"CalendarApplication dropTables"		| aSession |	aSession := self getSession.	self dropTablesSession: aSession.	aSession logout.</body><body package="SiouX-Servlet-Demo">dropTablesSession: aSession	"Using a &lt;GlorpSession&gt;, drop all tables used by this application."	"CalendarApplication dropTablesSession: (self getSession)"		aSession system platform areSequencesExplicitlyCreated		ifTrue:			[aSession system allSequences				do:					[:each | 					aSession accessor						dropSequence: each						ifAbsent: [:error | "Transcript show: error messageText"]]].	aSession system allTables		do:			[:each | 			aSession accessor				dropTableNamed: each name				ifAbsent: [:error | "Transcript show: error messageText"]]</body></methods><methods><class-id>Calendar.CalendarApplication class</class-id> <category>database-settings</category><body package="SiouX-Servlet-Demo">login	"Return the &lt;Login&gt; used for all database connections."		Login isNil ifTrue: [Login := self defaultLogin].	^Login</body><body package="SiouX-Servlet-Demo">login: aLogin	"Set the &lt;Login&gt; to be used for all database connections."		Login := aLogin</body></methods><methods><class-id>Calendar.CalendarApplication class</class-id> <category>instance creation</category><body package="SiouX-Servlet-Demo">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Calendar.CalendarApplication class</class-id> <category>defaults</category><body package="SiouX-Servlet-Demo">defaultLogin	"Return a &lt;Login&gt; object with default settings."		^(Glorp.Login new)		database: PostgreSQLPlatform new;		username: 'mroberts';		password: String new;		connectString: 'localhost:5432_postgres';		yourself</body></methods><methods><class-id>Calendar.CalendarApplication class</class-id> <category>examples</category><body package="SiouX-Servlet-Demo">example1	"CalendarApplication login:		((Glorp.Login new)		database: Glorp.AccessPlatform new;		username: 'dwallen';		password: String new;		connectString: 'access_glorp';		yourself)"	"CalendarApplication example1"		| app event eventWithId start end title evts |	start := Date today.	end :=  start copy addDays: 45.	title := 'example1 from: ', start printString, ' to: ', end printString.	app := CalendarApplication new.	app session: (CalendarApplication getSession).	app session beginUnitOfWork.	event := CalendarEvent title: title startingTime: start endingTime: end.	eventWithId := app insertEvent: event.	app session commitUnitOfWork.	(evts := app findEventsInMonth: start) inspect.	(evts includes: eventWithId) ifFalse: [self halt]</body></methods><methods><class-id>Calendar.CalendarEventsServlet</class-id> <category>private-body writing</category><body package="SiouX-Servlet-Demo">writeErrorDiv	"Write the error DIV to the response stream."		response		cr;		write: '&lt;div id="eventError"&gt;&amp;nbsp;&lt;/div&gt;';		cr</body><body package="SiouX-Servlet-Demo">writeEventDetailsDiv	"Write the DIV showing the details of each event to the response stream."		| events |	response		cr;		write: '&lt;div id="eventDetails"&gt;';		cr.	self writeNewEventButton.	events := (self getApplication findEventsOnDate: targetDate).	events do: [:anEvent | self writeEventDiv: anEvent].	events isEmpty ifTrue: [self writeNoEventsDiv].	response		cr;		write: '&lt;/div&gt;';		cr</body><body package="SiouX-Servlet-Demo">writeEventDiv: aCalendarEvent	"Write a DIV showing the details of a &lt;CalendarEvent&gt; to the response stream. Use the event's ID to identify the DIV."		response		cr;		write: '	&lt;div id="';		write: aCalendarEvent id printString;		write: '"&gt;'; cr;		write: '		&lt;table style="width: 100%;"&gt;'; cr;		write: '			&lt;th colspan="2" align="left"&gt;';		write: aCalendarEvent title;		write: '&lt;/th&gt;'; cr;		write: '			&lt;tr&gt;&lt;td class="dEventTime"&gt;'.	aCalendarEvent printTimeOn: response responseStream.	response		write: '&lt;/td&gt;&lt;td class="dEventLink"&gt;';		write: (self linkForEdit: aCalendarEvent id);		write: (self linkForDelete: aCalendarEvent id onDate: targetDate);		write: '&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '		&lt;/table&gt;'; cr;		write: '	&lt;/div&gt;'</body><body package="SiouX-Servlet-Demo">writeHeaderDiv	"Write the header of the events DIV to the response stream."		response		cr;		write: '&lt;h3&gt;' , targetDate printString , '&lt;/h3&gt;'</body><body package="SiouX-Servlet-Demo">writeNewEventButton	"Write the 'New Event' button to the response stream. It uses Ajax to invoke CalendarAddEventServlet."		response write: '&lt;p style="text-align: right;"&gt;&lt;input name="newEvent" value="New Event" type="button" onclick="getAndUpdate(''servlet/CalendarAddEventServlet'', ''eventDetails'', ''eventError'', false); return false"&gt;&lt;/p&gt;'.</body><body package="SiouX-Servlet-Demo">writeNoEventsDiv	"Write a DIV indicating no events are scheduled for the specified day."		response cr; write: '	&lt;div&gt;No events on this day&lt;/div&gt;'; cr</body></methods><methods><class-id>Calendar.CalendarEventsServlet</class-id> <category>private-links</category><body package="SiouX-Servlet-Demo">linkForDelete: anID onDate: aDate	"Return a &lt;String&gt; containing an HTML anchor for deleting an event of the specified ID &lt;Number&gt;."	"When clicked, this link evaluates a piece of JavaScript with three functions: (1) remove the specified ID;	(2) refresh the list of events on the specified day; (3) refresh the month display."	| stream |	stream := (String new: 32) writeStream.	stream		nextPutAll: '&lt;a href="#" class="dLink" onclick="getAndUpdate(''servlet/CalendarRemoveEventServlet?id=';		nextPutAll: anID printString;		nextPutAll: ''', ''eventDetails'', ''eventError'', false); ';		nextPutAll: 'getAndUpdate(''servlet/CalendarEventsServlet?day=';		nextPutAll: aDate dayOfMonth printString;		nextPutAll: '&amp;month=';		nextPutAll: aDate monthIndex printString;		nextPutAll: '&amp;year=';		nextPutAll: aDate year printString;		nextPutAll: ''', ''events'', ''eventError''); ';		nextPutAll: 'getAndUpdate(''servlet/CalendarMonthServlet'', ''mainMonth'', ''mainError''); return false"&gt;[Delete]&lt;/a&gt;'.	^stream contents</body><body package="SiouX-Servlet-Demo">linkForEdit: anID	"Return a &lt;String&gt; containing an HTML anchor for editing an event of the specified ID &lt;Number&gt;."	| stream |	stream := (String new: 32) writeStream.	stream		nextPutAll: '&lt;a href="#" class="dLink" onclick="getAndUpdate(''servlet/CalendarEditEventServlet?id=';		nextPutAll: anID printString;		nextPutAll: ''', ''';		nextPutAll: anID printString;		nextPutAll: ''', ''eventError''); return false"&gt;[Edit]&lt;/a&gt; '.	^stream contents</body></methods><methods><class-id>Calendar.CalendarEventsServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet		[targetDate := self getCurrentDate.	self		writeHeaderDiv;		writeEventDetailsDiv;		writeErrorDiv]		on: Error		do: [:ex | ^self returnError: ex]</body></methods><methods><class-id>Calendar.CalendarEventsServlet</class-id> <category>private-request parsing</category><body package="SiouX-Servlet-Demo">getCurrentDate	"Return a &lt;Date&gt; object, as specified by the client's request. If none, use today's date."		| day month year aDate |	(day := request anyParameterValueAt: 'day') isNil		ifFalse:			[(month := request anyParameterValueAt: 'month') isNil				ifFalse:					[(year := request anyParameterValueAt: 'year') isNil						ifFalse:							[aDate := Date								newDay: day asNumber								monthNumber: month asNumber								year: year asNumber]]].	aDate isNil ifTrue: [aDate := Date today].	^aDate</body></methods><methods><class-id>Calendar.CalendarAddEventServlet</class-id> <category>private</category><body package="SiouX-Servlet-Demo">getCalendarEvent	"Return a new &lt;CalendarEvent&gt; based upon the incoming FORM parameters."	"Throw an exception if there are any errors while parsing them."		| newEvent |	[newEvent := CalendarEvent		title: (request anyParameterValueAt: 'title')		startingTime: (Timestamp readFrom: (request anyParameterValueAt: 'start') readStream)		endingTime: (Timestamp readFrom: (request anyParameterValueAt: 'end') readStream)]			on: Error			do: [:ex | Error raiseSignal: 'Please specify all details correctly'].	^newEvent</body><body package="SiouX-Servlet-Demo">writeAddEventDiv	"Write a blank form for creating a new event to the response stream."	| startTimeString endTimeString |	startTimeString := TimestampPrintPolicy print: Timestamp now using: 'mmm, dd yyyy hh:mm AM/PM'.	endTimeString := TimestampPrintPolicy print: (Timestamp now addSeconds: 3600) using: 'mmm, dd yyyy hh:mm AM/PM'.	response		write: '&lt;div id="addEvent"&gt;'; cr;		write: '&lt;form&gt;'; cr;		write: '&lt;table style="width: 100%;"&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;b&gt;New Event&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;Title:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="title" style="width: 95%;" value="Title"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;From:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="start" style="width: 95%;" value="' , startTimeString , '"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;To:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="end" style="width: 95%;" value="' , endTimeString , '"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&lt;input name="submit" value="Add Event" type="submit" onclick=" if (postAndUpdate(''servlet/CalendarAddEventServlet'', this.form, ''eventDetails'', ''eventError'')) { getAndUpdate(''servlet/CalendarEventsServlet'', ''events'', ''mainError''); getAndUpdate(''servlet/CalendarMonthServlet'', ''mainMonth'', ''mainError'') }; return false"&gt;&amp;nbsp;&lt;input type="reset" value="Clear"&gt;&lt;/td&gt;&lt;/tr&gt;'; cr;		write: '&lt;/table&gt;';		write: '&lt;/form&gt;';		write: '&lt;/div&gt;'.</body></methods><methods><class-id>Calendar.CalendarAddEventServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	"Respond to GET with a blank FORM for creating a new event."	self writeAddEventDiv</body><body package="SiouX-Servlet-Demo">doPost	"Process a FORM containing details about a new event."	"Capture the FORM parameters and create a new event, notifying the client of any errors.	Finally, pass the new event to the application object. The events list is refreshed by the client,	using JavaScript provided via #writeAddEventDiv."	| newEvent |	[newEvent := self getCalendarEvent.	newEvent validate.	self getApplication insertEvent: newEvent]		on: Error		do: [:ex | ^self returnError: ex].</body></methods><methods><class-id>Calendar.CalendarEvent</class-id> <category>validating</category><body package="SiouX-Servlet-Demo">validate	"Validate this event, raising an exception if there are any problems."	title isNil ifTrue: [Error raiseSignal: 'Please specify a title for this event'].	title size &gt; 0 ifFalse: [Error raiseSignal: 'Please specify a title for this event'].	startingTime isNil ifTrue: [Error raiseSignal: 'Please specify a starting time for this event'].	endingTime isNil ifTrue: [Error raiseSignal: 'Please specify a ending time for this event'].	startingTime = endingTime ifTrue: [Error raiseSignal: 'Please specify a different starting and ending time for this event'].</body></methods><methods><class-id>Calendar.CalendarEvent</class-id> <category>accessing</category><body package="SiouX-Servlet-Demo">endingTime	"Return a &lt;Timestamp&gt; indicating the ending time and date of this event."	^endingTime</body><body package="SiouX-Servlet-Demo">endingTime: aTimestamp	"Set the ending &lt;Timestamp&gt; for this event."	endingTime := aTimestamp</body><body package="SiouX-Servlet-Demo">id	"Return the &lt;Number&gt; ID for this event."	^id</body><body package="SiouX-Servlet-Demo">id: aNumber	id := aNumber</body><body package="SiouX-Servlet-Demo">startingTime	"Return a &lt;Timestamp&gt; indicating the starting time and date of this event."	^startingTime</body><body package="SiouX-Servlet-Demo">startingTime: aTimestamp	"Set the starting &lt;Timestamp&gt; for this event."	startingTime := aTimestamp</body><body package="SiouX-Servlet-Demo">title	"Return a &lt;String&gt; representing the title of this event."	^title</body><body package="SiouX-Servlet-Demo">title: aString	"Set the &lt;String&gt; title of this event."	title := aString</body></methods><methods><class-id>Calendar.CalendarEvent</class-id> <category>printing</category><body package="SiouX-Servlet-Demo">printHTMLon: aStream	"Print as HTML on the specified stream."		aStream		nextPutAll: '&lt;b&gt;';		nextPutAll: title;		nextPutAll: '&lt;/b&gt;&lt;br /&gt;'.	startingTime asTime printOn: aStream.	aStream nextPutAll: ' - '.	endingTime asTime printOn: aStream.</body><body package="SiouX-Servlet-Demo">printTimeOn: aStream	"Print the time of this event on the specified stream."		startingTime asTime printOn: aStream.	aStream nextPutAll: ' - '.	endingTime asTime printOn: aStream.</body></methods><methods><class-id>Calendar.CalendarEvent</class-id> <category>comparing</category><body package="SiouX-Servlet-Demo">&lt;= aCalendarEvent	"Return true if aCalendarEvent is less than or equal to the receiver."	^startingTime &lt;= aCalendarEvent startingTime</body><body package="SiouX-Servlet-Demo">&gt; aCalendarEvent	"Return true if aCalendarEvent is greater than we are."	^startingTime &gt; aCalendarEvent startingTime</body></methods><methods><class-id>Calendar.CalendarEvent</class-id> <category>initialize-release</category><body package="SiouX-Servlet-Demo">initialize	"Temporary initialization code."	"For now(?), let Glorp assign a unique (sequenced) id."	"id := Timestamp now asSeconds."</body></methods><methods><class-id>Calendar.CalendarEvent class</class-id> <category>instance creation</category><body package="SiouX-Servlet-Demo">new	^super new initialize</body><body package="SiouX-Servlet-Demo">title: titleString startingTime: startingTimestamp endingTime: endingTimestamp	"Return a new, initialized instance."		^(self new)		title: titleString;		startingTime: startingTimestamp;		endingTime: endingTimestamp;		yourself</body></methods><methods><class-id>Calendar.CalendarJavaScriptServlet</class-id> <category>private-header writing</category><body package="SiouX-Servlet-Demo">writeJavaScriptDefinitions	"Write the JavaScript code used by this servlet."	response		write: '	var success = false;	var http_request = createXMLHttpRequest();	var responseID = '''';	var errorStringID = '''';function getAndUpdate(url, rID, eID){	if (http_request.readyState &gt; 0) { return; }      http_request = createXMLHttpRequest();      responseID = rID;      errorStringID = eID;      http_request.open("GET", url, false);      http_request.send(null);	showResult();	return success;}function postAndUpdate(url, formObject, rID, eID){      var parameters = getFormValues(formObject);	if (http_request.readyState &gt; 0) { return; }      http_request = createXMLHttpRequest();      responseID = rID;      errorStringID = eID;      http_request.open("POST", url, false);      http_request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");      http_request.send(parameters);	showResult();	return success;}function showResult(){      if (http_request.readyState == 4) {         result = http_request.responseText;         if (http_request.status == 200) {		success = true;		targetDiv = document.getElementById(errorStringID);		if (targetDiv.firstChild) targetDiv.removeChild(targetDiv.firstChild);		targetDiv = document.getElementById(responseID);/**		targetDiv.innerHTML = result; **/		newDiv = document.createElement(targetDiv.tagName);		newDiv.id = targetDiv.id;		newDiv.className = targetDiv.className;		newDiv.innerHTML = result;		targetDiv.parentNode.replaceChild(newDiv, targetDiv);          } else {		success = false;		targetDiv = document.getElementById(errorStringID);		newDiv = document.createElement(targetDiv.tagName);		newDiv.id = targetDiv.id;		newDiv.className = targetDiv.className;		newDiv.innerHTML = result;		targetDiv.parentNode.replaceChild(newDiv, targetDiv);         }	http_request = createXMLHttpRequest();	}}function getFormValues(formObject) {    var str = '''';    for(var i = 0; i &lt; formObject.elements.length; i++) {	elem = formObject.elements[i];   	if (str != '''') {str += ''&amp;''; }   	if (elem.type == "checkbox") {		if (elem.checked) {str += elem.name + "=" + elem.value;}		} else {			str += elem.name + "=" + elem.value;}   }      return str; }function createXMLHttpRequest(){     var xhReq = false;     if (window.XMLHttpRequest) { // Mozilla, Safari,...         xhReq = new XMLHttpRequest();         if (xhReq.overrideMimeType) {         	// set type accordingly to anticipated content type            //xhReq.overrideMimeType(''text/xml'');            xhReq.overrideMimeType(''text/html'');         }      } else if (window.ActiveXObject) { // IE         try { xhReq = new ActiveXObject("Msxml2.XMLHTTP"); }		catch (e)			{ try { xhReq = new ActiveXObject("Microsoft.XMLHTTP"); }				catch (e) {}         }      }      if (!xhReq) { alert(''XMLHttpRequest not supported by this browser''); }      return xhReq;}'</body></methods><methods><class-id>Calendar.CalendarJavaScriptServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	self writeJavaScriptDefinitions</body></methods><methods><class-id>Calendar.CalendarMonthServlet</class-id> <category>private</category><body package="SiouX-Servlet-Demo">writeDayNames	"Write the days of the week to the response stream."	response write: '		&lt;tr align="center" valign="middle"&gt;			&lt;td bgcolor="#eeeeee"&gt;&lt;div align="center"&gt;&lt;b&gt;Mo&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;			&lt;td&gt;&lt;div align="center"&gt;&lt;b&gt;Tu&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;			&lt;td&gt;&lt;div align="center"&gt;&lt;b&gt;We&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;			&lt;td&gt;&lt;div align="center"&gt;&lt;b&gt;Th&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;			&lt;td&gt;&lt;div align="center"&gt;&lt;b&gt;Fr&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;			&lt;td&gt;&lt;div align="center"&gt;&lt;b&gt;Sa&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;			&lt;td&gt;&lt;div align="center"&gt;&lt;b&gt;Su&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;		&lt;/tr&gt;'.</body><body package="SiouX-Servlet-Demo">writeMonthDiv	"Write the month division to the response stream."	self writeMonthHeader.	self writeMonthTable.	response write: '	&lt;div id="spacer"&gt;&amp;nbsp;&lt;/div&gt;	&lt;div id="mainDetails"&gt;&lt;/div&gt;	&lt;div id="mainError" style="color: red;"&gt;&lt;/div&gt;'</body><body package="SiouX-Servlet-Demo">writeMonthHeader	"Write the month header to the response stream, showing the month name, the year, and links to previous and next months."	response		write: '		&lt;h3&gt;';		write: (self linkForMonth: (targetDate subtractDays: targetDate dayOfMonth) title: '&amp;lt;&amp;lt;');		write: ' ';		write: targetDate monthName asString;		write: ' ';		write: targetDate year printString;		write: ' ';		write: (self linkForMonth: (targetDate addDays: targetDate daysInMonth) title: '&amp;gt;&amp;gt;');		write: '&lt;/h3&gt;	'.</body><body package="SiouX-Servlet-Demo">writeMonthTable	"Write a table containing the current month to the response stream."	| firstOfMonth monthEvents firstDayIndex daysInMonth date dateSlot finished dateString |	firstOfMonth := Date newDay: 1 month: (targetDate monthName) year: targetDate year.	monthEvents := self getApplication findEventsInMonth: targetDate.	response write: '&lt;table align="center" cellpadding="4" cellspacing="2" width="100%"&gt;'; cr.	self writeDayNames.	response write: '		&lt;tr align="center" valign="middle"&gt;'.	"Get index of first day of the month, and and the total number of days."	firstDayIndex := firstOfMonth weekdayIndex.	daysInMonth := firstOfMonth daysInMonth.	"Set two counters, one for the date and one to count the empty slots in the calendar."	date := dateSlot := 1.	finished := false.	[finished]		whileFalse: [		(dateSlot &lt; firstDayIndex or: [date &gt; daysInMonth])			ifTrue: [response write: '			&lt;td&gt;&amp;nbsp;&lt;/td&gt;'; cr]			ifFalse: ["Find events for this date."					(monthEvents select: [:e | e startingTime day = date or: [e endingTime day = date]]) isEmpty						ifTrue: [dateString := date printString]						ifFalse: [dateString := self linkForDay: (Date newDay: date monthNumber: targetDate monthIndex year: targetDate year)].					response write: '			&lt;td&gt;' , dateString , '&lt;/td&gt;'; cr. date := date + 1].		(dateSlot rem: 7) == 0			ifTrue:	[response write: '		&lt;/tr&gt;'; cr.					date &gt; daysInMonth						ifTrue: [finished := true]						ifFalse: [response write: '		&lt;tr align="center" valign="middle"&gt;'; cr]].		dateSlot := dateSlot + 1].	response write: '	&lt;/table&gt;'; cr.</body></methods><methods><class-id>Calendar.CalendarMonthServlet</class-id> <category>private-links</category><body package="SiouX-Servlet-Demo">linkForDay: aDate	"Return a &lt;String&gt; containing an HTML anchor for showing events on the specified &lt;Date&gt;."	| stream |	stream := (String new: 32) writeStream.	stream		nextPutAll: '&lt;a href="#" onclick="getAndUpdate(''servlet/CalendarEventsServlet?day=';		nextPutAll: aDate dayOfMonth printString;		nextPutAll: '&amp;month=';		nextPutAll: aDate monthIndex printString;		nextPutAll: '&amp;year=';		nextPutAll: aDate year printString;		nextPutAll: ''', ''events'', ''mainError''); return false"&gt;';		nextPutAll: aDate dayOfMonth printString;		nextPutAll: '&lt;/a&gt;'.	^stream contents</body><body package="SiouX-Servlet-Demo">linkForMonth: aDate title: aString	"Return a &lt;String&gt; containing an HTML anchor for selecting the specified &lt;Date&gt;."	| stream |	stream := (String new: 32) writeStream.	stream		nextPutAll: '&lt;a href="#" style="text-decoration: none;" onclick="getAndUpdate(''servlet/CalendarMonthServlet?month=';		nextPutAll: aDate monthName asString;		nextPutAll: '&amp;year=';		nextPutAll: aDate year printString;		nextPutAll: ''', ''mainMonth'', ''mainError''); return false"&gt;';		nextPutAll: aString;		nextPutAll: '&lt;/a&gt;'.	^stream contents</body></methods><methods><class-id>Calendar.CalendarMonthServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	self doPost</body><body package="SiouX-Servlet-Demo">doPost		[targetDate := self getCurrentMonth.	self writeMonthDiv]		on: Error		do: [:ex | ^self returnError: ex]</body></methods><methods><class-id>Calendar.CalendarMonthServlet</class-id> <category>private-request parsing</category><body package="SiouX-Servlet-Demo">getCurrentMonth	"Return a &lt;Date&gt; object for the current month, either specified by the query parameters,	or as saved in a session variable. If there's no session variable, use the current month."		| aDate |	(aDate := self getMonth) isNil		ifTrue: [aDate := request session at: 'currentMonth' ifAbsentPut: [Date today]]		ifFalse:	[request session at: 'currentMonth' put: aDate].	^aDate</body><body package="SiouX-Servlet-Demo">getMonth	"Return a &lt;Date&gt; object for the month specified by the query parameters,	or nil if none were provided."		| month year |	(month := request anyParameterValueAt: 'month') isNil		ifFalse:			[(year := request anyParameterValueAt: 'year') isNil				ifFalse:					[^Date						newDay: 1						month: month						year: year asNumber]].	^nil</body></methods><methods><class-id>Calendar.CalendarRemoveEventServlet</class-id> <category>servletness</category><body package="SiouX-Servlet-Demo">doGet	"Respond to GET by removing the specified CalendarEvent."		[self getApplication		removeEvent:			((CalendarEvent new)				id: (request anyParameterValueAt: 'id') asNumber;				yourself)]		on: Error		do: [:ex | ^self returnError: ex]</body></methods><methods><class-id>Calendar.CalendarEventDescriptor</class-id> <category>accessing</category><body package="SiouX-Servlet-Demo">allTableNames   ^#( 'CALENDAREVENTS' )</body><body package="SiouX-Servlet-Demo">classModelForCalendarEvent: aClassModel	aClassModel newAttributeNamed: #id.	aClassModel newAttributeNamed: #title.	aClassModel newAttributeNamed: #startingTime.	aClassModel newAttributeNamed: #endingTime</body><body package="SiouX-Servlet-Demo">descriptorForCalendarEvent: aDescriptor		| table |	table := self tableNamed: 'CALENDAREVENTS'.	aDescriptor table: table.	(aDescriptor newMapping: DirectMapping)		from: #id		to: (table fieldNamed: 'id').	(aDescriptor newMapping: DirectMapping)		from: #title		to: (table fieldNamed: 'title').	(aDescriptor newMapping: DirectMapping)		from: #startingTime		to: (table fieldNamed: 'starting_time').	(aDescriptor newMapping: DirectMapping)		from: #endingTime		to: (table fieldNamed: 'ending_time')</body><body package="SiouX-Servlet-Demo">tableForCALENDAREVENTS: aTable	"Notes:    id INT PKEY, title VARCHAR(120), start DATETIME, end DATETIME"		(aTable		createFieldNamed: 'id'		type: platform sequence) bePrimaryKey.	aTable		createFieldNamed: 'title'		type: (platform varChar: 120).	aTable		createFieldNamed: 'starting_time'		type: platform datetime.	aTable		createFieldNamed: 'ending_time'		type: platform datetime</body></methods><methods><class-id>Calendar.CalendarEventDescriptor</class-id> <category>initialization</category><body package="SiouX-Servlet-Demo">constructAllClasses		^(super constructAllClasses)		add: CalendarEvent;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>DescriptorSystem</name><environment>Glorp</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session platform descriptors tables sequences typeResolvers cachePolicy allClasses useDirectAccessForMapping classModels useJoinsForAnySatisfy </inst-vars><class-inst-vars>validateDescriptorSystem </class-inst-vars><imports></imports><category>Glorp</category><attributes><package>GlorpMappings</package></attributes></class><class><name>SingleThreadModelServlet</name><environment>SiouX</environment><super>SiouX.HttpServlet</super><private>false</private><indexed-type>none</indexed-type><inst-vars>request response session </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Servlet</package></attributes></class></st-source>