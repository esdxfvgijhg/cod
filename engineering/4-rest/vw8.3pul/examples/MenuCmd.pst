<?xml version="1.0"?><st-source><!-- Name: MenuCommand-ExampleNotice: Copyright 2007-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains MenuCommandExample, which demonstrates how to implement a menu of commands (as opposed to a menu of values) in a menu bar, a menu button and a pop-up menu.DbIdentifier: bear73DbTrace: 427943DbUsername: smichaelDbVersion: 8.0 - 1PackageName: MenuCommand-ExampleParcel: #('MenuCommand-Example')ParcelName: MenuCommand-ExamplePrintStringCache: (8.0 - 1,smichael)Version: 8.0 - 1Date: 5:06:44 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:44 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MenuCommandExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>files action </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>MenuCommand-Example</package></attributes></class><comment><class-id>Examples.MenuCommandExample</class-id><body>This example class demonstrates how to implement a menu of commands (as opposed to a menu of values) in each of the three types of menu: menu bar, menu button and pop-up menu.</body></comment><methods><class-id>Examples.MenuCommandExample</class-id> <category>aspects</category><body package="MenuCommand-Example">action	^action</body><body package="MenuCommand-Example">files	^files</body></methods><methods><class-id>Examples.MenuCommandExample</class-id> <category>menu messages</category><body package="MenuCommand-Example">addFile	"Prompt for a filename and add it to the list."	| name list selectionInList |	name := Dialog		requestFileName: 'File to add'		default: ''		version: #mustBeOld.	name isEmpty		ifFalse: [			name asFilename isDirectory				ifTrue: [^Dialog 					warn: 'A directory cannot be added.'					for: ScheduledControllers activeController view].			selectionInList := self files.			list := selectionInList list.			selectionInList selection isNil				ifTrue: [list add: name]				ifFalse: [list add: name before: selectionInList selection].			selectionInList list: list]</body><body package="MenuCommand-Example">deleteFile	"Remove the selected file from the list."	| selectionInList list |	selectionInList := self files.	list := selectionInList list.	list removeAtIndex: selectionInList selectionIndex.	selectionInList list: list.</body><body package="MenuCommand-Example">explainUsage	"Tell how to use the example."	Dialog warn: 'This example demonstrates a menu of commandsthat is accessible via a menu bar, a menu buttonor a pop-up menu.It can also be used to list your most-used text files for quick editing.'</body><body package="MenuCommand-Example">openFile	"Open a File Editor on the selected file."	| selectedFile |	selectedFile := self files selection.	selectedFile asFilename edit.</body></methods><methods><class-id>Examples.MenuCommandExample</class-id> <category>change messages</category><body package="MenuCommand-Example">configureMenu	"Disable or enable the menu items depending on whether	a file is selected."	| menu submenu |	menu := self builder menuAt: #fileMenu.	submenu := (menu menuItemLabeled: 'File') submenu.	self files selection isNil		ifTrue: [			(submenu menuItemLabeled: 'Open') disable.			(submenu menuItemLabeled: 'Delete') disable]		ifFalse: [			(submenu menuItemLabeled: 'Open') enable.			(submenu menuItemLabeled: 'Delete') enable]</body><body package="MenuCommand-Example">performAction	self action value ifNotNil:[:value| self perform: value]</body></methods><methods><class-id>Examples.MenuCommandExample</class-id> <category>initialize-release</category><body package="MenuCommand-Example">initialize	files := SelectionInList new.	files selectionIndexHolder onChangeSend: #configureMenu to: self.	action := nil asValue.	action onChangeSend: #performAction to: self.</body></methods><methods><class-id>Examples.MenuCommandExample</class-id> <category>interface opening</category><body package="MenuCommand-Example">postOpenWith: aBuilder	"Disable the unusable menu items."	self configureMenu.</body></methods><methods><class-id>Examples.MenuCommandExample class</class-id> <category>resources</category><body package="MenuCommand-Example">fileMenu	| mb menu submenu |	mb := MenuBuilder new.	mb 		beginSubMenuLabeled: 'File';		add: 'Open' -&gt; #openFile;		line;		add: 'Add' -&gt; #addFile;		add: 'Delete' -&gt; #deleteFile;		endSubMenu.	mb 		beginSubMenuLabeled: 'Help';		add: 'Usage' -&gt; #explainUsage;		endSubMenu.	"Add shortcut keys."	menu := mb menu.	submenu := (menu menuItemLabeled: 'File') submenu.	(submenu menuItemLabeled: 'Open') shortcutKeyCharacter: $O.	(submenu menuItemLabeled: 'Add') shortcutKeyCharacter: $A.	(submenu menuItemLabeled: 'Delete') shortcutKeyCharacter: $D.	^menu</body></methods><methods><class-id>Examples.MenuCommandExample class</class-id> <category>interface specs</category><body package="MenuCommand-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'MenuCommandExample' 			#min: #(#Point 233 200 ) 			#bounds: #(#Rectangle 326 352 559 552 ) 			#flags: 4 			#menu: #fileMenu ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 10 0 35 0 -10 1 -10 1 ) 					#model: #files 					#menu: #fileMenu ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame -50 0.5 5 0 50 0.5 30 0 ) 					#model: #action 					#label: 'Actions' 					#menu: #fileMenu ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>