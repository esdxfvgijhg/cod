<?xml version="1.0"?><st-source><!-- Name: MenuPragma1-ExampleNotice: Copyright 2003-2014 Cincom Systems, Inc.  All rights reserved.Comment: This example class demonstrates how to implement a menu of commands (as opposed to a menu of values) in each of the three types of menu: menu bar, menu button and pop-up menu.  In this variation of MenuCommandExample, the menu is composed entirely from menu pragmas.DbIdentifier: bear73DbTrace: 427975DbUsername: smichaelDbVersion: 8.0 - 1DevelopmentPrerequisites: #(#(#any 'Tools-Workspace' ''))PackageName: MenuPragma1-ExampleParcel: #('MenuPragma1-Example')ParcelName: MenuPragma1-ExamplePrerequisiteParcels: #(#('Tools-Workspace' ''))PrintStringCache: (8.0 - 1,smichael)Version: 8.0 - 1Date: 5:06:46 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:46 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MenuPragma1Example</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>files </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>MenuPragma1-Example</package></attributes></class><comment><class-id>Examples.MenuPragma1Example</class-id><body>This example class demonstrates how to implement a menu of commands (as opposed to a menu of values) in each of the three types of menu: menu bar, menu button and pop-up menu.  In this variation of MenuCommandExample, the menu is composed entirely from menu pragmas.</body></comment><methods><class-id>Examples.MenuPragma1Example</class-id> <category>testing</category><body package="MenuPragma1-Example">anyFileSelected	^self files selection notNil</body></methods><methods><class-id>Examples.MenuPragma1Example</class-id> <category>aspects</category><body package="MenuPragma1-Example">files	^files</body><body package="MenuPragma1-Example">performer	^self</body></methods><methods><class-id>Examples.MenuPragma1Example</class-id> <category>initialize-release</category><body package="MenuPragma1-Example">initialize	files := SelectionInList new.</body></methods><methods><class-id>Examples.MenuPragma1Example</class-id> <category>interface opening</category><body package="MenuPragma1-Example">postBuildWith: aBuilder	(aBuilder menuAt: #menuBar)		augmentFrom: self class		to: self class		menuName: #menuBar		for: self</body></methods><methods><class-id>Examples.MenuPragma1Example class</class-id> <category>resources</category><body package="MenuPragma1-Example">menuBar	^Menu new</body><body package="MenuPragma1-Example">workspaceIcon	^VisualLauncher workspaceIcon</body></methods><methods><class-id>Examples.MenuPragma1Example</class-id> <category>menu messages</category><body package="MenuPragma1-Example">addFile	"Prompt for a filename and add it to the list."	&lt;menuItem:'&amp;Add'      nameKey: nil      shortcutKeyCharacter: $A      shortcutModifiers: 8 "InputState altMask"      menu: #(#menuBar #file)      position: 10.02&gt;	| name list selectionInList |	name := Dialog 				requestFileName: 'File to add'				default: ''				version: #mustBeOld.	name isEmpty 		ifFalse: 			[name asFilename isDirectory 				ifTrue: 					[^Dialog warn: 'A directory cannot be added.'						for: ScheduledControllers activeController view].			selectionInList := self files.			list := selectionInList list.			selectionInList selection isNil 				ifTrue: [list add: name]				ifFalse: [list add: name before: selectionInList selection].			selectionInList list: list]</body><body package="MenuPragma1-Example">deleteFile	"Remove the selected file from the list."	&lt;menuItem:'&amp;Delete'      nameKey: nil      enablement: #anyFileSelected      indication: nil      shortcutKeyCharacter: $D      shortcutModifiers: 8 "InputState altMask"      menu: #(#menuBar #file)      position:10.03&gt;	| selectionInList list |	selectionInList := self files.	list := selectionInList list.	list removeAtIndex: selectionInList selectionIndex.	selectionInList list: list.</body><body package="MenuPragma1-Example">explainUsage	"Tell how to use the example."	&lt;menuItem:'Usage'      nameKey: nil      menu: #(menuBar #help)      position:10.01&gt;	Dialog warn: 'This example demonstrates a menu of commandsthat is accessible via a menu bar, a menu buttonor a pop-up menu.It can also be used to list your most-used text files for quick editing.'</body><body package="MenuPragma1-Example">openFile	"Open a File Editor on the selected file."	&lt;menuItem:'Open'      nameKey: nil      enablement: #anyFileSelected      indication: nil      shortcutKeyCharacter: $O      shortcutModifiers: 8 "InputState altMask"      menu: #(#menuBar #file)      position:10.01&gt;	| selectedFile |	selectedFile := self files selection.	selectedFile asFilename edit.</body><body package="MenuPragma1-Example">openWorkspace   &lt;menuItem: #(#_Workspace #menus '&amp;Workspace')	 icon: #workspaceIcon	 nameKey: nil	 shortcutKeyCharacter: #F6	 shortcutModifiers: 0	 menu:#(#menuBar #file)	 position:20.01&gt;	Workspace open</body></methods><methods><class-id>Examples.MenuPragma1Example</class-id> <category>menus</category><body package="MenuPragma1-Example">fileMenu	&lt;submenu:#(#_File #menus '&amp;File')        nameKey:#file		menu:#(menuBar)	position: 10.0&gt;</body><body package="MenuPragma1-Example">helpMenu	&lt;submenu:#(#_Help #menus '&amp;Help') 	nameKey:#help	menu:#(menuBar)	position: 30.0&gt;</body></methods><methods><class-id>Examples.MenuPragma1Example class</class-id> <category>interface specs</category><body package="MenuPragma1-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'MenuCommandExample' 			#min: #(#{Core.Point} 174 142 ) 			#max: #(#{Core.Point} 300 300 ) 			#bounds: #(#{Graphics.Rectangle} 859 611 1152 838 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 35 0 -10 1 -10 1 ) 					#model: #files 					#menu: #menuBar ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.5 5 0 50 0.5 30 0 ) 					#model: #performer 					#label: 'Actions' 					#menu: #menuBar ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>