<?xml version="1.0"?><st-source><!-- Name: Editor1-ExampleNotice: Copyright 2001-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains Editor1Example, which demonstrates various techniques related to working with a Text Editor widget, including changing, editing, and formatting the text displayed in the editor.DbIdentifier: bear73DbTrace: 427929DbUsername: smichaelDbVersion: 8.0 - 1DevelopmentPrerequisites: #(#(#any 'UIPainter' ''))PackageName: Editor1-ExampleParcel: #('Editor1-Example')PrerequisiteParcels: #(#('UIPainter' ''))PrintStringCache: (8.0 - 1,smichael)Version: 8.0 - 1Date: 5:06:42 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:42 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Editor1Example</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes comment textStyle readOnly </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>Editor1-Example</package></attributes></class><comment><class-id>Examples.Editor1Example</class-id><body>Editor1Example demonstrates various techniques related to working with a Text Editor widget, including changing, editing, and formatting the text displayed in the editor.</body></comment><methods><class-id>Examples.Editor1Example</class-id> <category>actions</category><body package="Editor1-Example">alignCenter	| widget style |	widget := (self builder componentAt: #comment) widget.	style := widget textStyle copy.	style alignment: 2.	widget textStyle: style.	widget invalidate.</body><body package="Editor1-Example">alignLeft	| widget style |	widget := (self builder componentAt: #comment) widget.	style := widget textStyle copy.	style alignment: 0.	widget textStyle: style.	widget invalidate.</body><body package="Editor1-Example">alignRight	| widget style |	widget := (self builder componentAt: #comment) widget.	style := widget textStyle copy.	style alignment: 1.	widget textStyle: style.	widget invalidate.</body></methods><methods><class-id>Examples.Editor1Example</class-id> <category>change messages</category><body package="Editor1-Example">changedClass	"When the list selection changes, update the comment view."	| selectedClass txt start wrapper |	selectedClass := self classes selection.	selectedClass isNil		ifTrue: [self comment value: '' asText]		ifFalse: [			txt := (selectedClass asQualifiedReference value) comment.			self comment 				value: txt.			"Find and highlight the class name in the text."			start := txt 				indexOfSubCollection: selectedClass asString 				startingAt: 1.			start &gt; 0				ifTrue: [					wrapper := (self builder componentAt: #comment).					wrapper widget controller						selectAndScrollFrom: start 						to: start + selectedClass asString size - 1.					wrapper takeKeyboardFocus]].</body><body package="Editor1-Example">changedReadOnly	| c |	c := (self builder componentAt: #comment) widget controller.	c readOnly: (self readOnly value).</body><body package="Editor1-Example">changedStyle	"A text style was selected -- apply it to the current selection in the comment."	| c selectedText style |	"Get the selected text."	c := (builder componentAt: #comment) widget controller.	selectedText := c selection.	"If nothing is selected, take no action."	selectedText isEmpty ifTrue: [^self].	"If 'Plain' was selected, remove all emphases;	otherwise add the new emphasis."	style := self textStyle value.	style == #plain		ifTrue: [selectedText emphasizeAllWith: nil]		ifFalse: [			selectedText addEmphasis: (Array with: style)				removeEmphasis: nil				allowDuplicates: false].	"Ask the controller to insert the modified text, then update the view."	c replaceSelectionWith: selectedText.	c view resetSelections.	c view invalidate.</body></methods><methods><class-id>Examples.Editor1Example</class-id> <category>aspects</category><body package="Editor1-Example">classes	^classes</body><body package="Editor1-Example">comment	^comment</body><body package="Editor1-Example">readOnly	^readOnly</body><body package="Editor1-Example">textStyle	^textStyle</body></methods><methods><class-id>Examples.Editor1Example</class-id> <category>initialize-release</category><body package="Editor1-Example">initialize	super initialize.	comment := '' asValue.	classes := SelectionInList with: Core classNames.	classes selectionIndexHolder onChangeSend: #changedClass to: self.	textStyle := #plain asValue.	textStyle onChangeSend: #changedStyle to: self.	readOnly := false asValue.	readOnly onChangeSend: #changedReadOnly to: self.</body></methods><methods><class-id>Examples.Editor1Example class</class-id> <category>resources</category><body package="Editor1-Example">alignCenterImage	^(ToolbarIconLibrary visualFor: #alignVCenter)</body><body package="Editor1-Example">alignLeftImage	^(ToolbarIconLibrary visualFor: #alignLeft)</body><body package="Editor1-Example">alignRightImage	^(ToolbarIconLibrary visualFor: #alignRight)</body><body package="Editor1-Example">textStylesMenu	"UIMenuEditor new openOnClass: self andSelector: #textStylesMenu"	| mb |	mb := MenuBuilder new.	mb add: 'Plain' -&gt; #plain;		add: 'Bold' -&gt; #bold;		add: 'Italic' -&gt; #italic;		add: 'Underlined' -&gt; #underline.	^mb menu</body></methods><methods><class-id>Examples.Editor1Example class</class-id> <category>interface specs</category><body package="Editor1-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Editor1Example' 			#min: #(#{Core.Point} 497 262 ) 			#max: #(#{Core.Point} 1128 900 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1297 1010 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.249497 60 0 0 0.995976 0 0.997561 ) 					#name: #comment 					#model: #comment 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0.25 40 0 ) 					#label: 'Class Comment' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 60 0 0 0.25 -1 1 ) 					#flags: 15 					#model: #classes ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 40 ) 					#label: 'Class Names' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 47 0.25 5 0 69 0.25 27 0 ) 					#model: #alignLeft 					#label: #alignLeftImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 73 0.25 5 0 95 0.25 27 0 ) 					#model: #alignCenter 					#label: #alignCenterImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 98 0.25 5 0 120 0.25 27 0 ) 					#model: #alignRight 					#label: #alignRightImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 140 0.25 5 0 222 0.25 23 0 ) 					#model: #textStyle 					#label: 'Styles' 					#menu: #textStylesMenu ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 252 0.25 4 0 ) 					#model: #readOnly 					#label: 'Read Only' ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>