<?xml version="1.0"?><st-source><!-- Name: Text2-ExamplesNotice: Copyright 2013-2017 Cincom Systems, Inc.  All rights reserved.Comment: This package contains examples for the Text2 widgetsDbIdentifier: bear73DbTrace: 501647DbUsername: smichaelDbVersion: 8.3 - 5DevelopmentPrerequisites: #(#(#any 'Graphics-Text2-Document' '') #(#any 'UIBasics-Text2' '') #(#any 'Tools-IDE-ListIcons' ''))PackageName: Text2-ExamplesParcel: #('Text2-Examples')ParcelName: Text2-ExamplesPrerequisiteDescriptions: #(#(#name 'Graphics-Text2-Document' #componentType #package) #(#name 'UIBasics-Text2' #componentType #package) #(#name 'Tools-IDE-ListIcons' #componentType #package))PrerequisiteParcels: #(#('Graphics-Text2-Document' '') #('UIBasics-Text2' '') #('Tools-IDE-ListIcons' ''))PrintStringCache: (8.3 - 5,smichael)Version: 8.3 - 5Date: 5:06:40 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:40 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExampleInputEditor</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>document input1 input2 input3 input4 rightAlign centerAlign uidispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Text2-Examples</package></attributes></class><comment><class-id>Examples.ExampleInputEditor</class-id><body>An example application model for testing out the InputEditor widget.Examples.ExampleInputEditor open</body></comment><class><name>ExampleDocumentView</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>document headingStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Text2-Examples</package></attributes></class><comment><class-id>Examples.ExampleDocumentView</class-id><body>An example application model for testing out the DocumentView widget.Examples.ExampleDocumentView open</body></comment><class><name>ExampleDocumentEditor</name><environment>Examples</environment><super>Examples.ExampleDocumentView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Text2-Examples</package></attributes></class><comment><class-id>Examples.ExampleDocumentEditor</class-id><body>An example application model for testing out the DocumentEditor widget.Examples.ExampleDocumentEditor open</body></comment><methods><class-id>Examples.ExampleInputEditor</class-id> <category>aspects</category><body package="Text2-Examples">centerAlign	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^centerAlign isNil		ifTrue:			[centerAlign := ((Text2.Document new: 0)) asValue]		ifFalse:			[centerAlign]</body><body package="Text2-Examples">input1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^input1 isNil		ifTrue:			[input1 := ((Text2.Document new: 0)) asValue]		ifFalse:			[input1]</body><body package="Text2-Examples">input2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^input2 isNil		ifTrue:			[input2 := ((Text2.Document new: 0)) asValue]		ifFalse:			[input2]</body><body package="Text2-Examples">input3	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^input3 isNil		ifTrue:			[input3 := ((Text2.Document new: 0)) asValue]		ifFalse:			[input3]</body><body package="Text2-Examples">input4	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^input4 isNil		ifTrue:			[input4 := ((Text2.Document new: 0)) asValue]		ifFalse:			[input4]</body><body package="Text2-Examples">rightAlign	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^rightAlign isNil		ifTrue:			[rightAlign := ((Text2.Document new: 0)) asValue]		ifFalse:			[rightAlign]</body><body package="Text2-Examples">uidispatcher	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^uidispatcher isNil		ifTrue:			[uidispatcher := ((Text2.Document new: 0)) asValue]		ifFalse:			[uidispatcher]</body></methods><methods><class-id>Examples.ExampleInputEditor</class-id> <category>interface opening</category><body package="Text2-Examples">postBuildWith: aBuilder	(aBuilder componentAt: #InputEditor2) widget maxChars: 10.	(aBuilder componentAt: #InputEditor4) widget flow initializeForPassword</body></methods><methods><class-id>Examples.ExampleInputEditor</class-id> <category>actions - settings</category><body package="Text2-Examples">hasWindowDoubleBuffering	^self builder window damageRepairPolicy class == DoubleBufferingWindowDisplayPolicy</body><body package="Text2-Examples">toggleWindowDoubleBuffering	self hasWindowDoubleBuffering		ifTrue: [self builder window damageRepairPolicy: WindowDisplayPolicy new]		ifFalse: [self builder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new]</body></methods><methods><class-id>Examples.ExampleInputEditor</class-id> <category>actions</category><body package="Text2-Examples">dispatcherCanChange	Transcript cr; show: 'dispatcherCanChange'.	^true</body><body package="Text2-Examples">dispatcherCanEntry	Transcript cr; show: 'dispatcherCanEntry'.	^true</body><body package="Text2-Examples">dispatcherCanExit	Transcript cr; show: 'dispatcherCanExit'.	^true</body><body package="Text2-Examples">dispatcherChange	Transcript cr; show: 'dispatcherChange'</body><body package="Text2-Examples">dispatcherEntry	Transcript cr; show: 'dispatcherEntry'</body><body package="Text2-Examples">dispatcherExit	Transcript cr; show: 'dispatcherExit'</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>actions - settings</category><body package="Text2-Examples">hasHiddenCharacters	^self documentView showHiddenCharacters</body><body package="Text2-Examples">hasLineNumbers	^self documentView showLineNumbers</body><body package="Text2-Examples">hasLineStriping	^self documentView showLineStriping</body><body package="Text2-Examples">hasParagraphNumbers	^self documentView showParagraphNumbers</body><body package="Text2-Examples">hasShowInputCursor	^self documentView showInputCursor</body><body package="Text2-Examples">hasShowSelection	^self documentView showSelection</body><body package="Text2-Examples">hasWindowDoubleBuffering	^self builder window damageRepairPolicy class == DoubleBufferingWindowDisplayPolicy</body><body package="Text2-Examples">hasWordWrapping	^self documentView wordWrap</body><body package="Text2-Examples">toggleHiddenCharacters	self documentView showHiddenCharacters: self documentView showHiddenCharacters not</body><body package="Text2-Examples">toggleLineNumbers	self documentView showLineNumbers: self documentView showLineNumbers not.	self documentView showParagraphNumbers: false.	self documentView margin:		(self documentView margin copy			left: ((self documentView showLineNumbers or: [self documentView showParagraphNumbers]) ifTrue: [30] ifFalse: [2]);			yourself).</body><body package="Text2-Examples">toggleLineStriping	self documentView showLineStriping: self documentView showLineStriping not</body><body package="Text2-Examples">toggleParagraphNumbers	self documentView showParagraphNumbers: self documentView showParagraphNumbers not.	self documentView showLineNumbers: false.	self documentView margin:		(self documentView margin copy			left: ((self documentView showLineNumbers or: [self documentView showParagraphNumbers]) ifTrue: [30] ifFalse: [2]);			yourself).</body><body package="Text2-Examples">toggleShowInputCursor	self documentView showInputCursor: self documentView showInputCursor not</body><body package="Text2-Examples">toggleShowSelection	self documentView showSelection: self documentView showSelection not</body><body package="Text2-Examples">toggleWindowDoubleBuffering	self hasWindowDoubleBuffering		ifTrue: [self builder window damageRepairPolicy: WindowDisplayPolicy new]		ifFalse: [self builder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new]</body><body package="Text2-Examples">toggleWordWrapping	self documentView wordWrap: self documentView wordWrap not.	self documentView wordWrap		ifTrue: [self documentView container container container noHorizontalScrollbar]		ifFalse: [self documentView container container container useHorizontalScrollbar]</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>actions - examples</category><body package="Text2-Examples">openActionDocument	document value: self actionDocument.	self documentView forget</body><body package="Text2-Examples">openAdornmentDocument	document value: self adornmentDocument.	self documentView forget</body><body package="Text2-Examples">openAlignmentDocument	document value: self alignmentDocument.	self documentView forget</body><body package="Text2-Examples">openAllDocument	document value: self allDocument.	self documentView forget</body><body package="Text2-Examples">openAnnotationDocument	document value: self annotationDocument.	self documentView forget</body><body package="Text2-Examples">openCheckmarkListDocument	document value: self checkmarkListDocument.	self documentView forget</body><body package="Text2-Examples">openColorDocument	document value: self colorDocument.	self documentView forget</body><body package="Text2-Examples">openCursorDocument	document value: self cursorDocument.	self documentView forget</body><body package="Text2-Examples">openEmptyDocument	document value: self emptyDocument.	self documentView forget</body><body package="Text2-Examples">openFontsDocument	document value: self fontsDocument.	self documentView forget</body><body package="Text2-Examples">openHoverDocument	document value: self hoverDocument.	self documentView forget</body><body package="Text2-Examples">openIndentDocument	document value: self indentDocument.	self documentView forget</body><body package="Text2-Examples">openLargeDocument	document value: self largeDocument.	self documentView forget</body><body package="Text2-Examples">openListsDocument	document value: self listsDocument.	self documentView forget</body><body package="Text2-Examples">openMultilingualDocument	document value: self multilingualDocument.	self documentView forget</body><body package="Text2-Examples">openObjectMemoryDocument	document value: self objectMemoryDocument.	self documentView forget</body><body package="Text2-Examples">openPaddingDocument	document value: self paddingDocument.	self documentView forget</body><body package="Text2-Examples">openRandomCoreTextInstance	| instances instance |	instances := Core.Text allInstances select: [:each | each runs asSet size &gt; 1].	instance := (instances at: (instances size * Random new next) floor + 1).	document value: instance asDocument.	self documentView forget</body><body package="Text2-Examples">openSparkDocument	document value: self sparkDocument.	self documentView forget</body><body package="Text2-Examples">openVerticalAlignmentDocument	document value: self verticalAlignmentDocument.	self documentView forget</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>accessing - documents</category><body package="Text2-Examples">actionDocument	^Text2.Document new		insert: 'Click: ';		insert: '(Dialog warn: ''Hello!'')' style: (Text2.DocumentStyle new			action: (Text2.DocumentActionScript new sourceCode: 'Dialog warn: ''Hello!'''; yourself);			yourself);		insert: ' ';		insert: 'Click: ';		insert: '(http://www.cincomsmalltalk.com)' style: (Text2.DocumentStyle new			action: (Text2.DocumentActionHyperlink new url: 'http://www.cincomsmalltalk.com'; yourself);			yourself);		yourself</body><body package="Text2-Examples">adornmentDocument	| doc |	doc := Text2.Document new.	#(underline doubleUnderline dashedUnderline jaggedUnderline strikethrough overline shadow) with: #(blue green red orange gray cyan yellow) do: [:adornment :color |		doc insert: adornment asString style: (Text2.DocumentStyle new adornment: adornment; adornmentColor: (ColorValue perform: color)).		doc insertAt: doc size with: ' '].	^doc</body><body package="Text2-Examples">alignmentDocument	^Text2.Document new		insert: self loremIpsum style: (Text2.DocumentStyle new alignment: #left);		insert: (String with: Character cr with: Character cr);		insert: self loremIpsum style: (Text2.DocumentStyle new alignment: #center);		insert: (String with: Character cr with: Character cr);		insert: self loremIpsum style: (Text2.DocumentStyle new alignment: #right);		insert: (String with: Character cr with: Character cr);		insert: self loremIpsum style: (Text2.DocumentStyle new alignment: #justify);		yourself</body><body package="Text2-Examples">allDocument	| doc |	doc := Text2.Document new.	#(alignmentDocument indentDocument colorDocument paddingDocument adornmentDocument annotationDocument hoverDocument actionDocument cursorDocument verticalAlignmentDocument sparkDocument fontsDocument listsDocument checkmarkListDocument multilingualDocument) do: [:subdocument |		| heading |		heading := subdocument allButLast: 'Document' size.		heading at: 1 put: heading first asUppercase.		doc			insert: (self headingDocument: heading);			insert: (self perform: subdocument);			insert: (String with: Character cr with: Character cr)].	^doc</body><body package="Text2-Examples">annotationDocument	| annotationStyle |	annotationStyle := Text2.DocumentStyle new.	annotationStyle fontDescription italic: true.	^Text2.Document new		insert: 'Gila' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'now' style: annotationStyle));		insert: ' ';		insert: 'aburun' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'their' style: annotationStyle));		insert: ' ';		insert: 'ferma' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'farm' style: annotationStyle));		insert: ' ';		insert: 'hamiÅ¡aluÇ§' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'forever' style: annotationStyle));		insert: ' ';		insert: 'gÃ¼Ç§Ã¼na' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'behind' style: annotationStyle));		insert: ' ';		insert: 'amuqÊ¼daÄ' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'won''t stay' style: annotationStyle));		insert: (String with: Character cr with: Character cr);		insert: 'AnnotationStyleStretch' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle));		insert: ' ';		insert: 'AnnotationStyleStretch' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle));		insert: ' ';		insert: 'AnnotationStyleStretch' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle));		insert: (String with: Character cr with: Character cr);		insert: 'AnnotationStyleWrap' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle); annotationStyle: #wrap; yourself);		insert: ' ';		insert: 'AnnotationStyleWrap' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle); annotationStyle: #wrap; yourself);		insert: ' ';		insert: 'AnnotationStyleWrap' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle); annotationStyle: #wrap; yourself);		insert: (String with: Character cr with: Character cr);		insert: 'AnnotationStyleDodge' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle); annotationStyle: #dodge; yourself);		insert: ' ';		insert: 'AnnotationStyleDodge' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle); annotationStyle: #dodge; yourself);		insert: ' ';		insert: 'AnnotationStyleDodge' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'An annotation that is long enough' style: annotationStyle); annotationStyle: #dodge; yourself);		insert: (String with: Character cr with: Character cr);		insert: 'AnnotationMouse' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'AnnotationMouse - Cursor' style: (annotationStyle copy cursor: #earth; yourself)); annotationStyle: #dodge; yourself);		insert: ' ';		insert: 'AnnotationMouse' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'AnnotationMouse - Hover' style: (annotationStyle copy hover: 'Annotation Hover'; yourself)); annotationStyle: #dodge; yourself);		insert: ' ';		insert: 'AnnotationMouse' style: (Text2.DocumentStyle new annotation: (Text2.Document fromString: 'AnnotationMouse - Action' style: (annotationStyle copy action: (Text2.DocumentActionScript new sourceCode: 'Dialog warn: ''Hi!'''); yourself)); annotationStyle: #dodge; yourself);		yourself</body><body package="Text2-Examples">checkmarkListDocument	| list1 list2 style |	style := Text2.DocumentStyle default copy		fontDescription: (Text2.DocumentStyle default fontDescription copy			pixelSize: 14;			yourself);		intern.	list1 := Object new.	list2 := Object new.	^Text2.Document new		insert: (Text2.DocumentCheckListItem id: list1 checked: false cross: false style: style); insert: 'Item 1';		insert: (Text2.DocumentCheckListItem id: list1 checked: true cross: false style: style); insert: 'Item 2';		insert: (Text2.DocumentCheckListItem id: list1 checked: false cross: false style: style); insert: 'Item 3';			insert: (Text2.DocumentCheckListItem id: list2 checked: false cross: true style: style); insert: 'Item 3.1';			insert: (Text2.DocumentCheckListItem id: list2 checked: true cross: true style: style); insert: 'Item 3.2';		insert: (Text2.DocumentCheckListItem id: list1 checked: true cross: false style: style); insert: 'Item 4';		yourself</body><body package="Text2-Examples">colorDocument	| doc |	doc := Text2.Document new.	ColorValue constantNames with: ColorValue constantNames reverse do: [:colorName :backgroundColorName |		doc insert: colorName, ' + ', backgroundColorName style: (Text2.DocumentStyle new			color: (ColorValue perform: colorName);			backgroundColor: (ColorValue perform: backgroundColorName))].	^doc</body><body package="Text2-Examples">cursorDocument	| doc |	doc := Text2.Document new.	#(bull caret ibeam crossHair database earth hand marker pendingHyperlink scroll square wait)  do: [:cursorName |		doc insert: cursorName asString style: (Text2.DocumentStyle new cursor: cursorName; yourself).		doc insertAt: doc size with: ' '].	^doc</body><body package="Text2-Examples">emptyDocument	^Text2.Document new</body><body package="Text2-Examples">fontsDocument	| doc |	doc := Text2.Document new.	#('helvetica' 'arial' '*sans*') with: #(24 20 16) do: [:family :pixelSize |		doc insert: family, ' ', pixelSize printString, ' ' style: (Text2.DocumentStyle new			fontDescription: (Text2.DocumentStyle default fontDescription copy				family: family;				pixelSize: pixelSize;				yourself))].	doc insert: (String with: Character cr).	#(32 28 24 20 16 12 11 10 8 4) do: [:pixelSize |		doc insert: pixelSize printString, ' ' style: (Text2.DocumentStyle new			fontDescription: (Text2.DocumentStyle default fontDescription copy				family: #('helvetica' 'arial' '*sans*');				pixelSize: pixelSize;				yourself))].	^doc</body><body package="Text2-Examples">headingDocument: aHeading	^Text2.Document new		insert: aHeading style: headingStyle;		insert: (String with: Character cr);		yourself</body><body package="Text2-Examples">hoverDocument	^Text2.Document new		insert: 'Place mouse over me' style: (Text2.DocumentStyle new hover: self adornmentDocument; yourself);		yourself</body><body package="Text2-Examples">indentDocument	^Text2.Document new		insert: self loremIpsum style: (Text2.DocumentStyle new firstLineIndent: 30; lineIndent: 10; yourself);		yourself</body><body package="Text2-Examples">largeDocument	| doc |	doc := Text2.Document new.	1000 timesRepeat: [doc insert: self loremIpsum, '' style: Text2.DocumentStyle default].	^doc</body><body package="Text2-Examples">listsDocument	| list1 list2 list3 |	(list1 := Text2.DocumentListItem type: #bullet) suffix: ''.	list2 := Text2.DocumentListItem type: #romanLowercase.	list3 := Text2.DocumentListItem type: #katakana.	^Text2.Document new		insert: list1; insert: 'Item 1.1';		insert: list1; insert: 'Item 1.2';		  insert: (String with: 16r2028 asCharacter), 'Item 1.2a';		  insert: (String with: 16r2028 asCharacter), 'Item 1.2b';		insert: list1; insert: 'Item 1.3';			insert: list2; insert: 'Item 2.1';			  insert: (String with: 16r2028 asCharacter), 'Item 2.1a';			  insert: (String with: 16r2028 asCharacter), 'Item 2.1b';			insert: list2; insert: 'Item 2.2';				insert: list3; insert: 'Item 3.1';				insert: list3; insert: 'Item 3.2';				insert: list3; insert: 'Item 3.3';				insert: list3; insert: 'Item 3.4';		insert: list1; insert: 'Item 1.4';		yourself</body><body package="Text2-Examples">multilingualDocument"	^Text2.Document new		insert: self english;		insert: ' ';		insert: self hebrew;		yourself"	| left right |	(left := Text2.DocumentStyle new) direction: #leftToRight.	(right := Text2.DocumentStyle new) direction: #rightToLeft.	^Text2.Document new		insert: self english;		insert: (String with: Character cr);		insert: self hebrew;		insert: (String with: Character cr);		insert: self english; insert: ' '; insert: self hebrew; insert: ' '; insert: self hebrew; insert: ' '; insert: self english; insert: ' '; insert: self hebrew;		insert: (String with: Character cr);		insert: self hebrew; insert: ' '; insert: self english; insert: ' '; insert: self english; insert: ' '; insert: self hebrew; insert: ' '; insert: self english;		insert: (String with: Character cr);		insert: self english; insert: ' '; insert: (String with: 16r202E asCharacter); insert: '('; insert: self english; insert: ') '; insert: (String with: 16r202C asCharacter); insert: self english;		insert: (String with: Character cr);		insert: self hebrew; insert: ' '; insert: (String with: 16r202D asCharacter); insert: '('; insert: self hebrew; insert: ') '; insert: (String with: 16r202C asCharacter); insert: self hebrew;		insert: (String with: Character cr);		insert: self arabic; insert: ' '; insert: self arabicNumbers;		insert: (String with: Character cr);		insert: self english; insert: ' '; insert: self arabicNumbers;		insert: (String with: Character cr);		insert: self arabic; insert: ' '; insert: self englishNumbers;		insert: (String with: Character cr);		insert: self english; insert: ' '; insert: self englishNumbers;		insert: (String with: Character cr);		insert: self arabic style: left; insert: ' ' style: left; insert: self arabicNumbers style: left;		insert: (String with: Character cr);		insert: self arabic style: left; insert: ' ' style: left; insert: self englishNumbers style: left;		insert: (String with: Character cr);		insert: self arabic style: right; insert: ' ' style: right; insert: self arabicNumbers style: right;		insert: (String with: Character cr);		insert: self arabic style: right; insert: ' ' style: right; insert: self englishNumbers style: right;		insert: (String with: Character cr);		yourself</body><body package="Text2-Examples">objectMemoryDocument	^ObjectMemory comment asDocument</body><body package="Text2-Examples">paddingDocument	^Text2.Document new		insert: self loremIpsum style: (Text2.DocumentStyle new padding: 20);		yourself</body><body package="Text2-Examples">sparkDocument	| random data spark |	random := Random new.	data := (1 to: 20) collect: [:i | random next * 1.5 - 0.5].	spark := Text2.DocumentSpark fromData: data style: (Text2.DocumentStyle new color: ColorValue darkGray).	^Text2.Document new		insert: 'The goal of a sparkline is to represent data ';		insert: spark;		insert: ' inline with other relevant information.';		yourself</body><body package="Text2-Examples">verticalAlignmentDocument	| big |	big := Text2.DocumentStyle new.	big fontDescription pixelSize: 75.	^Text2.Document new		insert: 'X' style: big;		insert: ' ' style: Text2.DocumentStyle new;		insert: 'bottom: ' style: (Text2.DocumentStyle new verticalAlignment: #bottom);		insert: (Text2.DocumentImage fromImage: Refactory.Browser.PrerequisiteIcons activeRescan baseline: 40 style: (Text2.DocumentStyle new verticalAlignment: #bottom));		insert: ' baseline: ' style: (Text2.DocumentStyle new verticalAlignment: #baseline);		insert: (Text2.DocumentImage fromImage: Refactory.Browser.PrerequisiteIcons activeRescan baseline: 40 style: (Text2.DocumentStyle new verticalAlignment: #baseline));		insert: ' center: ' style: (Text2.DocumentStyle new verticalAlignment: #center);		insert: (Text2.DocumentImage fromImage: Refactory.Browser.PrerequisiteIcons activeRescan baseline: 40 style: (Text2.DocumentStyle new verticalAlignment: #center));		insert: ' top: ' style: (Text2.DocumentStyle new verticalAlignment: #top);		insert: (Text2.DocumentImage fromImage: Refactory.Browser.PrerequisiteIcons activeRescan baseline: 40 style: (Text2.DocumentStyle new verticalAlignment: #top));		insert: ' bottom: ' style: (Text2.DocumentStyle new verticalAlignment: #bottom);		insert: (Text2.DocumentImage fromImage: BehaviorIcons ApplicationModel style: (Text2.DocumentStyle new verticalAlignment: #bottom));		insert: ' baseline: ' style: (Text2.DocumentStyle new verticalAlignment: #baseline);		insert: (Text2.DocumentImage fromImage: BehaviorIcons ApplicationModel style: (Text2.DocumentStyle new verticalAlignment: #baseline));		insert: ' center: ' style: (Text2.DocumentStyle new verticalAlignment: #center);		insert: (Text2.DocumentImage fromImage: BehaviorIcons ApplicationModel style: (Text2.DocumentStyle new verticalAlignment: #center));		insert: ' top: ' style: (Text2.DocumentStyle new verticalAlignment: #top);		insert: (Text2.DocumentImage fromImage: BehaviorIcons ApplicationModel style: (Text2.DocumentStyle new verticalAlignment: #top));		yourself</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>aspects</category><body package="Text2-Examples">document	^document</body><body package="Text2-Examples">documentView	^self widgetAt: #DocumentView</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>accessing - strings</category><body package="Text2-Examples">arabic	^String withAll: (#(1575 1604 1593 1585 1576 1610 1577) collect: #asCharacter)</body><body package="Text2-Examples">arabicNumbers	^String withAll: (#(1632 1633 1634 1635 1636 1637 1638 1639 1640 1641) collect: #asCharacter)</body><body package="Text2-Examples">english	^'English'</body><body package="Text2-Examples">englishNumbers	^'0123456789'</body><body package="Text2-Examples">hebrew	^String withAll: (#(16r05E2 16r05B4 16r05D1 16r05B0 16r05E8 16r05B4 16r05D9 16r05EA) collect: #asCharacter)</body><body package="Text2-Examples">loremIpsum	^'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>initialize-release</category><body package="Text2-Examples">initialize	super initialize.	headingStyle := (Text2.DocumentStyle new			color: ColorValue darkGray;			alignment: #center;			adornment: #doubleUnderline;			fontDescription: (Text2.DocumentStyle default fontDescription copy				boldness: 0.8;				pixelSize: 24;				yourself)).	document := self allDocument asValue</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>actions - document</category><body package="Text2-Examples">bossIn	"This message can only be sent when BOSS is loaded so it is OK to assume it is.	 Still, we avoid a hard reference to it, in case it isn't loaded."	| nameString boss stream objects |	nameString := Dialog 		requestFileNameWithMessage: (#BOSSInFromC &lt;&lt; #dialogs &gt;&gt; 'BOSS In From:') 		default: '*.bos'		version: #mustBeOld		ifFail: ['']		for: nil.	nameString isEmpty ifTrue: [^self].	stream := nameString asFilename readStream.	[boss := #{BinaryObjectStorage} value onOldNoScan: stream.	objects := boss next] 		ensure: [stream close].	document value: objects asDocument.	self documentView forget</body><body package="Text2-Examples">bossOut	"This message can only be sent when BOSS is loaded so it is OK to assume it is.	 Still, we avoid a hard reference to it, in case it isn't loaded."	| nameString boss stream objects |	nameString := Dialog 		requestFileNameWithMessage: (#BOSSOutToC &lt;&lt; #dialogs &gt;&gt; 'BOSS Out To:') 		default: 'objects.bos'		version: #new		ifFail: ['']		for: nil.	nameString isEmpty ifTrue: [^self].	objects := self document value asDocument.	stream := nameString asFilename writeStream.	[boss := #{BinaryObjectStorage} value onNew: stream.	boss nextPut: objects] 		ensure: [stream close]</body><body package="Text2-Examples">relayout	self documentView flow layout.	self documentView invalidate</body></methods><methods><class-id>Examples.ExampleDocumentView</class-id> <category>testing</category><body package="Text2-Examples">canBOSSObjects	^#{BinaryObjectStorage} isDefined</body></methods><methods><class-id>Examples.ExampleDocumentEditor</class-id> <category>actions - selection</category><body package="Text2-Examples">apply: changeType toSelection: aBlockClosure	self documentView restyle: [:style |		| copy |		copy := style copy.		aBlockClosure value: copy.		copy]</body><body package="Text2-Examples">hasStyleBold	^self documentView currentStyle fontDescription boldness &gt; 0.5</body><body package="Text2-Examples">hasStyleItalic	^self documentView currentStyle fontDescription italic = true</body><body package="Text2-Examples">setAdornmentColor	| dialog value |	dialog := ColorSelectionDialog new.	dialog selection: self documentView currentStyle adornmentColor.	dialog open.	dialog accept value ifFalse: [^self].	value := dialog selection.	self apply: #changeAdornmentColor toSelection: [:style | style adornmentColor: value]</body><body package="Text2-Examples">setAdornmentDashedUnderline	self apply: #changeAdornment toSelection: [:style | style adornment: #dashedUnderline]</body><body package="Text2-Examples">setAdornmentDoubleUnderline	self apply: #changeAdornment toSelection: [:style | style adornment: #doubleUnderline]</body><body package="Text2-Examples">setAdornmentJaggedUnderline	self apply: #changeAdornment toSelection: [:style | style adornment: #jaggedUnderline]</body><body package="Text2-Examples">setAdornmentNone	self apply: #changeAdornment toSelection: [:style | style adornment: #none]</body><body package="Text2-Examples">setAdornmentOverline	self apply: #changeAdornment toSelection: [:style | style adornment: #overline]</body><body package="Text2-Examples">setAdornmentShadow	self apply: #changeAdornment toSelection: [:style | style adornment: #shadow]</body><body package="Text2-Examples">setAdornmentStrikethrough	self apply: #changeAdornment toSelection: [:style | style adornment: #strikethrough]</body><body package="Text2-Examples">setAdornmentUnderline	self apply: #changeAdornment toSelection: [:style | style adornment: #underline]</body><body package="Text2-Examples">setAnnotation	| value |	value := Dialog request: 'Annotation' initialAnswer: '' onCancel: [^self].	value := value asDocument.	self apply: #changeAnnotation toSelection: [:style | style annotation: value]</body><body package="Text2-Examples">setAnnotationBackgroundColor	| dialog value |	dialog := ColorSelectionDialog new.	self documentView currentStyle annotationBackgroundColor == CoverageValue transparent ifFalse: [		dialog selection: self documentView currentStyle annotationBackgroundColor].	dialog open.	dialog accept value ifFalse: [^self].	value := dialog selection.	self apply: #changeAnnotationBackgroundColor toParagraph: [:style | style annotationBackgroundColor: value]</body><body package="Text2-Examples">setAnnotationDodge	self apply: #changeAnnotationStyle toSelection: [:style | style annotationStyle: #dodge]</body><body package="Text2-Examples">setAnnotationStretch	self apply: #changeAnnotationStyle toSelection: [:style | style annotationStyle: #stretch]</body><body package="Text2-Examples">setAnnotationWrap	self apply: #changeAnnotationStyle toSelection: [:style | style annotationStyle: #wrap]</body><body package="Text2-Examples">setBackgroundColor	| dialog value |	dialog := ColorSelectionDialog new.	self documentView currentStyle backgroundColor == CoverageValue transparent ifFalse: [		dialog selection: self documentView currentStyle backgroundColor].	dialog open.	dialog accept value ifFalse: [^self].	value := dialog selection.	self apply: #changeBackgroundColor toSelection: [:style | style backgroundColor: value]</body><body package="Text2-Examples">setColor	| dialog value |	dialog := ColorSelectionDialog new.	dialog selection: self documentView currentStyle color.	dialog open.	dialog accept value ifFalse: [^self].	value := dialog selection.	self apply: #changeColor toSelection: [:style | style color: value]</body><body package="Text2-Examples">setFontFamily	| fontFamilies fontFamilyLabels family |	fontFamilies := Screen default defaultFontPolicy availableFonts collect: #family.	fontFamilies remove: nil ifAbsent: [].	fontFamilies := fontFamilies asSet asSortedCollection asOrderedCollection.	fontFamilyLabels := fontFamilies collect: [:each | each copyReplaceAll: '_' with: ' '].	family := Dialog choose: 'Font Family' fromList: fontFamilyLabels values: fontFamilies lines: 20 cancel: [^self].	self apply: #changeFontFamily toSelection: [:style |		style fontDescription:			(style fontDescription copy				family: family;				yourself)]</body><body package="Text2-Examples">setFontSize	| value |	value := Dialog request: 'Font Size' initialAnswer: self documentView currentStyle fontDescription pixelSize printString onCancel: [^self].	value := value asNumber.	self apply: #changeFontSize toSelection: [:style |		style fontDescription:			(style fontDescription copy				pixelSize: value;				yourself)]</body><body package="Text2-Examples">setHover	| value |	value := Dialog request: 'Hover' initialAnswer: '' onCancel: [^self].	value := value asDocument.	self apply: #changeHover toSelection: [:style | style hover: value]</body><body package="Text2-Examples">setSmalltalkScriptAction	| sourceCode |	sourceCode := ''.	self documentView currentStyle action ifNotNil: [:action | 		action class == Text2.DocumentActionScript ifTrue: [			sourceCode := action sourceCode]].	sourceCode := Dialog request: 'Action' initialAnswer: sourceCode onCancel: [^self].	self apply: #changeAction toSelection: [:style | style action: (Text2.DocumentActionScript new sourceCode: sourceCode; yourself)]</body><body package="Text2-Examples">setStyleVerticalAlignBaseline	self apply: #changeVerticalAlignment toSelection: [:style | style verticalAlignment: #baseline]</body><body package="Text2-Examples">setStyleVerticalAlignBottom	self apply: #changeVerticalAlignment toSelection: [:style | style verticalAlignment: #bottom]</body><body package="Text2-Examples">setStyleVerticalAlignTop	self apply: #changeVerticalAlignment toSelection: [:style | style verticalAlignment: #top]</body><body package="Text2-Examples">toggleStyleBold	self documentView restyle: [:style | style copy fontDescription:		(style fontDescription copy			boldness: (style fontDescription boldness = 0.5 ifTrue: [0.7] ifFalse: [0.5]);			yourself);		yourself]</body><body package="Text2-Examples">toggleStyleItalic	self documentView restyle: [:style | style copy fontDescription:		(style fontDescription copy			italic: style fontDescription italic not;			yourself);		yourself]</body></methods><methods><class-id>Examples.ExampleDocumentEditor</class-id> <category>actions - document</category><body package="Text2-Examples">insertArabicSample	self documentView insert: self arabic copy</body><body package="Text2-Examples">insertBulletList	self documentView insertDocument:		((Text2.DocumentListItem type: #bullet style: self documentView currentStyle)			suffix: '';			yourself)</body><body package="Text2-Examples">insertCombiningMark	self documentView insert: (String with: 16r0302 asCharacter)</body><body package="Text2-Examples">insertDecimalList	self documentView insertDocument: (Text2.DocumentListItem type: #decimal style: self documentView currentStyle)</body><body package="Text2-Examples">insertEnglishSample	self documentView insert: self english copy</body><body package="Text2-Examples">insertHebrewSample	self documentView insert: self hebrew copy</body><body package="Text2-Examples">insertImage1	self documentView insertImage: BehaviorIcons ApplicationModel</body><body package="Text2-Examples">insertImage2	self documentView insertImage: (Refactory.Browser.PrerequisiteIcons activeRescan image magnifiedBy: 4 @ 4)</body><body package="Text2-Examples">insertKatakanaList	self documentView insertDocument: (Text2.DocumentListItem type: #katakana style: self documentView currentStyle)</body><body package="Text2-Examples">insertRomanNumeralsList	self documentView insertDocument: (Text2.DocumentListItem type: #romanUppercase style: self documentView currentStyle)</body><body package="Text2-Examples">overrideDirectionLeftToRight	self documentView invalidateSelectionWhile: [		self documentView flow insertAt: self documentView paragraphStopPosition with: (String with: 16r202C asCharacter).		self documentView flow insertAt: self documentView paragraphStartPosition with: (String with: 16r202D asCharacter)]</body><body package="Text2-Examples">overrideDirectionRightToLeft	self documentView invalidateSelectionWhile: [		self documentView flow insertAt: self documentView paragraphStopPosition with: (String with: 16r202C asCharacter).		self documentView flow insertAt: self documentView paragraphStartPosition with: (String with: 16r202E asCharacter)]</body></methods><methods><class-id>Examples.ExampleDocumentEditor</class-id> <category>actions - paragraph</category><body package="Text2-Examples">apply: changeType toParagraph: aBlockClosure	| newStyle |	self documentView		performChange: changeType		between: self documentView paragraphStartPosition		and: self documentView paragraphStopPosition		with: (self documentView document			copyBetween: self documentView paragraphStartPosition			and: self documentView paragraphStopPosition			apply: [:style |				| copy |				copy := style copy.				aBlockClosure value: copy.				copy])		shouldMoveCursors: false.	newStyle := self documentView currentStyle copy.	aBlockClosure value: newStyle.	self documentView currentStyle: newStyle</body><body package="Text2-Examples">setAlignmentCenter	self apply: #changeAlignment toParagraph: [:style | style alignment: #center]</body><body package="Text2-Examples">setAlignmentJustify	self apply: #changeAlignment toParagraph: [:style | style alignment: #justify]</body><body package="Text2-Examples">setAlignmentLeft	self apply: #changeAlignment toParagraph: [:style | style alignment: #left]</body><body package="Text2-Examples">setAlignmentRight	self apply: #changeAlignment toParagraph: [:style | style alignment: #right]</body><body package="Text2-Examples">setDirectionAuto	self apply: #changeDirection toParagraph: [:style | style direction: #auto]</body><body package="Text2-Examples">setDirectionLeftToRight	self apply: #changeDirection toParagraph: [:style | style direction: #leftToRight]</body><body package="Text2-Examples">setDirectionRightToLeft	self apply: #changeDirection toParagraph: [:style | style direction: #rightToLeft]</body><body package="Text2-Examples">setFirstLineIndent	| value |	value :=Dialog request: 'First Line Indent' initialAnswer: self documentView currentStyle firstLineIndent printString onCancel: [^self].	value := value asNumber.	self apply: #changeFirstLineIndent toParagraph: [:style | style firstLineIndent: value]</body><body package="Text2-Examples">setLineIndent	| value |	value :=Dialog request: 'Line Indent' initialAnswer: self documentView currentStyle lineIndent printString onCancel: [^self].	value := value asNumber.	self apply: #changeLineIndent toParagraph: [:style | style lineIndent: value]</body><body package="Text2-Examples">setLineSpacing	| value |	value :=Dialog request: 'Line Spacing' initialAnswer: self documentView currentStyle lineSpacing printString onCancel: [^self].	value := value asNumber.	self apply: #changeLineSpacing toParagraph: [:style | style lineSpacing: value]</body><body package="Text2-Examples">setPadding	| value |	value :=Dialog request: 'Padding' initialAnswer: self documentView currentStyle padding left printString onCancel: [^self].	value := value asNumber.	self apply: #changePadding toParagraph: [:style | style padding: value]</body><body package="Text2-Examples">setParagraphBackgroundColor	| dialog value |	dialog := ColorSelectionDialog new.	self documentView currentStyle paragraphBackgroundColor == CoverageValue transparent ifFalse: [		dialog selection: self documentView currentStyle paragraphBackgroundColor].	dialog open.	dialog accept value ifFalse: [^self].	value := dialog selection.	self apply: #changeParagraphBackgroundColor toParagraph: [:style | style paragraphBackgroundColor: value]</body><body package="Text2-Examples">setParagraphSpacing	| value |	value :=Dialog request: 'Paragraph Spacing' initialAnswer: self documentView currentStyle paragraphSpacing printString onCancel: [^self].	value := value asNumber.	self apply: #changeLineSpacing toParagraph: [:style | style paragraphSpacing: value]</body></methods><methods><class-id>Examples.ExampleDocumentEditor</class-id> <category>initialize-release</category><body package="Text2-Examples">initialize	super initialize.	document := Text2.Document new asValue</body></methods><methods><class-id>Examples.ExampleDocumentEditor</class-id> <category>actions - settings</category><body package="Text2-Examples">isReadOnly	^self documentView isReadOnly</body><body package="Text2-Examples">toggleReadOnly	self documentView isReadOnly: self documentView isReadOnly not</body></methods><methods><class-id>Examples.ExampleInputEditor class</class-id> <category>resources</category><body package="Text2-Examples">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Settings' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Window: Double Buffering' 							#value: #toggleWindowDoubleBuffering 							#indication: false 							#indicationSelector: #hasWindowDoubleBuffering ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.ExampleInputEditor class</class-id> <category>interface specs</category><body package="Text2-Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'InputEditor - Examples' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 1179 605 1379 835 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 5 0 -5 1 30 0 ) 					#name: #InputEditor1 					#isOpaque: true 					#model: #input1 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true 					#defaultString: 'Type Here...' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 35 0 -5 1 60 0 ) 					#name: #InputEditor2 					#isOpaque: true 					#model: #input2 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 65 0 -5 1 90 0 ) 					#name: #InputEditor3 					#isOpaque: true 					#model: #input3 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 99 0 -5 1 120 0 ) 					#name: #InputEditor4 					#isOpaque: true 					#model: #input4 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 100 0 30 0 ) 					#name: #Label1 					#label: 'Regular Input' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 35 0 100 0 60 0 ) 					#name: #Label2 					#label: 'maxChars: 10' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 65 0 100 0 90 0 ) 					#name: #Label3 					#label: 'Format' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 105 0 55 0 120 0 ) 					#name: #Label4 					#label: 'Password' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 137 0 ) 					#name: #Label5 					#label: 'Right Align' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 132 0 -5 1 151 0 ) 					#name: #InputEditor5 					#isOpaque: true 					#model: #rightAlign 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true 					#alignment: #right ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 162 0 -5 1 181 0 ) 					#name: #InputEditor6 					#isOpaque: true 					#model: #centerAlign 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true 					#alignment: #center ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 167 0 ) 					#name: #Label6 					#label: 'Center Align' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 196 0 ) 					#name: #Label7 					#label: 'UIDispatcher' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 188 0 -5 1 212 0 ) 					#name: #InputEditor7 					#isOpaque: true 					#model: #uidispatcher 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #dispatcherEntry 						#focusOutSelector: #dispatcherExit 						#valueChangeSelector: #dispatcherChange 						#requestFocusInSelector: #dispatcherCanEntry 						#requestFocusOutSelector: #dispatcherCanExit 						#requestValueChangeSelector: #dispatcherCanChange ) 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>Examples.ExampleDocumentView class</class-id> <category>resources</category><body package="Text2-Examples">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Examples' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Empty' 							#nameKey: #openEmptyDocument 							#value: #openEmptyDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'All Examples' 							#nameKey: #openAllDocument 							#value: #openAllDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'ObjectMemory comment' 							#value: #openObjectMemoryDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Random Core.Text instance' 							#value: #openRandomCoreTextInstance ) 						#(#{UI.MenuItem} 							#rawLabel: 'Large Document' 							#value: #openLargeDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Alignment' 							#value: #openAlignmentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Indent' 							#value: #openIndentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Color' 							#value: #openColorDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Padding' 							#value: #openPaddingDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Adornment' 							#value: #openAdornmentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Hover' 							#value: #openHoverDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Annotation' 							#value: #openAnnotationDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Action' 							#value: #openActionDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cursor' 							#value: #openCursorDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Vertical Alignment' 							#value: #openVerticalAlignmentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Sparklines' 							#value: #openSparkDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Fonts' 							#value: #openFontsDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Lists' 							#value: #openListsDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Checkmarks' 							#value: #openCheckmarkListDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Multilingual' 							#value: #openMultilingualDocument ) ) #(5 15 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Settings' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Word Wrapping' 							#value: #toggleWordWrapping 							#indication: true 							#indicationSelector: #hasWordWrapping ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Input Cursor' 							#value: #toggleShowInputCursor 							#indication: true 							#indicationSelector: #hasShowInputCursor ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Selection' 							#value: #toggleShowSelection 							#indication: true 							#indicationSelector: #hasShowSelection ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Paragraph Numbers' 							#value: #toggleParagraphNumbers 							#indication: false 							#indicationSelector: #hasParagraphNumbers ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Line Numbers' 							#value: #toggleLineNumbers 							#indication: false 							#indicationSelector: #hasLineNumbers ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Line Striping' 							#value: #toggleLineStriping 							#indication: false 							#indicationSelector: #hasLineStriping ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Hidden Characters' 							#value: #toggleHiddenCharacters 							#indication: false 							#indicationSelector: #hasHiddenCharacters ) 						#(#{UI.MenuItem} 							#rawLabel: 'Window: Double Buffering' 							#value: #toggleWindowDoubleBuffering 							#indication: false 							#indicationSelector: #hasWindowDoubleBuffering ) ) #(1 2 4 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Document' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Relayout' 							#value: #relayout ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BossInDots 								#defaultString: 'Boss In...' 								#catalogID: #menus ) 							#value: #bossIn 							#visibilitySelector: #canBOSSObjects ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BossOutDots 								#defaultString: 'Boss Out...' 								#catalogID: #menus ) 							#value: #bossOut 							#visibilitySelector: #canBOSSObjects ) ) #(3 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.ExampleDocumentView class</class-id> <category>interface specs</category><body package="Text2-Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'DocumentView - Examples' 			#bounds: #(#{Graphics.Rectangle} 926 438 1634 1003 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DocumentViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #DocumentView 					#flags: 5 					#isOpaque: true 					#model: #document 					#isWrapped: true 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: false 					#showSelection: true ) ) ) )</body></methods><methods><class-id>Examples.ExampleDocumentEditor class</class-id> <category>resources</category><body package="Text2-Examples">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Examples' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Empty' 							#nameKey: #openEmptyDocument 							#value: #openEmptyDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'All Examples' 							#nameKey: #openAllDocument 							#value: #openAllDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'ObjectMemory comment' 							#value: #openObjectMemoryDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Random Core.Text instance' 							#value: #openRandomCoreTextInstance ) 						#(#{UI.MenuItem} 							#rawLabel: 'Large Document' 							#value: #openLargeDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Alignment' 							#value: #openAlignmentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Indent' 							#value: #openIndentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Color' 							#value: #openColorDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Padding' 							#value: #openPaddingDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Adornment' 							#value: #openAdornmentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Annotation' 							#value: #openAnnotationDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Hover' 							#value: #openHoverDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Action' 							#value: #openActionDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cursor' 							#value: #openCursorDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Vertical Alignment' 							#value: #openVerticalAlignmentDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Sparklines' 							#value: #openSparkDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Fonts' 							#value: #openFontsDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Lists' 							#value: #openListsDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Checkmarks' 							#value: #openCheckmarkListDocument ) 						#(#{UI.MenuItem} 							#rawLabel: 'Multilingual' 							#value: #openMultilingualDocument ) ) #(5 15 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Settings' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Word Wrapping' 							#value: #toggleWordWrapping 							#indication: true 							#indicationSelector: #hasWordWrapping ) 						#(#{UI.MenuItem} 							#rawLabel: 'Read Only' 							#value: #toggleReadOnly 							#indication: false 							#indicationSelector: #isReadOnly ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Input Cursor' 							#value: #toggleShowInputCursor 							#indication: true 							#indicationSelector: #hasShowInputCursor ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Selection' 							#value: #toggleShowSelection 							#indication: true 							#indicationSelector: #hasShowSelection ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Paragraph Numbers' 							#value: #toggleParagraphNumbers 							#indication: false 							#indicationSelector: #hasParagraphNumbers ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Line Numbers' 							#value: #toggleLineNumbers 							#indication: false 							#indicationSelector: #hasLineNumbers ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Line Striping' 							#value: #toggleLineStriping 							#indication: false 							#indicationSelector: #hasLineStriping ) 						#(#{UI.MenuItem} 							#rawLabel: 'Draw Hidden Characters' 							#value: #toggleHiddenCharacters 							#indication: false 							#indicationSelector: #hasHiddenCharacters ) 						#(#{UI.MenuItem} 							#rawLabel: 'Window: Double Buffering' 							#value: #toggleWindowDoubleBuffering 							#indication: false 							#indicationSelector: #hasWindowDoubleBuffering ) ) #(2 2 4 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Document' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Relayout' 							#value: #relayout ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BossInDots 								#defaultString: 'Boss In...' 								#catalogID: #menus ) 							#value: #bossIn 							#visibilitySelector: #canBOSSObjects ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BossOutDots 								#defaultString: 'Boss Out...' 								#catalogID: #menus ) 							#value: #bossOut 							#visibilitySelector: #canBOSSObjects ) 						#(#{UI.MenuItem} 							#rawLabel: 'Insert English Sample' 							#value: #insertEnglishSample ) 						#(#{UI.MenuItem} 							#rawLabel: 'Insert Hebrew Sample' 							#value: #insertHebrewSample ) 						#(#{UI.MenuItem} 							#rawLabel: 'Insert Arabic Sample' 							#value: #insertArabicSample ) 						#(#{UI.MenuItem} 							#rawLabel: 'Insert Combining Mark (hat) Sample' 							#value: #insertCombiningMark ) 						#(#{UI.MenuItem} 							#rawLabel: 'Insert Image 1' 							#value: #insertImage1 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Insert Image 2' 							#value: #insertImage2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Insert List' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Bullet' 										#value: #insertBulletList ) 									#(#{UI.MenuItem} 										#rawLabel: 'Decimal' 										#value: #insertDecimalList ) 									#(#{UI.MenuItem} 										#rawLabel: 'Roman Numerals' 										#value: #insertRomanNumeralsList ) 									#(#{UI.MenuItem} 										#rawLabel: 'Katakana' 										#value: #insertKatakanaList ) ) #(4 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Override Selection Left to Right' 							#value: #overrideDirectionLeftToRight ) 						#(#{UI.MenuItem} 							#rawLabel: 'Override Selection Right To Left' 							#value: #overrideDirectionRightToLeft ) ) #(3 4 2 1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Paragraph' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Alignment' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Left' 										#value: #setAlignmentLeft ) 									#(#{UI.MenuItem} 										#rawLabel: 'Center' 										#value: #setAlignmentCenter ) 									#(#{UI.MenuItem} 										#rawLabel: 'Right' 										#value: #setAlignmentRight ) 									#(#{UI.MenuItem} 										#rawLabel: 'Justify' 										#value: #setAlignmentJustify ) ) #(4 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Direction' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Auto' 										#value: #setDirectionAuto ) 									#(#{UI.MenuItem} 										#rawLabel: 'Left to Right' 										#value: #setDirectionLeftToRight ) 									#(#{UI.MenuItem} 										#rawLabel: 'Right to Left' 										#value: #setDirectionRightToLeft ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'First Line Indent...' 							#value: #setFirstLineIndent ) 						#(#{UI.MenuItem} 							#rawLabel: 'Line Indent...' 							#value: #setLineIndent ) 						#(#{UI.MenuItem} 							#rawLabel: 'Line Spacing...' 							#value: #setLineSpacing ) 						#(#{UI.MenuItem} 							#rawLabel: 'Paragraph Spacing...' 							#value: #setParagraphSpacing ) 						#(#{UI.MenuItem} 							#rawLabel: 'Padding...' 							#value: #setPadding ) 						#(#{UI.MenuItem} 							#rawLabel: 'Background Color...' 							#value: #setParagraphBackgroundColor ) ) #(8 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Selection' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Font' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Family...' 										#value: #setFontFamily ) 									#(#{UI.MenuItem} 										#rawLabel: 'Size...' 										#value: #setFontSize ) 									#(#{UI.MenuItem} 										#rawLabel: 'Color...' 										#value: #setColor ) 									#(#{UI.MenuItem} 										#rawLabel: 'Bold' 										#value: #toggleStyleBold 										#indication: false 										#indicationSelector: #hasStyleBold ) 									#(#{UI.MenuItem} 										#rawLabel: 'Italic' 										#value: #toggleStyleItalic 										#indication: false 										#indicationSelector: #hasStyleItalic ) ) #(5 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Vertical Alignment' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Top' 										#value: #setStyleVerticalAlignTop ) 									#(#{UI.MenuItem} 										#rawLabel: 'Baseline' 										#value: #setStyleVerticalAlignBaseline ) 									#(#{UI.MenuItem} 										#rawLabel: 'Bottom' 										#value: #setStyleVerticalAlignBottom ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Adornment' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'None' 										#value: #setAdornmentNone ) 									#(#{UI.MenuItem} 										#rawLabel: 'Underline' 										#value: #setAdornmentUnderline ) 									#(#{UI.MenuItem} 										#rawLabel: 'Double Underline' 										#value: #setAdornmentDoubleUnderline ) 									#(#{UI.MenuItem} 										#rawLabel: 'Dashed Underline' 										#value: #setAdornmentDashedUnderline ) 									#(#{UI.MenuItem} 										#rawLabel: 'Jagged Underline' 										#value: #setAdornmentJaggedUnderline ) 									#(#{UI.MenuItem} 										#rawLabel: 'Strike-Through' 										#value: #setAdornmentStrikethrough ) 									#(#{UI.MenuItem} 										#rawLabel: 'Overline' 										#value: #setAdornmentOverline ) 									#(#{UI.MenuItem} 										#rawLabel: 'Shadow' 										#value: #setAdornmentShadow ) 									#(#{UI.MenuItem} 										#rawLabel: 'Color...' 										#value: #setAdornmentColor ) ) #(9 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Action' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Smalltalk Script...' 										#value: #setSmalltalkScriptAction ) 									#(#{UI.MenuItem} 										#rawLabel: 'Hyperlink...' 										#value: #setHyperlinkAction ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Annotation...' 							#value: #setAnnotation 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Text...' 										#value: #setAnnotation ) 									#(#{UI.MenuItem} 										#rawLabel: 'Background Color...' 										#value: #setAnnotationBackgroundColor ) 									#(#{UI.MenuItem} 										#rawLabel: 'Style: Stretch' 										#value: #setAnnotationStretch ) 									#(#{UI.MenuItem} 										#rawLabel: 'Style: Wrap' 										#value: #setAnnotationWrap ) 									#(#{UI.MenuItem} 										#rawLabel: 'Style: Dodge' 										#value: #setAnnotationDodge ) ) #(5 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Hover...' 							#value: #setHover ) 						#(#{UI.MenuItem} 							#rawLabel: 'Background Color...' 							#value: #setBackgroundColor ) ) #(7 ) nil ) ) ) #(5 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.ExampleDocumentEditor class</class-id> <category>interface specs</category><body package="Text2-Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'DocumentEditor - Examples' 			#bounds: #(#{Graphics.Rectangle} 926 438 1634 1003 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DocumentEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #DocumentView 					#flags: 5 					#isOpaque: true 					#model: #document 					#isWrapped: true 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>