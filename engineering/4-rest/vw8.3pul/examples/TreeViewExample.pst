<?xml version="1.0"?><st-source><!-- Name: TreeViewExampleNotice: Copyright 2001-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains AdvancedTreeViewExample and TreeViewExample, which demonstrates the use of the TreeView widget.DbIdentifier: bear73DbTrace: 427968DbUsername: smichaelDbVersion: 8.0 - 1PackageName: TreeView-ExampleParcel: #('TreeView-Example')ParcelName: TreeViewExamplePrintStringCache: (8.0 - 1,smichael)Version: 8.0 - 1Date: 5:06:45 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:45 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>TreeTestNode</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>children editedDisplayString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples</category><attributes><package>TreeView-Example</package></attributes></class><comment><class-id>Examples.TreeTestNode</class-id><body>This class provides the nodes to be displayed in the TreeView Example.</body></comment><class><name>AdvancedTreeViewExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>treeView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples</category><attributes><package>TreeView-Example</package></attributes></class><comment><class-id>Examples.AdvancedTreeViewExample</class-id><body>This class demonstrates the use of the TreeView. It uses individually assigned display-blocks to show different icons for opened and closed nodes in the tree.Instance Variables:treeView	&lt;SelectionInList&gt;	holds the tree's model</body></comment><class><name>TreeViewExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>treeView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples</category><attributes><package>TreeView-Example</package></attributes></class><comment><class-id>Examples.TreeViewExample</class-id><body>To test the TreeView take a look at the class protocol: examples.</body></comment><methods><class-id>Examples.TreeTestNode</class-id> <category>accessing</category><body package="TreeView-Example">children	^children isNil ifTrue: [children := Array new] ifFalse: [children]</body><body package="TreeView-Example">children: aCollection	children := aCollection</body><body package="TreeView-Example">childrenImage	^self class perform: (#img , self children size printString) asSymbol</body><body package="TreeView-Example">inPlaceEdited: aString	editedDisplayString := aString</body><body package="TreeView-Example">zeroImage	^self class img0</body></methods><methods><class-id>Examples.TreeTestNode</class-id> <category>printing</category><body package="TreeView-Example">displayString	| str |	str := (String new: 20) writeStream.	self printOn: str.	str nextPutAll: ' (children: '; nextPutAll: self children size printString; nextPut: $).	^str contents</body><body package="TreeView-Example">mayEditedDisplayString	^editedDisplayString isNil		ifTrue: ['-not edited yet-']		ifFalse: [editedDisplayString]</body><body package="TreeView-Example">printStringInTestApp	| str |	str := (String new: 20) writeStream.	self printOn: str.	str nextPutAll: ' ('; nextPutAll: self children size printString; nextPut: $).	^str contents</body></methods><methods><class-id>Examples.TreeTestNode class</class-id> <category>examples</category><body package="TreeView-Example">example1	"self example1"	| x |	x := self new children: (Array with: (self new children: (Array with: self new))					with: self new).	^x</body><body package="TreeView-Example">example2	"self example2"	| x |	x := self new children: (Array with: self example1 with: self example1 with: self example1 with: self example1).	^x</body></methods><methods><class-id>Examples.AdvancedTreeViewExample</class-id> <category>actions</category><body package="TreeView-Example">doubleClick: aTreeController	"Let the tree toggle the state of expandation of the selected node."	aTreeController toggleExpand</body></methods><methods><class-id>Examples.AdvancedTreeViewExample</class-id> <category>private</category><body package="TreeView-Example">iconFor: aTreeModel at: index	^(aTreeModel isLeafAtIndex: index)		ifTrue: ["Leaf node icon"			self class noFolder]		ifFalse: [(aTreeModel isOpenedAtIndex: index)				ifTrue: ["Use the open folder if the node is expanded"					self class openFolder]				ifFalse: ["Otherwise use the closed folder"					self class closedFolder]]</body></methods><methods><class-id>Examples.AdvancedTreeViewExample</class-id> <category>interface opening</category><body package="TreeView-Example">postBuildWith: aBuilder	| treeViewWidget |	super postBuildWith: aBuilder.	self treeView list		root: Object		displayIt: true		childrenBlock: [:cls | cls subclasses select: [:ea | ea isMeta not]].	treeViewWidget := (aBuilder componentAt: #treeView) widget.	treeViewWidget visualBlock: [:view :index | (view sequence wrapperAt: index)			wrappedWithLabel: view displayStringSelector			andIcon: (self iconFor: view sequence at: index)			attributes: view textStyle].	treeViewWidget		selectedVisualBlock:			[:view :index |			| wrapper |			wrapper := (view sequence wrapperAt: index)						wrappedWithLabel: view displayStringSelector						andIcon: (self iconFor: view sequence at: index)						attributes: view textStyle.			wrapper component selected setValue: true.			wrapper]</body></methods><methods><class-id>Examples.AdvancedTreeViewExample</class-id> <category>aspects</category><body package="TreeView-Example">treeView	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^treeView isNil		ifTrue:			[treeView := SelectionInTree new]		ifFalse:			[treeView]</body></methods><methods><class-id>Examples.AdvancedTreeViewExample class</class-id> <category>examples</category><body package="TreeView-Example">example1	"Display the Smalltalk class hierarchy with open, closed and no folder icons with double click support"	"self example1"	self open</body><body package="TreeView-Example">example2	"Display the Smalltalk class hierarchy with open, closed and no folder icons with double click support, with hover overlay of clipped items."	"self example2"	| app |	app := self new.	self openOn: app.	(app widgetAt: #treeView) exposeElementIfClipped</body></methods><methods><class-id>Examples.TreeViewExample</class-id> <category>menu actions</category><body package="TreeView-Example">inspectItem	| sel |	(sel := self treeView selection) isNil		ifTrue: [Dialog warn: 'Nothing selected.']		ifFalse: [sel inspect]</body></methods><methods><class-id>Examples.TreeViewExample</class-id> <category>aspects</category><body package="TreeView-Example">treeView	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^treeView isNil		ifTrue:			[treeView := SelectionInList new]		ifFalse:			[treeView]</body></methods><methods><class-id>Examples.TreeViewExample class</class-id> <category>examples</category><body package="TreeView-Example">example1	"Display the Smalltalk class hierarchy with standard folder icons"	"self example1"	| app |	app := self new.	self openOn: app.	app treeView list		root: Object		displayIt: true		childrenBlock: [:cls | cls subclasses select: [:ea | ea isMeta not]]</body><body package="TreeView-Example">example2	"Display a sample collection of TestNode(s) with standard folder icons"	"self example2"	| app |	app := self new.	self openOn: app.	app treeView list root: TreeTestNode example2</body><body package="TreeView-Example">example3	"Display a sample collection of TestNode(s) without any icons"	"self example3"	| app |	app := self new.	self openOn: app withSpec: #testNodesAsTextSpec.	app treeView list root: TreeTestNode example2</body><body package="TreeView-Example">example4	"Display a sample collection of TestNode(s) with two user defined icons"	"self example4"	| app |	app := self new.	self openOn: app withSpec: #testNodesWithIconsSpec.	app treeView list root: TreeTestNode example2</body><body package="TreeView-Example">example5	"Display a sample collection of TestNode(s) whose display string can be changed via in-place editing"	"self example5"	| app |	app := self new.	self openOn: app withSpec: #editingTestNodesSpec.	app treeView list root: TreeTestNode example2</body><body package="TreeView-Example">example6	"Display the collection class hierarchy with standard folder icons but without lines."	"self example6"	| app |	app := self new.	self openOn: app.	app treeView list		root: Collection		displayIt: true		childrenBlock: [:cls | cls subclasses select: [:ea | ea isMeta not]].	(app builder componentAt: #treeView) widget noLinesAndImages</body><body package="TreeView-Example">example7	"Display a sample collection of TestNode(s) with standard folder icons, with hover overlay of clipped items."	"self example7"	| app |	app := self new.	self openOn: app.	(app widgetAt: #treeView) exposeElementIfClipped.	app treeView list root: TreeTestNode example2</body><body package="TreeView-Example">example8	"Display a sample collection of TestNode(s) without any icons, with hover overlay of clipped items."	"self example8"	| app |	app := self new.	self openOn: app withSpec: #testNodesAsTextSpec.	(app widgetAt: #treeView) exposeElementIfClipped.	app treeView list root: TreeTestNode example2</body></methods><methods><class-id>Examples.TreeTestNode class</class-id> <category>resources</category><body package="TreeView-Example">img0	"UIMaskEditor new openOnClass: self andSelector: #img0"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 2) at: 1 put: ColorValue lightGray; at: 2 put: ColorValue red; yourself)) usingBits: #[0 0 0 0 7 224 0 0 7 240 0 0 12 48 0 0 12 48 0 0 12 48 0 0 12 48 0 0 12 48 0 0 12 48 0 0 12 48 0 0 12 48 0 0 12 48 0 0 12 48 0 0 15 240 0 0 3 224 0 0 0 0 0 0])</body><body package="TreeView-Example">img1	"UIMaskEditor new openOnClass: self andSelector: #img1"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 2) at: 1 put: ColorValue lightGray; at: 2 put: ColorValue red; yourself)) usingBits: #[0 0 0 0 0 64 0 0 1 224 0 0 3 224 0 0 3 96 0 0 7 96 0 0 6 96 0 0 6 96 0 0 4 96 0 0 0 96 0 0 0 96 0 0 0 96 0 0 0 96 0 0 0 96 0 0 0 64 0 0 0 0 0 0])</body><body package="TreeView-Example">img2	"UIMaskEditor new openOnClass: self andSelector: #img2"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 2) at: 1 put: ColorValue lightGray; at: 2 put: ColorValue red; yourself)) usingBits: #[0 0 0 0 3 128 0 0 15 192 0 0 12 96 0 0 12 48 0 0 0 48 0 0 0 48 0 0 0 96 0 0 0 192 0 0 1 128 0 0 3 0 0 0 6 0 0 0 12 0 0 0 15 224 0 0 15 224 0 0 0 0 0 0])</body><body package="TreeView-Example">img3	"UIMaskEditor new openOnClass: self andSelector: #img3"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 2) at: 1 put: ColorValue lightGray; at: 2 put: ColorValue red; yourself)) usingBits: #[0 0 0 0 3 128 0 0 15 192 0 0 12 96 0 0 12 48 0 0 0 48 0 0 0 112 0 0 3 224 0 0 3 224 0 0 0 112 0 0 0 48 0 0 12 48 0 0 12 96 0 0 15 192 0 0 3 128 0 0 0 0 0 0])</body><body package="TreeView-Example">img4	"UIMaskEditor new openOnClass: self andSelector: #img4"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 2) at: 1 put: ColorValue lightGray; at: 2 put: ColorValue red; yourself)) usingBits: #[0 0 0 0 0 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 13 128 0 0 13 128 0 0 13 128 0 0 15 240 0 0 15 240 0 0 1 128 0 0 1 128 0 0 1 128 0 0 1 128 0 0 1 128 0 0 0 0 0 0])</body></methods><methods><class-id>Examples.AdvancedTreeViewExample class</class-id> <category>resources</category><body package="TreeView-Example">closedFolder	"UIMaskEditor new openOnClass: self andSelector: #closedFolder"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@13 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 5 put: (ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); yourself)) usingBits: #[34 35 51 51 34 34 34 34 34 52 20 20 50 34 34 34 35 65 65 65 67 51 51 50 35 34 34 34 34 34 34 48 35 33 65 65 65 65 65 48 35 36 20 20 20 20 20 48 35 33 65 65 65 65 65 48 35 36 20 20 20 20 20 48 35 33 65 65 65 65 65 48 35 36 20 20 20 20 20 48 35 33 65 65 65 65 65 48 35 51 51 51 51 51 51 48 34 0 0 0 0 0 0 0])</body><body package="TreeView-Example">noFolder	"UIMaskEditor new openOnClass: self andSelector: #noFolder"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@13 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 85 85 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0])</body><body package="TreeView-Example">openFolder	"UIMaskEditor new openOnClass: self andSelector: #openFolder"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@13 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: (ColorValue scaledRed: 6167 scaledGreen: 6167 scaledBlue: 6167); at: 2 put: ColorValue black; at: 3 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 4 put: ColorValue white; at: 5 put: ColorValue yellow; yourself)) usingBits: #[51 50 34 34 51 51 51 51 51 36 68 68 35 51 51 51 50 68 64 64 66 34 34 35 50 68 4 4 4 68 68 33 50 64 64 64 64 64 68 33 34 34 34 34 34 34 36 33 36 68 68 68 68 66 16 33 36 4 4 4 4 4 18 33 34 64 64 64 64 64 33 33 50 68 4 4 4 4 1 33 51 36 64 64 64 64 66 17 51 34 34 34 34 34 34 17 51 49 17 17 17 17 17 17])</body><body package="TreeView-Example">treeViewMenu	"MenuEditor new openOnClass: self andSelector: #treeViewMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'expand' 				#value: #expand ) 			#(#{UI.MenuItem} 				#rawLabel: 'expand fully' 				#value: #expandFully ) 			#(#{UI.MenuItem} 				#rawLabel: 'contract' 				#value: #contractFully ) ) #(2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.AdvancedTreeViewExample class</class-id> <category>interface specs</category><body package="TreeView-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Advanced Tree Demo' 			#bounds: #(#{Graphics.Rectangle} 700 498 900 703 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #treeView 					#model: #treeView 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: 						#doubleClick: ) 					#menu: #treeViewMenu 					#useIcons: #none 					#autoSelect: true ) ) ) )</body></methods><methods><class-id>Examples.TreeViewExample class</class-id> <category>interface specs</category><body package="TreeView-Example">editingTestNodesSpec	"UIPainter new openOnClass: self andSelector: #editingTestNodesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'TreeView Example:Edit Nodes' 			#bounds: #(#{Graphics.Rectangle} 700 498 900 703 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0 0 0 ) 					#isOpaque: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0 0 0 ) 					#isOpaque: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0 0 0 ) 					#isOpaque: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0 0 0 ) 					#isOpaque: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -95 1 -30 1 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Exit' 					#defaultable: true ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -35 1 ) 					#model: #treeView 					#displayStringSelector: #mayEditedDisplayString 					#useIcons: #folder 					#autoSelect: true 					#inPlaceEditedSelector: 					#inPlaceEdited: ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0 0 0 ) 					#isOpaque: true ) ) ) )</body><body package="TreeView-Example">testNodesAsTextSpec	"UIPainter new openOnClass: self andSelector: #testNodesAsTextSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'TreeView Example:Nodes As Text' 			#bounds: #(#{Graphics.Rectangle} 700 498 900 703 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #treeView 					#model: #treeView 					#menu: #treeViewMenu 					#displayStringSelector: #printStringInTestApp 					#useIcons: #none 					#autoSelect: true ) ) ) )</body><body package="TreeView-Example">testNodesWithIconsSpec	"UIPainter new openOnClass: self andSelector: #testNodesWithIconsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'TreeView Example:Nodes With Icons' 			#bounds: #(#{Graphics.Rectangle} 700 498 900 703 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #treeView 					#model: #treeView 					#useIcons: #other 					#iconSelectors: #(#zeroImage #childrenImage ) 					#autoSelect: false ) ) ) )</body><body package="TreeView-Example">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'TreeView Example' 			#bounds: #(#{Graphics.Rectangle} 700 498 900 703 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #treeView 					#model: #treeView 					#menu: #treeViewMenu 					#useIcons: #folder 					#autoSelect: true ) ) ) )</body></methods><methods><class-id>Examples.TreeViewExample class</class-id> <category>resources</category><body package="TreeView-Example">treeViewMenu	"MenuEditor new openOnClass: self andSelector: #treeViewMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'expand' 				#value: #expand ) 			#(#{UI.MenuItem} 				#rawLabel: 'expand fully' 				#value: #expandFully ) 			#(#{UI.MenuItem} 				#rawLabel: 'contract' 				#value: #contractFully ) 			#(#{UI.MenuItem} 				#rawLabel: 'inspect' 				#value: #inspectItem ) ) #(2 1 1 ) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>