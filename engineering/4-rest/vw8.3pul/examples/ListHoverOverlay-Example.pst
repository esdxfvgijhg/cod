<?xml version="1.0"?><st-source><!-- Name: ListHoverOverlay-ExampleNotice: Copyright 2011-2014 Cincom Systems, Inc.  All rights reserved.Comment: This parcel/package contains a set of examples which demonstrate configuring tooltips or hover overlay for sequence items in the SequenceView class hierarchy.DbIdentifier: bear73DbTrace: 427994DbUsername: smichaelDbVersion:  7.9 - 8PackageName: ListHoverOverlay-ExampleParcel: #('ListHoverOverlay-Example')PrintStringCache: ( 7.9 - 8,smichael)Version:  7.9 - 8Date: 5:06:48 PM May 26, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:06:48 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BasicListExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes exampleTitle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Help</category><attributes><package>ListHoverOverlay-Example</package></attributes></class><comment><class-id>Examples.BasicListExample</class-id><body>To test the widgets, take a look at the class protocol: examples in each of the concrete subclasses.</body></comment><class><name>TreeViewHoverExample</name><environment>Examples</environment><super>Examples.BasicListExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ListHoverOverlay-Example</package></attributes></class><comment><class-id>Examples.TreeViewHoverExample</class-id><body>TreeViewHoverExample uses a TreeView widget to display a hierarchical list of the classes in the Magnitude hierarchy</body></comment><class><name>ExampleListNode</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value iconBlock children </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ListHoverOverlay-Example</package></attributes></class><comment><class-id>Examples.ExampleListNode</class-id><body>ExampleListNode holds an object and is used to populate lists for the examples here.Instance Variables	children	&lt;OrderedCollection&gt;	a collection fo child objects	iconBlock	&lt;BlockClosure&gt;	a single argument block that answers an icon for the object	value	&lt;Object&gt;	some object</body></comment><class><name>HoverPropertiesAssistant</name><environment>UI</environment><super>UI.SequenceHoverAssistant</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ListHoverOverlay-Example</package></attributes></class><comment><class-id>UI.HoverPropertiesAssistant</class-id><body>For use in testing or examples where we want the properties box to remain open until the element is exited.</body></comment><class><name>HierarchyListHoverExample</name><environment>Examples</environment><super>Examples.BasicListExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars>root </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ListHoverOverlay-Example</package></attributes></class><comment><class-id>Examples.HierarchyListHoverExample</class-id><body>HierarchyListHoverExample uses a HierarchicalList widget to display a hierarchical list of the classes in the Magnitude hierarchy.Instance Variables	root	&lt;ExampleListNode&gt;	the hierarchy list root tree</body></comment><class><name>SimpleListHoverExample</name><environment>Examples</environment><super>Examples.BasicListExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>colorList </class-inst-vars><imports></imports><category></category><attributes><package>ListHoverOverlay-Example</package></attributes></class><comment><class-id>Examples.SimpleListHoverExample</class-id><body>SimpleListHoverExample uses a List widget to display and alphabetical list of the classes in the Magnitude hierarchy.The view's visual blocks are not automatically set, so we use #blocksForIcon:andText: to set them so that tooltips can be enabled.</body></comment><methods><class-id>Examples.BasicListExample</class-id> <category>aspects</category><body package="ListHoverOverlay-Example">classes	^classes</body></methods><methods><class-id>Examples.BasicListExample</class-id> <category>initialize-release</category><body package="ListHoverOverlay-Example">initialize	super initialize.	self initializeClasses.</body><body package="ListHoverOverlay-Example">initializeClasses	"Initialize the classes widget according to the requirements of the subcanvas spec."	^self subclassResponsibility</body></methods><methods><class-id>Examples.BasicListExample</class-id> <category>accessing</category><body package="ListHoverOverlay-Example">exampleDescription	^self subclassResponsibility</body><body package="ListHoverOverlay-Example">exampleTitle	^exampleTitle ifNil: ['&lt;unknown&gt;']</body><body package="ListHoverOverlay-Example">exampleTitle: aString	exampleTitle := aString</body></methods><methods><class-id>Examples.BasicListExample</class-id> <category>tooltip blocks</category><body package="ListHoverOverlay-Example">boundsProperties: aName for: aBox on: aStream	aStream		cr;		tab;		nextPutAll: ('&lt;1s&gt;: [ &lt;2p&gt; ]   w: &lt;3p&gt;, h: &lt;4p&gt;'					expandMacrosWith: aName					with: aBox origin					with: aBox width					with: aBox height)</body><body package="ListHoverOverlay-Example">boundsPropertiesText	| titleStyle baseStyle |	titleStyle := Array with: #color -&gt; SymbolicPaint inactiveForeground				with: #bold.	baseStyle := Array with: #normal.	^	[:view |	| index wBox vBnds eBnds tBnds ttGraphic oBox veBnds |	index := view mouseOverIndex.	(view isValidIndex: index)		ifTrue: 			[| label class stream |			label := (view visualComponentForElementIndex: index) bottomComponent.			class := view elementAt: index.			stream := TextStream on: String new.			stream				emphasis: (Array with: #bold);				nextPutAll: ('&lt;1s&gt; [&lt;2s&gt;]' expandMacrosWith: view class name							with: label class name);				cr;				tab;				emphasis: titleStyle;				nextPutAll: ('[&lt;1p&gt;] &lt;2s&gt;' expandMacrosWith: index with: class name);				emphasis: baseStyle;				cr;				nextPutAll: 'Global Bounds:'.			wBox := view topComponent displayBox.			self boundsProperties: 'Window' for: wBox on: stream.			vBnds := view globalBounds.			self boundsProperties: 'View' for: vBnds on: stream.			eBnds := view globalBoundsOfElementAt: index.			self boundsProperties: 'Label' for: eBnds on: stream.			tBnds := view globalBoundsOfElementTextAt: index.			self boundsProperties: 'Text' for: tBnds on: stream.			"Get the displayBox for a standard item overlay, not for this tooltip supplier."			ttGraphic := (view defaultItemTextBlock value: class value: view value: index)						asTooltipGraphicFor: view.			oBox := tBnds						expandedBy: (ttGraphic asVisualPart preferredExtent - tBnds extent max: 0) half								truncated.			self boundsProperties: 'Overlay' for: oBox on: stream.			stream				cr;				nextPutAll: 'Local Bounds:'.			veBnds := view boundsOfElementIndex: index inBounds: view bounds.			self boundsProperties: 'Element' for: veBnds on: stream.			stream				cr;				nextPutAll: 'Internal Height (actual):';				cr;				tab;				nextPutAll: ('grid height [ &lt;1p&gt; ]' expandMacrosWith: view lineGrid);				cr;				tab;				nextPutAll: ('label height [ &lt;1p&gt; ]'							expandMacrosWith: label preferredHeight);				cr;				tab;				nextPutAll: ('icon height [ &lt;1p&gt; ]'							expandMacrosWith: (label icon ifNotNil: #preferredHeight));				cr;				tab;				nextPutAll: ('text height [ &lt;1p&gt; ]'							expandMacrosWith: label attributes lineGrid);				cr.			ComposedText withText: stream contents]		ifFalse: [nil]]</body><body package="ListHoverOverlay-Example">classPropertiesText	| titleStyle baseStyle |	titleStyle := Array with: #color -&gt; SymbolicPaint inactiveForeground				with: #bold.	baseStyle := Array with: #normal.	^	[:view |	| index |	index := view mouseOverIndex.	(view isValidIndex: index)		ifTrue: 			[| stream class |			class := view elementAt: index.			stream := TextStream on: String new.			stream				emphasis: (Array with: #bold);				nextPutAll: 'Class: ' , class name;				cr;				tab;				emphasis: titleStyle;				nextPutAll: 'Variables - Instance: ';				emphasis: baseStyle;				nextPutAll: class allInstVarNames size printString;				nextPutAll: ', ';				emphasis: titleStyle;				nextPutAll: 'Class: ';				emphasis: baseStyle;				nextPutAll: class allClassVarNames size printString;				cr;				tab;				emphasis: titleStyle;				nextPutAll: 'Methods - Instance: ';				emphasis: baseStyle;				nextPutAll: class selectors size printString;				nextPutAll: ', ';				emphasis: titleStyle;				nextPutAll: 'Class: ';				emphasis: baseStyle;				nextPutAll: class class selectors size printString.			ComposedText withText: stream contents]		ifFalse: [nil]]</body><body package="ListHoverOverlay-Example">propertiesBlockOffset	^[10 @ 18]</body></methods><methods><class-id>Examples.BasicListExample class</class-id> <category>instance creation</category><body package="ListHoverOverlay-Example">newWithTitle	^self new exampleTitle: thisContext sender selector printString</body></methods><methods><class-id>Examples.TreeViewHoverExample</class-id> <category>interface opening</category><body package="ListHoverOverlay-Example">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(aBuilder componentAt: #classes) widget useImage: #icon</body></methods><methods><class-id>Examples.TreeViewHoverExample</class-id> <category>initialize-release</category><body package="ListHoverOverlay-Example">initializeClasses	"Initialize the classes widget according to the requirements of the subcanvas spec."	| root |	root := ExampleListNode on: Magnitude.	root		iconBlock: [:val | val toolListIcon];		populateChildren: [:cls | cls subclasses select: [:ea | ea isMeta not]].	classes := MultiSelectionInTree new.	classes		list: ((TreeModel on: root) expand: 1)</body></methods><methods><class-id>Examples.TreeViewHoverExample</class-id> <category>accessing</category><body package="ListHoverOverlay-Example">exampleDescription	^'TreeView'</body></methods><methods><class-id>Examples.TreeViewHoverExample class</class-id> <category>examples</category><body package="ListHoverOverlay-Example">example1	"Use a TreeView widget to display the classes.  The default is a list hover overlay configured to display the full text of any item in the sequence list which is otherwise clipped by its view."	"self example1"	| app |	app := self newWithTitle.	self openOn: app</body><body package="ListHoverOverlay-Example">example2	"Use a TreeView widget to display the classes, with a list hover overlay configured to display the full text of any item in the sequence list."	"self example2"	| app |	app := self newWithTitle.	self openOn: app.	(app widgetAt: #classes)		exposeElementAll</body><body package="ListHoverOverlay-Example">example3	"Use a TreeView widget to display the classes, with a list hover overlay configured to display some properties of any item in the sequence list."	"self example3"	| app widget |	app := self newWithTitle.	self openOn: app.	widget := app widgetAt: #classes.	widget		elementTooltip: app classPropertiesText;		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset.</body><body package="ListHoverOverlay-Example">example4	"Use a TreeView widget to display the classes, with a list hover overlay configured to display some properties of any item in the sequence list.  This example reveals bounds properties as well as grid, label, icon and text actual heights."	"self example4"	| app widget |	app := self newWithTitle.	self openOn: app.	widget := app widgetAt: #classes.	"We're using a custom TooltipAssistant with a specialized stateMachine,	 so we need to explicitly add it and provide the tooltip block."	(widget addTooltipAssistant: HoverPropertiesAssistant)		tooltip: app boundsPropertiesText.	widget		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset</body></methods><methods><class-id>Examples.ExampleListNode</class-id> <category>accessing</category><body package="ListHoverOverlay-Example">children	^children ifNil: [children := OrderedCollection new]</body><body package="ListHoverOverlay-Example">children: aCollection	children := aCollection</body><body package="ListHoverOverlay-Example">icon	^iconBlock ifNotNil: [iconBlock value: value]</body><body package="ListHoverOverlay-Example">iconBlock	^iconBlock</body><body package="ListHoverOverlay-Example">iconBlock: aBlock	iconBlock := aBlock</body><body package="ListHoverOverlay-Example">value	^value</body><body package="ListHoverOverlay-Example">value: anObject	value := anObject</body></methods><methods><class-id>Examples.ExampleListNode</class-id> <category>printing</category><body package="ListHoverOverlay-Example">displayString	^value displayString</body><body package="ListHoverOverlay-Example">printString	| stream |	stream := String new writeStream.	stream		nextPutAll: 'Node on: (';		nextPutAll: self value printString;		nextPut: $).	^stream contents</body></methods><methods><class-id>Examples.ExampleListNode</class-id> <category>initialize-release</category><body package="ListHoverOverlay-Example">populateChildren: aChildCollectorBlock	| collection |	collection := aChildCollectorBlock value: self value.	collection isEmpty ifTrue: [^nil].	self children: (collection				collect: [:cls | (self class on: cls) iconBlock: self iconBlock]).	self children do: [:child | child populateChildren: aChildCollectorBlock]</body></methods><methods><class-id>Examples.ExampleListNode class</class-id> <category>instance creation</category><body package="ListHoverOverlay-Example">on: anObject	^self new value: anObject</body></methods><methods><class-id>UI.HoverPropertiesAssistant</class-id> <category>transitions</category><body package="ListHoverOverlay-Example">coldFrameEntered	"Be sure to respect the focus of the window containing the requesting view."	self isMyWindowActive ifFalse: [^self].	self hasTooltip		ifTrue: 			[self reserveWindow.			[self openTooltip] uiEventNowFor: view topComponent.			self log: #reaper.			stateMachine enterStateNamed: #reaper]</body></methods><methods><class-id>UI.HoverPropertiesAssistant</class-id> <category>private</category><body package="ListHoverOverlay-Example">buildStateMachine	"No timeout on the HoverHelpWindow"	| coldState reaperState |	stateMachine := StateMachine new.	"The first state defined becomes the initial state."	coldState := stateMachine newState: #cold.	reaperState := stateMachine newState: #reaper.	coldState		on: FrameEntered do: [self coldFrameEntered];		on: MouseOverIndexChanged do: [self coldFrameEntered].	reaperState		on: MouseOverIndexChanged do: [self reaperMouseOverIndexChanged];		on: FrameExited do: [self reaperFrameExited]</body></methods><methods><class-id>Examples.HierarchyListHoverExample</class-id> <category>accessing</category><body package="ListHoverOverlay-Example">exampleDescription	^'HierarchicalSequenceView'</body><body package="ListHoverOverlay-Example">root	^root</body></methods><methods><class-id>Examples.HierarchyListHoverExample</class-id> <category>initialize-release</category><body package="ListHoverOverlay-Example">initializeClasses	"Initialize the classes widget according to the requirements of the subcanvas spec."	root := Magnitude.	classes := IndentedTreeSelectionInList				listObjectHierarchy: #root				isLeafBlock: [:thing | (thing subclasses select: [:ea | ea isMeta not]) isEmpty]				childBlock: 					[:thing |					#root == thing ifTrue: [Array with: root] ifFalse: [thing subclasses select: [:ea | ea isMeta not]]]				childNameBlock: [:thing | thing name asString].	classes		expandedEmphasis: #();		open: root</body></methods><methods><class-id>Examples.HierarchyListHoverExample class</class-id> <category>examples</category><body package="ListHoverOverlay-Example">example1	"Use a HierarchicalList widget to display the classes.  The default is a list hover overlay configured to display the full text of any item in the sequence list which is otherwise clipped by its view."	"self example1"	| app |	app := self newWithTitle.	self openOn: app</body><body package="ListHoverOverlay-Example">example2	"Use a HierarchicalList widget to display the classes, with a list hover overlay configured to display the full text of any item in the sequence list."	"self example2"	| app |	app := self newWithTitle.	self openOn: app.	(app widgetAt: #classes)		exposeElementAll</body><body package="ListHoverOverlay-Example">example3	"Use a HierarchicalList widget to display the classes, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position."	"self example3"	| app widget |	app := self newWithTitle.	self openOn: app.	widget := app widgetAt: #classes.	widget		elementTooltip: app classPropertiesText;		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset</body><body package="ListHoverOverlay-Example">example4	"Use a HierarchicalList widget to display the classes, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position.  This example reveals bounds properties as well as grid, label, icon and text actual heights."	"self example4"	| app widget |	app := self newWithTitle.	self openOn: app.	widget := app widgetAt: #classes.	"We're using a custom TooltipAssistant with a specialized stateMachine,	 so we need to explicitly add it and provide the tooltip block."	(widget addTooltipAssistant: HoverPropertiesAssistant)		tooltip: app boundsPropertiesText.	widget		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset</body></methods><methods><class-id>Examples.HierarchyListHoverExample class</class-id> <category>examples - icons</category><body package="ListHoverOverlay-Example">example11	"Use a HierarchicalList widget to display the classes and icons.  The default is a list hover overlay configured to display the full text of any item in the sequence list which is otherwise clipped by its view."	"self example11"	| app |	app := self newWithTitle.	app classes treeAccessor iconBlock: [:val | val toolListIcon].	self openOn: app</body><body package="ListHoverOverlay-Example">example12	"Use a HierarchicalList widget to display the classes and icons, with a list hover overlay configured to display the full text of any item in the sequence list."	"self example12"	| app |	app := self newWithTitle.	app classes treeAccessor iconBlock: [:val | val toolListIcon].	self openOn: app.	(app widgetAt: #classes) exposeElementAll</body><body package="ListHoverOverlay-Example">example13	"Use a HierarchicalList widget to display the classes and icons, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position."	"self example13"	| app widget |	app := self newWithTitle.	app classes treeAccessor iconBlock: [:val | val toolListIcon].	self openOn: app.	widget := app widgetAt: #classes.	widget		elementTooltip: app classPropertiesText;		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset</body><body package="ListHoverOverlay-Example">example14	"Use a HierarchicalList widget to display the classes and icons, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position.  This example reveals bounds properties as well as grid, label, icon and text actual heights."	"self example14"	| app widget |	app := self newWithTitle.	app classes treeAccessor iconBlock: [:val | val toolListIcon].	self openOn: app.	widget := app widgetAt: #classes.	"We're using a custom TooltipAssistant with a specialized stateMachine,	 so we need to explicitly add it and provide the tooltip block."	(widget addTooltipAssistant: HoverPropertiesAssistant)		tooltip: app boundsPropertiesText.	widget		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset</body></methods><methods><class-id>Examples.SimpleListHoverExample</class-id> <category>initialize-release</category><body package="ListHoverOverlay-Example">initializeClasses	"Initialize the classes widget according to the requirements of the subcanvas spec."	classes := SelectionInList				with: (Magnitude withAllSubclasses asSortedCollection: [:a :b | a name &lt; b name])</body></methods><methods><class-id>Examples.SimpleListHoverExample</class-id> <category>accessing</category><body package="ListHoverOverlay-Example">exampleDescription	^'SequenceView'</body></methods><methods><class-id>Examples.SimpleListHoverExample class</class-id> <category>examples</category><body package="ListHoverOverlay-Example">example0	"Use a List widget to display the classes, using the default visual blocks to display simple text.	 The view's lineGrid uses that of the text style, and there is no hover overlay because there are no installed visualBlocks."	"self example0"	| app |	app := self newWithTitle.	self openOn: app</body><body package="ListHoverOverlay-Example">example1	"Use a List widget to display the classes.  The default is a list hover overlay configured to display the full text of any item in the sequence list which is otherwise clipped by its view.  Visual blocks must be installed before opening so the grid is displayed properly."	"self example1"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	widget		defaultVisualBlocks.	app finallyOpen</body><body package="ListHoverOverlay-Example">example2	"Use a List widget to display the classes, with a list hover overlay configured to display the full text of any item in the sequence list.  Visual blocks must be installed before opening so the grid is displayed properly."	"self example2"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	widget		defaultVisualBlocks;		exposeElementAll.	app finallyOpen</body><body package="ListHoverOverlay-Example">example3	"Use a List widget to display the classes, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position.  Visual blocks must be installed before opening so the grid is displayed properly."	"self example3"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	widget		elementTooltip: app classPropertiesText;		defaultVisualBlocks;		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset.	app finallyOpen</body><body package="ListHoverOverlay-Example">example4	"Use a List widget to display the classes, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position.  This example reveals bounds properties as well as grid, label, icon and text actual heights.  Visual blocks must be installed before opening so the grid is displayed properly."	"self example4"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	"We're using a custom TooltipAssistant with a specialized stateMachine,	 so we need to explicitly add it and provide the tooltip block."	(widget addTooltipAssistant: HoverPropertiesAssistant)		tooltip: app boundsPropertiesText.	widget		defaultVisualBlocks;		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset.	app finallyOpen</body></methods><methods><class-id>Examples.SimpleListHoverExample class</class-id> <category>utility</category><body package="ListHoverOverlay-Example">colorDisplayView: aView index: anIndex on: aGC in: aRectangle	aGC		paint: ColorValue salmon;		displayRectangle: aRectangle.	aView		displayElement: anIndex		on: aGC		forBounds: (aRectangle insetBy: 1).	aGC		paint: ColorValue red;		displayRectangularBorder: (aRectangle origin corner: aRectangle corner - 1)</body><body package="ListHoverOverlay-Example">colorLabelForView: aView index: anIndex	| color |	color := self colorList at: anIndex \\ self colorList size + 1.	^(Label with: ((aView sequence at: anIndex) displayString asText				emphasizeAllWith: (Array with: #bold with: #color -&gt; color)))		attributes: aView textStyle;		alignVerticalCenter</body><body package="ListHoverOverlay-Example">colorList	^colorList		ifNil: 			[colorList := List withAll: (ColorValue constantNames								collect: [:each | ColorValue perform: each])]</body><body package="ListHoverOverlay-Example">colorTooltipForView: aView	| index blockBounds |	index := aView mouseOverIndex.	^(aView isValidIndex: index)		ifTrue: 			[blockBounds := aView globalBoundsOfElementAt: index.			VisualBlock block: 					[:gc :box |					self						colorDisplayView: aView						index: index						on: gc						in: box]				bounds: (blockBounds origin corner: blockBounds corner + (2 @ 0))]		ifFalse: [nil]</body></methods><methods><class-id>Examples.SimpleListHoverExample class</class-id> <category>examples - rollover</category><body package="ListHoverOverlay-Example">example45	"Use a List widget to display the classes, with an overlay configured to display any item in the sequence list as a rollover with a background modeled after the menu rollover display."	"self example45"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	"We're using a customized assistant which contains a default tooltip block,	 so we need to set the asistant and then configure the view's visual blocks and tooltip criteria."	widget		addTooltipAssistant: RolloverAssistant;		defaultVisualBlocks;		hoverDisplayCriteria: widget hoverTextAll.	app finallyOpen</body><body package="ListHoverOverlay-Example">example46	"Use a List widget to display the classes, with a rollover configured with custom blocks to display any item in the sequence list as a rollover with inverted color text.  This example pulls the block content into utility methods for easier debugging."	"self example46"	| app widget colorBlock |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	"We're using a customized assistant, so we need to set the assistant adding our custom tooltip block, 	 and then configure the view's custom visual blocks, and set the tooltip criteria."	widget := app widgetAt: #classes.	(widget addTooltipAssistant: RolloverAssistant)		tooltip: [:view | self colorTooltipForView: view].	colorBlock := [:view :index | self colorLabelForView: view index: index].	widget		visualBlock: [:view :index | BoundedWrapper on: (colorBlock value: view value: index)];		selectedVisualBlock: 				[:view :index |				BoundedWrapper					on: (ReversingWrapper on: (colorBlock value: view value: index)) invert];		hoverDisplayCriteria: widget hoverTextAll.	app finallyOpen</body></methods><methods><class-id>Examples.SimpleListHoverExample class</class-id> <category>examples - icons</category><body package="ListHoverOverlay-Example">example11	"Use a List widget to display the classes and icons, with the default list hover overlay configured to display the full text of any item in the sequence list which is otherwise clipped by its view.  We use #visualBlocksForIcon:andText: to set the visual blocks, and use an icon block that provides an icon."	"self example11"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	widget		visualBlocksForIcon: [:item :view :index | item toolListIcon]			andText: [:item :view :index | item displayString].	app finallyOpen</body><body package="ListHoverOverlay-Example">example12	"Use a List widget to display the classes and icons, with a list hover overlay configured to display the full text of any item in the sequence list.  The view's visual blocks are not automatically set, so we use #visualBlocksForIcon:andText: to set them, and use an icon block that provides an icon."	"self example12"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	widget		visualBlocksForIcon: [:item :view :index | item toolListIcon]			andText: [:item :view :index | item displayString];		exposeElementAll.	app finallyOpen</body><body package="ListHoverOverlay-Example">example13	"Use a List widget to display the classes and icons, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position.  The view's visual blocks are not automatically set, so we use #visualBlocksForIcon:andText: to set them, and use an icon block that provides an icon."	"self example13"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	widget		elementTooltip: app classPropertiesText;		visualBlocksForIcon: [:item :view :index | item toolListIcon]			andText: [:item :view :index | item displayString];		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset.	app finallyOpen</body><body package="ListHoverOverlay-Example">example14	"Use a List widget to display the classes and icons, with a list hover overlay configured to display some properties of every item in the sequence list, offset from the current mouse position.  The view's visual blocks are not automatically set, so we use #visualBlocksForIcon:andText: to set them, and use an icon block that provides an icon.  This example reveals bounds properties as well as grid, label, icon and text actual heights."	"self example14"	| app widget |	app := self newWithTitle.	app allButOpenInterface: #windowSpec.	widget := app widgetAt: #classes.	"We're using a custom TooltipAssistant with a specialized stateMachine,	 so we need to explicitly add it and provide the tooltip block."	(widget addTooltipAssistant: HoverPropertiesAssistant)		tooltip: app boundsPropertiesText.	widget		visualBlocksForIcon: [:item :view :index | item toolListIcon]			andText: [:item :view :index | item displayString];		hoverDisplayCriteria: widget hoverTextAll;		hoverOffset: app propertiesBlockOffset.	app finallyOpen</body></methods><methods><class-id>UI.SequenceView</class-id> <category>tooltips - accessing</category><body package="ListHoverOverlay-Example">globalBounds	"Answer the bounds of the view, relative to the screen origin."	| viewBounds |	viewBounds := self bounds.	^((self localPointToGlobal: viewBounds origin)		extent: viewBounds extent) translatedBy: self topComponent globalOrigin</body></methods><methods><class-id>Examples.BasicListExample class</class-id> <category>interface specs</category><body package="ListHoverOverlay-Example">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #exampleTitle 			#min: #(#{Core.Point} 50 50 ) 			#max: #(#{Core.Point} 500 900 ) 			#bounds: #(#{Graphics.Rectangle} 620 263 820 638 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 20 0 ) 					#name: #Region1 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 3072 8191 3072 ) ) 					#lineWidth: 1 ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Core.Point} 10 1 ) 					#name: #lbDescription 					#label: #exampleDescription ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 20 ) 					#name: #lbClasses 					#label: 'Classes' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 -5 1 -5 1 ) 					#name: #Subcanvas1 					#minorKey: #classesListSpec ) ) ) )</body></methods><methods><class-id>Examples.TreeViewHoverExample class</class-id> <category>interface specs</category><body package="ListHoverOverlay-Example">classesListSpec	"Tools.UIPainter new openOnClass: self andSelector: #classesListSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 50 50 ) 			#max: #(#{Core.Point} 1128 900 ) 			#bounds: #(#{Graphics.Rectangle} 534 262 907 639 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0 -1 1 -1 1 ) 					#name: #classes 					#model: #classes 					#multipleSelections: true ) ) ) )</body></methods><methods><class-id>Examples.HierarchyListHoverExample class</class-id> <category>interface specs</category><body package="ListHoverOverlay-Example">classesListSpec	"Tools.UIPainter new openOnClass: self andSelector: #classesListSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 50 50 ) 			#max: #(#{Core.Point} 1128 900 ) 			#bounds: #(#{Graphics.Rectangle} 534 262 907 639 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.HierarchicalViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0 -1 1 -1 1 ) 					#name: #classes 					#model: #classes ) ) ) )</body></methods><methods><class-id>Examples.SimpleListHoverExample class</class-id> <category>interface specs</category><body package="ListHoverOverlay-Example">classesListSpec	"Tools.UIPainter new openOnClass: self andSelector: #classesListSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 50 50 ) 			#max: #(#{Core.Point} 1128 900 ) 			#bounds: #(#{Graphics.Rectangle} 534 262 907 639 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0 -1 1 -1 1 ) 					#name: #classes 					#model: #classes ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SequenceHoverAssistant</name><environment>UI</environment><super>UI.HoverHelpAssistant</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Interface-Hoverhelp</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>SequenceView</name><environment>UI</environment><super>UI.SelectionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>artist textStyle visualBlock selectedVisualBlock measureWidth cachedWidth mouseOverIndex selectionLineGrid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class></st-source>