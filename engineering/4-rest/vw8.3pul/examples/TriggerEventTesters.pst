<?xml version="1.0"?><st-source><!-- Name: Trigger Event TestersNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: This package/parcel contains testing and examples of all the trigger events for all standard widgets.DbIdentifier: bear73DbTrace: 501013DbUsername: cgundelDbVersion: 8.3 - 5HideSource: falsePackageName: Trigger Event TestersParcel: #('Trigger Event Testers')ParcelName: Trigger Event TestersPrintStringCache: (8.3 - 5,cgundel)SaveSource: trueVersion: 8.3 - 5Date: 12:57:29 PM May 5, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.1) of May 5, 2017 on May 5, 2017 at 12:57:29 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>EditInputEventTests</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text1 text2 text3 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.EditInputEventTests</class-id><body>EditInputEventTests demonstrates event registration and notification for all relevant events of input fields and text editors.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#changed 			triggered when an entry in the field or editor is accepted.#changing			triggered when the entry in the field or editor has changed but is not yet accepted.#clicked				triggered any time the widget is selected with the &lt;Select&gt; mouse button.#rightClicked			triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked		triggered when double clicked on with the &lt;Select&gt; mouse button.#gettingFocus		triggered when the widget receives focus.#losingFocus		triggered when the widget loses focus.#tabbed				triggered when &lt;Tab&gt; causes focus to move from the field or editor to the next widget in the tab order.#backTabbed		triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the field or editor to the previous widget in the tab order.#scrollRight			triggered when the widget scrolls to the right by any means.#scrollLeft			triggered when the widget scrolls to the left by any means.#scrollDown			triggered when the widget scrolls down by any means.#scrollUp				triggered when the widget scrolls up by any means.Instance Variables:	text1	&lt;ValueHolder on: String&gt;	 model for input field 1	text2	&lt;ValueHolde on: String&gt;	 model for input field 2	text3	&lt;ValueHolder on: String&gt;	 model for text editor</body></comment><class><name>HierarchicalListEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>singleList multiList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.HierarchicalListEventTester</class-id><body>HierarchicalListEventTester demonstrates event registration and notification for all relevant events of a hierarchical list.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#clicked						triggered any time the widget is selected by &lt;Select&gt; mouse button.#rightClicked					triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked				triggered when double clicked on with the &lt;Select&gt; mouse button.#gettingFocus				triggered any time a hierarchical list receives focus.#losingFocus				triggered any time a hierarchical list loses focus.#tabbed						triggered when &lt;Tab&gt; causes focus to move from the list to the next widget in the tab order.#backTabbed				triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the list to the previous widget in the tab order.#itemCollapsed				triggered when an item in the hierarchical list is contracted.#itemExpanded				triggered when an item in the hierarchical list is expanded.#selectionListChanged		triggered when the sequence of hierarchical list items change.#selectionChanging			triggered when any item is selected but before the list selection changes.#selectionChanged			triggered after any item selection is changed.#scrollRight					triggered when the list scrolls to the right by any means.#scrollLeft					triggered when the list scrolls to the left by any means.#scrollDown					triggered when the list scrolls down by any means.#scrollUp						triggered when the list scrolls up by any means.Instance Variables:	multiList	&lt;IndentedTreeSelectionInList&gt;	list model for multi-select hierarchical list	singleList	&lt;IndentedTreeSelectionInList&gt;	list model for single-select hierarchical list</body></comment><class><name>GroupBoxEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.GroupBoxEventTester</class-id><body>GroupBoxEventTester demonstrates event registration and notification for all relevant events of a group box.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#labelChanging		triggered when a group's label is about to change.#labelChanged 		triggered after a group's label has changed.			</body></comment><class><name>ResizingSplitterEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.ResizingSplitterEventTester</class-id><body>ResizingSplitterEventTester demonstrates event registration and notification for all relevant events of resizer widgets.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#clicked 		triggered any time a splitter is selected by the mouse.#moved		triggered any time a splitter is finished being moved.</body></comment><class><name>ToolBarEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.ToolBarEventTester</class-id><body>ToolBarEventTester demonstrates event registration and notification for all relevant events of a toolbar.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#toolBarCreated		triggered after creation of a tool bar</body></comment><class><name>ButtonsEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rads </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.ButtonsEventTester</class-id><body>ButtonsEventTester demonstrates event registration and notification for all relevant events of ActionButtion, RadioButton, and CheckButton widgets.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#labelChanged 	triggered after a button's label has changed.#labelChanging	triggered when a button's label is about to change.#tabbed			triggered when &lt;Tab&gt; causes focus to move from the button to the next widget in the tab order.#backTabbed	triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the button to the previous widget in the tab order.#clicked			triggered any time a button is selected by the mouse.#gettingFocus	triggered any time a button receives focus.#losingFocus	triggered any time a button loses focus.#checked			triggered when a CheckBox widget state changes from unselected to selected.#unchecked		triggered when a CheckBox widget state changes from selected to unselected.#pressed			triggered when an ActionButton is clicked or pressed by keyboard.#turnedOn		triggered when a RadioButton widget state changes from unselected to selected.#turnedOff		triggered when a RadioButton widget state changes from selected to unselected.Instance Variables:	rads	&lt;ValueHolder on: Boolean&gt;	radio button selection state</body></comment><class><name>MenuEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.MenuEventTester</class-id><body>MenuEventTester demonstrates event registration and notification for all relevant events of a menu bar or pop-up menu.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#popupMenuCreated			triggered when a pop-up menu is created.#popupMenuItemSelected:	triggered with the item name key when a menu item in a pop-up menu is selected.#menuOpened:					triggered with the button name key when a menu bar button item is opened.#menuClosed:					triggered with the button name key when a menu bar button item is closed.#menuItemSelected:			triggered with the name key when a menu item is selected.#submenuOpened:				triggered with the submenu name key when a submenu item is opened.#submenuClosed:				triggered with the submenu name key when a submenu item is closed.</body></comment><class><name>RegionEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.RegionEventTester</class-id><body>RegionEventTester demonstrates event registration and notification for all relevant events of region widgets.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#changing		triggered when a region property is about to change.#changed		triggered after a region property is changed.</body></comment><class><name>DialogEventTester</name><environment>Examples</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.DialogEventTester</class-id><body>DialogEventTester demonstrates event registration and notification for all relevant events of a dialog.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#activate				triggered when dialog is activated by the underlying platform.#bounds 				triggered when the dialog size is changed.#close 				triggered when close notification is sent to the dialog.#closing 				triggered when a dialog is about to close.#opening 			triggered before a dialog is mapped or opened.#enter 				triggered after a dialog enters focus.#exit 					triggered after a dialog leaves focus.#mapped 			triggered when the dialog display surface is made active to view. #unmapped 			triggered when the dialog display surface is removed from view. #deactivate 			triggered when a dialog is deactivated by the underlying platform.#destroy 				triggered when a dialog is destroyed by the underlying platform.#expose 				triggered when a dialog is exposed by the underlying platform.#collapse				triggered when a dialog is collapsed by the underlying platform.#expand 				triggered when a dialog is expanded by the underlying platform.#moving 				triggered when a dialog is about to be moved.#move 				triggered after a dialog is moved.#resize 				triggered after a dialog is resized.#gettingFocus		triggered any time the dialog receives focus.#losingFocus		triggered any time the dialog loses focus.#clicked				triggered any time the dialog is selected by &lt;Select&gt; mouse button.#rightClicked			triggered when right clicked on with the &lt;Operate&gt; mouse button.#middleClicked 		triggered when middle button clicked with the &lt;Window&gt; mouse button.#doubleClicked		triggered when double clicked on with the &lt;Select&gt; mouse button.#scrollRight			triggered when the window component scrolls to the right by any means.#scrollLeft			triggered when the window component scrolls to the left by any means.#scrollDown			triggered when the window component scrolls down by any means.#scrollUp				triggered when the window component scrolls up by any means.#unknownEvent		triggered when the underlying platform sends any otherwise unhandled window event.</body></comment><class><name>TreeViewEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>singleSelect multiSelect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.TreeViewEventTester</class-id><body>TreeViewEventTester demonstrates event registration and notification for all relevant events of a tree view.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#gettingFocus				triggered when the widget receives focus.#losingFocus				triggered when the widget loses focus.#rightClicked					triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked				triggered when double clicked on with the &lt;Select&gt; mouse button.#clicked						triggered any time a tree view is selected by the mouse with the &lt;Select&gt; button.#scrollRight					triggered when the widget scrolls to the right by any means.#scrollLeft					triggered when the widget scrolls to the left by any means.#scrollDown					triggered when the widget scrolls down by any means.#scrollUp						triggered when the widget scrolls up by any means.#selectionListChanged		triggered when the underlying tree sequence changes.#selectionChanged			triggered after any item selection is changed.#selectionChanging			triggered when any item selection is about to change.#tabbed						triggered when &lt;Tab&gt; causes focus to move from the tree view to the next widget in the tab order.#backTabbed				triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the tree view to the previous widget in the tab order.#itemCollapsed				triggered when an item in the tree view is contracted.#itemExpanded				triggered when an item in the tree view is expanded.#itemEdited					triggered when an item in the tree view has been edited.Instance Variables:	multiSelect	&lt;SelectionInTree&gt;	multi-select tree list model.	singleSelect	&lt;SelectionInTree&gt;	single-select tree list model.</body></comment><class><name>SubCanvasEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>client </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.SubCanvasEventTester</class-id><body>SubCanvasEventTester demonstrates event registration and notification for all relevant events of a subcanvas.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#changing		triggered when a subcanvas is about to change.#changed		triggered after a subcanvas is changed.#scrollRight		triggered when the widget scrolls to the right by any means.#scrollLeft		triggered when the widget scrolls to the left by any means.#scrollDown		triggered when the widget scrolls down by any means.#scrollUp			triggered when the widget scrolls up by any means.Instance Variables:	client	&lt;ButtonsEventTester | RegionEventTester&gt;	subcanvas model</body></comment><class><name>PercentSliderEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sliderValue percentDoneValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.PercentSliderEventTester</class-id><body>PercentSliderEventTester demonstrates event registration and notification for all relevant events of progress bar and slider widgets.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#changing		triggered when a value is about to change.#changed		triggered after a value is changed.Instance Variables:	percentDoneValue	&lt;ValueModel on: Number&gt;	progress bar model	sliderValue	&lt;ValueModel on: Number&gt;			slider widget model</body></comment><class><name>MenuButtonEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.MenuButtonEventTester</class-id><body>MenuButtonEventTester demonstrates event registration and notification for all relevant events of the menu button widget.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#changing		triggered when a selection in the menu button is about to change.#changed		triggered after a selection in the menu button is accepted.#clicked			triggered any time a menu button is selected by the mouse &lt;Select&gt; button.#gettingFocus	triggered any time a menu button receives focus.#losingFocus	triggered any time a menu button loses focus.#tabbed			triggered when &lt;Tab&gt; causes focus to move from the menu button to the next widget in the tab order.#backTabbed	triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the menu button to the previous widget in the tab order.#listExposed		triggered when the menu button list is opened.#listClosed		triggered when the menu button list is closed.Instance Variables:	menuModel	&lt;ValueModel on: Menu&gt;	menu button menu model.</body></comment><class><name>ClickWidgetEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clicked hits misses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.ClickWidgetEventTester</class-id><body>ClickWidgetEventTester is an event trigger variation of the ClickLogoTest example class.  It demonstrates event registration and notification for all relevant events of the click widget. The relevant click widget events and the conditions they are triggered are:#clicked						triggered any time a click widget is selected by the mouse.#hitMappedRegion 			triggered when a mapped area of the click widget is selected by the mouse.#missedMappedRegion	triggered when any unmapped area of the click widget is selected by the mouse.Instance Variables:	clicked	&lt;ValueModel on: String&gt;	display model for item clicked.	hits	&lt;ValueModel on: Integer&gt;		number of times a recognized area is selected.	misses	&lt;ValueModel on: Integer&gt;	number of times no recognized area is selected.</body></comment><class><name>ListBoxEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>multiSelectList singleSelectList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.ListBoxEventTester</class-id><body>ListBoxEventTester demonstrates event registration and notification for all relevant events of a list view widget.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#clicked						triggered any time a list widget is selected by the mouse with the &lt;Select&gt; button.#rightClicked					triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked				triggered when double clicked on with the &lt;Select&gt; mouse button.#gettingFocus				triggered any time a list widget receives focus.#losingFocus				triggered any time a list widget loses focus.#tabbed						triggered when &lt;Tab&gt; causes focus to move from the list widget to the next widget in the tab order.#backTabbed				triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the list widget to the previous widget in the tab order.#selectionListChanged		triggered when the sequence of the list changes.#selectionChanged			triggered after any item selection is changed.#selectionChanging			triggered when any item selection is about to change.#scrollRight					triggered when the list widget scrolls to the right by any means.#scrollLeft					triggered when the list widget scrolls to the left by any means.#scrollDown					triggered when the list widget scrolls down by any means.#scrollUp						triggered when the list widget scrolls up by any means.Instance Variables:	multiSelectList	&lt;MultiSelectionInList&gt;	list model for multi-select list widget.	singleSelectList	&lt;SelectionInList&gt;	list model for single-select list widget.</body></comment><class><name>WindowEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.WindowEventTester</class-id><body>WindowEventTester demonstrates event registration and notification for all relevant events of a window.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#activate				triggered when window is activated by the underlying platform.#bounds 				triggered when the window size is changed.#close 				triggered when close notification is sent to the window.#closing 				triggered when a window is about to close.#opening 			triggered before a window is mapped or opened.#enter 				triggered after a window enters focus.#exit 					triggered after a window leaves focus.#mapped 			triggered when the window display surface is made active to view. #unmapped 			triggered when the window display surface is removed from view. #deactivate 			triggered when a window is deactivated by the underlying platform.#destroy 				triggered when a window is destroyed by the underlying platform.#expose 				triggered when a window is exposed by the underlying platform.#collapse				triggered when a window is collapsed by the underlying platform.#expand 				triggered when a window is expanded by the underlying platform.#moving 				triggered when a window is about to be moved.#move 				triggered after a window is moved.#resize 				triggered after a window is resized.#gettingFocus		triggered any time the window receives focus.#losingFocus		triggered any time the window loses focus.#clicked				triggered any time the window is selected by &lt;Select&gt; mouse button.#rightClicked			triggered when right clicked on with the &lt;Operate&gt; mouse button.#middleClicked 		triggered when middle button clicked with the &lt;Window&gt; mouse button.#doubleClicked		triggered when double clicked on with the &lt;Select&gt; mouse button.#scrollRight			triggered when the window component scrolls to the right by any means.#scrollLeft			triggered when the window component scrolls to the left by any means.#scrollDown			triggered when the window component scrolls down by any means.#scrollUp				triggered when the window component scrolls up by any means.</body></comment><class><name>DatasetEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>singleSelectList multiSelectList singleSelectRowHolder multiSelectRowHolder columnReordering columnResizing columnSorting </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.DatasetEventTester</class-id><body>DatasetEventTester demonstrates event registration and notification for all relevant events of the dataset widget.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#rightClicked					triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked				triggered when double clicked on with the &lt;Select&gt; mouse button.#gettingFocus				triggered when a dataset receives focus.#losingFocus				triggered when a dataset loses focus.#cellGettingFocus 			triggered when a dataset cell receives focus.#cellLosingFocus			triggered when a dataset cell loses focus.#cellTabbed					triggered when &lt;Tab&gt; causes focus to move from a dataset cell to its next cell or widget in the tab order.#cellBackTabbed			triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from a dataset cell to its previous cell or widget in the tab order.#cellValueChanged			triggered when an entry changes the value of a dataset cell.#selectionListChanged		triggered when the sequence of dataset rows change.#scrollRight					triggered when the dataset scrolls to the right by any means.#scrollLeft					triggered when the dataset scrolls to the left by any means.#scrollDown					triggered when the dataset scrolls down by any means.#scrollUp						triggered when the dataset scrolls up by any means.#tabbed						triggered when &lt;Tab&gt; causes focus to move from the dataset to the next widget in the tab order.#backTabbed				triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the dataset to the previous widget in the tab order.#columnLabelClicked		triggered if any dataset column label is selected by the mouse.#rowLabelClicked			triggered if any dataset row label is selected by the mouse.#rowSelectionsChanging	triggered when any row is selected but the dataset selection has not yet changed.#rowSelectionsChanged	triggered after any row selection is changed.Instance Variables:	columnReordering	&lt;ValueModel on:Boolean&gt;	model on column ordering option selection.	columnResizing	&lt;ValueModel on:Boolean&gt;		model on column resize option selection.	columnSorting	&lt;ValueModel on:Boolean&gt;		model on column sort option selection.	multiSelectList	&lt;MultiSelectionInListSortAware&gt;	sort list model for multi-select dataset.	multiSelectRowHolder	&lt;ValueModel&gt;	selected row model for multi-select dataset.	singleSelectList	&lt;SelectionInList&gt;		list model for single-select dataset.	singleSelectRowHolder	&lt;ValueModel&gt;	selected row model for single-select dataset.</body></comment><class><name>ComboBoxEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editableValue bottomValue topValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.ComboBoxEventTester</class-id><body>ComboBoxEventTester demonstrates event registration and notification for all relevant events of a ComboBox widget.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#changing		triggered when a selection in the combo list is about to change.#changed		triggered after a selection in the combo box is accepted.#tabbed			triggered when &lt;Tab&gt; causes focus to move from the combo box to the next widget in the tab order.#backTabbed	triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the combo box to the previous widget in the tab order.#clicked			triggered any time a combo box is selected by the mouse &lt;Select&gt; button.#gettingFocus	triggered any time a combo box receives focus.#losingFocus	triggered any time a combo box loses focus.#rightClicked		triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked	triggered when double clicked on with the &lt;Select&gt; mouse button.#listExposed		triggered when the combo list is opened.#listClosed		triggered when the combo list is closed.Instance Variables:	bottomValue	&lt;ValueHolder&gt;	bottom read-only combo box selection model	editableValue	&lt;ValueHolder&gt;	editable combo box selection model	topValue	&lt;ValueHolder&gt;	top read-only combo box selection model</body></comment><class><name>LabelEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.LabelEventTester</class-id><body>LabelEventTester demonstrates event registration and notification for all relevant events of a label.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#labelChanged 		triggered when a label value has changed.#labelChanging  	triggered when a label is about to change to a new value.</body></comment><class><name>TabControlEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.TabControlEventTester</class-id><body>TabControlEventTester demonstrates event registration and notification for all relevant events of a tab control.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#pageLeft			triggered when the widget scrolls a tab to the left by any means#pageRight			triggered when the widget scrolls a tab to the right by any means#scrollRight			triggered when the widget scrolls a tab to the right by any means.#scrollLeft			triggered when the widget scrolls a tab to the left by any means.#tabChanged		triggered when a tab selection has changed.#tabChanging		triggered when a tab is about to change selection.#tabbed				triggered when &lt;Tab&gt; causes focus to move from the tab control to the next widget in the tab order.#backTabbed		triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the tab control to the previous widget in the tab order.#gettingFocus		triggered when the widget receives focus.#losingFocus		triggered when the widget loses focus.</body></comment><class><name>TableEventTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>columnSelection rowSelection cellSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.TableEventTester</class-id><body>TableEventTester demonstrates event registration and notification for all relevant events of a table widget.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#rowSelectionChanged		triggered when a new row is selected in the table.#columnSelectionChanged 	triggered when a new column is selected in the table.#cellSelectionChanged			triggered when a new cell is selected in the table.#clicked							triggered any time a table widget is selected by the mouse with the &lt;Select&gt; button.#rightClicked						triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked					triggered when double clicked on with the &lt;Select&gt; mouse button.#gettingFocus					triggered when the widget receives focus.#losingFocus					triggered when the widget loses focus.#tabbed							triggered when &lt;Tab&gt; causes focus to move from the table to the next widget in the tab order.#backTabbed					triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the table to the previous widget in the tab order.#scrollRight						triggered when the widget scrolls to the right by any means.#scrollLeft						triggered when the widget scrolls to the left by any means.#scrollDown						triggered when the widget scrolls down by any means.#scrollUp							triggered when the widget scrolls up by any means.Instance Variables:	cellSelection	&lt;TableInterface&gt;		table model with cell selection option	columnSelection	&lt;TableInterface&gt;	table model with column selection option	rowSelection	&lt;TableInterface&gt;		table model with row selection option</body></comment><class><name>ClassWrapper</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>realClass visibleName choiceValue checkValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.ClassWrapper</class-id><body>ClassWrapper acts as a sample data accessor from a class in the Smalltalk heirarchy for items appearing in examples DatasetEventTester, TableEventTester, and TreeViewEventTester.  Otherwise it offers no relevant functionality.Instance Variables:	checkValue	&lt;Boolean&gt;	true if realClass if the number of realClass instance variable names is even. 	choiceValue	&lt;Array of: String&gt;	list instance variable names of realClass.	realClass	&lt;Class&gt;	class this instance accesses.	visibleName	&lt;String | Symbol&gt;	name assigned this instance.</body></comment><class><name>SpinEventTriggerTester</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dateAspect stringAspect timeAspect numberNoLow numberAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-Trigger Events</category><attributes><package>Trigger Event Testers</package></attributes></class><comment><class-id>Examples.SpinEventTriggerTester</class-id><body>SpinEventTriggerTester demonstrates event registration and notification for all relevant events of spin button widgets.  In this example, the response to these events are reported to the Transcript.  The relevant events and the conditions they are triggered are:#changing				triggered when a spin value is about to change.#changed				triggered after a spin value is changed.#gettingFocus			triggered when a spin button receives focus.#losingFocus			triggered when a spin button loses focus.#tabbed					triggered when &lt;Tab&gt; causes focus to move from the spin button to the next widget in the tab order.#backTabbed			triggered when &lt;Shift&gt;&lt;Tab&gt; causes focus to move from the spin button to the previous widget in the tab order.#bounceBottom			triggered when a non-wrapping spin button is asked to spin below its lowest value setting.#bounceTop				triggered when a non-wrapping spin button is asked to spin above its highest value setting.#wrapAroundTop 		triggered when the spin button wraps under its highest value setting.#wrapAroundBottom 	triggered when the spin button wraps over its lowest value setting.#spinDown 				triggered when the spin down button is pressed prior a value change.#spinUp 					triggered when the spin up button is pressed prior a value change.#spunDown 				triggered after the spin down button is pressed and the value is accepted.#spunUp					triggered after the spin up button is pressed and the value is accepted.#rightClicked				triggered when right clicked on with the &lt;Operate&gt; mouse button.#doubleClicked			triggered when double clicked on with the &lt;Select&gt; mouse button.#clicked  					triggered any time when selected by the mouse.Instance Variables:	dateAspect	&lt;ValueHolder on: Date&gt;	date spin button model	numberAspect	&lt;ValueHolder on: Number&gt;	number spin button model	numberNoLow	&lt;ValueHolder on: Number&gt;	number model for wrapping spin button	stringAspect	&lt;ValueHolder on: String&gt;	string spin button model	timeAspect	&lt;ValueHolder on: Time&gt;	time spin button model</body></comment><methods><class-id>Examples.EditInputEventTests</class-id> <category>aspects</category><body package="Trigger Event Testers">text1	^text1 isNil		ifTrue:			[text1 := 'First Input Field (being a bit big for scrolling)' copy asValue]		ifFalse:			[text1]</body><body package="Trigger Event Testers">text2	^text2 isNil		ifTrue:			[text2 := 'Second Input Field' copy asValue]		ifFalse:			[text2]</body><body package="Trigger Event Testers">text3	^text3 isNil		ifTrue:			[text3 := (EditInputEventTests class compiledMethodAt: #windowSpec) getSource copy asValue]		ifFalse:			[text3]</body></methods><methods><class-id>Examples.EditInputEventTests</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #topInputField when: #changed do: [Transcript show: (#topInputField -&gt; #changed) printString; cr].	self widget: #secondInputField when: #changed do: [Transcript show: (#secondInputField -&gt; #changed) printString; cr].	self widget: #textEditor when: #changed do: [Transcript show: (#textEditor -&gt; #changed) printString; cr].	self widget: #readOnlyField when: #changed do: [Transcript show: (#readOnlyField -&gt; #changed) printString; cr].	self widget: #topInputField when: #changing do: [Transcript show: (#topInputField -&gt; #changing) printString; cr].	self widget: #secondInputField when: #changing do: [Transcript show: (#secondInputField -&gt; #changing) printString; cr].	self widget: #textEditor when: #changing do: [Transcript show: (#textEditor -&gt; #changing) printString; cr].	self widget: #readOnlyField when: #changing do: [Transcript show: (#readOnlyField -&gt; #changing) printString; cr].	self widget: #topInputField when: #clicked do: [Transcript show: (#topInputField -&gt; #clicked) printString; cr].	self widget: #secondInputField when: #clicked do: [Transcript show: (#secondInputField -&gt; #clicked) printString; cr].	self widget: #textEditor when: #clicked do: [Transcript show: (#textEditor -&gt; #clicked) printString; cr].	self widget: #readOnlyField when: #clicked do: [Transcript show: (#readOnlyField -&gt; #clicked) printString; cr].	self widget: #topInputField when: #rightClicked do: [Transcript show: (#topInputField -&gt; #rightClicked) printString; cr].	self widget: #secondInputField when: #rightClicked do: [Transcript show: (#secondInputField -&gt; #rightClicked) printString; cr].	self widget: #textEditor when: #rightClicked do: [Transcript show: (#textEditor -&gt; #rightClicked) printString; cr].	self widget: #readOnlyField when: #rightClicked do: [Transcript show: (#readOnlyField -&gt; #rightClicked) printString; cr].	self widget: #topInputField when: #doubleClicked do: [Transcript show: (#topInputField -&gt; #doubleClicked) printString; cr].	self widget: #secondInputField when: #doubleClicked do: [Transcript show: (#secondInputField -&gt; #doubleClicked) printString; cr].	"Text Editor does not support doubleClicking"	self widget: #readOnlyField when: #doubleClicked do: [Transcript show: (#readOnlyField -&gt; #doubleClicked) printString; cr].	self widget: #topInputField when: #gettingFocus do: [Transcript show: (#topInputField -&gt; #gettingFocus) printString; cr].	self widget: #secondInputField when: #gettingFocus do: [Transcript show: (#secondInputField -&gt; #gettingFocus) printString; cr].	self widget: #textEditor when: #gettingFocus do: [Transcript show: (#textEditor -&gt; #gettingFocus) printString; cr].	self widget: #readOnlyField when: #gettingFocus do: [Transcript show: (#readOnlyField -&gt; #gettingFocus) printString; cr].	self widget: #topInputField when: #losingFocus do: [Transcript show: (#topInputField -&gt; #losingFocus) printString; cr].	self widget: #secondInputField when: #losingFocus do: [Transcript show: (#secondInputField -&gt; #losingFocus) printString; cr].	self widget: #textEditor when: #losingFocus do: [Transcript show: (#textEditor -&gt; #losingFocus) printString; cr].	self widget: #readOnlyField when: #losingFocus do: [Transcript show: (#readOnlyField -&gt; #losingFocus) printString; cr].	self widget: #topInputField when: #tabbed do: [Transcript show: (#topInputField -&gt; #tabbed) printString; cr].	self widget: #secondInputField when: #tabbed do: [Transcript show: (#secondInputField -&gt; #tabbed) printString; cr].	self widget: #textEditor when: #tabbed do: [Transcript show: (#textEditor -&gt; #tabbed) printString; cr].	self widget: #readOnlyField when: #tabbed do: [Transcript show: (#readOnlyField -&gt; #gettingFocus) printString; cr].	self widget: #topInputField when: #backTabbed do: [Transcript show: (#topInputField -&gt; #backTabbed) printString; cr].	self widget: #secondInputField when: #backTabbed do: [Transcript show: (#secondInputField -&gt; #backTabbed) printString; cr].	self widget: #textEditor when: #backTabbed do: [Transcript show: (#textEditor -&gt; #backTabbed) printString; cr].	self widget: #readOnlyField when: #backTabbed do: [Transcript show: (#readOnlyField -&gt; #backTabbed) printString; cr].	self widget: #topInputField when: #scrollLeft do: [Transcript show: (#topInputField -&gt; #scrollLeft) printString; cr].	self widget: #secondInputField when: #scrollLeft do: [Transcript show: (#secondInputField -&gt; #scrollLeft) printString; cr].	self widget: #textEditor when: #scrollLeft do: [Transcript show: (#textEditor -&gt; #scrollLeft) printString; cr].	self widget: #readOnlyField when: #scrollLeft do: [Transcript show: (#readOnlyField -&gt; #scrollLeft) printString; cr].	self widget: #topInputField when: #scrollRight do: [Transcript show: (#topInputField -&gt; #scrollRight) printString; cr].	self widget: #secondInputField when: #scrollRight do: [Transcript show: (#secondInputField -&gt; #scrollRight) printString; cr].	self widget: #textEditor when: #scrollRight do: [Transcript show: (#textEditor -&gt; #scrollRight) printString; cr].	self widget: #readOnlyField when: #scrollRight do: [Transcript show: (#readOnlyField -&gt; #scrollRight) printString; cr].	self widget: #textEditor when: #scrollUp do: [Transcript show: (#textEditor -&gt; #scrollUp) printString; cr].	self widget: #textEditor when: #scrollDown do: [Transcript show: (#textEditor -&gt; #scrollDown) printString; cr].</body></methods><methods><class-id>Examples.HierarchicalListEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">multiList	^multiList isNil		ifTrue:			[multiList := IndentedTreeSelectionInList newEmptyInstance]		ifFalse:			[multiList]</body><body package="Trigger Event Testers">singleList	^singleList isNil		ifTrue:			[singleList := IndentedTreeSelectionInList newEmptyInstance]		ifFalse:			[singleList]</body></methods><methods><class-id>Examples.HierarchicalListEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">initializeLists	self singleList 		newObjectHierarchy: VisualComponent		childAccessor: #subclasses		childNameAccessor: #name.	self singleList deepOpenCurrent.	self multiList 		newObjectHierarchy: Magnitude		childAccessor: #subclasses		childNameAccessor: #name.	self multiList deepOpenCurrent</body><body package="Trigger Event Testers">postBuildWith: aBuilder 	self initializeLists.	self widget: #singleList when: #gettingFocus do: [Transcript show: (#singleList -&gt; #gettingFocus) printString; cr].	self widget: #multiList when: #gettingFocus do: [Transcript show: (#multiList -&gt; #gettingFocus) printString; cr].	self widget: #singleList when: #losingFocus do: [Transcript show: (#singleList -&gt; #losingFocus) printString; cr].	self widget: #multiList when: #losingFocus do: [Transcript show: (#multiList -&gt; #losingFocus) printString; cr].	self widget: #singleList when: #rightClicked do: [Transcript show: (#singleList -&gt; #rightClicked) printString; cr].	self widget: #multiList when: #rightClicked do: [Transcript show: (#multiList -&gt; #rightClicked) printString; cr].	self widget: #singleList when: #doubleClicked do: [Transcript show: (#singleList -&gt; #doubleClicked) printString; cr].	self widget: #multiList when: #doubleClicked do: [Transcript show: (#multiList -&gt; #doubleClicked) printString; cr].	self widget: #singleList when: #clicked do: [Transcript show: (#singleList -&gt; #clicked) printString; cr].	self widget: #multiList when: #clicked do: [Transcript show: (#multiList -&gt; #clicked) printString; cr].	self widget: #singleList when: #scrollUp do: [Transcript show: (#singleList -&gt; #scrollUp) printString; cr].	self widget: #multiList when: #scrollUp do: [Transcript show: (#multiList -&gt; #scrollUp) printString; cr].	self widget: #singleList when: #scrollDown do: [Transcript show: (#singleList -&gt; #scrollDown) printString; cr].	self widget: #multiList when: #scrollDown do: [Transcript show: (#multiList -&gt; #scrollDown) printString; cr].	self widget: #singleList when: #scrollRight do: [Transcript show: (#singleList -&gt; #scrollRight) printString; cr].	self widget: #multiList when: #scrollRight do: [Transcript show: (#multiList -&gt; #scrollRight) printString; cr].	self widget: #singleList when: #scrollLeft do: [Transcript show: (#singleList -&gt; #scrollLeft) printString; cr].	self widget: #multiList when: #scrollLeft do: [Transcript show: (#multiList -&gt; #scrollLeft) printString; cr].	self widget: #singleList when: #selectionListChanged do: [Transcript show: (#singleList -&gt; #selectionListChanged) printString; cr.].	self widget: #multiList when: #selectionListChanged do: [Transcript show: (#multiList -&gt; #selectionListChanged) printString; cr].	self widget: #singleList when: #selectionChanged do: [Transcript show: (#singleList -&gt; #selectionChanged) printString; cr].	self widget: #multiList when: #selectionChanged do: [Transcript show: (#multiList -&gt; #selectionChanged) printString; cr].	self widget: #singleList when: #selectionChanging do: [Transcript show: (#singleList -&gt; #selectionChanging) printString; cr].	self widget: #multiList when: #selectionChanging do: [Transcript show: (#multiList -&gt; #selectionChanging) printString; cr].	self widget: #singleList when: #tabbed do: [Transcript show: (#singleList -&gt; #tabbed) printString; cr].	self widget: #multiList when: #tabbed do: [Transcript show: (#multiList -&gt; #tabbed) printString; cr].	self widget: #singleList when: #backTabbed do: [Transcript show: (#singleList -&gt; #backTabbed) printString; cr].	self widget: #multiList when: #backTabbed do: [Transcript show: (#multiList -&gt; #backTabbed) printString; cr].	self widget: #singleList when: #itemCollapsed do: [Transcript show: (#singleList -&gt; #itemCollapsed) printString; cr].	self widget: #multiList when: #itemCollapsed do: [Transcript show: (#multiList -&gt; #itemCollapsed) printString; cr].	self widget: #singleList when: #itemExpanded do: [Transcript show: (#singleList -&gt; #itemExpanded) printString; cr].	self widget: #multiList when: #itemExpanded do: [Transcript show: (#multiList -&gt; #itemExpanded) printString; cr].</body></methods><methods><class-id>Examples.HierarchicalListEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">changeTopList	self singleList 		newObjectHierarchy: Object		childAccessor: #subclasses		childNameAccessor: #name.</body></methods><methods><class-id>Examples.GroupBoxEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">changeGroupBoxLabel	(self widgetAt: #groupBox) labelString: 'A Different Label'</body><body package="Trigger Event Testers">removeGroupBoxLabel	(self widgetAt: #groupBox) label: nil</body></methods><methods><class-id>Examples.GroupBoxEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder 	self widget: #groupBox when: #labelChanging do: [Transcript show: (#groupBox -&gt; #changing) printString; cr].	self widget: #groupBox when: #labelChanged do: [Transcript show: (#groupBox -&gt; #changed) printString; cr].</body></methods><methods><class-id>Examples.ResizingSplitterEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #horizontalSplitter when: #clicked do: [Transcript show: (#horizontalSplitter -&gt; #clicked) printString; cr].	self widget: #verticalSplitter when: #clicked do: [Transcript show: (#verticalSplitter -&gt; #clicked) printString; cr].	self widget: #horizontalSplitter when: #moved do: [Transcript show: (#horizontalSplitter -&gt; #moved) printString; cr].	self widget: #verticalSplitter when: #moved do: [Transcript show: (#verticalSplitter -&gt; #moved) printString; cr].</body></methods><methods><class-id>Examples.ToolBarEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">firstButton</body><body package="Trigger Event Testers">secondButton</body><body package="Trigger Event Testers">thirdButton</body></methods><methods><class-id>Examples.ToolBarEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self mainWindow when: #toolBarCreated send: #setupToolbarEvents to: self.</body><body package="Trigger Event Testers">setupToolbarEvents	Transcript show: (#mainWindow -&gt; #toolBarCreated) printString ; cr.	self widget: #toolbarMenu when: #toolBarButtonSelected: do: [:arg | Transcript show: (#toolBarButtonSelected: -&gt; arg) printString ; cr].</body></methods><methods><class-id>Examples.ButtonsEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">changeButtonLabel	(self widgetAt: #ActionButton1) labelString: 'New Label'</body><body package="Trigger Event Testers">changeCheckBoxLabel	(self widgetAt: #CheckBox1) labelString: 'New Label'</body><body package="Trigger Event Testers">changeRadioButtonLabel	(self widgetAt: #RadioButton1) labelString: 'New Label'</body></methods><methods><class-id>Examples.ButtonsEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">rads	^rads isNil		ifTrue:			[rads := nil asValue]		ifFalse:			[rads]</body></methods><methods><class-id>Examples.ButtonsEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self 		widget: #CheckBox1		when: #labelChanged		do: [Transcript show: (#CheckBox1 -&gt; #labelChanged) printString;cr].	self 		widget: #CheckBox1		when: #labelChanging		do: [Transcript show: (#CheckBox1 -&gt; #labelChanging) printString;cr].	self 		widget: #CheckBox1		when: #backTabbed		do: [Transcript show: (#CheckBox1 -&gt; #backTabbed) printString;cr].	self 		widget: #CheckBox1		when: #tabbed		do: [Transcript show: (#CheckBox1 -&gt; #tabbed) printString;cr].	self 		widget: #CheckBox1		when: #clicked		do: [Transcript show: (#CheckBox1 -&gt; #clicked) printString;cr].	self 		widget: #CheckBox1		when: #gettingFocus		do: [Transcript show: (#CheckBox1 -&gt; #gettingFocus) printString;cr].	self 		widget: #CheckBox1		when: #losingFocus		do: [Transcript show: (#CheckBox1 -&gt; #losingFocus) printString;cr].	self 		widget: #CheckBox1		when: #checked		do: [Transcript show: (#CheckBox1 -&gt; #checked) printString;cr].	self 		widget: #CheckBox1		when: #unchecked		do: [Transcript show: (#CheckBox1 -&gt; #unchecked) printString;cr].	self 		widget: #ActionButton1		when: #tabbed		do: [Transcript show: (#ActionButton1 -&gt; #tabbed) printString;cr].	self 		widget: #ActionButton1		when: #backTabbed		do: [Transcript show: (#ActionButton1 -&gt; #backTabbed) printString;cr].	self 		widget: #ActionButton1		when: #gettingFocus		do: [Transcript show: (#ActionButton1 -&gt; #gettingFocus) printString;cr].	self 		widget: #ActionButton1		when: #losingFocus		do: [Transcript show: (#ActionButton1 -&gt; #losingFocus) printString;cr].	self 		widget: #ActionButton1		when: #labelChanged		do: [Transcript show: (#ActionButton1 -&gt; #labelChanged) printString;cr].	self 		widget: #ActionButton1		when: #labelChanging		do: [Transcript show: (#ActionButton1 -&gt; #labelChanging) printString;cr].	self 		widget: #ActionButton1		when: #clicked		do: [Transcript show: (#ActionButton1 -&gt; #clicked) printString;cr].	self 		widget: #ActionButton1		when: #pressed		do: [Transcript show: (#ActionButton1 -&gt; #pressed) printString;cr].	self 		widget: #RadioButton1		when: #labelChanged		do: [Transcript show: (#RadioButton1 -&gt; #labelChanged) printString;cr].	self 		widget: #RadioButton1		when: #labelChanging		do: [Transcript show: (#RadioButton1 -&gt; #labelChanging) printString;cr].	self 		widget: #RadioButton1		when: #backTabbed		do: [Transcript show: (#RadioButton1 -&gt; #backTabbed) printString;cr].	self 		widget: #RadioButton1		when: #tabbed		do: [Transcript show: (#RadioButton1 -&gt; #tabbed) printString;cr].	self 		widget: #RadioButton1		when: #clicked		do: [Transcript show: (#RadioButton1 -&gt; #clicked) printString;cr].	self 		widget: #RadioButton1		when: #gettingFocus		do: [Transcript show: (#RadioButton1 -&gt; #gettingFocus) printString;cr].	self 		widget: #RadioButton1		when: #losingFocus		do: [Transcript show: (#RadioButton1 -&gt; #losingFocus) printString;cr].	self 		widget: #RadioButton1		when: #turnedOn		do: [Transcript show: (#RadioButton1 -&gt; #turnedOn) printString;cr].	self 		widget: #RadioButton1		when: #turnedOff		do: [Transcript show: (#RadioButton1 -&gt; #turnedOff) printString;cr].	self 		widget: #RadioButton2		when: #turnedOn		do: [Transcript show: (#RadioButton2 -&gt; #turnedOn) printString;cr].	self 		widget: #RadioButton2		when: #turnedOff		do: [Transcript show: (#RadioButton2 -&gt; #turnedOff) printString;cr].	self 		widget: #RadioButton2		when: #clicked		do: [Transcript show: (#RadioButton2 -&gt; #clicked) printString;cr].</body></methods><methods><class-id>Examples.MenuEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">edit</body><body package="Trigger Event Testers">editCopy</body><body package="Trigger Event Testers">editCut</body><body package="Trigger Event Testers">editSpecial</body><body package="Trigger Event Testers">editSpecialKick</body><body package="Trigger Event Testers">editSpecialKickPointAfter</body><body package="Trigger Event Testers">editSpecialKickTouchdown</body><body package="Trigger Event Testers">editSpecialPass</body><body package="Trigger Event Testers">editSpecialPunt</body><body package="Trigger Event Testers">file</body><body package="Trigger Event Testers">fileClose</body><body package="Trigger Event Testers">fileNew</body><body package="Trigger Event Testers">fileOpen</body><body package="Trigger Event Testers">newFile</body></methods><methods><class-id>Examples.MenuEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self mainWindow when: #menuBarCreated send: #setupMenuEvents to: self.	self widget: #popupEditTest when: #popupMenuCreated do: [Transcript show: (#popupEditTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupEditTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupEditTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupInputTest when: #popupMenuCreated do: [Transcript show: (#popupInputTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupInputTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupInputTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupListTest when: #popupMenuCreated do: [Transcript show: (#popupListTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupListTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupListTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupComboTest when: #popupMenuCreated do: [Transcript show: (#popupComboTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupComboTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupComboTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupHierarchicalListTest when: #popupMenuCreated do: [Transcript show: (#popupHierarchicalListTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupHierarchicalListTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupHierarchicalListTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupTreeViewTest when: #popupMenuCreated do: [Transcript show: (#popupTreeViewTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupTreeViewTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupTreeViewTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupTableTest when: #popupMenuCreated do: [Transcript show: (#popupTableTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupTableTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupTableTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupDatasetTest when: #popupMenuCreated do: [Transcript show: (#popupDatasetTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupDatasetTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupDatasetTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].	self widget: #popupSpinTest when: #popupMenuCreated do: [Transcript show: (#popupSpinTest -&gt; #popupMenuCreated) printString; cr].	self widget: #popupSpinTest when: #popupMenuItemSelected: do: [:arg | Transcript show: (#'popupSpinTest||popupMenuItemSelected:' -&gt; arg) printString ; cr].</body><body package="Trigger Event Testers">setupMenuEvents	Transcript show: (#mainWindow -&gt; #menuBarCreated) printString ; cr.	self windowMenuBar when: #menuOpened: do: [:arg | Transcript show: (#menuOpened: -&gt; arg) printString ; cr].	self windowMenuBar when: #menuClosed: do: [:arg | Transcript show: (#menuClosed: -&gt; arg) printString ; cr].	self windowMenuBar when: #menuItemSelected: do: [:arg | Transcript show: (#menuItemSelected: -&gt; arg) printString ; cr].	self windowMenuBar when: #submenuOpened: do: [:arg | Transcript show: (#submenuOpened: -&gt; arg) printString ; cr].	self windowMenuBar when: #submenuClosed: do: [:arg | Transcript show: (#submenuClosed: -&gt; arg) printString ; cr].</body></methods><methods><class-id>Examples.RegionEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #region when: #changing do: [Transcript show: (#region -&gt; #changing) printString; cr].	self widget: #region when: #changed do: [Transcript show: (#region -&gt; #changed) printString; cr].</body></methods><methods><class-id>Examples.RegionEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">changeBorderColor	(self widgetAt: #region) lineColor: ColorValue red</body><body package="Trigger Event Testers">changeBorderSize	(self widgetAt: #region) lineWidth: (self widgetAt: #region) lineWidth // 2</body><body package="Trigger Event Testers">changeInsideColor	(self widgetAt: #region) insideColor: ColorValue white</body><body package="Trigger Event Testers">changeSize	(self widgetAt: #region) extent: 20 @ 60</body></methods><methods><class-id>Examples.DialogEventTester</class-id> <category>initialize-release</category><body package="Trigger Event Testers">initialize	super initialize.	self postBuildBlock: [:myself :mybuilder |	self mainWindow when: #activate do: [Transcript show: (#mainWindow -&gt; #activate) printString; cr].	self mainWindow when: #bounds do: [Transcript show: (#mainWindow -&gt; #bounds) printString; cr].	self mainWindow when: #close do: [Transcript show: (#mainWindow -&gt; #close) printString; cr].	self mainWindow when: #collapse do: [Transcript show: (#mainWindow -&gt; #collapse) printString; cr].	self mainWindow when: #deactivate do: [Transcript show: (#mainWindow -&gt; #deactivate) printString; cr].	self mainWindow when: #destroy do: [Transcript show: (#mainWindow -&gt; #destroy) printString; cr].	self mainWindow when: #expand do: [Transcript show: (#mainWindow -&gt; #expand) printString; cr].	self mainWindow when: #expose do: [Transcript show: (#mainWindow -&gt; #expose) printString; cr].	self mainWindow when: #move do: [Transcript show: (#mainWindow -&gt; #move) printString; cr].	self mainWindow when: #resize do: [Transcript show: (#mainWindow -&gt; #resize) printString; cr].	self mainWindow when: #enter do: [Transcript show: (#mainWindow -&gt; #enter) printString; cr].	self mainWindow when: #exit do: [Transcript show: (#mainWindow -&gt; #exit) printString; cr].	self mainWindow when: #closing do: [Transcript show: (#mainWindow -&gt; #closing) printString; cr].	self mainWindow when: #opening do: [Transcript show: (#mainWindow -&gt; #opening) printString; cr].	self mainWindow when: #mapped do: [Transcript show: (#mainWindow -&gt; #mapped) printString; cr].	self mainWindow when: #unmapped do: [Transcript show: (#mainWindow -&gt; #unmapped) printString; cr].	self mainWindow when: #moving do: [Transcript show: (#mainWindow -&gt; #moving) printString; cr].	self mainWindow when: #gettingFocus do: [Transcript show: (#mainWindow -&gt; #gettingFocus) printString; cr].	self mainWindow when: #losingFocus do: [Transcript show: (#mainWindow -&gt; #losingFocus) printString; cr].	"unknown event is commented out in this tester because there are SO many of them!"	"self mainWindow when: #unknownEvent do: [Transcript show: (#mainWindow -&gt; #unknownEvent) printString; cr]."	self mainWindow when: #clicked do: [Transcript show: (#mainWindow -&gt; #clicked) printString; cr].	self mainWindow when: #rightClicked do: [Transcript show: (#mainWindow -&gt; #rightClicked) printString; cr].	self mainWindow when: #doubleClicked do: [Transcript show: (#mainWindow -&gt; #doubleClicked) printString; cr].	self mainWindow when: #middleClicked do: [Transcript show: (#mainWindow -&gt; #middleClicked) printString; cr].	self mainWindow when: #scrollLeft do: [Transcript show: (#mainWindow -&gt; #scrollLeft) printString; cr].	self mainWindow when: #scrollRight do: [Transcript show: (#mainWindow -&gt; #scrollRight) printString; cr].	self mainWindow when: #scrollDown do: [Transcript show: (#mainWindow -&gt; #scrollDown) printString; cr].	self mainWindow when: #scrollUp do: [Transcript show: (#mainWindow -&gt; #scrollUp) printString; cr].].</body></methods><methods><class-id>Examples.TreeViewEventTester</class-id> <category>tree view emphasis</category><body package="Trigger Event Testers">closedEmphasis	"This stub method was generated by UIDefiner	This method should answer an Array of Text emphasis values	Examples:		Array with: #bold with: #color-&gt;ColorValue blue		#(#bold #italic)"	^#(#bold)</body><body package="Trigger Event Testers">leafEmphasis: aTreeValue	"This stub method was generated by UIDefiner	This method should answer an Array of Text emphasis values	Examples:		Array with: #bold with: #color-&gt;ColorValue blue		#(#bold #italic)"	aTreeValue == VisualBlock ifTrue: [^Array with: #bold with: #color-&gt;ColorValue blue].	^#(#normal)</body><body package="Trigger Event Testers">openedEmphasis	"This stub method was generated by UIDefiner	This method should answer an Array of Text emphasis values	Examples:		Array with: #bold with: #color-&gt;ColorValue blue		#(#bold #italic)"	^#(#italic)</body></methods><methods><class-id>Examples.TreeViewEventTester</class-id> <category>callbacks</category><body package="Trigger Event Testers">notification	"Signal that a notification callback occurred"	(self builder componentAt:#notification) flash.</body><body package="Trigger Event Testers">validate	"Signal that a validation callback occurred"	(self builder componentAt:#validate) flash.	^true</body></methods><methods><class-id>Examples.TreeViewEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">multiSelect	^multiSelect isNil		ifTrue:			[multiSelect := MultiSelectionInTree new]		ifFalse:			[multiSelect]</body><body package="Trigger Event Testers">singleSelect	^singleSelect isNil		ifTrue:			[singleSelect := SelectionInTree new]		ifFalse:			[singleSelect]</body></methods><methods><class-id>Examples.TreeViewEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">initializeLists	self singleSelect tree		root: VisualComponent		displayIt: true		childrenBlock: [:each | each subclasses]		hasChildrenBlock: [:each | each getSubclasses notNil].	self multiSelect tree		root: (ClassWrapper on: Magnitude)		displayIt: false		childrenBlock: [:each | each subclasses]		hasChildrenBlock: [:each | each getSubclasses notNil].</body><body package="Trigger Event Testers">postBuildWith: aBuilder 	self initializeLists.	self widget: #singleSelect when: #gettingFocus do: [Transcript show: (#singleSelect -&gt; #gettingFocus) printString; cr].	self widget: #multiSelect when: #gettingFocus do: [Transcript show: (#multiSelect -&gt; #gettingFocus) printString; cr].	self widget: #singleSelect when: #losingFocus do: [Transcript show: (#singleSelect -&gt; #losingFocus) printString; cr].	self widget: #multiSelect when: #losingFocus do: [Transcript show: (#multiSelect -&gt; #losingFocus) printString; cr].	self widget: #singleSelect when: #rightClicked do: [Transcript show: (#singleSelect -&gt; #rightClicked) printString; cr].	self widget: #multiSelect when: #rightClicked do: [Transcript show: (#multiSelect -&gt; #rightClicked) printString; cr].	self widget: #singleSelect when: #doubleClicked do: [Transcript show: (#singleSelect -&gt; #doubleClicked) printString; cr].	self widget: #multiSelect when: #doubleClicked do: [Transcript show: (#multiSelect -&gt; #doubleClicked) printString; cr].	self widget: #singleSelect when: #clicked do: [Transcript show: (#singleSelect -&gt; #clicked) printString; cr].	self widget: #multiSelect when: #clicked do: [Transcript show: (#multiSelect -&gt; #clicked) printString; cr].	self widget: #singleSelect when: #scrollUp do: [Transcript show: (#singleSelect -&gt; #scrollUp) printString; cr].	self widget: #multiSelect when: #scrollUp do: [Transcript show: (#multiSelect -&gt; #scrollUp) printString; cr].	self widget: #singleSelect when: #scrollDown do: [Transcript show: (#singleSelect -&gt; #scrollDown) printString; cr].	self widget: #multiSelect when: #scrollDown do: [Transcript show: (#multiSelect -&gt; #scrollDown) printString; cr].	self widget: #singleSelect when: #scrollRight do: [Transcript show: (#singleSelect -&gt; #scrollRight) printString; cr].	self widget: #multiSelect when: #scrollRight do: [Transcript show: (#multiSelect -&gt; #scrollRight) printString; cr].	self widget: #singleSelect when: #scrollLeft do: [Transcript show: (#singleSelect -&gt; #scrollLeft) printString; cr].	self widget: #multiSelect when: #scrollLeft do: [Transcript show: (#multiSelect -&gt; #scrollLeft) printString; cr].	self widget: #singleSelect when: #selectionListChanged do: [Transcript show: (#singleSelect -&gt; #selectionListChanged) printString; cr.].	self widget: #multiSelect when: #selectionListChanged do: [Transcript show: (#multiSelect -&gt; #selectionListChanged) printString; cr].	self widget: #singleSelect when: #selectionChanged do: [Transcript show: (#singleSelect -&gt; #selectionChanged) printString; cr].	self widget: #multiSelect when: #selectionChanged do: [Transcript show: (#multiSelect -&gt; #selectionChanged) printString; cr].	self widget: #singleSelect when: #selectionChanging do: [Transcript show: (#singleSelect -&gt; #selectionChanging) printString; cr].	self widget: #multiSelect when: #selectionChanging do: [Transcript show: (#multiSelect -&gt; #selectionChanging) printString; cr].	self widget: #singleSelect when: #tabbed do: [Transcript show: (#singleSelect -&gt; #tabbed) printString; cr].	self widget: #multiSelect when: #tabbed do: [Transcript show: (#multiSelect -&gt; #tabbed) printString; cr].	self widget: #singleSelect when: #backTabbed do: [Transcript show: (#singleSelect -&gt; #backTabbed) printString; cr].	self widget: #multiSelect when: #backTabbed do: [Transcript show: (#multiSelect -&gt; #backTabbed) printString; cr].	self widget: #singleSelect when: #itemCollapsed do: [Transcript show: (#singleSelect -&gt; #itemCollapsed) printString; cr].	self widget: #multiSelect when: #itemCollapsed do: [Transcript show: (#multiSelect -&gt; #itemCollapsed) printString; cr].	self widget: #singleSelect when: #itemExpanded do: [Transcript show: (#singleSelect -&gt; #itemExpanded) printString; cr].	self widget: #multiSelect when: #itemExpanded do: [Transcript show: (#multiSelect -&gt; #itemExpanded) printString; cr].	self widget: #multiSelect when: #itemEdited do: [Transcript show: (#multiSelect -&gt; #itemEdited) printString; cr].</body></methods><methods><class-id>Examples.SubCanvasEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">changeSubcanvas	(self widgetAt: #sub) client: RegionEventTester new</body></methods><methods><class-id>Examples.SubCanvasEventTester</class-id> <category>accessing</category><body package="Trigger Event Testers">client	^client isNil		ifTrue:			[client := ButtonsEventTester new]		ifFalse:			[client]</body></methods><methods><class-id>Examples.SubCanvasEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #sub when: #changing do: [Transcript show: (#sub -&gt; #changing) printString; cr].	self widget: #sub when: #changed do: [Transcript show: (#sub -&gt; #changed) printString; cr].	self widget: #sub when: #scrollRight do: [Transcript show: (#sub -&gt; #scrollRight) printString; cr].	self widget: #sub when: #scrollLeft do: [Transcript show: (#sub -&gt; #scrollLeft) printString; cr].	self widget: #sub when: #scrollUp do: [Transcript show: (#sub -&gt; #scrollUp) printString; cr].	self widget: #sub when: #scrollDown do: [Transcript show: (#sub -&gt; #scrollDown) printString; cr].</body></methods><methods><class-id>Examples.PercentSliderEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">percentDoneValue	^percentDoneValue isNil		ifTrue:			[percentDoneValue := 0.0 asValue]		ifFalse:			[percentDoneValue]</body><body package="Trigger Event Testers">sliderValue	^sliderValue isNil		ifTrue:			[sliderValue := 0 asValue]		ifFalse:			[sliderValue]</body></methods><methods><class-id>Examples.PercentSliderEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">setProgressTo100	 self percentDoneValue value: 1.0</body><body package="Trigger Event Testers">setSliderTo0	self sliderValue value: 0</body></methods><methods><class-id>Examples.PercentSliderEventTester</class-id> <category>triggered events</category><body package="Trigger Event Testers">updatePercentAndLabel	| newValue |	(self widgetAt: #sliderValue) labelString: (newValue := self sliderValue value) printString.	self percentDoneValue value: (newValue / 100)</body></methods><methods><class-id>Examples.PercentSliderEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	(self widgetAt: #sliderValue) labelString: '0'.	self widget: #slider when: #changing do: [Transcript show: (#slider -&gt; #changing) printString; cr].	self widget: #slider when: #changed do: [Transcript show: (#slider -&gt; #changed) printString; cr].	self widget: #percentDone when: #changed do: [Transcript show: (#percentDone -&gt; #changed) printString; cr].	"And now, really hooking it up!"	self widget: #slider when: #changed send: #updatePercentAndLabel to: self.</body></methods><methods><class-id>Examples.MenuButtonEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">changeBottomMenu	| classes |	classes := LookupKey allSubclasses asSortedCollection: [:a :b | a printString &lt; b printString].	menuModel value: (Menu				labelArray: (classes collect: [:each | each printString])				values: classes)</body></methods><methods><class-id>Examples.MenuButtonEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #popDownMenu when: #changed do: [Transcript show: (#popDownMenu -&gt; #changed) printString; cr].	self widget: #popUpMenu when: #changed do: [Transcript show: (#popUpMenu -&gt; #changed) printString; cr].	self widget: #popDownMenu when: #changing do: [Transcript show: (#popDownMenu -&gt; #changing) printString; cr].	self widget: #popUpMenu when: #changing do: [Transcript show: (#popUpMenu -&gt; #changing) printString; cr].	self widget: #popDownMenu when: #clicked do: [Transcript show: (#popDownMenu -&gt; #clicked) printString; cr].	self widget: #popUpMenu when: #clicked do: [Transcript show: (#popUpMenu -&gt; #clicked) printString; cr].	self widget: #popDownMenu when: #listExposed do: [Transcript show: (#popDownMenu -&gt; #listExposed) printString; cr].	self widget: #popUpMenu when: #listExposed do: [Transcript show: (#popUpMenu -&gt; #listExposed) printString; cr].	self widget: #popDownMenu when: #listClosed do: [Transcript show: (#popDownMenu -&gt; #listClosed) printString; cr].	self widget: #popUpMenu when: #listClosed do: [Transcript show: (#popUpMenu -&gt; #listClosed) printString; cr].	self widget: #popDownMenu when: #gettingFocus do: [Transcript show: (#popDownMenu -&gt; #gettingFocus) printString; cr].	self widget: #popUpMenu when: #gettingFocus do: [Transcript show: (#popUpMenu -&gt; #gettingFocus) printString; cr].	self widget: #popDownMenu when: #losingFocus do: [Transcript show: (#popDownMenu -&gt; #losingFocus) printString; cr].	self widget: #popUpMenu when: #losingFocus do: [Transcript show: (#popUpMenu -&gt; #losingFocus) printString; cr].	self widget: #popDownMenu when: #tabbed do: [Transcript show: (#popDownMenu -&gt; #tabbed) printString; cr].	self widget: #popUpMenu when: #tabbed do: [Transcript show: (#popUpMenu -&gt; #tabbed) printString; cr].	self widget: #popDownMenu when: #backTabbed do: [Transcript show: (#popDownMenu -&gt; #backTabbed) printString; cr].	self widget: #popUpMenu when: #backTabbed do: [Transcript show: (#popUpMenu -&gt; #backTabbed) printString; cr].</body></methods><methods><class-id>Examples.MenuButtonEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">anotherMenu	| classes |	classes := ApplicationModel allSubclasses asSortedCollection: [:a :b | a printString &lt; b printString].	^Menu		labelArray: (classes collect: [:each | each printString])		values: classes</body><body package="Trigger Event Testers">menuModel	^menuModel isNil 		ifTrue: 			[| classes |			classes := CharacterArray allSubclasses 						asSortedCollection: [:a :b | a printString &lt; b printString].			menuModel := (Menu 						labelArray: (classes collect: [:each | each printString])						values: classes) asValue]		ifFalse: [menuModel]</body></methods><methods><class-id>Examples.ClickWidgetEventTester</class-id> <category>clicks</category><body package="Trigger Event Testers">aC	self clicked value: 'a C'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">aD	self clicked value: 'a D'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">aG	self clicked value: 'a G'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">aK	self clicked value: 'a K'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">aP	self clicked value: 'a P'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">aT	self clicked value: 'a T'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">anA	"Someone clicked an A!"	self clicked value: 'an A'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">anE	self clicked value: 'an E'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">anI	self clicked value: 'an I'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">anL	self clicked value: 'an L'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">anR	self clicked value: 'an R'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">ouch	self clicked value: 'Ouch! That''s sharp!'.	self hits value: hits value + 1</body><body package="Trigger Event Testers">theLogo	self clicked value: 'the ParcPlace-Digitalk logo'.	self hits value: hits value + 1</body></methods><methods><class-id>Examples.ClickWidgetEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">clicked	^clicked isNil		ifTrue:			[clicked := String new asValue]		ifFalse:			[clicked]</body><body package="Trigger Event Testers">helpText	^self class helpText asValue</body><body package="Trigger Event Testers">hits	^hits isNil		ifTrue:			[hits := 0 asValue]		ifFalse:			[hits]</body><body package="Trigger Event Testers">misses	^misses isNil		ifTrue:			[misses := 0 asValue]		ifFalse:			[misses]</body></methods><methods><class-id>Examples.ClickWidgetEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #logoImage when: #clicked do: [Transcript show: (#logoImage -&gt; #clicked) printString; cr].	self widget: #logoImage when: #hitMappedRegion do: [Transcript show: (#logoImage -&gt; #hitMappedRegion) printString; cr].	self widget: #logoImage when: #missedMappedRegion do: [Transcript show: (#logoImage -&gt; #missedMappedRegion) printString; cr].</body></methods><methods><class-id>Examples.ClickWidgetEventTester class</class-id> <category>resources</category><body package="Trigger Event Testers">helpText	^Text string: 'This is a demonstration of the ClickWidget. Please click anywhere in the graphic above. (Note: No default hit selector)' runs: (RunArray runs: #(31 11 77) values: #(nil #bold nil))</body><body package="Trigger Event Testers">other	^Image parcPlaceLogo</body></methods><methods><class-id>Examples.ListBoxEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">addItemToBottomList	"This one changes the WHOLE list"	| list |	list := self multiSelectList list copy.	list addFirst:  'I''m a new item in the bottom list!'.	^self multiSelectList list: list</body><body package="Trigger Event Testers">addItemToTopList	"This one just modifies the list (Note, the List has to have dependents in order to work here)"		self singleSelectList list addFirst: 'I''m a new item in the top list!'.</body></methods><methods><class-id>Examples.ListBoxEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">multiSelectList	^multiSelectList isNil		ifTrue:			[multiSelectList := MultiSelectionInList new]		ifFalse:			[multiSelectList]</body><body package="Trigger Event Testers">singleSelectList	^singleSelectList isNil		ifTrue:			[singleSelectList := SelectionInList new]		ifFalse:			[singleSelectList]</body></methods><methods><class-id>Examples.ListBoxEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	singleSelectList list: (ApplicationModel allSubclasses collect: [:each | each name]) asList.	multiSelectList list: (ApplicationModel allSubclasses collect: [:each | each name, ' - Made Long For Scrolling']) asList.	self widget: #singleSelectList when: #gettingFocus do: [Transcript show: (#singleSelectList -&gt; #gettingFocus) printString; cr].	self widget: #multiSelectList when: #gettingFocus do: [Transcript show: (#multiSelectList -&gt; #gettingFocus) printString; cr].	self widget: #singleSelectList when: #losingFocus do: [Transcript show: (#singleSelectList -&gt; #losingFocus) printString; cr].	self widget: #multiSelectList when: #losingFocus do: [Transcript show: (#multiSelectList -&gt; #losingFocus) printString; cr].	self widget: #singleSelectList when: #rightClicked do: [Transcript show: (#singleSelectList -&gt; #rightClicked) printString; cr].	self widget: #multiSelectList when: #rightClicked do: [Transcript show: (#multiSelectList -&gt; #rightClicked) printString; cr].	self widget: #singleSelectList when: #doubleClicked do: [Transcript show: (#singleSelectList -&gt; #doubleClicked) printString; cr].	self widget: #multiSelectList when: #doubleClicked do: [Transcript show: (#multiSelectList -&gt; #doubleClicked) printString; cr].	self widget: #singleSelectList when: #clicked do: [Transcript show: (#singleSelectList -&gt; #clicked) printString; cr].	self widget: #multiSelectList when: #clicked do: [Transcript show: (#multiSelectList -&gt; #clicked) printString; cr].	self widget: #singleSelectList when: #scrollUp do: [Transcript show: (#singleSelectList -&gt; #scrollUp) printString; cr].	self widget: #multiSelectList when: #scrollUp do: [Transcript show: (#multiSelectList -&gt; #scrollUp) printString; cr].	self widget: #singleSelectList when: #scrollDown do: [Transcript show: (#singleSelectList -&gt; #scrollDown) printString; cr].	self widget: #multiSelectList when: #scrollDown do: [Transcript show: (#multiSelectList -&gt; #scrollDown) printString; cr].	self widget: #singleSelectList when: #scrollRight do: [Transcript show: (#singleSelectList -&gt; #scrollRight) printString; cr].	self widget: #multiSelectList when: #scrollRight do: [Transcript show: (#multiSelectList -&gt; #scrollRight) printString; cr].	self widget: #singleSelectList when: #scrollLeft do: [Transcript show: (#singleSelectList -&gt; #scrollLeft) printString; cr].	self widget: #multiSelectList when: #scrollLeft do: [Transcript show: (#multiSelectList -&gt; #scrollLeft) printString; cr].	self widget: #singleSelectList when: #selectionListChanged do: [Transcript show: (#singleSelectList -&gt; #selectionListChanged) printString; cr].	self widget: #multiSelectList when: #selectionListChanged do: [Transcript show: (#multiSelectList -&gt; #selectionListChanged) printString; cr].	self widget: #singleSelectList when: #selectionChanged do: [Transcript show: (#singleSelectList -&gt; #selectionChanged) printString; cr].	self widget: #multiSelectList when: #selectionChanged do: [Transcript show: (#multiSelectList -&gt; #selectionChanged) printString; cr].	self widget: #singleSelectList when: #selectionChanging do: [Transcript show: (#singleSelectList -&gt; #selectionChanging) printString; cr].	self widget: #multiSelectList when: #selectionChanging do: [Transcript show: (#multiSelectList -&gt; #selectionChanging) printString; cr].	self widget: #singleSelectList when: #tabbed do: [Transcript show: (#singleSelectList -&gt; #tabbed) printString; cr].	self widget: #multiSelectList when: #tabbed do: [Transcript show: (#multiSelectList -&gt; #tabbed) printString; cr].	self widget: #singleSelectList when: #backTabbed do: [Transcript show: (#singleSelectList -&gt; #backTabbed) printString; cr].	self widget: #multiSelectList when: #backTabbed do: [Transcript show: (#multiSelectList -&gt; #backTabbed) printString; cr].</body></methods><methods><class-id>Examples.WindowEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self mainWindow when: #activate do: [Transcript show: (#mainWindow -&gt; #activate) printString; cr].	self mainWindow when: #bounds do: [Transcript show: (#mainWindow -&gt; #bounds) printString; cr].	self mainWindow when: #close do: [Transcript show: (#mainWindow -&gt; #close) printString; cr].	self mainWindow when: #collapse do: [Transcript show: (#mainWindow -&gt; #collapse) printString; cr].	self mainWindow when: #deactivate do: [Transcript show: (#mainWindow -&gt; #deactivate) printString; cr].	self mainWindow when: #destroy do: [Transcript show: (#mainWindow -&gt; #destroy) printString; cr].	self mainWindow when: #expand do: [Transcript show: (#mainWindow -&gt; #expand) printString; cr].	self mainWindow when: #expose do: [Transcript show: (#mainWindow -&gt; #expose) printString; cr].	self mainWindow when: #move do: [Transcript show: (#mainWindow -&gt; #move) printString; cr].	self mainWindow when: #resize do: [Transcript show: (#mainWindow -&gt; #resize) printString; cr].	self mainWindow when: #enter do: [Transcript show: (#mainWindow -&gt; #enter) printString; cr].	self mainWindow when: #exit do: [Transcript show: (#mainWindow -&gt; #exit) printString; cr].	self mainWindow when: #closing do: [Transcript show: (#mainWindow -&gt; #closing) printString; cr].	self mainWindow when: #opening do: [Transcript show: (#mainWindow -&gt; #opening) printString; cr].	self mainWindow when: #mapped do: [Transcript show: (#mainWindow -&gt; #mapped) printString; cr].	self mainWindow when: #unmapped do: [Transcript show: (#mainWindow -&gt; #unmapped) printString; cr].	self mainWindow when: #moving do: [Transcript show: (#mainWindow -&gt; #moving) printString; cr].	self mainWindow when: #gettingFocus do: [Transcript show: (#mainWindow -&gt; #gettingFocus) printString; cr].	self mainWindow when: #losingFocus do: [Transcript show: (#mainWindow -&gt; #losingFocus) printString; cr].	"unknown event is commented out in this tester because there are SO many of them!"	"self mainWindow when: #unknownEvent do: [Transcript show: (#mainWindow -&gt; #unknownEvent) printString; cr]."	self mainWindow when: #clicked do: [Transcript show: (#mainWindow -&gt; #clicked) printString; cr].	self mainWindow when: #rightClicked do: [Transcript show: (#mainWindow -&gt; #rightClicked) printString; cr].	self mainWindow when: #doubleClicked do: [Transcript show: (#mainWindow -&gt; #doubleClicked) printString; cr].	self mainWindow when: #middleClicked do: [Transcript show: (#mainWindow -&gt; #middleClicked) printString; cr].	self mainWindow when: #scrollLeft do: [Transcript show: (#mainWindow -&gt; #scrollLeft) printString; cr].	self mainWindow when: #scrollRight do: [Transcript show: (#mainWindow -&gt; #scrollRight) printString; cr].	self mainWindow when: #scrollDown do: [Transcript show: (#mainWindow -&gt; #scrollDown) printString; cr].	self mainWindow when: #scrollUp do: [Transcript show: (#mainWindow -&gt; #scrollUp) printString; cr].</body></methods><methods><class-id>Examples.WindowEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">moveMe	self mainWindow moveTo: 300 @ 300</body><body package="Trigger Event Testers">talk	Screen default ringBell</body></methods><methods><class-id>Examples.DatasetEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">addRowToSingleSelectDataset	self singleSelectList list add: ClassWrapper new</body><body package="Trigger Event Testers">columnReorder	(self widgetAt: #multiSelect) allowColumnReordering: self columnReordering value</body><body package="Trigger Event Testers">columnResize	(self widgetAt: #multiSelect) allowColumnResizing: self columnResizing value</body><body package="Trigger Event Testers">columnSort	(self widgetAt: #multiSelect) allowSorting: self columnSorting value</body><body package="Trigger Event Testers">multiSelectRowHolderCheckBoxLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x checkBox printString &lt;= y checkBox printString].	dscSortBlock := [:x :y | x checkBox printString &gt;= y checkBox printString].	self multiSelectList sortAspect == #multiSelectRowHolderCheckBox		ifTrue: [			self multiSelectList sortDirection == #asc				ifTrue: [self multiSelectList sortDirection: #dsc.					sortBlock := ascSortBlock]				ifFalse: [self multiSelectList sortDirection: #asc.					sortBlock := dscSortBlock]]		ifFalse: [self multiSelectList sortAspect: #multiSelectRowHolderCheckBox.				self multiSelectList sortDirection: #dsc.				sortBlock := ascSortBlock].	self multiSelectList list:		(SortedCollection withAll: (self multiSelectList list)			sortBlock: sortBlock) asList.</body><body package="Trigger Event Testers">multiSelectRowHolderIvarNameLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock | 	ascSortBlock := [:x :y | x ivarName printString &lt;= y ivarName printString].	dscSortBlock := [:x :y | x ivarName printString &gt;= y ivarName printString].	self multiSelectList sortAspect == #multiSelectRowHolderIvarName		ifTrue: [			self multiSelectList sortDirection == #asc				ifTrue: [self multiSelectList sortDirection: #dsc.					sortBlock := ascSortBlock]				ifFalse: [self multiSelectList sortDirection: #asc.					sortBlock := dscSortBlock]]		ifFalse: [self multiSelectList sortAspect: #multiSelectRowHolderIvarName.				self multiSelectList sortDirection: #dsc.				sortBlock := ascSortBlock].	self multiSelectList list:		(SortedCollection			withAll: (self multiSelectList list)			sortBlock: sortBlock) asList.</body><body package="Trigger Event Testers">multiSelectRowHolderNameLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x name printString &lt;= y name printString].	dscSortBlock := [:x :y | x name printString &gt;= y name printString].	self multiSelectList sortAspect == #multiSelectRowHolderName		ifTrue: [			self multiSelectList sortDirection == #asc				ifTrue: [self multiSelectList sortDirection: #dsc.					sortBlock := ascSortBlock]				ifFalse: [self multiSelectList sortDirection: #asc.					sortBlock := dscSortBlock]]		ifFalse: [self multiSelectList sortAspect: #multiSelectRowHolderName.				self multiSelectList sortDirection: #dsc.				sortBlock := ascSortBlock].	self multiSelectList list:		(SortedCollection withAll: (self multiSelectList list)			sortBlock: sortBlock) asList.</body><body package="Trigger Event Testers">removeRowToSingleSelectDataset	self singleSelectList selectionDo:[:selection| self singleSelectList list remove: selection]</body></methods><methods><class-id>Examples.DatasetEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">columnReordering	^columnReordering isNil		ifTrue:			[columnReordering := true asValue]		ifFalse:			[columnReordering]</body><body package="Trigger Event Testers">columnResizing	^columnResizing isNil		ifTrue:			[columnResizing := true asValue]		ifFalse:			[columnResizing]</body><body package="Trigger Event Testers">columnSorting	^columnSorting isNil		ifTrue:			[columnSorting := true asValue]		ifFalse:			[columnSorting]</body><body package="Trigger Event Testers">ivarNames	^[self singleSelectRowHolder value ivarNames asList]</body><body package="Trigger Event Testers">multiIvarNames	^[self multiSelectRowHolder value ivarNames asList]</body><body package="Trigger Event Testers">multiSelectList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^multiSelectList isNil		ifTrue:			[multiSelectList :=  MultiSelectionInListSortAware new.			multiSelectList selectionIndexHolder compute:				[:v |				multiSelectList selections isEmpty ifFalse: [					self multiSelectRowHolder value: multiSelectList selections first]].			multiSelectList]		ifFalse:			[multiSelectList]</body><body package="Trigger Event Testers">multiSelectRowHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^multiSelectRowHolder isNil		ifTrue:			[multiSelectRowHolder := nil asValue]		ifFalse:			[multiSelectRowHolder]</body><body package="Trigger Event Testers">singleSelectList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^singleSelectList isNil		ifTrue:			[singleSelectList :=  SelectionInList new.			singleSelectList selectionIndexHolder compute:				[:v |				self singleSelectRowHolder value: singleSelectList selection].			singleSelectList]		ifFalse:			[singleSelectList]</body><body package="Trigger Event Testers">singleSelectRowHolder	^singleSelectRowHolder isNil		ifTrue:			[singleSelectRowHolder := nil asValue]		ifFalse:			[singleSelectRowHolder]</body></methods><methods><class-id>Examples.DatasetEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">initLists	self singleSelectList list: (ApplicationModel withAllSubclasses asList collect: [:each | ClassWrapper on: each]) .	self multiSelectList list: (Change withAllSubclasses collect: [:each | ClassWrapper on: each]) .	self columnSorting onChangeSend: #columnSort to: self.	self columnResizing onChangeSend: #columnResize to: self.	self columnReordering onChangeSend: #columnReorder to: self.</body><body package="Trigger Event Testers">postBuildWith: aBuilder	self initLists.	self widget: #singleSelect when: #rightClicked do: [Transcript show: (#singleSelect -&gt; #rightClicked) printString; cr].	self widget: #multiSelect when: #rightClicked do: [Transcript show: (#multiSelect -&gt; #rightClicked) printString; cr].	self widget: #singleSelect when: #selectionListChanged do: [Transcript show: (#singleSelect -&gt; #selectionListChanged) printString; cr].	self widget: #singleSelect when: #doubleClicked do: [Transcript show: (#singleSelect -&gt; #doubleClicked) printString; cr].	self widget: #multiSelect when: #doubleClicked do: [Transcript show: (#multiSelect -&gt; #doubleClicked) printString; cr].	self widget: #singleSelect when: #gettingFocus do: [Transcript show: (#singleSelect -&gt; #gettingFocus) printString; cr].	self widget: #multiSelect when: #gettingFocus do: [Transcript show: (#multiSelect -&gt; #gettingFocus) printString; cr].	self widget: #singleSelect when: #losingFocus do: [Transcript show: (#singleSelect -&gt; #losingFocus) printString; cr].	self widget: #multiSelect when: #losingFocus do: [Transcript show: (#multiSelect -&gt; #losingFocus) printString; cr].	self widget: #singleSelect when: #cellGettingFocus do: [Transcript show: (#singleSelect -&gt; #cellGettingFocus) printString; cr].	self widget: #multiSelect when: #cellGettingFocus do: [Transcript show: (#multiSelect -&gt; #cellGettingFocus) printString; cr].	self widget: #singleSelect when: #cellLosingFocus do: [Transcript show: (#singleSelect -&gt; #cellLosingFocus) printString; cr].	self widget: #multiSelect when: #cellLosingFocus do: [Transcript show: (#multiSelect -&gt; #cellLosingFocus) printString; cr].	self widget: #singleSelect when: #tabbed do: [Transcript show: (#singleSelect -&gt; #tabbed) printString; cr].	self widget: #multiSelect when: #tabbed do: [Transcript show: (#multiSelect -&gt; #tabbed) printString; cr].	self widget: #singleSelect when: #backTabbed do: [Transcript show: (#singleSelect -&gt; #backTabbed) printString; cr].	self widget: #multiSelect when: #backTabbed do: [Transcript show: (#multiSelect -&gt; #backTabbed) printString; cr].	self widget: #singleSelect when: #cellTabbed do: [Transcript show: (#singleSelect -&gt; #cellTabbed) printString; cr].	self widget: #multiSelect when: #cellTabbed do: [Transcript show: (#multiSelect -&gt; #cellTabbed) printString; cr].	self widget: #singleSelect when: #cellBackTabbed do: [Transcript show: (#singleSelect -&gt; #cellBackTabbed) printString; cr].	self widget: #multiSelect when: #cellBackTabbed do: [Transcript show: (#multiSelect -&gt; #cellBackTabbed) printString; cr].	self widget: #singleSelect when: #scrollRight do: [Transcript show: (#singleSelect -&gt; #scrollRight) printString; cr].	self widget: #multiSelect when: #scrollRight do: [Transcript show: (#multiSelect -&gt; #scrollRight) printString; cr].	self widget: #singleSelect when: #scrollLeft do: [Transcript show: (#singleSelect -&gt; #scrollLeft) printString; cr].	self widget: #multiSelect when: #scrollLeft do: [Transcript show: (#multiSelect -&gt; #scrollLeft) printString; cr].	self widget: #singleSelect when: #scrollDown do: [Transcript show: (#singleSelect -&gt; #scrollDown) printString; cr].	self widget: #multiSelect when: #scrollDown do: [Transcript show: (#multiSelect -&gt; #scrollDown) printString; cr].	self widget: #singleSelect when: #scrollUp do: [Transcript show: (#singleSelect -&gt; #scrollUp) printString; cr].	self widget: #multiSelect when: #scrollUp do: [Transcript show: (#multiSelect -&gt; #scrollUp) printString; cr].	self widget: #singleSelect when: #cellValueChanged do: [Transcript show: (#singleSelect -&gt; #cellValueChanged) printString; cr].	self widget: #multiSelect when: #cellValueChanged do: [Transcript show: (#multiSelect -&gt; #cellValueChanged) printString; cr].	self widget: #singleSelect when: #columnLabelClicked do: [Transcript show: (#singleSelect -&gt; #columnLabelClicked) printString; cr].	self widget: #multiSelect when: #columnLabelClicked do: [Transcript show: (#multiSelect -&gt; #columnLabelClicked) printString; cr].	self widget: #singleSelect when: #rowLabelClicked do: [Transcript show: (#singleSelect -&gt; #rowLabelClicked) printString; cr].	self widget: #multiSelect when: #rowLabelClicked do: [Transcript show: (#multiSelect -&gt; #rowLabelClicked) printString; cr].	self widget: #multiSelect when: #rowSelectionsChanging do: [Transcript show: (#multiSelect -&gt; #rowSelectionsChanging) printString; cr].	self widget: #multiSelect when: #rowSelectionsChanged do: [Transcript show: (#multiSelect -&gt; #rowSelectionsChanged) printString; cr].</body></methods><methods><class-id>Examples.ComboBoxEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">bottomChoices	^(ApplicationModel allSubclasses collect: [:each | each name]) asList asValue</body><body package="Trigger Event Testers">bottomValue	^bottomValue isNil		ifTrue:			[bottomValue := String new asValue]		ifFalse:			[bottomValue]</body><body package="Trigger Event Testers">editableChoices	^(LookupKey allSubclasses collect: [:each | each name]) asList asValue</body><body package="Trigger Event Testers">editableValue	^editableValue isNil		ifTrue:			[editableValue := String new asValue]		ifFalse:			[editableValue]</body><body package="Trigger Event Testers">topChoices	^(ApplicationModel allSubclasses collect: [:each | each name]) asList asValue</body><body package="Trigger Event Testers">topValue	^topValue isNil		ifTrue:			[topValue := String new asValue]		ifFalse:			[topValue]</body></methods><methods><class-id>Examples.ComboBoxEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">buttonAction</body></methods><methods><class-id>Examples.ComboBoxEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #topBox when: #changing do: [Transcript show: (#topBox -&gt; #changing) printString; cr].	self widget: #bottomBox when: #changing do: [Transcript show: (#bottomBox -&gt; #changing) printString; cr].	self widget: #editableBox when: #changing do: [Transcript show: (#editableBox -&gt; #changing) printString; cr].	self widget: #topBox when: #changed do: [Transcript show: (#topBox -&gt; #changed) printString; cr].	self widget: #bottomBox when: #changed do: [Transcript show: (#bottomBox -&gt; #changed) printString; cr].	self widget: #editableBox when: #changed do: [Transcript show: (#editableBox -&gt; #changed) printString; cr].	self widget: #topBox when: #gettingFocus do: [Transcript show: (#topBox -&gt; #gettingFocus) printString; cr].	self widget: #bottomBox when: #gettingFocus do: [Transcript show: (#bottomBox -&gt; #gettingFocus) printString; cr].	self widget: #editableBox when: #gettingFocus do: [Transcript show: (#editableBox -&gt; #gettingFocus) printString; cr].	self widget: #topBox when: #losingFocus do: [Transcript show: (#topBox -&gt; #losingFocus) printString; cr].	self widget: #bottomBox when: #losingFocus do: [Transcript show: (#bottomBox -&gt; #losingFocus) printString; cr].	self widget: #editableBox when: #losingFocus do: [Transcript show: (#editableBox -&gt; #losingFocus) printString; cr].	self widget: #topBox when: #tabbed do: [Transcript show: (#topBox -&gt; #tabbed) printString; cr].	self widget: #bottomBox when: #tabbed do: [Transcript show: (#bottomBox -&gt; #tabbed) printString; cr].	self widget: #editableBox when: #tabbed do: [Transcript show: (#editableBox -&gt; #tabbed) printString; cr].	self widget: #topBox when: #backTabbed do: [Transcript show: (#topBox -&gt; #backTabbed) printString; cr].	self widget: #bottomBox when: #backTabbed do: [Transcript show: (#bottomBox -&gt; #backTabbed) printString; cr].	self widget: #editableBox when: #backTabbed do: [Transcript show: (#editableBox -&gt; #backTabbed) printString; cr].	self widget: #topBox when: #clicked do: [Transcript show: (#topBox -&gt; #clicked) printString; cr].	self widget: #bottomBox when: #clicked do: [Transcript show: (#bottomBox -&gt; #clicked) printString; cr].	self widget: #editableBox when: #clicked do: [Transcript show: (#editableBox -&gt; #clicked) printString; cr].	self widget: #topBox when: #rightClicked do: [Transcript show: (#topBox -&gt; #rightClicked) printString; cr].	self widget: #bottomBox when: #rightClicked do: [Transcript show: (#bottomBox -&gt; #rightClicked) printString; cr].	self widget: #editableBox when: #rightClicked do: [Transcript show: (#editableBox -&gt; #rightClicked) printString; cr].	self widget: #topBox when: #doubleClicked do: [Transcript show: (#topBox -&gt; #doubleClicked) printString; cr].	self widget: #bottomBox when: #doubleClicked do: [Transcript show: (#bottomBox -&gt; #doubleClicked) printString; cr].	self widget: #editableBox when: #doubleClicked do: [Transcript show: (#editableBox -&gt; #doubleClicked) printString; cr].	self widget: #topBox when: #listExposed do: [Transcript show: (#topBox -&gt; #listExposed) printString; cr].	self widget: #bottomBox when: #listExposed do: [Transcript show: (#bottomBox -&gt; #listExposed) printString; cr].	self widget: #editableBox when: #listExposed do: [Transcript show: (#editableBox -&gt; #listExposed) printString; cr].	self widget: #topBox when: #listClosed do: [Transcript show: (#topBox -&gt; #listClosed) printString; cr].	self widget: #bottomBox when: #listClosed do: [Transcript show: (#bottomBox -&gt; #listClosed) printString; cr].	self widget: #editableBox when: #listClosed do: [Transcript show: (#editableBox -&gt; #listClosed) printString; cr].</body></methods><methods><class-id>Examples.LabelEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self widget: #Label1d when: #labelChanged do: [Transcript show: (#Label1d -&gt; #labelChanged) printString; cr].	self widget: #Label1d when: #labelChanging do: [Transcript show: (#Label1d -&gt; #labelChanging) printString; cr].</body></methods><methods><class-id>Examples.LabelEventTester</class-id> <category>actions</category><body package="Trigger Event Testers">changeText	(self widgetAt: #Label1d) labelString: 'Woo'</body></methods><methods><class-id>Examples.TabControlEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	self builder == aBuilder ifFalse: [^self].	self widget: #tabControl when: #scrollLeft do: [Transcript show: (#tabControl -&gt; #scrollLeft) printString; cr].	self widget: #tabControl when: #scrollRight do: [Transcript show: (#tabControl -&gt; #scrollRight) printString; cr].	self widget: #tabControl when: #pageLeft do: [Transcript show: (#tabControl -&gt; #pageLeft) printString; cr].	self widget: #tabControl when: #pageRight do: [Transcript show: (#tabControl -&gt; #pageRight) printString; cr].	self widget: #tabControl when: #tabChanging do: [Transcript show: (#tabControl -&gt; #tabChanging) printString; cr].	self widget: #tabControl when: #tabChanged do: [Transcript show: (#tabControl -&gt; #tabChanged) printString; cr].	self widget: #tabControl when: #tabbed do: [Transcript show: (#tabControl -&gt; #tabbed) printString; cr].	self widget: #tabControl when: #backTabbed do: [Transcript show: (#tabControl -&gt; #backTabbed) printString; cr].	self widget: #tabControl when: #gettingFocus do: [Transcript show: (#tabControl -&gt; #gettingFocus) printString; cr].	self widget: #tabControl when: #losingFocus do: [Transcript show: (#tabControl -&gt; #losingFocus) printString; cr].</body></methods><methods><class-id>Examples.TableEventTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">initTables	| adaptors |	self cellSelection 		columnLabelsArray: #('Class Name' 'IVars');		columnWidths: #(200 500);		columnLabelsFormats: #(#left #left).	self rowSelection 		columnLabelsArray: #('Class Name' 'IVars');		columnWidths: #(200 500);		columnLabelsFormats: #(#left #left).	self columnSelection 		columnLabelsArray: #('Class Name' 'IVars');		columnWidths: #(200 500);		columnLabelsFormats: #(#left #left).	adaptors := RowAdaptor adaptForAspects: #(#name #ivarNamesString).	self cellSelection table 		baseCollection: (VisualComponent allSubclasses collect: [:each | ClassWrapper on: each])		adaptors: adaptors.	self rowSelection table		baseCollection: (Change allSubclasses collect: [:each | ClassWrapper on: each])		adaptors: adaptors.	self columnSelection table		baseCollection: (ApplicationModel allSubclasses collect: [:each | ClassWrapper on: each])		adaptors: adaptors.</body><body package="Trigger Event Testers">postBuildWith: aBuilder	self initTables.	self widget: #cellSelection when: #scrollUp do: [Transcript show: (#cellSelection -&gt; #scrollUp) printString; cr].	self widget: #rowSelection when: #scrollUp do: [Transcript show: (#rowSelection -&gt; #scrollUp) printString; cr].	self widget: #columnSelection when: #scrollUp do: [Transcript show: (#columnSelection -&gt; #scrollUp) printString; cr].	self widget: #cellSelection when: #scrollDown do: [Transcript show: (#cellSelection -&gt; #scrollDown) printString; cr].	self widget: #rowSelection when: #scrollDown do: [Transcript show: (#rowSelection -&gt; #scrollDown) printString; cr].	self widget: #columnSelection when: #scrollDown do: [Transcript show: (#columnSelection -&gt; #scrollDown) printString; cr].	self widget: #cellSelection when: #scrollLeft do: [Transcript show: (#cellSelection -&gt; #scrollLeft) printString; cr].	self widget: #rowSelection when: #scrollLeft do: [Transcript show: (#rowSelection -&gt; #scrollLeft) printString; cr].	self widget: #columnSelection when: #scrollLeft do: [Transcript show: (#columnSelection -&gt; #scrollLeft) printString; cr].	self widget: #cellSelection when: #scrollRight do: [Transcript show: (#cellSelection -&gt; #scrollRight) printString; cr].	self widget: #rowSelection when: #scrollRight do: [Transcript show: (#rowSelection -&gt; #scrollRight) printString; cr].	self widget: #columnSelection when: #scrollRight do: [Transcript show: (#columnSelection -&gt; #scrollRight) printString; cr].	self widget: #cellSelection when: #tabbed do: [Transcript show: (#cellSelection -&gt; #tabbed) printString; cr].	self widget: #rowSelection when: #tabbed do: [Transcript show: (#rowSelection -&gt; #tabbed) printString; cr].	self widget: #columnSelection when: #tabbed do: [Transcript show: (#columnSelection -&gt; #tabbed) printString; cr].	self widget: #cellSelection when: #backTabbed do: [Transcript show: (#cellSelection -&gt; #backTabbed) printString; cr].	self widget: #rowSelection when: #backTabbed do: [Transcript show: (#rowSelection -&gt; #backTabbed) printString; cr].	self widget: #columnSelection when: #backTabbed do: [Transcript show: (#columnSelection -&gt; #backTabbed) printString; cr].	self widget: #cellSelection when: #gettingFocus do: [Transcript show: (#cellSelection -&gt; #gettingFocus) printString; cr].	self widget: #rowSelection when: #gettingFocus do: [Transcript show: (#rowSelection -&gt; #gettingFocus) printString; cr].	self widget: #columnSelection when: #gettingFocus do: [Transcript show: (#columnSelection -&gt; #gettingFocus) printString; cr].	self widget: #cellSelection when: #losingFocus do: [Transcript show: (#cellSelection -&gt; #losingFocus) printString; cr].	self widget: #rowSelection when: #losingFocus do: [Transcript show: (#rowSelection -&gt; #losingFocus) printString; cr].	self widget: #columnSelection when: #losingFocus do: [Transcript show: (#columnSelection -&gt; #losingFocus) printString; cr].	self widget: #cellSelection when: #clicked do: [Transcript show: (#cellSelection -&gt; #clicked) printString; cr].	self widget: #rowSelection when: #clicked do: [Transcript show: (#rowSelection -&gt; #clicked) printString; cr].	self widget: #columnSelection when: #clicked do: [Transcript show: (#columnSelection -&gt; #clicked) printString; cr].	self widget: #cellSelection when: #doubleClicked do: [Transcript show: (#cellSelection -&gt; #doubleClicked) printString; cr].	self widget: #rowSelection when: #doubleClicked do: [Transcript show: (#rowSelection -&gt; #doubleClicked) printString; cr].	self widget: #columnSelection when: #doubleClicked do: [Transcript show: (#columnSelection -&gt; #doubleClicked) printString; cr].	self widget: #cellSelection when: #rightClicked do: [Transcript show: (#cellSelection -&gt; #rightClicked) printString; cr].	self widget: #rowSelection when: #rightClicked do: [Transcript show: (#rowSelection -&gt; #rightClicked) printString; cr].	self widget: #columnSelection when: #rightClicked do: [Transcript show: (#columnSelection -&gt; #rightClicked) printString; cr].	self widget: #cellSelection when: #rowSelectionChanged do: [Transcript show: (#cellSelection -&gt; #rowSelectionChanged) printString; cr].	self widget: #rowSelection when: #rowSelectionChanged do: [Transcript show: (#rowSelection -&gt; #rowSelectionChanged) printString; cr].	self widget: #columnSelection when: #rowSelectionChanged do: [Transcript show: (#columnSelection -&gt; #rowSelectionChanged) printString; cr].	self widget: #cellSelection when: #columnSelectionChanged do: [Transcript show: (#cellSelection -&gt; #columnSelectionChanged) printString; cr].	self widget: #rowSelection when: #columnSelectionChanged do: [Transcript show: (#rowSelection -&gt; #columnSelectionChanged) printString; cr].	self widget: #columnSelection when: #columnSelectionChanged do: [Transcript show: (#columnSelection -&gt; #columnSelectionChanged) printString; cr].	self widget: #cellSelection when: #cellSelectionChanged do: [Transcript show: (#cellSelection -&gt; #cellSelectionChanged) printString; cr].	self widget: #rowSelection when: #cellSelectionChanged do: [Transcript show: (#rowSelection -&gt; #cellSelectionChanged) printString; cr].	self widget: #columnSelection when: #cellSelectionChanged do: [Transcript show: (#columnSelection -&gt; #cellSelectionChanged) printString; cr].</body></methods><methods><class-id>Examples.TableEventTester</class-id> <category>aspects</category><body package="Trigger Event Testers">cellSelection	^cellSelection isNil		ifTrue:			[cellSelection := TableInterface new selectionInTable: SelectionInTable new]		ifFalse:			[cellSelection]</body><body package="Trigger Event Testers">columnSelection	^columnSelection isNil		ifTrue:			[columnSelection := TableInterface new selectionInTable: SelectionInTable new]		ifFalse:			[columnSelection]</body><body package="Trigger Event Testers">rowSelection		^rowSelection isNil		ifTrue:			[rowSelection := TableInterface new selectionInTable: SelectionInTable new]		ifFalse:			[rowSelection]</body></methods><methods><class-id>Examples.ClassWrapper</class-id> <category>accessing</category><body package="Trigger Event Testers">checkBox	checkValue isNil ifTrue: [checkValue := self ivarNames size \\ 2 = 0].	^checkValue</body><body package="Trigger Event Testers">checkBox: aValue	checkValue := aValue</body><body package="Trigger Event Testers">getSubclasses	^realClass getSubclasses</body><body package="Trigger Event Testers">ivarName	realClass isNil ifTrue: [^nil].	choiceValue isNil 		ifTrue: 			[| choices |			choices := self ivarNames.			choiceValue := choices isEmpty ifTrue: ['-none-'] ifFalse: [choices last]].	^choiceValue</body><body package="Trigger Event Testers">ivarName: aValue	choiceValue := aValue</body><body package="Trigger Event Testers">ivarNames	realClass isNil ifTrue: [^#()].	^realClass allInstVarNames</body><body package="Trigger Event Testers">ivarNamesString	| string |	realClass isNil ifTrue: [^''].	string := ''.	realClass allInstVarNames do: [:each | string := each, ' ', string].	^string</body><body package="Trigger Event Testers">name	^visibleName</body><body package="Trigger Event Testers">name: aValue	^visibleName := aValue</body><body package="Trigger Event Testers">subclasses	^realClass subclasses collect: [:each | ClassWrapper on: each]</body></methods><methods><class-id>Examples.ClassWrapper</class-id> <category>private</category><body package="Trigger Event Testers">setClass: aClass	realClass := aClass.	visibleName := aClass name</body></methods><methods><class-id>Examples.ClassWrapper</class-id> <category>comparing</category><body package="Trigger Event Testers">= anObject 	"Answer whether the receiver and the argument represent the same object.	If = is redefined in any subclass, consider also redefining the message hash."	^self class = anObject class and: [self name = anObject name]</body><body package="Trigger Event Testers">hash	^visibleName hash</body></methods><methods><class-id>Examples.ClassWrapper</class-id> <category>editing</category><body package="Trigger Event Testers">editMe: aValue	visibleName := aValue.</body></methods><methods><class-id>Examples.ClassWrapper class</class-id> <category>initialize-release</category><body package="Trigger Event Testers">on: aClass	^self new setClass: aClass</body></methods><methods><class-id>Examples.SpinEventTriggerTester</class-id> <category>aspects</category><body package="Trigger Event Testers">dateAspect	^dateAspect isNil		ifTrue:			[dateAspect := (Date newDay: 16 monthNumber: 12 year: 2000) asValue]		ifFalse:			[dateAspect]</body><body package="Trigger Event Testers">numberAspect	^numberAspect isNil		ifTrue:			[numberAspect := 0 asValue]		ifFalse:			[numberAspect]</body><body package="Trigger Event Testers">numberNoLow	^numberNoLow isNil		ifTrue:			[numberNoLow := 24.0 asValue]		ifFalse:			[numberNoLow]</body><body package="Trigger Event Testers">stringAspect	^stringAspect isNil		ifTrue:			[stringAspect := '223331231' copy asValue]		ifFalse:			[stringAspect]</body><body package="Trigger Event Testers">timeAspect	^timeAspect isNil		ifTrue:			[timeAspect := Time now asValue]		ifFalse:			[timeAspect]</body></methods><methods><class-id>Examples.SpinEventTriggerTester</class-id> <category>interface opening</category><body package="Trigger Event Testers">postBuildWith: aBuilder	#(#bumpSpinner #wrapSpinner) do:[:each|		self widget: each when: #changed do: [Transcript show: (each -&gt; #changed) printString; cr].		self widget: each when: #bounceBottom do: [Transcript show: (each -&gt; #bounceBottom) printString; cr].		self widget: each when: #changing do: [Transcript show: (each -&gt; #changing) printString; cr].		self widget: each when: #losingFocus do: [Transcript show: (each -&gt; #losingFocus) printString; cr].		self widget: each when: #wrapAroundTop do: [Transcript show: (each -&gt; #wrapAroundTop) printString; cr].		self widget: each when: #tabbed do: [Transcript show: (each -&gt; #tabbed) printString; cr].		self widget: each when: #gettingFocus do: [Transcript show: (each -&gt; #gettingFocus) printString; cr].		self widget: each when: #bounceTop do: [Transcript show: (each -&gt; #bounceTop) printString; cr].		self widget: each when: #backTabbed do: [Transcript show: (each -&gt; #backTabbed) printString; cr].		self widget: each when: #wrapAroundBottom do: [Transcript show: (each -&gt; #wrapAroundBottom) printString; cr].		self widget: each when: #spinDown do: [Transcript show: (each -&gt; #spinDown) printString; cr].		self widget: each when: #spinUp do: [Transcript show: (each -&gt; #spinUp) printString; cr].		self widget: each when: #spunDown do: [Transcript show: (each -&gt; #spunDown) printString; cr].		self widget: each when: #spunUp do: [Transcript show: (each -&gt; #spunUp) printString; cr].		self widget: each when: #doubleClicked do: [Transcript show: (each -&gt; #doubleClicked) printString; cr].		self widget: each when: #rightClicked do: [Transcript show: (each -&gt; #rightClicked) printString; cr].		self widget: each when: #clicked do: [Transcript show: (each -&gt; #clicked) printString; cr]]</body></methods><methods><class-id>Examples.EditInputEventTests class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Input/Edit Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1058 962 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 37 16 216 40 ) 					#name: #topInputField 					#model: #text1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 37 55 216 79 ) 					#name: #secondInputField 					#model: #text2 ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 90 0 -20 1 304 0 ) 					#name: #textEditor 					#flags: 15 					#model: #text3 					#tabRequiresControl: true 					#isWrapped: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 37 322 216 346 ) 					#name: #readOnlyField 					#model: #text1 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>Examples.HierarchicalListEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Hierarcical List Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1141 1013 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.HierarchicalViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 30 0 -10 1 180 0 ) 					#name: #singleList 					#model: #singleList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 197 0 0.5 0 ) 					#name: #ActionButton1 					#model: #changeTopList 					#label: 'Change Top List' 					#defaultable: true ) 				#(#{UI.HierarchicalViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 236 0 -10 1 -10 1 ) 					#name: #multiList 					#flags: 15 					#model: #multiList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #checkMark ) ) ) )</body></methods><methods><class-id>Examples.GroupBoxEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Group Box Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1072 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 14 0 14 0 -14 1 138 0 ) 					#name: #groupBox 					#label: 'Group Box Label' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 14 0 147 0 -14 1 170 0 ) 					#name: #ActionButton1 					#model: #changeGroupBoxLabel 					#label: 'Change Group Box Label' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 14 0 174 0 -14 1 197 0 ) 					#name: #ActionButton2 					#model: #removeGroupBoxLabel 					#label: 'Remove Group Box Label' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.ResizingSplitterEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Resizing Splitter Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1190 871 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 9 150 109 250 ) 					#name: #TextEditor1 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.Rectangle} 8 124 108 128 ) 					#name: #horizontalSplitter 					#flags: 8 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'TextEditor2' 					#belowWidgets: 'TextEditor1' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 8 1 108 101 ) 					#name: #TextEditor2 					#tabRequiresControl: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 153 114 253 137 ) 					#name: #InputField1 ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.Rectangle} 261 62 265 197.5 ) 					#name: #verticalSplitter 					#flags: 8 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'InputField1' 					#belowWidgets: 'InputField2' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 274 114 374 137 ) 					#name: #InputField2 ) ) ) )</body></methods><methods><class-id>Examples.ToolBarEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Tool Bar Event Tester' 			#bounds: #(#{Graphics.Rectangle} 799 612 1100 698 ) 			#toolBar: #toolbarMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>Examples.ToolBarEventTester class</class-id> <category>resources</category><body package="Trigger Event Testers">toolbarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolbarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'First Button' 				#nameKey: #firstButton 				#value: #firstButton 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #classBrowser ) 				#helpText: 'First Button' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Second Button' 				#nameKey: #secondButton 				#value: #secondButton 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #cardfile ) 				#helpText: 'Second Button' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Third Button' 				#nameKey: #thirdButton 				#value: #thirdButton 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #help ) 				#helpText: 'Third Button' ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.ButtonsEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Button Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1048 858 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 31 5 214 29 ) 					#name: #changeButtonLabel 					#model: #changeButtonLabel 					#label: 'Change Button Label ' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 31 34 214 58 ) 					#name: #changeCheckBoxLabel 					#model: #changeCheckBoxLabel 					#label: 'Change Check Box Label' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 31 65 214 89 ) 					#name: #changeRadioButtonLabel 					#model: #changeRadioButtonLabel 					#label: 'Change Radio Button Label' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 82 107 163 130 ) 					#name: #ActionButton1 					#label: 'Action' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 80 152 ) 					#name: #CheckBox1 					#label: 'Check Box' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 73 192 ) 					#name: #RadioButton1 					#model: #rads 					#label: 'Radio Button' 					#select: #moosha ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 73 218 ) 					#name: #RadioButton2 					#model: #rads 					#label: 'Radio Button' 					#select: #misha ) ) ) )</body></methods><methods><class-id>Examples.MenuEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Menu Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1143 872 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 1 29 340 83 ) 					#name: #popupEditTest 					#menu: #mainMenu 					#tabRequiresControl: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 3 94 109 117 ) 					#name: #popupInputTest 					#menu: #mainMenu ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 231 94 337 145 ) 					#name: #popupListTest 					#menu: #mainMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.Rectangle} 3 125 109 150 ) 					#name: #popupComboTest 					#menu: #mainMenu ) 				#(#{UI.HierarchicalViewSpec} 					#layout: #(#{Graphics.Rectangle} 112 94 225 136 ) 					#name: #popupHierarchicalListTest 					#menu: #mainMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.Rectangle} 3 158 109 241 ) 					#name: #popupTreeViewTest 					#menu: #mainMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.Rectangle} 108 177 226 239 ) 					#name: #popupTableTest 					#menu: #mainMenu ) 				#(#{UI.DataSetSpec} 					#layout: #(#{Graphics.Rectangle} 231 158 337 241 ) 					#name: #popupDatasetTest 					#menu: #mainMenu ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 113 148 226 171 ) 					#name: #popupSpinTest 					#menu: #mainMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 8 1 ) 					#name: #Label1 					#label: 'Right Click Below To Test Widget Popup Menu Events' ) ) ) )</body></methods><methods><class-id>Examples.MenuEventTester class</class-id> <category>resources</category><body package="Trigger Event Testers">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#nameKey: #file 				#value: #file 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Open' 							#nameKey: #fileOpen 							#value: #fileOpen ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Close' 							#nameKey: #fileClose 							#value: #fileClose ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;New' 							#nameKey: #newFile 							#value: #newFile ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Edit' 				#nameKey: #edit 				#value: #edit 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Copy' 							#nameKey: #editCopy 							#value: #editCopy 							#shortcutKeyCharacter: $C 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'C&amp;ut' 							#nameKey: #editCut 							#value: #editCut 							#shortcutKeyCharacter: $X 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Special' 							#nameKey: #editSpecial 							#value: #editSpecial 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;Punt' 										#nameKey: #editSpecialPunt 										#value: #editSpecialPunt 										#shortcutKeyCharacter: $J 										#shortcutModifiers: 10 ) 									#(#{UI.MenuItem} 										#rawLabel: 'P&amp;ass' 										#nameKey: #editSpecialPass 										#value: #editSpecialPass 										#shortcutKeyCharacter: $K 										#shortcutModifiers: 10 ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Kick' 										#nameKey: #editSpecialKick 										#value: #editSpecialKick 										#shortcutKeyCharacter: $L 										#shortcutModifiers: 10 										#submenu: #(#{UI.Menu} #(												#(#{UI.MenuItem} 													#rawLabel: '&amp;Touchdown' 													#nameKey: #editSpecialKickTouchdown 													#value: #editSpecialKickTouchdown ) 												#(#{UI.MenuItem} 													#rawLabel: 'Point A&amp;fter' 													#nameKey: #editSpecialKickPointAfter 													#value: #editSpecialKickPointAfter ) ) #(2 ) nil ) ) ) #(3 ) nil ) ) ) #(3 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.RegionEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Region Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1169 824 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.Rectangle} 106 13 251 100 ) 					#name: #region 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #blue ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 1024 ) ) 					#lineWidth: 4 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 7 130 163 153 ) 					#name: #ActionButton1 					#model: #changeBorderColor 					#label: 'Change Border Color' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 7 172 163 195 ) 					#name: #ActionButton2 					#model: #changeInsideColor 					#label: 'Change Inside Color' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 185 130 341 153 ) 					#name: #ActionButton3 					#model: #changeBorderSize 					#label: 'Change Border Size' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 185 172 341 195 ) 					#name: #ActionButton4 					#model: #changeSize 					#label: 'Change Size' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.DialogEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Dialog Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1180 806 ) 			#flags: 3 ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 12 16 93 39 ) 					#name: #ActionButton1 					#model: #close 					#label: 'Close Me' 					#defaultable: true ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.Rectangle} 101 6 594 447 ) 					#name: #Region1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 8191 0 4096 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #cyan ) ) 					#lineWidth: 4 ) ) ) )</body></methods><methods><class-id>Examples.TreeViewEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Tree View Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1069 1026 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #openedEmphasis #openedEmphasis #leafEmphasis 						#leafEmphasis: #closedEmphasis #closedEmphasis ) 					#layout: #(#{Graphics.LayoutFrame} 20 0 40 0 -20 1 187 0 ) 					#name: #singleSelect 					#model: #singleSelect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #notification 						#requestValueChangeSelector: #validate ) 					#multipleSelections: false 					#useModifierKeys: true 					#selectionType: #highlight 					#displayStringSelector: #name 					#useIcons: #none 					#rootExpander: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 13 ) 					#name: #Label1 					#label: 'Single Select' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 215 0 -20 1 388 0 ) 					#name: #multiSelect 					#flags: 15 					#model: #multiSelect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #notification 						#requestValueChangeSelector: #validate ) 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight 					#displayStringSelector: #name 					#useIcons: #folder 					#inPlaceEditedSelector: 					#editMe: 					#useChildImages: false 					#useLines: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 190 ) 					#name: #Label2 					#label: 'Multi Select (Editable)' ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.Rectangle} 32 397 82 420 ) 					#name: #validate 					#lineWidth: 1 ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.Rectangle} 93 397 143 420 ) 					#name: #notification 					#lineWidth: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 40 395 ) 					#name: #Label3 					#label: 'V' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 99 395 ) 					#name: #Label4 					#label: 'N' ) ) ) )</body></methods><methods><class-id>Examples.SubCanvasEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'SubCanvas Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1088 831 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 69 22 201 165 ) 					#name: #sub 					#flags: 11 					#majorKey: #{ButtonsEventTester} 					#minorKey: #windowSpec 					#clientKey: #client ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 14 191 165 217 ) 					#name: #ActionButton1 					#model: #changeSubcanvas 					#label: 'Change Subcanvas' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.PercentSliderEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Percent and Slider Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1127 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 -6 1 54 0 ) 					#name: #slider 					#model: #sliderValue 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 5 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 60 0 -7 1 83 0 ) 					#name: #ActionButton1 					#model: #setSliderTo0 					#label: 'Set Slider To ''0''' 					#defaultable: true ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 97 0 -7 1 149 0 ) 					#name: #percentDone 					#isOpaque: true 					#model: #percentDoneValue 					#direction: #horizontal 					#position: #topLeft 					#area: false 					#reverse: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 166 0 -7 1 189 0 ) 					#name: #ActionButton2 					#model: #setProgressTo100 					#label: 'Set Progress To 100%' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} -20 0.5 1 0 20 0.5 27 0 ) 					#name: #sliderValue ) ) ) )</body></methods><methods><class-id>Examples.MenuButtonEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'MenuButton Event Test' 			#bounds: #(#{Graphics.Rectangle} 800 600 1106 794 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 24 0 -3 1 52 0 ) 					#name: #popDownMenu 					#menu: #anotherMenu 					#isPopUp: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 74 0 0.5 0 ) 					#name: #ActionButton1 					#model: #changeBottomMenu 					#label: 'Change Bottom Menu' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 127 0 -3 1 155 0 ) 					#name: #popUpMenu 					#menu: #menuModel 					#isPopUp: true ) ) ) )</body></methods><methods><class-id>Examples.ClickWidgetEventTester class</class-id> <category>resources</category><body package="Trigger Event Testers">logo	"UIMaskEditor new openOnClass: self andSelector: #logo"	&lt;resource: #image&gt;	^(Image extent: 216@216 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 15) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6327 scaledGreen: 0 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 6070 scaledGreen: 0 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 5814 scaledGreen: 0 scaledBlue: 0); at: 5 put: (Graphics.ColorValue scaledRed: 2376 scaledGreen: 0 scaledBlue: 0); at: 6 put: (Graphics.ColorValue scaledRed: 2120 scaledGreen: 0 scaledBlue: 0); at: 7 put: (Graphics.ColorValue scaledRed: 1863 scaledGreen: 0 scaledBlue: 0); at: 8 put: Graphics.ColorValue red; at: 9 put: (Graphics.ColorValue scaledRed: 7934 scaledGreen: 0 scaledBlue: 0); at: 10 put: (Graphics.ColorValue scaledRed: 7677 scaledGreen: 0 scaledBlue: 0); at: 11 put: (Graphics.ColorValue scaledRed: 4497 scaledGreen: 0 scaledBlue: 0); at: 12 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 0 scaledBlue: 0); at: 13 put: (Graphics.ColorValue scaledRed: 3950 scaledGreen: 0 scaledBlue: 0); at: 14 put: (Graphics.ColorValue scaledRed: 513 scaledGreen: 0 scaledBlue: 0); at: 15 put: (Graphics.ColorValue scaledRed: 256 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedStringlt;7.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;-2;JH!7]7]7]7]7"I/M8@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N7K&amp;H]7]7]7]7]7]7]7]7]8&amp;48@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NR9!7]7]7]7]7]7]7]7]7]7]7]7&ampamp;;-N;.;.;.;\.;&amp;G]7]7]7]7]7]7]7,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@69]7]7]7]8 +3^8@@@@@@@@@@@@@;\JG]7]7]7]7]7]7!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@C[%7]7]7^B/M8@@@@@@@@@@@@@@@@@@@C\I7]7]7]7]7]7^M@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.W]7]8&amp;;S @@@@@@@@@@@@@@@@@@@@@@@@AI]7]7]7]7]7];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AB]7^I/M8@@@@@@@@@@@@@@@@@@@@@@@@@@@@MM7]7]7]7]7]94@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@MI7 +3^@@@@@@@@;.R;0@@@@@@@@@@@@@@@@@@@AG]7]7]7]7]70@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A)F48@@@@@@N;$.;&ampltltamp;G]7^[4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@M!7]7]7]7]7]7^=@@@@@@@@@@@@@@@@@@@@@@;$.9!7]7]9/P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@RG]7]7]7]7]7]8KM@@@@@@@@@@@@@@@@C.R;&amp;G]7]7]7&amp;=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B7]7]7]7]7]7]7]8J&ltamp;4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@47]7]7]7]7]7]7]7]7]7]7]7]7]7]7 ,4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DI7]7]7]7]7]7]7]7]7]7]7]7]7 ,4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AK&amplt;@@@C]7P@@@@W]88@@@@@@@@@@@C(]7# ; @NP'']2T@@@C(_@@@@@M7]&lt;@@@N;-]7\X^[M7^0@@M7!@@@@@4''# @@@K]7^0;P@@47]7P@@@@@-7^N@@@@:GH@@@@C]7^ @@@@AG]3@@@@CS^M@@87]4@@@@AW]7L@@@@@@@@@@@C(]7# 2J.9]7 0@@@@C''#P@@@@:W]28@@@@@I7]7OPAG_@@D]7,@@@@@CG'' @@@K]7^02J.2!7\%@@@@@@-7^N@@@@:GT@@@@@I7^^@@@@Y7\0@@@@@N"N@@-7\ @@@@@B]7_P@@@@@@@@@@C(]7# 2G]7"[4@@@@@C),@@@@@B'']74@@@@@17]1@@@E/ CX]28@@@@@CW(@@@@K]7^06W]7"[P@@@@@@@-7^N@@@@:S@@@@@@17^N@@@@I7_ @@@@@N]&gt;@@%7_@@@@@@L]7_@@@@@@@@@@@C(]7# ;$.4; @@@@@@@M@@@@@@A(]88@@@@@-7]5@@@@@@B7];@@@@@@C(0@@@@K]7^0C-24; @@@@@@@@-7^N@@@@CP@@@@@@:G^N@@@E]7H@@@@@@N&amp;^@D]7#P@@@@@M!7^0@@@@@@@@@@C(]7# @@@@@@@@@@@@@@@@@@@N9X]88@@@@@-7^P@@@@@@BW]4@@@@@@@N8@@@@K]7^0@@@@@@@@@@@@@@-7^N@@@@@@@@@@C.RG^N@@@J]70@@@@@@@; @K]7$@@@@@@@%7^0@@@@@@@@@@C(]7# @@@@@@@@@@@@@@@@;$.)!7]88@@@@@-7^0@@@@@@Q7^P@@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@@@@@@@9K.X]7^N@@C)]7,@@@@@@@@@C"]7^;S.;.;[]7^0@@@@@@@@@@C(]7# @@@@@@@@@@@@@@AK&amp;G]8 X]88@@@@@-7_@@@@@@@)7^N@@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@@@@@7B!7^HFG^N@@@H]7,@@@@@@@@@CW]7]7^H"H]7]7_@@@@@@@@@@@C(]7# @@@@@@@@@@@@@EI7]9-N;)]88@@@@@-7^0@@@@@@-7^N@@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@@@CS!7^[3^:W^N@@AG]7,@@@@@@@@@C(]7^H"H"HJ;.;3 @@@@@@@@@@C(]7# @@@@@@@@@@@@AG]7IN@@C(]88@@@@@-7^0@@@@@@-7^M@@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@@@RW]2S @@:G^N@@B'']70@@@@@@@@@C(]7#^;.;.@@@@@@@@@@@@@@@@C(]7# @@@@@@@@@@@@U7]3@@@@C(]88@@@@@-7^0@@@@@@-7]&lt;@@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@@M!7\0@@@@:G^N@@CG]7,@@@@@@@@@C(]7'' @@@@@@@@@@@@@@@@@@@@C(]7# @@@@@@@@@@@@)7^^@@@@C(]88@@@@@-7^0@@@@@@)7]:@@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@@K]7_ @@@@:G^N@@CX]7$@@@@@@@@@C)]7#P@@@@@@@@@@@@@@@@@@@@C(]7# @@@@@@@@@@@N%7^0@@@@@I]88@@@@@-7^0@@@@@@Q7]9@@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@C)]7H@@@@@:G^N@@C'']7]P@@@@@@@@@J]7^0@@@@@@@@@@@@@@@@@@@@C(]7# @@@@@@@@@@@N!7_@@@@@A'']88@@@@@-7^0@@@@@@BW]7P@@@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@C(]70@@@@@:G^N@@C"]7\ @@@@@@@@@L]7^]@@@@@@@@@@@@@@@@@@@@C(]7# @@@@@@@@@@@N!7_@@@@@@W]88@@@@@-7^0@@@@@@B7]7# @@@@@@@@@@@K]7^0@@@@@@@@@@@@@@-7^N@@C(]7,@@@@@M7^N@@@L]7]4@@@@@@@@@M%7]&lt;@@@@@@@@@@@@@@@@@@@@C(]7$@@@@@@@@@@@@N!7\ @@@EI7]88@@@@@17_@@@@@@@CY]7\0@@@@@@@@@@@L]7^0@@@@@@@@@@@@@@-7^N@@CW]7'' @@AR]7^N@@@NE7]7P@@@@@@@@@-7]8P@@@@@@MT@@@@@@@@@@@@I]7] @@@@@@@@@@@N%7]34@67^(]9@@@@@@I7\ @@@@@@@K]7]2P@@@@M3P@@@C]7_@@@@@@@@@@@@@@@17^P@@C"]7\=@M-7*G^M@@@@Y7]7]@@@@@A]@@6G]7^0@@@@B9'' @@@@@@@@;.9G]7\]; @@@@@@@@@@-7]7&amp;;%2YG]7S.8N;-]7]=;.@@@@@NM7]7\,7.R9_@C.9G]7\-;.@@@@@@@@@@;-I7]4; @L]7]9.9^TBW];;.@@AG]7]2-N9KI&lt;@@AG]7]2-N;\I7,@@@@@@@@@2H!7]7]8"C8@@@@@@@@@6G]7]7\0B7]7^H0L"H]7]8"IP@@@@@B7]7]7"H]7GPRX!7]7]8"I8@@@@@@@@D&amp;H]7]7"C8NM7]7]7OP6G]7"L@@@D%7]7]8!7^M@@@D%7]7]8"G]38@@@@@@@@@2H"H"H"H"I8@@@@@@@@@AR]7]9P@CH"H"H0L"H"H"H"H,@@@@@@EJG]7]7^BX@.H"H"H"H"I8@@@@@@@@K"H"H"H"I8@@7]7^T@@2X"H"L@@@@69]7]7]8IP@@@@69]7]7]8I@@@@@@@@@@@;.;.;.;.;.@@@@@@@@@@@@R;/M@@C.;.;.8N;.;.;.;.8@@@@@@@C\,(J;3P@@;.;.;.;.;.@@@@@@@@@N;.;.;.;.@@@D.;3P@@;^;.;.@@@@@M2; +/M@@@@@@@M2;&ampamp;G]7];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AI"G]7]7]8"H]7]7]7&amp;=@@@@@@@NM7^M@@@@@@@@@@@@@@@@@@@@@@CX]7O @@@@@@@@@@@@@@@@@@@@@@@@@@@@:X!7]7,@@N&amp;H]7];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N;+]7];-N;-2;.X]7]9,@@@@@@M]7]&lt;@@@@@@@@@@@@@@@@@@@@@@CG]7_P@@@@@@@@@@@@@@@@@@@@@@@@@@@@C.9G]7,@@@;.Q7];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@M!7^P@@@@@@C-.W]7\0@@@@@M]7]:@@@@@@@@@@@@@@@@@@@@@@B'']7_P@@@@@@AD@@@@@@@@@@@@@@@@@@@@@@@I]7,@@@@@BW];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@C[]7]3@@@@@NM7]5@@@@@@@@@@@@@@@@@@@@@@AW]7O @@@@C$I88@@@@@@@@@@@@@@@@@@@@@C(]7,@@@@@:G];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@Q7]7L@@@@@@8IP@@@@@@@@@@@@@@@@@@@@@@@D&amp;C@@@@@@:W]74@@@@@@@@@@@@@@@@@@@@@C(]7,@@@@@:G];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@AH]7\0@@@@@N@@@@@@@@@@@@@@@@@@@@@@@@@@; @@@@@@:G]28@@@@@@@@@@@@@@@@@@@@@C(]7,@@@@@:G];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@L]7]5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:G]&ltamp;^@@@@@@@M0(]7"B0@@@@@@@C-0(0@@@@@BW]&lt;@@@@@@@@7B!7^HI@@@@@@@C(]7,@@@@@:G];@@@@@@NH"I8@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@@:W]7'' 22!7^N@@@@@@B9]9*W]7\+.;.&lt;A+.X]7,@@@@NQ7]1.;.&ltlt;@@@@@@);@@@@@E]7^ @@@@C(]7,@@@@@:G];@@T''^T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@@CG]7K @@-7^N@@@@)7^0@@@@@L]7# @@@@@L]7,@@@@@:G];@@@@@@V&gt;@@@@@@M7^0@@@@C(]7,@@@@@:G];@D]7OP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@@B7]70@@@-7^N@@@@-7^0@@@@@K]7# @@@@@K]7,@@@@@:G];@@@@@@@@@@@@@@17^0@@@@C(]7,@@@@@:G]&lt;AG];@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@@:W]70@@@-7^N@@@@-7^^@@@@@K]7'' @@@@@K]7,@@@@@:G];@@@@@@@@@@@N7KE7^0@@@@C(]7,@@@@@:G]:17!P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@@BG]74@@@-7^N@@@@-7^M@@@@@L]7(@@@@@@K]7,@@@@@:G];@@@@@@@@C$,(!7]7^0@@@@C(]7,@@@@@:G]7]7!P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@@U7]2@@@@-7^N@@@@17]&lt;@@@@@C]8T@@@@@@K]7,@@@@@:G];@@@@@@@DJG]8&amp;;E7^0@@@@C(]7,@@@@@:G]7]7]4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@@)7]&lt;@@@@-7^N@@@@6W]8P@@@AG];@@@@@@@K]7,@@@@@:G];@@@@@@47]7KM8@17^0@@@@C(]7,@@@@@:G]7]7]88@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@M%7^]@@@@-7^N@@@@B7]7]N@M-7^&gt;@@@@@@@K]7,@@@@@:G];@@@@@N%7\$@@@@-7^0@@@@C(]7,@@@@@:G];M7]7L@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@L]7^0@@@@-7^N@@@@C#]7]8L8]2T@@@@@@@@K]7,@@@@@:G];@@@@@C]7'' @@@@-7^0@@@@C(]7,@@@@@:G]&lt;@7]7\0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@A(]7#P@@@@-7^N@@@@@@T9]7]8I@@@@@@@@@@K]7,@@@@@:G];@@@@CW]7,@@@@@-7^0@@@@C(]7,@@@@@:G];@D]7]3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@@W]8P@@@@@-7^N@@@@@@AQ\+3^@@@@@@@@@@@K]7,@@@@@:G];@@@@CG]84@@@@@17^0@@@@C(]7,@@@@@:G];@@Q7]7IP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@@@M7];@@@@@@-7^N@@@@@@RGL@@@@@@@@@@@@@@K]7,@@@@@:G];@@@@B7]98@@@@@I7^0@@@@C(]7,@@@@@:G];@@AG]7]4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@N!7^N@@@@@@@@AR]7\&gt;@@@@@@-7^N@@@@@C]8@@@@@@@@@@@@@@@L]70@@@@@:G]&lt;@@@@B7]88@@@@C]7^0@@@@C(]7,@@@@@:G];@@@D]7]7P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%7^N@@@@@@@M-7]7L@@@@@@@-7^N@@@@AG]8P@@@@@@@@@@@@@@K]7,@@@@@:G]3@@C B'']7L@@@T'']7_@@@@@C(]7,@@@@@:G];@@@@Q7]7]@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D]7^M;.;.;-0(]7^T@@@@@@@@17^N@@@@B'']7\+.;.;.;3P@@@@@I]7$@@@@@:W]7)U*TAG]7\=;[]&lt;)7\0@@@@C(]70@@@@@:G]&lt;@@@@AG]7];4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@9G]7]8"H"H"H]7]9/P@@@@@N;\E7]23^@@CG]7]7]7]7]7^C@@C.R7]7^4; @@B7]7]7]4@B]7]8"G%@17];7 C-0'']7GM8@;\I7]13^@@@D]7]7%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-7]7]7]7]7]7]8KM@@@@@@@K]7]7]7]88@C#]7]7]7]7]7]7L@B7]7]7]7^0@@CX]7]7]@@F%7]7]34NE7]7^N:G]7]7]7_@!7]7]7]88@@@Q7]7"0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@V;.;.;.;.;.;-N@@@@@@@@@E.;.;.;.&lt;8@@@)7]7^H"G]7]7]PA[.;.;.;-P@@@EJH"IP@@@69"H%@@N.;.;/@CK.;.;.;-P2;.;.;.&ltbody><body package="Trigger Event Testers">logoMap	"UIHotRegionEditor new openOnClass: self andSelector: #logoMap"	&lt;resource: #hotRegions&gt;	^HotRegions selectorArray: #(#anA #aP #theLogo #anR #aC #anL #anE #aD #anI #aG #aT #aK #tbd #ouch nil) copy  mapImage: (Image extent: 216@216 depth: 3 bitsPerPixel: 4 palette: (Graphics.CoveragePalette maxPixelValue: 3) usingBits: (ByteArray fromPackedStringgt;;.;#L3L3L3L3L3L3L3L3L3L3L3L3L0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3O.;.;.L3L3L3L3L3L3L3L3L3L3L3L3L0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@CL3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3O.;.;.L3L3L3L3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3O.;.;.L3L3L3L3L3L3L3L3L3L3L3L3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3O.;.;.L3L3L3L3L3L3L3L3L3L3L3L3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L&gtamp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@QDQDQDQDQDQDQDQDP@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@QDQDQDQDQDQDQDQDP@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@QDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@EUUUUUUUUUUUUUU@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H"H"H"H"@@@@@@@@@@@@QDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@EUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQQDQDQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"JH"H"H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;DQDQDQDQDQDQDQDEUUUUUUUUUUUUUU@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"JH"H"H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G]7]7]7]7]7]7]7]7@@@@H"H"H"H"H"JH"H"H"H"H"H"H"H"H"H"H"H"H"DQDQDQDQDQDQUUUUUUUUUUUUUUUURH"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@H"H"H"H"H"JH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@)&amp;Y&amp;Y&amp;Y&amp;Y&amp;YH"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@I&amp;Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.0@@@@@@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@I&amp;Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.0@@@@@@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@I&amp;Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.0@@@@@@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@I&amp;Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.0@@@@@@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@I&amp;Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.0@@@@@@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@I&amp;Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.0@@@@@@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y$@@@@@@@@@@@@@@@@I&amp;Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.0@@@@@@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y&amp;XL3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&amp;Y.;.;.;.;.;.;.1DQDQDQDQDQDQDQD@@@@@@@@L3L3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"H"H"H"H"I&amp;Y&amp;Y&amp;Y&amp;Y&amp;********************Y&amp;Y&amp;Y&ampbody></methods><methods><class-id>Examples.ClickWidgetEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Click Widget Event Tester' 			#min: #(#{Core.Point} 586 391 ) 			#max: #(#{Core.Point} 586 391 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1386 991 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MappedClickWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 24 10 242 228 ) 					#name: #logoImage 					#flags: 0 					#visualSelector: #logo 					#mappingsSelector: #logoMap ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 22 237 242 375 ) 					#name: #TextEditor1 					#flags: 4 					#model: #helpText 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 356 63 582 90 ) 					#name: #InputField1 					#model: #clicked 					#type: #text ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 288 108 ) 					#name: #Label1 					#label: 'Hits:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 272 151 ) 					#name: #Label2 					#label: 'Misses:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 356 106 456 131 ) 					#name: #InputField2 					#model: #hits 					#type: #number 					#formatString: '0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 356 149 456 174 ) 					#name: #InputField3 					#model: #misses 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 257 65 ) 					#name: #Label3 					#label: 'Selection:' ) ) ) )</body></methods><methods><class-id>Examples.ListBoxEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'List Box Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1102 1078 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 -7 1 186 0 ) 					#name: #singleSelectList 					#model: #singleSelectList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 196 0 0.5 0 ) 					#name: #addItemToTopList 					#model: #addItemToTopList 					#label: 'Add Item To Top List' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 237 0 0.5 0 ) 					#name: #addItemToBottomList 					#model: #addItemToBottomList 					#label: 'Add Item To Bottom List' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 265 0 -7 1 -30 1 ) 					#name: #multiSelectList 					#flags: 15 					#model: #multiSelectList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 7 4 ) 					#name: #Label1 					#label: 'Single Select' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 13 453 ) 					#name: #Label2 					#label: 'Multi Select' ) ) ) )</body></methods><methods><class-id>Examples.WindowEventTester class</class-id> <category>resources</category><body package="Trigger Event Testers">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Ring bell' 							#value: #talk ) 						#(#{UI.MenuItem} 							#rawLabel: 'Quit' 							#value: #closeRequest ) ) #(2 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Examples.WindowEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Window Event Tester' 			#bounds: #(#{Graphics.Rectangle} 640 512 916 732 ) 			#flags: 15 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.Rectangle} 105 8 451 399 ) 					#name: #Region1 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 6143 ) ) 					#lineWidth: 4 					#regionType: #ellipse ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 5 4 86 27 ) 					#name: #ActionButton1 					#model: #closeRequest 					#label: 'Close Me' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 6 34 87 57 ) 					#name: #ActionButton2 					#model: #moveMe 					#label: 'Move Me' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.DatasetEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Dataset Event Tester' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1600 1200 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1215 1070 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #allowSorting false #allowColumnReordering true #showLineNumbers true #allowColumnResizing true #showVerticalLines true #rowSize 30 #showHorizontalLines true ) 					#layout: #(#{Graphics.LayoutFrame} 10 0 29 0 -10 1 170 0 ) 					#name: #singleSelect 					#model: #singleSelectList 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 30 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'singleSelectRowHolder name' 							#label: 'Class Name' 							#labelIsImage: false 							#width: 200 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'singleSelectRowHolder ivarName' 							#label: 'Ivar Names' 							#labelIsImage: false 							#width: 150 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #ivarNames 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'singleSelectRowHolder checkBox' 							#label: 'Check Box' 							#labelIsImage: false 							#width: 80 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#type: #boolean 							#noScroll: false 							#formatString: '' ) ) ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #allowSorting true #allowColumnReordering true #allowColumnResizing true #showLineNumbers false #showVerticalLines false #showHorizontalLines true #rowSize 26 #rowLabelsAsButtons true ) 					#layout: #(#{Graphics.LayoutFrame} 10 0 284 0 -10 1 -10 1 ) 					#name: #multiSelect 					#model: #multiSelectList 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 30 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'multiSelectRowHolder name' 							#label: 'Class Name' 							#labelIsImage: false 							#width: 200 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'multiSelectRowHolder ivarName' 							#label: 'Ivar Names' 							#labelIsImage: false 							#width: 150 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #multiIvarNames 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting false ) 							#model: #'multiSelectRowHolder checkBox' 							#label: 'Check Box' 							#labelIsImage: false 							#width: 80 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false 							#labelsAsButtons: true ) ) 					#multipleSelections: true 					#labelsAsButtons: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 5 ) 					#name: #Label1 					#label: 'Single Select' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 255 ) 					#name: #Label2 					#label: 'Multi Select' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 183 224 ) 					#name: #CheckBox1 					#model: #columnSorting 					#label: 'Column Sorting' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 183 243 ) 					#name: #CheckBox3 					#model: #columnResizing 					#label: 'Column Resizing' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 183 262 ) 					#name: #CheckBox2 					#model: #columnReordering 					#label: 'Column Reordering' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0 222 0 1 1 226 0 ) 					#name: #Divider1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 183 0 0 0 ) 					#name: #ActionButton1 					#model: #addRowToSingleSelectDataset 					#label: 'Add Row' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -10 1 183 0 1 0 ) 					#name: #ActionButton2 					#model: #removeRowToSingleSelectDataset 					#label: 'Remove Selection' 					#isDefault: false 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.ComboBoxEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Combo Box Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1193 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 13 0 19 0 -13 1 45 0 ) 					#name: #topBox 					#model: #topValue 					#comboList: #topChoices ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 63 0 0.5 0 ) 					#name: #ActionButton1 					#model: #buttonAction 					#label: 'Press me' ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 13 0 105 0 -13 1 131 0 ) 					#name: #bottomBox 					#model: #bottomValue 					#comboList: #bottomChoices ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 13 0 156 0 -13 1 182 0 ) 					#name: #editableBox 					#model: #editableValue 					#isReadOnly: false 					#comboList: #editableChoices ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 13 135 ) 					#name: #Label1 					#label: 'Editable' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 13 -4 ) 					#name: #Label2 					#label: 'Read Only' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 13 82 ) 					#name: #Label3 					#label: 'Read Only' ) ) ) )</body></methods><methods><class-id>Examples.LabelEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Label Event Test' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 43 62 ) 					#name: #Label1d 					#label: 'Label' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 25 121 164 147 ) 					#name: #ActionButton1 					#model: #changeText 					#label: 'Change Label Text' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.TabControlEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'TabControl Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1290 962 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.Rectangle} 22 18 312 321 ) 					#name: #tabControl 					#labels: #('First' 'Second' 'Third' 'Forth' 'Fifth' 'Sixth' 'Seventh' 'Last' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 349 137 454 160 ) 					#name: #ActionButton1 					#label: 'Focus Getter' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Examples.TableEventTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Table Event Tester' 			#bounds: #(#{Graphics.Rectangle} 800 600 1350 1053 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.Rectangle} 5 22 532 145 ) 					#name: #cellSelection 					#model: #cellSelection 					#showHGrid: true 					#showVGrid: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.Rectangle} 5 171 532 294 ) 					#name: #rowSelection 					#model: #rowSelection 					#showHGrid: true 					#selectionStyle: #row ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.Rectangle} 7 319 534 442 ) 					#name: #columnSelection 					#model: #columnSelection 					#showVGrid: true 					#selectionStyle: #column ) ) ) )</body></methods><methods><class-id>Examples.SpinEventTriggerTester class</class-id> <category>interface specs</category><body package="Trigger Event Testers">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Spin Event Test' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 29 26 170 51 ) 					#name: #SpinButton1 					#model: #stringAspect 					#formatString: '#@@@-@@-@@@@' 					#low: -5 					#interval: 10 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 29 61 170 86 ) 					#name: #SpinButton2 					#model: #dateAspect 					#type: #date 					#formatString: 'm/d/yy' 					#lowDate: #(#Date 347 2000 ) 					#highDate: #(#Date 355 2000 ) 					#interval: 2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 29 98 170 123 ) 					#name: #SpinButton3 					#model: #timeAspect 					#type: #time 					#formatString: 'h:mm:ss AM/PM' 					#lowTime: #(#Time 50400 ) 					#highTime: #(#Time 61200 ) 					#interval: 10 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 29 135 170 160 ) 					#name: #bumpSpinner 					#model: #numberAspect 					#type: #number 					#formatString: '#,##0' 					#low: 3 					#high: 33 					#interval: 3 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 29 168 170 193 ) 					#name: #wrapSpinner 					#model: #numberNoLow 					#isReadOnly: false 					#type: #fixedpoint 					#formatString: '#,##0.00' 					#low: 22.02 					#high: 25.02 					#interval: 0.02 					#isWrapAround: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class></st-source>