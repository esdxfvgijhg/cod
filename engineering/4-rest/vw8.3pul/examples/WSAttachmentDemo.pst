<?xml version="1.0"?><st-source><!-- Name: WSAttachmentDemoNotice: Copyright 2011-2016 Cincom Systems, Inc.  All rights reserved.Comment: Visual Works Web Services framework do not provide support for SOAP Messages with Attachments specification but using interceptors there is possible to send and receive Soap multipart messages. The demo demonstrates how to create a Soap multipart message, send and receive it.OverviewThe Attachment demo is based on the following specifications:http://www.w3.org/TR/SOAP-attachmentshttp://www.ws-i.org/Profiles/AttachmentsProfile-1.0-2004-08-24.htmlThe Service class provides #EchoAttachment service that receives and sends an instance of TestObject. TestObject #attachments instance variable contains a collection of associations where the key is the href attribute value and value is a stream that is sent as an Http attachment.The Soap messages are created with Content-Type value as  multipart/related. The start parameter in Content-Type defines the main part with Soap envelope. The attachment reference is encoded in the Soap message body using href attribute. The attachment is added to the Http request/response  in AttachmentInterceptor class.TestSendingAttachment class tests the demo.ImplementationTo pass the attchment reference the client class #x2oBinding method maps TestObject #file instance variable as a Struct with attribute #href.		<element name="file" >				<struct name="file">					<attribute name="href" ref="xsd:string"/>				</struct>		</element>When we send a message we provide in the Struct #href value a reference to the attachment Content-ID field value. The attachments collection includes #href's and streams to add as attachments.	href := '<claimphoto@example.com>'.	arg := WSAttachment.TestObject new			time: Time now;			file: (Struct new href: href; yourself);			attachments: (OrderedCollection with: href -> self attachmentStream);			yourself.	testObject := client echoAttachment: arg.The request body is going to be encoded as:<SOAP-ENV:Body>	<ns:EchoAttachment>		<echoAttachment>				<time xmlns="urn:testObject">13:37:17.000Z</time>				<file href="<claimphoto@example.com>" xmlns="urn:testObject"/>		</echoAttachment>	</ns:EchoAttachment></SOAP-ENV:Body>The AttachmentClientInterceptor in #sendingRequestEnvelope:in: receives marshaled Soap request and adds an attachment.  See AttachmentClientInterceptor>>addAttachmentFrom:to: .The multipart message is created with 'multipart/related' content type and the start parameter that defines the main part with Soap envelope:POST /AttachmentService HTTP/1.1Host: localhost:4925SOAPAction: "urn:testAttachment#EchoAttachment"Content-type: multipart/related;boundary="=_vw0.48372081270615d_=";start="<rootpart@example.com>"- =_vw0.48372081270615d_=	Content-type: text/xml;charset=utf-8	Content-ID: <rootpart@example.com>	<?xml version="1.0" encoding="UTF-8"?>	<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns="urn:testAttachment_WSDLOperations"><SOAP-ENV:Body><ns:EchoAttachment><echoAttachment><time xmlns="urn:testObject">13:37:17.000Z</time><file href="&lt;claimphoto@example.com&gt;" xmlns="urn:testObject"/></echoAttachment></ns:EchoAttachment></SOAP-ENV:Body></SOAP-ENV:Envelope>- =_vw0.48372081270615d_=	Content-type: application/octet-stream	Content-ID: <claimphoto@example.com>	- - -  (200 bytes) - - -- =_vw0.48372081270615d_=- When the multipart message arrives on the server  SoapMarshalingManager reads the Http message contents and selects the start part based on #start parameter from Content-Type field. The default selection criteria is implemented in SoapMarshalingManager class>>selectStartPartBlockDefault. The selection block can be customized:SoapMarshalingManager selectStartPartBlock:  [ :httpEntity | "find and return the start part" ]When the request is unmarshaled the AttachmentServerInterceptor>>receivingRequest:in: finds the attachment using the object href value and set it in the object #attachments.  See AttachmentServerInterceptor>>setValueFromAttachment:forObject: The responder adds the attachment to a reply in AttachmentServerInterceptor>>sendingReplyEnvelope:in:The client processes the attachment value in  AttachmentClientInterceptor>>receivingReply:in:DbIdentifier: bear73DbTrace: 493915DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'WSDL' '') #(#any 'SOAP-Server' '') #(#any 'SUnitToo' ''))PackageName: WSAttachmentDemoParcel: #('WSAttachmentDemo')PrerequisiteDescriptions: #(#(#name 'WSDL' #componentType #bundle) #(#name 'SOAP-Server' #componentType #package) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('WSDL' '') #('SOAP-Server' '') #('SUnitToo' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 2:31:40 PM April 28, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.3) of April 28, 2017 on April 28, 2017 at 2:31:40 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>WSAttachment</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private WebServices.*			</imports><category></category><attributes><package>WSAttachmentDemo</package></attributes></name-space><class><name>AttachmentClientInterceptor</name><environment>WSAttachment</environment><super>WebServices.ClientMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSAttachmentDemo</package></attributes></class><comment><class-id>WSAttachment.AttachmentClientInterceptor</class-id><body>It is a client interceptor. The class creates multipart Soap messages, sets references to attachments and unmarshals messages with attachmentsMethod:  #sendingRequestEnvelope:in: - adds an attachment to a requestMethod: #receivingReply:in:  - processes an attachement from a reply </body></comment><class><name>AttachmentResponder</name><environment>WSAttachment</environment><super>WebServices.SOAPResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WSAttachmentDemo</package></attributes></class><comment><class-id>WSAttachment.AttachmentResponder</class-id><body>The responder receives and sends multipart Soap messages</body></comment><class><name>WsdlTestSendingAttachment</name><environment>WSAttachment</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSAttachmentDemo</package></attributes></class><comment><class-id>WSAttachment.WsdlTestSendingAttachment</class-id><body>Tests sending and receiving Soap message with attachments. Uses Client class.</body></comment><class><name>TestObject</name><environment>WSAttachment</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>time file attachments </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSAttachmentDemo</package></attributes></class><comment><class-id>WSAttachment.TestObject</class-id><body>The class holds attachment stream in #file inst. variableInstance Variables	file	&lt;Struct or Stream&gt;		time	&lt;Timestamp&gt;		attachments &lt;Collection of Association&gt; the association key is attachment reference, the value is the attachment contents </body></comment><class><name>Client</name><environment>WSAttachment</environment><super>WebServices.WsdlClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services</category><attributes><package>WSAttachmentDemo</package></attributes></class><comment><class-id>WSAttachment.Client</class-id><body>Client sends and receives  Soap multipart messages</body></comment><class><name>Service</name><environment>WSAttachment</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSAttachmentDemo</package></attributes></class><comment><class-id>WSAttachment.Service</class-id><body>Service provides a service with an attachment</body></comment><class><name>AttachmentServerInterceptor</name><environment>WSAttachment</environment><super>WebServices.SOAPMessageInterceptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSAttachmentDemo</package></attributes></class><comment><class-id>WSAttachment.AttachmentServerInterceptor</class-id><body>It is a responder interceptor. The class creates multipart Soap messages, sets references to attachments and unmarshals messages with attachments</body></comment><methods><class-id>WSAttachment.AttachmentClientInterceptor</class-id> <category>processing callbacks</category><body package="WSAttachmentDemo">receivingReply: aReply in: aTransport" Client receives the reply with an attachment"	AttachmentServerInterceptor 		setValueFromAttachment: aReply handler transportEntity 		forObject: aReply handler smalltalkEntity bodyContents result.</body><body package="WSAttachmentDemo">sendingRequestEnvelope: aRequest in: aTransport	"Client sends Soap message with the attachment"	AttachmentServerInterceptor 		addAttachmentFrom: aRequest handler smalltalkEntity arguments first  		to: aRequest handler transportEntity</body></methods><methods><class-id>WSAttachment.AttachmentResponder class</class-id> <category>wsdl schema</category><body package="WSAttachmentDemo">serviceMap	 " WebServices.ServiceMap loadFrom: Client serviceMap readStream " 	^Service serviceMap</body><body package="WSAttachmentDemo">wsdlSchema	^Service wsdlSchema</body><body package="WSAttachmentDemo">x2oBinding	^Service x2oBinding</body></methods><methods><class-id>WSAttachment.AttachmentResponder class</class-id> <category>accessing</category><body package="WSAttachmentDemo">interceptors	^OrderedCollection with: AttachmentServerInterceptor</body></methods><methods><class-id>WSAttachment.WsdlTestSendingAttachment</class-id> <category>accessing</category><body package="WSAttachmentDemo">attachmentStream	| stream |	stream := ByteArray new readWriteStream.	200 timesRepeat: [ stream nextPut: 97].	^stream reset</body></methods><methods><class-id>WSAttachment.WsdlTestSendingAttachment</class-id> <category>tests</category><body package="WSAttachmentDemo">test	|  arg testObject href |	"The #file value is set to the attachment reference string and will be encoded as XML #href attribute. "	href := '&lt;claimphoto@example.com&gt;'.	arg := TestObject new			time: Time now;			file: (Struct new href: href; yourself);			attachments: (OrderedCollection with: href -&gt; self attachmentStream);			yourself.	[AttachmentResponder addToServer.	testObject := Client new echoAttachment: arg.	] ensure: [AttachmentResponder flushResponders ].	self assert: (testObject attachments first value isKindOf: Stream).	self assert: self attachmentStream contents = testObject attachments first value contents</body></methods><methods><class-id>WSAttachment.TestObject</class-id> <category>accessing</category><body package="WSAttachmentDemo">attachments	^attachments</body><body package="WSAttachmentDemo">attachments: aCollection	attachments := aCollection</body><body package="WSAttachmentDemo">file	^file</body><body package="WSAttachmentDemo">file: anObject	file := anObject</body><body package="WSAttachmentDemo">time	^time</body><body package="WSAttachmentDemo">time: anObject	time := anObject</body></methods><methods><class-id>WSAttachment.Client</class-id> <category>public api</category><body package="WSAttachmentDemo">echoAttachment: anObject	^self executeSelector: #'echoAttachment:' args: (Array with: anObject).</body></methods><methods><class-id>WSAttachment.Client class</class-id> <category>wsdl schema</category><body package="WSAttachmentDemo">bindingName	^'Service'</body><body package="WSAttachmentDemo">bindingTargetNamespace	^'urn:testAttachment'</body><body package="WSAttachmentDemo">serviceMap	^Service serviceMap</body><body package="WSAttachmentDemo">wsdlSchema	^Service wsdlSchema</body><body package="WSAttachmentDemo">x2oBinding	^Service x2oBinding</body></methods><methods><class-id>WSAttachment.Client class</class-id> <category>accessing</category><body package="WSAttachmentDemo">processingPolicy	^WebServices.ClientProcessingPolicy new 		interceptorClasses: (OrderedCollection with: AttachmentClientInterceptor) ; 		yourself</body></methods><methods><class-id>WSAttachment.Service</class-id> <category>public api</category><body package="WSAttachmentDemo">echoAttachment: aTestObject"The parameter should arrive with #attachments value as a stream "		(aTestObject attachments first value isKindOf: Stream) ifFalse: [ self error: 'Wrong #attachments value. Expected Stream '].	^aTestObject</body></methods><methods><class-id>WSAttachment.Service class</class-id> <category>wsdl schema</category><body package="WSAttachmentDemo">serviceMap	^'&lt;ns:serviceMap xmlns:ns0="urn:testAttachment" xmlns:ns="urn:visualworks:serviceMap"&gt;	&lt;ns:serviceClass&gt;WSAttachment.Service&lt;/ns:serviceClass&gt;	&lt;ns:interface&gt;ns0:Service&lt;/ns:interface&gt;	&lt;ns:operation name="EchoAttachment" selector="echoAttachment:"/&gt;&lt;/ns:serviceMap&gt;'</body><body package="WSAttachmentDemo">wsdlSchema^'&lt;definitions targetNamespace="urn:testAttachment" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="urn:testAttachment_WSDLOperations" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="urn:testAttachment"&gt;	&lt;types&gt;		&lt;schema targetNamespace="urn:testAttachment_WSDLOperations" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:ns="urn:testObject"&gt;			&lt;import namespace="urn:testObject"&gt;&lt;/import&gt;			&lt;element name="EchoAttachment"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="echoAttachment" type="ns:TestObject"&gt;&lt;/element&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;			&lt;element name="EchoAttachmentResponse"&gt;				&lt;complexType&gt;					&lt;sequence&gt;						&lt;element name="result" type="ns:TestObject"&gt;&lt;/element&gt;					&lt;/sequence&gt;				&lt;/complexType&gt;			&lt;/element&gt;		&lt;/schema&gt;		&lt;schema targetNamespace="urn:testObject" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;			&lt;complexType name="TestObject"&gt;				&lt;sequence&gt;					&lt;element name="time" type="xsd:time"&gt;&lt;/element&gt;					&lt;element name="file" type="xsd:string"&gt;&lt;/element&gt;				&lt;/sequence&gt;			&lt;/complexType&gt;		&lt;/schema&gt;	&lt;/types&gt;	&lt;message name="EchoAttachment"&gt;		&lt;part element="ns:EchoAttachment" name="parameter"&gt;&lt;/part&gt;	&lt;/message&gt;	&lt;message name="EchoAttachmentResponse"&gt;		&lt;part element="ns:EchoAttachmentResponse" name="return"&gt;&lt;/part&gt;	&lt;/message&gt;	&lt;portType name="Service"&gt;		&lt;operation name="EchoAttachment"&gt;			&lt;input message="tns:EchoAttachment"&gt;&lt;/input&gt;			&lt;output message="tns:EchoAttachmentResponse"&gt;&lt;/output&gt;		&lt;/operation&gt;	&lt;/portType&gt;	&lt;binding name="Service" type="tns:Service"&gt;		&lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"&gt;&lt;/soap:binding&gt;		&lt;operation name="EchoAttachment"&gt;			&lt;soap:operation soapAction="urn:testAttachment#EchoAttachment" style="document"&gt;&lt;/soap:operation&gt;			&lt;input&gt;				&lt;soap:body use="literal"&gt;&lt;/soap:body&gt;			&lt;/input&gt;			&lt;output&gt;				&lt;soap:body use="literal"&gt;&lt;/soap:body&gt;			&lt;/output&gt;		&lt;/operation&gt;	&lt;/binding&gt;	&lt;service name="VWWsdlService"&gt;		&lt;port binding="tns:Service" name="Service"&gt;			&lt;soap:address location="http://localhost:4444/AttachmentService"&gt;&lt;/soap:address&gt;		&lt;/port&gt;	&lt;/service&gt;&lt;/definitions&gt;'</body><body package="WSAttachmentDemo">x2oBinding^'&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding targetNamespace="urn:testAttachment_WSDLOperations" defaultClassNamespace="WSAttachment" xmlns="urn:visualworks:VWSchemaBinding" xmlns:ns="urn:testObject"&gt;		&lt;bindingImport namespace="urn:testObject"/&gt;		&lt;element name="EchoAttachment"&gt;			&lt;struct name="EchoAttachment"&gt;				&lt;sequence&gt;					&lt;element name="echoAttachment" ref="ns:TestObject"/&gt;				&lt;/sequence&gt;			&lt;/struct&gt;		&lt;/element&gt;		&lt;element name="EchoAttachmentResponse"&gt;			&lt;struct name="EchoAttachmentResponse"&gt;				&lt;sequence&gt;					&lt;element name="result" ref="ns:TestObject"/&gt;				&lt;/sequence&gt;			&lt;/struct&gt;		&lt;/element&gt;	&lt;/xmlToSmalltalkBinding&gt;	&lt;xmlToSmalltalkBinding targetNamespace="urn:testObject" defaultClassNamespace="WSAttachment" xmlns="urn:visualworks:VWSchemaBinding" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;		&lt;object name="TestObject" smalltalkClass="TestObject"&gt;			&lt;element name="time" ref="xsd:time"/&gt;			&lt;element name="file" &gt;				&lt;struct name="file"&gt;					&lt;attribute name="href" ref="xsd:string"/&gt;				&lt;/struct&gt;			&lt;/element&gt;		&lt;/object&gt;	&lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;'</body></methods><methods><class-id>WSAttachment.AttachmentServerInterceptor</class-id> <category>processing callbacks</category><body package="WSAttachmentDemo">receivingRequest: aRequest in: aTransport" Server receives the request with an attachment"	| testObject |	testObject := aRequest handler smalltalkEntity arguments first.	self  class		setValueFromAttachment:  aRequest handler transportEntity 		forObject: testObject.</body><body package="WSAttachmentDemo">sendingReplyEnvelope: aReply in: aTransport	"Server sends Soap message with the attachment"	self class		addAttachmentFrom: aReply handler smalltalkEntity arguments first  		to:  aReply handler transportEntity.</body></methods><methods><class-id>WSAttachment.AttachmentServerInterceptor class</class-id> <category>processing callbacks</category><body package="WSAttachmentDemo">addAttachmentFrom: anObject to: transportEntity	| part  contentType mainPartRef href stream |	mainPartRef :=  '&lt;rootpart@example.com&gt;'.	"Create a multipart body and set the main part Content-ID field"	transportEntity bot makeMultipart: transportEntity.	"Set the message Content-Type as Multipart/Related "	contentType :=  transportEntity fieldAt: 'content-type' ifAbsent: [nil].	contentType subtype: 'related'.	"Set the Http message content type start parameter to find the part with the Soap envelope "	contentType parameterAt: 'start' put: mainPartRef.	"Set the content-id field for the Soap envelope part "	transportEntity parts first fieldValueAt: 'Content-ID' put: mainPartRef.	anObject attachments do: [ :assoc |		href := assoc key.		stream := assoc value.		transportEntity addPart: (part := Net.MimeEntity source:  stream ).		"Set the attachment reference in Content-ID field. The reference has been already encoded in the Soap message body"		part fieldValueAt: 'Content-ID' put: href ].</body><body package="WSAttachmentDemo">setValueFromAttachment: httpEntity forObject: testObject" The message with attachment is received and unmarshaled. Find the attachment by content-id reference and set it value in to the object"	| attachment href |	href := testObject file href.	attachment := httpEntity parts 			detect: [ :partx | '*', href, '*' match:  (partx fieldAt: 'content-id' ifAbsent: ['' asValue] ) value  ] 			ifNone: [ self error: 'attachment is not found' ].	testObject attachments: (OrderedCollection with: href -&gt; attachment body anySource)</body></methods><methods><class-id>WSAttachment.AttachmentServerInterceptor class</class-id> <category>accessing</category><body package="WSAttachmentDemo">attachmentReference	^'&lt;claimphoto@example.com&gt;'</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>SOAPResponder</name><environment>WebServices</environment><super>SiouX.NetHttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processingPolicy environmentWithHeaders binding service </inst-vars><class-inst-vars>defaultProcessingPolicyClass defaultEnvironmentWithHeaders responders </class-inst-vars><imports>			private Net.*			private SiouX.*			</imports><category></category><attributes><package>SOAP-Server</package></attributes></class><class><name>ClientMessageInterceptor</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WSDLBinding</package></attributes></class><class><name>SOAPMessageInterceptor</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SOAP-Server</package></attributes></class><class><name>WsdlClient</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>port config wsdlUrl accessPoint header request response responseValue transport processingPolicy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLBinding</package></attributes></class></st-source>