<?xml version="1.0"?><st-source><!-- Name: ADvance2StoreComment: IC&C ADvance Extensions for Store.This package is not necessary for the parcel version of ADvance.©1998-2008 by IC&C GmbH, Software Foundations. All rights reserved.DbIdentifier: bear73DbTrace: 390912DbUsername: smichaelDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'ADvance2' ''))PackageName: ADvance2StoreParcel: #('ADvance2Store')ParcelName: ADvance2StorePrerequisiteDescriptions: #(#(#name 'ADvance2' #componentType #package))PrerequisiteParcels: #(#('ADvance2' ''))PrintStringCache: (7.10 - 1,smichael)Version: 7.10 - 1VersionDate: 02/28/2008Date: 5:08:50 PM May 26, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:08:50 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>ADvance2Store extension</category><body package="ADvance2Store">advance2bundle	| storeRegistry |	^(storeRegistry := #{Store.Registry} valueOrDo: [nil]) notNil 		ifTrue: [storeRegistry bundleNamed: self advance2bundleName]		ifFalse: [nil]</body><body package="ADvance2Store">advance2bundleName	^'ADvance2Bundle'</body><body package="ADvance2Store">createADvance2ParcelsInDirectory: aDirectoryName 	"This publishes a parcel for each of the packages belonging to ADvance2Bundle. These packages are named 	in method #packagesToParcel of this class.	Each parcel gets the same version, taken from ADvance2Bundle."	| thePackagesToParcel theDirectory |	Cursor wait showWhile: [		thePackagesToParcel := OrderedCollection new.		self packageListForParcelling			do: 				[:eachPackName | 				| thePackage |				thePackage := Store.Registry packageNamed: eachPackName.				thePackage isNil					ifTrue: [(Dialog confirm: 'Package ' , eachPackName , ' not found!\Do you want to continue parcel saving?' withCRs) not 						ifTrue: [^Dialog warn: 'No Parcel saved!']]					ifFalse: 						[thePackage hasCodeOverridden 							ifTrue: [^Dialog warn: 'Parcel ' , eachPackName , ' has overrides, Parcel save cancelled!'].						(thePackage relatedParcel ~~ nil and: [thePackage relatedParcel hasUninstalledCode])							ifTrue: [^Dialog warn: 'Parcel ' , eachPackName , ' has uninstalled code, Parcel save cancelled!'].						thePackage hasBeenModified							ifTrue: [^Dialog warn: 'Package ' , eachPackName , ' has unpublished change, Parcel save cancelled!'].						thePackagesToParcel add: thePackage]].		theDirectory := aDirectoryName asFilename.		thePackagesToParcel do: [:eachPackage | eachPackage				advance2saveAsParcel: theDirectory				saveStructure: false				saveLinks: true				parcelOptions: (Dictionary					with: #parcelSaveSource -&gt; true					with: #parcelPadded -&gt; true					with: #parcelDirectory -&gt; theDirectory					with: #parcelSave -&gt; true)]]</body><body package="ADvance2Store">packageListForParcelling	"^&lt;Array of: String&gt; 	Answers the names of the Packages which shall be delivered as 	Parcels in the ADvance parcel version."	^#(		'ICCCommonClasses' 		'ICCResources' 		'ICCLookExtensions' 		'ADvance2' 		'ADvance2Examples' 		'ADvance2Tutorial' 		'ADvance2PlugIns' 		'ADvance2RefactoringBrowser'		'ICCIncrementalTypes' 		'ICC-Namespace'		'ICCColorSelector' 	)</body><body package="ADvance2Store">resetPrerequisiteVersions	"Restes the package and parcel prerequistites of the bundle's packages to the empty versions. 	Should be done before creating a new work edition of the bundle."	"self resetPrerequisiteVersions"	Cursor wait showWhile: 			[self advance2bundle containedItems 				do: [:eachPackage | eachPackage advance2resetPrerequisiteVersions]]</body><body package="ADvance2Store">updatePackageVersionsAndPrerequisites	"Update the package and parcel prerequistites of the bundle's packages to the correct versions (version	property of ADvance bundle for required ADvance packages, current version of loaded package for other	required packages). Should be done before publishing of ADvance bundle."	"self updatePackageVersionsAndPrerequisites"	Cursor wait showWhile: 			[self advance2bundle containedItems 				do: [:eachPackage | eachPackage advance2updateVersionAndPrerequisites]]</body></methods><methods><class-id>Store.PackageModel</class-id> <category>ADvance2 extension</category><body package="ADvance2Store">advance2currentVersionString	"^&lt;String&gt; 	Answers the first part of the DB info version string which is 	normally of kind '(A.B.C,developer)' which means 'A.B.C' as 	answer here."	| theWholeString |	theWholeString := self databaseInfomation versionString.	^theWholeString 		copyFrom: (theWholeString indexOf: $( ) + 1 		to: (1 max: (theWholeString lastIndexOf: $, ) - 1)</body><body package="ADvance2Store">advance2parcelVersionDate	"^&lt;String&gt; 	Answers the version date of the ADvance bundle."	^self advance advance2bundle propertyAt: #versionDate.</body><body package="ADvance2Store">advance2parcelVersionString	"^&lt;String&gt; 	Answers the version String of the ADvance bundle. 	Answers the first part of the DB info version string which is normally of kind '(A.B.C,developper)' 	which means 'A.B.C' as answer here."	^self advance advance2bundle propertyAt: #version.</body><body package="ADvance2Store">advance2resetPrerequisiteVersions	"Reset version information of package requisites to empty version"	| advanceBundle |	advanceBundle := self advance advance2bundle.	(properties at: #developmentPrerequisites ifAbsent: [#()]) do: 			[:eachTriple | 			| thePackage |			eachTriple first == #package 				ifTrue: 					[thePackage := Store.Registry packageNamed: (eachTriple at: 2).					(advanceBundle containedItems includes: thePackage) ifTrue: [					eachTriple at: 3						put: '']]].	(properties at: #prerequisiteParcels ifAbsent: [#()]) do: 			[:eachPair | 			(ICC.ADvance.ADvance packageListForParcelling includes: eachPair first) 				ifTrue: [eachPair at: 2 put: '']]</body><body package="ADvance2Store">advance2saveAsParcel: directoryName saveStructure: saveStructure saveLinks: saveLinks parcelOptions: aDictionary 	"For a package, the advance2saveAsParcel means the same as to save the parcel the normal way except that the #version 	property is set to the package version before and reset after saving. Do not use accessors propertyAt: because temporarily	change shall not cause package update.	Prerequisites are modified: parcel requisites for parcels being part of this parcelling process, the version is set to the common	version given by the bundle's corresponding property."	|  result oldProperties |	oldProperties := properties.	properties := properties copy.	properties at: #version put: self advance2parcelVersionString.	properties at: #versionDate put: self advance2parcelVersionDate.	(properties at: #prerequisiteParcels ifAbsent: [#()]) 		do: [:eachTuple | (self advance packageListForParcelling includes: eachTuple first) 				ifTrue: [eachTuple at: 2 put: self advance2parcelVersionString]].	result := self		saveAsParcel: (directoryName constructString: self name) asFilename		saveStructure: saveStructure		saveLinks: saveLinks		parcelOptions: aDictionary.	properties := oldProperties.	^result</body><body package="ADvance2Store">advance2updateVersionAndPrerequisites	"Look for current version property of ADvance2Bundle (if required package is ADvance package)	or version of loaded package. Connection to Store must be established!"	| advanceBundle |	advanceBundle := self advance advance2bundle.	properties at: #version		put: (advanceBundle propertyAt: #version ifAbsent: ['???']).	properties at: #versionDate		put: (advanceBundle propertyAt: #versionDate ifAbsent: ['???']).	(properties at: #developmentPrerequisites ifAbsent: [#()]) do: 			[:eachTriple | 			| thePackage |			eachTriple first == #package 				ifTrue: 					[thePackage := Store.Registry packageNamed: (eachTriple at: 2).					eachTriple at: 3						put: ((advanceBundle containedItems includes: thePackage) 								ifTrue: [self advance2parcelVersionString]								ifFalse: [thePackage advance2currentVersionString])]].	(properties at: #prerequisiteParcels ifAbsent: [#()]) do: 			[:eachPair | 			(ICC.ADvance.ADvance packageListForParcelling includes: eachPair first) 				ifTrue: [eachPair at: 2 put: self advance2parcelVersionString]]</body></methods><methods><class-id>Store.BundleModel</class-id> <category>ADvance2 extension</category><body package="ADvance2Store">advance2saveAsParcel: directoryName saveStructure: saveStructure saveLinks: saveLinks parcelOptions: aDictionary 	"Save the receiver's items as parcels -without creating the parcel 	in the image. All items are 	recursively saved: bundles are asked for their items, if a 	package is reached, it is really 	stored as a parcel. 	directoryName is a directory with no extension. 	If saveStructure is true, fill in the bundleStructure property with 	bundle/package contents. 	If saveLinks is true, save the db links for every component. 	aDictionary contains options from a user input dialog."	self allContainedItems do: [:eachPundle | eachPundle			advance2saveAsParcel: directoryName			saveStructure: saveStructure			saveLinks: saveLinks			parcelOptions: aDictionary]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>BundleModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>PackageModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class></st-source>