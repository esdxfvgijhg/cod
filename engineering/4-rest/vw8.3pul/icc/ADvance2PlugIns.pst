<?xml version="1.0"?><st-source><!-- Name: ADvance2PlugInsComment: IC&C ADvance Plug Ins©1998-2008 by IC&C GmbH, Software Foundations. All rights reserved.DbIdentifier: bear73DbTrace: 390914DbUsername: smichaelDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'ADvance2' ''))PackageName: ADvance2PlugInsParcel: #('ADvance2PlugIns')ParcelName: ADvance2PlugInsPrerequisiteDescriptions: #(#(#name 'ADvance2' #componentType #package))PrerequisiteParcels: #(#('ADvance2' ''))PrintStringCache: (7.10 - 1,smichael)Version: 7.10 - 1VersionDate: 02/28/2008Date: 5:08:50 PM May 26, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:08:50 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AD2CodingAssistant</name><environment>ICC.ADvance</environment><super>ICC.ICC1ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs className clientRelations defineReadAccessor defineWriteAccessor addChangedMessage protocols </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2PlugIns</package></attributes></class><comment><class-id>ICC.ADvance.AD2CodingAssistant</class-id><body>This class helps defining access methods for client relations. It behaves much like the CodingAssistant.Instance Variables:	tabs 					&lt;SelectionInList&gt;	protocols 				&lt;MultiSelectionInList&gt;	className 				&lt;ValueHolder on: Symbol&gt;	clientRelations 			&lt;MultiSelectionInList&gt;	defineReadAccessor 	&lt;ValueHolder on: Boolean&gt;	defineWriteAccessor 	&lt;ValueHolder on: Boolean&gt;	addChangedMessage 	&lt;ValueHolder on: Boolean&gt;Class Variables:	MRUClasses 			&lt;AD2MRUList of: Symbol&gt;							Names of the most recently used classes.@Name		Coding Assistant@Copyright 1995-2002 IC&amp;C GmbH</body></comment><class><name>AD2CommentGenerator</name><environment>ICC.ADvance</environment><super>ICC.ICC1ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2PlugIns</package></attributes></class><comment><class-id>ICC.ADvance.AD2CommentGenerator</class-id><body>This class provides services for generating comment stubs and comment error reports for sets of classes. It heavily depends on class ClassDeclarations contained in the PPD Advanced tools product. The Advanced tools are a prerequisite of this Comment Generator.The Comment Generator invokes ClassDeclarations for the current or a selected subject and then runs all checks on it.Instance variables:	classList	&lt;SelectionInList on: Class&gt;To-Do: o Check whether there are instances of classes under investigation. Otherwise notify user.@Name		Comment Generator@Copyright 1997-2002 IC&amp;C GmbH</body></comment><class><name>ADSmalllintConnect</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2PlugIns</package></attributes></class><comment><class-id>ICC.ADvance.ADSmalllintConnect</class-id><body>This class provides a connection to Smalllint. It invokes Smalllint for the current or a selectedsubject and then runs all checks on it.@Name		Smalllint Connect@Copyright 1997-2002 IC&amp;C GmbH</body></comment><class><name>AD2Definer</name><environment>ICC.ADvance</environment><super>Tools.UIDefiner</super><private>false</private><indexed-type>none</indexed-type><inst-vars>registeredJobs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2PlugIns</package></attributes></class><comment><class-id>ICC.ADvance.AD2Definer</class-id><body>This class helps you defining accessor methods for client relations. To use it do the following steps: 1. Create a definer for a the target class via AD2Definer class&gt;&gt;for: aClass. 2. Register the client relations you want to define access methods by	a) registerReadDefinitionForAll: aCollectionOfClientRelations or	b) registerWriteDefinitionForAll: aCollectionOfClientRelations addChangedMessage: aBoolean. 3. Send the definer a #doDefine message.Instance Variables:	registeredJobs			&lt;OrderedCollection of: (Association key: Symbol value: IT1ClientRelation)&gt;							A collection describing what to define.Class Variables:	ConfirmReplacement 	&lt;Boolean&gt;	Shall the user confirm the method replacement?</body></comment><shared-variable><name>MRUClasses</name><environment>ICC.ADvance.AD2CodingAssistant</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2PlugIns</package></attributes></shared-variable><shared-variable><name>ConfirmReplacement</name><environment>ICC.ADvance.AD2Definer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2PlugIns</package></attributes></shared-variable><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>aspects</category><body package="ADvance2PlugIns">addChangedMessage	^addChangedMessage isNil		ifTrue: [addChangedMessage := false asValue]		ifFalse: [addChangedMessage]</body><body package="ADvance2PlugIns">className	^className</body><body package="ADvance2PlugIns">clientRelations	^clientRelations isNil		ifTrue: [clientRelations := MultiSelectionInList new]		ifFalse: [clientRelations]</body><body package="ADvance2PlugIns">defineReadAccessor	^defineReadAccessor isNil		ifTrue: [defineReadAccessor := true asValue]		ifFalse: [defineReadAccessor]</body><body package="ADvance2PlugIns">defineWriteAccessor	^defineWriteAccessor isNil		ifTrue: [defineWriteAccessor := true asValue]		ifFalse: [defineWriteAccessor]</body><body package="ADvance2PlugIns">protocols	^protocols isNil		ifTrue: [protocols := MultiSelectionInList new list: self class standardProtocols]		ifFalse: [protocols]</body><body package="ADvance2PlugIns">tabs	"Answer a SelectionInList for the tabs."	tabs isNil		ifTrue:			[tabs := SelectionInList with: self labelArray.			tabs selectionIndex: 1.			tabs selectionIndexHolder onChangeSend: #tabsChanged to: self].	^tabs</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>initialize-release</category><body package="ADvance2PlugIns">initialize	super initialize.	className := nil asValue onChangeSend: #changedClassName to: self.	self clientRelations selectionIndexHolder onChangeSend: #checkDefineButton to: self.	self protocols selectionIndexHolder onChangeSend: #checkDefineButton to: self.	self defineReadAccessor onChangeSend: #checkDefineButton to: self.	self defineWriteAccessor onChangeSend: #changedDefineWriteAccessor to: self</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>actions</category><body package="ADvance2PlugIns">chooseClass	| aClassOrNil |	(aClassOrNil := self adDialog pickClassFor: self builder window) isNil ifTrue: [^self].	self className value: aClassOrNil fullName</body><body package="ADvance2PlugIns">clearAllClientRelations	self clientRelations clearAll</body><body package="ADvance2PlugIns">defineAccessors	| selections aDefiner |	selections := self clientRelations selections.	self targetClass isNil		ifTrue:			[self classIsAbsent: self className value.			^self className value: nil].	aDefiner := self class definerClass for: self targetClass.	self defineReadAccessor value ifTrue: [aDefiner registerReadDefinitionForAll: selections].	self defineWriteAccessor value ifTrue: [aDefiner registerWriteDefinitionForAll: selections addChangedMessage: self addChangedMessage value].	aDefiner doDefine</body><body package="ADvance2PlugIns">selectAllClientRelations	self clientRelations selectAll</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>private</category><body package="ADvance2PlugIns">classIsAbsent: aClassName	self class mruClasses remove: aClassName.	self adDialog warn: ('Class &lt;1p&gt; doesn''t exist.' expandMacrosWith: aClassName asString ) for: self builder window</body><body package="ADvance2PlugIns">labelArray	"Answer an Array with the tab labels."	^#('Attributes')</body><body package="ADvance2PlugIns">setWindowLabel	| labelPrefix |	labelPrefix := self class plugInName.	self builder window label: (self targetClass isNil			ifTrue: [labelPrefix]			ifFalse: ['&lt;1s&gt; - [&lt;2s&gt;]' expandMacrosWith: labelPrefix with: self targetClass name])</body><body package="ADvance2PlugIns">specArray	"Answer an Array with specification names for the tab pages."	^#(#attributesSpec)</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>interface opening</category><body package="ADvance2PlugIns">postBuildWith: aBuilder	| mruClassName component |	super postBuildWith: aBuilder.	self setWindowLabel.	(component := aBuilder componentAt: #clientRelations) isNil ifFalse: [component widget displayStringSelector: #extendedRoleName].	mruClassName := self class lastClassName.	(self adBasics systemEnvironment includesKey: mruClassName)		ifTrue: [self className value: mruClassName]		ifFalse:			[self class mruClasses remove: mruClassName.			self readClientRelations.			self checkDefineButton]</body><body package="ADvance2PlugIns">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self tabsChanged</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>changing</category><body package="ADvance2PlugIns">changedClassName	| newClassName |	self readClientRelations.	self checkDefineButton.	newClassName := self className value.	newClassName isNil ifTrue: [^self].	(self adBasics systemEnvironment includesKey: newClassName)		ifFalse: [^self classIsAbsent: newClassName].	self class lastClassName: newClassName.	self setWindowLabel</body><body package="ADvance2PlugIns">changedDefineWriteAccessor	self iccEnable: self defineWriteAccessor value group: #(#addChangedMessage).	self checkDefineButton</body><body package="ADvance2PlugIns">checkDefineButton	self iccEnable: (self protocols selections isEmpty not or: [self clientRelations selections isEmpty not and: [self defineReadAccessor value or: [self defineWriteAccessor value]]])		group: #(#defineAccessors)</body><body package="ADvance2PlugIns">tabsChanged	| tabIndex |	tabIndex := self tabs selectionIndex.	(self builder componentAt: #tabbing) widget client: self spec: (self specArray at: tabIndex) builder: self builder</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>updating</category><body package="ADvance2PlugIns">readClientRelations	| targetClass |	targetClass := self targetClass.	self clientRelations list: (targetClass isNil			ifTrue: [OrderedCollection new]			ifFalse: [targetClass clientRelations])</body><body package="ADvance2PlugIns">updateClientRelations	| oldSelections |	oldSelections := self clientRelations selections.	self readClientRelations.	self clientRelations selections: oldSelections</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant</class-id> <category>accessing</category><body package="ADvance2PlugIns">targetClass	^self adBasics systemEnvironment at: self className value ifAbsent: [nil]</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>info</category><body package="ADvance2PlugIns">applicationName	^self plugInName</body><body package="ADvance2PlugIns">versionId	^#('7.0' '03/28/02')</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>resources</category><body package="ADvance2PlugIns">applicationLogo	^self resources opaqueImageFor: self named: #applicationImage</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>plug-in methods</category><body package="ADvance2PlugIns">markedAsADvancePlugIn	"This class provides a plug-in interface for ADvance."</body><body package="ADvance2PlugIns">plugInInstall	(self plugInAPI notNil and: ['*' match: self plugInAPI getAPIVersion])		ifTrue: [self plugInAPI installPlugIn: self]</body><body package="ADvance2PlugIns">plugInName	^'Coding Assistant'</body><body package="ADvance2PlugIns">plugInOpen	"Open an instance of myself."	self open</body><body package="ADvance2PlugIns">plugInOpenForPainter: aPainter	"Open an instance of myself for aPainter.	If aPainter has one class selected use it as target class."	| selectedClasses |	selectedClasses := aPainter selectedClasses.	selectedClasses size = 1		ifTrue: [self openFor: selectedClasses first domain]		ifFalse: [self plugInOpen]</body><body package="ADvance2PlugIns">plugInShowAboutDialog	self adDialog aboutDialogClass showInfo: self for: nil</body><body package="ADvance2PlugIns">plugInShutdown	"Do nothing."</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>constants</category><body package="ADvance2PlugIns">standardProtocols	^#('accessing' 'actions' 'adding-removing' 'aspects' 'backward compatibility' 'changing' 'comparing' 'converting' 'copying' 'displaying' 'initialize-release' 'interface opening' 'printing' 'private' 'testing' 'updating' '$accessing' '$constants' '$class initialization' '$instance creation' '$interface opening')</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>accessing</category><body package="ADvance2PlugIns">lastClassName	^self mruClasses isEmpty		ifTrue: [nil]		ifFalse: [self mruClasses mostRecentlyUsed]</body><body package="ADvance2PlugIns">lastClassName: aClassName	self mruClasses add: aClassName</body><body package="ADvance2PlugIns">mruClasses	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	MRUClasses isNil ifTrue: [self initializeMRUClasses].	^MRUClasses</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>implementation classes</category><body package="ADvance2PlugIns">definerClass	"Answer the definer class."	^AD2Definer</body><body package="ADvance2PlugIns">plugInAPI	"^&lt;nil | Class&gt; Answer the ADvance plug-in API class or nil if absent."	^(Object includesSelector: #advance)		ifTrue: [(Object perform: #advance) plugInAPI]		ifFalse: [nil]</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>class initialization</category><body package="ADvance2PlugIns">initialize	"self initialize"	self initializeMRUClasses.	self plugInInstall</body><body package="ADvance2PlugIns">obsolete	"This class is being removed from the system. Reset the class variable	and de-install me."	self uninitialize.	super obsolete</body><body package="ADvance2PlugIns">uninitialize	"This class is being removed from the system. Reset the class variable	and de-install me."	MRUClasses := nil.	self plugInAPI isNil ifFalse: [self plugInAPI deinstallPlugIn: self].</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>private initialization</category><body package="ADvance2PlugIns">initializeMRUClasses	MRUClasses := ICC.ADvance.AD2MRUList limit: 10</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>interface opening</category><body package="ADvance2PlugIns">openFor: aClass	"Create a running instance of the application using aClass as target."	self lastClassName: aClass fullName.	^self open</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator</class-id> <category>actions</category><body package="ADvance2PlugIns">clearAll	self classList clearAll</body><body package="ADvance2PlugIns">generateComments	| commentModifications classes classesWithoutComment classesWithComment classesWithConfirmedOverwrite systemOrganization |	systemOrganization := self adBasics systemOrganization.	commentModifications := self computeCommentModifications.	commentModifications isNil ifTrue: [^self].	commentModifications isEmpty ifTrue: [^self adDialog message: 'Nothing to generate.'].	classes := commentModifications keys asOrderedCollection.	classesWithoutComment := classes select: [:each | (systemOrganization commentFor: each) isEmpty].	classesWithComment := classes reject: [:each | (systemOrganization commentFor: each) isEmpty].	classesWithConfirmedOverwrite := self confirmedOverwritesFor: classesWithComment.	classesWithoutComment , classesWithConfirmedOverwrite do: [:each | systemOrganization setComment: (commentModifications at: each)			for: each]</body><body package="ADvance2PlugIns">generateReport	| commentModifications aStream |	commentModifications := self computeCommentModifications.	commentModifications isNil ifTrue: [^self].	commentModifications isEmpty ifTrue: [^self adDialog message: 'Nothing to report.'].	aStream := WriteStream on: (String new: 1000).	commentModifications keysAndValuesDo: [:eachClass :eachComment | aStream			 nextPutAll: '====================================';			 cr;			 nextPutAll: ('Declaration Error Report and comment template for class &lt;1p&gt;:' expandMacrosWith: eachClass printString);			 cr;			 cr;			 nextPutAll: eachComment;			 cr;			 cr].	ComposedTextView		open: aStream contents asValue		label: 'Declaration Error Reports and Comment Templates'		icon: nil		extent: 540 @ 400</body><body package="ADvance2PlugIns">selectAll	self classList selectAll</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator</class-id> <category>changing</category><body package="ADvance2PlugIns">enableButtons	self iccEnable: self classList selections isEmpty not group: #(#generateCommentsButton #generateReportButton)</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator</class-id> <category>private</category><body package="ADvance2PlugIns">computeCommentModifications	"^&lt;nil | (Dictionary key: Class value: String&gt; Check whether classDeclarations is absent.	If so warn and answer nil. Otherwise generate a comment template for each selected	class in the GUI's classList.	Answer a dictionary that maps classes with modified comments to the new comments."	| systemOrganization modifiedComments classDeclarations |	self classDeclarationsIsAbsent		ifTrue:			[self adDialog message: 'This feature requires the ''Advanced Tools'' component!'.			^nil].	systemOrganization := self adBasics systemOrganization.	classDeclarations := self adBasics systemEnvironment at: #{Tools.ClassDeclarations}.	modifiedComments := IdentityDictionary new.	Cursor wait showWhile: [self classList selections			do:				[:each |				| oldComment newComment |				oldComment := systemOrganization commentFor: each.				newComment := (classDeclarations on: each)							formatComment: oldComment.				newComment ~= oldComment ifTrue: [modifiedComments at: each put: newComment]]].	^modifiedComments</body><body package="ADvance2PlugIns">confirmedOverwritesFor: aCollectionOfClasses	^self adDialog		requestSelection: aCollectionOfClasses		dialogBlock: [self adDialog new				 thickMargin;				 title: 'Confirm Comment Replacement';				 infoIcon: (self advance resources opaqueImageAt: #replace)]		selectAllLabel: 'Replace all'		messageBlock: [:each | 'Class &lt;1p&gt; already has a comment.&lt;n&gt;&lt;n&gt;Do you want to replace it?' expandMacrosWith: each printString]</body><body package="ADvance2PlugIns">setWindowLabel	self builder window label: self class plugInName</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator</class-id> <category>aspects</category><body package="ADvance2PlugIns">classList	classList isNil ifTrue: [classList := MultiSelectionInList new].	^classList</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator</class-id> <category>interface opening</category><body package="ADvance2PlugIns">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self classList selectionIndexHolder onChangeSend: #enableButtons to: self.	self enableButtons.	self setWindowLabel</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator</class-id> <category>testing</category><body package="ADvance2PlugIns">classDeclarationsIsAbsent	"Check and answer whether class ClassDeclarations from the Advanced tools product is absent."	| systemEnvironment |	systemEnvironment := self adBasics systemEnvironment.	^#(#ClassDeclarations) contains: [:each | (systemEnvironment includesKey: each) not]</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator class</class-id> <category>plug-in methods</category><body package="ADvance2PlugIns">markedAsADvancePlugIn	"This class provides a plug-in interface for ADvance."</body><body package="ADvance2PlugIns">plugInInstall	(self plugInAPI notNil and: ['*' match: self plugInAPI getAPIVersion])		ifTrue: [self plugInAPI installPlugIn: self]</body><body package="ADvance2PlugIns">plugInName	^'Comment Generator'</body><body package="ADvance2PlugIns">plugInOpen	"Select a subject, then open myself on the selection."	| subject |	(subject := self advance chooseSubjectFor: nil) isNil ifTrue: [^self].	self openOn: subject selection: #()</body><body package="ADvance2PlugIns">plugInOpenForPainter: aPainter	"Open an instance of myself on aPainter's subject."	aPainter hasDomain ifFalse: [^self adDialog message: ('No diagram loaded. Can''t run &lt;1s&gt;.' expandMacrosWith: self plugInName)			for: aPainter window].	self openOn: aPainter model domain selection: (aPainter selectedClasses collect: [:each | each domain])</body><body package="ADvance2PlugIns">plugInShowAboutDialog	self adDialog aboutDialogClass showInfo: self for: nil</body><body package="ADvance2PlugIns">plugInShutdown	"Do nothing."</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator class</class-id> <category>class initialization</category><body package="ADvance2PlugIns">initialize	"self initialize"	self plugInInstall</body><body package="ADvance2PlugIns">obsolete	"This class is being removed from the system. De-install me."	self plugInAPI isNil ifFalse: [self plugInAPI deinstallPlugIn: self].	super obsolete</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator class</class-id> <category>instance creation</category><body package="ADvance2PlugIns">openOn: aSubject selection: aCollectionOfClasses	"Check for existence of class ClassDeclarations. If available invoke it for aSubject's contents and	run all checks."	| subjectClasses anInstance |	subjectClasses := aSubject allClasses asSortedCollection: [:a :b | a name &lt;= b name].	anInstance := self new.	anInstance classList list: subjectClasses; selections: aCollectionOfClasses.	self openOn: anInstance</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator class</class-id> <category>info</category><body package="ADvance2PlugIns">applicationName	^self plugInName</body><body package="ADvance2PlugIns">versionId	^#('7.0' '03/28/02')</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator class</class-id> <category>implementation classes</category><body package="ADvance2PlugIns">plugInAPI	"^&lt;nil | Class&gt; Answer the ADvance plug-in API class or nil if absent."	^(Object includesSelector: #advance)		ifTrue: [(Object perform: #advance) plugInAPI]		ifFalse: [nil]</body></methods><methods><class-id>ICC.ADvance.ADSmalllintConnect</class-id> <category>checking</category><body package="ADvance2PlugIns">openFor: aSubject	"Check for existence of appropriate Smalllint and Environment classes. If available	run checks for aSubject."	self smalllintIsAbsent ifTrue: [^self adDialog message: 'Smalllint classes are absent.\Can''t run checks.' withCRs].	self smalllintHasAppropriateVersion ifFalse: [^self adDialog message: 'The Smalllint version found in the system is incompatible.\Can''t run checks.' withCRs].	self runChecksFor: aSubject</body><body package="ADvance2PlugIns">runChecksFor: aSubject	"Open Smalllint on an environment equal to aSubject's contents and run all checks."	| system testEnvironment |	system := self adBasics systemEnvironment.	testEnvironment := (system at: #'Refactory.Browser.ClassEnvironment')				onEnvironment: (system at: #'Refactory.Browser.BrowserEnvironment') new classes: OrderedCollection new.	aSubject allClassesDo: [:each | testEnvironment addClass: each; addClass: each class].	[(system at: #'Refactory.Browser.Smalllint')		runRule: (system at: #'Refactory.Browser.CompositeLintRule') lintChecks onEnvironment: testEnvironment]		forkAt: Processor userBackgroundPriority</body></methods><methods><class-id>ICC.ADvance.ADSmalllintConnect</class-id> <category>testing</category><body package="ADvance2PlugIns">smalllintHasAppropriateVersion	"Check and answer whether Smalllint has an appropriate version."	^true</body><body package="ADvance2PlugIns">smalllintIsAbsent	"Check and answer whether class Smalllint is absent."	^'Refactory.Browser.Smalllint' asQualifiedReference isDefined not</body></methods><methods><class-id>ICC.ADvance.ADSmalllintConnect class</class-id> <category>plug-in methods</category><body package="ADvance2PlugIns">markedAsADvancePlugIn	"This class provides a plug-in interface for ADvance."</body><body package="ADvance2PlugIns">plugInInstall	(self plugInAPI notNil and: ['*' match: self plugInAPI getAPIVersion])		ifTrue: [self plugInAPI installPlugIn: self]</body><body package="ADvance2PlugIns">plugInName	^'Smalllint Connect'</body><body package="ADvance2PlugIns">plugInOpen	"Select a subject, then open myself on the selection."	| subject |	(subject := self advance chooseSubjectFor: nil) isNil ifTrue: [^self].	self new openFor: subject</body><body package="ADvance2PlugIns">plugInOpenForPainter: aPainter	"Open an instance of myself on aPainter's subject."	aPainter hasDomain ifFalse: [^self adDialog message: ('No diagram loaded. Can''t run &lt;1s&gt;.' expandMacrosWith: self plugInName)			for: aPainter window].	self new openFor: aPainter model domain</body><body package="ADvance2PlugIns">plugInShowAboutDialog	self adDialog aboutDialogClass showInfo: self for: nil</body><body package="ADvance2PlugIns">plugInShutdown	"Do nothing."</body></methods><methods><class-id>ICC.ADvance.ADSmalllintConnect class</class-id> <category>class initialization</category><body package="ADvance2PlugIns">initialize	"self initialize"	self plugInInstall</body><body package="ADvance2PlugIns">obsolete	"This class is being removed from the system. De-install me."	self plugInAPI isNil ifFalse: [self plugInAPI deinstallPlugIn: self].	super obsolete</body></methods><methods><class-id>ICC.ADvance.ADSmalllintConnect class</class-id> <category>implementation classes</category><body package="ADvance2PlugIns">plugInAPI	"^&lt;nil | Class&gt; Answer the ADvance plug-in API class or nil if absent."	^(Object includesSelector: #advance)		ifTrue: [(Object perform: #advance) plugInAPI]		ifFalse: [nil]</body></methods><methods><class-id>ICC.ADvance.ADSmalllintConnect class</class-id> <category>info</category><body package="ADvance2PlugIns">applicationName	^self plugInName</body><body package="ADvance2PlugIns">versionId	^#('7.0' '03/28/02')</body></methods><methods><class-id>ICC.ADvance.AD2Definer</class-id> <category>private-accessing</category><body package="ADvance2PlugIns">registeredJobs	^registeredJobs</body><body package="ADvance2PlugIns">registeredJobs: aValue	registeredJobs := aValue</body></methods><methods><class-id>ICC.ADvance.AD2Definer</class-id> <category>registration/defining</category><body package="ADvance2PlugIns">doDefine	self registeredJobs isEmpty ifTrue: [^self].	Transcript cr; show: 'Access method definition...'.	self definitionJobs do: [:anAssociation | anAssociation key == #read			ifTrue: [self defineReadAccessorFor: anAssociation value]			ifFalse: [self defineWriteAccessorFor: anAssociation value addChangedMessage: anAssociation key == #writeWithChangedMessage]].	Transcript space; show: 'done'</body><body package="ADvance2PlugIns">registerReadDefinitionForAll: aCollectionOfClientRelations	self registeredJobs addAll: (aCollectionOfClientRelations collect: [:each | #read -&gt; each])</body><body package="ADvance2PlugIns">registerWriteDefinitionForAll: aCollectionOfClientRelations addChangedMessage: aBoolean	| jobSymbol |	jobSymbol := aBoolean				ifTrue: [#writeWithChangedMessage]				ifFalse: [#write].	self registeredJobs addAll: (aCollectionOfClientRelations collect: [:each | jobSymbol -&gt; each])</body></methods><methods><class-id>ICC.ADvance.AD2Definer</class-id> <category>initialize-release</category><body package="ADvance2PlugIns">initialize	super initialize.	self registeredJobs: OrderedCollection new</body></methods><methods><class-id>ICC.ADvance.AD2Definer</class-id> <category>private</category><body package="ADvance2PlugIns">confirmedOverwriteJobsFor: overwriteJobs	^self class confirmReplacement		ifTrue: [self adDialog				requestSelection: overwriteJobs				dialogBlock: [(self adDialog new) thickMargin; title: 'Confirm Method Replacement'; infoIcon: (self advance resources opaqueImageAt: #replace)]				selectAllLabel: 'Replace all'				messageBlock: [:assoc | 'The method &lt;1s&gt;%&gt;%&gt;&lt;2s&gt; already exists.&lt;n&gt;&lt;n&gt;Do you want to replace it?' expandMacrosWith: (self targetClassFor: assoc value) name with:(self selectorFor: assoc) asString ]]		ifFalse: [overwriteJobs]</body><body package="ADvance2PlugIns">definitionJobs	| overwriteJobs nonOverwriteJobs confirmedOverwriteJobs |	overwriteJobs := self registeredJobs select: [:each | self selectorExistsFor: each].	nonOverwriteJobs := self registeredJobs asSet - overwriteJobs.	confirmedOverwriteJobs := self confirmedOverwriteJobsFor: overwriteJobs.	^nonOverwriteJobs addAll: confirmedOverwriteJobs; yourself</body><body package="ADvance2PlugIns">selectorExistsFor: anAssociation	"^&lt;Boolean&gt;	anAssociation 	&lt;Association key: Symbol value: ITClientRelation&gt;"	| aClientRelation class selector |	aClientRelation := anAssociation value.	class := self targetClassFor: aClientRelation.	selector := self selectorFor: anAssociation.	^class includesSelector: selector</body><body package="ADvance2PlugIns">selectorFor: anAssociation	"^&lt;Symbol&gt;	anAssociation	&lt;Association key: Symbol value: aClientRelation&gt;"	| selector |	selector := self rawSelectorFor: anAssociation value.	anAssociation key == #read ifFalse: [selector := selector copyWith: $:].	^selector asSymbol</body><body package="ADvance2PlugIns">targetClassFor: aClientRelation	^aClientRelation meta		ifTrue: [self targetClass class]		ifFalse: [self targetClass]</body></methods><methods><class-id>ICC.ADvance.AD2Definer</class-id> <category>utility</category><body package="ADvance2PlugIns">categoryFor: aClientRelation	^aClientRelation isWrapped		ifTrue: [#aspects]		ifFalse: [#accessing]</body><body package="ADvance2PlugIns">rawSelectorFor: aClientRelation	"^&lt;Symbol&gt;"	| selector  |	selector := aClientRelation roleName copy.	(selector at: 1) isUppercase ifTrue: [selector at: 1 put: (selector at: 1) asLowercase].	^selector</body><body package="ADvance2PlugIns">valueStringFor: aClientRelation	| roleClass suffix |	roleClass := aClientRelation roleClass.	suffix := roleClass isNil				ifTrue: ['Value']				ifFalse: [aClientRelation isMultiple						ifTrue: ['Value']						ifFalse: [roleClass name]].	^((suffix at: 1) isVowel		ifTrue: ['an']		ifFalse: ['a'])		, suffix</body></methods><methods><class-id>ICC.ADvance.AD2Definer</class-id> <category>private-defining</category><body package="ADvance2PlugIns">defineReadAccessorFor: aClientRelation	| selector aStream |	aClientRelation hasInheritedImplementation ifTrue: [^self].	selector := (self rawSelectorFor: aClientRelation) asSymbol.	aStream := (String new: 50) writeStream.	aStream nextPutAll: ('&lt;1s&gt;&lt;n&gt;&lt;t&gt;^&lt;2s&gt;' expandMacrosWith: selector with: aClientRelation roleName).	self adBasics systemOrganization		compile: aStream contents		classified: (self categoryFor: aClientRelation)		for: (self targetClassFor: aClientRelation)</body><body package="ADvance2PlugIns">defineWriteAccessorFor: aClientRelation addChangedMessage: aBoolean	| roleName selector valueString aStream |	aClientRelation hasInheritedImplementation | aClientRelation isWrapped ifTrue: [^self].	selector := (self rawSelectorFor: aClientRelation) asSymbol.	valueString := self valueStringFor: aClientRelation.	roleName := aClientRelation roleName.	aStream := (String new: 50) writeStream.	aStream nextPutAll: ('&lt;1s&gt;: &lt;2s&gt;&lt;n&gt;&lt;t&gt;&lt;3s&gt; := &lt;2s&gt;'			expandMacrosWith: selector			with: valueString			with: roleName).	aBoolean ifTrue: [aStream nextPutAll: ('.&lt;n&gt;&lt;t&gt;self changed: #&lt;1s&gt;' expandMacrosWith: roleName)].	self adBasics systemOrganization		compile: aStream contents		classified: (self categoryFor: aClientRelation)		for: (self targetClassFor: aClientRelation)</body></methods><methods><class-id>ICC.ADvance.AD2Definer class</class-id> <category>accessing</category><body package="ADvance2PlugIns">confirmReplacement	^ConfirmReplacement</body><body package="ADvance2PlugIns">confirmReplacement: aBoolean	ConfirmReplacement := aBoolean</body></methods><methods><class-id>ICC.ADvance.AD2Definer class</class-id> <category>class initialization</category><body package="ADvance2PlugIns">initialize	"self initialize"	self confirmReplacement: true</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>resources</category><body package="ADvance2PlugIns">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: ColorValue white; at: 4 put: ColorValue yellow; at: 5 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 6 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6135); yourself)) usingBits: #[17 17 17 17 17 17 17 17 17 0 0 0 17 0 1 17 17 17 17 17 17 0 0 0 16 50 48 17 17 17 17 17 17 0 0 0 16 35 32 65 17 17 17 17 17 0 0 0 16 50 48 65 17 17 17 17 17 0 0 0 16 35 32 65 16 0 0 0 17 0 0 0 17 0 4 65 16 34 34 32 17 0 0 0 17 20 68 17 16 36 68 32 65 0 0 0 17 17 17 17 16 34 34 32 65 0 0 0 17 17 21 17 16 36 68 32 65 0 0 0 17 17 21 81 16 34 34 32 65 0 0 0 17 85 85 85 16 36 68 32 65 0 0 0 17 17 21 81 16 34 34 32 65 0 0 0 17 17 21 17 16 0 0 0 65 0 0 0 17 17 17 17 17 68 68 68 65 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0])</body><body package="ADvance2PlugIns">attributesMenu	"UIMenuEditor new openOnClass: self andSelector: #attributesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all'				#accessCharacterPosition: 1 )			#(#MenuItem				#label: 'Clear all'				#accessCharacterPosition: 1 )			#(#MenuItem				#label: 'Update'				#accessCharacterPosition: 1 ) ) #(2 1 ) #(#selectAllClientRelations #clearAllClientRelations #updateClientRelations ) ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2CodingAssistant class</class-id> <category>interface specs</category><body package="ADvance2PlugIns">attributesSpec	"UIPainter new openOnClass: self andSelector: #attributesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 244 253 )			#max: #(#{Core.Point} 640 480 )			#bounds: #(#{Graphics.Rectangle} 513 355 888 655 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 -82 1 )					#name: #clientRelations					#model: #clientRelations					#menu: #attributesMenu					#multipleSelections: true )				#(#{UI.CheckBoxSpec}					#layout: #(#{UI.AlignmentOrigin} 11 0 -54 1 0 1 )					#model: #defineReadAccessor					#label: 'Define read accessor' )				#(#{UI.CheckBoxSpec}					#layout: #(#{UI.AlignmentOrigin} 11 0 -30 1 0 1 )					#model: #defineWriteAccessor					#label: 'Define write accessor' )				#(#{UI.CheckBoxSpec}					#layout: #(#{UI.AlignmentOrigin} 25 0 -6 1 0 1 )					#name: #addChangedMessage					#model: #addChangedMessage					#label: 'Add changed message' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -105 1 -33 1 -10 1 -10 1 )					#name: #defineAccessors					#model: #defineAccessors					#label: 'Define' ) ) ) )</body><body package="ADvance2PlugIns">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Assistant'			#min: #(#{Core.Point} 325 218 )			#max: #(#{Core.Point} 390 381 )			#bounds: #(#{Graphics.Rectangle} 526 266 916 647 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -227 1 -30 1 -119 1 -7 1 )					#model: #chooseClass					#label: 'Pick class...' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -113 1 -30 1 -6 1 -7 1 )					#model: #closeRequest					#label: 'Close' )				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#labels: #() ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator class</class-id> <category>resources</category><body package="ADvance2PlugIns">classListMenu	"MenuEditor new openOnClass: self andSelector: #classListMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAll )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAll )			#(#MenuItem				#rawLabel: 'Generate...'				#value: #generateComments )			#(#MenuItem				#rawLabel: 'Report...'				#value: #generateReport ) ) #(2 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2CommentGenerator class</class-id> <category>interface specs</category><body package="ADvance2PlugIns">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: ' '			#min: #(#Point 40 20 )			#bounds: #(#Rectangle 178 179 474 491 ) )		#component:		#(#SpecCollection			#collection: #(				#(#ActionButtonSpec					#layout: #(#LayoutFrame -227 1 -30 1 -119 1 -7 1 )					#name: #generateCommentsButton					#model: #generateComments					#label: 'Generate...' )				#(#ActionButtonSpec					#layout: #(#LayoutFrame -113 1 -30 1 -6 1 -7 1 )					#name: #generateReportButton					#model: #generateReport					#label: 'Report...' )				#(#SequenceViewSpec					#layout: #(#LayoutFrame 6 0 28 0 -6 1 -40 1 )					#model: #classList					#menu: #classListMenu					#multipleSelections: true					#useModifierKeys: true					#selectionType: #checkMark )				#(#LabelSpec					#layout: #(#Point 6 4 )					#label: 'Classes:' ) ) ) )</body></methods><initialize><class-id>ICC.ADvance.AD2CodingAssistant</class-id></initialize><initialize><class-id>ICC.ADvance.AD2CommentGenerator</class-id></initialize><initialize><class-id>ICC.ADvance.ADSmalllintConnect</class-id></initialize><initialize><class-id>ICC.ADvance.AD2Definer</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>UIDefiner</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aClass initializeModels excludedBindings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Support</category><attributes><package>UIPainter</package></attributes></class><class><name>ICC1ApplicationModel</name><environment>ICC</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class></st-source>