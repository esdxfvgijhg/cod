<?xml version="1.0"?><st-source><!-- Name: ICCLookExtensionsComment: Copyright ©1997-2008 by IC&C GmbH, Software Foundations.All rights reserved.DbIdentifier: bear73DbTrace: 292370DbUsername: iccdevDbVersion: 7.6_01DevelopmentPrerequisites: #(#(#package 'ICCResources' '7.6_01'))PackageName: ICCLookExtensionsParcel: #('ICCLookExtensions')ParcelName: ICCLookExtensionsPrerequisiteParcels: #(#('ICCResources' '7.6_01'))PrintStringCache: (7.6_01,iccdev)Version: 7.6_01VersionDate: 02/28/2008Pre-Unload Block: 	[ :pkg |	ICC.ICC1LabeledCheckButtonSpec preUnloadActionFor: nil]Date: 5:08:51 PM May 26, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:08:51 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ICC1LabeledRadioButtonSpec</name><environment>ICC</environment><super>UI.RadioButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCLookExtensions</package></attributes></class><comment><class-id>ICC.ICC1LabeledRadioButtonSpec</class-id><body>This subclass of CheckBoxSpec is used for building labeled tool bar radio buttons, i.e. labeled action buttons with radio button behavior.</body></comment><class><name>ICC1LabeledCheckButtonSpec</name><environment>ICC</environment><super>UI.CheckBoxSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCLookExtensions</package></attributes></class><comment><class-id>ICC.ICC1LabeledCheckButtonSpec</class-id><body>This subclass of CheckBoxSpec is used for building tool bar check buttons, i.e. labeled buttons with check box behavior.</body></comment><class><name>ICC1ProgressBarSpec</name><environment>ICC</environment><super>UI.SliderSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>displayMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCLookExtensions</package></attributes></class><comment><class-id>ICC.ICC1ProgressBarSpec</class-id><body>Instances of this class describe the properties and appearance of a ICC1ProgressBarView, useful for showing progress during actions. To the properties inherited from WidgetSpec, this class adds a start and stop value. The expected model of a ProgressBarSpec is a ValueModel with a numeric value, either a Float or an Integer (the types of the start and stop properties should match the type of the model's value).@See RangeAdaptor, WidgetSpec, NamedSpec, ComponentSpec, ICC1ProgressBarView.Instance Variables:	displayMode &lt;Symbol | nil&gt;		Sets the displayMode of my associated view. If undefinded, a LookPolicy		dependent default is used. @See ICC1ProgressBarView for available modes.</body></comment><class><name>ICC1StatusFieldSpec</name><environment>ICC</environment><super>UI.InputFieldSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCLookExtensions</package></attributes></class><comment><class-id>ICC.ICC1StatusFieldSpec</class-id><body>Instances of this class describe the properties and appearance of an IC&amp;C StatusField.For now, it doesn't add properties to that inherited from InputFieldlSpec but unlike its superclass. it will build a statusField during the interface building process.</body></comment><class><name>ICC1ProgressBarView</name><environment>ICC</environment><super>UI.SimpleView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rangeMap percentage displayMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCLookExtensions</package></attributes></class><comment><class-id>ICC.ICC1ProgressBarView</class-id><body>This class is the view class for the IC&amp;C ProgressBar widget.Instance Variables:	rangeMap &lt;RangeMap&gt;	percentage &lt;Number&gt;	displayMode &lt;#bar | #boxes&gt; Decides whether a sliding bar or boxes should be displayed.</body></comment><class><name>ICC1SimpleBorder</name><environment>ICC</environment><super>UI.SimpleBorder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCLookExtensions</package></attributes></class><comment><class-id>ICC.ICC1SimpleBorder</class-id><body>This simple border draws a rectangular border of thickness 1 with an 'inset' look. It is used as default border for the IC&amp;C ProgressBar and IC&amp;C StatusField in non-Windows LookPolicies.</body></comment><methods><class-id>ICC.ICC1LabeledRadioButtonSpec</class-id> <category>private</category><body package="ICCLookExtensions">dispatchTo: policy with: builder	policy iccLabeledRadioButton: self into: builder</body></methods><methods><class-id>ICC.ICC1LabeledRadioButtonSpec class</class-id> <category>class initialization</category><body package="ICCLookExtensions">obsolete	"This class is being removed from the system. Deinstall me."	self deInstall.	super obsolete</body></methods><methods><class-id>ICC.ICC1LabeledRadioButtonSpec class</class-id> <category>installation</category><body package="ICCLookExtensions">deInstall	"self deInstall"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	uiPaletteClass activeSpecsList remove: self name ifAbsent: []</body><body package="ICCLookExtensions">install	"self install"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	(uiPaletteClass activeSpecsList includes: self name)		ifFalse: [uiPaletteClass activeSpecsList add: self name]</body></methods><methods><class-id>ICC.ICC1LabeledRadioButtonSpec class</class-id> <category>load-unload</category><body package="ICCLookExtensions">postLoad: aParcel	self install</body></methods><methods><class-id>ICC.ICC1LabeledRadioButtonSpec class</class-id> <category>private-interface building</category><body package="ICCLookExtensions">componentName	"Identification of component"	^'Lbld. Radio Button'</body><body package="ICCLookExtensions">specGenerationBlock	^[:ctrlr :point | self		model: nil		label: 'Radio'		layout: (ctrlr gridPoint: point)]</body></methods><methods><class-id>ICC.ICC1LabeledCheckButtonSpec</class-id> <category>private</category><body package="ICCLookExtensions">dispatchTo: policy with: builder	policy iccLabeledCheckButton: self into: builder</body></methods><methods><class-id>ICC.ICC1LabeledCheckButtonSpec class</class-id> <category>load-unload</category><body package="ICCLookExtensions">postLoad: aParcel	self install</body><body package="ICCLookExtensions">preUnloadActionFor: aParcel	"This is called when package or parcel becomes unloaded."	ICC1LabeledCheckButtonSpec deInstall.	ICC1LabeledRadioButtonSpec deInstall.	ICC1ProgressBarSpec deInstall.	ICC1StatusFieldSpec deInstall</body></methods><methods><class-id>ICC.ICC1LabeledCheckButtonSpec class</class-id> <category>private-interface building</category><body package="ICCLookExtensions">componentName	"Identification of component"	^'Lbld. Check Button'</body><body package="ICCLookExtensions">specGenerationBlock	^[:ctrlr :point | self		model: nil		label: 'Check'		layout: (ctrlr gridPoint: point)]</body></methods><methods><class-id>ICC.ICC1LabeledCheckButtonSpec class</class-id> <category>installation</category><body package="ICCLookExtensions">deInstall	"self deInstall"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	uiPaletteClass activeSpecsList remove: self name ifAbsent: []</body><body package="ICCLookExtensions">install	"self install"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	(uiPaletteClass activeSpecsList includes: self name)		ifFalse: [uiPaletteClass activeSpecsList add: self name]</body></methods><methods><class-id>ICC.ICC1LabeledCheckButtonSpec class</class-id> <category>class initialization</category><body package="ICCLookExtensions">obsolete	"This class is being removed from the system. Deinstall me."	self deInstall.	super obsolete</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec</class-id> <category>private</category><body package="ICCLookExtensions">dispatchTo: policy with: builder	policy iccProgressBar: self into: builder</body><body package="ICCLookExtensions">startValidates	^self stop isNil or: [self start &lt; self stop]</body><body package="ICCLookExtensions">startWarningString	^Core.String new , 'Start must be less than Stop'</body><body package="ICCLookExtensions">stopValidates	^self start isNil or: [self start &lt; self stop]</body><body package="ICCLookExtensions">stopWarningString	^Core.String new , 'Stop must be greater than Start'</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec</class-id> <category>accessing</category><body package="ICCLookExtensions">displayMode	^displayMode</body><body package="ICCLookExtensions">displayMode: aSymbol	displayMode := aSymbol</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec class</class-id> <category>private-interface building</category><body package="ICCLookExtensions">addBindingsTo: env for: inst channel: aChannel	| strt stp |	super		addBindingsTo: env		for: inst		channel: aChannel.	env at: #start put: (strt := (UI.TypeConverter on: (self						adapt: inst						forAspect: #start						channel: aChannel)) numberOrNil).	env at: #stop put: (stp := (UI.TypeConverter on: (self						adapt: inst						forAspect: #stop						channel: aChannel)) numberOrNil).	strt compute: [:v | (v isEmpty not and: [aChannel value startValidates not])			ifTrue:				[UI.Dialog warn: aChannel value startWarningString.				strt value: '']].	stp compute: [:v | (v isEmpty not and: [aChannel value stopValidates not])			ifTrue:				[UI.Dialog warn: aChannel value stopWarningString.				stp value: '']]</body><body package="ICCLookExtensions">componentName	"Identification of component"	^'Progress Indicator'</body><body package="ICCLookExtensions">specGenerationBlock	^[:ctrlr :point | ICC1ProgressBarSpec model: nil layout: ((ctrlr gridPoint: point)			extent: (ctrlr currentMode value class placementExtentFor: ICC1ProgressBarSpec inBuilder: ctrlr builder))]</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec class</class-id> <category>class initialization</category><body package="ICCLookExtensions">obsolete	"This class is being removed from the system. Deinstall me."	self deInstall.	super obsolete</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec class</class-id> <category>installation</category><body package="ICCLookExtensions">deInstall	"self deInstall"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	uiPaletteClass activeSpecsList remove: self name ifAbsent: []</body><body package="ICCLookExtensions">install	"self install"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	(uiPaletteClass activeSpecsList includes: self name)		ifFalse: [uiPaletteClass activeSpecsList add: self name]</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec class</class-id> <category>load-unload</category><body package="ICCLookExtensions">postLoad: aParcel	self install</body></methods><methods><class-id>ICC.ICC1StatusFieldSpec</class-id> <category>private</category><body package="ICCLookExtensions">dispatchTo: policy with: builder	policy iccStatusField: self into: builder</body></methods><methods><class-id>ICC.ICC1StatusFieldSpec class</class-id> <category>load-unload</category><body package="ICCLookExtensions">postLoad: aParcel	self install</body></methods><methods><class-id>ICC.ICC1StatusFieldSpec class</class-id> <category>installation</category><body package="ICCLookExtensions">deInstall	"self deInstall"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	uiPaletteClass activeSpecsList remove: self name ifAbsent: []</body><body package="ICCLookExtensions">install	"self install"	| uiPaletteClass |	uiPaletteClass := #{UI.UIPalette} valueOrDo: [^self].	(uiPaletteClass activeSpecsList includes: self name)		ifFalse: [uiPaletteClass activeSpecsList add: self name]</body></methods><methods><class-id>ICC.ICC1StatusFieldSpec class</class-id> <category>private-interface building</category><body package="ICCLookExtensions">componentName	"Identification of component"	^'Status Field'</body></methods><methods><class-id>ICC.ICC1StatusFieldSpec class</class-id> <category>class initialization</category><body package="ICCLookExtensions">obsolete	"This class is being removed from the system. Deinstall me."	self deInstall.	super obsolete</body></methods><methods><class-id>ICC.ICC1ProgressBarView</class-id> <category>accessing</category><body package="ICCLookExtensions">displayMode	^displayMode</body><body package="ICCLookExtensions">displayMode: aSymbol	displayMode := aSymbol</body><body package="ICCLookExtensions">percentage	percentage isNil ifTrue: [percentage := self computePercentage].	^percentage</body><body package="ICCLookExtensions">rangeMap	^rangeMap</body><body package="ICCLookExtensions">rangeMap: aRangeMap	rangeMap := aRangeMap</body></methods><methods><class-id>ICC.ICC1ProgressBarView</class-id> <category>private</category><body package="ICCLookExtensions">computePercentage	^rangeMap isNil		ifTrue: [model value]		ifFalse: [rangeMap map: model value]</body><body package="ICCLookExtensions">percentageText	^Graphics.ComposedText withText: (self percentage * 100) rounded printString , ' %'</body></methods><methods><class-id>ICC.ICC1ProgressBarView</class-id> <category>updating</category><body package="ICCLookExtensions">update: anAspectSymbol with: aParameter from: aSender	"Propagate damage if the receiver's percentage has actually changed."	| oldPercentage |	oldPercentage := self percentage.	percentage := self computePercentage.	oldPercentage ~= percentage ifTrue: [self simpleRedisplayIn: self bounds colorBackgroundIfNeeded: false]</body></methods><methods><class-id>ICC.ICC1ProgressBarView</class-id> <category>displaying</category><body package="ICCLookExtensions">displayBarOn: aGraphicsContext	| b progressInPixels filledRectangle emptyRectangle percentageText strLenX strLenY strLenX100 textPosition |	b := self bounds.	progressInPixels := b extent x * self percentage.	filledRectangle := Graphics.Rectangle origin: 0 @ 0 extent: progressInPixels rounded @ b extent y.	emptyRectangle := Graphics.Rectangle origin: filledRectangle topRight corner: b corner.	percentageText := self percentageText.	strLenX := percentageText width.	strLenY := percentageText height.	strLenX100 := aGraphicsContext widthOfString: '100 %'.	textPosition := (b extent x + strLenX100 / 2 - strLenX) rounded @ (b extent y - strLenY / 2) rounded.	aGraphicsContext		paint: self selectionBackgroundColor;		clippingRectangle: filledRectangle;		displayRectangle: filledRectangle;		paint: self selectionForegroundColor.	percentageText displayOn: aGraphicsContext at: textPosition.	aGraphicsContext		paint: self selectionForegroundColor;		clippingRectangle: emptyRectangle;		displayRectangle: emptyRectangle;		paint: self selectionBackgroundColor.	percentageText displayOn: aGraphicsContext at: textPosition</body><body package="ICCLookExtensions">displayBoxesOn: aGC	| myBounds progressRectangle progressBoxExtent numOfBoxes |	myBounds := self bounds.	progressBoxExtent := (8 max: myBounds height * 2 // 3)				@ myBounds height.	numOfBoxes := myBounds extent x * self percentage // progressBoxExtent x.	aGC paint: self selectionBackgroundColor.	progressRectangle := (Graphics.Rectangle origin: 0 @ 0 extent: progressBoxExtent)				insetBy: 1.	0 to: numOfBoxes - 1 do: [:n | aGC displayRectangle: progressRectangle at: n * progressBoxExtent x @ 0].	aGC paint: self backgroundColor.	aGC displayRectangle: (Graphics.Rectangle origin: numOfBoxes * progressBoxExtent x @ 0 corner: myBounds corner)</body><body package="ICCLookExtensions">displayOn: aGraphicsContext	self displayMode == #boxes		ifTrue: [self displayBoxesOn: aGraphicsContext]		ifFalse: [self displayBarOn: aGraphicsContext]</body></methods><methods><class-id>ICC.ICC1SimpleBorder</class-id> <category>displaying</category><body package="ICCLookExtensions">displayOn: aGraphicsContext forDisplayBox: aRect using: colorSource	"Display the receiver's borders in the specified display box. If colorSource	is non-nil, it may be consulted for the values of the border colors using LookPreferences	accessing protocol (#hiliteColor, #shadowColor, etc.).	Be sure not to permanently side-effect the supplied GraphicsContext."	self		displayFrameOn: aGraphicsContext		in: aRect		paint1: (colorSource isNil				ifTrue: [Graphics.SymbolicPaint shadow]				ifFalse: [colorSource shadowColor])		paint2: (colorSource isNil				ifTrue: [Graphics.SymbolicPaint hilite]				ifFalse: [colorSource hiliteColor])</body></methods><methods><class-id>ICC.ICC1SimpleBorder</class-id> <category>private-displaying</category><body package="ICCLookExtensions">displayFrameOn: aGraphicsContext in: aRectangle paint1: paint1 paint2: paint2	"Display a frame in aRectangle using paint1 for left and top and paint2 for bottom and right."	| r oldPaint |	oldPaint := aGraphicsContext paint.	r := aRectangle copy.	r right: r left + 1; bottom: r bottom - 1.	aGraphicsContext paint: paint1; displayRectangle: r.	r right: aRectangle right - 1; bottom: r top + 1.	aGraphicsContext displayRectangle: r.	r right: aRectangle right; top: aRectangle bottom - 1; bottom: aRectangle bottom.	aGraphicsContext paint: paint2; displayRectangle: r.	r left: aRectangle right - 1; top: aRectangle top; bottom: aRectangle bottom - 1.	aGraphicsContext displayRectangle: r.	aGraphicsContext paint: oldPaint</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>ICC-Look extensions</category><body package="ICCLookExtensions">iccLabeledCheckButton: spec into: builder	| component model |	model := spec modelInBuilder: builder.	component := (self iccLabeledCheckButtonClass model: model) helpText: spec helpText; yourself.	self		setTheLabelFor: spec		component: component		in: builder.	component hasBorder: false.	component controller: component defaultControllerClass new.	builder component: component.	self		setDispatcherOf: component		fromSpec: spec		builder: builder.	spec tabable		ifTrue:			[component widgetState isTabStop: true.			builder sendKeyboardTo: component].	component widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	builder wrapWith: (self simpleWrapperFor: spec).	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body><body package="ICCLookExtensions">iccLabeledCheckButtonClass	^self toolBarClass new toolbarButtonViewClass</body><body package="ICCLookExtensions">iccLabeledRadioButton: spec into: builder	| component model referenceValue |	model := spec modelInBuilder: builder.	component := self iccLabeledRadioButtonClass model: model.	self		setTheLabelFor: spec		component: component		in: builder.	self setHelpTextFor: spec component:component in: builder.	(referenceValue := spec select) == nil ifFalse: [component setReferenceValue: referenceValue].	component controller: ToggleButtonController new.	builder component: component.	self		setDispatcherOf: component		fromSpec: spec		builder: builder.	spec tabable		ifTrue:			[component widgetState isTabStop: true.			builder sendKeyboardTo: component].	component widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	builder wrapWith: (self simpleWrapperFor: spec).	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body><body package="ICCLookExtensions">iccLabeledRadioButtonClass	^self iccLabeledCheckButtonClass</body><body package="ICCLookExtensions">iccProgressBar: spec into: builder	| component model |	model := spec modelInBuilder: builder.	component := (ICC.ICC1ProgressBarView new) model: model; rangeMap: spec rangeMap.	component displayMode: (spec displayMode isNil			ifTrue: [self iccProgressBarDefaultDisplayMode]			ifFalse: [spec displayMode]).	component widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	builder component: component.	self		setDispatcherOf: component		fromSpec: spec		builder: builder.	spec decorationType == #bordered		ifTrue:			[builder wrapWith: self borderedWrapperClass new.			builder wrapper inset: 0.			builder wrapper border: self iccProgressBarBorder]		ifFalse: [builder wrapWith: self boundedWrapperClass new].	component widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body><body package="ICCLookExtensions">iccProgressBarBorder	^ICC.ICC1SimpleBorder new</body><body package="ICCLookExtensions">iccProgressBarDefaultDisplayMode	^#bar</body><body package="ICCLookExtensions">iccStatusField: spec into: builder	| component model menu performer alignment |	model := spec modelInBuilder: builder.	component := self inputBoxClass new.	component converter: (spec converterWith: builder).	spec type == #password ifTrue: [component displayContents passwordChar: $*].	component model: model.	self setStyleOf: component to: spec style.	component controller: self inputBoxControllerClass new.	(menu := spec getMenuIn: builder) == nil ifFalse: [component controller menuHolder: menu].	(performer := spec getPerformerIn: builder) == nil ifFalse: [component controller performer: performer].	builder component: component.	component displaySelection: false.	self		setDispatcherOf: component		fromSpec: spec		builder: builder.	component widgetState canTakeFocus: true.	component controller keyboardProcessor: builder keyboardProcessor.	builder component controller dispatchOn: Character cr to: #acceptKey:.	component controller readOnly: true.	spec numChars == nil ifFalse: [component controller maxChars: spec numChars].	(alignment := spec alignment) == #left ifFalse: [self setAlignmentOf: component displayContents to: alignment].	builder wrapWith: ScrollWrapper new.	builder wrapWith: self borderedWrapperClass new.	builder wrapper inset: 0.	builder wrapper border: self iccStatusFieldBorder.	component widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body><body package="ICCLookExtensions">iccStatusFieldBorder	^ICC.ICC1SimpleBorder new</body><body package="ICCLookExtensions">iccToolbarButton: spec into: builder 	"Same as acctionButton:into: except the actionButtonClass is substituted by toolbarButtonViewClass." 	| component model |	model := spec modelInBuilder: builder.	spec isDecorated 		ifTrue: [component := self toolBarClass new toolbarButtonViewClass model: model]		ifFalse: [component := self undecoratedActionButtonClass model: model].	self		setTheLabelFor: spec component: component in: builder;		setHelpTextFor: spec component: component in: builder.	component controller: component defaultControllerClass new.	self setDispatcherOf: component fromSpec: spec builder: builder.	spec tabable ifTrue: 			[component widgetState isTabStop: true.			builder sendKeyboardTo: component].	spec defaultable ifTrue: [component canDefault: true].	spec isDefault ifTrue: 			[component beDefault.			builder defaultAction: component].	component isEnabled: spec initiallyEnabled.	component hasBorder: false.	builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	builder component: component.	builder wrapWith: (self simpleWrapperFor: spec).	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="ICCLookExtensions">inputBoxControllerClass		^UI.InputBoxController</body></methods><methods><class-id>ICC.ICC1LabeledRadioButtonSpec class</class-id> <category>resources</category><body package="ICCLookExtensions">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 6553 scaledBlue: 6553); at: 3 put: (Graphics.ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 0 scaledBlue: 0); at: 6 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4112); yourself)) usingBits: (Core.ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@L3L3L3L3L3L3L3L2@@@@@CDQDQDQDQDQDQDQD @@@@@1DQDQDQDQDQDQDQH@@@@@LQDQDQDQDQDQDQDR@@@@@CDQL3L3L3L3L3LAD @@@@@1DSDQDQDQDQDQ@QH@@@@@LQD1D@@QDQDQDPDR@@@@@CDQLPQD@QDQDQDAD @@@@@1DSDDQ@DSL3D1@QH@@@@@LQD1ADPAEUUQTPDR@@@@@CDQLQ@@DQDQDQDAD @@@@@1DSDQDQDQDQDQ@QH@@@@@LQD1D@@QDQDQDPDR@@@@@CDQLPL3@QDQDQDAD @@@@@1DSDCL0DSL3D1@QH@@@@@LQD1@3LAEUUQTPDR@@@@@CDQLQ@@DQDQDQDAD @@@@@1DSDQDQDQDQDQ@QH@@@@@LQD0@@@@@@@@@@DR@@@@@CDQDQDQDQDQDQDQD @@@@@1DQDQDQDQDQDQDQH@@@@@LQDQDQDQDQDQDQDR@@@@@CDQDQDQDQDQDQDQD @@@@@"H"H"H"H"H"H"H"H@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="ICCLookExtensions">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: Graphics.CoveragePalette monoMaskPalette usingBits: #[255 255 255 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 135 255 252 192 132 0 4 192 132 224 4 192 133 240 4 192 133 243 212 192 133 243 212 192 132 224 4 192 132 0 4 192 132 224 4 192 133 16 4 192 133 19 212 192 133 19 212 192 132 224 4 192 132 0 4 192 135 255 252 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 255 255 255 192 255 255 255 192])</body></methods><methods><class-id>ICC.ICC1LabeledCheckButtonSpec class</class-id> <category>resources</category><body package="ICCLookExtensions">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3699 scaledBlue: 3699); at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 6605); at: 5 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: (Core.ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H!@@@@@BL3L3L3L3L3L3L3LP@@@@@#L3L3L3L3L3L3L3D@@@@@H3L3L3L3L3L3L3L1@@@@@BL3H"H"H"H"H"HCLP@@@@@#L2L3L3L3L3L3@3D@@@@@H3L#L3L3L3L3L0L1@@@@@BL3H3L@@@@@@3LCLP@@@@@#L2L3@"H"H L3@3D@@@@@H3L#L0IBH$HCL0L1@@@@@BL3H3LBQBQB@3LCLP@@@@@#L2L3@"QDH L3@3D@@@@@H3L#L0IDIDHCL0L1@@@@@BL3H3LBP"IB@3LCLP@@@@@#L2L3@"H"H L3@3D@@@@@H3L#L0@@@@@CL0L1@@@@@BL3H3L3L3L3L3LCLP@@@@@#L2L3L3L3L3L3@3D@@@@@H3L @@@@@@@@@@L1@@@@@BL3L3L3L3L3L3L3LP@@@@@#L3L3L3L3L3L3L3D@@@@@H3L3L3L3L3L3L3L1@@@@@BL3L3L3L3L3L3L3LP@@@@@QDQDQDQDQDQDQDQD@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="ICCLookExtensions">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: Graphics.CoveragePalette monoMaskPalette usingBits: #[255 255 255 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 135 255 252 192 132 0 4 192 132 127 196 192 132 64 68 192 132 81 68 192 132 91 68 192 132 78 68 192 132 91 68 192 132 81 68 192 132 64 68 192 132 127 196 192 132 0 4 192 135 255 252 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 255 255 255 192 255 255 255 192])</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec class</class-id> <category>interface specs</category><body package="ICCLookExtensions">basicsEditSpec	"UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: ' '			#min: #(#Point 300 243 )			#max: #(#Point 300 243 )			#bounds: #(#Rectangle 213 189 513 432 ) )		#component:		#(#SpecCollection			#collection: #(				#(#LabelSpec					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 )					#label: 'Progress Indicator' )				#(#LabelSpec					#layout: #(#AlignmentOrigin 10 0 55 0 0 1 )					#label: 'Aspect:' )				#(#LabelSpec					#layout: #(#AlignmentOrigin 10 0 149 0 0 1 )					#label: 'Stop:' )				#(#LabelSpec					#layout: #(#AlignmentOrigin 10 0 87 0 0 1 )					#label: 'ID:' )				#(#LabelSpec					#layout: #(#AlignmentOrigin 10 0 117 0 0 1 )					#label: 'Start:' )				#(#InputFieldSpec					#layout: #(#LayoutFrame 86 0 28 0 -10 1 53 0 )					#model: #model					#menu: #fieldMenu )				#(#InputFieldSpec					#layout: #(#LayoutFrame 86 0 60 0 -10 1 85 0 )					#model: #name					#menu: #fieldMenu )				#(#InputFieldSpec					#layout: #(#Rectangle 86 90 176 115 )					#model: #start					#menu: #fieldMenu )				#(#InputFieldSpec					#layout: #(#Rectangle 86 122 176 147 )					#model: #stop					#menu: #fieldMenu ) ) ) )</body><body package="ICCLookExtensions">detailsEditSpec	"UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: ' '			#min: #(#Point 245 233 )			#max: #(#Point 300 243 )			#bounds: #(#Rectangle 258 204 558 447 ) )		#component:		#(#SpecCollection			#collection: #(				#(#CheckBoxSpec					#layout: #(#Point 10 30 )					#model: #initiallyDisabled					#label: 'Initially Disabled' )				#(#CheckBoxSpec					#layout: #(#Point 10 50 )					#model: #initiallyInvisible					#label: 'Initially Invisible' )				#(#LabelSpec					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 )					#label: #componentName ) ) ) )</body></methods><methods><class-id>ICC.ICC1ProgressBarSpec class</class-id> <category>resources</category><body package="ICCLookExtensions">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 6553 scaledBlue: 6553); at: 3 put: (Graphics.ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 6 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4112); yourself)) usingBits: (Core.ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@L3L3L3L3L3L3L3L2@@@@@CDQDQDQDQDQDQDQD @@@@@1DQDQDQDQDQDQDQH@@@@@LQDQDQDQDQDQDQDR@@@@@CDQDQDQDQDQDQDQD @@@@@1DQDQDQDQDQDQDQH@@@@@LQDQDQDQDQDQDQDR@@@@@CD@@@@@@@@@@@@@D @@@@@1ADQDQDQDQDQDPAH@@@@@LPQUUUUUUUDQDS@R@@@@@CDDUUUUUUUQDQD0D @@@@@1AEUUUUUUTQDQLAH@@@@@LPQUUUUUUUDQDS@R@@@@@CDDL3L3L3L3L3L0D @@@@@1@@@@@@@@@@@@@AH@@@@@LQDQDQDQDQDQDQDR@@@@@CDQDQDQDQDQDQDQD @@@@@1DQDQDQDQDQDQDQH@@@@@LQDQDQDQDQDQDQDR@@@@@CDQDQDQDQDQDQDQD @@@@@1DQDQDQDQDQDQDQH@@@@@LQDQDQDQDQDQDQDR@@@@@CDQDQDQDQDQDQDQD @@@@@"H"H"H"H"H"H"H"H@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="ICCLookExtensions">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: Graphics.CoveragePalette monoMaskPalette usingBits: #[255 255 255 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 159 255 254 192 144 0 2 192 149 85 2 192 146 170 2 192 149 85 2 192 146 170 2 192 144 0 2 192 159 255 254 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 255 255 255 192 255 255 255 192])</body></methods><methods><class-id>ICC.ICC1StatusFieldSpec class</class-id> <category>resources</category><body package="ICCLookExtensions">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 6605); at: 5 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 3699 scaledBlue: 3699); at: 6 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (Core.ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H$@@@@@BL3L3L3L3L3L3L3M@@@@@@#L3L3L3L3L3L3L3P@@@@@H3L3L3L3L3L3L3L4@@@@@BL3L3L3L3L3L3L3M@@@@@@#L3L3L3L3L3L3L3P@@@@@H3L3L3L3L3L3L3L4@@@@@BL3L3L3L3L3L3L3M@@@@@@#MUUUUUUUUUUUH3P@@@@@H3TQDQDQDQDQDRL4@@@@@BL5DQDPDQDQDQD#M@@@@@@#MQ@@D@@P@QDQH3P@@@@@H3TPDA@PDADQDRL4@@@@@BL5D@@P@A@ADQD#M@@@@@@#MQDQDQDQDQDQH3P@@@@@H3TQDQDQDQDQDRL4@@@@@BL2H"H"H"H"H"H#M@@@@@@#L3L3L3L3L3L3L3P@@@@@H3L3L3L3L3L3L3L4@@@@@BL3L3L3L3L3L3L3M@@@@@@#L3L3L3L3L3L3L3P@@@@@H3L3L3L3L3L3L3L4@@@@@BL3L3L3L3L3L3L3M@@@@@ADQDQDQDQDQDQDQDP@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="ICCLookExtensions">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^Graphics.CachedImage on: (Graphics.Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: Graphics.CoveragePalette monoMaskPalette usingBits: #[255 255 255 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 143 255 248 192 136 0 4 192 136 32 0 192 139 187 4 192 138 170 0 192 139 187 4 192 136 0 0 192 136 0 4 192 138 170 168 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 255 255 255 192 255 255 255 192])</body></methods><methods><class-id>UI.UILookPolicy class</class-id> <category>ICC-Look extensions</category><body package="ICCLookExtensions">iccAlertIcon	"UIMaskEditor new openOnClass: self andSelector: #iccAlertIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@32 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: (ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: ColorValue black; at: 3 put: ColorValue red; yourself)) usingBits: (ByteArray fromPackedString: '@@@UUUUT@@@@@F****$@@@@A*****$@@@@Z*UUV*$@@@F*)UUZ*$@@A**%UU**$@@Z**UUV**$@F**)UUZ**$A***%UU***$Z***UUV***%***)UUZ***V***%UU***)Z***UUV***%***)UUZ***V***%UU***)Z***UUV***%***)UUZ***V***%UU***)Z***UUV***%***)UUZ***V***%UU***)Z*********%****)Z****Q***)UV***$A***%UZ**)@A**)UUZ**P@A**%UU**$@@A**%UZ*)@@@A**UV**P@@@A**%**$@@@@A****)@@@@@AUUUUP@@@@a'))</body><body package="ICCLookExtensions">iccConfirmIcon	"UIMaskEditor new openOnClass: self andSelector: #iccConfirmIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@32 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: (ColorValue scaledRed: 0 scaledGreen: 4915 scaledBlue: 0); at: 3 put: ColorValue lightGray; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '@@@@EUP@@@@@@@UUUU@@@@@@UUUUUP@@@@UUUUUUT@@@EUUUUUUT@@AUUUUUUUT@@UUU[?9UUT@AUUW??=UUP@UUU???=UUPAUU[&gt;U/9UU@UUU?5U?5UUAUUW?UW?UUTEUU_=U_=UUQUUUUUV?5UUUUUUUU/&gt;UUUUUUUU[?%UUUUUUUV?9UUUUUUUU/&gt;UUUUUUUUW?%UUUTUUUU_=UUUUAUUUU?5UUUTEUUUUUUUUUPEUUUUUUUUT@UUUU/%UUUP@UUUW?UUUT@AUUU[9UUUP@AUUUUUUUT@@AUUUUUUU@@@AUUUUUUP@@@@UUUUUP@@@@@EUUUP@@@@@@@UU@@@@@@a'))</body><body package="ICCLookExtensions">iccMessageIcon	"UIMaskEditor new openOnClass: self andSelector: #iccMessageIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@32 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: ColorValue black; at: 3 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4112); at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '@@@@UUT@@@@@@AV**%P@@@@AZ*?:*T@@@@Z*/?:*$@@@F*+??:*$@@A**/??**$@@Z**??&gt;**$@F***??***$@Z***?:***PF*********PZ********)A***???***$Z**+??&gt;***%****/?:***V****??***)Z***+?&gt;***%****/?:***V****??***)Z***+?&gt;***%****/?:***Q****??***$F***+?&gt;***PZ***/?:**)@Z***??***PA***+?&gt;**)@A**/???:*P@A**????*$@@A*+???&gt;)@@@A******P@@@AZ****T@@@@@U**)T@@@@@@AUUP@@@@@a'))</body><body package="ICCLookExtensions">iccWarnIcon	"UIMaskEditor new openOnClass: self andSelector: #iccWarnIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@32 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: (ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: ColorValue black; at: 3 put: ColorValue yellow; yourself)) usingBits: (ByteArray fromPackedString: '@@@@UUT@@@@@@AV**%P@@@@AZ****T@@@@Z*UUV*$@@@F*)UUZ*$@@A**%UU**$@@Z**UUV**$@F**)UUZ**$@Z**%UU***PF***UUV***PZ**)UUZ**)A***%UU***$Z***UUV***%***)UUZ***V***%UU***)Z***UUV***%***)UUZ***V***%UU***)Z***UUV***%***)UUZ***Q***%UU***$F*********PZ***)Z***)@Z**)UV***PA***%UZ**)@A**)UUZ**P@A**%UU**$@@A**%UZ*)@@@A**UU**P@@@AZ*%**T@@@@@U**)T@@@@@@AUUP@@@@@a'))</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>RadioButtonSpec</name><environment>UI</environment><super>UI.ButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>select </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>SimpleView</name><environment>UI</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>CheckBoxSpec</name><environment>UI</environment><super>UI.ButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>SimpleBorder</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thickness color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>InputFieldSpec</name><environment>UI</environment><super>UI.TextEditorSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type formatString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>SliderSpec</name><environment>UI</environment><super>UI.WidgetSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>orientation start stop step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class></st-source>