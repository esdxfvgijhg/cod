<?xml version="1.0"?><st-source><!-- Name: ADvance2Comment: Copyright ©1995-2008 by IC&C GmbH, Software Foundations.All rights reserved.Warning: This computer program is protected by copyright law and international treaties. Unauthorized reproduction or distribution of this program, or any portion of it, may result in severe civil and criminal penalties, and will be prosecuted to the maximum extent possible under the law.DbIdentifier: bear73DbTrace: 501869DbUsername: smichaelDbVersion: 8.3 - 2DevelopmentPrerequisites: #(#(#package 'ICCLookExtensions' '7.6_01') #(#package 'ICCColorSelector' '7.6_01') #(#package 'ICCIncrementalTypes' '7.6_01') #(#package 'ICCCommonClasses' '7.6_01') #(#any 'Compression-ZLib' '') #(#any 'UIPainter' ''))PackageName: ADvance2Parcel: #('ADvance2')ParcelName: ADvance2PrerequisiteParcels: #(#('ICCLookExtensions' '7.6_01') #('ICCColorSelector' '7.6_01') #('ICCIncrementalTypes' '7.6_01') #('ICCCommonClasses' '7.6_01') #('Compression-ZLib' '') #('UIPainter' ''))PrintStringCache: (8.3 - 2,smichael)Version: 8.3 - 2VersionDate: 02/28/2008Post-Load Block: 	[:package |	''This should not be necessary but is for reload 	(and double execution does no harm in initial load).'' 	ICC.ADvance.ADvance postLoad: package.]Pre-Unload Block: 	[ :pkg |  	ICC.ADvance.AD2Basics preUnloadActionFor: pkg.	ICC.ADvance.AD2Documenter preUnloadActionFor: pkg.	ICC.ADvance.AD2Types preUnloadActionFor: pkg.	ICC.ADvance.ADvance preUnloadActionFor: pkg.]Date: 5:08:49 PM May 26, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (may17.4) of May 26, 2017 on May 26, 2017 at 5:08:49 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>ADvance</name><environment>ICC</environment><private>false</private><imports>			private Smalltalk.*			ICC.*			ICC.IncrementalTypes.*			</imports><category>IC&amp;C ADvance</category><attributes><package>ADvance2</package></attributes></name-space><class><name>AD2SubjectEnvironment</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>root </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SubjectEnvironment</class-id><body>This class provides an interface for accessing subjects.Instance Variables:	root		&lt;AD2RootSubject&gt;Class Variables:	Default	&lt;AD2SubjectEnvironment&gt;</body></comment><class><name>IccHTMLItem</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>content attributes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLItem</class-id><body>This class is the base class of most HTML subclasses. One of the principle of HTMl seems to be, that a tag very often has a starting tagand an ending tag. Within these tags several other IccHTMLItems are placed. These items are placed in the cariable content, mentioned below. In special subclasses of IccHTMLItem "content" holds only a StringEspecially Strings may have attributes (bold, italic) ... you may find them in the dictionary attribute. Attributers should not be set directly, butonly via accessing methods.Instance Variables:	content 			&lt;(OrderedCollection of: IccHTMLItems) | String&gt;	attributes			&lt;Dictionary&gt;</body></comment><class><name>IccHTMLDocumentation</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>documenter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLDocumentation</class-id><body>This is an abstract class for HTML documentation.Instance Variables:	documenter		&lt;AD2Documenter&gt;</body></comment><class><name>IccHTMLVWDocumentation</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLDocumentation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLVWDocumentation</class-id><body>Missing comment</body></comment><class><name>AD2ToolbarPolicy</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name toolBarHeight buttonExtent buttonSpace firstOrigin isOpaque colors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ToolbarPolicy</class-id><body>Instances of this class describe the policy used for generating an ICCToolbarSpec. Its instance variables specify size and shape of tool bar and contained buttons.Instance Variables:	name 			&lt;Symbol&gt; a symbolic name for the policy	toolBarHeight 	&lt;Integer&gt; tool bars height	buttonExtent 	&lt;Point&gt; tool bar button extent (width for image oriented labels only)	buttonSpace	&lt;Integer&gt; space between button groups	firstOrigin		&lt;Point&gt; origin where to place the first button	isOpaque		&lt;Boolean&gt; opaque property of tool bars composite spec	colors			&lt;Paint&gt; paint for tool bars composite spec</body></comment><class><name>NVModel</name><environment>ICC.ADvance</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>domain container location </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVModel</class-id><body>Instances of this abstract superclass are used as components in NVApplicationModel.Instance variables:    domain		&lt;Object&gt;        			the corresponding object of your application    container		&lt;NVApplicationModel&gt;	where I'm registered as interface object    location        	&lt;nil | Point&gt;   			my locationSubclasses must implement the following messages:	accessing		domainType	private		displayIn:</body></comment><class><name>AD2RelationModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vertex1 vertex2 autoLayout cachedVertices </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2RelationModel</class-id><body>Instances of this class represent binary relations between Class models. They are dependents of the models they connect.Instance Variables:	vertex1 			&lt;AD2ClassModel&gt;	vertex2 			&lt;AD2ClassModel&gt;	autoLayout		&lt;Array of: Boolean size: 2&gt;	cachedVertices	&lt;Array of: Point&gt;Subclasses must implement the following messages:	Instance protocol:		accessing			domainType		private layout			computeVertices		private			displayIn:</body></comment><class><name>AD2MessageModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2RelationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>message globalNo localNo sumOfLocalMessages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2MessageModel</class-id><body>Instances of this class are used for modeling script messages between class models.Instance Variables:	message				&lt;AD2Message&gt;	globalNo				&lt;Integer&gt;	my no on connection1	localNo					&lt;Integer&gt;	my no on my script on connection1	sumOfLocalMessages	&lt;Integer&gt;	sum of messages of my script on connection1</body></comment><class><name>NVComponent</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVComponent</class-id><body>This is the abstract superclass for all NVision components. They can be wrapped by NVWrappers or grouped to composites (using NVComposites). Selectors and variable names are similar to those in the VisualComponent hierarchy.Instance Variables:	container	&lt;NVComponent&gt;Subclasses must implement the following messages:	displaying		displayOn:		invalidate</body></comment><class><name>AD2OpenDiagramDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subjectTree diagramTree </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2OpenDiagramDialog</class-id><body>This dialog provides a GUI for selecting a diagram. It is used for opening a diagram.Instance Variables:	subjectTree			&lt;SelectionInList&gt;	diagramTree			&lt;SelectionInList&gt;</body></comment><class><name>IccHTMLReference</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLReference</class-id><body>Missing comment</body></comment><class><name>NVApplicationModel</name><environment>ICC.ADvance</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>domain editor components </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVApplicationModel</class-id><body>This class is an abstract superclass for application interfaces in NVision.Instance Variables:	domain			&lt;Object&gt;	editor			&lt;NVEditor&gt;	components		&lt;OrderedCollection of: NVModel&gt;</body></comment><class><name>AD2DiagramModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>diagramSpec diagramState showStructure showAttributes showAssociations showTypes showServices showScripts showNamespaces emptyText dottedText messageModels textModels hiddenMessages controller modified domainToProjectionMapping structureFilter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DiagramModel</class-id><body>This class is used for modeling the projection layer of the ADvance Diagram Painter.It has components for the target diagram specification, some diagram switches, the message and text models and the glocal method filter.It provides a framework for handling modifications, access to controller, access to a mapping from domain to the projection layer, for reading a diagram specification and building an ObjectDrawing structure.Instance Variables:	controller			&lt;AD2DiagramPainter&gt;	modified 			&lt;ValueHolder on: Boolean&gt;	domainToProjectionMapping	&lt;Dictionary&gt;	diagramSpec		&lt;ValueHolder on: AD2DiagramSpec&gt;	the current diagram	diagramState		&lt;ValueHolder on: AD2DiagramState&gt;	the current diagram state	showStructure 		&lt;AspectAdaptor&gt;	showAttributes 		&lt;AspectAdaptor&gt;	showAssociations 	&lt;AspectAdaptor&gt;	showTypes 			&lt;AspectAdaptor&gt;	showServices 		&lt;AspectAdaptor&gt;	showScripts			&lt;AspectAdaptor&gt;	emptyText			&lt;ComposedText&gt;	dottedText			&lt;ComposedText&gt;	messageModels		&lt;OrderedCollection of: AD2MessageModel&gt; all shown message-scripts	textModels			&lt;OrderedCollection of: AD2TextModel&gt;	methodFilter		&lt;AD2MethodFilter&gt;	hiddenMessages	&lt;Set of: AD2Message&gt; hidden message-scripts. This variable has been necessary, when the user could not show hidden messages using the scripts-dialog of a class.</body></comment><class><name>AD2TabbedDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2TabbedDialog</class-id><body>This is an abstract superclass for SimpleDialogs using a TabControl.@See ICCTabControl.Instance Variables:	tabs	&lt;SelectionInList&gt;Subclasses must implement the following messages:	Instance protocol:		private			labelArray			specArray</body></comment><class><name>AD2PainterPreferencesDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classesFont relationsFont textFont </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id><body>This class provides a TabControl for the Diagram Painter's general preferences.Instance Variables:	textFont					&lt;ValueHolder on: String&gt;	classesFont					&lt;ValueHolder on: String&gt;	relationsFont				&lt;ValueHolder on: String&gt;</body></comment><class><name>NVDependentPart</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isSelected model area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVDependentPart</class-id><body>This class introduces a model instance variable. Model access is forwarded by wrappers. Access to the state of selection and access to layer and editor is implemented the same way.DependentDrawableParts consider themselves as visible. They actually do not know whether they are wrapped to be invisible or not. Invisibility means not to be drawn, drawing can be suppressed by a VisibilityWrapper. The same holds for the sensitivity: By default DependentParts consider themselves as sensitive.So: using the predicates #isVisible or #isSensitive will always yield true if applied to instances of this kind, but differing results are obtained using special wrappers.Instance Variables:	isSelected 	&lt;Boolean&gt;		true if this part is selected,	model 		&lt;NVModel&gt;		corresponding domain model, 	area 		&lt;Rectangle&gt;	area occupied by drawable expressed in screen coordinates</body></comment><class><name>NVView</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVDependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVView</class-id><body>This class adds behavior for a separate controller. Its mostly a copy of the system class View.Instance Variables	controller 	&lt;Controller&gt;</body></comment><class><name>AD2RelationPart</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>line symbol </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2RelationPart</class-id><body>Instance Variables:	line			&lt;Polyline&gt;	The inheritance relation line.	symbol		&lt;Polyline&gt;	The inheritance symbol.Inherited Instance Variables:	model 	&lt;AD2RelationModel&gt;</body></comment><class><name>AD2InheritancePart</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2RelationPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2InheritancePart</class-id><body>Instances of this class are invoked when displaying inheritance relations between classes.</body></comment><class><name>NVisionSpec</name><environment>ICC.ADvance</environment><super>UI.ArbitraryComponentSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model layer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVisionSpec</class-id><body>This class provides the specification for NVision panes.Instance Variables:	model		&lt;Object&gt;	layer		&lt;Integer&gt;</body></comment><class><name>AD2ToolbarSpec</name><environment>ICC.ADvance</environment><super>UI.CompositeSpecCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policy origin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ToolbarSpec</class-id><body>This subclass of CompositeSpecCollection is used for generating tool bars.Instance Variables:	policy 	&lt;AD2ToolbarPolicy&gt; describes size and shape of tool bar and buttons	origin 	&lt;Point&gt; origin for the next tool bar item</body></comment><class><name>NVComposite</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isVisible components </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVComposite</class-id><body>Instances of this class represent composites which contain NVComponents.Instance Variables:	isVisible		&lt;Boolean&gt;	components		&lt;OrderedCollection of: NVComponent&gt;</body></comment><class><name>IccHTMLOverlay</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLOverlay</class-id><body>This class is a representation of the &lt;OVERLAY&gt; option available in the HTML 3.x specification - obsolete. It should not be used any more</body></comment><class><name>AD2NewClassDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>className containerName superclassName classType classPersistence </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2NewClassDialog</class-id><body>This class provides a dialog for creating new classes.Instance Variables:	className				&lt;ValueHolder on: String&gt;	containerName			&lt;ValueHolder on: String&gt;	superclassName		&lt;ValueHolder on: String&gt;	classType 				&lt;#abstract | #concrete&gt;	classPersistence 		&lt;#persistent | #transient&gt;Class Variables:	ContainerNameDefault	&lt;String&gt;</body></comment><class><name>AD2Filters</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Filters</class-id><body>This class provides some ADVance filters as class methods.</body></comment><class><name>IccHTMLBody</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLBody</class-id><body>Missing comment</body></comment><class><name>AD2ApplicationModel</name><environment>ICC.ADvance</environment><super>ICC.ICC1ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state toolbarGenerator footer footerProgress statusField1 </inst-vars><class-inst-vars>mruWindowBox helpDictionary defaultState </class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ApplicationModel</class-id><body>This is an abstract superclass for ApplicationModels in ADvance. It provides a  generic framework for  handling a status bar; a list of most recently used targets; an info dialog and some predefined actions.Instance Variables:	state				&lt;AD2ToolState&gt;	toolbarGenerator	&lt;AD2ToolbarGenerator&gt;	footer				&lt;ValueHolder on: String&gt;	footerProgress		&lt;ValueHolder on: Integer&gt;	statusField1			&lt;ValueHolder on: String&gt;Class Instance Variables:	mruWindowBox		&lt;nil | Rectangle&gt;						Most recently used window display box.	helpDictionary		&lt;nil | (IdentityDictionary key: Symbol value: (Array of: String))&gt;						maps button ids to a tuple holding quick and footer infos.	defaultState			&lt;nil | AD2ToolState&gt;Subclasses must implement the following messages:	Class protocol:		constants			initiallyDisabledItems		resources			mainMenu</body></comment><class><name>AD2SingletonApplicationModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SingletonApplicationModel</class-id><body>This class provides behavior for accessing a single opened instance.</body></comment><class><name>AD2FilterPalette</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2SingletonApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filterTree </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2FilterPalette</class-id><body>Instance Variables:	filterTree	&lt;SelectionInList on: AD2StoredFilter&gt;Inherited Class Instance Variables:	current		&lt;AD2FilterPalette | nil&gt; My currently opened Instance.</body></comment><class><name>AD2Specification</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Specification</class-id><body>This is an abstract superclass that provides an interface for encoding and decoding of specifications used by ADvance. In general, specifications are a literal representation of any information that should be image-persistent.</body></comment><class><name>AD2ToolbarButtonSpec</name><environment>ICC.ADvance</environment><super>UI.ActionButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ToolbarButtonSpec</class-id><body>Instance of this class are used for building buttons in a tool bar.</body></comment><class><name>AD2DiagramPainter</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>anEditor model zoom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DiagramPainter</class-id><body>This is the application model class for the ADvance Diagram painter. It provides most of the behavior accessible via the menu (and toolbar).Instance Variables:	anEditor 		&lt;ValueHolder on: NVEditor&gt;	model			&lt;AD2DiagramModel&gt;	zoom 			&lt;ValueHolder on: String&gt;Inherited Instance Variables:	state			&lt;AD2PainterState&gt;Class Variables:	MRUList		&lt;OrderedCollection of: Array&gt;					Most-recently-used list of diagram specifications.Inherited Class Instance Variables:	defaultState		&lt;AD2PainterState&gt;</body></comment><class><name>AD2FilterBrowser</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2FilterPalette</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2FilterBrowser</class-id><body>Inherited Class Instance Variables:	current		&lt;AD2FilterBrowser | nil&gt; The currently opened Instance.</body></comment><class><name>AD2ClassSpec</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model location bits filter scripts layouts backgroundColor showAttributes showServices showTypes showNamespaces </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ClassSpec</class-id><body>This class stores view data for a Class. Attributes are modelled through a bit vector.See the class variables on this class, which are the masks.Instance Variables:	model			&lt;Class | Symbol&gt;			the class I'm specifying. (Symbol while decoding)	location			&lt;Point | Array&gt; 				the model's view location. (Array while decoding)	bits				&lt;Integer&gt;					wether the class is visible or not	filter			&lt;AD2MethodFilter&gt;	 		local filter	scripts			&lt;Array of: Symbol&gt;			the scripts of this class	layouts			&lt;Array of: AD2LayoutSpec&gt;	backgroundColor	&lt;ColorValue&gt;			Set if class background differs from default class color.	showAttributes 		&lt;Boolean&gt;				Set if layer visibility differs from diagram layer visbility.	showServices 		&lt;Boolean&gt;	showTypes			&lt;Boolean&gt;Class Variables:	Visible 			&lt;Integer&gt;</body></comment><class><name>AD2TextSpec</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>location text </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2TextSpec</class-id><body>Instances of this class specify a diagram text and its location.Instance Variables:	location 	&lt;Point&gt;	text 		&lt;Text&gt;</body></comment><class><name>AD2Identity</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2Specification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nickName name company </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Identity</class-id><body>This class describes the identity of a user. It is used to identify the author of diagrams.Instance Variables:	nickName		&lt;String&gt;	name			&lt;String&gt;	company		&lt;String&gt;</body></comment><class><name>IccHTMLNameReference</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLReference</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLNameReference</class-id><body>This class represents the NAME references of HTML 3.0</body></comment><class><name>AD2SearchParticipantsProgressDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1ProgressDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectors resultSet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog</class-id><body>Here's just another one of these fancy animated dialogs; this one's used for searching a classes participants.Instance Variables:	selectors	&lt;Array of: String&gt;	resultSet	&lt;Set of: Class&gt;</body></comment><class><name>NVTransformation</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scale minScale maxScale griddedHorizontally griddedVertically gridVisibility gridStep textStyle printTextStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVTransformation</class-id><body>This class provides scaling and grid constrained placement, movement and mouse input. It holds the scaling information on the 'real' cartesian coordinate system (the translations are done by the views scrolling wrapper). Protocol 'transforming' provides the transformations from view coordinates to  the 'real' coordinates vice verca.Instance Variables:	scale 				&lt;Point&gt;  						scaling of transformed real coordinates	minScale			&lt;Number&gt;	maxScale			&lt;Number&gt;	gridVisibility			&lt;#Hide| #Show | #ShowIfOn&gt; 	settings for displaying the grid	gridStep			&lt;Integer&gt;  						grid step in real coordinate system	griddedHorizontally	&lt;Boolean&gt;	griddedVertically	&lt;Boolean&gt;	textStyle 			&lt;VariableSizeTextAttributes&gt;	for displaying scaled text	printTextStyle 		&lt;VariableSizeTextAttributes&gt;  	for printing scaled text</body></comment><class><name>AD2PainterPreferences</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showGridOnStartup startupGridSize subjectExpansionType relationLayoutType inheritanceLayoutType concreteClassColor abstractClassColor subjectClassColor browserSelectedClassColor relationColor inheritanceColor coloredPrinting doubleClickActions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PainterPreferences</class-id><body>This class provides preferences used in the Diagram Painter.Instance Variables:	showGridOnStartup 		&lt;Boolean&gt;	startupGridSize 			&lt;Integer&gt;	subjectExpansionType	&lt;#thisPainter | #newPainter&gt;	relationLayoutType		&lt;#gridded | #straight&gt;	inheritanceLayoutType	&lt;#gridded | #straight&gt;	concreteClassColor 			&lt;Paint&gt;		Background color for "normal" classes	abstractClassColor 			&lt;Paint&gt;		Background color for abstract classes	browserSelectedClassColor 	&lt;Paint&gt;		Background color for classes shown in their own diagrams within the refactoring Browser.	subjectClassColor 			&lt;Paint&gt;		Background color for classes used / marked as ADvance subjects classes.	relationColor			&lt;Paint&gt;	inheritanceColor 		&lt;Paint&gt;	coloredPrinting			&lt;Boolean&gt;	doubleClickActions		&lt;Dictionary key: Symbol value: Symbol&gt;							Mapping from event type to the performed selector.</body></comment><class><name>IccHTMLCenter</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLCenter</class-id><body>Missing comment</body></comment><class><name>IccHTMLHorizontalLine</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLHorizontalLine</class-id><body>Missing comment</body></comment><class><name>IccHTMLLineBreak</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLHorizontalLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLLineBreak</class-id><body>Missing comment</body></comment><class><name>NVEditor</name><environment>ICC.ADvance</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transformation application activeLayerIndex selection </inst-vars><class-inst-vars></class-inst-vars><imports>			TextConstants.*			</imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVEditor</class-id><body>This class implements the major functions of NVision.Inherited Instance Variables:	view				&lt;NVEditorView&gt;Instance Variables	application			&lt;NVApplicationModel&gt;	associated application	transformation		&lt;NVTransformation&gt;		the coordinate system and transformation	selection 			&lt;OrderedCollection of: NVComponent&gt;	activeLayerIndex	&lt;Integer&gt;</body></comment><class><name>IccSysOrg</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccSysOrg</class-id><body>IccSysOrg is the superclass of all available SystemOrganization. A different SystemOrganization is needed for every platform depending programs want to run on.The main idea of a SystemOrganization is to give access to the system information of the Smalltalksystem, but also some low-level stuff for doing file i/o and directory access.To get access to the actual working SystemOrganization you should simple ask IccSysOrg current to get the actual working instance.If you would like to have an overview of all available SystemOrganizations you may ask IccSysOrg to get an OrderedCollection of them. Choose the one you would like to have.The name of the methods will stay constant, but the kind of parameter instances might changevery strong to the next release - going only over classHandle and moduleHandle instead of symbol and stringClass Variables:	Default		&lt;IccSysOrg&gt;			I held the instance of the SystemOrganization used within all the running imageSubclasses must implement the following messages:	Instance protocol:		all			checkAndCreate:			classVariables:			newFilestream:			searchReferencesOf:			poolDictionaries:			definedInstanceVariables:			allSuperclasses:			change:to:in:			definedInstanceVariablesComment:ofClass:			fullSelector:ofClass:classFlag:			fileNamesInDir:patternString:			change:to:in:stage:			selectors:ofClass:classFlag:			instanceClassVariables:			instanceClassVariablesComment:ofClass:			methodSource:ofClass:classFlag:			classesDefinitionsIn:			allSubclasses:			primitiveReplaceOf:with:in:			moduleComment:			formatMethodCode:ofClass:classFlag:			classVariablesComment:ofClass:			replaceOf:with:in:</body></comment><class><name>IccVWSystemOrganisation</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccSysOrg</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id><body>Missing comment</body></comment><class><name>AD2Documenter</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>painter subjectTree includeSource path diagramZoom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Documenter</class-id><body>This class provides the GUI for the Documenter Plug-in.Instance Variables:	painter			&lt;AD2DiagramPainter&gt;	subjectTree		&lt;SelectionInList on: AD2Subject&gt;	includeSource	&lt;ValueHolder on: Boolean&gt;	path			&lt;ValueHolder on: String&gt;	diagramZoom	&lt;Integer | nil&gt;	The zoom to use for created diagram images, nil means "fit to window"@Name		ADvance Documenter@Copyright 1997-2002 IC&amp;C GmbH</body></comment><class><name>NVWrapper</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVWrapper</class-id><body>This is an abstract class that implements the Decorator pattern which is called "Wrapper" pattern in VW.Instance Variables:	component	&lt;NVComponent&gt;	the wrappee</body></comment><class><name>NVVisibilityWrapper</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isVisible </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVVisibilityWrapper</class-id><body>This class allows the wrappees to switch their visibility.Instance Variables:	isVisible		&lt;Boolean&gt;</body></comment><class><name>AD2FilterRoot</name><environment>ICC.ADvance</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2FilterRoot</class-id><body>An Instance of this class is the top most filter in a AD2FilterPalette.</body></comment><class><name>AD2NavigatorPreferences</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2NavigatorPreferences</class-id><body>This class shall provide preferences for the Message Navigator.</body></comment><class><name>AD2GeneralPreferencesDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeCacheSize messageCacheSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id><body>This class provides a TabControl for the Diagram Painter's general preferences.Instance Variables:	typeCacheSize		&lt;ValueHolder on: Integer&gt;	messageCacheSize	&lt;ValueHolder on: Integer&gt;</body></comment><class><name>IccHTMLPreformatedText</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLPreformatedText</class-id><body>This class represents the pre formated text option of HTML 3.0</body></comment><class><name>AD2SubjectPropertiesDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SubjectPropertiesDialog</class-id><body>Instance Variables:	model	&lt;AD2Subject&gt;</body></comment><class><name>AD2ChooseColorDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colorValue cubesBrightness </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ChooseColorDialog</class-id><body>This class provides an user interface for color selection.Colors can be choosen using the color cube, a rectangular color map display (which includes a brightness slider). The color cube gives decent but not exhaustive coverage of the available colors in the Screen palette.Instance Variables:	colorValue			&lt;ValueHolder on: ColorValue&gt;	The currently selected color.	cubesBrightness	&lt;ValueHolder on: Number&gt;		The brightness used for color cube.</body></comment><class><name>AD2TextModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2TextModel</class-id><body>Instances of this class are used for modeling additional texts in ADvance diagrams.Instance Variables:	text		&lt;NVComposedText&gt;</body></comment><class><name>AD2Workbench</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2SingletonApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Workbench</class-id><body>This class provides fast access to the ADvance tools.Inherited Class Instance Variables:	current	&lt;AD2Workbench | nil&gt; My currently opened Instance.@Copyright 1995-2001 IC&amp;C GmbH@Version	5.2, 03/14/01</body></comment><class><name>AD2LayoutOrigin</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>leftFraction topFraction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2LayoutOrigin</class-id><body>This class is  used to compute origins relative to a given Rectangle. These origins are used in positioning relation lines in the Diagram Painter.Instance Variables:	leftFraction		&lt;Float&gt; relative fraction for left	topFraction 		&lt;Float&gt;	relative fraction for top</body></comment><class><name>AD2ChooseFontDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fontFamily selectedFontFamily familyList fontSize selectedFontSize sizesList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ChooseFontDialog</class-id><body>Instance Variables:	fontFamily 			&lt;ValueHolder on: String&gt;	selectedFontFamily &lt;Array | String&gt;	familyList 			&lt;SelectionInList&gt;	fontSize 			&lt;ValueHolder on: Integer&gt;	selectedFontSize	&lt;Integer&gt;	sizesList 			&lt;SelectionInList&gt;</body></comment><class><name>IccHTMLDocument</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLDocument</class-id><body>"Describes the  "</body></comment><class><name>AD2StructureFilter</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2Specification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bits filteredInstProtocols filteredInstMethods filteredClassProtocols filteredClassMethods filteredInstVars filteredClassInstVars filteredSharedVars </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2StructureFilter</class-id><body>Instances of this class provide a filter for services and attributes. It substitutes the former filter class AD2MethodFilter to addfilters for attributes / variables.Methods are filtered by excluding complete protocols and / or single methods; both are declared as pattern. For example one might filter all protocols named 'access*' and all methods named 'changed*'.  The variables are filtered by name, again, declaration as pattern is possible.Additionaly some special filter are provided - for example 'filter all class methods'. For filtering, an instance of this class is applied to a class; see protocol 'filtering' for details.The switches are implemented by a bit vector. See class variables for the masks.The literal array encodings contain only those variables that differ from the preset filter.Instance Variables:	bits						&lt;Integer&gt;	filteredInstProtocols		&lt;nil | (SortedCollection of: String)&gt;	filteredInstMethods 		&lt;nil | (SortedCollection of: String)&gt;	filteredClassProtocols 	&lt;nil | (SortedCollection of: String)&gt;	filteredClassMethods 	&lt;nil | (SortedCollection of: String)&gt;	filteredInstVars			&lt;nil | (SortedCollection of: String)&gt;	filteredClassInstVars		&lt;nil | (SortedCollection of: String)&gt;	filteredSharedVars		&lt;nil | (SortedCollection of: String)&gt;Class Variables:	FilterAccessors			&lt;Integer&gt;	Bit mask	FilterClassMethods		&lt;Integer&gt;	Bit mask	FilterOverriddenMethods	&lt;Integer&gt;	Bit mask	FilterPrivateMethods		&lt;Integer&gt;	Bit mask	FilterInstVars			&lt;Integer&gt;	Bit mask	FilterClassInstVars		&lt;Integer&gt;	Bit mask	FilterSharedVars		&lt;Integer&gt;	Bit mask	Preset					&lt;AD2StructureFilter&gt;</body></comment><class><name>AD2MethodFilter</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2StructureFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2MethodFilter</class-id><body>THIS CLASS IS DEPRECATED - USE AD2Filter TO FILTER METHODS AND ATTRIBUTES INSTEAD.Instances of this class provide a filter for instance and class methods. Methods are filtered by excluding complete protocols, methods; both are declared as pattern. For example one might filter all protocols named 'access*' and all methods named 'changed*'.  Additionaly some special filter are provided - for example 'filter all class methods'.For filtering an instance of this class is applied to a class; see protocol 'filtering' for details.The switches are implemented by a bit vector. See class variables for the masks.The literal array encodings contain only those variables that differ from a preset filter.Instance Variables:	bits						&lt;Integer&gt;	filteredInstProtocols		&lt;nil | (SortedCollection of: String)&gt;	filteredInstMethods 		&lt;nil | (SortedCollection of: String)&gt;	filteredClassProtocols 	&lt;nil | (SortedCollection of: String)&gt;	filteredClassMethods 	&lt;nil | (SortedCollection of: String)&gt;Class Variables:	FilterAccessors			&lt;Integer&gt;	FilterClassMethods		&lt;Integer&gt;	FilterOverriddenMethods	&lt;Integer&gt;	FilterPrivateMethods		&lt;Integer&gt;	Preset					&lt;AD2MethodFilter&gt;</body></comment><class><name>AD2SubjectWizard</name><environment>ICC.ADvance</environment><super>ICC.ICC1Wizard</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subjectName containerList subjectTree parcelList packageList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SubjectWizard</class-id><body>This Wizard provides an interface to create subjects from VW categories, ENVY applications and other subjects.Instance Variables:	subjectName 			&lt;ValueHolder on: String&gt; 	containerList 			&lt;SelectionInList on: String&gt; 	parcelList				&lt;SelectionInList on: String&gt; 	packageList				&lt;SelectionInList on: String&gt;	subjectTree				&lt;SelectionInList on: AD2Subject&gt;Class Variables:	InitialContentsDefault	&lt;String&gt;</body></comment><class><name>AD2Dialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1Dialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Dialog</class-id><body>This class provides warning, error and other simple dialogs for ADvance.</body></comment><class><name>AD2Utils</name><environment>ICC.ADvance</environment><super>ICC.ICC1Utils</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Utils</class-id><body>This class is a repository for a lot of snippets of ADvance code that permit handling the system.Some of these tools seem to have no natural home. Others might have a natural home that is part of the development environment -- in order to reduce system modifications and extensions we've choosen this class as a home for it.</body></comment><class><name>AD2SystemOrganization</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SystemOrganization</class-id><body>This class provides an interface for an abstract access to the system organization of theunderlying Smalltalk. It is part of the ADvance's Smalltalk Abstraction Layers.It provides an interface for accessing the components (categories, classes, applications, etc.).Class Variables:	Default	&lt;AD2SystemOrganization&gt;</body></comment><class><name>ICCServiceScriptInformation</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serviceHolder calledServices </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.ICCServiceScriptInformation</class-id><body>This is a first primitive class to create a documentation class. This class is used to hold all information necessaryto create a script documentation.Instance Variables:	serviceHolder 		&lt;AD2Service&gt;	I held the original service	calledServices		&lt;OrderedCollection of: ICCServiceScriptInformation&gt; I held all the script services need to finish the original service</body></comment><class><name>AD2Environment</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Environment</class-id><body>This is an abstract class for environments that bind class names to classes. It provides an abstractinterface for accessing its keys, values for checking inclusion and enumerations.Subclasses must implement the following messages:	Instance protocol:		accessing			at:ifAbsent:		class names			classNames		enumerating			allClassesDo:		testing			includesKey:			isSystem</body></comment><class><name>AD2SystemEnvironment</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2Environment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SystemEnvironment</class-id><body>The instance of this singleton class represents the systems environment that binds class namesto classes.Class Variables:	Default	&lt;AD2SystemEnvironment&gt;</body></comment><class><name>AD2StoredFilter</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2StructureFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>baseClass id name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2StoredFilter</class-id><body>Unlike its superclass this class provides extra behavior for accessing an unique identifier and a name. Therefore stored filters can be managed by the Filter Browser and are listed in the Filter Palette.The identifier is used when refering a stored filter in diagram specifications.@See AD2MethodFilter, AD2FilterReference.Instance Variables:	baseClass	&lt;Class&gt;	id			&lt;Integer&gt;	name		&lt;String&gt;</body></comment><class><name>ICCPNGStream</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>externalStream chunk </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.ICCPNGStream</class-id><body>Instances of ICCPNGStream are used by ICCPNGGenerators to build PNG files from images.Instance Variables:	externalStream	&lt;ExternalWriteStream&gt;	chunk			&lt;WriteStream&gt;Class Variables:	CRCTable		&lt;Array of: Integer&gt;</body></comment><class><name>NVEditorView</name><environment>ICC.ADvance</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pixmap useBuffering components </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVEditorView</class-id><body>This class is intimately tied to its model (a controller). Its main actions comprise of responding to displaying requests and managing updates of the damag area.The displaying mechanism is triggered either by the window system with #displayOn: or by the editor with #displayIn:.Instance Variables:	components 		&lt;OrderedCollection of: NVComposite&gt;	useBuffering			&lt;Boolean&gt;		wether to buffer displaying or not	pixmap				&lt;Pixmap&gt; 		pixmap used for bufferingInherited Instance Variables:	model				&lt;NVEditor&gt;</body></comment><class><name>IccHTMLUnOrderedList</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLUnOrderedList</class-id><body>This class represents the unordered list of HTML 3.0</body></comment><class><name>AD2DiagramPropertiesDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DiagramPropertiesDialog</class-id><body>Instance Variables:	model	&lt;AD2DiagramSpec&gt;</body></comment><class><name>AD2PickClassDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2Dialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>viewType sortedClasses containers containerClasses classTree selection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PickClassDialog</class-id><body>This class provides an interface for picking a class. As an option the user might create a new class.Instance Variables:	viewType 			&lt;ValueHolder on: (#organization | #hierarchy | #list)&gt;	containers 			&lt;SelectionInList&gt;	containerClasses 	&lt;SelectionInList&gt;	sortedClasses 		&lt;SelectionInList&gt;	classTree			&lt;SelectionInList&gt;	selection			&lt;Symbol | nil&gt;		The selected class, nil if none.</body></comment><class><name>AD2SubjectEditor</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2PickClassDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentSubject classEnvironment definedContainers filterOn </inst-vars><class-inst-vars></class-inst-vars><imports>			TextConstants.*			</imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SubjectEditor</class-id><body>This class provides a dialog for editing Subjects. Subject can be defined by either using acategorized or alphabetical class view. A future release should add a hierarchical view.Implementation note: The filter switch with functionality well known from the VisualWorksParcel Browser is currently not in use.Instance Variables:	currentSubject 		&lt;AD2Subject&gt;	classEnvironment	&lt;AD2ClassEnvironment&gt;	definedContainers	&lt;IdentityDictionary key: Symbol value: (#defined | #partiallyDefined)&gt;						Mapping from defined containers to a Symbol that indicates whether						it is partially defined or not.	filterOn				&lt;ValueHolder on: Boolean&gt;</body></comment><class><name>AD2Graphics</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Graphics</class-id><body>This is the subject class for the ADvance graphics classes.@Version	5.2 03/14/01@Copyright	1996-2001 IC&amp;C GmbH</body></comment><class><name>NVRectangleCollection</name><environment>ICC.ADvance</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rectangles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVRectangleCollection</class-id><body>Instances of this class are used to show the shape of moved selected Objects in an NVEditor. Therefore the displayOn: method is implemented to show stroked, not filled, rectangles.Instance Variables:	rectangles	&lt;OrderedCollection of: Rectangle&gt;</body></comment><class><name>AD2ClassModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classNameText attributesText servicesText messageCounter visible cachedExtent cachedClientRelations cachedContextClientRelations cachedServices cachedIsAbstract cachedIsPersistent edges backgroundColor showsTypes showsAttributes showsServices showsNamespaces structureFilter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ClassModel</class-id><body>Instances of this class are used to model classes. Most of behavior concerning classes, attributes,  associations, services, types and scripts is located here.Additionally it provides the framework for generating script documentations.Instance Variables:	edges 							&lt;AD2RelationModel&gt;	methodFilter					&lt;AD2MethodFilter&gt;	classNameText					&lt;NVComposedText&gt;	attributesText					&lt;NVComposedText&gt;	servicesText					&lt;NVComposedText&gt;	messageCounter				&lt;Integer&gt; counts message arrows starting at this class	visible							&lt;Boolean&gt; 	cachedExtent					&lt;Point&gt;	cachedClientRelations			&lt;OrderedCollection of: ITClientRelation&gt; all my Client Relations	cachedContextClientRelations	&lt;OrderedCollection of: ITClientRelation&gt;									Client Relations to classes in my context	cachedServices					&lt;OrderedCollection of: String&gt;	cachedIsAbstract				&lt;Boolean&gt; 	cachedIsPersistent				&lt;Boolean&gt;	backgroundColor				&lt;ColorValue | nil&gt;	If set, this color is taken for background; if not set, the default color value is taken.	showsTypes					&lt;Boolean | nil&gt;	If set, the types are shown or hidden depending on that value, otherwise the diagram's settings are taken.	showsAttributes					&lt;Boolean | nil&gt;	If set, the attributes are shown or hidden depending on that value, otherwise the diagram's settings are taken.	showsServices					&lt;Boolean | nil&gt;	If set, the services are shown or hidden depending on that value, otherwise the diagram's settings are taken.</body></comment><class><name>AD2MessagePart</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2RelationPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2MessagePart</class-id><body>Instances of this class are used for displaying message arrows between class symbols. All vertice informations are requested from the associated ADMessageModel.</body></comment><class><name>ICCPNGGenerator</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream imageBlock extent band paletteBuffer zLib zStream zInBuffer zOutBuffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.ICCPNGGenerator</class-id><body>An Instance of ICCPNGGenerator is used by the ADvance Documentor to create PNG files from ADvance Diagrams.Instance Variables:	stream 			&lt;ICCPNGStream&gt;	imageBlock		&lt;BlockClosure&gt;	extent			&lt;Point&gt;	band			&lt;Pixmap&gt;	paletteBuffer	&lt;Dictionary&gt;	zLib			&lt;ZLibInterface&gt;	zStream		&lt;CCompositePointer&gt;	zInBuffer		&lt;ByteArray&gt;	zOutBuffer		&lt;CIntegerType&gt;Class Variables	LibraryMissing	&lt;Boolean | nil&gt;</body></comment><class><name>NVMenuBuilder</name><environment>ICC.ADvance</environment><super>UI.MenuBuilder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manipulations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVMenuBuilder</class-id><body>This subclass of MenuBuilder adds behavior for menu item disablement.Instance Variables:	manipulations	&lt;OrderedCollection of: (Association key: String value: (Boolean | Block))&gt;</body></comment><class><name>AD2TextEditor</name><environment>ICC.ADvance</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textHolder label icon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2TextEditor</class-id><body>Editor for Texts in ADvance Class Diagrams.Instance Variables:	textHolder	&lt;AspectAdaptor&gt;	label		&lt;String&gt;	icon		&lt;Icon&gt;</body></comment><class><name>IccHTMLCode</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLPreformatedText</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLCode</class-id><body>Missing comment</body></comment><class><name>AD2GeneralPreferences</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>toolbarType menuLabelsHaveImages identity defaultFilterKey classInfoSource classInfoSelector defaultSubjectPackageName defaultSubjectMethodPackageName subjectPackageSelectionMode subjectMethodPackageSelectionMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2GeneralPreferences</class-id><body>This is the model for general preferences which are used in all tools of the ADvance suite.Instance Variables:	toolbarType				&lt;#pictures | #text | #picturesAndText&gt;	menuLabelsHaveImages	&lt;Boolean&gt;	identity					&lt;AD2Identity&gt;	defaultFilterKey			&lt;Association key: Class value: Integer&gt;	Key for the default filter.	classInfoSource			&lt;Symbol&gt;	either #comment or #selector	classInfoSelector		&lt;Symbol&gt;	the message to a class that will retrieve the String containing the type declaration	subjectPackageSelectionMethod			&lt;Symbol&gt;	method selector of AD2SubjectPackageDetector to determine the package to use for new subject classes	defaultSubjectPackageName				&lt;String&gt;	name of the package to use for new subject class resp. to suggest for package selection.	subjectMethodPackageSelectionMethod	&lt;Symbol&gt;	method selector of AD2SubjectPackageDetector to determine the package to use for new subject methods for existing classes.	defaultSubjectMethodPackageName		&lt;Symbol&gt;	name of the package to use for subject methods added to existing class, becoming a subject now</body></comment><class><name>AD2PlugInInterface</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PlugInInterface</class-id><body>This class provides the interface and documentation for ADvance Plug-ins.Introduction	@see $documentation&gt;IntroductionA User's View of Plug-ins	@see $documentation&gt;UsersViewA Programmer's View of Plug-ins	@see $documentation&gt;ProgrammersViewThe Plug-in API	@see $documentation&gt;APIOrganization	@see $documentation&gt;PlugInMethods	@see $documentation&gt;ADvanceMethods	@see $documentation&gt;Structures</body></comment><class><name>ADvance</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>properties </class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.ADvance</class-id><body>This is the subject class for ADvanceClass Instance Variables:	properties	&lt;IdentityDictionary&gt;</body></comment><class><name>AD2PlugInRegistry</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PlugInRegistry</class-id><body>This class provides a list of all registered ADvance plug-ins and an mechanism to detect plug-ins.Future releases of this class should allow plug-ins to individually register for special events, states and/or menus in ADvance tools.Class Variables:	InstalledPlugIns	&lt;List of: Class&gt;</body></comment><class><name>IccHTMLClassCommentText</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLPreformatedText</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLClassCommentText</class-id><body>Missing comment</body></comment><class><name>AD2DiagramSpec</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject name description creationDate modificationDate author state classes texts filter hiddenMessages cachedClassSpecs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DiagramSpec</class-id><body>Instance Variables:	subject				&lt;AD2Subject&gt;	name 				&lt;String&gt;	description			&lt;Text&gt;	creationDate		&lt;Timestamp&gt;	modificationDate	&lt;Timestamp&gt;	author				&lt;AD2Identity&gt;	state 				&lt;AD2DiagramState&gt;	classes 			&lt;OrderedCollection of: AD2ClassSpec&gt;	texts				&lt;OrderedCollection of: AD2TextSpec&gt;	filter 				&lt;AD2MethodFilter&gt;	hiddenMessages	&lt;OrderedCollection of: AD2Message&gt;	messages to hide in diagram	cachedClassSpecs	&lt;IdentityDictionary key: Class value: AD2ClassSpec&gt;</body></comment><class><name>IccHTMLOrderedList</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLUnOrderedList</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLOrderedList</class-id><body>This class represents the unordered list out of HTML 3.0</body></comment><class><name>AD2DiagramState</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bits zoom translation scriptDepth associationDepth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DiagramState</class-id><body>This class is used to hold diagram related information such as whether the attributes are visible etc. Most state information are implemented by a bit vector. See the class variables on this class, which are the masks.Instance Variables:	bits					&lt;Integer&gt; 	zoom 				&lt;Number&gt;	translation			&lt;Point&gt;	scriptDepth 			&lt;Integer | nil&gt; Undefined depth is treated as 'Infinite'.	associationDepth 	&lt;Integer | nil&gt; Undefined depth is treated as 'Infinite'.Class Variables:	InheritanceVisible 	&lt;Integer&gt;	AttributesVisible 	&lt;Integer&gt;	AssociationsVisible 	&lt;Integer&gt;	TrackResize		&lt;Integer&gt;	TypesVisible 		&lt;Integer&gt;	ServicesVisible 		&lt;Integer&gt;	ScriptsVisible 		&lt;Integer&gt;</body></comment><class><name>IccHTMLHeader</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLHeader</class-id><body>Missing comment</body></comment><class><name>AD2Types</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Types</class-id><body>The Types block provides a type framework for VisualWorks. It is based on a type concept handling partial type information. Therefore types may be added incrementally. This framework includes a type inference and an interface for requesting types and reporting type errors.@Name		ADvance Types@Version	5.2 03/14/01@Copyright	1995-2001 IC&amp;C GmbH</body></comment><class><name>AD2DiagramRoot</name><environment>ICC.ADvance</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DiagramRoot</class-id><body>This class is used as an invisible root in Diagram trees.Instance Variables:	children</body></comment><class><name>IccHTMLString</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLString</class-id><body>Missing comment</body></comment><class><name>AD2Subject</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>baseClass name environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Subject</class-id><body>This class is a restricted environment.Instance Variables:	baseClass 		&lt;Class&gt; 		The class I'm hooked on.	name			&lt;nil | String&gt;	environment		&lt;AD2ClassEnvironment&gt;Instance Collaborators:	children			&lt;Collection of: AD2Subject&gt;</body></comment><class><name>AD2RootSubject</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2Subject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2RootSubject</class-id><body>The sole instance of this singleton is the model for the root subject. It is used as an special and virtual root of all concrete subjects.Since the access to the root is restricted it overrides some behavior of its superclass.</body></comment><class><name>AD2PrinterPreferences</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subjectNameEnabled diagramNameEnabled authorEnabled dateModifiedEnabled datePrintedEnabled margins </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PrinterPreferences</class-id><body>Instance Variables:	subjectNameEnabled 		&lt;Boolean&gt;	diagramNameEnabled		&lt;Boolean&gt;	authorEnabled 				&lt;Boolean&gt;	dateModifiedEnabled		&lt;Boolean&gt;	datePrintedEnabled 			&lt;Boolean&gt;	margins 					&lt;Rectangle&gt;</body></comment><class><name>AD2FilterReference</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2FilterReference</class-id><body>This class is used for encoding/decoding references to stored filters. Diagrams that contain stored filters encode these filters as filter references. When decoding a filter reference we access the refered filter from the filter organization via its id.Instance Variables:	filter	&lt;AD2StoredFilter&gt;</body></comment><class><name>AD2SearchInitiatorsProgressDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2SearchParticipantsProgressDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SearchInitiatorsProgressDialog</class-id><body>This class is used to calm down users while ADvance is looking for a classes initiators.</body></comment><class><name>AD2SubjectBrowser</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2SingletonApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subjectTree diagramTree diagramHeader statusField2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2SubjectBrowser</class-id><body>This class provides a user interface for browsing and handling ADvance subjects and diagrams.The window mainly consists of two pane. The left pane is a tree view on the available subjects while the right pane displays the diagrams for the selected subject.The user can invoke actions by either selecting a pull-down menu item, pressing a buttonon the toolbar or selection from a pop-up menu.The subject tree view contains a (virtual) root for user interface simplicity only. When openingthe subject browser all subjects that have no parent are assigned as children of the root subject.Instance Variables:	subjectTree		&lt;SelectionInList on: AD2Subject&gt;	diagramTree		&lt;SelectionInList on: AD2DiagramSpec&gt;	diagramHeader	&lt;ValueHolder on: String&gt;	statusField2		&lt;ValueHolder on: String&gt;Inherited Class Instance Variables:	current			&lt;AD2SubjectBrowser | nil&gt; My currently opened Instance.</body></comment><class><name>AD2ScriptSelectionDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visibleScripts scriptDepth associationDepth oldScriptDepth oldAssociationDepth targetModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id><body>ADvanceInstance Variables:	visibleScripts		&lt;MultiSelectionInList of: AD2Service&gt; Methodsof the selected class. User can choose one or more selectors	scriptDepth 			&lt;AspectAdaptor on: String&gt;	associationDepth 	&lt;AspectAdaptor on: String&gt;	targetModel 		&lt;AD2ClassModel&gt;	oldScriptDepth 		&lt;String&gt; Old value, used if the user cancels his changes	oldAssociationDepth	&lt;String&gt; Old value, used if the user cancels his changes</body></comment><class><name>AD2ToolState</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>toolbarVisible statusBarVisible bubbleHelpEnabled </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ToolState</class-id><body>This class stores the state of the ADvance tools.Instance Variables:	toolbarVisible		&lt;Boolean&gt;	statusBarVisible		&lt;Boolean&gt;	bubbleHelpEnabled	&lt;Boolean&gt;</body></comment><class><name>AD2PainterState</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2ToolState</super><private>false</private><indexed-type>none</indexed-type><inst-vars>addButtonsVisible </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PainterState</class-id><body>Instances of this class represent the state of a Diagram Painter.Instance Variables:	addButtonsVisible	&lt;Boolean&gt;</body></comment><class><name>AD2InheritanceModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2RelationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2InheritanceModel</class-id><body>Instances of this class are used to model inheritance between class models.</body></comment><class><name>AD2MRUList</name><environment>ICC.ADvance</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>sizeLimit </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2MRUList</class-id><body>This class provides all you need for handling most recently used lists. It uses a FIFO strategy for adding and removing elements.Example:	|aQueue|	aQueue := ICCMRUList limit: 21.	aQueue add: 42.	aQueue mostRecentlyUsedInstance Variables: 	sizeLimit		&lt;Integer&gt;</body></comment><class><name>AD2Images</name><environment>ICC.ADvance</environment><super>ICC.ICC1Images</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Images</class-id><body>This subclass of ICCResources defines some resources for ADvance.</body></comment><class><name>IccHTMLHeading</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLHeading</class-id><body>Missing comment</body></comment><class><name>IccHTMLDefListHeader</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLDefListHeader</class-id><body>Missing comment</body></comment><class><name>AD2PrintSettings</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>area fromPage toPage scale fitToPage orientation printToFile copies sortCopies </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PrintSettings</class-id><body>The sole instance of this class stores print settings for the ADvance printing.Instance Variables:	area			&lt;Symbol&gt; 	aspect for print area radio buttons	fromPage		&lt;Integer&gt;	toPage			&lt;Integer&gt;	scale			&lt;Number&gt;	fitToPage		&lt;Boolean&gt;	orientation		&lt;#portrait | #landscape&gt;	printToFile		&lt;Boolean&gt;	copies			&lt;Integer&gt;	sortCopies		&lt;Boolean&gt;</body></comment><class><name>AD2FilterEditor</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>domain targetFilter filteredClassMethodsList filteredClassProtocolsList filteredInstMethodsList filteredInstProtocolsList instMethodPattern instProtocolPattern classMethodPattern classProtocolPattern copiedFilter filteredInstVarsList filteredClassInstVarsList classInstVarPattern filteredSharedVarsList sharedVarPattern instVarPattern </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2FilterEditor</class-id><body>This class provides a dialog an behavior for editing ADMethodFilter.Instance Variables:	domain						&lt;AD2StoredFilter&gt;	the domain where filter can be read from.	targetFilter					&lt;ValueHolder on: AD2StoredFilter&gt; the edited filter	copiedFilter 					&lt;AD2StoredFilter&gt;	filter copy for testing modifications	filteredInstProtocolsList 		&lt;MultiSelectionInList&gt; 	instProtocolPattern 			&lt;ValueHolder on: String&gt;	filteredInstMethodsList 		&lt;MultiSelectionInList&gt;	instMethodPattern 			&lt;ValueHolder on: String&gt;	filteredClassProtocolsList 	&lt;MultiSelectionInList&gt; 	classProtocolPattern 		&lt;ValueHolder on: String&gt;	filteredClassMethodsList		&lt;MultiSelectionInList&gt;	classMethodPattern 		&lt;ValueHolder on: String&gt;</body></comment><class><name>AD2DiagramFilterEditor</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2FilterEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>availableInstProtocolsList availableInstMethodsList availableClassProtocolsList availableClassMethodsList availableClassInstVarsList availableInstVarsList availableSharedVarsList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DiagramFilterEditor</class-id><body>This class provides a dialog an behavior for editing ADMethodFilter.Inherited Instance Variables:	domain						&lt;AD2DiagramModel&gt;	targetFilter					&lt;ValueHolder on: AD2MethodFilter&gt; the edited filter	copiedFilter 					&lt;AD2MethodFilter&gt;	filter copy for testing modificationsInstance Variables:	availableInstProtocolsList 	&lt;MultiSelectionInList&gt;	availableInstMethodsList 	&lt;MultiSelectionInList&gt;	availableClassProtocolsList 	&lt;MultiSelectionInList&gt;	availableClassMethodsList 	&lt;MultiSelectionInList&gt;</body></comment><class><name>IccHTMLImage</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLOverlay</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLImage</class-id><body>This class is a representation of the &lt;FIG&gt; option available in the HTML 3.x</body></comment><class><name>ICCADvanceSpecificationDescription</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>topicHeader topicValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.ICCADvanceSpecificationDescription</class-id><body>This class is a data structure, which holds the documentation written in class comments. It does a simple parsing of the text. It expectsentries like@topic1Text for the topic topic@topic2Text for the topic topic2Up to now it is used in the ICCHTMLDocumenter system.Instance Variables:	topicHeader			&lt;String&gt;	topicValue				&lt;String&gt;</body></comment><class><name>AD2MethodAnalyzer</name><environment>ICC.ADvance</environment><super>Kernel.ProgramNodeEnumerator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>context sentMessages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2MethodAnalyzer</class-id><body>This class is used to scan compiled methods for sent messages. It may answer an OrderedCollection of potential participant services for an initiator service. The search for participants is limited to a context; that is a set of potential participant classes.Instance Variables:	context		 	&lt;OrderedCollection of: Class&gt; 	The set of potential participant classes. 	sentMessages	&lt;OrderedCollection of: (Association)&gt;	Used while scanning methods.</body></comment><class><name>IccHTMLDefListDefinition</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLDefListDefinition</class-id><body>Missing comment</body></comment><class><name>AD2ClassPart</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVDependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ClassPart</class-id><body>Instances of this class provide the display services for the rectangular class symbols.Almost everything of the view data is requested from the model.Inherited Instance Variables:	model	&lt;AD2ClassModel&gt;</body></comment><class><name>AD2AssociationController</name><environment>ICC.ADvance</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vertexNo sensor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2AssociationController</class-id><body>This class is responsible for moving start and end points of associations.Instance Variables:	vertexNo		&lt;2 | 1&gt;</body></comment><class><name>AD2ClassPropertiesDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetModel className superclassName containerName classType classPersistence attributesTableInterface servicesList attributesChanged servicesChanged </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id><body>This class provides an interface for editing the class definition.Instance Variables:	servicesChanged 			&lt;Boolean&gt;	targetModel					&lt;AD2ClassModel&gt;	className					&lt;ValueHolder on: Symbol&gt;	superclassName			&lt;ValueHolder on: Symbol&gt;	containerName				&lt;ValueHolder on: String&gt;	classType					&lt;ValueHolder on: (#abstract | #concrete)&gt;	classPersistence			&lt;ValueHolder on: (#persistent | #transient)&gt;	attributesTableInterface		&lt;TableInterface&gt;	servicesList					&lt;SelectionInList&gt;	attributesChanged			&lt;Boolean&gt;</body></comment><class><name>AD2MessageNavigator</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>participantsFooter implementorsFooter initiatorsFooter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2MessageNavigator</class-id><body>This class provides behavior and an user interface for navigating through message sends.Instance Variables:	participantsFooter 		&lt;ValueHolder on: String&gt;	implementorsFooter 		&lt;ValueHolder on: String&gt;	initiatorsFooter 			&lt;ValueHolder on: String&gt;Inherited Class Instance Variables:</body></comment><class><name>AD2AssociationView</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2RelationPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textBounds multiplicityBounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2AssociationView</class-id><body>Instances of this class are used for displaying associations between class symbols.Instance Variables:	textBounds	&lt;Rectangle&gt;	multiplicityBounds	&lt;Rectangle&gt;Inherited Instance Variables:	controller 	&lt;AD2AssociationController&gt;</body></comment><class><name>AD2Printer</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>diagram editor bounds textStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Printer</class-id><body>This class provides a mechanism for printing ADvance diagrams. See protocol 'printing diagrams'.Instance Variables:	diagram		&lt;AD2DiagramSpec&gt;	editor		&lt;NVEditor&gt;	bounds		&lt;Rectangle&gt;	textStyle	&lt;VariableSizeTextAttributes&gt;</body></comment><class><name>AD2LayoutSpec</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2Specification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vertex2 attribute layout1 layout2 aggregationType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2LayoutSpec</class-id><body>This class stores layout information for relations between classes.Instance Variables:	vertex2 		&lt;Class&gt;	attribute		&lt;String&gt;	layout1 		&lt;AD2LayoutOrigin&gt;	layout2 		&lt;AD2LayoutOrigin&gt;	aggregationType	&lt;#none | #aggregation | #composite&gt;</body></comment><class><name>IccHTMLADvanceText</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLString</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLADvanceText</class-id><body>Missing comment</body></comment><class><name>AD2PrintDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lastPage toPage sourceHasSelection pagesCalculationBlock printer filename defaultFilename scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PrintDialog</class-id><body>This class provides a printer dialog.Instance Variables:	lastPage				&lt;nil | Integer&gt;	toPage					&lt;AspectAdaptor on: Integer&gt;	sourceHasSelection		&lt;Boolean&gt; specfies wether there's something selected	pagesCalculationBlock 	&lt;BlockClosure&gt; to calculate the last page &lt;nil | Integer&gt;							when scale changes	filename				&lt;String&gt;	defaultFilename			&lt;String&gt;	scale					&lt;AspectAdaptor on: Number&gt;	printer					&lt;PostScriptFile | HostPrintJob&gt;</body></comment><class><name>NVComposedText</name><environment>ICC.ADvance</environment><super>Graphics.ComposedText</super><private>false</private><indexed-type>none</indexed-type><inst-vars>printTextStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVComposedText</class-id><body>This class adds behavior for scaling texts in NVision.Instance Variables:	printTextStyle	&lt;VariableSizeTextAttributes&gt;</body></comment><class><name>AD2Message</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initiatorService participantService </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Message</class-id><body>Instance Variables:	initiatorService 		&lt;AD2Service&gt;	participantService 	&lt;AD2Service&gt;</body></comment><class><name>IccHTMLDefinitionList</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLDefinitionList</class-id><body>Missing comment</body></comment><class><name>AD2AssociationModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2RelationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientRelation originLayout1 originLayout2 parallels1 parallels2 heading aggregationType wasVertical wasHorizontal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2AssociationModel</class-id><body>Instances of this class are used to model associations between classes.Instance Variables:	clientRelation	&lt;IT1ClientRelation&gt;	originLayout1	&lt;AD2LayoutOrigin&gt;	originLayout2	&lt;AD2LayoutOrigin&gt;	parallels1		&lt;Integer&gt;	parallels2		&lt;Integer&gt;	heading			&lt;-1 | 1&gt;	aggregationType		&lt;#none | #aggregation | #composite&gt;	wasVertical		&lt;Boolean&gt;	True if line was vertical before flushVertices occured.	wasHorizontal	&lt;Boolean&gt;	True if line was horizontal before flushVertices occured.</body></comment><class><name>AD2DocumentationPreferences</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DocumentationPreferences</class-id><body>This class shall model the Documenter's preferences.</body></comment><class><name>AD2AboutDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1AboutDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2AboutDialog</class-id><body>This class provides an interface for a generic about dialog. See class protocol 'interface opening'for usage.</body></comment><class><name>AD2AttributeEditor</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container component roleName type implementation comment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2AttributeEditor</class-id><body>This class provides a dialog for editing client relations..Instance Variables:	container 		&lt;ValueHolder on: String&gt;	component 		&lt;ValueHolder on: String&gt;	roleName		&lt;ValueHolder on: String&gt;	type 			&lt;ValueHolder on: Symbol&gt;	implementation	&lt;ValueHolder on: String&gt;	comment 		&lt;ValueHolder on: String&gt;</body></comment><class><name>AD2ReflexiveAssociationModel</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2AssociationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ReflexiveAssociationModel</class-id><body>Unlike the superclass this class is used to model reflexive associations only.</body></comment><class><name>AD2ScriptDocuDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetModel entryPoints scriptDepth printToFile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id><body>Instance Variables:	targetModel 	&lt;AD2ApplicationModel&gt;	entryPoints 		&lt;SelectionInList&gt;	scriptDepth 		&lt;AspectAdaptor on: AD2DiagramSpec&gt;	printToFile 		&lt;ValueHolder on: Boolean&gt;</body></comment><class><name>AD2ClassFilterEditor</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2DiagramFilterEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ClassFilterEditor</class-id><body>This subclass of ADDiagramFilterEditor is used to edit class filters.Inherited Instance Variables:	domain		&lt;AD2ClassModel&gt;</body></comment><class><name>AD2Preferences</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>general painter navigator documentation printer printSettings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Preferences</class-id><body>This singleton is a container for all ADvance preferences. The class variable contains the sole instance.Instance Variables:	general			&lt;AD2GeneralPreferences&gt;	painter			&lt;AD2PainterPreferences&gt;	navigator		&lt;AD2NavigatorPreferences&gt;	documentation	&lt;AD2DocumentationPreferences&gt;	printer			&lt;AD2PrinterPreferences&gt;	printSettings	&lt;AD2PrintSettings&gt;Class Variables:	Default			&lt;AD2Preferences&gt;</body></comment><class><name>AD2PrinterPreferencesDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2PrinterPreferencesDialog</class-id><body>This class is responsible for the UI in 'Diagram Painter:File:Page setup...'.</body></comment><class><name>AD2DocuPreferencesDialog</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2TabbedDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent outputType useDocumentationWizard </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2DocuPreferencesDialog</class-id><body>This class provides a TabControl for the Diagram Painter's general preferences.Instance Variables:	parent 						&lt;AD2DiagramPainter&gt;	outputType					&lt;ValueHolder on: Symbol&gt;	useDocumentationWizard	&lt;ValueHolder on: Boolean&gt;</body></comment><class><name>AD2ToolbarItem</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method image text hasButton </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ToolbarItem</class-id><body>Instances of this class represent the button and menu specification for items generated by the ToolbarGenerator.Instance Variables:	image			&lt;Image | nil&gt;   	button and menu item image	hasButton		&lt;Boolean&gt; 		specifies whether the item has a button in toolbar or not 	method			&lt;Symbol&gt; 		the method associated with the button / menu item	text				&lt;String&gt;		menu item label; used as label, if no image is supplied</body></comment><class><name>IccHTMLDefListTerm</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLDefListTerm</class-id><body>Missing comment</body></comment><class><name>IccHTMLParagraph</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLHeading</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLParagraph</class-id><body>Missing comment</body></comment><class><name>AD2FileOutSubjectDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename fileOutWholeClass recurseSubjects </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2FileOutSubjectDialog</class-id><body>This class provides an interface for filing out subjects. It request a filename and offers switches for recursing subjects and the set of included informations.Instance Variables:	filename			&lt;ValueHolder on: String&gt;	recurseSubjects 	&lt;ValueHolder on: Boolean&gt;	fileOutWholeClass	&lt;ValueHolder on: Boolean&gt;</body></comment><class><name>IccHTMLListItem</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLListItem</class-id><body>Instances of this class are a representation of the list-item option in HTML 3.x</body></comment><class><name>NVCachingWrapper</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pixmap </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVCachingWrapper</class-id><body>This wrapper displays its component cached. A pixmap holds the visual appearance of the wrapped component.Instance Variables:	pixmap	&lt;Pixmap&gt;	the caching pixmap</body></comment><class><name>AD2Service</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classOrMeta protocol selector cachedIsAbstract </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Service</class-id><body>A precondition for using this code is, that the domain is instantly existing and hasappropriate compiler, decompiler and parser associated with it.Instance Variables:	classOrMeta 		&lt;Behavior&gt;	protocol 			&lt;String&gt;	selector 			&lt;Symbol&gt;	cachedIsAbstract	&lt;Boolean&gt;</body></comment><class><name>IccHTMLTitle</name><environment>ICC.ADvance</environment><super>ICC.ADvance.IccHTMLItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.IccHTMLTitle</class-id><body>Missing comment</body></comment><class><name>AD2Basics</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2Basics</class-id><body>This is the subject class for the ADvance Basics.</body></comment><class><name>AD2AddMessageDialog</name><environment>ICC.ADvance</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initiator initiatorServices participant participantServices </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2AddMessageDialog</class-id><body>Instance Variables:	initiator				&lt;String&gt;	initiatorServices 		&lt;SelectionInList&gt;	participant			&lt;String&gt;	participantServices 	&lt;SelectionInList&gt;Class Variables:	AddScript			&lt;ValueHolder on: Boolean&gt;</body></comment><class><name>AD2ToolbarGenerator</name><environment>ICC.ADvance</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source menu builder toolBarSpec menuLabelsHaveImages itemSpecs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ToolbarGenerator</class-id><body>The toolbar classes provide a framework to generate toolbars for applications. The toolbar generator is invoked during interface opening. It may build  toolbar action buttons and set menu label images. The required specifications are extracted from the applications menu and so called ToolbarItemSpecs.The toolbar generator builds a toolbar specification and - as a side effect - the used menu is modified.For each selector, the toolbar generator checks, whether it has a toolbar item spec in its itemSpecs dictionary. If so it is used to design the menu item and button (if desired), otherwise a default item spec is used.How to use the toolbar generator:	1. Add an instance variable toolbarGenerator to your application class.	2. Prepare the itemSpec dictionary that should answer an appropriate ToolbarItemSpec for each menu item 	you want to give an action button and/or a menu label image.	3. Create an instance of ToolbarGenerator during interface opening (in #preBuildWith:).	4. Send this instance a #traverseMenuAndGenerateToolBar.	5. Add the generated ToolbarSpec to applications builder (in #postBuildWith:).	6. Use the toolbarGenerators menu (via #menu) instead of your applications menu bar.Instance Variables:	source					&lt;Object&gt;	the application using the tool bar generator	menu					&lt;Menu&gt;	applictions menu; used to extract the items	builder					&lt;UIBuilder&gt;	applications builder	itemSpecs				&lt;Dictionary key: Symbol value: AD2ToolbarItemSpec&gt;	toolBarSpec				 &lt;AD2ToolbarSpec&gt;							 the generated tool bar spec; extended while menu traversing	menuLabelsHaveImages	&lt;Boolean&gt;							specifies, whether the menu items have image labels@See $&gt;documentation for example code.</body></comment><class><name>AD2ClassEnvironment</name><environment>ICC.ADvance</environment><super>ICC.ADvance.AD2Environment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment classes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2ClassEnvironment</class-id><body>Instances of this class represent a limited class environment.Instance Variables:	environment		&lt;AD2Environment&gt; The outer environment.	classes			&lt;IdentitySet of: Class&gt;</body></comment><class><name>AD2TextPart</name><environment>ICC.ADvance</environment><super>ICC.ADvance.NVDependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2TextPart</class-id><body>Instances of this class add text information to a diagram.Inherited Instance Variables:	model 	&lt;AD2TextModel&gt;</body></comment><class><name>AD2FilterEnvironment</name><environment>ICC.ADvance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Core</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.AD2FilterEnvironment</class-id><body>This class provides an interface for access to the filter.Class Variables:	Default		&lt;AD2FilterEnvironment&gt;</body></comment><class><name>NVScrollWrapper</name><environment>ICC.ADvance</environment><super>UI.ScrollWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lastAmount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Graphics</category><attributes><package>ADvance2</package></attributes></class><comment><class-id>ICC.ADvance.NVScrollWrapper</class-id><body>This class extends class ScrollWrapper to handle negative coordinates of the views origin, i.e. positive offset. The scrollGrid should be smaller than the view bounds extent, otherwise pagewise scrollingmight not work due to semantic problems in treating visibleExtent and grid in class ScrollWrapperIts component must implement flushPreferredBounds.Instance Variables:	lastAmount		&lt;Point&gt;		the last scrolling amount (used in scroll:)</body></comment><shared-variable><name>MRUList</name><environment>ICC.ADvance.AD2DiagramPainter</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>InitialContentsDefault</name><environment>ICC.ADvance.AD2SubjectWizard</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Default</name><environment>ICC.ADvance.AD2SubjectEnvironment</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Visible</name><environment>ICC.ADvance.AD2ClassSpec</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Default</name><environment>ICC.ADvance.AD2Preferences</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Default</name><environment>ICC.ADvance.IccSysOrg</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>NamespacesVisible</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>TypesVisible</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>InheritanceVisible</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>AssociationsVisible</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>TrackResize</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>ServicesVisible</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>ScriptsVisible</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>AttributesVisible</name><environment>ICC.ADvance.AD2DiagramState</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>InstalledPlugIns</name><environment>ICC.ADvance.AD2PlugInRegistry</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>LibraryMissing</name><environment>ICC.ADvance.ICCPNGGenerator</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Default</name><environment>ICC.ADvance.AD2SystemEnvironment</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Default</name><environment>ICC.ADvance.AD2SystemOrganization</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>ContainerNameDefault</name><environment>ICC.ADvance.AD2NewClassDialog</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Default</name><environment>ICC.ADvance.AD2FilterEnvironment</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>AddScript</name><environment>ICC.ADvance.AD2AddMessageDialog</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>CRCTable</name><environment>ICC.ADvance.ICCPNGStream</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>FilterPrivateMethods</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Masks</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>FilterAccessors</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Masks</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>FilterInstVars</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Masks</category><initializer>nil</initializer><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>FilterOverriddenMethods</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Masks</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>FilterClassInstVars</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Masks</category><initializer>nil</initializer><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>Preset</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Constants</category><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>FilterSharedVars</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Masks</category><initializer>nil</initializer><attributes><package>ADvance2</package></attributes></shared-variable><shared-variable><name>FilterClassMethods</name><environment>ICC.ADvance.AD2StructureFilter</environment><private>false</private><constant>false</constant><category>Masks</category><attributes><package>ADvance2</package></attributes></shared-variable><methods><class-id>ICC.ADvance.AD2SubjectEnvironment</class-id> <category>testing</category><body package="ADvance2">includesSubject: aSymbol	"Check and answer whether there's a subject named aSymbol is in the system."	^(self at: aSymbol ifAbsent: [nil]) notNil</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment</class-id> <category>subject creation</category><body package="ADvance2">makeClass: aClass subjectNamed: nameOrNil	"^&lt;AD2Subject&gt;	Make aClass a subject. For naming the subject use the class' name as default	or nameOrNil is not nil. Answer the new subject."	^AD2Subject new		 baseClass: aClass;		 name: nameOrNil;		 save;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment</class-id> <category>enumerating</category><body package="ADvance2">allSubjectClassesDo: aBlock	self adBasics systemEnvironment allClassesDo: [:each | each isADvanceSubject ifTrue: [aBlock value: each]]</body><body package="ADvance2">allSubjectsDo: aBlock	self allSubjectClassesDo: [:each |  aBlock value: each advanceSubject]</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment</class-id> <category>initialize-release</category><body package="ADvance2">initialize	root := AD2RootSubject new</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment</class-id> <category>accessing</category><body package="ADvance2">at: aSymbol	^self at: aSymbol ifAbsent: [Root keyNotFoundError: aSymbol]</body><body package="ADvance2">at: subjectName ifAbsent: aBlock	| aClass |	aClass := self adBasics systemEnvironment at: subjectName asSymbol ifAbsent: [nil].	^(aClass notNil and: [aClass isADvanceSubject])		ifTrue: [aClass advanceSubject]		ifFalse: [aBlock value]</body><body package="ADvance2">root	^root</body><body package="ADvance2">subjectNames	^self subjects collect: [:each | each name]</body><body package="ADvance2">subjects	"^&lt;SortedCollection of: AD2Subject&gt;	Note: For enumerations you should better use #allSubjectsDo:."	| result |	result := SortedCollection new.	self allSubjectsDo: [:each | result add: each].	^result</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	self initializeDefault</body><body package="ADvance2">obsolete	"This class is being removed from the system. Reset the class variables."	self uninitialize.	super obsolete</body><body package="ADvance2">uninitialize	"self initialize"	Default := nil</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment class</class-id> <category>accessing</category><body package="ADvance2">default	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	Default isNil ifTrue: [self initializeDefault].	^Default</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEnvironment class</class-id> <category>private initialization</category><body package="ADvance2">initializeDefault	Default := self new</body></methods><methods><class-id>ICC.ADvance.IccHTMLItem</class-id> <category>accessing</category><body package="ADvance2">addAttribute: keySymbol value: valueValue	self attributes add: (Association key: keySymbol value: valueValue)</body><body package="ADvance2">attributes	"&lt;OrderedCollection of: HTMLItem&gt;"	attributes isNil ifTrue: [attributes := OrderedCollection new].	^attributes</body><body package="ADvance2">content	"&lt;OrderedCollection of: HTMLItem&gt;"	content isNil ifTrue: [content := OrderedCollection new].	^content</body><body package="ADvance2">content: aCollection	content := aCollection</body><body package="ADvance2">getAttribute: keySymbol	"&lt;Object&gt;"	| tmp |	tmp := self attributes detect: [:anAssoc | anAssoc key = keySymbol]				ifNone: [^nil].	^tmp value</body><body package="ADvance2">getStringAttribute: keySymbol	"&lt;String&gt;"	| tmp |	tmp := self attributes detect: [:anAssoc | anAssoc key = keySymbol]				ifNone: [^String new].	^tmp value</body></methods><methods><class-id>ICC.ADvance.IccHTMLItem</class-id> <category>adding</category><body package="ADvance2">add: aHTMLItem	"^&lt;HTMLItem&gt;"	^self content add: aHTMLItem</body><body package="ADvance2">addAll: aCollection	"^&lt;Collection&gt;"	^self content addAll: aCollection</body></methods><methods><class-id>ICC.ADvance.IccHTMLItem</class-id> <category>resultcreation</category><body package="ADvance2">convertBaseString: aString onHTMLStream: aStream	"I convert the most common special characters of the text into the HTML	specification -	very bad code. Should be solved more general - the best idea would be	to introduce an Array of String. Further look at the HTML specification is	necessary- &gt;see own WWW-server for complete list of special	characters"	aString do: [:aChar | aChar asInteger &gt; 255			ifTrue: []			ifFalse: [aChar = $&lt;					ifTrue: [aStream nextPutAll: '&amp;lt;']					ifFalse: [aChar = $&gt;							ifTrue: [aStream nextPutAll: '&amp;gt;']							ifFalse: [aChar = $&amp;									ifTrue: [aStream nextPutAll: '&amp;amp;']									ifFalse: [aStream nextPut: aChar]]]]]</body><body package="ADvance2">createHTMLOn: aStream	"&lt;&gt; creates a HTML description on a stream aStream"	aStream cr.	self preHTMLOn: aStream.	self content do: [ :aHTMLItem | aHTMLItem createHTMLOn: aStream ].	self postHTMLOn: aStream.</body><body package="ADvance2">postHTMLOn: aStream	"&lt;&gt; creates an optional HTML description of the receiver after the content of the receiver"	| tmpString |	(tmpString := self endOfSelf) isEmpty ifFalse: [aStream nextPutAll: tmpString]</body><body package="ADvance2">preHTMLOn: aStream	"&lt;&gt; creates an optional HTML description of the receiver before the content of the receiver"	| tmpString |	(tmpString := self startOfSelf) isEmpty ifFalse: [aStream nextPutAll: tmpString]</body></methods><methods><class-id>ICC.ADvance.IccHTMLItem</class-id> <category>constants</category><body package="ADvance2">endOfSelf	^String new</body><body package="ADvance2">startOfSelf	^String new</body></methods><methods><class-id>ICC.ADvance.IccHTMLItem</class-id> <category>testing</category><body package="ADvance2">isBody	^false</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>constants</category><body package="ADvance2">classDirectoryName	"&lt;String&gt; I return the partial name of the directory where the class HTML descriptions are located"	^'class'</body><body package="ADvance2">classReferenceFilename	"&lt;String&gt; I return the name of the file containing the class references"	^'______CR.htm'</body><body package="ADvance2">header	"&lt;Integer&gt; I create the size for the used HTML-headers within the HTML documents"	^4</body><body package="ADvance2">methodHeader	"&lt;Integer&gt; I create the size for the used HTML-headers within the HTML documents"	^4</body><body package="ADvance2">moduleReferenceFilename	"&lt;String&gt; I return the name of the file containing the module references"	^'______MR.htm'</body><body package="ADvance2">noneString	"&lt;String&gt; I return the string telling, that 'none' has been found :-) "	^'(none)'</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>private-accessing</category><body package="ADvance2">documenter	^documenter</body><body package="ADvance2">documenter: aDocumenter	documenter := aDocumenter</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>class generating</category><body package="ADvance2">classCategoryMethods: aClassSymbol onDocu: aHTMLSpecialDocumentation	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the class categories and the	defined methods of the class named aClassSymbol. Sorted by category names and method names."	^self		categoryMethods: aClassSymbol		headerString: 'Class Methods'		classFlag: true		onDocu: aHTMLSpecialDocumentation</body><body package="ADvance2">classComment: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the class comment of a class	named aSymbol"	| classComment |	classComment := IccSysOrg current classComment: aSymbol.	classComment isEmpty ifTrue: [classComment := '(no comment)'].	^OrderedCollection		with: (IccHTMLClassCommentText new content: classComment)		with: IccHTMLParagraph new</body><body package="ADvance2">classFooter: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the footer of the class	description a a class named aSymbol"	^OrderedCollection new		 add: IccHTMLHorizontalLine new;		 add: (IccHTMLString newString: aSymbol) bold;		 yourself</body><body package="ADvance2">classHeading: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the heading of the document of	the class named aClassSymbol."	| aHTMLItem |	aHTMLItem := IccHTMLHeading new				 counter: 1;				 leftAlign;				 yourself.	aHTMLItem add: (IccHTMLString newString: aSymbol asString).	^OrderedCollection with: aHTMLItem</body><body package="ADvance2">classInstanceVariables: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the class instance variables of	the class named aClassSymbol"	| aHTMLItem anHTMLItem aCollection instVar |	instVar := IccSysOrg current instanceClassVariables: aSymbol.	aCollection := OrderedCollection new.	instVar isEmpty ifTrue: [^aCollection].	aHTMLItem := IccHTMLHeading new				 counter: self header;				 leftAlign;				 yourself.	aHTMLItem add: (IccHTMLString newString: 'Class Instance Variables').	aCollection add: aHTMLItem.	aHTMLItem := IccHTMLDefinitionList new.	instVar		do:			[:aString | 	| type |			type := IccSysOrg current instanceClassVariablesType: aString ofClass: aSymbol.			type isEmpty ifFalse: [type := ' &lt;' , type , '&gt;'].			anHTMLItem := IccHTMLDefListTerm newHTMLString: (IccHTMLString newString: aString , type) bold.			aHTMLItem				 add: anHTMLItem;				 add: (IccHTMLDefListDefinition newHTMLString: (IccHTMLString newItalic: (IccSysOrg current instanceClassVariablesComment: aString ofClass: aSymbol)));				 add: IccHTMLParagraph new].	aCollection add: (IccHTMLUnOrderedList new add: aHTMLItem; yourself).	^aCollection</body><body package="ADvance2">classVariables: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the class variables of the class	named aClassSymbol"	| aHTMLItem aCollection anHTMLItem aIccHTMLString classVars |	classVars := IccSysOrg current classVariables: aSymbol.	aCollection := OrderedCollection new.	classVars isEmpty ifTrue: [^aCollection].	aHTMLItem := IccHTMLHeading new				 counter: self header;				 leftAlign;				 yourself.	aHTMLItem add: (IccHTMLString newString: 'Class Variables').	aCollection add: aHTMLItem.	aHTMLItem := IccHTMLDefinitionList new.	classVars		do:			[:aString | 	| type |			type := IccSysOrg current classVariablesType: aString ofClass: aSymbol.			type isEmpty ifFalse: [type := ' &lt;' , type , '&gt;'].			aIccHTMLString := IccHTMLString newString: aString , type.			aIccHTMLString bold.			anHTMLItem := IccHTMLDefListTerm newHTMLString: aIccHTMLString.			aHTMLItem				 add: anHTMLItem;				 add: (IccHTMLDefListDefinition newHTMLString: (IccHTMLString newItalic: (IccSysOrg current classVariablesComment: aString ofClass: aSymbol)));				 add: IccHTMLLineBreak new].	aCollection add: (IccHTMLUnOrderedList new add: aHTMLItem; yourself).	^aCollection</body><body package="ADvance2">instanceCategoryMethods: aClassSymbol onDocu: aHTMLSpecialDocumentation	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the instance categories and the	defined methods of the class named aClassSymbol. Sorted on category names and method names."	^self		categoryMethods: aClassSymbol		headerString: 'Instance Methods'		classFlag: false		onDocu: aHTMLSpecialDocumentation</body><body package="ADvance2">instanceVariables: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the instance variables of the	class named aClassSymbol - sorted on the method names"	| aHTMLItem anHTMLItem aCollection aIccHTMLString instVars |	instVars := IccSysOrg current definedInstanceVariables: aSymbol.	aCollection := OrderedCollection new.	instVars isEmpty ifTrue: [^aCollection].	aHTMLItem := IccHTMLHeading new				 counter: self header;				 leftAlign;				 yourself.	aHTMLItem add: (IccHTMLString newString: 'Instance Variables').	aCollection add: aHTMLItem.	aHTMLItem := IccHTMLDefinitionList new.	instVars		do:			[:aString | 	| type |			type := IccSysOrg current definedInstanceVariablesType: aString ofClass: aSymbol.			type isEmpty ifFalse: [type := ' &lt;' , type , '&gt;'].			aIccHTMLString := IccHTMLString newString: aString , type.			aIccHTMLString bold.			anHTMLItem := IccHTMLDefListTerm newHTMLString: aIccHTMLString.			aHTMLItem				 add: anHTMLItem;				 add: (IccHTMLDefListDefinition newHTMLString: (IccHTMLString newItalic: (IccSysOrg current definedInstanceVariablesComment: aString ofClass: aSymbol)));				 add: IccHTMLLineBreak new].	aCollection add: (IccHTMLUnOrderedList new add: aHTMLItem; yourself).	^aCollection</body><body package="ADvance2">ofClass: aSymbol	"I create the documentation - when a stream is already defined"	self ofClass: aSymbol on: self file.	self file close.	self file: nil.	self fileName: nil.</body><body package="ADvance2">ofClass: aSymbolin: aDirString	"I create the documentation of a class named aSymbol in a directory named aDirString"	(IccSysOrg current checkAndCreate: aDirString)		ifFalse: [^nil].	(IccSysOrg current checkAndCreate: aDirString , IccSysOrg current separatorString , self classDirectoryName)		ifFalse: [^nil].	self fileName: aDirString , IccSysOrg current separatorString , self classDirectoryName , IccSysOrg current separatorString , aSymbol asString , '.htm'.	self ofClass: aSymbol</body><body package="ADvance2">ofClass: aSymbol on: aStream	"I create the documentation of the class named aSymbol on a stream aStream. I do not close the	stream."	| aHTMLDoc |	aHTMLDoc := IccHTMLDocument emptyDocumentWithName: aSymbol asString , ' (class)'.	aHTMLDoc body		 add: (IccHTMLReference linkText: self classReferenceFilename text: ' Class Reference');		 add: (IccHTMLReference linkText: '../' , self moduleReferenceFilename text: ' Subject Reference');		 add: (IccHTMLReference linkText: '#__ClassMethods' text: ' Class Methods');		 add: (IccHTMLReference linkText: '#__InstanceMethods' text: ' Instance Methods');		 add: IccHTMLHorizontalLine new;		 addAll: (self classHeading: aSymbol);		 addAll: (self classComment: aSymbol);		 addAll: (self superClasses: aSymbol);		 addAll: (self instanceVariables: aSymbol);		 addAll: (self classVariables: aSymbol);		 addAll: (self classInstanceVariables: aSymbol);		 addAll: (self pools: aSymbol);		 add: (IccHTMLNameReference linkText: '__InstanceMethods' text: '');		 addAll: (self instanceCategoryMethods: aSymbol onDocu: self);		 add: (IccHTMLNameReference linkText: '__ClassMethods' text: '');		 addAll: (self classCategoryMethods: aSymbol onDocu: self);		 addAll: (self classFooter: aSymbol).	aHTMLDoc createHTMLOn: aStream</body><body package="ADvance2">pools: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the used pool dictionary in the	class named aSymbol - actually not working"	| aHTMLItem aCollection aHTMLString anHTMLItem pools |	aCollection := OrderedCollection new.	pools := IccSysOrg current poolDictionaries: aSymbol.	pools isEmpty ifTrue: [^aCollection].	aHTMLItem := IccHTMLHeading new				 counter: self header;				 leftAlign;				 yourself.	aHTMLItem add: (IccHTMLString newString: 'Pool Dictionaries').	aCollection add: aHTMLItem.	aHTMLItem := IccHTMLDefinitionList new.	pools		do:			[:aPoolSymbol |			aHTMLString := IccHTMLString newString: aPoolSymbol asString.			aHTMLString bold.			anHTMLItem := IccHTMLDefListTerm newHTMLString: aHTMLString.			aHTMLItem add: anHTMLItem; add: IccHTMLLineBreak new].	^aCollection add: (IccHTMLUnOrderedList new add: aHTMLItem; yourself); yourself</body><body package="ADvance2">subClasses: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the subclasses of the class named aClassSymbol"	^self classesParagraph: (IccSysOrg current allSubclasses: aSymbol) header: 'Inherited By'</body><body package="ADvance2">superClasses: aSymbol	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the superclasses of the class named aClassSymbol"	^self classesParagraph: (IccSysOrg current allSuperclasses: aSymbol) header: 'Inherits From'</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>attributes</category><body package="ADvance2">author	"&lt;String&gt; I return the name of the author"	^self getStringAttribute: #author</body><body package="ADvance2">author: aString	"I set the creator of the documentation to aString. It will be used in the footer of the HTML-pages"	self addAttribute: #author value: aString</body><body package="ADvance2">creationDateString	"&lt;String&gt; I return the creation datestring"	^self getStringAttribute: #creation</body><body package="ADvance2">creationDateString: aString	"I set the creation-date of the documentation to aString. It will be used in the footer of the HTML-pages"	self addAttribute: #creation value: aString</body><body package="ADvance2">file	"&lt;Stream | nil&gt; I return the stream the documentation should be written to ... if noone is defined yet I try to ask myself if I know a fileName and then I create a new filestream"	(self getAttribute: #file) isNil		ifTrue:			[self fileName isEmpty				ifFalse: [self file: (IccSysOrg current newFilestream: self fileName)]].	^self getAttribute: #file</body><body package="ADvance2">file: aStream	"I set target of the documentation"	self addAttribute: #file value: aStream</body><body package="ADvance2">fileName	"&lt;String&gt; I return the filename of the stream the documentation is written to ..."	^self getStringAttribute: #filename</body><body package="ADvance2">fileName: aString	"I set the name of file containing the HTML code to aString"	self addAttribute: #filename value: aString</body><body package="ADvance2">methodSource	"&lt;Boolean&gt;"	^(self getAttribute: #methodSource) isNil		ifTrue: [false]		ifFalse: [self getAttribute: #methodSource]</body><body package="ADvance2">methodSource: aBoolean	""	self addAttribute: #methodSource value: aBoolean</body><body package="ADvance2">name	"&lt;String&gt;"	^self getStringAttribute: #name</body><body package="ADvance2">name: aString	"&lt;&gt;"	self addAttribute: #name value: aString</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>management</category><body package="ADvance2">classReferenceFooter: aStream	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the footer of the class	reference file"	^OrderedCollection new</body><body package="ADvance2">classReferenceHeading	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create the paragraph containing the	heading of the class reference file"	^(OrderedCollection new)		add: ((IccHTMLHeading new)				counter: 1;				leftAlign;				add: (IccHTMLString newString: 'Class Reference');				yourself);		yourself</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>private</category><body package="ADvance2">categoryMethods: aClassSymbol headerString: aString classFlag: aBoolean onDocu: aHTMLDoc	"^&lt;OrderedCollection of: HTMLItem&gt;"	| aHTMLItem aCollection aIccHTMLString anHTMLItem categories |	aCollection := OrderedCollection new.	categories := IccSysOrg current categoriesOfClass: aClassSymbol classFlag: aBoolean.	aCollection add: (IccHTMLHeading new			 counter: 3;			 leftAlign;			 add: (IccHTMLString newString: aString);			 yourself).	categories keys asSortedCollection		do:			[:aCategory |			aCollection add: (IccHTMLHeading new					 counter: self methodHeader;					 leftAlign;					 add: (IccHTMLString newString: aCategory);					 yourself).			aHTMLItem := IccHTMLDefinitionList new.			(categories at: aCategory) asSortedCollection				do:					[:aSelector |					aIccHTMLString := (IccHTMLString newString: (IccSysOrg current									fullSelector: aSelector									ofClass: aClassSymbol									classFlag: aBoolean)) bold.					anHTMLItem := IccHTMLDefListTerm newHTMLString: aIccHTMLString.					aHTMLItem						 add: anHTMLItem;						 add: (IccHTMLDefListDefinition newHTMLString: (IccHTMLString newItalic: (IccSysOrg current										remark: aSelector										ofClass: aClassSymbol										classFlag: aBoolean)));						 add: IccHTMLLineBreak new.					aHTMLDoc methodSource ifTrue: [aHTMLItem addAll: (self formatMethodCode: (IccSysOrg current									formatMethodCode: aSelector									ofClass: aClassSymbol									classFlag: aBoolean))]].			aCollection add: (IccHTMLUnOrderedList new add: aHTMLItem; yourself)].	categories keys isEmpty		ifTrue:			[aCollection add: (IccHTMLHeading new					 counter: self methodHeader;					 leftAlign;					 add: (IccHTMLString newString: aString);					 yourself).			aHTMLItem := IccHTMLDefinitionList new.			aHTMLItem add: (IccHTMLString newString: self noneString); add: IccHTMLLineBreak new.			aCollection add: (IccHTMLUnOrderedList new add: aHTMLItem; yourself)].	^aCollection</body><body package="ADvance2">classesParagraph: aClassSymbolCollectionheader: aString	"^&lt;OrderedCollection of: HTMLItem&gt;"	| aHTMLItem aCollection |	aCollection := OrderedCollection new.	aHTMLItem := IccHTMLHeading		new counter: self header;		leftAlign;		yourself.	aHTMLItem add: (IccHTMLString newString: aString).	aCollection add: aHTMLItem.	aHTMLItem := IccHTMLDefinitionList new.	aClassSymbolCollection		do:			[:aClass |			aHTMLItem				add: (IccHTMLReference linkText: aClass asString , '.htm' text: aClass asString);				add: (IccHTMLString newString: ' , ')].	aClassSymbolCollection isEmpty		ifTrue: [aHTMLItem add: (IccHTMLDefListTerm newString: self noneString)]		ifFalse: [aHTMLItem content removeLast].	aCollection		add:			(IccHTMLUnOrderedList			new add: aHTMLItem;			yourself).	^aCollection</body><body package="ADvance2">createDirectoriesOfSubject: aSubject in: fileName	"^&lt;Boolean&gt; I create all nec. directories for creationg of HTML files"	IccSysOrg current		 checkAndCreate: fileName;		 checkAndCreate: fileName , IccSysOrg current separatorString , self classDirectoryName;		 checkAndCreate: fileName , IccSysOrg current separatorString , aSubject name , '-images'.	^true</body><body package="ADvance2">formatMethodCode: aString	"&lt;OrderedCollection of: HTMLItem&gt; I return the full method code with the selector names and parameters defined by the programmer"	| aCollection |	aCollection := OrderedCollection new.	aCollection add: (IccHTMLPreformatedText new content: aString).	^aCollection</body><body package="ADvance2">moduleReferenceHeading	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create and return the HTML-paragraph containing the	heading of the module reference file"	^OrderedCollection new add: (IccHTMLHeading new			 counter: 1;			 leftAlign;			 add: (IccHTMLString newString: 'Subject Reference');			 yourself); yourself</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>module generating</category><body package="ADvance2">classReferences: aString	"&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing allthe classes defined in the module named aString"	| aHTMLItem aCollection aIccHTMLString anHTMLItem |	aCollection := OrderedCollection new.	aHTMLItem := IccHTMLHeading		new counter: self header;		leftAlign;		yourself.	aHTMLItem add: (IccHTMLString newString: 'Class Definitions').	aCollection		add: aHTMLItem;		add: (IccHTMLLineBreak new).	aHTMLItem := IccHTMLDefinitionList new.	(IccSysOrg current classesDefinitionsIn: aString) asSortedCollection asOrderedCollection		do: [ :aClassSymbol |			aIccHTMLString := IccHTMLString newString: aClassSymbol.			aIccHTMLString bold.			anHTMLItem := IccHTMLDefListTerm new.			anHTMLItem				add: (IccHTMLReference linkText: 'class/',aClassSymbol asString,'.htm' text: aClassSymbol asString).			aHTMLItem				add: anHTMLItem;				add: (IccHTMLDefListDefinition newHTMLString: (IccHTMLString newItalic: ''));				add: (IccHTMLLineBreak new)].	aCollection add: aHTMLItem.	^aCollection</body><body package="ADvance2">moduleComment: aString	"&lt;OrderedCollection of: HTMLItem&gt; I return the paragraph for the module comment"	| aCollection aComment |	aComment := IccSysOrg current moduleComment: aString.	aComment isEmpty		ifTrue: [aComment := self noneString].	aCollection := OrderedCollection new.	aCollection		add: (IccHTMLParagraph new);		add: (IccHTMLString newItalic: aComment);		add: (IccHTMLParagraph new).	^aCollection</body><body package="ADvance2">ofModule: aString on: aStream	"I create the documentation of a module named aString on a stream aStream. I do not close the stream"	| aHTMLDoc |	aHTMLDoc := IccHTMLDocument emptyDocumentWithName: aString, ' (Module)'.	aHTMLDoc body		add: (IccHTMLReference linkText: self classDirectoryName,'/',self classReferenceFilename text: 'Class Reference');		add: (IccHTMLReference linkText: self moduleReferenceFilename text: 'Module Reference');		add: IccHTMLHorizontalLine new ;		addAll: (self moduleHeading: aString) ;		addAll: (self moduleComment: aString) ;		addAll: (self classReferences: aString) ;		addAll: (self moduleFooter: aString).	aHTMLDoc createHTMLOn: aStream.</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation</class-id> <category>creation</category><body package="ADvance2">createClassReferenceFile: aDirString	"I create a new class reference file in a directory called aDirString"	| aStream aHTMLDoc |	IccSysOrg current checkAndCreate: aDirString.	IccSysOrg current checkAndCreate: aDirString , IccSysOrg current separatorString , self classDirectoryName.	aHTMLDoc := IccHTMLDocument emptyDocumentWithName: 'Class References'.	aHTMLDoc body		 add: (IccHTMLReference linkText: '../' , self moduleReferenceFilename text: 'Subject References');		 add: IccHTMLHorizontalLine new;		 addAll: self classReferenceHeading.	aStream := IccSysOrg current newFilestream: aDirString , IccSysOrg current separatorString , self classDirectoryName , IccSysOrg current separatorString , self classReferenceFilename.	[(IccSysOrg current fileNamesInDir: aDirString , IccSysOrg current separatorString , self classDirectoryName patternString: '*.htm') asSortedCollection do: [:aFilename | aFilename ~= self classReferenceFilename ifTrue: [aHTMLDoc body add: (IccHTMLReference linkText: aFilename text: (aFilename copyFrom: 1 to: aFilename size - 4)); add: IccHTMLLineBreak new]].	aHTMLDoc body addAll: (self classReferenceFooter: aStream).	aHTMLDoc createHTMLOn: aStream]		valueNowOrOnUnwindDo: [aStream close]</body><body package="ADvance2">createModuleReferenceFile: aDirString	"&lt;&gt; I create a new class reference file in a directory called aDirString"	| aStream aHTMLDoc |	IccSysOrg current checkAndCreate: aDirString.	IccSysOrg current checkAndCreate: aDirString , IccSysOrg current separatorString , self classDirectoryName.	aHTMLDoc := IccHTMLDocument emptyDocumentWithName: 'Subject References'.	aHTMLDoc body		 add: (IccHTMLReference linkText: self classDirectoryName , '/' , self classReferenceFilename text: 'Class References');		 add: IccHTMLHorizontalLine new;		 addAll: self moduleReferenceHeading.	aStream := IccSysOrg current newFilestream: aDirString , IccSysOrg current separatorString , self moduleReferenceFilename.	[(IccSysOrg current fileNamesInDir: aDirString patternString: '*.htm') asSortedCollection do: [:aFilename | aFilename ~= self moduleReferenceFilename ifTrue: [aHTMLDoc body add: (IccHTMLReference linkText: aFilename text: (aFilename copyFrom: 1 to: aFilename size - 4 "cut off the htm suffix")); add: IccHTMLLineBreak new]].	aHTMLDoc body addAll: (self moduleReferenceFooter: aStream).	aHTMLDoc createHTMLOn: aStream]		valueNowOrOnUnwindDo: [aStream close]</body><body package="ADvance2">moduleFooter: aString	"^&lt;OrderedCollection of: HTMLItem&gt; I return the paragraph of the footer of a module description"	^OrderedCollection new		 add: IccHTMLHorizontalLine new;		 add: (IccHTMLString newString: aString) bold;		 yourself</body><body package="ADvance2">moduleHeading: aSymbol	"^&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing	the	heading of the document of the class named aClassSymbol"	| aHTMLItem aCollection |	aCollection := OrderedCollection new.	aHTMLItem := (IccHTMLHeading new) counter: 1; leftAlign; yourself.	aHTMLItem add: (IccHTMLString new: aSymbol asString).	aCollection add: aHTMLItem.	^aCollection</body><body package="ADvance2">moduleReferenceFooter: aStream	"^&lt;OrderedCollection of: HTMLItem&gt; I create the paragraph containing the footer of the module reference file"	^OrderedCollection new</body><body package="ADvance2">ofModule: aSubject in: dirString	"I create the documentation of a module named aString in a directory	named aDirString"	| aStream |	(self createDirectoriesOfSubject: aSubject in: dirString)		ifFalse: [^self].	aStream := IccSysOrg current newFilestream: dirString , IccSysOrg current separatorString , (IccSysOrg current checkFilename: aSubject  name asString) , '.htm'.	[self		mainSubjectDocumentation: aSubject		in: dirString		on: aStream]		valueNowOrOnUnwindDo: [aStream close]</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocumentation class</class-id> <category>instance creation</category><body package="ADvance2">on: aDocumenter	^self new documenter: aDocumenter; yourself</body></methods><methods><class-id>ICC.ADvance.IccHTMLVWDocumentation</class-id> <category>subject documentation</category><body package="ADvance2">contentsList: aSubject in: aFilename	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create the HTML paragraph containing the header and call others to create the content of the contents list"	^OrderedCollection new		add: ((IccHTMLHeading new) counter: 2; leftAlign;							 add: (IccHTMLString newString: 'Contents'); yourself);		addAll: (self createContentsList: aSubject in: aFilename);		yourself</body><body package="ADvance2">createContentsList: aSubject in: aFilename	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create the HTML description of	the contents paragraph. This includes the default diagram, all diagrams	with scripts, all diagrams without scripts and the class section"	| htmlList |	htmlList := IccHTMLOrderedList new.	aSubject hasDefaultDiagram ifTrue: [htmlList add: (IccHTMLListItem new add: (IccHTMLReference linkText: '#' , aSubject defaultDiagram name text: aSubject defaultDiagram name); yourself)].	(aSubject diagrams select: [:each | each state scriptsVisible])		do: [:scriptDiagram | htmlList add: (IccHTMLListItem new add: (IccHTMLReference linkText: '#' , scriptDiagram name text: 'Script: ' , scriptDiagram name); yourself)].	(self nonScriptDiagramsWithoutDefault: aSubject) isEmpty ifFalse: [htmlList add: (IccHTMLListItem new add: (IccHTMLReference linkText: '#nscd' text: 'Diagrams (without scripts)'); yourself)].	htmlList add: (IccHTMLListItem new add: (IccHTMLReference linkText: '#classList' text: 'Classes'); yourself).	^OrderedCollection new add: htmlList; yourself</body><body package="ADvance2">createImageOfDiagram: aDiagram subject: aSubject inFileName: aString	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create a picture of aDiagram	aDiagram (and store it in an external file), which is part of aSubject. I ask	a Diagram Painter to open itself with the diagram aDiagram from the	subject aSubject. I return a HTML paragraph describing the script	documentation available for this diagram."	| painter scriptDocuCollection |	AD2Documenter pngConverterClass putImage: (self imageFor: aSubject diagram: aDiagram)		onFileNamed: aString.	scriptDocuCollection := OrderedCollection new.	painter := self documenter painter.	painter model scriptEntryPoints isEmpty ifTrue: [^scriptDocuCollection].	(self generateScriptDocumentationStructureUsing: painter model)		do: [:eachServiceInfo | scriptDocuCollection add: (IccHTMLHeading new					 counter: 4;					 leftAlign;					 add: (IccHTMLString newString: eachServiceInfo serviceHeader);					 yourself); add: (eachServiceInfo createHTMLItemsOnIndex: String new)].	painter model beUnmodified.	^OrderedCollection withAll: scriptDocuCollection</body><body package="ADvance2">createNonScriptDiagramDocumentation: aSubject in: aFilename	"^&lt;IccHTMLOrderedList&gt; I create (and return) the prefix, postfix of the	diagram documentation of all diagrams (without scripts) found in aSubject	and call others to create a HTML paragraph for each diagram found in the	subject.aSubject. The paragraph ends with a horizontal line."	| htmlList addFlag |	addFlag := true.	htmlList := OrderedCollection new.	(self nonScriptDiagramsWithoutDefault: aSubject)		do:			[:scriptDiagram |			htmlList addAll: (self					diagramDocumentation: scriptDiagram					subject: aSubject					in: aFilename); add: IccHTMLHorizontalLine new.			addFlag := false].	addFlag ifTrue: [htmlList add: IccHTMLHorizontalLine new].	^htmlList</body><body package="ADvance2">createScriptDocumentation: aSubject in: aFilename	"^&lt;IccHTMLOrderedList&gt; I create (and return) the prefix, postfix of the	script documentation of all diagrams found in aSubject	and call others to create a HTML paragraph for each script found in the	subject.aSubject. The paragraph is ended with	a horizontal line"	| htmlList addFlag |	addFlag := true.	htmlList := OrderedCollection new.	(self scriptDiagramsWithoutDefault: aSubject)		do:			[:scriptDiagram |			htmlList				add: IccHTMLParagraph new;				addAll: (self					diagramDocumentation: scriptDiagram					subject: aSubject					in: aFilename);				add: IccHTMLHorizontalLine new.			addFlag := false].	addFlag ifTrue: [htmlList add: IccHTMLHorizontalLine new].	^htmlList</body><body package="ADvance2">createSubjectClassesDocumentation: aSubject in: aDirString	"^&lt;IccHTMLOrderedList&gt; I create all HTML documentation files of all classes available in subject	aSubject and return a html documentation contraining links to the new generated class	documentations"	| aDoc htmlCollection |	htmlCollection := OrderedCollection new.	aSubject		allClassesDo:			[:aClass |			aDoc := self class new.			aDoc attributes addAll: self attributes.			aDoc				 author: self author;				 creationDateString: self creationDateString;				 name: self name;				 fileName: aDirString , IccSysOrg current separatorString , self classDirectoryName , IccSysOrg current separatorString , (IccSysOrg current checkFilename: aClass fullName) , '.htm';				 ofClass: aClass fullName.			htmlCollection add: (IccHTMLReference linkText: self classDirectoryName , '/' , aClass fullName asString , '.htm' text: aClass fullName asString); add: IccHTMLLineBreak new].	^htmlCollection</body><body package="ADvance2">diagramDocumentation: aDiagram subject: aSubject in: aFilename	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create documentation for a diagram"	| pngFilename |	pngFilename := aFilename , IccSysOrg current separatorString  , (IccSysOrg current checkFilename: aSubject subjectName , '-images') , IccSysOrg current separatorString  , (IccSysOrg current checkFilename: aDiagram name) , self graphicsFileExtension.	^OrderedCollection new		 add: (IccHTMLNameReference linkText: aDiagram name text: '');		 addAll: (self htmlDocuOfScriptDiagram: aDiagram inSubject: aSubject);		 addAll: (self				createImageOfDiagram: aDiagram				subject: aSubject				inFileName: pngFilename);		 yourself</body><body package="ADvance2">generateScriptDocumentationStructureUsing: aDiagramModel	| scriptDocumentation |	scriptDocumentation := OrderedCollection new.	aDiagramModel scriptEntryPoints keysAndValuesDo: [:index :each | scriptDocumentation add: (self				printScriptDocumentationFor: (aDiagramModel projectionFor: each baseClass)				service: each				index: index)].	^scriptDocumentation</body><body package="ADvance2">htmlDocuOfScriptDiagram: aDiagram inSubject: aSubject	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create the content of the script	paragraph and return the HTML description"	| orderedCollection pngFilename |	pngFilename := (IccSysOrg current checkFilename: aSubject subjectName , '-images')				, '/' , (IccSysOrg current checkFilename: aDiagram name) , self graphicsFileExtension.	orderedCollection := OrderedCollection new.	orderedCollection add: (IccHTMLHeading new			 counter: 2;			 leftAlign;			 add: (IccHTMLString newString: aDiagram name) italic;			 yourself); add: IccHTMLParagraph new.	(ICCADvanceSpecificationDescription scanStream: (ReadStream on: aDiagram description))		do: [:each | orderedCollection				 add: IccHTMLParagraph new;				 add: (IccHTMLString newString: each topicHeader) bold;				 add: IccHTMLLineBreak new;				 add: (IccHTMLADvanceText newString: each topicValue) italic].	orderedCollection addAll: (IccHTMLImage filename: pngFilename footer: (OrderedCollection				with: (IccHTMLString newString: aDiagram name)				with: (IccHTMLString newString: '          ') typeWriter				with: (IccHTMLString newString: (self diagramFooterFor: aDiagram)))).	^orderedCollection</body><body package="ADvance2">imageFor: aSubject diagram: diagram	"^&lt;Image&gt; 	Creates and answers a picture of aSubject's diagram. The zoom is reduced if necessary to make the	image fit into (0@0) corner: (4000@4000). Bigger Images may cause primitive failures."	| pixmap view image oldZoom |	self documenter painter model isNil 		ifTrue: [self documenter resetPainter].	self		openDiagramOn: aSubject		name: diagram name		in: self documenter painter.	oldZoom := self documenter painter zoom value.	view := self documenter painter editor view.	view flushPreferredBounds.	(view preferredBounds extent rounded &lt; self class maximumDiagramExtent) not		ifTrue: [self documenter painter fitToRectangle:((0@0) corner: (self class maximumDiagramExtent))]. 	view flushPreferredBounds. 	pixmap := view newPixmapWithExtent: view preferredBounds extent rounded.	[pixmap clear.	view displayOnPrinter: (pixmap graphicsContext translateBy: view preferredBounds origin negated).	image := pixmap asImage]		valueNowOrOnUnwindDo: [pixmap close].	self documenter painter setZoomTo: oldZoom.	^image</body><body package="ADvance2">mainSubjectDocumentation: aSubject in: aFilename on: aStreamOrNil	"^&lt;IccHTMLDocument | nil&gt; I create the complete subject documentation of a subject aSubject and	write the definition on a Stream aStream. I return	the complete HTML documentation"	| aHTMLDoc |	(self createDirectoriesOfSubject: aSubject in: aFilename)		ifFalse: [^nil].	aHTMLDoc := IccHTMLDocument emptyDocumentWithName: aSubject  name asString , ' (Subject)'.	aHTMLDoc body		 addAll: (self subjectHeader: aSubject in: aFilename);		 add: IccHTMLHorizontalLine new;		 addAll: (self contentsList: aSubject in: aFilename);		 add: IccHTMLHorizontalLine new.	aSubject hasDefaultDiagram ifTrue: [aHTMLDoc body addAll: (self				diagramDocumentation: aSubject defaultDiagram				subject: aSubject				in: aFilename); add: IccHTMLHorizontalLine new].	(self diagramsWithoutDefault: aSubject) isEmpty ifFalse: [aHTMLDoc body add: (IccHTMLHeading new				 counter: 2;				 leftAlign;				 add: (IccHTMLString newString: 'Diagrams (with script informations)');				 yourself); addAll: (self createScriptDocumentation: aSubject in: aFilename)].	(self nonScriptDiagramsWithoutDefault: aSubject) isEmpty ifFalse: [aHTMLDoc body			 add: (IccHTMLNameReference linkText: 'nscd' text: '');			 add: (IccHTMLHeading new					 counter: 2;					 leftAlign;					 add: (IccHTMLString newString: 'Diagrams (without script informations)');					 yourself);			 addAll: (self createNonScriptDiagramDocumentation: aSubject in: aFilename)].	aHTMLDoc body		 add: (IccHTMLNameReference linkText: 'classList' text: '');		 add: (IccHTMLHeading new				 counter: 2;				 leftAlign;				 add: (IccHTMLString newString: 'Classes');				 yourself);		 addAll: (self createSubjectClassesDocumentation: aSubject in: aFilename);		 addAll: (self moduleFooter: aSubject name asString).	aStreamOrNil isNil ifFalse: [aHTMLDoc createHTMLOn: aStreamOrNil].	^aHTMLDoc</body><body package="ADvance2">printScriptDocumentationFor: aClassModel service: aService index: index	"^&lt;ICCServiceScriptInformation&gt;"	| serviceScriptInfo |	serviceScriptInfo := ICCServiceScriptInformation new.	serviceScriptInfo service: aService.	self		traverse: aClassModel		services: aService		depth: aClassModel applicationModel scriptDepthOrNil		visited: Set new		indexStack: (OrderedCollection with: index)		in: serviceScriptInfo.	^serviceScriptInfo</body><body package="ADvance2">subjectHeader: aSubject in: aFilename	"^&lt;OrderedCollection of: IccHTMLItem&gt; I create the header for the subject documentation of subject	aSubject"	| htmlCollection |	htmlCollection := OrderedCollection new.	htmlCollection		 add: (IccHTMLReference linkText: self classDirectoryName , '/' , self classReferenceFilename text: 'Class Reference');		 add: (IccHTMLReference linkText: self moduleReferenceFilename text: 'Subject Reference');		 add: IccHTMLHorizontalLine new;		 add: (IccHTMLHeading new				 counter: 1;				 leftAlign;				 add: (IccHTMLString newString: aSubject subjectName);				 yourself).	(ICCADvanceSpecificationDescription scanStream: (ReadStream on: aSubject description))		do: [:each | htmlCollection				 add: (IccHTMLString newString: each topicHeader) bold;				 add: IccHTMLLineBreak new;				 add: (IccHTMLADvanceText newString: each topicValue) italic]		separatedBy: [htmlCollection add: IccHTMLParagraph new].	^htmlCollection</body><body package="ADvance2">traverse: classModel services: aService depth: anIntegerOrNil visited: visitedServices indexStack: indexStack in: scriptDocu	| newDepth participantServices |	newDepth := anIntegerOrNil isNil				ifTrue: [nil]				ifFalse: [anIntegerOrNil - 1].	(newDepth notNil and: [newDepth &lt; 0])		ifTrue: [^classModel].	(visitedServices includes: aService)		ifTrue: [^classModel].	visitedServices add: aService.	participantServices := classModel participantServicesFor: aService relatedClasses: classModel relatedClasses.	1 to: participantServices size		do:			[:index |			| eachService eachServiceScriptDocu |			eachService := participantServices at: index.			eachServiceScriptDocu := ICCServiceScriptInformation new.			eachServiceScriptDocu service: eachService.			self				traverse: (classModel applicationModel projectionFor: eachService baseClass)				services: eachService				depth: newDepth				visited: visitedServices				indexStack: (indexStack copyWith: index)				in: eachServiceScriptDocu.			scriptDocu addServiceScriptInfo: eachServiceScriptDocu]</body></methods><methods><class-id>ICC.ADvance.IccHTMLVWDocumentation</class-id> <category>private</category><body package="ADvance2">diagramFooterFor: aDiagram	| preferences stream |	stream := (String new: 100) writeStream.	preferences := self advance preferences printer.	preferences authorEnabled ifTrue: [stream			 nextPutAll: aDiagram author nickName;			 nextPut: $/;			 nextPutAll: aDiagram author company].	preferences dateModifiedEnabled ifTrue: [stream space; nextPutAll: aDiagram modificationDateStringShort].	^stream contents</body><body package="ADvance2">diagramsWithoutDefault: aSubject	"^&lt;OrderedCollection of: ADDiagrams&gt; I return a collection of diagrams	in the subject aSubject without the default diagram"	^aSubject hasDefaultDiagram		ifTrue: [aSubject diagrams select: [:each | each name ~= aSubject defaultDiagram name]]		ifFalse: [aSubject diagrams]</body><body package="ADvance2">nonScriptDiagramsWithoutDefault: aSubject	"^&lt;OrderedCollection of. AD15Diagram&gt; I return all diagrams found in the	subject aSubject which contain NO script information. The default diagram	is never included"	^(self diagramsWithoutDefault: aSubject)		select: [:each | each state scriptsVisible not]</body><body package="ADvance2">openDiagramOn: aSubject name: diagramName in: aPainter 	| theZoomValue |	aPainter model loadDiagramOn: aSubject name: diagramName.	(theZoomValue := self documenter diagramZoom value) isNil		ifTrue: 			[aPainter fitToWindow.			^self].	theZoomValue &gt; self class maximumDiagramZoom		ifTrue: 			[Dialog warn: 'Maximum Zoom of ' , self class maximumDiagramZoom printString, '% will be used!'.			theZoomValue := self class maximumDiagramZoom. 			self documenter diagramZoom value: theZoomValue].	aPainter setZoomTo: theZoomValue printString</body><body package="ADvance2">scriptDiagramsWithoutDefault: aSubject	"^&lt;OrderedCollection of. AD15Diagram&gt; I return all diagrams found in the	subject aSubject which contain a script information. The default diagram	is never included"	^(self diagramsWithoutDefault: aSubject)		select: [:each | each state scriptsVisible]</body></methods><methods><class-id>ICC.ADvance.IccHTMLVWDocumentation</class-id> <category>constants</category><body package="ADvance2">graphicsFileExtension	^'.png'</body></methods><methods><class-id>ICC.ADvance.IccHTMLVWDocumentation class</class-id> <category>constants</category><body package="ADvance2">maximumDiagramExtent	"Big Pixmaps may cause primitive failures when  created. "	^4000@4000</body><body package="ADvance2">maximumDiagramZoom	"Takes the maximum painter scale, converted to a percentage."	^AD2DiagramPainter zoomMaximum * 100</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarPolicy</class-id> <category>accessing</category><body package="ADvance2">buttonExtent	^buttonExtent</body><body package="ADvance2">buttonExtent: aPoint	buttonExtent := aPoint</body><body package="ADvance2">buttonHeight	^self buttonExtent y</body><body package="ADvance2">buttonSpace	^buttonSpace</body><body package="ADvance2">buttonSpace: anInteger	buttonSpace := anInteger</body><body package="ADvance2">buttonWidth	^self buttonExtent x</body><body package="ADvance2">colors	^colors</body><body package="ADvance2">colors: aPaint	colors := aPaint</body><body package="ADvance2">firstOrigin	^firstOrigin</body><body package="ADvance2">firstOrigin: aPoint	firstOrigin := aPoint</body><body package="ADvance2">isOpaque	^isOpaque</body><body package="ADvance2">isOpaque: aBoolean	isOpaque := aBoolean</body><body package="ADvance2">name	^name</body><body package="ADvance2">name: aSymbol	name := aSymbol</body><body package="ADvance2">toolBarHeight	^toolBarHeight</body><body package="ADvance2">toolBarHeight: anInteger	toolBarHeight := anInteger</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarPolicy class</class-id> <category>instance creation</category><body package="ADvance2">bigButtons	^self new		 name: #bigButtons;		 toolBarHeight: 32;		 buttonExtent: 32 @ 32;		 buttonSpace: 14;		 firstOrigin: 0 @ 0;		 isOpaque: false;		 yourself</body><body package="ADvance2">smallButtons	^self new		 name: #smallButtons;		 toolBarHeight: 30;		 buttonExtent: 24 @ 22;		 buttonSpace: 7;		 firstOrigin: 4 @ 4;		 isOpaque: false;		 yourself</body></methods><methods><class-id>ICC.ADvance.NVModel</class-id> <category>accessing</category><body package="ADvance2">applicationModel	^self container</body><body package="ADvance2">container	^container</body><body package="ADvance2">container: anApplicationModel	container := anApplicationModel</body><body package="ADvance2">domain	^domain</body><body package="ADvance2">domain: anObject	domain notNil ifTrue: [domain removeDependent: self].	domain := anObject.	domain notNil ifTrue: [domain addDependent: self]</body><body package="ADvance2">domainType	^self subclassResponsibility</body><body package="ADvance2">location	^location</body><body package="ADvance2">location: aPoint	location := aPoint</body></methods><methods><class-id>ICC.ADvance.NVModel</class-id> <category>initialize-release</category><body package="ADvance2">delete	"Delete the presentation objects and release myself."	self changed: #delete.	self release</body><body package="ADvance2">flushCaches	"Do nothing. Subclasses may override."</body><body package="ADvance2">initialize</body><body package="ADvance2">release	"Release all references which might contribute to circles."	self domain notNil		ifTrue:			[self domain removeDependent: self.			domain := nil].	container notNil		ifTrue:			[container removeComponent: self.			container := nil].	super release</body></methods><methods><class-id>ICC.ADvance.NVModel</class-id> <category>updating</category><body package="ADvance2">update: anAspectSymbol with: aParameter	anAspectSymbol == #location ifTrue: [^location := aParameter].	^super update: anAspectSymbol with: aParameter</body></methods><methods><class-id>ICC.ADvance.NVModel</class-id> <category>control</category><body package="ADvance2">doubleClickAt: aPoint keyMode: aSymbol	"Subclass may override."</body></methods><methods><class-id>ICC.ADvance.NVModel</class-id> <category>private</category><body package="ADvance2">displayIn: anEditor	self subclassResponsibility</body><body package="ADvance2">window	^self applicationModel window</body></methods><methods><class-id>ICC.ADvance.NVModel</class-id> <category>utility</category><body package="ADvance2">colors	"^&lt;ICCPaint&gt; 	This is the default behaviour: use a new ICCPaint for default 	colors. Subclasses may want to ovveride to provide special 	colors."	^ICCPaint new</body><body package="ADvance2">pickColor	^self adDialog chooseColorFor: nil</body></methods><methods><class-id>ICC.ADvance.NVModel class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body><body package="ADvance2">newOn: anApplicationModel	"create a new instance of myself on anApplicationModel"	| anObject |	anObject := self new.	anObject container: anApplicationModel.	anApplicationModel addComponent: anObject.	^anObject</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel</class-id> <category>accessing layout</category><body package="ADvance2">line	| vertices |	vertices := self vertices.	^vertices size = 2		ifTrue: [LineSegment from: (vertices at: 1)				to: (vertices at: 2)]		ifFalse: [Polyline vertices: vertices]</body><body package="ADvance2">originBoxAt: anInteger	^(anInteger = 1		ifTrue: [self vertices first]		ifFalse: [self vertices last])		- (7 @ 7) extent: 14 @ 14</body><body package="ADvance2">symbol	^nil</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel</class-id> <category>accessing</category><body package="ADvance2">autoLayout	^autoLayout</body><body package="ADvance2">autoLayout: aValue	autoLayout := aValue</body><body package="ADvance2">domainType	^self subclassResponsibility</body><body package="ADvance2">setAutoLayout	self autoLayout: (Array with: true with: true)</body><body package="ADvance2">vertex1	^vertex1</body><body package="ADvance2">vertex1: aVertex	vertex1 isNil ifFalse: [vertex1 edges remove: self ifAbsent: []].	aVertex edges add: self.	vertex1 := aVertex</body><body package="ADvance2">vertex2	^vertex2</body><body package="ADvance2">vertex2: aVertex	| edges |	vertex2 isNil ifFalse: [vertex2 edges remove: self ifAbsent: []].	edges := aVertex edges.	(edges includes: self)		ifFalse: [edges add: self].	vertex2 := aVertex</body><body package="ADvance2">vertexAt: anInteger	^anInteger = 1		ifTrue: [self vertex1]		ifFalse: [self vertex2]</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel</class-id> <category>private layout</category><body package="ADvance2">computeVertices	^self subclassResponsibility</body><body package="ADvance2">vertices	cachedVertices isNil ifTrue: [cachedVertices := self computeVertices].	^cachedVertices</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel</class-id> <category>private</category><body package="ADvance2">displayIn: anEditor	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel</class-id> <category>updating</category><body package="ADvance2">flushVertices	cachedVertices := nil</body><body package="ADvance2">update: aspect with: aParameter	(aspect == #location or: [aspect == #shape])		ifTrue:			[self flushVertices.			^self changed: #shape].	aspect == #visible ifTrue: [^self changed: #visible with: self visible].	super update: aspect with: aParameter</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel</class-id> <category>testing</category><body package="ADvance2">visible	^self vertex1 visible and: [self vertex2 visible]</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self setAutoLayout</body><body package="ADvance2">release	vertex1 := nil.	vertex2 := nil.	super release</body></methods><methods><class-id>ICC.ADvance.AD2RelationModel class</class-id> <category>accessing</category><body package="ADvance2">separation	^16</body></methods><methods><class-id>ICC.ADvance.AD2MessageModel</class-id> <category>private layout</category><body package="ADvance2">computeVertices	^self vertex1 area right &lt; self vertex2 area left		ifTrue: [self simpleVertices]		ifFalse: [self genericVertices]</body><body package="ADvance2">genericVertices	| p1 p2 p3 p4 p5 p6 rawLineBottom offset |	offset := 3 * (5 + self globalNo).	p1 := self origin1.	p2 := p1 x + offset @ p1 y.	p6 := self origin2.	p5 := p6 x - offset @ p6 y.	rawLineBottom := self vertex1 = self vertex2				ifTrue: [self vertex1 area bottom]				ifFalse: [p2 y].	p3 := p2 x @ (rawLineBottom + offset).	p4 := p5 x @ p3 y.	^(Array new: 6)			at: 1 put: p1;			at: 2 put: p2;			at: 3 put: p3;			at: 4 put: p4;			at: 5 put: p5;			at: 6 put: p6;		 yourself</body><body package="ADvance2">origin1	^self vertex1		startLocationFor: self initiatorService		localNo: self localNo		sum: self sumOfLocalMessages</body><body package="ADvance2">origin2	^self vertex2 stopLocationFor: self participantService</body><body package="ADvance2">simpleVertices	| offset p1 p2 p3 p4 p5 |	offset := self globalNo * 3.	p1 := self origin1.	p2 := p1 + (offset @ 0).	p5 := self origin2.	p3 := p1 x + p5 x // 2 + offset @ p2 y.	p4 := p3 x @ p5 y.	^(Array new: 5)		at: 1 put: p1;		at: 2 put: p2;		at: 3 put: p3;		at: 4 put: p4;		at: 5 put: p5; yourself</body></methods><methods><class-id>ICC.ADvance.AD2MessageModel</class-id> <category>accessing</category><body package="ADvance2">domainType	^#message</body><body package="ADvance2">globalNo	^globalNo</body><body package="ADvance2">globalNo: anInteger	globalNo := anInteger</body><body package="ADvance2">initiatorService	^self message initiatorService</body><body package="ADvance2">localNo	^localNo</body><body package="ADvance2">localNo: anInteger	localNo := anInteger</body><body package="ADvance2">message	^message</body><body package="ADvance2">message: anADMessage	message := anADMessage</body><body package="ADvance2">participantService	^self message participantService</body><body package="ADvance2">sumOfLocalMessages	^sumOfLocalMessages</body><body package="ADvance2">sumOfLocalMessages: anInteger	sumOfLocalMessages := anInteger</body></methods><methods><class-id>ICC.ADvance.AD2MessageModel</class-id> <category>actions</category><body package="ADvance2">hide	self applicationModel controller hideSelectedMessages</body></methods><methods><class-id>ICC.ADvance.AD2MessageModel</class-id> <category>menu creation</category><body package="ADvance2">actionMenu: aMenuBuilder	aMenuBuilder addLabel: 'Hide' value: [self hide]</body></methods><methods><class-id>ICC.ADvance.AD2MessageModel</class-id> <category>accessing layout</category><body package="ADvance2">symbol	| p1 |	p1 := self vertices last.	^Polyline vertices:		(Array			with: p1 + (-8 @ 4)			with: p1			with: p1 + (-8 @ -4))</body></methods><methods><class-id>ICC.ADvance.AD2MessageModel</class-id> <category>displaying</category><body package="ADvance2">displayIn: anEditor	| aPart |	aPart := (NVVisibilityWrapper on: (AD2MessagePart new model: self; yourself))				isVisible: self visible; yourself.	(anEditor layers at: 3)		add: aPart.	aPart updateForDisplay; invalidate</body></methods><methods><class-id>ICC.ADvance.NVComponent</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	self subclassResponsibility</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	self displayOn: aGraphicsContext</body><body package="ADvance2">invalidate	self subclassResponsibility</body><body package="ADvance2">invalidateRectangle: aRectangle	"Invalidate the Rectangle aRectangle.	Propagate a damage rectangle up the containment hierarchy.	This will result in a displayOn: aGraphicsContext being sent to the receiver."	self invalidateRectangle: aRectangle repairNow: false</body><body package="ADvance2">invalidateRectangle: aRectangle repairNow: aBoolean	"Invalidate the Rectangle aRectangle. If aBoolean is false, repair later.	Propagate a damage rectangle up the containment hierarchy.	This will result in a displayOn: aGraphicsContext being sent to the	receiver."	self		invalidateRectangle: aRectangle		repairNow: aBoolean		forComponent: self</body><body package="ADvance2">invalidateRectangle: aRectangle repairNow: aBoolean forComponent: aDrawablePart	"Invalidate the Rectangle aRectangle. If aBoolean is false, repair later.	Propagate a damage rectangle up the containment hierarchy.	This will result in a displayOn: aGraphicsContext being sent to the receiver."	self container		invalidateRectangle: aRectangle		repairNow: aBoolean		forComponent: aDrawablePart</body></methods><methods><class-id>ICC.ADvance.NVComponent</class-id> <category>accessing</category><body package="ADvance2">container	^container</body><body package="ADvance2">container: aComponentOrNil	container := aComponentOrNil</body><body package="ADvance2">editor	^self container editor</body><body package="ADvance2">isMovable: aBoolean	self topWrapper isMovable: aBoolean</body><body package="ADvance2">isSensitive: aBoolean	self topWrapper isSensitive: aBoolean</body><body package="ADvance2">isVisible: aBoolean	self topWrapper isVisible: aBoolean</body><body package="ADvance2">localPointToGlobal: aPoint	"Convert a point in local coordinates to a point in the top windows coordinate system.	Forwarded to the receiver's container."	^container localPointToGlobal: aPoint</body><body package="ADvance2">topComponent	"Answer the top component in the receiver's hierarchy.  If the receiver is not in a hierarchy answer nil."	container isNil		ifTrue: [^nil]		ifFalse: [^container topComponent]</body><body package="ADvance2">topWrapper	"^&lt;NVComponent&gt;"	^self topWrapperFor: self</body><body package="ADvance2">topWrapperFor: aNVComponent	"^&lt;NVComponent&gt;"	^self container isNil		ifTrue: [self]		ifFalse: [self container topWrapperFor: self]</body><body package="ADvance2">unwrapped	^self</body></methods><methods><class-id>ICC.ADvance.NVComponent</class-id> <category>initialize-release</category><body package="ADvance2">delete	| topWrapper composite |	topWrapper := self topWrapper.	composite := topWrapper container.	self invalidate.	composite remove: topWrapper.	self release</body><body package="ADvance2">initialize	"Initialize the receiver."</body><body package="ADvance2">newGraphicsDevice: aGraphicsDevice	"Any information that the receiver caches that is platform dependent	is questionable. Font widths is invalid; rescale texts.	Do nothing. Subclasses may override."</body></methods><methods><class-id>ICC.ADvance.NVComponent</class-id> <category>testing</category><body package="ADvance2">isControlWantedAt: aPoint	"Answer whether the receiver wants control."	^false</body><body package="ADvance2">isMovable	^false</body><body package="ADvance2">isSensitive	^true</body><body package="ADvance2">isVisible	^true</body></methods><methods><class-id>ICC.ADvance.NVComponent</class-id> <category>updating</category><body package="ADvance2">flushCaches	"Do nothing. Subclasses may override."</body><body package="ADvance2">update: anAspectSymbol with: aParameter	anAspectSymbol == #delete ifTrue: [^self delete].	^super update: anAspectSymbol with: aParameter</body><body package="ADvance2">updateForDisplay	"This method does all necessary transformations of view related attributes.	Subclasses should override."</body></methods><methods><class-id>ICC.ADvance.NVComponent</class-id> <category>private</category><body package="ADvance2">getController	"Answer my controller, or nil if I don't have one.	If I don't currently have a controller, but know	how to create a default one, do this now.	Subclasses may replace this with access to	an instance variable."	^nil</body></methods><methods><class-id>ICC.ADvance.NVComponent</class-id> <category>control</category><body package="ADvance2">startUp	"Start up the receiver's controller. If the receiver has no controller, do nothing."	| ctrl |	ctrl := self getController.	^ctrl notNil		ifTrue: [ctrl startUp]		ifFalse: [nil]</body></methods><methods><class-id>ICC.ADvance.NVComponent class</class-id> <category>ADvance</category><body package="ADvance2">ad2diagram_Overview	^#(#{ICC.ADvance.AD2DiagramSpec} 		#name: 'Overview' 		#creationDateSeconds: 3026664308 		#modificationDateSeconds: 3196481348 		#author: 		#(#{ICC.ADvance.AD2Identity} 			#nickName: '' 			#name: '' 			#company: '' ) 		#state: 		#(#{ICC.ADvance.AD2DiagramState} 			#bits: 7 			#zoom: '100%' 			#translation: #(#{Core.Point} -241 -31 ) 			#scriptDepth: 3 			#associationDepth: 2 ) 		#filter: 		#(#{ICC.ADvance.AD2MethodFilter} 			#bits: 13 			#filteredInstProtocols: #('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' 'resources' ) 			#filteredInstMethods: 			#(				#atId:ifAbsent: 'displayOn:*' 'displayString' 				#isFilteringAccessors: 				#isFilteringClassMethods: #filterNames 				#isFilteringOverriddenMethods: 				#isFilteringPrivateMethods: #getFilteredClassMethods #getFilteredClassProtocols #getFilteredInstMethods #getFilteredInstProtocols 				#includesId: 'init*' 'printOn:' 'printString' 'releas*' 				#safeAt: 				#setFilteredClassMethods: 				#setFilteredClassProtocols: 				#setFilteredInstMethods: 				#setFilteredInstProtocols: 'storeOn:' 'storeString' 'update:*' ) 			#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' 'resources' 'signal*' ) 			#filteredClassMethods: #('initialize' 'new' ) ) 		#classes: #(#(#{ICC.ADvance.NVCachingWrapper} 672 338 1 ) #(#{ICC.ADvance.NVVisibilityWrapper} 848 338 1 ) #(#{ICC.ADvance.NVView} 392 330 1 ) 			#(#{ICC.ADvance.NVComponent} 600 81 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComponent} 						#attribute: 'container' 						#layout1: #(1.0 0.593845 ) 						#layout2: #(1.0 0.274638 ) ) ) ) 			#(#{ICC.ADvance.NVWrapper} 760 218 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComponent} 						#attribute: 'component' 						#layout1: #(0.0 0.665984 ) 						#layout2: #(0.863463 1.0 ) ) ) ) #(#{ICC.ADvance.NVDependentPart} 392 176 1 ) 			#(#{ICC.ADvance.NVComposite} 560 218 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComponent} 						#attribute: 'components' 						#layout1: #(0.519417 0.0 ) 						#layout2: #(0.127451 1.0 ) ) ) ) ) )</body><body package="ADvance2">advanceSubjectSpec	^#(#{ICC.ADvance.AD2Subject} #classNames: #('WebLookPolicy' 'ICC.ADvance.NVVisibilityWrapper' 'ICC.ADvance.NVWrapper' 'ICC.ADvance.NVDependentPart' 'ICC.ADvance.NVCachingWrapper' 'ICC.ADvance.NVView' 'ICC.ADvance.NVComponent' 'ICC.ADvance.NVComposite'))</body><body package="ADvance2">markedAsSubjectClass</body><body package="ADvance2">markedAsSystemSubject</body></methods><methods><class-id>ICC.ADvance.NVComponent class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2OpenDiagramDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	subjectTree := SelectionInList new.	diagramTree := SelectionInList new list: TreeModel new.	self diagramTree selectionIndexHolder onChangeSend: #enableButtons to: self</body></methods><methods><class-id>ICC.ADvance.AD2OpenDiagramDialog</class-id> <category>interface-opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self updateSubjectTree.	self subjectTree selectionIndexHolder onChangeSend: #changedSubjectSelection to: self</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self subjectTree list expand: 1</body></methods><methods><class-id>ICC.ADvance.AD2OpenDiagramDialog</class-id> <category>updating</category><body package="ADvance2">updateSubjectTree	self subjectTree list root: self advance subjectEnvironment root displayIt: true</body></methods><methods><class-id>ICC.ADvance.AD2OpenDiagramDialog</class-id> <category>changing</category><body package="ADvance2">changedSubjectSelection	| selection diagrams |	selection := self subjectTree selection.	diagrams := selection isNil				ifTrue: [OrderedCollection new]				ifFalse: [selection diagramsWithFake].	self diagramTree list root: (AD2DiagramRoot new addAll: diagrams; yourself) displayIt: false</body><body package="ADvance2">enableButtons	self iccEnable: self diagramTree selection notNil group: #(#okButton)</body></methods><methods><class-id>ICC.ADvance.AD2OpenDiagramDialog</class-id> <category>aspects</category><body package="ADvance2">diagramTree	^diagramTree</body><body package="ADvance2">subjectTree	^subjectTree</body></methods><methods><class-id>ICC.ADvance.IccHTMLReference</class-id> <category>resultcreation</category><body package="ADvance2">createHTMLOn: aStream	"&lt;&gt; creates a HTML description on a stream aStream"	aStream cr.	self preHTMLOn: aStream.	(self content isEmpty)		ifFalse:[ self content first createHTMLOn: aStream ].	aStream nextPutAll: '"&gt;'.	(self content size &gt; 1)		ifTrue:[ (self content at: 2) createHTMLOn: aStream ].	self postHTMLOn: aStream.</body></methods><methods><class-id>ICC.ADvance.IccHTMLReference</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/A&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;A HREF="'</body></methods><methods><class-id>ICC.ADvance.IccHTMLReference class</class-id> <category>instance creation</category><body package="ADvance2">link: aHTMLItem1 text: aHTMLItem2	"^&lt;IccHTMLReference&gt;"	| aHTMLReference |	aHTMLReference := self new.	aHTMLReference		add: aHTMLItem1 ;		add: aHTMLItem2.	^aHTMLReference.</body><body package="ADvance2">linkText: aString1 text: aString2	"I create a new HTML link with two plain string. The actual link in aString1 and the comment the HTMl user can see in aString2"	^self link: (IccHTMLString newString: aString1)		text: (IccHTMLString newString: aString2)</body></methods><methods><class-id>ICC.ADvance.NVApplicationModel</class-id> <category>accessing</category><body package="ADvance2">components	^components</body><body package="ADvance2">domain	^domain</body><body package="ADvance2">domain: anObject	domain notNil ifTrue: [domain removeDependent: self].	domain := anObject.	domain notNil ifTrue: [domain addDependent: self]</body><body package="ADvance2">editor	^editor</body><body package="ADvance2">editor: anEditor	editor := anEditor</body></methods><methods><class-id>ICC.ADvance.NVApplicationModel</class-id> <category>drawing</category><body package="ADvance2">redraw	self editor redrawDamageArea</body><body package="ADvance2">redrawAll	self editor redrawAll</body></methods><methods><class-id>ICC.ADvance.NVApplicationModel</class-id> <category>control</category><body package="ADvance2">doubleClickAt: aPoint keyMode: aSymbol	"Subclass may override."</body></methods><methods><class-id>ICC.ADvance.NVApplicationModel</class-id> <category>private</category><body package="ADvance2">addComponent: aModel	"Add aModel to the receivers component collection."	self components add: aModel</body><body package="ADvance2">flushCaches	"Any information that the receiver caches that is platform dependent	is questionable. An example of bad information is font widths.	Notify my components."	self components do: [:each | each flushCaches]</body><body package="ADvance2">removeComponent: aModel	"Remove aModel from the receivers component collection."	self components remove: aModel</body></methods><methods><class-id>ICC.ADvance.NVApplicationModel</class-id> <category>initialize-release</category><body package="ADvance2">initialize	components := OrderedCollection new</body><body package="ADvance2">release	"Release all references which might contribute to circles."	components notNil		ifTrue:			[components copy do: [:each | each release].			components := OrderedCollection new].	domain notNil		ifTrue:			[domain removeDependent: self.			domain := nil].	super release</body></methods><methods><class-id>ICC.ADvance.NVApplicationModel</class-id> <category>menu creation</category><body package="ADvance2">actionMenu: aMenuBuilder	"Add menu entries to aMenuBuilder."</body></methods><methods><class-id>ICC.ADvance.NVApplicationModel class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>private</category><body package="ADvance2">buildAssociationModelFor: classModel1 with: aClientRelation	| class1 classModel2 class2 isReflexive associationModel edgesFrom1To2 edgesFrom2To1 |	class1 := classModel1 domain.	class2 := aClientRelation roleClass.	classModel2 := self projectionFor: class2.	isReflexive := class1 == class2.	associationModel := (isReflexive				ifTrue: [AD2ReflexiveAssociationModel]				ifFalse: [AD2AssociationModel])				newOn: self.	edgesFrom1To2 := classModel1 numberOfEdgesTo: classModel2.	edgesFrom2To1 := isReflexive				ifTrue: [0]				ifFalse: [classModel2 numberOfEdgesTo: classModel1].	associationModel		 vertex1: classModel1;		 vertex2: classModel2;		 clientRelation: aClientRelation;		 parallels1: edgesFrom1To2;		 parallels2: edgesFrom2To1;		 heading: (class1 name &lt; class2 name				ifTrue: [1]				ifFalse: [-1])</body><body package="ADvance2">calculateMaxExtentFor: aCollectionOfClasses	| maxWidth maxHeight |	maxWidth := maxHeight := 0.	aCollectionOfClasses		do:			[:aClass |			| projection x y |			projection := self projectionFor: aClass.			x := projection extent x.			y := projection extent y.			x &gt; maxWidth ifTrue: [maxWidth := x].			y &gt; maxHeight ifTrue: [maxHeight := y]].	^maxWidth @ maxHeight</body><body package="ADvance2">deleteModels	self components copy do: [:each | each delete].	self messageModels: OrderedCollection new.	self deleteTextModels</body><body package="ADvance2">drawTrees: classes offset: offset	"Draw classes as tree using offset as a start point. Answer the used area."	| usedArea origin environment |	usedArea := Rectangle origin: offset extent: Point zero.	environment := self domain environment.	classes		do:			[:aClass |			| objModel subclasses currentArea subtreeArea |			origin := usedArea topRight.			objModel := self projectionFor: aClass.			subclasses := aClass subclasses select: [:each | environment includes: each].			subclasses isEmpty				ifTrue: [objModel origin: origin]				ifFalse:					[| leftChild rightChild xMiddle overlap |					subtreeArea := self drawTrees: subclasses offset: origin + (0 @ (objModel extent y + self class initialSeparation y)).					leftChild := self projectionFor: subclasses first.					rightChild := self projectionFor: subclasses last.					xMiddle := leftChild location x + rightChild location x // 2.					objModel location: xMiddle @ origin y.					overlap := subtreeArea left - objModel origin x.					overlap &gt; 0 ifTrue: [self move: (subclasses copyWith: aClass)							by: overlap @ 0].					usedArea := usedArea merge: subtreeArea].			currentArea := Rectangle origin: objModel location extent: objModel extent + self class initialSeparation.			usedArea := usedArea merge: currentArea].	^usedArea</body><body package="ADvance2">generateScriptDocumentation: entryPoint	| reportStream |	Cursor wait		showWhile:			[reportStream := ReadWriteStream on: (OrderedCollection new: 100).			(self projectionFor: entryPoint baseClass)				printScriptDocumentationFor: entryPoint				index: 1				on: reportStream].	reportStream reset.	^reportStream</body><body package="ADvance2">goodGuessLocationWithSubFor: objModel	"^&lt;Point&gt; Answer as good guess for objModel's location a point over the center of	the subclasses.	@Pre	objModel's subclasses are in the diagram and already have locations assigned."	| subclasses subProjections subProjectionsArea |	subclasses := objModel domain subclasses.	subProjections := (subclasses collect: [:each | self projectionFor: each ifAbsent: [nil]])				select: [:each | each notNil and: [each location notNil]].	subProjectionsArea := subProjections inject: subProjections first area into: [:rectangle :each | rectangle merge: each area].	^subProjectionsArea topCenter - (0 @ (self class initialSeparation y + objModel extent y))</body><body package="ADvance2">goodGuessLocationWithSuperFor: objModel	"^&lt;Point&gt; Answer a good guess for objModel's location.	It is a position below the superclass it.	@Pre	objModel has its superclass in the diagram and this superclass			already has a location set."	^(self projectionFor: objModel domain superclass) area bottomCenter + (0 @ self class initialSeparation y)</body><body package="ADvance2">initializeClassLocations: aCollectionOfClasses offset: aPoint	"Places subclass trees horizontally and single classes as table under this forest."	| offset roots singles maxSinglesExtent usedArea |	roots := OrderedCollection new.	singles := OrderedCollection new.	aCollectionOfClasses do: [:each | (aCollectionOfClasses includes: each superclass)			ifFalse: [(each subclasses contains: [:eachSubclass | aCollectionOfClasses includes: eachSubclass])					ifTrue: [roots add: each]					ifFalse: [singles add: each]]].	usedArea := self drawTrees: roots offset: aPoint + (10 @ self class initialSeparation y).	maxSinglesExtent := self calculateMaxExtentFor: singles.	offset := usedArea bottomLeft.	self		fillRowsAndColumns: singles		skip: self class initialSeparation		offset: offset		vSize: (offset y + maxSinglesExtent y max: (1000 min: (600 max: usedArea height * 2)))</body><body package="ADvance2">initializeClassesWithSubs: classModels	classModels do: [:objModel | objModel location: (self goodGuessLocationWithSubFor: objModel)]</body><body package="ADvance2">initializeClassesWithSupers: classModels	classModels do: [:objModel | objModel location: (self goodGuessLocationWithSuperFor: objModel)]</body><body package="ADvance2">move: aCollectionOfClasses by: aPoint	aCollectionOfClasses		do:			[:aClass |			| aModel |			aModel := self projectionFor: aClass.			aModel location: aModel location + aPoint]</body><body package="ADvance2">setClassLocations: aCollectionOfClasses	| classesWithSupers classesWithSubs singleClasses rightMargin |	rightMargin := 0.	classesWithSupers := OrderedCollection new.	classesWithSubs := OrderedCollection new.	singleClasses := OrderedCollection new.	(SystemUtils sortForLoading: aCollectionOfClasses)		do:			[:eachClass |			| objModel objRightMargin |			objModel := self projectionFor: eachClass.			objModel location isNil				ifTrue:					[| superProjection |					superProjection := self projectionFor: eachClass superclass ifAbsent: [nil].					(superProjection notNil and: [superProjection location notNil])						ifTrue: [classesWithSupers add: objModel]						ifFalse:							[| subProjections |							subProjections := eachClass subclasses collect: [:each | self projectionFor: each ifAbsent: [nil]].							(subProjections select: [:each | each notNil and: [each location notNil]]) isEmpty								ifTrue: [singleClasses add: eachClass]								ifFalse: [classesWithSubs add: objModel]]]				ifFalse:					[objRightMargin := objModel area right.					objRightMargin &gt; rightMargin ifTrue: [rightMargin := objRightMargin]]].	self initializeClassesWithSupers: classesWithSupers.	self initializeClassesWithSubs: classesWithSubs.	self initializeClassLocations: singleClasses offset: rightMargin + self class initialSeparation x @ 0</body><body package="ADvance2">setZoomAndTranslation	| state |	state := self diagramState value.	state trackResize ifTrue: [^self controller fitToWindow].	state zoom isNil ifTrue: [^self].	self controller setZoomTo: state zoom.	self editor translation: (state translation isNil			ifTrue: [0 @ 0]			ifFalse: [state translation]).</body><body package="ADvance2">updateServices	self changed: #services</body><body package="ADvance2">window	^self controller window</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>scripts</category><body package="ADvance2">addMessageModelsFor: aService participantServices: services 	self		basicAddMessageModelsAndUnhide: true		for: aService		participantServices: services.	self redraw</body><body package="ADvance2">addUnhiddenMessageModelsFor: aService participantServices: services 	self		basicAddMessageModelsAndUnhide: false		for: aService		participantServices: services.	self redraw</body><body package="ADvance2">allMessages	"^&lt;Set of: AD2Message&gt; Answer a set of all messages (shown and hidden)."	^(self messageModels collect: [:each | each message]) asSet addAll: self hiddenMessages; yourself</body><body package="ADvance2">associationDepthOrNil	^self diagramState value associationDepth</body><body package="ADvance2">basicAddMessageModelsAndUnhide: aBoolean for: aService participantServices: services	"Add message models from aService to the participant services; avoids duplicates.	Depending on aBoolean, hidden services will now be visible or will not be added."	| newMessageModels vertex1 sumOfLocalMessages |	newMessageModels := OrderedCollection new.	sumOfLocalMessages := services size.	vertex1 := self projectionFor: aService baseClass.	services		keysAndValuesDo:			[:index :each |			| message messageModel |			message := AD2Message initiatorService: aService participantService: each.			((self hasMessage: message) or: [aBoolean not and: [self hidesMessage: message]])				ifFalse:					[| vertex2 |					(self hidesMessage: message) ifTrue: [self hiddenMessages remove: message].					vertex2 := self projectionFor: each baseClass.					(messageModel := AD2MessageModel newOn: self)						 vertex1: vertex1;						 vertex2: vertex2;						 message: message;						 globalNo: vertex1 messageCounter;						 localNo: index;						 sumOfLocalMessages: sumOfLocalMessages.					newMessageModels add: messageModel.					self messageModels add: messageModel.					vertex1 messageCounter: vertex1 messageCounter + 1]].	newMessageModels		do:			[:each |			each displayIn: self editor.			vertex1 update: #location with: vertex1 location]</body><body package="ADvance2">buildMessageModels	self diagramSpec value classesAndSpecsDo: [:eachClass :eachSpec | eachSpec services			do: 				[:each | 				| model |				model := self projectionFor: eachClass ifAbsent: [nil].				model isNil ifFalse: [model						traverseServices: each						depth: 1						do: [:eaService :eaParticipantServices :eaIndexStack | 							self addUnhiddenMessageModelsFor: eaService participantServices: eaParticipantServices]]]]</body><body package="ADvance2"> filterNonScriptServices	self classesDo: [:each | each setFilterForFilteringNonScriptServices];		 updateServices;		 redrawDamageArea</body><body package="ADvance2">hideMessages: aCollectionOfMessageModels	self hiddenMessages addAll: (aCollectionOfMessageModels collect: [:each | each message]).	self removeMessageModels: aCollectionOfMessageModels</body><body package="ADvance2">removeMessageModels: aCollectionOfMessageModels	| modelsToRemove |	modelsToRemove := aCollectionOfMessageModels copy.	modelsToRemove		do:			[:each |			| vertex1 |			vertex1 := each vertex1.			vertex1 messageCounter: vertex1 messageCounter - 1.			vertex1 edges remove: each.			each vertex2 edges remove: each ifAbsent: [].			each delete].	self messageModels removeAll: modelsToRemove</body><body package="ADvance2">removeScriptFor: aService	self removeMessageModels: (self messageModels select: [:aModel | aService = aModel initiatorService])</body><body package="ADvance2">scriptDepthOrNil	^self diagramState value scriptDepth</body><body package="ADvance2">scriptEntryPoints	"^&lt;OrderedCollection of: AD2Service&gt;	Answer the services S of all class models where there's no message model ending at S."	| result |	result := (self messageModels collect: [:each | each initiatorService]) asSet.	self messageModels do: [:each | result remove: each participantService ifAbsent: []].	^result asOrderedCollection</body><body package="ADvance2">scriptServices	"^&lt;SortedCollection of: AD2Service&gt;	Answer the services S of all class models where a script starts."	^(self messageModels collect: [:each | each initiatorService]) asSet asSortedCollection</body><body package="ADvance2">setVisibleMessages: visibleMessages	"Remove all message models, set the hidden messages and finally rebuild	scripts for the visible messages."	| allMessages |	allMessages := self allMessages.	self removeMessageModels: self messageModels.	self hiddenMessages: allMessages - visibleMessages.	self showMessages: visibleMessages.	self beModified</body><body package="ADvance2">showHiddenMessages	| hidden |	Cursor wait		showWhile:			[hidden := self hiddenMessages.			self hiddenMessages: Set new.			self showMessages: hidden]</body><body package="ADvance2">showMessages: aSetOfMessages 	aSetOfMessages do: [:eachMessage | self addMessageModelsFor: eachMessage initiatorService participantServices: (Array with: eachMessage participantService)]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>actions</category><body package="ADvance2">checkTypes	"Check types of the selected classes."	self advance types checkTypesFor: (self controller selectedClasses collect: [:each | each domain])</body><body package="ADvance2">doubleClickAt: aPoint keyMode: aSymbol	| event |	self domain isNil ifTrue: [^self].	event := aSymbol == #normal				ifTrue: [#diagramPlain]				ifFalse: [aSymbol == #shift						ifTrue: [#diagramShift]						ifFalse: [#diagramCtrl]].	self perform: (self advance preferences painter doubleClickActionAt: event using: self class doubleClickList)</body><body package="ADvance2">editFilter	^self controller openDiagramFilterEditor</body><body package="ADvance2">editProperties	| subject diagram |	subject := self domain.	diagram := self diagramSpec value.	diagram state: self diagramState value.	((self advance diagramPropertiesClass new model: diagram)		openInterface: #windowSpec for: self window)		ifFalse: [^self].	diagram name isNil ifTrue:[^self controller saveAs].	subject saveDiagram: diagram</body><body package="ADvance2">editSubject	^self controller editSubject</body><body package="ADvance2">loadDiagramOn: subject name: diagramNameOrNil	Cursor wait		showWhile:			[self deleteModels.			self controller inferTypesFor: subject.			self controller				hideFooterAndDo:					[self controller showStatus: 'Building diagram...'.					self buildOn: subject diagram: diagramNameOrNil.					self components do: [:each | each displayIn: self editor].					self setZoomAndTranslation.					self controller footerProgress value: 0.9.					self editor redrawAll.					self buildMessageModels.					self controller footerProgress value: 1.					self modified value: false]]</body><body package="ADvance2">openScriptDocuDialog	| aDialog |	self messageModels isEmpty ifTrue: [^self adDialog message: 'The diagram contains no scripts.' for: self window].	aDialog := self advance scriptDocuDialogClass new targetModel: self.	aDialog entryPoints list: self scriptServices.	aDialog openInterface: #windowSpec for: self window</body><body package="ADvance2">previewScriptDocumentation: entryPoint	"Create a textStream, put the report into it and display it in a window."	| aStream reportStream |	(reportStream := self generateScriptDocumentation: entryPoint) isNil ifTrue: [^self].	aStream := TextStream on: (String new: 1024).	[reportStream atEnd]		whileFalse: [aStream nextPutAllText: reportStream next].	ComposedTextView		open: aStream contents asText asParagraph asValue		label: 'ADvance Script Documentation'		icon: (Icon constantNamed: #workspace)		extent: 500 @ 350</body><body package="ADvance2">printScriptDocumentation: entryPoint	"Create a postscript document, put the report into it and print it."	| reportStream textStyle aDocument |	(reportStream := self generateScriptDocumentation: entryPoint) isNil ifTrue: [^self].	textStyle := VariableSizeTextAttributes styleNamed: #small.	aDocument := Document new.	aDocument setMargins: (1 @ 0.5 corner: 1 @ 1);		doFooter: true		footerString: 'ADvance Script Documentation'		doPageNumbers: true.	[reportStream atEnd]		whileFalse: [aDocument addText: reportStream next under: textStyle].	aDocument close; toPrinter</body><body package="ADvance2">reloadDiagram	"Very similar to loadDiagramOn:name: without reading the spec 	again but using the changed spec instead."	Cursor wait		showWhile:			[			self diagramSpec value: self updatedDiagramSpec.			self diagramSpec value resetClassSpecsCache.			self deleteModels.			self controller inferTypesFor: self domain.			self controller				hideFooterAndDo:					[self controller showStatus: 'Rebuilding diagram...'.					self rebuildDiagram.					self components do: [:each | each displayIn: self editor].					self setZoomAndTranslation.					self controller footerProgress value: 0.9.					self editor redrawAll.					self buildMessageModels.					self controller footerProgress value: 1]]</body><body package="ADvance2">removeFiltersFor: aCollectionOfClassModels	| classModelsWithFilters |	classModelsWithFilters := aCollectionOfClassModels select: [:each | each hasLocalFilter].	classModelsWithFilters isEmpty ifTrue: [^self adDialog message: 'There are no class filters to remove.' for: self window].	(classModelsWithFilters size = 1 or: [self adDialog confirm: 'Do you want to remove all class filters?' for: self window])		ifFalse: [^self].	classModelsWithFilters do: [:each | each basicRemoveFilter].	self redrawAll; beModified</body><body package="ADvance2">removeScriptsFor: aCollectionOfClassModels	| services |	services := Set new.	aCollectionOfClassModels do: [:each | services addAll: each visibleScripts].	services isEmpty ifTrue: [^self adDialog message: 'There are no scripts to remove.' for: self window].	(services size = 1 or: [self adDialog confirm: 'Do you want to remove all scripts?' for: self window])		ifFalse: [^self].	services copy do: [:each | self removeScriptFor: each].	self redraw; beModified</body><body package="ADvance2">showAllClasses	Cursor wait		showWhile:			[self classModels do: [:aClassModel | aClassModel isVisible: true].			self controller editor redrawDamageArea]</body><body package="ADvance2">updateAttributes	self changed: #attributes</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>accessing-projection</category><body package="ADvance2">domainToProjectionMapping	^domainToProjectionMapping</body><body package="ADvance2">domainToProjectionMapping: aDictionary	domainToProjectionMapping := aDictionary</body><body package="ADvance2">projectionFor: aDomainObject	^self projectionFor: aDomainObject ifAbsent: [Root keyNotFoundError: aDomainObject]</body><body package="ADvance2">projectionFor: aDomainObject ifAbsent: aBlock	^self domainToProjectionMapping at: aDomainObject ifAbsent: aBlock</body><body package="ADvance2">projectionFor: aDomainObject is: aProjectionObject	self domainToProjectionMapping at: aDomainObject put: aProjectionObject</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>accessing</category><body package="ADvance2">beModified	"This method forces an update of the displayed information as a side effect.	If isModified is true and the user closes the diagram without saving, he will	be ask wether he wants to save."	self modified value: true</body><body package="ADvance2">beUnmodified	self modified value: false</body><body package="ADvance2">classModels	^self domainToProjectionMapping isNil		ifTrue: [OrderedCollection new]		ifFalse: [self domainToProjectionMapping values]</body><body package="ADvance2">controller	^controller</body><body package="ADvance2">controller: aController	controller := aController</body><body package="ADvance2">description	^self domain description</body><body package="ADvance2">description: aText	self domain description: aText.	^true</body><body package="ADvance2">diagramName	^self diagramNameOrNil isNil		ifTrue: [self advance diagramSpecClass unnamedString]		ifFalse: [self diagramNameOrNil]</body><body package="ADvance2">diagramName: aString	self diagramSpec value name: aString</body><body package="ADvance2">diagramNameOrNil	^self diagramSpec value name</body><body package="ADvance2">dottedText	^dottedText isNil		ifTrue: [dottedText := self getTextFor: '...']		ifFalse: [dottedText]</body><body package="ADvance2">emptyText	^emptyText isNil		ifTrue: [emptyText := self getTextFor: ' ']		ifFalse: [emptyText]</body><body package="ADvance2">fullDiagramName	^self diagramSpec value subjectAndDiagramName</body><body package="ADvance2">hiddenClasses	^self classModels select: [:aClassModel | aClassModel visible = false]</body><body package="ADvance2">hiddenMessages	^hiddenMessages</body><body package="ADvance2">hiddenMessages: aSet	hiddenMessages := aSet</body><body package="ADvance2">messageModels	^messageModels</body><body package="ADvance2">messageModels: aCollection	messageModels := aCollection</body><body package="ADvance2">structureFilter	^structureFilter isNil		ifTrue: [structureFilter := self advance preferences general defaultFilter]		ifFalse: [structureFilter]</body><body package="ADvance2">structureFilter: aFilter	structureFilter := aFilter</body><body package="ADvance2">suggestedDiagramName	| scriptEntryPoints |	^(self showScripts value and: [(scriptEntryPoints := self scriptEntryPoints) size = 1])		ifTrue: [scriptEntryPoints first classAndSelector]		ifFalse: [self diagramName]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>aspects</category><body package="ADvance2">diagramSpec	^diagramSpec</body><body package="ADvance2">diagramState	^diagramState</body><body package="ADvance2">modified	^modified</body><body package="ADvance2">showAssociations	^showAssociations</body><body package="ADvance2">showAttributes	^showAttributes</body><body package="ADvance2">showNamespaces	^showNamespaces</body><body package="ADvance2">showScripts	^showScripts</body><body package="ADvance2">showServices	^showServices</body><body package="ADvance2">showStructure	^showStructure</body><body package="ADvance2">showTypes	^showTypes</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>changing</category><body package="ADvance2">changed: anAspectSymbol with: aParameter	super changed: anAspectSymbol with: aParameter.	self components do: [:aModel | aModel			update: anAspectSymbol			with: aParameter			from: self]</body><body package="ADvance2">changedShowAssociations	| layer |	layer := self editor layers at: 2.	layer isVisible = self showAssociations value ifTrue: [^self].	Cursor wait		showWhile:			[layer isVisible: self showAssociations value.			self redrawAll; beModified]</body><body package="ADvance2">changedShowAttributes	Cursor wait		showWhile:			[self changed: #attributes.			self redraw; beModified]</body><body package="ADvance2">changedShowNamespaces	Cursor wait		showWhile:			[self changed: #namespaces.			self redraw; beModified]</body><body package="ADvance2">changedShowScripts	| layer |	layer := self editor layers at: 3.	layer isVisible = self showScripts value ifTrue: [^self].	Cursor wait		showWhile:			[layer isVisible: self showScripts value.			self redrawAll; beModified]</body><body package="ADvance2">changedShowServices	Cursor wait		showWhile:			[self changed: #services.			self redraw; beModified]</body><body package="ADvance2">changedShowStructure	| layer |	layer := self editor layers at: 1.	layer isVisible = self showStructure value ifTrue: [^self].	Cursor wait		showWhile:			[layer isVisible: self showStructure value.			self redrawAll; beModified]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>building</category><body package="ADvance2">addClassModelFor: aClass at: aPoint	self buildClassModelsFor: (Array with: aClass).	(self projectionFor: aClass)		location: aPoint</body><body package="ADvance2">basicBuild	| domainClasses classModels |	self structureFilter: self diagramSpec value filter.	self hiddenMessages: self diagramSpec value hiddenMessages.	self controller footerProgress value: 0.05.	self buildTextModels.	self controller footerProgress value: 0.1.	domainClasses := self domain allClasses.	self buildClassModelsFor: domainClasses.	self controller footerProgress value: 0.2.	classModels := self domainToProjectionMapping values.	classModels do: [:each | each updateContents].	self controller footerProgress value: 0.3.	self setClassLocations: domainClasses.	self controller footerProgress value: 0.4.	self buildInheritanceModelsFor: classModels.	self controller footerProgress value: 0.5.	self buildAssociationModelsFor: classModels.	self controller footerProgress value: 0.6.	self setManualLayouts.	self controller footerProgress value: 0.7.	self hideHiddenClasses.	self controller footerProgress value: 0.8</body><body package="ADvance2">buildAssociationModelsFor: aCollectionOfClassModels	aCollectionOfClassModels do: [:aClassModel | aClassModel contextClientRelations do: [:aClientRelation | self buildAssociationModelFor: aClassModel with: aClientRelation]]</body><body package="ADvance2">buildClassModelsFor: aCollectionOfClasses	| viewData |	viewData := self diagramSpec value.	aCollectionOfClasses		do:			[:eachClass |			| objModel classSpec |			objModel := (self advance classModelClass newOn: self)						domain: eachClass.			classSpec := viewData classSpecFor: eachClass.			classSpec isNil ifFalse: [objModel					location: classSpec location;					visible: classSpec visible;					structureFilter: classSpec filter;					backgroundColor: classSpec backgroundColor;					showsAttributes: classSpec showAttributes;					showsServices: classSpec showServices;					showsTypes: classSpec showTypes;					showsNamespaces: classSpec showNamespaces].			objModel updateContents.			self projectionFor: eachClass is: objModel]</body><body package="ADvance2">buildInheritanceModelsFor: superclassModels	| environment |	environment := self domain environment.	superclassModels do: [:aClassModel | aClassModel domain subclasses do: [:aSubclass | (environment includes: aSubclass)				ifTrue: [(AD2InheritanceModel newOn: self)						vertex1: aClassModel;						vertex2: (self projectionFor: aSubclass)]]]</body><body package="ADvance2">buildOn: aSubject diagram: aStringOrNil	(aStringOrNil notNil and: [aSubject hasDiagramNamed: aStringOrNil])		ifTrue:			[| diagram |			diagram := aSubject diagramFor: aStringOrNil.			self diagramSpec value: diagram.			self diagramState value: diagram state]		ifFalse: [self diagramSpec value: (self advance diagramSpecClass new					 subject: aSubject;					 name: aStringOrNil;					 yourself)].	self domain: aSubject.	self domainToProjectionMapping: Dictionary new.	self basicBuild</body><body package="ADvance2">buildTextModels	self deleteTextModels.	self diagramSpec value texts do: [:aSpec | self addText: aSpec text at: aSpec location]</body><body package="ADvance2">hideHiddenClasses	self classModels do: [:aClassModel | aClassModel visible ifFalse: [aClassModel visible: false]]</body><body package="ADvance2">rebuildDiagram	"Build diagram again from current spec but do not open the saved diagram.	This will keep the open changes in the painter."	self domainToProjectionMapping: Dictionary new.	self basicBuild</body><body package="ADvance2">setManualLayouts	self diagramSpec value		classesAndSpecsDo: 			[:eachClass :eachSpec | 			| vertex1 |			vertex1 := self projectionFor: eachClass ifAbsent: [nil].			vertex1 isNil ifFalse: [eachSpec layouts					do: 						[:eachLayoutSpec | 						| vertex2 edge |						vertex2 := self projectionFor: eachLayoutSpec vertex2 ifAbsent: [nil].						edge := vertex1 associationTo: vertex2 attribute: eachLayoutSpec attribute.						edge isNil							ifFalse: 								[eachLayoutSpec setLayoutFor: edge.								edge aggregationType: eachLayoutSpec aggregationType]]]]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>testing</category><body package="ADvance2">hasMessage: anADMessage	^self messageModels contains: [:each | anADMessage = each message]</body><body package="ADvance2">hidesMessage: anADMessage	^self hiddenMessages includes: anADMessage</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>diagrams specs</category><body package="ADvance2">basicSaveDiagram	"Saves the diagram to its subject. If subject base class is nil, the subject is copied from the 	current subject, now belonging to a new created class."	Cursor wait		showWhile:			[| newDiagramSpec |			newDiagramSpec := self updatedDiagramSpec.			self controller footerProgress value: 0.4.			self domain baseClass isNil 				ifTrue: [self domain: self domain copyWithCreatedBaseClass].			self domain baseClass notNil				ifTrue: [self domain saveDiagram: newDiagramSpec]]</body><body package="ADvance2">componentsViewData	^self classModels collect: [:each | each createClassViewData]</body><body package="ADvance2">saveDiagram	self domain isNil ifTrue: [^self].	self controller		hideFooterAndDo:			[self controller showStatus: 'Saving diagram...'.			self controller footerProgress value: 0.2.			self basicSaveDiagram.			self controller footerProgress value: 1.			(Delay forMilliseconds: 10) wait]</body><body package="ADvance2">textsViewData	^self textModels collect: [:each | each asSpec]</body><body package="ADvance2">updatedDiagramSpec	"^&lt;AD2DiagramSpec&gt;	Answers a spec which contains all of the done changes."	self diagramState value zoom: self controller zoom value; translation: self editor translation.	^self diagramSpec value copy		author: self advance preferences general identity;		state: self diagramState value;		filter: self structureFilter;		texts: self textsViewData;		hiddenMessages: self hiddenMessages;		classes: self componentsViewData;		yourself.</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>enumerating</category><body package="ADvance2">classesDo: aBlock	self components do: [:each | each domainType = #class ifTrue: [aBlock value: each]]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>drawing</category><body package="ADvance2">redrawDamageArea	self editor redrawAll "eigentlich redrawDamageArea"</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>utility</category><body package="ADvance2">fillColumn: aCollectionOfModels skip: skip topCenter: topCenter	| location |	location := topCenter.	aCollectionOfModels		do:			[:each |			each location: location - (each extent x // 2 @ 0).			location := location + (0 @ (each extent y + skip y))]</body><body package="ADvance2">fillRowsAndColumns: aCollection skip: skip offset: aPoint vSize: vSize	| columnObjects columnArea |	columnObjects := OrderedCollection new.	columnArea := Rectangle origin: aPoint extent: Point zero.	aCollection		do:			[:aDomainObject |			| objModel newArea |			objModel := self projectionFor: aDomainObject.			newArea := Rectangle origin: columnArea bottomLeft + (0 @ skip y) extent: objModel extent.			newArea bottom &gt; vSize				ifTrue:					[self						fillColumn: columnObjects						skip: skip						topCenter: columnArea topCenter.					columnArea := Rectangle origin: columnArea right + skip x @ aPoint y extent: Point zero.					columnObjects := OrderedCollection new.					newArea := Rectangle origin: columnArea bottomLeft + (0 @ skip y) extent: objModel extent].			columnObjects add: objModel.			columnArea := columnArea merge: newArea].	self		fillColumn: columnObjects		skip: skip		topCenter: columnArea topCenter</body><body package="ADvance2">getTextFor: aStringOrText	^NVComposedText		withText: aStringOrText		style: self editor textStyle		printStyle: self editor printTextStyle</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>text models</category><body package="ADvance2">addText: aText at: aPoint	| component |	component := AD2TextModel newOn: self.	self textModels add: component.	self beModified.	^component		 text: aText asText;		 location: aPoint;		 yourself</body><body package="ADvance2">deleteTextModels	textModels := OrderedCollection new</body><body package="ADvance2">textModels	^textModels</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	modified := false asValue.	diagramSpec := self advance diagramSpecClass new asValue.	diagramState := AD2DiagramState new asValue.	(showStructure := (AspectAdaptor subjectChannel: diagramState)				forAspect: #inheritanceVisible) onChangeSend: #changedShowStructure to: self.	(showAttributes := (AspectAdaptor subjectChannel: diagramState)				forAspect: #attributesVisible) onChangeSend: #changedShowAttributes to: self.	(showAssociations := (AspectAdaptor subjectChannel: diagramState)				forAspect: #associationsVisible) onChangeSend: #changedShowAssociations to: self.	(showTypes := (AspectAdaptor subjectChannel: diagramState)				forAspect: #typesVisible) onChangeSend: #changedShowAttributes to: self.	(showServices := (AspectAdaptor subjectChannel: diagramState)				forAspect: #servicesVisible) onChangeSend: #changedShowServices to: self.	(showNamespaces := (AspectAdaptor subjectChannel: diagramState)				forAspect: #namespacesVisible) onChangeSend: #changedShowNamespaces to: self.	(showScripts := (AspectAdaptor subjectChannel: diagramState)				forAspect: #scriptsVisible) onChangeSend: #changedShowScripts to: self.	messageModels := OrderedCollection new.	textModels := OrderedCollection new.	hiddenMessages := Set new</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel</class-id> <category>menu creation</category><body package="ADvance2">actionMenu: aMenuBuilder	"Add menu entries to aMenuBuilder."	| controllerHasSelectedClasses |	self domain isNil ifTrue: [^self].	controllerHasSelectedClasses := self controller hasSelectedClasses.	aMenuBuilder		 addLabel: 'Subject...' value: [self editSubject];		 addLabel: 'Diagram filter...' value: [self editFilter];			addLabel: 'Remove filters'			value: [self controller removeFilters]			enabled: controllerHasSelectedClasses;			addLabel: 'Remove scripts'			value: [self controller removeScripts]			enabled: controllerHasSelectedClasses;		 line;			addLabel: 'Hide'			value: [self controller hideSelectedClasses]			enabled: controllerHasSelectedClasses;			addLabel: 'Delete'			value: [self controller removeClassesFromSubject]			enabled: controllerHasSelectedClasses;		 line;		 beginSubMenuLabeled: 'Utilities';			addLabel: 'Remove...'			value: [self controller removeClassesFromSystem]			enabled: controllerHasSelectedClasses;		 line;			addLabel: 'Check types...'			value: [self checkTypes]			enabled: controllerHasSelectedClasses;		 endSubMenu.	aMenuBuilder line; 		addLabel: 'Properties...' value: [self editProperties]; 		line;		addLabel: 'Change color...' value: [self controller pickClassesBackgroundColor] enabled: controllerHasSelectedClasses;		addLabel: 'Default color' value: [self controller resetClassesBackgroundColor] enabled: controllerHasSelectedClasses</body></methods><methods><class-id>ICC.ADvance.AD2DiagramModel class</class-id> <category>constants</category><body package="ADvance2">doubleClickList	"^&lt;Array of: (Association key: String value: Symbol)&gt;	Answer a mapping from menu items to selector symbols that are performed. This mapping is	used in the Painter Preferences dialog to assign actions to double clicks which are combined	with different keyboard events.	@Post	The result size should be &gt;= 3."	^Array		with: 'Subject...' -&gt; #editSubject		with: 'Properties...' -&gt; #editProperties		with: 'Filter...' -&gt; #editFilter</body><body package="ADvance2">initialSeparation	^50 @ 50</body></methods><methods><class-id>ICC.ADvance.AD2TabbedDialog</class-id> <category>private</category><body package="ADvance2">disableField: componentId with: aBuilder	| component |	(component := aBuilder componentAt: componentId) isNil ifTrue: [^self].	component widgetState colors: nil.	component widget controller readOnly: true</body><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^self subclassResponsibility</body><body package="ADvance2">resources	^self class resources</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.AD2TabbedDialog</class-id> <category>changing</category><body package="ADvance2">tabsChanged	| tabIndex |	tabIndex := self tabs selectionIndex.	(self builder componentAt: #tabbing) widget client: self spec: (self specArray at: tabIndex) builder: self builder</body></methods><methods><class-id>ICC.ADvance.AD2TabbedDialog</class-id> <category>interface opening</category><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self tabsChanged</body></methods><methods><class-id>ICC.ADvance.AD2TabbedDialog</class-id> <category>aspects</category><body package="ADvance2">tabs	"Answer a SelectionInList for the tabs."	tabs isNil		ifTrue:			[tabs := SelectionInList with: self labelArray.			tabs selectionIndex: 1.			tabs selectionIndexHolder onChangeSend: #tabsChanged to: self].	^tabs</body></methods><methods><class-id>ICC.ADvance.AD2TabbedDialog class</class-id> <category>private</category><body package="ADvance2">resources	^self advance resources</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>actions-colors</category><body package="ADvance2">chooseAbstractClassColor	| color |	(color := self adDialog chooseColorFor: self builder window) isNil ifTrue: [^self].	self abstractClassColor value: color.	self setAbstractClassColor: color</body><body package="ADvance2">chooseBrowserSelectedClassColor	| color |	(color := self adDialog chooseColorFor: self builder window) isNil ifTrue: [^self].	self browserSelectedClassColor value: color.	self setBrowserSelectedClassColor: color</body><body package="ADvance2">chooseConcreteClassColor	| color |	(color := self adDialog chooseColorFor: self builder window) isNil ifTrue: [^self].	self concreteClassColor value: color.	self setConcreteClassColor: color</body><body package="ADvance2">chooseInheritanceColor	| color |	(color := self adDialog chooseColorFor: self builder window) isNil ifTrue: [^self].	self inheritanceColor value: color.	self setInheritanceColor: color</body><body package="ADvance2">chooseRelationColor	| color |	(color := self adDialog chooseColorFor: self builder window) isNil ifTrue: [^self].	self relationColor value: color.	self setRelationColor: color</body><body package="ADvance2">chooseSubjectClassColor	| color |	(color := self adDialog chooseColorFor: self builder window) isNil ifTrue: [^self].	self subjectClassColor value: color.	self setSubjectClassColor: color</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>aspects-layout</category><body package="ADvance2">inheritanceLayoutType	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #inheritanceLayoutType)		triggerChannel: self accept</body><body package="ADvance2">layoutText	^'These options affect the diagram layout.' asValue</body><body package="ADvance2">relationLayoutType	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #relationLayoutType)		triggerChannel: self accept</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>aspects-color</category><body package="ADvance2">abstractClassColor	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #abstractClassColor)		triggerChannel: self accept</body><body package="ADvance2">browserSelectedClassColor	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #browserSelectedClassColor)		triggerChannel: self accept</body><body package="ADvance2">colorText	^'Color is used to highlight different types of information.' asValue</body><body package="ADvance2">coloredPrinting	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #coloredPrinting)		triggerChannel: self accept</body><body package="ADvance2">concreteClassColor	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #concreteClassColor)		triggerChannel: self accept</body><body package="ADvance2">inheritanceColor	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #inheritanceColor)		triggerChannel: self accept</body><body package="ADvance2">relationColor	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #relationColor)		triggerChannel: self accept</body><body package="ADvance2">subjectClassColor	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #subjectClassColor)		triggerChannel: self accept</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>private</category><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^(Array new: 4)		at: 1 put: 'General';		"at: 2 put:  self class fontsOpaqueImage -&gt; 'Fonts';"		at: 2 put: self class colorsOpaqueImage -&gt; 'Colors';		at: 3 put: 'Layout';		at: 4 put: 'Shortcuts';		yourself</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#generalSpec "#fontsSpec" #colorsSpec #layoutSpec #shortcutsSpec)</body><body package="ADvance2">subject	^self advance preferences painter</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>aspects-shortcuts</category><body package="ADvance2">classCtrlDoubleClickAction	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #classCtrlDoubleClickAction)		triggerChannel: self accept</body><body package="ADvance2">classDoubleClickActionList	^self subject classDoubleClickItems asValue</body><body package="ADvance2">classPlainDoubleClickAction	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #classPlainDoubleClickAction)		triggerChannel: self accept</body><body package="ADvance2">classShiftDoubleClickAction	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #classShiftDoubleClickAction)		triggerChannel: self accept</body><body package="ADvance2">diagramCtrlDoubleClickAction	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #diagramCtrlDoubleClickAction)		triggerChannel: self accept</body><body package="ADvance2">diagramDoubleClickActionList	^self subject diagramDoubleClickItems asValue</body><body package="ADvance2">diagramPlainDoubleClickAction	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #diagramPlainDoubleClickAction)		triggerChannel: self accept</body><body package="ADvance2">diagramShiftDoubleClickAction	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #diagramShiftDoubleClickAction)		triggerChannel: self accept</body><body package="ADvance2">shortcutsText	^'You can choose your preferred double click shortcuts.' asValue</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>private-colors</category><body package="ADvance2">setAbstractClassColor: aPaint	(self builder componentAt: #abstractClassColorRegion) widget insideColor: aPaint</body><body package="ADvance2">setBrowserSelectedClassColor: aPaint	(self builder componentAt: #browserSelectedClassColorRegion) widget insideColor: aPaint</body><body package="ADvance2">setConcreteClassColor: aPaint	(self builder componentAt: #concreteClassColorRegion) widget insideColor: aPaint</body><body package="ADvance2">setInheritanceColor: aPaint	(self builder componentAt: #inheritanceColorRegion) widget insideColor: aPaint</body><body package="ADvance2">setRelationColor: aPaint	(self builder componentAt: #relationColorRegion) widget insideColor: aPaint</body><body package="ADvance2">setSubjectClassColor: aPaint	(self builder componentAt: #subjectClassColorRegion) widget insideColor: aPaint</body><body package="ADvance2">updateColors	self setConcreteClassColor: self concreteClassColor value.	self setAbstractClassColor: self abstractClassColor value.	self setSubjectClassColor: self subjectClassColor value.	self setBrowserSelectedClassColor: self browserSelectedClassColor value.	self setRelationColor: self relationColor value.	self setInheritanceColor: self inheritanceColor value</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>aspects-fonts</category><body package="ADvance2">classesFont	^classesFont isNil		ifTrue: [classesFont := 'Helvetica' asValue]		ifFalse: [classesFont]</body><body package="ADvance2">fontsText	^'These fonts are used in diagrams and for printing.' asValue</body><body package="ADvance2">relationsFont	^relationsFont isNil		ifTrue: [relationsFont := 'Helvetica' asValue]		ifFalse: [relationsFont]</body><body package="ADvance2">textFont	^textFont isNil		ifTrue: [textFont := 'Helvetica' asValue]		ifFalse: [textFont]</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>actions-fonts</category><body package="ADvance2">chooseClassFont	(self adDialog chooseFontFor: self builder window) isNil ifTrue: [^self].	self adDialog unimplementedFor: self builder window</body><body package="ADvance2">chooseRelationFont	(self adDialog chooseFontFor: self builder window) isNil ifTrue: [^self].	self adDialog unimplementedFor: self builder window</body><body package="ADvance2">chooseTextFont	(self adDialog chooseFontFor: self builder window) isNil ifTrue: [^self].	self adDialog unimplementedFor: self builder window</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>aspects-general</category><body package="ADvance2">generalText	^'These options determine the painters general behavior.' asValue</body><body package="ADvance2">showGridOnStartup	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #showGridOnStartup)		triggerChannel: self accept</body><body package="ADvance2">startupGridSize	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #startupGridSize)		triggerChannel: self accept</body><body package="ADvance2">subjectExpansionType	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #subjectExpansionType)		triggerChannel: self accept</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self tabs selectionIndex = (self specArray indexOf: #colorsSpec) ifTrue: [self updateColors]</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog class</class-id> <category>opaque images</category><body package="ADvance2">colorsOpaqueImage	^self resources opaqueImageFor: self named: #colorsImage</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>control</category><body package="ADvance2">beMovedBy: vector	"I am moved by aVector and do the display bookkeeping. Subclasses may override."</body><body package="ADvance2">deselect	"Set the selection to false and inform the model if it exists."	self isSelected: false.	self editor removeFromSelection: self topWrapper.	self model update: #selected with: false.	self invalidate</body><body package="ADvance2">modelActionMenu: aMenuBuilder	self model notNil ifTrue: [self model actionMenu: aMenuBuilder]</body><body package="ADvance2">select	"Set the selection to true and inform the model if it exists."	self isSelected: true.	self editor addToSelection: self topWrapper.	self model update: #selected with: true.	self invalidate</body><body package="ADvance2">switchSelection	"Switch the selection."	self isSelected		ifTrue: [self deselect]		ifFalse: [self select]</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>accessing</category><body package="ADvance2">area	^area</body><body package="ADvance2">area: aRectangle	area := aRectangle</body><body package="ADvance2">damageArea	"^&lt;Rectangle&gt; Answer the area to be refreshed, we expand this area for proper updates"	^self area expandedBy: 1</body><body package="ADvance2">isSelected	^isSelected</body><body package="ADvance2">isSelected: aBoolean	isSelected := aBoolean</body><body package="ADvance2">model	^model</body><body package="ADvance2">model: aModel	"Set the receiver's model to aModel."	self setModel: aModel</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>displaying</category><body package="ADvance2">invalidate	"Invalidate the receiver's damageArea."	self invalidateRectangle: self damageArea</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>testing</category><body package="ADvance2">hasCursor: aPoint	"Answer wether aPoint is in my damage area."	^self isSensitive and: [self damageArea containsPoint: aPoint]</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	isSelected := false</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>private</category><body package="ADvance2">setModel: aModel	"Set the receiver's model to be aModel."	model == aModel ifTrue: [^self].	model isNil ifFalse: [model removeDependent: self].	(model := aModel) isNil ifFalse: [model addDependent: self]</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>updating</category><body package="ADvance2">update: anAspectSymbol with: aParameter	anAspectSymbol == #visible ifTrue: [^self topWrapper isVisible: aParameter].	anAspectSymbol == #delete ifTrue: [^self delete].	^super update: anAspectSymbol with: aParameter</body></methods><methods><class-id>ICC.ADvance.NVDependentPart</class-id> <category>printing</category><body package="ADvance2">printOn: aStream	"Write a printable representation on aStream."	super printOn: aStream.	aStream nextPut: $(.	self area printOn: aStream.	aStream nextPut: $)</body></methods><methods><class-id>ICC.ADvance.NVView</class-id> <category>private</category><body package="ADvance2">getController	"Answer the receiver`s current controller. If the receiver's controller	is nil (the default case), an initialized instance of the receiver's	default controller is installed and returned."	controller isNil ifTrue: [self setController: self defaultController].	^controller</body><body package="ADvance2">setController: aController	"Set the receiver's controller to aController. If aController is not nil, its view is set to the receiver	and its model is set to the receiver's model."	aController isNil		ifFalse:			[aController view: self.			aController model: model].	controller := aController</body><body package="ADvance2">setModel: aModel	"Set the receiver's model to be aModel. Also set the receiver's controllers model."	super setModel: aModel.	controller isNil		ifFalse: [controller model: aModel]</body></methods><methods><class-id>ICC.ADvance.NVView</class-id> <category>controller accessing</category><body package="ADvance2">controller	"Answer the receiver`s current controller. If the receiver's controller	is nil (the default case), an initialized instance of the receiver's	default controller is installed and returned."	^self getController</body><body package="ADvance2">controller: aController	"Set the receiver's controller to aController.  An instance of NoController can be	specified to indicate that the receiver will not have a controller.  The model of	aController is set to the receiver's model."	self setController: aController</body><body package="ADvance2">defaultController	"Answer an initialized instance of the receiver's default controller.	Subclasses should redefine this message only if the default controller	instances need to be initialized in a nonstandard way."	^self defaultControllerClass new</body><body package="ADvance2">defaultControllerClass	"Answer the class of the default controller for the receiver."	"Subclasses should redefine defaultControllerClass if the class of the	default controller is not Controller."	^Controller</body></methods><methods><class-id>ICC.ADvance.AD2RelationPart</class-id> <category>accessing</category><body package="ADvance2">damageArea	"^&lt;Rectangle&gt; Answer the area to be refreshed, we expand this area for proper updates"	^self area expandedBy: 2</body><body package="ADvance2">line	^line</body><body package="ADvance2">line: aPolyline	line := aPolyline</body><body package="ADvance2">symbol	^symbol</body><body package="ADvance2">symbol: aPolyline	symbol := aPolyline</body></methods><methods><class-id>ICC.ADvance.AD2RelationPart</class-id> <category>priviledged-accessing</category><body package="ADvance2">selectionRectangleAt: anInteger	^(self model originBoxAt: anInteger)		scaledBy: self editor scale</body></methods><methods><class-id>ICC.ADvance.AD2RelationPart</class-id> <category>updating</category><body package="ADvance2">update: aSymbol with: aParameter	(aSymbol == #shape or: [aSymbol == #location])		ifTrue:			[self invalidate.			self updateForDisplay.			^self invalidate].	aSymbol == #visible		ifTrue:			[aParameter ifFalse: [self invalidate].			self isVisible: aParameter.			aParameter ifTrue: [self invalidate].			^self].	super update: aSymbol with: aParameter</body><body package="ADvance2">updateForDisplay	self updateForDisplayScaled: self editor scale</body><body package="ADvance2">updateForDisplayScaled: scale	self line: (self model line scaledBy: scale).	self model symbol isNil		ifTrue:			[self symbol: nil.			self area: self line bounds]		ifFalse:			[self symbol: (self model symbol scaledBy: scale).			self area: (self line bounds merge: (self symbol bounds expandedBy: 1))]</body></methods><methods><class-id>ICC.ADvance.AD2RelationPart</class-id> <category>private-displaying</category><body package="ADvance2">displaySelectionMarkerOn: aGraphicsContext	aGraphicsContext		displayRectangle: (self selectionRectangleAt: 1);		displayRectangle: (self selectionRectangleAt: 2)</body></methods><methods><class-id>ICC.ADvance.AD2InheritancePart</class-id> <category>testing</category><body package="ADvance2">isSensitive	^false</body></methods><methods><class-id>ICC.ADvance.AD2InheritancePart</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	aGraphicsContext paint: ColorValue black.	self line displayStrokedOn: aGraphicsContext.	aGraphicsContext paint: self symbolFillPaint.	self symbol displayFilledOn: aGraphicsContext.	aGraphicsContext paint: self symbolOutlinePaint.	self symbol displayStrokedOn: aGraphicsContext</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	aGraphicsContext paint: ColorValue black.	self line displayStrokedOn: aGraphicsContext.	aGraphicsContext paint: self printSymbolFillPaint.	self symbol displayFilledOn: aGraphicsContext.	aGraphicsContext paint: self symbolOutlinePaint.	self symbol displayStrokedOn: aGraphicsContext</body></methods><methods><class-id>ICC.ADvance.AD2InheritancePart</class-id> <category>visual properties</category><body package="ADvance2">printSymbolFillPaint	^self advance preferences painter printInheritanceColor</body><body package="ADvance2">symbolFillPaint	^self advance preferences painter inheritanceColor</body><body package="ADvance2">symbolOutlinePaint	^ColorValue black</body></methods><methods><class-id>ICC.ADvance.NVisionSpec</class-id> <category>private</category><body package="ADvance2">componentSpecDo: anEnumerator	^anEnumerator doLeafWidgetSpec: self</body><body package="ADvance2">defaultModel	^ValueHolder with: nil</body><body package="ADvance2">getBindingIn: builder	| m |	m := builder aspectAt: model.	m isNil ifFalse: [^m].	builder isEditing ifFalse: [^builder class bindingNotFoundSignal raiseRequestWith: model errorString: 'Binding not found!'].	m := self defaultModel.	builder cacheWhileEditing ifTrue: [builder aspectAt: model put: m].	^m</body><body package="ADvance2">replaceScrollWrapperFor: anEditorView	"Replace the ScrollWrapper with anNVScrollWrapper."	anEditorView container container setComponent: (anEditorView model scrollWrapperClass on: anEditorView)</body><body package="ADvance2">typeConvert: aValue	^aValue</body><body package="ADvance2">viewWithController	| editor view |	editor := NVEditor new.	view := editor newView.	editor initializeLayers: self layer.	editor activeLayerIndex: editor layers size.	^view</body></methods><methods><class-id>ICC.ADvance.NVisionSpec</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self layer: 1</body></methods><methods><class-id>ICC.ADvance.NVisionSpec</class-id> <category>accessing</category><body package="ADvance2">layer	^layer</body><body package="ADvance2">layer: aValue	layer := aValue max: 1</body><body package="ADvance2">model	^model</body><body package="ADvance2">model: aValue	model := aValue</body></methods><methods><class-id>ICC.ADvance.NVisionSpec</class-id> <category>building</category><body package="ADvance2">dispatchTo: policy with: builder	builder isEditing		ifTrue: [super dispatchTo: policy with: builder]		ifFalse:			[| theComponent |			theComponent := self viewWithController.			builder component: theComponent.			model notNil ifTrue: [(builder source perform: model)					value: builder component controller].			builder sendKeyboardTo: theComponent.			policy manufactureGeneralWrapperFor: self into: builder.			self replaceScrollWrapperFor: builder component.			builder applyLayout: self layout.			builder wrapWith: (policy					simpleWidgetWrapperOn: builder					spec: self					state: nil)]</body></methods><methods><class-id>ICC.ADvance.NVisionSpec</class-id> <category>decoration accessing</category><body package="ADvance2">decorationType	| f |	f := self basicDecorationFlags.	f = 0 ifTrue: [^#none].	f = 8 ifTrue: [^#scrolling].	^#scrolling</body></methods><methods><class-id>ICC.ADvance.NVisionSpec class</class-id> <category>class initialization</category><body package="ADvance2">obsolete	self deInstall.	^super obsolete</body></methods><methods><class-id>ICC.ADvance.NVisionSpec class</class-id> <category>private-interface building</category><body package="ADvance2">addBindingsTo: env for: inst channel: aChannel	super		addBindingsTo: env		for: inst		channel: aChannel.	env at: #model put: (TypeConverter onSymbolValue: (self				adapt: inst				forAspect: #model				channel: aChannel)).	env at: #layer put: (self			adapt: inst			forAspect: #layer			channel: aChannel)</body><body package="ADvance2">componentName	^'NVision'</body><body package="ADvance2">slices	^#(#(#Basics #basicsEditSpec) #(#Color #propSpec #ColorToolModel) #(#Position #propSpec #PositionToolModel))</body></methods><methods><class-id>ICC.ADvance.NVisionSpec class</class-id> <category>installation</category><body package="ADvance2">deInstall	"self deInstall"	| uiPaletteClass |	(uiPaletteClass := #{Tools.UIPalette} valueOrDo: [nil]) isNil ifTrue: [^self].	uiPaletteClass activeSpecsList remove: self name ifAbsent: []</body><body package="ADvance2">install	"self install"	| uiPaletteClass |	(uiPaletteClass := #{Tools.UIPalette} valueOrDo: [nil]) isNil ifTrue: [^self].	(uiPaletteClass activeSpecsList includes: self name)		ifFalse: [uiPaletteClass activeSpecsList add: self name]</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarSpec</class-id> <category>adding</category><body package="ADvance2">addButtonSpace	self addSpace: policy buttonSpace</body><body package="ADvance2">addButtonSpec: aButtonSpec	| bounds |	bounds := origin				extent: (aButtonSpec layout isNil						ifTrue: [policy buttonWidth]						ifFalse: [aButtonSpec layout reducedForm extent x]) @ policy buttonHeight.	aButtonSpec layout: bounds.	self addSpec: aButtonSpec width: bounds extent x</body><body package="ADvance2">addButtonSpecs: aCollectionButtonSpec	aCollectionButtonSpec do: [:each | self addButtonSpec: each]</body><body package="ADvance2">addSpace: anInteger	origin := origin + (anInteger @ 0)</body><body package="ADvance2">addSpec: aSpec	aSpec layout isNil ifTrue: [aSpec layout: (origin extent: policy buttonWidth @ policy buttonHeight)].	self addSpec: aSpec width: aSpec layout extent x</body><body package="ADvance2">addSpec: aSpec width: anInteger	self basicAddSpec: aSpec.	self addSpace: anInteger</body><body package="ADvance2">basicAddSpec: aSpec	self collection add: aSpec</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarSpec</class-id> <category>accessing</category><body package="ADvance2">layout: aLayout	compositeSpec layout: aLayout</body><body package="ADvance2">name: aName	compositeSpec name: aName</body><body package="ADvance2">origin	^origin</body><body package="ADvance2">policy	^policy</body><body package="ADvance2">policy: aPolicy	policy := aPolicy</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarSpec</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	collection := OrderedCollection new.	compositeSpec := CompositeSpec new.	self name: #toolbar</body><body package="ADvance2">initializePolicy: aToolBarPolicy	policy := aToolBarPolicy.	origin := policy firstOrigin.	(self compositeSpec) isOpaque: policy isOpaque; colors: policy colors.	self layout: (LayoutFrame			leftFraction: 0			offset: 0			topFraction: 0			offset: 0			rightFraction: 1			offset: 0			bottomFraction: 0			offset: policy toolBarHeight)</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarSpec class</class-id> <category>instance creation</category><body package="ADvance2">withPolicy: aToolBarPolicy	^(self new) initializePolicy: aToolBarPolicy</body></methods><methods><class-id>ICC.ADvance.NVComposite</class-id> <category>enumerating</category><body package="ADvance2">detect: block1 ifNone: block2	^self components detect: block1 ifNone: block2</body><body package="ADvance2">do: aBlock	^self components do: aBlock</body><body package="ADvance2">includes: anObject	^self components includes: anObject</body><body package="ADvance2">modifyingDo: aBlock	^self components copy do: aBlock</body><body package="ADvance2">reverseDo: aBlock	^self components reverseDo: aBlock</body><body package="ADvance2">select: aBlock	^self components select: aBlock</body><body package="ADvance2">size	^self components size</body></methods><methods><class-id>ICC.ADvance.NVComposite</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	self isVisible ifFalse: [^self].	self components do: [:each | each displayOn: aGraphicsContext]</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	self isVisible ifFalse: [^self].	self components do: [:each | each displayOnPrinter: aGraphicsContext]</body><body package="ADvance2">invalidate	self components invalidate</body><body package="ADvance2">invalidateRectangle: aRectangle repairNow: aBoolean forComponent: aDrawablePart	"Invalidate the Rectangle aRectangle. If aBoolean is false, repair later.	Propagate a damage rectangle up the containment hierarchy.	This will result in a displayOn: aGraphicsContext being sent to the receiver."	self isVisible ifFalse: [^self].	self container		invalidateRectangle: aRectangle		repairNow: aBoolean		forComponent: aDrawablePart</body></methods><methods><class-id>ICC.ADvance.NVComposite</class-id> <category>adding-removing</category><body package="ADvance2">add: anObject	anObject container: self.	self components addLast: anObject</body><body package="ADvance2">remove: anObject	self components remove: anObject ifAbsent: [].	self container model removeFromSelection: anObject.	^anObject</body><body package="ADvance2">removeAll: aCollection	aCollection do: [:each | self remove: each]</body></methods><methods><class-id>ICC.ADvance.NVComposite</class-id> <category>accessing</category><body package="ADvance2">componentAt: aPoint	"Answer the object at aPoint, nil if none."	self isVisible ifFalse: [^nil].	self reverseDo: [:each | (each hasCursor: aPoint)			ifTrue: [^each]].	^nil</body><body package="ADvance2">editor	^self container model</body><body package="ADvance2">isVisible	^isVisible</body><body package="ADvance2">isVisible: aBoolean	isVisible := aBoolean</body><body package="ADvance2">topWrapperFor: aComponent	"^&lt;NVComponent&gt;"	^aComponent</body></methods><methods><class-id>ICC.ADvance.NVComposite</class-id> <category>private-accessing</category><body package="ADvance2">components	^components</body></methods><methods><class-id>ICC.ADvance.NVComposite</class-id> <category>positioning</category><body package="ADvance2">moveToBackground: anObject	anObject == self components first ifTrue: [^self].	self components remove: anObject.	self components addFirst: anObject</body><body package="ADvance2">moveToTop: anObject	anObject == self components last ifTrue: [^self].	self components remove: anObject.	self components addLast: anObject</body></methods><methods><class-id>ICC.ADvance.NVComposite</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	isVisible := true.	components := OrderedCollection new</body><body package="ADvance2">newGraphicsDevice: aGraphicsDevice	"Any information that the receiver caches that is platform dependent	is questionable. Font widths is invalid; rescale texts."	self components do: [:each | each newGraphicsDevice: aGraphicsDevice].	super newGraphicsDevice: aGraphicsDevice</body><body package="ADvance2">release	self components do: [:each | each release].	components := nil.	super release</body></methods><methods><class-id>ICC.ADvance.NVComposite class</class-id> <category>instance creation</category><body package="ADvance2">on: anEditor	^self new container: anEditor</body></methods><methods><class-id>ICC.ADvance.IccHTMLOverlay</class-id> <category>attributes</category><body package="ADvance2">filename	"&lt;&gt;"	self getAttribute: #src</body><body package="ADvance2">filename: aString	"&lt;&gt;"	self addAttribute: #src value: aString</body></methods><methods><class-id>ICC.ADvance.IccHTMLOverlay</class-id> <category>resultcreation</category><body package="ADvance2">preHTMLOn: aStream	"&lt;&gt; creates an optional HTML description of the receiver before the content of the receiver"	super preHTMLOn: aStream.	self attributes		do:			[:anAssoc |			(anAssoc key = #src)				ifTrue: [aStream nextPutAll: 'SRC="' , anAssoc value , '"']].	aStream nextPutAll: '&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLOverlay</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"String"	^'&lt;OVERLAY '</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog</class-id> <category>aspects</category><body package="ADvance2">className	^className</body><body package="ADvance2">classPersistence	^classPersistence isNil		ifTrue: [classPersistence := #transient asValue]		ifFalse: [classPersistence]</body><body package="ADvance2">classType	^classType isNil		ifTrue: [classType := #concrete asValue]		ifFalse: [classType]</body><body package="ADvance2">containerName	^containerName</body><body package="ADvance2">superclassName	^superclassName</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self changedInputField</body><body package="ADvance2">preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder labelAt: #containerLabel put: self adBasics systemOrganization containerLabel</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog</class-id> <category>private</category><body package="ADvance2">classAlreadyExists	^self adBasics systemEnvironment includesKey: className value</body><body package="ADvance2">classNameIsEmpty	^self className value isNil or: [self className value isEmpty]</body><body package="ADvance2">containerNameIsEmpty	^self containerName value isNil or: [self containerName value isEmpty]</body><body package="ADvance2">doCancel	self changeRequest ifTrue: [super doCancel]</body><body package="ADvance2">superclassExists	^self adBasics systemEnvironment includesKey: superclassName value</body><body package="ADvance2">superclassNameIsEmpty	^self superclassName value isNil or: [self superclassName value isEmpty]</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog</class-id> <category>changing</category><body package="ADvance2">changedContainerName	ContainerNameDefault := self containerName value.	self changedInputField</body><body package="ADvance2">changedInputField	^self</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	className := nil asValue onChangeSend: #changedInputField to: self.	superclassName := #Object asValue onChangeSend: #changedInputField to: self.	containerName := self class containerNameDefault asValue onChangeSend: #changedContainerName to: self</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog</class-id> <category>events</category><body package="ADvance2">requestForWindowClose	| newName theClass |	super requestForWindowClose ifFalse: [^false].	newName := self advance utils				validateClassName: self className value				confirm: [:msg :name | self adDialog confirm: msg for: self builder window]				warn: [:msg | self adDialog warn: msg for: self builder window].	newName isNil ifTrue: [^false].	self className value: newName.	self classAlreadyExists		ifTrue:			[self adDialog warn: 'Class already exists.' for: self builder window.			^false].	(self superclassExists or: [(theClass := self adDialog 						chooseClassFrom: self superclassName value						superclassName: nil						for: self builder window) notNil])		ifFalse:			[self adDialog warn: 'Superclass doesn''t exist.' for: self builder window.			^false].	theClass notNil ifTrue: [self superclassName value: theClass fullName].	^true</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog class</class-id> <category>accessing</category><body package="ADvance2">containerNameDefault	ContainerNameDefault isNil ifTrue: [ContainerNameDefault := String new].	^ContainerNameDefault</body></methods><methods><class-id>ICC.ADvance.AD2Filters class</class-id> <category>ADvance</category><body package="ADvance2">ad2filter_2	^#(#{ICC.ADvance.AD2StoredFilter} 		#id: 2 		#name: 'Instance, class (Iron curtain)' 		#bits: 114 		#filteredInstProtocols: #('' '*' ) 		#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 		#filteredClassMethods: #('initialize' 'new' ) 		#filteredInstVars: #() 		#filteredClassInstVars: #() 		#filteredSharedVars: #() )</body><body package="ADvance2">ad2filter_3025173670	^#(#{ICC.ADvance.AD2StoredFilter} 		#id: 3025173670 		#name: 'Class' 		#bits: 98 		#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 		#filteredClassMethods: #('initialize' 'new' ) 		#filteredInstVars: #() 		#filteredClassInstVars: #() 		#filteredSharedVars: #() )</body><body package="ADvance2">ad2filter_3025638293	^#(#{ICC.ADvance.AD2StoredFilter} 		#id: 3025638293 		#name: 'Private' 		#bits: 56 		#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 		#filteredClassMethods: #('initialize' 'new' ) 		#filteredInstVars: #() 		#filteredClassInstVars: #() 		#filteredSharedVars: #() )</body><body package="ADvance2">ad2filter_3026398895	^#(#{ICC.ADvance.AD2StoredFilter}		#id: 3026398895		#name: 'Access, private'		#bits: 9 )</body><body package="ADvance2">ad2filter_3026399659	^#(#{ICC.ADvance.AD2StoredFilter}		#id: 3026399659		#name: 'Access, overridden, private'		#bits: 13 )</body><body package="ADvance2">ad2filter_3026399818	^#(#{ICC.ADvance.AD2StoredFilter} 		#id: 3026399818 		#name: 'Instance' 		#bits: 16 		#filteredInstProtocols: #('*' ) 		#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 		#filteredClassMethods: #('initialize' 'new' ) 		#filteredInstVars: #() 		#filteredClassInstVars: #() 		#filteredSharedVars: #() )</body><body package="ADvance2">ad2filter_3030694561	^#(#{ICC.ADvance.AD2StoredFilter}		#id: 3030694561		#name: 'Access, overridden'		#bits: 5 )</body><body package="ADvance2">ad2filter_32168	^#(#{ICC.ADvance.AD2StoredFilter} 		#id: 32168 		#name: 'Iron Curtain (filters all services and attributes)' 		#bits: 127 		#filteredInstProtocols: #('*' ) 		#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 		#filteredClassMethods: #('initialize' 'new' ) 		#filteredInstVars: #() 		#filteredClassInstVars: #() 		#filteredSharedVars: #() )</body><body package="ADvance2">markedAsFilterClass</body></methods><methods><class-id>ICC.ADvance.AD2Filters class</class-id> <category>private</category><body package="ADvance2">markedAsPublicClass	"This class provides a public interface."</body></methods><methods><class-id>ICC.ADvance.IccHTMLBody</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt; The end of this construct"	^'&lt;/BODY&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt; The start of this construct"	^'&lt;BODY&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLBody</class-id> <category>testing</category><body package="ADvance2">isBody	^true</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>private-footer</category><body package="ADvance2">emptyStatus	self statusField1 value: ''</body><body package="ADvance2">hideFooter	| theComponent |	(theComponent := self builder componentAt: #footer) notNil 		ifTrue: [theComponent isVisible: false]</body><body package="ADvance2">hideFooterAndDo: aBlock	self showProgressStatus.	aBlock		valueNowOrOnUnwindDo:			[self hideFooter.			self emptyStatus.			self resetAndHideProgressStatus]</body><body package="ADvance2">makeStatusBarVisible: aBoolean	(builder componentAt: #statusBar)		isVisible: aBoolean.	aBoolean ifTrue: [self hideFooter]</body><body package="ADvance2">resetAndHideProgressStatus	(self builder componentAt: #footerProgress) isVisible: false.	self footerProgress value: 0</body><body package="ADvance2">showFooter	(self builder componentAt: #footer)		isVisible: true</body><body package="ADvance2">showFooter: aString	footer value: aString.	self showFooter</body><body package="ADvance2">showProgressStatus	(self builder componentAt: #footerProgress) isVisible: true</body><body package="ADvance2">showStatus: aString	self statusField1 value: aString</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>actions-state</category><body package="ADvance2">toggleStatusBar	self state statusBarVisible: self state statusBarVisible not.	self class defaultState statusBarVisible: self state statusBarVisible.	self changedLayout</body><body package="ADvance2">toggleToolbar	self state toolbarVisible: self state toolbarVisible not.	self class defaultState toolbarVisible: self state toolbarVisible.	self changedLayout</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>private</category><body package="ADvance2">bringToFront	"Raise or expand my window if necessary."	self window isCollapsed		ifTrue: [self window expand]		ifFalse: [self window raise]</body><body package="ADvance2">update	"Do nothing. Subclasses may override."</body><body package="ADvance2">updateWithNotification	self adDialog message: 'The selection is absent from the system.\The display will be updated.' withCRs for: self window.	self update</body><body package="ADvance2">window	^self builder window</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>actions</category><body package="ADvance2">exit	"Default behavior: close the window. Subclasses may add		'self advance plugInAPI closeAllADvanceWindowsFor: self builder window' 	to close all ADvance windows after user confirmation."	self closeRequest</body><body package="ADvance2">generalPreferences	"Open a dialog for the general preferences dialog."	self primGeneralPreferences 	ifFalse: [^self].	self adDialog message: 'The new preferences will be used if you reopen this tool.'</body><body package="ADvance2">painterPreferences	"Open a dialog for the painter preferences and regenerate the interface."	(self advance painterPreferencesDialogClass new openInterface: #windowSpec for: self window)		ifFalse: [^self]</body><body package="ADvance2">primGeneralPreferences	"Open a dialog for the general preferences dialog."	^self advance generalPreferencesDialogClass new openInterface: #windowSpec for: self window</body><body package="ADvance2">unimplemented	self adDialog unimplementedFor: self builder window</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>interface opening</category><body package="ADvance2">generateToolBarWith: aBuilder	self toolbarGenerator: (AD2ToolbarGenerator			for: self			menu: self class mainMenu			itemSpecs: self class itemSpecs			toolbarPolicy: self class toolbarPolicy			withMenuLabels: self advance preferences general menuLabelsHaveImages			builder: aBuilder).	self preGenerateToolBarWith: aBuilder.	self toolbarGenerator traverseMenuAndGenerateToolBar.	self postGenerateToolBarWith: aBuilder</body><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	aBuilder add: self toolbarGenerator toolBarSpec.	self iccEnable: false itemAndButtonGroup: self class initiallyDisabledItems.</body><body package="ADvance2">postGenerateToolBarWith: aBuilder</body><body package="ADvance2">postOpenWith: aBuilder 	"The window's application and icon is set here instead of postBuildWith: to avoid this setting in case of running 	AD2DiagramPainter in a Subcanvas."	(aBuilder window)		application: self;		sendWindowEvents: #(#open #resize).	aBuilder window icon: self class applicationIcon.	super postOpenWith: aBuilder.	self resize</body><body package="ADvance2">preAddSpecWith: aSpec	"Do anything you might want to do prior to the builder adding aSpec."	self class mruWindowBox notNil ifTrue: [aSpec window bounds: self class mruWindowBox]</body><body package="ADvance2">preBuildWith: aBuilder	"Do anything you might want to do prior the builder beginning construction of	the canvas."	super preBuildWith: aBuilder.	self generateToolBarWith: aBuilder</body><body package="ADvance2">preGenerateToolBarWith: aBuilder</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>menus&amp;items</category><body package="ADvance2">mainMenu	^self toolbarGenerator menu</body><body package="ADvance2">showStatusBarItem	^self toolbarsMenu submenu menuItemLabeled: 'Show Status bar'</body><body package="ADvance2">showToolbarItem	^self toolbarsMenu submenu menuItemLabeled: 'Show Toolbar'</body><body package="ADvance2">toolbarsMenu	^(self mainMenu atNameKey: #toolbars)</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>actions-help</category><body package="ADvance2">openHelpContents	"Open a dialog showing the help contents."	self unimplemented</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>accessing</category><body package="ADvance2">state	^state</body><body package="ADvance2">toolbarGenerator	^toolbarGenerator</body><body package="ADvance2">toolbarGenerator: aToolbarGenerator	toolbarGenerator := aToolbarGenerator</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>events</category><body package="ADvance2">noticeOfWindowClose: aWindow	"The ApplicationWindow aWindow is in the process of closing.	You have been notified."	super noticeOfWindowClose: aWindow. 	self release</body><body package="ADvance2">resize	"The window has been resized. Store the window box as most recently used window box."	builder notNil ifTrue: [self class mruWindowBox: builder window displayBox]</body><body package="ADvance2">windowEvent: anEvent from: anApplicationWindow	"When resized, the receiver should be sent a resize message."	super windowEvent: anEvent from: anApplicationWindow.	(anEvent key == #resize or: [anEvent key == #open])		ifTrue: [self resize]</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>aspects</category><body package="ADvance2">footer	footer isNil ifTrue: [footer := String new asValue].	^footer</body><body package="ADvance2">footerProgress	footerProgress isNil ifTrue: [footerProgress := 0 asValue].	^footerProgress</body><body package="ADvance2">statusField1	^statusField1</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>changing</category><body package="ADvance2">changedLayout	"Update the toolbar and status bar visibility and the corresponding menu items."	(self builder componentAt: #toolbar)		isVisible: self state toolbarVisible.	self makeStatusBarVisible: self state statusBarVisible.	self hideFooter.	self builder window refresh.	self showToolbarItem indication: self state toolbarVisible.	self showStatusBarItem indication: self state statusBarVisible</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	state := self class defaultState.	statusField1 := '' asValue</body><body package="ADvance2">release	"First close the Model (if  not already done). Necessary since VW7.1 andre mar03.5."	self exit.	super release.	builder := nil</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>testing</category><body package="ADvance2">isADvanceApplicationModel	^true</body><body package="ADvance2">isADvanceDiagramPainter	^false</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel</class-id> <category>help extensions</category><body package="ADvance2">helpTextFor: aWidgetID	"^&lt;String | nil&gt;	Answers the help text for the widget given by the 	class' help dictionary or nil if not defined."	^self class helpTextFor: aWidgetID</body><body package="ADvance2">statusTextFor: aBalloonText 	"^&lt;String | nil&gt; 	Search the Dictionary for first value aBallonText and answer the 	second value. Return value nil should not happen because 	aBallonText is taken from the same dictionary."	^(self class helpDictionary values 		detect: [:eachPair | eachPair first = aBalloonText asString]		ifNone: [#(nil nil)]) 		last</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel class</class-id> <category>private</category><body package="ADvance2">newToolState	^AD2ToolState new</body><body package="ADvance2">opaqueImageAt: aSymbol	^self resources opaqueImageAt: aSymbol</body><body package="ADvance2">toolbarButton: anOpaqueImage	^AD2ToolbarItem image: anOpaqueImage</body><body package="ADvance2">toolbarButtonAt: aSymbol	^self toolbarButton: (self opaqueImageAt: aSymbol)</body><body package="ADvance2">toolbarItem: anOpaqueImage	^AD2ToolbarItem menuImage: anOpaqueImage</body><body package="ADvance2">toolbarItemAt: aSymbol	^self toolbarItem: (self opaqueImageAt: aSymbol)</body><body package="ADvance2">toolbarItemFor: aSymbol	^self toolbarItem: (self resources opaqueImageFor: self named: aSymbol)</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel class</class-id> <category>accessing</category><body package="ADvance2">defaultState	defaultState isNil ifTrue: [defaultState := self newToolState].	^defaultState</body><body package="ADvance2">helpDictionary	helpDictionary isNil ifTrue: [self initializeHelpDictionary].	^helpDictionary</body><body package="ADvance2">helpTextFor: aWidgetID	"^&lt;String | nil&gt;	Answers the help text for the widget given by the 	class' help dictionary or nil if not defined."	| theEntry |	^(theEntry := (self helpDictionary at: aWidgetID ifAbsent: [nil])) notNil 		ifTrue: [theEntry at: 1]		ifFalse: [nil]</body><body package="ADvance2">initializeHelpDictionary	helpDictionary := self getHelpDictionary</body><body package="ADvance2">mruWindowBox	^mruWindowBox</body><body package="ADvance2">mruWindowBox: aRectangle	mruWindowBox := aRectangle</body><body package="ADvance2">resetDefaultState	defaultState := nil</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel class</class-id> <category>constants</category><body package="ADvance2">getHelpDictionary	^IdentityDictionary new</body><body package="ADvance2">initiallyDisabledItems	^self subclassResponsibility</body><body package="ADvance2">itemSpecs	^Dictionary new		 at: #update put: (self toolbarItemAt: #update);		 at: #closeRequest put: (self toolbarItemAt: #empty);		 at: #save put: (self toolbarButtonAt: #save);		 at: #exit put: (self toolbarItemAt: #exit);		 at: #delete put: (self toolbarButtonAt: #remove);		 at: #find put: (self toolbarButtonAt: #find);		 at: #rename put: (self toolbarItemAt: #empty);		 at: #openHelpContents put: (self toolbarItemAt: #help);		 at: #printDiagram put: (self toolbarButton: (self opaqueImageAt: #print));		 yourself</body><body package="ADvance2">resources	^self advance resources</body><body package="ADvance2">toolbarPolicy	^AD2ToolbarPolicy smallButtons</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel class</class-id> <category>class initialization</category><body package="ADvance2">obsolete	"The class is being removed from the system. Try to close all open windows first."	self allInstances do: [:each | Object errorSignal handle: [:ex | ex return]			do: [each builder window controller closeAndUnschedule]].	super obsolete</body><body package="ADvance2">uninitialize	self withAllSubclasses do: [:each | each resetDefaultState]</body></methods><methods><class-id>ICC.ADvance.AD2ApplicationModel class</class-id> <category>resources</category><body package="ADvance2">mainMenu	^self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.AD2SingletonApplicationModel class</class-id> <category>interface opening</category><body package="ADvance2">open	"Open my current instance if available. Otherwise create a new	instance of myself and open its user interface."	| current |	current := self current.	^current isNil		ifTrue: [self openOn: self new]		ifFalse:			[current bringToFront.			current builder]</body></methods><methods><class-id>ICC.ADvance.AD2SingletonApplicationModel class</class-id> <category>private</category><body package="ADvance2">current	"^&lt;AD2SingletonApplicationModel | nil&gt;	Searches for an opened instance of this class."	^self allInstances detect: 			[:eachInstance | 			eachInstance builder notNil and: [eachInstance builder window notNil]]		ifNone: [nil]</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette</class-id> <category>drag and drop</category><body package="ADvance2">doFilterDrag: aController	"Drag the currently selected filter."	| ds dm data |	self filterTree selection isNil ifTrue: [^self].	self selectedFilter isNil ifTrue: [^self].	data := DragDropData new.	data key: #ADvanceFilter.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: self selectedFilter.	ds := DropSource new.	dm := DragDropManager withDropSource: ds withData: data.	dm doDragDrop</body><body package="ADvance2">filterWantsToDrag: aController	"Answer true if a filter can be dragged. This always makes sense."	^self filterTree selectionIndex isZero not and: [self selectedFilter notNil]</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	filterTree := SelectionInList new list: TreeModel new</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette</class-id> <category>private</category><body package="ADvance2">selectedFilter	"@Pre: The filterTree has a selection."	| selection |	selection := self filterTree selection.	^(self advance filterEnvironment includesKey: selection key)		ifTrue: [selection]		ifFalse: [nil]</body><body package="ADvance2">update	self filterTree list root: (AD2FilterRoot new addAll: self advance filterEnvironment filters asSortedCollection; yourself) displayIt: false</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette</class-id> <category>aspects</category><body package="ADvance2">filterTree	^filterTree</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self update</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette class</class-id> <category>constants</category><body package="ADvance2">initiallyDisabledItems	^#()</body><body package="ADvance2">toolbarPolicy	^AD2ToolbarPolicy smallButtons firstOrigin: 2 @ 2</body></methods><methods><class-id>ICC.ADvance.AD2Specification</class-id> <category>encode-decode</category><body package="ADvance2">encoderAttributes	^self class instVarNames</body><body package="ADvance2">fromLiteralArrayEncoding: anArray	2		to: anArray size		by: 2		do: [:i | self perform: (anArray at: i)				with: (anArray at: i + 1)]</body><body package="ADvance2">literalArrayEncoding	| aCollection |	aCollection := OrderedCollection with: self class fullyQualifiedReference.	self encoderAttributes		do:			[:each |			| value |			value := self perform: each asSymbol.			value isNil ifFalse: [aCollection add: (each copyWith: $:) asSymbol; add: value literalArrayEncoding]].	^aCollection asArray</body></methods><methods><class-id>ICC.ADvance.AD2Specification</class-id> <category>initialize-release</category><body package="ADvance2">initialize	"Initialize the receiver."</body></methods><methods><class-id>ICC.ADvance.AD2Specification class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2Specification class</class-id> <category>private</category><body package="ADvance2">decodeFromLiteralArray: anArray	^self new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarButtonSpec</class-id> <category>processing</category><body package="ADvance2">createDisabledOpaqueImageFor: anOpaqueImage	"^&lt;OpaqueImage&gt;	Create a copy of OpaqueImage with every second pixel made opaque."	| figure shape |	figure := anOpaqueImage figure asImage copy.	shape := anOpaqueImage shape asImage copy.	shape pixelsDo: [:x :y | x + y \\ 2 = 1 ifTrue: [shape atX: x y: y put: 0]].	^OpaqueImage figure: (CachedImage on: figure)		shape: (CachedImage on: shape)</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarButtonSpec</class-id> <category>private-labels</category><body package="ADvance2">labelInBuilder: builder	| activeLabel inactiveLabel |	activeLabel := super labelInBuilder: builder.	inactiveLabel := self createDisabledOpaqueImageFor: activeLabel.	^OpaqueImageWithEnablement		figure: activeLabel figure		shape: activeLabel shape		inactiveFigure: inactiveLabel figure		inactiveShape: inactiveLabel shape</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarButtonSpec</class-id> <category>private</category><body package="ADvance2">dispatchTo: policy with: builder	policy actionButton: self into: builder</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarButtonSpec</class-id> <category>accessing</category><body package="ADvance2">isDecorated	^false</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-window</category><body package="ADvance2">openDiagramPainter	self class open</body><body package="ADvance2">openDocumenter	self advance documenterClass open</body><body package="ADvance2">openFilterBrowser	self advance filterBrowserClass open</body><body package="ADvance2">openFilterPalette	self advance filterPaletteClass open</body><body package="ADvance2">openMessageNavigator	self advance messageNavigatorClass open</body><body package="ADvance2">openScriptDocuDialog	self model openScriptDocuDialog</body><body package="ADvance2">openSubjectBrowser	self advance subjectBrowserClass open</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	anEditor := nil asValue.	model := self advance diagramModelClass new.	model controller: self.	(zoom := '100%' asValue) onChangeSend: #changedZoom to: self.	self showStructure onChangeSend: #changedShowStructure to: self.	self showAttributes onChangeSend: #changedShowAttributes to: self.	self showTypes onChangeSend: #changedShowTypes to: self.	self showRelations onChangeSend: #changedShowRelations to: self.	self showServices onChangeSend: #changedShowServices to: self.	self showScripts onChangeSend: #changedShowScripts to: self.	self showNamespaces onChangeSend: #changedShowNamespaces to: self.</body><body package="ADvance2">release	| editor aModel |	super release.	editor := self editor.	aModel := model.	anEditor := nil.	model := nil.	editor release.	aModel release</body><body package="ADvance2">setWindowLabel	| prefix |	self window application == self		ifFalse: [^self].	prefix := self class windowLabel.	self builder window label: (self hasDomain			ifTrue: ['&lt;1s&gt; - [&lt;2s&gt;]' expandMacrosWith: prefix with: self model fullDiagramName]			ifFalse: [prefix])</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>utility</category><body package="ADvance2">targetString: aTarget	^(aTarget at: 1)		, '/' , (aTarget at: 2)</body><body package="ADvance2">wrapAmpersands: aString	| aStream |	aStream := (String new: aString size) writeStream.	1 to: aString size		do:			[:index |			| aCharacter |			aCharacter := aString at: index.			aStream nextPut: aCharacter.			aCharacter = $&amp; ifTrue: [aStream nextPut: aCharacter]].	^aStream contents</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>accessing</category><body package="ADvance2">changedShowNamespaces	self iccBeOn: self showNamespaces value group: #(#negateShowNamespacesItem)</body><body package="ADvance2">editor	^anEditor value</body><body package="ADvance2">model	^model</body><body package="ADvance2">openDiagramOn: aSubject name: diagramName	| aStringOrNil |	aStringOrNil := diagramName = self advance diagramSpecClass fakeName				ifTrue: [nil]				ifFalse: [diagramName].	self changeRequest ifFalse: [^self].	aSubject cleanse.	self model loadDiagramOn: aSubject name: aStringOrNil.	aStringOrNil isNil ifFalse: [self addTarget: (Array with: aSubject name with: aStringOrNil)].	self changedTargetDomain</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-file</category><body package="ADvance2">newDiagram	"Open on the current subject an empty diagram."	self changeRequest ifFalse: [^self].	self openDiagramOn: self targetDomain value name: nil</body><body package="ADvance2">openDiagram	"Request a subject and diagram from user then open it."	| anArray diagram |	self changeRequest ifFalse: [^self].	(anArray := self basicOpenDiagram) isNil ifTrue: [^self].	diagram := anArray at: 2.	self model modified value: false. "supress request in next method."	self openDiagramOn: (anArray at: 1)		name: (diagram isNil				ifTrue: [nil]				ifFalse: [diagram name])</body><body package="ADvance2">pageSetup	self advance printerPreferencesDialogClass open</body><body package="ADvance2">printDiagram	"Open a print dialog and print the diagram. Handle OS errors."	OSErrorHolder errorSignal handle: [:exeption | self adDialog			handleError: exeption			message: 'A fatal OS error occured during printing.'			for: self builder window]		do: [self openPrintDialog]</body><body package="ADvance2">printPreview	self unimplemented</body><body package="ADvance2">save	self model diagramNameOrNil isNil ifTrue: [^self saveAs].	self model saveDiagram.	self model modified value: false</body><body package="ADvance2">updateDiagram	"Make the diagram consistent with the system, this means new computation 	of IncrementalTypes and a reload of the diagram, but no save ."	self hasDomain 		ifFalse: [^self].	(self model domain) 		cleanse; 		invalidateTypes.	self model reloadDiagram</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>private-requesting</category><body package="ADvance2">changeRequest	^(self hasDomain and: [self model modified value])		ifTrue:			[| result |			self bringToFront.			self window displayPendingInvalidation.			result := (self adDialog notifier						 setMessageIcon;						 openCentered: true;						 yourself)						threeStateConfirm: 'Save changes to ' , self model fullDiagramName , '?'						initialAnswer: true						for: self builder window.			result notNil ifTrue: [result					ifTrue: [self save]					ifFalse: [self model modified value: false]].			result notNil]		ifFalse: [true]</body><body package="ADvance2">requestAssociationModelsToRemove: selection	^self adDialog		requestSelection: selection		dialogBlock: [self adDialog new				 thickMargin;				 title: 'Confirm Association Removal';				 infoIcon: (self class resources opaqueImageFor: self class named: #removeAssociationImage)]		selectAllLabel: 'Remove all'		messageBlock: [:each | 'Do you want to remove association &lt;1p&gt;&lt;n&gt;from class &lt;2p&gt;?' expandMacrosWith: each clientRelation roleName with: each vertex1 domain printString]</body><body package="ADvance2">requestClassesToRemoveFromSubject: selection	^self adDialog		requestSelection: selection		dialogBlock: [self adDialog new				 thickMargin;				 title: 'Confirm Class Removal';				 infoIcon: (self class resources opaqueImageFor: self class named: #removeClassFromSubjectImage)]		selectAllLabel: 'Remove all'		messageBlock: [:each | 'Do you want to remove class &lt;1p&gt;&lt;n&gt;from subject?' expandMacrosWith: each fullName]</body><body package="ADvance2">requestClassesToRemoveFromSystem: selectedClasses	^self adDialog		requestSelection: selectedClasses		dialogBlock: [self adDialog new				 thickMargin;				 title: 'Confirm Class Removal';				 infoIcon: (self class resources opaqueImageFor: self class named: #removeClassFromSystemImage)]		selectAllLabel: 'Remove all'		messageBlock: [:each | 'Do you want to remove class &lt;1p&gt;&lt;n&gt;from system?' expandMacrosWith: each printString]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-grid</category><body package="ADvance2">gridHide	self editor gridHide.	self gridShowItem beOff.	self gridHideItem beOn.	self gridShowIfOnItem beOff</body><body package="ADvance2">gridInitialize	| gridOn |	gridOn := self advance preferences painter showGridOnStartup.	self editor transformation		 griddedHorizontally: gridOn;		 griddedVertically: gridOn;		 gridVisibility: #ShowIfOn.	self setGridSize: self advance preferences painter startupGridSize.	self gridOnItem indication: gridOn.	self gridOffItem indication: gridOn not.	self gridShowIfOnItem beOn</body><body package="ADvance2">gridOff	self editor gridOff.	self gridOnItem beOff.	self gridOffItem beOn.	self gridXOnlyItem beOff.	self gridYOnlyItem beOff</body><body package="ADvance2">gridOn	self editor gridOn.	self gridOnItem beOn.	self gridOffItem beOff.	self gridXOnlyItem beOff.	self gridYOnlyItem beOff</body><body package="ADvance2">gridShow	self editor gridShow.	self gridShowItem beOn.	self gridHideItem beOff.	self gridShowIfOnItem beOff</body><body package="ADvance2">gridShowIfOn	self editor gridShowIfOn.	self gridShowItem beOff.	self gridHideItem beOff.	self gridShowIfOnItem beOn</body><body package="ADvance2">gridSize16	self editor gridSize: 16.	self setGridSize: 16</body><body package="ADvance2">gridSize32	self editor gridSize: 32.	self setGridSize: 32</body><body package="ADvance2">gridSize8	self editor gridSize: 8.	self setGridSize: 8</body><body package="ADvance2">gridXOnly	self editor gridXOnly.	self gridOnItem beOff.	self gridOffItem beOff.	self gridXOnlyItem beOn.	self gridYOnlyItem beOff</body><body package="ADvance2">gridYOnly	self editor gridYOnly. 	self gridOnItem beOff.	self gridOffItem beOff.	self gridXOnlyItem beOff.	self gridYOnlyItem beOn</body><body package="ADvance2">openGridSizeDialog	"Ask for and then set a new grid size."	| answer |	answer := self adDialog				request: 'Enter new grid size:'				initialAnswer: self editor gridSize printString				onCancel: [nil]				for: builder window.	answer isNil ifTrue: [^self].	self setGridSize: (Integer readFrom: (ReadStream on: answer)) abs.	self editor redrawAll</body><body package="ADvance2">setGridSize: newValue	"Set the grid size. If the size is one of the presets select the corresponding menu item.	Reject if the size is less than 2."	newValue &lt; 2 ifTrue: [^self].	self editor transformation gridStep: newValue.	self gridSize8Item indication: newValue = 8.	self gridSize16Item indication: newValue = 16.	self gridSize32Item indication: newValue = 32.	self gridSizeDialogItem indication: (#(8 16 32) includes: newValue) not</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-basic</category><body package="ADvance2">basicAddClass: aClass at: aPoint	"Add aClass to the subject and to the diagram at aPoint. Invalidate types and	update the diagram."	"Type invalidation is necessary due to a bug in Types."	self model domain addClasses: (Array with: aClass) saveNow: false; invalidateTypes.	self model addClassModelFor: aClass at: (self editor pointFromView: aPoint).	self updateDiagram</body><body package="ADvance2">basicHideMessages	"^&lt;Boolean&gt; Hide the selected messages. Answer wether diagram changed."	| messagesToHide |	messagesToHide := self selectedMessages.	messagesToHide isEmpty ifTrue: [^false].	self model hideMessages: messagesToHide.	^true</body><body package="ADvance2">basicOpenDiagram	| aDialog |	aDialog := self advance openDiagramDialogClass new.	(aDialog openInterface: #windowSpec for: self window)		ifFalse: [^nil].	^Array with: (aDialog subjectTree selection)		with: aDialog diagramTree selection</body><body package="ADvance2">basicRemoveAssociations	"^&lt;Boolean&gt;	Remove confirmed associations. Answer wether diagram changed."	| modelsToRemove |	modelsToRemove := self requestAssociationModelsToRemove: self selectedAssociations.	modelsToRemove isEmpty ifTrue: [^false].	modelsToRemove do: [:each | each vertex1 removeClientRelation: each clientRelation updateDiagram: false].	^true</body><body package="ADvance2">basicRemoveClassesFromSubject	"^&lt;Boolean&gt;	Remove confirmed classes from subject. Answer wether diagram changed."	| classesToRemove |	classesToRemove := self requestClassesToRemoveFromSubject: (self selectedClasses collect: [:each | each domain]).	classesToRemove isEmpty ifTrue: [^false].	self model domain removeClasses: classesToRemove saveNow: false. "saving is done with diagram saving later"	^true</body><body package="ADvance2">basicRemoveTexts	"^&lt;Boolean&gt;	Remove the selected texts. Answer wether diagram changed."	| symbolsToRemove |	symbolsToRemove := self selectedTexts.	symbolsToRemove isEmpty ifTrue: [^false].	symbolsToRemove do: [:each | each basicRemove].	^true</body><body package="ADvance2">basicSaveDiagramAs	| diagramName subject |	diagramName := self adDialog				request: 'Enter diagram name:'				initialAnswer: self model suggestedDiagramName				onCancel: [^nil]				for: self window.	diagramName isEmpty ifTrue: [^nil].	subject := self model domain.	diagramName = self advance diagramSpecClass fakeName ifTrue: [^self adDialog message: ('&lt;1p&gt; is not a valid name.' expandMacrosWith: self advance diagramSpecClass fakeName)			for: self builder window].	(subject hasDiagramNamed: diagramName)		ifTrue: [(self adDialog confirm: ('&lt;1p&gt; already exists. Use anyway?' expandMacrosWith: diagramName)				for: self builder window)				ifFalse: [^self]].	 self model diagramName: diagramName.	self model saveDiagram.	self addTarget: (Array with: subject name with: diagramName).	self changedTargetDomain.	self model modified value: false</body><body package="ADvance2">chooseVisibleClasses	| sortedClasses |	sortedClasses := self model classModels asSortedCollection: [:a :b | a name &lt;= b name].	^self adDialog new		chooseMultiple: 'Select the classes you want to make visible.'		fromList: sortedClasses		values: sortedClasses		initialSelection: (sortedClasses select: [:each | each visible])		buttons: #()		values: #()		lines: 10		cancel: [nil]		for: self window</body><body package="ADvance2">chooseVisibleMessages	"^&lt;Set of: AD2Message&gt;	Answers the messages to show selected by the user. The choice 	dialog shows the currently shown messages as initially selected."	| theSortedMessages theDisplayMessages theInitiallySelected |	theInitiallySelected := OrderedCollection new.	theSortedMessages := self model allMessages asSortedCollection.	theDisplayMessages := theSortedMessages collect: [:eachMessage | eachMessage shortPrintString].	1 to: theSortedMessages size do: [:index | (self model hidesMessage: (theSortedMessages at: index))			ifFalse: [theInitiallySelected add: (theDisplayMessages at: index)]].	^self adDialog new		chooseMultiple: 'Select the messages you want to make visible.                                     '		fromList: theDisplayMessages		values: theSortedMessages		initialSelection: theInitiallySelected		buttons: #()		values: #()		lines: 10		cancel: [nil]		for: self window</body><body package="ADvance2">filterNonScriptServices	(self adDialog confirm: 'Do you want to filter all non-script services?')		ifFalse: [^self].	self model filterNonScriptServices.</body><body package="ADvance2">openClassFilterEditor	| filterDomain |	filterDomain := self selectedClasses first.	((self advance classFilterDialogClass new domain: filterDomain)		openInterface: #windowSpec for: self window)		ifFalse: [^self].	filterDomain updateServices; updateAttributes.	self editor redrawDamageArea.	self model beModified; reloadDiagram</body><body package="ADvance2">openDiagramFilterEditor	((self advance diagramFilterDialogClass new domain: self model)		openInterface: #windowSpec for: self window)		ifTrue: [self model				 updateServices;				 updateAttributes;				 redrawAll;				 beModified;				reloadDiagram]</body><body package="ADvance2">openPrintDialog	"Open the print dialog and print the editors contents."	| tmpFilename tmpPrinter aPrintDialog pagesCalculationBlock anADPrinter |	anADPrinter := AD2Printer on: self editor.	anADPrinter bounds isNil ifTrue: [^self adDialog message: 'Nothing to print.' for: self builder window].	anADPrinter diagram: self model diagramSpec value.	tmpFilename := 'tmp.ps'.	tmpPrinter := Printer startPrintJobNamed: tmpFilename.	[pagesCalculationBlock := [:scale | anADPrinter lastPrintPageWith: tmpPrinter scale: scale].	(aPrintDialog := self advance printDialogClass new)		 sourceHasSelection: false;		 defaultFilename: self model fullDiagramName;		 filename: tmpFilename;		 pagesCalculationBlock: pagesCalculationBlock;		 printer: tmpPrinter.	(aPrintDialog openInterface: #windowSpec for: self builder window)		ifFalse: [^self].	aPrintDialog filename = tmpFilename		ifFalse:			[tmpPrinter close.			tmpPrinter := PostScriptPrinter default startPrintJobNamed: aPrintDialog filename].	anADPrinter printTo: tmpPrinter]		valueNowOrOnUnwindDo: [tmpPrinter close]</body><body package="ADvance2">redraw	 self editor redrawAll</body><body package="ADvance2">removeAssociations	self basicRemoveAssociations ifTrue: [self updateDiagram]</body><body package="ADvance2">removeClassesFromSubject	self basicRemoveClassesFromSubject ifTrue: [self updateDiagram]</body><body package="ADvance2">removeClassesFromSystem	| classesToRemove systemOrganization |	classesToRemove := self requestClassesToRemoveFromSystem: (self selectedClasses collect: [:each | each domain]).	classesToRemove isEmpty ifTrue: [^self].	systemOrganization := self adBasics systemOrganization.	(classesToRemove asSortedCollection: [:a :b | a allSuperclasses includes: b ])		do:			[:each |			each subclasses isEmpty ifFalse: [self notify: ('&lt;1s&gt; has subclasses.' expandMacrosWith: each fullName)].			systemOrganization removeClass: each].	self updateDiagram</body><body package="ADvance2">removeTexts	self basicRemoveTexts ifTrue: [self model redraw]</body><body package="ADvance2">saveAs	self basicSaveDiagramAs</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>private-zoom</category><body package="ADvance2">basicUpdateZoom	Cursor wait		showWhile:			[self editor updateAllViews; invalidateAll.			self model changed: #zoom with: self editor scale]</body><body package="ADvance2">fitToRectangle: aRectangle repairNow: aBoolean	self editor basicFullViewForPreferredBoundsOver: aRectangle. 	"take the preferred bounds which may not be fit on the screen."	self editor view flushPreferredBounds.	self updateZoomRepairNow: aBoolean; updateZoomValue</body><body package="ADvance2">fitToWindowRepairNow: aBoolean	^self fitToWindowRepairNow: aBoolean maxZoom: nil</body><body package="ADvance2">fitToWindowRepairNow: aBoolean maxZoom: aNumberOrNil	self editor basicFullViewMaxZoom: aNumberOrNil.	self updateZoomRepairNow: aBoolean; updateZoomValue</body><body package="ADvance2">regenerateZoomMenu	| menu |	menu := self zoomMenu submenu.	1 to: menu lines first do: [:index | menu valueAt: index put: [zoom value: (menu labelAt: index)]]</body><body package="ADvance2">setZoomTo: aString	"Select the appropriate item in the zoom menu."	| newScale trackResize |	trackResize := aString = self windowSizedMenuLabel.	self model diagramState value trackResize: trackResize.	trackResize ifTrue: [^self fitToWindowRepairNow: false].	newScale := aString asNumber / 100 abs.	self zoom		 retractInterestsFor: self;		 value: (newScale * 100) rounded printString , '%';		 onChangeSend: #changedZoom to: self.	newScale * 100 = (self editor scale * 100) rounded ifTrue: [^self ].	self editor zoomBy: newScale / self editor scale.	self basicUpdateZoom.	self updateZoomMenu</body><body package="ADvance2">updateZoom	self updateZoomRepairNow: true</body><body package="ADvance2">updateZoomMenu	| trackResize aMenu items |	trackResize := self model diagramState value trackResize.	aMenu := self zoomMenu submenu.	items := aMenu menuItems.	items do: [:anItem | anItem indication: (anItem label = zoom value and: [trackResize not])].	(aMenu menuItemLabeled: self windowSizedMenuLabel)		indication: trackResize</body><body package="ADvance2">updateZoomRepairNow: aBoolean	self basicUpdateZoom.	aBoolean ifTrue: [self editor redrawDamageArea]</body><body package="ADvance2">updateZoomValue	| scale |	scale := self editor scale asPoint.	self zoom retractInterestsFor: self.	self zoom value: (scale x * 100) rounded printString , '%'.	self zoom onChangeSend: #changedZoom to: self.	self updateZoomMenu</body><body package="ADvance2">windowSizedMenuLabel	^'Window'</body><body package="ADvance2">zoomIsValid: aController	| isValid view |	view := aController view.	(isValid := view hasEditValue				and:					[| val num |					val := aController view editValue.					num := val asNumber.					val = self windowSizedMenuLabel or: [num &gt;= (self class zoomMinimum * 100) and: [num &lt;= (self class zoomMaximum * 100)]]]) ifFalse: [view flash; update: #value].	^isValid</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-view</category><body package="ADvance2">doAutoLayout	self model components do: [:each | each domainType == #association ifTrue: [each doAutoLayout]]</body><body package="ADvance2">editClassVisibility	| visibleClasses |	(visibleClasses := self chooseVisibleClasses) isNil ifTrue: [^self].	Cursor wait		showWhile:			[self model classModels do: [:each | each isVisible: (visibleClasses includes: each)].			self editor redrawDamageArea.			self model beModified]</body><body package="ADvance2">editMessageVisibility	| visibleMessages |	self model allMessages isEmpty ifTrue: [^self adDialog message: 'The diagram contains no messages.' for: self builder window].	(visibleMessages := self chooseVisibleMessages) isNil ifTrue: [^self].	Cursor wait showWhile: [self model setVisibleMessages: visibleMessages]</body><body package="ADvance2">fitToRectangle: aRectangle	self fitToRectangle: aRectangle repairNow: true</body><body package="ADvance2">fitToWindow	^self fitToWindowMaxZoom: nil</body><body package="ADvance2">fitToWindowMaxZoom: aNumberOrNil	self fitToWindowRepairNow: true maxZoom: aNumberOrNil</body><body package="ADvance2">hideNonScriptClasses	| scriptClasses |	Cursor wait		showWhile:			[scriptClasses := Set new: 30.			self model messageModels do: [:each | scriptClasses add: each vertex1; add: each vertex2].			self model classModels do: [:aClassModel | aClassModel isVisible: (scriptClasses includes: aClassModel)].			self editor redrawDamageArea]</body><body package="ADvance2">hideSelectedClasses	Cursor wait		showWhile:			[self selectedClasses do: [:each | each isVisible: false].			self editor redrawDamageArea]</body><body package="ADvance2">hideSelectedMessages	Cursor wait		showWhile:			[self basicHideMessages ifFalse: [^self].			self editor redrawDamageArea.			self model beModified]</body><body package="ADvance2">negateShowAttributes	self showAttributes value: self showAttributes value not</body><body package="ADvance2">negateShowNamespaces	self showNamespaces value: self showNamespaces value not</body><body package="ADvance2">negateShowRelations	self showRelations value: self showRelations value not</body><body package="ADvance2">negateShowScripts	self showScripts value: self showScripts value not</body><body package="ADvance2">negateShowServices	self showServices value: self showServices value not</body><body package="ADvance2">negateShowStructure	self showStructure value: self showStructure value not</body><body package="ADvance2">negateShowTypes	self showTypes value: self showTypes value not</body><body package="ADvance2">pickClassesBackgroundColor	| newColor |	(newColor := self adDialog chooseColorFor: nil) notNil 		ifTrue: 			[Cursor wait showWhile: 					[self selectedClasses do: [:each | each backgroundColor: newColor].					self editor redrawDamageArea]]</body><body package="ADvance2">resetClassesBackgroundColor	Cursor wait showWhile: 			[self selectedClasses do: [:each | each backgroundColor: nil].			self editor redrawDamageArea]</body><body package="ADvance2">showAllClasses	self model hiddenClasses isEmpty ifTrue: [^self adDialog message: 'There are no hidden classes.' for: self builder window].	self model showAllClasses</body><body package="ADvance2">showAllMessages	self model hiddenMessages isEmpty ifTrue: [^self adDialog message: 'There are no hidden messages.' for: self builder window].	self model showHiddenMessages</body><body package="ADvance2">snapToGrid	self editor snapToGrid</body><body package="ADvance2">toggleAddButtons	self state addButtonsVisible: self state addButtonsVisible not.	self class defaultState addButtonsVisible: self state addButtonsVisible.	self changedLayout</body><body package="ADvance2">viewport	self builder component invalidate.	self		hideFooterAndDo:			[| aPointOrNil aRectangle |			self showStatus: 'Choose the viewports origin.'.			(aPointOrNil := self editor getStartPointWithCursor: Cursor origin) isNil ifTrue: [^self].			self showStatus: 'Choose the viewports corner.'.			aRectangle := self editor getRectangleAt: aPointOrNil.			aRectangle := aRectangle origin extent: (aRectangle width max: aRectangle height).			self emptyStatus.			self editor basicZoomForRectangle: aRectangle.			self model diagramState value trackResize: false. "No fit to window anymore."			self updateZoomRepairNow: true; updateZoomValue.			(Delay forMilliseconds: 500) wait. "Wait to avoid moving of wrong selection"			]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>changing</category><body package="ADvance2">changedEditorSelection	| selectedClassesSize |	self iccEnable: self hasSelection itemAndButtonGroup: #(#delete).	selectedClassesSize := self selectedClasses size.	self iccEnable: selectedClassesSize &gt; 0 itemAndButtonGroup: #(#selectSubclasses #hideSelectedClasses #removeScripts #removeFilters).	self iccEnable: self hasSelectedMessages itemAndButtonGroup: #(#hideSelectedMessages).	self iccEnable: selectedClassesSize = 1 itemAndButtonGroup: #(#editScripts #addAttribute #addAssociation #addService #addMessage #addRelatedClasses #addInitiators #addParticipants #rename).	self iccEnable: (selectedClassesSize &lt;= 1 and: [self hasDomain])		itemAndButtonGroup: #(#addClass)</body><body package="ADvance2">changedLayout	"Hide or show the toolbar and regenerate the interface."	| addButtonsWrapper panesWrapper toolbarVisible addButtonsVisible |	addButtonsWrapper := builder componentAt: #addButtons.	panesWrapper := builder componentAt: #editor.	toolbarVisible := self state toolbarVisible.	addButtonsVisible := self state addButtonsVisible.	addButtonsWrapper isVisible: addButtonsVisible.	addButtonsWrapper layout: (addButtonsWrapper layout topOffset: (toolbarVisible				ifTrue: [36]				ifFalse: [4])).	panesWrapper layout: (panesWrapper layout			 topOffset: (toolbarVisible					ifTrue: [30]					ifFalse: [0]);			 leftOffset: (addButtonsVisible					ifTrue: [32]					ifFalse: [0]);			 bottomOffset: (self state statusBarVisible					ifTrue: [-20]					ifFalse: [0]);			 yourself).	(builder componentAt: #topDivider)		isVisible: toolbarVisible &amp; addButtonsVisible.	(builder componentAt: #bottomDivider)		isVisible: self state statusBarVisible &amp; addButtonsVisible.	self showAddButtonsItem indication: addButtonsVisible.	super changedLayout.</body><body package="ADvance2">changedShowAttributes	self iccBeOn: self showAttributes value group: #(#negateShowAttributesItem)</body><body package="ADvance2">changedShowRelations	self iccBeOn: self showRelations value group: #(#negateShowRelationsItem)</body><body package="ADvance2">changedShowScripts	self iccBeOn: self showScripts value group: #(#negateShowScriptsItem)</body><body package="ADvance2">changedShowServices	self iccBeOn: self showServices value group: #(#negateShowServicesItem)</body><body package="ADvance2">changedShowStructure	self iccBeOn: self showStructure value group: #(#negateShowStructureItem)</body><body package="ADvance2">changedShowTypes	self iccBeOn: self showTypes value group: #(#negateShowTypesItem)</body><body package="ADvance2">changedShowValues	self changedShowStructure.	self changedShowAttributes.	self changedShowRelations.	self changedShowServices.	self changedShowScripts</body><body package="ADvance2">changedTargetDomain	self setWindowLabel.	self iccEnable: self hasDomain itemAndButtonGroup: #(#newDiagram #updateDiagram #save #saveAs #printDiagram #printPreview #editClassVisibility #editMessageVisibility #viewport #copyToClipboard #selectAll #openFindDialog #editSubject #editFilter #editProperties #addClass #addNote #openDocumentationEditor #showAllClasses #hideNonScriptClasses #showAllMessages #openScriptDocuDialog #openDiagramFilterEditor #doAutoLayout #snapToGrid).	self iccEnable: self hasDomain group: #(#zoomComboBox #fitToWindowButton)</body><body package="ADvance2">changedZoom	"Select the appropriate item in the zoom menu."	self setZoomTo: self zoom value.	self editor redrawDamageArea.	self model beModified</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-edit</category><body package="ADvance2">copyToClipboard	"Copy the current painter contents to the OS clipboard."	| view pixmap |	view := self editor view.	pixmap := view newPixmapWithExtent: view bounds extent.	[view basicDisplayOn: (pixmap graphicsContext translateBy: view graphicsContext clippingBounds origin negated; yourself).	pixmap toClipboard]		valueNowOrOnUnwindDo: [pixmap close]</body><body package="ADvance2">delete	| minorChanges |	minorChanges := self basicRemoveTexts.	self basicRemoveClassesFromSubject | self basicRemoveAssociations		ifTrue: [self updateDiagram]		ifFalse: [minorChanges ifTrue: [self model redraw]]</body><body package="ADvance2">editFilter	self selectedClasses size = 1		ifTrue: [self openClassFilterEditor]		ifFalse: [self openDiagramFilterEditor]</body><body package="ADvance2">editProperties	| selectedClasses |	selectedClasses := self selectedClasses.	(selectedClasses size = 1		ifTrue: [selectedClasses first]		ifFalse: [self model]) editProperties</body><body package="ADvance2">editScripts	self selectedClasses first openScriptSelectionDialog</body><body package="ADvance2">editSubject	| subject |	subject := self model domain.	((self advance subjectEditorClass newOn: subject filtered: subject isEmpty not)		openInterface: #windowSpec for: self window)		ifFalse: [^self].	self updateDiagram</body><body package="ADvance2">openFindDialog	"Request a class from user and try to find and select it."	self model components isEmpty ifTrue: [^self].	self findClass: (self adDialog			findClass: 'Find class:'			in: self model domain environment			onCancel: [^self]			for: self window)</body><body package="ADvance2">painterPreferences	"Open a dialog for the painter preferences and regenerate the interface."	super painterPreferences.	self updateDiagram</body><body package="ADvance2">rename	self unimplemented</body><body package="ADvance2">selectAll	self model components isEmpty ifTrue: [^self].	self editor selectAll</body><body package="ADvance2">selectSubclasses	| environment |	environment := self model domain environment.	self selectedClasses do: [:each | each domain allSubclasses do: [:aClass | (environment includes: aClass)				ifTrue: [(self model projectionFor: aClass)						changed: #select]]]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>menus&amp;items</category><body package="ADvance2">firstMenu	^(self mainMenu atNameKey: #file) submenu</body><body package="ADvance2">gridHideItem	^self gridMenu submenu menuItemLabeled: 'Hide'</body><body package="ADvance2">gridMenu	^(self builder componentAt: #ViewMenu) submenu menuItemLabeled: 'Grid'</body><body package="ADvance2">gridOffItem	^self gridMenu submenu menuItemLabeled: 'Off'</body><body package="ADvance2">gridOnItem	^self gridMenu submenu menuItemLabeled: 'On'</body><body package="ADvance2">gridShowIfOnItem	^self gridMenu submenu menuItemLabeled: 'Show if on'</body><body package="ADvance2">gridShowItem	^self gridMenu submenu menuItemLabeled: 'Show'</body><body package="ADvance2">gridSize16Item	^self gridMenu submenu menuItemLabeled: 'Grid size 16'</body><body package="ADvance2">gridSize32Item	^self gridMenu submenu menuItemLabeled: 'Grid size 32'</body><body package="ADvance2">gridSize8Item	^self gridMenu submenu menuItemLabeled: 'Grid size 8'</body><body package="ADvance2">gridSizeDialogItem	^self gridMenu submenu menuItemLabeled: 'Grid size...'</body><body package="ADvance2">gridXOnlyItem	^self gridMenu submenu menuItemLabeled: 'X only'</body><body package="ADvance2">gridYOnlyItem	^self gridMenu submenu menuItemLabeled: 'Y only'</body><body package="ADvance2">showAddButtonsItem	^(self mainMenu atNameKey: #toolbars) submenu menuItemLabeled: 'Show Add buttons'</body><body package="ADvance2">zoomMenu	^(self builder componentAt: #ViewMenu) submenu menuItemLabeled: 'Zoom'</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>private</category><body package="ADvance2">findClass: aClass	"Try to find the symbol named aClassName. Answer wether the object is found."	| searchedObject |	searchedObject := self editor activeLayer detect: [:each | each model domain == aClass]				ifNone: [nil].	searchedObject isNil ifTrue: [^self].	searchedObject model isVisible: true.	self editor selectAndMakeVisible: searchedObject</body><body package="ADvance2">safeOpenDiagramFor: aTarget	| subjectName diagramName subject |	subjectName := aTarget at: 1.	diagramName := aTarget at: 2.	subject := self advance subjectEnvironment at: subjectName ifAbsent: [nil].	(subject isNil or: [(subject hasDiagramNamed: diagramName) not])		ifTrue: [self adDialog warn: ('&lt;1s&gt;/&lt;2s&gt; doesn''t exist any longer.' expandMacrosWith: subjectName with: diagramName)				for: self builder window]		ifFalse: [self openDiagramOn: subject name: diagramName]</body><body package="ADvance2">selectedAssociations	^self selectedModels select: [:each | each domainType == #association]</body><body package="ADvance2">selectedClasses	^self selectedModels select: [:each | each domainType == #class]</body><body package="ADvance2">selectedMessages	^self selectedModels select: [:each | each domainType == #message]</body><body package="ADvance2">selectedModels	^(self editor selection select: [:each | each isVisible and: [each model notNil]])		collect: [:each | each model]</body><body package="ADvance2">selectedTexts	^self selectedModels select: [:each | each domainType == #text]</body><body package="ADvance2">windowListMenuLabel	"^&lt;nil | String&gt; Answer the models name or nil if absent."	^self hasDomain		ifTrue: [self model fullDiagramName]		ifFalse: ['&lt;empty&gt;']</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>aspects</category><body package="ADvance2">anEditor	^anEditor</body><body package="ADvance2">showAttributes	^self model showAttributes</body><body package="ADvance2">showNamespaces	^self model showNamespaces</body><body package="ADvance2">showRelations	^self model showAssociations</body><body package="ADvance2">showScripts	^self model showScripts</body><body package="ADvance2">showServices	^self model showServices</body><body package="ADvance2">showStructure	^self model showStructure</body><body package="ADvance2">showTypes	^self model showTypes</body><body package="ADvance2">statusField2	^nil asValue</body><body package="ADvance2">targetDomain	^(AspectAdaptor subject: model)		forAspect: #domain;		onChangeSend: #changedTargetDomain to: self; yourself</body><body package="ADvance2">useBuffering	^(AspectAdaptor subject: self editor view)		forAspect: #useBuffering</body><body package="ADvance2">zoom 	^zoom</body><body package="ADvance2">zoomList	| menu |	menu := self zoomMenu submenu.	^(menu labels copyFrom: 1 to: menu lines first) asValue</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>events</category><body package="ADvance2">resize	"The window has been resized. If the receiver has a diagram that whishes to	be zoomed to window size then fitToWindow."	super resize.	(self hasDomain and: [self model diagramState value trackResize])		ifFalse: [^self].	self fitToWindowRepairNow: false</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>drag and drop</category><body package="ADvance2">canAcceptEditorDropFrom: aDragContext	"Accept drags of classes and categories onto the editor view, iff	I have a domain model."	| aSymbol |	aSymbol := aDragContext key.	^aSymbol == #ADvanceDiagram or: [self hasDomain and: [#(#classOrNamespace #category #ADvanceSubject #ADvanceFilter) includes: aSymbol]]</body><body package="ADvance2">editorDragEnter: aDragContext	"A drag has entered the editor view. If the drag is acceptable, indicate a move,	otherwise indicate no effect."	^(self canAcceptEditorDropFrom: aDragContext)		ifTrue: [#dropEffectMove]		ifFalse: [#dropEffectNone]</body><body package="ADvance2">editorDragLeave: aDragContext	"A drag leaves the editor view. Indicate no effect.	Future releases may change editors state."	"(self canAcceptEditorDropFrom: aDragContext) ifTrue: [self editor endTransition]."	^#dropEffectNone</body><body package="ADvance2">editorDragOver: aDragContext	"A drag is over the editor view. If the drag is acceptable, indicate a move,	otherwise indicate no effect."	^(self canAcceptEditorDropFrom: aDragContext)		ifTrue: [#dropEffectMove]		ifFalse: [#dropEffectNone]</body><body package="ADvance2">editorDrop: aDragContext	"A drop has occurred on the editor view. If the drop is acceptable, add	the appropriate client data to the current subject."	| clientData aPoint |	(self canAcceptEditorDropFrom: aDragContext)		ifFalse: [^#dropEffectNone].	clientData := aDragContext sourceData clientData.	aPoint := self editor view globalPointToLocal: aDragContext mousePoint - self window globalOrigin.	aDragContext key == #classOrNamespace ifTrue: [self editorDropClassOrNamespace: (clientData at: #classOrNamespace)			at: aPoint].	aDragContext key == #category ifTrue:		[self editorDropCategory: (clientData at: #category)].	aDragContext key == #ADvanceSubject ifTrue: [self editorDropSubject: clientData].	aDragContext key == #ADvanceDiagram ifTrue: [self editorDropDiagram: clientData].	aDragContext key == #ADvanceFilter ifTrue: [self editorDropFilter: clientData at: aPoint].	^#dropEffectNone</body><body package="ADvance2">editorDropCategory: aCategory	"A category drop has occured on the editor view. Add it to the current subject	and diagram. If the class set changes update myself."	| subject |	subject := self model domain.	subject addClasses: (self adBasics systemOrganization classesInCategory: aCategory)		onChange:			[subject invalidateTypes.			self updateDiagram]</body><body package="ADvance2">editorDropClassOrNamespace: collection at: aPoint	"A class drop has occured on the editor view. Add it to the current subject	and diagram. If the class set changes update myself."	| newClasses subject |	newClasses := Set new.	collection do:		[:each |		each isBehavior			ifTrue: [newClasses add: each]			ifFalse: [newClasses addAll: (each classNames collect: [:className | each at: className])]].	newClasses := newClasses - self model domain allClasses.	newClasses isEmpty		ifTrue: [^self].	newClasses size = 1		ifTrue: [self basicAddClass: newClasses asArray first at: aPoint].	(subject := self model domain) addClasses: newClasses		onChange:			[subject invalidateTypes.			self updateDiagram]</body><body package="ADvance2">editorDropDiagram: aDiagram	"A diagram drop has occured on the editor view. Open it in the painter."	self openDiagramOn: aDiagram subject name: aDiagram name</body><body package="ADvance2">editorDropFilter: aFilter at: aPoint	"A filter drop has occured on the editor view. Look for the classes under the	cursor (otherwise use the diagram), set its filter, then update myself."	| objectUnderCursor filterTarget |	objectUnderCursor := self editor objectAtCursor: aPoint.	filterTarget := (objectUnderCursor notNil and: [objectUnderCursor model domainType == #class])				ifTrue: [objectUnderCursor model]				ifFalse: [self model].	filterTarget structureFilter: aFilter; updateServices;updateAttributes.	self editor redrawDamageArea.	self model beModified</body><body package="ADvance2">editorDropSubject: aSubject	"A subject drop has occured on the editor view. Add its classes to the current subject	and diagram. If the class set changes update myself."	"Type invalidation is necessary due to a bug in Types."	| subject |	subject := self model domain.	subject addClasses: aSubject allClasses		onChange:			[subject invalidateTypes.			self updateDiagram]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-add</category><body package="ADvance2">addAssociation	self selectedClasses first addAssociation</body><body package="ADvance2">addAttribute	self selectedClasses first addAttribute</body><body package="ADvance2">addClass	"Add a class to the diagram. First request a class (with pattern support).	from user (may create a new class). Then request a position for the class	symbol, type check all domain classes, and finally update the diagram.	Note that this is conceptually difficult due to the namespaces:	The behavior I found was that a class with the given name was added if it existed	and created and then added, if not.	The problem with this lies in the import statements of namespaces.	The existance of a class is checked by the system following the import rules.	Thus, if A imports B, checking for the existence of the class 'A.X'	may produce 'B.X' as a result.	On the other hand, adding a class from the smalltalk system should not require	the full path for the reason of compatibility with older versions of VW.	The solution I chose was to allow searching for simple class names and	to disable it for fully qualified ones.	The logic for this is in AD2SystemEnvironment&gt;&gt;at:ifAbsent:."	self		hideFooterAndDo:			[| superclassName aPointOrNil aCursor newClassOrNil |			superclassName := self selectedClasses size = 1						ifTrue: [self selectedClasses first fullName]						ifFalse: [nil].			newClassOrNil := self adDialog						chooseClassFrom: nil						superclassName: superclassName						for: self builder window.			newClassOrNil isNil ifTrue: [^self].			aCursor := Cursor						image: (self class classCursor palette: MappedPalette whiteBlack)						mask: self class classCursor						hotSpot: 1 @ 1						name: #'... bin Lohengrin genannt.'.			self showStatus: 'Choose a point where to add the new class.'.			(aPointOrNil := self editor getStartPointWithCursor: aCursor) isNil ifTrue: [^self].			self emptyStatus.			self basicAddClass: newClassOrNil at: aPointOrNil]</body><body package="ADvance2">addInitiators	self selectedClasses first addInitiators</body><body package="ADvance2">addMessage	self selectedClasses first addMessage</body><body package="ADvance2">addNote	"Request a position for the text; then edit the text."	self		hideFooterAndDo:			[| aPointOrNil aTextModel aCursor |			aCursor := Cursor						image: (self class labelCursor palette: MappedPalette whiteBlack)						mask: self class labelCursor						hotSpot: 1 @ 1						name: #susi.			self showStatus: 'Choose a point where to add a text.'.			(aPointOrNil := self editor getStartPointWithCursor: aCursor) isNil ifTrue: [^self].			self emptyStatus.			aTextModel := self model addText: 'aText' at: (self editor pointFromView: aPointOrNil).			aTextModel displayIn: self editor.			aTextModel				changed: #newString				with: 'aText'.			self editor redrawDamageArea.			aTextModel edit]</body><body package="ADvance2">addParticipants	self selectedClasses first addParticipants</body><body package="ADvance2">addRelatedClasses	self selectedClasses first addRelatedClasses</body><body package="ADvance2">removeFilters	self model removeFiltersFor: self selectedClasses</body><body package="ADvance2">removeScripts	self model removeScriptsFor: self selectedClasses</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>type inference</category><body package="ADvance2">inferAllTypesOf: aCollectionOfClasses	| size |	size := aCollectionOfClasses size.	aCollectionOfClasses		keysAndValuesDo:			[:index :each |			each fullType elaborate.			each clientRelations				do:					[:eachClientRelation |					| roleClass |					roleClass := eachClientRelation roleClass.					roleClass isNil ifFalse: [roleClass fullType elaborate]].			self footerProgress value: index / size]</body><body package="ADvance2">inferTypesFor: aSubject	self		hideFooterAndDo:			[self showStatus: 'Inferring types...'.			self inferAllTypesOf: aSubject allClasses]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>private-mru list</category><body package="ADvance2">addTarget: aTarget	self class addTarget: aTarget.	self regenerateFirstMenu</body><body package="ADvance2">mruMenuItemAt: i labeled: aLabel	| rawLabel |	rawLabel := '&amp;' , i printString , ' ' , (self wrapAmpersands: aLabel).	^MenuItem labeled: (rawLabel contractTo: 36)</body><body package="ADvance2">regenerateFirstMenu	| aMenu firstIndexToRemove exitItem exitValue items values |	self class removeObsoleteTargets.	aMenu := self firstMenu.	firstIndexToRemove := 1 + (aMenu lines size &lt; 4					ifTrue: [aMenu lines last]					ifFalse: [aMenu lines at: aMenu lines size - 1]).	exitItem := aMenu menuItems last.	exitValue := aMenu values last.	aMenu numberOfItems		to: firstIndexToRemove		by: -1		do: [:anIndex | aMenu removeItem: (aMenu menuItemAt: anIndex)].	items := OrderedCollection new.	values := OrderedCollection new.	1 to: self class mruList size		do:			[:i |			| target |			target := self class mruList at: i.			items add: (self mruMenuItemAt: i labeled: (self targetString: target)).			values add: [self safeOpenDiagramFor: target]].	items isEmpty ifFalse: [aMenu addItemGroup: items values: values].	aMenu addItemGroup: (Array with: exitItem)		values: (Array with: exitValue)</body><body package="ADvance2">removeTarget: aTarget	self class removeTarget: aTarget.	self regenerateFirstMenu</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>testing</category><body package="ADvance2">hasDomain	^self targetDomain value notNil</body><body package="ADvance2">hasSelectedClasses	^self selectedClasses isEmpty not</body><body package="ADvance2">hasSelectedMessages	^self selectedMessages isEmpty not</body><body package="ADvance2">hasSelection	^(self editor selection reject: [:each | 		each model notNil 		and: [each model domainType == #message]]) isEmpty not</body><body package="ADvance2">isADvanceDiagramPainter	^true</body><body package="ADvance2">isDirty	^self hasDomain and: [self model modified value]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>interface opening</category><body package="ADvance2">generateToolBarWith: aBuilder	| toolbarSpec |	super generateToolBarWith: aBuilder.	toolbarSpec := self toolbarGenerator toolBarSpec.	toolbarSpec		 addButtonSpecs: self class switchesSpec;		 addButtonSpace;		 addButtonSpec: self class fitToWindowSpec;		 addButtonSpace;		 addButtonSpec: self class zoomSpec;		 addButtonSpace.	toolbarSpec basicAddSpec: (self class dividerSpec layout: (toolbarSpec origin x @ 0 extent: 4 @ 32))</body><body package="ADvance2">postBuildWith: aBuilder	| application |	super postBuildWith: aBuilder.	application := aBuilder window application.	(application isKindOf: Refactory.Browser.RefactoringBrowser) ifTrue:		[application toolSetsList  selectionIndexHolder onChangeSend: #currentToolsetChanged to: self].	self editor application: model.	"We use double buffering to reduce flickering."	aBuilder window damageRepairPolicy: self class damageRepairPolicyClass new.	self editor transformation		minScale: self class zoomMinimum; 		maxScale: self class zoomMaximum.	self regenerateZoomMenu.	self updateZoomMenu.	self changedTargetDomain.	self regenerateFirstMenu.	self changedShowValues.	self changedEditorSelection.	self changedLayout.	self gridInitialize</body><body package="ADvance2">postGenerateToolBarWith: aBuilder	| menu |	menu := self mainMenu.	(menu atNameKey: #plugins)		submenu: [self advance plugInAPI getPlugInsOpenMenuFor: self].	(menu atNameKey: #aboutPlugins)		submenu: [self advance plugInAPI getAboutPlugInsMenu].	(menu atNameKey: #diagramWindows)		submenu: [self advance plugInAPI getPainterWindowsMenu].</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self setZoomTo: '100%'</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>actions-help</category><body package="ADvance2">about	self adDialog aboutDialogClass showInfo: self advance for: self window</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter</class-id> <category>private-footer</category><body package="ADvance2">makeStatusBarVisible: aBoolean	super makeStatusBarVisible: aBoolean.	aBoolean ifTrue: [self resetAndHideProgressStatus]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>resources opaque</category><body package="ADvance2">addAssociationOpaqueImage	^self resources opaqueImageAt: #addAssociation</body><body package="ADvance2">addAttributeOpaqueImage	^self resources opaqueImageFor: self named: #addAttributeImage</body><body package="ADvance2">addClassOpaqueImage	^self resources opaqueImageFor: self named: #addClassImage</body><body package="ADvance2">addMessageOpaqueImage	^self resources opaqueImageAt: #addMessage</body><body package="ADvance2">addNoteOpaqueImage	^self resources opaqueImageFor: self named: #addNoteImage</body><body package="ADvance2">advanceOpaqueImage	^self resources opaqueImageFor: self named: #advanceImage</body><body package="ADvance2">associationsOpaqueImage	^self resources opaqueImageFor: self named: #associationsImage</body><body package="ADvance2">attributesOpaqueImage	^self resources opaqueImageFor: self named: #attributesImage</body><body package="ADvance2">fitToWindowOpaqueImage	^self resources opaqueImageAt: #fitToWindow</body><body package="ADvance2">namespacesOpaqueImage	^self resources opaqueImageFor: self named: #namespacesImage</body><body package="ADvance2">scriptsOpaqueImage	^self resources opaqueImageAt: #scripts</body><body package="ADvance2">servicesOpaqueImage	^self resources opaqueImageFor: self named: #servicesImage</body><body package="ADvance2">structureOpaqueImage	^self resources opaqueImageFor: self named: #structureImage</body><body package="ADvance2">typesOpaqueImage	^self resources opaqueImageFor: self named: #typesImage</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>constants</category><body package="ADvance2">damageRepairPolicyClass	 ^DoubleBufferingWindowDisplayPolicy</body><body package="ADvance2">initiallyDisabledItems	^#(#openHelpContents)</body><body package="ADvance2">itemSpecs	^super itemSpecs		 at: #addAssociation put: (self toolbarItemAt: #addAssociation);		 at: #addAttribute put: (self toolbarItemFor: #addAttributeImage);		 at: #addClass put: (self toolbarItemFor: #addClassImage);		 at: #addInitiators put: (self toolbarItemFor: #addInitiatorsImage);		 at: #addMessage put: (self toolbarItemAt: #addMessage);		 at: #addParticipants put: (self toolbarItemFor: #addParticipantsImage);		 at: #addRelatedClasses put: (self toolbarItemFor: #addRelatedClassesImage);		 at: #addService put: (self toolbarItemFor: #addServiceImage);		 at: #addNote put: (self toolbarItemFor: #addNoteImage);		 at: #copyToClipboard put: (self toolbarItemAt: #empty);		 at: #doAutoLayout put: (self toolbarItemAt: #empty);		 at: #editClassVisibility put: (self toolbarItemAt: #empty);		 at: #editScripts put: (self toolbarItemAt: #editScripts);		 at: #editMessageVisibility put: (self toolbarItemAt: #empty);		 at: #hideNonScriptClasses put: (self toolbarButton: (self resources opaqueImageFor: self named: #hideNonScriptClassesImage));		 at: #hideSelectedClasses put: (self toolbarItemFor: #hideSelectedClassesImage);		 at: #hideSelectedMessages put: (self toolbarItemAt: #hideSelectedMessages);		 at: #negateShowNamespaces put: (self toolbarItem: self namespacesOpaqueImage);		 at: #negateShowAttributes put: (self toolbarItem: self attributesOpaqueImage);		 at: #negateShowRelations put: (self toolbarItem: self associationsOpaqueImage);		 at: #negateShowScripts put: (self toolbarItemAt: #scripts);		 at: #negateShowServices put: (self toolbarItem: self servicesOpaqueImage);		 at: #negateShowStructure put: (self toolbarItem: self structureOpaqueImage);		 at: #negateShowTypes put: (self toolbarItem: self typesOpaqueImage);		 at: #newDiagram put: (self toolbarItem: (self resources opaqueImageAt: #newSrc));		 at: #openDiagram put: (self toolbarButton: (self opaqueImageAt: #openSrc));		 at: #editFilter put: (self toolbarItemAt: #diagramFilter);		 at: #openDiagramPainter put: (self toolbarItemFor: #applicationImage);		 at: #openDocumenter put: (self toolbarItem: (self resources opaqueImageFor: self advance documenterClass named: #applicationImage));		 at: #openFilterBrowser put: (self toolbarItem: self advance filterBrowserClass opaqueApplicationImage);		 at: #openFilterPalette put: (self toolbarItem: self advance filterPaletteClass opaqueApplicationImage);		 at: #openFindDialog put: (self toolbarItemAt: #find);		 at: #openMessageNavigator put: (self toolbarItem: (self resources opaqueImageFor: self advance messageNavigatorClass named: #applicationImage));		 at: #openScriptDocuDialog put: (self toolbarItemAt: #scriptDocu);		 at: #openSubjectBrowser put: (self toolbarItem: (self resources opaqueImageFor: self advance subjectBrowserClass named: #applicationImage));		 at: #editSubject put: (self toolbarItemAt: #editSubject);		 at: #pageSetup put: (self toolbarItemAt: #empty);		 at: #filterNonScriptServices put: (self toolbarItemAt: #empty);		 at: #printPreview put: (self toolbarItemAt: #printPreview);		 at: #removeScripts put: (self toolbarItemFor: #removeScriptsImage);		 at: #removeFilters put: (self toolbarItemAt: #removeClassFilters);		 at: #saveAs put: (self toolbarItemAt: #empty);		 at: #selectAll put: (self toolbarButton: (self resources opaqueImageFor: self named: #selectAllImage));		 at: #selectSubclasses put: (self toolbarButton: (self resources opaqueImageFor: self named: #selectSubclassesImage));		 at: #showAllClasses put: (self toolbarButton: (self resources opaqueImageFor: self named: #showAllClassesImage));		 at: #showAllMessages put: (self toolbarItemAt: #showAllMessages);		 at: #snapToGrid put: (self toolbarItemAt: #snapToGrid);		 at: #editProperties put: (self toolbarItemAt: #classProperties);		 at: #updateDiagram put: (self toolbarButtonAt: #update);		 at: #viewport put: (self toolbarItemAt: #viewport);		 yourself</body><body package="ADvance2">windowLabel	^'ADvance'</body><body package="ADvance2">zoomMaximum	^10</body><body package="ADvance2">zoomMinimum	^0.2</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>mru list</category><body package="ADvance2">addTarget: anObject	self mruList add: anObject</body><body package="ADvance2">mruList	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	MRUList isNil ifTrue: [self initializeMRUList].	^MRUList</body><body package="ADvance2">removeObsoleteTargets	self mruList copy		do:			[:aTarget |			| subjectName diagramName subject |			subjectName := aTarget at: 1.			diagramName := aTarget at: 2.			subject := self advance subjectEnvironment at: subjectName ifAbsent: [nil].			(subject isNil or: [(subject hasDiagramNamed: diagramName) not])				ifTrue: [self removeTarget: aTarget]]</body><body package="ADvance2">removeTarget: anObject	self mruList remove: anObject</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>interface specs</category><body package="ADvance2">dividerSpec	^#(#{UI.DividerSpec} #layout: #(#Rectangle 506 0 510 32) #orientation: #vertical ) decodeAsLiteralArray</body><body package="ADvance2">fitToWindowSpec	^self specWithHelpText: (#(#{ICC.ADvance.AD2ToolbarButtonSpec} 		#layout: #(#Rectangle 0 0 24 22) 		#name: #fitToWindowButton 		#model: #fitToWindow 		#tabable: true 		#label: #fitToWindowOpaqueImage 		#hasCharacterOrientedLabel: false) 		decodeAsLiteralArray)</body><body package="ADvance2">switchesSpec	| theCollection |	theCollection := OrderedCollection new.	theCollection		add: (self specWithHelpText: #(#{ICC.ICC1LabeledCheckButtonSpec}							#layout: #(#{Graphics.Rectangle} 0 0 24 22 )							#name: #showNamespacesButton							#colors:							#(#{UI.LookPreferences}								#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7200 7200 7200 ) )							#model: #showNamespaces							#tabable: false							#label: #namespacesOpaqueImage							#hasCharacterOrientedLabel: false ) decodeAsLiteralArray);		add: (self specWithHelpText: #(#{ICC.ICC1LabeledCheckButtonSpec}							#layout: #(#{Graphics.Rectangle} 24 0 48 22 )							#name: #showAttributesButton							#colors:							#(#{UI.LookPreferences}								#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7200 7200 7200 ) )							#model: #showAttributes							#tabable: false							#label: #attributesOpaqueImage							#hasCharacterOrientedLabel: false ) decodeAsLiteralArray);		add: (self specWithHelpText: #(#{ICC.ICC1LabeledCheckButtonSpec}							#layout: #(#{Graphics.Rectangle} 48 0 72 22 )							#name: #showTypesButton							#colors:							#(#{UI.LookPreferences}								#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7200 7200 7200 ) )							#model: #showTypes							#tabable: false							#label: #typesOpaqueImage							#hasCharacterOrientedLabel: false ) decodeAsLiteralArray);		add: (self specWithHelpText: #(#{ICC.ICC1LabeledCheckButtonSpec}							#layout: #(#{Graphics.Rectangle} 72 0 96 22 )							#name: #showServicesButton							#flags: 8							#colors:							#(#{UI.LookPreferences}								#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7200 7200 7200 ) )							#model: #showServices							#tabable: false							#label: #servicesOpaqueImage							#hasCharacterOrientedLabel: false ) decodeAsLiteralArray);		add: (self specWithHelpText: #(#{ICC.ICC1LabeledCheckButtonSpec}							#layout: #(#{Graphics.Rectangle} 100 0 124 22 )							#name: #showStructureButton							#colors:							#(#{UI.LookPreferences}								#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7200 7200 7200 ) )							#model: #showStructure							#label: #structureOpaqueImage							#tabable: false							#hasCharacterOrientedLabel: false ) decodeAsLiteralArray);		add: (self specWithHelpText: #(#{ICC.ICC1LabeledCheckButtonSpec}							#layout: #(#{Graphics.Rectangle} 124 0 148 22 )							#name: #showRelationsButton							#colors:							#(#LookPreferences								#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7200 7200 7200 ) )							#model: #showRelations							#label: #associationsOpaqueImage							#tabable: false							#hasCharacterOrientedLabel: false ) decodeAsLiteralArray);		add: (self specWithHelpText: #(#{ICC.ICC1LabeledCheckButtonSpec}							#layout: #(#{Graphics.Rectangle} 148 0 172 22 )							#name: #showScriptsButton							#colors:							#(#{UI.LookPreferences}								#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7200 7200 7200 ) )							#model: #showScripts							#label: #scriptsOpaqueImage							#tabable: false							#hasCharacterOrientedLabel: false ) decodeAsLiteralArray).	^theCollection</body><body package="ADvance2">zoomSpec	^self specWithHelpText: (#(#{UI.ComboBoxSpec} 		#layout: #(#Rectangle 434 4 506 26) 		#name: #zoomComboBox 		#model: #zoom 		#isReadOnly: false 		#type: #string 		#comboList: #zoomList 		#callbacksSpec: #(#{UI.UIEventCallbackSubSpec} #requestValueChangeSelector: #zoomIsValid:)) 		decodeAsLiteralArray)</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	self initializeMRUList</body><body package="ADvance2">uninitialize	"self uninitialize"	MRUList := nil</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>private</category><body package="ADvance2">getHelpDictionary	"self initializeHelpDictionary"	^super getHelpDictionary		 at: #openDiagramButton put: #('Open diagram' 'Opens an existing diagram.');		 at: #saveButton put: #('Save' 'Saves the current diagram.');		 at: #printDiagramButton put: #('Print' 'Prints the diagram.');		 at: #fitToWindowButton put: #('Fit to window' 'Changes the zoom such that the diagram fits the window size.');		 at: #zoomComboBox put: #('Change zoom' 'Changes the diagrams zoom.');		 at: #newDiagramButton put: #('New diagram' 'Opens a diagram on the current subject with default layout.');		 at: #updateDiagramButton put: #('Update' 'Makes the current diagram consistent with the system.');		 at: #deleteButton put: #('Delete' 'Deletes the selection from diagram, selected classes from subject.');		 at: #selectAllButton put: #('Select all' 'Selects all classes and texts in the diagram.');		 at: #selectSubclassesButton put: #('Select subclasses' 'Selects all subclasses of selected classes.');		 at: #addClassButton put: #('Add class' 'Creates a class and adds it to the diagram.');		 at: #addAttributeButton put: #('Add attribute' 'Adds an attribute to the selected class.');		 at: #addAssociationButton put: #('Add association' 'Adds an association from the selected class to a target class.');		 at: #addServiceButton put: #('Add service' 'Adds a service to the selected class.');		 at: #addMessageButton put: #('Add message' 'Adds a message connection from the selected class to a target class.');		 at: #addNoteButton put: #('Add note' 'Adds a free text to the diagram.');		 at: #addRelatedClassesButton put: #('Add related classes' 'Adds related classes of the selected class to the diagram.');		 at: #addInitiatorsButton put: #('Add initiators' 'Adds initiators of the selected class to the diagram.');		 at: #addParticipantsButton put: #('Add participants' 'Adds participants of the selected class to the diagram.');		 at: #showAllClassesButton put: #('Show all classes' 'Makes all classes of the current diagram visible.');		 at: #hideNonScriptClassesButton put: #('Hide non script classes' 'Hides all classes not in use in scripts.');		 at: #showStructureButton put: #('Inheritance on/off' 'Toggles displaying of the inheritance layer.');		 at: #showAttributesButton put: #('Attributes on/off' 'Toggles displaying of attributes.');		 at: #showNamespacesButton put: #('Namespaces on/off' 'Toggles displaying of namespaces.');		 at: #showTypesButton put: #('Types on/off' 'Toggles displaying of attribute types.');		 at: #showRelationsButton put: #('Relations on/off' 'Toggles displaying of the relation layer.');		 at: #showServicesButton put: #('Services on/off' 'Toggles displaying of services.');		 at: #showScriptsButton put: #('Scripts on/off' 'Toggles displaying of the script layer.');		 yourself</body><body package="ADvance2">newToolState	^AD2PainterState new</body><body package="ADvance2">specWithHelpText: aUISpec 	^aUISpec		helpText: (self helpTextFor: aUISpec name);		yourself</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>private initialization</category><body package="ADvance2">initializeMRUList	MRUList := AD2MRUList limit: 4</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser</class-id> <category>changing</category><body package="ADvance2">changedLayout	"Hide or show the toolbar and regenerate the interface."	| panesWrapper |	panesWrapper := builder componentAt: #filterTree.	panesWrapper layout: (panesWrapper layout			 topOffset: (self state toolbarVisible					ifTrue: [26]					ifFalse: [0]);			 leftOffset: 0;			 bottomOffset: (self state statusBarVisible					ifTrue: [-20]					ifFalse: [0]);			 yourself).	super changedLayout</body><body package="ADvance2">enableButtons	self iccEnable: self filterTree selection notNil itemAndButtonGroup: #(#openFilter #save #delete #rename)</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser</class-id> <category>private</category><body package="ADvance2">findFilter: aFilter	"Select aFilter in the filter tree."	| index |	index := self filterTree list asArray indexOf: aFilter ifAbsent: [^self].	self filterTree selectionIndex: index</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser</class-id> <category>actions</category><body package="ADvance2">delete	| filter |	self filterTree selection isNil ifTrue: [^self].	(filter := self selectedFilter) isNil ifTrue: [^self updateWithNotification].	(self adDialog confirm: ('Do you want to delete filter&lt;n&gt;&lt;1p&gt;?' expandMacrosWith: filter name)		for: self builder window)		ifFalse: [^self].	filter remove.	self update</body><body package="ADvance2">editFilter	| filter |	self filterTree selection isNil ifTrue: [^self].	(filter := self selectedFilter) isNil ifTrue: [^self updateWithNotification].	((self advance filterEditorClass new domain: filter)		openInterface: #windowSpec for: self window)		ifTrue: [filter save]</body><body package="ADvance2">find	"Request a filter pattern from user and try to find and select it."	| filters selectedItem |	filters := self advance filterEnvironment filters asSortedCollection.	selectedItem := self adDialog				find: 'Find filter:'				labels: (filters collect: [:each | each name])				values: filters				onCancel: [^self]				for: self window.	self findFilter: selectedItem</body><body package="ADvance2">newFilter	| filter baseClass |	filter := self advance storedFilterClass new name: '&lt;new&gt;'.	baseClass := self adDialog				pickClass: 'Pick Filter class'				initialSelection: self advance filterEnvironment defaultFilterClass				for: self builder window.	baseClass isNil ifTrue: [^self].	filter		 baseClass: baseClass;		 setNewId;		 save.	self update.	self findFilter: filter.	self rename</body><body package="ADvance2">openFilter	| filter |	self filterTree selection isNil ifTrue: [^self].	(filter := self selectedFilter) isNil ifTrue: [^self updateWithNotification].	((self advance filterEditorClass new domain: filter)		openInterface: #windowSpec for: self window)		ifTrue: [filter save]</body><body package="ADvance2">rename	| filter newName oldName |	self filterTree selection isNil ifTrue: [^self].	(filter := self selectedFilter) isNil ifTrue: [^self updateWithNotification].	oldName := filter name.	newName := self adDialog request: 'Please enter new filter name\' withCRs initialAnswer: oldName.	(oldName = newName or: [newName isEmpty or: [newName isNil]])		ifTrue: [^self].	filter name: newName.	(self advance filterEnvironment includesName: newName)		ifTrue:			[filter name: oldName.			^self adDialog warn: ('A filter named &lt;1p&gt; already exists.' expandMacrosWith: newName)				for: self builder window].	filter save.	self update</body><body package="ADvance2">save	| filter filename |	self filterTree selection isNil ifTrue: [^self].	(filter := self selectedFilter) isNil ifTrue: [^self updateWithNotification].	filename := self adDialog				requestNewFileName: 'File out on:'				suggest: filter name , '.st'				for: self window.	filename isEmpty ifTrue: [^nil].	filter fileOutTo: filename</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser</class-id> <category>menus&amp;items</category><body package="ADvance2">toolbarsMenu	^(self mainMenu atNameKey: #view)</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser</class-id> <category>interface-opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self filterTree selectionIndexHolder onChangeSend: #enableButtons to: self.	self changedLayout.	self enableButtons</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser class</class-id> <category>constants</category><body package="ADvance2">getHelpDictionary	"self initializeHelpDictionary"	^super getHelpDictionary		 at: #newFilterButton put: #('New' 'Creates an new and empty filter.');		 at: #saveButton put: #('Save' 'Files out the selected item.');		 at: #deleteButton put: #('Delete' 'Deletes the selected item from system.');		 at: #findButton put: #('Find' 'Finds a filter by name.');		 yourself</body><body package="ADvance2">itemSpecs	^super itemSpecs		 at: #newFilter put: (self toolbarButtonAt: #newFilter);		 at: #openFilter put: (self toolbarItemAt: #openSrc);		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2ClassSpec</class-id> <category>accessing</category><body package="ADvance2">backgroundColor	^backgroundColor</body><body package="ADvance2">backgroundColor: aColorValue	backgroundColor := aColorValue</body><body package="ADvance2">classSpecFor: aClass	"Return the receiver if its the ADClassSpec for aClass."	^self model == aClass		ifTrue: [self]		ifFalse: [nil]</body><body package="ADvance2">filter	^filter</body><body package="ADvance2">filter: aFilter	filter := aFilter</body><body package="ADvance2">layouts	^layouts</body><body package="ADvance2">layouts: aCollection	layouts := aCollection</body><body package="ADvance2">location	^location</body><body package="ADvance2">location: aPoint	location := aPoint</body><body package="ADvance2">model	^model</body><body package="ADvance2">model: aModel	model := aModel</body><body package="ADvance2">scripts	^scripts</body><body package="ADvance2">scripts: aCollection	scripts := aCollection</body><body package="ADvance2">services	^self scripts collect: [:each | AD2Service baseClass: self model extendedSelector: each]</body><body package="ADvance2">showAttributes	^showAttributes</body><body package="ADvance2">showAttributes: aBooleanOrNil	showAttributes := aBooleanOrNil</body><body package="ADvance2">showNamespaces	^showNamespaces</body><body package="ADvance2">showNamespaces: aBooleanOrNil	showNamespaces := aBooleanOrNil</body><body package="ADvance2">showServices	^showServices</body><body package="ADvance2">showServices: aBooleanOrNil	showServices := aBooleanOrNil</body><body package="ADvance2">showTypes	^showTypes</body><body package="ADvance2">showTypes: aBooleanOrNil	showTypes := aBooleanOrNil</body><body package="ADvance2">visible	^bits anyMask: Visible</body><body package="ADvance2">visible: aBoolean	bits := aBoolean				ifTrue: [bits maskSet: Visible]				ifFalse: [bits maskClear: Visible]</body></methods><methods><class-id>ICC.ADvance.AD2ClassSpec</class-id> <category>initialize-release</category><body package="ADvance2">initialize	bits := Visible.	scripts := Array new.	layouts := Array new</body></methods><methods><class-id>ICC.ADvance.AD2ClassSpec</class-id> <category>encode-decode</category><body package="ADvance2">fromLiteralArrayEncoding: anArray	location := (anArray at: 2)				@ (anArray at: 3).	bits := anArray at: 4.	5		to: anArray size		by: 2		do: [:i | self perform: (anArray at: i)				with: (anArray at: i + 1)].	self backgroundColor: self backgroundColor decodeAsLiteralArray.	self filter: self filter decodeAsLiteralArray.	layouts isEmpty ifFalse: [self layouts: (self layouts collect: [:each | each decodeAsLiteralArray])]</body><body package="ADvance2">literalArrayEncoding	| aCollection |	aCollection := OrderedCollection				with: self model fullyQualifiedReference				with: self location x				with: self location y				with: bits.	self backgroundColor isNil		ifFalse: [aCollection add: #backgroundColor:; add: self backgroundColor literalArrayEncoding].	self filter isNil 		ifFalse: [aCollection add: #filter:; add: self filter diagramLiteralArrayEncoding].	#(#showAttributes #showServices #showTypes #showNamespaces)		do: [:eachSymbol | | nextValue | (nextValue := self perform: eachSymbol) notNil 			ifTrue: [aCollection add: (eachSymbol, ':') asSymbol; add: nextValue] ].	self scripts isEmpty ifFalse: [aCollection add: #scripts:; add: self scripts asArray].	self layouts isEmpty ifFalse: [aCollection add: #layouts:; add: self layouts literalArrayEncoding].	^aCollection asArray</body></methods><methods><class-id>ICC.ADvance.AD2ClassSpec class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	Visible := 1</body></methods><methods><class-id>ICC.ADvance.AD2ClassSpec class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body><body package="ADvance2">newFor: aModel	^self new model: aModel</body></methods><methods><class-id>ICC.ADvance.AD2TextSpec</class-id> <category>encode-decode</category><body package="ADvance2">fromLiteralArrayEncoding: anArray	self location: (anArray at: 2)			@ (anArray at: 3).	self text: (Text string: (anArray at: 4)			runs: (RunArray runs: (anArray at: 5)					values: (anArray at: 6)))</body><body package="ADvance2">literalArrayEncoding	^(OrderedCollection new		 add: self class fullyQualifiedReference;		 add: self location x;		 add: self location y;		 add: self text string;		 add: self text runs runs;		 add: self text runs values;		 yourself) asArray</body></methods><methods><class-id>ICC.ADvance.AD2TextSpec</class-id> <category>accessing</category><body package="ADvance2">location	^location</body><body package="ADvance2">location: aPoint	location := aPoint</body><body package="ADvance2">text	^text</body><body package="ADvance2">text: aText	text := aText</body></methods><methods><class-id>ICC.ADvance.AD2TextSpec class</class-id> <category>encode-decode</category><body package="ADvance2">decodeFromLiteralArray: anArray	^self new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.AD2Identity</class-id> <category>printing</category><body package="ADvance2">printOn: aStream	super printOn: aStream.	aStream nextPut: $(; nextPutAll: self nickName; space; nextPutAll: self name; space; nextPutAll: self company; nextPut: $)</body></methods><methods><class-id>ICC.ADvance.AD2Identity</class-id> <category>accessing</category><body package="ADvance2">company	^company</body><body package="ADvance2">company: aString	company := aString</body><body package="ADvance2">name	^name</body><body package="ADvance2">name: aString	name := aString</body><body package="ADvance2">nickName	^nickName</body><body package="ADvance2">nickName: aString	nickName := aString</body></methods><methods><class-id>ICC.ADvance.AD2Identity</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	nickName := ''.	name := ''.	company := ''</body></methods><methods><class-id>ICC.ADvance.IccHTMLNameReference</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;A NAME="'</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog</class-id> <category>accessing</category><body package="ADvance2">resultSet	^resultSet</body><body package="ADvance2">resultSet: aValue	resultSet := aValue</body><body package="ADvance2">selectors	^selectors</body><body package="ADvance2">selectors: aValue	selectors := aValue</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog</class-id> <category>animation</category><body package="ADvance2">doAnimation	self		doAnimationsWithInitialDelay: 500		stepDelay: 700		cycleDelay: 1000</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	aBuilder window label: 'Searching Participants...'</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog</class-id> <category>processing</category><body package="ADvance2">basicDoAction	self selectors		keysAndValuesDo:			[:index :selector |			| counter |			counter := 0.			self infoField1 value: selector.			self adBasics systemEnvironment				allBehaviorsDo:					[:eachClass |					counter := counter + 1.					counter &gt; 200						ifTrue:							[Processor yield.							counter := 0].					(eachClass includesSelector: selector)						ifTrue:							[self resultSet add: eachClass.							self infoField2 value: ('Found: &lt;1p&gt; classes' expandMacrosWith: self resultSet size)]].			self showProgress: index / self selectors size]</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self resultSet: (Set new: 20)</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog class</class-id> <category>opaque images</category><body package="ADvance2">initiatorOpaqueImage	^self resources opaqueImageFor: self named: #initiatorImage</body><body package="ADvance2">lensOpaqueImage	^self resources opaqueImageFor: self named: #lensImage</body></methods><methods><class-id>ICC.ADvance.NVTransformation</class-id> <category>accessing text styles</category><body package="ADvance2">defaultTextStyle	| cStyle |	cStyle := CharacterAttributes newWithDefaultAttributes.	cStyle at: #tiny put: [:query :value :fontPolicy | query pixelSize: (1 max: query pixelSize - 4)].	cStyle at: #small put: [:query :value :fontPolicy | query pixelSize: (1 max: query pixelSize - 2)].	cStyle setDefaultQuery: (FontDescription new			 family: #('arial' 'helv' 'helvetica' '*');			 manufacturer: #('adobe' '*');			 pixelSize: Screen default defaultFontPolicy preferredFontSize;			 yourself).	^VariableSizeTextAttributes new setCharacterAttributes: cStyle; yourself</body><body package="ADvance2">printTextScalingFactor	"^&lt;Number&gt;	We use the same scaling factor as for normal text display (in 	former ADvance / VW version a reducing factor of 0.8 was 	necessary to make texts fit into the class rectangles)."	^self textScalingFactor</body><body package="ADvance2">printTextStyle	^printTextStyle</body><body package="ADvance2">printTextStyle: aTextStyle	printTextStyle := aTextStyle</body><body package="ADvance2">textScalingFactor	^self textStyle scalingFactor</body><body package="ADvance2">textScalingFactor: scalingFactor	"Scaling up and down text with aNumber."	| printScalingFactor |	self textStyle scalingFactor: scalingFactor.	self textStyle lineGrid; baseline.	self textStyle lineGrid: (18 * scalingFactor) rounded; baseline: (14 * scalingFactor) rounded.	self textStyle characterAttributes invalidateQueryCache.	printScalingFactor := self printTextScalingFactor.	self printTextStyle scalingFactor: printScalingFactor.	self printTextStyle lineGrid; baseline.	self printTextStyle lineGrid: (18 * scalingFactor) rounded; baseline: (14 * scalingFactor) rounded.	self printTextStyle characterAttributes invalidateQueryCache</body><body package="ADvance2">textStyle	^textStyle</body><body package="ADvance2">textStyle: aTextStyle	textStyle := aTextStyle</body></methods><methods><class-id>ICC.ADvance.NVTransformation</class-id> <category>accessing</category><body package="ADvance2">maxScale	^maxScale</body><body package="ADvance2">maxScale: aNumber	maxScale := aNumber</body><body package="ADvance2">minScale	^minScale</body><body package="ADvance2">minScale: aNumber	minScale := aNumber</body><body package="ADvance2">scale	^scale</body><body package="ADvance2">scale: aPointOrNumber	"Update the scale to aPointOrNumber. Be aware of the valid scaling interval."	| x y distortion |	(x := aPointOrNumber asPoint x abs) isZero ifTrue: [^self].	(y := aPointOrNumber asPoint y abs) isZero ifTrue: [^self].	distortion := x / y.	x &lt; self minScale		ifTrue:			[x := self minScale.			y := x / distortion].	x &gt; self maxScale		ifTrue:			[x := self maxScale.			y := x / distortion].	y &lt; self minScale		ifTrue:			[y := self minScale.			x := y * distortion].	y &gt; self maxScale		ifTrue:			[y := self maxScale.			x := y * distortion].	scale := x asFloat @ y asFloat.	self textScalingFactor: (scale x max: scale y)</body></methods><methods><class-id>ICC.ADvance.NVTransformation</class-id> <category>accessing grid</category><body package="ADvance2">basicToGrid: aPoint	"^&lt;Point&gt;. Answer the grid point next to aPoint."	^aPoint grid: self gridStep @ self gridStep</body><body package="ADvance2">gridPaint	^ColorValue black</body><body package="ADvance2">gridShape	^#points</body><body package="ADvance2">gridStep	^gridStep</body><body package="ADvance2">gridStep: anInteger	gridStep := anInteger</body><body package="ADvance2">gridVisibility	^gridVisibility</body><body package="ADvance2">gridVisibility: aSymbol	gridVisibility := aSymbol</body><body package="ADvance2">griddedHorizontally	^griddedHorizontally</body><body package="ADvance2">griddedHorizontally: aBoolean	griddedHorizontally := aBoolean</body><body package="ADvance2">griddedVertically	^griddedVertically</body><body package="ADvance2">griddedVertically: aBoolean	griddedVertically := aBoolean</body><body package="ADvance2">toGrid: aPoint	"^&lt;Point&gt;. answer the grid point next to viewPoint for active grid."	| gridPoint |	gridPoint := self basicToGrid: aPoint.	^(self griddedHorizontally		ifTrue: [gridPoint]		ifFalse: [aPoint]) x @ (self griddedVertically			ifTrue: [gridPoint]			ifFalse: [aPoint]) y</body></methods><methods><class-id>ICC.ADvance.NVTransformation</class-id> <category>initialize-release</category><body package="ADvance2">initialize	scale := 1.234 @ 1.234.	self minScale: 1.0e-6.	self maxScale: 1.0e35.	self gridVisibility: #ShowIfOn.	gridStep := 8 @ 8.	self griddedHorizontally: false.	self griddedVertically: false.	self initializeTextStyle.	self initializePrintTextStyle</body><body package="ADvance2">initializePrintTextStyle	printTextStyle := self defaultTextStyle.	printTextStyle scalingFactor: self printTextScalingFactor.	printTextStyle install</body><body package="ADvance2">initializeTextStyle	textStyle := self defaultTextStyle.	textStyle scalingFactor: self textScalingFactor.	textStyle install</body></methods><methods><class-id>ICC.ADvance.NVTransformation</class-id> <category>displaying</category><body package="ADvance2">displayBackgroundOn: gc backgroundPaint: backgroundPaint	| aRectangle translatedOrigin viewStep realOrigin griddedOrigin |	aRectangle := gc clippingBounds.	(gridVisibility == #Hide or: [gridVisibility == #ShowIfOn and: [self griddedHorizontally not and: [self griddedVertically not]]])		ifTrue:			[gc paint: backgroundPaint.			^gc displayRectangle: aRectangle].	viewStep := self scale * self gridStep.	realOrigin := self pointFromView: aRectangle topLeft.	griddedOrigin := self basicToGrid: realOrigin.	translatedOrigin := self scale * griddedOrigin.	self gridShape == #lines		ifTrue: [self				displayGridLinesOn: gc				clippingRectangle: aRectangle				translatedOrigin: translatedOrigin				step: viewStep				backgroundPaint: backgroundPaint]		ifFalse: [self				displayGridPointsOn: gc				clippingRectangle: aRectangle				translatedOrigin: translatedOrigin				step: viewStep				backgroundPaint: backgroundPaint]</body><body package="ADvance2">displayGridLinesOn: gc clippingRectangle: aRectangle translatedOrigin: translatedOrigin step: step backgroundPaint: backgroundPaint	| right left top bottom |	gc paint: self gridPaint.	right := aRectangle right.	left := aRectangle left.	top := aRectangle top.	bottom := aRectangle bottom.	(gridVisibility == #Show or: [griddedHorizontally])		ifTrue: [translatedOrigin x				to: right				by: step x				do: [:x | gc displayRectangle: (x @ top corner: x + 1 @ bottom) rounded]].	(gridVisibility == #Show or: [griddedVertically])		ifTrue: [translatedOrigin y				to: bottom				by: step y				do: [:y | gc displayRectangle: (left @ y corner: right @ (y + 1)) rounded]]</body><body package="ADvance2">displayGridPointsOn: gc clippingRectangle: aRectangle translatedOrigin: translatedOrigin step: step backgroundPaint: backgroundPaint	| xStep yStep left right top bottom |	gc paint: self gridPaint.	gc displayRectangle: aRectangle.	xStep := step x.	yStep := step y.	left := aRectangle left.	right := aRectangle right.	top := aRectangle top.	bottom := aRectangle bottom.	gc paint: backgroundPaint.	translatedOrigin x + 1 - xStep		to: right		by: xStep		do: [:x | gc displayRectangle: (x @ top corner: x + xStep - 1 @ bottom) rounded].	translatedOrigin y + 1 - yStep		to: bottom		by: yStep		do: [:y | gc displayRectangle: (left @ y corner: right @ (y + yStep - 1)) rounded]</body></methods><methods><class-id>ICC.ADvance.NVTransformation</class-id> <category>transforming</category><body package="ADvance2">pointFromView: aPoint	^aPoint  / self scale</body><body package="ADvance2">pointToView: aPoint	^(self scale * aPoint) rounded</body></methods><methods><class-id>ICC.ADvance.NVTransformation class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferences</class-id> <category>accessing-shortcuts</category><body package="ADvance2">classCtrlDoubleClickAction	^self doubleClickActions at: #classCtrl</body><body package="ADvance2">classCtrlDoubleClickAction: selector	^self doubleClickActions at: #classCtrl put: selector</body><body package="ADvance2">classPlainDoubleClickAction	^self doubleClickActions at: #classPlain</body><body package="ADvance2">classPlainDoubleClickAction: selector	^self doubleClickActions at: #classPlain put: selector</body><body package="ADvance2">classShiftDoubleClickAction	^self doubleClickActions at: #classShift</body><body package="ADvance2">classShiftDoubleClickAction: selector	^self doubleClickActions at: #classShift put: selector</body><body package="ADvance2">diagramCtrlDoubleClickAction	^self doubleClickActions at: #diagramCtrl</body><body package="ADvance2">diagramCtrlDoubleClickAction: selector	^self doubleClickActions at: #diagramCtrl put: selector</body><body package="ADvance2">diagramPlainDoubleClickAction	^self doubleClickActions at: #diagramPlain</body><body package="ADvance2">diagramPlainDoubleClickAction: selector	^self doubleClickActions at: #diagramPlain put: selector</body><body package="ADvance2">diagramShiftDoubleClickAction	^self doubleClickActions at: #diagramShift</body><body package="ADvance2">diagramShiftDoubleClickAction: selector	^self doubleClickActions at: #diagramShift put: selector</body><body package="ADvance2">doubleClickActionAt: anEvent using: doubleClickActionList	| item |	item := self doubleClickActions at: anEvent.	^(doubleClickActionList detect: [:eachAssoc | eachAssoc key = item]) value</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferences</class-id> <category>accessing-color</category><body package="ADvance2">abstractClassColor	^abstractClassColor</body><body package="ADvance2">abstractClassColor: aPaint	abstractClassColor := aPaint</body><body package="ADvance2">browserSelectedClassColor	^browserSelectedClassColor</body><body package="ADvance2">browserSelectedClassColor: aPaint	browserSelectedClassColor := aPaint</body><body package="ADvance2">coloredPrinting	^coloredPrinting</body><body package="ADvance2">coloredPrinting: aBoolean	coloredPrinting := aBoolean</body><body package="ADvance2">concreteClassColor	^concreteClassColor</body><body package="ADvance2">concreteClassColor: aPaint	concreteClassColor := aPaint</body><body package="ADvance2">inheritanceColor	^inheritanceColor</body><body package="ADvance2">inheritanceColor: aPaint	inheritanceColor := aPaint</body><body package="ADvance2">printColorForClass: aClassPart 	"^&lt;ColorValue&gt; 	In case of uncolored printing, White is the color for each class. 	Colored printing uses the class parts background color or the 	default class color, if no special background is set."	self coloredPrinting not 		ifTrue: [^ColorValue white].	^aClassPart backgroundColor notNil		ifTrue: [aClassPart backgroundColor]		ifFalse: [aClassPart defaultBackgroundColor]</body><body package="ADvance2">printInheritanceColor	^self coloredPrinting		ifTrue: [self inheritanceColor]		ifFalse: [ColorValue white]</body><body package="ADvance2">printRelationColor	^self coloredPrinting		ifTrue: [self relationColor]		ifFalse: [ColorValue black]</body><body package="ADvance2">relationColor	^relationColor</body><body package="ADvance2">relationColor: aPaint	relationColor := aPaint</body><body package="ADvance2">subjectClassColor	^subjectClassColor</body><body package="ADvance2">subjectClassColor: aPaint	subjectClassColor := aPaint</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferences</class-id> <category>accessing-layout</category><body package="ADvance2">inheritanceLayoutType	^inheritanceLayoutType</body><body package="ADvance2">inheritanceLayoutType: aByteSymbol	inheritanceLayoutType := aByteSymbol</body><body package="ADvance2">relationLayoutType	^relationLayoutType</body><body package="ADvance2">relationLayoutType: aByteSymbol	relationLayoutType := aByteSymbol</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferences</class-id> <category>accessing-general</category><body package="ADvance2">showGridOnStartup	^showGridOnStartup</body><body package="ADvance2">showGridOnStartup: aBoolean	showGridOnStartup := aBoolean</body><body package="ADvance2">startupGridSize	^startupGridSize</body><body package="ADvance2">startupGridSize: anInteger	startupGridSize := anInteger</body><body package="ADvance2">subjectExpansionType	^subjectExpansionType</body><body package="ADvance2">subjectExpansionType: aByteSymbol	subjectExpansionType := aByteSymbol</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferences</class-id> <category>initialize-release</category><body package="ADvance2">initialize	"AD2PainterPreferences allInstances do: [:eachPrefs | eachPrefs initialize]."	showGridOnStartup := true.	startupGridSize := 8.	subjectExpansionType := #newPainter.	relationLayoutType := #straight.	inheritanceLayoutType := #straight.	concreteClassColor := ColorValue yellow asHiliteColor asHiliteColor.	abstractClassColor := ColorValue veryLightGray.	subjectClassColor := concreteClassColor blendWith: ColorValue red asHiliteColor weight: 0.2. 	browserSelectedClassColor := ColorValue yellow asHiliteColor.	relationColor := ColorValue black.	inheritanceColor := ColorValue brightness: 0.98.	coloredPrinting := true.	self initializeDoubleClickActions</body><body package="ADvance2">initializeDoubleClickActions	| classItems diagramItems |	classItems := self classDoubleClickItems.	diagramItems := self diagramDoubleClickItems.	doubleClickActions := Dictionary new				 at: #classPlain put: (classItems at: 1);				 at: #classShift put: (classItems at: 2);				 at: #classCtrl put: (classItems at: 3);				 at: #diagramPlain put: (diagramItems at: 1);				 at: #diagramShift put: (diagramItems at: 2);				 at: #diagramCtrl put: (diagramItems at: 3);				 yourself</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferences</class-id> <category>private-accessing</category><body package="ADvance2">classDoubleClickItems	^self classDoubleClickList collect: [:each | each key]</body><body package="ADvance2">classDoubleClickList	^self advance classModelClass doubleClickList</body><body package="ADvance2">diagramDoubleClickItems	^self diagramDoubleClickList collect: [:each | each key]</body><body package="ADvance2">diagramDoubleClickList	^self advance diagramModelClass doubleClickList</body><body package="ADvance2">doubleClickActions	^doubleClickActions</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferences class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.IccHTMLCenter</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/CENTER&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;CENTER&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLHorizontalLine</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;HR&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLLineBreak</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;BR&gt;'</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>actions grid</category><body package="ADvance2">gridHide	self transformation gridVisibility: #Hide.	self redrawAll</body><body package="ADvance2">gridOff	(self transformation) griddedHorizontally: false; griddedVertically: false.	self redrawAll</body><body package="ADvance2">gridOn	(self transformation) griddedHorizontally: true; griddedVertically: true.	self redrawAll</body><body package="ADvance2">gridShow	(self transformation) gridVisibility: #Show.	self redrawAll</body><body package="ADvance2">gridShowIfOn	(self transformation) gridVisibility: #ShowIfOn.	self redrawAll</body><body package="ADvance2">gridSize	^self transformation gridStep</body><body package="ADvance2">gridSize: anInteger	self transformation gridStep: anInteger.	self redrawAll</body><body package="ADvance2">gridXOnly	(self transformation) griddedHorizontally: true; griddedVertically: false.	self redrawAll</body><body package="ADvance2">gridYOnly	(self transformation) griddedHorizontally: false; griddedVertically: true.	self redrawAll</body><body package="ADvance2">snapToGrid	self activeLayer do: [:each | each unwrapped snapToGrid].	self redrawAll</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>control</category><body package="ADvance2">desiresFocus	^true</body><body package="ADvance2">doubleClickEvent: event	self doubleClickAt: (self sensor cursorPointFor: event)</body><body package="ADvance2">isControlActive	"Answer whether the receiver wants to retain control."	^self isControlWanted</body><body package="ADvance2">isControlWanted	"Answer true if the receiver wants control."	^self sensor redButtonPressed or: [self sensor yellowButtonPressed]</body><body package="ADvance2">processKeyboardEvent: anEvent	| ev ch |	ev := anEvent.	ev isNil ifTrue: [^self].	anEvent isBackTab		ifTrue: [^self keyboardProcessor prevFieldFrom: self].	ch := ev keyValue.	ch == Character tab ifTrue: [^self keyboardProcessor nextFieldFrom: self].	ch == #Right ifTrue: [^self scrollRight: ev].	ch == #Left ifTrue: [^self scrollLeft: ev].	ch == #Down ifTrue: [^self scrollDown: ev].	ch == #Up ifTrue: [^self scrollUp: ev].	ch == $+ ifTrue: [^self zoomInChar: ev].	ch == $- ifTrue: [^self zoomOutChar: ev]</body><body package="ADvance2">redButtonPressedEvent: event	self selectDownAt: (self sensor cursorPointFor: event)</body><body package="ADvance2">requestActivation	self keyboardProcessor requestActivationFor: self</body><body package="ADvance2">runMenu: aMenuBuilder	self selection size = 1		ifTrue: [self selection first unwrapped modelActionMenu: aMenuBuilder]		ifFalse: [self application actionMenu: aMenuBuilder]</body><body package="ADvance2">selectDownAt: aPoint	"Select, deselect and move components or pass control to components.	Rules:	1) If a single object is hit, e. g. has cursor:	1.1) If it wants control pass control to it.	1.2) switch its selection if control or shift is down, otherwise	1.3) if object was not selected: deselect all other objects.	1.4) if object was already selected: deselection will be done if no moe occurs.	2) Wait until red button is up or mouse is moved. Then	a) move the object if it is hit, else	b) get a rectangle from user and select	i) all objects touched if ctrl is down	ii) all objects contained otherwise	and replace or, if shift is down, add to the old selection	the newly selected objects.	3) If shift is up and the selection did not change, deselect all."	| selObj selectionMoved |	self requestActivation.	selectionMoved := false.	selObj := self objectAtCursor: aPoint.	selObj notNil		ifTrue: 			["Rule 1"			(selObj isControlWantedAt: aPoint)				ifTrue: 					["1.1"					^selObj startUp].			(self sensor shiftDown or: [self sensor ctrlDown])				ifTrue: 					["1.2"					selObj unwrapped switchSelection]				ifFalse: 					["1.3"					selObj unwrapped isSelected						ifFalse: [self deselectAllAndSelect: (Array with: selObj)]]].		[self sensor redButtonPressed		and: [(aPoint - self sensor cursorPoint) r &lt; 2]]			whileTrue.	self sensor redButtonPressed		ifTrue: 			[selObj notNil				ifTrue: 					[selObj isSelected						ifTrue: 							[selectionMoved := true.							self moveSelectionAt: selObj cursorPoint: aPoint]]				ifFalse: 					["Select from rubberband rectangle."					| foundObjects selectionRectangle |					selectionRectangle := self getRectangleAt: aPoint.					foundObjects := self sensor ctrlDown								ifTrue: [self allObjectsTouching: selectionRectangle]								ifFalse: [self allObjectsIn: selectionRectangle].					self sensor shiftDown						ifTrue: [foundObjects do: [:i | i unwrapped switchSelection]]						ifFalse: [self deselectAllAndSelect: foundObjects]]]		ifFalse: 			["Rule 3"			(selectionMoved or: [self sensor shiftDown or: [self sensor ctrlDown]])				ifFalse: [self deselectAllExcept: (Array with: selObj)]].	self redrawDamageArea</body><body package="ADvance2">yellowButtonPressedEvent: event	| menuBuilder choice |	menuBuilder := NVMenuBuilder new.	self sensor shiftDown ifFalse: [self runMenu: menuBuilder].	choice := (MenuView model: menuBuilder menu) openFromView: self view event: event.	choice value value.	self requestActivation</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>enumerating</category><body package="ADvance2">allVisibleDrawObjectsDo: aBlock	self layers do: [:eachLayer | eachLayer isVisible ifTrue: [eachLayer do: [:each | each isVisible ifTrue: [aBlock value: each]]]]</body><body package="ADvance2">allVisibleDrawObjectsSelect: aBlock	| result |	result := OrderedCollection new: 50.	self allVisibleDrawObjectsDo: [:each | (aBlock value: each)			ifTrue: [result add: each]].	^result</body><body package="ADvance2">allVisibleLayersDrawObjectsDo: aBlock	self layers do: [:eachLayer | eachLayer isVisible ifTrue: [eachLayer do: aBlock]]</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>class refs</category><body package="ADvance2">layerClass	^NVComposite</body><body package="ADvance2">scrollWrapperClass	"the normal scrollwrapper implements all the required functionality as long as #preferredBounds is implemented correctly"	^NVScrollWrapper</body><body package="ADvance2">transformationClass	^NVTransformation</body><body package="ADvance2">viewClass	^NVEditorView</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>accessing layers</category><body package="ADvance2">activeLayer	^self layers at: activeLayerIndex</body><body package="ADvance2">activeLayerIndex: anInteger	(1 &lt;= anInteger and: [anInteger &lt;= self layers size])		ifTrue: [activeLayerIndex := anInteger]		ifFalse: [self error: 'Illegal layer index.']</body><body package="ADvance2">initializeLayers: anInteger	anInteger timesRepeat: [self layers add: (self layerClass on: self view)].	self activeLayerIndex: self layers size</body><body package="ADvance2">layers	^self view components</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>keyboard processing</category><body package="ADvance2">getFactorFrom: aKeyboardEvent	"^&lt;Number&gt; derived from aKeyboardEvent metaState"	aKeyboardEvent hasShift ifTrue: [^0.5].	aKeyboardEvent hasCtrl ifTrue: [^0.95].	^0.1</body><body package="ADvance2">scrollDown: aKeyboardEvent	self scrollVertically: view bounds width * (self getFactorFrom: aKeyboardEvent) negated</body><body package="ADvance2">scrollHorizontally: anInteger	"Scroll the receiver horizontally by anInteger."	self scroll: anInteger@0</body><body package="ADvance2">scrollLeft: aKeyboardEvent	self scrollHorizontally: view bounds width * (self getFactorFrom: aKeyboardEvent)</body><body package="ADvance2">scrollRight: aKeyboardEvent	self scrollHorizontally: view bounds width * (self getFactorFrom: aKeyboardEvent) negated</body><body package="ADvance2">scrollUp: aKeyboardEvent	self scrollVertically: view bounds width * (self getFactorFrom: aKeyboardEvent)</body><body package="ADvance2">scrollVertically: anInteger	"Scroll the receiver vertically by anInteger."	self scroll: 0@anInteger</body><body package="ADvance2">zoomInChar: aKeyboardEvent	self zoomIn: (self getFactorFrom: aKeyboardEvent)</body><body package="ADvance2">zoomOutChar: aKeyboardEvent	self zoomOut: (self getFactorFrom: aKeyboardEvent)</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>accessing</category><body package="ADvance2">addToSelection: aComponent	(selection includes: aComponent)		ifTrue: [^self].	selection add: aComponent.	self changedSelection</body><body package="ADvance2">application	^application</body><body package="ADvance2">application: aModel	"Connect myself to aModel."	aModel editor: self.	application := aModel</body><body package="ADvance2">newView	^self viewClass forEditor: self</body><body package="ADvance2">printTextStyle	^self transformation printTextStyle</body><body package="ADvance2">scale	^self transformation scale</body><body package="ADvance2">scale: aPointOrNumber	self transformation scale: aPointOrNumber</body><body package="ADvance2">scrollWrapper	"answer the view's scrollWrapper	assume:	view container = aScrollWrapper"	^view container</body><body package="ADvance2">selection	^selection</body><body package="ADvance2">selectionArea	"^&lt;nil | Rectangle&gt;"	| area |	area := nil.	self selection do: [:each | area := area isNil					ifTrue: [each area]					ifFalse: [area merge: each area]].	^area</body><body package="ADvance2">textStyle	^self transformation textStyle</body><body package="ADvance2">transformation	^transformation</body><body package="ADvance2">transformation: aTransformation	transformation := aTransformation</body><body package="ADvance2">translation	^self scrollWrapper translation</body><body package="ADvance2">translation: aPointOrNumber	| x y  used visibleExtent usedExtent usedOrigin |	x := aPointOrNumber asPoint x rounded.	y := aPointOrNumber asPoint y rounded.	used := self usedArea.	used notNil ifTrue: 		[visibleExtent := view bounds extent.		usedExtent := used extent.		usedOrigin := used origin negated.		visibleExtent x &gt; usedExtent x ifTrue:			[x :=  usedOrigin x].		visibleExtent y &gt; usedExtent y ifTrue:			[y := usedOrigin y]].	self scrollWrapper setOrigin: x @ y.</body><body package="ADvance2">usedArea	"^&lt;nil | Rectangle&gt;"	| area |	area := nil.	self allVisibleDrawObjectsDo: [:each | area := area isNil					ifTrue: [each area]					ifFalse: [area merge: each area]].	^area</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>editing</category><body package="ADvance2">getRectangleAt: origin	"^&lt;Rectangle&gt; Request a rectangle from user with minimal extent 1@1.	Initial appearance is aRectangle. Care must be taken for transforming	from view coordinates to screen coordinates."	| clipRect startRect viewOrigin |	viewOrigin := self sensor globalOrigin.	clipRect := self view clippingBox translatedBy: viewOrigin.	startRect := (origin corner: self sensor cursorPoint)				translatedBy: viewOrigin.	^(Screen default		resizeRectangle: startRect		minimumExtent: 1 @ 1		resizeIncrement: 1 @ 1		boundedBy: clipRect		whileButton: 0		isDown: self sensor anyButtonPressed)		translatedBy: viewOrigin negated</body><body package="ADvance2">getStartPointWithCursor: aCursor	"&lt;Point | nil&gt;.	Request an input location. Answer the location, nil if it exceeds the view bounds."	| oldCursor viewBounds aPoint |	oldCursor := Cursor currentCursor.	viewBounds := self view clippingBox.	[self sensor anyButtonPressed]		whileFalse:			[aPoint := self sensor cursorPoint.			(viewBounds containsPoint: aPoint)				ifTrue: [aCursor show]				ifFalse: [oldCursor show].			(Delay forMilliseconds: 10) wait].	self sensor waitNoButton.	oldCursor show.	aPoint := self transformation toGrid: aPoint.	^(viewBounds containsPoint: aPoint)		ifTrue: [aPoint]		ifFalse: [nil]</body><body package="ADvance2">moveRectangles: anOrderedCollectionOfRectangle startingAt: cursorPoint	"The rectangles outline are moved along the grid to a new position. 	The first rectangle's new origin is aligned to the grid."	| dist scale refPoint moved |	refPoint := anOrderedCollectionOfRectangle first origin.	scale := self scale.	moved := 0 @ 0.	[self sensor redButtonPressed] whileTrue: 			[dist := (self transformation						toGrid: (refPoint + (self sensor cursorPoint - cursorPoint)) / scale) * scale						- refPoint - moved.			selection do: [:each | each unwrapped beMovedBy: dist].			moved := moved + dist.			"flush the view's preferred bounds because the bounds change when an object is moved.			If the view's preferredBounds are flushed, the scrollbars will updated properly"			self view flushPreferredBounds.			self view invalidateRectangle: self view bounds repairNow: true]</body><body package="ADvance2">moveSelectionAt: anObject cursorPoint: cursorPoint	"A selection is moved by example of its element anObject."	anObject isMovable ifFalse: [^self].	self		moveRectangles: self movableRectangles		startingAt: cursorPoint.	self redrawDamageArea</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>view control</category><body package="ADvance2">basicFullView	"Transform to total view of all visible objects with a 1 pixel tolerance.	Adjust the display center. Do not display."	^self basicFullViewMaxZoom: nil</body><body package="ADvance2">basicFullViewForPreferredBoundsOver: aRectangle	"Transform to total view including all objects in aRectangle with a 2 pixel	tolerance. Adjust the display center. Do not display.	The truncation is done to map very similar quotients to the same zoom,	otherwise a simple menu pull down may cause view update."	| box |	box := aRectangle expandedBy: 10.	self basicZoom: (((box extent / view preferredBounds extent) * 50) truncated / 50) to: self usedArea origin</body><body package="ADvance2">basicFullViewMaxZoom: aNumberOrNil 	"Transform to total view of all visible objects with a 1 pixel tolerance.	Adjust the display center. Do not display."	| area |	(area := self usedArea) isNil 		ifFalse: 			[self 				basicFullViewOver: area				takeRealBounds: true				maxZoom: aNumberOrNil]</body><body package="ADvance2">basicFullViewOver: aRectangle	"Transform to total view including all objects in aRectangle with a 2 pixel	tolerance. Adjust the display center. Do not display.	The truncation is done to map very similar quotients to the same zoom,	otherwise a simple menu pull down may cause view update."	| viewRec innerRec box |	box := aRectangle expandedBy: 10.	viewRec := view bounds insetBy: 1.	innerRec := viewRec insetBy: 2.	((view bounds contains: box) not or: [innerRec extent &gt; box extent])		ifTrue: [self basicZoom: (((viewRec extent / box extent) * 50) truncated / 50) to: box origin]</body><body package="ADvance2">basicFullViewOver: aRectangle takeRealBounds: aBoolean 	"Transform to total view including all objects in aRectangle with a 2 pixel	tolerance. Adjust the display center. Do not display.	The truncation is done to map very similar quotients to the same zoom,	otherwise a simple menu pull down may cause view update."	^self 		basicFullViewOver: aRectangle		takeRealBounds: aBoolean		maxZoom: nil</body><body package="ADvance2">basicFullViewOver: aRectangle takeRealBounds: aRealBoundsFlag maxZoom: aMaxZoomOrNil	"Transform to total view including all objects in aRectangle with a 2 pixel	tolerance. Adjust the display center. Do not display.	The truncation is done to map very similar quotients to the same zoom,	otherwise a simple menu pull down may cause view update."	| viewRec innerRec box theNewZoom |	box := aRectangle expandedBy: 10.	viewRec := (aRealBoundsFlag ifTrue: [view bounds insetBy: 1] ifFalse: [view preferredBounds]).	innerRec := viewRec insetBy: 2.	((viewRec contains: box) not or: [innerRec extent &gt; box extent])		ifTrue: 			[theNewZoom := ((viewRec extent / box extent) * 50) truncated / 50.			(aMaxZoomOrNil notNil) 				ifTrue: [theNewZoom := (aMaxZoomOrNil min: theNewZoom x) @ (aMaxZoomOrNil min: theNewZoom y)].			self basicZoom: theNewZoom  to: box origin]</body><body package="ADvance2">basicZoom: ratio center: newCenter	"scale by ratio &lt;Point&gt; and shift to newCenter &lt;Point&gt;.	Floating point for efficiency. Do not display"	| oldScale newScale |	oldScale := self scale.	self scale: oldScale * (ratio y @ ratio x min: ratio).	newScale := self scale.	self updateAllViews.	self translation: (newCenter * newScale / oldScale - (view bounds extent / 2)) negated</body><body package="ADvance2">basicZoom: ratio to: newOrigin	"scale by ratio &lt;Point&gt; and shift to newOrigin &lt;Point&gt;.	Floating point for efficiency. Do not display"	| oldScale newScale |	oldScale := self scale.	self scale: oldScale * (ratio y @ ratio x min: ratio).	newScale := self scale.	self updateAllViews.	self translation: (newOrigin * newScale / oldScale) negated</body><body package="ADvance2">basicZoomForRectangle: aRect	"Transform the view according to aRect."	self basicZoom: view bounds extent / aRect extent to: aRect origin</body><body package="ADvance2">scroll: aVector	"Scroll the view according to aVector."	self scrollWrapper scroll: aVector</body><body package="ADvance2">updateAllViews	self allVisibleLayersDrawObjectsDo: [:each | each updateForDisplay]</body><body package="ADvance2">zoom: aRectangle	"Notify my model about the changed zoom."	self basicZoom: view bounds extent / aRectangle extent center: aRectangle center.	self application controller updateZoom; updateZoomValue</body><body package="ADvance2">zoomBy: aRatio	"Notify my model about the changed zoom."	self basicZoom: aRatio center: view bounds center.	self application controller updateZoom; updateZoomValue</body><body package="ADvance2">zoomIn: aFraction	| rec |	rec := view bounds.	self zoom: (rec insetBy: rec extent * aFraction / 2)</body><body package="ADvance2">zoomOut: aFraction	| rec |	rec := view bounds.	self zoom: (rec expandedBy: rec extent * aFraction)</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>selecting</category><body package="ADvance2">deselectAll	self selection copy do: [:each | each unwrapped deselect].	self changedSelection</body><body package="ADvance2">deselectAllAndSelect: aCollection	| oldSelection |	oldSelection := self selection copy.	selection := OrderedCollection new.	oldSelection do: [:each | each unwrapped deselect].	aCollection do: [:each | each unwrapped select].	self changedSelection</body><body package="ADvance2">deselectAllExcept: aCollection	| toDeselect |	toDeselect := self selection copy.	toDeselect removeAllSuchThat: [:each | aCollection includes: each].	toDeselect do: [:each | each unwrapped deselect].	self changedSelection</body><body package="ADvance2">removeFromSelection: aSelectedObject	(selection remove: aSelectedObject ifAbsent: [nil]) isNil ifTrue: [^self].	self changedSelection</body><body package="ADvance2">selectAll	self activeLayer modifyingDo: [:each | each isSensitive ifTrue: [each unwrapped select]]</body><body package="ADvance2">selectAndMakeVisible: anObject	anObject isSensitive ifFalse: [^self].	self deselectAll.	anObject unwrapped select.	(self view bounds intersects: anObject area)		ifTrue: [self redrawAll]		ifFalse: [self scroll: self view bounds center - anObject area center]</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>private</category><body package="ADvance2">changedSelection	^self application controller changedEditorSelection</body><body package="ADvance2">flushCaches	"Any information that the receiver caches that is platform dependent	is questionable. An example of bad information is font widths.	Since the editor has no caches it is delegated to the application."	self application flushCaches</body><body package="ADvance2">movableRectangles	^(self selection select: [:each | each isVisible and: [each isMovable]])		collect: [:each | each area]</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>hit detection</category><body package="ADvance2">allObjectsIn: aRectangle	"Answer the presentation objects which are contained in aRectangle."	^self allVisibleDrawObjectsSelect: [:each | each isSensitive and: [aRectangle contains: each area]]</body><body package="ADvance2">allObjectsTouching: aRectangle	"^&lt;OrderedCollection of: NVComponent&gt; which are touched by aRectangle.	intersects needs a little workaround in case of displayArea being a degenerated rectangle"	^self allVisibleDrawObjectsSelect: [:each | each isSensitive and: [aRectangle intersects: each area]]</body><body package="ADvance2">objectAtCursor: aPoint	"Return the object which is hit by aPoint, nil if none."	self layers reverseDo:		[:each |		| component |		(component := each componentAt: aPoint) isNil ifFalse: [^component]].	^nil</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>drawing</category><body package="ADvance2">redrawAll	"self view displayIn: self view bounds.	self resetDamage"	self view invalidate</body><body package="ADvance2">redrawDamageArea	"self hasDamage ifFalse: [^self].	self view displayIn: self damage.	self resetDamage"</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>transforming</category><body package="ADvance2">pointFromView: aPoint	^self transformation pointFromView: aPoint</body><body package="ADvance2">pointToView: aPoint	^self transformation pointToView: aPoint</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>broadcast</category><body package="ADvance2">doubleClickAt: aPoint	"Select the element under cursor if not selected. If there's an object under	the cursor	it should process the doubleClick."	| odObject keyMode respondingModel |	keyMode := self sensor shiftDown				ifTrue: [#shift]				ifFalse: [self sensor ctrlDown						ifTrue: [#ctrl]						ifFalse: [#normal]].	odObject := self objectAtCursor: aPoint.	respondingModel := odObject isNil				ifTrue: [self application]				ifFalse: [odObject model].	respondingModel isNil ifFalse: [respondingModel doubleClickAt: aPoint keyMode: keyMode]</body><body package="ADvance2">downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator	"This is a message passed down the view structure to some single	part. Answer true if we accepted the event, or false if it should be	passed on to whatever's behind us."	aKey == #doubleClick		ifTrue:			[self doubleClickAt: aPoint.			^true].	^false</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>accessing damage</category><body package="ADvance2">invalidateAll	self view invalidate</body></methods><methods><class-id>ICC.ADvance.NVEditor</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self transformation: self transformationClass new.	selection := OrderedCollection new</body><body package="ADvance2">release	application isNil ifFalse: [application release].	application := nil.	model removeDependent: self.	model := nil.	performer := nil.	selection := nil.	self keyboardProcessor ifNotNil:[:kp| kp removeKeyboardReceiver: self].	super release</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>services-string</category><body package="ADvance2">reformatText: aStringin: maxColumn	"^&lt;String&gt; I try to reformat the string. After maxColumn columns I try to insert a cr. I reformat the text contained in aString to a string, with the following rules ..."	^aString</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>private-constants</category><body package="ADvance2">commentReference	"^&lt;Integer&gt; I return a constant value to represent, that the exchange is done also to the comment of a class"	^2</body><body package="ADvance2">directReference	"^&lt;Integer&gt; I return a constant value to represent, that the exchange is done only in the method body via direct references - not textual replacements !"	^1</body><body package="ADvance2">sourceReference	"^&lt;Integer&gt; I return a constant value to represent, that the exchange is done to direct references, comments and textual source"	^3</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>private-class</category><body package="ADvance2">searchReferencesOf: aClass	"^&lt;Set of: Class&gt; I return all classes which references to	the class aClass in the programming code (not via textual occurences) - subclassResponsibility"	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>services-class</category><body package="ADvance2">allSubclasses: aSymbol	"^&lt;Set of: Class&gt; I return all subclasses of the class named aSymbol - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">allSuperclasses: aSymbol	"^&lt;Set of: Symbol&gt; I return all superclasses of the class named aSymbol - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">change: aClass to: aNewClassString in: aFilter	"&lt;Set of: Class&gt; changes all references in 'aFilter' of 'aClass' in all methods and comments to 'aNewClassString' - aBoolean and aFilter is not considered yet - subclassResponsibility"  self subclassResponsibility</body><body package="ADvance2">change: aClassto: newClassStringin: filterstage: stageCounter	"^&lt;Set of: Class&gt; I change all references of aClass (by class, by symbol,	by text) in classes described by aFilter in all methods (instance- and	class-side) and comments (class, method) to 'newClassString' -	aBoolean and filter is not considered yet - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">classHandle: aSymbol	"&lt;&gt; - subclassResponsibility"	^nil</body><body package="ADvance2">classVariables: aSymbol	"^&lt;OrderedCollection of: Symbol&gt; I return sorted symbols of class variables of the class named aSymbol - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">classVariablesComment: aSymbolofClass: classSymbol	"^&lt;String&gt; I return a comment for the class variable named aSymbol (Symbol) in a class named classSymbol (Symbol) - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">definedInstanceVariables: aSymbol	"^&lt;OrderedCollection of: Symbols&gt; I return all defined instance variables in the class with name aSymbol - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">definedInstanceVariablesComment: aSymbolofClass: classSymbol	"^&lt;String&gt; I return the comment about the instance variable named aSymbol in the class named classSymbol - if no comment is available I return an empty string - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">instanceClassVariables: aSymbol	"^&lt;OrderedCollection of: Symbol&gt; I return all class instance variables available in the class named aSymbol - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">instanceClassVariablesComment: aSymbolofClass: classSymbol	"^&lt;String&gt; I return the comment of the call instance variable aSymbol in the class aClassSymbol - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">poolDictionaries: aSymbol	"^&lt;OrderedCollection of: Symbol&gt; I return sorted symbols of pool dictionaries referenced in the class named aSymbol - subclassResponsibility"	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>constant</category><body package="ADvance2">separatorString	"^&lt;String&gt;  I return the string needed to separate directories and filenames in a pathname"	^String with: Filename separator</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>services-container</category><body package="ADvance2">classesDefinitionsIn: aString	"^&lt;OrderedCollection of: Symbol&gt; I search for class definitions in a module/container (named aString) and return symbols representing the names of the found classes - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">moduleComment: aString	"^&lt;String&gt; I return the comment of a module named aString - subclassResponsibility"	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>services-methods</category><body package="ADvance2">formatMethodCode: selectorofClass: classSymbolclassFlag: aBoolean	"^&lt;String&gt; I return the full method code (in the class named aClassSymbol) without the selector names, parameters and the first comment defined by the programmer - not very solid code :-( - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">fullSelector: selectorofClass: classSymbolclassFlag: aBoolean	"^&lt;String&gt; I return the full method selector in the class named classSymbol with the selector names and parameters defined by the programmer - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">methodSource: selectorofClass: classSymbolclassFlag: aBoolean	"&lt;String&gt; I return the source code of the method selector in the class named classSymbol- either a class or instance method - depending on aBoolean - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">selectors: filterofClass: classSymbolclassFlag: aBoolean	"^&lt;OrderedCollection of: Symbol&gt; I return a collection of symbols of all	methods (instance or class side - depending on aBoolean) of class named classSymbol - subclassResponsibility"	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>services-directory</category><body package="ADvance2">checkAndCreate: dirString	"^&lt;Boolean&gt; I check if the directory named aDirString exists and if it is not existing, then I'll create it. I return true if I created the directory - otherwise false. - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">fileNamesInDir: dirString patternString: aString	"^&lt;OrderedCollection of: String&gt; I return all filenames which match the pattern aString and are located in a directory named aDirString - subclassResponsibility"	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>private-all</category><body package="ADvance2">primitiveReplaceOf: searchStringwith: replaceStringin: sourceString	"^&lt;String | nil&gt; I return a new string with all replacements of searchString	into replaceString IF I find a complete isolated occurence of	searchString in sourceString.	If no changes have to be made or sourceString is nil I return nil - subclassResponsibility"	self subclassResponsibility</body><body package="ADvance2">replaceOf: ssearchStringwith: replaceStringin: sourceString	"^&lt;String | nil&gt; I return a new string with all replacements of complete	isolated occurences of searchString	into replaceString - ONLY if in the method comment there is a reference	to	searchString OR there's a Symbol like '#',searchString . If no	changes have to	be made or sourceString is nil I return nil - subclassResponsibility"	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.IccSysOrg</class-id> <category>services-filesystem</category><body package="ADvance2">checkFilename: aString	"^&lt;String&gt; I check aString for characters not suitable for a filename. I convert these characters into the character $_ and return a changed string"	| tmpString |	tmpString := aString copy.	1 to: tmpString size		do:			[:index |			(tmpString at: index) = $/				ifTrue: [tmpString at: index put: $_].			(tmpString at: index) = $\				ifTrue: [tmpString at: index put: $_].			(tmpString at: index) = $				ifTrue: [tmpString at: index put: $_].			(tmpString at: index) = $*				ifTrue: [tmpString at: index put: $_].			(tmpString at: index) = $&amp;				ifTrue: [tmpString at: index put: $_].			(tmpString at: index) = $:				ifTrue: [tmpString at: index put: $_].			(tmpString at: index) = $&gt;				ifTrue: [tmpString at: index put: $_].			(tmpString at: index) = $&lt;				ifTrue: [tmpString at: index put: $_].			].	^tmpString</body><body package="ADvance2">newFilestream: aString	"^&lt;Filestream&gt; I return a writeable stream on a file named aString... - subclassResponsibility"	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.IccSysOrg class</class-id> <category>class initialization</category><body package="ADvance2">defaultClass	^IccVWSystemOrganisation</body><body package="ADvance2">initialize	"self initialize"	self initializeDefault</body><body package="ADvance2">obsolete	self uninitialize.	super obsolete</body><body package="ADvance2">uninitialize	Default := nil</body></methods><methods><class-id>ICC.ADvance.IccSysOrg class</class-id> <category>private initialization</category><body package="ADvance2">initializeDefault	Default := self defaultClass new</body></methods><methods><class-id>ICC.ADvance.IccSysOrg class</class-id> <category>accessing</category><body package="ADvance2">current	"Answers the value of the shared variable Default. Lazy initialization is 	implemented  because class initialize is not always involved during 	reloading."	Default isNil ifTrue: [self initializeDefault].	^Default</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-class</category><body package="ADvance2">allSubclasses: aSymbol	"^&lt;Set of: Symbol&gt; I return all non-meta subclasses of the class named	aSymbol"	| aClass result |	result := Set new.	(aClass := self classHandle: aSymbol) isNil ifFalse: [aClass allSubclasses do: [:anClass | anClass isMeta ifFalse: [result add: anClass name]]].	^result</body><body package="ADvance2">allSuperclasses: aSymbol	"^&lt;OrderedCollection of: Symbol&gt; I return all non-meta super classes of	the class named	aSymbol"	| aClass result |	result := OrderedCollection new.	(aClass := self classHandle: aSymbol) isNil ifFalse: [aClass allSuperclasses do: [:anClass | anClass isMeta ifFalse: [result add: anClass fullName]]].	^result</body><body package="ADvance2">change: aClass to: newClassName in: environment	"^&lt;Set of: Class&gt; Changes all references in environment of aClass in all methods and	comments to newClassName ."	^self		change: aClass		to: newClassName		in: environment		stage: self sourceReference</body><body package="ADvance2">change: aClass to: newClassName in: environment stage: stageCounter	"^&lt;Set of: Class&gt; I change all references of aClass (by class, by symbol, by text) in classes of	environment in all methods (instance- and class-side) and comments (class, method) to	newClassName."	| changedClasses oldName |	oldName := aClass name asString.	changedClasses := self				changeDirect: aClass				to: newClassName				in: environment				stage: stageCounter.	environment allClassesDo: [:oneClass | changedClasses addAll: (self				changeIn: oneClass				from: oldName				to: newClassName				stage: stageCounter)].	^changedClasses</body><body package="ADvance2">changeIn: oneClass from: oldClassName to: newClassName stage: stageCounter	"^&lt;Set of: Class&gt; I change all references of aClass (by class, by symbol,	by text) in classes described by aFilter in all methods (instance- and	class-side) and comments (class, method) to 'aNewClassString' -	aBoolean and aFilter is not considered yet"	| changedClasses aSourceString |	changedClasses := Set new.	self sourceReference &lt;= stageCounter		ifTrue:			[(self				selectors: nil				ofClass: oneClass				classFlag: false)				do: [:aSymbol | (aSourceString := self								replaceOf: oldClassName								with: newClassName								in: (self										methodSource: aSymbol										ofClass: oneClass name										classFlag: false)) isNil						ifFalse:							[self adBasics systemOrganization								recompile: aSourceString								selector: aSymbol								for: oneClass.							changedClasses add: oneClass]].			(self				selectors: nil				ofClass: oneClass				classFlag: true)				do: [:aSymbol | (aSourceString := self								replaceOf: oldClassName								with: newClassName								in: (self										methodSource: aSymbol										ofClass: oneClass name										classFlag: true)) isNil						ifFalse:							[self								recompile: aSymbol								with: aSourceString								in: oneClass								classFlag: true.							changedClasses add: oneClass]]].	self commentReference &lt;= stageCounter ifTrue: [(aSourceString := self					primitiveReplaceOf: oldClassName					with: newClassName					in: oneClass comment) isNil ifFalse: [oneClass comment: aSourceString]].	^changedClasses</body><body package="ADvance2">classComment: aSymbol	"^&lt;String&gt; I return the comment of a class named aSymbol"	| aClass |	^(aClass := self classHandle: aSymbol) isNil		ifTrue: [String new]		ifFalse: [aClass comment]</body><body package="ADvance2">classVariables: aSymbol	"^&lt;OrderedCollection of: aSymbol&gt; I return sorted symbols of class	variables of the class named aSymbol"	| aClass |	^(aClass := self classHandle: aSymbol) isNil		ifTrue: [OrderedCollection new]		ifFalse: [aClass classVarNames asOrderedCollection]</body><body package="ADvance2">classVariablesComment: aSymbol ofClass: aClassSymbol	"^&lt;String&gt; I return the comment about a class variable named aSymbol."	| aClass roleName relation |	(aClass := self classHandle: aClassSymbol) isNil ifTrue: [^''].	roleName := aSymbol asString.	relation := aClass clientRelations detect: [:each | each roleName = roleName]				ifNone: [^''].	^aClass explanationOf: aSymbol implementation: relation implementation</body><body package="ADvance2">classVariablesType: aSymbol ofClass: aClassSymbol	"^&lt;String&gt; I return the comment about a class variable named aSymbol."	| aClass roleName relation |	(aClass := self classHandle: aClassSymbol) isNil ifTrue: [^''].	roleName := aSymbol asString.	relation := aClass clientRelations detect: [:each | each roleName = roleName]				ifNone: [^''].	^relation role isNil		ifTrue: ['undefined']		ifFalse: [relation role baseClass name]</body><body package="ADvance2">definedInstanceVariables: aSymbol	"^&lt;OrderedCollection of: aSymbol&gt; I return all sorted defined instance	variables	in the class names aSymbol"	| aClass |	^(aClass := self classHandle: aSymbol) isNil		ifTrue: [OrderedCollection new]		ifFalse: [aClass instVarNames asSortedCollection asOrderedCollection]</body><body package="ADvance2">definedInstanceVariablesComment: aSymbol ofClass: aClassSymbol	"^&lt;String&gt; I return the comment about an instance variable named	aSymbol of the class named aClassSymbol."	| aClass roleName relation |	(aClass := self classHandle: aClassSymbol) isNil ifTrue: [^''].	roleName := aSymbol asString.	relation := aClass clientRelations detect: [:each | each roleName = roleName]				ifNone: [^''].	^aClass explanationOf: aSymbol implementation: relation implementation</body><body package="ADvance2">definedInstanceVariablesType: aSymbol ofClass: aClassSymbol	"^&lt;String&gt; I return the type about an instance variable named	aSymbol of the class named aClassSymbol."	| aClass roleName relation |	(aClass := self classHandle: aClassSymbol) isNil ifTrue: [^''].	roleName := aSymbol asString.	relation := aClass clientRelations detect: [:each | each roleName = roleName]				ifNone: [^''].	^relation role isNil		ifTrue: ['undefined']		ifFalse: [relation role baseClass name]</body><body package="ADvance2">instanceClassVariables: aSymbol	"^&lt;OrderedCollection of: aSymbol&gt; I return all sorted defined class	instance variables	in the class names aSymbol"	| aClass |	^(aClass := self classHandle: aSymbol) isNil		ifTrue: [OrderedCollection new]		ifFalse: [aClass class instVarNames asOrderedCollection]</body><body package="ADvance2">instanceClassVariablesComment: aSymbol ofClass: aClassSymbol	"^&lt;String&gt; I return the comment about an class instance variable named	aSymbol of the class named aClassSymbol."	| aClass roleName relation |	(aClass := self classHandle: aClassSymbol) isNil ifTrue: [^''].	roleName := aSymbol asString.	relation := aClass clientRelations detect: [:each | each roleName = roleName]				ifNone: [^''].	^aClass explanationOf: aSymbol implementation: relation implementation</body><body package="ADvance2">instanceClassVariablesType: aSymbol ofClass: aClassSymbol	"^&lt;String&gt; I return the type about an class instance variable named	aSymbol of the class named aClassSymbol."	| aClass roleName relation |	(aClass := self classHandle: aClassSymbol) isNil ifTrue: [^''].	roleName := aSymbol asString.	relation := aClass clientRelations detect: [:each | each roleName = roleName]				ifNone: [^''].	^relation role isNil		ifTrue: ['undefined']		ifFalse: [relation role baseClass name]</body><body package="ADvance2">poolDictionaries: aSymbol	"^&lt;OrderedCollection of: Symbol&gt; I return a collection of symbols of pool	dictionaries that referred in the class named aSymbol"	| sc |	sc := SortedCollection new.	((self classHandle: aSymbol) sharedPoolsString tokensBasedOn: Character space)		inject: sc		into:			[:c :next |			next isEmpty ifFalse: [c add: next asSymbol].			c].	^sc asOrderedCollection</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-category</category><body package="ADvance2">categoriesOfClass: classSymbol classFlag: aBoolean	"^&lt;Dictionary&gt;I return all the categories available for a class named	classSymbol - either class side or instance side, depending on	aBoolean. The keys are the names (strings) of the categories found in	the class and the value are the sorted collections of the	selector-symbols defined in the category"	| aClass aDictionary organization |	aDictionary := Dictionary new.	(aClass := self classHandle: classSymbol) isNil		ifFalse:			[aClass := aBoolean						ifTrue: [aClass class]						ifFalse: [aClass].			organization := aClass organization.			organization categories do: [:each | aDictionary at: each asString put: (organization listAtCategoryNamed: each)]].	^aDictionary</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-string</category><body package="ADvance2">completeCopyReplaceAll: oldSubCollection with: newSubCollection in: aString	"^&lt;String&gt; I replace all non-subword occurences of oldSubCollection in a	string named aString into newSubCollection"	"If there are no matches, answer the receiver."	| matchIndex matchIndices newCollection oldIndex newIndex newPlace |	(matchIndex := self				completeIndexOfSubCollection: oldSubCollection				startingAt: 1				in: aString) &gt; 0 ifFalse: [^aString copy].	matchIndices := OrderedCollection with: matchIndex.	[(matchIndex := self				completeIndexOfSubCollection: oldSubCollection				startingAt: matchIndex + oldSubCollection size				in: aString) &gt; 0]		whileTrue: [matchIndices addLast: matchIndex].	"Copy the collection, replacing all the occurrences."	newCollection := aString species withSize: aString size + (newSubCollection size - oldSubCollection size * matchIndices size).	oldIndex := 1.	newIndex := 1.	[matchIndices isEmpty]		whileFalse:			[			matchIndex := matchIndices removeFirst.	"Copy the subcollection up to the match."			newPlace := newIndex + matchIndex - oldIndex.			newCollection				replaceFrom: newIndex				to: newPlace - 1				with: aString				startingAt: oldIndex.			oldIndex := matchIndex + oldSubCollection size.	"Insert the new subcollection."			newIndex := newPlace + newSubCollection size.			newCollection				replaceFrom: newPlace				to: newIndex - 1				with: newSubCollection				startingAt: 1].	"Copy the collection beyond the last match."	newCollection		replaceFrom: newIndex		to: newCollection size		with: aString		startingAt: oldIndex.	^newCollection</body><body package="ADvance2">completeIndexOfSubCollection: aSubCollection startingAt: anIndex in: aString	"^&lt;Integer&gt; - tries to do a closer match and to throw away findings of	sub-words. I answer the number of (non sub-word) occurences"	| answer |	(answer := aString indexOfSubCollection: aSubCollection startingAt: anIndex) isZero ifTrue: [^answer].	answer &gt; 1 ifTrue: [(self isLetterOrDigit: (aString at: answer - 1))			ifTrue: [^0]].	answer &lt;= (aString size - aSubCollection size) ifTrue: [(self isLetterOrDigit: (aString at: answer + aSubCollection size))			ifTrue: [^0]].	^answer</body><body package="ADvance2">reformatText: aString in: maxColumn	"^&lt;String&gt; I try to reformat the string. After 80 columns I try to insert a cr.	I reformat the text contained in aString to a string, with the following	rules ..."	| aTarget aSource entryLine tmpTarget |	aSource := ReadStream on: aString.	aTarget := WriteStream on: String new.	tmpTarget := String new.	[aSource atEnd]		whileFalse:			[entryLine := ReadStream on: (self nextLine: aSource) .			entryLine contents isEmpty				ifTrue:					[aTarget nextPutAll: tmpTarget , '\' withCRs.					tmpTarget :=String new]				ifFalse:					[(tmpTarget size &lt; maxColumn and: [entryLine size &lt; maxColumn])						ifTrue:							[aTarget nextPutAll: tmpTarget , '\' withCRs.							tmpTarget := String new].					[entryLine atEnd]						whileFalse:							[tmpTarget := tmpTarget , (entryLine upTo: $ ) , ' '.							tmpTarget size &gt;= maxColumn								ifTrue:									[aTarget nextPutAll: tmpTarget , '\' withCRs.									tmpTarget := String new]								ifFalse: []]]].	aTarget nextPutAll: tmpTarget , '\' withCRs.	^aTarget contents</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-methods</category><body package="ADvance2">formatMethodCode: aSelector ofClass: aSymbol classFlag: aBoolean	"^&lt;String&gt; I return the full method code. Omit method comment and replace tabs with spaces."	| source comment index |	source := self				methodSource: aSelector				ofClass: aSymbol				classFlag: aBoolean.	source isEmpty ifTrue: [^source].	comment := self				remark: aSelector				ofClass: aSymbol				classFlag: aBoolean.	comment isEmpty		ifTrue: [source := (source readStream) skipUpTo: Character cr; upToEnd]		ifFalse:			[index := source indexOfSubCollection: comment startingAt: 1.			index &gt; 0 ifTrue: [source := source copyFrom: index + comment size + 1 to: source size]].	source := source copyReplaceAll: (String with: Character cr with: Character tab)				with: (String with: Character cr).	source := source copyReplaceAll: (String with: Character tab)				with: '  '.	^source readStream skipSeparators upToEnd</body><body package="ADvance2">fullSelector: aSelector ofClass: aSymbol classFlag: aBoolean	"^&lt;String&gt; I return the full method selector including the parameter"	| aStream result tmpString arguments selector index argCount theClass |	tmpString := self				methodSource: aSelector				ofClass: aSymbol				classFlag: aBoolean.	arguments := (Parser new) 		targetClass: (theClass := self classHandle: aSymbol) environment: (theClass isNil ifTrue: [nil] ifFalse: [theClass environment]);		parseArgsAndTemps: tmpString notifying: self.	selector := (Parser new parseSelector: tmpString) asString.	arguments isNil ifTrue: [^selector].	index := argCount := 0.	result :=String new.	selector do: [:aChar | aChar = $: ifTrue: [argCount := argCount + 1]].	argCount isZero ifTrue: [^selector].	aStream := ReadStream on: selector.	[aStream atEnd]		whileFalse:			[tmpString := aStream upTo: $:.			index &lt; argCount				ifTrue:					[index := index + 1.					result := result , tmpString , ':' , (arguments at: index) , ' ']].	^result</body><body package="ADvance2">methodSource: aSelector ofClass: aSymbol classFlag: aBoolean	"&lt;String&gt; I return the source code of the method aSelector - either a	class or instance method - depending on aBoolean"	| aClass |	(aClass := self classHandle: aSymbol) isNil ifTrue: [^String new].	^aBoolean		ifTrue: [aClass class sourceCodeAt: aSelector]		ifFalse: [aClass sourceCodeAt: aSelector]</body><body package="ADvance2">remark: aSelector ofClass: aSymbol classFlag: aBoolean	"&lt;String&gt; I return the first comment within the method source of the	method named aSelector in a class named aSymbol"	| source methodNode |	(source := self				methodSource: aSelector				ofClass: aSymbol				classFlag: aBoolean) isEmpty ifTrue: [^source].	methodNode := Parser new				parse: source readStream				class: (aBoolean						ifTrue: [(self classHandle: aSymbol) class]						ifFalse: [self classHandle: aSymbol])				noPattern: false				context: nil				notifying: nil				ifFail: nil.	^methodNode comment notNil		ifTrue: [methodNode comment first]		ifFalse: [String new]</body><body package="ADvance2">selectors: aFilter ofClass: aClass classFlag: aBoolean	"^&lt;OrderedCollection of: Symbol&gt; I return a collection of symbols of all	class methods of class aClass"	^(aBoolean		ifTrue: [aClass class]		ifFalse: [aClass]) selectors asSortedCollection asOrderedCollection</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-directory</category><body package="ADvance2">checkAndCreate: dirString	"^&lt;Boolean&gt; I check if the directory named dirString exists and if it is not	existing, then I'll create it. I return true if I created the directory -	otherwise false !"	| dirName |	dirName := Filename named: dirString.	dirName definitelyExists ifFalse: [dirName makeDirectory].	^true</body><body package="ADvance2">fileNamesInDir: dirString patternString: aString	"^&lt;OrderedCollection of: String&gt; I return all filenames which match the	pattern aString and are located in a directory named dirString"	| dirName |	dirName := Filename named: dirString.	^dirName exists		ifTrue: [(dirName filesMatching: aString)				collect: [:aString1 | aString1 asFilename tail]]		ifFalse: [OrderedCollection new]</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>private-all</category><body package="ADvance2">classHandle: aSymbol	"^&lt;Class | nil&gt; I return the instance of class for a class named aSymbol.	If there no class with such a name I return nil"	^aSymbol asQualifiedReference valueOrDo: [nil]</body><body package="ADvance2">classNamed: aSymbol classFlag: aBoolean	"^&lt;Class | nil&gt; I return the instance of class for a class named aSymbol.	If there no class with such a name I return nil"	| class |	class := aSymbol valueOrDo: [nil].	class isNil ifTrue: [^nil].	^aBoolean		ifTrue: [class class]		ifFalse: [class]</body><body package="ADvance2">error: dummy1 with: dummy2 at: dummy3	"This method is used only for some error-handling internally"	^String new</body><body package="ADvance2">primitiveReplaceOf: aSearchString with: replaceString in: aSourceString	"^&lt;String | nil&gt; I return a new string with all replacements of	aSearchString	into replaceString IF I find a complete isolated occurence of	aSearchString in aSourceString.	If no changes have to be made or aSourceString is nil I return nil"	| changedFlag newSource oldSearchPrefix newPrefix |	aSourceString isNil ifTrue: [^nil].	newSource := aSourceString.	oldSearchPrefix := aSearchString first isVowel				ifTrue: ['an']				ifFalse: ['a'].	newPrefix := replaceString first isVowel				ifTrue: ['an']				ifFalse: ['a'].	changedFlag := (IccSysOrg current				completeIndexOfSubCollection: aSearchString				startingAt: 1				in: aSourceString)				~= 0.	changedFlag ifFalse: [changedFlag := (IccSysOrg current					completeIndexOfSubCollection: '#' , aSearchString					startingAt: 1					in: aSourceString)					~= 0].	changedFlag ifFalse: [changedFlag := (IccSysOrg current					completeIndexOfSubCollection: oldSearchPrefix , aSearchString					startingAt: 1					in: aSourceString)					~= 0].	^changedFlag		ifTrue:			[newSource := self						completeCopyReplaceAll: aSearchString						with: replaceString						in: newSource.			newSource := self						completeCopyReplaceAll: '#' , aSearchString						with: '#' , replaceString						in: newSource.			newSource := self						completeCopyReplaceAll: oldSearchPrefix , aSearchString						with: newPrefix , replaceString						in: newSource]		ifFalse: [nil]</body><body package="ADvance2">replaceOf: aSearchString with: replaceString in: aSourceString	"^&lt;String | nil&gt; I return a new string with all replacements of complete	isolated occurences of aSearchString	into replaceString - ONLY if in the method comment there is a reference	to	aSearchString OR there's a Symbol like '#',aSearchString . If no	changes have to	be made or aSourceString is nil I return nil"	| changedFlag comments newSource oldSearchPrefix newPrefix |	aSourceString isNil ifTrue: [^nil].	newSource := aSourceString.	oldSearchPrefix := aSearchString first isVowel				ifTrue: ['an']				ifFalse: ['a'].	newPrefix := replaceString first isVowel				ifTrue: ['an']				ifFalse: ['a'].	comments := Compiler preferredParserClass new parseMethodComment: aSourceString setPattern: [:aValue | ].	changedFlag := (comments select: [:aString | (self					completeIndexOfSubCollection: aSearchString					startingAt: 1					in: aString)					~= 0]) isEmpty not.	changedFlag ifFalse: [changedFlag := (self					completeIndexOfSubCollection: '#' , aSearchString					startingAt: 1					in: aSourceString)					~= 0].	changedFlag ifFalse: [changedFlag := (self					completeIndexOfSubCollection: oldSearchPrefix , aSearchString					startingAt: 1					in: aSourceString)					~= 0].	^changedFlag		ifTrue:			[newSource := self						completeCopyReplaceAll: aSearchString						with: replaceString						in: newSource.			newSource := self						completeCopyReplaceAll: '#' , aSearchString						with: '#' , replaceString						in: newSource.			newSource := self						completeCopyReplaceAll: oldSearchPrefix , aSearchString						with: newPrefix , replaceString						in: newSource]		ifFalse: [nil]</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-container</category><body package="ADvance2">classesDefinitionsIn: aString	"^&lt;OrderedCollection of: Symbol&gt; I search for class definitions in a	module/container (named aString) and return symbols representing the	names of the found classes"	^Smalltalk organization listAtCategoryNamed: aString asSymbol</body><body package="ADvance2">moduleComment: aString	"^&lt;String&gt; I return the comment of the module named aString - under	plain VW2.5 I return an empty string"	^String new</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-filesystem</category><body package="ADvance2">newFilestream: aString	"^&lt;Filestream&gt; I return a write-stream on a file named aString"	^(Filename named: aString) writeStream</body><body package="ADvance2">newReadOnlyFilestream: aString	"^&lt;Filestream&gt; I return a read-only stream on a file named aString"	^(Filename named: aString) readStream</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-character</category><body package="ADvance2">isLetterOrDigit: aCharacter	"^&lt;Boolean&gt; Answer whether the receiver is a digit."	^aCharacter isLetter or: [aCharacter isDigit]</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>private-class</category><body package="ADvance2">changeDirect: aClass to: newClassName in: filter stage: stage	"^&lt;Set of: Class&gt; I change all references of aClass (by class, by symbol,	by text) in classes described by filter in all methods (instance- and	class-side) and comments (class, method) to 'newClassString' -	aBoolean and aFilter is not considered yet"	| changedClasses |	changedClasses := self searchReferencesOf: aClass.	aClass renameAndFixSourceTo: newClassName.	^changedClasses</body><body package="ADvance2">searchReferencesOf: aClass	"^&lt;Set of: Class&gt; I return all classes which references to	the class aClass in the programming code (not via textual occurences)"	| oldName ref changedClasses |	changedClasses := Set new.	oldName := aClass name asSymbol.	ref := aClass environment associationAt: oldName ifAbsent: [aClass environment associationAt: aClass name].	Smalltalk		allBehaviorsDo:			[:b |			| meths |			meths := b whichSelectorsReferTo: ref.			meths isEmpty  ifFalse: [changedClasses add: b]].	^changedClasses</body></methods><methods><class-id>ICC.ADvance.IccVWSystemOrganisation</class-id> <category>services-stream</category><body package="ADvance2">nextLine: aStream	"^&lt;String&gt; Answer the next line in the aStrea - from Henry"	| str ch cr lf |	cr := Character cr.	lf := Character lf.	str := (String new: 100) writeStream.	[aStream atEnd]		whileFalse:			[ch := aStream next.			(ch == cr or: [ch == lf])				ifTrue: [^str contents].			str nextPut: ch].	^str contents</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>testing</category><body package="ADvance2">hasSubjectSelection	^self subjectTree selectionIndex &gt; 1</body><body package="ADvance2">pathIsValid	| aString |	aString := self path value.	^aString isEmpty not and: [aString asFilename definitelyExists]</body><body package="ADvance2">subjectSelectionIsValid	"@Pre:		A subject is selected.	@Action:	Answer whether the selected subject is valid."	^self subjectTree selection isValid</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>private</category><body package="ADvance2">author	^self advance preferences general identity name</body><body package="ADvance2">checkFileSystem	"Check whether the concrete file system is FAT. If so warn user about the restrictions	and give a hint how to correct this."	| testString fileSystemSetToFAT filenamesAreTruncated |	testString := 'This is a string with more than eight characters.'.	fileSystemSetToFAT := Filename concreteClass == PCFilename and: [(PCFilename concreteClassFor: self path value)					== FATFilename].	filenamesAreTruncated := (PCFilename canonicalize: testString) size				&lt; testString size.	fileSystemSetToFAT &amp; filenamesAreTruncated		ifTrue:			[Transcript				 cr;				 cr;				 show: 'PCFilename fileSystems at: ''FAT'' put: HPFSFilename';				 cr;				 show: 'PCFilename fileSystems at: ''FAT'' put: NTFSFilename'.			self adDialog warn: ('It appears that filenames are truncated by the file system. Thus, some&lt;n&gt;',								'links in the HTML output may be invalid.&lt;n&gt;&lt;n&gt;',								'The VisualWorks file system for the current path is set to FATFilename.&lt;n&gt;',								'If you do not consider FATFilename to be the correct file system choice,&lt;n&gt;',								'you may evaluate one of the expressions in the Transcript.' expandMacrosWith: self class applicationName)]</body><body package="ADvance2">checkPath	self pathIsValid ifFalse: [self adDialog warn: 'The path is invalid.']</body><body package="ADvance2">createDocumentationFor: aSubject	"Create a HTML documentation for aSubject."	Cursor wait		showWhile:			[(self documentationClass on: self)					author: self author;					creationDateString: self date;					methodSource: self includeSource value;					ofModule: aSubject in: self path value.			(self documentationClass on: self)					author: self author;					creationDateString: self date;					createClassReferenceFile: self path value;					createModuleReferenceFile: self path value].	self adDialog message: 'Creation completed.' for: self builder window</body><body package="ADvance2">date	^Locale current printAsTime: Date today policyNamed: #short</body><body package="ADvance2">documentationClass	"I return the class which is responsible for the documentation."	^IccHTMLVWDocumentation</body><body package="ADvance2">enableButtons	self iccEnable: (self subjectTree selectionIndex &gt; 1 and: [self pathIsValid])		group: #(#create)</body><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^#('General')</body><body package="ADvance2">newPainter	"^&lt;AD2DiagramPainter&gt; I create a new Diagram Painter.	Saving of the Cursor needs to be done manually due to the VisualWorks feature that opening a	window unconditionally resets the Cursor to #normal."	| aPainter oldCursor |	oldCursor := Cursor currentCursor.	(aPainter := AD2DiagramPainter new) allButOpenInterface: #windowSpec.	aPainter finallyOpenIn: (1 @ 1 extent: 700 @ 600)		withType: #windowSpec.	oldCursor show.	aPainter window collapse.	^aPainter</body><body package="ADvance2">setWindowLabel	self builder window label: self class plugInName</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#generalSpec)</body><body package="ADvance2">updateWithNotification	self adDialog message: 'The selection is absent from the system.\The display will be updated.' withCRs for: self builder window.	self update</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>accessing</category><body package="ADvance2">painter	painter isNil ifTrue: [painter := self newPainter].	^painter</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	subjectTree := SelectionInList new list: TreeModel new.</body><body package="ADvance2">release	painter isNil 		ifFalse: 			[painter model notNil ifTrue: [painter model beUnmodified].			painter closeRequest.			painter := nil].	super release</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>aspects</category><body package="ADvance2">diagramZoom	^diagramZoom isNil		ifTrue: [diagramZoom := nil asValue]		ifFalse: [diagramZoom]</body><body package="ADvance2">includeSource	^includeSource isNil		ifTrue: [includeSource := false asValue]		ifFalse: [includeSource]</body><body package="ADvance2">path	^path isNil		ifTrue: [path := String new asValue]		ifFalse: [path]</body><body package="ADvance2">subjectTree	^subjectTree</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>actions</category><body package="ADvance2">create	self hasSubjectSelection ifFalse: [^self].	self subjectSelectionIsValid ifFalse: [^self updateWithNotification].	self checkPath.	self checkFileSystem.	"self checkColorDepth." "Should work in 5i"	self createDocumentationFor: self subjectTree selection</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>updating</category><body package="ADvance2">resetPainter	"Will be lazy initialized in next #painter message sending."	painter := nil</body><body package="ADvance2">update	self updateSubjectTree.	self subjectTree list expand: 1</body><body package="ADvance2">updateSubjectTree	self subjectTree list root: self advance subjectEnvironment root displayIt: true</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>events</category><body package="ADvance2">noticeOfWindowClose: aWindow	"The ApplicationWindow aWindow is in the process of closing.	You have been notified."	super noticeOfWindowClose: aWindow. 	self release</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>changing</category><body package="ADvance2">changedPath	self enableButtons</body></methods><methods><class-id>ICC.ADvance.AD2Documenter</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	aBuilder window isOpen ifTrue: [^self].	self setWindowLabel.	aBuilder window icon: self class applicationIcon.	self updateSubjectTree</body><body package="ADvance2">postOpenWith: aBuilder	| thePathInput |	super postOpenWith: aBuilder.	(thePathInput := aBuilder componentAt: #pathInput) isNil ifFalse: [thePathInput widget controller continuousAccept: true].	self subjectTree list expand: 1</body></methods><methods><class-id>ICC.ADvance.AD2Documenter class</class-id> <category>plug-in methods</category><body package="ADvance2">plugInInstall	(self plugInAPI notNil and: ['*' match: self plugInAPI getAPIVersion])		ifTrue: [self plugInAPI installPlugIn: self]</body><body package="ADvance2">plugInName	^'Documenter'</body><body package="ADvance2">plugInOpen	"Open an instance of myself."	self open</body><body package="ADvance2">plugInOpenForPainter: aPainter	"Open an instance of myself for aPainter."	self plugInOpen</body><body package="ADvance2">plugInShowAboutDialog	self adDialog aboutDialogClass showInfo: self for: nil</body><body package="ADvance2">plugInShutdown	"Do nothing."</body></methods><methods><class-id>ICC.ADvance.AD2Documenter class</class-id> <category>implementation classes</category><body package="ADvance2">plugInAPI	"^&lt;nil | Class&gt; Answer the ADvance plug-in API class or nil if absent."	^(Object includesSelector: #advance)		ifTrue: [(Object perform: #advance) plugInAPI]		ifFalse: [nil]</body><body package="ADvance2">pngConverterClass	^ICCPNGGenerator</body><body package="ADvance2">systemOrganizationClass	^IccSysOrg</body></methods><methods><class-id>ICC.ADvance.AD2Documenter class</class-id> <category>info</category><body package="ADvance2">applicationName	^self plugInName</body><body package="ADvance2">versionId	^#('7.0' '04/18/02')</body></methods><methods><class-id>ICC.ADvance.AD2Documenter class</class-id> <category>class initialization</category><body package="ADvance2">obsolete	"This class is being removed from the system. De-install me."	"self plugInAPI isNil ifFalse: [self plugInAPI deinstallPlugIn: self]."	super obsolete</body></methods><methods><class-id>ICC.ADvance.AD2Documenter class</class-id> <category>load-unload</category><body package="ADvance2">preUnloadActionFor: aParcel	"This is called when package or parcel becomes unloaded."	self systemOrganizationClass uninitialize</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>accessing</category><body package="ADvance2">component	^component</body><body package="ADvance2">component: aComponent	"Set the receiver's component."	self setComponent: aComponent</body><body package="ADvance2">model	^self component model</body><body package="ADvance2">unwrapped	^self component unwrapped</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>forwarding access</category><body package="ADvance2">area	^self component area</body><body package="ADvance2">area: aRectangle	self component area: aRectangle</body><body package="ADvance2">flushCaches	self component flushCaches</body><body package="ADvance2">isMovable	^self component isMovable.</body><body package="ADvance2">isMovable: aBoolean	self component isMovable: aBoolean</body><body package="ADvance2">isSelected	^self component isSelected.</body><body package="ADvance2">isSelected: aBoolean	self component isSelected: aBoolean</body><body package="ADvance2">isSensitive	^self component isSensitive</body><body package="ADvance2">isSensitive: aBoolean	self component isSensitive: aBoolean.</body><body package="ADvance2">isVisible	^self component isVisible</body><body package="ADvance2">isVisible: aBoolean	self component isVisible: aBoolean</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>testing</category><body package="ADvance2">hasCursor: aPoint	"Answer wether my component has the cursor."	^self component hasCursor: aPoint</body><body package="ADvance2">isControlWantedAt: aPoint	"Answer whether the receiver wants control."	^self component isControlWantedAt: aPoint</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>private</category><body package="ADvance2">getController	"Answer my controller."	^self component getController</body><body package="ADvance2">setComponent: aComponent	"Set the receiver's component."	component notNil		ifTrue:			[component container: nil.			component removeDependent: self].	component := aComponent.	aComponent container: self</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	self component displayOn: aGraphicsContext</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	self component displayOnPrinter: aGraphicsContext</body><body package="ADvance2">invalidate	self component invalidate</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>initialize-release</category><body package="ADvance2">newGraphicsDevice: aGraphicsDevice	self component newGraphicsDevice: aGraphicsDevice.	super newGraphicsDevice: aGraphicsDevice</body><body package="ADvance2">release	"Forward release to the receiver's component."	component release.	super release</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>printing</category><body package="ADvance2">printOn: aStream	"Print the receiver and the receiver's component on aStream."	super printOn: aStream.	aStream nextPutAll: ' on: '.	self component printOn: aStream</body></methods><methods><class-id>ICC.ADvance.NVWrapper</class-id> <category>updating</category><body package="ADvance2">updateForDisplay	self component updateForDisplay</body></methods><methods><class-id>ICC.ADvance.NVWrapper class</class-id> <category>instance creation</category><body package="ADvance2">on: aComponent	^self new component: aComponent</body></methods><methods><class-id>ICC.ADvance.NVVisibilityWrapper</class-id> <category>accessing</category><body package="ADvance2">isVisible	^isVisible</body><body package="ADvance2">isVisible: aBoolean	isVisible := aBoolean</body></methods><methods><class-id>ICC.ADvance.NVVisibilityWrapper</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	"I forward this message only when the my wrapped object is visible."	self isVisible ifTrue: [self component displayOn: aGraphicsContext]</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	"I forward this message only when the my wrapped object is visible."	self isVisible ifTrue: [self component displayOnPrinter: aGraphicsContext]</body><body package="ADvance2">invalidateRectangle: aRectangle repairNow: aBoolean forComponent: aComponent	"If the receiver is not visible do not do invalidates."	self isVisible ifTrue: [super			invalidateRectangle: aRectangle			repairNow: aBoolean			forComponent: aComponent]</body></methods><methods><class-id>ICC.ADvance.NVVisibilityWrapper</class-id> <category>testing</category><body package="ADvance2">hasCursor: aPoint	"Answer wether the receiver has the cursor."	^self isVisible and: [super hasCursor: aPoint]</body></methods><methods><class-id>ICC.ADvance.NVVisibilityWrapper</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	isVisible := true</body></methods><methods><class-id>ICC.ADvance.AD2FilterRoot</class-id> <category>accessing</category><body package="ADvance2">children	^self</body></methods><methods><class-id>ICC.ADvance.AD2NavigatorPreferences</class-id> <category>initialize-release</category><body package="ADvance2">initialize</body></methods><methods><class-id>ICC.ADvance.AD2NavigatorPreferences class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>aspects-cache</category><body package="ADvance2">cacheText	^'The cache is used to keep copies of frequently used objects. It reduces time to build diagrams and infer message sends.' asValue</body><body package="ADvance2">messageCacheSize	^messageCacheSize isNil		ifTrue: [messageCacheSize := 1000 asValue]		ifFalse: [messageCacheSize]</body><body package="ADvance2">typeCacheSize	^typeCacheSize isNil		ifTrue: [typeCacheSize := 500 asValue]		ifFalse: [typeCacheSize]</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>private</category><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^(Array new: 5)		at: 1 put: 'Identity';		at: 2 put: self class filtersImage -&gt; 'Filter';		at: 3 put: 'Cache';		at: 4 put: 'Package for Subjects';		at: 5 put: 'Advanced'; yourself</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#identitySpec #filterSpec #cacheSpec #subjectPackageSpec #advancedSpec)</body><body package="ADvance2">subject	^self advance preferences general</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>actions</category><body package="ADvance2">chooseDefaultFilter	| widget selection |	selection := self advance chooseFilterNameFor: self builder window.	selection isNil ifTrue: [^self].	widget := (self builder componentAt: #defaultFilterName) widget.	widget model value: selection.	widget updateDisplayContents</body><body package="ADvance2">chooseDefaultSubjectMethodPackage	| widget selection |	selection := self subject promptForPackage: 'Please choose a package from the list. Cancel will leave the package blank, so\you will be prompted for the package when new subject method is created for an\existing class.' withCRs.	widget := (self builder componentAt: #defaultSubjectMethodPackageNameInput) widget.	widget model value: (selection notNil ifTrue: [selection name] ifFalse: [nil]).	widget updateDisplayContents</body><body package="ADvance2">chooseDefaultSubjectPackage	| widget selection |	selection := self subject promptForPackage: 'Please choose a package from the list. Cancel will leave the package blank,\so you will be prompted for the package when new subject class is created.' withCRs.	widget := (self builder componentAt: #defaultSubjectPackageNameInput) 				widget.	widget model 		value: (selection notNil ifTrue: [selection name] ifFalse: [nil]).	widget updateDisplayContents</body><body package="ADvance2">clearMessageCache	^self</body><body package="ADvance2">clearTypeCache	self advance types initialize</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>aspects-identity</category><body package="ADvance2">identityText	^'This information is used to identify you in diagrams.' asValue</body><body package="ADvance2">userName	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject identity)			forAspect: #name;			onChangeSend: #changedName to: self;			 yourself) triggerChannel: self accept</body><body package="ADvance2">userNickName	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject identity)			forAspect: #nickName)		triggerChannel: self accept</body><body package="ADvance2">userOrganization	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject identity)			forAspect: #company)		triggerChannel: self accept</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>aspects-advanced</category><body package="ADvance2">advancedText	^'If you do not want to change class comments in reverse engineering, you should specify a method selector to store ADvance information' asValue</body><body package="ADvance2">classInfoSelector	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #classInfoSelector)		triggerChannel: self accept</body><body package="ADvance2">classInfoSource	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #classInfoSource;			onChangeSend: #changedClassInfoSource to: self;			yourself)		triggerChannel: self accept</body><body package="ADvance2">isSelectorClassInfoSelected	| component |	component := self builder namedComponents at: #classInfoSourceSelectorRadio ifAbsent: [nil].	^component notNil		ifTrue: [component widget isSelected]		ifFalse: [nil]</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>changing</category><body package="ADvance2">changedClassInfoSource	(self builder namedComponents at: #classInfoSelectorField ifAbsent: [^self])		isEnabled: self isSelectorClassInfoSelected</body><body package="ADvance2">changedDefaultSubjectMethodPackageName	"Nothing to do as a reaction to the package name change."	^self</body><body package="ADvance2">changedDefaultSubjectPackageName	"Nothing to do as a reaction to the package name change."	^self</body><body package="ADvance2">changedName	^self</body><body package="ADvance2">changedSubjectMethodPackageSelectionMode	"Compute the enablement."	#(#defaultSubjectMethodPackageNameInput #chooseDefaultSubjectMethodPackageButton) do: 			[:eachComponentName | 			| nextComponent |			(nextComponent := self builder namedComponents at: eachComponentName						ifAbsent: [nil]) notNil 				ifTrue: 					[nextComponent isEnabled: (self subject isModeForUsingSpecifiedMethodPackage: self subjectMethodPackageSelectionModeInputValue)]]</body><body package="ADvance2">changedSubjectPackageSelectionMode	"Compute the enablement."	#(#defaultSubjectPackageNameInput #chooseDefaultSubjectPackageButton) do: 			[:eachComponentName | 			| nextComponent |			(nextComponent := self builder namedComponents at: eachComponentName						ifAbsent: [nil]) notNil 				ifTrue: 					[nextComponent isEnabled: (self subject isModeForUsingSpecifiedClassPackage: self subjectPackageSelectionModeInputValue)]]</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>aspects-filter</category><body package="ADvance2">defaultFilterName	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #defaultFilterName)		triggerChannel: self accept</body><body package="ADvance2">filterText	^'You can choose your preferred default filter.' asValue</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>aspects-subject package</category><body package="ADvance2">defaultSubjectMethodPackageName	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #defaultSubjectMethodPackageName;			onChangeSend: #changedDefaultSubjectMethodPackageName to: self;			 yourself) triggerChannel: self accept</body><body package="ADvance2">defaultSubjectPackageName	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #defaultSubjectPackageName;			onChangeSend: #changedDefaultSubjectPackageName to: self;			 yourself) triggerChannel: self accept</body><body package="ADvance2">subjectMethodPackageSelectionMode	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #subjectMethodPackageSelectionMode;			onChangeSend: #changedSubjectMethodPackageSelectionMode to: self;			 yourself) triggerChannel: self accept</body><body package="ADvance2">subjectMethodPackageSelectionModeInputValue	| component |	component := self builder namedComponents 				at: #subjectMethodPackageSelectionModeComboBox				ifAbsent: [nil].	^component notNil 		ifTrue: [component widget editor editValue]		ifFalse: [nil]</body><body package="ADvance2">subjectMethodPackageSelectionModeList	^self subject subjectMethodPackageSelectionModeList asValue</body><body package="ADvance2">subjectPackageSelectionMode	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #subjectPackageSelectionMode;			onChangeSend: #changedSubjectPackageSelectionMode to: self;			 yourself) triggerChannel: self accept</body><body package="ADvance2">subjectPackageSelectionModeInputValue	| component |	component := self builder namedComponents 				at: #subjectPackageSelectionModeComboBox				ifAbsent: [nil].	^component notNil 		ifTrue: [component widget editor editValue]		ifFalse: [nil]</body><body package="ADvance2">subjectPackageSelectionModeList	^self subject subjectPackageSelectionModeList asValue</body><body package="ADvance2">subjectPackageText	^'Policy to determine the packages to use for new subject classes and for new subject methods created for existing classes.' asValue</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self changedClassInfoSource.	self changedSubjectMethodPackageSelectionMode.	self changedSubjectPackageSelectionMode.</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog class</class-id> <category>resources</category><body package="ADvance2">filtersImage	^self resources opaqueImageAt: #diagramFilter</body></methods><methods><class-id>ICC.ADvance.IccHTMLPreformatedText</class-id> <category>accessing</category><body package="ADvance2">content	"&lt;String&gt;"	content isNil		ifTrue: [content := ''].	^content</body></methods><methods><class-id>ICC.ADvance.IccHTMLPreformatedText</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/PRE&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;PRE&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLPreformatedText</class-id> <category>resultcreation</category><body package="ADvance2">createHTMLOn: aStream	"&lt;&gt; creates a HTML description on a stream aStream"	self preHTMLOn: aStream.	self convertBaseString: self content onHTMLStream: aStream.	self postHTMLOn: aStream</body></methods><methods><class-id>ICC.ADvance.AD2SubjectPropertiesDialog</class-id> <category>accessing</category><body package="ADvance2">model	^model</body><body package="ADvance2">model: aSubject	model := aSubject</body></methods><methods><class-id>ICC.ADvance.AD2SubjectPropertiesDialog</class-id> <category>private</category><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^Array with: 'General' with: (self resources opaqueImageAt: #editText)			-&gt; 'Description'</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#generalSpec #descriptionSpec)</body></methods><methods><class-id>ICC.ADvance.AD2SubjectPropertiesDialog</class-id> <category>aspects</category><body package="ADvance2">containerName	^BufferedValueHolder subject: ((AspectAdaptor subject: self model)			forAspect: #baseClassContainer)		triggerChannel: self accept</body><body package="ADvance2">description	^BufferedValueHolder subject: ((AspectAdaptor subject: self model)			forAspect: #description)		triggerChannel: self accept</body><body package="ADvance2">subjectName	^(AspectAdaptor subject: self model)		forAspect: #name</body></methods><methods><class-id>ICC.ADvance.AD2SubjectPropertiesDialog</class-id> <category>interface opening</category><body package="ADvance2">preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder labelAt: #containerLabel put: self adBasics systemOrganization containerLabel</body></methods><methods><class-id>ICC.ADvance.AD2SubjectPropertiesDialog class</class-id> <category>resources opaque</category><body package="ADvance2">subjectOpaqueImage	^self resources opaqueImageAt: #subject</body></methods><methods><class-id>ICC.ADvance.AD2ChooseColorDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self setUpVisuals</body><body package="ADvance2">setUpVisuals	| ext r c brightness lead x y sats v cp grays |	cp := builder componentAt: #colorSpace.	ext := 14.	lead := 2.	grays := #(1 0.94 0.86 0.8 0.7 0.6 0.43 0).	0 to: 7		do:			[:i |			"these values are gama corrected using ((i/7)**(1/2.3))and hand edited to overlap with the			system"			r := 0 @ (i * ext) + (lead @ lead) extent: ext @ ext - (lead @ lead).			c := ValueHolder with: (ColorValue brightness: (grays at: i + 1)).			v := ColoredArea new.			v controller: ColoredAreaController new.			v model: colorValue.			v select: c.			cp widget add: v in: r].	brightness := 1.0 - self cubesBrightness value.	sats := 8 * brightness.	y := 0.	1 to: sats		do:			[:s |			| saturation |			saturation := s asFloat / sats.			x := 1.			#(0 30 60 90 120 150 180 210 240 270 300 330)				do:					[:h |					| hue |					hue := h asFloat / 360.0.					r := x * ext @ (y * ext) + (lead @ lead) + (2 @ 0) extent: ext @ ext - (lead @ lead).					c := ValueHolder with: (ColorValue									hue: hue									saturation: saturation									brightness: brightness).					v := ColoredArea new.					v controller: ColoredAreaController new.					v model: colorValue.					v select: c.					cp widget add: v in: r.					x := x + 1].			y := y + 1]</body></methods><methods><class-id>ICC.ADvance.AD2ChooseColorDialog</class-id> <category>changing</category><body package="ADvance2">changedColor	"The selected color has been changed. Update the color region."	(self builder componentAt: #colorRegion) widget insideColor: self colorValue value.	(self builder componentAt: #okButton) enable</body></methods><methods><class-id>ICC.ADvance.AD2ChooseColorDialog</class-id> <category>aspects</category><body package="ADvance2">colorValue	^colorValue</body><body package="ADvance2">cubesBrightness	^cubesBrightness</body></methods><methods><class-id>ICC.ADvance.AD2ChooseColorDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	colorValue := nil asValue. 	colorValue onChangeSend: #changedColor to: self.	cubesBrightness := 0 asValue</body></methods><methods><class-id>ICC.ADvance.AD2ChooseColorDialog</class-id> <category>actions</category><body package="ADvance2">pickColor	| newColor |	(newColor := ICCColorPicker openOn: self colorValue value) notNil		ifTrue: [self colorValue value: newColor]</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>converting</category><body package="ADvance2">asSpec	^self specClass new		 text: self getRawText;		 location: self location rounded;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>menu creation</category><body package="ADvance2">actionMenu: aMenuBuilder	aMenuBuilder addLabel: 'Edit...' value: [self edit].	aMenuBuilder addLabel: 'Delete' value: [self remove]</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>drawing</category><body package="ADvance2">displayIn: anEditor	| aPart |	aPart := AD2TextPart new model: self; yourself.	anEditor activeLayer add: aPart; moveToBackground: aPart.	aPart updateForDisplay</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>accessing</category><body package="ADvance2">domainType	^#text</body><body package="ADvance2">specClass	^AD2TextSpec</body><body package="ADvance2">text	^text</body><body package="ADvance2">text: aText	text := self container getTextFor: aText</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>updating</category><body package="ADvance2">update: aSymbol with: aParameter	aSymbol == #location		ifTrue:			[self location: aParameter.			self changed: #location with: aParameter.			^self container beModified].	aSymbol == #zoom ifTrue: [^self updateZoomTo: aParameter].	super update: aSymbol with: aParameter</body><body package="ADvance2">updateZoomTo: scale	self text rescale.	self changed: #zoom with: scale</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>private-accessing</category><body package="ADvance2">getRawText	^self text text</body><body package="ADvance2">setRawText: aText	self text: aText.	self changed: #newString.	self applicationModel beModified.	^true</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>private</category><body package="ADvance2">basicRemove	self applicationModel textModels remove: self.	self applicationModel beModified.	self delete</body></methods><methods><class-id>ICC.ADvance.AD2TextModel</class-id> <category>actions</category><body package="ADvance2">edit	"Open a text editor on my text."	AD2TextEditor		open: ((AspectAdaptor subject: self)				accessWith: #getRawText assignWith: #setRawText:)		label: 'Text Editor'		icon: (self advance resources iconFor: AD2Images named: #editText)</body><body package="ADvance2">remove	self applicationModel controller removeTexts</body></methods><methods><class-id>ICC.ADvance.AD2Workbench</class-id> <category>actions</category><body package="ADvance2">about	self adDialog aboutDialogClass showInfo: self advance for: self window</body><body package="ADvance2">exit	"Close all ADvance windows. Confirm if there are more than one ADvance window open."	self advance plugInAPI closeAllADvanceWindowsFor: self builder window</body><body package="ADvance2">openDiagramPainter	self advance diagramPainterClass open</body><body package="ADvance2">openDocumenter	self advance documenterClass open</body><body package="ADvance2">openFilterBrowser	self advance filterBrowserClass open</body><body package="ADvance2">openFilterPalette	self advance filterPaletteClass open</body><body package="ADvance2">openMessageNavigator	self advance messageNavigatorClass open</body><body package="ADvance2">openSubjectBrowser	self advance subjectBrowserClass open</body></methods><methods><class-id>ICC.ADvance.AD2Workbench</class-id> <category>interface opening</category><body package="ADvance2">postGenerateToolBarWith: aBuilder	| menu |	menu := self mainMenu.	(menu atNameKey: #plugins)		submenu: [self advance plugInAPI getPlugInsOpenMenu]</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self resizeWindowBox</body><body package="ADvance2">preAddSpecWith: aSpec</body><body package="ADvance2">resizeWindowBox	| win box tbWrapper |	win := builder window.	box := win displayBox.	tbWrapper := builder componentAt: #toolbar.	box height: (tbWrapper localPointToGlobal: tbWrapper bounds origin) y + tbWrapper bounds height.	win displayBox: box</body></methods><methods><class-id>ICC.ADvance.AD2Workbench</class-id> <category>events</category><body package="ADvance2">requestForWindowClose	^super requestForWindowClose and: [self adDialog			confirm: 'Do you want to close the Workbench?'			initialAnswer: true			for: self builder window]</body></methods><methods><class-id>ICC.ADvance.AD2Workbench</class-id> <category>testing</category><body package="ADvance2">isADvanceApplicationModel	^false</body></methods><methods><class-id>ICC.ADvance.AD2Workbench class</class-id> <category>load-unload</category><body package="ADvance2">closeAndUnschedule	self current isNil ifTrue: [^self].	Object errorSignal handle: [:ex | ex return]		do: [self current builder window controller closeAndUnschedule]</body></methods><methods><class-id>ICC.ADvance.AD2Workbench class</class-id> <category>constants</category><body package="ADvance2">getHelpDictionary	"self initializeHelpDictionary"	^super getHelpDictionary		 at: #openDiagramPainterButton put: #('Open Diagram Painter' 'ADvance tool to show an existing or create a new diagram.');		 at: #openSubjectBrowserButton put: #('Open Subject Browser' 'ADvance tool to edit an existing subject or create a new subject.');		 at: #openFilterBrowserButton put: #('Open Filter Browser' 'ADvance tool for searching predefined method and attribute filters.');		 at: #openFilterPaletteButton put: #('Open Filter Palette' 'ADvance tool to edit an existing or create a new filter.');		 at: #openDocumenterButton put: #('Open Documenter' 'ADvance tool to generate HTML documentation for a subject.');		 yourself</body><body package="ADvance2">initiallyDisabledItems	^#()</body><body package="ADvance2">itemSpecs	^super itemSpecs		 removeKey: #closeRequest;		 at: #openDiagramPainter put: (self toolbarButton: (self resources opaqueImageFor: self advance diagramPainterClass named: #applicationImage));		 at: #openDocumenter put: (self toolbarButton: (self resources opaqueImageFor: self advance documenterClass named: #applicationImage));		 at: #openFilterBrowser put: (self toolbarButton: self advance filterBrowserClass opaqueApplicationImage);		 at: #openFilterPalette put: (self toolbarButton: self advance filterPaletteClass opaqueApplicationImage);		 at: #openMessageNavigator put: (self toolbarButton: (self resources opaqueImageFor: self advance messageNavigatorClass named: #applicationImage));		 at: #openSubjectBrowser put: (self toolbarButton: (self resources opaqueImageFor: self advance subjectBrowserClass named: #applicationImage));		 yourself</body><body package="ADvance2">toolbarPolicy	^AD2ToolbarPolicy smallButtons</body></methods><methods><class-id>ICC.ADvance.AD2Workbench class</class-id> <category>resources</category><body package="ADvance2">diagramPainterIcon	^self resources opaqueImageFor: self advance diagramPainterClass named: #applicationImage</body><body package="ADvance2">visualLauncherIcon	"Use the Diagram Painter's Icon as represenation in the VisualLauncher menu."	^self diagramPainterIcon</body></methods><methods><class-id>ICC.ADvance.AD2LayoutOrigin</class-id> <category>private</category><body package="ADvance2">leftRelativeTo: aRectangle	"Answer a left position of a rectangle relative to aRectangle based on the receiver's constraints."	^(leftFraction * aRectangle width + aRectangle left) rounded</body><body package="ADvance2">topRelativeTo: aRectangle	"Answer a top of a rectangle relative to aRectangle based on the receiver's constraints."	^(topFraction * aRectangle height + aRectangle top) rounded</body></methods><methods><class-id>ICC.ADvance.AD2LayoutOrigin</class-id> <category>accessing</category><body package="ADvance2">leftFraction	^leftFraction</body><body package="ADvance2">leftFraction: aNumber	leftFraction := aNumber asFloat</body><body package="ADvance2">topFraction	^topFraction</body><body package="ADvance2">topFraction: aNumber	topFraction := aNumber asFloat</body></methods><methods><class-id>ICC.ADvance.AD2LayoutOrigin</class-id> <category>encode-decode</category><body package="ADvance2">literalArrayEncoding	^Array with: self leftFraction with: self topFraction</body></methods><methods><class-id>ICC.ADvance.AD2LayoutOrigin</class-id> <category>initialize-release</category><body package="ADvance2">initialize	"Initialize the receiver's fractions."	leftFraction := 0.0.	topFraction := 0.0</body></methods><methods><class-id>ICC.ADvance.AD2LayoutOrigin</class-id> <category>layout</category><body package="ADvance2">pointRelativeTo: aRectangle	"Answer a point that is relative to aRectangle based on the receiver's constraints."	^(self leftRelativeTo: aRectangle)		@ (self topRelativeTo: aRectangle)</body></methods><methods><class-id>ICC.ADvance.AD2LayoutOrigin class</class-id> <category>instance-creation</category><body package="ADvance2">new	^super new initialize</body><body package="ADvance2">newFor: aPoint relativeTo: aRectangle	^self new		 leftFraction: (aPoint x - aRectangle left) asFloat / aRectangle width;		 topFraction: (aPoint y - aRectangle top) asFloat / aRectangle height;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2ChooseFontDialog</class-id> <category>changing</category><body package="ADvance2">enableOkButton	self iccEnable: (self familyList selection notNil and: [self sizesList selection notNil])		group: #(#okButton)</body><body package="ADvance2">fontFamilyChanged	self familyList selection: self fontFamily value asLowercase</body><body package="ADvance2">fontSizeChanged	self sizesList selection: self fontSize value</body><body package="ADvance2">selectedFamilyChanged	self fontFamily retractInterestsFor: self.	self familyList selection notNil ifTrue: [self setFontFamily: self familyList selection].	self fontFamily onChangeSend: #fontFamilyChanged to: self.	self enableOkButton</body><body package="ADvance2">selectedSizeChanged	self fontSize retractInterestsFor: self.	self sizesList selection notNil ifTrue: [self setFontSize: self sizesList selection].	self fontSize onChangeSend: #fontSizeChanged to: self.	self enableOkButton</body></methods><methods><class-id>ICC.ADvance.AD2ChooseFontDialog</class-id> <category>private</category><body package="ADvance2">availableFontFamilies	^(self availableFonts collect: [:each | each family]) asSet asSortedCollection</body><body package="ADvance2">availableFonts	^Screen default defaultFontPolicy availableFonts</body><body package="ADvance2">defaultPixelSize	^Screen default defaultFontPolicy defaultFont fontDescription pixelSize</body><body package="ADvance2">fontDescription	^FontDescription new		 family: self selectedFontFamily;		 pixelSize: self selectedFontSize;		 yourself</body><body package="ADvance2">scalingFactor	^self selectedFontSize / self defaultPixelSize</body><body package="ADvance2">setFontFamily: aString	self fontFamily value: aString.	self selectedFontFamily: aString.	self updateSample</body><body package="ADvance2">setFontSize: anInteger	self fontSize value: anInteger.	self selectedFontSize: anInteger.	self updateSample</body><body package="ADvance2">standardSizes	^#(8 9 10 11 12 14 16 18 20 22 24 26 28 36 48 72)</body><body package="ADvance2">textAttributes	^self builder policy class textAttributesWithPlatformFont: self fontDescription scalingFactor: self scalingFactor</body></methods><methods><class-id>ICC.ADvance.AD2ChooseFontDialog</class-id> <category>accessing</category><body package="ADvance2">sampleText	^'AaBbYyZz' asComposedText asValue</body><body package="ADvance2">selectedFontFamily	^selectedFontFamily</body><body package="ADvance2">selectedFontFamily: aValue	selectedFontFamily := aValue</body><body package="ADvance2">selectedFontSize	^selectedFontSize</body><body package="ADvance2">selectedFontSize: anInteger	selectedFontSize := anInteger</body></methods><methods><class-id>ICC.ADvance.AD2ChooseFontDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	(fontFamily := String new asValue) onChangeSend: #fontFamilyChanged to: self.	(familyList := SelectionInList new) list: self availableFontFamilies.	familyList selectionIndexHolder onChangeSend: #selectedFamilyChanged to: self.	(fontSize := nil asValue) onChangeSend: #fontSizeChanged to: self.	(sizesList := SelectionInList new) list: self standardSizes.	sizesList selectionIndexHolder onChangeSend: #selectedSizeChanged to: self.	self selectedFontSize: self defaultPixelSize</body></methods><methods><class-id>ICC.ADvance.AD2ChooseFontDialog</class-id> <category>aspects</category><body package="ADvance2">familyList	^familyList</body><body package="ADvance2">fontFamily	^fontFamily</body><body package="ADvance2">fontSize	^fontSize</body><body package="ADvance2">sizesList	^sizesList</body></methods><methods><class-id>ICC.ADvance.AD2ChooseFontDialog</class-id> <category>updating</category><body package="ADvance2">updateSample	| component |	(component := self builder componentAt: #sample) isNil ifTrue: [^self].	component widget textStyle: self textAttributes; invalidate</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocument</class-id> <category>constants</category><body package="ADvance2">endOfSelf	^'&lt;/HTML&gt;'</body><body package="ADvance2">startOfSelf	^'&lt;HTML&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocument</class-id> <category>query</category><body package="ADvance2">body	"&lt;HTMLBody&gt; I return the body-construct of the HTML document."	^self content detect: [:aHTMLItem | aHTMLItem isBody]</body></methods><methods><class-id>ICC.ADvance.IccHTMLDocument class</class-id> <category>instance creation</category><body package="ADvance2">emptyDocumentWithName: aString	"^&lt;HTMLDocumentation&gt;"	| tmpHTMLDocumentation aIccHTMLString |	aIccHTMLString := (IccHTMLString new) content: aString; yourself.	tmpHTMLDocumentation := self new.	tmpHTMLDocumentation add: ((IccHTMLHeader new) title: aIccHTMLString; yourself); add: IccHTMLBody new.	^tmpHTMLDocumentation</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>accessing</category><body package="ADvance2">getFilteredClassInstVars	filteredClassInstVars isNil 		ifTrue: [filteredClassInstVars := self preset filteredClassInstVars copy].	^filteredClassInstVars</body><body package="ADvance2">getFilteredClassMethods	^filteredClassMethods isNil		ifTrue: [self preset filteredClassMethods copy]		ifFalse: [filteredClassMethods]</body><body package="ADvance2">getFilteredClassProtocols	^filteredClassProtocols isNil		ifTrue: [self preset filteredClassProtocols copy]		ifFalse: [filteredClassProtocols]</body><body package="ADvance2">getFilteredInstMethods	^filteredInstMethods isNil		ifTrue: [self preset filteredInstMethods copy]		ifFalse: [filteredInstMethods]</body><body package="ADvance2">getFilteredInstProtocols	^filteredInstProtocols isNil		ifTrue: [self preset filteredInstProtocols copy]		ifFalse: [filteredInstProtocols]</body><body package="ADvance2">getFilteredInstVars	filteredInstVars isNil 		ifTrue: [filteredInstVars := self preset filteredInstVars copy].	^filteredInstVars</body><body package="ADvance2">getFilteredSharedVars	filteredSharedVars isNil 		ifTrue: [filteredSharedVars := self preset filteredSharedVars copy].	^filteredSharedVars</body><body package="ADvance2">isFilteringAccessors	^bits anyMask: FilterAccessors</body><body package="ADvance2">isFilteringAccessors: aBoolean	bits := aBoolean				ifTrue: [bits maskSet: FilterAccessors]				ifFalse: [bits maskClear: FilterAccessors]</body><body package="ADvance2">isFilteringClassInstVars	^bits anyMask: FilterClassInstVars</body><body package="ADvance2">isFilteringClassInstVars: aBoolean 	bits := aBoolean 				ifTrue: [bits maskSet: FilterClassInstVars]				ifFalse: [bits maskClear: FilterClassInstVars]</body><body package="ADvance2">isFilteringClassMethods	^bits anyMask: FilterClassMethods</body><body package="ADvance2">isFilteringClassMethods: aBoolean	bits := aBoolean				ifTrue: [bits maskSet: FilterClassMethods]				ifFalse: [bits maskClear: FilterClassMethods]</body><body package="ADvance2">isFilteringInstVars	^bits anyMask: FilterInstVars</body><body package="ADvance2">isFilteringInstVars: aBoolean 	bits := aBoolean 				ifTrue: [bits maskSet: FilterInstVars]				ifFalse: [bits maskClear: FilterInstVars]</body><body package="ADvance2">isFilteringOverriddenMethods	^bits anyMask: FilterOverriddenMethods</body><body package="ADvance2">isFilteringOverriddenMethods: aBoolean	bits := aBoolean				ifTrue: [bits maskSet: FilterOverriddenMethods]				ifFalse: [bits maskClear: FilterOverriddenMethods]</body><body package="ADvance2">isFilteringPrivateMethods	^bits anyMask: FilterPrivateMethods</body><body package="ADvance2">isFilteringPrivateMethods: aBoolean	bits := aBoolean				ifTrue: [bits maskSet: FilterPrivateMethods]				ifFalse: [bits maskClear: FilterPrivateMethods]</body><body package="ADvance2">isFilteringSharedVars	^bits anyMask: FilterSharedVars</body><body package="ADvance2">isFilteringSharedVars: aBoolean 	bits := aBoolean 				ifTrue: [bits maskSet: FilterSharedVars]				ifFalse: [bits maskClear: FilterSharedVars]</body><body package="ADvance2">preset	^self class preset</body><body package="ADvance2">resources	^self advance resources</body><body package="ADvance2">setFilteredClassInstVars: aCollectionOfStrings 	"For the case of sets, we convert the parameter collection to an ordered collection; preset 	filter is stored as nil for lazy init next time."	filteredClassInstVars := (aCollectionOfStrings asOrderedCollection 				= self preset filteredClassInstVars 					ifTrue: [nil]					ifFalse: [aCollectionOfStrings asOrderedCollection])</body><body package="ADvance2">setFilteredClassMethods: aCollectionOfStrings	"For the case of sets, we convert the parameter collection to an ordered collection."	filteredClassMethods := aCollectionOfStrings asOrderedCollection = self preset filteredClassMethods				ifTrue: [nil]				ifFalse: [aCollectionOfStrings asOrderedCollection]</body><body package="ADvance2">setFilteredClassProtocols: aCollectionOfStrings	filteredClassProtocols := aCollectionOfStrings = self preset filteredClassProtocols				ifTrue: [nil]				ifFalse: [aCollectionOfStrings]</body><body package="ADvance2">setFilteredInstMethods: aCollectionOfStrings	"aCollectionOfString may be a Set or IdentitySet. In later use of the filter, access to indexed	elements is needed, so we build an OrderedCollection from the parameter."	filteredInstMethods := (aCollectionOfStrings asOrderedCollection = self preset filteredInstMethods)				ifTrue: [nil]				ifFalse: [aCollectionOfStrings asOrderedCollection]</body><body package="ADvance2">setFilteredInstProtocols: aCollectionOfStrings	filteredInstProtocols := aCollectionOfStrings = self preset filteredInstProtocols				ifTrue: [nil]				ifFalse: [aCollectionOfStrings]</body><body package="ADvance2">setFilteredInstVars: aCollectionOfStrings 	"For the case of sets, we convert the parameter collection to an ordered collection; preset 	filter is stored as nil for lazy init next time."	filteredInstVars := (aCollectionOfStrings asOrderedCollection 				= self preset filteredInstVars 					ifTrue: [nil]					ifFalse: [aCollectionOfStrings asOrderedCollection])</body><body package="ADvance2">setFilteredSharedVars: aCollectionOfStrings 	"For the case of sets, we convert the parameter collection to an ordered collection; preset 	filter is stored as nil for lazy init next time."	filteredSharedVars := (aCollectionOfStrings asOrderedCollection 				= self preset filteredSharedVars 					ifTrue: [nil]					ifFalse: [aCollectionOfStrings asOrderedCollection])</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>private-accessing</category><body package="ADvance2">bits	^bits</body><body package="ADvance2">bits: anInteger	bits := anInteger</body><body package="ADvance2">filteredClassInstVars	^filteredClassInstVars</body><body package="ADvance2">filteredClassInstVars: aCollectionOfStrings	filteredClassInstVars := aCollectionOfStrings asSortedCollection</body><body package="ADvance2">filteredClassMethods	^filteredClassMethods</body><body package="ADvance2">filteredClassMethods: aCollectionOfStrings	filteredClassMethods := aCollectionOfStrings asSortedCollection</body><body package="ADvance2">filteredClassProtocols	^filteredClassProtocols</body><body package="ADvance2">filteredClassProtocols: aCollectionOfStrings	filteredClassProtocols := aCollectionOfStrings asSortedCollection</body><body package="ADvance2">filteredInstMethods	^filteredInstMethods</body><body package="ADvance2">filteredInstMethods: aCollectionOfStrings	filteredInstMethods := aCollectionOfStrings asSortedCollection</body><body package="ADvance2">filteredInstProtocols	^filteredInstProtocols</body><body package="ADvance2">filteredInstProtocols: aCollectionOfStrings	filteredInstProtocols := aCollectionOfStrings asSortedCollection</body><body package="ADvance2">filteredInstVars	^filteredInstVars</body><body package="ADvance2">filteredInstVars: aCollectionOfStrings	filteredInstVars := aCollectionOfStrings asSortedCollection</body><body package="ADvance2">filteredSharedVars	^filteredSharedVars</body><body package="ADvance2">filteredSharedVars: aCollectionOfStrings	filteredSharedVars := aCollectionOfStrings asSortedCollection</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>filtering</category><body package="ADvance2">classInstVarsFrom: aClass	^self isFilteringClassInstVars		ifTrue: [SortedCollection new]		ifFalse: [(self adBasics systemOrganization unfilteredClassInstVarsFor: aClass filter: self) asSortedCollection]</body><body package="ADvance2">classMethodsFrom: aClass	^self isFilteringClassMethods		ifTrue: [SortedCollection new]		ifFalse: [(self adBasics systemOrganization unfilteredClassMethodsFor: aClass filter: self) asSortedCollection]</body><body package="ADvance2">instVarsFrom: aClass	^self isFilteringInstVars		ifTrue: [SortedCollection new]		ifFalse: [(self adBasics systemOrganization unfilteredInstVarsFor: aClass filter: self) asSortedCollection]</body><body package="ADvance2">instanceMethodsFrom: aClass	^(self adBasics systemOrganization unfilteredInstMethodsFor: aClass filter: self) asSortedCollection</body><body package="ADvance2">remainingClientRelations: anOrderedCollectionOfClientRelations	^anOrderedCollectionOfClientRelations		reject: [:eachCR | self filtersClientRelation: eachCR]</body><body package="ADvance2">sharedVarsFrom: aClass	^self isFilteringSharedVars		ifTrue: [SortedCollection new]		ifFalse: [(self adBasics systemOrganization unfilteredSharedVarsFor: aClass filter: self) asSortedCollection]</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>private</category><body package="ADvance2">classVarAccessMethodsFor: aClass	self isFilteringAccessors ifFalse: [^SortedCollection new]		ifTrue:			[| varNames varNamesSize anArray |			varNames := aClass class allInstVarNames.			varNamesSize := varNames size.			anArray := Array new: varNamesSize * 2.			1 to: varNames size				do:					[:index |					| varName |					varName := varNames at: index.					anArray at: index put: varName asSymbol.					anArray at: varNamesSize + index put: (varName copyWith: $:) asSymbol].			^anArray asSortedCollection]</body><body package="ADvance2">filtersClientRelation: aClientRelation	^(aClientRelation implementation == #instVar and: [((self instVarsFrom: aClientRelation roleContext) includes: aClientRelation roleName) not]) 		or: [	(aClientRelation implementation == #classInstVar and: [((self classInstVarsFrom: aClientRelation roleContext) includes: aClientRelation roleName) not]) 		or: [	(aClientRelation implementation == #classVar and: [((self sharedVarsFrom: aClientRelation roleContext) includes: aClientRelation roleName asSymbol) not])]]</body><body package="ADvance2">instVarAccessMethodsFor: aClass	self isFilteringAccessors ifFalse: [^SortedCollection new]		ifTrue:			[| varNames varNamesSize anArray |			varNames := aClass allInstVarNames.			varNamesSize := varNames size.			anArray := Array new: varNamesSize * 2.			1 to: varNames size				do:					[:index |					| varName |					varName := varNames at: index.					anArray at: index put: varName asSymbol.					anArray at: varNamesSize + index put: (varName copyWith: $:) asSymbol].			^anArray asSortedCollection]</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>comparing</category><body package="ADvance2">= aFilter	"Answer whether the receiver and the argument represent the same object."	^bits = aFilter bits and:	[filteredInstProtocols = aFilter filteredInstProtocols and:	[filteredInstMethods = aFilter filteredInstMethods and:	[filteredClassProtocols = aFilter filteredClassProtocols and:	[filteredClassMethods = aFilter filteredClassMethods and:	[filteredInstVars = aFilter filteredInstVars and:	[filteredClassInstVars = aFilter filteredClassInstVars and:	[filteredSharedVars = aFilter filteredSharedVars]]]]]]]</body><body package="ADvance2">hash	^bits hash</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>encode-decode</category><body package="ADvance2">diagramLiteralArrayEncoding	^self literalArrayEncoding</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>initialize-release</category><body package="ADvance2">initialize	"Initializes the bits to hide accessors, overridden and private methods as well as shared variables on default."	super initialize.	bits := FilterAccessors + FilterOverriddenMethods + FilterPrivateMethods + FilterSharedVars</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter</class-id> <category>copying</category><body package="ADvance2">postCopy	super postCopy.	filteredInstProtocols := filteredInstProtocols copy.	filteredInstMethods := filteredInstMethods copy.	filteredClassProtocols := filteredClassProtocols copy.	filteredClassMethods := filteredClassMethods copy.	filteredInstVars := filteredInstVars copy.	filteredClassInstVars := filteredClassInstVars copy.	filteredSharedVars := filteredSharedVars copy.</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"Set the bit masks and the preset filter (required for encoding/decoding)."	"self initialize"	FilterAccessors := 1.	FilterClassMethods := 2.	FilterOverriddenMethods := 4.	FilterPrivateMethods := 8.	FilterInstVars := 16.	FilterClassInstVars := 32.	FilterSharedVars := 64.	self initializePreset</body><body package="ADvance2">obsolete	"This class is being removed from the system. Reset the class variable."	self uninitialize.	super obsolete</body><body package="ADvance2">uninitialize	Preset := nil</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter class</class-id> <category>private defaults</category><body package="ADvance2">filteredClassInstVarsDefault	^#()</body><body package="ADvance2">filteredClassMethodsDefault	^#('new' 'initialize')</body><body package="ADvance2">filteredClassProtocolsDefault	^#('ADvance*' 'access-*' 'accessing-*' 'backward*' 'constants' 'documentation' '*declarations' 'exampl*' 'fileIn/Out' 'info' '*specs' 'resources' 'signal*')</body><body package="ADvance2">filteredInstMethodsDefault	^#('init*' 'releas*' 'printString' 'displayString' 'storeString' 'update:*' 'printOn:' 'displayOn:*' 'storeOn:')</body><body package="ADvance2">filteredInstProtocolsDefault	^#('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' 'resources')</body><body package="ADvance2">filteredInstVarsDefault	^#()</body><body package="ADvance2">filteredSharedVarsDefault	^#()</body><body package="ADvance2">participantsFilterDefault	^#(#new #new: #open #close #initialize #release #do: #select: #reject: #detect: #at: #ifTrue: #ifFalse: #not #or: #and: #| #&amp; #value #value: #+ #- #* #/ #asString #cr #space #crtab #next #nextPut: #nextPutAll: #add: #version #at:ifAbsent: #current #contents #readStream #writeStream #perform: #isNil #value:value: #class #= #== #~= #&lt; #&gt; #, #isOpen)</body><body package="ADvance2">presetFilter	^self new		 filteredInstProtocols: self filteredInstProtocolsDefault asSortedCollection;		 filteredInstMethods: self filteredInstMethodsDefault asSortedCollection;		 filteredClassProtocols: self filteredClassProtocolsDefault asSortedCollection;		 filteredClassMethods: self filteredClassMethodsDefault asSortedCollection;		 filteredInstVars: self filteredInstVarsDefault asSortedCollection;		 filteredClassInstVars: self filteredClassInstVarsDefault asSortedCollection;		 filteredSharedVars: self filteredSharedVarsDefault asSortedCollection;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter class</class-id> <category>accessing</category><body package="ADvance2">preset	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	Preset isNil ifTrue: [self initializePreset].	^Preset</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter class</class-id> <category>private initialization</category><body package="ADvance2">initializePreset	Preset := self presetFilter</body></methods><methods><class-id>ICC.ADvance.AD2StructureFilter class</class-id> <category>utility</category><body package="ADvance2">filterForParticipantsSearch: aCollectionOfSelectors	^aCollectionOfSelectors reject: [:each | self participantsFilterDefault includes: each]</body></methods><methods><class-id>ICC.ADvance.AD2MethodFilter class</class-id> <category>private</category><body package="ADvance2">decodeFromLiteralArray: anArray	"This class is obsolete / deprecated, so if it has to be instantiated, the super class is used instead."	^AD2StructureFilter new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>actions-page navigation</category><body package="ADvance2">back	(#(#selectContainer #selectParcel #selectPackage #selectSubject) includes: self page)		ifTrue: [^self changePage: #selectInitialContents].	self page == #chooseClass ifTrue: [^self backFromChooseClass].	self page == #finish ifTrue: [^self changePage: #chooseClass]</body><body package="ADvance2">backFromChooseClass	| aSymbol |	aSymbol := self dataSourceType.	aSymbol == #empty ifTrue: [^self changePage: #selectInitialContents].	aSymbol == #Container ifTrue: [^self changePage: #selectContainer].	aSymbol == #Parcel ifTrue:  [^self changePage: #selectParcel].	aSymbol == #Package ifTrue:  [^self changePage: #selectPackage].	aSymbol == #ChangeSet ifTrue: [^self changePage: #selectInitialContents].	aSymbol == #Subject ifTrue: [^self changePage: #selectSubject]</body><body package="ADvance2">next	self page == #selectInitialContents ifTrue: [^self nextFromSelectInitialContents].	self page == #selectContainer ifTrue: [^self nextFromSelectContainer].	self page == #selectParcel ifTrue: [^self nextFromSelectParcel].	self page == #selectPackage ifTrue: [^self nextFromSelectPackage].	self page == #selectSubject ifTrue: [^self nextFromSelectSubject].	self page == #chooseClass ifTrue: [^self nextFromChooseClass].	self page == #finish ifTrue: [self basicFinish. ^self doAccept].	self error: 'invalid page symbol'</body><body package="ADvance2">nextFromChooseClass	"To proceed I need a new subject name. First I reject empty names.	If the name is a namespace name I reject with a message.	If the name is a class name I reject existing subject names.	If the name is not a class name I invoke a dialog to create a new class."	| name classOrNamespace |	name := self subjectName value.	name isEmpty ifTrue: [^self adDialog message: 'To proceed, enter a class name or press "Choose class...".'].	((classOrNamespace := self adBasics systemEnvironment at: name ifAbsent: [nil]) notNil		and: [classOrNamespace isNameSpace])			ifTrue: [^self notifyAboutExistingNamespace].	(classOrNamespace notNil and: [self advance subjectEnvironment includesSubject: name])		ifTrue: [^self notifyAboutExistingSubject].	classOrNamespace isNil		ifTrue:			[| classOrNil |			classOrNil := self adDialog						chooseClassFrom: name asSymbol						superclassName: #Object						for: self builder window.			classOrNil isNil ifTrue: [^self].			self subjectName value: classOrNil fullName].	self changePage: #finish</body><body package="ADvance2">nextFromSelectContainer	self containerList selection isNil ifTrue: [^self adDialog message: 'To proceed, you have to select an element.'].	self subjectName value: self containerList selection.	self cleanSubjectName.	self changePage: #chooseClass</body><body package="ADvance2">nextFromSelectInitialContents	| aSymbol |	aSymbol := self dataSourceType.	aSymbol == #empty ifTrue: [^self changePage: #chooseClass].	aSymbol == #Container ifTrue: [^self changePage: #selectContainer].	aSymbol == #Parcel ifTrue: [^self changePage: #selectParcel].	aSymbol == #Package ifTrue: [^self changePage: #selectPackage].	aSymbol == #ChangeSet ifTrue: [^self changePage: #chooseClass].	aSymbol == #Subject ifTrue: [^self changePage: #selectSubject]</body><body package="ADvance2">nextFromSelectPackage	self packageList selection isNil ifTrue: [^self adDialog message: 'To proceed, you have to select a Package.'].	self subjectName value: self packageList selection.	self cleanSubjectName.	self changePage: #chooseClass</body><body package="ADvance2">nextFromSelectParcel	self parcelList selection isNil ifTrue: [^self adDialog message: 'To proceed, you have to select a Parcel.'].	self subjectName value: self parcelList selection.	self cleanSubjectName.	self changePage: #chooseClass</body><body package="ADvance2">nextFromSelectSubject	self subjectTree selection isNil ifTrue: [^self adDialog message: 'To proceed, you have to select a subject.'].	self subjectName value: self subjectTree selection subjectName , 'Copy'.	self cleanSubjectName.	self changePage: #chooseClass</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>aspects-texts</category><body package="ADvance2">chooseClassText	^'Subjects need an associated class.\\Enter a class name or choose a class.' withCRs asValue</body><body package="ADvance2">finishText	^'The subject is now ready for creation. Press "Next" to create it.' asValue</body><body package="ADvance2">initialText	^'This Wizard helps you defining subjects.\\Select how to define the subject.' withCRs  asValue</body><body package="ADvance2">selectFromListText	^'Select an item from the list.' asValue</body><body package="ADvance2">selectSubjectText	^'Select a subject to copy from.' asValue</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>aspects</category><body package="ADvance2">containerList	^containerList</body><body package="ADvance2">initialContents	^(AspectAdaptor subject: self class)		forAspect: #initialContentsDefault</body><body package="ADvance2">initialContentsList	^self class dataSourceTexts asValue</body><body package="ADvance2">packageList	^packageList</body><body package="ADvance2">parcelList	^parcelList</body><body package="ADvance2">subjectName	^subjectName isNil		ifTrue: [subjectName := String new asValue]		ifFalse: [subjectName]</body><body package="ADvance2">subjectTree	^subjectTree</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>private</category><body package="ADvance2">basicFinish	| aSymbol |	aSymbol := self dataSourceType.	aSymbol == #empty ifTrue: [^self finishForEmpty].	aSymbol == #Container ifTrue: [^self finishForContainer].	aSymbol == #Parcel ifTrue: [^self finishForParcel].	aSymbol == #Package ifTrue: [^self finishForPackage].	aSymbol == #ChangeSet ifTrue: [^self finishForChangeSet].	aSymbol == #Subject ifTrue: [^self finishForSubject]</body><body package="ADvance2">createSubject	"Create a subject. Get subject class from the subject name aspect."	| subjectClass |	subjectClass := self adBasics systemEnvironment at: self subjectName value.	^self advance subjectEnvironment makeClass: subjectClass subjectNamed: nil</body><body package="ADvance2">dataSourceType	^self class dataSourceSymbols at: (self class dataSourceTexts indexOf: self initialContents value)</body><body package="ADvance2">finishForChangeSet	"Create a subject and add all classes changed in the current ChangeSet."	self createSubject addClasses: self adBasics systemOrganization changedClasses</body><body package="ADvance2">finishForContainer	"Create a subject and add all classes in the selected container."	self createSubject addClasses: (self adBasics systemOrganization classesInContainer: self containerList selection asSymbol)</body><body package="ADvance2">finishForEmpty	"Create an empty subject."	self createSubject</body><body package="ADvance2">finishForPackage	"Create a subject and add all classes defined in the selected 	Package."	| thePackage |	thePackage := self adBasics systemOrganization packageNamed: self packageList selection.	self createSubject addClasses: thePackage asParcel definedClasses</body><body package="ADvance2">finishForParcel	"Create a subject and add all classes defined in the selected Parcel."	(Parcel parcelNamed: self parcelList selection)		ifNotNil: [:parcel | self createSubject addClasses: parcel definedClasses]</body><body package="ADvance2">finishForSubject	self createSubject addClasses: self subjectTree selection allClasses</body><body package="ADvance2">initializeSubjectTree	"Set the subject tree and expand the root iff no tree is set."	| treeModel |	treeModel := self subjectTree list.	treeModel isEmpty ifFalse: [^self].	self subjectTree list root: self advance subjectEnvironment root displayIt: true.	self subjectTree list expand: 1</body><body package="ADvance2">notifyAboutExistingNamespace	self adDialog message: ('A Namespace &lt;1p&gt; is defined.&lt;n&gt;Please change the subject name.' expandMacrosWith: self subjectName value asString) withCRs</body><body package="ADvance2">notifyAboutExistingSubject	self adDialog message: ('A subject named &lt;1p&gt; is already defined.&lt;n&gt;Change the subject name.' expandMacrosWith: self subjectName value asString) withCRs</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>pages</category><body package="ADvance2">chooseClass	self setPageHolder.	self backNextCancelButtons.	self builder window label: 'Choose Subject class'</body><body package="ADvance2">finish	self setPageHolder.	self backNextCancelButtons.	self builder window label: 'Finish'</body><body package="ADvance2">initialPage	^#selectInitialContents</body><body package="ADvance2">selectContainer	self setPageHolder.	self backNextCancelButtons.	(self builder componentAt: #containerList) widget makeVisible: self containerList selectionIndex.	self builder window label: 'Select Category'</body><body package="ADvance2">selectInitialContents	self setPageHolder.	self nextCancelButtons.	self builder window label: 'Subject Wizard'</body><body package="ADvance2">selectPackage	self setPageHolder.	self backNextCancelButtons.	(self builder componentAt: #packageList) widget makeVisible: self packageList selectionIndex.	self builder window label: 'Select Package'</body><body package="ADvance2">selectParcel	self setPageHolder.	self backNextCancelButtons.	(self builder componentAt: #parcelList) widget makeVisible: self parcelList selectionIndex.	self builder window label: 'Select Parcel'</body><body package="ADvance2">selectSubject	self setPageHolder.	self backNextCancelButtons.	self builder window label: 'Select Subject'</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>utility</category><body package="ADvance2">cleanSubjectName	self subjectName value: (self advance utils cleanStringFor: self subjectName value)</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>actions</category><body package="ADvance2">pickSubjectClass	| aClassOrNil |	(aClassOrNil := self adDialog				pickClass: 'Pick Subject class'				initialSelection: nil				for: self builder window) isNil ifTrue: [^self].	self subjectName value: aClassOrNil fullName</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self initializeSubjectTree</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard</class-id> <category>initialize-release</category><body package="ADvance2">initialize	| systemOrganization |	systemOrganization := self adBasics systemOrganization.	super initialize.	containerList := SelectionInList new list: systemOrganization containerNames.	parcelList := SelectionInList new list: systemOrganization parcelNames.	packageList := SelectionInList new list: systemOrganization packageNames.	subjectTree := SelectionInList new list: TreeModel new</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard class</class-id> <category>resources opaque</category><body package="ADvance2">classOpaqueImage	^self classImage</body><body package="ADvance2">classesOpaqueImage	^self resources opaqueImageFor: self named: #classesImage</body><body package="ADvance2">inOpaqueImage	^self resources opaqueImageFor: self named: #inImage</body><body package="ADvance2">newOpaqueImage	^self resources opaqueImageFor: self named: #newImage</body><body package="ADvance2">openedSubjectOpaqueImage	^self resources opaqueImageFor: self named: #openedSubjectImage</body><body package="ADvance2">outOpaqueImage	^self resources opaqueImageFor: self named: #outImage</body><body package="ADvance2">penOpaqueImage	^self resources opaqueImageFor: self named: #penImage</body><body package="ADvance2">subjectOpaqueImage	^self resources opaqueImageAt: #subject</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard class</class-id> <category>accessing</category><body package="ADvance2">dataSourceSymbols	^#(#empty #Container #Parcel #Package #ChangeSet #Subject)</body><body package="ADvance2">dataSourceTexts	^#(		'Create empty Subject'		'Create from Category'		'Create from Parcel'		'Create from Package'		'Create from Change set' 		'Copy from Subject'		)</body><body package="ADvance2">initialContentsDefault	^InitialContentsDefault</body><body package="ADvance2">initialContentsDefault: aSymbol	InitialContentsDefault := aSymbol</body><body package="ADvance2">resources	^self advance resources</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	InitialContentsDefault := self dataSourceTexts first</body></methods><methods><class-id>ICC.ADvance.AD2Dialog</class-id> <category>utility</category><body package="ADvance2">chooseMultiple: messageString fromList: list values: listValues initialSelection: initialSelection buttons: buttons values: buttonValues lines: maxLines cancel: cancelBlock for: aVisualOrNil	"Behave like choose:fromList:... but allow multiple selection."	| result spec okValue sequence wrappers listW |	wrappers := OrderedCollection new.	result := ValueHolder new.	sequence := MultiSelectionInList new.	sequence list: list.	initialSelection isNil		ifTrue: [list size = 1 ifTrue: [sequence selectionIndexes: (Set with: 1)]]		ifFalse: [sequence selections: initialSelection].	spec := self class interfaceSpecFor: #emptySpec.	okValue := Object new.	self initializeBuilderFor: aVisualOrNil.	builder add: spec window.	builder add: spec component.	self initializeWindowFor: aVisualOrNil.	self setInitialGap.	self addMessage: messageString indented: false.	self addGap: 8.	listW := self				addMultiList: sequence				lines: (maxLines min: list size + 2)				validation: [true].	self addButtonGap.	wrappers add: (self addOK: [sequence selectionIndex ~= 0]).	buttons isEmpty		ifFalse:			[self addGap: 4.			wrappers add: self addDivider.			self addGap: 4.			wrappers add: (self					addLabels: buttons					values: buttonValues					default: okValue					storeInto: result					takeKeyboard: true					equalize: true)].	self addGap: self margin y.	self bottomAlignLowerEdge: listW.	self bottomAlign: wrappers.	self preOpen.	self postBuild.	self openDialog.	^accept value		ifTrue: [sequence selectionIndexes collect: [:index | listValues at: index]]		ifFalse: [cancel value				ifTrue: [cancelBlock value]				ifFalse: [result value]]</body></methods><methods><class-id>ICC.ADvance.AD2Dialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self title: 'ADvance'</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>choice dialogs</category><body package="ADvance2">chooseClassFrom: initialPattern superclassName: superclassName commentForAddedClass: aNewClassComment for: aVisualOrNil 	"^&lt;Class | nil&gt; Request a class name (with pattern support). If the	class does not exist in the system let the user add a new class.	Answer the choice or new class resp. or nil if canceled."	| className global |	className := self chooseClassNameFrom: initialPattern for: aVisualOrNil.	className isNil ifTrue: [^nil].	global := self adBasics systemEnvironment at: className ifAbsent: [nil].	global isNil 		ifTrue: 			[global := self adBasics systemOrganization 						addClassNamed: (self advance utils cleanStringFor: className)						superclass: superclassName						container: nil						for: aVisualOrNil.			(global notNil and: [aNewClassComment notNil])				ifTrue: [global comment: aNewClassComment]].	^global isNil 		ifTrue: [nil]		ifFalse: 			[global isBehavior 				ifTrue: [global]				ifFalse: 					[AD2Dialog 						alert: ('The name &lt;1p&gt; is already used for something different than a class. Choose annother one.' 								expandMacrosWith: className).					nil]]</body><body package="ADvance2">chooseClassFrom: initialPattern superclassName: superclassName for: aVisualOrNil 	"^&lt;Class | nil&gt; Request a class name (with pattern support). If the	class does not exist in the system let the user add a new class.	Answer the choice or new class resp. or nil if canceled."	^self 		chooseClassFrom: initialPattern		superclassName: superclassName		commentForAddedClass: nil		for: aVisualOrNil</body><body package="ADvance2">chooseClassNameFrom: initialPattern for: aVisualOrNil	"^&lt;Symbol | nil&gt; Request a class name (with pattern support).	Answer the choice or nil if canceled."	| pattern matches |	pattern := initialPattern isNil				ifTrue: [self						request: 'Please enter class name.\The class will be added to the subject and \shown in all diagrams.\' withCRs						initialAnswer: ''						onCancel: [^nil]						for: aVisualOrNil]				ifFalse: [initialPattern].	matches := SortedCollection new.	self adBasics systemEnvironment allClassesDo: [:each | ((pattern match: each fullName) or: [pattern match: each name]) 			ifTrue: [matches add: each fullName]].	^matches isEmpty		ifTrue: [pattern asString]		ifFalse: [matches size = 1				ifTrue: [matches first]				ifFalse: [self						choose: 'Select one of the classes.'						fromList: matches						values: matches						lines: 15						cancel: [nil]						for: aVisualOrNil]]</body><body package="ADvance2">chooseColorFor: aVisualOrNil	"^&lt;ColorValue | nil&gt; Open a window and let the user choose a color.	Answer the choice or nil if canceled."	| dialog |	dialog := self chooseColorDialogClass new.	^(dialog openInterface: #windowSpec for: aVisualOrNil)		ifTrue: [dialog colorValue value]		ifFalse: [nil]</body><body package="ADvance2">chooseFontFor: aVisualOrNil	"^&lt;FontDescription | nil&gt; Open a window and let the user choose a font.	Answer the choice or nil if canceled."	| dialog |	dialog := self chooseFontDialogClass new.	^(dialog openInterface: #windowSpec for: aVisualOrNil)		ifTrue: [dialog fontDescription]		ifFalse: [nil]</body><body package="ADvance2">chooseParcelFor: aVisualOrNil	"^&lt;Parcel | nil&gt; Open a window and let the user choose a Parcel.	Answer the choice or nil if canceled."	^self		choose: 'Select a parcel from the list.'		fromList: Parcel parcelNames		values: Parcel parcels		lines: 15		cancel: [nil]		for: aVisualOrNil</body><body package="ADvance2">handleError: anException message: aMessage for: aVisualOrNil	"Notify the user about an error. User may either retry the last operation,	ignore the error or see details."	| symbol |	symbol := (self notifier				 title: 'Error';				 setAlertIcon;				 yourself)				choose: aMessage				labels: #('Retry' 'Ignore' 'Details')				values: #(#retry #ignore #details)				default: #abort				for: aVisualOrNil.	symbol == #retry ifTrue: [^anException restart].	symbol == #ignore ifTrue: [^anException willProceed			ifTrue: [anException proceed]			ifFalse: [self]].	symbol == #details ifTrue: [^anException reject]</body><body package="ADvance2">pickClass: title initialSelection: aClassOrNil for: aVisualOrNil	"^&lt;Class | nil&gt; Open a dialog and let the user choose a class.	Set title as window label and use aClass as initial selection.	Answer the choice or new class resp. or nil if canceled."	| dialog |	dialog := self pickClassDialogClass new				 title: title;				 selection: (aClassOrNil isNil						ifTrue: [nil]						ifFalse: [aClassOrNil fullName]);				 yourself.	^(dialog openInterface: #windowSpec for: aVisualOrNil)		ifTrue: [dialog selectedClass]		ifFalse: [nil]</body><body package="ADvance2">pickClassFor: aVisualOrNil	"^&lt;Class | nil&gt; Open a dialog and let the user choose a class.	Answer the choice or new class resp. or nil if canceled."	^self		pickClass: 'Pick Class'		initialSelection: nil		for: aVisualOrNil</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>find dialogs</category><body package="ADvance2">find: messageString labels: labels values: values onCancel: aBlockOrNil for: aVisualOrNil	"Request a pattern from user. Then let the user pick an element from the subset	of label that matches the pattern. Return the response from the corresponding	item from the values collection or evaluate aBlockOrNil if not nil and canceld."	| pattern matchingLabels matchingValues |	pattern := ''.	[pattern := self				request: messageString				initialAnswer: pattern				onCancel: [^aBlockOrNil isNil						ifTrue: [self]						ifFalse: [aBlockOrNil value]]				for: aVisualOrNil.	matchingLabels := OrderedCollection new.	matchingValues := OrderedCollection new.	labels with: values do: [:eachLabel :eachValue | (pattern match: eachLabel)			ifTrue:				[matchingLabels add: eachLabel.				matchingValues add: eachValue]].	matchingValues isEmpty ifFalse: [^matchingValues size = 1			ifTrue: [matchingValues first]			ifFalse: [self					choose: 'Select the element to find.'					fromList: matchingLabels					values: matchingValues					lines: 15					cancel: aBlockOrNil					for: aVisualOrNil]].	self confirm: 'No matches, try again?' for: aVisualOrNil] whileTrue.	^aBlockOrNil isNil		ifTrue: [self]		ifFalse: [aBlockOrNil value]</body><body package="ADvance2">findClass: messageString in: anEnvironment onCancel: aBlockOrNil for: aVisualOrNil 	"Request a class pattern from user. Then let the user pick an element from the	subset of classes in environment that matches the pattern. Return the response	from the corresponding class or evaluate aBlockOrNil if not nil and canceld."	| classNames classes |	classNames := anEnvironment sortedClassNames.	classes := OrderedCollection new.	classNames copy do: 			[:eachClassName | 			| eachClass |			(eachClass := anEnvironment at: eachClassName ifAbsent: [nil]) notNil "Skip obsolete classes"				ifTrue: [classes add: eachClass]				ifFalse: [classNames remove: eachClassName]].	^self 		find: messageString		labels: classNames		values: classes		onCancel: aBlockOrNil		for: aVisualOrNil</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>implementation classes</category><body package="ADvance2">aboutDialogClass	^AD2AboutDialog</body><body package="ADvance2">chooseColorDialogClass	^AD2ChooseColorDialog</body><body package="ADvance2">chooseFontDialogClass	^AD2ChooseFontDialog</body><body package="ADvance2">newClassDialogClass	^AD2NewClassDialog</body><body package="ADvance2">pickClassDialogClass	^AD2PickClassDialog</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>file name dialogs</category><body package="ADvance2">requestNewFileName: message suggest: suggestion for: aVisualOrNil	"Prompt for a file name. Return an empty string if it fails."	^self		requestFileName: message		default: (self advance utils suggestFilename: suggestion)		version: #new		for: aVisualOrNil</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>notification dialogs</category><body package="ADvance2">unimplementedFor: aVisualOrNil	"Notify the user that an action has not yet been implemented. Continue processing	when the user hits the 'OK' box or types cr."	self notifier		 title: 'Information';		 infoIcon: self opaqueUnderConstructionImage;		choose: 'Sorry, this action has not yet been implemented.'		labels: #('OK')		values: #(nil)		default: nil		for: aVisualOrNil</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>resources</category><body package="ADvance2">opaqueUnderConstructionImage	^self resources opaqueImageFor: self named: #underConstructionImage</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>help extensions</category><body package="ADvance2">arborHelpEnabled	^true</body></methods><methods><class-id>ICC.ADvance.AD2Utils class</class-id> <category>utility</category><body package="ADvance2">suggestFilename: aString	"^&lt;Filename&gt; Answer a filename according to aString appropriate for the current file system."	| defaultClass |	defaultClass := Filename defaultClass.	^defaultClass suggest: (defaultClass filterSeps: (defaultClass mapUglies: aString))</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>utility-fileIn/Out</category><body package="ADvance2">fileOut: selectors for: aClass to: filename	| fileManager |	fileManager := SourceCodeStream write: filename encoding: self fileEncoding.	[fileManager timeStamp.	fileManager fileOutMessages: selectors for: aClass]		valueNowOrOnUnwindDo: [fileManager close]</body><body package="ADvance2">fileOut: classes to: filename wholeClass: wholeClass	| fileManager |	fileManager := SourceCodeStream write: filename encoding: self fileEncoding.	[fileManager timeStamp.	(SystemUtils sortForLoading: classes)		do: [:each | wholeClass				ifTrue: [each fileOutSourceOn: fileManager]				ifFalse: [fileManager fileOutMessages: (self selectorsIn: self adBasics defaultProtocol for: each class)						for: each class]]]		valueNowOrOnUnwindDo: [fileManager close]</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-containers</category><body package="ADvance2">classNamesInContainer: aContainer	"Since in #containerNames I have collected categories from all namespaces,	I have to collect the classes in those categories from all namespaces, too.	Sadly, there is no namespace-independant organization, so all classes have to be checked."	| classNames |	classNames := Set new.	self adBasics systemEnvironment allClassesDo:		[ :eachClass |		((self containerFor: eachClass) == aContainer)			ifTrue: [classNames add: (eachClass isBehavior ifTrue: [eachClass] ifFalse: [eachClass defaultInstance]) fullName]].	^classNames asSortedCollection</body><body package="ADvance2">classesInContainer: aContainer	^(self classNamesInContainer: aContainer)		collect: [:each | self adBasics systemEnvironment at: each]</body><body package="ADvance2">containerFor: aClass	^aClass category</body><body package="ADvance2">containerLabel	^'Category:'</body><body package="ADvance2">containerNames	"Normally, the organization should be Namespace&gt;Category&gt;Class.	Since I don't want to add a Namespace browser pane,	I collect categories from all namespaces."	| containers |	containers := SortedCollection new.	self adBasics systemEnvironment allClassesDo:		[:eachClass |		| container |		(containers includes: (container := self containerFor: eachClass))			ifFalse: [containers add: container]].	^containers asOrderedCollection</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-selectors</category><body package="ADvance2">protocolsFor: aClass	"^&lt;Collection of: Symbol&gt; Answer the aClass' protocols."	^aClass organization categories</body><body package="ADvance2">removeSelector: selector from: aClass	self removeSelectors: (Array with: selector) from: aClass</body><body package="ADvance2">removeSelectors: selectors from: aClass	selectors do: [:each | aClass removeSelector: each].	aClass organization removeEmptyCategories</body><body package="ADvance2">selectorsIn: aProtocol for: aClass	"^&lt;Collection of: Symbol&gt; Answer the selectors in aClass' aProtocol."	^aClass organization listAtCategoryNamed: aProtocol</body><body package="ADvance2">selectorsMatching: aPattern for: aClass	"^&lt;Collection of: Symbol&gt; Answer aClass' selectors that match aPattern."	^aClass class selectors select: [:each | aPattern match: each]</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>private-constants</category><body package="ADvance2">abstractClassCommentStub	^'This is an abstract class.\\This comment is generated by ADvance.' withCRs</body><body package="ADvance2">declarationSelectorFor: declarationType	"Answer the selector used for explicit declaration of declaractionType."	declarationType == #abstract ifTrue: [^#isADAbstract].	declarationType == #persistence ifTrue: [^#isADPersistent]</body><body package="ADvance2">fileEncoding	^#Source</body><body package="ADvance2">stringsTypicallyIndicatingAbstractClasses	^#('ubclasses must implement' 'abstract class' 'abstract superclass' 'abstract subclass' 'abstract parent' 'his class is abstract' 'lasse ist abstrakt' 'abstrakte Klasse' 'abstrakte Oberklasse' 'abstrakte Unterklasse')</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-classes</category><body package="ADvance2">addDeclarationFor: aClass type: declarationType value: aValue	"Add an explicit declaration for declaractionType."	| selector s |	selector := self declarationSelectorFor: declarationType.	declarationType == #abstract ifTrue: [(aClass comment isNil or: [aClass comment isEmpty])			ifTrue: [^aClass comment: self abstractClassCommentStub]].	s := (String new: 200) writeStream.	s nextPutAll: selector asString; cr.	s tab; nextPut: $^.	aValue storeOn: s.	self		compile: s contents		classified: nil		for: aClass class</body><body package="ADvance2">commentFor: aClass	^aClass infoString</body><body package="ADvance2">divineIsAbstract: aClass	"Test aClass' comment for containing strings, typically used in abstract classes,	else test, wether it sends #sublassResponsibility.	We use the selector symbol dynamically to avoid conflicts with tools doing	static analysis."	| selectorSymbol |	selectorSymbol := 'subclassResponsibility' asSymbol.	^(self divineIsAbstractFromComment: aClass)		or: [(aClass whichSelectorsReferTo: selectorSymbol) isEmpty not or: [(aClass class whichSelectorsReferTo: selectorSymbol) isEmpty not]]</body><body package="ADvance2">divineIsAbstractFromComment: aClass 	"Test aClass' comment for containing strings, typically indicating an abstract class.	If an error occurs, answer is 'false'"	| aStream |	Object errorSignal handle:			[:ex | 			Dialog 				warn: 'Exception when reading class info for ' , aClass name 						, '.\Please check source files' withCRs.			^false]		do: 			[aStream := aClass comment readStream.			^self stringsTypicallyIndicatingAbstractClasses contains: 					[:aSearchString | 					aStream reset.					(aStream skipToAll: aSearchString) notNil]]</body><body package="ADvance2">isAbstract: aClass	"Answer wether aClass seems to be abstract or not. Use explicit declarations via class method	#isADAbstract if existing, else divine it from the class comment and other magic tricks."	| selector |	selector := self declarationSelectorFor: #abstract.	(aClass class includesSelector: selector)		ifTrue: [^aClass perform: selector].	^self adBasics systemOrganization divineIsAbstract: aClass</body><body package="ADvance2">isPersistent: aClass	"Answer wether aClass seems to be persistent or not. Use explicit declarations via class method."	| selector |	selector := self declarationSelectorFor: #persistence.	^(aClass class includesSelector: selector)		and: [aClass perform: selector]</body><body package="ADvance2">removeDeclarationFor: aClass type: declarationType	"Remove the receivers explicit declaration for declaractionType."	self removeSelector: (self declarationSelectorFor: declarationType)		from: aClass class</body><body package="ADvance2">setComment: aString for: aClass	aClass infoString: aString</body><body package="ADvance2">superclassChainOf: aClass includes: selector	"^&lt;Boolean&gt; Check and answer whether any of aClass' superclasses	includes the given selector."	^aClass superclass notNil and: [(aClass superclass whichClassIncludesSelector: selector) notNil]</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>adding-removing</category><body package="ADvance2">addClassNamed: classNameOrNil superclass: superclassNameOrNil container: containerNameOrNil for: aVisualOrNil	"^&lt;Class | nil&gt;	Answer the created class, nil if none was created."	| dialog superclassReference signal newClass classReference |	dialog := self adDialog newClassDialogClass new.	dialog className value: classNameOrNil.	dialog superclassName value: superclassNameOrNil.	containerNameOrNil isNil ifFalse: [dialog containerName value: containerNameOrNil].	(dialog openInterface: #windowSpec for: aVisualOrNil)		ifFalse: [^nil].	classReference := dialog className value asQualifiedReference.	superclassReference := dialog superclassName value asQualifiedReference.	(signal := Object errorSignal)		handle:			[:ex |			self adDialog alert: ('Can''t create class &lt;1p&gt;.&lt;n&gt;Check namespace, class and superclass definitions!' expandMacrosWith: classReference asString).			^nil]		do:			[newClass := self						createSubclassOf: superclassReference						named: classReference simpleName						in: (self adBasics systemEnvironment environmentFor: classReference ifAbsent: [signal raise])						instanceVariableNames: ''						container: dialog containerName value.			newClass isNil ifTrue: [signal raise]].	dialog classType value == #abstract ifTrue: [self adBasics systemOrganization			addDeclarationFor: newClass			type: #abstract			value: true].	dialog classPersistence value == #persistent ifTrue: [self adBasics systemOrganization			addDeclarationFor: newClass			type: #persistence			value: true].	^newClass</body><body package="ADvance2">createSubclassOf: superclassReference named: theSubclass in: environment instanceVariableNames: instVarNames category: category	"Create and answer a new class. Log this in Change file."	"ClassVariableNames and PoolDictionaries work different now. They are not needed in this method."	| newClass |	newClass := environment			defineClass: theSubclass asSymbol			superclass: superclassReference			indexedType: #none			private: false			instanceVariableNames: instVarNames			classInstanceVariableNames: ''			imports: ''			category: category.	newClass isNil ifFalse:		[newClass logDefinition].	^newClass</body><body package="ADvance2">createSubclassOf: superclassReference named: theSubclass in: environment instanceVariableNames: instVarNames container: container	"Create and answer a new class. Log changes to source file."	^self		createSubclassOf: superclassReference		named: theSubclass		in: environment		instanceVariableNames: instVarNames		category: container</body><body package="ADvance2">removeClass: aClass	^aClass removeFromSystem</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>compilation</category><body package="ADvance2">compile: methodString classified: protocolOrNil for: aClass	"Compile methodString for aClass. Classify under protocolOrNil if not nil,	otherwise use the ADvance default protocol."	aClass compile: methodString classified: (protocolOrNil isNil			ifTrue: [self adBasics defaultProtocol]			ifFalse: [protocolOrNil])</body><body package="ADvance2">recompile: methodString selector: selector for: aClass	"Recompile the method aSelector with source for aClass."	self		compile: methodString		classified: (aClass whichCategoryIncludesSelector: selector)		for: aClass</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>utility-organization</category><body package="ADvance2">basicMove: aClass to: aContainerName	| newContainer |	aContainerName isEmpty ifTrue: [^self].	newContainer := aContainerName asSymbol.	newContainer == (self containerFor: aClass) ifTrue: [^self].	self classify: aClass name under: newContainer.	ChangeSet current changeClass: aClass</body><body package="ADvance2">classify: className under: containerName	"Don't know yet. If the class has to exist before, maybe ask it for its namespace."	Smalltalk organization classify: className under: containerName</body><body package="ADvance2">moveDialogFor: aClass	| newName |	newName := self adDialog				request: 'Enter new ' , self adBasics systemOrganization containerLabel				initialAnswer: (self containerFor: aClass)				onCancel: ['']				for: nil.	self basicMove: aClass to: newName</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-variables</category><body package="ADvance2">addVariableNamed: variableName to: class implementation: implementation	"Change class definition of class. Add a variable with the given name	and implementation. Then log the modified defintion to Change file."	implementation == #inheritedInstVar ifTrue: [^self validateThat: class inheritsVariableNamed: variableName].	implementation == #inheritedClassInstVar ifTrue: [^self validateThat: class class inheritsVariableNamed: variableName].	implementation == #instVar ifTrue: [class addInstVarName: variableName].	implementation == #classVar ifTrue: [class addClassVarName: variableName].	implementation == #classInstVar ifTrue: [class class addInstVarName: variableName].	class logDefinition</body><body package="ADvance2">removeVariableNamed: variableName from: class implementation: implementation	"Change class definition of my baseClass. Remove a variable with the given name	and implementation. Then log the modified definition to Change file."	(implementation == #instVar and: [class instVarNames includes: variableName])		ifTrue: [class removeInstVarName: variableName].	(implementation == #classVar and: [class classVarNames includes: variableName asSymbol])		ifTrue: [class removeClassVarName: variableName].	(implementation == #classInstVar and: [class class instVarNames includes: variableName])		ifTrue: [class class removeInstVarName: variableName].	class logDefinition</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>private</category><body package="ADvance2">storeRegistry	"^&lt;Store.PundleAccess&gt; 	Answers the registry knowing all of the packages."	| theReference |	^(theReference := 'Store.Registry' asQualifiedReference) isDefined		ifTrue: [theReference value]		ifFalse: [nil]</body><body package="ADvance2">validateThat: aClass inheritsVariableNamed: variableName	"Check whether aClass inherits the instance variable named variableName from its superclass.	If this isn't true, raise an appropriate exception."	| names |	names := OrderedCollection new.	aClass accumulateInstVarNames: names.	names := names asSet - aClass instVarNames.	(names includes: variableName)		ifFalse: [Kernel.ClassBuilder buildFailureSignal raiseErrorString: 'Variable naming conflict with inherited variable']</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-change set</category><body package="ADvance2">changedClasses	"^&lt;Set of: Class&gt; 	Answers the set of changed classes. If a metaclass has changed, its 	class is taken."	^ChangeSet current changedClasses		collect: [:eachClass | eachClass instanceBehavior]</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-categories</category><body package="ADvance2">classesInCategory: aCategory	"^&lt;OrderedCollection of: Class&gt;	Answers all the classes in the category but not the metaclasses."	^(self classesInContainer: aCategory)		select: [:each | each isBehavior]</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-parcels</category><body package="ADvance2">classNamesInPackage: aPackageName 	"^&lt;Array of: String&gt; 	Answers the names of the classes defined or extended in the 	package."	| thePackage |	^(thePackage := self packageNamed: aPackageName) notNil		ifTrue: [(thePackage allClasses collect: [:eachClassDescr | eachClassDescr instanceBehavior fullName]) asSet asSortedCollection]		ifFalse: [^#()]</body><body package="ADvance2">classNamesInParcel: aParcelName 	"^&lt;Array of: String&gt; 	Answers the names of the classes defined or extended in the 	parcel."	| theParcel |	^(theParcel := Parcel parcelNamed: aParcelName) notNil		ifTrue: [(((theParcel definedClasses copy) addAll: theParcel extendedClasses; yourself) 				collect: [:eachClass | eachClass instanceBehavior fullName]) asSet asSortedCollection]		ifFalse: [^#()]</body><body package="ADvance2">packageNamed: aPackageName	"^&lt;nil | PackageModel&gt;"	| thePackage |	^(thePackage := Store.Registry packageNamed: aPackageName) notNil		ifTrue: [thePackage]		ifFalse: [Store.Registry nullPackage]</body><body package="ADvance2">packageNames	"^&lt;SortedCollection of: String&gt; 	Answers all of the packages defined in the Image."	"self default packageNames."	| theRegistry |	^(theRegistry := self storeRegistry) notNil 		ifTrue: 			[((theRegistry allPackages collect: [:eachPack | eachPack name]) 				asSortedCollection)				add: theRegistry nullPackageName;				yourself]		ifFalse: [SortedCollection new]</body><body package="ADvance2">packageNamesFor: aClass	| thePackageNames |	self storeRegistry isNil ifTrue: [^#()].	^(thePackageNames := (self storeRegistry packagesContaining: aClass) collect: [:eachPackage | eachPackage name]) isEmpty		ifTrue: [Array with: self storeRegistry nullPackageName]		ifFalse: [thePackageNames]</body><body package="ADvance2">parcelNames	"^&lt;SortedCollection of: String&gt; 	Answers the names of all parcels loaded in the image."	"self default parcelNames."	^Parcel parcelNames asSortedCollection</body><body package="ADvance2">parcelNamesFor: aClass 	| theParcelSet |	(theParcelSet := Parcel parcelsForClass: aClass) isEmpty		ifTrue: [^Array with: '***Unparceled***'].	^(theParcelSet collect: [:eachParcel | eachParcel name]) 		asSortedCollection</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>filtering</category><body package="ADvance2">unfilteredClassInstVarsFor: aClass filter: filter	"^&lt;OrderedCollection of: String&gt;	Answers the names of not filtered class instance variables."	filter isFilteringClassInstVars		ifTrue: [^OrderedCollection new].	^aClass class instVarNames reject: [:eachName |		filter getFilteredClassInstVars contains: [:eachPattern | eachPattern match: eachName]]</body><body package="ADvance2">unfilteredClassMethodsFor: aClass filter: filter	| metaclass classVarAccessMethods protocolPatterns methodPatterns aCollection |	aCollection := OrderedCollection new: 20.	metaclass := aClass class.	classVarAccessMethods := filter classVarAccessMethodsFor: aClass.	protocolPatterns := filter isFilteringPrivateMethods				ifTrue: [filter getFilteredClassProtocols copyWith: 'private*']				ifFalse: [filter getFilteredClassProtocols].	methodPatterns := filter getFilteredClassMethods.	metaclass organization categories do: [:cat | (protocolPatterns contains: [:pattern | pattern match: cat])			ifFalse: [(metaclass organization listAtCategoryNamed: cat)					do: [:mthd | (((methodPatterns contains: [:pattern | pattern match: mthd])							or: [classVarAccessMethods includes: mthd])							or: [filter isFilteringOverriddenMethods and: [self adBasics systemOrganization superclassChainOf: metaclass includes: mthd]])							ifFalse: [aCollection add: mthd]]]].	^aCollection</body><body package="ADvance2">unfilteredInstMethodsFor: aClass filter: filter	| aCollection instVarAccessMethods protocolPatterns methodPatterns |	aCollection := OrderedCollection new: 20.	instVarAccessMethods := filter instVarAccessMethodsFor: aClass.	protocolPatterns := filter isFilteringPrivateMethods				ifTrue: [filter getFilteredInstProtocols copyWith: 'private*']				ifFalse: [filter getFilteredInstProtocols].	methodPatterns := filter getFilteredInstMethods.	aClass organization categories do: [:cat | (protocolPatterns contains: [:pattern | pattern match: cat])			ifFalse: [(aClass organization listAtCategoryNamed: cat)					do: [:mthd | (((methodPatterns contains: [:pattern | pattern match: mthd])							or: [instVarAccessMethods includes: mthd])							or: [filter isFilteringOverriddenMethods and: [self adBasics systemOrganization superclassChainOf: aClass includes: mthd]])							ifFalse: [aCollection add: mthd]]]].	^aCollection</body><body package="ADvance2">unfilteredInstVarsFor: aClass filter: filter	"^&lt;OrderedCollection of: String&gt;	Answers the names of not filtered class instance variables."	filter isFilteringInstVars		ifTrue: [^OrderedCollection new].	^aClass instVarNames reject: [:eachName |		filter getFilteredInstVars contains: [:eachPattern | eachPattern match: eachName]]</body><body package="ADvance2">unfilteredSharedVarsFor: aClass filter: filter	"^&lt;OrderedCollection of: String&gt;	Answers the names of not filtered class instance variables."	filter isFilteringSharedVars		ifTrue: [^OrderedCollection new].	^aClass classVarNames reject: [:eachName |		filter getFilteredSharedVars contains: [:eachPattern | eachPattern match: eachName]]</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization</class-id> <category>accessing-SDI</category><body package="ADvance2">getClassBrowser	^Refactory.Browser.RefactoringBrowser</body><body package="ADvance2">getHierarchyBrowser	^Refactory.Browser.RefactoringBrowser</body><body package="ADvance2">spawnBrowserOn: aClass	| env |	env := Refactory.Browser.BrowserEnvironment new forClasses: (Array with: aClass).	self getClassBrowser openOnEnvironment: env</body><body package="ADvance2">spawnHierarchyBrowserOn: aClass	self getHierarchyBrowser newOnClass: aClass</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization class</class-id> <category>class initialization</category><body package="ADvance2">defaultClass	^self</body><body package="ADvance2">initialize	"self initialize"	self initializeDefault</body><body package="ADvance2">obsolete	"This class is being removed from the system. Reset the class variables."	self uninitialize.	super obsolete</body><body package="ADvance2">uninitialize	Default := nil</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization class</class-id> <category>fileIn/Out</category><body package="ADvance2">prerequisitesForLoading	"List those classes that must be filed, BOSSed or load into the system	before I can be loaded."	^super prerequisitesForLoading add: AD2Utils; yourself</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization class</class-id> <category>private initialization</category><body package="ADvance2">initializeDefault	Default := self defaultClass new</body></methods><methods><class-id>ICC.ADvance.AD2SystemOrganization class</class-id> <category>accessing</category><body package="ADvance2">default	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	Default isNil ifTrue: [self initializeDefault].	^Default</body></methods><methods><class-id>ICC.ADvance.ICCServiceScriptInformation</class-id> <category>accessing</category><body package="ADvance2">addServiceScriptInfo: anICCServiceScriptInformation	"I add a new service aService to the services I have to call to get my own work done"	self calledServices add: anICCServiceScriptInformation</body><body package="ADvance2">calledServices	"^&lt;OrderedCollection of: AD2Service&gt; I return the services I need to call to	finish my own work"	calledServices isNil ifTrue: [calledServices := OrderedCollection new].	^calledServices</body><body package="ADvance2">service	"^&lt;AD2Service&gt; I return the owner of the service"	^serviceHolder</body><body package="ADvance2">service: aService	"I set the owner of the service aService"	serviceHolder := aService</body><body package="ADvance2">serviceDescription	"^&lt;String&gt; I return a description of me"	^self service commentWithTypeHeader: false	"IccSysOrg current		remark: self service selector		ofClass: self service classOrMeta name		classFlag: self service classOrMeta isMeta"</body><body package="ADvance2">serviceHeader	"^&lt;String&gt; I return the primary header of me"	^'Script for: ' , self serviceName</body><body package="ADvance2">serviceName	"^&lt;String&gt; I return the name of the service"	^self service classAndFullSelector</body></methods><methods><class-id>ICC.ADvance.ICCServiceScriptInformation</class-id> <category>result</category><body package="ADvance2">createHTMLItems	"^&lt;Collection of: IccHTMLItem&gt; I create a HTML description of myself"	| unOrderedHTMLList description |	unOrderedHTMLList := IccHTMLUnOrderedList new.	unOrderedHTMLList		 add: (IccHTMLString newString: self serviceName);		 add: IccHTMLLineBreak new.	(description := self serviceDescription) isEmpty ifFalse: [unOrderedHTMLList add: (IccHTMLUnOrderedList new add: (IccHTMLString newString: description) italic; yourself)].	self calledServices isEmpty ifFalse: [unOrderedHTMLList add: (IccHTMLString newString: 'calls') bold italic].	self calledServices do: [:eachService | unOrderedHTMLList add: eachService createHTMLItems].	^unOrderedHTMLList</body><body package="ADvance2">createHTMLItemsOnIndex: aString	"^&lt;Collection of: IccHTMLItem&gt; I create a HTML description of myself"	| unOrderedHTMLList indexString index description |	unOrderedHTMLList := IccHTMLUnOrderedList new.	indexString := aString copy.	indexString isEmpty ifTrue: [unOrderedHTMLList add: IccHTMLLineBreak new].	unOrderedHTMLList add: (IccHTMLString newString: self serviceName); add: IccHTMLLineBreak new.	indexString isEmpty ifTrue: [indexString := '1'].	(description := self serviceDescription) isEmpty ifFalse: [unOrderedHTMLList add: (IccHTMLUnOrderedList new add: (IccHTMLString newString: description) italic; yourself)].	self calledServices isEmpty ifFalse: [unOrderedHTMLList add: (IccHTMLString newString: 'calls') bold italic].	index := 0.	self calledServices		do:			[:eachService |			index := index + 1.			unOrderedHTMLList add: (eachService createHTMLItemsOnIndex: indexString , '.' , index printString)].	^unOrderedHTMLList</body></methods><methods><class-id>ICC.ADvance.AD2Environment</class-id> <category>class names</category><body package="ADvance2">classNames	^self subclassResponsibility</body><body package="ADvance2">sortedClassNames	^self classNames asSortedCollection</body></methods><methods><class-id>ICC.ADvance.AD2Environment</class-id> <category>initialize-release</category><body package="ADvance2">initialize</body></methods><methods><class-id>ICC.ADvance.AD2Environment</class-id> <category>accessing</category><body package="ADvance2">at: aSymbol	^self at: aSymbol ifAbsent: [Root keyNotFoundError: aSymbol]</body><body package="ADvance2">at: aSymbol ifAbsent: aBlock	^self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.AD2Environment</class-id> <category>testing</category><body package="ADvance2">includes: aClass	"Answer whether aClass is one of the receiver's elements."	self allClassesDo: [:each | aClass == each ifTrue: [^true]].	^false</body><body package="ADvance2">includesKey: className	"Answer whether a class named className is one of the receiver's elements."	^self subclassResponsibility</body><body package="ADvance2">isSystem	^self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.AD2Environment</class-id> <category>enumerating</category><body package="ADvance2">allClassesDo: aBlock	self subclassResponsibility</body></methods><methods><class-id>ICC.ADvance.AD2Environment class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2SystemEnvironment</class-id> <category>accessing</category><body package="ADvance2">at: aName ifAbsent: aBlock 	"If aName cannot be converted to a qualified reference, the key is handled as no existent."	| reference |	Object errorSignal handle: [:ex | ^aBlock value]		do: [reference := aName asQualifiedReference].	^reference isAbsolute		ifTrue: [(self environmentFor: reference ifAbsent: [^aBlock value])				iccAt: reference simpleName ifAbsent: [^aBlock value]]		ifFalse: [reference valueOrDo: [aBlock value]]</body><body package="ADvance2">environmentFor: aBindingReference ifAbsent: aBlock	"Don't use the search mechanism invoked in BindingReference&gt;&gt;environment.	I want the environment the path points to and nothing else."	| currentScope path |	currentScope := Smalltalk.	(path := aBindingReference path copy asOrderedCollection) removeLast.	path do:		[:symbol |		currentScope := currentScope iccAt: symbol ifAbsent: [^aBlock value]].	^currentScope</body></methods><methods><class-id>ICC.ADvance.AD2SystemEnvironment</class-id> <category>class names</category><body package="ADvance2">classNames	"Answer a collection of all class names."	| names |	names := SortedCollection new.	self allClassesDo: [:eachClass | names add: eachClass fullName ].	^names</body><body package="ADvance2">sortedClassNames	"The class names in the system environment are already sorted."	^self classNames</body></methods><methods><class-id>ICC.ADvance.AD2SystemEnvironment</class-id> <category>testing</category><body package="ADvance2">includesKey: className	self at: className ifAbsent: [^false].	^true</body><body package="ADvance2">isSystem	^true</body></methods><methods><class-id>ICC.ADvance.AD2SystemEnvironment</class-id> <category>enumerating</category><body package="ADvance2">allBehaviorsDo: aBlock 	"SystemUtils&gt;&gt;allBehaviorsDo: skips nil subclasses (when at least one time edited), 	so ADvance uses its own implementation."	"Kernel.SystemUtils allBehaviorsDo: aBlock"	(Metaclass allInstances collect: [:each | each instanceBehavior]) 		do: aBlock</body><body package="ADvance2">allClassesDo: aBlock 	"SystemUtils&gt;&gt;allClassesDo: skips nil subclasses when at least one time edited, 	so ADvance uses its own implementation."	"Kernel.SystemUtils allClassesDo: aBlock"	self allBehaviorsDo: 			[:eachBehavior | 			eachBehavior isMeta 				ifTrue: [nil] 				ifFalse: [aBlock value: eachBehavior]]</body></methods><methods><class-id>ICC.ADvance.AD2SystemEnvironment class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	self initializeDefault</body><body package="ADvance2">obsolete	"This class is being removed from the system. Reset the class variables."	self uninitialize.	super obsolete</body><body package="ADvance2">uninitialize	Default := nil</body></methods><methods><class-id>ICC.ADvance.AD2SystemEnvironment class</class-id> <category>private initialization</category><body package="ADvance2">initializeDefault	Default := self new</body></methods><methods><class-id>ICC.ADvance.AD2SystemEnvironment class</class-id> <category>accessing</category><body package="ADvance2">default	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	Default isNil ifTrue: [self initializeDefault].	^Default</body></methods><methods><class-id>ICC.ADvance.AD2StoredFilter</class-id> <category>encode-decode</category><body package="ADvance2">diagramLiteralArrayEncoding	^(self advance filterReferenceClass on: self) literalArrayEncoding</body><body package="ADvance2">encoderAttributes	^#('id' 'name') , self class superclass instVarNames</body></methods><methods><class-id>ICC.ADvance.AD2StoredFilter</class-id> <category>private</category><body package="ADvance2">filterSpecSelector	^(self advance filterEnvironment selectorPrefix , self id printString) asSymbol</body><body package="ADvance2">filterTestSelector	^self advance filterEnvironment filterTestSelector</body><body package="ADvance2">setNewId	"Set an id from the seconds from the current Timestamp."	self id: Timestamp now asSeconds</body></methods><methods><class-id>ICC.ADvance.AD2StoredFilter</class-id> <category>management</category><body package="ADvance2">fileOutTo: filename	| fileManager |	fileManager := SourceCodeStream write: filename encoding: #Source.	[fileManager timeStamp.	fileManager fileOutMessages: (Array with: self filterSpecSelector with: self filterTestSelector)		for: self baseClass class]		valueNowOrOnUnwindDo: [fileManager close]</body><body package="ADvance2">markBaseClassAsFilterClass	"If required generate a method on my baseClass that marks it as a filter bearer."	| environment |	environment := self advance filterEnvironment.	(environment isFilterClass: self baseClass)		ifTrue: [^self].	self adBasics systemOrganization		compile: environment filterTestSelector asString		classified: nil		for: self baseClass class</body><body package="ADvance2">remove	self advance filterEnvironment remove: self</body><body package="ADvance2">removeIn: aFilterEnvironment	self adBasics systemOrganization removeSelector: self filterSpecSelector from: self baseClass class</body><body package="ADvance2">save	self advance filterEnvironment save: self</body><body package="ADvance2">saveIn: aFilterEnvironment	"Generate a method on my baseClass that answers a literal encoding of myself."	| s |	s := (String new: 1024) writeStream.	s		 nextPutAll: self filterSpecSelector;		 crtab;		 nextPut: $^.	UISpecification		prettyPrintSpecArray: self literalArrayEncoding		on: s		tabLevel: 1.	self adBasics systemOrganization		compile: s contents		classified: nil		for: self baseClass class.	self markBaseClassAsFilterClass</body></methods><methods><class-id>ICC.ADvance.AD2StoredFilter</class-id> <category>comparing</category><body package="ADvance2">&lt;= aFilter	^self name &lt;= aFilter name</body><body package="ADvance2">hash	^super hash + baseClass hash + id hash + name hash</body></methods><methods><class-id>ICC.ADvance.AD2StoredFilter</class-id> <category>accessing</category><body package="ADvance2">baseClass	^baseClass</body><body package="ADvance2">baseClass: aClass	baseClass := aClass</body><body package="ADvance2">id	^id</body><body package="ADvance2">id: anInteger	id := anInteger</body><body package="ADvance2">key	^self baseClass -&gt; self id</body><body package="ADvance2">name	^name</body><body package="ADvance2">name: aString	name := aString</body></methods><methods><class-id>ICC.ADvance.AD2StoredFilter</class-id> <category>accessing-tree</category><body package="ADvance2">children	^#()</body><body package="ADvance2">childrenImage	^self resources opaqueImageAt: #diagramFilter</body></methods><methods><class-id>ICC.ADvance.ICCPNGStream</class-id> <category>private</category><body package="ADvance2">chunk	"Private - Get the open chunk (or 'nil' if there is none)."	^chunk</body><body package="ADvance2">chunk: aWriteStream	"Private - Set the open chunk."	chunk := aWriteStream</body><body package="ADvance2">closeChunk	"Private - write the open chunk: Write	1. The length of the chunk data,	2. The chunk data,	3. The CRC"	| data |	data := self chunk contents.	(self externalStream)		nextPutAll: (self convertTo4Bytes: self chunk size - 4);	"'- 4' because the chunk starts with its name which is not counted."		nextPutAll: data;		nextPutAll: (self convertTo4Bytes: (self crcFor: data))</body><body package="ADvance2">convertTo4Bytes: aNumber	"Private - prepare a Number for storage as big-endian unsigned four byte value."	^((UninterpretedBytes new: 4)		unsignedLongAt: 1		put: aNumber		bigEndian: true; yourself) asByteArray</body><body package="ADvance2">crcFor: aByteArray	"Private - Calculate the CRC for 'aByteArray'.	Chunk CRCs are calculated using standard CRC methods with pre and post conditioning, as defined	by ISO 3309 [ISO-3309] or ITU-T V.42 [ITU-V42]. The CRC polynomial employed is	x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1"	| crc |	crc := 4294967295.	aByteArray do:		[:byte |		crc := (CRCTable					at: ((crc bitXor: byte)	bitAnd: 255)	+ 1)						bitXor: (crc bitShift: -8)].	^crc bitXor: 4294967295</body><body package="ADvance2">externalStream	"Private - Get the external stream."	^externalStream</body><body package="ADvance2">externalStream: anExternalStream	"Private - Set the external stream."	externalStream := anExternalStream</body><body package="ADvance2">on: aFilename	"Initialize the receiver on anIOConnection from 'aFilename' and write the PNG signature."	self externalStream: aFilename writeStream.	self chunk: nil.	self externalStream binary; nextPutAll: #(137 80 78 71 13 10 26 10).	^self</body></methods><methods><class-id>ICC.ADvance.ICCPNGStream</class-id> <category>accessing</category><body package="ADvance2">close	"Close the stream: Write the last chunk and close the external stream."	self chunk notNil ifTrue: [self closeChunk].	externalStream close</body><body package="ADvance2">nextChunk: chunkName	"Open a new chunk. If there had been an open chunk already, it is closed (i.e. written) first."	self chunk notNil ifTrue: [self closeChunk].	self chunk: (WriteStream on: (ByteArray new: 8)).	self chunk nextPutAll: chunkName asByteArray.	^self</body><body package="ADvance2">nextPutAll: aCollection	"Write 'aCollection' to the active chunk (if there is one)."	self chunk notNil ifTrue: [self chunk nextPutAll: aCollection].	^self</body><body package="ADvance2">nextPutU1: aByte	"Write 'aByte' to the active chunk (if there is one)."	self chunk notNil ifTrue: [self chunk nextPut: aByte].	^self</body><body package="ADvance2">nextPutU4: aNumber	"Write 'aNumber' to the active chunk (if there is one)."	self chunk notNil ifTrue: [self chunk nextPutAll: (self convertTo4Bytes: aNumber)].	^self</body></methods><methods><class-id>ICC.ADvance.ICCPNGStream class</class-id> <category>instance creation</category><body package="ADvance2">new	"Provide an error notification that Streams are not created	using this message."	self error: 'Streams are created with on: and with:'</body><body package="ADvance2">on: aFilename	"Answer a new instance of the receiver that streams over a file named 'aFilename'."	^self basicNew on: aFilename</body></methods><methods><class-id>ICC.ADvance.ICCPNGStream class</class-id> <category>class initialization</category><body package="ADvance2">initialize	self initializeCRCTable</body><body package="ADvance2">initializeCRCTable	| c |	CRCTable := Array new: 256.	0 to: 255		do:			[:n |			c := n.			0 to: 7 do: [:k | (c bitAnd: 1)					== 0					ifTrue: [c := c bitShift: -1]					ifFalse: [c := 3988292384 bitXor: (c bitShift: -1)]].			CRCTable at: n + 1 put: c]</body></methods><methods><class-id>ICC.ADvance.NVEditorView</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	components := OrderedCollection new.	useBuffering := false</body><body package="ADvance2">newGraphicsDevice: aGraphicsDevice	"Any information that the receiver caches that is platform dependent	is questionable. Font widths is invalid; rescale texts."	"self model flushCaches.	self components do: [:each | each newGraphicsDevice: aGraphicsDevice].	super newGraphicsDevice: aGraphicsDevice"</body><body package="ADvance2">release	"Close the pixmap if necessary and release my components. The rest is done by my superclass."	pixmap notNil		ifTrue:			[pixmap close.			pixmap := nil].	components notNil		ifTrue:			[components do: [:each | each release].			components := nil].	super release</body></methods><methods><class-id>ICC.ADvance.NVEditorView</class-id> <category>accessing</category><body package="ADvance2">components	^components</body><body package="ADvance2">useBuffering	^useBuffering</body><body package="ADvance2">useBuffering: aBoolean	useBuffering := aBoolean</body></methods><methods><class-id>ICC.ADvance.NVEditorView</class-id> <category>display box accessing</category><body package="ADvance2">checkPreferredBoundsWith: clippingBounds	"Check whether the damage lies outside, lies partly outside or touches the preferredBounds."	(self preferredBounds contains: (clippingBounds expandedBy: 1))		ifFalse: [self flushPreferredBounds]</body><body package="ADvance2">flushPreferredBounds	"invalidateBounds and update the scroll bars"	model translation: model translation</body><body package="ADvance2">preferredBounds	"the model's usedArea can have a negative origin, which is why the super-implementation is incorrect, when it always returns 0@0 as origin.	with negative origins the ScrollWrapper knows that there's more content on the left or top of the origin"	^self model usedArea ifNil: [Rectangle zero]</body></methods><methods><class-id>ICC.ADvance.NVEditorView</class-id> <category>controller accessing</category><body package="ADvance2">defaultControllerClass	"There is no default controller; model and controller are always the same."	^NoController</body></methods><methods><class-id>ICC.ADvance.NVEditorView</class-id> <category>private</category><body package="ADvance2">newPixmapWithExtent: aPoint	^Pixmap		extent: aPoint		on: Screen default		initialize: false</body><body package="ADvance2">retainedMediumForBuffering	"Answer a retained medium (a Pixmap) to buffer my display actions."	| myExtent |	myExtent := self bounds extent.	(pixmap isNil or: [pixmap isOpen not])		ifTrue: [^self newPixmapWithExtent: myExtent].	pixmap extent = myExtent		ifFalse:			[pixmap close.			^self newPixmapWithExtent: myExtent].	^pixmap</body></methods><methods><class-id>ICC.ADvance.NVEditorView</class-id> <category>displaying</category><body package="ADvance2">basicDisplayOn: aGraphicsContext	"First clear the background (with optional grid) using the background paint. Then display the layers."	self model transformation		displayBackgroundOn: aGraphicsContext		backgroundPaint: "self backgroundColor" ColorValue white.	self components do: [:each | each displayOn: aGraphicsContext]</body><body package="ADvance2">displayOn: aGraphicsContext	| clippingBounds |	clippingBounds := aGraphicsContext clippingBounds.	"self checkPreferredBoundsWith: clippingBounds."	self useBuffering		ifTrue:			[| gc offset |			pixmap := self retainedMediumForBuffering.			offset := clippingBounds origin.			gc := pixmap graphicsContext						 translateBy: offset negated;						 clippingRectangle: clippingBounds;						 yourself.			self basicDisplayOn: gc.			pixmap displayOn: aGraphicsContext at: offset]		ifFalse: [self basicDisplayOn: aGraphicsContext]</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	"Display all visible draw objects of all layers on the printer's aGraphicsContext."	self components do: [:each | each displayOnPrinter: aGraphicsContext]</body></methods><methods><class-id>ICC.ADvance.NVEditorView</class-id> <category>bounds accessing</category><body package="ADvance2">preferredExtent	^self preferredBounds extent</body></methods><methods><class-id>ICC.ADvance.NVEditorView class</class-id> <category>instance creation</category><body package="ADvance2">forEditor: anODEditor	| view |	view := self model: anODEditor.	view controller: anODEditor.	^view</body></methods><methods><class-id>ICC.ADvance.IccHTMLUnOrderedList</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/UL&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;UL&gt;'</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPropertiesDialog</class-id> <category>aspects</category><body package="ADvance2">author	^(AspectAdaptor subject: self model author)		forAspect: #name</body><body package="ADvance2">creationDate	^(AspectAdaptor subject: self model)		forAspect: #creationDateStringLong</body><body package="ADvance2">description	^BufferedValueHolder subject: ((AspectAdaptor subject: self model)			forAspect: #description)		triggerChannel: self accept</body><body package="ADvance2">modificationDate	^(AspectAdaptor subject: self model)		forAspect: #modificationDateStringLong</body><body package="ADvance2">name	^(AspectAdaptor subject: self model)		forAspect: #name</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPropertiesDialog</class-id> <category>private</category><body package="ADvance2">image	^self model childrenImage</body><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^Array with: 'General' with: (self resources opaqueImageAt: #editText)			-&gt; 'Description'</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#generalSpec #descriptionSpec)</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPropertiesDialog</class-id> <category>accessing</category><body package="ADvance2">model	^model</body><body package="ADvance2">model: aDiagram	model := aDiagram</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPropertiesDialog</class-id> <category>interface opening</category><body package="ADvance2">preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder visualAt: #image put: self model childrenImage</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>changing</category><body package="ADvance2">changedClassSelection	self selection: self containerClasses selection.	self enableOkButton</body><body package="ADvance2">changedContainerSelection	"Sets the class name list according to the container."	self containerClasses list: (self classNamesInContainerName: self containers selection type: self viewType value)</body><body package="ADvance2">changedListSelection	self selection: self sortedClasses selection.	self enableOkButton</body><body package="ADvance2">changedTreeSelection	| aClass |	aClass := self classTree selection.	self selection: (aClass isNil			ifTrue: [nil]			ifFalse: [aClass fullName]).	self enableOkButton</body><body package="ADvance2">changedViewType	self setSubcanvas.	self setLists</body><body package="ADvance2">classNamesInContainerName: aContainerName type: aContainerType 	aContainerName isNil ifTrue: [^#()].	aContainerType == #category 		ifTrue: [^self adBasics systemOrganization classNamesInContainer: aContainerName].	aContainerType == #package		ifTrue: [^self adBasics systemOrganization classNamesInPackage: aContainerName].	aContainerType == #parcel		ifTrue: [^self adBasics systemOrganization classNamesInParcel: aContainerName].	^#()</body><body package="ADvance2">enableOkButton	self iccEnable: self selection notNil group: #(#okButton)</body><body package="ADvance2">setContainerSelection: aClassName 	| selectionContainer theContainers |	selectionContainer := aClassName isNil				ifTrue: [self containers selection]				ifFalse: [(theContainers := self containersForClass: (self adBasics systemEnvironment at: aClassName) type: self viewType value) isEmpty not						ifTrue: [theContainers first]						ifFalse: [nil]].	self containerClasses selectionIndexHolder retractInterestsFor: self.	self containers selection: selectionContainer.	self containerClasses selection: aClassName.	self containerClasses selectionIndexHolder onChangeSend: #changedClassSelection to: self.	self enableOkButton.</body><body package="ADvance2">setHierarchyView	"| aClassName |	aClassName := self selection."	self updateHierarchyView.	"self classTree selection: (ADvance systemEnvironment at: aClassName ifAbsent: [nil])"	self classTree list expandFully: 1</body><body package="ADvance2">setListView	self sortedClasses selection: self selection.	(self builder componentAt: #sortedClasses) widget makeVisible: self sortedClasses selectionIndex</body><body package="ADvance2">setLists	| newViewType |	newViewType := self viewType value.	(#(#parcel #package #category) includes: newViewType) ifTrue: [^self setOrganizationView].	newViewType == #hierarchy ifTrue: [^self setHierarchyView].	newViewType == #list ifTrue: [^self setListView]</body><body package="ADvance2">setOrganizationView	self update.	self setContainerSelection: self selection.	(self builder componentAt: #containers) widget makeVisible: self containers selectionIndex.	(self builder componentAt: #containerClasses) widget makeVisible: self containerClasses selectionIndex</body><body package="ADvance2">setSubcanvas	| newViewType spec |	newViewType := self viewType value.	(#(#category #parcel #package) includes: newViewType) ifTrue: [spec := #organizationSpec].	newViewType == #hierarchy ifTrue: [spec := #hierarchySpec].	newViewType == #list ifTrue: [spec := #listSpec].	(self builder componentAt: #classView) widget			client: self			spec: spec			builder: self builder.</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>aspects</category><body package="ADvance2">classTree	^classTree</body><body package="ADvance2">containerClasses	^containerClasses</body><body package="ADvance2">containers	^containers</body><body package="ADvance2">containersForClass: aClass type: aContainerType 	aContainerType == #category 		ifTrue: [^Array with: (self adBasics systemOrganization containerFor: aClass)].	aContainerType == #package 		ifTrue: [^(self adBasics systemOrganization packageNamesFor: aClass) asSortedCollection].	aContainerType == #parcel 		ifTrue: [^(self adBasics systemOrganization parcelNamesFor: aClass) asSortedCollection].	^#()</body><body package="ADvance2">sortedClasses	^sortedClasses</body><body package="ADvance2">viewType	^viewType</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>accessing</category><body package="ADvance2">selectedClass	"@Pre: A class is selected."	^self adBasics systemEnvironment at: self selection</body><body package="ADvance2">selection	"^&lt;nil | Symbol&gt; Answer the current class selection, nil if none."	^selection</body><body package="ADvance2">selection: aSymbol 	selection := aSymbol</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>private</category><body package="ADvance2">getClassNames	^self adBasics systemEnvironment classNames</body><body package="ADvance2">getContainerNames	self viewType value == #category 		ifTrue: [^self adBasics systemOrganization containerNames].	self viewType value == #package 		ifTrue: [^self adBasics systemOrganization packageNames].	self viewType value == #parcel 		ifTrue: [^self adBasics systemOrganization parcelNames].	^#()</body><body package="ADvance2">makeVisible: aClass	self selection: aClass fullName.	self changedViewType</body><body package="ADvance2">registerListInterests	"Register interests in my lists."	self containers selectionIndexHolder onChangeSend: #changedContainerSelection to: self.	self containerClasses selectionIndexHolder onChangeSend: #changedClassSelection to: self.	self sortedClasses selectionIndexHolder onChangeSend: #changedListSelection to: self.	self classTree selectionIndexHolder onChangeSend: #changedTreeSelection to: self</body><body package="ADvance2">retractListInterests	"Turn off all notifications, otherwise the deluge of updates we get when updating	the list is positively ineffable."	self containers selectionIndexHolder retractInterestsFor: self.	self containerClasses selectionIndexHolder retractInterestsFor: self.	self sortedClasses selectionIndexHolder retractInterestsFor: self.	self classTree selectionIndexHolder retractInterestsFor: self</body><body package="ADvance2">withoutListInterests: aBlock	"Execute the block given without dependencies, to prevent unwanted updates."	self retractListInterests.	aBlock valueNowOrOnUnwindDo: [self registerListInterests]</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>updating</category><body package="ADvance2">update	| containerSelection |	(self containers list = self getContainerNames)		ifTrue: [^self].	containerSelection := self containers selection.	self		withoutListInterests:			[self containers list: self getContainerNames.			self sortedClasses list: self getClassNames].	self selection isNil ifTrue: [self containers selection: containerSelection].	self setLists</body><body package="ADvance2">updateHierarchyView	self classTree list		root: Core.Object		displayIt: true		childrenBlock: [:eachClass | (eachClass subclasses reject: [:each | each isMeta])				asSortedCollection: [:a :b | a fullName &lt;= b fullName]]</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	aBuilder window label: self title</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self changedViewType</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self title: 'Pick Class'.	self initializeLists.	self registerListInterests.	viewType := #parcel asValue onChangeSend: #changedViewType to: self; yourself</body><body package="ADvance2">initializeLists	containers := SelectionInList new list: self getContainerNames.	containerClasses := SelectionInList new.	sortedClasses := SelectionInList new list: self getClassNames.	classTree := SelectionInList new list: TreeModel new</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>actions</category><body package="ADvance2">findClass	| aClass |	aClass := self adDialog				findClass: 'Find class:'				in: self adBasics systemEnvironment				onCancel: [^self]				for: self builder window.	self makeVisible: aClass</body><body package="ADvance2">newClass	"Asks user for class attributes. The container (no matter whether 	parcel, package, or category) is taken as default category name, 	the parcel or package to use is asked for during class creation."	| classOrNil |	classOrNil := self adBasics systemOrganization				addClassNamed: nil				superclass: nil				container: self containers selection				for: self builder window.	classOrNil isNil ifTrue: [^self].	self update.	self makeVisible: classOrNil</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog</class-id> <category>help extensions</category><body package="ADvance2">helpTextFor: aWidgetID	"^&lt;String | nil&gt;	Return the help text used in Tiny Help System."	aWidgetID == #newClass ifTrue: [^'Create New Class'].	aWidgetID == #category ifTrue: [^'Show Class Categories'].	aWidgetID == #hierarchy ifTrue: [^'Show Class Hierarchy'].	aWidgetID == #list ifTrue: [^'Show Class List'].	aWidgetID == #parcel ifTrue: [^'Show Parcels'].	aWidgetID == #package ifTrue: [^'Show Packages'].	^nil</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog class</class-id> <category>resources opaque</category><body package="ADvance2">categoryOpaqueImage	^self resources opaqueImageFor: self named: #categoryImage</body><body package="ADvance2">hierarchyOpaqueImage	^self resources opaqueImageFor: self named: #hierarchyImage</body><body package="ADvance2">listOpaqueImage	^self resources opaqueImageFor: self named: #listImage</body><body package="ADvance2">newClassOpaqueImage	^self resources opaqueImageFor: self named: #newClassImage</body><body package="ADvance2">packageOpaqueImage	^self resources opaqueImageFor: self named: #packageImage</body><body package="ADvance2">parcelOpaqueImage	^self resources opaqueImageFor: self named: #parcelImage</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog class</class-id> <category>resources</category><body package="ADvance2">containerMenu	^self classMenu</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>private</category><body package="ADvance2">changeRequest	^self modified		ifTrue:			[| result |			result := self adDialog threeStateConfirm: ('Cancel and discard changes to &lt;1s&gt; (Yes) or save before closing (No)?' expandMacrosWith: self currentSubject name)						for: self builder window.			result notNil ifTrue: [result ifFalse: [self saveSubject]].			result notNil]		ifFalse: [true]</body><body package="ADvance2">computeContainerDefinitions	"Compute the (partially) defined categories from the set of defined 	classes. 	First collect the containers (packages, parcels, or categories) that 	contain 	defined classes, then check whether all classes or a subset is 	defined."	Cursor wait showWhile: [	definedContainers := Dictionary new.	self classEnvironment allClassesDo: [:each | (self containersForClass: each type: self viewType value)			do: [:eachContainerName | definedContainers at: eachContainerName put: #partiallyDefined]].	self definedContainers keys		do: 			[:each | 			| theClassNames |			theClassNames := self classNamesInContainerName: each type: self viewType value.			(theClassNames contains: [:eachClassName | 				(self classEnvironment classNames includes: eachClassName) not])				ifFalse: ["Check whether the categories' classes are 					completely in the defined set."					self definedContainers at: each put: #defined]].	self update]</body><body package="ADvance2">containerLabel	^self viewType value asString</body><body package="ADvance2">getClassNames	^self filterOn value		ifTrue: [self getFilteredClassNames]		ifFalse: [super getClassNames]</body><body package="ADvance2">getContainerNames	^self filterOn value		ifTrue: [self getFilteredContainerNames]		ifFalse: [super getContainerNames]</body><body package="ADvance2">getFilteredClassNames	^self classEnvironment classNames asSortedCollection</body><body package="ADvance2">getFilteredContainerNames	| definitions |	definitions := self definedContainers.	^super getContainerNames select: [:each | definitions notNil and: [definitions includesKey: each]]</body><body package="ADvance2">goToFirstClass	| filteredClasses |	(filteredClasses := self getFilteredClassNames) isEmpty ifTrue: [^self].	(self builder componentAt: #sortedClasses) widget makeVisible: (self sortedClasses list indexOf: filteredClasses first) + 5</body><body package="ADvance2">goToFirstContainer	| filteredContainers |	(filteredContainers := self getFilteredContainerNames) isEmpty ifTrue: [^self].	(self builder componentAt: #containers) widget makeVisible: (self containers list indexOf: filteredContainers first) + 5</body><body package="ADvance2">goToFirstElement	self selection isNil ifFalse: [^self].	(#(#category #package #parcel) includes: self viewType value)		ifTrue: [self goToFirstContainer]		ifFalse: [self goToFirstClass]</body><body package="ADvance2">invalidateComponent: aSymbol	| component |	(component := builder componentAt: aSymbol) notNil ifTrue: [component invalidate]</body><body package="ADvance2">invalidateComponents	#(#containers #containerClasses #sortedClasses) do: [:each | self invalidateComponent: each]</body><body package="ADvance2">makeVisible: aClass	super makeVisible: aClass.	(self filterOn value and: [(self classEnvironment includesKey: aClass name) not])		ifTrue: [self filterOn value: false]</body><body package="ADvance2">modified	^self classEnvironment ~= self currentSubject environment</body><body package="ADvance2">saveSubject	self currentSubject environment: self classEnvironment; save</body><body package="ADvance2">setWindowLabel	self builder window label: ('Subject Editor - [&lt;1s&gt;]' expandMacrosWith: self currentSubject name)</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>subject operations</category><body package="ADvance2">addAllClasses	| pattern |	pattern := self adDialog request: 'Select classes matching:' for: self builder window.	self addClasses: (self classesMatching: pattern)</body><body package="ADvance2">addAllContainers	| pattern |	pattern := self adDialog request: ('Select &lt;1s&gt;s matching:' expandMacrosWith: self containerLabel)				for: self builder window.	self addContainers: (self containersMatching: pattern)</body><body package="ADvance2">addClass	| className |	(className := self selection) isNil ifTrue: [^self].	self addClasses: (Array with: className)</body><body package="ADvance2">addContainer	| selectedContainer |	(selectedContainer := self containers selection) isNil ifTrue: [^self].	self addContainers: (Array with: selectedContainer)</body><body package="ADvance2">addFromChangeSet	"Add all classes that are changed in the current ChangeSet to the subject."	self addClasses: (self adBasics systemOrganization changedClasses collect: [:each | each name])</body><body package="ADvance2">addFromParcel	"Let the user choose a parcel and add all classes defined in this parcel to the subject."	| parcel |	(parcel := self adDialog chooseParcelFor: self builder window) isNil ifTrue: [^self].	self addClasses: (parcel definedClasses collect: [:each | each name])</body><body package="ADvance2">addFromSubject	| subject |	(subject := self advance chooseSubjectFor: self builder window) isNil ifTrue: [^self].	self addClasses: subject classNames</body><body package="ADvance2">addSubclasses	self selection isNil ifTrue: [^self].	self addClasses: (self selectedClass allSubclasses collect: [:each | each fullName])</body><body package="ADvance2">addSuperclasses	self selection isNil ifTrue: [^self].	self addClasses: (self selectedClass allSuperclasses collect: [:each | each fullName])</body><body package="ADvance2">removeAllClasses	| pattern |	pattern := self adDialog request: 'Select classes matching:' for: self builder window.	self removeClasses: (self classesMatching: pattern)</body><body package="ADvance2">removeAllContainers	| pattern |	pattern := self adDialog request: ('Select &lt;1s&gt; matching:' expandMacrosWith: self containerLabel)				for: self builder window.	self removeContainers: (self containersMatching: pattern)</body><body package="ADvance2">removeClass	| className |	(className := self selection) isNil ifTrue: [^self].	self removeClasses: (Array with: className)</body><body package="ADvance2">removeContainer	| selectedContainer |	(selectedContainer := self containers selection) isNil ifTrue: [^self].	self removeContainers: (Array with: selectedContainer)</body><body package="ADvance2">removeSubclasses	self selection isNil ifTrue: [^self].	self removeClasses: (self selectedClass allSubclasses collect: [:each | each fullName])</body><body package="ADvance2">removeSuperclasses	self selection isNil ifTrue: [^self].	self removeClasses: (self selectedClass allSuperclasses collect: [:each | each fullName])</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>private-operations</category><body package="ADvance2">addClasses: classes	"Add classes to the current class environment, then update my display."	classes do: [:each | self classEnvironment addClassName: each].	self computeContainerDefinitions.	self invalidateComponents</body><body package="ADvance2">addContainers: aCollectionOfContainers	| classNames |	classNames := aCollectionOfContainers 		inject: OrderedCollection new 		into: [:collection :container | collection addAll: (self classNamesInContainerName: container type: self viewType value); yourself].	self addClasses: classNames</body><body package="ADvance2">classesMatching: pattern	^self adBasics systemEnvironment classNames select: [:each | pattern match: each]</body><body package="ADvance2">containersMatching: pattern 	| theContainerNames |	theContainerNames := #().	self viewType value == #parcel ifTrue: [theContainerNames := self adBasics systemOrganization parcelNames].	self viewType value == #package ifTrue: [theContainerNames := self adBasics systemOrganization packageNames].	self viewType value == #category ifTrue: [self adBasics systemOrganization containerNames].	^theContainerNames select: [:each | pattern match: each]</body><body package="ADvance2">removeClasses: classes	"Remove classes from the current class environment, then update my display."	classes do: [:each | self classEnvironment removeClassName: each ifAbsent: []].	self computeContainerDefinitions.	self invalidateComponents</body><body package="ADvance2">removeContainers: aCollectionOfContainers	| classNames |	classNames := aCollectionOfContainers inject: OrderedCollection new into: [:collection :container | collection addAll: (self adBasics systemOrganization classNamesInContainer: container); yourself].	self removeClasses: classNames</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>changing</category><body package="ADvance2">changedFilter	self update.	self filterOn value ifFalse: [self goToFirstElement]</body><body package="ADvance2">enableOkButton	"Unlike my superclass I need no disablement of the OK button."</body><body package="ADvance2">setOrganizationView	super setOrganizationView.	self computeContainerDefinitions.</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>visual blocks</category><body package="ADvance2">classEmphasis: className	^(self classEnvironment includesKey: className)		ifTrue: [#bold]		ifFalse: [#normal]</body><body package="ADvance2">classSelectedVisualBlock	^	[:view :index |	| aText aName |	aName := view sequence at: index.	aText := aName asText.	aText emphasizeAllWith: (self classEmphasis: aName).	BoundedWrapper on: (ReversingWrapper on: (Label				with: aText				attributes: view textStyle				offset: 2 @ 0)) invert]</body><body package="ADvance2">classVisualBlock	^	[:view :index |	| aText aName |	aName := view sequence at: index.	aText := aName asText.	aText emphasizeAllWith: (self classEmphasis: aName).	BoundedWrapper on: (Label			with: aText			attributes: view textStyle			offset: 2 @ 0)]</body><body package="ADvance2">containerEmphasis: container	| aSymbol |	aSymbol := self containerState: container.	aSymbol == #defined ifTrue: [^#bold].	aSymbol == #partiallyDefined ifTrue: [^Italic].	aSymbol == #undefined ifTrue: [^#normal]</body><body package="ADvance2">containerSelectedVisualBlock	^	[:view :index |	| aText aName |	aName := view sequence at: index.	aText := aName asText.	aText emphasizeAllWith: (self containerEmphasis: aName).	BoundedWrapper on: (ReversingWrapper on: (Label				with: aText				attributes: view textStyle				offset: 2 @ 0)) invert.].</body><body package="ADvance2">containerState: container 	self definedContainers isNil		ifTrue: [^#undefined].	^self definedContainers at: container ifAbsent: [#undefined]</body><body package="ADvance2">containerVisualBlock	^	[:view :index |	| aText aName |	aName := view sequence at: index.	aText := aName asText.	aText emphasizeAllWith: (self containerEmphasis: aName).	BoundedWrapper on: (Label			with: aText			attributes: view textStyle			offset: 2 @ 0)]</body><body package="ADvance2">setVisualBlocksWith: aBuilder	| component |	(component := aBuilder componentAt: #containers) notNil ifTrue: [component widget visualBlock: self containerVisualBlock; selectedVisualBlock: self containerSelectedVisualBlock].	(component := aBuilder componentAt: #containerClasses) notNil ifTrue: [component widget visualBlock: self classVisualBlock; selectedVisualBlock: self classSelectedVisualBlock].	(component := aBuilder componentAt: #sortedClasses) notNil ifTrue: [component widget visualBlock: self classVisualBlock; selectedVisualBlock: self classSelectedVisualBlock]</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self title: 'Subject Editor'.</body><body package="ADvance2">initializeLists	containers := SelectionInList new.	containerClasses := SelectionInList new.	sortedClasses := SelectionInList new.	classTree := SelectionInList new list: TreeModel new</body><body package="ADvance2">on: aSubject filtered: aBoolean	currentSubject := aSubject.	filterOn := aBoolean asValue onChangeSend: #changedFilter to: self; yourself.	classEnvironment := self currentSubject environment copy</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>actions</category><body package="ADvance2">doAccept	self modified ifTrue: [self saveSubject].	super doAccept</body><body package="ADvance2">doCancel	self changeRequest ifTrue: [super doCancel]</body><body package="ADvance2">updateLists	self initializeLists.	self registerListInterests.	self computeContainerDefinitions.	self invalidateComponents</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self setVisualBlocksWith: aBuilder</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self setWindowLabel.	self computeContainerDefinitions.	self filterOn value ifFalse: [self goToFirstElement]</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>accessing</category><body package="ADvance2">classEnvironment	^classEnvironment</body><body package="ADvance2">currentSubject	^currentSubject</body><body package="ADvance2">definedContainers	^definedContainers</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>aspects</category><body package="ADvance2">filterOn	^filterOn</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor</class-id> <category>help extensions</category><body package="ADvance2">helpTextFor: aWidgetID	aWidgetID == #filterOn ifTrue: [^'Switch Filter for Items not in Subject'].	^super helpTextFor: aWidgetID</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor class</class-id> <category>instance creation</category><body package="ADvance2">newOn: aSubject filtered: aBoolean	^self new on: aSubject filtered: aBoolean</body></methods><methods><class-id>ICC.ADvance.AD2Graphics class</class-id> <category>ADvance</category><body package="ADvance2">ad2diagram_Components___context	^#(#{ICC.ADvance.AD2DiagramSpec}		#name: 'Components &amp; context'		#creationDateSeconds: 3026300117		#modificationDateSeconds: 3134088278		#author:		#(#{ICC.ADvance.AD2Identity}			#nickName: ''			#name: ''			#company: '' )		#state:		#(#{ICC.ADvance.AD2DiagramState}			#bits: 15			#zoom: '82%'			#translation: #(#{Core.Point} -72 -25 )			#scriptDepth: 3			#associationDepth: 2 )		#filter:		#(#{ICC.ADvance.AD2MethodFilter}			#bits: 14			#filteredInstProtocols: #('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' 'privat*' 'resources' )			#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' )			#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' 'private*' 'resources' 'signal*' )			#filteredClassMethods: #('initialize' 'new' ) )		#classes: #(#(#{ICC.ADvance.NVTransformation} 400 -256 0 ) #(#{ICC.ADvance.NVComposedText} 864 34 0 ) #(#{ICC.ADvance.NVRepairPolicy} 1032 162 0 ) #(#{ICC.ADvance.NVMenuBuilder} 824 -254 0 ) #(#{ICC.ADvance.NVEditorView} 80 -281 0 ) #(#{ICC.ADvance.NVScrollWrapper} 664 -158 0 ) #(#{ICC.ADvance.NVisionSpec} 664 -256 0 ) #(#{ICC.ADvance.NVComponent} 624 41 1 ) #(#{ICC.ADvance.NVDependentPart} 400 216 1 ) #(#{ICC.ADvance.NVComposite} 624 225 1 ) #(#{ICC.ADvance.NVWrapper} 824 226 1 ) #(#{ICC.ADvance.NVApplicationModel} 208 40 1 ) #(#{ICC.ADvance.NVModel} 184 216 1 ) #(#{ICC.ADvance.NVEditor} 88 -6 0 ) ) )</body><body package="ADvance2">ad2diagram_Overview	^#(#{ICC.ADvance.AD2DiagramSpec} 		#name: 'Overview' 		#creationDateSeconds: 3026300117 		#modificationDateSeconds: 3307083869 		#author: 		#(#{ICC.ADvance.AD2Identity} 			#nickName: '' 			#name: '' 			#company: '' ) 		#state: 		#(#{ICC.ADvance.AD2DiagramState} 			#bits: 7 			#zoom: '100%' 			#translation: #(#{Core.Point} 20 -40 ) 			#scriptDepth: 3 			#associationDepth: 2 ) 		#filter: 		#(#{ICC.ADvance.AD2StructureFilter} 			#bits: 14 			#filteredInstProtocols: #('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' 'privat*' 'resources' ) 			#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 			#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' 'private*' 'resources' 'signal*' ) 			#filteredClassMethods: #('initialize' 'new' ) 			#filteredInstVars: #() ) 		#classes: #(			#(#{ICC.ADvance.NVEditorView} 64 64 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComposite} 						#attribute: 'components' 						#layout1: #(1.0 0.371134 ) 						#layout2: #(0.0 0.688525 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVEditor} 						#attribute: 'model' 						#layout1: #(0.625 1.0 ) 						#layout2: #(0.546154 0.0 ) ) ) ) #(#{ICC.ADvance.NVisionSpec} 552 393 1 ) 			#(#{ICC.ADvance.NVEditor} 72 241 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVTransformation} 						#attribute: 'transformation' 						#layout1: #(0.292308 1.0 ) 						#layout2: #(0.416667 0.0 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVApplicationModel} 						#attribute: 'application' 						#layout1: #(0.984615 1.0 ) 						#layout2: #(0.0 0.65731 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComponent} 						#attribute: 'selection' ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVEditorView} 						#attribute: 'view' 						#layout1: #(0.238462 0.0 ) 						#layout2: #(0.267857 1.0 ) ) ) ) #(#{ICC.ADvance.NVScrollWrapper} 560 298 1 ) #(#{ICC.ADvance.NVTransformation} 56 378 1 ) 			#(#{ICC.ADvance.NVComponent} 488 65 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComponent} 						#attribute: 'container' ) ) ) #(#{ICC.ADvance.NVMenuBuilder} 264 442 1 ) 			#(#{ICC.ADvance.NVApplicationModel} 256 338 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVEditor} 						#attribute: 'editor' 						#layout1: #(0.186567 0.0 ) 						#layout2: #(1.0 0.447961 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVModel} 						#attribute: 'components' 						#layout1: #(1.0 0.262295 ) 						#layout2: #(0.0 0.316456 ) ) ) ) 			#(#{ICC.ADvance.NVWrapper} 560 202 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComponent} 						#attribute: 'component' 						#layout1: #(0.0 0.352459 ) 						#layout2: #(0.52736 1.0 ) ) ) ) #(#{ICC.ADvance.NVComposedText} 568 514 1 ) 			#(#{ICC.ADvance.NVDependentPart} 376 193 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVModel} 						#attribute: 'model' 						#layout1: #(0.71374 1.0 ) 						#layout2: #(0.1 0.0 ) ) ) ) 			#(#{ICC.ADvance.NVModel} 432 329 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVApplicationModel} 						#attribute: 'container' 						#layout1: #(0.0 0.721519 ) 						#layout2: #(1.0 0.786885 ) ) ) ) 			#(#{ICC.ADvance.NVComposite} 248 58 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.ADvance.NVComponent} 						#attribute: 'components' 						#layout1: #(1.0 0.245902 ) 						#layout2: #(0.0 0.101266 ) ) ) ) ) )</body><body package="ADvance2">advanceSubjectSpec	^#(#{ICC.ADvance.AD2Subject} #classNames: #('ICC.ADvance.NVMenuBuilder' 'ICC.ADvance.NVEditorView' 'ICC.ADvance.NVDependentPart' 'ICC.ADvance.NVTransformation' 'ICC.ADvance.NVEditor' 'ICC.ADvance.NVComponent' 'ICC.ADvance.NVComposedText' 'ICC.ADvance.NVisionSpec' 'ICC.ADvance.NVComposite' 'ICC.ADvance.NVApplicationModel' 'ICC.ADvance.NVScrollWrapper' 'ICC.ADvance.NVModel' 'ICC.ADvance.NVWrapper'))</body><body package="ADvance2">markedAsSubjectClass</body><body package="ADvance2">markedAsSystemSubject</body></methods><methods><class-id>ICC.ADvance.NVRectangleCollection</class-id> <category>private</category><body package="ADvance2">computeBounds	"^&lt;Rectangle&gt; 	Answers the containing rectangle with integer coordinates, this is the rounded	merge of all of this collection's elements plus an extra amount to ensure that	the bounds really contain all of the displayed rectangles."	| theMerged |	theMerged := self rectangles first.	self rectangles do: [:eachRect | theMerged := theMerged merge: eachRect].	^theMerged rounded expandedBy: 1@1</body></methods><methods><class-id>ICC.ADvance.NVRectangleCollection</class-id> <category>transforming</category><body package="ADvance2">scaledBy: amount 	"Answer a new object scaled by the argument amount, which can 	be a Point or a scalar value. This means a new rectangle 	collection with copied scaled elements"	^self class new rectangles: (self rectangles collect: [:eachRect | eachRect scaledBy: amount])</body><body package="ADvance2">translatedBy: amount 	"Answer a new object translated by the argument amount, 	is a Point. This means a new rectangle collection with copied 	translated elements"	^self class basicNew rectangles: (self rectangles collect: [:eachRect | eachRect translatedBy: amount])</body></methods><methods><class-id>ICC.ADvance.NVRectangleCollection</class-id> <category>displaying</category><body package="ADvance2">displayFilledOn: aGraphicsContext 	"Displaying the collection means to display all of its elements."	self rectangles do: [:eachRect | eachRect displayFilledOn: aGraphicsContext]</body><body package="ADvance2">displayOn: aGraphicsContext	"Default displaying is to only show the shape."	^self displayStrokedOn: aGraphicsContext</body><body package="ADvance2">displayStrokedOn: aGraphicsContext 	"Displaying the collection means to display all of its elements."	self rectangles do: [:eachRect | eachRect displayStrokedOn: aGraphicsContext]</body></methods><methods><class-id>ICC.ADvance.NVRectangleCollection</class-id> <category>accessing</category><body package="ADvance2">rectangles	^rectangles</body><body package="ADvance2">rectangles: anOrderedCollectionOfRectangle	rectangles := anOrderedCollectionOfRectangle</body></methods><methods><class-id>ICC.ADvance.NVRectangleCollection</class-id> <category>broadcast</category><body package="ADvance2">downcastEvent: aKey with: aParameter from: anInitiator	"Since VW 7.4, a Mask asks for this in its #fromShape:, the simplest implementation is enough here."	^self</body></methods><methods><class-id>ICC.ADvance.NVRectangleCollection class</class-id> <category>instance creation</category><body package="ADvance2">on: anOrderedCollectionOfRectangle	^(self basicNew)		rectangles: anOrderedCollectionOfRectangle;		yourself</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>actions</category><body package="ADvance2">addAssociation	| serverModelOrNil |	Cursor wait		showWhile:			[serverModelOrNil := self getServer.			^serverModelOrNil notNil and: [self addRelationTo: serverModelOrNil domain]]</body><body package="ADvance2">addAttribute	Cursor wait showWhile: [^self addRelationTo: nil]</body><body package="ADvance2">addInitiators	"@Pre: The current context is a subject.	@Post: The subject is extended by user choosen initiators."	| initiators |	initiators := self computeInitiators.	initiators isNil ifTrue: [^self].	initiators isEmpty ifTrue: [^self adDialog message: 'No initiators found.' for: self window].	self addClasses: initiators newClassType: 'Initiators'</body><body package="ADvance2">addMessage	| modelOrNil dialog |	self services isEmpty ifTrue: [^self adDialog message: 'Can''t add a message connection. The\selected class has no (initiator) services.' withCRs].	(modelOrNil := self getMessageTargetClass) isNil ifTrue: [^self].	modelOrNil services isEmpty ifTrue: [^self adDialog message: 'Can''t add a message connection. The\target class has no (participant) services.' withCRs].	dialog := self advance addMessageDialogClass new.	dialog initiator: self name.	dialog initiatorServices list: self services.	dialog participant: modelOrNil name.	dialog participantServices list: modelOrNil services.	(dialog openInterface: #windowSpec for: self window)		ifFalse: [^self].	self		basicAddMessageSendFrom: dialog initiatorServices selection		to: dialog participantServices selection		addScript: dialog addScript value</body><body package="ADvance2">addParticipants	"Pre: The current context is a subject.	Post: The subject is extended by user choosen participants."	| participants |	participants := self computeParticipants.	participants isNil ifTrue: [^self].	participants isEmpty ifTrue: [^self adDialog message: 'No participants found.' for: self window].	self addClasses: participants newClassType: 'Participants'</body><body package="ADvance2">addRelatedClasses	"Pre: The current context is a subject.	Post: The subject is extended by user choosen classes related to my domain."	| relatedClasses |	(relatedClasses := self domain directRelatedClasses) addAll: self domain subclasses.	self addClasses: relatedClasses newClassType: 'Related classes'</body><body package="ADvance2">checkTypes	"Type check the class in focus."	self advance types checkTypesFor: (Array with: self domain)</body><body package="ADvance2">doHide	self isVisible: false.	self applicationModel controller editor redrawDamageArea</body><body package="ADvance2">doubleClickAt: aPoint keyMode: aSymbol	| event |	event := aSymbol == #normal				ifTrue: [#classPlain]				ifFalse: [aSymbol == #shift						ifTrue: [#classShift]						ifFalse: [#classCtrl]].	self perform: (self advance preferences painter doubleClickActionAt: event using: self class doubleClickList)</body><body package="ADvance2">editFilter	self applicationModel controller editFilter</body><body package="ADvance2">editProperties	(self advance classPropertiesDialogClass new targetModel: self)		openInterface: #windowSpec for: self window</body><body package="ADvance2">expandSubject	"If there is only one (or no) diagram, this one (resp. the default) is used for 	expansion. Otherwise user can choose from the set of diagrams."	| theSubject theDiagramName thePainter |	theSubject := self domain advanceSubject.	theDiagramName := theSubject hasDefaultDiagram				ifTrue: [theSubject defaultDiagram name]				ifFalse: [nil].	theSubject diagramCount &gt; 1		ifTrue: [theDiagramName := self adDialog					choose: 'Please select a diagram to open:'					fromList: (theSubject prettyDiagramNames add: 'Unformatted Default'; yourself)					values: (theSubject diagramNames copy add: nil; yourself)					lines: 10					cancel: [#diagramSelectionCancelled]].	theDiagramName == #diagramSelectionCancelled		ifTrue: [^self].	thePainter := self advance preferences painter subjectExpansionType == #thisPainter				ifTrue: [self applicationModel controller]				ifFalse: [(self advance diagramPainterClass new) open; yourself].	thePainter openDiagramOn: theSubject name: theDiagramName</body><body package="ADvance2">fileOutClass	| fileName fileManager |	fileName := self adDialog				requestNewFileName: 'File out on:'				suggest: self name , '.st'				for: self window.	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream on: fileName asFilename writeStream.	[fileManager timeStamp.	self domain fileOutSourceOn: fileManager]		valueNowOrOnUnwindDo: [fileManager close]</body><body package="ADvance2">hardcopy	"Print the class."	| stream |	stream := TextStream on: (String new: 1000).	self domain printOutOn: stream.	stream contents asText asParagraph hardcopy</body><body package="ADvance2">moveClass	self adBasics systemOrganization moveDialogFor: self domain</body><body package="ADvance2">openScriptSelectionDialog	| dialog |	(dialog := self advance scriptSelectionDialogClass new) targetModel: self.	(dialog openInterface: #windowSpec for: self window)		ifFalse: [^self].	self removeScripts: self visibleScripts.	Cursor wait showWhile: [self addScripts: dialog visibleScripts selections depth: self applicationModel scriptDepthOrNil].	self applicationModel redrawAll; beModified</body><body package="ADvance2">pickBackgroundColor	| newColor |	(newColor := self pickColor) notNil		ifTrue: [self backgroundColor: newColor]</body><body package="ADvance2">removeFilter	self hasLocalFilter ifFalse: [^self adDialog message: 'The selected class has no local filter to remove.' for: self window].	(self adDialog confirm: 'Do you want to remove the local filter?' for: self window)		ifFalse: [^self].	self basicRemoveFilter.	self applicationModel redrawAll; beModified</body><body package="ADvance2">removeFromSystem	self applicationModel controller removeClassesFromSystem</body><body package="ADvance2">removeScripts	self removeScripts: self visibleScripts.	self applicationModel beModified</body><body package="ADvance2">resetBackgroundColor	self backgroundColor: nil</body><body package="ADvance2">spawn	self adBasics systemOrganization spawnBrowserOn: self domain</body><body package="ADvance2">spawnHierarchy	self adBasics systemOrganization spawnHierarchyBrowserOn: self domain</body><body package="ADvance2">toggleShowsAttributes	self showsAttributes: self showsAttributes not.	self applicationModel beModified.	self updateContents</body><body package="ADvance2">toggleShowsServices	self showsServices: self showsServices not.	self applicationModel beModified.	self updateContents</body><body package="ADvance2">toggleShowsTypes	self showsTypes: self showsTypes not.	self applicationModel beModified.	self updateContents</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>updating</category><body package="ADvance2">changed: aSymbol with: aParameter	self edges do: [:each | each update: aSymbol with: aParameter].	super changed: aSymbol with: aParameter</body><body package="ADvance2">update: aSymbol with: aParameter	aSymbol == #location		ifTrue:			[self location: aParameter.			self changed: #location with: aParameter.			^self applicationModel beModified].	aSymbol == #attributes ifTrue: [^self updateAttributes].	aSymbol == #services ifTrue: [^self updateServices].	aSymbol == #className ifTrue: [^self updateClassName].	aSymbol == #namespaces ifTrue: [^self updateClassName; updateAttributes].	aSymbol == #zoom ifTrue: [^self updateZoomTo: aParameter].	super update: aSymbol with: aParameter</body><body package="ADvance2">updateAttributes	"Regenerate my attributes and notify my dependents that I've changed."	self flushRelationCaches.	self regenerateAttributesText.	self updateShape</body><body package="ADvance2">updateClassName	"Regenerate my class name and notify my dependents that I've changed."	self regenerateClassNameText.	self updateShape</body><body package="ADvance2">updateContents	"Regenerate myself and notify my dependents that I've changed."	self regenerateClassNameText.	self regenerateAttributesText.	self regenerateServicesText.	self updateShape</body><body package="ADvance2">updateServices	"Regenerate my services and notify my dependents that I've changed."	self flushServicesCache.	self flushIsAbstractCache.	self regenerateServicesText.	self removeObsoleteMessageModels.	self updateShape</body><body package="ADvance2">updateShape 	self flushExtentCache.	self changed: #shape</body><body package="ADvance2">updateZoomTo: scale	self changed: #zoom with: scale.	self updateShape</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private-docu</category><body package="ADvance2">printDocumentationBlockFor: reportStream	^	[:aService :participantServices :indexStack |	| aStream indexString level calls visibleParticipantServices |	visibleParticipantServices := self visibleServicesFor: aService participantServices: participantServices.	visibleParticipantServices isEmpty		ifFalse:			[aStream := TextStream on: String new.			indexString := self indexStringFor: indexStack.			level := indexStack size.			aStream				 crtab: level;				 nextPutAll: indexString;				 space.			aStream nextPutAll: aService classAndFullSelector.			reportStream nextPut: aStream contents.			aStream := TextStream on: String new.			aStream crtab: level + 1.			self				print: (aService commentWithTypeHeader: false)				tabLevel: level + 1				on: aStream.			reportStream nextPut: (Text string: aStream contents emphasis: self commentEmphasis).			aStream := (TextStream on: String new)						crtab: level.			reportStream nextPut: aStream contents.			calls := Text string: self calledMethodsPrefix emphasis: self callsEmphasis.			reportStream nextPut: calls.			aStream := (TextStream on: (String new: 100))						crtab: level.			1 to: visibleParticipantServices size				do:					[:index |					| eachService messText messString |					eachService := visibleParticipantServices at: index.					messString := '&lt;1s&gt; &lt;2s&gt;' expandMacrosWith: (self indexStringFor: (indexStack copyWith: index))								with: eachService classAndSelector.					messText := Text string: messString emphasis: self calledMethodsEmphasis.					aStream nextPutAllText: messText.					aStream crtab: level].			reportStream nextPut: aStream contents]]</body><body package="ADvance2">printHeaderFor: aService on: aStream	aStream nextPut: (('&lt;1s&gt; &lt;2s&gt;&lt;n&gt;' expandMacrosWith: self headerPrefix with: aService classAndSelector) asText emphasizeAllWith: self headerEmphasis)</body><body package="ADvance2">printScriptDocumentationFor: aService index: index on: aStream	self printHeaderFor: aService on: aStream.	self		traverseServices: aService		depth: self applicationModel scriptDepthOrNil		visited: Set new		indexStack: OrderedCollection new		do: (self printDocumentationBlockFor: aStream)</body><body package="ADvance2">serviceIsVisible: aService	"^&lt;Boolean&gt;	Answer wether the class of aService is visible."	^(self applicationModel projectionFor: aService baseClass) visible</body><body package="ADvance2">visibleServicesFor: aService participantServices: participantServices	"^&lt;OrderedCollection of: AD2Service&gt;	If aService is invisible answer an empty collection.	Otherwise answer the services PS from participantServices with:	i) the class of PS is visible and	ii) the message (aService, PS) is drawn in the application model."	^(self serviceIsVisible: aService)		ifFalse: [OrderedCollection new]		ifTrue: [participantServices select: [:each | (self serviceIsVisible: each)					and: [self applicationModel hasMessage: (AD2Message initiatorService: aService participantService: each)]]]</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>testing</category><body package="ADvance2">domainIsBrowserSelected	"^&lt;Boolean&gt;	This is true, if the diagram's subject class equals the domain (this is the case for Refactoring Browser ADvance Diagrams)."	^self domain notNil and: [self container domain baseClass == self domain]</body><body package="ADvance2">domainIsSubject	"^&lt;Boolean&gt;	This is true, if the class is marked as a subject."	^self domain notNil and: 			[self domain isADvanceSubject]</body><body package="ADvance2">hasLocalFilter	^structureFilter notNil</body><body package="ADvance2">isAbstract	cachedIsAbstract isNil ifTrue: [cachedIsAbstract := self adBasics systemOrganization isAbstract: self domain].	^cachedIsAbstract</body><body package="ADvance2">isPersistent	cachedIsPersistent isNil ifTrue: [cachedIsPersistent := self adBasics systemOrganization isPersistent: self domain].	^cachedIsPersistent</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private-docu constants</category><body package="ADvance2">calledMethodsEmphasis	^Array with: #family -&gt; 'times' with: #pixelSize -&gt; 8 with: #sansSerif</body><body package="ADvance2">calledMethodsPrefix	^'calls'</body><body package="ADvance2">callsEmphasis	^self calledMethodsEmphasis copyWith: #bold</body><body package="ADvance2">commentEmphasis	^Array with: #italic with: #family -&gt; 'times' with: #pixelSize -&gt; 11</body><body package="ADvance2">headerEmphasis	^Array with: #large with: #bold</body><body package="ADvance2">headerPrefix	^'Script for:'</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private-scripts</category><body package="ADvance2">addScripts: services depth: anIntegerOrNil	self window checkForEvents.	services do: [:each | self addSingleScript: each depth: anIntegerOrNil]</body><body package="ADvance2">addSingleScript: aService depth: anIntegerOrNil 	self		traverseServices: aService		depth: anIntegerOrNil		do: [:service :participantServices :indexStack | 			self applicationModel 				addMessageModelsFor: service 				participantServices: participantServices]</body><body package="ADvance2">computePossibleScriptsWith: footerProgress	"^&lt;OrderedCollection of: AD2Service&gt;	return a collection of scipts (messages of this class) depending on the selected association depth	(the restriction to association depth concerns only instance methods)"	| relatedClasses result servicesSize |	relatedClasses := self relatedClasses.	footerProgress value: 0.	result := OrderedCollection new.	servicesSize := self services size.	1 to: servicesSize		do:			[:index |			| each |			each := self services at: index.			(self participantServicesFor: each relatedClasses: relatedClasses) isEmpty ifFalse: [result add: each].			footerProgress value: index / servicesSize].	^result</body><body package="ADvance2">getMessageTargetClass	^self getTargetClassWith: (Cursor			image: (self advance diagramPainterClass scriptCursor palette: MappedPalette whiteBlack)			mask: self advance diagramPainterClass scriptCursor			hotSpot: 1 @ 1			name: #Annika)</body><body package="ADvance2">participantServicesFor: aService relatedClasses: relatedClasses	"^&lt;OrderedCollection of: &gt;	Returns services invoked by aService. The returned services are class methods implemented by	classes in the subject or instance methods implemented by one of relatedClasses. RelatedClasses	are classes with associations to the base class of aService with the defined association depth"	| participantServices environment |	(self services includes: aService)		ifFalse: [^OrderedCollection new].	"participantServices is OrderedCollection of: AD2Service. It contains instance methods of	relatedClasses and all class methods called by aService"	participantServices := (self advance methodAnalyzerClass context: relatedClasses)				participantServicesFor: aService.	environment := self subject environment.	"select those messages of participantServices, which base class is in the subject"	^participantServices inject: OrderedCollection new		into:			[:collection :each |			(aService ~= each and: [(environment includes: each baseClass)					and: [(self applicationModel projectionFor: each baseClass) services includes: each]])				ifTrue: [collection add: each].			collection]</body><body package="ADvance2">possibleScripts	"^&lt;OrderedCollection of: AD2Service&gt;	return a collection of scipts (messages of this class) depending on the selected association	depth (association depth concerns only instance methods)"	| applicationController result |	applicationController := self applicationModel controller.	applicationController		hideFooterAndDo:			[applicationController showStatus: 'Inferring scripts...'.			result := self computePossibleScriptsWith: applicationController footerProgress].	^result</body><body package="ADvance2">removeScripts: aCollectionOfServices	aCollectionOfServices do: [:each | self applicationModel removeScriptFor: each].	self applicationModel redraw</body><body package="ADvance2">traverseServices: aService depth: anIntegerOrNil do: aBlock 	self		traverseServices: aService		depth: anIntegerOrNil		visited: Set new		indexStack: OrderedCollection new		do: aBlock</body><body package="ADvance2">traverseServices: aService depth: anIntegerOrNil visited: visitedServices indexStack: indexStack do: aBlock	| newDepth participantServices |	newDepth := anIntegerOrNil isNil				ifTrue: [nil]				ifFalse: [anIntegerOrNil - 1].	(newDepth notNil and: [newDepth &lt; 0])		ifTrue: [^self].	(visitedServices includes: aService)		ifTrue: [^self].	visitedServices add: aService.	participantServices := self participantServicesFor: aService relatedClasses: self relatedClasses.	aBlock		value: aService		value: participantServices		value: indexStack.	1 to: participantServices size		do:			[:index |			| eachService |			eachService := participantServices at: index.			(self applicationModel projectionFor: eachService baseClass)				traverseServices: eachService				depth: newDepth				visited: visitedServices				indexStack: (indexStack copyWith: index)				do: aBlock]</body><body package="ADvance2">visibleScripts	^((self messageEdges select: [:each | each vertex1 == self])		collect: [:each | each initiatorService]) asSet</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>accessing</category><body package="ADvance2">attributes	| contextClientRelations |	contextClientRelations := self contextClientRelations.	^self clientRelations reject: [:each | contextClientRelations includes: each]</body><body package="ADvance2">attributesText	^attributesText</body><body package="ADvance2">attributesText: aText	attributesText := aText</body><body package="ADvance2">classNameText	^classNameText</body><body package="ADvance2">clientRelations	cachedClientRelations isNil ifTrue: [cachedClientRelations := self structureFilter remainingClientRelations: self domain clientRelations].	^cachedClientRelations</body><body package="ADvance2">contextClientRelations	cachedContextClientRelations isNil		ifTrue:			[| environment |			environment := self subject environment.			cachedContextClientRelations := self clientRelations select: [:each | environment includes: each roleClass]].	^cachedContextClientRelations</body><body package="ADvance2">createClassViewData	| result |	result := (AD2ClassSpec newFor: self domain)				location: self location rounded;				visible: self visible;				scripts: (self visibleScripts collect: [:each | each extendedSelector]);				layouts: self computeLayoutSpecs;				backgroundColor: self backgroundColor;				showTypes: showsTypes; "Don't use accessors, because nil stands for default."				showAttributes: showsAttributes;				showServices: showsServices				yourself.	self hasLocalFilter ifTrue: [result filter: self structureFilter].	^result</body><body package="ADvance2">domainType	^#class</body><body package="ADvance2">fullName	self domain isNil ifTrue: [^'nil'].	^self domain fullName asString</body><body package="ADvance2">isVisible: aBoolean	self visible == aBoolean ifTrue: [^self].	self visible: aBoolean</body><body package="ADvance2">layersMenu: aMenuBuilder 	"Add menu entries to aMenuBuilder."	aMenuBuilder beginSubMenuLabeled: 'Layers'; 		addLabel: (self showsNamespaces			ifTrue: ['Hide']			ifFalse: ['Show'])			, ' Namespace' value: [self toggleShowsNamespaces]; 		addLabel: (self showsAttributes			ifTrue: ['Hide']			ifFalse: ['Show'])			, ' Attributes' value: [self toggleShowsAttributes]; 		addLabel: (self showsServices			ifTrue: ['Hide']			ifFalse: ['Show'])			, ' Services' value: [self toggleShowsServices]; 		addLabel: (self showsTypes			ifTrue: ['Hide']			ifFalse: ['Show'])			,' Types' value: [self toggleShowsTypes]; 		endSubMenu</body><body package="ADvance2">messageCounter	^messageCounter</body><body package="ADvance2">messageCounter: anInteger	messageCounter := anInteger</body><body package="ADvance2">name	self domain isNil ifTrue: [^'nil'].	^self showsNamespaces 		ifTrue: [self fullName]		ifFalse: [self domain name asString]</body><body package="ADvance2">regenerateClassNameText	"Regenerate the classNameText."	| theName rawText |	theName := (self domainIsSubject and: [self domain ~= self applicationModel domain baseClass])				ifTrue: [self name , '\«subject»']				ifFalse: [self name].	rawText := theName asText withCRs allBold.	self isAbstract ifTrue: [rawText := rawText emphasizeAllWith: #italic].	classNameText := self applicationModel getTextFor: rawText</body><body package="ADvance2">services	cachedServices isNil ifTrue: [cachedServices := self computeServices].	^cachedServices</body><body package="ADvance2">servicesText	^servicesText</body><body package="ADvance2">servicesText: aText	servicesText := aText</body><body package="ADvance2">structureFilter	"Use the global filter if local filter is undefined."	^structureFilter isNil		ifTrue: [self applicationModel structureFilter]		ifFalse: [structureFilter]</body><body package="ADvance2">structureFilter: aFilter	structureFilter := aFilter</body><body package="ADvance2">toggleShowsNamespaces	self showsNamespaces: self showsNamespaces not.	self applicationModel beModified.	self updateContents</body><body package="ADvance2">visible	^visible</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>filtering</category><body package="ADvance2">connectedServices	"^&lt;OrderedCollection of: AD2Service&gt; Answer a collection of my services that have a message	relation to other classes."	| result |	result := OrderedCollection new.	self edges do: [:each | each domainType == #message ifTrue: [result add: (each vertex1 == self					ifTrue: [each message initiatorService]					ifFalse: [each message participantService])]].	^result</body><body package="ADvance2">createFilterFor: aCollectionOfServices	| instanceServices classServices instanceSelectors classSelectors |	instanceServices := aCollectionOfServices reject: [:each | each isMeta].	classServices := aCollectionOfServices select: [:each | each isMeta].	instanceSelectors := instanceServices collect: [:each | each selector].	classSelectors := classServices collect: [:each | each selector].	^self 		createFilterWithFilteredInstSelectors: self domain selectors - instanceSelectors 		withFilteredClassSelectors: self domain class selectors - classSelectors</body><body package="ADvance2">createFilterWithFilteredInstSelectors: filteredInstanceSelectors withFilteredClassSelectors: filteredClassSelectors	^self getEmptyFilter		 setFilteredInstMethods: filteredInstanceSelectors;		 setFilteredClassMethods: filteredClassSelectors;		 yourself</body><body package="ADvance2">createIronCurtainFilter	"^&lt;AD2StoredFilter&gt; Answer a filter that filters all services."	^AD2StoredFilter new		 name: 'Iron Curtain (filters all serives)';		 isFilteringClassMethods: true;		 setFilteredInstProtocols: #('*');		 yourself</body><body package="ADvance2">filterForFilteringNonScriptServices	"^&lt;AD2MethodFilter&gt; Answer a filter for filtering the receivers non-script services."	| connectedServices |	connectedServices := self connectedServices.	^connectedServices isEmpty		ifTrue: [self getIronCurtainFilter]		ifFalse: [self createFilterFor: connectedServices]</body><body package="ADvance2">getEmptyFilter	"^&lt;AD2MethodFilter&gt; Answer an empty filter, i.e. that filters no service."	^self advance filterEnvironment getEmptyFilter</body><body package="ADvance2">getIronCurtainFilter	"^&lt;AD2Filter&gt; Answer a filter that filters all services. Create it - if necessary."	| id baseClass key environment |	id := 32168.	baseClass := AD2Filters.	key := baseClass -&gt; id.	environment := self advance filterEnvironment.	(environment includesKey: key)		ifFalse: [environment save: (self createIronCurtainFilter					 id: id;					 baseClass: baseClass;					 yourself)].	^environment safeAtKey: key</body><body package="ADvance2">setFilterForFilteringNonScriptServices	"Set a filter that filters all services not in use in scripts."	self structureFilter: self filterForFilteringNonScriptServices</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>accessing edges</category><body package="ADvance2">associationTo: aClassModel attribute: attributeName	^self outgoingAssociationEdges detect: [:each | each vertex2 == aClassModel and: [each clientRelation roleName = attributeName]]		ifNone: [nil]</body><body package="ADvance2">edges	^edges</body><body package="ADvance2">messageEdges	^self edges select: [:each | each domainType == #message]</body><body package="ADvance2">numberOfEdgesTo: vertex2	^self outgoingAssociationOrInheritanceEdges inject: 0 into: [:sum :next | next vertex2 == vertex2			ifTrue: [sum + 1]			ifFalse: [sum]]</body><body package="ADvance2">outgoingAssociationEdges	^self edges select: [:each | each vertex1 == self and: [each domainType == #association]]</body><body package="ADvance2">outgoingAssociationOrInheritanceEdges	^self edges select: [:each | each vertex1 == self and: [each domainType == #association or: [each domainType == #inheritance]]]</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>accessing shape</category><body package="ADvance2">area	| extent |	extent := self extent.	^self location - (extent x / 2 @ 0) extent: extent</body><body package="ADvance2">backgroundColor	^backgroundColor</body><body package="ADvance2">backgroundColor: aColorValue 	"Sets the instance variables value and updates the display."	aColorValue ~= self backgroundColor		ifTrue: 			[backgroundColor := aColorValue.			self applicationModel beModified.			self updateContents]</body><body package="ADvance2">extent	cachedExtent isNil ifTrue: [cachedExtent := self computeExtent].	^cachedExtent</body><body package="ADvance2">firstDividerVOffset	^4 + self classNameText unscaledHeight + self location y</body><body package="ADvance2">origin	^self location - (self extent x / 2 @ 0)</body><body package="ADvance2">origin: aPoint	self location: aPoint + (self extent x / 2 @ 0)</body><body package="ADvance2">secondDividerVOffset	^self attributesText unscaledHeight + self firstDividerVOffset</body><body package="ADvance2">showsAttributes	^showsAttributes isNil		ifTrue: [self applicationModel showAttributes value]		ifFalse: [showsAttributes]</body><body package="ADvance2">showsAttributes: aBoolean	"If aBoolean is the default given by the diagram's settings, the 	value is set to nil; otherwise aBoolean is taken."	showsAttributes := aBoolean == self applicationModel showAttributes value				ifTrue: [nil]				ifFalse: [aBoolean].	self applicationModel beModified.	self updateContents</body><body package="ADvance2">showsNamespaces	^showsNamespaces isNil		ifTrue: [self applicationModel showNamespaces value]		ifFalse: [showsNamespaces]</body><body package="ADvance2">showsNamespaces: aBoolean	"If aBoolean is the default given by the diagram's settings, the 	value is set to nil; otherwise aBoolean is taken."	showsNamespaces := aBoolean == self applicationModel showNamespaces value				ifTrue: [nil]				ifFalse: [aBoolean].	self applicationModel beModified.	self updateContents</body><body package="ADvance2">showsServices	^showsServices isNil		ifTrue: [self applicationModel showServices value]		ifFalse: [showsServices]</body><body package="ADvance2">showsServices: aBoolean 	"If aBoolean is the default given by the diagram's settings, the 	value is set to nil; otherwise aBoolean is taken."	showsServices := aBoolean == self applicationModel showServices value				ifTrue: [nil]				ifFalse: [aBoolean].	self applicationModel beModified.	self updateContents</body><body package="ADvance2">showsTypes	^showsTypes isNil		ifTrue: [self applicationModel showTypes value]		ifFalse: [showsTypes]</body><body package="ADvance2">showsTypes: aBoolean 	"If aBoolean is the default given by the diagram's settings, the 	value is set to nil; otherwise aBoolean is taken."	showsTypes := aBoolean == self applicationModel showTypes value				ifTrue: [nil]				ifFalse: [aBoolean].	self applicationModel beModified.	self updateContents</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private</category><body package="ADvance2">computeExtent	"^&lt;Point&gt;	Compute my extent."	| minWidth text1 text2 text3 resultWidth resultHeight |	minWidth := 50.	text1 := self classNameText rescale.	text2 := self attributesText rescale.	text3 := self servicesText rescale.	resultWidth := 18 + (minWidth max: (text1 unscaledWidth max: (text2 unscaledWidth max: text3 unscaledWidth))).	resultHeight := 7 + text1 unscaledHeight + text2 unscaledHeight + text3 unscaledHeight.	^resultWidth @ resultHeight</body><body package="ADvance2">editRelation: aClientRelation	"Check whether aClientRelation is a simple enough to be edited via Attribute Editor.	If so, open an Attribute Editor with values predefined from aClientRelation. Otherwise	use a raw requester. If accepted the old relation is removed and a new one is declared."	| typeString explanationString roleNameString oldRoleName implementationType dialog oldImplementationType |	explanationString := nil.	roleNameString := nil.	oldRoleName := aClientRelation roleName.	implementationType := nil.	oldImplementationType := aClientRelation implementation.	typeString := (aClientRelation role isKindOf: IT1ClassType)				ifTrue:					[dialog := self advance attributeEditorClass new setAspectsFrom: aClientRelation; yourself.					(dialog openInterface: #windowSpec for: self window)						ifFalse: [^false].					explanationString := dialog comment value.					roleNameString := dialog roleName value.					implementationType := (self advance typesClass implementationFor: dialog implementation value).					dialog typeString]				ifFalse: [roleNameString :=  oldRoleName. "stays unchanged, only the type class changes."						implementationType := oldImplementationType.						self adDialog							request: ('Enter the type for &lt;1s&gt;:' expandMacrosWith: aClientRelation extendedRoleName)							initialAnswer: aClientRelation roleNotation							onCancel: [^false]							for: self window].	"Update of roleName or implementation: rename variable (if implementation is uncahnged), delete old relation and add a new one."	(oldRoleName ~= roleNameString or: [implementationType ~= oldImplementationType]) "espacially: dialog was used to ask for values, so it is not nil"		ifTrue: [self removeClientRelation: aClientRelation updateDiagram: false.				dialog declareClientRelationFor: self domain.				(oldRoleName ~= roleNameString and: [implementationType = oldImplementationType])					ifTrue: [self renameVariable: oldRoleName to: roleNameString implementation: implementationType].				(oldRoleName ~= roleNameString and: [implementationType ~= oldImplementationType])					ifTrue: [ICC1Dialog warn: 'No automatic update of variable references is possible\because of changing implementation type, please\update references manually.' withCRs].				self updateAttributes]		ifFalse: [aClientRelation explanation: explanationString.				aClientRelation updateTypeTo: typeString.				self updateAttributes].	self applicationModel redrawAll; beModified.	^true</body><body package="ADvance2">generateComposedTextFrom: aCollection	"Answer a composed text from aCollection. The text represents a list of	elements of aCollection."	| aStream |	aCollection isEmpty ifTrue: [^self applicationModel emptyText].	aStream := TextStream on: (String new: 200).	aCollection do: [:aString | aStream nextPutAllText: aString asText]		separatedBy: [aStream cr].	^self applicationModel getTextFor: aStream contents</body><body package="ADvance2">getTargetClassWith: aCursor	"Request a point indicating a target class symbol."	| myController editor aPointOrNil odObject model |	self window checkForEvents.	myController := self applicationModel controller.	editor := self applicationModel editor.	myController		hideFooterAndDo:			[myController showStatus: 'Select the target class.'.			(aPointOrNil := editor getStartPointWithCursor: aCursor) isNil ifTrue: [^nil].			(odObject := editor objectAtCursor: aPointOrNil) isNil ifTrue: [^nil].			model := odObject model.			^(model domainType == #class)				ifTrue: [model]				ifFalse: [nil]]</body><body package="ADvance2">removeObsoleteMessageModels	| services obsoleteModels |	services := self services.	obsoleteModels := self applicationModel messageModels select: [:each | (self = each vertex2 and: [(services includes: each participantService) not])					or: [self = each vertex1 and: [(services includes: each initiatorService) not]]].	self applicationModel removeMessageModels: obsoleteModels</body><body package="ADvance2">renameVariable: oldRoleName to: roleNameString implementation: implementationString 	"If renaming is done for instVar or classInstVar attributes, refactoring is used to rename	the belonging variables. Renaming has to be done twice because new relation is already	added (so we go first back and then force)."		| refactoringClass targetClass |	implementationString == #classVar 		ifTrue: 			[ICC1Dialog warn: 'References to shared variables have to be updated manually.' withCRs.				^self].	(#(#instVar #classInstVar) includes: implementationString) "otherwise: no variable update necessary"		ifFalse: [^self].	((refactoringClass := #{Refactory.Browser.RenameInstanceVariableRefactoring} valueOrDo: [nil]) isNil)		ifTrue: [ICC1Dialog warn: 'Update of variable references requires RefactoringBrowser,\please update references manually.' withCRs.				^self].	targetClass := (implementationString == #instVar) 		ifTrue: [self domain]		ifFalse: [self domain class]. "implementationString == #classInstVar"	"rename it back"	(refactoringClass 		rename: roleNameString		to: oldRoleName		in: targetClass) execute.	"do the really wanted renaming"	(refactoringClass 		rename: oldRoleName		to: roleNameString		in: targetClass) execute.</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>actions-basics</category><body package="ADvance2">addClasses: aCollectionOfClasses newClassType: aString	| additionalClasses newClasses |	additionalClasses := aCollectionOfClasses asSet - self subject allClasses.	additionalClasses isEmpty ifTrue: [^self adDialog message: ('The current context already contains all&lt;n&gt;&lt;1s&gt; of &lt;2s&gt;.' expandMacrosWith: aString with: self name)			for: self window].	newClasses := self chooseClassesToAdd: additionalClasses titled: 'Add ' , aString.	newClasses isEmpty ifTrue: [^self].	self applicationModel domain addClasses: newClasses saveNow: false. "saving is done with diagram saving"	self applicationModel controller updateDiagram</body><body package="ADvance2">basicAddMessageSendFrom: initiatorService to: participantService addScript: aBoolean	initiatorService addMessageSendTo: participantService.	aBoolean ifTrue: [self addSingleScript: initiatorService depth: 1]</body><body package="ADvance2">basicRemoveFilter	structureFilter := nil.	self updateServices.	self updateAttributes</body><body package="ADvance2">chooseClassesToAdd: additionalClasses titled: title	| sortedClasses |	sortedClasses := additionalClasses asSortedCollection: [:a :b | a fullName &lt;= b fullName].	^(self adDialog new title: title; yourself)		chooseMultiple: 'Select the classes you want to add to the subject.'		fromList: (sortedClasses collect: [:each | each fullName ])		values: sortedClasses		buttons: #()		values: #()		lines: 10		cancel: [^#()]		for: self window</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>printing</category><body package="ADvance2">displayString	^self name</body><body package="ADvance2">printOn: aStream	aStream nextPutAll: 'anADClassModel on: '; nextPutAll: self name</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>utility</category><body package="ADvance2">attributeNotationFor: aClientRelation addType: aBoolean 	| aStream |	aStream := WriteStream on: (String new: 60).	aStream nextPutAll: aClientRelation extendedRoleName.	aBoolean 		ifTrue: 			[aStream nextPutAll: ' : '.			aClientRelation role printNotationOn: aStream				showNamespaces: self showsNamespaces].	^aStream contents</body><body package="ADvance2">indexStringFor: indexStack	| aStream |	aStream := (String new: 10) writeStream.	indexStack do: [:each | aStream nextPutAll: each printString]		separatedBy: [aStream nextPut: $.].	^aStream contents</body><body package="ADvance2">mapToClasses: aCollectionOfBehavior	^aCollectionOfBehavior collect: [:each | each isMeta			ifTrue: [each soleInstance]			ifFalse: [each]]</body><body package="ADvance2">print: aString tabLevel: tabLevel on: aStream	aString do: [:c | c = Character cr			ifTrue: [aStream crtab: tabLevel]			ifFalse: [aStream nextPut: c]]</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	edges := OrderedCollection new.	messageCounter := 1.	visible := true</body><body package="ADvance2">release	edges := nil.	super release</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private-relations</category><body package="ADvance2">addRelationTo: serverOrNil	^self addRelationTo: serverOrNil updateDiagram: true</body><body package="ADvance2">addRelationTo: serverOrNil updateDiagram: aBoolean	| dialog |	dialog := self advance attributeEditorClass new.	dialog container value: self domain fullName.	serverOrNil isNil ifFalse: [dialog component value: serverOrNil fullName].	(dialog openInterface: #windowSpec for: self window)		ifFalse: [^false].	dialog declareClientRelationFor: self domain.	self updateAttributes.	aBoolean		ifTrue: [self applicationModel controller updateDiagram]		ifFalse: [self applicationModel redrawAll; beModified].	^true</body><body package="ADvance2">computeLayoutSpecs	"^&lt;OrderedCollection of: AD2LayoutSpec&gt;"	^(self outgoingAssociationEdges)		collect:			[:each |			| aLayoutSpec |			aLayoutSpec := AD2LayoutSpec new						 vertex2: each vertex2 domain;						 attribute: each clientRelation roleName;						aggregationType: each aggregationType;						 yourself.			1 to: 2 do: [:index | (each autoLayout at: index)					ifFalse: [aLayoutSpec layoutAt: index put: (each originLayoutAt: index)]].			aLayoutSpec]</body><body package="ADvance2">getServer	^self getTargetClassWith: (Cursor			image: (self advance diagramPainterClass associationCursor palette: MappedPalette whiteBlack)			mask: self advance diagramPainterClass associationCursor			hotSpot: 1 @ 1			name: #Sarah)</body><body package="ADvance2">relatedClasses	"return a Set of classes which have associations with this class, with the maximum association depth	of the applicationModel AD2DiagramModel"	| depth environment |	depth := self applicationModel associationDepthOrNil.	environment := self subject environment.	^depth isNil		ifTrue: [self subject allClasses]		ifFalse: [(self domain transitiveRelatedClassesWithDepth: depth)				select: [:each | environment includes: each]]</body><body package="ADvance2">removeClientRelation: aClientRelation updateDiagram: aBoolean	self domain removeClientRelation: aClientRelation roleName implementation: aClientRelation implementation.	self updateAttributes.	aBoolean		ifTrue: [self applicationModel controller updateDiagram]		ifFalse: [(self applicationModel) redrawAll; beModified]</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private-services</category><body package="ADvance2">computeInitiators	| selectors dialog |	selectors := (self services collect: [:each | each selector]) asSet.	selectors isEmpty ifTrue: [^Array new].	dialog := self advance searchInitiatorsDialogClass new.	dialog selectors: selectors asArray.	^dialog open		ifTrue: [self mapToClasses: dialog resultSet]		ifFalse: [nil]</body><body package="ADvance2">computeParticipants	| selectors dialog |	selectors := Set new: 50.	self services do: [:each | selectors addAll: each compiledMethod allSymbolLiterals].	selectors isEmpty ifTrue: [^Array new].	dialog := self advance searchParticipantsDialogClass new.	dialog selectors: (self advance structureFilterClass filterForParticipantsSearch: selectors asArray).	^dialog open		ifTrue: [self mapToClasses: dialog resultSet]		ifFalse: [nil]</body><body package="ADvance2">computeServices	"^&lt;OrderedCollection of: AD2Service&gt; Answer the filtered services for this class."	| instanceSelectors classSelectors |	instanceSelectors := self structureFilter instanceMethodsFrom: self domain.	classSelectors := self structureFilter classMethodsFrom: self domain.	^(instanceSelectors collect: [:each | AD2Service class: self domain selector: each])		, (classSelectors collect: [:each | AD2Service class: self domain class selector: each])</body><body package="ADvance2">regenerateServicesText	"Regenerate the services texts."	self servicesText: (self showsServices			ifTrue: [self generateComposedTextFrom: (self services collect: [:each | each extendedAndMappedSelectorText])]			ifFalse: [self services isEmpty					ifTrue: [self applicationModel emptyText]					ifFalse: [self applicationModel dottedText]])</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private-accessing</category><body package="ADvance2">subject	^self applicationModel domain</body><body package="ADvance2">visible: aBoolean	visible := aBoolean.	self changed: #visible with: aBoolean.	self applicationModel beModified</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>invalidation</category><body package="ADvance2">flushCachesTranscript show: 'flush '.	self flushExtentCache</body><body package="ADvance2">flushExtentCache	cachedExtent := nil</body><body package="ADvance2">flushIsAbstractCache	cachedIsAbstract := nil</body><body package="ADvance2">flushRelationCaches	cachedClientRelations := nil.	cachedContextClientRelations := nil</body><body package="ADvance2">flushServicesCache	cachedServices := nil</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>menu creation</category><body package="ADvance2">actionMenu: aMenuBuilder	"Add menu entries to aMenuBuilder."	(self domainIsSubject and: [self domain ~= self applicationModel domain baseClass])		ifTrue: [aMenuBuilder addLabel: 'Expand...' value: [self expandSubject]].	aMenuBuilder		 addLabel: 'Open...' value: [self spawnHierarchy];		 line;		 addLabel: 'Filter...' value: [self editFilter];		 addLabel: 'Scripts...' value: [self applicationModel controller editScripts];		 addLabel: 'Remove filter' value: [self removeFilter];		 addLabel: 'Remove scripts' value: [self removeScripts];		 line.	self layersMenu: aMenuBuilder.	aMenuBuilder		 line;		 addLabel: 'Hide' value: [self doHide];		 addLabel: 'Delete' value: [self applicationModel controller removeClassesFromSubject];		 line.	self addingMenu: aMenuBuilder.	self utilitiesMenu: aMenuBuilder.	aMenuBuilder 		line; 		addLabel: 'Properties...' value: [self applicationModel controller editProperties];		line;		addLabel: 'Change color...' value: [self pickBackgroundColor];		addLabel: 'Default color' value: [self resetBackgroundColor]</body><body package="ADvance2">addingMenu: aMenuBuilder	"Add menu entries to aMenuBuilder."	aMenuBuilder		 beginSubMenuLabeled: 'Add';		 addLabel: 'Attribute...' value: [self addAttribute];		 addLabel: 'Association...' value: [self addAssociation];		 addLabel: 'Message...' value: [self addMessage];		 line;		 addLabel: 'Related classes...' value: [self addRelatedClasses];		 addLabel: 'Initiators...' value: [self addInitiators];		 addLabel: 'Participants...' value: [self addParticipants];		 endSubMenu</body><body package="ADvance2">utilitiesMenu: aMenuBuilder	"Add menu entries for submenu 'utilities' to aMenuBuilder."	aMenuBuilder		 beginSubMenuLabeled: 'Utilities';		 addLabel: 'File out as...' value: [self fileOutClass];		 addLabel: 'Hardcopy' value: [self hardcopy];		 addLabel: 'Spawn...' value: [self spawn];		 line.	aMenuBuilder addLabel: 'Move to...' value: [self moveClass].	aMenuBuilder 		"addLabel: 'Rename as...' value: [self applicationModel controller unimplemented];"		 addLabel: 'Remove...' value: [self applicationModel controller removeClassesFromSystem];		 line;		 addLabel: 'Check types...' value: [self checkTypes];		 endSubMenu</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>private-attributes</category><body package="ADvance2">regenerateAttributesText	"Regenerate the attributes texts."	| attributes |	attributes := self attributes.	self attributesText: (self showsAttributes			ifTrue: [self generateComposedTextFrom: (attributes collect: [:each | self attributeNotationFor: each addType: self showsTypes])]			ifFalse: [attributes isEmpty					ifTrue: [self applicationModel emptyText]					ifFalse: [self applicationModel dottedText]])</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>displaying</category><body package="ADvance2">displayIn: anEditor	| aPart |	aPart := (NVVisibilityWrapper on: (NVCachingWrapper on: (AD2ClassPart new model: self; yourself)))				isVisible: self visible; yourself.	(anEditor layers at: 4) add: aPart.	aPart updateForDisplay</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel</class-id> <category>accessing messages</category><body package="ADvance2">startLocationFor: aService localNo: localNo sum: sumOfLocalMessages	| aPoint index lineGrid |	lineGrid := self servicesText unscaledHeight / (self services size max: 1).	aPoint := self area right @ (self secondDividerVOffset + (3 + (localNo * (lineGrid - 6) / (sumOfLocalMessages + 1)))).	self showsServices ifFalse: [^aPoint].	index := self services indexOf: aService.	^aPoint + (0 @ (lineGrid * (index - 1)))</body><body package="ADvance2">stopLocationFor: aService	| aPoint index lineGrid |	lineGrid := self servicesText unscaledHeight / (self services size max: 1).	aPoint := self area left @ (self secondDividerVOffset + (lineGrid / 2)).	self showsServices value ifFalse: [^aPoint].	index := self services indexOf: aService.	^aPoint + (0 @ (lineGrid * (index - 1)))</body></methods><methods><class-id>ICC.ADvance.AD2ClassModel class</class-id> <category>constants</category><body package="ADvance2">doubleClickList	"^&lt;Array of: (Association key: String value: Symbol)&gt;	Answer a mapping from menu items to selector symbols that are performed. This mapping is	used in the Painter Preferences dialog to assign actions to double clicks which are combined	with different keyboard events.	@Post	The result size should be &gt;= 3."	^(Array new: 5)		at: 1 put: 'Properties...' -&gt; #editProperties;		at: 2 put: 'Spawn hierarchy...' -&gt; #spawnHierarchy;		at: 3 put: 'Spawn...' -&gt; #spawn;		at: 4 put: 'Filter...' -&gt; #editFilter;		at: 5 put: 'Check types...' -&gt; #checkTypes;		yourself</body></methods><methods><class-id>ICC.ADvance.AD2MessagePart</class-id> <category>updating</category><body package="ADvance2">updateForDisplayScaled: scale	| box1 box2 |	super updateForDisplayScaled: scale.	box1 := (self model originBoxAt: 1) scaledBy: scale.	box2 := (self model originBoxAt: 2) scaledBy: scale.	self area: (self area merge: (box1 merge: box2))</body></methods><methods><class-id>ICC.ADvance.AD2MessagePart</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	aGraphicsContext paint: ColorValue black.	self symbol displayStrokedOn: aGraphicsContext.	self line displayStrokedOn: aGraphicsContext.	self isSelected ifFalse: [^self].	aGraphicsContext paint: SymbolicPaint selectionBackground.	self displaySelectionMarkerOn: aGraphicsContext</body></methods><methods><class-id>ICC.ADvance.AD2MessagePart</class-id> <category>testing</category><body package="ADvance2">hasCursor: aPoint	^self line ad2IsNearTo: aPoint</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator</class-id> <category>accessing</category><body package="ADvance2">band	"Return a band to write parts of the image into.	The width of the band is equal to the images', the height depends from the buffer size."	^band isNil		ifTrue: [band := Pixmap extent: extent x @ (((self class bufferSize / (extent x * 3 + 1)) floor max: 1) min: extent y)]		ifFalse: [band]</body><body package="ADvance2">extent: aPoint	"Set the extent of the image to be stored."	extent := aPoint</body><body package="ADvance2">imageBlock: aBlock	"Set the block to get the image from.	The block is called with a GraphicsContext an writes the image into it."	imageBlock := aBlock</body><body package="ADvance2">paletteBuffer	^paletteBuffer isNil		ifTrue: [paletteBuffer := Dictionary new]		ifFalse: [paletteBuffer]</body><body package="ADvance2">stream: aICCPNGStream	"Set the stream to write the Image into."	stream := aICCPNGStream</body><body package="ADvance2">zInBuffer	^zInBuffer isNil		ifTrue: [zInBuffer := ByteArray new: extent x * 3 +1]		ifFalse: [zInBuffer]</body><body package="ADvance2">zOutBuffer	^zOutBuffer isNil		ifTrue: [zOutBuffer := CIntegerType char gcMalloc: extent x * 3 + 1]		ifFalse: [zOutBuffer]</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator</class-id> <category>private</category><body package="ADvance2">bandRowIndex: rowIndex	"Return the row with the index rowIndex of the current band."	^((self band contentsOfArea: (0 @ rowIndex extent: extent x @ 1))		at: 1)		rowAt: 0</body><body package="ADvance2">close	stream close</body><body package="ADvance2">colorFor: colorIndex palette: palette	"Return a 3-elemental Array containing the red- green- and blue-intensities	of the value we get from an image.	For bit depth 8, the colorIndex is a paletteIndex."	^self paletteBuffer		at: colorIndex		ifAbsentPut:			[| p |			p := palette at: colorIndex.			Array				with: (p red * 255) truncated				with: (p green * 255) truncated				with: (p blue * 255) truncated]</body><body package="ADvance2">createPixelBandAt: bandOffset	"Get a band from the image."	| gc |	(gc := self band graphicsContext)		translation: 0 @ bandOffset negated;		clippingRectangle: (0 @ bandOffset extent: self band extent).	imageBlock value: gc</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator</class-id> <category>tools</category><body package="ADvance2">putIDAT	"Store the image data. Compress multiple bands according to the buffersize."	| i zBuffer |	self packInit.	stream		nextChunk: 'IDAT'.	i := 0.	zBuffer := self zInBuffer.	[self rowsDo:		[ :row || palette |		palette := self band palette.		self pack: i flush: 0.		zBuffer at: (i := 1) put: 0.		row do:			[ :pixelValue || color |			color := self colorFor: pixelValue palette: palette.			zBuffer				at: (i := i + 1) put: (color at: 1);				at: (i := i + 1) put: (color at: 2);				at: (i := i + 1) put: (color at: 3)]]	] valueNowOrOnUnwindDo:		[self pack: i flush: 4.		self packEnd]</body><body package="ADvance2">putIEND	stream nextChunk: 'IEND'</body><body package="ADvance2">putIHDR	stream		nextChunk: 'IHDR';		nextPutU4: extent x;		nextPutU4: extent y;		nextPutAll: #(8 2 0 0 0).</body><body package="ADvance2">putImage	"Encode anImage on a file named aFileName."	(extent isNil or: [imageBlock isNil or: [stream isNil]])		ifTrue: [self error: 'Insufficent data: Cannot proceed.'].	self putIHDR; putIDAT; putIEND</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator</class-id> <category>enumerating</category><body package="ADvance2">rowsDo: aBlock	"Evaluate aBlock with all the rows of the Image as argument."	| bandHeight |	bandHeight := self band height.	0		to: extent y - 1		by: bandHeight		do:			[:bandOffset |			self createPixelBandAt: bandOffset.			0 to: (bandHeight min: extent y - bandOffset) - 1				do: [:rowIndex | aBlock value: (self bandRowIndex: rowIndex)]]</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator</class-id> <category>packing</category><body package="ADvance2">pack: zInAvail flush: flush	"This is called from zInput and packEnd."	| result outSize return |	0 = zInAvail ifTrue: [^self "Nothing to do"].	outSize := extent x * 3 + 1.	zStream memberAt: #avail_in put: zInAvail.	[zStream		memberAt: #next_in put: self zInBuffer;		memberAt: #next_out put: self zOutBuffer;		memberAt: #avail_out put: outSize.	result := zLib deflate: flush. "0 = Z_NO_FLUSH, 4 = Z_FINISH"	(result = 0 or: [result = 1 and: [flush = 4]])		ifFalse: [self error: 'zlib - deflating failed'].	return := ByteArray new: outSize - (zStream memberAt: #avail_out).	self zOutBuffer copyAt: 0 to: return size: return size startingAt: 1.	stream nextPutAll: return.	((zStream memberAt: #avail_in) = 0 and: [(zStream memberAt: #avail_out) ~= 0])] whileFalse</body><body package="ADvance2">packEnd	"Finish packing and flush the zlib."	(zLib deflateEnd) = 0		ifFalse: [self error: 'zlib - cannot uninitialize']</body><body package="ADvance2">packInit	"Init the ZLIB for the packing process."	zLib := OS.ZLib.ZLibInterface new.	zStream := zLib zstream.	zStream		memberAt: #zalloc put: nil;		memberAt: #zfree put: nil.	(zLib deflateInitBestCompression)		= 0 ifFalse: [self error: 'zlib - cannot initialize'].</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator class</class-id> <category>accessing</category><body package="ADvance2">bufferSize	^1024 * 500</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator class</class-id> <category>instance creation</category><body package="ADvance2">putImage: anImage onFileNamed: aString	^self		putImageBlock:			[:gc |				gc					clear;					displayImage: anImage at: Point zero]		extent: anImage extent		onFileNamed: aString</body><body package="ADvance2">putImageBlock: aBlock extent: aPoint onFileNamed: aFileName	"Encode anImage on a file named aFileName."	| writer filename preExist |	filename := aFileName asFilename.	preExist := filename exists.	(writer := self new) imageBlock: aBlock; extent: aPoint; stream: (ICC.ADvance.ICCPNGStream on: filename).	[(SignalCollection 		with: ExternalLibrary libraryNotLoadedSignal 		with: ExternalLibraryHolder libraryNotFoundSignal)		handle: [:ex | self libraryMissing]		do: [writer putImage]]		valueOnUnwindDo:			[writer close.			preExist ifFalse: [filename delete]].	writer close.	^writer</body></methods><methods><class-id>ICC.ADvance.ICCPNGGenerator class</class-id> <category>private</category><body package="ADvance2">libraryMissing	LibraryMissing == true ifTrue: [^self].	LibraryMissing := true.	ICC.ADvance.AD2Dialog alert: 'The zlib library could not be found!  This library is required to create PNG images.On Windows platforms, a file called "ZLIB.DLL" is needed, this should be in the icc directory of your VisualWorks installation.On Unix, please check your LD_LIBRARY_PATH and make sure that "libz.so.1" is available.For more information about PNG and the ZLIB please visit http://www.libpng.org/.Please press OK to continue without creating the images.'</body></methods><methods><class-id>ICC.ADvance.NVMenuBuilder</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	manipulations := OrderedCollection new</body><body package="ADvance2">release	manipulations := nil.	super release</body></methods><methods><class-id>ICC.ADvance.NVMenuBuilder</class-id> <category>building</category><body package="ADvance2">addLabel: aString value: aValue enabled: booleanOrBlock	"Add to the menu aString as the key and aValue as the value. The key will	appear as the menu item. The value will be returned if the item is selected.	The booleanOrBlock disables a MenuItem if 'booleanOrBlock value' returns false."	self addLabel: aString value: aValue.	self itemLabeled: aString enabled: booleanOrBlock</body><body package="ADvance2">itemLabeled: labelOrLabelArray enabled: booleanOrBlock	manipulations add: labelOrLabelArray -&gt; booleanOrBlock</body></methods><methods><class-id>ICC.ADvance.NVMenuBuilder</class-id> <category>private</category><body package="ADvance2">buildMenu	"^&lt;Menu&gt;"	| tempMenu |	tempMenu := super buildMenu.	manipulations do:		[:each |		| menuItem |		(menuItem := self findMenuItem: each key in: tempMenu) notNil ifTrue: [menuItem enabled: each value]].	^tempMenu</body><body package="ADvance2">findMenuItem: label in: aMenu	"^&lt;MenuItem | nil&gt;."	| menu menuItem |	menu := aMenu.	(menuItem := menu menuItemLabeled: label ifNone: [nil]) isNil ifTrue: [^nil].	menuItem hasSubmenu ifTrue: [menu := menuItem submenu].	^menuItem</body></methods><methods><class-id>ICC.ADvance.AD2TextEditor</class-id> <category>accessing</category><body package="ADvance2">icon	^icon</body><body package="ADvance2">icon: aValue	icon := aValue</body><body package="ADvance2">label	^label</body><body package="ADvance2">label: aValue	label := aValue</body><body package="ADvance2">textHolder: anAspectAdaptor	textHolder := anAspectAdaptor</body></methods><methods><class-id>ICC.ADvance.AD2TextEditor</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	"Sets the window icon and label from the current settings."	super postBuildWith: aBuilder.	aBuilder window icon: self icon.	aBuilder window label: self label</body></methods><methods><class-id>ICC.ADvance.AD2TextEditor</class-id> <category>aspects</category><body package="ADvance2">textHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^textHolder</body></methods><methods><class-id>ICC.ADvance.AD2TextEditor class</class-id> <category>interface opening</category><body package="ADvance2">open: anAspectHolder label: aString icon: anIcon 	^self openOn: ((self new) textHolder: anAspectHolder; label: aString; icon: anIcon; yourself)</body></methods><methods><class-id>ICC.ADvance.IccHTMLCode</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"^&lt;String&gt;"	^'&lt;/CODE&gt;'</body><body package="ADvance2">startOfSelf	"^&lt;String&gt;"	^'&lt;CODE&gt;'</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferences</class-id> <category>accessing</category><body package="ADvance2">classInfoSelector	^classInfoSelector</body><body package="ADvance2">classInfoSource	^classInfoSource</body><body package="ADvance2">defaultFilter	^self advance filterEnvironment safeAtKey: self defaultFilterKey</body><body package="ADvance2">identity	^identity</body><body package="ADvance2">menuLabelsHaveImages	"Always true since ADvance 7.4."	^true	"^menuLabelsHaveImages"</body><body package="ADvance2">toolbarType	^toolbarType</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferences</class-id> <category>privileged-accessing</category><body package="ADvance2">classInfoSelector: aByteSymbol	"This value is set via prefereces dialog. The type caches become 	reset to really use the new information source."	classInfoSelector := aByteSymbol.	self advance types initialize</body><body package="ADvance2">classInfoSource: aByteSymbol	"This value is set via prefereces dialog. The type caches become 	reset to really use the new information source."	classInfoSource := aByteSymbol.	self advance types initialize</body><body package="ADvance2">defaultFilterName	| filter |	filter := self advance filterEnvironment atKey: self defaultFilterKey ifAbsent: [nil].	^filter isNil		ifTrue: ['&lt;none&gt;']		ifFalse: [filter name]</body><body package="ADvance2">defaultFilterName: aString	"This value is set via prefereces dialog."	| filter |	filter := self advance filterEnvironment at: aString ifAbsent: [nil].	self defaultFilterKey: (filter isNil			ifTrue: [filter]			ifFalse: [filter key])</body><body package="ADvance2">defaultSubjectMethodPackageName	^defaultSubjectMethodPackageName</body><body package="ADvance2">defaultSubjectMethodPackageName: aSymbol	defaultSubjectMethodPackageName := aSymbol</body><body package="ADvance2">defaultSubjectPackageName	^defaultSubjectPackageName</body><body package="ADvance2">defaultSubjectPackageName: aString	defaultSubjectPackageName := aString</body><body package="ADvance2">isModeForUsingSpecifiedClassPackage: aSelectionMode	aSelectionMode isNil		ifTrue: [^false].	^(self subjectPackageSelectionSelector: aSelectionMode) == #useSpecifiedClassPackage</body><body package="ADvance2">isModeForUsingSpecifiedMethodPackage: aSelectionMode	^(self subjectMethodPackageSelectionSelector: aSelectionMode) == #useSpecifiedMethodPackage</body><body package="ADvance2">isUsingSpecifiedMethodPackage	^self subjectMethodPackageSelectionSelector == #useSpecifiedMethodPackage</body><body package="ADvance2">isUsingSpecifiedPackage	^self subjectPackageSelectionSelector == #useSpecifiedClassPackage</body><body package="ADvance2">menuLabelsHaveImages: aBoolean	menuLabelsHaveImages := aBoolean</body><body package="ADvance2">subjectClassPackage	"Determine the package to use from the preferences, ask the user if necessary."	^self perform: self subjectPackageSelectionSelector</body><body package="ADvance2">subjectMethodPackage	"Determine the package to use from the preferences, ask the user if necessary."	^self perform: self subjectMethodPackageSelectionSelector</body><body package="ADvance2">subjectMethodPackageSelectionMode	^subjectMethodPackageSelectionMode</body><body package="ADvance2">subjectMethodPackageSelectionMode: aSymbol	subjectMethodPackageSelectionMode := aSymbol</body><body package="ADvance2">subjectMethodPackageSelectionModeList	^self subjectMethodPackageSelectionModeOptions keys asOrderedCollection</body><body package="ADvance2">subjectPackageSelectionMode	^subjectPackageSelectionMode</body><body package="ADvance2">subjectPackageSelectionMode: aSymbol	subjectPackageSelectionMode := aSymbol</body><body package="ADvance2">subjectPackageSelectionModeList	^self subjectPackageSelectionModeOptions keys asOrderedCollection</body><body package="ADvance2">toolbarType: aByteSymbol	toolbarType := aByteSymbol</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferences</class-id> <category>private-accessing</category><body package="ADvance2">defaultFilterKey	^defaultFilterKey</body><body package="ADvance2">defaultFilterKey: anAssociation	defaultFilterKey := anAssociation</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferences</class-id> <category>private-package</category><body package="ADvance2">promptForPackage	"Lists the available packages for selection."	^self promptForPackage: 'Please choose a package from the list. Cancel will use the package determined by system settings.'</body><body package="ADvance2">promptForPackage: aMessage	"Lists the available packages for selection, shows the defaultPackageName for subjects classes as preselection."	| thePackageList thePackageNames |	thePackageList := Store.Registry allPackages asSortedCollection: [:x :y | x name &lt; y name].	thePackageNames := thePackageList collect: [:eachPackage | eachPackage name].	^self adDialog		choose: aMessage		fromList: thePackageNames		values: thePackageList		lines: 15		cancel: [nil]		for: nil</body><body package="ADvance2">subjectMethodPackageSelectionModeOptions	^(Dictionary new)		at: 'Prompt for package' put: #promptForPackage;		at: 'Use default / current package' put: #useDefaultPackage;		at: 'Use System Settings' put: #useSystemSettings;		at: 'Use specified package' put: #useSpecifiedMethodPackage;		yourself</body><body package="ADvance2">subjectMethodPackageSelectionSelector	^self subjectMethodPackageSelectionSelector: self subjectMethodPackageSelectionMode</body><body package="ADvance2">subjectMethodPackageSelectionSelector: aSubjectMethodPackageSelectionMode	^self subjectMethodPackageSelectionModeOptions at: aSubjectMethodPackageSelectionMode</body><body package="ADvance2">subjectPackageSelectionModeOptions	^(Dictionary new)		at: 'Prompt for package' put: #promptForPackage;		at: 'Use default / current package' put: #useDefaultPackage;		at: 'Use System Settings' put: #useSystemSettings;		at: 'Use specified package' put: #useSpecifiedClassPackage;		yourself</body><body package="ADvance2">subjectPackageSelectionSelector	^self subjectPackageSelectionSelector: self subjectPackageSelectionMode</body><body package="ADvance2">subjectPackageSelectionSelector: aSubjectPackageSelectionMode	^self subjectPackageSelectionModeOptions at: aSubjectPackageSelectionMode</body><body package="ADvance2">useDefaultPackage	"Answers the default package, which may be none."	^Store.Registry currentPackage</body><body package="ADvance2">useSpecifiedClassPackage	"Answers the package with the specified name. If it does not exist, the user is asked for the package to use instead."	| thePackage |	thePackage := Store.Registry packageNamed: self defaultSubjectPackageName.	^thePackage isNil 		ifTrue: [self promptForPackage] 		ifFalse: [thePackage]</body><body package="ADvance2">useSpecifiedMethodPackage	"Answers the package with the specified name. If it does not exist, the user is asked for the package to use instead."	| thePackage |	thePackage := Store.Registry packageNamed: self defaultSubjectMethodPackageName.	^thePackage isNil 		ifTrue: [self promptForPackage] 		ifFalse: [thePackage]</body><body package="ADvance2">useSystemSettings	"Answers nil to indicate that no behaviour different from that specified by system settings should be used."	^nil</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferences</class-id> <category>initialize-release</category><body package="ADvance2">initialize	identity := AD2Identity new.	classInfoSource := #selector.	classInfoSelector := #ad2ClassInfo.	subjectMethodPackageSelectionMode := (self subjectMethodPackageSelectionModeOptions keyAtValue: #useSystemSettings).	subjectPackageSelectionMode := (self subjectMethodPackageSelectionModeOptions keyAtValue: #useSystemSettings).	defaultSubjectMethodPackageName := nil.	defaultSubjectPackageName := nil.</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferences class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>examples</category><body package="ADvance2">getFirstDiagramOfFirstSubject	"self getFirstDiagramOfFirstSubject"	| apapi subjects |	apapi := self advance plugInAPI.	(subjects := apapi getAvailableSubjects) isEmpty ifTrue: [^nil].	subjects		do:			[:eachSubject |			| diagrams |			diagrams := apapi getDiagramsForSubject: eachSubject.			diagrams isEmpty ifFalse: [^diagrams first]].	^nil</body><body package="ADvance2">showAllSubjectsAndDiagrams	"self showAllSubjectsAndDiagrams"	| apapi |	apapi := self advance plugInAPI.	apapi getAvailableSubjects		do:			[:eachSubject |			Transcript cr; show: eachSubject name.			(apapi getDiagramsForSubject: eachSubject)				do: [:eachDiagram | Transcript crtab; show: eachDiagram name]]</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>API-GUI</category><body package="ADvance2">closeAllADvanceWindowsFor: aVisualOrNil	"Close all ADvance windows. Confirm if there are more than one ADvance window open."	| applications |	applications := self advance plugInAPI getAllRelatedApplications.	applications isEmpty ifTrue: [^self].	(applications size = 1 or: [(self adDialog notifier			 title: 'Please Confirm';			 setConfirmIcon;			 openCentered: true;			 yourself)			confirm: 'Close all windows and exit ADvance?'			initialAnswer: false			for: aVisualOrNil])		ifTrue: [applications do: [:each | each closeRequest]]</body><body package="ADvance2">getAboutPlugInsMenu	"^&lt;Menu&gt; Create and answer a menu for the about dialogs of the installed plug-ins."	| installedPlugIns counter |	installedPlugIns := self getInstalledPlugIns.	counter := 0.	^Menu		labelArray: (installedPlugIns				collect:					[:each |					counter := counter + 1.					'&amp;&lt;1p&gt; About &lt;2s&gt;' expandMacrosWith: counter with: each plugInName])		lines: Array new		values: (installedPlugIns collect: [:each | [each plugInShowAboutDialog]])</body><body package="ADvance2">getAllPainters	"^&lt;SortedCollection of: AD2DiagramPainter&gt; Answer an ordered collection of all	currently opened Diagram Painters."	^(self getAllRelatedApplications select: [:each | each isADvanceDiagramPainter])		asSortedCollection: [:a1 :a2 | a1 windowListMenuLabel &lt;= a2 windowListMenuLabel]</body><body package="ADvance2">getAllRelatedApplications	"^&lt;OrderedCollection of: AD2ApplicationModel&gt; Answer an ordered collection of all	currently opened ADvance application models."	| aCollection |	aCollection := OrderedCollection new.	ScheduledControllers scheduledControllers		do:			[:eachController |			| view |			view := eachController view.			view ad2IsApplicationWindow				ifTrue:					[| model |					model := eachController model.					(model notNil and: [model isADvanceApplicationModel])						ifTrue: [aCollection add: model]]].	^aCollection</body><body package="ADvance2">getPainterWindowsMenu	"^&lt;Menu&gt; Create and answer a sorted menu of all Diagram Painter windows. The	window selected by the user will be expanded, if necessary, and brought to front."	| painters counter |	painters := self getAllPainters.	counter := 0.	^Menu		labelArray: (painters				collect:					[:each |					| rawLabel |					counter := counter + 1.					rawLabel := '&amp;&lt;1p&gt; &lt;2s&gt;' expandMacrosWith: counter with: each windowListMenuLabel.					rawLabel contractTo: 36])		lines: Array new		values: (painters collect: [:each | [each bringToFront]])</body><body package="ADvance2">getPlugInsOpenMenu	"^&lt;Menu&gt; Create and answer sorted menu for invoking the installed plug-ins."	| installedPlugIns counter |	installedPlugIns := self getInstalledPlugIns.	counter := 0.	^Menu		labelArray: (installedPlugIns				collect:					[:each |					counter := counter + 1.					'&amp;&lt;1p&gt; &lt;2s&gt;' expandMacrosWith: counter with: each plugInName])		lines: Array new		values: (installedPlugIns collect: [:each | [each plugInOpen]])</body><body package="ADvance2">getPlugInsOpenMenuFor: aPainter	"^&lt;Menu&gt; Create and answer a sorted menu for invoking the installed plug-ins."	| installedPlugIns counter |	installedPlugIns := self getInstalledPlugIns.	counter := 0.	^Menu		labelArray: (installedPlugIns				collect:					[:each |					counter := counter + 1.					'&amp;&lt;1p&gt; &lt;2s&gt;' expandMacrosWith: counter with: each plugInName])		lines: Array new		values: (installedPlugIns collect: [:each | [each plugInOpenForPainter: aPainter]])</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>private</category><body package="ADvance2">markedAsPublicClass	"This class provides a public interface."</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>API-classes</category><body package="ADvance2">declareClass: aClass asAbstract: aBoolean	"^&lt;Boolean&gt;	Add or remove the abstract declaration if necessary.	Answer whether the declaration is modified."	| anOrganization |	anOrganization := self adBasics systemOrganization.	(anOrganization isAbstract: aClass)		= aBoolean ifTrue: [^false].	(anOrganization divineIsAbstract: aClass)		= aBoolean		ifTrue: [anOrganization removeDeclarationFor: aClass type: #abstract]		ifFalse: [anOrganization				addDeclarationFor: aClass				type: #abstract				value: aBoolean].	^true</body><body package="ADvance2">declareClass: aClass asPersistent: aBoolean	"^&lt;Boolean&gt;	Add or remove the persistency declaration if necessary.	Answer whether the declaration is modified."	| anOrganization |	anOrganization := self adBasics systemOrganization.	((anOrganization isPersistent: aClass) = aBoolean)		ifTrue: [^false].	aBoolean		ifTrue: [anOrganization				addDeclarationFor: aClass				type: #persistence				value: true]		ifFalse: [anOrganization removeDeclarationFor: aClass type: #persistence].	^true</body><body package="ADvance2">getClientRelationsFor: aClass in: anEnvironment	"^&lt;OrderedCollection of: IT1ClientRelation&gt;	Answer anOrderedCollection of aClass' relations in the context of enEnvironment."	^aClass clientRelations select: [:each | anEnvironment includes: each roleClass]</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>API-general</category><body package="ADvance2">deinstallPlugIn: aPlugIn	"Remove aPlugIn from the plug-in registry."	self advance plugInRegistry remove: aPlugIn</body><body package="ADvance2">getAPIVersion	"Answer the API's version."	^'1.0'</body><body package="ADvance2">getInstalledPlugIns	"^&lt;OrderedCollection of: Class&gt; Answer a list of the installed plug-ins."	^self advance plugInRegistry getInstalledPlugIns</body><body package="ADvance2">installPlugIn: aPlugIn	"Register aPlugIn for ADvance."	self advance plugInRegistry add: aPlugIn</body><body package="ADvance2">showMessage: message labeled: title for: aVisualOrNil	"Present the message to the user in a dialog labeled with title.	Continue processing when the user hits the 'OK' button or types cr."	(self adDialog notifier) title: title; message: message for: aVisualOrNil</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>API-diagrams</category><body package="ADvance2">getVisibleClassesInDiagram: aDiagram	"^&lt;OrderedCollection of: Class&gt;	Answer an OrderedCollection of aDiagram's visible classes."	^aDiagram visibleClasses</body><body package="ADvance2">removeDiagram: aDiagram	"Remove aDiagram from the system."	aDiagram subject removeDiagram: aDiagram name</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>documentation</category><body package="ADvance2">ADvanceMethods	^'For the list of plug-in interface methods provided by ADvance @see protocols	$API-subjects, $API-diagrams, $API-classes, $API-types and $API-general.'</body><body package="ADvance2">APIOrganization	^'ADvance Plug-ins communicate with ADvance via an Application Programming Interface (API).	Two types of functions make up the Plug-in API: plug-in methods and ADvance methods.	Plug-in methods are implemented in your plug-in and are called by ADvance; ADvance methods	are implemented by ADvance that your plug-in may call.	In general, all API functions operate identically on all platforms. However, in future releases	there may be several functions, whose operation is platform-specific. All platform-specific differences	are described in the documentation for the individual functions.	Unless otherwise stated, ownership for all API function parameters remains with the caller and	values are valid only for the duration of each call. For example, if ADvance passes your plug-in a	string, your plug-in should make its own copy of the string if you need to reference the string	after returning from that function. If you pass data to ADvance it will make its own private copy of	the data if necessary.	Declarations for all API functions as well as definitions of all types and structures used in the	API functions are found on class @thisClass.	The plug-in API is organized by type of requested data. Within each section, the methods are	listed alphabetically.'</body><body package="ADvance2">Introduction	^'ADvance plug-ins extend ADvance to include a wide range of capabilities.	Plug-ins are Smalltalk applications that are seamlessly integrated into ADvance, appearing simply as	supplemental capabilities. By accessing and implementing plug-ins, ADvance becomes your	hottest tool for Smalltalk.	Plug-ins offer a rich variety of functions and features to enhance and increase the functionality and	compatibility of ADvance. Plug-ins have been used as: Code Checkers, Documentation tools,	Code Viewers and Database tools.	The utilization of plug-in technology is constantly expanding beyond current applications.	Plug-ins can be installed by running a Smalltalk file-in or setup program supplied with the plug-in.	Plug-ins reside in the image and are detected by ADvance when it starts up. When ADvance	encounters data handled by a plug-in, it invokes the appropriate plug-in and gives it access	to all or a part its data. The plug-in remains active until the associated data is closed.'</body><body package="ADvance2">PlugInMethods	^'The ADvance plug-in should implement the following methods:	#markedAsADvancePlugIn	This is used to check whether a class provides a plug-in interface for ADvance.	The detection mechanism is started during the ADvance installation process.	#plugInInstall	This message is send to a plug-in after it is detected by ADvance.	It is intended that you check version compatibility between the current	ADvance plug-in interface and your plug-in. Use the ADvance method	#getAPIVersion for this test.	If appropriate then register your plug-in with ADvance method #installPlugIn:.	#plugInName	^&lt;String&gt;	Used to identify the plug-in in ADvance.	#plugInOpen	Open the plug-in.	#plugInOpenForPainter: aPainter	Open the plug-in, it is invoked by aPainter. You may use the painters plug-in	methods to access its state.	#plugInShowAboutDialog	This method should open an About dialog for your plug-in. For a simple	interface use the ADvance method #showMessage:inDialogLabeled:for:	#plugInShutdown	The plug-in is notified that it is in the process of uninstallation.	In this release this happens if ADvance is removed from the image.'</body><body package="ADvance2">ProgrammersView	^'Plug-ins are Smalltalk applications. The primary goal of the plug-in API is to allow existing	Smalltalk applications to seamlessly integrate with and enhance ADvance core functionality.	The plug-in API is designed to provide the maximum degree of flexibility with a lean interface.	Plug-ins are intended to be complementary to the tools of the core ADvance tool suite.	ADvance plug-ins are designed specifically to extend ADvance and are relatively simple	and lightweight.	With the current version of the Plug-in API, plug-ins are capable of:		Registering		Obtaining annotated smalltalk components in use by ADvance. These components are:			subjects, diagrams, classes, attributes, services and use-cases in use by ADvance		Modifying smalltalk components, annotations, code and diagrams through ADvance	The ADvance user interface remains relatively constant regardless of the plug-ins used. The	Diagram Painter has a menu entry for invoking plug-ins. However, Plug-ins may add user	interface to ADvance.'</body><body package="ADvance2">Structures	^'The structures in use by the ADvance plug-in interface are:	Subject, Diagram, Class, Attribute and Service.	This is subject to change!'</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>API-subjects</category><body package="ADvance2">getAvailableSubjects	"^&lt;SortedCollection of: AD2Subject&gt;	Answer a SortedCollection of the currently available subjects."	^self advance subjectEnvironment subjects</body><body package="ADvance2">getDiagramsForSubject: aSubject	"^&lt;OrderedCollection of: AD2Diagram&gt;	Answer an OrderedCollection of aSubject's diagrams."	^aSubject diagramsWithFake</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>ADvance</category><body package="ADvance2">advanceSubjectSpec	^#(#{ICC.ADvance.AD2Subject} #classNames: #(#{ICC.ADvance.AD2PlugInRegistry} #{ICC.ADvance.AD2PlugInInterface}))</body><body package="ADvance2">markedAsSubjectClass</body><body package="ADvance2">markedAsSystemSubject</body></methods><methods><class-id>ICC.ADvance.AD2PlugInInterface class</class-id> <category>API-types</category><body package="ADvance2">getImplementationTypes	"^&lt;Collection of: Symbol&gt; Answer the list of available implementation types."	^self advance typesClass implementationTypes</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>dialog classes</category><body package="ADvance2">addMessageDialogClass	^AD2AddMessageDialog</body><body package="ADvance2">attributeEditorClass	^AD2AttributeEditor</body><body package="ADvance2">classFilterDialogClass	^AD2ClassFilterEditor</body><body package="ADvance2">classPropertiesDialogClass	^AD2ClassPropertiesDialog</body><body package="ADvance2">diagramFilterDialogClass	^AD2DiagramFilterEditor</body><body package="ADvance2">diagramPainterClass	^AD2DiagramPainter</body><body package="ADvance2">diagramPropertiesClass	^AD2DiagramPropertiesDialog</body><body package="ADvance2">docuPreferencesDialogClass	^AD2DocuPreferencesDialog</body><body package="ADvance2">documenterClass	^AD2Documenter</body><body package="ADvance2">fileOutSubjectDialogClass	^AD2FileOutSubjectDialog</body><body package="ADvance2">filterBrowserClass	^AD2FilterBrowser</body><body package="ADvance2">filterEditorClass	^AD2FilterEditor</body><body package="ADvance2">filterPaletteClass	^AD2FilterPalette</body><body package="ADvance2">generalPreferencesDialogClass	^AD2GeneralPreferencesDialog</body><body package="ADvance2">messageNavigatorClass	^AD2MessageNavigator</body><body package="ADvance2">openDiagramDialogClass	^AD2OpenDiagramDialog</body><body package="ADvance2">painterPreferencesDialogClass	^AD2PainterPreferencesDialog</body><body package="ADvance2">printDialogClass	^AD2PrintDialog</body><body package="ADvance2">printerPreferencesDialogClass	^AD2PrinterPreferencesDialog</body><body package="ADvance2">scriptDocuDialogClass	^AD2ScriptDocuDialog</body><body package="ADvance2">scriptSelectionDialogClass	^AD2ScriptSelectionDialog</body><body package="ADvance2">searchInitiatorsDialogClass	^AD2SearchInitiatorsProgressDialog</body><body package="ADvance2">searchParticipantsDialogClass	^AD2SearchParticipantsProgressDialog</body><body package="ADvance2">subjectBrowserClass	^AD2SubjectBrowser</body><body package="ADvance2">subjectEditorClass	^AD2SubjectEditor</body><body package="ADvance2">subjectPropertiesClass	^AD2SubjectPropertiesDialog</body><body package="ADvance2">workbenchClass	^AD2Workbench</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>implementation classes</category><body package="ADvance2">classModelClass	^AD2ClassModel</body><body package="ADvance2">diagramModelClass	^AD2DiagramModel</body><body package="ADvance2">diagramSpecClass	^AD2DiagramSpec</body><body package="ADvance2">filterEnvironmentClass	^AD2FilterEnvironment</body><body package="ADvance2">filterReferenceClass	^AD2FilterReference</body><body package="ADvance2">methodAnalyzerClass	^AD2MethodAnalyzer</body><body package="ADvance2">preferencesClass	^AD2Preferences</body><body package="ADvance2">storedFilterClass	^AD2StoredFilter</body><body package="ADvance2">structureFilterClass	^AD2StructureFilter</body><body package="ADvance2">subjectEnvironmentClass	^AD2SubjectEnvironment</body><body package="ADvance2">subjectWizardClass	^AD2SubjectWizard</body><body package="ADvance2">typesClass	^ICC.IncrementalTypes.IT1TypeSpecifications</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>info</category><body package="ADvance2">applicationComponents	^#()</body><body package="ADvance2">applicationFullName	^self applicationName , ' ' , self versionId first</body><body package="ADvance2">applicationLogo	^self resources opaqueImageFor: self named: #logo</body><body package="ADvance2">applicationName	^self name</body><body package="ADvance2">copyright	^'1995-2008 IC&amp;C GmbH'</body><body package="ADvance2">expirationDate	^self propertyAt: #expirationDate</body><body package="ADvance2">isTrialVersion	^(self propertyAt: #isTrialVersion)		== true</body><body package="ADvance2">versionId	"^&lt;Array with: String with: String&gt;	Answers the properties for version and versionDate given by package or parcel."	"self versionId"	| storeRegistry bundle |	((storeRegistry := #{Store.Registry} valueOrDo: [nil]) notNil and: [(bundle := storeRegistry bundleNamed: 'ADvance2Bundle') notNil])		ifTrue: [^Array with: (bundle properties at: #version) with: (bundle properties at: #versionDate)].	(Parcel parcelNamed: 'ADvance2') ifNotNil: [:parcel | ^Array with: (parcel propertyAt: #version) with: (parcel propertyAt: #versionDate)].	^#('???' '??/??/???')</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>properties</category><body package="ADvance2">properties	properties isNil ifTrue: [properties := IdentityDictionary new].	^properties</body><body package="ADvance2">propertyAt: aSymbol	"^&lt;Object | nil&gt; Answer the property at the symbol, nil if absent."	^self propertyAt: aSymbol ifAbsent: [nil]</body><body package="ADvance2">propertyAt: aSymbol ifAbsent: aBlock	"Answer the property at the symbol, evaluate aBlock otherwise."	^self properties at: aSymbol ifAbsent: aBlock</body><body package="ADvance2">propertyAt: aSymbol put: anObject	"Set the property at the symbol."	self properties at: aSymbol put: anObject</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>accessing</category><body package="ADvance2">filterEnvironment	^self filterEnvironmentClass default</body><body package="ADvance2">plugInAPI	^AD2PlugInInterface</body><body package="ADvance2">plugInRegistry	^AD2PlugInRegistry</body><body package="ADvance2">preferences	^self preferencesClass default</body><body package="ADvance2">resources	^AD2Images</body><body package="ADvance2">subjectEnvironment	^self subjectEnvironmentClass default</body><body package="ADvance2">types	^self typesClass default</body><body package="ADvance2">utils	^AD2Utils</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>fileIn/Out</category><body package="ADvance2">postLoad	"After loading binary code remove all ADvance classes that are not marked	as public classes from the system organization and remove this code itself."	"self adBasics hideCodeFor: self remove: #(#'fileIn/Out')"</body><body package="ADvance2">prerequisitesForLoading	"List those classes that must be filed, BOSSed or load into the system	before I can be loaded."	^super prerequisitesForLoading		 add: self plugInAPI;		 yourself</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>choice dialogs</category><body package="ADvance2">chooseFilterNameFor: aVisualOrNil	"^&lt;String | nil&gt; Open a window and let the user choose a filter.	Answer the choice's name or nil if canceled."	| filterNames |	filterNames := self advance filterEnvironment filterNames.	^self adDialog		choose: 'Choose a filter from the list.'		fromList: filterNames		values: filterNames		lines: 15		cancel: [nil]		for: aVisualOrNil</body><body package="ADvance2">chooseSubjectFor: aVisualOrNil	"^&lt;AD2Subject | nil&gt; Open a window and let the user choose a subject.	Answer the choice or nil if canceled."	"Future releases should provide multiple views on subjects (hierarchical/alphabetical/categorized)."	| subjectNames selection subjects |	subjectNames := self advance subjectEnvironment subjectNames.	subjects := self advance subjectEnvironment subjects.	selection := self adDialog				choose: 'Select a subject from the list.'				fromList: subjectNames				values: subjects				lines: 15				cancel: [nil]				for: aVisualOrNil.	^selection</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>load-unload</category><body package="ADvance2">isAllowedToRemove	"Check and answer whether there are windows using this look.	Call this from your ENVY application #allowedToRemove method."	| allWindowsAreClosed |	self advance plugInAPI closeAllADvanceWindowsFor: nil.	self advance plugInAPI getAllRelatedApplications do: [:each | (each builder notNil and: [each builder window notNil])			ifTrue: [each builder window checkForEvents]].	allWindowsAreClosed := self advance plugInAPI getAllRelatedApplications isEmpty.	allWindowsAreClosed ifFalse: [Dialog warn: ('Can''t unload &lt;1s&gt;.&lt;n&gt;There are opened ADvance tools.' expandMacrosWith: self advance applicationFullName)].	^allWindowsAreClosed</body><body package="ADvance2">postLoad: aParcel	"This should be called as post load action."	super postLoad: aParcel.	self preferencesClass postLoad: nil.	self plugInRegistry postLoad: nil.	self workbenchClass open</body><body package="ADvance2">preUnloadActionFor: aParcel	"This is called when package or parcel becomes unloaded."	self preferencesClass uninitialize.	self subjectEnvironmentClass uninitialize.	self filterEnvironmentClass uninitialize.	self structureFilterClass uninitialize.	self resources flushCaches.	self diagramPainterClass uninitialize.	self workbenchClass closeAndUnschedule</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>class initialization</category><body package="ADvance2">initialize	self postLoad</body></methods><methods><class-id>ICC.ADvance.AD2PlugInRegistry class</class-id> <category>accessing</category><body package="ADvance2">getInstalledPlugIns	^self installedPlugIns</body><body package="ADvance2">installedPlugIns	^InstalledPlugIns</body></methods><methods><class-id>ICC.ADvance.AD2PlugInRegistry class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"Reset the list of installed plug-ins. Then detect plug-ins and ask them to install themselves."	"self initialize"	InstalledPlugIns := List new.	self detectAndInstallPlugIns</body><body package="ADvance2">obsolete	"This class is being removed from the system.	Notify the installed plug-ins and reset my class variable."	self installedPlugIns do: [:each | each plugInShutdown].	InstalledPlugIns := nil.	super obsolete</body></methods><methods><class-id>ICC.ADvance.AD2PlugInRegistry class</class-id> <category>adding-removing</category><body package="ADvance2">add: aPlugIn	(self installedPlugIns includes: aPlugIn)		ifTrue: [^self].	self installedPlugIns add: aPlugIn; sortWith: [:a :b | a plugInName &lt;= b plugInName].	Transcript		 cr;		 show: 'ADvance plug-in ';		 show: aPlugIn plugInName printString;		 show: ' installed.'</body><body package="ADvance2">remove: aPlugIn	self installedPlugIns remove: aPlugIn ifAbsent: [^self].	Transcript		cr;		show: 'ADvance plug-in ';		show: aPlugIn plugInName printString;		show: ' deinstalled.'</body></methods><methods><class-id>ICC.ADvance.AD2PlugInRegistry class</class-id> <category>private</category><body package="ADvance2">detectAndInstallPlugIns	"Detect plug-ins and ask them to install themselves. Detection is done by checking	all classes in the system whether they bear a special marker method."	self adBasics systemEnvironment allClassesDo: [:each | (each class includesSelector: self plugInDetectionSelector)			ifTrue: [each plugInInstall]]</body><body package="ADvance2">plugInDetectionSelector	^#markedAsADvancePlugIn</body></methods><methods><class-id>ICC.ADvance.AD2PlugInRegistry class</class-id> <category>fileIn/Out</category><body package="ADvance2">prerequisitesForLoading	"List those classes that must be filed, BOSSed or load into the system	before I can be loaded."	^super prerequisitesForLoading add: ADvance; yourself</body></methods><methods><class-id>ICC.ADvance.IccHTMLClassCommentText</class-id> <category>constants</category><body package="ADvance2">maxColumn	"&lt;Integer&gt; I return the max right column value for a new formated text"	^95</body></methods><methods><class-id>ICC.ADvance.IccHTMLClassCommentText</class-id> <category>private</category><body package="ADvance2">convertedContent	| stream convertedString stopIndex |	stream := WriteStream on: (String new: 100).	self convertBaseString: self content onHTMLStream: stream.	convertedString := stream contents.	stopIndex := SmallInteger maxVal.	#(	'Instance Variable'		'Class Variable'		'Class Instance Variable'		'Inherited Instance'		'Inherited Class'		'Inherited Class Instance'		'Subclasses must implement') do: [:each |			| index |			index := convertedString indexOfSubCollection: (String with: Character cr)							, each startingAt: 1.			(index &gt; 0 and: [index &lt; stopIndex])				ifTrue: [stopIndex := index]].	stopIndex &lt; convertedString size ifTrue: [convertedString := convertedString copyFrom: 1 to: stopIndex].	^convertedString copyReplaceAll: (String with: Character cr) with: '&lt;P&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLClassCommentText</class-id> <category>resultcreation</category><body package="ADvance2">createHTMLOn: aStream	"&lt;&gt; creates a HTML description on a stream aStream"	"self preHTMLOn: aStream.	self convertBaseString: (IccSysOrg current reformatText: self content in: self maxColumn) onHTMLStream: aStream.	self postHTMLOn: aStream"	aStream nextPutAll: self convertedContent</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>printing</category><body package="ADvance2">authorAndCreationDateString	| aStream |	aStream := (String new: 40) writeStream.	aStream		 nextPutAll: 'Author: ';		 nextPutAll: self author nickName;		 space;		 tab;		 nextPutAll: 'created: ';		 nextPutAll: self creationDateStringShort.	^aStream contents</body><body package="ADvance2">creationDateStringLong	^Locale current printAsTime: self creationDate policyNamed: #long</body><body package="ADvance2">creationDateStringShort	^Locale current printAsTime: self creationDate policyNamed: #short</body><body package="ADvance2">modificationDateStringLong	^Locale current  printAsTime: self modificationDate policyNamed: #long</body><body package="ADvance2">modificationDateStringShort	^Locale current printAsTime: self modificationDate asDate policyNamed: #short</body><body package="ADvance2">printOn: aStream	super printOn: aStream.	aStream nextPut: $(; nextPutAll: self name; nextPut: $)</body><body package="ADvance2">subjectAndDiagramName	^'&lt;1s&gt;/&lt;2s&gt;' expandMacrosWith: self subject name with: (self name isNil			ifTrue: [self class unnamedString]			ifFalse: [self name])</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>accessing-tree</category><body package="ADvance2">children	^#()</body><body package="ADvance2">childrenImage	^self resources opaqueImageFor: self class named: (self state scriptsVisible			ifTrue: [#scriptsImage]			ifFalse: [#structureImage])</body><body package="ADvance2">renamed: newName	self name: newName</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>accessing</category><body package="ADvance2">author	^author</body><body package="ADvance2">author: anADIdentity	author := anADIdentity</body><body package="ADvance2">classes	^classes</body><body package="ADvance2">classes: aValue	classes := aValue</body><body package="ADvance2">creationDate	^creationDate</body><body package="ADvance2">creationDate: aTimestamp	creationDate := aTimestamp</body><body package="ADvance2">description	^description</body><body package="ADvance2">description: aStringOrText	description := aStringOrText asString</body><body package="ADvance2">filter	^filter</body><body package="ADvance2">filter: anADMethodFilter	filter := anADMethodFilter</body><body package="ADvance2">hiddenMessages	^hiddenMessages</body><body package="ADvance2">hiddenMessages: aValue	hiddenMessages := aValue</body><body package="ADvance2">modificationDate	^modificationDate</body><body package="ADvance2">modificationDate: aTimestamp	modificationDate := aTimestamp</body><body package="ADvance2">name	^name</body><body package="ADvance2">name: aString	name := aString</body><body package="ADvance2">state	^state</body><body package="ADvance2">state: aDiagramState	state := aDiagramState</body><body package="ADvance2">subject	^subject</body><body package="ADvance2">texts	^texts</body><body package="ADvance2">texts: aValue	texts := aValue</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>enumerating</category><body package="ADvance2">classesAndSpecsDo: aBlock	cachedClassSpecs keysAndValuesDo: aBlock</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>accessing-state</category><body package="ADvance2">translation	^self state translation</body><body package="ADvance2">zoom	^self state zoom</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>private</category><body package="ADvance2">creationDateSeconds: aNumber	self creationDate: (Timestamp fromSeconds: aNumber)</body><body package="ADvance2">modificationDateSeconds: aNumber	self modificationDate: (Timestamp fromSeconds: aNumber)</body><body package="ADvance2">resources	^self advance resources</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>Plug-in API</category><body package="ADvance2">visibleClasses	^(cachedClassSpecs select: [:each | each visible])		collect: [:each | each model]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>encode-decode</category><body package="ADvance2">decodeClassesFrom: anArray	^anArray inject: OrderedCollection new		into:			[:collection :eachArray |			| aClass |			aClass := self adBasics systemEnvironment at: (eachArray at: 1) ifAbsent: [nil].			aClass isNil ifFalse: [collection add: ((AD2ClassSpec newFor: aClass)						fromLiteralArrayEncoding: eachArray)].			collection]</body><body package="ADvance2">decodeHiddenMessagesFrom: anArray	^((anArray collect: [:each | each decodeAsLiteralArray])		select: [:each | each notNil]) asOrderedCollection</body><body package="ADvance2">fromLiteralArrayEncoding: anArray	2		to: anArray size		by: 2		do: [:i | self perform: (anArray at: i)				with: (anArray at: i + 1)].	author := self author decodeAsLiteralArray.	state := self state decodeAsLiteralArray.	filter := self filter decodeAsLiteralArray.	description isNil ifFalse: [self description: self description decodeAsLiteralArray].	texts isEmpty ifFalse: [texts := self texts collect: [:each | each decodeAsLiteralArray]].	hiddenMessages isEmpty ifFalse: [hiddenMessages := self decodeHiddenMessagesFrom: hiddenMessages].	classes isNil ifTrue: [^self].	classes := self decodeClassesFrom: classes.	classes do: [:each | cachedClassSpecs at: each model put: each]</body><body package="ADvance2">literalArrayEncoding	| aCollection |	aCollection := OrderedCollection new.	aCollection add: self class fullyQualifiedReference.	aCollection add: #name:; add: self name.	aCollection add: #creationDateSeconds:; add: self creationDate asSeconds literalArrayEncoding.	aCollection add: #modificationDateSeconds:; add: Timestamp now asSeconds literalArrayEncoding.	aCollection add: #author:; add: self author literalArrayEncoding.	aCollection add: #state:; add: self state literalArrayEncoding.	aCollection add: #filter:; add: self filter diagramLiteralArrayEncoding.	(self description isNil or: [self description isEmpty])		ifFalse: [aCollection add: #description:; add: self description literalArrayEncoding].	self classes isEmpty ifFalse: [aCollection add: #classes:; add: self classes literalArrayEncoding].	self texts isEmpty ifFalse: [aCollection add: #texts:; add: self texts literalArrayEncoding].	self hiddenMessages isEmpty ifFalse: [aCollection add: #hiddenMessages:; add: self hiddenMessages literalArrayEncoding].	^aCollection asArray</body><body package="ADvance2">resetClassSpecsCache	cachedClassSpecs := IdentityDictionary new.	classes do: [:each | cachedClassSpecs at: each model put: each]</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>priviledged-accessing</category><body package="ADvance2">classSpecFor: aClass	^cachedClassSpecs at: aClass ifAbsent: [nil]</body><body package="ADvance2">subject: aSubject	subject := aSubject</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec</class-id> <category>initialize-release</category><body package="ADvance2">initialize	description := String new.	author := self advance preferences general identity.	classes := OrderedCollection new.	texts := OrderedCollection new.	hiddenMessages := OrderedCollection new.	creationDate := Timestamp now.	modificationDate := Timestamp now.	cachedClassSpecs := IdentityDictionary new.	self state: AD2DiagramState new</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec class</class-id> <category>instance creation</category><body package="ADvance2">fake	^self new name: self fakeName; yourself</body><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec class</class-id> <category>constants</category><body package="ADvance2">fakeName	^'Default'</body><body package="ADvance2">unnamedString	^'Unnamed'</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec class</class-id> <category>encode-decode</category><body package="ADvance2">decodeFromLiteralArray: anArray	^self new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.IccHTMLOrderedList</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/OL&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;OL&gt;'</body></methods><methods><class-id>ICC.ADvance.AD2DiagramState</class-id> <category>accessing</category><body package="ADvance2">associationDepth	^associationDepth</body><body package="ADvance2">associationDepth: anIntegerOrNil	associationDepth := anIntegerOrNil</body><body package="ADvance2">associationDepthString	^self associationDepth isNil		ifTrue: ['infinite']		ifFalse: [self associationDepth printString]</body><body package="ADvance2">associationDepthString: aString	"This method is sent in the context of an aspect adaptor for aspect associationDepthString."	self associationDepth: (aString = 'infinite'			ifTrue: [nil]			ifFalse: [Integer readFrom: aString readStream])</body><body package="ADvance2">associationsVisible	^bits anyMask: AssociationsVisible</body><body package="ADvance2">associationsVisible: aBoolean	"This message is sent in the context of an AspectAdaptor."	bits := aBoolean				ifTrue: [bits maskSet: AssociationsVisible]				ifFalse: [bits maskClear: AssociationsVisible]</body><body package="ADvance2">attributesVisible	^bits anyMask: AttributesVisible</body><body package="ADvance2">attributesVisible: aBoolean	"This message is sent in the context of an AspectAdaptor."	bits := aBoolean				ifTrue: [bits maskSet: AttributesVisible]				ifFalse: [bits maskClear: AttributesVisible]</body><body package="ADvance2">inheritanceVisible	^bits anyMask: InheritanceVisible</body><body package="ADvance2">inheritanceVisible: aBoolean	"This message is sent in the context of an AspectAdaptor."	bits := aBoolean				ifTrue: [bits maskSet: InheritanceVisible]				ifFalse: [bits maskClear: InheritanceVisible]</body><body package="ADvance2">namespacesVisible	^bits anyMask: NamespacesVisible</body><body package="ADvance2">namespacesVisible: aBoolean	"This message is sent in the context of an AspectAdaptor."	bits := aBoolean				ifTrue: [bits maskSet: NamespacesVisible]				ifFalse: [bits maskClear: NamespacesVisible]</body><body package="ADvance2">scriptDepth	^scriptDepth</body><body package="ADvance2">scriptDepth: anIntegerOrNil	scriptDepth := anIntegerOrNil</body><body package="ADvance2">scriptDepthString	^self scriptDepth isNil		ifTrue: ['infinite']		ifFalse: [self scriptDepth printString]</body><body package="ADvance2">scriptDepthString: aString	"This message is sent in the context of an AspectAdaptor."	self scriptDepth: (aString = 'infinite'			ifTrue: [nil]			ifFalse: [Integer readFrom: aString readStream])</body><body package="ADvance2">scriptsVisible	^bits anyMask: ScriptsVisible</body><body package="ADvance2">scriptsVisible: aBoolean	"This message is sent in the context of an AspectAdaptor."	bits := aBoolean		ifTrue: [bits maskSet: ScriptsVisible]		ifFalse: [bits maskClear: ScriptsVisible]</body><body package="ADvance2">servicesVisible	^bits anyMask: ServicesVisible</body><body package="ADvance2">servicesVisible: aBoolean	"This message is sent in the context of an AspectAdaptor."	bits := aBoolean		ifTrue: [bits maskSet: ServicesVisible]		ifFalse: [bits maskClear: ServicesVisible]</body><body package="ADvance2">trackResize	^bits anyMask: TrackResize</body><body package="ADvance2">trackResize: aBoolean	bits := aBoolean		ifTrue: [bits maskSet: TrackResize]		ifFalse: [bits maskClear: TrackResize]</body><body package="ADvance2">translation	^translation</body><body package="ADvance2">translation: aPoint	translation := aPoint</body><body package="ADvance2">typesVisible	^bits anyMask: TypesVisible</body><body package="ADvance2">typesVisible: aBoolean	"This message is sent in the context of a AspectAdaptor."	bits := aBoolean		ifTrue: [bits maskSet: TypesVisible]		ifFalse: [bits maskClear: TypesVisible]</body><body package="ADvance2">zoom	^zoom</body><body package="ADvance2">zoom: aNumber	zoom := aNumber</body></methods><methods><class-id>ICC.ADvance.AD2DiagramState</class-id> <category>initialize-release</category><body package="ADvance2">initialize	bits := InheritanceVisible + AttributesVisible + AssociationsVisible.	scriptDepth := 3.	associationDepth := 2.	translation := 0@0.	zoom := '100%'</body></methods><methods><class-id>ICC.ADvance.AD2DiagramState</class-id> <category>private-accessing</category><body package="ADvance2">bits: anInteger	bits := anInteger</body></methods><methods><class-id>ICC.ADvance.AD2DiagramState</class-id> <category>encode-decode</category><body package="ADvance2">fromLiteralArrayEncoding: anArray	2		to: anArray size		by: 2		do: [:i | self perform: (anArray at: i)				with: (anArray at: i + 1)].	translation := self translation decodeAsLiteralArray</body><body package="ADvance2">literalArrayEncoding	| aCollection |	aCollection := OrderedCollection				with: self class fullyQualifiedReference				with: #bits:				with: bits.	aCollection add: #zoom:; add: self zoom.	aCollection add: #translation:; add: self translation literalArrayEncoding.	aCollection add: #scriptDepth:; add: self scriptDepth.	aCollection add: #associationDepth:; add: self associationDepth.	^aCollection asArray</body></methods><methods><class-id>ICC.ADvance.AD2DiagramState class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2DiagramState class</class-id> <category>private</category><body package="ADvance2">decodeFromLiteralArray: anArray	^self new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.AD2DiagramState class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	InheritanceVisible 	:= 1.	AttributesVisible 	:= 2.	AssociationsVisible	:= 4.	TypesVisible 		:= 8.	ServicesVisible 		:= 16.	ScriptsVisible 		:= 32.	TrackResize		:= 64.	NamespacesVisible := 128</body></methods><methods><class-id>ICC.ADvance.IccHTMLHeader</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/HEAD&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;HEAD&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLHeader</class-id> <category>accessing</category><body package="ADvance2">title: aHTMLString	"&lt;&gt;"	self add: (IccHTMLTitle new add: aHTMLString ; yourself)</body></methods><methods><class-id>ICC.ADvance.AD2Types class</class-id> <category>ADvance</category><body package="ADvance2">ad2diagram_Overview	^#(#{ICC.ADvance.AD2DiagramSpec} 		#name: 'Overview' 		#creationDateSeconds: 3026543609 		#modificationDateSeconds: 3287148015 		#author: 		#(#{ICC.ADvance.AD2Identity} 			#nickName: '' 			#name: '' 			#company: '' ) 		#state: 		#(#{ICC.ADvance.AD2DiagramState} 			#bits: 15 			#zoom: '100%' 			#translation: #(#{Core.Point} 60 260 ) 			#scriptDepth: 3 			#associationDepth: 2 ) 		#filter: 		#(#{ICC.ADvance.AD2StructureFilter} 			#bits: 13 			#filteredInstProtocols: #('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' #printing 'resources' ) 			#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 			#filteredClassProtocols: #('*declarations' '*specs' 'access-*' 'accessing-*' 'ADvance*' 'backward*' 'constants' 'documentation' 'exampl*' 'fileIn/Out' 'info' 'resources' 'signal*' ) 			#filteredClassMethods: #('initialize' 'new' ) 			#filteredInstVars: #() 			#filteredSharedVars: #() ) 		#classes: #(			#(#{ICC.IncrementalTypes.IT1TypeVariable} 848 185 1 				#backgroundColor: #(#{Graphics.ColorValue} 8191 5631 3072 ) ) 			#(#{ICC.IncrementalTypes.IT1TypeSpecifications} 248 234 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1FullType} 						#attribute: 'fullTypes' 						#layout1: #(0.587112 0.0 ) 						#layout2: #(0.326829 1.0 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeSpecifications} 						#attribute: 'Default' ) ) ) 			#(#{ICC.IncrementalTypes.IT1TypeScheme} 704 -46 1 				#backgroundColor: #(#{Graphics.ColorValue} 8191 6655 5119 ) ) 			#(#{ICC.IncrementalTypes.IT1LiteralType} 576 242 1 				#backgroundColor: #(#{Graphics.ColorValue} 8191 5631 3072 ) ) 			#(#{ICC.IncrementalTypes.IT1ClassType} 576 121 1 				#backgroundColor: #(#{Graphics.ColorValue} 8191 5631 3072 ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeVariableScope} 						#attribute: 'typeVariableScope' 						#layout1: #(0.649194 0.0 ) 						#layout2: #(0.317901 1.0 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1TypeEnvironment} 936 -167 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeVariableScope} 						#attribute: 'typeVariableBindings' 						#layout1: #(0.0 0.443038 ) 						#layout2: #(1.0 0.557377 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1ClientRelation} 416 -49 1 				#filter: 				#(#{ICC.ADvance.AD2StructureFilter} 					#bits: 61 					#filteredInstProtocols: #('access-*' 'accessing-*' 'aspects' 'backward*' 'boss*' 'chang*' 'encode-decod*' 'exampl*' 'fileI*' 'fileO*' 'interface*' 'menu*' 'primitiv*' #printing 'resources' ) 					#filteredInstMethods: #('displayOn:*' 'displayString' 'init*' 'printOn:' 'printString' 'releas*' 'storeOn:' 'storeString' 'update:*' ) 					#filteredClassMethods: #('initialize' 'new' ) ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeScheme} 						#attribute: 'role' 						#layout1: #(1.0 0.382609 ) 						#layout2: #(0.0 0.672131 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeVariableScope} 						#attribute: 't1' 						#layout1: #(0.554348 0.0 ) 						#layout2: #(0.0 0.51416 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1TypeVariableScope} 624 -166 1 				#backgroundColor: #(#{Graphics.ColorValue} 6143 7167 8191 ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeScheme} 						#attribute: 'typeVars' ) ) ) 			#(#{ICC.IncrementalTypes.IT1NameScope} 432 -254 1 				#backgroundColor: #(#{Graphics.ColorValue} 7167 7679 8191 ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1NameScope} 						#attribute: 'outerScope' ) ) ) 			#(#{ICC.IncrementalTypes.IT1TypeClosure} 928 -38 1 				#backgroundColor: #(#{Graphics.ColorValue} 8191 5631 3072 ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeScheme} 						#attribute: 'typeScheme' 						#layout1: #(0.0258621 0.0 ) 						#layout2: #(1.0 0.131148 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeEnvironment} 						#attribute: 'typeEnvironment' 						#layout1: #(0.547414 0.0 ) 						#layout2: #(0.48503 1.0 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1UnionType} 712 130 1 				#backgroundColor: #(#{Graphics.ColorValue} 8191 5631 3072 ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeScheme} 						#attribute: 'union' 						#layout1: #(0.347619 0.0 ) 						#layout2: #(0.441176 1.0 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1ClientRelationScope} 320 -158 1 				#backgroundColor: #(#{Graphics.ColorValue} 6143 7167 8191 ) 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1ClientRelation} 						#attribute: 'clientRelations' 						#layout1: #(0.661677 1.0 ) 						#layout2: #(0.25 0.0 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1FullType} 320 121 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1ClassType} 						#attribute: 'classType' ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1ClientRelationScope} 						#attribute: 'clientRelationDeclarations' 						#layout1: #(0.117073 0.0 ) 						#layout2: #(0.0299401 1.0 ) ) 					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1TypeDescriptor} 						#attribute: 'typeDescriptor' 						#layout1: #(0.0 0.334547 ) 						#layout2: #(0.465204 1.0 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1TypeDescriptor} 72 -23 1 				#layouts: #(					#(#{ICC.ADvance.AD2LayoutSpec} #{ICC.IncrementalTypes.IT1FullType} 						#attribute: 'fullType' 						#layout1: #(0.657895 1.0 ) 						#layout2: #(0.0268293 0.0 ) ) ) ) 			#(#{ICC.IncrementalTypes.IT1FreeType} 848 50 1 				#backgroundColor: #(#{Graphics.ColorValue} 8191 5631 3072 ) ) ) )</body><body package="ADvance2">advanceSubjectSpec	^#(#{ICC.ADvance.AD2Subject} #classNames: #('ICC.IncrementalTypes.IT1TypeSpecifications' 'ICC.IncrementalTypes.IT1ClientRelation' 'ICC.IncrementalTypes.IT1FullType' 'ICC.IncrementalTypes.IT1ClassType' 'ICC.IncrementalTypes.IT1NameScope' 'ICC.IncrementalTypes.IT1TypeVariable' 'ICC.IncrementalTypes.IT1UnionType' 'ICC.IncrementalTypes.IT1FreeType' 'ICC.IncrementalTypes.IT1TypeDescriptor' 'ICC.IncrementalTypes.IT1TypeEnvironment' 'ICC.IncrementalTypes.IT1LiteralType' 'ICC.IncrementalTypes.IT1TypeVariableScope' 'ICC.IncrementalTypes.IT1TypeScheme' 'ICC.IncrementalTypes.IT1ClientRelationScope' 'ICC.IncrementalTypes.IT1TypeClosure'))</body><body package="ADvance2">markedAsSubjectClass</body><body package="ADvance2">markedAsSystemSubject</body></methods><methods><class-id>ICC.ADvance.AD2Types class</class-id> <category>load-unload</category><body package="ADvance2">preUnloadActionFor: aParcel	"This is called when package or parcel becomes unloaded."	IT1TypeSpecifications uninitialize</body></methods><methods><class-id>ICC.ADvance.AD2DiagramRoot</class-id> <category>accessing</category><body package="ADvance2">children	^self</body></methods><methods><class-id>ICC.ADvance.IccHTMLString</class-id> <category>accessing</category><body package="ADvance2">bold	"&lt;&gt;"	self addAttribute: #bold value: #bold</body><body package="ADvance2">content	"&lt;String&gt;"	content isNil		ifTrue: [content := ''].	^content</body><body package="ADvance2">emphasize	"&lt;&gt;"	self addAttribute: #emphasize value: #emphasize</body><body package="ADvance2">italic	"&lt;&gt;"	self addAttribute: #italic value: #italic</body><body package="ADvance2">typeWriter	"&lt;&gt;"	self addAttribute: #typeWriter value: #typeWriter</body></methods><methods><class-id>ICC.ADvance.IccHTMLString</class-id> <category>resultcreation</category><body package="ADvance2">createHTMLOn: aStream	"&lt;&gt; creates a HTML description on a stream aStream"	self preHTMLOn: aStream.	self convertBaseString: self content onHTMLStream: aStream.	self postHTMLOn: aStream</body><body package="ADvance2">postHTMLOn: aStream	"&lt;&gt; creates an optional HTML description of the receiver before the content of the receiver"	self attributes		reverseDo:			[:anAssoc |			anAssoc key = #bold ifTrue: [aStream nextPutAll: '&lt;/B&gt;'].			anAssoc key = #italic ifTrue: [aStream nextPutAll: '&lt;/I&gt;'].			anAssoc key = #typeWriter ifTrue: [aStream nextPutAll: '&lt;/tt&gt;']]</body><body package="ADvance2">preHTMLOn: aStream	"&lt;&gt; creates an optional HTML description of the receiver before the content of the receiver"	self attributes		do:			[:anAssoc |			anAssoc key = #bold ifTrue: [aStream nextPutAll: '&lt;B&gt;'].			anAssoc key = #italic ifTrue: [aStream nextPutAll: '&lt;I&gt;'].			anAssoc key = #typeWriter ifTrue: [aStream nextPutAll: '&lt;tt&gt;']]</body></methods><methods><class-id>ICC.ADvance.IccHTMLString class</class-id> <category>instance creation</category><body package="ADvance2">newItalic: aString	"^&lt;HTMLString&gt;"	| tmp |	tmp := self new content: aString.	tmp italic.	^tmp</body><body package="ADvance2">newString: aString	"^&lt;HTMLString&gt;"	^self new content: aString</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>encode-decode</category><body package="ADvance2">classNames: anArray	self environment: (AD2ClassEnvironment new classNames: anArray)</body><body package="ADvance2">fromLiteralArrayEncoding: anArray	2		to: anArray size		by: 2		do: [:i | self perform: (anArray at: i)				with: (anArray at: i + 1)]</body><body package="ADvance2">literalArrayEncoding	| aCollection |	aCollection := OrderedCollection with: self class fullyQualifiedReference.	name isNil ifFalse: [aCollection add: #name:; add: name].	aCollection add: #classNames:; add: self environment classNames literalArrayEncoding.	^aCollection asArray</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>private-accessing</category><body package="ADvance2">baseClass	^baseClass</body><body package="ADvance2">baseClass: aClass	baseClass := aClass</body><body package="ADvance2">basicAddClasses: aCollectionOfClasses	aCollectionOfClasses do: [:each | self environment addClass: each]</body><body package="ADvance2">diagramSelectorFor: aString	"^&lt;Symbol&gt; Answer the selector for the diagram named aString."	^(self diagramSelectorPrefix , (self mapUglies: aString)) asSymbol</body><body package="ADvance2">name: aString	name := aString</body><body package="ADvance2">removeClass: aClass	"Remove aClass from the receivers environment."	self environment removeClass: aClass</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>comparing</category><body package="ADvance2">&lt;= aSubject	^self name &lt;= aSubject name</body><body package="ADvance2">= aSubject 	"The receiver equals another object if it's an AD2Subject too and 	if it has the same base class (the class holding the subject)."	^(aSubject isKindOf: self class)		and: [self baseClass = aSubject baseClass]</body><body package="ADvance2">hash	^self baseClass hash</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>accessing-diagrams</category><body package="ADvance2">defaultDiagram	"^&lt;AD2Diagram&gt; Answer the default diagram.	@Pre: The subject has a default diagram."	^self diagramFor: ((self hasDiagramNamed: self defaultDiagramName)			ifTrue: [self defaultDiagramName]			ifFalse: [self diagramNames first])</body><body package="ADvance2">diagramAtSelector: aSelector	"^&lt;AD2Diagram&gt;"	^(self baseClass perform: aSelector) decodeAsLiteralArray subject: self; yourself</body><body package="ADvance2">diagramFor: diagramName	"^&lt;AD2Diagram&gt;"	^diagramName = self advance diagramSpecClass fakeName		ifTrue: [self fakedDiagram]		ifFalse: [self diagramAtSelector: (self diagramSelectorFor: diagramName)]</body><body package="ADvance2">diagramNames	"^&lt;Array of: Symbol&gt;"	| cutIndex |	cutIndex := self diagramSelectorPrefix size + 1.	^self diagramSelectors collect: [:each | each copyFrom: cutIndex to: each size]</body><body package="ADvance2">diagramSelectors	"^&lt;SortedCollection of: Symbol&gt;"	^(self adBasics systemOrganization selectorsMatching: self diagramSelectorPrefix , '*' for: self baseClass) asSortedStrings</body><body package="ADvance2">diagrams	"^&lt;Array of: AD2Diagram&gt;"	^self diagramSelectors collect: [:each | self diagramAtSelector: each]</body><body package="ADvance2">diagramsWithFake	"^&lt;Array of: AD2Diagram&gt;"	^self diagrams copyWith: self fakedDiagram</body><body package="ADvance2">prettyDiagramNames	"^&lt;Array of: String&gt;	Method diagramNames answers the suffixes of method selectors for the 	diagrams while this method returns the real names with may be special 	characters."	^self diagrams collect: [:eachDiagram | eachDiagram name]</body><body package="ADvance2">removeDiagram: aDiagramName	self adBasics systemOrganization removeSelectors: (Array with: (self diagramSelectorFor: aDiagramName))		from: baseClass class</body><body package="ADvance2">saveDiagram: aDiagram 	"Generates a literal encoding for aDiagram on my baseClass. A save for the subject is done first	in case it is not yet persistent (e.g. for a default subject generated in RefactoringBrowser).	New diagram method is always saved in package of subject class' subject method. "	| s methodName packageToUse |	self save.	methodName := self diagramSelectorFor: aDiagram name.	s := (String new: 1024) writeStream.	s		nextPutAll: methodName;		crtab;		nextPut: $^.	UISpecification 		prettyPrintSpecArray: aDiagram literalArrayEncoding		on: s		tabLevel: 1.	packageToUse := (self baseClass respondsTo: methodName) 				ifTrue: [nil] "existing method shall not be moved, so use system settings by 'forcing' nil."				ifFalse: 					[Store.Registry containingPackageForSelector: self subjectSpecSelector						class: self baseClass class].	Store.Policies packagePolicy forcePackage: packageToUse		while: 			[self adBasics systemOrganization 				compile: s contents				classified: nil				for: self baseClass class]</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>private</category><body package="ADvance2">allChildrenBut: traversedSubjects	"^&lt;OrderedCollectionCollection of: AD2Subject&gt;	Answer an OrderedCollection of the receiver's children and the receiver's descendant's	children in breadth-first order, with the immediate children first.	To avoid cycles exclude and track a colleciton of traversedSubjects."	| result |	result := (self primChildren asSet - traversedSubjects) asOrderedCollection.	result copy do: [:each | result addAll: (each allChildrenBut: (traversedSubjects copyWith: each))].	^result</body><body package="ADvance2">fakedDiagram	^self advance diagramSpecClass fake subject: self; yourself</body><body package="ADvance2">mapUglies: aString	"Answer string with uglies mapped to a replacement character."	| copy |	copy := aString asString copy.	1 to: copy size		do:			[:index |			| aCharacter |			aCharacter := copy at: index.			(aCharacter isLetter or: [aCharacter isDigit])				ifFalse: [copy at: index put: self uglyReplacement]].	^copy</body><body package="ADvance2">primChildren	"^&lt;OrderedCollection of: AD2Subject&gt;	Answer the receivers components that are subjects."	| result |	result := OrderedCollection new.	self environment allClassesDo: [:each | each isADvanceSubject ifTrue: [result add: each advanceSubject]].	^result</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>printing</category><body package="ADvance2">printOn: aStream	self baseClass printOn: aStream.	aStream nextPutAll: ' subject'</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>constants</category><body package="ADvance2">defaultDiagramName	^'Overview'</body><body package="ADvance2">diagramSelectorPrefix	^'ad2diagram_'</body><body package="ADvance2">subjectSpecSelector	^#'advanceSubjectSpec'</body><body package="ADvance2">subjectTestSelector	^#markedAsSubjectClass</body><body package="ADvance2">uglyReplacement	"Answer a character which can be used to substitute ugly characters	in subject and diagram names."	^$_</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>accessing</category><body package="ADvance2">allClasses	| result |	result := OrderedCollection new: 10.	self environment allClassesDo: [:each | result add: each].	^result</body><body package="ADvance2">classNames	^self environment classNames copy</body><body package="ADvance2">createdSubjectClassComment	^self class createdSubjectClassCommentForSubjectNamed: self subjectName</body><body package="ADvance2">createdSubjectClassPattern	^self class createdSubjectClassCommentForSubjectNamed: '*'</body><body package="ADvance2">description	"^&lt;String&gt;"	| result |	result := self baseClass comment.	^result isEmpty		ifTrue: [String new]		ifFalse: [result]</body><body package="ADvance2">description: aStringOrText	"Store aStringOrText as class comment. Future releases may change this code."	self baseClass comment: aStringOrText asString</body><body package="ADvance2">environment	^environment</body><body package="ADvance2">name	^name isNil		ifTrue: [self baseClass fullName]		ifFalse: [name]</body><body package="ADvance2">subjectName	^self name</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>adding-removing</category><body package="ADvance2">addClasses: aCollectionOfClasses	"^&lt;Boolean&gt; Add all classes in aCollectionOfClasses that are not already contained in	the receiver's environment to its environment. Answer whether the environment is modified."	^self addClasses: aCollectionOfClasses saveNow: true</body><body package="ADvance2">addClasses: aCollectionOfClasses onChange: aBlock	"^&lt;Boolean&gt; Add aCollectionOfClasses to the receiver and evaluate aBlock if the	set of classes changed."	(self addClasses: aCollectionOfClasses)		ifTrue: [aBlock value]</body><body package="ADvance2">addClasses: aCollectionOfClasses saveNow: aSaveNowFlag	"^&lt;Boolean&gt; Add all classes in aCollectionOfClasses that are not already contained in	the receiver's environment to its environment. Answer whether the environment is modified."	| newClasses |	newClasses := aCollectionOfClasses asSet - self allClasses.	newClasses isEmpty ifTrue: [^false].	self basicAddClasses: newClasses.	aSaveNowFlag ifTrue: [self save].	^true</body><body package="ADvance2">removeClasses: aCollectionOfClasses	"Remove aCollectionOfClasses from myself."	^self removeClasses: aCollectionOfClasses saveNow: true</body><body package="ADvance2">removeClasses: aCollectionOfClasses saveNow: aSaveNowFlag	"Remove aCollectionOfClasses from myself."	aCollectionOfClasses do: [:each | self removeClass: each].	aSaveNowFlag ifTrue: [self save]</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>accessing-hierarchy</category><body package="ADvance2">allChildren	"^&lt;OrderedCollection of: AD2Subject&gt;	Answer an OrderedCollection of the receiver's children and the receiver's descendant's	children in breadth-first order, with the immediate children first."	^self allChildrenBut: (Array with: self)</body><body package="ADvance2">children	"^&lt;SortedCollection of: AD2Subject&gt;	Answer the receivers components that are subjects. Exclude the receiver."	| result |	result := OrderedCollection new.	self environment allClassesDo: [:each | each isADvanceSubject ifTrue: [result add: each advanceSubject]].	^(result remove: self ifAbsent: []; yourself) asSortedCollection</body><body package="ADvance2">parents	"Diese Methode wird nur in dem evtl. umzustellenden Subject-Umbennengsvorgang	verwendet. Sie ist bei einem verallgemeinerten Klassenumbenennungsvorgang obsolet."	| result |	result := OrderedCollection new.	self advance subjectEnvironment allSubjectsDo: [:each | (each children includes: self)			ifTrue: [result add: each]].	^result</body><body package="ADvance2">withAllChildren	"Answer an OrderedCollection of all children including this subject in breadth first order."	| subs |	subs := self allChildren.	subs addFirst: self.	^subs</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>privileged-accessing</category><body package="ADvance2">advanceSelectors	"Answer a set of the baseClass' selectors that are related to ADvance."	^self diagramSelectors		 add: self subjectSpecSelector;		 add: self subjectTestSelector;		 yourself</body><body package="ADvance2">baseClassContainer	^self adBasics systemOrganization containerFor: self baseClass</body><body package="ADvance2">baseClassContainer: aContainerName	self adBasics systemOrganization basicMove: self baseClass to: aContainerName</body><body package="ADvance2">environment: anEnvironment	environment := anEnvironment</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>testing</category><body package="ADvance2">baseClassIsPlainSubjectClass	"A class recognized as a plain subject class if it has no implemented instance methods and its comment is still	the one generated for subject class creation."	^self baseClass selectors isEmpty 		and: [self createdSubjectClassPattern match: self baseClass comment]</body><body package="ADvance2">diagramCount	^self diagramSelectors size</body><body package="ADvance2">hasCode	"Answer whether my baseClass has code other than subject definition and	subject marker."	^(self baseClass class selectors asSet - self advanceSelectors) isEmpty not</body><body package="ADvance2">hasDefaultDiagram	^self diagramCount = 1 or: [self hasDiagramNamed: self defaultDiagramName]</body><body package="ADvance2">hasDiagramNamed: diagramName	^diagramName = self advance diagramSpecClass fakeName or: [self diagramNames includes: (self mapUglies: diagramName)]</body><body package="ADvance2">isEmpty	^self environment isEmpty</body><body package="ADvance2">isValid	"Check and answer whether my base class is still marked as subject and not obsolete."	^self baseClass isADvanceSubject and: [self baseClass isObsolete not]</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>initialize-release</category><body package="ADvance2">initialize	self environment: AD2ClassEnvironment new</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>management</category><body package="ADvance2">invalidateTypes	"Invalidate the type of all classes in the receiver's environment."	self allClassesDo: [:each | each invalidateTypeDeclarations]</body><body package="ADvance2">removeBaseClass	self adBasics systemOrganization removeClass: self baseClass</body><body package="ADvance2">removeSubjectSelectors	"Remove all selectors related to ADvance from my baseClass."	self adBasics systemOrganization removeSelectors: self advanceSelectors from: self baseClass class</body><body package="ADvance2">save	"Generate a method on my baseClass that answers a literal encoding of myself."	| s packageToUse |	s := (String new: 1024) writeStream.	s		nextPutAll: self subjectSpecSelector;		crtab;		nextPut: $^.	self literalArrayEncoding storeOn: s.	"printOn: would shorten the array representation in case of big arrays."	"For new subject methods created for existing classes, set the current package from ADvance preferences as	forced package for the store policies."	packageToUse := ((self baseClass respondsTo: self subjectTestSelector) or: [self baseClassIsPlainSubjectClass]) 				ifTrue: [Store.Registry containingPackageForClass: self baseClass]  "uses the package containing the class definition."				ifFalse: [self advance preferences general subjectMethodPackage].	Store.Policies packagePolicy forcePackage: packageToUse		while: 			[(self adBasics systemOrganization)				compile: s contents					classified: nil					for: self baseClass class;				compile: self subjectTestSelector asString					classified: nil					for: self baseClass class]</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>updating</category><body package="ADvance2">cleanse	"Cleanse the subject's environment. Save the receiver if the environment changed."	| oldClassNames |	Cursor wait		showWhile:			[oldClassNames := self environment classNames.			self environment cleanse.			oldClassNames asSortedCollection ~= self environment classNames asSortedCollection ifTrue: [self save]]</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>enumerating</category><body package="ADvance2">allClassesDo: aBlock	self environment allClassesDo: aBlock</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>renaming</category><body package="ADvance2">renameTo: newName	"Rename my baseClass and update all containing subject."	| parents unqualifiedNewName newNamespace |	parents := self parents.	unqualifiedNewName := newName asQualifiedReference simpleName.	newNamespace := newName asQualifiedReference environmentName.	(newNamespace notNil and: [newNamespace ~= self baseClass environment fullName])		ifTrue: [self adDialog warn: 'Renaming of Subject with change of namespace is not possible!']		ifFalse: [			self baseClass rename: unqualifiedNewName.			parents do: [:each | each save]]</body><body package="ADvance2">renamed: newName 	Object errorSignal 		handle: [:ex | self adDialog warn: ('New name &lt;1p&gt; seems not to be a valid class name, please check syntax.' expandMacrosWith: newName)]		do: 			[newName == self name ifTrue: [^self].			(self advance subjectEnvironment includesSubject: newName)				ifTrue: [^self adDialog warn: ('A global named &lt;1p&gt; already exists.' expandMacrosWith: newName)].			self renameTo: newName]</body></methods><methods><class-id>ICC.ADvance.AD2Subject</class-id> <category>copying</category><body package="ADvance2">copyWithCreatedBaseClass	"Answers a new subject with same name for a new created subject class. Diagrams and	other properties are not copied."	| newBaseClassOrNil |	Store.Policies packagePolicy		forcePackage: self advance preferences general subjectClassPackage		while: 			[newBaseClassOrNil := self adDialog 						chooseClassFrom: (self advance utils cleanStringFor: self subjectName) 								asSymbol						superclassName: #Object						commentForAddedClass: self createdSubjectClassComment						for: nil].	newBaseClassOrNil isNil ifTrue: [^self].	^(self advance subjectEnvironment makeClass: newBaseClassOrNil		subjectNamed: self subjectName)		addClasses: self allClasses;		yourself</body></methods><methods><class-id>ICC.ADvance.AD2Subject class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2Subject class</class-id> <category>encode-decode</category><body package="ADvance2">decodeFromLiteralArray: anArray	^self new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.AD2Subject class</class-id> <category>constants</category><body package="ADvance2">createdSubjectClassCommentForSubjectNamed: aSubjectName 	^self createdSubjectClassCommentTemplate expandMacrosWith: aSubjectName</body><body package="ADvance2">createdSubjectClassCommentTemplate	^'Generated class to store ADvance subject information for subject "&lt;1s&gt;".'</body></methods><methods><class-id>ICC.ADvance.AD2RootSubject</class-id> <category>accessing</category><body package="ADvance2">description	self shouldNotImplement</body><body package="ADvance2">name	^'[Root]'</body><body package="ADvance2">remove	self shouldNotImplement</body><body package="ADvance2">save	"Unlike other subjects I have an infinite life time, so I need no save."</body></methods><methods><class-id>ICC.ADvance.AD2RootSubject</class-id> <category>privileged-accessing</category><body package="ADvance2">children	"^&lt;SortedCollection of: AD2Subject&gt;	Answer a sorted collection of subjects that make all subjects reachable.	To compute this, collect all subjects and then remove their reachables."	| subjects |	subjects := self advance subjectEnvironment subjects.	subjects copy do: [:each | (subjects includes: each)			ifTrue: [each allChildren do: [:eachChildren | subjects remove: eachChildren ifAbsent: []]]].	^subjects</body></methods><methods><class-id>ICC.ADvance.AD2RootSubject</class-id> <category>accessing-diagrams</category><body package="ADvance2">diagramsWithFake	"^&lt;Array of: AD2Diagram&gt; Unlike other subjects I have no diagram fake."	^self diagrams</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferences</class-id> <category>accessing-margins</category><body package="ADvance2">bottomMargin	^self margins bottom</body><body package="ADvance2">bottomMargin: anInteger	self margins bottom: anInteger</body><body package="ADvance2">leftMargin	^self margins left</body><body package="ADvance2">leftMargin: anInteger	self margins left: anInteger</body><body package="ADvance2">rightMargin	^self margins right</body><body package="ADvance2">rightMargin: anInteger	self margins right: anInteger</body><body package="ADvance2">topMargin	^self margins top</body><body package="ADvance2">topMargin: anInteger	self margins top: anInteger</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferences</class-id> <category>accessing-general</category><body package="ADvance2">authorEnabled	^authorEnabled</body><body package="ADvance2">authorEnabled: aBoolean	authorEnabled := aBoolean</body><body package="ADvance2">dateModifiedEnabled	^dateModifiedEnabled</body><body package="ADvance2">dateModifiedEnabled: aBoolean	dateModifiedEnabled := aBoolean</body><body package="ADvance2">datePrintedEnabled	^datePrintedEnabled</body><body package="ADvance2">datePrintedEnabled: aBoolean	datePrintedEnabled := aBoolean</body><body package="ADvance2">diagramNameEnabled	^diagramNameEnabled</body><body package="ADvance2">diagramNameEnabled: aBoolean	diagramNameEnabled := aBoolean</body><body package="ADvance2">headerEnabled	^self subjectNameEnabled or: [self diagramNameEnabled or: [self authorEnabled or: [self dateModifiedEnabled]]]</body><body package="ADvance2">subjectNameEnabled	^subjectNameEnabled</body><body package="ADvance2">subjectNameEnabled: aBoolean	subjectNameEnabled := aBoolean</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferences</class-id> <category>private-accessing</category><body package="ADvance2">margins	^margins</body><body package="ADvance2">margins: aRectangle	margins := aRectangle</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferences</class-id> <category>initialize-release</category><body package="ADvance2">initialize	subjectNameEnabled := true.	diagramNameEnabled := true.	authorEnabled := true.	dateModifiedEnabled := true.	datePrintedEnabled := false.	margins := 40 @ 20 corner: 40 @ 20</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferences class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2FilterReference</class-id> <category>encode-decode</category><body package="ADvance2">fromLiteralArrayEncoding: anArray	| baseClass id |	baseClass := self adBasics systemEnvironment at: (anArray at: 2)				ifAbsent: [nil].	id := anArray at: 3.	^self advance filterEnvironment safeAtKey: baseClass -&gt; id</body><body package="ADvance2">literalArrayEncoding	^Array		with: self class fullyQualifiedReference		with: self filter key key fullyQualifiedReference		with: self filter key value</body></methods><methods><class-id>ICC.ADvance.AD2FilterReference</class-id> <category>accessing</category><body package="ADvance2">filter	^filter</body><body package="ADvance2">filter: aFilter	filter := aFilter</body></methods><methods><class-id>ICC.ADvance.AD2FilterReference class</class-id> <category>private</category><body package="ADvance2">decodeFromLiteralArray: anArray	^self new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.AD2FilterReference class</class-id> <category>instance creation</category><body package="ADvance2">on: aFilter	^self new filter: aFilter</body></methods><methods><class-id>ICC.ADvance.AD2SearchInitiatorsProgressDialog</class-id> <category>processing</category><body package="ADvance2">basicDoAction	self selectors		keysAndValuesDo:			[:index :selector |			| counter |			counter := 0.			self infoField1 value: selector.			self adBasics systemEnvironment				allBehaviorsDo:					[:eachClass |					counter := counter + 1.					counter &gt; 200						ifTrue:							[Processor yield.							counter := 0].					(eachClass whichSelectorsReferTo: selector) isEmpty						ifFalse:							[self resultSet add: eachClass.							self infoField2 value: ('Found: &lt;1p&gt; classes' expandMacrosWith: self resultSet size)]].			self showProgress: index / self selectors size]</body></methods><methods><class-id>ICC.ADvance.AD2SearchInitiatorsProgressDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	aBuilder window label: 'Searching Initiators...'</body></methods><methods><class-id>ICC.ADvance.AD2SearchInitiatorsProgressDialog class</class-id> <category>opaque images</category><body package="ADvance2">participantOpaqueImage	^self resources opaqueImageFor: self named: #participantImage</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>actions</category><body package="ADvance2">delete	self hasDiagramSelection		ifTrue: [self deleteDiagram]		ifFalse: [self deleteSubject]</body><body package="ADvance2">find	"Request a subject pattern from user and try to find and select it."	| subjectNames selectedSubject |	subjectNames := self advance subjectEnvironment subjectNames.	selectedSubject := self advance subjectEnvironment at: (self adDialog					find: 'Find subject:'					labels: subjectNames					values: subjectNames					onCancel: [^self]					for: self window).	self findSubject: selectedSubject</body><body package="ADvance2">newSubject	"Open a SubjectWizard to create a new subject.	Note: The dialog may be canceled and the generation process may fail.	Select the new subject if available."	| aDialog newSubject |	aDialog := self advance subjectWizardClass new.	(aDialog openInterface: #windowSpec for: self builder window)		ifFalse: [^self].	newSubject := self advance subjectEnvironment at: aDialog subjectName value.	self subjectTree selection isNil ifFalse: [self subjectTree selection addClasses: (Array with: newSubject baseClass)].	self update.	(self subjectTree list includes: newSubject)		ifTrue: [self subjectTree selection: newSubject]</body><body package="ADvance2">openItem	self hasDiagramSelection		ifTrue: [self openDiagram]		ifFalse: [self openSubject]</body><body package="ADvance2">properties	self hasDiagramSelection		ifTrue: [self editDiagramProperties]		ifFalse: [self editSubjectProperties]</body><body package="ADvance2">rename	self hasDiagramSelection		ifTrue: [self renameDiagram]		ifFalse: [self renameSubject]</body><body package="ADvance2">save	self hasDiagramSelection		ifTrue: [self fileOutDiagram]		ifFalse: [self fileOutSubject]</body><body package="ADvance2">update	self updateSubjectTree.	self subjectTree list expand: 1</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>drag and drop-subjects</category><body package="ADvance2">canAcceptSubjectTreeDropFrom: aDragContext	"Accept drags of subjects, classes and categories onto the subject tree."	| aSymbol |	aSymbol := aDragContext key.	^#(#ADvanceSubject #class #category) includes: aSymbol</body><body package="ADvance2">doSubjectDrag: aController	"Drag the currently selected subject."	| ds dm data |	self hasSubjectSelection ifFalse: [^self].	data := DragDropData new.	data key: #ADvanceSubject.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: self subjectTree selection.	ds := DropSource new.	dm := DragDropManager withDropSource: ds withData: data.	dm doDragDrop</body><body package="ADvance2">subjectTreeDragEnter: aDragContext	"A drag has entered the subject tree. If the drag is acceptable, indicate a move,	otherwise indicate no effect."	(self canAcceptSubjectTreeDropFrom: aDragContext)		ifFalse: [^#dropEffectNone].	aDragContext dropTarget clientData: self initialSubjectTreeDropState.	^#dropEffectMove</body><body package="ADvance2">subjectTreeDragLeave: aDragContext	"A drag leaves the subject tree. Indicate no effect."	(self canAcceptSubjectTreeDropFrom: aDragContext)		ifFalse: [^#dropEffectNone].	self restoreTreeStateFrom: aDragContext dropTarget clientData.	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body package="ADvance2">subjectTreeDragOver: aDragContext	"A drag is over the subject tree. If the drag is acceptable, indicate a move,	otherwise indicate no effect."	^(self canAcceptSubjectTreeDropFrom: aDragContext)		ifTrue:			[self showDropFeedbackForTree: #subjectTree in: aDragContext.			#dropEffectMove]		ifFalse: [#dropEffectNone]</body><body package="ADvance2">subjectTreeDrop: aDragContext	"A drop has occurred on the subject tree. If the drop is acceptable, add	the appropriate client data to the current subject."	| clientData targetElement ctrl idx |	(self canAcceptSubjectTreeDropFrom: aDragContext)		ifFalse: [^#dropEffectNone].	"Locate the target category's index"	ctrl := aDragContext clientData at: #ctrl.	idx := ctrl view targetIndex.	idx = 0 ifTrue: [^#dropEffectNone].	targetElement := self subjectTree list at: idx.	clientData := aDragContext sourceData clientData.	aDragContext key == #class ifTrue: [self subjectTreeDropClass: (clientData at: #class)			target: targetElement].	aDragContext key == #category ifTrue: [self subjectTreeDropCategory: (clientData at: #category)			target: targetElement].	aDragContext key == #ADvanceSubject ifTrue: [self subjectTreeDropSubject: clientData target: targetElement].	^#dropEffectNone</body><body package="ADvance2">subjectTreeDropCategory: aCategory target: aSubject	"A category drop has occured on a subject tree. Add all classes in the category to	the subject."	aSubject addClasses: (self adBasics systemOrganization classesInCategory: aCategory)</body><body package="ADvance2">subjectTreeDropClass: className target: aSubject	"A class drop has occured on a subject tree. Add it to the subject."	aSubject addClasses: (Array with: (self adBasics systemEnvironment at: className))</body><body package="ADvance2">subjectTreeDropSubject: dropSubject target: targetSubject	"Move dropSubject to targetSubject. First remove dropSubject from all its parents,	then add it to targetSubject, finally update the subject tree."	| dropSubjectBase |	dropSubject == targetSubject ifTrue: [^self adDialog alert: 'Subject can''t be moved: The source and target are identical.' for: self builder window].	(dropSubject allChildren includes: targetSubject)		ifTrue: [^self adDialog alert: 'Subject can''t be moved: The source is parent of the target.' for: self builder window].	dropSubjectBase := dropSubject baseClass.	dropSubject parents do: [:each | each removeClasses: (Array with: dropSubjectBase)].	targetSubject addClasses: (Array with: dropSubjectBase).	self update</body><body package="ADvance2">subjectWantsToDrag: aController	"Answer whether a valid subject is selected."	^self hasSubjectSelection and: [self subjectSelectionIsValid			ifTrue: [true]			ifFalse:				[self updateWithNotification.				false]]</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>drag and drop-diagrams</category><body package="ADvance2">diagramWantsToDrag: aController	"Answer whether a valid diagram is selected."	^self hasDiagramSelection and: [(self subjectSelectionIsValid and: [self diagramSelectionIsValid])			ifTrue: [true]			ifFalse:				[self updateWithNotification.				false]]</body><body package="ADvance2">doDiagramDrag: aController	"Drag the currently selected subject."	| ds dm data |	self hasSubjectSelection ifFalse: [^self].	data := DragDropData new.	data key: #ADvanceDiagram.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: self diagramTree selection.	ds := DropSource new.	dm := DragDropManager withDropSource: ds withData: data.	dm doDragDrop</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>aspects</category><body package="ADvance2">diagramHeader	^diagramHeader</body><body package="ADvance2">diagramTree	^diagramTree</body><body package="ADvance2">statusField1	^statusField1 isNil		ifTrue: [statusField1 := String new asValue]		ifFalse: [statusField1]</body><body package="ADvance2">statusField2	^statusField2 isNil		ifTrue: [statusField2 := String new asValue]		ifFalse: [statusField2]</body><body package="ADvance2">subjectHeader	^'All subjects' asText asValue</body><body package="ADvance2">subjectTree	^subjectTree</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>changing</category><body package="ADvance2">changedDiagramSelection	| diagram |	diagram := self diagramTree selection.	self statusField2 value: (diagram isNil			ifTrue: ['']			ifFalse: [diagram authorAndCreationDateString]).	self enableButtons.	self enableDiagramTreeMenuItems</body><body package="ADvance2">changedLayout	"Hide or show the toolbar and regenerate the interface."	| panesWrapper |	panesWrapper := builder componentAt: #panes.	panesWrapper layout: (panesWrapper layout			 topOffset: (self state toolbarVisible					ifTrue: [26]					ifFalse: [0]);			 leftOffset: 0;			 bottomOffset: (self state statusBarVisible					ifTrue: [-20]					ifFalse: [0]);			 yourself).	super changedLayout</body><body package="ADvance2">changedSubjectSelection	| selection diagrams |	selection := self subjectTree selection.	self diagramHeader value: (selection isNil			ifTrue: [String new]			ifFalse: ['Diagrams of ' , selection name asString printString]).	diagrams := selection isNil				ifTrue: [OrderedCollection new]				ifFalse: [selection diagramsWithFake].	statusField1 value: ('&lt;1p&gt; diagram(s)' expandMacrosWith: diagrams size).	self diagramTree list root: (AD2DiagramRoot new addAll: diagrams; yourself) displayIt: false.	self diagramTree selection: nil.	self enableButtons</body><body package="ADvance2">enableButtons	self iccEnable: ((self subjectTree selectionIndex &gt; 0 and: [self hasDiagramSelection not])			or: [self hasUnfakedDiagramSelection])		itemAndButtonGroup: #(#save).	self iccEnable: ((self subjectTree selectionIndex &gt; 1 and: [self hasDiagramSelection not])			or: [self hasUnfakedDiagramSelection])		itemAndButtonGroup: #(#delete #rename #properties).	self iccEnable: (self subjectTree selectionIndex &gt; 1 or: [self hasDiagramSelection])		itemAndButtonGroup: #(#openItem)</body><body package="ADvance2">enableDiagramTreeMenuItems	| diagramTreeMenu |	diagramTreeMenu := (self builder componentAt: #diagramTree) widget controller menuHolder.	diagramTreeMenu menuItems do: [:aMenuItem | aMenuItem label = 'Open...'			ifTrue: [aMenuItem enabled: self hasDiagramSelection]			ifFalse: [aMenuItem enabled: self hasUnfakedDiagramSelection]]</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>testing</category><body package="ADvance2">diagramSelectionIsValid	"@Pre:		A subject and diagram are selected.	@Action:	Answer whether the selected subject has the diagram selection as diagram."	^self subjectTree selection hasDiagramNamed: self diagramTree selection name</body><body package="ADvance2">hasDiagramSelection	^self diagramTree selection notNil</body><body package="ADvance2">hasSubjectAndDiagramSelection	^self hasSubjectSelection and: [self hasDiagramSelection]</body><body package="ADvance2">hasSubjectAndUnfakedDiagramSelection	^self hasSubjectSelection and: [self hasUnfakedDiagramSelection]</body><body package="ADvance2">hasSubjectSelection	^self subjectTree selectionIndex &gt; 1</body><body package="ADvance2">hasUnfakedDiagramSelection	| selection |	selection := self diagramTree selection.	^selection notNil and: [selection name ~= self advance diagramSpecClass fakeName]</body><body package="ADvance2">subjectAndDiagramSelectionIsValid	"@Pre:		A subject and diagram are selected.	@Action:	Answer whether the selected subject and diagram are valid."	^self subjectSelectionIsValid and: [self diagramSelectionIsValid]</body><body package="ADvance2">subjectSelectionIsValid	"@Pre:		A subject is selected.	@Action:	Answer whether the selected subject is valid."	^self subjectTree selection isValid</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>actions-subjects</category><body package="ADvance2">deleteSubject	"Do a safe delete of the selected subject. First check whether the subject	is valid, then confirm the removal."	| subject |	self hasSubjectSelection ifFalse: [^self].	self subjectSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	(self adDialog confirm: ('Do you want to delete subject &lt;1p&gt;?' expandMacrosWith: subject name asString)		for: self builder window)		ifFalse: [^self].	(self basicDeleteSubject: subject)		ifTrue: [self update]</body><body package="ADvance2">editSubjectProperties	self hasSubjectSelection ifFalse: [^self].	self subjectSelectionIsValid ifFalse: [^self updateWithNotification].	(self advance subjectPropertiesClass new model: self subjectTree selection)		openInterface: #windowSpec for: self builder window</body><body package="ADvance2">fileOutSubject	| invalidFilename dialog subject filename repeatFileNameRequest filenameString |	self hasSubjectSelection ifFalse: [^self].	self subjectSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	repeatFileNameRequest := true.	filenameString := self advance utils suggestFilename: subject name , 'Spec.st'.	[repeatFileNameRequest]		whileTrue:			[repeatFileNameRequest := false.			invalidFilename := false.			dialog := self advance fileOutSubjectDialogClass new.			dialog filename value: filenameString.			(dialog openInterface: #windowSpec for: self builder window)				ifFalse: [^self].			filenameString := dialog filename value.			OSErrorHolder badArgumentsSignal handle: [:ex | "The exception handler is neccessary because the Filename may not exist"				invalidFilename := true]				do: [filename := dialog filename value asFilename].			invalidFilename				ifFalse:					[filename := dialog filename value asFilename.					invalidFilename := (filename directory definitelyExists and: [filename directory isWritable]) not].			invalidFilename ifTrue: [repeatFileNameRequest := self adDialog confirm: 'The Filename ''' , filenameString , ''' is invalid \or the directory is write protected.\Try again?' withCRs]].	(filenameString isEmpty or: [invalidFilename])		ifTrue: [^self].	(filename exists and: [(self adDialog confirm: ('&lt;1p&gt; already exists.&lt;n&gt;Use anyway?' expandMacrosWith: filename asString)			for: self window) not])		ifTrue: [^self].	Object errorSignal handle: [:ex | self adDialog message: 'Saving the subject was unsuccessful, maybe \the filename contains invalid characters.' withCRs]		do: [Cursor wait showWhile: [self					fileOutSubject: subject					to: filename					recurse: dialog recurseSubjects value					wholeClass: dialog fileOutWholeClass value]]</body><body package="ADvance2">openSubject	| subject |	self hasSubjectSelection ifFalse: [^self].	self subjectSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	(self advance subjectEditorClass newOn: subject filtered: subject isEmpty not)		openInterface: #windowSpec for: self window</body><body package="ADvance2">renameSubject	self hasSubjectSelection ifFalse: [^self].	self subjectSelectionIsValid ifFalse: [^self updateWithNotification].	(self builder componentAt: #subjectTree) widget controller inplaceEdit</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>actions-diagrams</category><body package="ADvance2">deleteDiagram	| subject diagram |	self hasSubjectAndUnfakedDiagramSelection ifFalse: [^self].	self subjectAndDiagramSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	diagram := self diagramTree selection.	(self adDialog confirm: ('Do you want to delete diagram&lt;n&gt;&lt;1p&gt;?' expandMacrosWith: diagram name)		for: self builder window)		ifFalse: [^self].	subject removeDiagram: diagram name.	self changedSubjectSelection</body><body package="ADvance2">editDiagramProperties	| subject diagram |	self hasSubjectAndUnfakedDiagramSelection ifFalse: [^self].	self subjectAndDiagramSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	diagram := self diagramTree selection.	((self advance diagramPropertiesClass new model: diagram)		openInterface: #windowSpec for: self window)		ifFalse: [^self].	subject saveDiagram: diagram</body><body package="ADvance2">fileOutDiagram	| subject diagram filename |	self hasSubjectAndUnfakedDiagramSelection		ifFalse:			[self adDialog message: 'Saving diagram "' , self advance diagramSpecClass fakeName , '" is not allowed.'.			^self].	self subjectAndDiagramSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	diagram := self diagramTree selection.	filename := self adDialog				requestNewFileName: 'File out on:'				suggest: subject name , diagram name , '.st'				for: self window.	filename isEmpty ifTrue: [^nil].	Cursor wait showWhile: [self adBasics systemOrganization			fileOut: (Array with: (subject diagramSelectorFor: diagram name))			for: subject baseClass class			to: filename]</body><body package="ADvance2">openDiagram	| subject diagram diagramName painter |	self hasSubjectAndDiagramSelection ifFalse: [^self].	self subjectSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	diagram := self diagramTree selection.	diagramName := diagram name = self advance diagramSpecClass fakeName				ifTrue: [nil]				ifFalse:					[self diagramSelectionIsValid ifFalse: [^self updateWithNotification].					diagram name].	painter := self advance diagramPainterClass new.	painter open isNil ifTrue: [^self].	painter openDiagramOn: subject name: diagramName</body><body package="ADvance2">renameDiagram	| subject oldName newName diagram |	self hasSubjectAndUnfakedDiagramSelection ifFalse: [^self].	self subjectAndDiagramSelectionIsValid ifFalse: [^self updateWithNotification].	subject := self subjectTree selection.	diagram := self diagramTree selection.	oldName := diagram name.	newName := self adDialog request: 'Please enter new diagram name\' withCRs initialAnswer: oldName.	(oldName = newName or: [newName isEmpty or: [newName isNil]])		ifTrue: [^self].	diagram name: newName.	(subject hasDiagramNamed: newName)		ifTrue:			[diagram name: oldName.			^self adDialog warn: ('A diagram named &lt;1p&gt; already exists.' expandMacrosWith: newName)				for: self builder window].	subject removeDiagram: oldName.	subject saveDiagram: diagram</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>private</category><body package="ADvance2">basicDeleteSubject: aSubject	"^&lt;Boolean&gt; If the subject has no code, delete its base class from the system.	Otherwise ask the user whether the base class should be removed from system or not.	If not, remove all selectors related to ADvance from the base class.	Answer whether the subject is deleted."	| result |	aSubject hasCode		ifFalse:			[aSubject removeBaseClass.			^true].	result := self adDialog threeStateConfirm: ('The base class of subject &lt;1p&gt; has code.&lt;n&gt;&lt;n&gt;Do you want to remove it from the system?' expandMacrosWith: aSubject name asString)				for: nil.	result isNil ifTrue: [^false].	result		ifTrue: [aSubject removeBaseClass]		ifFalse: [aSubject removeSubjectSelectors].	^true</body><body package="ADvance2">fileOutSubject: subject to: filename recurse: recurse wholeClass: wholeClass	| subjectCollection |	subjectCollection := recurse				ifTrue: [subject withAllChildren]				ifFalse: [Array with: subject].	self adBasics systemOrganization		fileOut: (subjectCollection collect: [:each | each baseClass])		to: filename		wholeClass: wholeClass</body><body package="ADvance2">findSubject: aSubject	"Select a subject in the subject tree."	| tree parent index |	tree := self subjectTree listHolder value.	parent := self advance subjectEnvironment root.	[index := tree findFirst: [:each | each value = parent]				startingAt: 1.	parent = aSubject]		whileFalse:			[tree expand: index.			parent := parent children detect: [:each | each withAllChildren includes: aSubject]].	self subjectTree selectionIndex: index</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>drag and drop support</category><body package="ADvance2">initialSubjectTreeDropState	"Answer the initial state of the subject tree when a drag has begun within its	bounds. The state will be used to re-establish the appearance of the list when	a drag leaves."	| dict ctrl |	ctrl := (self builder componentAt: #subjectTree) widget controller.	dict := IdentityDictionary new.	dict at: #ctrl put: ctrl.	dict at: #targetIndex put: ctrl view targetIndex.	dict at: #hasFocus put: ctrl view hasFocus.	ctrl view hasFocus: true.	^dict</body><body package="ADvance2">restoreTreeStateFrom: aDictionary	"Reset the state of the subject or diagram tree when a drag has left its bounds."	| ctrl |	ctrl := aDictionary at: #ctrl.	ctrl view targetIndex: (aDictionary at: #targetIndex).	ctrl view hasFocus: (aDictionary at: #hasFocus)</body><body package="ADvance2">showDropFeedbackForTree: aSymbol in: aDragContext	"Track the mouse with the target index while dragging in the list named	aSymbol."	| wrapper |	wrapper := self builder componentAt: aSymbol.	wrapper isNil ifFalse: [wrapper widget showDropFeedbackIn: aDragContext allowScrolling: true]</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	subjectTree := SelectionInList new list: TreeModel new.	diagramTree := SelectionInList new  list: TreeModel new.	self diagramTree selectionIndexHolder onChangeSend: #changedDiagramSelection to: self.	diagramHeader := nil asValue</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>interface-opening</category><body package="ADvance2">configureSubjectTreeMenu: aBuilder	^self</body><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self configureSubjectTreeMenu: aBuilder.	self updateSubjectTree.	self subjectTree selectionIndexHolder onChangeSend: #changedSubjectSelection to: self.	self changedLayout.</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self subjectTree list expand: 1.	self enableButtons.	self enableDiagramTreeMenuItems</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>menus&amp;items</category><body package="ADvance2">toolbarsMenu	^(self mainMenu atNameKey: #view)</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser</class-id> <category>updating</category><body package="ADvance2">updateSubjectTree	self subjectTree list root: self advance subjectEnvironment root displayIt: true.	self subjectTree selection: nil</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser class</class-id> <category>constants</category><body package="ADvance2">getHelpDictionary	"self initializeHelpDictionary"	^super getHelpDictionary		 at: #newSubjectButton put: #('New' 'Creates an new subject via Subject Wizard.');		 at: #saveButton put: #('Save' 'Files out the selected item.');		 at: #deleteButton put: #('Delete' 'Deletes the selected item from system.');		 at: #findButton put: #('Find' 'Finds a subject or diagram.');		 yourself</body><body package="ADvance2">initiallyDisabledItems	^#(#delete #openItem)</body><body package="ADvance2">itemSpecs	^super itemSpecs		 at: #newSubject put: (self toolbarButtonAt: #newSubject);		 at: #openItem put: (self toolbarItemAt: #openSrc);		 at: #properties put: (self toolbarItemAt: #properties);		 yourself</body><body package="ADvance2">toolbarPolicy	^AD2ToolbarPolicy smallButtons firstOrigin: 2 @ 2</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>actions</category><body package="ADvance2">clearAllScripts	self visibleScripts clearAll</body><body package="ADvance2">selectAllScripts	self visibleScripts selectAll</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>accessing</category><body package="ADvance2">oldAssociationDepth	^oldAssociationDepth</body><body package="ADvance2">oldAssociationDepth: aString	oldAssociationDepth := aString</body><body package="ADvance2">oldScriptDepth	^oldScriptDepth</body><body package="ADvance2">oldScriptDepth: aString	oldScriptDepth := aString</body><body package="ADvance2">targetModel	^targetModel</body><body package="ADvance2">targetModel: anADClassModel	targetModel := anADClassModel</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>events</category><body package="ADvance2">noticeOfWindowClose: aWindow	"The ApplicationWindow aWindow is in the process of closing.	You have been notified."	super noticeOfWindowClose: aWindow. 	self release</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>private</category><body package="ADvance2">diagramState	^self targetModel applicationModel diagramState value</body><body package="ADvance2">doCancel	self associationDepth value: self oldAssociationDepth.	self scriptDepth value: self oldScriptDepth.	^super doCancel</body><body package="ADvance2">updateVisibleScripts	"Update the list of scipts depending on the selected association depth"	| newList oldSelections |	oldSelections := self visibleScripts selections.	newList := self targetModel possibleScripts asSortedCollection: AD2Service extendedSelectorsSortBlock.	(self visibleScripts) list: newList; selections: oldSelections</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>aspects</category><body package="ADvance2">associationDepth	associationDepth isNil		ifTrue:			[associationDepth := ((AspectAdaptor subject: self diagramState)						forAspect: #associationDepthString)						onChangeSend: #changedAssociationDepth to: self.			self oldAssociationDepth: associationDepth value].	^associationDepth</body><body package="ADvance2">associationDepthList	^#('infinite' '1' '2' '3') asList asValue</body><body package="ADvance2">scriptDepth	scriptDepth isNil		ifTrue:			[scriptDepth := (AspectAdaptor subject: self diagramState)						forAspect: #scriptDepthString.			self oldScriptDepth: scriptDepth value].	^scriptDepth</body><body package="ADvance2">scriptDepthList	^self class scriptDepthList asValue</body><body package="ADvance2">visibleScripts	^visibleScripts isNil		ifTrue: [visibleScripts := MultiSelectionInList new]		ifFalse: [visibleScripts]</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(aBuilder componentAt: #visibleScripts) widget displayStringSelector: #extendedSelector</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self updateVisibleScripts.	self visibleScripts selections: self targetModel visibleScripts</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>initialize-release</category><body package="ADvance2">release	scriptDepth isNil ifFalse: [scriptDepth release].	associationDepth isNil ifFalse: [associationDepth release].	targetModel := nil.	builder release.	builder := nil.	parentView := nil.	super release</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog</class-id> <category>changing</category><body package="ADvance2">changedAssociationDepth	self updateVisibleScripts</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog class</class-id> <category>constants</category><body package="ADvance2">scriptDepthList	^#('infinite' '1' '2' '3' '4' '5') asList</body></methods><methods><class-id>ICC.ADvance.AD2ToolState</class-id> <category>initialize-release</category><body package="ADvance2">initialize	toolbarVisible := true.	statusBarVisible := true.	bubbleHelpEnabled := true</body></methods><methods><class-id>ICC.ADvance.AD2ToolState</class-id> <category>accessing</category><body package="ADvance2">bubbleHelpEnabled	^bubbleHelpEnabled</body><body package="ADvance2">bubbleHelpEnabled: aValue	bubbleHelpEnabled := aValue</body><body package="ADvance2">statusBarVisible	^statusBarVisible</body><body package="ADvance2">statusBarVisible: aBoolean	statusBarVisible := aBoolean</body><body package="ADvance2">toolbarVisible	^toolbarVisible</body><body package="ADvance2">toolbarVisible: aBoolean	toolbarVisible := aBoolean</body></methods><methods><class-id>ICC.ADvance.AD2ToolState class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2PainterState</class-id> <category>accessing</category><body package="ADvance2">addButtonsVisible	^addButtonsVisible</body><body package="ADvance2">addButtonsVisible: aBoolean	addButtonsVisible := aBoolean</body></methods><methods><class-id>ICC.ADvance.AD2PainterState</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	addButtonsVisible := true</body></methods><methods><class-id>ICC.ADvance.AD2InheritanceModel</class-id> <category>accessing layout</category><body package="ADvance2">symbol	| theVertices orientation end p1 p2 start extent |	theVertices := self vertices.	start := theVertices at: 2.	end := theVertices at: 1.	orientation := (end - start) theta + (Float pi / 2).	extent := self symbolExtent.	p1 := (extent x @ extent y ad2RotateBy: orientation)				+ end.	p2 := (extent x negated @ extent y ad2RotateBy: orientation)				+ end.	^Polyline vertices: (Array			with: p1			with: p2			with: end			with: p1)</body></methods><methods><class-id>ICC.ADvance.AD2InheritanceModel</class-id> <category>displaying</category><body package="ADvance2">displayIn: anEditor	| aPart |	aPart := (NVVisibilityWrapper on: (AD2InheritancePart new model: self; yourself))				isVisible: self visible; yourself.	(anEditor layers at: 1)		add: aPart.	aPart updateForDisplay</body></methods><methods><class-id>ICC.ADvance.AD2InheritanceModel</class-id> <category>accessing</category><body package="ADvance2">domainType	^#inheritance</body></methods><methods><class-id>ICC.ADvance.AD2InheritanceModel</class-id> <category>private layout</category><body package="ADvance2">computeVertices	^self advance preferences painter inheritanceLayoutType == #gridded		ifTrue: [self griddedVertices]		ifFalse: [self straightVertices]</body><body package="ADvance2">genericVertices	| startRectangle endRectangle p1 p2 p3 p4 p5 xMiddle |	startRectangle := self vertex1 area.	endRectangle := self vertex2 area.	p1 := self lineStartLocation.	p5 := self vertex2 area topCenter.	p4 := p5 - (0 @ self class separation).	xMiddle := startRectangle right &lt; endRectangle left				ifTrue: [startRectangle right + endRectangle left // 2]				ifFalse: [endRectangle right &lt; startRectangle left						ifTrue: [startRectangle left + endRectangle right // 2]						ifFalse: [p1 x + p5 x // 2]].	p2 := xMiddle @ p1 y.	p3 := xMiddle @ p4 y.	^(Array new: 6)		at: 1 put: startRectangle bottomCenter;		at: 2 put: p1;		at: 3 put: p2;		at: 4 put: p3;		at: 5 put: p4;		at: 6 put: p5;		yourself</body><body package="ADvance2">griddedVertices	| startPoint box |	startPoint := self vertex1 area bottomCenter.	box := self vertex2 area.	^box top - startPoint y &lt; 4		ifTrue: [self genericVertices]		ifFalse: [(box left + 10 &lt; startPoint x and: [startPoint x + 10 &lt; box right])				ifTrue: [Array with: startPoint with: startPoint x @ box top]				ifFalse: [self simpleVertices]]</body><body package="ADvance2">lineStartLocation	^self vertex1 area bottomCenter + (0 @ self symbolExtent y)</body><body package="ADvance2">simpleVertices	| p1 p2 |	p1 := self lineStartLocation.	p2 := self vertex2 area topCenter.	^Array		with: self vertex1 area bottomCenter		with: p1		with: p2 x @ p1 y		with: p2</body><body package="ADvance2">straightVertices	| line box1 box2 |	box1 := self vertex1 area.	box2 := self vertex2 area.	line := ((LineSegment from: box1 center to: box2 center)				ad2ClippedAt: box1)				ad2ClippedAt: box2.	^Array with: line start with: line end</body><body package="ADvance2">symbolExtent	^6 @ 16</body></methods><methods><class-id>ICC.ADvance.AD2MRUList</class-id> <category>accessing</category><body package="ADvance2">mostRecentlyUsed	^self first</body><body package="ADvance2">sizeLimit	^sizeLimit</body><body package="ADvance2">sizeLimit: anInteger	sizeLimit := anInteger</body></methods><methods><class-id>ICC.ADvance.AD2MRUList</class-id> <category>copying</category><body package="ADvance2">copyEmpty: aSize	"Answer a copy of the receiver that contains no elements.	This method should be redefined in subclasses that add	instance variables, so that the state of those variables	is preserved"	^(super copyEmpty: aSize)		sizeLimit: sizeLimit</body></methods><methods><class-id>ICC.ADvance.AD2MRUList</class-id> <category>adding-removing</category><body package="ADvance2">add: anObject	(self includes: anObject)		ifTrue: [self remove: anObject]. 	self addFirst: anObject.	self size &gt; self sizeLimit ifTrue: [self removeLast]</body><body package="ADvance2">remove: anObject	^self remove: anObject ifAbsent: [nil]</body></methods><methods><class-id>ICC.ADvance.AD2MRUList class</class-id> <category>instance creation</category><body package="ADvance2">limit: anInteger	^self limit: anInteger default: nil</body><body package="ADvance2">limit: anInteger default: anObject	| result |	result := self new sizeLimit: anInteger.	anObject isNil ifFalse: [result add: anObject].	^result</body></methods><methods><class-id>ICC.ADvance.IccHTMLHeading</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/H',self counter printString,'&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	| tmpString |	tmpString := '&lt;H',self counter printString.	self attributes do: [ :anAssoc |		anAssoc key = #align ifTrue:[ tmpString := tmpString,' ALIGN=',anAssoc value ]].	^tmpString,'&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLHeading</class-id> <category>accessing</category><body package="ADvance2">align	"&lt;Symbol | nil&gt;"	^self getAttribute: #align</body><body package="ADvance2">centerAlign	"&lt;&gt;"	self addAttribute: #align value: 'CENTER'</body><body package="ADvance2">counter	"&lt;Integer | nil&gt;"	^self getAttribute: #header</body><body package="ADvance2">counter: anInteger	"&lt;&gt;"	self addAttribute: #header value: anInteger</body><body package="ADvance2">leftAlign	"&lt;&gt;"	self addAttribute: #align value: 'LEFT'</body></methods><methods><class-id>ICC.ADvance.IccHTMLDefListHeader class</class-id> <category>instance creation</category><body package="ADvance2">newHTMLString: aHTMLString	"^&lt;HTMLDefListHeader&gt;"	| tmpHTMLItem |	tmpHTMLItem := self new.	tmpHTMLItem add: aHTMLString.	^tmpHTMLItem</body><body package="ADvance2">newString: aString	"^&lt;HTMLDefListHeader&gt;"	| tmpHTMLItem aIccHTMLString |	aIccHTMLString := IccHTMLString		new content: aString;		yourself.	tmpHTMLItem := self new.	tmpHTMLItem add: aIccHTMLString.	^tmpHTMLItem</body></methods><methods><class-id>ICC.ADvance.AD2PrintSettings</class-id> <category>accessing</category><body package="ADvance2">area	^area</body><body package="ADvance2">area: aSymbol	area := aSymbol</body><body package="ADvance2">copies	^copies</body><body package="ADvance2">copies: anInteger	copies := anInteger</body><body package="ADvance2">fitToPage	^fitToPage</body><body package="ADvance2">fitToPage: aBoolean	fitToPage := aBoolean</body><body package="ADvance2">fromPage	^fromPage</body><body package="ADvance2">fromPage: anInteger	fromPage := anInteger</body><body package="ADvance2">orientation	^orientation</body><body package="ADvance2">orientation: aByteSymbol	orientation := aByteSymbol</body><body package="ADvance2">printToFile	^printToFile</body><body package="ADvance2">printToFile: aBoolean	printToFile := aBoolean</body><body package="ADvance2">scale	^scale</body><body package="ADvance2">scale: aNumber	scale := aNumber</body><body package="ADvance2">sortCopies	^sortCopies</body><body package="ADvance2">sortCopies: aBoolean	sortCopies := aBoolean</body><body package="ADvance2">toPage	^toPage</body><body package="ADvance2">toPage: anInteger	toPage := anInteger</body></methods><methods><class-id>ICC.ADvance.AD2PrintSettings</class-id> <category>initialize-release</category><body package="ADvance2">initialize	area := #all.	fromPage := 1.	toPage := nil.	scale := 100. "%"	fitToPage := false.	orientation := #portrait.	printToFile := false.	copies := 0.	sortCopies := false.</body></methods><methods><class-id>ICC.ADvance.AD2PrintSettings class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>actions</category><body package="ADvance2">chooseFilter	"Choose a filter."	| selection |	self changeRequest ifFalse: [^self].	selection := self advance chooseFilterNameFor: self builder window.	selection isNil ifTrue: [^self].	self readFilterFrom: (self advance filterEnvironment at: selection)</body><body package="ADvance2">clearAllFilteredClassInstVars	self filteredClassInstVarsList clearAll</body><body package="ADvance2">clearAllFilteredClassMethods	self filteredClassMethodsList clearAll</body><body package="ADvance2">clearAllFilteredClassProtocols	self filteredClassProtocolsList clearAll</body><body package="ADvance2">clearAllFilteredInstMethods	self filteredInstMethodsList clearAll</body><body package="ADvance2">clearAllFilteredInstProtocols	self filteredInstProtocolsList clearAll</body><body package="ADvance2">clearAllFilteredInstVars	self filteredInstVarsList clearAll</body><body package="ADvance2">clearAllFilteredSharedVars	self filteredSharedVarsList clearAll</body><body package="ADvance2">doAccept	self saveFilter.	super doAccept</body><body package="ADvance2">doCancel	self changeRequest ifTrue: [super doCancel]</body><body package="ADvance2">doRead	"Read the filter from domain."	(self modified not or: [self adDialog confirm: 'Do you want to override changes?' for: self builder window])		ifTrue: [self readDomainFilter]</body><body package="ADvance2">removeClassInstVars	| selectedInstVars |	selectedInstVars := self filteredClassInstVarsList selections.	self filteredClassInstVarsList list: (self filteredClassInstVarsList list removeAll: selectedInstVars; yourself)</body><body package="ADvance2">removeClassMethods	| selectedMethods |	selectedMethods := self filteredClassMethodsList selections.	self filteredClassMethodsList list: (self filteredClassMethodsList list removeAll: selectedMethods; yourself)</body><body package="ADvance2">removeClassProtocols	| selectedProtocols |	selectedProtocols := self filteredClassProtocolsList selections.	self filteredClassProtocolsList list: (self filteredClassProtocolsList list removeAll: selectedProtocols; yourself)</body><body package="ADvance2">removeInstMethods	| selectedMethods |	selectedMethods := self filteredInstMethodsList selections.	self filteredInstMethodsList list: (self filteredInstMethodsList list removeAll: selectedMethods; yourself)</body><body package="ADvance2">removeInstProtocols	| selectedProtocols |	selectedProtocols := self filteredInstProtocolsList selections.	self filteredInstProtocolsList list: (self filteredInstProtocolsList list removeAll: selectedProtocols; yourself)</body><body package="ADvance2">removeInstVars	| selectedInstVars |	selectedInstVars := self filteredInstVarsList selections.	self filteredInstVarsList list: (self filteredInstVarsList list removeAll: selectedInstVars; yourself)</body><body package="ADvance2">removeSharedVars	| selectedSharedVars |	selectedSharedVars := self filteredSharedVarsList selections.	self filteredSharedVarsList list: (self filteredSharedVarsList list removeAll: selectedSharedVars; yourself)</body><body package="ADvance2">selectAllFilteredClassInstVars	self filteredClassInstVarsList selectAll</body><body package="ADvance2">selectAllFilteredClassMethods	self filteredClassMethodsList selectAll</body><body package="ADvance2">selectAllFilteredClassProtocols	self filteredClassProtocolsList selectAll</body><body package="ADvance2">selectAllFilteredInstMethods	self filteredInstMethodsList selectAll</body><body package="ADvance2">selectAllFilteredInstProtocols	self filteredInstProtocolsList selectAll</body><body package="ADvance2">selectAllFilteredInstVars	self filteredInstVarsList selectAll</body><body package="ADvance2">selectAllFilteredSharedVars	self filteredSharedVarsList selectAll</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>private</category><body package="ADvance2">changeRequest	^self modified		ifTrue:			[| result |			result := self adDialog threeStateConfirm: 'Save filter changes?' for: self builder window.			result notNil ifTrue: [result ifTrue: [self saveFilter]].			result notNil]		ifFalse: [true]</body><body package="ADvance2">getFilterFromDialog	^self targetFilter value copy</body><body package="ADvance2">labelArray	^#('Instance methods' 'Class methods' 'Attributes' 'Special')</body><body package="ADvance2">modified	^copiedFilter ~= self getFilterFromDialog</body><body package="ADvance2">setWindowLabel	self builder window label: self class windowLabel , ' - [' , self domain name , ']'</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#instanceMethodsSpec #classMethodsSpec #attributesSpec #specialSpec)</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>accessing</category><body package="ADvance2">domain	^domain</body><body package="ADvance2">domain: aModel	domain := aModel</body><body package="ADvance2">targetFilter	^targetFilter</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>interface opening</category><body package="ADvance2">idsWithModifiedVisualBlocks	^#(#filteredInstProtocols #filteredInstMethods #filteredClassProtocols #filteredClassMethods #filteredClassInstVars #filteredInstVars #filteredSharedVars)</body><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self setSelectVisualBlocksWith: aBuilder.	self setWindowLabel</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self readDomainFilter</body><body package="ADvance2">setSelectVisualBlocksWith: aBuilder	self idsWithModifiedVisualBlocks do:		[:id |		| component |		(component := aBuilder componentAt: id) isNil ifFalse: [component widget normalSelection]]</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>aspects</category><body package="ADvance2">classInstVarPattern	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^classInstVarPattern isNil		ifTrue:			[classInstVarPattern := String new asValue]		ifFalse:			[classInstVarPattern]</body><body package="ADvance2">classMethodPattern	^classMethodPattern isNil		ifTrue: [classMethodPattern := String new asValue]		ifFalse: [classMethodPattern]</body><body package="ADvance2">classProtocolPattern	^classProtocolPattern isNil		ifTrue: [classProtocolPattern := String new asValue]		ifFalse: [classProtocolPattern]</body><body package="ADvance2">filteredClassInstVarsList	filteredClassInstVarsList isNil		ifTrue:			[filteredClassInstVarsList := MultiSelectionInList new listHolder: ((AspectAdaptor subjectChannel: self targetFilter)							accessWith: #getFilteredClassInstVars assignWith: #setFilteredClassInstVars:).			filteredClassInstVarsList selectionIndexHolder onChangeSend: #changedFilteredClassInstVars to: self].	^filteredClassInstVarsList</body><body package="ADvance2">filteredClassMethodsList	filteredClassMethodsList isNil		ifTrue:			[filteredClassMethodsList := MultiSelectionInList new listHolder: ((AspectAdaptor subjectChannel: self targetFilter)							accessWith: #getFilteredClassMethods assignWith: #setFilteredClassMethods:).			filteredClassMethodsList selectionIndexHolder onChangeSend: #changedFilteredClassMethods to: self].	^filteredClassMethodsList</body><body package="ADvance2">filteredClassProtocolsList	filteredClassProtocolsList isNil		ifTrue:			[filteredClassProtocolsList := MultiSelectionInList new listHolder: ((AspectAdaptor subjectChannel: self targetFilter)							accessWith: #getFilteredClassProtocols assignWith: #setFilteredClassProtocols:).			filteredClassProtocolsList selectionIndexHolder onChangeSend: #changedFilteredClassProtocols to: self].	^filteredClassProtocolsList</body><body package="ADvance2">filteredInstMethodsList	filteredInstMethodsList isNil		ifTrue:			[filteredInstMethodsList := MultiSelectionInList new listHolder: ((AspectAdaptor subjectChannel: self targetFilter)							accessWith: #getFilteredInstMethods assignWith: #setFilteredInstMethods:).			filteredInstMethodsList selectionIndexHolder onChangeSend: #changedFilteredInstMethods to: self].	^filteredInstMethodsList</body><body package="ADvance2">filteredInstProtocolsList	filteredInstProtocolsList isNil		ifTrue:			[filteredInstProtocolsList := MultiSelectionInList new listHolder: ((AspectAdaptor subjectChannel: self targetFilter)							accessWith: #getFilteredInstProtocols assignWith: #setFilteredInstProtocols:).			filteredInstProtocolsList selectionIndexHolder onChangeSend: #changedFilteredInstProtocols to: self].	^filteredInstProtocolsList</body><body package="ADvance2">filteredInstVarsList	filteredInstVarsList isNil		ifTrue:			[filteredInstVarsList := MultiSelectionInList new listHolder: ((AspectAdaptor subjectChannel: self targetFilter)							accessWith: #getFilteredInstVars assignWith: #setFilteredInstVars:).			filteredInstVarsList selectionIndexHolder onChangeSend: #changedFilteredInstVars to: self].	^filteredInstVarsList</body><body package="ADvance2">filteredSharedVarsList	filteredSharedVarsList isNil		ifTrue:			[filteredSharedVarsList := MultiSelectionInList new listHolder: ((AspectAdaptor subjectChannel: self targetFilter)							accessWith: #getFilteredSharedVars assignWith: #setFilteredSharedVars:).			filteredSharedVarsList selectionIndexHolder onChangeSend: #changedFilteredSharedVars to: self].	^filteredSharedVarsList</body><body package="ADvance2">instMethodPattern	^instMethodPattern isNil		ifTrue: [instMethodPattern := String new asValue]		ifFalse: [instMethodPattern]</body><body package="ADvance2">instProtocolPattern	^instProtocolPattern isNil		ifTrue: [instProtocolPattern := String new asValue]		ifFalse: [instProtocolPattern]</body><body package="ADvance2">instVarPattern	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^instVarPattern isNil		ifTrue:			[instVarPattern := String new asValue]		ifFalse:			[instVarPattern]</body><body package="ADvance2">sharedVarPattern	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^sharedVarPattern isNil		ifTrue:			[sharedVarPattern := String new asValue]		ifFalse:			[sharedVarPattern]</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>changing</category><body package="ADvance2">changedClassInstVarPattern	| pattern classInstVars newClassInstVars |	pattern := self classInstVarPattern value.	pattern isNil ifTrue: [^self].	classInstVars := self filteredClassInstVarsList.	newClassInstVars := classInstVars list asSet.	classInstVars selections isEmpty ifFalse: [newClassInstVars remove: classInstVars selections first].	newClassInstVars add: pattern.	classInstVars list: newClassInstVars asSortedCollection.	classInstVars selections: (Set with: pattern)</body><body package="ADvance2">changedClassMethodPattern	| pattern methods newMethods |	pattern := self classMethodPattern value.	pattern isNil ifTrue: [^self].	methods := self filteredClassMethodsList.	newMethods := methods list asSet.	methods selections isEmpty ifFalse: [newMethods remove: methods selections first].	newMethods add: pattern.	methods list: newMethods asSortedCollection.	methods selections: (Set with: pattern)</body><body package="ADvance2">changedClassProtocolPattern	| pattern protocols newProtocols |	pattern := self classProtocolPattern value.	pattern isNil ifTrue: [^self].	protocols := self filteredClassProtocolsList.	newProtocols := protocols list asSet.	protocols selections isEmpty ifFalse: [newProtocols remove: protocols selections first].	newProtocols add: pattern.	protocols list: newProtocols asSortedCollection.	protocols selections: (Set with: pattern)</body><body package="ADvance2">changedFilteredClassInstVars	| selections |	selections := self filteredClassInstVarsList selections.	selections size = 1 ifTrue: [(self classInstVarPattern) retractInterestsFor: self; value: selections first; onChangeSend: #changedClassInstVarPattern to: self].	self iccEnable: selections isEmpty not group: #(#removeClassInstVars)</body><body package="ADvance2">changedFilteredClassMethods	| selections |	selections := self filteredClassMethodsList selections.	selections size = 1 ifTrue: [(self classMethodPattern) retractInterestsFor: self; value: selections first; onChangeSend: #changedClassMethodPattern to: self].	self iccEnable: selections isEmpty not group: #(#removeClassMethods)</body><body package="ADvance2">changedFilteredClassProtocols	| selections |	selections := self filteredClassProtocolsList selections.	selections size = 1 ifTrue: [(self classProtocolPattern) retractInterestsFor: self; value: selections first; onChangeSend: #changedClassProtocolPattern to: self].	self iccEnable: selections isEmpty not group: #(#removeClassProtocols)</body><body package="ADvance2">changedFilteredInstMethods	| selections |	selections := self filteredInstMethodsList selections.	selections size = 1 ifTrue: [(self instMethodPattern) retractInterestsFor: self; value: selections first; onChangeSend: #changedInstMethodPattern to: self].	self iccEnable: selections isEmpty not group: #(#removeInstMethods)</body><body package="ADvance2">changedFilteredInstProtocols	| selections |	selections := self filteredInstProtocolsList selections.	selections size = 1 ifTrue: [(self instProtocolPattern) retractInterestsFor: self; value: selections first; onChangeSend: #changedInstProtocolPattern to: self].	self iccEnable: selections isEmpty not group: #(#removeInstProtocols)</body><body package="ADvance2">changedFilteredInstVars	| selections |	selections := self filteredInstVarsList selections.	selections size = 1 ifTrue: [(self instVarPattern) retractInterestsFor: self; value: selections first; onChangeSend: #changedInstVarPattern to: self].	self iccEnable: selections isEmpty not group: #(#removeInstVars)</body><body package="ADvance2">changedFilteredSharedVars	| selections |	selections := self filteredSharedVarsList selections.	selections size = 1 ifTrue: [(self sharedVarPattern) retractInterestsFor: self; value: selections first; onChangeSend: #changedSharedVarPattern to: self].	self iccEnable: selections isEmpty not group: #(#removeSharedVars)</body><body package="ADvance2">changedInstMethodPattern	| pattern methods newMethods |	pattern := self instMethodPattern value.	pattern isNil ifTrue: [^self].	methods := self filteredInstMethodsList.	newMethods := methods list asSet.	methods selections isEmpty ifFalse: [newMethods remove: methods selections first].	newMethods add: pattern.	methods list: newMethods asSortedCollection.	methods selections: (Set with: pattern)</body><body package="ADvance2">changedInstProtocolPattern	| pattern protocols newProtocols |	pattern := self instProtocolPattern value.	pattern isNil ifTrue: [^self].	protocols := self filteredInstProtocolsList.	newProtocols := protocols list asSet.	protocols selections isEmpty ifFalse: [newProtocols remove: protocols selections first].	newProtocols add: pattern.	protocols list: newProtocols asSortedCollection.	protocols selections: (Set with: pattern)</body><body package="ADvance2">changedInstVarPattern	| pattern instVars newInstVars |	pattern := self instVarPattern value.	pattern isNil ifTrue: [^self].	instVars := self filteredInstVarsList.	newInstVars := instVars list asSet.	instVars selections isEmpty ifFalse: [newInstVars remove: instVars selections first].	newInstVars add: pattern.	instVars list: newInstVars asSortedCollection.	instVars selections: (Set with: pattern)</body><body package="ADvance2">changedSharedVarPattern	| pattern sharedVars newSharedVars |	pattern := self sharedVarPattern value.	pattern isNil ifTrue: [^self].	sharedVars := self filteredSharedVarsList.	newSharedVars := sharedVars list asSet.	sharedVars selections isEmpty ifFalse: [newSharedVars remove: sharedVars selections first].	newSharedVars add: pattern.	sharedVars list: newSharedVars asSortedCollection.	sharedVars selections: (Set with: pattern)</body><body package="ADvance2">changedSpecialMethodFilter	"Defaul behavior: ignore it. Subclasses may want to do more."	^self</body><body package="ADvance2">changedSpecialVariableFilter	"Defaul behavior: ignore it. Subclasses may want to do more."	^self</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>help extensions</category><body package="ADvance2">helpTextFor: aHelpLookupKey	"^&lt;String | nil&gt;	Return the help text used in Tiny Help System."	| widgetID |	widgetID := aHelpLookupKey widgetID.	widgetID == #readButton ifTrue: [^'Read the ' , self class domainType , ' filter again'].	widgetID == #chooseButton ifTrue:  [^'Choose a filter'].	^nil</body><body package="ADvance2">requestForHelpOpen: aHelpLookupKey	"^&lt;Boolean&gt;	Check whether I wish to open help window."	^true</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>actions-basics</category><body package="ADvance2">readDomainFilter	self readFilterFrom: self domain</body><body package="ADvance2">readFilterFrom: aFilter	self targetFilter value: aFilter copy.	copiedFilter := aFilter copy</body><body package="ADvance2">saveFilter	"Set the domain filter. Use a condensed representation of the current filter."	| dialogFilter |	dialogFilter := self getFilterFromDialog.	self domain		 bits: dialogFilter bits;		 setFilteredInstProtocols: dialogFilter getFilteredInstProtocols;		 setFilteredInstMethods: dialogFilter getFilteredInstMethods;		 setFilteredClassProtocols: dialogFilter getFilteredClassProtocols;		 setFilteredClassMethods: dialogFilter getFilteredClassMethods;		 setFilteredInstVars: dialogFilter getFilteredInstVars;		 setFilteredClassInstVars: dialogFilter getFilteredClassInstVars;		 setFilteredSharedVars: dialogFilter getFilteredSharedVars</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	targetFilter := self advance structureFilterClass new asValue</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor class</class-id> <category>constants</category><body package="ADvance2">domainType	^String new</body><body package="ADvance2">windowLabel	^self domainType , ' Filter Editor'</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor</class-id> <category>actions</category><body package="ADvance2">addClassInstVars	| variables |	variables := self availableClassInstVarsList selections.	self availableClassInstVarsList list: ((self availableClassInstVarsList list) removeAll: variables; yourself).	self filteredClassInstVarsList list: ((self filteredClassInstVarsList list) addAll: variables; yourself).</body><body package="ADvance2">addClassMethods	| methods |	methods := self availableClassMethodsList selections.	self availableClassMethodsList list: ((self availableClassMethodsList list) removeAll: methods; yourself).	self filteredClassMethodsList list: ((self filteredClassMethodsList list) addAll: methods; yourself).</body><body package="ADvance2">addClassProtocols	| protocols |	protocols := self availableClassProtocolsList selections.	self availableClassProtocolsList list: ((self availableClassProtocolsList list) removeAll: protocols; yourself).	self filteredClassProtocolsList list: ((self filteredClassProtocolsList list) addAll: protocols; yourself).	self updateAvailableClassMethods</body><body package="ADvance2">addInstMethods	| methods |	methods := self availableInstMethodsList selections.	self availableInstMethodsList list: ((self availableInstMethodsList list) removeAll: methods; yourself).	self filteredInstMethodsList list: ((self filteredInstMethodsList list) addAll: methods; yourself)</body><body package="ADvance2">addInstProtocols	| protocols |	protocols := self availableInstProtocolsList selections.	self availableInstProtocolsList list: ((self availableInstProtocolsList list) removeAll: protocols; yourself).	self filteredInstProtocolsList list: ((self filteredInstProtocolsList list) addAll: protocols; yourself).	self updateAvailableInstMethods</body><body package="ADvance2">addInstVars	| variables |	variables := self availableInstVarsList selections.	self availableInstVarsList list: ((self availableInstVarsList list) removeAll: variables; yourself).	self filteredInstVarsList list: ((self filteredInstVarsList list) addAll: variables; yourself).</body><body package="ADvance2">addSharedVars	| variables |	variables := self availableSharedVarsList selections.	self availableSharedVarsList list: ((self availableSharedVarsList list) removeAll: variables; yourself).	self filteredSharedVarsList list: ((self filteredSharedVarsList list) addAll: variables; yourself).</body><body package="ADvance2">clearAllAvailableClassInstVars	self availableClassInstVarsList clearAll</body><body package="ADvance2">clearAllAvailableClassMethods	self availableClassMethodsList clearAll</body><body package="ADvance2">clearAllAvailableClassProtocols	self availableClassProtocolsList clearAll</body><body package="ADvance2">clearAllAvailableInstMethods	self availableInstMethodsList clearAll</body><body package="ADvance2">clearAllAvailableInstProtocols	self availableInstProtocolsList clearAll</body><body package="ADvance2">clearAllAvailableInstVars	self availableInstVarsList clearAll</body><body package="ADvance2">clearAllAvailableSharedVars	self availableSharedVarsList clearAll</body><body package="ADvance2">readFilterFrom: aFilter	self targetFilter value: aFilter copy.	copiedFilter := aFilter copy.	self updateAvailableProtocols.	self updateAvailableVariables</body><body package="ADvance2">removeClassInstVars	super removeClassInstVars.	self updateAvailableClassInstVars</body><body package="ADvance2">removeClassMethods	super removeClassMethods.	self updateAvailableClassMethods</body><body package="ADvance2">removeClassProtocols	super removeClassProtocols.	self updateAvailableClassProtocols</body><body package="ADvance2">removeInstMethods	super removeInstMethods.	self updateAvailableInstMethods</body><body package="ADvance2">removeInstProtocols	super removeInstProtocols.	self updateAvailableInstProtocols</body><body package="ADvance2">removeInstVars	super removeInstVars.	self updateAvailableInstVars</body><body package="ADvance2">removeSharedVars	super removeSharedVars.	self updateAvailableSharedVars</body><body package="ADvance2">selectAllAvailableClassInstVars	self availableClassInstVarsList selectAll</body><body package="ADvance2">selectAllAvailableClassMethods	self availableClassMethodsList selectAll</body><body package="ADvance2">selectAllAvailableClassProtocols	self availableClassProtocolsList selectAll</body><body package="ADvance2">selectAllAvailableInstMethods	self availableInstMethodsList selectAll</body><body package="ADvance2">selectAllAvailableInstProtocols	self availableInstProtocolsList selectAll</body><body package="ADvance2">selectAllAvailableInstVars	self availableInstVarsList selectAll</body><body package="ADvance2">selectAllAvailableSharedVars	self availableSharedVarsList selectAll</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor</class-id> <category>private</category><body package="ADvance2">domainClassesDo: aBlock	self domain domain environment allClassesDo: aBlock</body><body package="ADvance2">setWindowLabel	| labelPrefix |	labelPrefix := self class windowLabel.	self builder window label: (self domain isNil			ifTrue: [labelPrefix]			ifFalse: [labelPrefix , ' - [' , (self domain perform: self class domainPrintStringSelector) , ']'])</body><body package="ADvance2">updateAvailableClassInstVars	| allClassInstVars anAttributeFilter |	allClassInstVars := Set new: 100.	anAttributeFilter := self getFilterFromDialog.	self domainClassesDo: [:aClass | allClassInstVars addAll: (anAttributeFilter classInstVarsFrom: aClass)].	self availableClassInstVarsList list: allClassInstVars asSortedCollection</body><body package="ADvance2">updateAvailableClassMethods	| allMethods aMethodFilter |	allMethods := Set new: 100.	aMethodFilter := self getFilterFromDialog.	self domainClassesDo: [:aClass | allMethods addAll: (aMethodFilter classMethodsFrom: aClass)].	self availableClassMethodsList list: allMethods asSortedCollection</body><body package="ADvance2">updateAvailableClassProtocols	| allProtocols |	allProtocols := Set new: 50.	self domainClassesDo: [:aClass | (self adBasics systemOrganization protocolsFor: aClass class)			do: [:aProtocol | (self filteredClassProtocolsList list contains: [:aPattern | aPattern match: aProtocol])					ifFalse: [allProtocols add: aProtocol]]].	self availableClassProtocolsList list: allProtocols asSortedCollection.	self updateAvailableClassMethods</body><body package="ADvance2">updateAvailableInstMethods	| allMethods aMethodFilter |	allMethods := Set new: 100.	aMethodFilter := self getFilterFromDialog.	self domainClassesDo: [:aClass | allMethods addAll: (aMethodFilter instanceMethodsFrom: aClass)].	self availableInstMethodsList list: allMethods asSortedCollection</body><body package="ADvance2">updateAvailableInstProtocols	| allProtocols |	allProtocols := Set new: 50.	self domainClassesDo: [:aClass | (self adBasics systemOrganization protocolsFor: aClass)			do: [:aProtocol | (self filteredInstProtocolsList list contains: [:aPattern | aPattern match: aProtocol])					ifFalse: [allProtocols add: aProtocol]]].	self availableInstProtocolsList list: allProtocols asSortedCollection.	self updateAvailableInstMethods</body><body package="ADvance2">updateAvailableInstVars	| allInstVars anAttributeFilter |	allInstVars := Set new: 100.	anAttributeFilter := self getFilterFromDialog.	self domainClassesDo: [:aClass | allInstVars addAll: (anAttributeFilter instVarsFrom: aClass)].	self availableInstVarsList list: allInstVars asSortedCollection</body><body package="ADvance2">updateAvailableProtocols	self domain isNil ifTrue: [^self].	self updateAvailableInstProtocols.	self updateAvailableClassProtocols</body><body package="ADvance2">updateAvailableSharedVars	| allSharedVars anAttributeFilter |	allSharedVars := Set new: 100.	anAttributeFilter := self getFilterFromDialog.	self domainClassesDo: [:aClass | allSharedVars addAll: (anAttributeFilter sharedVarsFrom: aClass)].	self availableSharedVarsList list: allSharedVars asSortedCollection</body><body package="ADvance2">updateAvailableVariables	self domain isNil ifTrue: [^self].	self updateAvailableInstVars.	self updateAvailableClassInstVars.	self updateAvailableSharedVars</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor</class-id> <category>aspects</category><body package="ADvance2">availableClassInstVarsList	availableClassInstVarsList isNil ifTrue: [(availableClassInstVarsList := MultiSelectionInList new) selectionIndexHolder onChangeSend: #changedAvailableClassInstVars to: self].	^availableClassInstVarsList</body><body package="ADvance2">availableClassMethodsList	availableClassMethodsList isNil ifTrue: [(availableClassMethodsList := MultiSelectionInList new) selectionIndexHolder onChangeSend: #changedAvailableClassMethods to: self].	^availableClassMethodsList</body><body package="ADvance2">availableClassProtocolsList	availableClassProtocolsList isNil ifTrue: [(availableClassProtocolsList := MultiSelectionInList new) selectionIndexHolder onChangeSend: #changedAvailableClassProtocols to: self].	^availableClassProtocolsList</body><body package="ADvance2">availableInstMethodsList	availableInstMethodsList isNil ifTrue: [(availableInstMethodsList := MultiSelectionInList new) selectionIndexHolder onChangeSend: #changedAvailableInstMethods to: self].	^availableInstMethodsList</body><body package="ADvance2">availableInstProtocolsList	availableInstProtocolsList isNil ifTrue: [(availableInstProtocolsList := MultiSelectionInList new) selectionIndexHolder onChangeSend: #changedAvailableInstProtocols to: self].	^availableInstProtocolsList</body><body package="ADvance2">availableInstVarsList	availableInstVarsList isNil ifTrue: [(availableInstVarsList := MultiSelectionInList new) selectionIndexHolder onChangeSend: #changedAvailableInstVars to: self].	^availableInstVarsList</body><body package="ADvance2">availableSharedVarsList	availableSharedVarsList isNil ifTrue: [(availableSharedVarsList := MultiSelectionInList new) selectionIndexHolder onChangeSend: #changedAvailableSharedVars to: self].	^availableSharedVarsList</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor</class-id> <category>changing</category><body package="ADvance2">changedAvailableClassInstVars	self iccEnable: self availableClassInstVarsList selections isEmpty not group: #(#addClassInstVars)</body><body package="ADvance2">changedAvailableClassMethods	self iccEnable: self availableClassMethodsList selections isEmpty not group: #(#addClassMethods)</body><body package="ADvance2">changedAvailableClassProtocols	self iccEnable: self availableClassProtocolsList selections isEmpty not group: #(#addClassProtocols)</body><body package="ADvance2">changedAvailableInstMethods	self iccEnable: self availableInstMethodsList selections isEmpty not group: #(#addInstMethods)</body><body package="ADvance2">changedAvailableInstProtocols	self iccEnable: self availableInstProtocolsList selections isEmpty not group: #(#addInstProtocols)</body><body package="ADvance2">changedAvailableInstVars	self iccEnable: self availableInstVarsList selections isEmpty not group: #(#addInstVars)</body><body package="ADvance2">changedAvailableSharedVars	self iccEnable: self availableSharedVarsList selections isEmpty not group: #(#addSharedVars)</body><body package="ADvance2">changedClassInstVarPattern	super changedClassInstVarPattern.	self updateAvailableClassInstVars</body><body package="ADvance2">changedClassMethodPattern	super changedClassMethodPattern.	self updateAvailableClassMethods</body><body package="ADvance2">changedClassProtocolPattern	super changedClassProtocolPattern.	self updateAvailableClassProtocols</body><body package="ADvance2">changedInstMethodPattern	super changedInstMethodPattern.	self updateAvailableInstMethods</body><body package="ADvance2">changedInstProtocolPattern	super changedInstProtocolPattern.	self updateAvailableInstProtocols</body><body package="ADvance2">changedInstVarPattern	super changedInstVarPattern.	self updateAvailableInstVars</body><body package="ADvance2">changedSharedVarPattern	super changedSharedVarPattern.	self updateAvailableSharedVars</body><body package="ADvance2">changedSpecialMethodFilter	super changedSpecialMethodFilter.	self updateAvailableProtocols</body><body package="ADvance2">changedSpecialVariableFilter	super changedSpecialVariableFilter.	self updateAvailableVariables</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor</class-id> <category>actions-basics</category><body package="ADvance2">readDomainFilter	self readFilterFrom: self domain structureFilter</body><body package="ADvance2">saveFilter	"Set the domains filter. Use a condensed representation of the current filter."	| dialogFilter |	dialogFilter := self getFilterFromDialog.	self domain structureFilter: (self advance structureFilterClass new			 bits: dialogFilter bits;			 setFilteredInstProtocols: dialogFilter getFilteredInstProtocols;			 setFilteredInstMethods: dialogFilter getFilteredInstMethods;			 setFilteredClassProtocols: dialogFilter getFilteredClassProtocols;			 setFilteredClassMethods: dialogFilter getFilteredClassMethods;			 setFilteredInstVars: dialogFilter getFilteredInstVars;			 setFilteredClassInstVars: dialogFilter getFilteredClassInstVars;			 setFilteredSharedVars: dialogFilter getFilteredSharedVars;			 yourself)</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor</class-id> <category>interface opening</category><body package="ADvance2">idsWithModifiedVisualBlocks	^super idsWithModifiedVisualBlocks , #(#availableInstProtocols #availableInstMethods #availableClassProtocols #availableClassMethods #availableClassInstVars #availableInstVars #availableSharedVars)</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor class</class-id> <category>constants</category><body package="ADvance2">domainPrintStringSelector	^#fullDiagramName</body><body package="ADvance2">domainType	^'Diagram'</body></methods><methods><class-id>ICC.ADvance.IccHTMLImage</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"&lt;String"	^'&lt;IMG '</body></methods><methods><class-id>ICC.ADvance.IccHTMLImage class</class-id> <category>instance creation</category><body package="ADvance2">filename: aString footer: aHTMLCollection	"&lt;OrderedCollection of: HTMLItem&gt; I create a collection of HTMLItems: a paragraph, the image, the	footer and an additional paragraph"	| aCollection |	aCollection := OrderedCollection new.	aCollection		 add: IccHTMLParagraph new;		 add: (IccHTMLCenter new add: (self new filename: aString); yourself);		 add: (IccHTMLCenter new addAll: aHTMLCollection; yourself);		 add: IccHTMLParagraph new.	^aCollection</body></methods><methods><class-id>ICC.ADvance.ICCADvanceSpecificationDescription</class-id> <category>accessing</category><body package="ADvance2">topicHeader	^topicHeader</body><body package="ADvance2">topicHeader: aString	topicHeader := aString</body><body package="ADvance2">topicValue	^topicValue</body><body package="ADvance2">topicValue: aString	topicValue := aString</body></methods><methods><class-id>ICC.ADvance.ICCADvanceSpecificationDescription class</class-id> <category>instance creation</category><body package="ADvance2">scanStream: aStream	"^&lt;OrderedCollection of: ICCADvanceSpecificationDescription&gt;"	| aCollection entryLine headerString newEntry valueString |	aCollection := OrderedCollection new.	headerString := String new.	valueString := String new.	[aStream atEnd]		whileFalse:			[entryLine := IccSysOrg current nextLine: aStream.			(newEntry := entryLine size &gt; 1						ifTrue: [entryLine first = $@								ifTrue: [entryLine copyFrom: 2 to: entryLine size]								ifFalse: [nil]]						ifFalse: [nil]) isNil				ifTrue: [valueString := valueString , '\' withCRs , entryLine]				ifFalse:					[headerString isEmpty ifTrue: [headerString := 'Comment'].					valueString isEmpty						ifFalse:							[aCollection add: (self topicHeader: headerString topicValue: valueString).							headerString := newEntry.							valueString := String new]]].	valueString isEmpty ifFalse: [aCollection add: (self topicHeader: headerString topicValue: valueString)].	^aCollection</body><body package="ADvance2">topicHeader: headerString topicValue: valueString	"^&lt;ICCADvanceSpecificationDescription&gt;"	^self new		 topicHeader: headerString;		 topicValue: valueString;		 yourself</body></methods><methods><class-id>ICC.ADvance.ICCADvanceSpecificationDescription class</class-id> <category>constant</category><body package="ADvance2">descriptionTopicList	"^&lt;Array of: String&gt; I return some headers for topics available in ADvance description comment"	^#('Purpose' 'Preconditions' 'Actions' 'Postconditions')</body></methods><methods><class-id>ICC.ADvance.AD2MethodAnalyzer</class-id> <category>analysis</category><body package="ADvance2">computeParticipantServicesFor: aService	"Enumerate the compiled method for aService and add potential participant services to	sentMessages."	| methodNode |	self resetSentMessages.	aService classOrMeta.	methodNode := aService methodNode.	methodNode isNil ifTrue: [^self adDialog warn: aService printString , ' can not be analyzed.'].	self doNode: methodNode</body><body package="ADvance2">participantServicesFor: aService	"^&lt;OrderedCollection of: AD2Service&gt;	Each element indicates a potential participant service of aService.	There is no restriction to services, implemented by classes of the subject.	The result collection does not contain duplicates."	| aCollection classOrMeta |	aCollection := OrderedCollection new.	self computeParticipantServicesFor: aService.	classOrMeta := aService classOrMeta.	sentMessages		do:			[:each |			| rcvr selector |			rcvr := each key.			selector := each value.			rcvr isSymbol				ifTrue: [rcvr == #self						ifTrue: [self								addSelfReceiversTo: aCollection								classOrMeta: classOrMeta								selector: selector]						ifFalse: [self								addSuperReceiversTo: aCollection								classOrMeta: classOrMeta								selector: selector]]				ifFalse: [rcvr isBehavior						ifTrue: [self addNew: (AD2Service class: rcvr selector: selector)								to: aCollection]						ifFalse: [self addContextReceiversTo: aCollection selector: selector]]].	^aCollection</body></methods><methods><class-id>ICC.ADvance.AD2MethodAnalyzer</class-id> <category>enumerating</category><body package="ADvance2">doAssignment: aNode variable: var value: val	self doNode: val</body><body package="ADvance2">doBlock: aNode arguments: args body: seq	self doNode: seq</body><body package="ADvance2">doCascade: aNode receiver: rcvr messages: msgs	self doNode: rcvr.	self doNodes: msgs</body><body package="ADvance2">doLiteral: aNode value: aLiteral	aLiteral isSymbol ifTrue: [self addSentMessage: aLiteral].</body><body package="ADvance2">doMessage: aNode receiver: rcvr selector: sel arguments: args	self doNode: rcvr.	self doNodes: args.	rcvr isVariableNode		ifTrue:			[| rcvrObject rcvrClass |			rcvr isSelf ifTrue: ["The receiver is self."				^self addSentMessage: sel receiver: #self].			rcvr isSuper ifTrue: ["The receiver is super."				^self addSentMessage: sel receiver: #super].			rcvrObject := self adBasics systemEnvironment at: rcvr name asSymbol ifAbsent: [nil].			rcvrObject notNil				ifTrue:					["The receiver is a class."					rcvrClass := rcvrObject class.					context add: rcvrClass.					^self addSentMessage: sel receiver: rcvrClass]].	self addSentMessage: sel</body><body package="ADvance2">doMethod: aNode selector: sel primitive: prim block: block	^self doNode: block</body><body package="ADvance2">doParameter: aNode variable: var type: type	self doNode: var.	self doType: type</body><body package="ADvance2">doReturn: aNode value: value	self doNode: value</body><body package="ADvance2">doSequence: aNode temporaries: temps statements: stats	self doNodes: stats</body></methods><methods><class-id>ICC.ADvance.AD2MethodAnalyzer</class-id> <category>private</category><body package="ADvance2">addContextReceiversTo: aCollection selector: selector	self context		do:			[:aClass |			(aClass includesSelector: selector)				ifTrue: [self addNew: (AD2Service class: aClass selector: selector)						to: aCollection].			(aClass class includesSelector: selector)				ifTrue: [self addNew: (AD2Service class: aClass class selector: selector)						to: aCollection]]</body><body package="ADvance2">addSelfReceiversTo: aCollection classOrMeta: classOrMeta selector: selector	"Add the set of context classes to aCollection that could be 'self' in classOrMeta&gt;&gt;selector.	Add the class that includes selector in the superclass chain of classOrMeta first. Then iterate	all subclasses of classOrMeta in context and add the classes that include selector."	| contextClasses receiverClass |	(receiverClass := classOrMeta whichClassIncludesSelector: selector) isNil ifFalse: [self addNew: (AD2Service class: receiverClass selector: selector)			to: aCollection].	contextClasses := classOrMeta isMeta				ifTrue: [self context collect: [:each | each class]]				ifFalse: [self context].	classOrMeta allSubclasses do: [:each | ((contextClasses includes: each)			and: [each includesSelector: selector])			ifTrue: [self addNew: (AD2Service class: each selector: selector)					to: aCollection]]</body><body package="ADvance2">addSentMessage: aSelector	self addSentMessage: aSelector receiver: nil</body><body package="ADvance2">addSentMessage: aSelector receiver: aSymbolClassOrNil	self addNew: aSymbolClassOrNil -&gt; aSelector to: sentMessages</body><body package="ADvance2">addSuperReceiversTo: aCollection classOrMeta: classOrMeta selector: selector	"Add the set of context classes to aCollection that could be 'super' in classOrMeta&gt;&gt;selector.	Add the class that includes selector in the superclass chain of classOrMetas superclass first.	Then iterate all subclasses of classOrMeta in context and add the superclasses that include	selector."	| classOrMetaSuper receiverClass contextClasses |	(classOrMetaSuper := classOrMeta superclass) isNil ifFalse: [(receiverClass := classOrMetaSuper whichClassIncludesSelector: selector) isNil ifFalse: [self addNew: (AD2Service class: receiverClass selector: selector)				to: aCollection]].	contextClasses := classOrMeta isMeta				ifTrue: [self context collect: [:each | each class]]				ifFalse: [self context].	classOrMeta allSubclasses do: [:each | (contextClasses includes: each)			ifTrue:				[| superclass |				superclass := each superclass.				(superclass includesSelector: selector)					ifTrue: [self addNew: (AD2Service class: superclass selector: selector)							to: aCollection]]]</body><body package="ADvance2">resetSentMessages	sentMessages := OrderedCollection new: 10</body></methods><methods><class-id>ICC.ADvance.AD2MethodAnalyzer</class-id> <category>utility</category><body package="ADvance2">addNew: newObject to: aCollection	(aCollection includes: newObject)		ifFalse: [aCollection add: newObject]</body><body package="ADvance2">doVariable: aNode name: nameString	^aNode</body></methods><methods><class-id>ICC.ADvance.AD2MethodAnalyzer</class-id> <category>accessing</category><body package="ADvance2">context	^context</body><body package="ADvance2">context: aCollectionOfClasses	context := aCollectionOfClasses asOrderedCollection</body></methods><methods><class-id>ICC.ADvance.AD2MethodAnalyzer class</class-id> <category>instance creation</category><body package="ADvance2">context: aCollectionOfClasses	^self new context: aCollectionOfClasses</body></methods><methods><class-id>ICC.ADvance.IccHTMLDefListDefinition</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;DD&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLDefListDefinition class</class-id> <category>instance creation</category><body package="ADvance2">newHTMLString: aHTMLString	"^&lt;HTMLDocumentation&gt;"	| tmpHTMLItem |	tmpHTMLItem := self new.	tmpHTMLItem add: aHTMLString.	^tmpHTMLItem</body><body package="ADvance2">newString: aString	"^&lt;HTMLDocumentation&gt;"	| tmpHTMLItem aIccHTMLString |	aIccHTMLString := IccHTMLString		new content: aString;		yourself.	tmpHTMLItem := self new.	tmpHTMLItem add: aIccHTMLString.	^tmpHTMLItem</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	self displayAllButClassNameOn: aGraphicsContext.	self isSelected		ifTrue:			[aGraphicsContext paint: SymbolicPaint selectionBackground.			aGraphicsContext displayRectangle: (self area origin + (2 @ 2) corner: self area right - 2 @ (self firstDividerHeight - 0)).			aGraphicsContext paint: SymbolicPaint selectionForeground]		ifFalse: [aGraphicsContext paint: SymbolicPaint foreground].	self model classNameText displayOn: aGraphicsContext at: self classNamePosition.	self model isPersistent ifTrue: [self displayPersistencyTriangleOn: aGraphicsContext]</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	self displayAllButClassNameOnPrinter: aGraphicsContext.	aGraphicsContext paint: SymbolicPaint foreground.	self model classNameText displayOnPrinter: aGraphicsContext at: self classNamePosition.	self model isPersistent ifTrue: [self displayPersistencyTriangleOn: aGraphicsContext]</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>selecting</category><body package="ADvance2">basicDeselect	"Set the selection to false and inform the model if it exists"	| top |	top := self topWrapperFor: self.	top isSelected: false.	self editor removeFromSelection: top.	self model update: #selected with: false</body><body package="ADvance2">deselect	"Set the selection to false and inform the model if it exists"	self basicDeselect.	self		invalidateRectangle: self damageArea		repairNow: #repairNowNoFill		forComponent: self</body><body package="ADvance2">select	"Set the selection to true and inform the model if it exists"	| top |	top := self topWrapper.	top isSelected: true.	self editor addToSelection: top.	self model update: #selected with: true.	top container moveToTop: top.	self		invalidateRectangle: self damageArea		repairNow: #repairNowNoFill		forComponent: self</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>private-displaying</category><body package="ADvance2">asHiliteColor: aColorValue	^aColorValue brightness = 1		ifTrue: [ColorValue brightness: 0.98]		ifFalse: [aColorValue asHiliteColor]</body><body package="ADvance2">displayAllButClassNameOn: aGraphicsContext 	| left right height1 height2 theBackgroundColor |	theBackgroundColor := self backgroundColor isNil				ifTrue: [self defaultBackgroundColor]				ifFalse: [self backgroundColor].	left := self area left + 3.	right := self area right - 3.	height1 := self firstDividerHeight.	height2 := self secondDividerHeight.	self displayBorderOn: aGraphicsContext.	aGraphicsContext paint: theBackgroundColor.	aGraphicsContext displayRectangle: (self area insetBy: 2).	aGraphicsContext paint: theBackgroundColor asShadowColor.	aGraphicsContext displayRectangle: (left @ height1 corner: right @ (height1 + 1)).	aGraphicsContext displayRectangle: (left @ height2 corner: right @ (height2 + 1)).	aGraphicsContext paint: (self asHiliteColor: theBackgroundColor).	aGraphicsContext displayRectangle: (left @ (height1 + 1) corner: right @ (height1 + 2)).	aGraphicsContext displayRectangle: (left @ (height2 + 1) corner: right @ (height2 + 2)).	aGraphicsContext paint: SymbolicPaint foreground.	self model attributesText displayOn: aGraphicsContext at: left + 2 @ height1.	self model servicesText displayOn: aGraphicsContext at: left + 2 @ height2</body><body package="ADvance2">displayAllButClassNameOnPrinter: aGraphicsContext	| left right height1 height2 theBackgroundColor |	theBackgroundColor := self advance preferences painter printColorForClass: self.	left := self area left + 3.	right := self area right - 3.	height1 := self firstDividerHeight.	height2 := self secondDividerHeight.	self displayBorderOnPrinter: aGraphicsContext.	aGraphicsContext paint: theBackgroundColor.	aGraphicsContext displayRectangle: (self area insetBy: 2).	aGraphicsContext paint: ColorValue black.	aGraphicsContext displayRectangle: (left @ height1 corner: right @ (height1 + 1)).	aGraphicsContext displayRectangle: (left @ (height2) corner: right @ (height2 + 1)).	aGraphicsContext paint: SymbolicPaint foreground.	self model attributesText displayOnPrinter: aGraphicsContext at: left + 2 @ height1.	self model servicesText displayOnPrinter: aGraphicsContext at: left + 2 @ height2</body><body package="ADvance2">displayBorderOn: aGraphicsContext	"Display the receiver's borders in the specified display box. If colorSource	is non-nil, it may be consulted for the values of the border colors using LookPreferences	accessing protocol (#hiliteColor, #shadowColor, etc.).	Be sure not to permanently side-effect the supplied GraphicsContext."	| aRect |	aRect := self area.	self		displayFrameOn: aGraphicsContext		in: aRect		paint1: (ColorValue brightness: 0.85)		paint2: ColorValue black.	self		displayFrameOn: aGraphicsContext		in: (aRect insetBy: 1)		paint1: (ColorValue brightness: 0.98)		paint2: self advance preferences painter concreteClassColor asShadowColor.	"SymbolicPaint shadow."	aGraphicsContext		 paint: SymbolicPaint background;		 displayRectangle: (aRect topLeft extent: 1 @ 1);		 displayRectangle: (aRect topRight - (1 @ 0) extent: 1 @ 1);		 displayRectangle: (aRect bottomLeft - (0 @ 1) extent: 1 @ 1);		 displayRectangle: (aRect bottomRight - (1 @ 1) extent: 1 @ 1)</body><body package="ADvance2">displayBorderOnPrinter: aGraphicsContext	"Display the receiver's borders in the specified display box. If colorSource	is non-nil, it may be consulted for the values of the border colors using LookPreferences	accessing protocol (#hiliteColor, #shadowColor, etc.).	Be sure not to permanently side-effect the supplied GraphicsContext."	| aRect |	aRect := self area.	self		displayFrameOn: aGraphicsContext		in: aRect		paint1: ColorValue gray		paint2: ColorValue black.	self		displayFrameOn: aGraphicsContext		in: (aRect insetBy: 1)		paint1: (ColorValue brightness: 0.98)		paint2: SymbolicPaint shadow</body><body package="ADvance2">displayPersistencyTriangleOn: aGraphicsContext	| aRectangle p1 p2 p3 length |	aGraphicsContext paint: ColorValue lightGray.	aRectangle := self area.	length := (self editor pointToView: 10 @ 10) x.	p1 := aRectangle topRight + (-2 @ 2).	p2 := p1 + (0 @ length).	p3 := p1 - (length @ 0).	(Polyline vertices: (Array			with: p1			with: p2			with: p3			with: p1))		displayFilledOn: aGraphicsContext</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>private-shape</category><body package="ADvance2">backgroundColor	^self model backgroundColor</body><body package="ADvance2">classNamePosition	^self area origin + (self area width - self model classNameText width // 2 @ 2)</body><body package="ADvance2">defaultBackgroundColor	"If class model has no special color defined, the default color for the special kind 	of the class (selected in browser, subject. abstract, concrete) is taken from painter 	preferences."	self model domainIsBrowserSelected 		ifTrue: [^self advance preferences painter browserSelectedClassColor].	self model domainIsSubject 		ifTrue: [^self advance preferences painter subjectClassColor].	self model isAbstract 		ifTrue: [^self advance preferences painter abstractClassColor].	^self advance preferences painter concreteClassColor</body><body package="ADvance2">firstDividerHeight	^(self editor pointToView: self model firstDividerVOffset) y</body><body package="ADvance2">secondDividerHeight	^(self editor pointToView: self model secondDividerVOffset) y</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>updating</category><body package="ADvance2">update: aSymbol with: aParameter	(aSymbol == #shape or: [aSymbol == #location])		ifTrue:			[self invalidate.			self updateForDisplay.			^self invalidate].	aSymbol == #select ifTrue: [^self select].	aSymbol == #visible		ifTrue:			[aParameter				ifFalse:					[self basicDeselect.					self invalidate].			self isVisible: aParameter.			aParameter ifTrue: [self invalidate].			^self].	super update: aSymbol with: aParameter</body><body package="ADvance2">updateForDisplay	self area: (self model area scaledBy: self editor transformation scale) rounded</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>utility</category><body package="ADvance2">displayFrameOn: aGraphicsContext in: aRectangle paint1: paint1 paint2: paint2	"Display a frame in aRectangle using paint1 for left and top and paint2 for bottom and right."	| r oldPaint |	oldPaint := aGraphicsContext paint.	r := aRectangle copy.	r right: r left + 1; bottom: r bottom - 1.	aGraphicsContext paint: paint1; displayRectangle: r.	r right: aRectangle right - 1; bottom: r top + 1.	aGraphicsContext displayRectangle: r.	r		 right: aRectangle right;		 top: aRectangle bottom - 1;		 bottom: aRectangle bottom.	aGraphicsContext paint: paint2; displayRectangle: r.	r		 left: aRectangle right - 1;		 top: aRectangle top;		 bottom: aRectangle bottom - 1.	aGraphicsContext displayRectangle: r.	aGraphicsContext paint: oldPaint</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>compatibility</category><body package="ADvance2">beMovedBy: vector	"I am moved by aVector and do the display bookkeeping"	| oldCenter newCenter |	oldCenter := self model area center.	newCenter := self editor transformation toGrid: oldCenter + (self editor pointFromView: vector).	self model update: #location with: self model location + (newCenter - oldCenter)</body><body package="ADvance2">snapToGrid	self beMovedBy: Point zero</body></methods><methods><class-id>ICC.ADvance.AD2ClassPart</class-id> <category>testing</category><body package="ADvance2">isMovable	^true</body></methods><methods><class-id>ICC.ADvance.AD2AssociationController</class-id> <category>accessing</category><body package="ADvance2">vertexNo	^vertexNo</body><body package="ADvance2">vertexNo: aSmallInteger	vertexNo := aSmallInteger</body></methods><methods><class-id>ICC.ADvance.AD2AssociationController</class-id> <category>control defaults</category><body package="ADvance2">isControlActive	^self sensor redButtonPressed</body></methods><methods><class-id>ICC.ADvance.AD2AssociationController</class-id> <category>basic control sequence</category><body package="ADvance2">controlLoop	"Overrides inherited empty method with Controller&gt;&gt;controlLoop from VW5i.3."	[self isControlActive]		whileTrue: 			[self controlActivity]</body><body package="ADvance2">startUp	self controlInitialize.	self controlLoop</body></methods><methods><class-id>ICC.ADvance.AD2AssociationController</class-id> <category>control</category><body package="ADvance2">controlActivity	| center startPoint vertexBox selectionRectangle origin radius |	vertexBox := (self model vertexAt: self vertexNo) area scaledBy: self view editor scale.	center := vertexBox center.	selectionRectangle := self view selectionRectangleAt: self vertexNo.	startPoint := selectionRectangle center.	radius := vertexBox extent r.	[self sensor redButtonPressed]		whileTrue:			[| pt |			pt := self sensor cursorPoint.			origin := pt = center						ifTrue: [startPoint]						ifFalse: [((LineSegment from: center to: (pt - center) unitVector * radius + center)								ad2ClippedAt: vertexBox) end].			self model originLayoutAt: self vertexNo put: (AD2LayoutOrigin newFor: origin relativeTo: vertexBox).			self model update: #shape with: nil.			self view invalidateRectangle: self view damageArea repairNow: true.		].</body><body package="ADvance2">controlInitialize	| anInteger |	self setSensorFromView.	anInteger := ((self view selectionRectangleAt: 1)				containsPoint: self sensor cursorPoint)				ifTrue: [1]				ifFalse: [2].	self vertexNo: anInteger.	self model autoLayout at: anInteger put: false</body><body package="ADvance2">setSensor: aSensor	sensor := aSensor</body></methods><methods><class-id>ICC.ADvance.AD2AssociationController</class-id> <category>sensor access</category><body package="ADvance2">sensor	^sensor ifNil:[super sensor]</body><body package="ADvance2">setSensorFromView	"Set the sensor to one that translates coordinates	according to the current translation of the containing editor."	self setSensor: self view editor sensor</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>private</category><body package="ADvance2">attributesTable	| clientRelations aRowAdaptor selectionInTable |	clientRelations := self targetModel clientRelations.	aRowAdaptor := RowAdaptor adaptForAspects: (Array with: #extendedRoleName with: #roleNotation).	selectionInTable := SelectionInTable new.	selectionInTable table baseCollection: clientRelations asOrderedCollection adaptors: aRowAdaptor.	^selectionInTable</body><body package="ADvance2">doCancel	super doCancel.	self attributesChanged | self servicesChanged ifTrue: [self updateTargetDiagram]</body><body package="ADvance2">domain	^self targetModel domain</body><body package="ADvance2">domainSuperclass	| superclass |	superclass := self domain superclass.	^superclass isNil		ifTrue: [superclass]		ifFalse: [superclass fullName]</body><body package="ADvance2">initializeInputFields	| tm |	self attributesTableInterface isNil ifFalse: [^self].	tm := self targetModel.	self className value: tm name.	self superclassName value: self domainSuperclass.	self containerName value: (self adBasics systemOrganization containerFor: tm domain).	self classType value: (tm isAbstract			ifTrue: [#abstract]			ifFalse: [#concrete]).	self classPersistence value: (tm isPersistent			ifTrue: [#persistent]			ifFalse: [#transient]).	attributesTableInterface := TableInterface new				 selectionInTable: self attributesTable;				 columnLabelsArray: #('Attribute:' 'Type:');				 columnLabelsExtraEmphasis: #(#bold #bold);				 columnLabelsFormats: #(#left #left);				 yourself.	self updateAttributesTableColumnWidths.	self updateServicesList</body><body package="ADvance2">labelArray	^#('General' 'Attributes' 'Services')</body><body package="ADvance2">requestServicesToRemove: selectedServices	^self adDialog		requestSelection: selectedServices		dialogBlock: [self adDialog new				 thickMargin;				 title: 'Confirm Service Removal';				 infoIcon: (self class resources opaqueImageFor: self advance diagramPainterClass named: #removeServiceImage)]		selectAllLabel: 'Remove all'		messageBlock: [:each | 'Do you want to remove service &lt;1p&gt;&lt;n&gt;from class &lt;2p&gt;?' expandMacrosWith: each displayString with: self targetModel domain printString]</body><body package="ADvance2">selectedClientRelation	| aspect |	aspect := self attributesTableInterface.	^aspect table rowAt: aspect selectionIndex y</body><body package="ADvance2">setWindowLabel	self builder window label: ('Class Properties - [&lt;1s&gt;]' expandMacrosWith: self targetModel name)</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#generalSpec #attributesSpec #servicesSpec)</body><body package="ADvance2">updateAttributesTable	self attributesTableInterface table baseCollection: self targetModel clientRelations asOrderedCollection.	self updateAttributesTableColumnWidths</body><body package="ADvance2">updateAttributesTableColumnWidths	self attributesTableInterface columnWidths: (self computeColumnWidthsFor: self attributesTableInterface)</body><body package="ADvance2">updateServicesList	self targetModel flushServicesCache.	self servicesList list: (self targetModel services asSortedCollection: AD2Service protocolAndSelectorSortBlock)</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>changing</category><body package="ADvance2">changedAttributesSelection	self iccEnable: self attributesTableInterface selectionInTable selection notNil group: #(#editAttributeButton #removeAttributeButton)</body><body package="ADvance2">changedServicesSelection	self iccEnable: self servicesList selections isEmpty not group: #(#removeServicesButton)</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>private-system changes</category><body package="ADvance2">basicsChanged	"^&lt;Boolean&gt; Changed the basics and answers wether the basics changed."	| basicsChanged domainSuperclass domainContainer superclass theClass |	basicsChanged := self isAbstractChanged | self isPersistentChanged.	domainSuperclass := self domainSuperclass.	domainContainer := self adBasics systemOrganization containerFor: self domain.	(self superclassName value ~= domainSuperclass or: [self containerName value ~= domainContainer])		ifFalse: [^basicsChanged].	superclass := superclassName value isNil				ifTrue: [nil]				ifFalse: [self adBasics systemEnvironment at: superclassName value ifAbsent: [nil]].	(superclass notNil or: [(theClass := self adDialog 						chooseClassFrom: self superclassName value						superclassName: nil						for: self builder window) notNil])		ifFalse:			[self adDialog warn: 'The superclass doesn''t exist.'.			^basicsChanged].	theClass notNil ifTrue: [superclassName value: theClass fullName].	^Object errorSignal		handle:			[:ex |			self adDialog alert: 'Can''t change superclass.\Check class-, superclass- and subclass definitions!' withCRs.			ex returnWith: basicsChanged]		do:			[self adBasics systemOrganization				createSubclassOf: superclassName value asQualifiedReference				named: self domain name				in: self domain environment				instanceVariableNames: self domain instanceVariablesString				container: self containerName value.			true]</body><body package="ADvance2">isAbstractChanged	"^&lt;Boolean&gt; Modify the abstract declaration if neccessary.		Answer wether the declaration changed."	^self advance plugInAPI declareClass: self targetModel domain asAbstract: self classType value == #abstract</body><body package="ADvance2">isPersistentChanged	"^&lt;Boolean&gt; Modify the persistency declaration if neccessary.	Answer wether the declaration changed."	^self advance plugInAPI declareClass: self targetModel domain asPersistent: self classPersistence value == #persistent</body><body package="ADvance2">updateTargetDiagram	self targetModel applicationModel controller updateDiagram</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>aspects</category><body package="ADvance2">attributesTableInterface	^attributesTableInterface</body><body package="ADvance2">className	^className isNil		ifTrue: [className := nil asValue]		ifFalse: [className]</body><body package="ADvance2">classPersistence	^classPersistence isNil		ifTrue: [classPersistence := nil asValue]		ifFalse: [classPersistence]</body><body package="ADvance2">classType	^classType isNil		ifTrue: [classType := nil asValue]		ifFalse: [classType]</body><body package="ADvance2">containerName	^containerName isNil		ifTrue: [containerName := String new asValue]		ifFalse: [containerName]</body><body package="ADvance2">servicesList	^servicesList isNil		ifTrue: [servicesList := MultiSelectionInList new]		ifFalse: [servicesList]</body><body package="ADvance2">superclassName	^superclassName isNil		ifTrue: [superclassName := nil asValue]		ifFalse: [superclassName]</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self initializeInputFields.	self disableField: #className with: aBuilder.	self attributesTableInterface selectionInTable selectionIndexHolder onChangeSend: #changedAttributesSelection to: self.	self servicesList selectionIndexHolder onChangeSend: #changedServicesSelection to: self.	self changeServicesDisplayStringSelectorWith: aBuilder.	self changedAttributesSelection.	self changedServicesSelection</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self setWindowLabel</body><body package="ADvance2">preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder labelAt: #containerLabel put: self adBasics systemOrganization containerLabel</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>utility</category><body package="ADvance2">changeServicesDisplayStringSelectorWith: aBuilder	| component |	(component := aBuilder componentAt: #servicesList) isNil ifFalse: [component widget displayStringSelector: #protocolAndSelector]</body><body package="ADvance2">computeColumnWidthsFor: aTable	"^&lt;Array of: Integer&gt;	Compute the width of aTables columns by iterating the rows and columns and measuring the	cells text width."	^aTable table columns collect: [:aColumn | (aColumn inject: 80 into: [:tempMax :next | tempMax max: (ComposedText withText: next) width])			+ 8]</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>actions</category><body package="ADvance2">addAttribute	(self targetModel addRelationTo: nil updateDiagram: false)		ifFalse: [^self].	self attributesChanged: true.	self updateAttributesTable</body><body package="ADvance2">addService	"| result newService aspect |	result := (self adDialog new) title: 'Add service';				requestLineArray: (Array with: 'Protocol:' with: 'Service:')				initialAnswers: (Array with: '' with: '')				onCancel: [^self]				for: self builder window.	newService := (result at: 1)				, '&gt;' , (result at: 2).	aspect := self servicesList.	aspect list: ((aspect list) add: newService; yourself)"</body><body package="ADvance2">doAccept	Cursor wait		showWhile:			[super doAccept.			self basicsChanged | self attributesChanged | self servicesChanged ifTrue: [self updateTargetDiagram]]</body><body package="ADvance2">editAttribute	(self targetModel editRelation: self selectedClientRelation)		ifFalse: [^self].	self attributesChanged: true.	self updateAttributesTable</body><body package="ADvance2">removeAttribute	| aClientRelation |	aClientRelation := self selectedClientRelation.	(self adDialog confirm: ('Do you want to remove attribute &lt;1p&gt;&lt;n&gt;from class &lt;2p&gt;?' expandMacrosWith: aClientRelation roleName with: self targetModel domain printString)		initialAnswer: true)		ifFalse: [^self].	self targetModel removeClientRelation: aClientRelation updateDiagram: false.	self attributesChanged: true.	self updateAttributesTable.	self attributesTableInterface selectionInTable selection: nil</body><body package="ADvance2">removeServices	| servicesToRemove |	servicesToRemove := self requestServicesToRemove: self servicesList selections.	servicesToRemove isEmpty ifTrue: [^self].	servicesToRemove do: [:each | self adBasics systemOrganization removeSelector: each selector from: each classOrMeta].	self updateServicesList.	self servicesChanged: true</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>accessing</category><body package="ADvance2">attributes	^self attributesTableInterface table baseCollection</body><body package="ADvance2">attributesChanged	^attributesChanged</body><body package="ADvance2">attributesChanged: aBoolean	attributesChanged := aBoolean</body><body package="ADvance2">services	^self servicesList list</body><body package="ADvance2">servicesChanged	^servicesChanged</body><body package="ADvance2">servicesChanged: aBoolean	servicesChanged := aBoolean</body><body package="ADvance2">targetModel	^targetModel</body><body package="ADvance2">targetModel: anADClassModel	targetModel := anADClassModel</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self attributesChanged: false.	self servicesChanged: false</body></methods><methods><class-id>ICC.ADvance.AD2MessageNavigator</class-id> <category>aspects</category><body package="ADvance2">implementorsFooter	^implementorsFooter isNil		ifTrue: [implementorsFooter := String new asValue]		ifFalse: [implementorsFooter]</body><body package="ADvance2">implementorsHeader	^'Implementors:' asValue</body><body package="ADvance2">initiatorsFooter	^initiatorsFooter isNil		ifTrue: [initiatorsFooter := String new asValue]		ifFalse: [initiatorsFooter]</body><body package="ADvance2">initiatorsHeader	^'Initiators:' asValue</body><body package="ADvance2">participantsFooter	^participantsFooter isNil		ifTrue: [participantsFooter := String new asValue]		ifFalse: [participantsFooter]</body><body package="ADvance2">participantsHeader	^'Participants:' asValue</body></methods><methods><class-id>ICC.ADvance.AD2MessageNavigator class</class-id> <category>constants</category><body package="ADvance2">initiallyDisabledItems	^#()</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>updating</category><body package="ADvance2">updateForDisplayScaled: scale	| text textExtent multiplicity multiplicityExtent box1 box2 |	super updateForDisplayScaled: scale.	text := self model roleText.	textExtent := text unscaledWidth @ (text unscaledHeight - 1).	self textBounds: ((self model textOrigin extent: textExtent) scaledBy: scale).	multiplicity := self model multiplicityText.	multiplicityExtent := multiplicity unscaledWidth @ (multiplicity unscaledHeight - 1).	self multiplicityBounds: ((self model multiplicityOrigin extent: multiplicityExtent)			scaledBy: scale).	box1 := (self model originBoxAt: 1) scaledBy: scale.	box2 := (self model originBoxAt: 2) scaledBy: scale.	self area: (self area merge: (self textBounds merge: (self multiplicityBounds merge: (box1 merge: box2))))</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>accessing</category><body package="ADvance2">multiplicityBounds	^multiplicityBounds</body><body package="ADvance2">multiplicityBounds: aRectangle	multiplicityBounds := aRectangle</body><body package="ADvance2">textBounds	^textBounds</body><body package="ADvance2">textBounds: aRectangle	textBounds := aRectangle</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>testing</category><body package="ADvance2">hasCursor: aPoint	^(super hasCursor: aPoint)		and: [(self textBounds containsPoint: aPoint)				or: [self line ad2IsNearTo: aPoint]]</body><body package="ADvance2">isControlWantedAt: aPoint	"Control is wanted only if the receiver is selected, aPoint is in on a selection marker,	and the red button is pressed."	^self isSelected and: [((self selectionRectangleAt: 1)			containsPoint: aPoint)			or: [(self selectionRectangleAt: 2)					containsPoint: aPoint]]</body><body package="ADvance2">isMovable	"The Association is movable (not only its end points) if it is not 	an association with one and the same class as source and as 	target and if none of its class is selected (in this case, automatic 	movement by class movement is enough).."	^(self model vertexAt: 1) ~= (self model vertexAt: 2) 		and: [(self editor selection contains: [:eachSel | 			eachSel unwrapped model = (self model vertexAt: 1) 				or: [eachSel unwrapped model = (self model vertexAt: 2)]]) not]</body><body package="ADvance2">isOpen	^true</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>visual properties</category><body package="ADvance2">backgroundColor	"This replacement has been dont in the NVEditorView, too."	"^self editor view backgroundColor"	^ColorValue white</body><body package="ADvance2">lineColor	^self advance preferences painter relationColor</body><body package="ADvance2">printLineColor	^self advance preferences painter printRelationColor</body><body package="ADvance2">symbolColor	"^&lt;ColorValue&gt; 	Answers the color given by the AssociationModel or (if this is nil) 	the color appropriate for the wrapper type."	| clientRelation |	^self model symbolColor notNil		ifTrue: [self model symbolColor]		ifFalse: 			[clientRelation := self model clientRelation.			clientRelation isWrapped				ifTrue: [ColorValue veryLightGray]				ifFalse: [clientRelation isMultiple						ifTrue: [ColorValue black]						ifFalse: [ColorValue white]]]</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>controller accessing</category><body package="ADvance2">defaultControllerClass	"Answer the class of the default controller for the receiver."	^AD2AssociationController</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	| frame |	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	self displayLineAndSymbolOn: aGraphicsContext.	self isSelected		ifTrue:			[frame := 1 @ -2 corner: 1 @ 0.			aGraphicsContext				paint: SymbolicPaint selectionBackground;				displayRectangle: (self textBounds expandedBy: frame);				displayRectangle: (self multiplicityBounds expandedBy: frame).			self displaySelectionMarkerOn: aGraphicsContext.			aGraphicsContext paint: SymbolicPaint selectionForeground]		ifFalse:			[frame := 0 @ -5 corner: 0 @ -1.			aGraphicsContext				paint: self backgroundColor;				displayRectangle: (self textBounds expandedBy: frame);				displayRectangle: (self multiplicityBounds expandedBy: frame).			aGraphicsContext paint: SymbolicPaint foreground].	self model roleText displayOn: aGraphicsContext at: self textBounds origin.	self model multiplicityText displayOn: aGraphicsContext at: self multiplicityBounds origin</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	self displayLineAndSymbolOnPrinter: aGraphicsContext.	aGraphicsContext paint: SymbolicPaint foreground.	self model roleText displayOnPrinter: aGraphicsContext at: self textBounds origin.	self model multiplicityText displayOnPrinter: aGraphicsContext at: self multiplicityBounds origin</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>private-displaying</category><body package="ADvance2">basicDisplayLineAndSymbolOn: aGraphicsContext	"Line color should have been set before."	self line displayStrokedOn: aGraphicsContext.	self symbol isNil ifFalse:		[aGraphicsContext paint: self symbolColor.		self symbol displayFilledOn: aGraphicsContext.		aGraphicsContext paint: ColorValue black.		self symbol displayStrokedOn: aGraphicsContext]</body><body package="ADvance2">displayLineAndSymbolOn: aGraphicsContext	aGraphicsContext paint: self lineColor.	self basicDisplayLineAndSymbolOn: aGraphicsContext</body><body package="ADvance2">displayLineAndSymbolOnPrinter: aGraphicsContext	aGraphicsContext paint: self printLineColor.	self basicDisplayLineAndSymbolOn: aGraphicsContext</body><body package="ADvance2">displaySelectionMarkerOn: aGraphicsContext	aGraphicsContext paint: self lineColor.	super displaySelectionMarkerOn: aGraphicsContext</body></methods><methods><class-id>ICC.ADvance.AD2AssociationView</class-id> <category>compatibility</category><body package="ADvance2">beMovedBy: vector 	"Both vertices are moved by the vector if the model is movable."	| linePoints |	self isMovable not		ifTrue: [^false].	linePoints := Array with: self line asPolyline vertices first with: self line asPolyline vertices last.	1 to: 2		do: 			[:index | 			| theVertexBox theNewOrigin correctTopFraction correctLeftFraction |			theVertexBox := (self model vertexAt: index) area scaledBy: self editor scale.			theNewOrigin := AD2LayoutOrigin newFor: (linePoints at: index) + vector relativeTo: theVertexBox.			"Only fractions from 0 to 1 are allowed, one fraction has to be 0 or 1"			correctLeftFraction := ((0 max: theNewOrigin leftFraction) min: 1).			correctTopFraction := ((0 max: theNewOrigin topFraction) min: 1).			"if top is nearer to center than left, move left to border; otherwise move top to border"			((correctLeftFraction - 0.5) abs &gt; (correctTopFraction - 0.5) abs) 				ifTrue: [correctLeftFraction := correctLeftFraction rounded]				ifFalse: [correctTopFraction := correctTopFraction rounded].			theNewOrigin 				leftFraction: correctLeftFraction;				topFraction: correctTopFraction.			self model originLayoutAt: index put: (theNewOrigin)].	self model autoLayout: (Array with: false with: false).	self model update: #shape with: nil.	^true</body></methods><methods><class-id>ICC.ADvance.AD2Printer</class-id> <category>computing pages</category><body package="ADvance2">headerOffset	^self preferences headerEnabled		ifTrue: [Screen default defaultFontPolicy preferredFontSize + 14 "extra separation"]		ifFalse: [0]</body><body package="ADvance2">lastPrintPageWith: aPrinter scale: printScale	| gc rows columns pageSize pageSkip |	gc := aPrinter graphicsContext.	gc scaleBy: printScale.	pageSize := self pageSizeFor: gc.	pageSkip := pageSize - (self pageOverlap / gc scale).	columns := (self bounds width negated // pageSkip x) negated.	rows := (self bounds height negated // pageSkip y) negated.	^rows * columns</body><body package="ADvance2">pageOffsetFor: aGraphicsContext	| preferences |	preferences := self preferences.	^preferences leftMargin @ (self headerOffset + preferences topMargin) / aGraphicsContext scale</body><body package="ADvance2">pageSizeFor: aGraphicsContext	| preferences |	preferences := self preferences.	^aGraphicsContext clippingBounds extent - (preferences leftMargin + preferences rightMargin @ (self headerOffset + preferences topMargin + preferences bottomMargin) / aGraphicsContext scale)</body></methods><methods><class-id>ICC.ADvance.AD2Printer</class-id> <category>private-accessing</category><body package="ADvance2">bounds	^bounds</body><body package="ADvance2">bounds: aRectangle	bounds := aRectangle</body><body package="ADvance2">diagram	^diagram</body><body package="ADvance2">diagram: aDiagram	diagram := aDiagram</body><body package="ADvance2">editor	^editor</body><body package="ADvance2">editor: anEditor	editor := anEditor</body><body package="ADvance2">preferences	^self advance preferences printer</body><body package="ADvance2">settings	^self advance preferences printSettings</body><body package="ADvance2">textStyle	^textStyle</body><body package="ADvance2">tinyTextStyle	^self textStyle copy		 scalingFactor: self textStyle scalingFactor / 1.5;		 install;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2Printer</class-id> <category>private-printing</category><body package="ADvance2">primPrintOn: gc fromPage: fromPage toPage: toPage	| transl rows columns isFirstPage pageOffset pageSize pageSkip |	pageSize := self pageSizeFor: gc.	pageSkip := pageSize - (self pageOverlap / gc scale).	pageOffset := self pageOffsetFor: gc.	transl := self bounds origin.	columns := (self bounds width negated // pageSkip x) negated.	rows := (self bounds height negated // pageSkip y) negated.	isFirstPage := true.	1 to: rows do: [:row | 1 to: columns			do:				[:column |				| t1 pageNumber |				pageNumber := columns * (row - 1) + column.				(fromPage &lt;= pageNumber and: [pageNumber &lt;= toPage])					ifTrue:						[isFirstPage							ifTrue: [isFirstPage := false]							ifFalse: [gc newPage].						t1 := pageSkip x * (column - 1) @ (pageSkip y * (row - 1)).						gc translation: pageOffset - t1 - transl.						gc clippingRectangle: (t1 + transl extent: pageSize).						pageNumber = 1							ifTrue:								[self displayHeaderOn: gc.								self displayFooterOn: gc page: pageNumber.								self displayTrialMessageOn: gc].						self editor view displayOnPrinter: gc]]]</body><body package="ADvance2">printOverviewWith: aPrinter	| gc aScale |	gc := aPrinter graphicsContext.	aScale := (self pageSizeFor: gc)	/ self bounds extent.	self		printWith: aPrinter		fromPage: 1		toPage: 1		scale: (aScale x min: aScale y)</body><body package="ADvance2">printWith: aPrinter fromPage: fromPage toPage: toPage scale: printScale	| gc |	gc := aPrinter graphicsContext.	gc scaleBy: printScale.	self textStyle scalingFactor: 1 / printScale * 0.75.	self textStyle install.	self		primPrintOn: gc		fromPage: (fromPage isNil				ifTrue: [1]				ifFalse: [fromPage])		toPage: (toPage isNil				ifTrue: [self lastPrintPageWith: aPrinter scale: printScale]				ifFalse: [toPage])</body></methods><methods><class-id>ICC.ADvance.AD2Printer</class-id> <category>initialize-release</category><body package="ADvance2">initialize	textStyle := self advance utils defaultTextStyle.	textStyle scalingFactor: 1.	textStyle install</body></methods><methods><class-id>ICC.ADvance.AD2Printer</class-id> <category>header/footer</category><body package="ADvance2">displayFooterOn: aGraphicsContext page: pageNumber	| leftFooterText |	leftFooterText := NVComposedText				withText: self leftFooterText				style: self textStyle				printStyle: self textStyle.	leftFooterText displayOnPrinter: aGraphicsContext at: aGraphicsContext clippingBounds bottomLeft + (2 @ -20)</body><body package="ADvance2">displayHeaderOn: aGraphicsContext	| clippingBounds leftHeaderText rightHeaderText |	clippingBounds := aGraphicsContext clippingBounds.	aGraphicsContext clippingRectangle: (clippingBounds origin - (0 @ self headerOffset / aGraphicsContext scale) corner: clippingBounds corner).	leftHeaderText := NVComposedText				withText: self leftHeaderText				style: self textStyle				printStyle: self textStyle.	leftHeaderText displayOnPrinter: aGraphicsContext at: aGraphicsContext clippingBounds topLeft + (2 @ 0).	rightHeaderText := NVComposedText				withText: self rightHeaderText				style: self textStyle				printStyle: self textStyle.	rightHeaderText displayOnPrinter: aGraphicsContext at: aGraphicsContext clippingBounds topRight - (rightHeaderText unscaledWidth @ 0 / aGraphicsContext scale).	aGraphicsContext clippingRectangle: clippingBounds</body><body package="ADvance2">displayTrialMessageOn: aGraphicsContext	| trialText |	self advance isTrialVersion ifFalse: [^self].	trialText := NVComposedText				withText: self trialText				style: self tinyTextStyle				printStyle: self tinyTextStyle.	trialText displayOnPrinter: aGraphicsContext at: aGraphicsContext clippingBounds bottomLeft + (2 @ -60)</body><body package="ADvance2">leftFooterText	^self preferences datePrintedEnabled		ifTrue: [Locale current printAsTime: Date today policyNamed: #short]		ifFalse: [Text new]</body><body package="ADvance2">leftHeaderText	^(self preferences subjectNameEnabled		ifTrue: [self preferences diagramNameEnabled				ifTrue: [self diagram subjectAndDiagramName]				ifFalse: [self diagram subject name]]		ifFalse: [self preferences diagramNameEnabled				ifTrue: [self diagram name]				ifFalse: ['']]) asText</body><body package="ADvance2">rightHeaderText	| stream |	stream := TextStream on: (String new: 100).	self preferences authorEnabled ifTrue: [stream			 nextPutAll: self diagram author nickName;			 nextPut: $/;			 nextPutAll: self diagram author company].	self preferences dateModifiedEnabled ifTrue: [stream space; nextPutAll: self diagram modificationDateStringShort].	^stream contents</body><body package="ADvance2">trialText	^('Printed by &lt;1s&gt;.&lt;n&gt;This version expires on &lt;2p&gt;.' expandMacrosWith: self advance applicationFullName with: self advance expirationDate) asText</body></methods><methods><class-id>ICC.ADvance.AD2Printer</class-id> <category>constants</category><body package="ADvance2">pageOverlap	"Answer the page overlap in points."	^10</body></methods><methods><class-id>ICC.ADvance.AD2Printer</class-id> <category>printing diagrams</category><body package="ADvance2">printTo: aPrinter	"Print my editors contents using the supplied settings to aPrinter."	Cursor wait		showWhile:			[aPrinter setLandscape: self settings orientation value == #landscape.			self settings fitToPage value				ifTrue: [self printOverviewWith: aPrinter]				ifFalse: [self						printWith: aPrinter						fromPage: self settings fromPage						toPage: self settings toPage						scale: self settings scale / 100].			self settings printToFile ifFalse: [aPrinter print]]</body></methods><methods><class-id>ICC.ADvance.AD2Printer class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body><body package="ADvance2">on: anEditor	| aRectangleOrNil |	aRectangleOrNil := anEditor usedArea.	^self new		 editor: anEditor;		 bounds: (aRectangleOrNil isNil				ifTrue: [aRectangleOrNil]				ifFalse: [aRectangleOrNil expandedBy: 2]);		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2LayoutSpec</class-id> <category>encode-decode</category><body package="ADvance2">decodeLayoutFrom: anArray	^AD2LayoutOrigin new		 leftFraction: (anArray at: 1);		 topFraction: (anArray at: 2);		 yourself</body><body package="ADvance2">fromLiteralArrayEncoding: anArray	vertex2 := self adBasics systemEnvironment at: (anArray at: 2)				ifAbsent: [nil].	3		to: anArray size		by: 2		do: [:i | self perform: (anArray at: i)				with: (anArray at: i + 1)].	layout1 isNil ifFalse: [self layout1: (self decodeLayoutFrom: self layout1)].	layout2 isNil ifFalse: [self layout2: (self decodeLayoutFrom: self layout2)]</body><body package="ADvance2">literalArrayEncoding	| aCollection |	aCollection := OrderedCollection				with: self class fullyQualifiedReference				with: self vertex2 fullyQualifiedReference.	self attribute isNil ifFalse: [aCollection add: #attribute:; add: self attribute].	self aggregationType isNil ifFalse: [aCollection add: #aggregationType:; add: self aggregationType].	self layout1 isNil ifFalse: [aCollection add: #layout1:; add: self layout1 literalArrayEncoding].	self layout2 isNil ifFalse: [aCollection add: #layout2:; add: self layout2 literalArrayEncoding].	^aCollection asArray</body></methods><methods><class-id>ICC.ADvance.AD2LayoutSpec</class-id> <category>accessing</category><body package="ADvance2">aggregationType	^aggregationType</body><body package="ADvance2">aggregationType: aSymbol	aggregationType := aSymbol</body><body package="ADvance2">attribute	^attribute</body><body package="ADvance2">attribute: aString	attribute := aString</body><body package="ADvance2">layout1	^layout1</body><body package="ADvance2">layout1: anAD2LayoutOrigin	layout1 := anAD2LayoutOrigin</body><body package="ADvance2">layout2	^layout2</body><body package="ADvance2">layout2: anAD2LayoutOrigin	layout2 := anAD2LayoutOrigin</body><body package="ADvance2">layoutAt: anInteger	^anInteger = 1		ifTrue: [self layout1]		ifFalse: [self layout2]</body><body package="ADvance2">layoutAt: anInteger put: aLayoutOrigin	anInteger = 1		ifTrue: [self layout1: aLayoutOrigin]		ifFalse: [self layout2: aLayoutOrigin]</body><body package="ADvance2">vertex2	^vertex2</body><body package="ADvance2">vertex2: aClass	vertex2 := aClass</body></methods><methods><class-id>ICC.ADvance.AD2LayoutSpec</class-id> <category>setting layout</category><body package="ADvance2">setLayoutFor: aRelationModel	1 to: 2		do:			[:index |			| layout |			layout := self layoutAt: index.			layout isNil				ifFalse:					[aRelationModel originLayoutAt: index put: layout.					aRelationModel autoLayout at: index put: false]]</body></methods><methods><class-id>ICC.ADvance.IccHTMLADvanceText</class-id> <category>accessing</category><body package="ADvance2">createHTMLOn: aStream	"I create the HTML description of me"	| readStream |	self preHTMLOn: aStream.	readStream := ReadStream on: self content.	[readStream atEnd]		whileFalse:			[(IccHTMLString newString: (IccSysOrg current nextLine: readStream))				createHTMLOn: aStream.			IccHTMLLineBreak new createHTMLOn: aStream].	self postHTMLOn: aStream</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>validating</category><body package="ADvance2">copiesIsValid: aController	| isValid view |	view := aController view.	(isValid := view hasEditValue and: [aController view editValue &gt; 0]) ifFalse: [view flash; update: #value].	^isValid</body><body package="ADvance2">fromPageIsValid: aController	| isValid view |	view := aController view.	(isValid := view hasEditValue				and:					[| val |					val := aController view editValue.					val &gt;= self firstPage &amp; (val &lt;= self lastPage)]) ifFalse: [view flash; update: #value].	^isValid</body><body package="ADvance2">scaleIsValid: aController	| isValid view |	view := aController view.	(isValid := view hasEditValue				and:					[| val |					val := aController view editValue.					val &gt; 0]) ifFalse: [view flash; update: #value].	^isValid</body><body package="ADvance2">toPageIsValid: aController	| isValid view |	view := aController view.	(isValid := view hasEditValue				and:					[| val |					val := aController view editValue.					val &gt;= self firstPage &amp; (val &lt;= self lastPage)]) ifFalse: [view flash; update: #value].	^isValid</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>aspects</category><body package="ADvance2">area	^((AspectAdaptor subject: self settings)		forAspect: #area)		onChangeSend: #changedPrintArea to: self</body><body package="ADvance2">copies	^(AspectAdaptor subject: self settings)		forAspect: #copies</body><body package="ADvance2">fitToPage	^((AspectAdaptor subject: self settings)		forAspect: #fitToPage)		onChangeSend: #changedFitToPage to: self</body><body package="ADvance2">fromPage	^(AspectAdaptor subject: self settings)		forAspect: #fromPage</body><body package="ADvance2">orientation	^((AspectAdaptor subject: self settings)		forAspect: #orientation)		onChangeSend: #changedPrintOrientation to: self</body><body package="ADvance2">printToFile	^(AspectAdaptor subject: self settings)		forAspect: #printToFile</body><body package="ADvance2">scale	^scale isNil		ifTrue: [scale := ((AspectAdaptor subject: self settings)						forAspect: #scale)						onChangeSend: #changedPrintScale to: self]		ifFalse: [scale]</body><body package="ADvance2">sortCopies	^(AspectAdaptor subject: self settings)		forAspect: #sortCopies</body><body package="ADvance2">toPage	^toPage isNil		ifTrue: [toPage := (AspectAdaptor subject: self settings)						forAspect: #toPage]		ifFalse: [toPage]</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>changing</category><body package="ADvance2">changedFitToPage	self iccEnable: self fitToPage value not group: #(#printAll #printPages #scale).	self changedPrintArea.	self changedSelectionState</body><body package="ADvance2">changedPrintArea	self iccEnable: self area value == #pages &amp; self fitToPage value not group: #(#fromPage #toPage)</body><body package="ADvance2">changedPrintOrientation	self printer setLandscape: self orientation value == #landscape.	self changedPrintScale</body><body package="ADvance2">changedPrintScale	self lastPage: (self pagesCalculationBlock value: self scale value / 100)</body><body package="ADvance2">changedSelectionState	self iccEnable: self sourceHasSelection &amp; self fitToPage value not group: #(#printSelection)</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>accessing</category><body package="ADvance2">defaultFilename	^defaultFilename</body><body package="ADvance2">defaultFilename: aString	defaultFilename := aString</body><body package="ADvance2">filename	^filename</body><body package="ADvance2">filename: aString	filename := aString</body><body package="ADvance2">firstPage	^1</body><body package="ADvance2">lastPage	^lastPage</body><body package="ADvance2">lastPage: anIntegerOrNil	lastPage := anIntegerOrNil.	anIntegerOrNil notNil ifTrue: [self toPage value: anIntegerOrNil]</body><body package="ADvance2">pagesCalculationBlock	^pagesCalculationBlock</body><body package="ADvance2">pagesCalculationBlock: aBlock	pagesCalculationBlock := aBlock</body><body package="ADvance2">printer	^printer</body><body package="ADvance2">printer: aPrinter	printer := aPrinter</body><body package="ADvance2">sourceHasSelection	^sourceHasSelection</body><body package="ADvance2">sourceHasSelection: aBoolean	sourceHasSelection := aBoolean</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>private</category><body package="ADvance2">confirmManyPages	| pages |	pages := self toPage value - self fromPage value + 1.	^self settings fitToPage or: [pages &lt;= 16 or: [self adDialog threeStateConfirm: ('There are &lt;1p&gt; pages output.&lt;n&gt;Do you want to print them?' expandMacrosWith: pages)				for: self builder window]]</body><body package="ADvance2">requestFilename	| aString |	aString := self adDialog				requestNewFileName: 'Filename for printing:'				suggest: self defaultFilename , '.ps'				for: self builder window.	^aString isEmpty		ifTrue: [nil]		ifFalse: [aString]</body><body package="ADvance2">settings	^self advance preferences printSettings</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	defaultFilename := Time now.	pagesCalculationBlock := [:aScale | self lastPage].	self sourceHasSelection: true</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>actions</category><body package="ADvance2">doAccept	| answer |	answer := self confirmManyPages.	answer isNil ifTrue: [^self].	answer ifFalse: [^self doCancel].	self printToFile value		ifTrue:			[self filename: self requestFilename.			self filename isNil ifTrue: [^self doCancel]].	super doAccept</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self changedPrintOrientation.	self changedFitToPage</body></methods><methods><class-id>ICC.ADvance.NVComposedText</class-id> <category>scaling</category><body package="ADvance2">rescale	self		compositionWidth: self class defaultCompositionWidth		text: self text		style: self textStyle		fitWidth: true</body><body package="ADvance2">scalingFactor	^self textStyle isNil		ifTrue: [1]		ifFalse: [self textStyle scalingFactor]</body><body package="ADvance2">unscaledHeight	^(self height / self scalingFactor) rounded</body><body package="ADvance2">unscaledWidth	^(self width / self scalingFactor) rounded</body></methods><methods><class-id>ICC.ADvance.NVComposedText</class-id> <category>private-accessing</category><body package="ADvance2">printTextStyle	^printTextStyle</body><body package="ADvance2">printTextStyle: aStyle	printTextStyle := aStyle</body></methods><methods><class-id>ICC.ADvance.NVComposedText</class-id> <category>displaying</category><body package="ADvance2">displayOnPrinter: aGraphicsContext at: aPoint	(self class		withText: self text		style: self printTextStyle		fontPolicy: aGraphicsContext fontPolicy)		displayOn: aGraphicsContext at: aPoint</body></methods><methods><class-id>ICC.ADvance.NVComposedText class</class-id> <category>instance creation</category><body package="ADvance2">withText: aText style: aTextStyle fontPolicy: aFontPolicy	"Answer an instance of the receiver with text set to aText and style	set to aTextStyle. Use aFontPolicy as the font source."	^super new		fontPolicy: aFontPolicy;		compositionWidth: DefaultCompositionWidth		text: aText		style: aTextStyle		fitWidth: true</body><body package="ADvance2">withText: aText style: screenTextStyle printStyle: printTextStyle	"Answer an instance of the receiver with text set to aText and styles set to screenTextStyle	and printTextStyle resp."	^(self withText: aText style: screenTextStyle)		printTextStyle: printTextStyle; yourself</body></methods><methods><class-id>ICC.ADvance.NVComposedText class</class-id> <category>ADvance</category><body package="ADvance2">markedAsFilterClass</body></methods><methods><class-id>ICC.ADvance.AD2Message</class-id> <category>comparing</category><body package="ADvance2">&lt;= aMessage	^self initiatorService &lt;= aMessage initiatorService or: [self initiatorService = aMessage initiatorService and: [self participantService &lt;= aMessage participantService]]</body><body package="ADvance2">= aMessage	^self initiatorService = aMessage initiatorService and: [self participantService = aMessage participantService]</body><body package="ADvance2">hash	^self initiatorService hash + self participantService hash</body></methods><methods><class-id>ICC.ADvance.AD2Message</class-id> <category>accessing</category><body package="ADvance2">initiatorService	^initiatorService</body><body package="ADvance2">initiatorService: anADService	initiatorService := anADService</body><body package="ADvance2">participantService	^participantService</body><body package="ADvance2">participantService: anADService	participantService := anADService</body></methods><methods><class-id>ICC.ADvance.AD2Message</class-id> <category>printing</category><body package="ADvance2">printOn: aStream	self initiatorService printOn: aStream.	aStream nextPutAll: ' --&gt; '.	self participantService printOn: aStream</body><body package="ADvance2">shortPrintString	^self initiatorService unqualifiedPrintString,		' --&gt; ', 		self participantService unqualifiedPrintString</body></methods><methods><class-id>ICC.ADvance.AD2Message</class-id> <category>private</category><body package="ADvance2">fromLiteralArrayEncoding: anArray	"^&lt;AD2Message | nil&gt;	Warning: This method may answer nil, if its literal array components are absent!"	| systemEnvironment initiator participant |	systemEnvironment := self adBasics systemEnvironment.	initiator := systemEnvironment at: (anArray at: 2)				ifAbsent: [^nil].	participant := systemEnvironment at: (anArray at: 4)				ifAbsent: [^nil].	self initiatorService: (AD2Service baseClass: initiator extendedSelector: (anArray at: 3)); participantService: (AD2Service baseClass: participant extendedSelector: (anArray at: 5))</body><body package="ADvance2">literalArrayEncoding	^(Array new: 5)		at: 1 put: self class fullyQualifiedReference;		at: 2 put: self initiatorService baseClass fullyQualifiedReference;		at: 3 put: self initiatorService extendedSelector asSymbol;		at: 4 put: self participantService baseClass fullyQualifiedReference;		at: 5 put: self participantService extendedSelector asSymbol; yourself</body></methods><methods><class-id>ICC.ADvance.AD2Message class</class-id> <category>instance creation</category><body package="ADvance2">initiatorService: initiatorService participantService: participantService	^(self new) initiatorService: initiatorService; participantService: participantService; yourself</body></methods><methods><class-id>ICC.ADvance.AD2Message class</class-id> <category>private</category><body package="ADvance2">decodeFromLiteralArray: anArray	^self new fromLiteralArrayEncoding: anArray</body></methods><methods><class-id>ICC.ADvance.IccHTMLDefinitionList</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/DL&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;DL&gt;'</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>accessing</category><body package="ADvance2">aggregationType	^aggregationType</body><body package="ADvance2">aggregationType: aSymbol	aggregationType := aSymbol</body><body package="ADvance2">clientRelation	^clientRelation</body><body package="ADvance2">clientRelation: anITClientRelation	clientRelation := anITClientRelation</body><body package="ADvance2">domainType	^#association</body><body package="ADvance2">heading	^heading</body><body package="ADvance2">heading: anInteger	heading := anInteger</body><body package="ADvance2">multiplicityText	^self applicationModel getTextFor: (self clientRelation multiplicity asText emphasizeAllWith: #(#small))</body><body package="ADvance2">origin1	| layout |	(layout := self originLayout1) isNil		ifTrue:			[self computeOrigins.			layout := self originLayout1].	^layout pointRelativeTo: self vertex1 area</body><body package="ADvance2">origin2	| layout |	(layout := self originLayout2) isNil		ifTrue:			[self computeOrigins.			layout := self originLayout2].	^layout pointRelativeTo: self vertex2 area</body><body package="ADvance2">originLayout1	^originLayout1</body><body package="ADvance2">originLayout1: anAD2LayoutOrigin	originLayout1 := anAD2LayoutOrigin</body><body package="ADvance2">originLayout2	^originLayout2</body><body package="ADvance2">originLayout2: anAD2LayoutOrigin	originLayout2 := anAD2LayoutOrigin</body><body package="ADvance2">originLayoutAt: anInteger	^anInteger = 1		ifTrue: [self originLayout1]		ifFalse: [self originLayout2]</body><body package="ADvance2">originLayoutAt: anInteger put: aLayoutOrigin	anInteger = 1		ifTrue: [self originLayout1: aLayoutOrigin]		ifFalse: [self originLayout2: aLayoutOrigin]</body><body package="ADvance2">parallels1	^parallels1</body><body package="ADvance2">parallels1: anInteger	parallels1 := anInteger</body><body package="ADvance2">parallels2	^parallels2</body><body package="ADvance2">parallels2: anInteger	parallels2 := anInteger</body><body package="ADvance2">parallelsNo	^self parallels1 + self parallels2</body><body package="ADvance2">roleText	^self applicationModel getTextFor: (self clientRelation extendedRoleName asText emphasizeAllWith: #(#small))</body><body package="ADvance2">vertices	"Similar to the inherited behavior but repairs former vertical or 	horizontal layout."	cachedVertices isNil		ifTrue: 			[cachedVertices := self computeVertices.			self repairFormerLayout].	^cachedVertices</body><body package="ADvance2">wasHorizontal	^wasHorizontal == true</body><body package="ADvance2">wasHorizontal: aBoolean	wasHorizontal := aBoolean</body><body package="ADvance2">wasVertical	^wasVertical == true</body><body package="ADvance2">wasVertical: aBoolean	wasVertical := aBoolean</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>private layout</category><body package="ADvance2">cachedVertices	^cachedVertices</body><body package="ADvance2">computeOrigins	| line box1 box2 p1 p2 offset separation sumOfParallels offsetFactor translation |	box1 := self vertex1 area.	box2 := self vertex2 area.	p1 := box1 center.	p2 := box2 center.	separation := 20.	offset := p1 = p2				ifTrue: [Point zero]				ifFalse: [self heading * (p2 - p1) normal].	sumOfParallels := (self vertex1 numberOfEdgesTo: self vertex2)				+ (self vertex2 numberOfEdgesTo: self vertex1).	offsetFactor := self parallelsNo - (sumOfParallels - 1 / 2).	translation := separation * offset * offsetFactor.	line := ((LineSegment from: p1 + translation to: p2 + translation)				ad2ClippedAt: box1)				ad2ClippedAt: box2.	self setLayouts: (Array with: (AD2LayoutOrigin newFor: line start relativeTo: box1)			with: (AD2LayoutOrigin newFor: line end relativeTo: box2)).	self improveLayout</body><body package="ADvance2">computeVertices	self flushOrigins.	^self advance preferences painter relationLayoutType == #gridded		ifTrue: [self griddedVertices]		ifFalse: [self straightVertices]</body><body package="ADvance2">flushOrigins	1 to: 2 do: [:index | (self autoLayout at: index)			ifTrue: [self originLayoutAt: index put: nil]]</body><body package="ADvance2">flushVertices	"Store whether there was a vertical or horizontal layout in 	last time cached vertices."	self wasVertical: (self cachedVertices first x = self cachedVertices last x).	self wasHorizontal: (self cachedVertices first y = self cachedVertices last y).	super flushVertices.</body><body package="ADvance2">griddedVertices	| center1 center2 p1 p2 sector1 sector2 |	center1 := self vertex1 area center.	center2 := self vertex2 area center.	p1 := self origin1.	p2 := self origin2.	sector1 := self sectorFor: self originLayout1.	sector2 := self sectorFor: self originLayout2.	((sector1 == #right and: [sector2 == #left])		or: [sector1 == #left and: [sector2 == #right]])		ifTrue: [^self				horizontalFourVerticesFrom: p1				to: p2				offsetSign: (center1 y &lt; center2 y						ifTrue: [-1]						ifFalse: [1])].	((sector1 == #top and: [sector2 == #bottom])		or: [sector1 == #bottom and: [sector2 == #top]])		ifTrue: [^self				verticalFourVerticesFrom: p1				to: p2				offsetSign: (center1 x &lt; center2 x						ifTrue: [1]						ifFalse: [-1])].	((sector1 == #right or: [sector1 == #left])		and: [sector2 == #bottom or: [sector2 == #top]])		ifTrue: [^self threeVertices2From: p1 to: p2].	^self threeVertices1From: p1 to: p2</body><body package="ADvance2">horizontalFourVerticesFrom: p1 to: p4 offsetSign: sign	| p2 p3 middle offset |	middle := p1 x + p4 x / 2.	offset := self parallelsNo * 4.	p2 := offset * self heading * sign + middle @ p1 y.	p3 := p2 x @ p4 y.	^Array		with: p1		with: p2		with: p3		with: p4</body><body package="ADvance2">improveLayout	| box1 box2 p1 p2 sector1 sector2 |	self advance preferences painter relationLayoutType == #straight ifTrue: [^self].	box1 := self vertex1 area.	box2 := self vertex2 area.	p1 := self origin1.	p2 := self origin2.	sector1 := self sectorFor: self originLayout1.	sector2 := self sectorFor: self originLayout2.	((sector1 == #right and: [sector2 == #left])		or: [sector1 == #left and: [sector2 == #right]])		ifTrue:			[| middle |			middle := p1 y + p2 y / 2.			(box1 top &lt; middle and: [middle &lt; box1 bottom and: [box2 top &lt; middle and: [middle &lt; box2 bottom]]])				ifTrue:					[p1 y: middle.					p2 y: middle]].	((sector1 == #top and: [sector2 == #bottom])		or: [sector1 == #bottom and: [sector2 == #top]])		ifTrue:			[| middle |			middle := p1 x + p2 x / 2.			(box1 left &lt; middle and: [middle &lt; box1 right and: [box2 left &lt; middle and: [middle &lt; box2 right]]])				ifTrue:					[p1 x: middle.					p2 x: middle]].	self setLayouts: (Array with: (AD2LayoutOrigin newFor: p1 relativeTo: box1)			with: (AD2LayoutOrigin newFor: p2 relativeTo: box2))</body><body package="ADvance2">repairFormerLayout	"Do a vertical or horizontal layout if this layout was done earlier."	self wasVertical ifTrue: [self doVerticalLayout. self wasVertical: false].	self wasHorizontal ifTrue: [self doHorizontalLayout. self wasHorizontal: false]</body><body package="ADvance2">sectorFor: aLayout	"^&lt;#left | #right | #top | #bottom&gt;	Compute and answer the sector where a line starting at vertex's center intersects	with vertex's bounding box."	aLayout leftFraction &lt; 0.01 ifTrue: [^#left].	aLayout topFraction &lt; 0.01 ifTrue: [^#top].	aLayout leftFraction &gt; 0.99 ifTrue: [^#right].	^#bottom</body><body package="ADvance2">setLayouts: anArrayOfLayouts	1 to: 2 do: [:index | (self autoLayout at: index)			ifTrue: [self originLayoutAt: index put: (anArrayOfLayouts at: index)]]</body><body package="ADvance2">straightVertices	^Array with: self origin1 with: self origin2</body><body package="ADvance2">symbolAngle	"^&lt;Integer&gt; 	Answers angle of the line between the two first vertices."	^((self vertices at: 2) - self vertices first) theta</body><body package="ADvance2">symbolOrigin	"^&lt;Point&gt;	Answers the origin of aggregation type symbol."	^self vertices first</body><body package="ADvance2">threeVertices1From: p1 to: p3	| p2 |	p2 := p1 x @ p3 y.	^Array		with: p1		with: p2		with: p3</body><body package="ADvance2">threeVertices2From: p1 to: p3	| p2 |	p2 := p3 x @ p1 y.	^Array		with: p1		with: p2		with: p3</body><body package="ADvance2">verticalFourVerticesFrom: p1 to: p4 offsetSign: sign	| p2 p3 middle offset |	middle := p1 y + p4 y / 2.	offset := self parallelsNo * 4.	p2 := p1 x @ (offset * self heading * sign + middle).	p3 := p4 x @ p2 y.	^Array		with: p1		with: p2		with: p3		with: p4</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>displaying</category><body package="ADvance2">displayIn: anEditor	| aPart |	aPart := (NVVisibilityWrapper on: (AD2AssociationView new model: self; yourself))				isVisible: self visible; yourself.	(anEditor layers at: 2)		add: aPart.	aPart updateForDisplay</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self heading: 1</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>accessing layout</category><body package="ADvance2">multiplicityOrigin	"^&lt;Point&gt; Answer the origin of the multiplicity text."	| theVertices verticesSize p1 p2 sector textHeight textWidth extent v origin |	theVertices := self vertices.	verticesSize := theVertices size.	p1 := theVertices at: verticesSize.	p2 := theVertices at: verticesSize - 1.	sector := self sectorFor: self originLayout2.	textHeight := self multiplicityText unscaledHeight - 3.	textWidth := self multiplicityText unscaledWidth + 3.	extent := sector == #top				ifTrue: [9 @ 9 + (self parallelsNo * textHeight asPoint)]				ifFalse: [sector == #bottom						ifTrue: [3 @ 3 + (self parallelsNo * textHeight asPoint)]						ifFalse: [1 @ 1]].	v := p2 - p1.	origin := p1 + (v isZero					ifTrue: [0]					ifFalse: [v unitVector * extent]).	sector == #right ifTrue: [^origin - (-3 @ (textHeight + 3))].	sector == #top ifTrue: [^origin - (textWidth @ textHeight)].	sector == #left ifTrue: [^origin - (textWidth @ (textHeight + 3))].	^origin + (3 @ 0)</body><body package="ADvance2">symbol	"^&lt;Polyline | nil&gt; 	The shape for the symbol is determined by the aggregation type."	| theVertices |	^(theVertices := self class shapeForAggregationType: self aggregationType) notNil		ifTrue: 			[| theAngle |			theAngle := self symbolAngle.			(Polyline vertices: (theVertices collect: [:eachPoint | eachPoint ad2RotateBy: theAngle]))				translatedBy: self symbolOrigin]		ifFalse: [nil]</body><body package="ADvance2">symbolColor	"^&lt;ColorValue&gt;	The color for the symbol is determined by the aggregation type."	^self class colorValueForAggregationType: self aggregationType</body><body package="ADvance2">textOrigin	"^&lt;Point&gt; Answer the origin of the relation text."	| theVertices verticesSize p1 p2 sector textHeight textWidth extent v origin |	theVertices := self vertices.	verticesSize := theVertices size.	p1 := theVertices at: verticesSize.	p2 := theVertices at: verticesSize - 1.	sector := self sectorFor: self originLayout2.	textHeight := self roleText unscaledHeight - 3.	textWidth := self roleText unscaledWidth + 3.	extent := sector == #top				ifTrue: [9 @ 9 + (self parallelsNo * textHeight asPoint)]				ifFalse: [sector == #bottom						ifTrue: [3 @ 3 + (self parallelsNo * textHeight asPoint)]						ifFalse: [1 @ 1]].	v := p2 - p1.	origin := p1 + (v isZero					ifTrue: [0]					ifFalse: [v unitVector * extent]).	sector == #right ifTrue: [^origin + (3 @ 0)].	sector == #top ifTrue: [^origin - (-3 @ textHeight)].	sector == #left ifTrue: [^origin + (textWidth negated @ 0)].	^origin - (textWidth @ 0)</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>actions</category><body package="ADvance2">doAutoLayout	self setAutoLayout.	self update: #shape with: #auto</body><body package="ADvance2">doHorizontalLayout	"Bring both ends of the line to a horizontal layout if possible (the 	both rectangles intersect vertically)."	| bottomOriginY topCornerY centeredY linePoints leftIndex rightIndex |	bottomOriginY := (self vertex1 area origin y max: self vertex2 area origin y).	topCornerY := (self vertex1 area corner y min: self vertex2 area corner y).	linePoints := Array with: self vertices first with: self vertices last.	((bottomOriginY &gt; topCornerY) or: [linePoints first y = linePoints last y])		ifTrue: [^self].	centeredY := (((linePoints first y + linePoints last y) / 2) max: bottomOriginY) min: topCornerY.	1 to: 2		do: 			[:index | 			| theVertexBox theNewOrigin |			theVertexBox := (self vertexAt: index) area.			theNewOrigin := AD2LayoutOrigin newFor: ((linePoints at: index) x @ centeredY) relativeTo: theVertexBox.			theNewOrigin leftFraction: theNewOrigin leftFraction rounded.			self originLayoutAt: index put: (theNewOrigin)].	"One line point has to be on the left border of a vertex box and the other one on the right border."	leftIndex := ((linePoints at: 1) x &lt; (linePoints at: 2) x) ifTrue: [1] ifFalse: [2].	rightIndex := (leftIndex = 2) ifTrue: [1] ifFalse: [2].	(self originLayoutAt: leftIndex) leftFraction: 1.	(self originLayoutAt: rightIndex) leftFraction: 0.	self autoLayout: (Array with: false with: false).	self update: #shape with: #horizontal</body><body package="ADvance2">doVerticalLayout	"Bring both ends of the line to a vertical layout if possible (the 	both rectangles intersect horizontally)."	| rightOriginX leftCornerX centeredX linePoints topIndex bottomIndex |	rightOriginX := (self vertex1 area origin x max: self vertex2 area origin x).	leftCornerX := (self vertex1 area corner x min: self vertex2 area corner x).	linePoints := Array with: self vertices first with: self vertices last.	((rightOriginX &gt; leftCornerX) or: [linePoints first x = linePoints last x])		ifTrue: [^self].	centeredX := (((linePoints first x + linePoints last x) / 2) min: leftCornerX) max: rightOriginX.	1 to: 2		do: 			[:index | 			| theVertexBox theNewOrigin |			theVertexBox := (self vertexAt: index) area.			theNewOrigin := AD2LayoutOrigin newFor: (centeredX @ (linePoints at: index) y) relativeTo: theVertexBox.			self originLayoutAt: index put: (theNewOrigin)].	"One line point has to be on top of a vertex box and the other one at the bottom."	topIndex := ((linePoints at: 1) y &lt; (linePoints at: 2) y) ifTrue: [1] ifFalse: [2].	bottomIndex := (topIndex = 2) ifTrue: [1] ifFalse: [2].	(self originLayoutAt: topIndex) topFraction: 1.	(self originLayoutAt: bottomIndex) topFraction: 0.	self autoLayout: (Array with: false with: false).	self update: #shape with: #vertical</body><body package="ADvance2">remove	self applicationModel controller removeAssociations</body><body package="ADvance2">setAggregationType: aSymbol	self aggregationType: aSymbol.	self update: #shape with: self aggregationType</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>menu creation</category><body package="ADvance2">actionMenu: aMenuBuilder 	aMenuBuilder 		addLabel: 'Delete' value: [self remove]; 		line; 		addLabel: 'Auto layout' value: [self doAutoLayout]; 		line; 		addLabel: 'Horizontal layout' value: [self doHorizontalLayout]; 		addLabel: 'Vertical layout' value: [self doVerticalLayout]; 		line;		beginSubMenuLabeled: 'Aggregation'.	1 to: self class aggregationTypeInfo size do: [:index | 		aMenuBuilder 			addLabel: (self class aggregationTypeMenuEntries at: index) 			value: [self setAggregationType: (self class aggregationTypes at: index)]].	aMenuBuilder endSubMenu</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel</class-id> <category>updating</category><body package="ADvance2">update: aspect with: aParameter	aspect == #zoom 		ifTrue: [^self roleText rescale].	super update: aspect with: aParameter.	(#(#shape #location) includes: aspect) 		ifTrue: [self applicationModel beModified]</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel class</class-id> <category>accessing</category><body package="ADvance2">aggregationTypeInfo	"^&lt;Array of: Array&gt;	Answers the possible aggregation types as triples of Symbol, ColorValue, and String (internal representation, Color for display, and external representation for menu items)."	^Array 		with: #(#none nil 'None')		with: (Array with: #aggregation with: ColorValue white with: 'Aggregation')		with: (Array with: #composite with: ColorValue black with: 'Composite')</body><body package="ADvance2">aggregationTypeMenuEntries	"^&lt;Array of: Symbol&gt;"	^self aggregationTypeInfo collect: [:eachArray | eachArray at: 3]</body><body package="ADvance2">aggregationTypes	"^&lt;Array of: Symbol&gt;"	^self aggregationTypeInfo collect: [:eachArray | eachArray first]</body><body package="ADvance2">colorValueForAggregationType: aSymbol 	"^&lt;ColorValue&gt; 	Answers the Color to use for the display of the aggregation 	type's symbol. If aSymbol is nil or an invalid type, the default 	Black is answered."	self aggregationTypeInfo 		do: [:eachArray | eachArray first == aSymbol 			ifTrue: [^eachArray at: 2]].	^ColorValue black</body><body package="ADvance2">shapeForAggregationType: aSymbol 	"^&lt;Array of: Point | nil&gt; 	This is a rhombus for both kinds of aggregation and nil 	otherwise."	^(aSymbol notNil and: [aSymbol ~~ #none])		ifTrue: [self rhombicShape]		ifFalse: [nil]</body></methods><methods><class-id>ICC.ADvance.AD2AssociationModel class</class-id> <category>shapes</category><body package="ADvance2">rhombicShape	"Used for aggregation and composition."	^(Array new: 5)		at: 1 put: 10 @ 4;		at: 2 put: 0 @ 0;		at: 3 put: 10 @ -4;		at: 4 put: 20 @ 0;		at: 5 put: 10 @ 4;		yourself</body></methods><methods><class-id>ICC.ADvance.AD2DocumentationPreferences</class-id> <category>initialize-release</category><body package="ADvance2">initialize</body></methods><methods><class-id>ICC.ADvance.AD2DocumentationPreferences class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2AboutDialog</class-id> <category>utility</category><body package="ADvance2">computeWindowBoundsFor: aBuilder	"Answer the height of the window needed for the whole about text."	| aComponent layout text |	aComponent := aBuilder componentAt: #applicationText.	layout := aComponent spec layout.	text := ComposedText withText: self infoText value style: (self class utils defaultTextStyle					 lineGrid: 14;					 baseline: 12;					 yourself).	^layout leftOffset @ layout topOffset + (text width + 30 @ (text height + 10)) - (layout rightOffset @ layout bottomOffset)</body><body package="ADvance2">setWindowHeightFor: aBuilder to: height	"Set the windows height."	| box |	box := aBuilder window displayBox.	aBuilder window displayBox: (box origin extent: (self computeWindowBoundsFor: aBuilder))</body></methods><methods><class-id>ICC.ADvance.AD2AboutDialog</class-id> <category>private</category><body package="ADvance2">wrapText</body></methods><methods><class-id>ICC.ADvance.AD2AboutDialog class</class-id> <category>private</category><body package="ADvance2">aboutTextFor: aClass	"Answer a standard about text for aClass and its components."	"Namespaces!!!"	| str |	str := TextStream on: (String new: 200).	str emphasis: #(#bold #small).	self printInfosAbout: aClass on: str.	(self applicationComponentsFor: aClass)		do:			[:eachClassName |			eachClassName asQualifiedReference ifDefinedDo:				[:eachClass | self printInfosAbout: eachClass on: str]].	str emphasis: #small.	str nextPutAll: self addressText.	^str contents</body><body package="ADvance2">printInfosAbout: aClass on: aStream	"Print infos about aClass on aStream. Add infos about an expiration date."	| date |	super printInfosAbout: aClass on: aStream.	(aClass class includesSelector: #expirationDate)		ifFalse: [^self].	(date := aClass expirationDate) isNil ifTrue: [^self].	aStream nextPutAll: ('Expiration date: &lt;1p&gt;&lt;n&gt;&lt;n&gt;' expandMacrosWith: date)</body></methods><methods><class-id>ICC.ADvance.AD2AboutDialog class</class-id> <category>constants</category><body package="ADvance2">addressText	^'IC&amp;C GmbH&lt;n&gt;Papenhöhe 14&lt;n&gt;D-25335 Elmshorn&lt;n&gt;Germany&lt;n&gt;&lt;n&gt;Phone:&lt;t&gt;+49 (0) 4121/ 23 92 - 0&lt;n&gt;Email:&lt;t&gt;support@icc-gmbh.de&lt;n&gt;Web:&lt;t&gt;www.icc-gmbh.de' expandMacros</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>aspects</category><body package="ADvance2">comment	^comment isNil		ifTrue: [comment := String new asValue]		ifFalse: [comment]</body><body package="ADvance2">component	^component isNil		ifTrue: [component := nil asValue]		ifFalse: [component]</body><body package="ADvance2">container	^container isNil		ifTrue: [container := String new asValue]		ifFalse: [container]</body><body package="ADvance2">implementation	^implementation isNil		ifTrue: [implementation := self implementationList value first asValue]		ifFalse: [implementation]</body><body package="ADvance2">implementationList	^self advance typesClass implementationTypeStrings asValue</body><body package="ADvance2">roleName	^roleName</body><body package="ADvance2">type	^type isNil		ifTrue: [type := self typeList value first asValue]		ifFalse: [type]</body><body package="ADvance2">typeList	^self advance typesClass associationTypeStrings asValue</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self enableOkButton</body><body package="ADvance2">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self component value isNil ifFalse: [(aBuilder componentAt: #roleName) widget hasFocus: true]</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>testing</category><body package="ADvance2">componentExists	^self adBasics systemEnvironment includesKey: self component value</body><body package="ADvance2">roleNameIsValid	^self roleName value notNil and: [self roleName value isEmpty not]</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>private</category><body package="ADvance2">typeDescriptionFor: aClientRelation	"^&lt;String&gt; I return a textual description of the roleClass."	| base aConstructor relationType |	aClientRelation role isNil ifTrue: [^String new].	base := aClientRelation role baseClass.	^(aClientRelation isMultiple or: [aClientRelation isWrapped])		ifTrue:			[aConstructor := base defaultTypeConstructor.			((relationType := aClientRelation role closedTypeVarTypeOf: aConstructor) isNil or: [relationType isFree])				ifTrue: [String new]				ifFalse: [aClientRelation role baseClass name]]		ifFalse: [self advance typesClass associationTypeStrings first]</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	(roleName := String new asValue) onChangeSend: #enableOkButton to: self.	self component onChangeSend: #enableOkButton to: self</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>accessing</category><body package="ADvance2">declareClientRelationFor: aClass	"Declare a client relation for aClass using the receiver's aspect values."	^aClass		declareClientRelation: self roleName value		role: self typeString		implementation: (self advance typesClass implementationFor: self implementation value)		explanation: self comment value</body><body package="ADvance2">setAspectsFrom: anITClientRelation	"Set the receiver's aspects according to anITClientRelation.	NOTE: Due to a problem in IncrementalTypes comments may be lost."	| commentString |	commentString := anITClientRelation roleContext explanationOf: anITClientRelation roleName implementation: anITClientRelation implementation.	self container value: anITClientRelation roleContext fullName.	self roleName value: anITClientRelation roleName.	self component value: (anITClientRelation roleClass isNil			ifTrue: [nil]			ifFalse: [anITClientRelation roleClass fullName]).	self type value: (self typeDescriptionFor: anITClientRelation).	self implementation value: anITClientRelation implementationString.	self comment value: commentString</body><body package="ADvance2">typeString	"^&lt;String&gt; Answer the type string for the client relation describe by the	editor's contents.."	^self advance typesClass typeStringFor: self component value roleType: self type value</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>changing</category><body package="ADvance2">enableOkButton	"OK Button is always enabled because input is checked in any 	case."	self iccEnable: true group: #(#okButton)</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor</class-id> <category>events</category><body package="ADvance2">requestForWindowClose	"^&lt;Boolean&gt;	Input is accepted only if the named class exists and an attribute name is provided."	| theClass |	super requestForWindowClose ifFalse: [^false].	theClass := nil.	(self componentExists or: [(theClass := self adDialog 						chooseClassFrom: self component value						superclassName: nil						for: self builder window) notNil])		ifFalse:			[self adDialog warn: ('Class &lt;1p&gt; doesn''t exist.' expandMacrosWith: self component value)				for: self builder window.			^false].	theClass notNil ifTrue: [self component value: theClass fullName].	self roleNameIsValid		ifFalse:			[self adDialog warn: 'Please enter an attribute name.' for: self builder window.			^false].	^true</body></methods><methods><class-id>ICC.ADvance.AD2ReflexiveAssociationModel</class-id> <category>private layout</category><body package="ADvance2">computeOrigins	| box |	box := self vertex1 area.	self setLayouts: (Array		with: (AD2LayoutOrigin new			leftFraction: 1 - ((self parallelsNo + 1 * 8) / box width);			topFraction: 1;			yourself)		with: (AD2LayoutOrigin new			leftFraction: 1;			topFraction: (self multiplicityText string = '*' ifTrue: [0.5] ifFalse: [0.7]);			yourself))</body><body package="ADvance2">computeVertices	| p1 p2 p4 p5 offset |	self flushOrigins.	p1 := self origin1.	offset := self parallelsNo + 1 * 13 - 5.	p2 := p1 + (0 @ offset).	p5 := self origin2.	p4 := p5 + (offset * 0.8 @ 0).	^(Array new: 5)			at: 1 put: p1;			at: 2 put: p2;			at: 3 put: p4 x @ p2 y;			at: 4 put: p4;			at: 5 put: p5;			 yourself</body><body package="ADvance2">textOrigin	"^&lt;Point&gt; Answer the origin of the relation text.""1 - (10 + (9 * self parallelsNo)"	^self origin1 + (3 @ (self parallelsNo + 1 * 14 - 10))</body></methods><methods><class-id>ICC.ADvance.AD2ReflexiveAssociationModel</class-id> <category>actions</category><body package="ADvance2">doHorizontalLayout	"Horizontal layout does not make sense for reflexive associations."	^self</body><body package="ADvance2">doVerticalLayout	"Vertical layout does not make sense for reflexive associations."	^self</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>changing</category><body package="ADvance2">enableButtons	self iccEnable: self entryPoints selection notNil group: #(#printButton #previewButton)</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>accessing</category><body package="ADvance2">targetModel	^targetModel</body><body package="ADvance2">targetModel: anADApplicationModel	targetModel := anADApplicationModel</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>private</category><body package="ADvance2">diagramState	^self targetModel diagramState value</body><body package="ADvance2">updateEntryPoints	| newList oldSelection |	oldSelection := self entryPoints selection.	newList := self targetModel scriptServices asSortedCollection.	self entryPoints list: newList; selection: oldSelection</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>aspects</category><body package="ADvance2">entryPoints	^entryPoints isNil		ifTrue: [entryPoints := SelectionInList new]		ifFalse: [entryPoints]</body><body package="ADvance2">printToFile	^printToFile</body><body package="ADvance2">scriptDepth	^scriptDepth isNil		ifTrue: [^scriptDepth := (AspectAdaptor subject: self diagramState)						forAspect: #scriptDepthString]		ifFalse: [^scriptDepth]</body><body package="ADvance2">scriptDepthList	^self advance scriptSelectionDialogClass scriptDepthList asValue</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>actions</category><body package="ADvance2">doPreview	self targetModel previewScriptDocumentation: self entryPoints selection.	self close</body><body package="ADvance2">doPrint	self targetModel printScriptDocumentation: self entryPoints selection</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self entryPoints selectionIndexHolder onChangeSend: #enableButtons to: self.	printToFile := false asValue</body><body package="ADvance2">release	scriptDepth isNil ifFalse: [scriptDepth release].	targetModel := nil.	builder release.	builder := nil.	parentView := nil.	super release</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>events</category><body package="ADvance2">noticeOfWindowClose: aWindow	"The ApplicationWindow aWindow is in the process of closing.	You have been notified."	super noticeOfWindowClose: aWindow. 	self release</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(aBuilder componentAt: #entryPoints) widget displayStringSelector: #classAndSelector.	self enableButtons</body></methods><methods><class-id>ICC.ADvance.AD2ClassFilterEditor</class-id> <category>private</category><body package="ADvance2">domainClassesDo: aBlock	aBlock value: self domain domain</body></methods><methods><class-id>ICC.ADvance.AD2ClassFilterEditor class</class-id> <category>constants</category><body package="ADvance2">domainPrintStringSelector	^#name</body><body package="ADvance2">domainType	^'Class'</body></methods><methods><class-id>ICC.ADvance.AD2Preferences</class-id> <category>initialize-release</category><body package="ADvance2">initialize	general := AD2GeneralPreferences new.	painter := AD2PainterPreferences new.	navigator := AD2NavigatorPreferences new.	documentation := AD2DocumentationPreferences new.	printer := AD2PrinterPreferences new.	printSettings := AD2PrintSettings new</body></methods><methods><class-id>ICC.ADvance.AD2Preferences</class-id> <category>accessing</category><body package="ADvance2">documentation	^documentation</body><body package="ADvance2">general	^general</body><body package="ADvance2">navigator	^navigator</body><body package="ADvance2">painter	^painter</body><body package="ADvance2">printSettings	^printSettings</body><body package="ADvance2">printer	^printer</body></methods><methods><class-id>ICC.ADvance.AD2Preferences class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	self initializeDefault</body><body package="ADvance2">obsolete	"This class is being removed from the system. Reset the class variable."	self uninitialize.	super obsolete</body><body package="ADvance2">uninitialize	Default := nil</body></methods><methods><class-id>ICC.ADvance.AD2Preferences class</class-id> <category>instance creation</category><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.AD2Preferences class</class-id> <category>private initialization</category><body package="ADvance2">initializeDefault	Default := self new</body></methods><methods><class-id>ICC.ADvance.AD2Preferences class</class-id> <category>accessing</category><body package="ADvance2">default	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	Default isNil ifTrue: [self initializeDefault].	^Default</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferencesDialog</class-id> <category>private</category><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^#('General' 'Margins')</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#generalSpec #marginsSpec)</body><body package="ADvance2">subject	^self advance preferences printer</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferencesDialog</class-id> <category>aspects-general</category><body package="ADvance2">authorEnabled	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #authorEnabled)		triggerChannel: self accept</body><body package="ADvance2">dateModifiedEnabled	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #dateModifiedEnabled)		triggerChannel: self accept</body><body package="ADvance2">datePrintedEnabled	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #datePrintedEnabled)		triggerChannel: self accept</body><body package="ADvance2">diagramNameEnabled	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #diagramNameEnabled)		triggerChannel: self accept</body><body package="ADvance2">subjectNameEnabled	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #subjectNameEnabled)		triggerChannel: self accept</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferencesDialog</class-id> <category>aspects-margins</category><body package="ADvance2">bottomMargin	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #bottomMargin)		triggerChannel: self accept</body><body package="ADvance2">leftMargin	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #leftMargin)		triggerChannel: self accept</body><body package="ADvance2">rightMargin	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #rightMargin)		triggerChannel: self accept</body><body package="ADvance2">topMargin	^BufferedValueHolder subject: ((AspectAdaptor subject: self subject)			forAspect: #topMargin)		triggerChannel: self accept</body></methods><methods><class-id>ICC.ADvance.AD2DocuPreferencesDialog</class-id> <category>private</category><body package="ADvance2">labelArray	"Answer an Array with the tab labels."	^#('General' 'Scripts')</body><body package="ADvance2">specArray	"Answer an Array with specification names for the tab pages."	^#(#generalSpec #scriptsSpec )</body></methods><methods><class-id>ICC.ADvance.AD2DocuPreferencesDialog</class-id> <category>accessing</category><body package="ADvance2">parent	^parent</body><body package="ADvance2">parent: anApplicationModel	parent := anApplicationModel</body></methods><methods><class-id>ICC.ADvance.AD2DocuPreferencesDialog</class-id> <category>aspects-general</category><body package="ADvance2">outputType	^outputType isNil		ifTrue: [outputType := #HTML asValue]		ifFalse: [outputType]</body><body package="ADvance2">useDocumentationWizard	^useDocumentationWizard isNil		ifTrue: [useDocumentationWizard := true asValue]		ifFalse: [useDocumentationWizard]</body></methods><methods><class-id>ICC.ADvance.AD2DocuPreferencesDialog class</class-id> <category>resources</category><body package="ADvance2">opaqueApplicationImage	^self resources opaqueImageAt: #settings</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarItem</class-id> <category>initialize-release</category><body package="ADvance2">initialize	hasButton := false</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarItem</class-id> <category>accessing</category><body package="ADvance2">buttonId	^(self id , 'Button') asSymbol</body><body package="ADvance2">hasButton	^hasButton</body><body package="ADvance2">hasButton: aBoolean	hasButton := aBoolean</body><body package="ADvance2">id	^self method</body><body package="ADvance2">image	^image</body><body package="ADvance2">image: anImage	image := anImage</body><body package="ADvance2">itemId	^(self id , 'Item') asSymbol</body><body package="ADvance2">label	^self image isNil		ifTrue: [self text]		ifFalse: [self image]</body><body package="ADvance2">model	^self method</body><body package="ADvance2">visualId	^(self id , 'Image') asSymbol</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarItem</class-id> <category>privileged-accessing</category><body package="ADvance2">method	^method</body><body package="ADvance2">method: aValue	method := aValue</body><body package="ADvance2">text	^text</body><body package="ADvance2">text: aString	text := aString</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarItem class</class-id> <category>instance creation</category><body package="ADvance2">image: anImage	^self new		 image: anImage;		 hasButton: true;		 yourself</body><body package="ADvance2">menuImage: anImage	^self new image: anImage; yourself</body><body package="ADvance2">new	^super new initialize</body></methods><methods><class-id>ICC.ADvance.IccHTMLDefListTerm</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;DT&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLDefListTerm class</class-id> <category>instance creation</category><body package="ADvance2">newHTMLString: aHTMLString	"^&lt;HTMLDefListTerm&gt;"	| tmpHTMLItem |	tmpHTMLItem := self new.	tmpHTMLItem add: aHTMLString.	^tmpHTMLItem</body><body package="ADvance2">newString: aString	"^&lt;HTMLDefListTerm&gt;"	| tmpHTMLItem aIccHTMLString |	aIccHTMLString := IccHTMLString		new content: aString;		yourself.	tmpHTMLItem := self new.	tmpHTMLItem add: aIccHTMLString.	^tmpHTMLItem</body></methods><methods><class-id>ICC.ADvance.IccHTMLParagraph</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/P&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	| tmpString |	tmpString := '&lt;P'.	self attributes do: [ :anAssoc |		anAssoc key = #align ifTrue:[ tmpString := tmpString,' ALIGN=',anAssoc value ]].	^tmpString,'&gt;'</body></methods><methods><class-id>ICC.ADvance.AD2FileOutSubjectDialog</class-id> <category>aspects</category><body package="ADvance2">fileOutWholeClass	^fileOutWholeClass</body><body package="ADvance2">filename	^filename</body><body package="ADvance2">recurseSubjects	^recurseSubjects</body></methods><methods><class-id>ICC.ADvance.AD2FileOutSubjectDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	filename := nil asValue.	recurseSubjects := false asValue.	fileOutWholeClass := true asValue</body></methods><methods><class-id>ICC.ADvance.IccHTMLListItem</class-id> <category>constants</category><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;LI&gt;'</body></methods><methods><class-id>ICC.ADvance.NVCachingWrapper</class-id> <category>private-displaying</category><body package="ADvance2">displayInBufferOn: aGraphicsContext	"Create and store the caching-pixmap if it is nil, display the pixmap."	| thePixmapGraphicsContext |	(pixmap notNil and: [pixmap isOpen])		ifTrue: [^self].	Object errorSignal handle: [:ex | ^self]		do: [self retainedMediumForBuffering].	thePixmapGraphicsContext := pixmap graphicsContext.	thePixmapGraphicsContext translateBy: self area origin negated; clippingRectangle: self area.	self component displayOn: thePixmapGraphicsContext</body><body package="ADvance2">newPixmapWithExtent: aPoint	^Pixmap		extent: aPoint		on: Screen default		initialize: false</body><body package="ADvance2">retainedMediumForBuffering	"Answer a retained medium (a Pixmap) to buffer my display actions."	| extent |	extent := self area extent.	(pixmap isNil or: [pixmap isOpen not])		ifTrue:			[pixmap := self newPixmapWithExtent: extent.			^pixmap].	pixmap extent = extent		ifFalse:			[pixmap close.			pixmap := self newPixmapWithExtent: extent].	^pixmap</body></methods><methods><class-id>ICC.ADvance.NVCachingWrapper</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	(aGraphicsContext clippingBounds intersects: self area)		ifFalse: [^self].	self displayInBufferOn: aGraphicsContext.	self pixmap isNil		ifTrue: [super displayOn: aGraphicsContext]		ifFalse: [pixmap displayOn: aGraphicsContext at: self area origin]</body><body package="ADvance2">invalidateRectangle: aRectangle repairNow: aBoolean forComponent: aComponent	"The receiver is invalidated - probably by its component. Flush caches."	self flushCaches.	^super		invalidateRectangle: aRectangle		repairNow: aBoolean		forComponent: aComponent</body></methods><methods><class-id>ICC.ADvance.NVCachingWrapper</class-id> <category>private-accessing</category><body package="ADvance2">pixmap	^pixmap</body><body package="ADvance2">pixmap: aPixmap	pixmap := aPixmap</body></methods><methods><class-id>ICC.ADvance.NVCachingWrapper</class-id> <category>updating</category><body package="ADvance2">updateForDisplay	self flushCaches.	super updateForDisplay</body></methods><methods><class-id>ICC.ADvance.NVCachingWrapper</class-id> <category>accessing</category><body package="ADvance2">component: aComponent	self flushCaches.	super component: aComponent</body><body package="ADvance2">container: aComponent	self flushCaches.	super container: aComponent</body><body package="ADvance2">isSelected: aBoolean	self flushCaches.	super isSelected: aBoolean</body></methods><methods><class-id>ICC.ADvance.NVCachingWrapper</class-id> <category>initialize-release</category><body package="ADvance2">release	pixmap isNil		ifFalse:			[pixmap close; release.			pixmap := nil].	super release</body></methods><methods><class-id>ICC.ADvance.NVCachingWrapper</class-id> <category>caching</category><body package="ADvance2">flushCaches	self pixmap: nil</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>accessing code</category><body package="ADvance2">addMessageSendTo: participantService 	| theMethodNode theStream theOriginalCodeToReturnLine theOriginalCodeReturnLineOnly |	theMethodNode := self methodNode.	self addModificationCommentTo: theMethodNode.	theOriginalCodeToReturnLine := theMethodNode formattedCode.	theOriginalCodeReturnLineOnly := ''.	(self methodNodeStatements isEmpty not and: [self methodNodeStatements last isReturnNode])		ifTrue: 			[theOriginalCodeReturnLineOnly := theOriginalCodeToReturnLine 				copyFrom: (theOriginalCodeToReturnLine lastIndexOf: $^)				to: theOriginalCodeToReturnLine size.			theOriginalCodeToReturnLine := theOriginalCodeToReturnLine 				copyFrom: 1 				to: (theOriginalCodeToReturnLine lastIndexOf: $^) - 1].	theStream := ReadWriteStream with: theOriginalCodeToReturnLine.	((self methodNodeStatements reject: [:each | each isReturnNode]) isEmpty not and: [theOriginalCodeReturnLineOnly isEmpty]) 		ifTrue: [theStream nextPut: $.]. "If there is a return, there must be a . at the end of the previous statement already."	participantService printSenderStubOn: theStream.	theOriginalCodeReturnLineOnly isEmpty ifFalse: [theStream crtab; nextPutAll: theOriginalCodeReturnLineOnly].	self adBasics systemOrganization		compile: theStream contents		classified: self protocol		for: self classOrMeta</body><body package="ADvance2">comment	| source parser allComments |	source := self primSourceCode.	source isNil ifTrue: [^String new].	parser := self classOrMeta parserClass new.	allComments := parser parseMethodComment: source setPattern: [:a | a].	allComments isEmpty ifTrue: [^String new].	^self stripTabs: allComments first</body><body package="ADvance2">commentWithTypeHeader: aBoolean	^aBoolean		ifTrue: [self comment]		ifFalse: [self stripTypeHeader: self comment]</body><body package="ADvance2">compiledMethod	^self classOrMeta compiledMethodAt: self selector</body><body package="ADvance2">decompiledMethodNode	"^&lt;MethodNode&gt; Decompile my code and answer a corresponding MethodNode."	| aClass |	aClass := self classOrMeta.	^aClass decompilerClass new		decompile: self selector		in: aClass		method: self compiledMethod</body><body package="ADvance2">fullSelector	"^&lt;String&gt;	Answer the selector with argument names."	| sourceCode parser |	(sourceCode := self sourceCode) isNil ifTrue: [^self selector].	(parser := classOrMeta parserClass new) parseSelector: sourceCode.	^self stripTrailingSeparators: (sourceCode copyFrom: 1 to: (parser endOfLastToken min: sourceCode size))</body><body package="ADvance2">methodNode	"^&lt;MethodNode&gt; Parse my code and answer a corresponding MethodNode."	| aClass |	aClass := self classOrMeta.	^aClass parserClass new		parse: self sourceCode readStream		class: aClass		noPattern: false		context: nil		notifying: nil		ifFail: nil</body><body package="ADvance2">sourceCode	| source |	source := self primSourceCode.	^source isNil		ifTrue: [self decompiledMethodNode decompiledCode]		ifFalse: [source]</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>private-accessing</category><body package="ADvance2">classOrMeta: aBehavior	classOrMeta := aBehavior</body><body package="ADvance2">primSourceCode	^self compiledMethod getSource</body><body package="ADvance2">selector: aSymbol	selector := aSymbol</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>accessing</category><body package="ADvance2">baseClass	^self isMeta		ifTrue: [self classOrMeta soleInstance]		ifFalse: [self classOrMeta]</body><body package="ADvance2">classAndFullSelector	^self classOrMeta fullName , '&gt;&gt;' , self fullSelector</body><body package="ADvance2">classAndSelector	^self classOrMeta fullName , '&gt;&gt;' , self selector</body><body package="ADvance2">classOrMeta	^classOrMeta</body><body package="ADvance2">extendedAndMappedSelector	^self extendedSelector collect: [:aChar | aChar == $_			ifTrue: [Character space]			ifFalse: [aChar]]</body><body package="ADvance2">extendedAndMappedSelectorText	"^&lt;Text&gt; Answer a text for the extended and mapped selector.	Emphasize the result with italic iff the receiver is abstract."	| selectorString |	selectorString := self extendedAndMappedSelector.	^self isAbstract		ifTrue: [Text string: selectorString emphasis: #italic]		ifFalse: [selectorString asText]</body><body package="ADvance2">extendedSelector	^self isMeta		ifTrue: ['$' , self selector]		ifFalse: [self selector]</body><body package="ADvance2">methodNodeStatements	"^&lt;OrderedCollection of: ...&gt;"	| methodNode body |	methodNode := self methodNode.	body := methodNode block body.	body isEmpty ifTrue: [^OrderedCollection new].	^body statements</body><body package="ADvance2">protocol	protocol isNil ifTrue: [protocol := self classOrMeta whichCategoryIncludesSelector: self selector].	^protocol</body><body package="ADvance2">protocolAndSelector	^self protocol , '&gt;' , self extendedSelector</body><body package="ADvance2">selector	^selector</body><body package="ADvance2">unqualifiedClassAndSelector	^self classOrMeta name , '&gt;&gt;' , self selector</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>comparing</category><body package="ADvance2">&lt;= aService	^self classAndSelector &lt;= aService classAndSelector</body><body package="ADvance2">= aService	^self classOrMeta = aService classOrMeta and: [self selector = aService selector]</body><body package="ADvance2">hash	^self classOrMeta hash + self selector hash</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>testing</category><body package="ADvance2">isAbstract	cachedIsAbstract isNil ifTrue: [cachedIsAbstract := self computeIsAbstract].	^cachedIsAbstract</body><body package="ADvance2">isMeta	^self classOrMeta isMeta</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>private</category><body package="ADvance2">computeIsAbstract	"^&lt;Boolean&gt; Answer whether the receiver sends the subclassResponsibility message."	| literal special method |	literal := 'subclassResponsibility' asSymbol.	special := CompiledCode specialSelectorIndexFor: literal.	method := self compiledMethod.	^(special &gt; 0 and: [method sendsSpecialSelector: special])		or: [method refersToLiteral: literal]</body><body package="ADvance2">methodNodeWithoutLastReturnNode	"^&lt;MethodNode&gt;	Answer my code as MethodNode with last return statement removed, if existing."	| methodNode body statements lastStatement |	methodNode := self methodNode.	body := methodNode block body.	body isEmpty ifTrue: [^methodNode].	statements := body statements.	lastStatement := statements last.	lastStatement isReturnNode ifTrue: [statements at: statements size put: lastStatement value].	^methodNode</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>utility</category><body package="ADvance2">addModificationCommentTo: aMethodNode	| oldComment newComment |	oldComment := aMethodNode comment.	newComment := 'This method is modified by ADvance.'.	(oldComment isNil or: [oldComment isEmpty])		ifTrue: [aMethodNode comment: (Array with: newComment)]		ifFalse: [oldComment first = newComment ifFalse: [aMethodNode comment: (Array with: newComment)						, oldComment]]</body><body package="ADvance2">stripTabs: aString	| aStream |	aStream := (String new: 80) writeStream.	aString do: [:c | c == Character tab ifFalse: [aStream nextPut: c]].	^aStream contents</body><body package="ADvance2">stripTrailingSeparators: aString	| size |	(size := aString size)		to: 1		by: -1		do: [:index | (aString at: index) isSeparator				ifTrue: [size := size - 1]				ifFalse: [^aString copyFrom: 1 to: size]].	^aString</body><body package="ADvance2">stripTypeHeader: rawComment	^(rawComment isEmpty or: [rawComment first ~~ $^])		ifTrue: [rawComment]		ifFalse: [rawComment readStream				 skipThrough: $&gt;;				 skipSeparators;				 upToEnd]</body></methods><methods><class-id>ICC.ADvance.AD2Service</class-id> <category>printing</category><body package="ADvance2">printOn: aStream	aStream nextPutAll: self classAndSelector</body><body package="ADvance2">printSenderStubOn: aStream	aStream crtab.	self baseClass printOn: aStream.	self isMeta ifFalse: [aStream nextPutAll: ' new'].	aStream space.	self selector do: [:aChar | aChar = $:			ifTrue: [aStream nextPutAll: ': nil ']			ifFalse: [aStream nextPut: aChar]].	(self compiledMethod numArgs = 1 and: [self selector last ~= $:])		ifTrue: [aStream nextPutAll: ' nil'].	aStream nextPut: $.</body><body package="ADvance2">unqualifiedPrintString	^self unqualifiedClassAndSelector</body></methods><methods><class-id>ICC.ADvance.AD2Service class</class-id> <category>instance creation</category><body package="ADvance2">baseClass: aClass extendedSelector: extendedSelector	| classOrMeta selector |	selector := (extendedSelector at: 1)				== $$				ifTrue:					[classOrMeta := aClass class.					extendedSelector copyFrom: 2 to: extendedSelector size]				ifFalse:					[classOrMeta := aClass.					extendedSelector].	^self class: classOrMeta selector: selector</body><body package="ADvance2">class: aClassOrMeta selector: selector	^self new		 classOrMeta: aClassOrMeta;		 selector: selector asSymbol;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2Service class</class-id> <category>sort blocks</category><body package="ADvance2">extendedSelectorsSortBlock	^[:service1 :service2 | service1 extendedSelector &lt;= service2 extendedSelector]</body><body package="ADvance2">protocolAndSelectorSortBlock	^[:service1 :service2 | service1 protocolAndSelector &lt;= service2 protocolAndSelector]</body></methods><methods><class-id>ICC.ADvance.IccHTMLTitle</class-id> <category>constants</category><body package="ADvance2">endOfSelf	"&lt;String&gt;"	^'&lt;/TITLE&gt;'</body><body package="ADvance2">startOfSelf	"&lt;String&gt;"	^'&lt;TITLE&gt;'</body></methods><methods><class-id>ICC.ADvance.IccHTMLTitle</class-id> <category>accessing</category><body package="ADvance2">title	"&lt;HTMLString&gt;"</body><body package="ADvance2">title: aHTMLString	"&lt;&gt;"</body></methods><methods><class-id>ICC.ADvance.AD2Basics class</class-id> <category>fileIn/Out</category><body package="ADvance2">prerequisitesForLoading	"List those classes that must be filed, BOSSed or load into the system	before I can be loaded."	^super prerequisitesForLoading		 add: self systemOrganizationClass;		 add: self systemEnvironmentClass;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2Basics class</class-id> <category>accessing</category><body package="ADvance2">defaultProtocol	^#'ADvance'</body><body package="ADvance2">systemEnvironment	^self systemEnvironmentClass default</body><body package="ADvance2">systemOrganization	^self systemOrganizationClass default</body></methods><methods><class-id>ICC.ADvance.AD2Basics class</class-id> <category>implementation classes</category><body package="ADvance2">systemEnvironmentClass	^AD2SystemEnvironment</body><body package="ADvance2">systemOrganizationClass	^AD2SystemOrganization</body></methods><methods><class-id>ICC.ADvance.AD2Basics class</class-id> <category>load-unload</category><body package="ADvance2">preUnloadActionFor: aParcel	"This is called when package or parcel becomes unloaded."	self systemEnvironmentClass uninitialize.	self systemOrganizationClass uninitialize.	AD2ApplicationModel uninitialize</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog</class-id> <category>aspects</category><body package="ADvance2">addScript	^self class addScript</body><body package="ADvance2">initiatorServices	^initiatorServices</body><body package="ADvance2">participantServices	^participantServices</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog</class-id> <category>accessing</category><body package="ADvance2">initiator	^initiator</body><body package="ADvance2">initiator: className	initiator := className</body><body package="ADvance2">participant	^participant</body><body package="ADvance2">participant: className	participant := className</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog</class-id> <category>changing</category><body package="ADvance2">changedSelection	self iccEnable: (self initiatorServices selection notNil and: [self participantServices selection notNil])		group: #(#okButton)</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog</class-id> <category>interface opening</category><body package="ADvance2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	#(#initiatorServices #participantServices) do: [:each | (aBuilder componentAt: each) widget displayStringSelector: #extendedSelector]</body><body package="ADvance2">preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder labelAt: #initiator put: ('Initiator: &lt;1s&gt;' expandMacrosWith: self initiator).	aBuilder labelAt: #participant put: ('Participant: &lt;1s&gt;' expandMacrosWith: self participant)</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	(initiatorServices := SelectionInList new) selectionIndexHolder onChangeSend: #changedSelection to: self.	(participantServices := SelectionInList new) selectionIndexHolder onChangeSend: #changedSelection to: self</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog class</class-id> <category>aspects</category><body package="ADvance2">addScript	^AddScript</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	AddScript := true asValue</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarGenerator</class-id> <category>private</category><body package="ADvance2">addActionButtonSpecWith: aToolbarItemSpec	"Add an ActionButtonSpec for aToolBarItemSpec to tool bar."	aToolbarItemSpec hasButton ifTrue: [		self toolBarSpec addButtonSpec: ((AD2ToolbarButtonSpec				model: aToolbarItemSpec model				label: (aToolbarItemSpec image isNil						ifTrue: [aToolbarItemSpec text]						ifFalse: [aToolbarItemSpec visualId])				layout: (aToolbarItemSpec image notNil						ifTrue: [nil]						ifFalse: [self buttonExtentFor: aToolbarItemSpec]))					name: aToolbarItemSpec buttonId;					hasCharacterOrientedLabel: aToolbarItemSpec image isNil;					helpText: (self source helpTextFor: aToolbarItemSpec buttonId);					tabable: false;				 yourself)]</body><body package="ADvance2">buttonExtentFor: aToolBarItemSpec	"^&lt;Rectangle&gt;	Answer the extent of the ToolBarButton specified by aToolBarItemSpec."	^0 @ 0 extent: (self builder policy measureActionButtonLabel: aToolBarItemSpec label) extent x * 1.1 @ 0</body><body package="ADvance2">itemAndButtonSpecWith: aMenu menuIndex: anIndex	| anItem aSymbol aBlock aToolbarItemSpec |	anItem := aMenu menuItemAt: anIndex.	(aSymbol := aMenu valueAt: anIndex) isNil ifTrue: [^self].	aToolbarItemSpec := self toolBarItemSpecFor: aSymbol menuItem: anItem.	aBlock := aToolbarItemSpec model.	aMenu valueAt: anIndex put: aBlock.	self builder componentAt: aToolbarItemSpec itemId put: anItem.	self addActionButtonSpecWith: aToolbarItemSpec.	self setApplicationIconFor: aToolbarItemSpec.	self setMenuLabelImageFor: aToolbarItemSpec menuItem: anItem</body><body package="ADvance2">menuComponentSymbolFor: aMenuItem	^(aMenuItem label , 'Menu') asSymbol</body><body package="ADvance2">setApplicationIconFor: aToolBarItemSpec	"If the applications button has an image oriented label add this image to	aBuilder's visuals dictionary."	aToolBarItemSpec image notNil ifTrue: [self builder visualAt: aToolBarItemSpec visualId put: aToolBarItemSpec image]</body><body package="ADvance2">setMenuLabelImageFor: aToolBarItemSpec menuItem: aMenuItem	"If specified by the receiver (global) and aToolBarItemsSpec (local), add a menu	label image to aMenuItem."	(self menuLabelsHaveImages and: [aToolBarItemSpec image notNil])		ifTrue: [aMenuItem labelImage: aToolBarItemSpec image]</body><body package="ADvance2">toolBarItemSpecFor: selector menuItem: aMenuItem	"Answer a ToolbarItemSpec for aSymbol."	^(self itemSpecs at: selector ifAbsent: [AD2ToolbarItem new])		method: selector;		text: aMenuItem label;		yourself</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarGenerator</class-id> <category>accessing</category><body package="ADvance2">builder	^builder</body><body package="ADvance2">builder: aBuilder	builder := aBuilder</body><body package="ADvance2">itemSpecs	^itemSpecs</body><body package="ADvance2">itemSpecs: aDictionary	itemSpecs := aDictionary</body><body package="ADvance2">menu	^menu</body><body package="ADvance2">menu: aMenu	menu := aMenu</body><body package="ADvance2">menuLabelsHaveImages	^menuLabelsHaveImages</body><body package="ADvance2">menuLabelsHaveImages: aBoolean	menuLabelsHaveImages := aBoolean</body><body package="ADvance2">source	^source</body><body package="ADvance2">source: anObject	source := anObject</body><body package="ADvance2">toolBarSpec	^toolBarSpec</body><body package="ADvance2">toolBarSpec: aToolBarSpec	toolBarSpec := aToolBarSpec</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarGenerator</class-id> <category>menu traverse</category><body package="ADvance2">traverseMenu: aMenu	1 to: aMenu numberOfItems do: [:anIndex | self traverseMenuItem: aMenu itemIndex: anIndex]</body><body package="ADvance2">traverseMenuAndGenerateToolBar	self menu menuItems		do:			[:aMenuItem |			| tmpOrigin |			tmpOrigin := self toolBarSpec origin.			self traverseMenu: aMenuItem submenu.			self builder componentAt: (self menuComponentSymbolFor: aMenuItem)				put: aMenuItem.			tmpOrigin ~= self toolBarSpec origin ifTrue: [self toolBarSpec addButtonSpace]]</body><body package="ADvance2">traverseMenuItem: aMenu itemIndex: anIndex	| anItem |	anItem := aMenu menuItemAt: anIndex.	anItem hasSubmenu		ifTrue: [self traverseMenu: anItem submenu]		ifFalse: [self itemAndButtonSpecWith: aMenu menuIndex: anIndex]</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarGenerator class</class-id> <category>documentation</category><body package="ADvance2">menuBar	"self toolbarGenerator menu"</body><body package="ADvance2">postBuildWith: aBuilder	"super postBuildWith: aBuilder.	aBuilder add: self toolbarGenerator toolBarSpec"</body><body package="ADvance2">preBuildWith: aBuilder	"super preBuildWith: aBuilder.	self toolbarGenerator: (AD2ToolbarGenerator			for: self			menu: self class mainMenu			itemSpecs: self class itemSpecs			toolbarPolicy: AD2ToolbarPolicy smallButtons			withMenuLabels: true			builder: aBuilder).	self toolbarGenerator traverseMenuAndGenerateToolBar"</body></methods><methods><class-id>ICC.ADvance.AD2ToolbarGenerator class</class-id> <category>instance creation</category><body package="ADvance2">for: anObject menu: aMenu itemSpecs: aDictionary toolbarPolicy: aToolbarPolicy withMenuLabels: aBoolean builder: aBuilder	^self new		 source: anObject;		 menu: aMenu;		 itemSpecs: aDictionary;		 toolBarSpec: (AD2ToolbarSpec withPolicy: aToolbarPolicy);		 menuLabelsHaveImages: aBoolean;		 builder: aBuilder;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>enumerating</category><body package="ADvance2">allClassesDo: aBlock	self classes do: [:each | (self environment includesKey: each fullName)			ifTrue: [aBlock value: each]]</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>private-accessing</category><body package="ADvance2">classes	^classes</body><body package="ADvance2">classes: aSetOfClasses	classes := aSetOfClasses</body><body package="ADvance2">environment	^environment</body><body package="ADvance2">environment: anEnvironment	environment := anEnvironment</body><body package="ADvance2">privateIncludesKey: className	^self classNames includes: className</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>comparing</category><body package="ADvance2">= aClassEnvironment	^self classNames asSortedCollection = aClassEnvironment classNames asSortedCollection</body><body package="ADvance2">hash	^self classes hash</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>testing</category><body package="ADvance2">includes: aClass	"Answer whether aClass is one of the receiver's elements."	^(self classes includes: aClass)		and: [super includes: aClass]</body><body package="ADvance2">includesKey: className	"Answer whether a class named className is one of the receiver's elements."	^(self at: className ifAbsent: [nil]) notNil</body><body package="ADvance2">isEmpty	^self classes isEmpty</body><body package="ADvance2">isSystem	^false</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>accessing</category><body package="ADvance2">at: aSymbol ifAbsent: aBlock	(self privateIncludesKey: aSymbol)		ifFalse: [^aBlock value].	^self environment at: aSymbol ifAbsent: aBlock</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>consistency</category><body package="ADvance2">cleanse	"Cleanse the environemnt. Remove any class that is no longer in the system"	self classes: (self classes select: [:each | self environment includes: each])</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>copying</category><body package="ADvance2">postCopy	super postCopy.	classes := classes copy</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>class names</category><body package="ADvance2">classNames	^self classes collect: [:each | each fullName]</body><body package="ADvance2">classNames: aCollection	self classes: (aCollection inject: IdentitySet new			into:				[:set :each |				| class |				class := self environment at: each ifAbsent: [nil].				class isNil ifFalse: [set add: class].				set])</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>adding-removing</category><body package="ADvance2">addClass: aClass	self classes add: aClass</body><body package="ADvance2">addClassName: className	| aClass |	(aClass := self environment at: className ifAbsent: [nil]) isNil ifTrue: [^self].	self addClass: aClass</body><body package="ADvance2">removeClass: aClass	self removeClass: aClass ifAbsent: []</body><body package="ADvance2">removeClass: aClass ifAbsent: aBlock	self classes remove: aClass ifAbsent: aBlock</body><body package="ADvance2">removeClassName: className ifAbsent: aBlock	| aClass |	aClass := self environment at: className ifAbsent: [nil].	aClass isNil ifTrue: [^self].	self removeClass: aClass ifAbsent: aBlock</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	self classes: IdentitySet new</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment class</class-id> <category>fileIn/Out</category><body package="ADvance2">prerequisitesForLoading	"List those classes that must be filed, BOSSed or load into the system	before I can be loaded."	^super prerequisitesForLoading		 add: AD2SystemEnvironment;		 yourself</body></methods><methods><class-id>ICC.ADvance.AD2ClassEnvironment class</class-id> <category>instance creation</category><body package="ADvance2">new	^self on: self adBasics systemEnvironment</body><body package="ADvance2">on: anEnvironment	^self basicNew initialize; environment: anEnvironment; yourself</body></methods><methods><class-id>ICC.ADvance.AD2TextPart</class-id> <category>updating</category><body package="ADvance2">update: aSymbol with: aParameter	(aSymbol == #newString or: [aSymbol == #location])		ifTrue:			[self invalidate.			self updateForDisplay.			^self invalidate].	aSymbol == #zoom		ifTrue:			[self invalidate.			self updateForDisplayScaled: aParameter.			^self invalidate].	super update: aSymbol with: aParameter</body><body package="ADvance2">updateForDisplay	self updateForDisplayScaled: self editor scale</body><body package="ADvance2">updateForDisplayScaled: scale	| text |	text := self model text.	self area: ((self model location extent: text unscaledWidth @ text unscaledHeight)			scaledBy: scale)</body></methods><methods><class-id>ICC.ADvance.AD2TextPart</class-id> <category>testing</category><body package="ADvance2">isMovable	^true</body></methods><methods><class-id>ICC.ADvance.AD2TextPart</class-id> <category>compatibility</category><body package="ADvance2">beMovedBy: vector	"I am moved by aVector and do the display bookkeeping."	self model update: #location with: self model location + (self editor pointFromView: vector)</body></methods><methods><class-id>ICC.ADvance.AD2TextPart</class-id> <category>displaying</category><body package="ADvance2">displayOn: aGraphicsContext	self isSelected		ifTrue:			[aGraphicsContext paint: SymbolicPaint selectionBackground.			aGraphicsContext displayRectangle: (self area expandedBy: 1 @ 0).			aGraphicsContext paint: SymbolicPaint selectionForeground]		ifFalse: [aGraphicsContext paint: SymbolicPaint foreground].	self model text displayOn: aGraphicsContext at: self area origin</body><body package="ADvance2">displayOnPrinter: aGraphicsContext	aGraphicsContext paint: SymbolicPaint foreground.	self model text displayOnPrinter: aGraphicsContext at: self area origin</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment</class-id> <category>private</category><body package="ADvance2">filterAtSelector: aSelector for: aClass	"^&lt;AD2MethodFilter&gt;"	^(aClass perform: aSelector) decodeAsLiteralArray baseClass: aClass; yourself</body><body package="ADvance2">filterSelectorForId: anInteger	"^&lt;Symbol&gt; Answer the selector for aFilter's literal array encoding method."	^(self selectorPrefix , anInteger printString) asSymbol</body><body package="ADvance2">filtersFor: aClass	"^&lt;Array of: AD2StoredFilter&gt;"	^(self prefixedFilterIdsFor: aClass)		collect: [:each | self filterAtSelector: each for: aClass]</body><body package="ADvance2">prefixedFilterIdsFor: aClass	"^&lt;SortedCollection of: Symbol&gt;"	^(self adBasics systemOrganization selectorsMatching: self selectorPrefix , '*' for: aClass) asSortedCollection</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment</class-id> <category>testing</category><body package="ADvance2">includesKey: aFilterKey	^(self atKey: aFilterKey ifAbsent: [nil]) notNil</body><body package="ADvance2">includesName: aString	^(self at: aString ifAbsent: [nil]) notNil</body><body package="ADvance2">isFilterClass: aClass	"Check and answer whether aClass bears filters."	^aClass class includesSelector: self filterTestSelector</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment</class-id> <category>enumerating</category><body package="ADvance2">allFilterClassesDo: aBlock	self adBasics systemEnvironment allClassesDo: [:each | (self isFilterClass: each)			ifTrue: [aBlock value: each]]</body><body package="ADvance2">allFiltersDo: aBlock	self allFilterClassesDo: [:eachClass | (self filtersFor: eachClass)			do: [:eachFilter | aBlock value: eachFilter]]</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment</class-id> <category>accessing</category><body package="ADvance2">at: aString	^self at: aString ifAbsent: [Root keyNotFoundError: aString]</body><body package="ADvance2">at: aString ifAbsent: aBlock	^self filters detect: [:each | each name = aString]		ifNone: aBlock</body><body package="ADvance2">atKey: aFilterKey ifAbsent: aBlock	| baseClass id selector |	(aFilterKey isNil or: [aFilterKey key isNil])		ifTrue: [^aBlock value].	baseClass := aFilterKey key.	id := aFilterKey value.	selector := self filterSelectorForId: id.	^((self prefixedFilterIdsFor: baseClass)		includes: selector)		ifTrue: [self filterAtSelector: selector for: baseClass]		ifFalse: [aBlock value]</body><body package="ADvance2">filterNames	^(self filters collect: [:each | each name]) asSortedCollection</body><body package="ADvance2">filters	"^&lt;Array of: AD2StoredFilter&gt;"	| result |	result := OrderedCollection new.	self allFiltersDo: [:each | result add: each].	^result asArray</body><body package="ADvance2">getEmptyFilter	"Answer an empty filter, i.e. that filters no service."	^AD2StructureFilter new		 isFilteringAccessors: false;		 isFilteringOverriddenMethods: false;		 isFilteringPrivateMethods: false;		 isFilteringClassMethods: false;		 isFilteringInstVars: false;		 isFilteringClassInstVars: false;		 isFilteringSharedVars: false;		 setFilteredInstProtocols: Array new;		 setFilteredInstMethods: Array new;		 setFilteredClassProtocols: Array new;		 setFilteredClassMethods: Array new;		 setFilteredInstVars: Array new;		 setFilteredClassInstVars: Array new;		 setFilteredSharedVars: Array new;		 yourself</body><body package="ADvance2">safeAtKey: aFilterKey	^self atKey: aFilterKey ifAbsent: [self advance structureFilterClass preset]</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment</class-id> <category>constants</category><body package="ADvance2">defaultFilterClass	^AD2Filters</body><body package="ADvance2">filterTestSelector	^#markedAsFilterClass</body><body package="ADvance2">selectorPrefix	^#'ad2filter_'</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment</class-id> <category>adding-removing</category><body package="ADvance2">remove: aFilter	aFilter removeIn: self</body><body package="ADvance2">save: aFilter	aFilter saveIn: self</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment class</class-id> <category>class initialization</category><body package="ADvance2">initialize	"self initialize"	self initializeDefault</body><body package="ADvance2">obsolete	"This class is being removed from the system. Reset the class variables."	self uninitialize.	super obsolete</body><body package="ADvance2">uninitialize	Default := nil</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment class</class-id> <category>private initialization</category><body package="ADvance2">initializeDefault	Default := self new</body></methods><methods><class-id>ICC.ADvance.AD2FilterEnvironment class</class-id> <category>accessing</category><body package="ADvance2">default	"Answers the value of the shared variable. Lazy initialization is 	implemented, because class initialize is not always involved 	during reloading."	Default isNil ifTrue: [self initializeDefault].	^Default</body></methods><methods><class-id>ICC.ADvance.NVScrollWrapper</class-id> <category>access - scrollbars</category><body package="ADvance2">scroll: aPoint	"Scroll the receiver by aPoint. Since my component, ODEditorView, might wish to	recalculate preferredBounds, check if we scrolled to an end the first time"	| maxAmount minAmount amount x y flushX flushY |	maxAmount :=self scrollOffset  max: 0@0.	minAmount := self scrollOffset + self visibleExtent - self scrollableExtent min: 0@0.	amount := ((aPoint min: maxAmount) max: minAmount) truncateTo: self scrollGrid.	amount ~= (0@0) ifTrue: [self scrollBy: amount negated].	flushX := ((x := amount x) ~= lastAmount x) and: [(x = maxAmount x) | (x = minAmount x)].	flushY := ((y := amount y) ~= lastAmount y) and: [(y = maxAmount y) | (y = minAmount y)].	flushX | flushY ifTrue: [component flushPreferredBounds; invalidate].	lastAmount := amount.	^amount</body><body package="ADvance2">scrollOffset	"Answer the offset the receiver has scrolled."	^self translation negated - self scrollableBounds origin</body><body package="ADvance2">visibleExtent	"Answer the extent of the receiver's clipping box. Exactly!"	^self compositionBounds extent</body></methods><methods><class-id>ICC.ADvance.NVScrollWrapper</class-id> <category>private - scrolling</category><body package="ADvance2">scrollBy: point	"Scroll the receiver by the point. Negative scrollable origin allowed"	| width grid height |	grid := self scrollGrid.	width := point x max: self translation x + self scrollableBounds origin x.	width := (width abs between: 0 and: grid x)				ifTrue: [width sign * grid x]				ifFalse: [width roundTo: grid x].	height := point y max: self translation y + self scrollableBounds origin y.	height := (height abs between: 0 and: grid y)				ifTrue: [height sign * grid y]				ifFalse: [height roundTo: grid y].	self setOrigin: self translation - (width @ height).	self		scrollBy: width @ height		on: self graphicsContext		grid: grid.	self updateControls</body><body package="ADvance2">scrollableBounds	"Answer the area in which scrolling is allowed"	^component preferredBounds origin extent: (component preferredBounds extent max: 1 @ 1).</body><body package="ADvance2">scrollableExtent	"Answer the extent of the receiver's display object bounding box."	^self scrollableBounds extent</body><body package="ADvance2">updateControls	"Overrides the inherited method because we don't need a scroll 	position validation here."	self changed: #scrollOffset</body></methods><methods><class-id>ICC.ADvance.NVScrollWrapper</class-id> <category>initialize-release</category><body package="ADvance2">initialize	super initialize.	lastAmount := Point zero.	origin grid: 10 @ 10</body></methods><methods><class-id>UI.ScheduledWindow</class-id> <category>AD2-Core extensions</category><body package="ADvance2">ad2IsApplicationWindow	^true</body></methods><methods><class-id>Kernel.GeneralNameSpace</class-id> <category>Advance</category><body package="ADvance2">iccAt: aKey	"Look for aKey in this namespace only."	self bindingsDo: [:binding |		binding key == aKey ifTrue: [			^binding value]].	^nil</body><body package="ADvance2">iccAt: aKey ifAbsent: failBlock	"Look for aKey in this namespace only."	self bindingsDo: [:binding |		binding key == aKey ifTrue: [			^binding value]].	^failBlock value</body></methods><methods><class-id>Core.Point</class-id> <category>AD2-Core extensions</category><body package="ADvance2">ad2RotateBy: anAngle	"Answer the result of rotating the receiver by anAngle radians around the origin."	^self x * anAngle cos - (self y * anAngle sin) @ (self y * anAngle cos + (self x * anAngle sin))</body></methods><methods><class-id>Core.Behavior</class-id> <category>AD2-Core extensions</category><body package="ADvance2">advanceSubject	^self advanceSubjectSpec decodeAsLiteralArray baseClass: self</body><body package="ADvance2">directRelatedClasses	"^&lt;Set of: Class&gt;	Return a set containing my superclass and my related classes.	Redesign note: Adding subclasses would blow up the set	of transitive related classes via super and subs."	| aSet |	(aSet := Set new: 10) addAll: (self clientRelations collect: [:aClientRelation | aClientRelation roleClass]).	self superclass isNil ifFalse: [aSet add: self superclass].	^aSet</body><body package="ADvance2">isADvanceSubject	^(self class includesSelector: #markedAsSubjectClass)		and: [(self class includesSelector: #markedAsSystemSubject) not or: [(self class compiledMethodAt: #markedAsSystemSubject) hasSource]]</body><body package="ADvance2">transitiveRelatedClassesWithDepth: anInteger	"Returns a set of all classesdirectly or indirectly (with depth anInteger) related to self ."	| aSet |	anInteger isZero ifTrue: [^Array with: self].	(aSet := Set new: 20) add: self.	self directRelatedClasses do: [:aClass | aSet addAll: (aClass transitiveRelatedClassesWithDepth: anInteger - 1)].	^aSet</body></methods><methods><class-id>Graphics.LineSegment</class-id> <category>AD2-Core extensions</category><body package="ADvance2">ad2ClippedAt: aRectangle	"Answer a LineSegment that is clipped for aRectangle.	Use the method of Liang &amp; Barsky (see Fellner, pp. 170)."	| p q dx dy t1 t2 x1 y1 |	x1 := self start x.	dx := self end x - x1.	y1 := self start y.	dy := self end y - y1.	p := Array				with: dx negated				with: dx				with: dy negated				with: dy.	q := Array				with: x1 - aRectangle left				with: aRectangle right - x1				with: y1 - aRectangle top				with: aRectangle bottom - y1.	t1 := 0.	t2 := 1.	1 to: 4		do:			[:i |			"Compute fractions only once."			(p at: i)				&lt; 0 ifTrue: [t1 := t1 max: (q at: i)								/ (p at: i)].			(p at: i)				&gt; 0 ifTrue: [t2 := t2 min: (q at: i)								/ (p at: i)]].	t1 &gt; t2 ifTrue: [			"Line can not be clipped."^self].	^LineSegment from: (t1 &gt; 0			ifTrue: [x1 + (dx * t1) @ (y1 + (dy * t1))]			ifFalse: [self end])		to: (t2 &gt; t1				ifTrue: [x1 + (dx * t2) @ (y1 + (dy * t2))]				ifFalse: [self start])</body><body package="ADvance2">ad2IsNearTo: aPoint	"^&lt;Boolean&gt; Answer whether aPoint is near to the receiver."	| p1 p2 d v vN beta |	p1 := self start.	p2 := self end.	(p1 x = p2 x or: [p1 y = p2 y])		ifTrue: [^(self bounds expandedBy: 4 @ 4)				containsPoint: aPoint].	d := aPoint - p1.	v := p2 - p1.	Point zero = v ifTrue: [^d r &lt;= 4].	vN := v normal.	beta := d y * v x - (d x * v y) / (vN y * v x - (vN x * v y)).	^beta abs &lt;= 4</body></methods><methods><class-id>Refactory.Browser.AbstractRefactoringBrowser</class-id> <category>accessing</category><body package="ADvance2">toolSetsList	^toolsetsList</body></methods><methods><class-id>Core.Object class</class-id> <category>ADvance2-Extensions</category><body package="ADvance2">ad2ClassInfo	"This class info is almost a copy of parts of the class comment to bypass type checking	problems (the comment for static EventHandlers is added)."^'Class Variables:	ControlInterruptedSignal	&lt;Signal&gt; parent of signals interrupting control (UserInterruptSignal, HaltSignal, NotifySignal)							The parameter of control-interrupted exceptions should be the context where the interrupt occurred.	DependentsFields	&lt;IdentityDictionary&gt; of associations, where each association pair						is an object and an ordered collection of objects that depend on that object	EventHandlers &lt;IdentityDictionary&gt; 	Missing comment entry added for ADvance.	ErrorSignal			&lt;Signal&gt; Error -	HaltSignal			&lt;Signal&gt; raised by Object&gt;&gt;halt and Object&gt;&gt;halt:	IndexNotFoundSignal	&lt;Signal&gt; Index not found	InformationSignal	&lt;Signal&gt; Information -	MessageNotUnderstoodSignal		&lt;Signal&gt; Message not understood	NonIntegerIndexSignal		&lt;Signal&gt; Non integer index:	NotFoundSignal		&lt;Signal&gt; Element not Found	NotifySignal		&lt;Signal&gt; Notifier	SubclassResponsibilitySignal	&lt;Signal&gt; Subclass responsibility	SubscriptOutOfBoundsSignal	&lt;Signal&gt; Subscript out of bounds:	UserInterruptSignal		&lt;Signal&gt; User Interrupt'</body></methods><methods><class-id>Core.Object</class-id> <category>AD2-Basic extensions</category><body package="ADvance2">adBasics	^ICC.ADvance.AD2Basics</body><body package="ADvance2">adDialog	^ICC.ADvance.AD2Dialog</body><body package="ADvance2">adUtils	^ICC.ADvance.AD2Utils</body></methods><methods><class-id>Core.Object</class-id> <category>AD2-Core extensions</category><body package="ADvance2">advance	^ICC.ADvance.ADvance</body><body package="ADvance2">isADvanceApplicationModel	^false</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>ADvance</category><body package="ADvance2">advanceIcon	^ICC.ADvance.AD2Workbench visualLauncherIcon</body></methods><methods><class-id>Graphics.Image</class-id> <category>AD2-Basic extensions</category><body package="ADvance2">ad2CollapsedTo8BitsOrLess	self bitsPerPixel &lt;= 8 ifTrue: [^self].	Screen default colorDepth = 8 ifTrue: [^self asRetainedMedium asImage].	^self convertToPalette: (FixedPalette			redShift: 4			redMask: 7			greenShift: 2			greenMask: 3			blueShift: 0			blueMask: 3)</body></methods><methods><class-id>Graphics.Polyline</class-id> <category>AD2-Core extensions</category><body package="ADvance2">ad2IsNearTo: aPoint	"^&lt;Boolean&gt; Answer whether aPoint is close to my line segments."	self edgesDo: [:edge1 :edge2 | ((LineSegment from: edge1 to: edge2)			ad2IsNearTo: aPoint)			ifTrue: [^true]].	^false</body></methods><methods><class-id>ICC.ADvance.AD2OpenDiagramDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Open Diagram'			#min: #(#{Core.Point} 462 309 )			#max: #(#{Core.Point} 462 309 )			#bounds: #(#{Graphics.Rectangle} 584 516 1046 832 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 6 0 28 0 0 1 )					#label: 'Subjects:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 3 0.5 28 0 0 1 )					#label: 'Diagrams:' )				#(#{UI.TreeViewSpec}					#layout: #(#{Graphics.LayoutFrame} 3 0.5 28 0 -6 1 -38 1 )					#name: #diagramTree					#flags: 15					#model: #diagramTree					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#doubleClickSelector: #doAccept )					#useModifierKeys: true					#selectionType: #highlight					#displayStringSelector: #name					#useIcons: #other					#iconSelectors: #(#childrenImage ) )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -181 1 -30 1 -96 1 -7 1 )					#name: #okButton					#flags: 40					#model: #doAccept					#label: 'Open'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -91 1 -30 1 -6 1 -7 1 )					#model: #doCancel					#label: 'Cancel' )				#(#{UI.TreeViewSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 28 0 -3 0.5 -38 1 )					#name: #subjectTree					#flags: 15					#model: #subjectTree					#useModifierKeys: true					#selectionType: #highlight					#displayStringSelector: #name					#useIcons: #folder ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog class</class-id> <category>interface specs</category><body package="ADvance2">colorsSpec	"Tools.UIPainter new openOnClass: self andSelector: #colorsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 235 168 ) 			#max: #(#{Core.Point} 394 305 ) 			#bounds: #(#{Graphics.Rectangle} 640 513 1034 818 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 115 0 0 1 ) 					#name: #concreteClassLabel 					#label: 'Concrete:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0.5 192 0 0 1 ) 					#name: #relationsLabel 					#label: 'Relations:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 192 0 0 1 ) 					#name: #inheritanceLabel 					#label: 'Inheritance:' ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 93 0 -89 0.5 115 0 ) 					#name: #concreteClassColorRegion 					#lineWidth: 1 ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 170 0 -89 0.5 192 0 ) 					#name: #inheritanceColorRegion 					#lineWidth: 1 ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0.5 171 0 -89 1 193 0 ) 					#name: #relationColorRegion 					#lineWidth: 1 ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 16 0 -22 1 60 0 ) 					#flags: 4 					#model: #colorText 					#isReadOnly: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 0.5 92 0 -9 0.5 115 0 ) 					#name: #chooseConcreteClassColorButton 					#model: #chooseConcreteClassColor 					#label: 'Select...' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 1 170 0 -9 1 193 0 ) 					#name: #chooseRelationColorButton 					#model: #chooseRelationColor 					#label: 'Select...' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 0.5 170 0 -9 0.5 193 0 ) 					#name: #chooseInheritanceColorButton 					#model: #chooseInheritanceColor 					#label: 'Select...' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 35 227 ) 					#name: #coloredPrintingCheckBox 					#model: #coloredPrinting 					#label: 'Use colors for printing' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 204 0 -3 1 269 0 ) 					#name: #printColorsGroupBox 					#label: 'Print colors' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 147 0 0 1 ) 					#name: #abstractClassLabel 					#label: 'Abstract:' ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 125 0 -89 0.5 147 0 ) 					#name: #abstractClassColorRegion 					#lineWidth: 1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 0.5 124 0 -9 0.5 147 0 ) 					#name: #chooseAbstractClassColorButton 					#model: #chooseAbstractClassColor 					#label: 'Select...' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0.5 115 0 0 1 ) 					#name: #subjectClassLabel 					#label: 'Subject:' ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0.5 93 0 -89 1 115 0 ) 					#name: #subjectClassColorRegion 					#lineWidth: 1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 1 92 0 -9 1 115 0 ) 					#name: #chooseSubjectClassColorButton 					#model: #chooseSubjectClassColor 					#label: 'Select...' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 4 0.5 147 0 0 1 ) 					#name: #browserSelectedClassLabel 					#label: 'RB Selection:' ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0.5 125 0 -89 1 147 0 ) 					#name: #browserSelectedClassColorRegion 					#lineWidth: 1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 1 124 0 -9 1 147 0 ) 					#name: #chooseBrowserSelectedClassColorButton 					#model: #chooseBrowserSelectedClassColor 					#label: 'Select...' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 69 0 -3 1 155 0 ) 					#name: #GroupBox1 					#label: 'Classes' ) ) ) )</body><body package="ADvance2">generalSpec	"UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' '			#min: #(#{Core.Point} 438 325 )			#max: #(#{Core.Point} 438 325 )			#bounds: #(#{Graphics.Rectangle} 668 506 1106 831 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 140 0 -20 1 200 0 )					#label: 'Subject expansion' )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 60 0 -20 1 120 0 )					#label: 'Grid' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 32 87 )					#model: #showGridOnStartup					#label: 'Show grid on Startup sized' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 240 86 282 109 )					#model: #startupGridSize					#type: #number )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 285 87 )					#label: 'pixels' )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 16 0 16 1 60 0 )					#flags: 4					#model: #generalText					#isReadOnly: true )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 32 165 )					#label: 'Expand in' )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 122 167 )					#model: #subjectExpansionType					#label: 'this painter'					#select: #thisPainter )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 240 167 )					#model: #subjectExpansionType					#label: 'new painter'					#select: #newPainter ) ) ) )</body><body package="ADvance2">layoutSpec	"UIPainter new openOnClass: self andSelector: #layoutSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Unlabeled Canvas'			#min: #(#{Core.Point} 342 231 )			#max: #(#{Core.Point} 384 307 )			#bounds: #(#{Graphics.Rectangle} 678 478 1062 785 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 60 0 -20 1 120 0 )					#label: 'Relation layout' )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 35 86 )					#model: #relationLayoutType					#label: 'Grid lines'					#select: #gridded )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 144 86 )					#model: #relationLayoutType					#label: 'Straight lines'					#select: #straight )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 135 0 -20 1 195 0 )					#label: 'Inheritance layout' )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 35 161 )					#model: #inheritanceLayoutType					#label: 'Grid lines'					#select: #gridded )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 144 161 )					#model: #inheritanceLayoutType					#label: 'Straight lines'					#select: #straight )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 16 0 -16 1 60 0 )					#flags: 4					#model: #layoutText					#isReadOnly: true ) ) ) )</body><body package="ADvance2">shortcutsSpec	"UIPainter new openOnClass: self andSelector: #shortcutsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' '			#min: #(#{Core.Point} 394 298 )			#max: #(#{Core.Point} 431 298 )			#bounds: #(#{Graphics.Rectangle} 717 478 1148 776 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 82 0 -27 1 105 0 )					#model: #classPlainDoubleClickAction					#type: #string					#comboList: #classDoubleClickActionList )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 42 0 106 0 0 1 )					#label: 'Plain:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 42 0 134 0 0 1 )					#label: 'Shift:' )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 110 0 -27 1 133 0 )					#model: #classShiftDoubleClickAction					#type: #string					#comboList: #classDoubleClickActionList )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 42 0 162 0 0 1 )					#label: 'Ctrl:' )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 138 0 -27 1 161 0 )					#model: #classCtrlDoubleClickAction					#type: #string					#comboList: #classDoubleClickActionList )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 60 0 -20 1 172 0 )					#label: 'Class double click action' )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 184 0 -20 1 296 0 )					#label: 'Diagram double click action' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 42 0 230 0 0 1 )					#label: 'Plain:' )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 206 0 -27 1 229 0 )					#model: #diagramPlainDoubleClickAction					#type: #string					#comboList: #diagramDoubleClickActionList )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 42 0 258 0 0 1 )					#label: 'Shift:' )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 234 0 -27 1 257 0 )					#model: #diagramShiftDoubleClickAction					#type: #string					#comboList: #diagramDoubleClickActionList )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 42 0 286 0 0 1 )					#label: 'Ctrl:' )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 262 0 -27 1 285 0 )					#model: #diagramCtrlDoubleClickAction					#type: #string					#comboList: #diagramDoubleClickActionList )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 16 0 -16 1 60 0 )					#flags: 4					#model: #shortcutsText					#isReadOnly: true ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Painter Preferences'			#min: #(#{Core.Point} 410 387 )			#max: #(#{Core.Point} 410 387 )			#bounds: #(#{Graphics.Rectangle} 670 515 1080 902 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#model: #closeRequest					#label: 'Cancel' )				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#labels: #() ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2PainterPreferencesDialog class</class-id> <category>resources</category><body package="ADvance2">colorsImage	"UIMaskEditor new openOnClass: self andSelector: #colorsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 11@12 depth: 4 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 11) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue green; at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: ColorValue yellow; at: 7 put: ColorValue magenta; at: 8 put: (ColorValue scaledRed: 3699 scaledGreen: 3699 scaledBlue: 3699); at: 9 put: (ColorValue scaledRed: 0 scaledGreen: 4227 scaledBlue: 0); at: 10 put: ColorValue red; at: 11 put: ColorValue cyan; yourself)) usingBits: #[51 51 51 51 51 48 0 0 119 119 119 119 119 48 0 0 117 87 136 118 103 0 0 0 117 87 136 118 103 0 0 0 119 119 119 119 119 0 0 0 121 151 170 116 71 0 0 0 121 151 170 116 71 0 0 0 119 119 119 119 119 0 0 0 116 71 17 114 39 0 0 0 116 71 17 114 39 0 0 0 119 119 119 119 119 0 0 0 48 0 0 0 0 0 0 0])</body></methods><methods><class-id>ICC.ADvance.NVisionSpec class</class-id> <category>interface specs</category><body package="ADvance2">basicsEditSpec	"UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'NVision Properties'			#min: #(#Point 290 258 )			#max: #(#Point 300 258 )			#bounds: #(#Rectangle 128 420 418 678 ) )		#component:		#(#SpecCollection			#collection: #(				#(#LabelSpec					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 )					#label: #componentName )				#(#LabelSpec					#layout: #(#AlignmentOrigin 10 0 53 0 0 1 )					#label: 'Aspect:' )				#(#LabelSpec					#layout: #(#AlignmentOrigin 10 0 86 0 0 1 )					#label: 'ID:' )				#(#InputFieldSpec					#layout: #(#LayoutFrame 96 0 28 0 -14 1 53 0 )					#model: #model					#tabable: true )				#(#InputFieldSpec					#layout: #(#LayoutFrame 96 0 60 0 -14 1 85 0 )					#model: #name					#tabable: true )				#(#LabelSpec					#layout: #(#AlignmentOrigin 8 0 113 0 0 1 )					#label: 'Layers:' )				#(#InputFieldSpec					#layout: #(#Rectangle 96 92 126 117 )					#model: #layer					#tabable: true					#alignment: #right					#type: #number )				#(#GroupBoxSpec					#layout: #(#LayoutFrame 8 0 134 0 -14 1 183 0 )					#label: 'Scroll Bars' )				#(#CheckBoxSpec					#layout: #(#Point 18 154 )					#model: #hasHorizontalScrollBar					#label: 'Horizontal' )				#(#CheckBoxSpec					#layout: #(#Point 144 154 )					#model: #hasVerticalScrollBar					#label: 'Vertical' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.NVisionSpec class</class-id> <category>resources</category><body package="ADvance2">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6553 scaledGreen: 6553 scaledBlue: 6553); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 5 put: ColorValue red; at: 6 put: (ColorValue scaledRed: 0 scaledGreen: 4112 scaledBlue: 0); at: 7 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4112); yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H#@@@@@BDQDQTQDQDQDQDQD0@@@@@!DQEUTQDQDQDQDQL@@@@@HQDQUUDQDQDQDQDS@@@@@BDQEUUUDQDQDQDQD0@@@@@!DUUUUUDQDQDQDQL@@@@@HQEUUUUQDQDQDQDS@@@@@BDUUUUUUQDQDQDQD0@@@@@!UUUUUUUTDQDQDQL@@@@@HUUUUUUUUDDQDQDS@@@@@BUUUUUUUUUDDQDQD0@@@@@!DQEDQDQDQADQDQL@@@@@HQDTQDQDQDQADQDS@@@@@BDQEDP@@@@@@@@AD0@@@@@!DQQD@"H"H"H"@QL@@@@@HQDTQ@H&amp;X"Y&amp;H DS@@@@@BDQDTPBX"X&amp;H&amp;HAD0@@@@@!DQED@&amp;H&amp;I"I"@QL@@@@@HQDQE@I"I"X"X DS@@@@@BDQDQDBI&amp;H&amp;Y"HAD0@@@@@!DQDQ@"H"H"H"@QL@@@@@HQDQDP@@@@@@@@DS@@@@@BDQDQDQDQDQDQDQD0@@@@@3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@b')</body><body package="ADvance2">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[0 0 0 0 127 255 255 0 127 127 255 0 126 191 255 0 126 191 255 0 125 223 255 0 123 239 255 0 123 239 255 0 119 247 255 0 111 249 255 0 111 250 255 0 64 1 127 0 126 255 127 0 125 255 191 0 125 128 3 0 125 191 251 0 125 179 27 0 126 173 107 0 126 173 107 0 127 45 107 0 127 179 27 0 127 191 251 0 127 128 3 0 127 255 255 0 0 0 0 0 0 0 0 0]</body></methods><methods><class-id>ICC.ADvance.AD2NewClassDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'New Class'			#min: #(#{Core.Point} 459 233 )			#max: #(#{Core.Point} 459 233 )			#bounds: #(#{Graphics.Rectangle} 397 316 756 549 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.DividerSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 -44 1 -10 1 -42 1 ) )				#(#{UI.SubCanvasSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -44 1 )					#name: #basics					#flags: 0					#majorKey: #AD2ClassPropertiesDialog					#minorKey: #generalSpec )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -165 1 -33 1 -90 1 -10 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -85 1 -33 1 -10 1 -10 1 )					#model: #closeCancel					#label: 'Cancel' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette class</class-id> <category>resources</category><body package="ADvance2">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); yourself)) usingBits: #[17 20 17 16 17 17 17 17 17 0 0 0 17 20 65 1 1 34 34 34 1 0 0 0 20 68 68 16 17 36 68 68 1 0 0 0 17 20 65 1 1 36 68 68 1 0 0 0 17 20 17 16 17 35 51 51 1 0 0 0 17 17 17 1 1 35 67 51 1 0 0 0 17 17 17 16 17 35 68 51 1 0 0 0 20 68 68 68 68 68 68 67 1 0 0 0 17 17 17 16 17 35 68 51 1 0 0 0 17 17 17 1 1 35 67 51 1 0 0 0 17 20 17 16 17 35 51 51 1 0 0 0 17 20 65 1 1 35 51 51 1 0 0 0 20 68 68 16 17 35 51 51 1 0 0 0 17 20 65 1 1 32 0 0 1 0 0 0 17 20 17 16 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0]</body><body package="ADvance2">filterMenu	"MenuEditor new openOnClass: self andSelector: #filterMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Update'				#value: #update ) ) #(1 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;File'				#submenu: #(#Menu #(						#(#MenuItem							#rawLabel: '&amp;Close'							#value: #closeRequest ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2FilterPalette class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Filter Palette'			#min: #(#{Core.Point} 40 20 )			#bounds: #(#{Graphics.Rectangle} 702 588 853 714 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.TreeViewSpec}					#properties:					#(#{UI.PropertyListDictionary} #dragStartSelector						#doFilterDrag: #dragOkSelector						#filterWantsToDrag: )					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 )					#name: #filterTree					#model: #filterTree					#menu: #filterMenu					#useModifierKeys: true					#selectionType: #highlight					#displayStringSelector: #name					#useIcons: #other					#iconSelectors: #(#childrenImage ) ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>resources</category><body package="ADvance2">addAttributeImage	"UIMaskEditor new openOnClass: self andSelector: #addAttributeImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 7 put: ColorValue yellow; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 83 51 51 51 51 51 51 51 0 0 0 55 87 51 51 51 51 51 51 51 0 0 0 85 85 83 51 51 51 51 51 51 0 0 0 55 87 51 0 0 0 51 51 51 0 0 0 51 83 51 4 100 96 115 51 51 0 0 0 51 51 51 6 70 64 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 1 33 32 115 51 51 0 0 0 51 51 51 2 18 16 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 4 100 96 115 51 51 0 0 0 51 51 51 6 70 64 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 55 119 119 115 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0])</body><body package="ADvance2">addClassImage	"UIMaskEditor new openOnClass: self andSelector: #addClassImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 7 put: ColorValue yellow; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 83 51 51 51 51 51 51 51 0 0 0 55 87 51 51 51 51 51 51 51 0 0 0 85 85 83 51 51 51 51 51 51 0 0 0 55 87 51 0 0 0 51 51 51 0 0 0 51 83 51 1 33 32 115 51 51 0 0 0 51 51 51 2 18 16 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 4 100 96 115 51 51 0 0 0 51 51 51 6 70 64 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 4 100 96 115 51 51 0 0 0 51 51 51 6 70 64 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 55 119 119 115 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0])</body><body package="ADvance2">addInitiatorsImage	"UIMaskEditor new openOnClass: self andSelector: #addInitiatorsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: Graphics.ColorValue yellow; at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 5 put: Graphics.ColorValue white; yourself)) usingBits: #[17 17 17 49 16 0 1 17 17 0 0 0 17 17 19 17 16 36 1 17 1 0 0 0 17 17 19 17 16 66 0 0 16 0 0 0 17 19 51 51 16 36 1 17 1 0 0 0 17 17 51 49 16 0 1 17 17 0 0 0 17 17 19 17 17 17 17 17 17 0 0 0 16 0 17 17 17 17 17 17 17 0 0 0 2 66 0 0 0 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 0 0 0 0 0 1 17 17 17 0 0 0])</body><body package="ADvance2">addNoteImage	"UIMaskEditor new openOnClass: self andSelector: #addNoteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6077 scaledGreen: 0 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[166 170 170 170 160 0 0 0 183 170 170 170 160 0 0 0 85 106 170 170 160 0 0 0 183 170 170 170 160 0 0 0 166 170 42 170 160 0 0 0 170 168 10 170 160 0 0 0 170 168 10 170 160 0 0 0 170 160 130 170 160 0 0 0 170 162 130 170 160 0 0 0 170 128 0 170 160 0 0 0 170 138 160 170 160 0 0 0 170 10 168 42 160 0 0 0 168 2 160 10 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body package="ADvance2">addParticipantsImage	"UIMaskEditor new openOnClass: self andSelector: #addParticipantsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: Graphics.ColorValue yellow; at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 5 put: Graphics.ColorValue white; yourself)) usingBits: #[17 17 17 49 17 17 17 0 0 0 0 0 17 17 19 17 17 17 1 2 64 0 0 0 17 17 19 17 16 0 16 4 32 0 0 0 17 19 51 51 17 17 1 2 64 0 0 0 17 17 51 49 17 17 17 0 0 0 0 0 17 17 19 17 17 17 17 17 17 0 0 0 16 0 17 17 17 17 17 17 17 0 0 0 2 66 0 0 0 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 0 0 0 0 0 1 17 17 17 0 0 0])</body><body package="ADvance2">addRelatedClassesImage	"UIMaskEditor new openOnClass: self andSelector: #addRelatedClassesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: Graphics.ColorValue yellow; at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 5 put: Graphics.ColorValue white; yourself)) usingBits: #[17 17 17 49 17 17 17 17 1 0 0 0 17 17 19 17 17 17 17 16 0 0 0 0 17 17 19 17 17 17 17 17 1 0 0 0 17 19 51 51 17 0 0 0 0 0 0 0 17 17 51 49 17 17 17 17 17 0 0 0 17 17 19 17 17 17 17 17 17 0 0 0 16 0 17 17 17 17 17 17 17 0 0 0 2 66 0 0 0 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 0 0 0 0 0 1 17 17 17 0 0 0])</body><body package="ADvance2">addServiceImage	"UIMaskEditor new openOnClass: self andSelector: #addServiceImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 7 put: ColorValue yellow; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 83 51 51 51 51 51 51 51 0 0 0 55 87 51 51 51 51 51 51 51 0 0 0 85 85 83 51 51 51 51 51 51 0 0 0 55 87 51 0 0 0 51 51 51 0 0 0 51 83 51 4 100 96 115 51 51 0 0 0 51 51 51 6 70 64 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 4 100 96 115 51 51 0 0 0 51 51 51 6 70 64 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 1 33 32 115 51 51 0 0 0 51 51 51 2 18 16 115 51 51 0 0 0 51 51 51 0 0 0 115 51 51 0 0 0 51 51 51 55 119 119 115 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0])</body><body package="ADvance2">advanceImage	"UIMaskEditor new openOnClass: self andSelector: #advanceImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 102@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: (ColorValue scaledRed: 7099 scaledGreen: 7099 scaledBlue: 7099); at: 3 put: (ColorValue scaledRed: 7400 scaledGreen: 7400 scaledBlue: 7400); at: 4 put: (ColorValue scaledRed: 6553 scaledGreen: 6553 scaledBlue: 6553); at: 5 put: (ColorValue scaledRed: 7645 scaledGreen: 7645 scaledBlue: 7645); yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AH0@CEBH"PS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@CH"L1H"H"H"H#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D$H$H"H"H"H"H!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@L$L"H"H"H"H"H"H#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2DAH"H"PSP0@CMBI@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AH0L"H$L0@2L@@@@RH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P#@DH"L3@@HP@@@@ABL@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AD@@L"H#@@AD@@@@@@D#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DP@@BH3@@@CH0@@@@@CH0@@@@@@@@@@@3PP@@@@@@@@@@@@@0@@@@@@@@@@@@@@@@@CLCQ@@@D$@@@@L!@@@@@@@R@@@@@@@0@@@1H"H0@@@@@@L0@@@4H @@@CP$@@@@@@@@@CH3L"EDQBIDP@@DH@@@@@@@PP@CP#@DH@@CH"H#@@@CL0@2H0@AH"H@@CP$H#@@@@@@@@L"H"H"H"H"H#@@L#@@@@@@@2L@@"H0D$@@P"ICHP@@L"LAH"L@P"H!@@L"L2H@@@@@@@@2H"H"H"H"H"D@@BP@@@@@@CI@@DH#@2H0ABIC@RD@@2HPP"I@ABIBP@@2P@P#@@@@@@@@LTP$P"H$H$P0@@L#@@@@@@MBL@L"P@H"@DH#@CH#@@P$ABD$@AH!@S@CH#@RL@@@@@@@@@@2P@@@@2H0@@@2P@@@@@@2H0@DI@@2H0D"L@L"L@@2PAH4H0L"L@@@@RP4D@@@@@@@@@@@Q@@@@@H!@@@@D#@@@@@AH#@@L"@@D$@2H0@2I@@CH#D#L#@AH0@@@CP"D0@@L@@@@@@@MD@@@@@RH0@@@2P@@@@3H"L@@CI@@RH$P"@CH2P@MBIBLDH@D"L@@@EBH0@@MC@@@@@@L"P@@@@@H$@1@@L!@@L1H"P0@@@2PAH#L0P#D!L"EBL"HPL"EAL!@@L!@"P@@2L@@@@@@2I@@@@@@2H$P0@DH"H"H"P0@@@@ABH"L@@CH"DCH"H0D$@CH"D@H$P"D@P"QBH0@@@@@CH$@@@@@@L"HP@@ABH"H"D0@@@@@@L"P0@@@DHP@2IC@CD@@2HP@CH"H0@CH"H#@@@@@@@RD@@@@@@@DS@@@@L"IAL@@@@@@@@@L0@@@@@C@@MC@@@@@@@3@@@CPS@@@CQC@@@@@@@@D0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="ADvance2">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^(Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: Graphics.ColorValue black; at: 3 put: Graphics.ColorValue yellow; at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[1 17 17 0 0 1 17 17 0 0 0 0 1 35 33 64 0 1 35 33 64 0 0 0 1 50 49 17 17 17 50 49 64 0 0 0 1 35 33 68 68 65 35 33 64 0 0 0 1 17 17 64 0 1 50 49 64 0 0 0 0 65 68 64 0 1 35 33 64 0 0 0 0 19 16 0 0 1 17 17 64 0 0 0 0 1 68 0 0 0 68 68 64 0 0 0 0 1 64 0 0 0 0 0 0 0 0 0 0 1 64 0 0 0 0 0 0 0 0 0 1 17 17 0 0 0 0 0 0 0 0 0 1 35 33 64 0 0 0 0 0 0 0 0 1 50 49 64 0 0 0 0 0 0 0 0 1 35 33 64 0 0 0 0 0 0 0 0 1 17 17 64 0 0 0 0 0 0 0 0 0 68 68 64 0 0 0 0 0 0 0 0])</body><body package="ADvance2">associationCursor	"UIMaskEditor new openOnClass: self andSelector: #associationCursor"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[128 0 0 0 192 0 0 0 224 0 0 0 240 0 0 0 248 0 0 0 252 0 0 0 240 0 0 0 176 0 0 0 24 0 0 0 24 12 0 0 0 30 0 0 15 254 0 0 0 30 0 0 0 12 0 0 0 0 0 0 0 0 0 0])</body><body package="ADvance2">associationsImage	"UIMaskEditor new openOnClass: self andSelector: #associationsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 14@12 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 2) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); yourself)) usingBits: #[255 252 0 0 255 236 0 0 255 168 0 0 255 196 0 0 255 212 0 0 255 212 0 0 255 252 0 0 0 0 0 0 255 252 0 0 255 252 0 0 255 252 0 0 255 252 0 0])</body><body package="ADvance2">attributesImage	"UIMaskEditor new openOnClass: self andSelector: #attributesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 14@12 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: ColorValue yellow; at: 7 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 51 51 51 51 51 51 0 51 51 0 0 0 51 51 0 51 51 4 84 80 99 51 0 51 51 5 69 64 99 51 0 51 51 0 0 0 99 51 0 51 51 1 33 32 99 51 0 51 51 2 18 16 99 51 0 51 51 0 0 0 99 51 0 51 51 4 84 80 99 51 0 51 51 5 69 64 99 51 0 51 51 0 0 0 99 51 0 51 51 54 102 102 99 51 0])</body><body package="ADvance2">classCursor	"UIMaskEditor new openOnClass: self andSelector: #classCursor"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[128 0 0 0 192 0 0 0 224 0 0 0 240 0 0 0 248 0 0 0 252 0 0 0 240 252 0 0 176 172 0 0 24 212 0 0 24 252 0 0 0 132 0 0 0 132 0 0 0 252 0 0 0 132 0 0 0 132 0 0 0 252 0 0])</body><body package="ADvance2">hideNonScriptClassesImage	"UIMaskEditor new openOnClass: self andSelector: #hideNonScriptClassesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 2642 scaledGreen: 2642 scaledBlue: 2642); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 7 put: ColorValue yellow; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 48 0 0 51 51 51 34 34 35 0 0 0 48 70 64 115 83 51 36 20 39 0 0 0 48 100 96 115 85 51 33 65 39 0 0 0 48 70 64 117 85 83 36 20 39 0 0 0 48 100 96 115 85 51 33 65 39 0 0 0 48 70 64 115 83 51 36 20 39 0 0 0 48 0 0 115 51 51 34 34 39 0 0 0 51 119 119 115 51 51 55 119 119 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0])</body><body package="ADvance2">hideSelectedClassesImage	"UIMaskEditor new openOnClass: self andSelector: #hideSelectedClassesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 2642 scaledGreen: 2642 scaledBlue: 2642); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 6 put: ColorValue white; at: 7 put: ColorValue yellow; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 48 0 0 51 51 51 34 34 35 0 0 0 48 68 64 115 67 51 37 21 39 0 0 0 48 68 64 115 68 51 33 81 39 0 0 0 48 86 80 116 68 67 37 21 39 0 0 0 48 101 96 115 68 51 33 81 39 0 0 0 48 86 80 115 67 51 37 21 39 0 0 0 48 0 0 115 51 51 34 34 39 0 0 0 51 119 119 115 51 51 55 119 119 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0])</body><body package="ADvance2">labelCursor	"UIMaskEditor new openOnClass: self andSelector: #labelCursor"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[128 0 0 0 192 0 0 0 224 0 0 0 240 0 0 0 248 0 0 0 252 0 0 0 240 64 0 0 176 224 0 0 24 224 0 0 25 176 0 0 1 48 0 0 3 248 0 0 2 24 0 0 6 12 0 0 15 30 0 0 0 0 0 0])</body><body package="ADvance2">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#nameKey: #file 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'New &amp;diagram' 							#value: #newDiagram 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Open diagram...' 							#value: #openDiagram 							#shortcutKeyCharacter: $O 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Update' 							#value: #updateDiagram 							#shortcutKeyCharacter: $U 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Close' 							#value: #closeRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save' 							#value: #save 							#shortcutKeyCharacter: $S 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save &amp;as...' 							#value: #saveAs ) 						#(#{UI.MenuItem} 							#rawLabel: 'Pa&amp;ge setup...' 							#value: #pageSetup ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Print...' 							#value: #printDiagram 							#shortcutKeyCharacter: $P 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit' 							#value: #exit 							#shortcutKeyCharacter: $Q 							#shortcutModifiers: 8 ) ) #(4 2 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Edit' 				#nameKey: #edit 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Delete' 							#value: #delete 							#shortcutKeyCharacter: $D 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Copy to clipboard' 							#value: #copyToClipboard 							#shortcutKeyCharacter: $C 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Select &amp;all classes' 							#value: #selectAll ) 						#(#{UI.MenuItem} 							#rawLabel: 'Select &amp;subclasses' 							#value: #selectSubclasses ) 						#(#{UI.MenuItem} 							#rawLabel: 'S&amp;ubject...' 							#value: #editSubject ) 						#(#{UI.MenuItem} 							#rawLabel: 'F&amp;ilter...' 							#value: #editFilter ) 						#(#{UI.MenuItem} 							#rawLabel: 'Scrip&amp;ts...' 							#value: #editScripts ) 						#(#{UI.MenuItem} 							#rawLabel: 'Pr&amp;operties...' 							#value: #editProperties ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Find...' 							#value: #openFindDialog ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Preferences' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;General Preferences...' 										#value: #generalPreferences ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Painter Preferences...' 										#value: #painterPreferences ) ) #(2 ) nil ) ) ) #(2 2 4 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;View' 				#nameKey: #view 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Layers' 							#nameKey: #layers 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;Inheritance' 										#value: #negateShowStructure ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Namespaces' 										#value: #negateShowNamespaces ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Attributes' 										#value: #negateShowAttributes ) 									#(#{UI.MenuItem} 										#rawLabel: 'Attribute &amp;types' 										#value: #negateShowTypes ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Relations' 										#value: #negateShowRelations ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Services' 										#value: #negateShowServices ) 									#(#{UI.MenuItem} 										#rawLabel: 'S&amp;cripts' 										#value: #negateShowScripts ) ) #(1 4 2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Toolbars' 							#nameKey: #toolbars 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Show &amp;Toolbar' 										#value: #toggleToolbar 										#indication: true ) 									#(#{UI.MenuItem} 										#rawLabel: 'Show &amp;Add buttons' 										#value: #toggleAddButtons 										#indication: true ) 									#(#{UI.MenuItem} 										#rawLabel: 'Show &amp;Status bar' 										#value: #toggleStatusBar 										#indication: true ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'La&amp;yout' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;Auto layout' 										#value: #doAutoLayout ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Snap to grid' 										#value: #snapToGrid ) ) #(1 1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'All &amp;classes' 							#value: #showAllClasses ) 						#(#{UI.MenuItem} 							#rawLabel: 'Hide &amp;selected classes' 							#value: #hideSelectedClasses ) 						#(#{UI.MenuItem} 							#rawLabel: 'Hide &amp;non script classes' 							#value: #hideNonScriptClasses ) 						#(#{UI.MenuItem} 							#rawLabel: 'Class &amp;visibility...' 							#value: #editClassVisibility ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;All messages' 							#value: #showAllMessages ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Hide selected messages' 							#value: #hideSelectedMessages ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Message visibility...' 							#value: #editMessageVisibility ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Filter non-script services...' 							#value: #filterNonScriptServices ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Zoom' 							#nameKey: #zoom 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '200%' ) 									#(#{UI.MenuItem} 										#rawLabel: '150%' ) 									#(#{UI.MenuItem} 										#rawLabel: '100%' ) 									#(#{UI.MenuItem} 										#rawLabel: '85%' ) 									#(#{UI.MenuItem} 										#rawLabel: '75%' ) 									#(#{UI.MenuItem} 										#rawLabel: '50%' ) 									#(#{UI.MenuItem} 										#rawLabel: '25%' ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Window' ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Viewport' 										#value: #viewport ) ) #(8 1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Grid' 							#nameKey: #grid 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;On' 										#value: #gridOn ) 									#(#{UI.MenuItem} 										#rawLabel: 'O&amp;ff' 										#value: #gridOff ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;X only' 										#value: #gridXOnly ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Y only' 										#value: #gridYOnly ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Hide' 										#value: #gridHide ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Show' 										#value: #gridShow ) 									#(#{UI.MenuItem} 										#rawLabel: 'Show &amp;if on' 										#value: #gridShowIfOn ) 									#(#{UI.MenuItem} 										#rawLabel: 'Grid size &amp;8' 										#value: #gridSize8 ) 									#(#{UI.MenuItem} 										#rawLabel: 'Grid size &amp;16' 										#value: #gridSize16 ) 									#(#{UI.MenuItem} 										#rawLabel: 'Grid size &amp;32' 										#value: #gridSize32 ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Grid size...' 										#value: #openGridSizeDialog ) ) #(4 3 4 ) nil ) ) ) #(3 4 4 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Add' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Class...' 							#value: #addClass ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Attribute...' 							#value: #addAttribute ) 						#(#{UI.MenuItem} 							#rawLabel: 'Ass&amp;ociation...' 							#value: #addAssociation ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Message...' 							#value: #addMessage ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Note...' 							#value: #addNote ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Related classes...' 							#value: #addRelatedClasses ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Initiators...' 							#value: #addInitiators ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Participants...' 							#value: #addParticipants ) 						#(#{UI.MenuItem} 							#rawLabel: 'Remove &amp;filters' 							#value: #removeFilters ) 						#(#{UI.MenuItem} 							#rawLabel: 'Remove &amp;scripts' 							#value: #removeScripts ) ) #(5 3 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Window' 				#nameKey: #window 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Diagram Painter' 							#value: #openDiagramPainter ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Subject Browser' 							#value: #openSubjectBrowser ) 						#(#{UI.MenuItem} 							#rawLabel: 'Filter &amp;Browser' 							#value: #openFilterBrowser ) 						#(#{UI.MenuItem} 							#rawLabel: 'Filter &amp;Palette' 							#value: #openFilterPalette ) 						#(#{UI.MenuItem} 							#rawLabel: 'D&amp;ocumenter' 							#value: #openDocumenter ) 						#(#{UI.MenuItem} 							#rawLabel: 'S&amp;cript Docu...' 							#value: #openScriptDocuDialog ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Plug-ins' 							#nameKey: #plugins ) 						#(#{UI.MenuItem} 							#rawLabel: 'Diagram &amp;Windows' 							#nameKey: #diagramWindows ) ) #(3 3 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Help' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'About &amp;ADvance...' 							#value: #about ) 						#(#{UI.MenuItem} 							#rawLabel: 'About &amp;Plug-ins' 							#nameKey: #aboutPlugins ) ) #(2 ) nil ) ) ) #(6 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">namespacesImage	"UIMaskEditor new openOnClass: self andSelector: #namespacesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 14@12 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 8) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 4240); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 6 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 5557); at: 7 put: Graphics.ColorValue yellow; at: 8 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 0); yourself)) usingBits: #[34 34 34 34 34 34 34 0 34 34 0 0 0 34 34 0 34 34 5 117 112 18 34 0 34 34 7 87 80 18 34 0 34 34 0 0 0 18 34 0 34 34 3 99 96 66 34 0 34 34 6 54 48 66 34 0 34 34 0 0 0 18 34 0 34 34 3 99 96 18 34 0 34 34 6 54 48 18 34 0 34 34 0 0 0 18 34 0 34 34 33 17 17 18 34 0])</body><body package="ADvance2">removeAssociationImage	"UIMaskEditor new openOnClass: self andSelector: #removeAssociationImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@25 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: ColorValue yellow; at: 7 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L0@@@@L3L3L3L3L3L0@@@@L3Y&amp;Y&amp;Y&amp;Y&amp;X@@@@@L3YDQDQDQDX@@@@@@@YEEQTUAQX@@@@@@@ACTUL@TUX@@@@@L@@EEQ@EEQX@@@@@L3@@Y A&amp;Y&amp;X@@@@@L3X@@@D!HRX@@@@@L3Y@@AHRD!X@@@@@L3X@@@D!HRX@@@@@L3@@D @RD!X@@@@@L0@AHR@AHRX@@@@@L@ABD!HBD!X@@@@@@@AAHRD HRX@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;X@@@@@L3YATUEQTUX@@@@@L3YEEQTUEQX@@@@@L3YATUEQTUX@@@@@L3YEEQTUEQX@@@@@L3YATUEQTUX@@@@@L3YEEQTUEQX@@@@@L3YATUEQTUX@@@@@L3Y&amp;Y&amp;Y&amp;Y&amp;X@@@@@L3@@@@@@@@@@@@@@'))</body><body package="ADvance2">removeClassFromSubjectImage	"UIMaskEditor new openOnClass: self andSelector: #removeClassFromSubjectImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@25 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: ColorValue white; at: 5 put: ColorValue yellow; at: 6 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: '@@H"H"H"@"H @@@@@@@"H"H@H"H @@@@H@@EUU@EUUT@@@@@H"@@L0@3L3T@@@@@H"T@@@PTEAT@@@@@H"T0@DEAPTT@@@@@H"T@@@PTEAT@@@@@H"@@UPAUUUT@@@@@H @DEA@DEAT@@@@@H@@1PTDAPTT@@@@@@@@4EAPPEAT@@@@@@@T1PTEAPTT@@@@@HBT4EAPTAAT@@@@@H"T1PTEAPTT@@@@@H"T4EAPTEAT@@@@@H"TUUUUUUUT@@@@@H"T4EAPTEAT@@@@@H"T1PTEAPTT@@@@@H"T4EAPTEAT@@@@@H"T1PTEAPTT@@@@@H"T4EAPTEAT@@@@@H"T1PTEAPTT@@@@@H"T4EAPTEAT@@@@@H"UUUUUUUUT@@@@@H"@@@@@@@@@@@@@@'))</body><body package="ADvance2">removeClassFromSystemImage	"UIMaskEditor new openOnClass: self andSelector: #removeClassFromSystemImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 22@31 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: ColorValue white; at: 5 put: ColorValue yellow; at: 6 put: ColorValue red; at: 7 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@X3L3L3L3L3L3L6@@X4EAPTEAPTEAPV@@X1PTEAPTEAPTEF@@X4EAPTEAPTEAPV@@X1PTEAPTEAPTEF@@X4EAPTEAPTEAPV@@X6Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@X4EAPTEAPTEAPV@@X1PTEAPTEAPTEF@@X4EAPTEAPTEAPV@@X1PTEAPTEAPTEF@@X4EAPTEAPTEAPV@@X1PTEAPTEAPTEF@@X4EAPTEAPTEAPV@@X6Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;@@H4EUUTEAPTEAPVX@X%UUUUU$YFQ$YC@@IUUUUUUVQ$IBP&amp;H@YUUSMUUTH&amp;P$H#X@UUUSMUUUQ"X&amp;I"X@UUUSMUUUIFP$X#H@UUUSMUUUP$H"H&amp;X@UUUSMUUUYFI"H"H@UUUUUUUUH"X&amp;I#X@IUUSMUURYBP"IFH@IUUSMUURQ"H"H"H@H%UUUUT"H&amp;H"X"H@H"IUURP&amp;I"I"H"X@H"H"H"H"H"H"H"H@H"H&amp;H"X"I"I"H&amp;H@'))</body><body package="ADvance2">removeScriptsImage	"UIMaskEditor new openOnClass: self andSelector: #removeScriptsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 5 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 6077); yourself)) usingBits: #[17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 52 17 17 49 17 17 17 17 0 0 0 17 67 51 19 17 17 17 17 17 0 0 0 17 17 67 49 17 17 1 17 17 0 0 0 17 17 52 48 0 0 16 17 17 0 0 0 17 19 49 51 17 17 1 17 17 0 0 0 17 51 32 3 65 17 17 17 17 0 0 0 17 19 17 17 1 17 1 17 17 0 0 0 17 17 17 17 0 0 16 17 17 0 0 0 17 17 17 17 17 17 1 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0])</body><body package="ADvance2">removeServiceImage	"UIMaskEditor new openOnClass: self andSelector: #removeServiceImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 17@25 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: ColorValue yellow; at: 7 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L0@@@@L3L3L3L3L3L0@@@@L3Y&amp;Y&amp;Y&amp;Y&amp;X@@@@@L3YDQDQDQDX@@@@@L3YEEQTUEQX@@@@@L3YATUEQTUX@@@@@L3YEEQTUEQX@@@@@L3YFY&amp;Y&amp;Y&amp;X@@@@@L3YEEQTUEQX@@@@@L3YATUEQTUX@@@@@L3YEEQTUEQX@@@@@L3YATUEQTUX@@@@@@@YEEQTUAQX@@@@@@@ACTUL@TUX@@@@@L@@EEQ@EEQX@@@@@L3@@Y A&amp;Y&amp;X@@@@@L3X@@@HRD!X@@@@@L3Y@@BD!HRX@@@@@L3X@@@HRD!X@@@@@L3@@HP@!HRX@@@@@L0@BD!@BD!X@@@@@L@AAHRDAHRX@@@@@@@ABD!HPD!X@@@@@@@Y&amp;Y&amp;Y&amp;Y&amp;X@@@@@LC@@@@@@@@@@@@@@'))</body><body package="ADvance2">scriptCursor	"UIMaskEditor new openOnClass: self andSelector: #scriptCursor"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[128 0 0 0 192 0 0 0 224 0 0 0 240 0 0 0 248 0 0 0 252 0 0 0 240 0 0 0 176 0 0 0 24 0 0 0 24 2 0 0 1 253 0 0 0 2 0 0 1 224 0 0 0 34 0 0 0 61 0 0 0 2 0 0])</body><body package="ADvance2">selectAllImage	"UIMaskEditor new openOnClass: self andSelector: #selectAllImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 3 put: (ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 4 put: ColorValue white; at: 5 put: ColorValue yellow; at: 6 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[0 33 17 32 0 2 17 18 0 0 0 0 0 33 17 37 0 2 17 18 80 0 0 0 0 35 67 37 0 2 52 50 80 0 0 0 0 36 52 37 0 2 67 66 80 0 0 0 0 34 34 37 0 2 34 34 80 0 0 0 0 5 85 85 0 0 85 85 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 17 18 0 0 33 17 32 0 0 0 0 2 17 18 80 0 33 17 37 0 0 0 0 2 52 50 80 0 35 67 37 0 0 0 0 2 67 66 80 0 36 52 37 0 0 0 0 2 34 34 80 0 34 34 37 0 0 0 0 0 85 85 80 0 5 85 85 0 0 0 0])</body><body package="ADvance2">selectSubclassesImage	"UIMaskEditor new openOnClass: self andSelector: #selectSubclassesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: (ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 3 put: ColorValue white; at: 4 put: ColorValue yellow; at: 5 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 6 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[0 0 0 20 68 16 0 0 0 0 0 0 0 0 0 20 68 21 0 0 0 0 0 0 0 0 0 18 50 21 0 0 0 0 0 0 0 0 0 19 35 21 0 0 0 0 0 0 0 0 0 17 17 21 0 0 0 0 0 0 0 0 0 5 21 85 0 0 0 0 0 0 0 0 0 1 33 0 0 0 0 0 0 0 0 1 17 17 17 17 17 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 68 65 0 0 1 68 65 0 0 0 0 1 68 65 80 0 1 68 65 80 0 0 0 1 35 33 80 0 1 35 33 80 0 0 0 1 50 49 80 0 1 50 49 80 0 0 0 1 17 17 80 0 1 17 17 80 0 0 0 0 85 85 80 0 0 85 85 80 0 0 0])</body><body package="ADvance2">servicesImage	"UIMaskEditor new openOnClass: self andSelector: #servicesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 12@12 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: ColorValue yellow; at: 7 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 51 51 51 51 51 0 0 51 48 0 0 3 51 0 0 51 48 69 69 6 51 0 0 51 48 84 84 6 51 0 0 51 48 0 0 6 51 0 0 51 48 69 69 6 51 0 0 51 48 84 84 6 51 0 0 51 48 0 0 6 51 0 0 51 48 18 18 6 51 0 0 51 48 33 33 6 51 0 0 51 48 0 0 6 51 0 0 51 51 102 102 102 51 0 0])</body><body package="ADvance2">showAllClassesImage	"UIMaskEditor new openOnClass: self andSelector: #showAllClassesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 2642 scaledGreen: 2642 scaledBlue: 2642); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 7 put: ColorValue yellow; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 50 34 34 51 51 51 0 0 3 0 0 0 50 65 66 115 83 51 4 100 7 0 0 0 50 20 18 115 85 51 6 70 7 0 0 0 50 65 66 117 85 83 4 100 7 0 0 0 50 20 18 115 85 51 6 70 7 0 0 0 50 65 66 115 83 51 4 100 7 0 0 0 50 34 34 115 51 51 0 0 7 0 0 0 51 119 119 115 51 51 55 119 119 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0])</body><body package="ADvance2">structureImage	"UIMaskEditor new openOnClass: self andSelector: #structureImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 14@12 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[85 81 85 80 85 81 85 80 85 81 85 80 85 72 85 80 85 123 85 80 85 42 21 80 85 234 213 80 84 0 5 80 85 81 85 80 85 81 85 80 85 81 85 80 85 85 85 80])</body><body package="ADvance2">typesImage	"UIMaskEditor new openOnClass: self andSelector: #typesImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 14@12 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: ColorValue black; at: 3 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 1 0 16 0 6 0 36 0 24 0 9 0 24 0 9 0 6 17 36 0 1 17 16 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPainter class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ADvance' 			#min: #(#{Core.Point} 310 252 ) 			#bounds: #(#{Graphics.Rectangle} 569 432 1152 837 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{ICC.ADvance.AD2ToolbarButtonSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Graphics.Rectangle} 0 0 24 22 ) 							#name: #addClassButton 							#model: #addClass 							#helpText: 'Add Class to Subject' 							#label: #addClassOpaqueImage 							#hasCharacterOrientedLabel: false ) 						#(#{ICC.ADvance.AD2ToolbarButtonSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Graphics.Rectangle} 0 22 24 44 ) 							#name: #addAttributeButton 							#model: #addAttribute 							#helpText: 'Add Attribute to Class' 							#label: #addAttributeOpaqueImage 							#hasCharacterOrientedLabel: false ) 						#(#{ICC.ADvance.AD2ToolbarButtonSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Graphics.Rectangle} 0 44 24 66 ) 							#name: #addAssociationButton 							#model: #addAssociation 							#helpText: 'Add Association to Class' 							#label: #addAssociationOpaqueImage 							#hasCharacterOrientedLabel: false ) 						#(#{ICC.ADvance.AD2ToolbarButtonSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Graphics.Rectangle} 0 66 24 88 ) 							#name: #addMessageButton 							#model: #addMessage 							#helpText: 'Add Message to Class' 							#label: #addMessageOpaqueImage 							#hasCharacterOrientedLabel: false ) 						#(#{ICC.ADvance.AD2ToolbarButtonSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Graphics.Rectangle} 0 88 24 110 ) 							#name: #addNoteButton 							#model: #addNote 							#helpText: 'Add Note to Diagram' 							#label: #addNoteOpaqueImage 							#hasCharacterOrientedLabel: false ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 4 0 36 0 32 0 -41 1 ) 						#name: #addButtons ) ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.Rectangle} 0 30 32 34 ) 					#name: #topDivider ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -22 1 32 0 -20 1 ) 					#name: #bottomDivider ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 873 10 ) 					#label: #advanceOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 509 -9 ) 					#label: #advanceOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 763 -3 ) 					#label: #advanceOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 968 -12 ) 					#label: #advanceOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 633 3 ) 					#label: #advanceOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{ICC.ADvance.NVisionSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#editorDragLeave: #dragEnterSelector 						#editorDragEnter: #dropSelector 						#editorDrop: #dragOverSelector 						#editorDragOver: ) 					#layout: #(#{Graphics.LayoutFrame} 32 0 30 0 0 1.0 -20 1 ) 					#name: #editor 					#flags: 11 					#colors: 					#(#{UI.LookPreferences} 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #anEditor 					#layer: 4 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 1091 -4 ) 					#label: #advanceOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 1205 3 ) 					#label: #advanceOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{ICC.ICC1StatusFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 300 0 0 1 ) 							#flags: 0 							#isOpaque: true 							#model: #statusField1 ) 						#(#{ICC.ICC1StatusFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 304 0 -18 1 442 0 0 1 ) 							#flags: 0 							#isOpaque: true 							#model: #statusField2 							#tabable: false ) 						#(#{ICC.ICC1ProgressBarSpec} 							#layout: #(#{Graphics.LayoutFrame} 306 0 -15 1 440 0 -3 1 ) 							#name: #footerProgress 							#flags: 16 							#model: #footerProgress 							#start: 0 							#stop: 1 ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 0 1 0 1 ) 							#name: #footer 							#flags: 16 							#isOpaque: true 							#model: #footer 							#tabable: false 							#isReadOnly: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 0 1 0 1 ) 						#name: #statusBar ) ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser class</class-id> <category>resources</category><body package="ADvance2">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 6 put: ColorValue cyan; at: 7 put: ColorValue blue; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[34 34 66 34 2 34 34 34 34 0 0 0 34 34 68 32 32 34 34 34 34 0 0 0 34 68 68 66 2 34 34 34 34 0 0 0 34 34 68 32 32 34 34 34 34 0 0 0 34 34 66 23 112 114 34 34 34 0 0 0 34 34 33 115 83 7 36 34 34 0 0 0 34 34 39 53 53 16 36 66 34 0 0 0 34 68 71 83 81 80 68 68 34 0 0 0 34 34 39 53 21 16 36 66 34 0 0 0 34 34 34 113 81 7 116 34 34 0 0 0 34 34 66 39 0 113 102 66 34 0 0 0 34 34 68 32 32 33 86 100 34 0 0 0 34 68 68 66 2 34 21 102 2 0 0 0 34 34 68 32 32 34 33 86 96 0 0 0 34 34 66 34 2 34 34 21 96 0 0 0 34 34 34 34 34 34 34 32 2 0 0 0]</body><body package="ADvance2">filterMenu	"MenuEditor new openOnClass: self andSelector: #filterMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Open...'				#value: #openFilter )			#(#MenuItem				#rawLabel: '&amp;Update'				#value: #update )			#(#MenuItem				#rawLabel: '&amp;Save'				#value: #save )			#(#MenuItem				#rawLabel: '&amp;Delete'				#value: #delete )			#(#MenuItem				#rawLabel: '&amp;Rename'				#value: #rename ) ) #(2 1 2 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;New filter...' 							#value: #newFilter 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Open...' 							#value: #openFilter 							#shortcutKeyCharacter: $O 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Update' 							#value: #update 							#shortcutKeyCharacter: $U 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Close' 							#value: #closeRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save' 							#value: #save 							#shortcutKeyCharacter: $S 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit' 							#value: #exit 							#shortcutKeyCharacter: $Q 							#shortcutModifiers: 8 ) ) #(4 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Edit' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Delete' 							#value: #delete 							#shortcutKeyCharacter: $D 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Find...' 							#value: #find ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Rename...' 							#value: #rename ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;General preferences' 							#value: #generalPreferences ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;View' 				#nameKey: #view 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Show &amp;Toolbar' 							#value: #toggleToolbar 							#indication: true ) 						#(#{UI.MenuItem} 							#rawLabel: 'Show &amp;Status bar' 							#value: #toggleStatusBar 							#indication: true ) ) #(2 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2FilterBrowser class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Filter Browser'			#min: #(#{Core.Point} 194 172 )			#bounds: #(#{Graphics.Rectangle} 593 496 905 766 )			#flags: 4			#menu: #mainMenu )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.CompositeSpecCollection}					#collection: #(						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1.0 )							#model: #statusField1							#tabable: false							#isReadOnly: true )						#(#{UI.InputFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 0 1 0 1 )							#name: #footer							#flags: 16							#isOpaque: true							#model: #footer							#tabable: false							#isReadOnly: true ) )					#compositeSpec:					#(#{UI.CompositeSpec}						#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 0 1 0 1 )						#name: #statusBar ) )				#(#{UI.TreeViewSpec}					#properties:					#(#{UI.PropertyListDictionary} #dragStartSelector						#doFilterDrag: #dragOkSelector						#filterWantsToDrag: )					#layout: #(#{Graphics.LayoutFrame} 0 0 26 0 0 1 -20 1 )					#name: #filterTree					#model: #filterTree					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#doubleClickSelector: #openFilter )					#menu: #filterMenu					#useModifierKeys: true					#selectionType: #highlight					#displayStringSelector: #name					#useIcons: #other					#iconSelectors: #(#childrenImage )					#inPlaceEditedSelector:					#name: ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog class</class-id> <category>interface specs</category><body package="ADvance2">animationSpec	"UIPainter new openOnClass: self andSelector: #animationSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Installation...'			#min: #(#Point 400 152 )			#max: #(#Point 400 152 )			#bounds: #(#Rectangle 263 256 663 408 ) )		#component:		#(#SpecCollection			#collection: #(				#(#LabelSpec					#layout: #(#Point 18 22 )					#label: #initiatorOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 39 34 )					#name: #animationObject1					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 42 34 )					#name: #animationObject2					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 45 34 )					#name: #animationObject3					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 48 34 )					#name: #animationObject4					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 51 34 )					#name: #animationObject5					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 39 36 )					#name: #animationObject6					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 42 36 )					#name: #animationObject7					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 42 39 )					#name: #animationObject8					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 45 39 )					#name: #animationObject9					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 48 39 )					#name: #animationObject10					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 37 40 )					#name: #animationObject11					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 37 43 )					#name: #animationObject12					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 36 44 )					#name: #animationObject13					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 33 44 )					#name: #animationObject14					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 30 44 )					#name: #animationObject15					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 27 44 )					#name: #animationObject16					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 24 44 )					#name: #animationObject17					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 21 44 )					#name: #animationObject18					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )					#(#LabelSpec					#layout: #(#Point 18 44 )					#name: #animationObject19					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )	) ) )</body></methods><methods><class-id>ICC.ADvance.AD2SearchParticipantsProgressDialog class</class-id> <category>resources</category><body package="ADvance2">initiatorImage	"UIMaskEditor new openOnClass: self andSelector: #initiatorImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 36@28 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 5 put: ColorValue yellow; at: 6 put: ColorValue lightGray; yourself)) usingBits: (ByteArray fromPackedString: 'DQDQD3L3L3L3@QDQDQDQDQDQ@@@QDQD2H"H"H"H0DQDQDQDQDQD@@ADQDSIEQTUEQS@QDQDQDQDQDP@@DQDQL%QTUEQTLADQDQDQDQDQ@@@QDQD2QTUEQTT0DQDQDQDQDQD@@ADQDST3L3L3L3@QDQDQDQDQDP@@DQDQL"H"H"H"LADQDQDQDQDQ@@@QDQD2UEQTUEP0DQDQDQDQDQD@@ADQDSIEQTUEQS@QDQDQDQDQDP@@DQDQL%QTUEQTLADQDQDQDQDQ@@@QDQD2QTUEQTT0DQDQDQDQDQD@@ADQDSITUEQTUC@QDQDQDQDQDP@@DQDQL$UEQTUELADQDQDQDQDQ@@@QDQD5L3L3L3L0DQDQDQDQDAD@@ADQDSH"H"H"H#@QDQDQDQDP@P@@DQDQL%QTUEQTL@@@@@@@@@@@@@@QDQD2QTUEQTT0DQDQDQDQD@D@@ADQDSITUEQTUC@@@@@QDQDPDP@@DQDQL$UEQTUELADQDADPDQDQ@@@QDQD2UEQTUEP0@ADPDQ@ADQD@@ADQDSIEQTUEQS@PDQ@@@@@QDP@@DQDQ@3L3L3L3LA@QDQDP@QDQ@@@QDQDP@@@@@@@ADADQDQ@QDQD@@ADADQDQDQDQDQDPDQDQDQDQDP@@D@DQDQDQDQDQDQ@QDQDQDQDQ@@@@@@@@@@@@@@@@@ADQDQDQDQD@@A@ADQDQDQDQDQDQDQDQDQDQDP@@DPDQDQDQDQDQDQDQDQDQDQDQ@@@b'))</body><body package="ADvance2">lensImage	"UIMaskEditor new openOnClass: self andSelector: #lensImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 13@12 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 5 put: ColorValue cyan; at: 6 put: ColorValue lightGray; at: 7 put: ColorValue blue; at: 8 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4112); yourself)) usingBits: #[17 51 1 17 17 17 16 0 19 36 32 17 17 17 16 0 50 66 65 1 17 17 16 0 52 36 20 1 17 17 16 0 50 65 65 1 17 17 16 0 19 20 16 49 17 17 16 0 17 48 3 86 97 17 16 0 17 17 17 116 102 17 16 0 17 17 17 23 70 97 16 0 17 17 17 17 116 102 16 0 17 17 17 17 23 70 0 0 17 17 17 17 17 0 16 0])</body></methods><methods><class-id>ICC.ADvance.AD2Documenter class</class-id> <category>interface specs</category><body package="ADvance2">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 244 253 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1015 812 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 -72 1 ) 					#name: #subjectTree 					#model: #subjectTree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #enableButtons ) 					#useModifierKeys: true 					#selectionType: #highlight 					#displayStringSelector: #name 					#useIcons: #folder ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 11 0 -44 1 0 1 ) 					#name: #includeSourceCheck 					#model: #includeSource 					#label: 'Include source' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} -92 1 -64 1 1 0 ) 					#name: #diagramZoomLabel 					#label: 'Diagram zoom (%):' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -88 1 -65 1 -8 1 -42 1 ) 					#name: #diagramZoomInput 					#model: #diagramZoom 					#helpText: 'Zoom used for created PNG' 					#type: #number 					#formatString: '#' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 -10 1 0 1 ) 					#name: #pathLabel 					#label: 'Path:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 -33 1 -10 1 -10 1 ) 					#name: #pathInput 					#model: #path 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedPath ) ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 325 218 ) 			#max: #(#{Core.Point} 390 381 ) 			#bounds: #(#{Graphics.Rectangle} 576 432 966 818 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 ) 					#name: #tabbing 					#model: #tabs 					#labels: #() ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -227 1 -30 1 -119 1 -7 1 ) 					#name: #create 					#flags: 40 					#model: #create 					#label: 'Create' 					#isDefault: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -113 1 -30 1 -6 1 -7 1 ) 					#name: #closeButton 					#model: #closeRequest 					#label: 'Close' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2Documenter class</class-id> <category>resources</category><body package="ADvance2">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 3 put: (ColorValue scaledRed: 0 scaledGreen: 4227 scaledBlue: 4227); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3@@@@L3@CL3L3L3L3@@@@L0Q@L3L3L3L3@@@@L0PDT3L0@CL3@@@@L0QD@3@DQ@L3@@@@L0QDP@QDA@@C@@@@L0QDQQPDQ@HC@@@@L0QDUUQDQ@HC@@@@L0QDQQQDQ@HC@@@@L0PDUUQDQ@HC@@@@L0UDQQQDQ@HC@@@@L0ITUUPDA@HC@@@@L3@%PAQDQ@HC@@@@L3LBTA@@@@HC@@@@L3LB@@H"H"HC@@@@L3LBH @@@@@C@@@@L3L0@CL3L3L3@@@@L3L3L3L3L3L3@@@@'))</body></methods><methods><class-id>ICC.ADvance.AD2GeneralPreferencesDialog class</class-id> <category>interface specs</category><body package="ADvance2">advancedSpec	"Tools.UIPainter new openOnClass: self andSelector: #advancedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 394 205 ) 			#max: #(#{Core.Point} 394 205 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1034 717 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 101 0 -21 1 201 0 ) 					#label: 'Access Class Info using' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 40 128 ) 					#name: #classInfoSourceCommentRadio 					#model: #classInfoSource 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedClassInfoSource ) 					#label: 'Class Comment' 					#select: #comment ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 16 0 -16 1 94 0 ) 					#flags: 4 					#model: #advancedText 					#isReadOnly: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 40 161 ) 					#name: #classInfoSourceSelectorRadio 					#model: #classInfoSource 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedClassInfoSource ) 					#label: 'Selector' 					#select: #selector ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 135 0 156 0 -40 1 181 0 ) 					#name: #classInfoSelectorField 					#model: #classInfoSelector 					#type: #symbol ) ) ) )</body><body package="ADvance2">cacheSpec	"UIPainter new openOnClass: self andSelector: #cacheSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' '			#min: #(#{Core.Point} 394 239 )			#max: #(#{Core.Point} 402 239 )			#bounds: #(#{Graphics.Rectangle} 653 535 1055 774 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 80 105 130 128 )					#flags: 40					#model: #typeCacheSize					#type: #number )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 135 107 )					#label: 'Objects' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.Rectangle} 235 105 365 128 )					#model: #clearTypeCache					#label: 'Clear Cache Now' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 80 178 130 201 )					#flags: 40					#model: #messageCacheSize					#type: #number )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 135 180 )					#label: 'Objects' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.Rectangle} 236 178 366 201 )					#flags: 40					#model: #clearMessageCache					#label: 'Clear Cache Now' )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 16 0 -16 1 80 0 )					#flags: 4					#model: #cacheText					#isReadOnly: true )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 80 0 -20 1 140 0 )					#label: 'Type cache' )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 153 0 -20 1 213 0 )					#label: 'Message cache' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 33 107 )					#label: 'Size:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 33 180 )					#label: 'Size:' ) ) ) )</body><body package="ADvance2">filterSpec	"UIPainter new openOnClass: self andSelector: #filterSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' '			#min: #(#{Core.Point} 389 238 )			#max: #(#{Core.Point} 389 238 )			#bounds: #(#{Graphics.Rectangle} 608 517 997 755 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.Rectangle} 235 105 365 128 )					#model: #chooseDefaultFilter					#label: 'Choose Filter...' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 36 105 225 128 )					#name: #defaultFilterName					#model: #defaultFilterName					#isReadOnly: true )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 16 0 -16 1 80 0 )					#flags: 4					#model: #filterText					#isReadOnly: true )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 80 0 -20 1 140 0 )					#label: 'Default filter' ) ) ) )</body><body package="ADvance2">identitySpec	"UIPainter new openOnClass: self andSelector: #identitySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' '			#min: #(#{Core.Point} 394 201 )			#max: #(#{Core.Point} 394 201 )			#bounds: #(#{Graphics.Rectangle} 634 570 1028 771 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 20 83 )					#label: 'Nick Name:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 20 111 )					#label: 'Name:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 20 139 )					#label: 'Organization:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 140 82 240 105 )					#model: #userNickName )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 140 0 110 0 -20 1 133 0 )					#model: #userName )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 140 0 138 0 -20 1 161 0 )					#model: #userOrganization )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 16 0 -16 1 80 0 )					#flags: 4					#model: #identityText					#isReadOnly: true ) ) ) )</body><body package="ADvance2">subjectPackageSpec	"Tools.UIPainter new openOnClass: self andSelector: #subjectPackageSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 389 238 ) 			#max: #(#{Core.Point} 389 238 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1029 750 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -53 0.25 211 0 77 0.25 234 0 ) 					#name: #chooseDefaultSubjectPackageButton 					#model: #chooseDefaultSubjectPackage 					#label: 'Choose Package...' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 182 0 -12 0.5 205 0 ) 					#name: #defaultSubjectPackageNameInput 					#model: #defaultSubjectPackageName 					#isReadOnly: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 16 0 -15 1 80 0 ) 					#name: #subjectPackageTextEditor 					#flags: 4 					#model: #subjectPackageText 					#isReadOnly: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 90 0 -5 0.5 -5 1 ) 					#name: #subjectGroup 					#label: 'Package for new subject classes' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -67 0.75 211 0 63 0.75 234 0 ) 					#name: #chooseDefaultSubjectMethodPackageButton 					#model: #chooseDefaultSubjectMethodPackage 					#label: 'Choose Package...' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0.5 182 0 -17 1 205 0 ) 					#name: #defaultSubjectMethodPackageNameInput 					#model: #defaultSubjectMethodPackageName 					#isReadOnly: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 90 0 -10 1 -5 1 ) 					#name: #methodGroup 					#label: 'Package for new subject methods' ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 129 0 -12 0.5 152 0 ) 					#name: #subjectPackageSelectionModeComboBox 					#model: #subjectPackageSelectionMode 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSubjectPackageSelectionMode ) 					#comboList: #subjectPackageSelectionModeList ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0.5 129 0 -17 1 152 0 ) 					#name: #subjectMethodPackageSelectionModeComboBox 					#model: #subjectMethodPackageSelectionMode 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSubjectMethodPackageSelectionMode ) 					#comboList: #subjectMethodPackageSelectionModeList ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'General Preferences'			#min: #(#{Core.Point} 423 316 )			#max: #(#{Core.Point} 423 316 )			#bounds: #(#{Graphics.Rectangle} 571 589 994 905 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#model: #closeRequest					#label: 'Cancel' )				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#labels: #() ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2SubjectPropertiesDialog class</class-id> <category>interface specs</category><body package="ADvance2">descriptionSpec	"UIPainter new openOnClass: self andSelector: #descriptionSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 419 294 )			#max: #(#{Core.Point} 419 294 )			#bounds: #(#{Graphics.Rectangle} 665 468 1084 762 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 20 0 -20 1 -20 1 )					#model: #description					#tabable: true					#isReadOnly: false ) ) ) )</body><body package="ADvance2">generalSpec	"UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 321 141 )			#max: #(#{Core.Point} 321 141 )			#bounds: #(#{Graphics.Rectangle} 761 482 1082 623 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 100 0 20 0 -20 1 43 0 )					#flags: 0					#model: #subjectName					#tabable: false					#isReadOnly: true )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 20 0 99 0 0 1 )					#label: #containerLabel )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 100 0 78 0 -20 1 101 0 )					#name: #containerName					#model: #containerName )				#(#{UI.DividerSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 62 0 -20 1 66 0 ) )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 30 15 )					#label: #subjectOpaqueImage					#hasCharacterOrientedLabel: false ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Subject Properties'			#min: #(#{Core.Point} 465 329 )			#max: #(#{Core.Point} 465 329 )			#bounds: #(#{Graphics.Rectangle} 764 485 1229 814 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#tabable: false					#labels: #() )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#name: #cancelButton					#model: #doCancel					#label: 'Cancel' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2ChooseColorDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choose Color' 			#min: #(#{Core.Point} 228 157 ) 			#max: #(#{Core.Point} 228 157 ) 			#bounds: #(#{Graphics.Rectangle} 576 432 804 589 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #() 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 36 0 6 0 -6 1 -36 1 ) 						#name: #colorSpace 						#flags: 8 						#isOpaque: true ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 ) 					#name: #okButton 					#flags: 40 					#model: #doAccept 					#label: 'OK' 					#isDefault: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 ) 					#name: #cancelButton 					#model: #doCancel 					#label: 'Cancel' ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 29 0 -7 1 ) 					#name: #colorRegion 					#lineWidth: 1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 36 0 -30 1 59 0 -7 1 ) 					#name: #pickColorButton 					#model: #pickColor 					#label: '...' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2Workbench class</class-id> <category>resources</category><body package="ADvance2">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^(Image extent: 32@32 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 6552 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 5 put: Graphics.ColorValue white; at: 6 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4111 scaledBlue: 0); at: 7 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 0); at: 8 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 0); at: 9 put: (Graphics.ColorValue scaledRed: 6552 scaledGreen: 0 scaledBlue: 0); at: 10 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 11 put: Graphics.ColorValue blue; at: 12 put: Graphics.ColorValue red; at: 13 put: Graphics.ColorValue green; at: 14 put: (Graphics.ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 15 put: Graphics.ColorValue yellow; at: 16 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6135); yourself)) usingBits: (ByteArray fromPackedString: 'DQDQDQDQDQDADQDQDQDQDQDQDQDQDQDUTADQDQDQDQDQDQDQDQDQUBTADQDQDQDQDQDQDQDQDUH%@U@ADQDQDQDQDQDQDQETIPARH@DQDQDQDQDQDQDQT"TAEUH @QDQDQDQDQDQERP%TADUT"@ADQDQDQDQDUIBIUTADQURH@DQDQDQDQT$H"IUTADQEUHADQDQDQDUUUUUT@@QDQER@QDQDQDQDQE&gt;; DQDQDUHADQDQDQDQDQE7@QDQDQER@QDQDQDQDQDQDQDQDQDUHADQDQDQDQDQDQDQDQDQER@QDQDQDQDQDQDQDQDQDUHADQDQDQDQDQDQDQDQDQER@QDQDQDQDQDQDQDQDQDUUU@QDQDQ&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y%RIP&amp;PDQDY7]7]7]7]7]7]T@@I$ADQ%M7[--7]7]**O]&amp;Y&amp;]@QDYS]"HZ]7]7??3'']7]6PDQ%M7X"F'']7]??&lt;97]7]$ADYS]6H"Y7]7_??N]7]6Y@Q%M7]6Y''\3E7??9'']7]&amp;PDYS]7]7]H"IY6Y&amp;]7]6Y@Q%M7]7]7RH"&amp;]7]7]7]&amp;PDYS]7]7]7Y&amp;Y7]7]7]6Y@Q%M7]7]7]7]7]7]7]7]&amp;PDYQDQDQDQDQDQDQDQDRY@QF]7]7]7]7]7]7]7]7]&amp;PDQ&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y@QDP@@@@@@@@@@@@@@@@@@DQDb'))</body><body package="ADvance2">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;About...' 							#value: #about ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Preferences' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;General Preferences' 										#value: #primGeneralPreferences ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Painter Preferences' 										#value: #painterPreferences ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Close' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Tools' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Diagram Painter' 							#value: #openDiagramPainter ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Subject Browser' 							#value: #openSubjectBrowser ) 						#(#{UI.MenuItem} 							#rawLabel: 'Filter &amp;Browser' 							#value: #openFilterBrowser ) 						#(#{UI.MenuItem} 							#rawLabel: 'Filter &amp;Palette' 							#value: #openFilterPalette ) 						#(#{UI.MenuItem} 							#rawLabel: 'D&amp;ocumenter' 							#value: #openDocumenter ) ) #(3 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Plug-ins' 				#nameKey: #plugins 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'dummy' ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2Workbench class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ADvance Workbench' 			#min: #(#{Core.Point} 226 62 ) 			#max: #(#{Core.Point} 226 62 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 866 574 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 1 0 1 2 1 ) 					#name: #Divider1 ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2ChooseFontDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Choose Font'			#min: #(#{Core.Point} 218 222 )			#max: #(#{Core.Point} 285 236 )			#bounds: #(#{Graphics.Rectangle} 564 403 849 639 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 6 0 21 0 0 1 )					#label: 'Font:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} -68 1 21 0 0 1 )					#label: 'Size:' )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 -100 1 -6 1 -40 1 )					#label: 'Sample' )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 12 0 -80 1 -8 1 -42 1 )					#name: #sample					#flags: 4					#model: #sampleText					#isReadOnly: true )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 21 0 -70 1 43 0 )					#name: #fontFamily					#model: #fontFamily					#tabable: false					#isReadOnly: false )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 43 0 -70 1 -110 1 )					#model: #familyList )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} -68 1 21 0 -6 1 43 0 )					#model: #fontSize					#type: #number )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} -68 1 43 0 -6 1 -110 1 )					#model: #sizesList )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -31 1 -86 1 -8 1 )					#name: #okButton					#flags: 40					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -31 1 -6 1 -8 1 )					#model: #doCancel					#label: 'Cancel' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard class</class-id> <category>interface specs</category><body package="ADvance2">chooseClassSpec	"UIPainter new openOnClass: self andSelector: #chooseClassSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Unlabeled Canvas'			#bounds: #(#Rectangle 56 280 380 573 ) )		#component:		#(#SpecCollection			#collection: #(				#(#TextEditorSpec					#layout: #(#LayoutFrame 10 0 10 0 -10 1 80 0 )					#flags: 4					#model: #chooseClassText					#isReadOnly: true )				#(#InputFieldSpec					#layout: #(#LayoutFrame 16 0 80 0 -20 1 104 0 )					#model: #subjectName					#type: #string )				#(#ActionButtonSpec					#layout: #(#Rectangle 16 110 136 133 )					#model: #pickSubjectClass					#label: 'Choose class...' ) ) ) )</body><body package="ADvance2">finishSpec	"UIPainter new openOnClass: self andSelector: #finishSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Unlabeled Canvas'			#bounds: #(#Rectangle 179 193 503 486 ) )		#component:		#(#SpecCollection			#collection: #(				#(#TextEditorSpec					#layout: #(#LayoutFrame 10 0 10 0 -10 1 80 0 )					#flags: 4					#model: #finishText					#isReadOnly: true ) ) ) )</body><body package="ADvance2">paintingSpec	"UIPainter new openOnClass: self andSelector: #paintingSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: ''			#min: #(#Point 141 280 )			#max: #(#Point 141 280 )			#bounds: #(#Rectangle 254 187 395 467 ) )		#component:		#(#SpecCollection			#collection: #(				#(#RegionSpec					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 )					#colors:					#(#LookPreferences						#setBackgroundColor: #(#ColorValue 0 4112 4112 ) ) )				#(#LabelSpec					#layout: #(#Point 21 149 )					#label: #openedSubjectOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 52 107 )					#label: #classesOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 70 123 )					#label: #classOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 62 148 )					#label: #inOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 33 126 )					#label: #outOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 52 31 )					#label: #subjectOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 75 27 )					#label: #penOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 49 28 )					#label: #newOpaqueImage					#hasCharacterOrientedLabel: false ) ) ) )</body><body package="ADvance2">selectContainerSpec	"UIPainter new openOnClass: self andSelector: #selectContainerSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Unlabeled Canvas'			#bounds: #(#Rectangle 142 208 466 501 ) )		#component:		#(#SpecCollection			#collection: #(				#(#TextEditorSpec					#layout: #(#LayoutFrame 10 0 10 0 -10 1 34 0 )					#flags: 4					#model: #selectFromListText					#isReadOnly: true )				#(#SequenceViewSpec					#layout: #(#LayoutFrame 16 0 36 0 -26 1 -10 1 )					#name: #containerList					#model: #containerList					#callbacksSpec:					#(#UIEventCallbackSubSpec						#doubleClickSelector: #next ) ) ) ) )</body><body package="ADvance2">selectInitialContentsSpec	"UIPainter new openOnClass: self andSelector: #selectInitialContentsSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Unlabeled Canvas'			#bounds: #(#Rectangle 169 175 493 468 ) )		#component:		#(#SpecCollection			#collection: #(				#(#TextEditorSpec					#layout: #(#LayoutFrame 10 0 10 0 -10 1 80 0 )					#flags: 4					#model: #initialText					#isReadOnly: true )				#(#ComboBoxSpec					#layout: #(#LayoutFrame 16 0 80 0 -20 1 103 0 )					#model: #initialContents					#comboList: #initialContentsList ) ) ) )</body><body package="ADvance2">selectPackageSpec	"UIPainter new openOnClass: self andSelector: #selectPackageSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 576 432 900 725 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 34 0 ) 					#flags: 4 					#model: #selectFromListText 					#isReadOnly: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 36 0 -26 1 -10 1 ) 					#name: #packageList 					#model: #packageList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #next ) ) ) ) )</body><body package="ADvance2">selectParcelSpec	"UIPainter new openOnClass: self andSelector: #selectParcelSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Unlabeled Canvas'			#bounds: #(#Rectangle 142 208 466 501 ) )		#component:		#(#SpecCollection			#collection: #(				#(#TextEditorSpec					#layout: #(#LayoutFrame 10 0 10 0 -10 1 34 0 )					#flags: 4					#model: #selectFromListText					#isReadOnly: true )				#(#SequenceViewSpec					#layout: #(#LayoutFrame 16 0 36 0 -26 1 -10 1 )					#name: #parcelList					#model: #parcelList					#callbacksSpec:					#(#UIEventCallbackSubSpec						#doubleClickSelector: #next ) ) ) ) )</body><body package="ADvance2">selectSubjectSpec	"UIPainter new openOnClass: self andSelector: #selectSubjectSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Unlabeled Canvas'			#bounds: #(#Rectangle 263 212 587 505 ) )		#component:		#(#SpecCollection			#collection: #(				#(#TextEditorSpec					#layout: #(#LayoutFrame 10 0 10 0 -10 1 34 0 )					#flags: 4					#model: #selectSubjectText					#isReadOnly: true )				#(#'UI.TreeViewSpec'					#layout: #(#LayoutFrame 16 0 36 0 -26 1 -10 1 )					#name: #subjectTree					#flags: 15					#model: #subjectTree					#tabable: false					#useModifierKeys: true					#selectionType: #highlight					#displayStringSelector: #subjectName					#useIcons: #folder ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2SubjectWizard class</class-id> <category>resources</category><body package="ADvance2">classImage	"UIMaskEditor new openOnClass: self andSelector: #classImage"	&lt;resource: #image&gt;	^(Image extent: 11@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 5 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); yourself)) usingBits: #[51 51 51 51 51 0 0 0 50 34 34 34 35 0 0 0 50 20 20 20 19 0 0 0 50 65 65 65 67 0 0 0 52 51 51 51 51 0 0 0 50 65 65 65 67 0 0 0 50 20 20 20 19 0 0 0 50 65 65 65 67 0 0 0 50 20 20 20 19 0 0 0 52 51 51 51 51 0 0 0 50 20 20 20 19 0 0 0 50 65 65 65 67 0 0 0 50 20 20 20 19 0 0 0 50 65 65 65 67 0 0 0 51 51 51 51 51 0 0 0 0 0 0 0 0 0 0 0])</body><body package="ADvance2">classesImage	"UIMaskEditor new openOnClass: self andSelector: #classesImage"	&lt;resource: #image&gt;	^(Image extent: 15@20 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: ColorValue white; at: 5 put: ColorValue yellow; at: 6 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[34 34 85 85 85 85 85 0 34 34 83 51 51 51 53 0 34 85 85 85 85 85 5 0 34 83 51 51 51 53 5 0 85 85 85 85 85 5 5 0 83 51 51 51 53 5 5 0 83 65 65 65 69 5 5 0 83 20 20 20 21 5 5 0 81 85 85 85 85 5 5 0 83 20 20 20 21 5 5 0 83 65 65 65 69 5 5 0 83 20 20 20 21 5 5 0 83 65 65 65 69 5 5 0 81 85 85 85 85 5 5 0 83 65 65 65 69 5 5 0 83 20 20 20 21 5 0 0 83 65 65 65 69 5 2 32 83 20 20 20 21 0 2 32 85 85 85 85 85 2 34 32 0 0 0 0 0 2 34 32])</body><body package="ADvance2">inImage	"UIMaskEditor new openOnClass: self andSelector: #inImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 13@19 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: ColorValue black; at: 3 put: ColorValue red; at: 4 put: (ColorValue scaledRed: 4112 scaledGreen: 0 scaledBlue: 0); at: 5 put: ColorValue white; yourself)) usingBits: #[0 0 0 3 0 0 0 0 0 0 0 3 17 0 0 0 0 0 0 3 35 17 0 0 0 0 0 3 34 51 16 0 0 0 0 3 67 35 16 0 0 0 0 3 34 51 16 0 0 0 0 50 66 35 16 0 0 0 0 52 34 49 0 0 48 0 3 66 66 49 0 0 51 48 3 68 35 16 0 0 50 67 52 66 49 0 0 0 52 36 36 35 16 0 0 0 50 66 66 67 48 0 0 0 50 34 36 36 35 48 0 0 50 34 34 67 49 16 0 0 50 34 35 49 16 0 0 0 50 51 49 16 0 0 0 0 51 17 16 0 0 0 0 0 17 0 0 0 0 0 0 0])</body><body package="ADvance2">newImage	"UIMaskEditor new openOnClass: self andSelector: #newImage"	&lt;resource: #image&gt;	^(Image extent: 10@9 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 3 put: ColorValue white; at: 4 put: ColorValue yellow; yourself)) usingBits: #[1 128 0 0 193 193 128 0 113 135 0 0 29 220 0 0 183 179 48 0 86 192 0 0 9 128 0 0 65 192 0 0 129 128 0 0])</body><body package="ADvance2">openedSubjectImage	"UIMaskEditor new openOnClass: self andSelector: #openedSubjectImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@27 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 6605); at: 6 put: ColorValue yellow; at: 7 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"I&amp;Y&amp;Y&amp;X"H"H"H"H"H"H"H&amp;L3L3L3X"H"H"H"H"H"H"X5QTUEQTX"H"H"H"H"H"I#UEQTUEQTX"H"H"H"H"H&amp;MTUEQTUEQTY&amp;Y&amp;Y&amp;Y"H"I#QTUEQTUEQSL3L3L3LBH"X5QTUEQTUEQTUEQTUEDBH&amp;MEQTUEQTUEQTUEQTUA@"I#UEQTUEQTUEQTUEQTTPI&amp;QDQDQDQDQDQDQDQDQTDFL3L3L3L3L3L3L3L3L0YQA%QTUEQTUEQTUEQTUEQ PPYEQTUEQTUEQTUEQTUEXEDFUEQTUEQTUEQTUEQTUEA!A$UEQTUEQTUEQTUEQTU@XPI$UEQTUEQTUEQTUEQTU DBYTUEQTUEQTUEQTUEQTXA@&amp;QTUEQTUEQTUEQTUEQT@PI%QTUEQTUEQTUEQTUEQPDBI%QTUEQTUEQTUEQTUEQ @"YEQTUEQTUEQTUEQTUEX@H&amp;UEQTUEQTUEQTUEQTUD@BI$UEQTUEQTUEQTUEQTU@@"I$UEQTUEQTUEQTUEQTTPH"YTUEQTUEQTUEQTUEQTDBH&amp;DQDQDQDQDQDQDQDQDQ@"H @@@@@@@@@@@@@@@@@B'))</body><body package="ADvance2">outImage	"UIMaskEditor new openOnClass: self andSelector: #outImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 13@19 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: ColorValue black; at: 3 put: ColorValue red; at: 4 put: (ColorValue scaledRed: 4112 scaledGreen: 0 scaledBlue: 0); at: 5 put: ColorValue white; yourself)) usingBits: #[0 0 0 0 0 51 16 0 0 0 0 3 51 35 16 0 0 0 3 50 34 35 16 0 0 3 52 34 34 35 16 0 3 50 66 66 34 35 16 0 0 3 52 36 36 35 16 0 0 0 52 66 66 67 16 0 0 3 68 67 52 35 16 0 0 50 68 49 3 51 16 0 3 36 36 49 0 3 16 0 3 34 67 16 0 0 0 0 50 34 35 16 0 0 0 0 51 34 49 0 0 0 0 0 50 50 49 0 0 0 0 0 51 35 49 0 0 0 0 0 17 50 49 0 0 0 0 0 0 17 49 0 0 0 0 0 0 0 17 0 0 0 0 0 0 0 1 0 0 0 0 0])</body><body package="ADvance2">penImage	"UIMaskEditor new openOnClass: self andSelector: #penImage"	&lt;resource: #image&gt;	^(Image extent: 7@11 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: ColorValue black; at: 3 put: ColorValue yellow; at: 4 put: ColorValue lightGray; at: 5 put: (ColorValue scaledRed: 6553 scaledGreen: 0 scaledBlue: 6135); yourself)) usingBits: #[0 0 17 0 0 1 68 16 0 17 20 16 0 18 17 0 0 18 17 0 1 35 16 0 1 33 16 0 18 49 0 0 18 17 0 0 17 16 0 0 17 0 0 0])</body></methods><methods><class-id>ICC.ADvance.AD2Dialog class</class-id> <category>resources</category><body package="ADvance2">underConstructionImage	"UIMaskEditor new openOnClass: self andSelector: #underConstructionImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 40@40 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 8191 scaledGreen: 7398 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: '*****(@****** @@***** @N***** @@*****AUC***** @@****(EUP:**** @@**** UUTN**** @@****AUUUC**** @@***(EUUUP:*** @@*** UT@UTN*** @@***AUP@EUC*** @@**(EUP@EUP:** @@** UUP@EUTN** @@**AUUP@EUUC** @@*(D@@D@UUUP:* @@* TUPAUUUUTN* @@*ATU@@UUUUUC* @@(ETP@DUUUUUP: @@ UTP@TUT@UUTN @@AUT@ATUT@EUUC @@AUT@@@@@@AUUC0@@AUA@ATUT@EUUC0@@AUU@@UUT@UUUC0@@ UU@@EUUUPUTO0@@(EU@PAUUUPUP? @@*AU@TAUUTUUC&gt; @@* U@TAUPTQTO: @@*(E@TAU@EQP?* @@**A@TET@AUC&gt;* @@** PTAP@@TO:* @@**(DTAP@@P?** @@***AUUUUUC&gt;** @@*** UUUUTO:** @@***(EUUUP?*** @@****AUUUC&gt;*** @@**** UUTO:*** @@****(EUP?**** @@*****AUC&gt;**** @@***** @O:**** @@*****(@?***** @@******/&gt;***** @@************* @@'))</body></methods><methods><class-id>ICC.ADvance.AD2DiagramPropertiesDialog class</class-id> <category>interface specs</category><body package="ADvance2">descriptionSpec	"UIPainter new openOnClass: self andSelector: #descriptionSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 419 294 )			#max: #(#{Core.Point} 419 294 )			#bounds: #(#{Graphics.Rectangle} 606 516 1025 810 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 20 0 -20 1 -20 1 )					#model: #description					#tabable: true					#isReadOnly: false ) ) ) )</body><body package="ADvance2">generalSpec	"UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 321 195 )			#max: #(#{Core.Point} 321 195 )			#bounds: #(#{Graphics.Rectangle} 508 440 829 635 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 30 0 40 0 0 1 )					#label: #image					#hasCharacterOrientedLabel: false )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 100 0 20 0 -20 1 44 0 )					#flags: 0					#model: #name					#tabable: false					#isReadOnly: true )				#(#{UI.DividerSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 55 0 -20 1 59 0 ) )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 18 64 )					#label: 'Created:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 18 90 )					#label: 'Modified:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 18 126 )					#label: 'Author:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 100 0 88 0 -20 1 112 0 )					#flags: 0					#model: #modificationDate					#tabable: false					#isReadOnly: true					#type: #string )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 100 0 63 0 -20 1 87 0 )					#flags: 0					#model: #creationDate					#tabable: false					#isReadOnly: true					#type: #string )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 100 0 123 0 -20 1 147 0 )					#flags: 0					#model: #author					#tabable: false					#isReadOnly: true )				#(#{UI.DividerSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 117 0 -20 1 121 0 ) ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Diagram Properties'			#min: #(#{Core.Point} 465 329 )			#max: #(#{Core.Point} 465 329 )			#bounds: #(#{Graphics.Rectangle} 648 541 1113 870 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#tabable: false					#labels: #() )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#name: #cancelButton					#model: #doCancel					#label: 'Cancel' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog class</class-id> <category>interface specs</category><body package="ADvance2">hierarchySpec	"UIPainter new openOnClass: self andSelector: #hierarchySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 346 296 )			#max: #(#{Core.Point} 346 296 )			#bounds: #(#{Graphics.Rectangle} 403 284 749 580 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.TreeViewSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 )					#name: #classTree					#model: #classTree					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#doubleClickSelector: #doAccept )					#menu: #classMenu					#useModifierKeys: true					#selectionType: #highlight					#displayStringSelector: #fullName					#useIcons: #folder ) ) ) )</body><body package="ADvance2">listSpec	"UIPainter new openOnClass: self andSelector: #listSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 346 296 )			#max: #(#{Core.Point} 346 296 )			#bounds: #(#{Graphics.Rectangle} 625 533 971 829 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 )					#name: #sortedClasses					#model: #sortedClasses					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#doubleClickSelector: #doAccept )					#menu: #classMenu					#useModifierKeys: true					#selectionType: #highlight ) ) ) )</body><body package="ADvance2">organizationSpec	"UIPainter new openOnClass: self andSelector: #organizationSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 346 296 ) 			#max: #(#{Core.Point} 346 296 ) 			#bounds: #(#{Graphics.Rectangle} 576 432 922 728 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -1 0.5 0 1 ) 					#name: #containers 					#flags: 15 					#model: #containers 					#menu: #containerMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.5 0 0 0 1 0 1 ) 					#name: #containerClasses 					#flags: 15 					#model: #containerClasses 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doAccept ) 					#menu: #classMenu 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body><body package="ADvance2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choose Class' 			#min: #(#{Core.Point} 430 276 ) 			#max: #(#{Core.Point} 430 276 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1070 788 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 38 0 -6 1 -38 1 ) 					#name: #classView 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -181 1 -30 1 -96 1 -7 1 ) 					#name: #okButton 					#flags: 40 					#model: #doAccept 					#label: 'OK' 					#isDefault: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -91 1 -30 1 -6 1 -7 1 ) 					#name: #cancel 					#model: #doCancel 					#label: 'Cancel' ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -164 1 10 0 -140 1 32 0 ) 					#name: #newClass 					#model: #newClass 					#helpText: 'New Class' 					#label: #newClassOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -130 1 10 0 -106 1 32 0 ) 					#name: #parcel 					#model: #viewType 					#helpText: 'Parcel list' 					#label: #parcelOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #parcel ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -105 1 10 0 -81 1 32 0 ) 					#name: #package 					#model: #viewType 					#helpText: 'Package list' 					#label: #packageOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #package ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -80 1 10 0 -56 1 32 0 ) 					#name: #category 					#model: #viewType 					#helpText: 'Category list' 					#label: #categoryOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #category ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -55 1 10 0 -31 1 32 0 ) 					#name: #hierarchy 					#model: #viewType 					#helpText: 'Hierarchy view' 					#label: #hierarchyOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #hierarchy ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -30 1 10 0 -6 1 32 0 ) 					#name: #list 					#model: #viewType 					#helpText: 'Alphabetical class list' 					#label: #listOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #list ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2PickClassDialog class</class-id> <category>resources</category><body package="ADvance2">categoryImage	"UIMaskEditor new openOnClass: self andSelector: #categoryImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: Graphics.ColorValue black; at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4111 scaledBlue: 0); yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 0 0 0 0 0 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 0 0 0 0 0 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 0 0 0 0 0 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="ADvance2">classMenu	"MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: 'Find class...'				#value: #findClass ) ) #(1 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">hierarchyImage	"UIMaskEditor new openOnClass: self andSelector: #hierarchyImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 5 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 6 put: Graphics.ColorValue yellow; yourself)) usingBits: #[17 17 0 0 0 1 17 17 17 0 0 0 17 17 2 82 82 4 17 17 17 0 0 0 17 17 5 85 85 4 17 17 17 0 0 0 17 17 2 85 85 4 17 17 17 0 0 0 17 17 0 0 0 4 17 17 17 0 0 0 17 17 20 64 68 68 17 17 17 0 0 0 17 17 17 16 49 17 17 17 17 0 0 0 17 16 0 0 0 0 1 17 17 0 0 0 17 16 51 51 51 51 3 17 17 0 0 0 0 0 0 1 16 0 0 0 17 0 0 0 2 82 82 4 16 37 37 32 65 0 0 0 5 85 85 4 16 85 85 80 65 0 0 0 2 85 85 4 16 37 85 80 65 0 0 0 0 0 0 4 16 0 0 0 65 0 0 0 20 68 68 68 17 68 68 68 65 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0])</body><body package="ADvance2">listImage	"UIMaskEditor new openOnClass: self andSelector: #listImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 2 put: Graphics.ColorValue black; at: 3 put: Graphics.ColorValue yellow; at: 4 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 5 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 1 17 17 0 0 0 0 0 0 0 0 0 1 34 33 3 51 51 51 51 0 0 0 0 1 34 33 0 68 68 68 68 64 0 0 0 1 17 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 17 17 0 0 0 0 0 0 0 0 0 1 34 33 3 51 51 51 51 0 0 0 0 1 34 33 0 68 68 68 68 64 0 0 0 1 17 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 17 17 0 0 0 0 0 0 0 0 0 1 34 33 3 51 51 51 51 0 0 0 0 1 34 33 0 68 68 68 68 64 0 0 0 1 17 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="ADvance2">newClassImage	"UIMaskEditor new openOnClass: self andSelector: #newClassImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 5 put: ColorValue yellow; at: 6 put: ColorValue lightGray; at: 7 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 0); yourself)) usingBits: #[17 17 50 17 17 17 17 17 17 0 0 0 20 17 52 17 50 17 17 17 17 0 0 0 19 65 50 19 65 17 17 17 17 0 0 0 17 52 52 52 0 0 17 17 17 0 0 0 18 67 66 69 101 96 49 17 17 0 0 0 19 51 36 6 86 80 49 17 17 0 0 0 17 18 50 0 0 0 49 17 17 0 0 0 19 17 52 2 66 64 49 17 17 0 0 0 18 17 50 4 36 32 49 17 17 0 0 0 17 17 17 0 0 0 49 17 17 0 0 0 17 17 17 2 66 64 49 17 17 0 0 0 17 17 17 4 36 32 49 17 17 0 0 0 17 17 17 0 0 0 49 17 17 0 0 0 17 17 17 19 51 51 49 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0])</body><body package="ADvance2">packageImage	"UIMaskEditor new openOnClass: self andSelector: #packageImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 13) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 4753); at: 4 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 3950); at: 5 put: Graphics.ColorValue white; at: 6 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 7 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 4240); at: 8 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 5557); at: 9 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 4240); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 6070); at: 11 put: (Graphics.ColorValue scaledRed: 3180 scaledGreen: 3180 scaledBlue: 3180); at: 12 put: (Graphics.ColorValue scaledRed: 2120 scaledGreen: 2120 scaledBlue: 2120); at: 13 put: (Graphics.ColorValue scaledRed: 6327 scaledGreen: 6327 scaledBlue: 3180); yourself)) usingBits: #[17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 0 0 0 0 17 17 0 0 0 17 17 16 73 153 137 153 1 17 0 0 0 17 17 7 136 136 136 146 1 17 0 0 0 17 16 73 153 137 153 131 1 17 0 0 0 17 9 68 71 68 66 163 1 17 0 0 0 17 91 185 42 41 187 163 1 17 0 0 0 17 180 96 42 43 70 3 1 17 0 0 0 17 182 192 42 43 108 3 1 17 0 0 0 17 80 2 42 34 0 160 17 17 0 0 0 26 182 96 59 171 102 10 17 17 0 0 0 27 102 204 0 182 108 192 17 17 0 0 0 16 0 0 1 0 0 0 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0])</body><body package="ADvance2">parcelImage	"UIMaskEditor new openOnClass: self andSelector: #parcelImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 10) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 4753); at: 3 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 3950); at: 4 put: (Graphics.ColorValue scaledRed: 3180 scaledGreen: 3180 scaledBlue: 3180); at: 5 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 4240); at: 6 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 7 put: (Graphics.ColorValue scaledRed: 2120 scaledGreen: 2120 scaledBlue: 2120); at: 8 put: Graphics.ColorValue white; at: 9 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 5557); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 6070); yourself)) usingBits: #[85 85 85 85 85 85 85 85 85 0 0 0 85 85 85 85 85 85 85 85 85 0 0 0 85 85 85 0 0 0 0 85 85 0 0 0 85 85 80 121 153 73 153 5 85 0 0 0 85 85 8 68 68 68 145 5 85 0 0 0 85 80 121 153 73 153 66 5 85 0 0 0 85 9 119 120 119 113 50 5 85 0 0 0 85 9 17 19 17 18 50 5 85 0 0 0 85 9 17 19 17 18 50 5 85 0 0 0 85 9 17 19 17 18 50 5 85 0 0 0 85 9 17 19 17 18 96 85 85 0 0 0 85 9 34 38 34 34 5 85 85 0 0 0 85 80 0 0 0 0 85 85 85 0 0 0 85 85 85 85 85 85 85 85 85 0 0 0 85 85 85 85 85 85 85 85 85 0 0 0 85 85 85 85 85 85 85 85 85 0 0 0])</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor class</class-id> <category>resources</category><body package="ADvance2">classMenu	"MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: 'Add'				#nameKey: #addClass				#value: #addClass )			#(#MenuItem				#rawLabel: 'Remove'				#nameKey: #removeClass				#value: #removeClass )			#(#MenuItem				#rawLabel: 'Add all...'				#nameKey: #addAllClasses				#value: #addAllClasses )			#(#MenuItem				#rawLabel: 'Remove all...'				#nameKey: #removeAllClasses				#value: #removeAllClasses )			#(#MenuItem				#rawLabel: 'Add superclasses'				#nameKey: #addSuperclasses				#value: #addSuperclasses )			#(#MenuItem				#rawLabel: 'Remove superclasses'				#nameKey: #removeSuperclasses				#value: #removeSuperclasses )			#(#MenuItem				#rawLabel: 'Add subclasses'				#nameKey: #addSubclasses				#value: #addSubclasses )			#(#MenuItem				#rawLabel: 'Remove subclasses'				#nameKey: #removeSubclasses				#value: #removeSubclasses )			#(#MenuItem				#rawLabel: 'Find class...'				#value: #findClass ) ) #(2 2 2 2 1 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">containerMenu	"MenuEditor new openOnClass: self andSelector: #containerMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: 'Add'				#nameKey: #addContainer				#value: #addContainer )			#(#MenuItem				#rawLabel: 'Remove'				#nameKey: #removeContainer				#value: #removeContainer )			#(#MenuItem				#rawLabel: 'Add all...'				#nameKey: #addAllContainers				#value: #addAllContainers )			#(#MenuItem				#rawLabel: 'Remove all...'				#nameKey: #removeAllContainers				#value: #removeAllContainers )			#(#MenuItem				#rawLabel: 'Add from change set'				#nameKey: #addFromChangeSet				#value: #addFromChangeSet )			#(#MenuItem				#rawLabel: 'Add from parcel...'				#nameKey: #addFromParcel				#value: #addFromParcel )			#(#MenuItem				#rawLabel: 'Add from subject...'				#nameKey: #addFromSubject				#value: #addFromSubject )			#(#MenuItem				#rawLabel: 'Find class...'				#nameKey: #findClass				#value: #findClass )			#(#MenuItem				#rawLabel: 'Update'				#nameKey: #updateLists				#value: #update ) ) #(2 2 3 1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2SubjectEditor class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Subject Editor' 			#min: #(#{Core.Point} 497 385 ) 			#max: #(#{Core.Point} 497 385 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1070 788 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 6 0 32 0 0 1 ) 					#name: #filterOn 					#model: #filterOn 					#helpText: 'Show all / Show only Subject contents' 					#label: 'Filter' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 38 0 -6 1 -38 1 ) 					#name: #classView 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -181 1 -30 1 -96 1 -7 1 ) 					#name: #okButton 					#model: #doAccept 					#label: 'OK' 					#isDefault: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -91 1 -30 1 -6 1 -7 1 ) 					#name: #cancel 					#model: #doCancel 					#label: 'Cancel' ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -139 1 10 0 -115 1 32 0 ) 					#name: #newClass 					#model: #newClass 					#helpText: 'Add New class' 					#label: #newClassOpaqueImage 					#hasCharacterOrientedLabel: false ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -105 1 10 0 -81 1 32 0 ) 					#name: #parcel 					#model: #viewType 					#helpText: 'Parcel list' 					#label: #parcelOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #parcel ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -80 1 10 0 -56 1 32 0 ) 					#name: #package 					#model: #viewType 					#helpText: 'Package list' 					#label: #packageOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #package ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -55 1 10 0 -31 1 32 0 ) 					#name: #category 					#model: #viewType 					#helpText: 'Category list' 					#label: #categoryOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #category ) 				#(#{ICC.ICC1LabeledRadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} -30 1 10 0 -6 1 32 0 ) 					#name: #list 					#model: #viewType 					#helpText: 'Alphabetical Class list' 					#label: #listOpaqueImage 					#hasCharacterOrientedLabel: false 					#select: #list ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2TextEditor class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Text Editor' 			#bounds: #(#{Graphics.Rectangle} 576 432 776 632 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #textEditor 					#model: #textHolder 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ICC.ADvance.ADvance class</class-id> <category>resources</category><body package="ADvance2">logo	"UIMaskEditor new openOnClass: self andSelector: #logo"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 34@41 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 4 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 5 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 6 put: ColorValue yellow; at: 7 put: (ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 7134); yourself)) usingBits: (ByteArray fromPackedString: 'PQDQDQEDQDQDQDPQDQDQDTP@@@@VY&amp;Y&amp;Y QDQDQDPVY&amp;Y&amp;Y&amp;A@@@@AYVU%YV@$QDQDQAYVU%YVTB@@@@E&amp;U%YVTBQDQDQDE&amp;U%YVU H@@@@VL3L3L0IDQDQDPVU%YVU%@ @@@AY%YVU%@$QDQB@!X3L3L3LB@@@@E%YVU%X@@@@@@@E%YVU%YPH@@@@VYVU%YPIDQDP HVYVU%YV@ @@@AYVU%YV@$QDQDQAYVU%YVTB@@@@E#L3L3LBQDQDQDE&amp;U%YVU H@@@@VU%YVU IDQDQDPVU%YVU%@ @@@AY%YVU%@$QDQDQAY%YVU%XB@@@@E%YVU%XBQDQDQDE%YVU%YPH@@@@VYVU%YPIDQDQDPVL3L3L3@ @@@AYVU%YV@$QDQDQAYVU%YVTB@@@@P@@@@@@"QDQDQDE&amp;U%YVU H@@@AAH"@"H"QDQDQDPVU%YVU%@ @@@DQDPDQDQDQDQDQAY%YVU%XB@@@@QDPFADQDQDQDQDE%YVU%YPH@@@ADPFY QDQDQDQDPVYVU%YV@ @@@DQ@@@@$QDQDQDQD@@@@@@@"@@@@QDQ@H"QDQDQDQDQBH"H"H"P@@@ADQDADQDQDQDQDQDQDQDQDQ@@@@DQDPDQDQDQDQDQDQDQDQDQD@@@@PQDQDQEDQDQDQDQDQDQDQDP@@@@VY&amp;Y&amp;Y QDQDQDQDQDQDQDQ@@@@AYVU%YV@$QDQDQDQDQDQDQD@@@@E&amp;U%YVTBQDQDQDQDQDQDQDP@@@@VL3L3L0IDQDQDQDQDQDQDQ@@@@AY%YVU%@$QDQDQDQDQDQDQD@@@@E%YVU%XBQDQDQDQDQDQDQDP@@@@VYVU%YPIDQDQDQDQDQDQDQ@@@@AYVU%YV@$QDQDQDQDQDQDQD@@@@E#L3L3LBQDQDQDQDQDQDQDP@@@@VU%YVU IDQDQDQDQDQDQDQ@@@@AY%YVU%@$QDQDQDQDQDQDQD@@@@E%YVU%XBQDQDQDQDQDQDQDP@@@@VYVU%YPIDQDQDQDQDQDQDQ@@@@AYVU%YV@$QDQDQDQDQDQDQD@@@@P@@@@@@"QDQDQDQDQDQDQDP@@@ADH"H"H"QDQDQDQDQDQDQDQ@@@@@@a'))</body></methods><methods><class-id>ICC.ADvance.AD2DiagramSpec class</class-id> <category>resources</category><body package="ADvance2">scriptsImage	"UIMaskEditor new openOnClass: self andSelector: #scriptsImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); yourself)) usingBits: #[17 34 34 34 34 34 33 17 17 0 0 0 17 35 51 51 51 51 32 17 17 0 0 0 17 35 51 51 51 51 35 1 17 0 0 0 17 35 51 51 51 51 0 0 17 0 0 0 17 35 51 51 51 51 51 64 17 0 0 0 17 35 51 51 51 48 51 64 17 0 0 0 17 35 0 0 0 0 3 64 17 0 0 0 17 35 51 51 51 48 51 64 17 0 0 0 17 35 0 0 51 51 51 64 17 0 0 0 17 35 51 48 51 48 51 64 17 0 0 0 17 35 51 48 0 0 3 64 17 0 0 0 17 35 51 51 51 48 51 64 17 0 0 0 17 35 51 51 51 51 51 64 17 0 0 0 17 35 51 51 51 51 51 64 17 0 0 0 17 36 68 68 68 68 68 64 17 0 0 0 17 32 0 0 0 0 0 0 17 0 0 0])</body><body package="ADvance2">structureImage	"UIMaskEditor new openOnClass: self andSelector: #structureImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); yourself)) usingBits: #[17 34 34 34 34 34 33 17 17 0 0 0 17 35 51 51 51 51 32 17 17 0 0 0 17 35 51 51 3 51 35 1 17 0 0 0 17 35 51 51 3 51 0 0 17 0 0 0 17 35 51 51 3 51 51 64 17 0 0 0 17 35 51 48 48 51 51 64 17 0 0 0 17 35 51 50 50 51 51 64 17 0 0 0 17 35 51 3 51 3 51 64 17 0 0 0 17 35 51 35 51 35 51 64 17 0 0 0 17 35 48 0 0 0 51 64 17 0 0 0 17 35 51 51 3 51 51 64 17 0 0 0 17 35 51 51 3 51 51 64 17 0 0 0 17 35 51 51 3 51 51 64 17 0 0 0 17 35 51 51 51 51 51 64 17 0 0 0 17 36 68 68 68 68 68 64 17 0 0 0 17 32 0 0 0 0 0 0 17 0 0 0])</body></methods><methods><class-id>ICC.ADvance.AD2SearchInitiatorsProgressDialog class</class-id> <category>interface specs</category><body package="ADvance2">animationSpec	"UIPainter new openOnClass: self andSelector: #animationSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec		#window:		#(#WindowSpec			#label: 'Installation...'			#min: #(#Point 400 152 )			#max: #(#Point 400 152 )			#bounds: #(#Rectangle 176 260 576 412 ) )		#component:		#(#SpecCollection			#collection: #(				#(#LabelSpec					#layout: #(#Point 18 22 )					#label: #participantOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 29 34 )					#name: #animationObject1					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 26 34 )					#name: #animationObject2					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 23 32 )					#name: #animationObject3					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 20 32 )					#name: #animationObject4					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 17 32 )					#name: #animationObject5					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 27 37 )					#name: #animationObject6					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 24 37 )					#name: #animationObject7					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 22 37 )					#name: #animationObject8					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 19 37 )					#name: #animationObject9					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 29 39 )					#name: #animationObject10					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 26 39 )					#name: #animationObject11					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 26 42 )					#name: #animationObject12					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 26 44 )					#name: #animationObject13					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 28 44 )					#name: #animationObject14					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 30 44 )					#name: #animationObject15					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 33 44 )					#name: #animationObject16					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 36 44 )					#name: #animationObject17					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 39 44 )					#name: #animationObject18					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false )				#(#LabelSpec					#layout: #(#Point 42 44 )					#name: #animationObject19					#flags: 16					#label: #lensOpaqueImage					#hasCharacterOrientedLabel: false ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2SearchInitiatorsProgressDialog class</class-id> <category>resources</category><body package="ADvance2">participantImage	"UIMaskEditor new openOnClass: self andSelector: #participantImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 36@28 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4112 scaledGreen: 4112 scaledBlue: 4112); at: 5 put: ColorValue yellow; at: 6 put: ColorValue lightGray; yourself)) usingBits: (ByteArray fromPackedString: 'DQDQDQDQDQDSL3L3L3LADQDQ@@@QDQDQDQDQDSH"H"H"H#@QDQD@@ADQDQDQDQDQL$UEQTUELADQDP@@DQDQDQDQDQD2UEQTUEP0DQDQ@@@QDQDQDQDQDSIEQTUEQS@QDQD@@ADQDQDQDQDQMSL3L3L3LADQDP@@DQDQDQDQDQD2H"H"H"H0DQDQ@@@QDQDQDQDQDSITUEQTUC@QDQD@@ADQDQDQDQDQL$UEQTUELADQDP@@DQDQDQDQDQD2UEQTUEP0DQDQ@@@QDQDQDQDQDSIEQTUEQS@QDQD@@ADQDQDQDQDQL%QTUEQTLADQDP@@DQDQDQDQDQD2QTUEQTT0DQDQ@@@QD@@@@ADQDST3L3L3L3@QDQD@@ADQDQDPDQDAL"H"H"H"LADQDP@@DQDQDQ@@@@@2UEQTUEP0DQDQ@@@QDQDQDQDQ@SIEQTUEQS@QDQD@@ADQDQDQ@QDQL%QTUEQTLADQDP@@DQ@@@@@@DQD2QTUEQTT0DQDQ@@@QDQDQDPDQ@SITUEQTUC@QDQD@@ADQDQDQDP@@L$UEQTUELADQDP@@DQDQDQDQ@PDCL3L3L3L0DQDQ@@@QDQDQDQDADQ@@@@@@@@DQDQD@@ADQDQDQDPDQDQDQDQDQDQDQDP@@DQDQDQDQ@QDQDQDQDQDQDQDQ@@@QDQDQDQD@@@@@@@@@@ADQDQD@@ADQDQDQDQDQDQDQDQDQDQDQDP@@DQDQDQDQDQDQDQDQDQDQDQDQ@@@b'))</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser class</class-id> <category>resources</category><body package="ADvance2">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 9) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 4240); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 6 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 5557); at: 7 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4111 scaledBlue: 4111); at: 8 put: Graphics.ColorValue cyan; at: 9 put: Graphics.ColorValue blue; yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@H"HQDQH"H"H"@@@@H"EVU%D"H"H"@@@@H!U%YVTQDQD"@@@@H!L3L3L3L3PB@@@@H!M%DPE%YVPB@@@@H!MQM3@VU%PB@@@@H!LS\7TAYVPB@@@@H!LWM5\DU%PB@@@@H!LS]WTDYVPB@@@@H!MQU5@TQ%PB@@@@H!M%D@EX!FPB@@@@H!QDQDQW"DPB@@@@H"@@@@@E^H@"@@@@H"H"H"H"U8 B@@@@H"H"H"H"IW B@@@@H"H"H"H"H @"@@@@H"H"H"H"H"H"@@@@'))</body><body package="ADvance2">diagramMenu	"MenuEditor new openOnClass: self andSelector: #diagramMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Open...'				#value: #openDiagram )			#(#MenuItem				#rawLabel: '&amp;Save'				#value: #fileOutDiagram )			#(#MenuItem				#rawLabel: '&amp;Delete'				#value: #deleteDiagram )			#(#MenuItem				#rawLabel: '&amp;Rename'				#value: #renameDiagram )			#(#MenuItem				#rawLabel: '&amp;Properties...'				#value: #editDiagramProperties ) ) #(1 1 2 1 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;New subject...' 							#value: #newSubject 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Open...' 							#value: #openItem 							#shortcutKeyCharacter: $O 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Update' 							#value: #update 							#shortcutKeyCharacter: $U 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Close' 							#value: #closeRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save' 							#value: #save 							#shortcutKeyCharacter: $S 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit' 							#value: #exit 							#shortcutKeyCharacter: $Q 							#shortcutModifiers: 8 ) ) #(4 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Edit' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Delete' 							#value: #delete 							#shortcutKeyCharacter: $D 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Properties...' 							#value: #properties ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Find...' 							#value: #find ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Rename...' 							#value: #rename ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;General preferences' 							#value: #generalPreferences ) ) #(1 1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;View' 				#nameKey: #view 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Show &amp;Toolbar' 							#value: #toggleToolbar 							#indication: true ) 						#(#{UI.MenuItem} 							#rawLabel: 'Show &amp;Status bar' 							#value: #toggleStatusBar 							#indication: true ) ) #(2 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">subjectMenu	"MenuEditor new openOnClass: self andSelector: #subjectMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Open...'				#value: #openSubject )			#(#MenuItem				#rawLabel: '&amp;Save'				#value: #fileOutSubject )			#(#MenuItem				#rawLabel: '&amp;Delete'				#value: #deleteSubject )			#(#MenuItem				#rawLabel: '&amp;Rename'				#value: #renameSubject )			#(#MenuItem				#rawLabel: '&amp;Properties...'				#value: #editSubjectProperties ) ) #(1 1 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2SubjectBrowser class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Subject Browser'			#bounds: #(#{Graphics.Rectangle} 568 495 1035 801 )			#flags: 4			#menu: #mainMenu )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.CompositeSpecCollection}					#collection: #(						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.41666 0 1.0 )							#model: #statusField1							#tabable: false							#isReadOnly: true )						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.41666 0 0 0 1 0 1.0 )							#model: #statusField2							#tabable: false							#isReadOnly: true )						#(#{UI.InputFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 0 1 0 1 )							#name: #footer							#flags: 16							#isOpaque: true							#model: #footer							#tabable: false							#isReadOnly: true ) )					#compositeSpec:					#(#{UI.CompositeSpec}						#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 0 1 0 1 )						#name: #statusBar ) )				#(#{UI.TreeViewSpec}					#properties:					#(#{UI.PropertyListDictionary} #dragOkSelector						#subjectWantsToDrag: #dropSelector						#subjectTreeDrop: #dragOverSelector						#subjectTreeDragOver: #dragStartSelector						#doSubjectDrag: #dragEnterSelector						#subjectTreeDragEnter: #dragExitSelector						#subjectTreeDragLeave: )					#layout: #(#{Graphics.LayoutFrame} 0 0 46 0 -2 0.41666 0 0.931507 )					#name: #subjectTree					#model: #subjectTree					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#doubleClickSelector: #openSubject )					#menu: #subjectMenu					#useModifierKeys: true					#selectionType: #highlight					#displayStringSelector: #name					#useIcons: #folder					#inPlaceEditedSelector:					#renamed: )				#(#{UI.CompositeSpecCollection}					#collection: #(						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.0 0 0.413276 19 0 )							#model: #subjectHeader							#tabable: false							#isReadOnly: true )						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.4197 0 0.0 0 1.0 19 0 )							#model: #diagramHeader							#tabable: false							#isReadOnly: true )						#(#{UI.TreeViewSpec}							#properties:							#(#{UI.PropertyListDictionary} #dragStartSelector								#doDiagramDrag: #dragOkSelector								#diagramWantsToDrag: )							#layout: #(#{Graphics.LayoutFrame} 0 0.4197 20 0 0 1.0 0 1.0 )							#name: #diagramTree							#flags: 15							#model: #diagramTree							#callbacksSpec:							#(#{UI.UIEventCallbackSubSpec}								#doubleClickSelector: #openDiagram )							#menu: #diagramMenu							#useModifierKeys: true							#selectionType: #highlight							#displayStringSelector: #name							#useIcons: #other							#iconSelectors: #(#childrenImage )							#inPlaceEditedSelector:							#renamed: ) )					#compositeSpec:					#(#{UI.CompositeSpec}						#layout: #(#{Graphics.LayoutFrame} 0 0 26 0 0 1 -20 1 )						#name: #panes ) ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog class</class-id> <category>resources</category><body package="ADvance2">visibleScriptsMenu	"UIMenuEditor new openOnClass: self andSelector: #visibleScriptsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllScripts #clearAllScripts #updateVisibleScripts ) ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2ScriptSelectionDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' Script Selection'			#min: #(#{Core.Point} 360 233 )			#max: #(#{Core.Point} 432 274 )			#bounds: #(#{Graphics.Rectangle} 462 457 894 731 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 6 0 28 0 0 1 )					#label: 'Visible scripts:' )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 28 0 -170 1 -38 1 )					#name: #visibleScripts					#flags: 15					#model: #visibleScripts					#menu: #visibleScriptsMenu					#multipleSelections: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -181 1 -30 1 -96 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -91 1 -30 1 -6 1 -7 1 )					#model: #doCancel					#label: 'Cancel' )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} -155 1 58 0 -41 1 80 0 )					#name: #scriptDepthComboBox					#model: #scriptDepth					#comboList: #scriptDepthList )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} -155 1 58 0 0 1 )					#label: 'Script depth:' )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} -155 1 114 0 -41 1 136 0 )					#name: #associationDepthComboBox					#model: #associationDepth					#comboList: #associationDepthList )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} -155 1 114 0 0 1 )					#label: 'Association depth:' )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} -164 1 28 0 -6 1 -38 1 ) ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2Images class</class-id> <category>resources</category><body package="ADvance2">addAssociation	"UIMaskEditor new openOnClass: self andSelector: #addAssociation"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[89 85 85 85 80 0 0 0 123 85 85 85 80 0 0 0 170 149 85 85 80 0 0 0 123 85 85 69 80 0 0 0 89 85 84 68 80 0 0 0 85 85 85 1 80 0 0 0 85 85 85 17 80 0 0 0 85 85 85 17 80 0 0 0 85 85 85 85 80 0 0 0 80 0 0 0 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body package="ADvance2">addMessage	"UIMaskEditor new openOnClass: self andSelector: #addMessage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[89 85 85 85 80 0 0 0 123 85 85 85 80 0 0 0 170 149 85 85 80 0 0 0 123 85 85 85 80 0 0 0 89 85 85 21 80 0 0 0 85 0 0 69 80 0 0 0 85 85 85 21 80 0 0 0 85 0 21 85 80 0 0 0 85 85 21 21 80 0 0 0 85 85 0 69 80 0 0 0 85 85 85 21 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body package="ADvance2">classProperties	"UIMaskEditor new openOnClass: self andSelector: #classProperties"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 7) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: Graphics.ColorValue white; at: 5 put: Graphics.ColorValue yellow; at: 6 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 7 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[34 34 34 34 32 0 0 2 85 0 0 0 34 34 34 34 1 17 17 16 85 0 0 0 34 34 34 32 16 17 17 17 85 0 0 0 34 34 34 1 1 1 17 17 85 0 0 0 34 34 32 16 16 16 17 16 85 0 0 0 32 0 1 2 1 1 0 2 85 0 0 0 32 52 0 6 32 16 34 34 34 0 0 0 32 67 67 6 34 2 34 34 34 0 0 0 32 0 0 6 34 34 34 34 34 0 0 0 32 52 52 6 34 34 34 34 34 0 0 0 32 67 67 6 34 34 34 34 34 0 0 0 32 0 0 6 34 34 34 34 34 0 0 0 32 52 52 6 34 34 34 34 34 0 0 0 32 67 67 6 34 34 34 34 34 0 0 0 32 0 0 6 34 34 34 34 34 0 0 0 34 102 102 102 34 34 34 34 34 0 0 0])</body><body package="ADvance2">diagramFilter	"UIMaskEditor new openOnClass: self andSelector: #diagramFilter"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); yourself)) usingBits: #[85 149 21 85 80 0 0 0 85 164 69 85 80 0 0 0 90 169 21 85 80 0 0 0 85 164 69 85 80 0 0 0 85 149 21 85 80 0 0 0 85 84 69 149 80 0 0 0 85 85 21 165 80 0 0 0 90 170 170 169 80 0 0 0 85 85 21 165 80 0 0 0 85 84 69 149 80 0 0 0 85 149 21 85 80 0 0 0 85 164 69 85 80 0 0 0 90 169 21 85 80 0 0 0 85 164 69 85 80 0 0 0 85 149 21 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body package="ADvance2">editScripts	"UIMaskEditor new openOnClass: self andSelector: #editScripts"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 2) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); yourself)) usingBits: #[255 255 192 0 255 255 192 0 255 255 192 0 255 255 192 0 255 223 192 0 224 47 192 0 255 223 192 0 225 255 192 0 253 223 192 0 252 47 192 0 255 223 192 0 255 255 192 0 255 255 192 0 255 255 192 0 255 255 192 0 255 255 192 0])</body><body package="ADvance2">editSubject	"UIMaskEditor new openOnClass: self andSelector: #editSubject"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 5 put: Graphics.ColorValue yellow; at: 6 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[17 17 17 49 17 0 0 17 17 0 0 0 17 17 19 17 17 4 32 81 17 0 0 0 17 17 19 17 17 2 64 81 17 0 0 0 17 19 51 51 17 4 32 81 17 0 0 0 17 17 51 49 17 0 0 81 17 0 0 0 17 17 19 17 17 21 85 83 17 0 0 0 16 0 17 17 17 17 17 51 49 0 0 0 4 36 0 0 0 1 19 51 51 0 0 0 2 66 66 66 66 1 17 19 17 0 0 0 4 36 36 36 36 1 17 19 17 0 0 0 2 66 66 66 66 1 17 49 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 4 36 36 36 36 1 17 17 17 0 0 0 2 66 66 66 66 1 17 17 17 0 0 0 0 0 0 0 0 1 17 17 17 0 0 0])</body><body package="ADvance2">editText	"UIMaskEditor new openOnClass: self andSelector: #editText"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 7) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: Graphics.ColorValue white; at: 6 put: Graphics.ColorValue yellow; at: 7 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 51 51 51 51 51 51 51 51 0 0 0 51 51 0 0 0 0 3 0 51 0 0 0 51 51 4 68 68 68 64 17 3 0 0 0 51 51 4 68 68 68 0 1 3 0 0 0 51 51 4 0 64 4 5 0 51 0 0 0 51 51 4 68 68 68 5 0 51 0 0 0 51 51 4 0 4 64 82 3 51 0 0 0 51 51 4 68 68 64 80 3 51 0 0 0 51 51 4 0 68 5 32 99 51 0 0 0 51 51 4 68 68 5 0 99 51 0 0 0 51 51 4 68 68 0 0 99 51 0 0 0 51 51 4 0 4 0 64 99 51 0 0 0 51 51 4 68 68 68 64 99 51 0 0 0 51 51 0 0 0 0 0 99 51 0 0 0 51 51 54 102 102 102 102 99 51 0 0 0 51 51 51 51 51 51 51 51 51 0 0 0])</body><body package="ADvance2">hideSelectedMessages	"UIMaskEditor new openOnClass: self andSelector: #hideSelectedMessages"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: #[170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 168 170 170 160 0 0 0 168 2 42 170 160 0 0 0 170 168 170 170 160 0 0 0 170 170 154 170 160 0 0 0 170 170 150 170 160 0 0 0 170 165 85 170 160 0 0 0 170 170 150 170 160 0 0 0 170 170 154 170 160 0 0 0 170 170 170 186 160 0 0 0 170 170 191 238 160 0 0 0 170 170 170 186 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body package="ADvance2">newFilter	"UIMaskEditor new openOnClass: self andSelector: #newFilter"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: Graphics.ColorValue white; at: 4 put: Graphics.ColorValue yellow; at: 5 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 6 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[17 21 33 17 1 17 17 17 17 0 0 0 49 21 52 21 32 17 17 17 17 0 0 0 83 21 36 83 1 17 17 17 17 0 0 0 21 53 53 48 16 17 17 17 17 0 0 0 35 83 35 19 3 17 17 17 17 0 0 0 85 82 49 16 16 17 65 17 17 0 0 0 17 37 33 17 1 17 68 17 17 0 0 0 81 21 52 68 68 68 68 65 17 0 0 0 33 21 33 17 1 17 68 17 17 0 0 0 17 17 17 16 16 17 65 17 17 0 0 0 17 17 65 17 1 17 17 17 17 0 0 0 17 17 68 16 16 17 17 17 17 0 0 0 17 68 68 65 1 17 17 17 17 0 0 0 17 17 68 16 16 17 17 17 17 0 0 0 17 17 65 17 1 17 17 17 17 0 0 0 17 17 17 17 17 17 17 17 17 0 0 0])</body><body package="ADvance2">newSubject	"UIMaskEditor new openOnClass: self andSelector: #newSubject"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 7) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: Graphics.ColorValue white; at: 6 put: Graphics.ColorValue yellow; at: 7 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'L3YCL3L3L3L3@@@@T3YSM$L3L3L3@@@@YSYCYSL3L3L3@@@@M%YVT3L3L3L3@@@@QVUEQVL3L3L3@@@@Y&amp;QUEQY&amp;Y&amp;L3@@@@LTQDQDQDQB@3@@@@YUTUEQTUER@3@@@@Q$EQTUEQTR@3@@@@M$TUEQTUER@3@@@@M$EQTUEQTR@3@@@@M$TUEQTUER@3@@@@M$EQTUEQTR@3@@@@M$TUEQTUER@3@@@@M"H"H"H"H"@3@@@@L0@@@@@@@@L3@@@@L3L3L3L3L3L3@@@@L3L3L3L3L3L3@@@@'))</body><body package="ADvance2">printPreview	"UIMaskEditor new openOnClass: self andSelector: #printPreview"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@17 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: Graphics.ColorValue white; at: 5 put: Graphics.ColorValue cyan; at: 6 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"@@@@H@@@@@@"H"H"@@@@HCL3L3@BH"H"@@@@HCL3L3@ H"H"@@@@HCL3L3@@@"H"@@@@HCL3L3L3@"H"@@@@HCL3L3@@@"H"@@@@HCL3L0TQTBH"@@@@HCL3LEQAUPH"@@@@HCL3LAPQTPH"@@@@HCL3LADQTPH"@@@@HCL3LEDTUPH"@@@@HCL3L0TQTEH"@@@@HCL3L3@@AP@"@@@@HCL3L3L3@ @B@@@@H@@@@@@@@"@B@@@@H"H"H"H"H"H"@@@@'))</body><body package="ADvance2">properties	"UIMaskEditor new openOnClass: self andSelector: #properties"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 4 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); yourself)) usingBits: #[85 85 64 1 240 0 0 0 85 85 42 168 240 0 0 0 85 84 138 170 240 0 0 0 85 82 34 170 240 0 0 0 85 72 136 168 240 0 0 0 85 33 34 1 240 0 0 0 85 5 72 85 80 0 0 0 85 85 81 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0 85 85 85 85 80 0 0 0])</body><body package="ADvance2">removeClassFilters	"UIMaskEditor new openOnClass: self andSelector: #removeClassFilters"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 5 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 6 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[34 34 66 34 2 35 34 34 34 0 0 0 34 34 49 32 37 50 34 34 34 0 0 0 34 68 19 51 83 34 34 34 34 0 0 0 34 34 68 19 53 34 34 34 34 0 0 0 34 34 66 49 50 34 34 34 34 0 0 0 34 34 35 53 51 34 66 34 34 0 0 0 34 34 51 34 83 18 68 34 34 0 0 0 34 68 67 68 68 68 68 66 34 0 0 0 34 34 34 34 2 34 68 34 34 0 0 0 34 34 34 32 32 34 66 34 34 0 0 0 34 34 66 34 2 34 34 34 34 0 0 0 34 34 68 32 32 34 34 34 34 0 0 0 34 68 68 66 2 34 34 34 34 0 0 0 34 34 68 32 32 34 34 34 34 0 0 0 34 34 66 34 2 34 34 34 34 0 0 0 34 34 34 34 34 34 34 34 34 0 0 0])</body><body package="ADvance2">renameSubject	"UIMaskEditor new openOnClass: self andSelector: #renameSubject"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 8) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: Graphics.ColorValue white; at: 6 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 7 put: Graphics.ColorValue yellow; at: 8 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[51 51 51 51 51 51 51 0 51 0 0 0 51 51 51 51 51 51 48 17 3 0 0 0 51 51 51 51 51 51 0 1 3 0 0 0 51 51 51 51 51 51 6 0 51 0 0 0 51 51 51 51 51 51 6 0 51 0 0 0 51 51 51 51 51 48 98 3 51 0 0 0 85 85 85 85 85 80 96 3 51 0 0 0 83 51 51 55 115 48 0 51 51 0 0 0 83 51 48 6 64 48 3 51 51 0 0 0 83 48 6 64 96 53 51 51 51 0 0 0 83 6 64 96 64 53 51 51 51 0 0 0 83 4 96 64 3 53 51 51 51 0 0 0 83 6 64 3 51 53 51 51 51 0 0 0 83 48 3 51 51 53 51 51 51 0 0 0 83 51 51 51 51 53 51 51 51 0 0 0 85 85 85 85 85 85 51 51 51 0 0 0])</body><body package="ADvance2">scriptDocu	"UIMaskEditor new openOnClass: self andSelector: #scriptDocu"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 6) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5020 scaledBlue: 0); at: 6 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4491 scaledBlue: 4491); yourself)) usingBits: #[17 17 17 1 17 17 17 17 17 0 0 0 0 0 0 16 17 17 17 17 17 0 0 0 17 17 17 1 17 17 17 17 17 0 0 0 0 1 17 17 17 17 17 17 17 0 0 0 17 1 17 1 17 17 17 17 17 0 0 0 17 0 0 16 17 17 17 17 17 0 0 0 17 17 17 1 17 17 0 0 1 0 0 0 17 17 17 17 17 16 51 51 1 0 0 0 17 17 17 17 17 3 85 48 17 0 0 0 17 17 18 17 17 3 51 48 1 0 0 0 17 17 18 33 16 0 0 1 80 0 0 0 17 34 34 34 16 49 49 49 0 0 0 0 17 17 18 33 16 0 0 0 64 0 0 0 17 17 18 17 16 68 68 64 0 0 0 0 17 17 17 17 16 0 0 0 1 0 0 0 17 17 17 17 17 0 0 0 17 0 0 0])</body><body package="ADvance2">scripts	"UIMaskEditor new openOnClass: self andSelector: #scripts"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 13@13 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 2) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); yourself)) usingBits: #[255 248 0 0 255 248 0 0 255 248 0 0 255 184 0 0 192 88 0 0 255 184 0 0 195 248 0 0 251 184 0 0 248 88 0 0 255 184 0 0 255 248 0 0 255 248 0 0 255 248 0 0])</body><body package="ADvance2">showAllMessages	"UIMaskEditor new openOnClass: self andSelector: #showAllMessages"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 6077); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: #[170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0 170 171 170 170 160 0 0 0 171 254 234 170 160 0 0 0 170 171 170 170 160 0 0 0 170 170 154 170 160 0 0 0 170 170 150 170 160 0 0 0 170 165 85 170 160 0 0 0 170 170 150 170 160 0 0 0 170 170 154 170 160 0 0 0 170 170 170 138 160 0 0 0 170 170 128 34 160 0 0 0 170 170 170 138 160 0 0 0 170 170 170 170 160 0 0 0 170 170 170 170 160 0 0 0])</body><body package="ADvance2">subject	"UIMaskEditor new openOnClass: self andSelector: #subject"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 32@27 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 7) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 0); at: 4 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 5 put: Graphics.ColorValue white; at: 6 put: Graphics.ColorValue yellow; at: 7 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: 'L3M&amp;Y&amp;Y&amp;X3L3L3L3L3L3L3L6QDQDQDX3L3L3L3L3L3L3YEEQTUEQX3L3L3L3L3L3M$TUEQTUEQX3L3L3L3L3L6DQDQDQDQDQY&amp;Y&amp;Y&amp;Y&amp;Y M$QDQDQDQDQDQDQDQDQDP@YEEQTUEQTUEQTUEQTUEQHFPUEQTUEQTUEQTUEQTUERA$TUEQTUEQTUEQTUEQTUD YATUEQTUEQTUEQTUEQTUHFQQTUEQTUEQTUEQTUEQTRA$EQTUEQTUEQTUEQTUEQT YEEQTUEQTUEQTUEQTUEQHFPUEQTUEQTUEQTUEQTUERA$TUEQTUEQTUEQTUEQTUD YATUEQTUEQTUEQTUEQTUHFQQTUEQTUEQTUEQTUEQTRA$EQTUEQTUEQTUEQTUEQT YEEQTUEQTUEQTUEQTUEQHFPUEQTUEQTUEQTUEQTUERA$TUEQTUEQTUEQTUEQTUD YATUEQTUEQTUEQTUEQTUHFQQTUEQTUEQTUEQTUEQTRA$EQTUEQTUEQTUEQTUEQT YEEQTUEQTUEQTUEQTUEQHFH"H"H"H"H"H"H"H"H"H"@0@@@@@@@@@@@@@@@@@@@C'))</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor class</class-id> <category>resources</category><body package="ADvance2">filteredClassInstVarsMenu	"MenuEditor new openOnClass: self andSelector: #filteredClassInstVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Remove'				#value: #removeClassInstVars )			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAllFilteredClassInstVars )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAllFilteredClassInstVars ) ) #(1 2 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">filteredClassMethodsMenu	"MenuEditor new openOnClass: self andSelector: #filteredClassMethodsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Remove'				#value: #removeClassMethods )			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAllFilteredClassMethods )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAllFilteredClassMethods ) ) #(1 2 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">filteredClassProtocolsMenu	"MenuEditor new openOnClass: self andSelector: #filteredClassProtocolsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Remove'				#value: #removeClassProtocols )			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAllFilteredClassProtocols )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAllFilteredClassProtocols ) ) #(1 2 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">filteredInstMethodsMenu	"MenuEditor new openOnClass: self andSelector: #filteredInstMethodsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Remove'				#value: #removeInstMethods )			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAllFilteredInstMethods )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAllFilteredInstMethods ) ) #(1 2 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">filteredInstProtocolsMenu	"MenuEditor new openOnClass: self andSelector: #filteredInstProtocolsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Remove'				#value: #removeInstProtocols )			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAllFilteredInstProtocols )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAllFilteredInstProtocols ) ) #(1 2 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">filteredInstVarsMenu	"MenuEditor new openOnClass: self andSelector: #filteredInstVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Remove'				#value: #removeInstVars )			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAllFilteredInstVars )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAllFilteredInstVars ) ) #(1 2 ) nil ) decodeAsLiteralArray</body><body package="ADvance2">filteredSharedVarsMenu	"MenuEditor new openOnClass: self andSelector: #filteredSharedVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;Remove'				#value: #removeSharedVars )			#(#MenuItem				#rawLabel: 'Select all'				#value: #selectAllFilteredSharedVars )			#(#MenuItem				#rawLabel: 'Clear all'				#value: #clearAllFilteredSharedVars ) ) #(1 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2FilterEditor class</class-id> <category>interface specs</category><body package="ADvance2">attributesSpec	"Tools.UIPainter new openOnClass: self andSelector: #attributesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 424 378 ) 			#max: #(#{Core.Point} 501 460 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1118 972 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0 0 1 ) 					#label: 'Filtered Instance Variables:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.667 0 1 ) 					#label: 'Filtered Shared Variables:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 52 0 -10 1 -8 0.333 ) 					#name: #filteredInstVars 					#model: #filteredInstVarsList 					#menu: #filteredInstVarsMenu 					#multipleSelections: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0 -10 1 52 0 ) 					#model: #instVarPattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedInstVarPattern ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 52 0.667 -10 1 -8 1 ) 					#name: #filteredSharedVars 					#model: #filteredSharedVarsList 					#menu: #filteredSharedVarsMenu 					#multipleSelections: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.667 -10 1 52 0.667 ) 					#model: #sharedVarPattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSharedVarPattern ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.333 0 1 ) 					#name: #Label1 					#label: 'Filtered Class Instance Variables:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 52 0.333 -10 1 -8 0.667 ) 					#name: #filteredClassInstVars 					#model: #filteredClassInstVarsList 					#menu: #filteredClassInstVarsMenu 					#multipleSelections: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.333 -10 1 52 0.333 ) 					#name: #InputField1 					#model: #classInstVarPattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedClassInstVarPattern ) ) ) ) )</body><body package="ADvance2">classMethodsSpec	"UIPainter new openOnClass: self andSelector: #classMethodsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 424 378 )			#max: #(#{Core.Point} 501 460 )			#bounds: #(#{Graphics.Rectangle} 538 446 1016 906 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0 0 1 )					#label: 'Filtered Protocols:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.416666 0 1 )					#label: 'Filtered Methods:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0 -10 1 52 0 )					#model: #classProtocolPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedClassProtocolPattern ) )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 52 0 -10 1 -8 0.416666 )					#name: #filteredClassProtocols					#model: #filteredClassProtocolsList					#menu: #filteredClassProtocolsMenu					#multipleSelections: true )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.416666 -10 1 52 0.416666 )					#model: #classMethodPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedClassMethodPattern ) )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 52 0.416666 -10 1 -10 1 )					#name: #filteredClassMethods					#model: #filteredClassMethodsList					#menu: #filteredClassMethodsMenu					#multipleSelections: true ) ) ) )</body><body package="ADvance2">instanceMethodsSpec	"UIPainter new openOnClass: self andSelector: #instanceMethodsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 424 378 )			#max: #(#{Core.Point} 501 460 )			#bounds: #(#{Graphics.Rectangle} 611 510 1089 970 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0 0 1 )					#label: 'Filtered Protocols:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.416666 0 1 )					#label: 'Filtered Methods:' )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 52 0 -10 1 -8 0.416666 )					#name: #filteredInstProtocols					#model: #filteredInstProtocolsList					#menu: #filteredInstProtocolsMenu					#multipleSelections: true )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0 -10 1 52 0 )					#model: #instProtocolPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedInstProtocolPattern ) )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 16 0 52 0.416666 -10 1 -10 1 )					#name: #filteredInstMethods					#model: #filteredInstMethodsList					#menu: #filteredInstMethodsMenu					#multipleSelections: true )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.416666 -10 1 52 0.416666 )					#model: #instMethodPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedInstMethodPattern ) ) ) ) )</body><body package="ADvance2">specialSpec	"Tools.UIPainter new openOnClass: self andSelector: #specialSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 304 226 ) 			#max: #(#{Core.Point} 501 460 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 944 738 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 34 0 0 1 ) 					#model: #'targetFilter isFilteringAccessors' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSpecialMethodFilter ) 					#helpText: 'Check to hide accessor methods' 					#label: 'Filter accessors' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 61 0 0 1 ) 					#model: #'targetFilter isFilteringOverriddenMethods' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSpecialMethodFilter ) 					#helpText: 'Check to hide overridden methods' 					#label: 'Filter overridden methods' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 88 0 0 1 ) 					#model: #'targetFilter isFilteringPrivateMethods' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSpecialMethodFilter ) 					#helpText: 'Check to hide private methods' 					#label: 'Filter private methods' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 115 0 0 1 ) 					#model: #'targetFilter isFilteringClassMethods' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSpecialMethodFilter ) 					#helpText: 'Check to hide class methods' 					#label: 'Filter class methods' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 10 134 ) 					#model: #'targetFilter isFilteringInstVars' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSpecialVariableFilter ) 					#helpText: 'Check to hide instance variables' 					#label: 'Filter instance variables' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 10 161 ) 					#model: #'targetFilter isFilteringClassInstVars' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSpecialVariableFilter ) 					#helpText: 'Check to hide class instance variables' 					#label: 'Filter class instance variables' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 10 187 ) 					#model: #'targetFilter isFilteringSharedVars' 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSpecialVariableFilter ) 					#helpText: 'Check to hide shared variables' 					#label: 'Filter shared variables' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 124 0 -4 1 128 0 ) 					#name: #Divider1 ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'ADvance Filter Editor'			#min: #(#{Core.Point} 342 368 )			#max: #(#{Core.Point} 484 420 )			#bounds: #(#{Graphics.Rectangle} 647 490 995 873 )			#menu: #menuBar )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#labels: #() )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -336 1 -30 1 -256 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -251 1 -30 1 -171 1 -7 1 )					#name: #cancelButton					#model: #doCancel					#label: 'Cancel' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -166 1 -30 1 -86 1 -7 1 )					#name: #readButton					#model: #doRead					#label: 'Read' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -86 1 -30 1 -6 1 -7 1 )					#name: #chooseButton					#model: #chooseFilter					#label: 'Choose...' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor class</class-id> <category>resources</category><body package="ADvance2">availableClassInstVarsMenu	"UIMenuEditor new openOnClass: self andSelector: #availableClassInstVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllAvailableClassInstVars #clearAllAvailableClassInstVars #updateAvailableVariables ) ) decodeAsLiteralArray</body><body package="ADvance2">availableClassMethodsMenu	"UIMenuEditor new openOnClass: self andSelector: #availableClassMethodsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllAvailableClassMethods #clearAllAvailableClassMethods #updateAvailableProtocols ) ) decodeAsLiteralArray</body><body package="ADvance2">availableClassProtocolsMenu	"UIMenuEditor new openOnClass: self andSelector: #availableClassProtocolsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllAvailableClassProtocols #clearAllAvailableClassProtocols #updateAvailableProtocols ) ) decodeAsLiteralArray</body><body package="ADvance2">availableInstMethodsMenu	"UIMenuEditor new openOnClass: self andSelector: #availableInstMethodsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllAvailableInstMethods #clearAllAvailableInstMethods #updateAvailableProtocols ) ) decodeAsLiteralArray</body><body package="ADvance2">availableInstProtocolsMenu	"UIMenuEditor new openOnClass: self andSelector: #availableInstProtocolsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllAvailableInstProtocols #clearAllAvailableInstProtocols #updateAvailableProtocols ) ) decodeAsLiteralArray</body><body package="ADvance2">availableInstVarsMenu	"UIMenuEditor new openOnClass: self andSelector: #availableInstVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllAvailableInstVars #clearAllAvailableInstVars #updateAvailableVariables ) ) decodeAsLiteralArray</body><body package="ADvance2">availableSharedVarsMenu	"UIMenuEditor new openOnClass: self andSelector: #availableSharedVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' )			#(#MenuItem				#label: 'Update' ) ) #(2 1 ) #(#selectAllAvailableSharedVars #clearAllAvailableSharedVars #updateAvailableVariables ) ) decodeAsLiteralArray</body><body package="ADvance2">filteredClassInstVarsMenu	"UIMenuEditor new openOnClass: self andSelector: #filteredClassInstVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' ) ) #(2 ) #(#selectAllFilteredClassInstVars #clearAllFilteredClassInstVars ) ) decodeAsLiteralArray</body><body package="ADvance2">filteredClassMethodsMenu	"UIMenuEditor new openOnClass: self andSelector: #filteredClassMethodsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' ) ) #(2 ) #(#selectAllFilteredClassMethods #clearAllFilteredClassMethods ) ) decodeAsLiteralArray</body><body package="ADvance2">filteredClassProtocolsMenu	"UIMenuEditor new openOnClass: self andSelector: #filteredClassProtocolsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' ) ) #(2 ) #(#selectAllFilteredClassProtocols #clearAllFilteredClassProtocols ) ) decodeAsLiteralArray</body><body package="ADvance2">filteredInstMethodsMenu	"UIMenuEditor new openOnClass: self andSelector: #filteredInstMethodsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' ) ) #(2 ) #(#selectAllFilteredInstMethods #clearAllFilteredInstMethods ) ) decodeAsLiteralArray</body><body package="ADvance2">filteredInstProtocolsMenu	"UIMenuEditor new openOnClass: self andSelector: #filteredInstProtocolsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' ) ) #(2 ) #(#selectAllFilteredInstProtocols #clearAllFilteredInstProtocols ) ) decodeAsLiteralArray</body><body package="ADvance2">filteredInstVarsMenu	"UIMenuEditor new openOnClass: self andSelector: #filteredInstVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' ) ) #(2 ) #(#selectAllFilteredInstVars #clearAllFilteredInstVars ) ) decodeAsLiteralArray</body><body package="ADvance2">filteredSharedVarsMenu	"UIMenuEditor new openOnClass: self andSelector: #filteredSharedVarsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#label: 'Select all' )			#(#MenuItem				#label: 'Clear all' ) ) #(2 ) #(#selectAllFilteredSharedVars #clearAllFilteredSharedVars ) ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2DiagramFilterEditor class</class-id> <category>interface specs</category><body package="ADvance2">attributesSpec	"Tools.UIPainter new openOnClass: self andSelector: #attributesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ADvance Filter Editor' 			#min: #(#{Core.Point} 424 378 ) 			#max: #(#{Core.Point} 501 460 ) 			#bounds: #(#{Graphics.Rectangle} 584 352 1062 812 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0 0 1 ) 					#label: 'Available Instance Variables:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 28 0.5 28 0 0 1 ) 					#label: 'Filtered Instance Variables:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 28 0.5 28 0.667 0 1 ) 					#label: 'Filtered Shared Variables:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.667 0 1 ) 					#label: 'Available Shared Variables:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0 -28 0.5 -8 0.333 ) 					#name: #availableInstVars 					#model: #availableInstVarsList 					#menu: #availableInstVarsMenu 					#multipleSelections: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -23 0.5 28 0 23 0.5 52 0 ) 					#name: #addInstVars 					#flags: 40 					#model: #addInstVars 					#helpText: 'Add selection to filter' 					#label: '&gt;&gt;' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -23 0.5 56 0 23 0.5 80 0 ) 					#name: #removeInstVars 					#flags: 40 					#model: #removeInstVars 					#helpText: 'Remove selection from filter' 					#label: '&lt;&lt;' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0.5 28 0 -10 1 52 0 ) 					#model: #instVarPattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedInstVarPattern ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 34 0.5 52 0 -10 1 -8 0.333 ) 					#name: #filteredInstVars 					#model: #filteredInstVarsList 					#menu: #filteredInstVarsMenu 					#multipleSelections: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.667 -28 0.5 -8 1 ) 					#name: #availableSharedVars 					#model: #availableSharedVarsList 					#menu: #availableSharedVarsMenu 					#multipleSelections: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -23 0.5 28 0.667 23 0.5 51 0.667 ) 					#name: #addSharedVars 					#flags: 40 					#model: #addSharedVars 					#helpText: 'Add selection to filter' 					#label: '&gt;&gt;' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -23 0.5 56 0.667 23 0.5 79 0.667 ) 					#name: #removeSharedVars 					#flags: 40 					#model: #removeSharedVars 					#helpText: 'Remove selection from filter' 					#label: '&lt;&lt;' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0.5 28 0.667 -10 1 52 0.667 ) 					#model: #sharedVarPattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSharedVarPattern ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 34 0.5 52 0.667 -10 1 -10 1 ) 					#name: #filteredSharedVars 					#model: #filteredSharedVarsList 					#menu: #filteredSharedVarsMenu 					#multipleSelections: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 28 0.5 28 0.333 0 1 ) 					#label: 'Filtered Class Instance Variables:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.333 0 1 ) 					#label: 'Available Class Instance Variables:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.333 -28 0.5 -8 0.667 ) 					#name: #availableClassInstVars 					#model: #availableClassInstVarsList 					#menu: #availableClassInstVarsMenu 					#multipleSelections: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -23 0.5 28 0.333 23 0.5 51 0.333 ) 					#name: #addClassInstVars 					#flags: 40 					#model: #addClassInstVars 					#helpText: 'Add selection to filter' 					#label: '&gt;&gt;' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -23 0.5 56 0.333 23 0.5 79 0.333 ) 					#name: #removeClassInstVars 					#flags: 40 					#model: #removeClassInstVars 					#helpText: 'Remove selection from filter' 					#label: '&lt;&lt;' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0.5 28 0.333 -10 1 52 0.333 ) 					#name: #classInstVarPattern 					#model: #classInstVarPattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedClassInstVarPattern ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 34 0.5 52 0.333 -10 1 -8 0.667 ) 					#name: #filteredClassInstVars 					#model: #filteredClassInstVarsList 					#menu: #filteredClassInstVarsMenu 					#multipleSelections: true ) ) ) )</body><body package="ADvance2">classMethodsSpec	"UIPainter new openOnClass: self andSelector: #classMethodsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'ADvance Filter Editor'			#min: #(#{Core.Point} 424 378 )			#max: #(#{Core.Point} 501 460 )			#bounds: #(#{Graphics.Rectangle} 482 465 960 925 )			#menu: #menuBar )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0 0 1 )					#label: 'Available Protocols:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 28 0.5 28 0 0 1 )					#label: 'Filtered Protocols:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 28 0.5 28 0.416666 0 1 )					#label: 'Filtered Methods:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.416666 0 1 )					#label: 'Available Methods:' )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0 -28 0.5 -8 0.416666 )					#name: #availableClassProtocols					#model: #availableClassProtocolsList					#menu: #availableClassProtocolsMenu					#multipleSelections: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 28 0 23 0.5 52 0 )					#name: #addClassProtocols					#flags: 40					#model: #addClassProtocols					#label: '&gt;&gt;' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 56 0 23 0.5 80 0 )					#name: #removeClassProtocols					#flags: 40					#model: #removeClassProtocols					#label: '&lt;&lt;' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 28 0.5 28 0 -10 1 52 0 )					#model: #classProtocolPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedClassProtocolPattern ) )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 34 0.5 52 0 -10 1 -8 0.416666 )					#name: #filteredClassProtocols					#model: #filteredClassProtocolsList					#menu: #filteredClassProtocolsMenu					#multipleSelections: true )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.416666 -28 0.5 -10 1 )					#name: #availableClassMethods					#model: #availableClassMethodsList					#menu: #availableClassMethodsMenu					#multipleSelections: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 28 0.416666 23 0.5 52 0.416666 )					#name: #addClassMethods					#flags: 40					#model: #addClassMethods					#label: '&gt;&gt;' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 56 0.416666 23 0.5 80 0.416666 )					#name: #removeClassMethods					#flags: 40					#model: #removeClassMethods					#label: '&lt;&lt;' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 28 0.5 28 0.416666 -10 1 52 0.416666 )					#model: #classMethodPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedClassMethodPattern ) )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 34 0.5 52 0.416666 -10 1 -10 1 )					#name: #filteredClassMethods					#model: #filteredClassMethodsList					#menu: #filteredClassMethodsMenu					#multipleSelections: true ) ) ) )</body><body package="ADvance2">instanceMethodsSpec	"UIPainter new openOnClass: self andSelector: #instanceMethodsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'ADvance Filter Editor'			#min: #(#{Core.Point} 424 378 )			#max: #(#{Core.Point} 501 460 )			#bounds: #(#{Graphics.Rectangle} 464 359 942 819 )			#menu: #menuBar )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0 0 1 )					#label: 'Available Protocols:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 28 0.5 28 0 0 1 )					#label: 'Filtered Protocols:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 28 0.5 28 0.416666 0 1 )					#label: 'Filtered Methods:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 10 0 28 0.416666 0 1 )					#label: 'Available Methods:' )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0 -28 0.5 -8 0.416666 )					#name: #availableInstProtocols					#model: #availableInstProtocolsList					#menu: #availableInstProtocolsMenu					#multipleSelections: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 28 0 23 0.5 52 0 )					#name: #addInstProtocols					#flags: 40					#model: #addInstProtocols					#label: '&gt;&gt;' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 56 0 23 0.5 80 0 )					#name: #removeInstProtocols					#flags: 40					#model: #removeInstProtocols					#label: '&lt;&lt;' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 28 0.5 28 0 -10 1 52 0 )					#model: #instProtocolPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedInstProtocolPattern ) )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 34 0.5 52 0 -10 1 -8 0.416666 )					#name: #filteredInstProtocols					#model: #filteredInstProtocolsList					#menu: #filteredInstProtocolsMenu					#multipleSelections: true )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 28 0.416666 -28 0.5 -10 1 )					#name: #availableInstMethods					#model: #availableInstMethodsList					#menu: #availableInstMethodsMenu					#multipleSelections: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 28 0.416666 23 0.5 52 0.416666 )					#name: #addInstMethods					#flags: 40					#model: #addInstMethods					#label: '&gt;&gt;' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -23 0.5 56 0.416666 23 0.5 80 0.416666 )					#name: #removeInstMethods					#flags: 40					#model: #removeInstMethods					#label: '&lt;&lt;' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 28 0.5 28 0.416666 -10 1 52 0.416666 )					#model: #instMethodPattern					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#valueChangeSelector: #changedInstMethodPattern ) )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 34 0.5 52 0.416666 -10 1 -10 1 )					#name: #filteredInstMethods					#model: #filteredInstMethodsList					#menu: #filteredInstMethodsMenu					#multipleSelections: true ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'ADvance Filter Editor'			#min: #(#{Core.Point} 484 420 )			#max: #(#{Core.Point} 484 420 )			#bounds: #(#{Graphics.Rectangle} 629 516 1113 936 )			#menu: #menuBar )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#labels: #() )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -336 1 -30 1 -256 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -251 1 -30 1 -171 1 -7 1 )					#name: #cancelButton					#model: #doCancel					#label: 'Cancel' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -166 1 -30 1 -86 1 -7 1 )					#name: #readButton					#model: #doRead					#label: 'Read' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -86 1 -30 1 -6 1 -7 1 )					#name: #chooseButton					#model: #chooseFilter					#label: 'Choose...' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2ClassPropertiesDialog class</class-id> <category>interface specs</category><body package="ADvance2">attributesSpec	"UIPainter new openOnClass: self andSelector: #attributesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Unlabeled Canvas'			#bounds: #(#{Graphics.Rectangle} 634 502 958 740 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.TableViewSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 -43 1 )					#name: #attributesTable					#model: #attributesTableInterface					#callbacksSpec:					#(#{UI.UIEventCallbackSubSpec}						#doubleClickSelector: #editAttribute )					#showHGrid: true					#showVGrid: true					#selectionStyle: #row )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -265 1 -33 1 -180 1 -10 1 )					#name: #addAttributeButton					#model: #addAttribute					#label: 'Add...' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -175 1 -33 1 -90 1 -10 1 )					#name: #editAttributeButton					#flags: 40					#model: #editAttribute					#label: 'Edit...' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -85 1 -33 1 -10 1 -10 1 )					#name: #removeAttributeButton					#flags: 40					#model: #removeAttribute					#label: 'Remove...' ) ) ) )</body><body package="ADvance2">generalSpec	"UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 310 201 )			#max: #(#{Core.Point} 310 201 )			#bounds: #(#{Graphics.Rectangle} 421 332 731 533 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 8 0 64 0 0 1 )					#label: 'Superclass:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 8 0 94 0 0 1 )					#label: #containerLabel )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 8 0 34 0 0 1 )					#label: 'Class:' )				#(#{UI.DividerSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 105 0 -10 1 109 0 ) )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 8 0 135 0 0 1 )					#label: 'Type:' )				#(#{UI.DividerSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 144 0 -10 1 148 0 ) )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 8 0 174 0 0 1 )					#label: 'Persistence:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 10 0 -10 1 34 0 )					#name: #className					#isOpaque: true					#model: #className					#isReadOnly: false					#type: #string )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 40 0 -10 1 64 0 )					#name: #superclassName					#model: #superclassName					#type: #string )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 110 0 70 0 -10 1 94 0 )					#name: #containerName					#model: #containerName					#type: #string )				#(#{UI.RadioButtonSpec}					#layout: #(#{UI.AlignmentOrigin} 110 0 135 0 0 1 )					#model: #classType					#label: 'Abstract'					#select: #abstract )				#(#{UI.RadioButtonSpec}					#layout: #(#{UI.AlignmentOrigin} 212 0 135 0 0 1 )					#model: #classType					#label: 'Concrete'					#select: #concrete )				#(#{UI.RadioButtonSpec}					#layout: #(#{UI.AlignmentOrigin} 110 0 174 0 0 1 )					#model: #classPersistence					#label: 'Persistent'					#select: #persistent )				#(#{UI.RadioButtonSpec}					#layout: #(#{UI.AlignmentOrigin} 212 0 174 0 0 1 )					#model: #classPersistence					#label: 'Transient'					#select: #transient ) ) ) )</body><body package="ADvance2">servicesSpec	"UIPainter new openOnClass: self andSelector: #servicesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Unlabeled Canvas'			#bounds: #(#{Graphics.Rectangle} 569 510 883 745 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 -43 1 )					#name: #servicesList					#flags: 15					#model: #servicesList					#multipleSelections: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -165 1 -33 1 -90 1 -10 1 )					#name: #addServiceButton					#flags: 56					#model: #addService					#label: 'Add...' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -85 1 -33 1 -10 1 -10 1 )					#name: #removeServicesButton					#flags: 40					#model: #removeServices					#label: 'Remove...' ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Class Properties'			#min: #(#{Core.Point} 424 291 )			#max: #(#{Core.Point} 424 291 )			#bounds: #(#{Graphics.Rectangle} 579 508 1003 799 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -29 1 -86 1 -6 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -29 1 -6 1 -6 1 )					#model: #closeRequest					#label: 'Cancel' )				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#labels: #() ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2MessageNavigator class</class-id> <category>resources</category><body package="ADvance2">applicationImage	"UIMaskEditor new openOnClass: self andSelector: #applicationImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@16 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 6077 scaledBlue: 6077); at: 4 put: ColorValue white; at: 5 put: ColorValue cyan; at: 6 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 7 put: ColorValue blue; at: 8 put: (ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[34 34 34 34 34 34 34 34 34 0 0 0 34 34 34 34 34 34 2 34 34 0 0 0 34 34 0 0 0 0 0 34 34 0 0 0 34 34 34 34 34 34 2 34 34 0 0 0 34 34 0 7 112 114 34 34 34 0 0 0 34 34 33 115 67 7 2 34 34 0 0 0 34 34 39 52 52 16 0 34 34 0 0 0 34 34 39 67 65 64 2 34 34 0 0 0 34 34 39 52 20 16 34 34 34 0 0 0 34 34 34 113 65 7 114 34 34 0 0 0 34 34 34 39 0 113 102 82 34 0 0 0 34 34 34 34 34 33 70 101 34 0 0 0 34 34 34 34 34 34 20 102 2 0 0 0 34 34 34 34 34 34 33 70 96 0 0 0 34 34 34 34 34 34 34 20 96 0 0 0 34 34 34 34 34 34 34 32 2 0 0 0])</body><body package="ADvance2">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: '&amp;File'				#submenu: #(#Menu #(						#(#MenuItem							#rawLabel: '&amp;Close'							#value: #closeRequest ) ) #(1 ) nil ) )			#(#MenuItem				#rawLabel: '&amp;Preferences'				#submenu: #(#Menu #(						#(#MenuItem							#rawLabel: '&amp;General Preferences...'							#value: #generalPreferences )						#(#MenuItem							#rawLabel: '&amp;Navigator Preferences...'							#enabled: false							#value: #navigatorPreferences )						#(#MenuItem							#rawLabel: 'Show &amp;Toolbar'							#enabled: false							#value: #toggleShowToolbar							#indication: true )						#(#MenuItem							#rawLabel: 'Show &amp;Status bar'							#enabled: false							#value: #toggleShowStatusbar							#indication: true ) ) #(2 2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2MessageNavigator class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Message Navigator'			#bounds: #(#{Graphics.Rectangle} 596 513 955 821 )			#flags: 4			#menu: #mainMenu )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.CompositeSpecCollection}					#collection: #(						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.327103 0 1.0 )							#model: #initiatorsFooter							#tabable: false							#isReadOnly: true )						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.336449 0 0 0 0.663551 0 1.0 )							#model: #implementorsFooter							#tabable: false							#isReadOnly: true )						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.672897 0 0 0 1.0 0 1.0 )							#model: #participantsFooter							#tabable: false							#isReadOnly: true ) )					#compositeSpec:					#(#{UI.CompositeSpec}						#layout: #(#{Graphics.LayoutFrame} 0 0 -18 1 0 1 0 1 )						#name: #statusBar ) )				#(#{UI.CompositeSpecCollection}					#collection: #(						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.327103 19 0 )							#model: #initiatorsHeader							#tabable: false							#isReadOnly: true )						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.336449 0 0 0 0.663551 19 0 )							#model: #implementorsHeader							#tabable: false							#isReadOnly: true )						#(#{ICC.ICC1StatusFieldSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.672897 0 0 0 1.0 19 0 )							#model: #participantsHeader							#tabable: false							#isReadOnly: true )						#(#{UI.SequenceViewSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 0 0.327103 0 1.0 )							#flags: 15							#useModifierKeys: true							#selectionType: #highlight )						#(#{UI.SequenceViewSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.336449 20 0 0 0.663551 0 1.0 )							#flags: 15							#useModifierKeys: true							#selectionType: #highlight )						#(#{UI.SequenceViewSpec}							#layout: #(#{Graphics.LayoutFrame} 0 0.672897 20 0 0 1.0 0 1.0 )							#flags: 15							#useModifierKeys: true							#selectionType: #highlight ) )					#compositeSpec:					#(#{UI.CompositeSpec}						#layout: #(#{Graphics.LayoutFrame} 0 0 26 0 0 1 -20 1 )						#name: #panes ) ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2PrintDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Print' 			#min: #(#{Core.Point} 367 254 ) 			#max: #(#{Core.Point} 367 254 ) 			#bounds: #(#{Graphics.Rectangle} 576 432 943 686 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -106 1 149 0 ) 					#name: #copiesLabel 					#flags: 16 					#label: 'Copies:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 84 55 ) 					#name: #fromLabel 					#label: 'from:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 174 55 ) 					#name: #toLabel 					#label: 'to:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 16 122 ) 					#name: #scaleLabel 					#label: 'Scale:' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 6 100 248 180 ) 					#name: #scalingGroup 					#label: 'Scaling' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 6 190 248 246 ) 					#name: #orientationGroup 					#label: 'Orientation' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 6 10 248 90 ) 					#name: #areaGroup 					#label: 'Area' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 16 32 ) 					#name: #printAll 					#model: #area 					#label: 'All' 					#select: #all ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 16 56 ) 					#name: #printPages 					#model: #area 					#label: 'Pages' 					#select: #pages ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 124 56 164 80 ) 					#name: #fromPage 					#model: #fromPage 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#fromPageIsValid: ) 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 198 56 238 80 ) 					#name: #toPage 					#model: #toPage 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#toPageIsValid: ) 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 73 123 120 147 ) 					#name: #scale 					#model: #scale 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#scaleIsValid: ) 					#type: #number ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 16 148 ) 					#name: #fitToPage 					#model: #fitToPage 					#label: 'Fit to page' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 16 214 ) 					#name: #portraitButton 					#model: #orientation 					#label: 'Portrait' 					#select: #portrait ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 120 214 ) 					#name: #landscapeButton 					#model: #orientation 					#label: 'Landscape' 					#select: #landscape ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -106 1 18 0 -6 1 41 0 ) 					#name: #okButtonID 					#model: #doAccept 					#label: 'OK' 					#isDefault: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -106 1 44 0 -6 1 67 0 ) 					#name: #cancelButtonID 					#model: #closeCancel 					#label: 'Cancel' 					#isDefault: false ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -106 1 106 0 ) 					#name: #printToFile 					#model: #printToFile 					#label: 'Print to file (PS)' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -36 1 148 0 -6 1 172 0 ) 					#name: #copies 					#flags: 56 					#model: #copies 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#copiesIsValid: ) 					#type: #number ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -106 1 178 0 ) 					#name: #sortCopies 					#flags: 16 					#model: #sortCopies 					#label: 'Sort copies' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 121 122 ) 					#name: #scalePercent 					#label: '%' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2AboutDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'About'			#bounds: #(#{Graphics.Rectangle} 618 505 926 842 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 65 0 12 0 -10 1 -58 1 )					#name: #applicationText					#flags: 4					#model: #infoText					#isReadOnly: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -85 1 -35 1 -10 1 -12 1 )					#model: #accept					#label: 'OK'					#isDefault: true )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 35 0 10 0 0.5 0 )					#label: #logo					#hasCharacterOrientedLabel: false )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.Rectangle} 66 290 120 327 )					#name: #copyrightText					#flags: 20					#model: #infoFooter					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2AttributeEditor class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Attribute Editor'			#min: #(#{Core.Point} 330 290 )			#max: #(#{Core.Point} 330 290 )			#bounds: #(#{Graphics.Rectangle} 416 306 746 596 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 4 0 102 0 0 1 )					#label: 'Attribute class:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 4 0 136 0 0 1 )					#label: 'Relation type:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 4 0 204 0 0 1 )					#label: 'Comment:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 4 0 34 0 0 1 )					#label: 'Class:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 4 0 68 0 0 1 )					#label: 'Attribute name:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 4 0 170 0 0 1 )					#label: 'Implementation:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 120 0 10 0 -6 1 34 0 )					#flags: 0					#model: #container					#tabable: false					#isReadOnly: true					#type: #string )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 120 0 44 0 -6 1 68 0 )					#name: #roleName					#model: #roleName					#tabable: true					#isReadOnly: false					#type: #string )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 120 0 78 0 -6 1 102 0 )					#model: #component					#type: #string )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 120 0 112 0 -6 1 136 0 )					#model: #type					#comboList: #typeList )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 120 0 146 0 -6 1 170 0 )					#model: #implementation					#comboList: #implementationList )				#(#{UI.TextEditorSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 204 0 -6 1 -36 1 )					#model: #comment					#tabable: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#flags: 40					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#model: #doCancel					#label: 'Cancel' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog class</class-id> <category>resources</category><body package="ADvance2">entryPointsMenu	"MenuEditor new openOnClass: self andSelector: #entryPointsMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem				#rawLabel: 'Update'				#value: #updateEntryPoints ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ICC.ADvance.AD2ScriptDocuDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Script Documentation'			#min: #(#{Core.Point} 420 275 )			#max: #(#{Core.Point} 420 275 )			#bounds: #(#{Graphics.Rectangle} 710 587 1130 862 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 6 0 28 0 0 1 )					#label: 'Entry point:' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} -135 1 58 0 0 1 )					#label: 'Script depth:' )				#(#{UI.CheckBoxSpec}					#layout: #(#{UI.AlignmentOrigin} -135 1 114 0 0 1 )					#flags: 16					#model: #printToFile					#label: 'Print to file' )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 28 0 -150 1 -38 1 )					#name: #entryPoints					#flags: 15					#model: #entryPoints					#menu: #entryPointsMenu					#multipleSelections: false )				#(#{UI.ComboBoxSpec}					#layout: #(#{Graphics.LayoutFrame} -135 1 58 0 -21 1 80 0 )					#name: #scriptDepthComboBox					#model: #scriptDepth					#comboList: #scriptDepthList )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -281 1 -30 1 -186 1 -7 1 )					#name: #printButton					#model: #doPrint					#label: 'Print'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -181 1 -30 1 -96 1 -7 1 )					#name: #previewButton					#model: #doPreview					#label: 'Preview...' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -91 1 -30 1 -6 1 -7 1 )					#model: #doCancel					#label: 'Cancel' )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} -144 1 28 0 -6 1 -38 1 ) ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2PrinterPreferencesDialog class</class-id> <category>interface specs</category><body package="ADvance2">generalSpec	"UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 366 249 )			#max: #(#{Core.Point} 366 249 )			#bounds: #(#{Graphics.Rectangle} 619 510 985 759 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 20 0 -20 1 120 0 )					#label: 'Header' )				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 130 0 -20 1 198 0 )					#label: 'Footer' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 30 47 )					#model: #subjectNameEnabled					#label: 'Subject name' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 30 79 )					#model: #diagramNameEnabled					#label: 'Diagram name' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 200 47 )					#model: #authorEnabled					#label: 'Author' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 200 79 )					#model: #dateModifiedEnabled					#label: 'Date modified' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 30 157 )					#model: #datePrintedEnabled					#label: 'Date printed' ) ) ) )</body><body package="ADvance2">marginsSpec	"UIPainter new openOnClass: self andSelector: #marginsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ''			#min: #(#{Core.Point} 366 167 )			#max: #(#{Core.Point} 366 167 )			#bounds: #(#{Graphics.Rectangle} 700 528 1066 695 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 20 0 -20 1 120 0 )					#label: 'Margins (points)' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 30 47 )					#label: 'Top:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 30 79 )					#label: 'Bottom:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 200 47 )					#label: 'Left:' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 200 79 )					#label: 'Right:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 90 47 150 70 )					#model: #topMargin					#type: #number )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 90 79 150 102 )					#model: #bottomMargin					#type: #number )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 260 47 320 70 )					#model: #leftMargin					#type: #number )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 260 79 320 102 )					#model: #rightMargin					#type: #number ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Page Setup'			#min: #(#{Core.Point} 384 291 )			#max: #(#{Core.Point} 384 291 )			#bounds: #(#{Graphics.Rectangle} 544 504 928 795 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#name: #cancelButton					#model: #doCancel					#label: 'Cancel' )				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#tabable: true					#labels: #() ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2DocuPreferencesDialog class</class-id> <category>interface specs</category><body package="ADvance2">generalSpec	"UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' '			#min: #(#{Core.Point} 394 206 )			#max: #(#{Core.Point} 394 206 )			#bounds: #(#{Graphics.Rectangle} 502 470 896 676 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.GroupBoxSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 49 0 -21 1 112 0 )					#label: 'Output type' )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 40 75 )					#model: #outputType					#label: 'HTML'					#select: #HTML )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 128 75 )					#model: #outputType					#label: 'RTF'					#select: #RTF )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 20 20 )					#label: 'These are defaults for the documentation facility.' )				#(#{UI.RadioButtonSpec}					#layout: #(#{Core.Point} 207 75 )					#model: #outputType					#label: 'Plain Text'					#select: #plainText )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 20 133 )					#model: #useDocumentationWizard					#label: 'Use Documentation Wizard' ) ) ) )</body><body package="ADvance2">scriptsSpec	"UIPainter new openOnClass: self andSelector: #scriptsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: ' '			#min: #(#{Core.Point} 394 206 )			#max: #(#{Core.Point} 394 206 )			#bounds: #(#{Graphics.Rectangle} 606 507 1000 713 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 20 20 )					#label: 'These options determine the style of scripts.' )				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 20 67 )					#label: 'Script depth:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.Rectangle} 112 66 156 89 ) )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 20 106 )					#label: 'Show comments' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 20 130 )					#label: 'Show types' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 20 154 )					#label: 'Show arguments' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 20 179 )					#label: 'Avoid duplicates' ) ) ) )</body><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Documentation Preferences'			#min: #(#{Core.Point} 417 317 )			#max: #(#{Core.Point} 417 317 )			#bounds: #(#{Graphics.Rectangle} 565 576 982 893 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#model: #closeRequest					#label: 'Cancel' )				#(#{TabControlSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 6 0 -6 1 -36 1 )					#name: #tabbing					#model: #tabs					#labels: #() ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2FileOutSubjectDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'File Out Subject'			#min: #(#{Core.Point} 311 164 )			#max: #(#{Core.Point} 311 164 )			#bounds: #(#{Graphics.Rectangle} 603 562 914 726 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.LabelSpec}					#layout: #(#{Core.Point} 20 12 )					#label: 'Filename:' )				#(#{UI.InputFieldSpec}					#layout: #(#{Graphics.LayoutFrame} 20 0 36 0 -20 1 59 0 )					#model: #filename )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 20 67 )					#name: #recurseSubjects					#model: #recurseSubjects					#label: 'Recurse subjects' )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -175 1 -33 1 -100 1 -10 1 )					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -95 1 -33 1 -20 1 -10 1 )					#model: #doCancel					#label: 'Cancel' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Core.Point} 20 94 )					#model: #fileOutWholeClass					#label: 'File out whole class' ) ) ) )</body></methods><methods><class-id>ICC.ADvance.AD2AddMessageDialog class</class-id> <category>interface specs</category><body package="ADvance2">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window:		#(#{UI.WindowSpec}			#label: 'Add Message'			#min: #(#{Core.Point} 426 298 )			#max: #(#{Core.Point} 494 318 )			#bounds: #(#{Graphics.Rectangle} 374 482 868 800 ) )		#component:		#(#{UI.SpecCollection}			#collection: #(				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 6 0 28 0 -3 0.5 -38 1 )					#name: #initiatorServices					#flags: 15					#model: #initiatorServices )				#(#{UI.SequenceViewSpec}					#layout: #(#{Graphics.LayoutFrame} 3 0.5 28 0 -6 1 -38 1 )					#name: #participantServices					#flags: 15					#model: #participantServices )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -161 1 -30 1 -86 1 -7 1 )					#name: #okButton					#flags: 40					#model: #doAccept					#label: 'OK'					#isDefault: true )				#(#{UI.ActionButtonSpec}					#layout: #(#{Graphics.LayoutFrame} -81 1 -30 1 -6 1 -7 1 )					#model: #doCancel					#label: 'Cancel' )				#(#{UI.CheckBoxSpec}					#layout: #(#{Graphics.LayoutOrigin} 6 0 -30 1 )					#model: #addScript					#label: 'Add script in diagram' )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 6 0 28 0 0 1 )					#label: #initiator )				#(#{UI.LabelSpec}					#layout: #(#{UI.AlignmentOrigin} 3 0.5 28 0 0 1 )					#label: #participant ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="ADvance2">openADvanceWorkbench	"Open the workbench of ADvance"	&lt;menuItem: 'ADvance Workbench'		icon: #advanceIcon		nameKey: nil		menu: #(#menuBar #tools)		position: 1.0&gt;	ICC.ADvance.AD2Workbench open</body></methods><initialize><class-id>ICC.ADvance.AD2SubjectEnvironment</class-id></initialize><initialize><class-id>ICC.ADvance.AD2DiagramPainter</class-id></initialize><initialize><class-id>ICC.ADvance.AD2ClassSpec</class-id></initialize><initialize><class-id>ICC.ADvance.IccSysOrg</class-id></initialize><initialize><class-id>ICC.ADvance.AD2StructureFilter</class-id></initialize><initialize><class-id>ICC.ADvance.AD2SubjectWizard</class-id></initialize><initialize><class-id>ICC.ADvance.AD2SystemOrganization</class-id></initialize><initialize><class-id>ICC.ADvance.AD2SystemEnvironment</class-id></initialize><initialize><class-id>ICC.ADvance.ICCPNGStream</class-id></initialize><initialize><class-id>ICC.ADvance.ADvance</class-id></initialize><initialize><class-id>ICC.ADvance.AD2PlugInRegistry</class-id></initialize><initialize><class-id>ICC.ADvance.AD2DiagramState</class-id></initialize><initialize><class-id>ICC.ADvance.AD2Preferences</class-id></initialize><initialize><class-id>ICC.ADvance.AD2AddMessageDialog</class-id></initialize><initialize><class-id>ICC.ADvance.AD2FilterEnvironment</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>GeneralNameSpace</name><environment>Kernel</environment><super>Core.KeyedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>organization bindings specificImports generalImports </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Name Spaces</category><attributes><package>System-Name Spaces</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>ICC1SimpleDialog</name><environment>ICC</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class><class><name>ICC1AboutDialog</name><environment>ICC</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>logo infoText windowLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class><class><name>ScheduledWindow</name><environment>UI</environment><super>Graphics.Window</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label icon minimumSize maximumSize component lookPreferences paintPreferences edgeDecorationPolicy widgetPolicy controller model damageRepairPolicy masterWindow activationNotification application dragDropInProgress dragDropTracker dropTarget keyboardProcessor receiveWindowEvents sendWindowEvents toolbarVisible windowEventBlock layoutIsInvalid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>Geometric</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>Polyline</name><environment>Graphics</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vertices </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>ICC1Wizard</name><environment>ICC</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>page </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class><class><name>ICC1Images</name><environment>ICC</environment><super>ICC.ICC1Resources</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCResources</package></attributes></class><class><name>Image</name><environment>Graphics</environment><super>Graphics.PixelArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bits width height depth bitsPerPixel palette maxPixelValue rowByteSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>ICC1Utils</name><environment>ICC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class><class><name>ICC1ApplicationModel</name><environment>ICC</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class><class><name>View</name><environment>UI</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>OrderedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>firstIndex lastIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>ComposedText</name><environment>Graphics</environment><super>Graphics.TextLines</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text compositionWidth compositionHeight wordWrap fontPolicy lineTable fitWidth </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>Graphics-Text Support</category><attributes><package>Graphics-Text Support</package></attributes></class><class><name>ScrollWrapper</name><environment>UI</environment><super>Graphics.TranslatingWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents preferredBoundsBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Support</category><attributes><package>Interface-Support</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>ActionButtonSpec</name><environment>UI</environment><super>UI.ButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isDefault defaultable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>ProgramNodeEnumerator</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Support</category><attributes><package>System-Compiler-Support</package></attributes></class><class><name>ArbitraryComponentSpec</name><environment>UI</environment><super>UI.NamedSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component dynamism passClicks pushAspect pushMode pushOn </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>AbstractRefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator toolbarMenuHolder findHolder findList toolsetsList dispatcher </inst-vars><class-inst-vars>showToolbarHolder </class-inst-vars><imports></imports><category></category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>CompositeSpecCollection</name><environment>UI</environment><super>UI.SpecCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>compositeSpec </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>ICC1Dialog</name><environment>ICC</environment><super>ICC.ICC1SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title infoIconBlock buttonAlignment margin minButtonWidth openCentered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class><class><name>ICC1ProgressDialog</name><environment>ICC</environment><super>ICC.ICC1Dialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>progress infoField1 infoField2 remainingTimeField animationProcess actionProcess startTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IC&amp;C ADvance Support</category><attributes><package>ICCCommonClasses</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>ControllerWithMenu</name><environment>UI</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuHolder performer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>MenuBuilder</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuStack resultMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>LineSegment</name><environment>Graphics</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start end </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class></st-source>