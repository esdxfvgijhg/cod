<?xml version="1.0"?><st-source><!-- Name: Seaside-DevelopmentComment: Web-based development tools and debugging support.DbIdentifier: bear73DbTrace: 492591DbUsername: jkottDbVersion: 3.2.0 - pmm.166 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Tools-Web' '') #(#any 'Seaside-VisualWorks-Tools-Web' '') #(#any 'Seaside-Flow' '') #(#any 'Seaside-VisualWorks-Flow' ''))Id: 5b43e4dc-a469-44d4-b0b6-f5f3c65952d5Namespace: SeasidePackageName: Seaside-DevelopmentParcel: #('Seaside-Development')ParcelName: Seaside-DevelopmentPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Tools-Web' '') #('Seaside-VisualWorks-Tools-Web' '') #('Seaside-Flow' '') #('Seaside-VisualWorks-Flow' ''))PrintStringCache: (3.2.0 - pmm.166 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Development-pmm.166.mczVersion: 3.2.0 - pmm.166 1Date: 3:31:28 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:28 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAToolPlugin</name><environment>Seaside</environment><super>Seaside.WAPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAToolPlugin</class-id><body>Abstract root class for all development tool bar tools.</body></comment><class><name>WAConfigureToolPlugin</name><environment>Seaside</environment><super>Seaside.WAToolPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAConfigureToolPlugin</class-id><body>I display the configuration dialog for the currently active application</body></comment><class><name>WADeprecatedToolFilter</name><environment>Seaside</environment><super>Seaside.WARequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>notifications </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Filter</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WAHaloPlugin</name><environment>Seaside</environment><super>Seaside.WAPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars>root </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAHaloPlugin</class-id><body>Abstract root class for all halo tools. They add functionality to the halo toolbar.</body></comment><class><name>WAStylesHaloPlugin</name><environment>Seaside</environment><super>Seaside.WAHaloPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAStylesHaloPlugin</class-id><body>I open the style editor on the component class.</body></comment><class><name>WAPrettyPrintedDocument</name><environment>Seaside</environment><super>Seaside.WAHtmlDocument</super><private>false</private><indexed-type>none</indexed-type><inst-vars>html indentLevel indentCloseTags firstLine singleEncoder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAPrettyPrintedDocument</class-id><body>This Document can be used in place of a WAHtmlDocument and will display a pretty version of the HTML source that would have been generated by the WAHtmlDocument.The technique here is that: - anything we are asked to output raw (i.e. #nextPut: and #nextPutAll:) we encode with entities - anything we are asked to entity encode (i.e. via #xmlEncoder) we double-encode, by wrapping the two WAXmlEncoders around each other - anything we want to output ourselves (i.e. prettiness) we do using a WAHtmlCanvas that we create ourselves</body></comment><class><name>WATimingToolFilter</name><environment>Seaside</environment><super>Seaside.WARequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>startTime previousTiming </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Filter</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WADevelopmentConfiguration</name><environment>Seaside</environment><super>Seaside.WASystemConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WATool</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WATool</class-id><body>A WATool is the common base class for tools called from the development tool bar. Is doesn't do anything but including WADevelopmentFiles.</body></comment><class><name>WAInspector</name><environment>Seaside</environment><super>Seaside.WATool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>path selected input </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAInspector</class-id><body>This is an abstract implementation of a web-based object inspector. Platforms should implement their own subclasses, specifying behaviour for all unimplemented methods.Note that #openNativeInspectorOn: on the class-side also needs to be implemented.Also subclasses probably want to implement #initialize and #unload on the class-side to call 'self select' and 'self unselect' respectively. This will ensure they are registered as the current implementation when they are loaded.</body></comment><class><name>WAClassnameHaloPlugin</name><environment>Seaside</environment><super>Seaside.WAHaloPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAClassnameHaloPlugin</class-id><body>I display the class name of the component class.</body></comment><class><name>WADevelopmentFiles</name><environment>Seaside</environment><super>Seaside.WAFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WADevelopmentFiles</class-id><body>CSS and images used by the web-based development tools.The icons are from the Tango Desktop Project (tango.freedesktop.org), they are licensed under the Creative Commons Attribution Share-Alike license.</body></comment><class><name>WAPluggableTool</name><environment>Seaside</environment><super>Seaside.WATool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAPluggableTool</class-id><body>A WAPluggableTool is a wrapper component around tools that can't be made subclasses of WATool. WATool is only really needed to provide the icon image.Instance Variables	component:		&lt;WAComponent&gt;component	- the component to render</body></comment><class><name>WATimingToolPlugin</name><environment>Seaside</environment><super>Seaside.WAToolPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WATimingToolPlugin</class-id><body>I display render and callback times.</body></comment><class><name>WADebugErrorHandler</name><environment>Seaside</environment><super>Seaside.WAErrorHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WADebugErrorHandler</class-id><body>I am like WAErrorHandler except that I open a debugger in the image for errors and warnings (not for internal errors).</body></comment><class><name>WAWalkbackErrorHandler</name><environment>Seaside</environment><super>Seaside.WADebugErrorHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAWalkbackErrorHandler</class-id><body>I am the default development error handler that displays the stack frames and adds the option to display a debugger.I delegate the rendering to WAWalkback.This handler uses Components and depends on having a valid Session. If an error occurs outside of the Session scope it will simply use the superclass behaviour, which should be to open a debugger.</body></comment><class><name>WATerminateToolPlugin</name><environment>Seaside</environment><super>Seaside.WAToolPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WATerminateToolPlugin</class-id><body>I try to terminate the process handling this session. This can work of you're at 100% CPU.</body></comment><class><name>WAViewer</name><environment>Seaside</environment><super>Seaside.WALabelledFormDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>presenter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WADeprecation</name><environment>Seaside</environment><super>Seaside.WATool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>table filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WADeprecationToolPlugin</name><environment>Seaside</environment><super>Seaside.WAToolPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WADeprecationToolPlugin</class-id><body>I display deprecation warnings.</body></comment><class><name>WAToggleHalosToolPlugin</name><environment>Seaside</environment><super>Seaside.WAToolPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAToggleHalosToolPlugin</class-id><body>I toggle halos on and off.</body></comment><class><name>WANewSessionToolPlugin</name><environment>Seaside</environment><super>Seaside.WAToolPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WANewSessionToolPlugin</class-id><body>I create a new session.</body></comment><class><name>WAHaloVisitor</name><environment>Seaside</environment><super>Seaside.WAPainterVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>toolDecoration renderContext visitor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WAValidateToolPlugin</name><environment>Seaside</environment><super>Seaside.WAToolPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAValidateToolPlugin</class-id><body>I validate and XHTML page by sending it to the W3C validator. I only work if the website is publically available.</body></comment><class><name>WAToolDecoration</name><environment>Seaside</environment><super>Seaside.WADecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>plugins showHalos halos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WAWalkback</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>exception limit </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAWalkback</class-id><body>An abstract component that renders an exception stack with temporary variables. Platforms should implement a concrete subclass and register that subclass when it is loaded.By default this class renders only the top few stack frames, but offers the option to render all. It also offers the option to open a debugger in the image or to proceed with the execution and answers true and false, respectively.</body></comment><class><name>WAHalo</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>root mode plugins </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Core</category><attributes><package>Seaside-Development</package></attributes></class><class><name>WAInspectorHaloPlugin</name><environment>Seaside</environment><super>Seaside.WAHaloPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAInspectorHaloPlugin</class-id><body>I open an inspector on the component class.</body></comment><class><name>WAModeHaloPlugin</name><environment>Seaside</environment><super>Seaside.WAHaloPlugin</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Development-Plugins</category><attributes><package>Seaside-Development</package></attributes></class><comment><class-id>Seaside.WAModeHaloPlugin</class-id><body>I control the rendering modes of the halo.</body></comment><shared-variable><name>Current</name><environment>Seaside.WAInspector</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Seaside-Development</package></attributes></shared-variable><shared-variable><name>Current</name><environment>Seaside.WAWalkback</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Seaside-Development</package></attributes></shared-variable><methods><class-id>Seaside.WAToolPlugin</class-id> <category>actions</category><body package="Seaside-Development">open: aComponent onAnswer: aBlock	| component |	component := self requestor decoratedComponent.	component removeDecoration: self requestor.	super open: aComponent onAnswer: [ :value |		component addDecoration: self requestor.		aBlock value: value ]</body></methods><methods><class-id>Seaside.WAToolPlugin class</class-id> <category>instance creation</category><body package="Seaside-Development">allSubclassesFor: aRequestorObject	| plugins |	plugins := self allSubclasses		collect: [ :each | each for: aRequestorObject ].	^ plugins sorted</body><body package="Seaside-Development">for: aRequestorObject	^ self basicNew initializeRequestor: aRequestorObject</body></methods><methods><class-id>Seaside.WAConfigureToolPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'Configure'</body><body package="Seaside-Development">priority	^ 200</body></methods><methods><class-id>Seaside.WAConfigureToolPlugin</class-id> <category>actions</category><body package="Seaside-Development">execute	self open: (WAPluggableTool on: self application configurationComponent)</body></methods><methods><class-id>Seaside.WADeprecatedToolFilter</class-id> <category>actions</category><body package="Seaside-Development">deprecated: aNotification	"Adds a deprecated warning aNotification to the receiver. Remove old deprecation warnings that have the same message and detail text."	notifications := notifications reject: [ :each | 		(each messageText = aNotification messageText)			and: [ each details = aNotification details ] ].	notifications add: aNotification.	aNotification resume</body><body package="Seaside-Development">reset	notifications := OrderedCollection new</body></methods><methods><class-id>Seaside.WADeprecatedToolFilter</class-id> <category>initialization</category><body package="Seaside-Development">initialize	super initialize.	self reset</body></methods><methods><class-id>Seaside.WADeprecatedToolFilter</class-id> <category>accessing</category><body package="Seaside-Development">notifications	^ notifications</body></methods><methods><class-id>Seaside.WADeprecatedToolFilter</class-id> <category>processing</category><body package="Seaside-Development">handleFiltered: aRequestContext 	[ super handleFiltered: aRequestContext ] 		on: GRDeprecatedApiNotification, GRPlatform current deprecationExceptionSet		do: [ :notification | self deprecated: notification ]</body></methods><methods><class-id>Seaside.WAHaloPlugin</class-id> <category>actions</category><body package="Seaside-Development">open: aComponent onAnswer: aBlock	| component decoration |	component := self session presenter.	decoration := component decorations		detect: [ :each | each isKindOf: WAToolDecoration ]		ifNone: [ nil ].	decoration isNil		ifTrue: [ ^ super open: aComponent onAnswer: aBlock ].	component removeDecoration: decoration.	super open: aComponent onAnswer: [ :value |		component addDecoration: decoration.		aBlock value: value ]</body></methods><methods><class-id>Seaside.WAHaloPlugin</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html div		class: self cssClass;		with: [ super renderContentOn: html ]</body></methods><methods><class-id>Seaside.WAHaloPlugin</class-id> <category>accessing</category><body package="Seaside-Development">root	^ root</body></methods><methods><class-id>Seaside.WAHaloPlugin</class-id> <category>initialization</category><body package="Seaside-Development">initializeRoot: aRootObject requestor: aRequestorObject	self initializeRequestor: aRequestorObject.	root := aRootObject</body></methods><methods><class-id>Seaside.WAHaloPlugin class</class-id> <category>instance creation</category><body package="Seaside-Development">allSubclassesOn: aTargetObject for: aRequestorObject	| plugins |	plugins := self allSubclasses		collect: [ :each | each on: aTargetObject for: aRequestorObject ].	^ plugins sorted</body><body package="Seaside-Development">on: aTargetObject for: aRequestorObject	^ self basicNew initializeRoot: aTargetObject requestor: aRequestorObject</body></methods><methods><class-id>Seaside.WAStylesHaloPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'Styles'</body><body package="Seaside-Development">priority	^ 700</body><body package="Seaside-Development">tooltip	^ 'CSS Style Editor'</body></methods><methods><class-id>Seaside.WAStylesHaloPlugin</class-id> <category>actions</category><body package="Seaside-Development">execute	self open: (WAPluggableTool on: (WAViewer on: self root))</body></methods><methods><class-id>Seaside.WAPrettyPrintedDocument</class-id> <category>configuration</category><body package="Seaside-Development">knownEvents	^ #('onabort' 'onblur' 'onchange' 'onclick' 'ondblclick' 'onerror' 'onfocus' 'oninput' 'onkeydown' 'onkeypress' 'onkeyup' 'onload' 'onmousedown' 'onmousemove' 'onmouseout' 'onmouseover' 'onmouseup' 'onreset' 'onresize' 'onscroll' 'onselect' 'onsubmit' 'onunload')</body><body package="Seaside-Development">knownRefs	^ #('action' 'cite' 'classid' 'codebase' 'data' 'href' 'longdesc' 'profile' 'src' 'usemap')</body></methods><methods><class-id>Seaside.WAPrettyPrintedDocument</class-id> <category>writing</category><body package="Seaside-Development">closeTag: aString	indentLevel := indentLevel - 1.	indentCloseTags removeLast		ifTrue: [ self indent ].	self nextPutAll: '&lt;/'.	html span 		class: 'wa-tag'; 		with: aString.	self nextPut: $&gt;</body><body package="Seaside-Development">nextPut: aCharacter	singleEncoder nextPut: aCharacter</body><body package="Seaside-Development">nextPutAll: aString	singleEncoder nextPutAll: aString</body><body package="Seaside-Development">openTag: aString attributes: anAttributes closed: aBoolean	self indent.	self nextPut: $&lt;.	html span		class: 'wa-tag';		with: aString.	self attributes: anAttributes.	aBoolean ifTrue: [ self nextPut: $/ ].	self nextPut: $&gt;.	aBoolean ifFalse: [ indentLevel := indentLevel + 1 ].	indentCloseTags removeLast; addLast: true; addLast: aBoolean</body></methods><methods><class-id>Seaside.WAPrettyPrintedDocument</class-id> <category>private</category><body package="Seaside-Development">attribute: aKey with: aValue 	aValue == false ifTrue: [ ^ self ].	html space.	html span		class: 'wa-attribute-key';		with: aKey.	self nextPut: $=.	html span		class: 'wa-attribute-value';		with: [			self nextPut: $".			(self knownRefs includes: aKey) 				ifTrue: [					html anchor						url: aValue greaseString;						with: [ self print: aValue ] ]				ifFalse: [					(self knownEvents includes: aKey) 						ifTrue: [							html anchor								onClick: aValue;								with: [ self print: aValue ] ]						ifFalse: [							aValue == true 								ifTrue: [ self nextPutAll: aKey ]								ifFalse: [ self print: aValue ] ] ].			self nextPut: $" ]</body><body package="Seaside-Development">attributes: anAttributes	anAttributes ifNil: [ ^ self ].	anAttributes keysAndValuesDo: [ :key :value |		self attribute: key with: value ]</body><body package="Seaside-Development">indent	firstLine		ifTrue: [ firstLine := false ]		ifFalse: [ html break ].	indentLevel timesRepeat: [ html space: 2 ].	html flush</body></methods><methods><class-id>Seaside.WAPrettyPrintedDocument</class-id> <category>initialization</category><body package="Seaside-Development">initializeWithContext: aRenderContext	self initializeWithStream: aRenderContext document stream codec: self requestContext codec.	xmlEncoder := GRPlatform current xmlEncoderOn: (singleEncoder := xmlEncoder). "we want double escapting to happen"	html := WAHtmlCanvas context: aRenderContext.	indentCloseTags := OrderedCollection with: false.	indentLevel := 0.	firstLine := true</body></methods><methods><class-id>Seaside.WAPrettyPrintedDocument class</class-id> <category>instance creation</category><body package="Seaside-Development">context: aRenderContext	^ self basicNew initializeWithContext: aRenderContext; yourself</body><body package="Seaside-Development">on: aStream codec: aCodec	self error: 'Use #context:'</body></methods><methods><class-id>Seaside.WATimingToolFilter</class-id> <category>accessing</category><body package="Seaside-Development">currentTiming	"Answer the running timing, or 0 if no value is available."	^ startTime isNil ifTrue: [ 0 ] ifFalse: [ Time millisecondsSince: startTime ]</body><body package="Seaside-Development">previousTiming	"Answer the previous timing, or 0 if no value is available."	^ previousTiming ifNil: [ 0 ]</body></methods><methods><class-id>Seaside.WATimingToolFilter</class-id> <category>processing</category><body package="Seaside-Development">handleFiltered: aRequestContext	startTime := Time millisecondClockValue.	[ super handleFiltered: aRequestContext ]		ensure: [ previousTiming := self currentTiming ]</body></methods><methods><class-id>Seaside.WADevelopmentConfiguration</class-id> <category>ancestry</category><body package="Seaside-Development">parents	^ Array with: WARenderLoopConfiguration instance</body></methods><methods><class-id>Seaside.WADevelopmentConfiguration</class-id> <category>description</category><body package="Seaside-Development">describeOn: config	config at: #rootDecorationClasses addAll: (Array with: (GRPlatform current bindingOf: WAToolDecoration))</body></methods><methods><class-id>Seaside.WADevelopmentConfiguration class</class-id> <category>initialization</category><body package="Seaside-Development">initialize	WAAdmin applicationDefaults addParent: self instance</body></methods><methods><class-id>Seaside.WATool</class-id> <category>updating</category><body package="Seaside-Development">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	WAToolFiles default updateRoot: anHtmlRoot.	WADevelopmentFiles default updateRoot: anHtmlRoot</body></methods><methods><class-id>Seaside.WAInspector</class-id> <category>actions</category><body package="Seaside-Development">actions	"A list of action selectors used to render buttons in the Inspector."	^ #(doIt inspectIt)</body><body package="Seaside-Development">chooseObject: anObject named: aString	"Choose a new object to be inspected, adding aString to the navigation path."	path pushSegment: anObject name: aString.	selected := nil</body><body package="Seaside-Development">doIt	"Execute the code in the textarea. We return the result so subclasses can do something	with it if desired."		^ self evaluate</body><body package="Seaside-Development">evaluate	"Evaluate the code in the textarea and return the result."		self subclassResponsibility</body><body package="Seaside-Development">inspectIt	"Evaluate the code in the textarea and then inspect the result."	| result |	result := self evaluate.	self 		chooseObject: result		named: result greaseString</body></methods><methods><class-id>Seaside.WAInspector</class-id> <category>hooks</category><body package="Seaside-Development">children	^ Array with: path</body><body package="Seaside-Development">style	^ 'form {	padding: 2px;	margin: 0;}form th {	text-align: left;	padding-right: 2em;}form textarea {	width: 100%;	height: 100px;	border: 1px solid #aaa;}'</body></methods><methods><class-id>Seaside.WAInspector</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html heading		level: 1;		with: (self object printStringLimitedTo: 50).	html render: path.	html form: [		self renderMembersOn: html.		self renderEditAreaOn: html ]</body><body package="Seaside-Development">renderEditAreaOn: html	html textArea		value: input;		callback: [ :value | input := value ].	html break.	self actions do: [ :each |		html submitButton			callback: [ self perform: each ];			text: each ]</body><body package="Seaside-Development">renderMembersOn: html	| members radioGroup |	selected := nil.	members := self fieldsFor: self object.	members isEmpty ifTrue: [ ^ self ].	radioGroup := html radioGroup.	radioGroup		callback: [ :value | selected := value ];		selected: selected.	html table: [		members do: [ :association |			self				renderRow: association value				named: association key				group: radioGroup				on: html ] ]</body><body package="Seaside-Development">renderRow: anObject named: aString group: aRadioGroup on: html	| radioButton |	html tableRow: [		html tableHeading: [			radioButton := aRadioGroup radioButton				ensureId;				value: aString;				yourself.			html label for: radioButton id; with: [				(self isPrimitiveType: anObject)					ifTrue: [ html text: aString ]					ifFalse: [						html anchor							callback: [ self chooseObject: anObject named: aString ];							with: aString ] ] ].		html tableData: (anObject printStringLimitedTo: 100) ]</body></methods><methods><class-id>Seaside.WAInspector</class-id> <category>accessing</category><body package="Seaside-Development">object	^ path currentSegment</body><body package="Seaside-Development">object: anObject 	self 		chooseObject: anObject		named: anObject greaseString</body></methods><methods><class-id>Seaside.WAInspector</class-id> <category>initialization</category><body package="Seaside-Development">initialize	super initialize.	path := WAPath new</body></methods><methods><class-id>Seaside.WAInspector</class-id> <category>testing</category><body package="Seaside-Development">isPrimitiveType: anObject	"Return a boolean indicating whether anObject is a primitive type in the system.	Primitive types will not be rendered with a link allowing them to be inspected."	^ anObject isNumber or: [ #(nil true false) includes: anObject ]</body></methods><methods><class-id>Seaside.WAInspector</class-id> <category>private</category><body package="Seaside-Development">fieldsFor: anObject	"Return a sequenceable collection of Associations representing labels and values	of instance variables, etc. which should be displayed when inspecting anObject."	self subclassResponsibility</body></methods><methods><class-id>Seaside.WAInspector class</class-id> <category>registration</category><body package="Seaside-Development">current	^ Current</body><body package="Seaside-Development">current: anInspectorClass	Current := anInspectorClass</body><body package="Seaside-Development">select	self current: self</body><body package="Seaside-Development">unselect	(self current = self) ifTrue: [ self current: nil ]</body></methods><methods><class-id>Seaside.WAInspector class</class-id> <category>instance creation</category><body package="Seaside-Development">on: anObject	^ self new object: anObject; yourself</body></methods><methods><class-id>Seaside.WAClassnameHaloPlugin</class-id> <category>accessing</category><body package="Seaside-Development">priority	^ 100</body></methods><methods><class-id>Seaside.WAClassnameHaloPlugin</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html div class: self cssClass; with: self root className</body></methods><methods><class-id>Seaside.WADevelopmentFiles</class-id> <category>accessing</category><body package="Seaside-Development">selectorsToInclude	^ #( developmentCss )</body></methods><methods><class-id>Seaside.WADevelopmentFiles</class-id> <category>styles</category><body package="Seaside-Development">developmentCss	^ '/* toolbar */body { margin-bottom: 25px !important; /*matches toolbar min-height + padding and margin*/}.wa-toolbar {	left: 0;	right: 0;	bottom: 0;	z-index: 20;	padding: 2px;	position: fixed;	text-align: left;	background-color: #eee;	border-top: 1px solid #aaa;	min-height: 20px;}.wa-toolbar { vertical-align: middle; }.wa-toolbar, .wa-toolbar * {	color: #444;	font-size: 14px;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}.wa-toolbar a {	padding-left: 3px;	padding-right: 3px;	text-decoration: none;}.wa-toolbar a:hover {	text-decoration: underline;}.wa-toolbar .wa-deprecationtoolplugin {	color: #ff7000;}/* halos */.wa-halo {	margin: 4px;	text-align: left;	border: 1px solid #aaa;}.wa-halo .wa-halo-header {	padding: 2px 4px ;	overflow: hidden;	background-color: #eee;	border-bottom: 1px solid #aaa;}.wa-halo .wa-halo-header,.wa-halo .wa-halo-header * {	color: #444;	font-size: 14px;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}.wa-halo .wa-halo-header a {	text-decoration: none;}.wa-halo .wa-halo-header .wa-classnamehaloplugin,.wa-halo .wa-halo-header .wa-browserhaloplugin,.wa-halo .wa-halo-header .wa-inspectorhaloplugin,.wa-halo .wa-halo-header .wa-styleshaloplugin {	float: left;	display: block;	padding-right: 4px;}.wa-halo .wa-halo-header .wa-classnamehaloplugin {	font-weight: bold;	padding-right: 8px;}.wa-halo .wa-halo-header .wa-browserhaloplugin, .window .window-titlebar .wa-browserhaloplugin {	background: url(codebrowser.png) no-repeat;}.wa-halo .wa-halo-header .wa-inspectorhaloplugin, .window .window-titlebar .wa-inspectorhaloplugin {	background: url(inspector.png) no-repeat;}.wa-halo .wa-halo-header .wa-styleshaloplugin, .window .window-titlebar .wa-styleshaloplugin {	background: url(styleeditor.png) no-repeat;}.wa-halo .wa-halo-header .wa-browserhaloplugin a,.wa-halo .wa-halo-header .wa-inspectorhaloplugin a,.wa-halo .wa-halo-header .wa-styleshaloplugin a {	width: 16px;	outline: none;	display: block;	text-indent: -32000px;	background-position: 0 50%;}.wa-halo .wa-halo-header .wa-modehaloplugin {	float: right;	display: block;	padding-right: 4px;}.wa-halo .wa-halo-header .wa-modehaloplugin a {	text-decoration: none;}.wa-halo .wa-halo-header .wa-modehaloplugin a:hover {	text-decoration: underline;}.wa-halo .wa-halo-header .wa-modehaloplugin a.active {	font-weight: bold;}.wa-halo .wa-halo-body {	clear: both;}.wa-halo .wa-halo-body .wa-halo-source {	padding: 2px 4px;	background-color: #fff;}.wa-halo .wa-halo-body .wa-halo-source,.wa-halo .wa-halo-body .wa-halo-source * {	color: #444;	line-height: 1;	font-size: 12px;	font-family: Monaco, "Courier New", Courier, serif;}.wa-halo .wa-halo-body .wa-halo-source .wa-tag {	color: navy;	font-weight: bold;}.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-key {	color: navy;}.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-value,.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-value a {	color: purple;	text-decoration: none;}.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-value a:hover {	text-decoration: underline;}'</body></methods><methods><class-id>Seaside.WADevelopmentFiles</class-id> <category>uploaded</category><body package="Seaside-Development">codebrowserPng	^ #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 9 22 18 55 41 59 82 2 72 0 0 1 203 73 68 65 84 56 203 165 147 77 104 19 65 20 199 127 51 221 163 72 22 34 45 226 177 224 41 160 88 43 1 15 130 21 132 120 236 69 208 182 39 175 165 23 21 60 138 32 197 32 245 34 126 128 154 22 138 49 189 91 26 17 77 92 16 237 193 98 211 141 27 76 253 192 213 108 235 16 21 90 145 205 120 48 67 179 109 106 43 190 203 255 13 204 251 207 111 102 222 131 255 12 97 146 226 93 250 128 25 224 216 86 122 120 136 188 169 147 0 151 71 47 157 1 102 14 30 119 216 142 182 18 88 77 189 1 240 237 249 57 182 163 87 79 74 221 172 59 45 141 211 222 84 64 89 21 88 221 147 167 172 10 252 232 122 216 86 95 76 75 6 199 138 28 233 31 6 24 55 4 196 227 113 196 137 165 63 139 125 77 101 77 125 223 39 127 79 50 116 237 25 31 158 140 51 183 16 132 64 135 213 122 31 165 20 245 122 125 195 75 7 65 128 155 73 173 21 123 203 124 45 77 117 0 61 17 3 219 182 177 109 59 82 236 251 62 110 38 197 224 88 145 197 199 25 94 149 151 81 165 28 64 207 200 100 99 246 175 4 230 228 129 116 129 197 124 134 185 183 10 85 202 241 115 255 69 206 159 189 48 11 136 77 9 180 214 20 210 189 12 92 121 138 55 125 135 202 231 239 168 249 7 188 239 26 166 179 205 55 70 8 180 214 100 179 89 126 201 67 204 59 14 239 62 213 89 122 61 5 189 105 118 173 172 0 218 52 161 110 75 16 134 33 187 63 166 121 244 165 155 251 185 28 221 242 37 59 251 110 145 76 38 113 93 151 55 149 5 140 139 92 79 80 173 86 241 60 143 145 201 6 71 59 43 172 238 72 16 30 24 37 145 72 96 89 22 150 101 69 186 120 3 65 44 22 67 107 77 173 86 67 107 141 148 18 173 53 66 8 132 16 173 219 27 17 3 165 20 142 227 108 58 117 198 100 125 24 131 137 155 183 175 159 250 135 41 158 48 201 111 90 157 232 152 121 9 252 18 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray</body><body package="Seaside-Development">inspectorPng	^ #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 240 0 240 0 239 52 6 103 27 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 11 5 16 15 5 37 253 173 47 0 0 1 246 73 68 65 84 56 203 157 146 77 107 19 81 24 133 159 59 201 36 77 154 102 134 74 82 10 10 181 93 104 26 69 20 193 133 184 20 10 85 119 226 38 191 192 111 169 244 31 136 182 36 65 68 20 116 89 119 85 16 197 77 168 59 65 236 162 84 40 164 137 86 171 150 80 53 141 205 71 39 77 50 51 215 69 72 73 66 82 170 103 119 15 239 61 239 225 188 71 60 121 250 120 49 247 39 119 140 61 64 85 213 231 19 183 38 47 182 144 211 209 187 150 220 35 238 77 223 145 237 162 78 41 235 92 62 191 185 235 118 77 211 59 242 78 33 196 206 35 153 76 118 28 10 133 66 93 133 119 28 180 15 102 50 25 102 95 204 2 144 152 75 0 208 180 107 119 7 223 190 175 146 74 167 57 122 106 140 109 197 139 105 43 184 100 133 212 252 107 38 110 223 140 196 162 247 159 53 254 40 237 14 52 93 35 149 78 115 232 228 24 159 11 94 6 7 2 140 28 8 82 18 62 180 209 113 252 154 62 115 237 198 149 227 93 29 36 230 18 12 135 79 179 82 112 115 233 204 16 190 30 21 211 182 81 29 10 239 150 37 193 35 227 54 75 111 22 0 1 160 116 10 75 122 3 12 13 232 88 182 100 219 52 169 212 44 202 85 139 126 159 155 95 101 181 37 9 69 74 137 148 118 75 48 110 183 11 132 160 92 181 168 214 36 155 91 53 220 170 131 253 253 30 164 16 45 93 112 2 182 105 154 45 78 108 99 131 53 163 138 223 163 162 247 185 176 45 137 223 227 228 211 70 129 125 61 150 157 107 114 174 212 43 234 66 211 116 52 77 231 194 185 243 164 23 222 18 236 19 124 249 153 39 155 43 145 55 42 124 92 89 167 84 174 144 91 122 229 44 21 139 63 26 2 34 26 159 154 177 44 43 210 124 13 195 48 112 56 84 78 156 141 176 188 86 100 203 84 24 236 149 172 47 190 100 248 224 8 0 31 230 223 167 30 62 120 116 88 116 107 216 213 235 151 167 2 129 224 100 51 231 235 245 17 30 13 243 59 155 173 247 101 245 43 130 127 68 44 30 149 13 145 255 18 0 148 88 60 106 1 148 13 131 191 6 140 246 211 127 51 231 46 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray</body><body package="Seaside-Development">styleeditorPng	^ #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 214 4 9 20 4 42 36 195 187 166 0 0 2 112 73 68 65 84 56 203 173 147 221 75 83 113 24 199 63 155 155 110 57 245 164 169 232 24 180 240 173 50 207 48 74 144 68 27 82 209 141 43 147 145 136 226 159 97 36 236 70 130 174 162 232 38 34 42 86 104 26 42 5 74 47 243 5 65 212 110 52 148 48 95 74 156 107 206 236 156 249 50 117 110 167 139 58 232 130 186 144 30 248 193 247 226 249 124 248 61 207 143 31 28 172 146 107 156 213 74 119 119 183 114 16 216 180 15 222 19 184 65 116 67 167 27 228 223 167 211 13 226 31 112 226 126 184 198 89 173 104 84 24 232 183 55 54 10 73 201 41 16 217 37 184 178 66 95 107 171 4 84 44 222 110 89 150 229 96 219 204 204 76 89 93 109 61 85 85 85 212 56 171 105 111 123 169 87 5 157 246 250 122 135 226 245 18 24 25 1 69 225 136 77 132 212 52 94 127 15 140 249 46 86 230 100 103 153 15 23 228 159 160 188 188 92 133 117 64 36 14 224 42 60 40 42 41 73 88 236 233 97 119 99 131 104 56 204 178 94 199 156 205 198 194 217 211 230 230 155 46 163 86 27 135 40 138 108 132 130 60 122 248 88 7 68 0 180 234 112 74 40 4 202 222 78 190 230 230 225 63 83 76 83 83 51 62 159 143 188 188 60 218 59 94 176 24 76 222 108 56 89 89 168 246 169 2 79 48 16 32 45 63 31 157 193 192 252 229 75 248 47 216 185 238 172 197 231 243 97 52 26 233 31 232 227 211 236 23 4 177 250 208 146 144 237 138 17 76 31 79 126 254 166 191 87 193 100 226 104 105 41 19 69 133 92 113 92 99 109 109 13 69 81 88 95 15 50 60 58 202 80 192 138 201 168 195 159 146 105 143 17 124 168 73 170 141 27 44 211 188 21 38 232 26 241 144 62 61 133 167 239 61 130 32 32 203 50 119 238 221 229 227 143 12 66 187 113 108 135 35 49 239 170 3 208 155 37 123 162 152 195 192 173 49 182 36 3 130 55 132 102 106 146 150 251 207 8 71 34 172 104 173 44 109 9 164 101 89 9 200 219 100 202 126 79 140 0 32 204 38 74 244 87 150 204 195 196 235 102 241 246 26 176 228 22 99 200 182 112 42 43 129 213 245 29 62 15 116 72 54 105 201 21 35 8 123 5 207 106 116 206 97 201 201 96 97 122 25 128 236 226 45 178 114 94 49 120 99 202 247 77 41 72 4 200 148 253 30 155 180 228 122 50 249 110 92 21 104 0 28 117 86 49 122 46 208 127 190 193 34 24 73 37 202 46 235 138 159 161 167 43 146 118 40 189 162 203 61 63 254 183 143 161 81 131 163 206 42 238 28 219 113 233 205 146 93 189 85 252 92 188 235 95 240 127 169 159 24 23 11 103 188 240 115 88 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray</body></methods><methods><class-id>Seaside.WAPluggableTool</class-id> <category>initialization</category><body package="Seaside-Development">initializeWith: aComponent	self initialize.	component := aComponent.	component onAnswer: [ self answer ]</body></methods><methods><class-id>Seaside.WAPluggableTool</class-id> <category>hooks</category><body package="Seaside-Development">children	^ Array with: component</body></methods><methods><class-id>Seaside.WAPluggableTool class</class-id> <category>instance creation</category><body package="Seaside-Development">on: aComponent	^ self basicNew		initializeWith: aComponent;		yourself</body></methods><methods><class-id>Seaside.WATimingToolPlugin</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html span class: self cssClass; with: [		html span			title: 'Callback Time';			with: filter previousTiming.		html text: '/'.		html span			title: 'Render Time';			with: filter currentTiming.		html text: ' ms' ]</body></methods><methods><class-id>Seaside.WATimingToolPlugin</class-id> <category>accessing</category><body package="Seaside-Development">priority	^ 900</body></methods><methods><class-id>Seaside.WATimingToolPlugin</class-id> <category>initialization</category><body package="Seaside-Development">initializeRequestor: aRequestorObject	super initializeRequestor: aRequestorObject.	filter := self session filters		detect: [ :each | each isKindOf: WATimingToolFilter ]		ifNone: [ self session addFilter: WATimingToolFilter new ]</body></methods><methods><class-id>Seaside.WADebugErrorHandler</class-id> <category>actions</category><body package="Seaside-Development">basicResume: anException	"If the user closes the debugger, the process is terminated and the stack unwound.	There was previously an #ifCurtailed: block around the #open: call above to try to	catch the process termination so we could display a nice error page but this also	ended up being called when the user restarted a context in the debugger.		If they Proceed in the debugger, behaviour is platform-dependent. Currently, VW	should resume the signaling context, so this method will not continue past the call	to #open:. Squeak currently resumes the context that opened the Debugger, which	results in the call to #open: returning."	^ anException isResumable		ifTrue: [ anException resume ]		ifFalse: [ self unableToResumeResponse ]</body><body package="Seaside-Development">debugAndResume: anException	self open: anException.	"If the user closes the debugger, the process is terminated and the stack unwound.	There was previously an #ifCurtailed: block around the #open: call above to try to	catch the process termination so we could display a nice error page but this also	ended up being called when the user restarted a context in the debugger.		If they Proceed in the debugger, behaviour is platform-dependent. Currently, VW	should resume the signaling context, so this method will not continue past the call	to #open:. Squeak currently resumes the context that opened the Debugger, which	results in the call to #open: returning."	^ self resume: anException</body><body package="Seaside-Development">handleDefault: anException	^ self debugAndResume: anException</body><body package="Seaside-Development">open: anException 	GRPlatform current openDebuggerOn: anException</body><body package="Seaside-Development">resume: anException	self open: anException.	"If the user closes the debugger, the process is terminated and the stack unwound.	There was previously an #ifCurtailed: block around the #open: call above to try to	catch the process termination so we could display a nice error page but this also	ended up being called when the user restarted a context in the debugger.		If they Proceed in the debugger, behaviour is platform-dependent. Currently, VW	should resume the signaling context, so this method will not continue past the call	to #open:. Squeak currently resumes the context that opened the Debugger, which	results in the call to #open: returning."	^ self basicResume: anException</body></methods><methods><class-id>Seaside.WADebugErrorHandler</class-id> <category>content</category><body package="Seaside-Development">unableToResumeResponse	| content |	content := WAHtmlCanvas builder		fullDocument: true;		rootBlock: [ :root | root title: 'Unable to proceed' ];		render: [ :html |			html heading level1; with: 'Unable to proceed - hit the back button, and try again'.			html paragraph: 'Some exceptions cannot be resumed. You will usually see this page if you hit Proceed while debugging one of these exceptions. Your request was aborted but you can retry it by refreshing the page.' ].	self requestContext respond: [ :response |		response			internalError;			contentType: self application contentType;			nextPutAll: content ]</body></methods><methods><class-id>Seaside.WAWalkbackErrorHandler</class-id> <category>actions</category><body package="Seaside-Development">handleDefault: anException	^ self open: anException</body><body package="Seaside-Development">open: anException 	self requestContext request isXmlHttpRequest		ifTrue: [ ^ super open: anException ].	self shouldCall		ifTrue: [ self openUsingCall: anException ]		ifFalse: [ self openUsingDirectRendering: anException ]</body><body package="Seaside-Development">openUsingCall: anException	"If an error occurs trying to display the walkback component, we just use the super	behaviour, which should be to open a debugger.."	| answer |	answer := true.	[ self session isNil ifFalse:  [		answer := self session presenter call: (WAWalkback current exception: anException).		"Exception handlers hold the request context because they are used in places where		the dynamic variable is not present. Since this particular class depends on RenderLoop,		however, it will be present and we need to update the stored value after doing a call."		requestContext := WACurrentRequestContext value ] ] 		on: Error		do: [ :err | answer := true ].	answer ifTrue: [ super open: anException ]</body><body package="Seaside-Development">openUsingDirectRendering: anException	| debugAction |	"we pressed the debug link,	we intentionally don't reset otherwise we'd loose the response	up to now when proceed is pressed in the debugger"	debugAction := self requestContext request at: '_debugAction' ifAbsent: [ nil ].	debugAction = '_debug'		ifTrue: [ ^ super open: anException ].	debugAction = '_proceed'		ifTrue: [ ^ self basicResume: anException ].	self requestContext response resetIfPossible		ifTrue: [			| fullStack renderer |			fullStack := debugAction = '_fullStack'.						renderer := WAWalkback current exception: anException.			fullStack ifTrue: [ renderer showFullStack ].						self requestContext respond: [ :response  |				"set to HTML and set encoding"				response					contentType: self application contentType;					nextPutAll: (WAHtmlCanvas builder						fullDocument: true;						rootBlock: [ :root | renderer updateRoot: root ];						render: renderer)  ] ]		ifFalse: [			"we could not reset the response so we just open a debugger (similar to XmlHttpRequest)"			super open: anException ]</body></methods><methods><class-id>Seaside.WAWalkbackErrorHandler</class-id> <category>private</category><body package="Seaside-Development">shouldCall	"WAWalkback would like to resubmit the same URL with different parameters.	This doesn't for POST (we lose the request body) so we #call: in these cases."	^ self session notNil		and: [ self requestContext request isPost ]</body></methods><methods><class-id>Seaside.WAWalkbackErrorHandler class</class-id> <category>initialization</category><body package="Seaside-Development">initialize	WAAdmin applicationExceptionHandlingDefaults at: #exceptionHandler put: self</body></methods><methods><class-id>Seaside.WATerminateToolPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'Terminate'</body><body package="Seaside-Development">priority	^ 600</body></methods><methods><class-id>Seaside.WATerminateToolPlugin</class-id> <category>testing</category><body package="Seaside-Development">isActive	^ self application preferenceAt: #sessionAllowTermination</body></methods><methods><class-id>Seaside.WATerminateToolPlugin</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html anchor		class: self cssClass;		url: (html actionUrl			withField: 'terminate');		with: self label</body></methods><methods><class-id>Seaside.WAViewer</class-id> <category>accessing</category><body package="Seaside-Development">buttons	^ #(save)</body><body package="Seaside-Development">model	^ presenter</body><body package="Seaside-Development">presenter: aPresenter	presenter := aPresenter</body><body package="Seaside-Development">rows	^ #(css)</body></methods><methods><class-id>Seaside.WAViewer</class-id> <category>actions</category><body package="Seaside-Development">compile: aString 	GRPlatform current 		compile: aString		into: presenter class		classified: #rendering</body><body package="Seaside-Development">save</body></methods><methods><class-id>Seaside.WAViewer</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html 	html heading		level3;		with: presenter greaseString.	super renderContentOn: html</body><body package="Seaside-Development">renderCssOn: html	html textArea		rows: 20;		columns: 80;		value: presenter style;		callback: [ :css |			self compile: 'style ', GRPlatform current newline,				'	^ ', css printString ]</body></methods><methods><class-id>Seaside.WAViewer class</class-id> <category>instance creation</category><body package="Seaside-Development">on: aPresenter	^ self new presenter: aPresenter</body></methods><methods><class-id>Seaside.WADeprecation</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html div		class: 'tool';		with: [			html render: self table.			html anchor				callback: [ self resetDeprecationWarnings ];				with: 'Reset deprecation warnings' ]</body></methods><methods><class-id>Seaside.WADeprecation</class-id> <category>actions</category><body package="Seaside-Development">resetDeprecationWarnings	filter reset.	self answer</body></methods><methods><class-id>Seaside.WADeprecation</class-id> <category>accessing</category><body package="Seaside-Development">filter: aFilter	filter := aFilter</body><body package="Seaside-Development">notifications	^ filter notifications</body><body package="Seaside-Development">table	^ table ifNil: [ table := self buildTable ]</body></methods><methods><class-id>Seaside.WADeprecation</class-id> <category>private</category><body package="Seaside-Development">buildTable	^ WATableReport new		rowPeriod: 1;		rowColors: #( '#eee' 'white' );		rows: self notifications;		columns: (Array			with: (WAReportColumn selector: #messageText title: 'Deprecated')			with: (WAReportColumn selector: #details title: 'Details'));		yourself</body></methods><methods><class-id>Seaside.WADeprecation</class-id> <category>hooks</category><body package="Seaside-Development">children	^ Array with: self table</body></methods><methods><class-id>Seaside.WADeprecation class</class-id> <category>instance creation</category><body package="Seaside-Development">on: filter	^ self new		filter: filter;		yourself</body></methods><methods><class-id>Seaside.WADeprecationToolPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'Deprecated (' , filter notifications size printString , ')'</body><body package="Seaside-Development">priority	^ 700</body></methods><methods><class-id>Seaside.WADeprecationToolPlugin</class-id> <category>actions</category><body package="Seaside-Development">execute	self open: (WADeprecation on: filter)</body></methods><methods><class-id>Seaside.WADeprecationToolPlugin</class-id> <category>testing</category><body package="Seaside-Development">isActive	^ filter notifications notEmpty</body></methods><methods><class-id>Seaside.WADeprecationToolPlugin</class-id> <category>initialization</category><body package="Seaside-Development">initializeRequestor: aRequestorObject	super initializeRequestor: aRequestorObject.	filter := self session filters		detect: [ :each | each isKindOf: WADeprecatedToolFilter ]		ifNone: [ self session addFilter: WADeprecatedToolFilter new ]</body></methods><methods><class-id>Seaside.WAToggleHalosToolPlugin</class-id> <category>actions</category><body package="Seaside-Development">execute	 self requestor toggleHalos</body></methods><methods><class-id>Seaside.WAToggleHalosToolPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'Halos'</body><body package="Seaside-Development">priority	^ 300</body></methods><methods><class-id>Seaside.WANewSessionToolPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'New Session'</body><body package="Seaside-Development">priority	^ 100</body></methods><methods><class-id>Seaside.WANewSessionToolPlugin</class-id> <category>actions</category><body package="Seaside-Development">execute	self session unregister.	self requestContext redirectTo: self application url</body></methods><methods><class-id>Seaside.WANewSessionToolPlugin class</class-id> <category>accessing</category><body package="Seaside-Development">title	^ 'New Session'</body></methods><methods><class-id>Seaside.WAHaloVisitor</class-id> <category>copying</category><body package="Seaside-Development">postCopyForRenderContext: aRenderContext	super postCopyForRenderContext: aRenderContext.	renderContext := aRenderContext.	visitor := visitor copyForRenderContext: aRenderContext</body></methods><methods><class-id>Seaside.WAHaloVisitor</class-id> <category>accessing</category><body package="Seaside-Development">renderContext	^ renderContext</body><body package="Seaside-Development">toolDecoration	^ toolDecoration</body><body package="Seaside-Development">visitor	^ visitor</body><body package="Seaside-Development">visitor: anObject	visitor := anObject</body></methods><methods><class-id>Seaside.WAHaloVisitor</class-id> <category>visiting</category><body package="Seaside-Development">visitPainter: aPainter 	| halo |	(self renderContext halosEnabled and: [ aPainter canHaveHalo ]) 		ifTrue: [			halo := self toolDecoration haloFor: aPainter.			halo renderWithContext: self renderContext visitor: visitor ]		ifFalse: [ visitor visit: aPainter ]</body></methods><methods><class-id>Seaside.WAHaloVisitor</class-id> <category>initialization</category><body package="Seaside-Development">initializeWithToolDecoration: aToolDecoration renderContext: aRenderContext	self initialize.	toolDecoration := aToolDecoration.	renderContext := aRenderContext</body></methods><methods><class-id>Seaside.WAHaloVisitor class</class-id> <category>instance creation</category><body package="Seaside-Development">decoration: aToolDecoration context: aRenderContext	^ self basicNew		initializeWithToolDecoration: aToolDecoration renderContext: aRenderContext;		yourself</body></methods><methods><class-id>Seaside.WAValidateToolPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'XHTML'</body><body package="Seaside-Development">priority	^ 800</body></methods><methods><class-id>Seaside.WAValidateToolPlugin</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html anchor		class: self cssClass;		title: 'Validate XHTML';		url: 'http://validator.w3.org/check/referer';		with: self label</body></methods><methods><class-id>Seaside.WAToolDecoration</class-id> <category>plugin-halos</category><body package="Seaside-Development">haloFor: aPresenter	^ halos at: aPresenter ifAbsentPut: [ aPresenter haloClass on: aPresenter ]</body><body package="Seaside-Development">showHalos	^ showHalos contents</body><body package="Seaside-Development">toggleHalos	showHalos contents: showHalos contents not</body></methods><methods><class-id>Seaside.WAToolDecoration</class-id> <category>testing</category><body package="Seaside-Development">isGlobal	^ true</body></methods><methods><class-id>Seaside.WAToolDecoration</class-id> <category>rendering</category><body package="Seaside-Development">renderChildOn: html	self showHalos ifTrue: [		html context addHaloVisitor: (WAHaloVisitor decoration: self context: html context).		html context enableHalos ].	self renderNextOn: html.	html context disableHalos</body><body package="Seaside-Development">renderContentOn: html	self renderChildOn: html.	self renderToolbarOn: html</body><body package="Seaside-Development">renderToolbarOn: html	html div class: 'wa-toolbar'; with: [		(self plugins select: [ :each | each isActive ])			do: [ :each | html render: each ]			separatedBy: [ html text: ' ' ] ]</body></methods><methods><class-id>Seaside.WAToolDecoration</class-id> <category>updating</category><body package="Seaside-Development">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	WADevelopmentFiles default updateRoot: anHtmlRoot</body><body package="Seaside-Development">updateStates: aSnapshot	super updateStates: aSnapshot.	"Create halos for all visible presenters at the end of the action phase so that we	can properly snapshot their initial values (otherwise they get created in the render	phase and we have no snapshot of the state for that render)."	self showHalos ifTrue: [ self visiblePresentersDo: [ :each | self haloFor: each ] ].	aSnapshot register: halos.	halos do: [ :each  | each updateStates: aSnapshot ]</body></methods><methods><class-id>Seaside.WAToolDecoration</class-id> <category>accessing</category><body package="Seaside-Development">plugins	^ plugins</body></methods><methods><class-id>Seaside.WAToolDecoration</class-id> <category>initialization</category><body package="Seaside-Development">initialize	super initialize.	showHalos := WAValueHolder with: false.	halos := GRPlatform current weakDictionaryOfSize: 20.	plugins := WAToolPlugin allSubclassesFor: self</body></methods><methods><class-id>Seaside.WAToolDecoration</class-id> <category>hooks</category><body package="Seaside-Development">states	^ Array with: showHalos</body></methods><methods><class-id>Seaside.WAToolDecoration class</class-id> <category>testing</category><body package="Seaside-Development">canBeRoot	^ true</body></methods><methods><class-id>Seaside.WAWalkback</class-id> <category>rendering</category><body package="Seaside-Development">renderAnsweringToolsOn: html	html anchor		callback: [ self debug ];		title: 'Open a debugger in your IDE and block until you hit "Proceed"';		with: 'Debug'.	self exception isResumable ifTrue: [		html space.		html anchor			callback: [ self proceed ];			with: 'Proceed' ].	self limit &lt; self frameCount ifTrue: [		html space.		html anchor			callback: [ self showFullStack ];			with: 'Full Stack' ]</body><body package="Seaside-Development">renderContentOn: html	self renderHeadingOn: html.	self renderToolsOn: html.	self renderExceptionOn: html.	self renderStackOn: html</body><body package="Seaside-Development">renderExceptionOn: html	| problems |	problems := self exception seasidePossibleCauses.	problems isEmpty ifTrue: [ ^ self ].	html heading level: 3; with: 'Possible Causes'.	html unorderedList list: problems</body><body package="Seaside-Development">renderHeadingOn: html	html heading level: 1; with: 'Seaside Walkback'.	html heading level: 2; with: self exceptionDescription</body><body package="Seaside-Development">renderNotAnsweringToolsOn: html	html anchor		url: self debugUrl;		title: 'Open a debugger in your IDE and block until you hit "Proceed"';		with: 'Debug'.	self exception isResumable ifTrue: [		html space.		html anchor			url: self proceedUrl;			with: 'Proceed' ].	self limit &lt; self frameCount ifTrue: [		html space.		html anchor			url: self fullStackUrl;			with: 'Full Stack' ]</body><body package="Seaside-Development">renderStackOn: html	"Render the walkback itself"		self subclassResponsibility</body><body package="Seaside-Development">renderToolsOn: html	html paragraph: [		"Ok, this is hack. This component can either be #call:ed or #render:ed directly (in which case it isn't really a component).		This it to be used in cases where you can't #call: (eg in the render phase). In that case we just render links without #callback:s.		However this doesn't work always either (eg. in a POST) so in these cases we #call:."		self canAnswer			ifTrue: [ self renderAnsweringToolsOn: html ]			ifFalse: [ self renderNotAnsweringToolsOn: html ] ]</body></methods><methods><class-id>Seaside.WAWalkback</class-id> <category>accessing</category><body package="Seaside-Development">defaultLimit	"The default number of frames to display in the walkback."		^ 5</body><body package="Seaside-Development">exception	^ exception</body><body package="Seaside-Development">exceptionDescription	"Return a short string describing the exception."	^ String streamContents: [ :stream |		| e |		e := self exception.		stream nextPutAll: e class name.		e messageText isNil ifFalse: [			stream nextPutAll: ': '; nextPutAll: e messageText ] ]</body><body package="Seaside-Development">frameCount	"Return the number of frames or contexts in the walkback."		self subclassResponsibility</body><body package="Seaside-Development">limit	"The maximum number of frames to display."	^ limit ifNil: [ limit := self defaultLimit min: self frameCount ]</body><body package="Seaside-Development">limit: anInteger	limit := anInteger</body></methods><methods><class-id>Seaside.WAWalkback</class-id> <category>initialization</category><body package="Seaside-Development">initializeWithException: anException	self initialize.	exception := anException</body></methods><methods><class-id>Seaside.WAWalkback</class-id> <category>updating</category><body package="Seaside-Development">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: self exceptionDescription.	anHtmlRoot bodyAttributes addClass: 'walkback'.	WAToolFiles default updateRoot: anHtmlRoot</body></methods><methods><class-id>Seaside.WAWalkback</class-id> <category>accessing-url</category><body package="Seaside-Development">debugUrl	^ self urlForDebugAction: '_debug'</body><body package="Seaside-Development">fullStackUrl	^ self urlForDebugAction: '_fullStack'</body><body package="Seaside-Development">proceedUrl	^ self urlForDebugAction: '_proceed'</body></methods><methods><class-id>Seaside.WAWalkback</class-id> <category>private</category><body package="Seaside-Development">canAnswer	^ self decorations anySatisfy: [ :each |		each isKindOf: WAAnswerHandler ]</body><body package="Seaside-Development">debugActionField	^ '_debugAction'</body><body package="Seaside-Development">urlForDebugAction: aString	| copy |	copy := self requestContext request url copy.	"We don't use #withField:value: or #addField:value: because we want to replace existing fields, not add to them.	For example _fullStack may already be present and we want to set _debug."	copy queryFields at: self debugActionField put: aString.	^ copy</body></methods><methods><class-id>Seaside.WAWalkback</class-id> <category>actions</category><body package="Seaside-Development">debug	 self answer: true</body><body package="Seaside-Development">proceed	 self answer: false</body><body package="Seaside-Development">showFullStack	self limit: self frameCount</body></methods><methods><class-id>Seaside.WAWalkback class</class-id> <category>registration</category><body package="Seaside-Development">current	^ Current</body><body package="Seaside-Development">current: aWalkbackClass	Current := aWalkbackClass</body><body package="Seaside-Development">select	self current: self</body><body package="Seaside-Development">unselect	(self current = self) ifTrue: [ self current: nil ]</body></methods><methods><class-id>Seaside.WAWalkback class</class-id> <category>instance creation</category><body package="Seaside-Development">exception: anException	^ self basicNew initializeWithException: anException; yourself</body></methods><methods><class-id>Seaside.WAHalo</class-id> <category>accessing</category><body package="Seaside-Development">mode	^ mode contents</body><body package="Seaside-Development">mode: aSymbol	mode contents: aSymbol</body><body package="Seaside-Development">modeSelector	^ (self mode greaseString , ':visitor:') asSymbol</body><body package="Seaside-Development">modes	"Returns a list of possible display modes. These are selectors that are used to render the	object we are wrapping. The current mode is selected by WAModeHaloPlugin."	^ #( render source )</body><body package="Seaside-Development">plugins	^ plugins</body><body package="Seaside-Development">root	^ root</body></methods><methods><class-id>Seaside.WAHalo</class-id> <category>updating</category><body package="Seaside-Development">updateStates: aSnapshot	"This class is not a Presenter but WAToolDecoration will make sure we get a chance	to update the snapshot whenever it does."		aSnapshot register: mode</body></methods><methods><class-id>Seaside.WAHalo</class-id> <category>rendering-modes</category><body package="Seaside-Development">render: html visitor: aPainterVisitor	"Render the object we are wrapping normally. See #modes."		aPainterVisitor visit: self root</body><body package="Seaside-Development">source: html visitor: aPainterVisitor	"Render the HTML source of the object we are wrapping using a pretty printed	document. See #modes.	Because we are using a new RenderContext, we can't use the passed-in visitor.	Since we know we want to immediately render, we create a new WARenderVisitor to get	things rolling. Rendering will then continue with the visitors in the context."		| context |	html div class: 'wa-halo-source'; with: [		context := html context copy.		context disableHalos.		context document: (WAPrettyPrintedDocument context: html context).		(WARenderVisitor context: context) start: self root.		context document close ]</body></methods><methods><class-id>Seaside.WAHalo</class-id> <category>initialization</category><body package="Seaside-Development">initializeOn: aComponent	self initialize.	root := aComponent.	mode := WAValueHolder with: self modes first.	plugins := WAHaloPlugin allSubclassesOn: self root for: self</body></methods><methods><class-id>Seaside.WAHalo</class-id> <category>rendering</category><body package="Seaside-Development">renderWithContext: aRenderContext visitor: aPainterVisitor	"Render the halo using aRenderContext. aPainterVisitor is the visitor that the halo	visitor is wrapping; calling #visit: on it will perform the action that would have taken	place had the halo wrapper not been present.	"	| html |	html := WAHtmlCanvas context: aRenderContext.	html div class: 'wa-halo'; with: [		html div class: 'wa-halo-header'; with: [			(self plugins select: [ :each | each isActive ])				do: [ :each | html render: each ]				separatedBy: [ html text: ' ' ] ].		html div class: 'wa-halo-body'; with: [			self perform: self modeSelector with: html with: aPainterVisitor ] ].	html flush</body></methods><methods><class-id>Seaside.WAHalo class</class-id> <category>instance creation</category><body package="Seaside-Development">on: aComponent	^ self basicNew initializeOn: aComponent; yourself</body></methods><methods><class-id>Seaside.WAInspectorHaloPlugin</class-id> <category>testing</category><body package="Seaside-Development">isActive	^ WAInspector current notNil</body></methods><methods><class-id>Seaside.WAInspectorHaloPlugin</class-id> <category>accessing</category><body package="Seaside-Development">label	^ 'Inspector'</body><body package="Seaside-Development">priority	^ 600</body><body package="Seaside-Development">tooltip	^ 'Object Inspector'</body></methods><methods><class-id>Seaside.WAInspectorHaloPlugin</class-id> <category>actions</category><body package="Seaside-Development">execute	self open: (WAInspector current on: self root)</body></methods><methods><class-id>Seaside.WAModeHaloPlugin</class-id> <category>accessing</category><body package="Seaside-Development">priority	^ 900</body></methods><methods><class-id>Seaside.WAModeHaloPlugin</class-id> <category>rendering</category><body package="Seaside-Development">renderContentOn: html	html div class: self cssClass; with: [		self requestor modes			do: [ :each |				html anchor					class: 'active' if: self requestor mode = each;					callback: [ self requestor mode: each ];					with: (self labelForSelector: each) ]			separatedBy: [ html text: ' / ' ] ]</body></methods><methods><class-id>Seaside.WAPresenterGuide</class-id> <category>*seaside-development</category><body package="Seaside-Development">addHaloVisitor: aHaloVisitor	client := client addHaloVisitor: aHaloVisitor.	^ self</body></methods><methods><class-id>Seaside.WAPresenter</class-id> <category>*seaside-development</category><body package="Seaside-Development">canHaveHalo	"Answer true if the presenter should display a halo."	^ self haloClass notNil</body><body package="Seaside-Development">haloClass	"Answer the halo class to be used to wrap this component."	^ WAHalo</body></methods><methods><class-id>Seaside.WAPainter</class-id> <category>*seaside-development</category><body package="Seaside-Development">canHaveHalo	"Return true if this Painter should have a Halo displayed for it when Halos are	enabled in the development environment."		^ false</body></methods><methods><class-id>Seaside.WAPainterVisitor</class-id> <category>*seaside-development</category><body package="Seaside-Development">addHaloVisitor: aHaloVisitor	^ aHaloVisitor		visitor: self;		yourself</body></methods><methods><class-id>Seaside.WARenderContext</class-id> <category>*seaside-development</category><body package="Seaside-Development">addHaloVisitor: aHaloVisitor	visitor := visitor addHaloVisitor: aHaloVisitor</body><body package="Seaside-Development">disableHalos	self properties at: #halosEnabled put: false</body><body package="Seaside-Development">enableHalos	self properties at: #halosEnabled put: true</body><body package="Seaside-Development">halosEnabled	^ self properties at: #halosEnabled ifAbsent: [ false ]</body></methods><methods><class-id>Seaside.WAAdmin class</class-id> <category>*seaside-development</category><body package="Seaside-Development">developmentToolsEnabled	^ self applicationDefaults parents includes: WADevelopmentConfiguration instance</body><body package="Seaside-Development">disableDevelopmentTools	self applicationDefaults removeParent: WADevelopmentConfiguration instance</body><body package="Seaside-Development">enableDevelopmentTools	self applicationDefaults addParent: WADevelopmentConfiguration instance</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-development</category><body package="Seaside-Development">seasideDevelopment	^ self new		name: 'Seaside-Development';		description: 'Web-based development tools and debugging support.';		addDependency: 'Seaside-Tools-Web';		addDependency: 'Seaside-Flow'; "For WAWalkbackErrorHandler"		url: #seasideUrl;		yourself</body></methods><initialize><class-id>Seaside.WADevelopmentConfiguration</class-id></initialize><initialize><class-id>Seaside.WAWalkbackErrorHandler</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WASystemConfiguration</name><environment>Seaside</environment><super>Seaside.WAConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Seaside-Core-Configuration</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAPainter</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Rendering</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAPresenter</name><environment>Seaside</environment><super>Seaside.WAPainter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WAPainterVisitor</name><environment>Seaside</environment><super>Seaside.WAVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Rendering</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAErrorHandler</name><environment>Seaside</environment><super>Seaside.WAExceptionHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAHtmlDocument</name><environment>Seaside</environment><super>Seaside.WAXmlDocument</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scriptGenerator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Document</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARenderContext</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visitor actionUrl actionBaseUrl resourceUrl callbacks document properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Rendering</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WADecoration</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WALabelledFormDialog</name><environment>Seaside</environment><super>Seaside.WAFormDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Widgets-Components</category><attributes><package>Seaside-Widgets</package></attributes></class><class><name>WARequestFilter</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Filter</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAPresenterGuide</name><environment>Seaside</environment><super>Seaside.WAPainterVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>client </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component-Visitors</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WAPlugin</name><environment>Seaside</environment><super>Seaside.WAPainter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tools-Web</category><attributes><package>Seaside-Tools-Web</package></attributes></class><class><name>WAFileLibrary</name><environment>Seaside</environment><super>Seaside.WAAbstractFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Libraries</category><attributes><package>Seaside-Core</package></attributes></class></st-source>