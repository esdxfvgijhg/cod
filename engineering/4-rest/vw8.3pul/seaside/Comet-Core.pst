<?xml version="1.0"?><st-source><!-- Name: Comet-CoreNotice: MIT LicenseCopyright © 2001 –- 2009 Avi Bryant, Julian FitzellCopyright © 2007 –- 2009 Lukas Renggli, Michel Bany, Philippe MarschallCopyright © Seaside ContributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: Server push, stream events from the server to client.DbIdentifier: bear73DbTrace: 492621DbUsername: jkottDbVersion: 3.2.0 - pmm.55 1DevelopmentPrerequisites: #(#(#any 'Comet-Namespace' '') #(#any 'Javascript-Core' '') #(#any 'Javascript-VisualWorks-Core' '') #(#any 'Seaside-Canvas' ''))Id: 66696a61-52ed-43f4-9163-67d67bf31fc6Namespace: CometPackageName: Comet-CoreParcel: #('Comet-Core')ParcelName: Comet-CorePrerequisiteParcels: #(#('Comet-Namespace' '') #('Javascript-Core' '') #('Javascript-VisualWorks-Core' '') #('Seaside-Canvas' ''))PrintStringCache: (3.2.0 - pmm.55 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Comet-Core-pmm.55.mczVersion: 3.2.0 - pmm.55 1Date: 3:31:31 PM June 30, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:31 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CTFilter</name><environment>Comet</environment><super>Seaside.WARequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handlers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Core</category><attributes><package>Comet-Core</package></attributes></class><class><name>CTLibrary</name><environment>Comet</environment><super>Seaside.WAFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Core</category><attributes><package>Comet-Core</package></attributes></class><class><name>CTHandler</name><environment>Comet</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id pusher session response </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Core</category><attributes><package>Comet-Core</package></attributes></class><class><name>CTPusher</name><environment>Comet</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mutex handlers rendererClass </inst-vars><class-inst-vars>process </class-inst-vars><imports></imports><category>Comet-Core</category><attributes><package>Comet-Core</package></attributes></class><class><name>CTStreamingServerRequired</name><environment>Comet</environment><super>Seaside.WAError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Core</category><attributes><package>Comet-Core</package></attributes></class><class><name>CTComet</name><environment>Comet</environment><super>Javascript.JSObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pusher url </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Core</category><attributes><package>Comet-Core</package></attributes></class><methods><class-id>Comet.CTFilter</class-id> <category>processing</category><body package="Comet-Core">cometForContext: aRequestContext	^ (handlers		at: (aRequestContext request fields			at: CTComet headerField			ifAbsent: [ ^ nil ])		ifAbsent: [ ^ nil ])			connect: aRequestContext</body><body package="Comet-Core">handleFiltered: aRequestContext	(aRequestContext response isStreamingResponse)		ifFalse: [ CTStreamingServerRequired signal: 'Streaming server required.' ].	(aRequestContext request includesKey: CTComet headerField)		ifTrue: [ self cometForContext: aRequestContext ]		ifFalse: [ super handleFiltered: aRequestContext ]</body></methods><methods><class-id>Comet.CTFilter</class-id> <category>public</category><body package="Comet-Core">registerPusher: aPusher context: aContext	| handler |	handler := CTHandler on: aPusher.	handlers at: handler id put: handler.	^ handler id</body></methods><methods><class-id>Comet.CTFilter</class-id> <category>initialization</category><body package="Comet-Core">initialize	super initialize.	handlers := Dictionary new</body></methods><methods><class-id>Comet.CTFilter</class-id> <category>testing</category><body package="Comet-Core">isCometFilter	^ true</body></methods><methods><class-id>Comet.CTLibrary</class-id> <category>accessing</category><body package="Comet-Core">selectorsToInclude	^ #( cometJs )</body></methods><methods><class-id>Comet.CTLibrary</class-id> <category>scripts</category><body package="Comet-Core">cometJs	^ '/* Seaside Comet API * (c) 2006-2009 Lukas Renggli (renggli@gmail.com) */var Comet = function(url) {	this.url = url;	this.iframe = this.createIframe();	document.body.appendChild(this.iframe);};Comet.prototype.connect = function() {	this.iframe.onLoad = this.onLoad;	this.iframe.src = this.url;};Comet.prototype.disconnect = function() {	this.iframe.onLoad = this.iframe.src = null;};Comet.prototype.onLoad = function() {	this.disconnect();	this.connect();};Comet.prototype.createIframe = function() {	var frame = document.createElement("iframe");	frame.style.display = "block";	frame.style.visibility = frame.style.overflow = "hidden";	frame.style.width = frame.style.height = frame.style.border = frame.style.margin = frame.style.padding = "0";	return frame;};Comet.eval = function(code) { 	return eval(code);};'</body></methods><methods><class-id>Comet.CTHandler</class-id> <category>actions</category><body package="Comet-Core">connect: aRequestContext	self		basicDisconnect;		basicConnect: aRequestContext.	self pusher register: self.	self basicTerminate</body><body package="Comet-Core">push: aString	"Push aString to the receiver. Notify the session about the update, so that it does not timeout. Answer true, if the connection is still valid."	| success |	response isNil		ifTrue: [ ^ false ].	success := [ response nextPutAll: aString; flushComet ]		on: Error		do: [ :err | ^ false ].	success		ifTrue: [ self notifySession ].	^ success</body></methods><methods><class-id>Comet.CTHandler</class-id> <category>initialization</category><body package="Comet-Core">initializeOn: aPusher	self initialize.	id := WAKeyGenerator current 		keyOfLength: 16.	pusher := aPusher</body></methods><methods><class-id>Comet.CTHandler</class-id> <category>accessing</category><body package="Comet-Core">id	^ id</body><body package="Comet-Core">pusher	^ pusher</body><body package="Comet-Core">session	^ session</body></methods><methods><class-id>Comet.CTHandler</class-id> <category>private</category><body package="Comet-Core">basicConnect: aRequestContext	session := aRequestContext session.	response := aRequestContext response.	response		doNotCache;		contentType: aRequestContext application contentType;		nextPutAll: (self preambleFor: aRequestContext);		nextPutAll: ((String new: 1024) atAllPut: Character space);		flush "&lt;- sends partial content"</body><body package="Comet-Core">basicDisconnect	response ifNil: [ ^ self ].	response destroy.	response := nil</body><body package="Comet-Core">basicTerminate	thisContext swapSender: nil.	Processor activeProcess terminate</body><body package="Comet-Core">notifySession	self session application cache 		notifyRetrieved: self session 		key: self session key</body><body package="Comet-Core">preambleFor: aRequestContext	^ '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;&lt;head&gt;&lt;title&gt;Comet&lt;/title&gt;&lt;/head&gt;&lt;body&gt;'		, ((String new: 1024) atAllPut: Character space)</body></methods><methods><class-id>Comet.CTHandler class</class-id> <category>instance creation</category><body package="Comet-Core">on: aPusher	^ self basicNew initializeOn: aPusher</body></methods><methods><class-id>Comet.CTPusher</class-id> <category>protected</category><body package="Comet-Core">ping	"Ping all the associated handlers."	self push: ' '</body><body package="Comet-Core">push: aString	"Push aString to all associated handlers."	self mutex critical: [ handlers := handlers select: [ :each | each push: aString ] ]</body><body package="Comet-Core">register: aHandler	"Register a new handler into this pusher."	mutex critical: [ handlers := handlers copyWith: aHandler ]</body></methods><methods><class-id>Comet.CTPusher</class-id> <category>accessing</category><body package="Comet-Core">handlers	"Answer the current list of handlers."	^ handlers</body><body package="Comet-Core">mutex	"Answer the mutex in use with the receiver."	^ mutex</body></methods><methods><class-id>Comet.CTPusher</class-id> <category>accessing-rendering</category><body package="Comet-Core">renderContext	"Answer a fake rendering context for this pusher."	^ WARenderContext new		document: (WAHtmlDocument on: (WriteStream on: String new));		actionUrl: WAUrl new;		yourself</body><body package="Comet-Core">rendererClass	"Answer the default renderer for this pusher."	^ rendererClass ifNil: [ WARenderer default ]</body><body package="Comet-Core">rendererClass: aRendererClass	rendererClass := aRendererClass</body></methods><methods><class-id>Comet.CTPusher</class-id> <category>initialization</category><body package="Comet-Core">initialize	super initialize.	mutex := GRPlatform current semaphoreClass forMutualExclusion.	handlers := Array new</body></methods><methods><class-id>Comet.CTPusher</class-id> <category>public</category><body package="Comet-Core">javascript: aBlock	"Evaluate aBlock with an JSScript instance and pushes the resulting script-string aString to all associated handlers."	| script |	script := (JSScript context: self renderContext)		rendererClass: self rendererClass;		yourself.	aBlock value: script.	self push: (String streamContents: [ :stream |		stream			nextPutAll: '&lt;script type="text/javascript"&gt;parent.Comet.eval(';			javascript: script asJavascript;			nextPutAll: ')&lt;/script&gt;' ])</body></methods><methods><class-id>Comet.CTPusher class</class-id> <category>initialization</category><body package="Comet-Core">initialize	GRPlatform current		addToStartUpList: self;		addToShutDownList: self</body><body package="Comet-Core">shutDown	process ifNil: [ ^ self ].	GRPlatform current terminateProcess: process.	process := nil</body><body package="Comet-Core">startUp	self shutDown.	process := GRPlatform current cometForkProcessDo: [ [ self pingProcess ] repeat ]</body><body package="Comet-Core">unload	GRPlatform current		removeFromStartUpList: self;		removeFromShutDownList: self.	self shutDown</body></methods><methods><class-id>Comet.CTPusher class</class-id> <category>private</category><body package="Comet-Core">pingProcess	self allInstancesDo: [ :each | each ping ].	GRPlatform current cometWait</body></methods><methods><class-id>Comet.CTStreamingServerRequired</class-id> <category>accessing</category><body package="Comet-Core">seasidePossibleCauses	^ #(		'The ServerAdaptor handling this request does not support the streaming of HTTP responses, which is required when using Comet. On Squeak/Pharo, you can use WAListenerAdaptor in the Seaside-Adaptors-Comanche package.'		)</body></methods><methods><class-id>Comet.CTComet</class-id> <category>actions</category><body package="Comet-Core">connect	self call: 'connect'</body><body package="Comet-Core">disconnect	self call: 'disconnect'</body></methods><methods><class-id>Comet.CTComet</class-id> <category>accessing</category><body package="Comet-Core">pusher	^ pusher</body><body package="Comet-Core">pusher: aPusher	self url: (self renderContext actionUrl		withField: self class headerField		value: (self filter			registerPusher: (pusher := aPusher)			context: self requestContext))</body><body package="Comet-Core">url	^ url ifNil: [ url := self defaultUrl ]</body><body package="Comet-Core">url: aUrl	url := aUrl</body></methods><methods><class-id>Comet.CTComet</class-id> <category>accessing-readonly</category><body package="Comet-Core">filter	^ self session filters		detect: [ :each | each isCometFilter ]		ifNone: [ self session addFilterFirst: CTFilter new ]</body></methods><methods><class-id>Comet.CTComet</class-id> <category>printing</category><body package="Comet-Core">javascriptContentOn: aStream	aStream		nextPutAll: 'new Comet(';		javascript: self url;		nextPut: $)</body></methods><methods><class-id>Comet.CTComet</class-id> <category>private</category><body package="Comet-Core">defaultUrl	^ self renderContext actionUrl		addField: self class headerField		value: self pusher id</body></methods><methods><class-id>Comet.CTComet class</class-id> <category>configuration</category><body package="Comet-Core">headerField	^ '_c'</body></methods><methods><class-id>Seaside.WARenderer</class-id> <category>*comet-core</category><body package="Comet-Core">comet	^ (CTComet context: self context)		rendererClass: self species;		yourself</body></methods><methods><class-id>Grease.GRDelegatingStream</class-id> <category>*comet-core</category><body package="Comet-Core">flushComet	^ stream flushComet</body></methods><methods><class-id>Seaside.WAStreamedResponse</class-id> <category>*comet-core</category><body package="Comet-Core">flushComet	^ externalStream flushComet</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*comet-core</category><body package="Comet-Core">cometCore	^ self new		name: 'Comet-Core';		description: 'Server push, stream events from the server to client.';		addDependency: 'Javascript-Core';		addDependency: 'Seaside-Canvas';		url: #seasideUrl;		yourself</body></methods><methods><class-id>Seaside.WARequestFilter</class-id> <category>*comet-core</category><body package="Comet-Core">isCometFilter	^ false</body></methods><methods><class-id>Grease.GRPlatform</class-id> <category>*comet-core</category><body package="Comet-Core">cometForkProcessDo: aBlock	self subclassResponsibility</body><body package="Comet-Core">cometWait	"Pause the process for a period of time before pinging the instances again."	self subclassResponsibility</body></methods><methods><class-id>Seaside.WAComboResponse</class-id> <category>*comet-core</category><body package="Comet-Core">flushComet	"Flush the receiver and answer if the stream is still in a valid state and both ends are properly connected."	self flush.	^ externalStream flushComet</body></methods><initialize><class-id>Comet.CTPusher</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAError</name><environment>Seaside</environment><super>Grease.GRError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Exceptions</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAFileLibrary</name><environment>Seaside</environment><super>Seaside.WAAbstractFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Libraries</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARequestFilter</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Filter</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAStreamedResponse</name><environment>Seaside</environment><super>Seaside.WAResponse</super><private>false</private><indexed-type>none</indexed-type><inst-vars>committed externalStream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-HTTP</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARenderer</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>context lastId </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Seaside-Core-Rendering</category><attributes><package>Seaside-Core</package></attributes></class><class><name>GRDelegatingStream</name><environment>Grease</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grease-Core-Text</category><attributes><package>Grease-Core</package></attributes></class><class><name>WAComboResponse</name><environment>Seaside</environment><super>Seaside.WAResponse</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bufferedStream externalStream committed closed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-HTTP</category><attributes><package>Seaside-Core</package></attributes></class><class><name>GRPlatform</name><environment>Grease</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grease-Core</category><attributes><package>Grease-Core</package></attributes></class><class><name>JSObject</name><environment>Javascript</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration renderContext rendererClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class></st-source>