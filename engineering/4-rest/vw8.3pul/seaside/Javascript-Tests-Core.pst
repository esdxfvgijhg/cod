<?xml version="1.0"?><st-source><!-- Name: Javascript-Tests-CoreComment: Unit tests for the Javascript-Core package.DbIdentifier: bear73DbTrace: 494123DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.73 2DevelopmentPrerequisites: #(#(#any 'Seaside-Core' '') #(#any 'Seaside-Canvas' '') #(#any 'Javascript-Namespace' '') #(#any 'Javascript-Core' '') #(#any 'Javascript-VisualWorks-Core' '') #(#any 'Grease-Tests-VisualWorks-Core' '') #(#any 'Seaside-Tests-Core' ''))Id: 52007532-a0ad-4098-83d4-abcbc77f9973Namespace: JavascriptPackageName: Javascript-Tests-CoreParcel: #('Javascript-Tests-Core')ParcelName: Javascript-Tests-CorePrerequisiteDescriptions: #(#(#name 'Seaside-Core' #componentType #package) #(#name 'Seaside-Canvas' #componentType #package) #(#name 'Javascript-Namespace') #(#name 'Javascript-Core') #(#name 'Javascript-VisualWorks-Core') #(#name 'Grease-Tests-VisualWorks-Core' #componentType #package) #(#name 'Seaside-Tests-Core'))PrerequisiteParcels: #(#('Seaside-Core' '') #('Seaside-Canvas' '') #('Javascript-Namespace' '') #('Javascript-Core' '') #('Javascript-VisualWorks-Core' '') #('Grease-Tests-VisualWorks-Core' '') #('Seaside-Tests-Core' ''))PrintStringCache: (3.2.0 - JohanBrichau.73 2,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Javascript-Tests-Core-JohanBrichau.73.mczVersion: 3.2.0 - JohanBrichau.73 2Date: 12:17:56 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>JSObjectTest</name><environment>Javascript</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><class><name>JSConversionTest</name><environment>Javascript</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><class><name>JSLoggingTest</name><environment>Javascript</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><class><name>JSRenderingTest</name><environment>Javascript</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><class><name>JSStreamTest</name><environment>Javascript</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><class><name>JSJsonTest</name><environment>Javascript</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><class><name>JSDecorationTest</name><environment>Javascript</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><class><name>JSScriptTest</name><environment>Javascript</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class><methods><class-id>Javascript.JSObjectTest</class-id> <category>accessing-javascript</category><body package="Javascript-Tests-Core">javascript	^ JSScript context: self renderContext</body><body package="Javascript-Tests-Core">mock	^ JSStream on: 'mock'</body><body package="Javascript-Tests-Core">stream	^ JSStream new</body></methods><methods><class-id>Javascript.JSObjectTest</class-id> <category>accessing</category><body package="Javascript-Tests-Core">renderContext	^ WARenderContext new		actionUrl: (WAUrl absolute: 'http://www.seaside.st/?_s=1&amp;_k=a');		document: (WAHtmlDocument 			on: (WriteStream on: String new)			codec: self requestContext codec);		yourself</body></methods><methods><class-id>Javascript.JSObjectTest</class-id> <category>asserting</category><body package="Javascript-Tests-Core">assert: anObject equals: aString	self		assert: anObject asJavascript = aString		description: anObject asJavascript printString , ' expected to be ' , aString printString		resumable: true</body></methods><methods><class-id>Javascript.JSObjectTest</class-id> <category>utilities</category><body package="Javascript-Tests-Core">assert: aBlock renders: aString 	| html |	html := WAHtmlCanvas builder		documentClass: WAHtmlDocument;		rootClass: WAHtmlRoot;		fullDocument: false;		render: aBlock.	self 		assert: html = aString		description: 'Got ' , html printString , '; but expected ' , aString printString</body></methods><methods><class-id>Javascript.JSObjectTest class</class-id> <category>testing</category><body package="Javascript-Tests-Core">isAbstract	^ self name = #JSObjectTest</body><body package="Javascript-Tests-Core">shouldInheritSelectors	^ true</body></methods><methods><class-id>Javascript.JSObjectTest class</class-id> <category>accessing</category><body package="Javascript-Tests-Core">packageNamesUnderTest	^ #('Javascript-Core')</body></methods><methods><class-id>Javascript.JSConversionTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testArray	self assert: #(1 2 3) equals: '[1,2,3]'</body><body package="Javascript-Tests-Core">testCharacter	self assert: (Character codePoint: 0) equals: '"\0"'.	self assert: Character lf equals: '"\n"'.	self assert: $a equals: '"a"'</body><body package="Javascript-Tests-Core">testDateAndTime	self assert: (DateAndTime year: 1980 month: 6 day: 11 hour: 12 minute: 45 second: 23) equals: 'new Date(1980,5,11,12,45,23)'.	self assert: (Date year: 1980 month: 6 day: 11) equals: 'new Date(1980,5,11)'</body><body package="Javascript-Tests-Core">testDictionary	self 		assert: (GRSmallDictionary new				at: 'foo'					put: 1;				at: 'bar'					put: 2;				at: 'zork'					put: 3;				yourself)		equals: '{"foo":1,"bar":2,"zork":3}'.	self 		assert: (GRSmallDictionary new				at: ''					put: 'empty';				yourself)		equals: '{"":"empty"}'.	self 		assert: (Dictionary new				at: 1					put: 'not-a-string';				yourself)		equals: '{"1":"not-a-string"}'.	self 		assert: (Dictionary new				at: '1abc'					put: 'not-an-id';				yourself)		equals: '{"1abc":"not-an-id"}'.	self 		assert: (Dictionary new				at: 'abc1'					put: 'totally sexy';				yourself)		equals: '{"abc1":"totally sexy"}'</body><body package="Javascript-Tests-Core">testDuration	self assert: (Duration seconds: 1) equals: '1000'.	self assert: (Duration milliseconds: 1200) equals: '1200'</body><body package="Javascript-Tests-Core">testJoinAssocation	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -&gt; nil)) 		equals: '"foo"'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -&gt; true)) 		equals: '"foo="+encodeURIComponent(true)'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -&gt; 123)) 		equals: '"foo="+encodeURIComponent(123)'</body><body package="Javascript-Tests-Core">testJoinEmpty	self 		assert: (JSJoin new)		equals: '""'</body><body package="Javascript-Tests-Core">testJoinMultiple	self		assert: (JSJoin on: #('foo')) 		equals: '"foo"'.	self		assert: (JSJoin on: #('foo' 'bar'))		equals: '["foo","bar"].join("&amp;")'</body><body package="Javascript-Tests-Core">testJoinString	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -&gt; 'bar')) 		equals: '"foo=bar"'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -&gt; 'bar zork')) 		equals: '"foo=bar%20zork"'.	self		assert: (JSJoin on: (OrderedCollection with: 'foo' -&gt; 'bar&amp;zork')) 		equals: '"foo=bar%26zork"'</body><body package="Javascript-Tests-Core">testLiteral	self assert: true equals: 'true'.	self assert: false equals: 'false'.	self assert: nil equals: 'null'</body><body package="Javascript-Tests-Core">testStringBasic	self assert: 'abc' equals: '"abc"'.	self assert: '123' equals: '"123"'</body><body package="Javascript-Tests-Core">testStringEscaping	self assert: '''' equals: '"''"'.	self assert: '"' equals: '"\""'.	self assert: '\' equals: '"\\"'</body><body package="Javascript-Tests-Core">testStringSpecial	self assert: (String with: Character cr) equals: '"\r"'.	self assert: (String with: Character lf) equals: '"\n"'.	self assert: (String with: Character tab) equals: '"\t"'.	self assert: (String with: (Character codePoint: 0)) equals: '"\0"'.	self assert: (String with: (Character codePoint: 1)) equals: '"\x01"'.	self assert: (String with: (Character codePoint: 31)) equals: '"\x1f"'</body><body package="Javascript-Tests-Core">testStringSpecialLineTerminator	"		ECMA-262 v5.1 (June 2011) section 7.8.4 says that string literals cannot contain an unescaped LineTerminator, which is defined in		section 7.3 as the four characters &lt;LF&gt;, &lt;CR&gt;,  &lt;LS&gt; and  &lt;PS&gt; (U+000A, U+u000D, U+2028 and U+2029)				See also:			http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf			http://timelessrepo.com/json-isnt-a-javascript-subset	"	"&lt;LF&gt;"	self assert: (String with: (Character codePoint: 16r000A)) equals: '"\n"'.		"&lt;CR&gt;"	self assert: (String with: (Character codePoint: 16r000D)) equals: '"\r"'.		"&lt;LS&gt;"	self assert: (String with: (Character codePoint: 16r2028)) equals: '"\u2028"'.		"&lt;PS&gt;"	self assert: (String with: (Character codePoint: 16r2029)) equals: '"\u2029"'</body><body package="Javascript-Tests-Core">testUrl	self		assert: (WAUrl absolute: 'http://www.seaside.st/?1=a&amp;2=b')		equals: '"http://www.seaside.st/?1=a&amp;2=b"'</body></methods><methods><class-id>Javascript.JSConversionTest</class-id> <category>tests-tools</category><body package="Javascript-Tests-Core">testIsJavascript	self deny: 123 isJavascript.	self assert: self mock isJavascript.	self assert: JSCreate new isJavascript</body></methods><methods><class-id>Javascript.JSLoggingTest</class-id> <category>accessing</category><body package="Javascript-Tests-Core">logger	^ JSLogger context: self renderContext</body></methods><methods><class-id>Javascript.JSLoggingTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testAssert	self 		assert: (self logger assert: true)		equals: 'console.assert(true)'.	self		assert: (self logger assertTrue: true)		equals: 'console.assertTrue(true)'.	self 		assert: (self logger assertFalse: false)		equals: 'console.assertFalse(false)'.	self		assert: (self logger assertNull: nil)		equals: 'console.assertNull(null)'.	self		assert: (self logger assertNotNull: 1)		equals: 'console.assertNotNull(1)'.	self		assert: (self logger assertUndefined: nil)		equals: 'console.assertUndefined(null)'.	self		assert: (self logger assertNotUndefined: 1)		equals: 'console.assertNotUndefined(1)'</body><body package="Javascript-Tests-Core">testComparison	self		assert: (self logger assert: 1 equals: 1)		equals: 'console.assertEquals(1,1)'.	self		assert: (self logger assert: 1 notEquals: 2)		equals: 'console.assertNotEquals(1,2)'.	self		assert: (self logger assert: 1 greater: 2)		equals: 'console.assertGreater(1,2)'.	self		assert: (self logger assert: 2 notGreater: 1)		equals: 'console.assertNotGreater(2,1)'.	self		assert: (self logger assert: 2 less: 1)		equals: 'console.assertLess(2,1)'.	self		assert: (self logger assert: 1 notLess: 2)		equals: 'console.assertNotLess(1,2)'</body><body package="Javascript-Tests-Core">testLogging	self		assert: (self logger log: 'done')		equals: 'console.log("done")'.	self		assert: (self logger log: 'done %s and %s' format: #( 'this' 'that' ))		equals: 'console.log("done %s and %s","this","that")'</body><body package="Javascript-Tests-Core">testMessages	self		assert: (self logger debug: 3)		equals: 'console.debug(3)'.	self		assert: (self logger info: 'eye m here 2')		equals: 'console.info("eye m here 2")'.	self		assert: (self logger warn: 'don"t 4get ur grlfrnd')		equals: 'console.warn("don\"t 4get ur grlfrnd")'.	self		assert: (self logger error: 'gone gone gone')		equals: 'console.error("gone gone gone")'</body></methods><methods><class-id>Javascript.JSRenderingTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testAddToEvent	self 		assert: [ :html | html div onClick: self mock ]		renders: '&lt;div onclick="mock"&gt;&lt;/div&gt;'.	self 		assert: [ :html | html div onMouseOut: self mock ]		renders: '&lt;div onmouseout="mock"&gt;&lt;/div&gt;'.	self 		assert: [ :html | html div onKeyUp: self mock ]		renders: '&lt;div onkeyup="mock"&gt;&lt;/div&gt;'</body><body package="Javascript-Tests-Core">testAddToScript	self 		assert: [ :html | html script: self mock ]		renders: '&lt;script type="text/javascript"&gt;mock&lt;/script&gt;'</body><body package="Javascript-Tests-Core">testJavascript	self 		assert: [ :html | html div onClick: (html javascript add: self mock; add: self mock; yourself) ]		renders: '&lt;div onclick="mock;mock"&gt;&lt;/div&gt;'</body><body package="Javascript-Tests-Core">testLogger	self 		assert: [ :html | html div onClick: (html logger log: 'Foo') ]		renders: '&lt;div onclick="console.log(&amp;quot;Foo&amp;quot;)"&gt;&lt;/div&gt;'</body><body package="Javascript-Tests-Core">testPassenger	self 		assert: [ :html | html div passenger: self ]		renders: '&lt;div id="id1"&gt;&lt;/div&gt;'.	self 		assert: [ :html | 			html div passenger: self.			html div passenger: self class ]		renders: '&lt;div id="id1"&gt;&lt;/div&gt;&lt;div id="id2"&gt;&lt;/div&gt;'</body><body package="Javascript-Tests-Core">testRenderOn	self 		assert: [ :html | html html: (html javascript render: 123) ]		renders: '123'.	self 		assert: [ :html | html html: (html javascript render: 'abc') ]		renders: 'abc'.	self 		assert: [ :html | html html: (html javascript render: [ :h | h div ]) ]		renders: '&lt;div&gt;&lt;/div&gt;'</body><body package="Javascript-Tests-Core">testScript	self 		assert: [ :html | html div script: self mock ]		renders: '&lt;div&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;mock;&lt;/script&gt;'</body><body package="Javascript-Tests-Core">testScriptOn	self 		assert: [ :html | html html: (html javascript script: [ :s | ]) ]		renders: ''.	self 		assert: [ :html | html html: (html javascript script: [ :s | s add: self mock ]) ]		renders: 'mock'.	self 		assert: [ :html | html html: (html javascript script: [ :s | s add: self mock; add: self mock ]) ]		renders: 'mock;mock'</body></methods><methods><class-id>Javascript.JSStreamTest</class-id> <category>tests-literals</category><body package="Javascript-Tests-Core">testCharacter	self assert: $a equals: '"a"'</body><body package="Javascript-Tests-Core">testLiteral	self assert: true equals: 'true'.	self assert: false equals: 'false'.	self assert: nil equals: 'null'</body><body package="Javascript-Tests-Core">testNumber	self assert: 123 equals: '123'.	self assert: 123.4 equals: '123.4'</body><body package="Javascript-Tests-Core">testStringBasic	self assert: 'abc' equals: '"abc"'.	self assert: '123' equals: '"123"'</body><body package="Javascript-Tests-Core">testStringEscaping	self assert: '''' equals: '"''"'.	self assert: '"' equals: '"\""'.	self assert: '\' equals: '"\\"'</body><body package="Javascript-Tests-Core">testStringSpecial	self assert: (String with: Character cr) equals: '"\r"'.	self assert: (String with: Character lf) equals: '"\n"'.	self assert: (String with: Character tab) equals: '"\t"'.	self assert: (String with: (Character codePoint: 0)) equals: '"\0"'.	self assert: (String with: (Character codePoint: 1)) equals: '"\x01"'.	self assert: (String with: (Character codePoint: 31)) equals: '"\x1f"'</body></methods><methods><class-id>Javascript.JSStreamTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testArgument	| stream |	stream := self stream argument: 1.	self assert: stream contents = '(1)'</body><body package="Javascript-Tests-Core">testArguments	| stream |	stream := self stream arguments: #(1 2 3).	self assert: stream contents = '(1,2,3)'</body><body package="Javascript-Tests-Core">testCopy	| stream1 stream2 |	stream1 := self stream nextPutAll: 'foo'.	stream2 := stream1 copy nextPutAll: 'bar'.	stream1 nextPutAll: 'zork'.	self assert: stream1 contents = 'foozork'.	self assert: stream2 contents = 'foobar'</body><body package="Javascript-Tests-Core">testJavascript	| stream |	stream := self stream javascript: #(1 2).	self assert: stream contents = '[1,2]'</body><body package="Javascript-Tests-Core">testNextPut	| stream |	stream := self stream nextPut: $f.	self assert: stream contents = 'f'</body><body package="Javascript-Tests-Core">testNextPutAll	| stream |	stream := self stream nextPutAll: 'foo'.	self assert: stream contents = 'foo'</body></methods><methods><class-id>Javascript.JSStreamTest</class-id> <category>tests-constructor</category><body package="Javascript-Tests-Core">testNewArgument	self assert: (JSStream argument: 0) equals: 'arguments[0]'.	self assert: (JSStream argument: 1) equals: 'arguments[1]'.	self deny: (JSStream argument: 1) == (JSStream argument: 1)</body><body package="Javascript-Tests-Core">testNewArgumentAt	self assert: (JSStream argumentAt: 1) equals: 'arguments[0]'.	self assert: (JSStream argumentAt: 2) equals: 'arguments[1]'.	self deny: (JSStream argumentAt: 1) == (JSStream argument: 1)</body><body package="Javascript-Tests-Core">testNewOn	self assert: (JSStream on: 'mock') equals: 'mock'</body><body package="Javascript-Tests-Core">testNewThis	self assert: JSStream this equals: 'this'.	self deny: JSStream this == JSStream this</body></methods><methods><class-id>Javascript.JSStreamTest</class-id> <category>tests-encoding</category><body package="Javascript-Tests-Core">testEncodeKeyValueOn	| actual |	actual := String streamContents: [ :stream |		JSStream encodeKey: 'key' value: 'value' on: stream ].	self assert: actual = '"key":"value"'</body></methods><methods><class-id>Javascript.JSJsonTest</class-id> <category>accessing</category><body package="Javascript-Tests-Core">json	^ JSJson context: self renderContext</body></methods><methods><class-id>Javascript.JSJsonTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testParse	self 		assert: (self json parse: '[1,2]')		equals: 'JSON.parse("[1,2]")'.	self 		assert: (self json parse: '[1,2]' reviver: 'return null')		equals: 'JSON.parse("[1,2]",function(){return null})'</body><body package="Javascript-Tests-Core">testStringify	self 		assert: (self json stringify: self mock)		equals: 'JSON.stringify(mock)'.	self 		assert: (self json stringify: self mock space: 4)		equals: 'JSON.stringify(mock,4)'.	self 		assert: (self json stringify: self mock replacer: #())		equals: 'JSON.stringify(mock,[])'.	self 		assert: (self json stringify: self mock replacer: #() space: ' ')		equals: 'JSON.stringify(mock,[]," ")'</body></methods><methods><class-id>Javascript.JSDecorationTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testAccess	self		assert: (self mock access: 'foo')		equals: 'mock.foo'</body><body package="Javascript-Tests-Core">testAlias	| mock |	mock := self mock.	mock alias: 'foo'.	self assert: mock equals: 'foo'.	mock alias: 'bar'; call: 'zork'.	self assert: mock equals: 'bar.zork()'</body><body package="Javascript-Tests-Core">testApply	self		assert: (self mock apply: #())		equals: 'mock()'.	self		assert: (self mock apply: #(1))		equals: 'mock(1)'.	self		assert: (self mock apply: #(1 true))		equals: 'mock(1,true)'</body><body package="Javascript-Tests-Core">testAssign	self		assert: (self mock assign: 1)		equals: 'mock=1'</body><body package="Javascript-Tests-Core">testAssignLocalTo	self		assert: (self mock assignLocalTo: 'x')		equals: 'var x=mock'</body><body package="Javascript-Tests-Core">testAssignTo	self		assert: (self mock assignTo: 'x')		equals: 'x=mock'</body><body package="Javascript-Tests-Core">testBinary	self		assert: (self mock &amp; false)		equals: 'mock&amp;&amp;false'.	self		assert: (self mock | 1)		equals: 'mock||1'</body><body package="Javascript-Tests-Core">testCall	self		assert: (self mock call: 'foo')		equals: 'mock.foo()'.	self		assert: (self mock call: nil)		equals: 'mock()'.	self		assert: (self mock call: '')		equals: 'mock()'</body><body package="Javascript-Tests-Core">testCallWith	self		assert: (self mock call: 'foo' with: 1)		equals: 'mock.foo(1)'.	self		assert: (self mock call: nil with: 1)		equals: 'mock(1)'.	self		assert: (self mock call: '' with: 1)		equals: 'mock(1)'</body><body package="Javascript-Tests-Core">testCallWithArguments	self		assert: (self mock call: 'foo' withArguments: #(1 2 3 4 5))		equals: 'mock.foo(1,2,3,4,5)'.	self		assert: (self mock call: nil withArguments: #(1 2 3 4 5))		equals: 'mock(1,2,3,4,5)'.	self		assert: (self mock call: '' withArguments: #(1 2 3 4 5))		equals: 'mock(1,2,3,4,5)'</body><body package="Javascript-Tests-Core">testCallWithWith	self		assert: (self mock call: 'foo' with: 1 with: 2)		equals: 'mock.foo(1,2)'.	self		assert: (self mock call: nil with: 1 with: 2)		equals: 'mock(1,2)'.	self		assert: (self mock call: '' with: 1 with: 2)		equals: 'mock(1,2)'</body><body package="Javascript-Tests-Core">testCallWithWithWith	self		assert: (self mock call: 'foo' with: 1 with: 2 with: 3)		equals: 'mock.foo(1,2,3)'.	self		assert: (self mock call: nil with: 1 with: 2 with: 3)		equals: 'mock(1,2,3)'.	self		assert: (self mock call: '' with: 1 with: 2 with: 3)		equals: 'mock(1,2,3)'</body><body package="Javascript-Tests-Core">testConcatenate	self		assert: (self mock , 2 , 3)		equals: 'mock;2;3'.	self		assert: (self mock , nil , self mock)		equals: 'mock;null;mock'</body><body package="Javascript-Tests-Core">testCondition	self		assert: (self mock condition: true)		equals: 'if(true){mock}'.	self		assert: (self mock condition: false)		equals: 'if(false){mock}'</body><body package="Javascript-Tests-Core">testConditionElse	self		assert: (self mock condition: true else: false)		equals: 'if(true){mock}else{false}'.	self		assert: (self mock condition: false else: true)		equals: 'if(false){mock}else{true}'</body><body package="Javascript-Tests-Core">testConfirm	self		assert: (self mock confirm: 'Sure?')		equals: 'if(confirm("Sure?")){mock}'</body><body package="Javascript-Tests-Core">testCreate	self		assert: self mock create		equals: 'new mock'</body><body package="Javascript-Tests-Core">testInterval	self		assert: (self mock interval: 2 seconds)		equals: 'setInterval(function(){mock},2000)'</body><body package="Javascript-Tests-Core">testNot	self		assert: self mock not		equals: '!mock'.	self		assert: self mock not not		equals: '!!mock'</body><body package="Javascript-Tests-Core">testProperty	self		assert: (self mock property: 'foo')		equals: 'mock["foo"]'.	self		assert: (self mock property: 123)		equals: 'mock[123]'.	self		assert: (self mock property: 'foo'; assign: 'bar')		equals: 'mock["foo"]="bar"'</body><body package="Javascript-Tests-Core">testReturn	self		assert: (self mock return: 1)		equals: 'mock;return 1'</body><body package="Javascript-Tests-Core">testThenElse	| mock |	mock := self mock.	mock then: 1.	self assert: mock equals: '(mock?1:null)'.	mock := self mock.	mock then: 1 else: 2.	self assert: mock equals: '(mock?1:2)'</body><body package="Javascript-Tests-Core">testTimeout	| mock |	mock := self mock.	mock timeout: 123.	self assert: mock equals: 'setTimeout(function(){mock},123)'</body></methods><methods><class-id>Javascript.JSScriptTest</class-id> <category>accessing</category><body package="Javascript-Tests-Core">function	^ JSFunction context: self renderContext</body><body package="Javascript-Tests-Core">script	^ JSScript context: self renderContext</body></methods><methods><class-id>Javascript.JSScriptTest</class-id> <category>tests-function</category><body package="Javascript-Tests-Core">testArgument	| function |	function := self function arguments: #(a b c).	self assert: (function argument = #(a b c)).	self assert: (function arguments = #(a b c))</body><body package="Javascript-Tests-Core">testArguments	self		assert: (self function arguments: #(a))		equals: 'function(a){}'.	self		assert: (self function arguments: #(a b))		equals: 'function(a,b){}'</body><body package="Javascript-Tests-Core">testAsFunction	self		assert: (self script asFunction: #(a))		equals: 'function(a){}'.	self		assert: (self function asFunction: #(a b))		equals: 'function(a,b){}'</body><body package="Javascript-Tests-Core">testReturn	| function |	function := self function.	function add: (self stream nextPutAll: 'foo').	function add: (self stream nextPutAll: 'bar').	function add: (self stream nextPutAll: 'baz').	self assert: function equals: 'function(){foo;bar;baz}'.	function := self function return: true.	function add: (self stream nextPutAll: 'foo').	function add: (self stream nextPutAll: 'bar').	function add: (self stream nextPutAll: 'baz').	self assert: function equals: 'function(){foo;bar;return baz}'</body></methods><methods><class-id>Javascript.JSScriptTest</class-id> <category>tests-compose</category><body package="Javascript-Tests-Core">testAdd	| script element |	script := self script.	element := self stream nextPutAll: 'foo'.	self assert: (script add: element) == element.	self assert: script equals: 'foo'.	element := self stream nextPutAll: 'bar'.	self assert: (script add: element) == element.	self assert: script equals: 'foo;bar'</body><body package="Javascript-Tests-Core">testAddAll	| script elements |	script := self script.	elements := Array 		with: (self stream nextPutAll: 'foo')		with: (self stream nextPutAll: 'bar').	self assert: (script addAll: elements) == elements.	self assert: script equals: 'foo;bar'</body><body package="Javascript-Tests-Core">testComma	| script element |	script := self script.	element := self stream nextPutAll: 'foo'.	self assert: (script , element) == script.	self assert: script equals: 'foo'.	element := self stream nextPutAll: 'bar'.	self assert: (script , element) == script.	self assert: script equals: 'foo;bar'</body><body package="Javascript-Tests-Core">testShift	| script element |	script := self script.	element := self stream nextPutAll: 'foo'.	self assert: (script &lt;&lt; element) == element.	self assert: script equals: 'foo'.	element := self stream nextPutAll: 'bar'.	self assert: (script &lt;&lt; element) == element.	self assert: script equals: 'foo;bar'</body></methods><methods><class-id>Javascript.JSScriptTest</class-id> <category>tests-utilities</category><body package="Javascript-Tests-Core">testAlert	self assert: (self script alert: 'Be Alert') equals: 'alert("Be Alert")'</body><body package="Javascript-Tests-Core">testCallback	self assert: (self script callback: [ ]) equals: 'window.location="http://www.seaside.st/?_s=1&amp;_k=a&amp;1"'</body><body package="Javascript-Tests-Core">testGoto	self assert: (self script goto: 'http://www.seaside.st') equals: 'window.location="http://www.seaside.st"'</body><body package="Javascript-Tests-Core">testLogger	self assert: (self script logger log: 'Hello Wold') equals: 'console.log("Hello Wold")'</body><body package="Javascript-Tests-Core">testRefresh	self assert: self script refresh equals: 'window.location="http://www.seaside.st/?_s=1&amp;_k=a"'</body></methods><methods><class-id>Javascript.JSScriptTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testConvert	self		assert: self function		equals: 'function(){}'.	self		assert: self function asFunction		equals: 'function(){}'.	self 		assert: 'alert("1")' asFunction		equals: 'function(){alert("1")}'</body><body package="Javascript-Tests-Core">testEmpty	self assert: self script equals: ''</body></methods><methods><class-id>Javascript.JSConversionTest</class-id> <category>tests</category><body package="Javascript-Tests-Core">testNumber	&lt;SeasideOverride&gt;	KnownTestFailure seasideTestIgnore: self running: [		self assert: 123 equals: '123'.		self assert: Float nan equals: 'NaN'.		self assert: Float infinity equals: 'Infinity'.		self assert: Float infinity * -1 equals: '-Infinity'	]	because: 'VW representation of Float is different from Pharo.'</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*javascript-tests-core</category><body package="Javascript-Tests-Core">javascriptTestsCore	^ self new		name: 'Javascript-Tests-Core';		description: 'Unit tests for the Javascript-Core package.';		addDependency: 'Javascript-Core';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAContextTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class></st-source>