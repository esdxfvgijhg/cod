<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-ComponentComment: Unit tests for the package Seaside-Component.DbIdentifier: bear73DbTrace: 492649DbUsername: jkottDbVersion: 3.2.0 - pmm.36 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Component' '') #(#any 'Seaside-Tests-Core' ''))Id: bd7e72c9-a7a9-4137-bdd5-6ac999f1c9adNamespace: SeasidePackageName: Seaside-Tests-ComponentParcel: #('Seaside-Tests-Component')ParcelName: Seaside-Tests-ComponentPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Component' '') #('Seaside-Tests-Core' ''))PrintStringCache: (3.2.0 - pmm.36 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Component-pmm.36.mczVersion: 3.2.0 - pmm.36 1Date: 12:17:55 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WADecorationStub</name><environment>Seaside</environment><super>Seaside.WADecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initialRequestBlock updateRootBlock updateUrlBlock updateStatesBlock renderBlock childrenBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Component-Stubs</category><attributes><package>Seaside-Tests-Component</package></attributes></class><class><name>WAComponentStub</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initialRequestBlock updateRootBlock updateUrlBlock updateStatesBlock renderBlock childrenBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Component-Stubs</category><attributes><package>Seaside-Tests-Component</package></attributes></class><class><name>WAComponentTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>log root decoration1 decoration2 child1 child2 child3 child4 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Component-Tests</category><attributes><package>Seaside-Tests-Component</package></attributes></class><methods><class-id>Seaside.WADecorationStub</class-id> <category>events</category><body package="Seaside-Tests-Component">onChildren: aBlock	childrenBlock := aBlock</body><body package="Seaside-Tests-Component">onInitialRequest: aBlock	initialRequestBlock := aBlock</body><body package="Seaside-Tests-Component">onRender: aBlock	renderBlock := aBlock</body><body package="Seaside-Tests-Component">onUpdateRoot: aBlock	updateRootBlock := aBlock</body><body package="Seaside-Tests-Component">onUpdateStates: aBlock	updateStatesBlock := aBlock</body><body package="Seaside-Tests-Component">onUpdateUrl: aBlock	updateUrlBlock := aBlock</body></methods><methods><class-id>Seaside.WADecorationStub</class-id> <category>updating</category><body package="Seaside-Tests-Component">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	updateRootBlock isNil		ifFalse: [ updateRootBlock value: anHtmlRoot ]</body><body package="Seaside-Tests-Component">updateStates: aSnapshot	super updateStates: aSnapshot.	updateStatesBlock isNil		ifFalse: [ updateStatesBlock value: aSnapshot ]</body><body package="Seaside-Tests-Component">updateUrl: aUrl	super updateUrl: aUrl.	updateUrlBlock isNil		ifFalse: [ updateUrlBlock value: aUrl ]</body></methods><methods><class-id>Seaside.WADecorationStub</class-id> <category>rendering</category><body package="Seaside-Tests-Component">renderContentOn: html	renderBlock isNil 		ifTrue: [ super renderContentOn: html ]		ifFalse: [ renderBlock value: html value: [ super renderContentOn: html ] ]</body></methods><methods><class-id>Seaside.WADecorationStub</class-id> <category>hooks</category><body package="Seaside-Tests-Component">children	^ childrenBlock isNil		ifTrue: [ super children ]		ifFalse: [ super children , childrenBlock value ]</body><body package="Seaside-Tests-Component">initialRequest: aRequest	super initialRequest: aRequest.	initialRequestBlock isNil		ifFalse: [ initialRequestBlock value: aRequest ]</body></methods><methods><class-id>Seaside.WAComponentStub</class-id> <category>events</category><body package="Seaside-Tests-Component">onChildren: aBlock	childrenBlock := aBlock</body><body package="Seaside-Tests-Component">onInitialRequest: aBlock	initialRequestBlock := aBlock</body><body package="Seaside-Tests-Component">onRender: aBlock	renderBlock := aBlock</body><body package="Seaside-Tests-Component">onUpdateRoot: aBlock	updateRootBlock := aBlock</body><body package="Seaside-Tests-Component">onUpdateStates: aBlock	updateStatesBlock := aBlock</body><body package="Seaside-Tests-Component">onUpdateUrl: aBlock	updateUrlBlock := aBlock</body></methods><methods><class-id>Seaside.WAComponentStub</class-id> <category>updating</category><body package="Seaside-Tests-Component">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	updateRootBlock isNil		ifFalse: [ updateRootBlock value: anHtmlRoot ]</body><body package="Seaside-Tests-Component">updateStates: aSnapshot	super updateStates: aSnapshot.	updateStatesBlock isNil		ifFalse: [ updateStatesBlock value: aSnapshot ]</body><body package="Seaside-Tests-Component">updateUrl: aUrl	super updateUrl: aUrl.	updateUrlBlock isNil		ifFalse: [ updateUrlBlock value: aUrl ]</body></methods><methods><class-id>Seaside.WAComponentStub</class-id> <category>rendering</category><body package="Seaside-Tests-Component">renderContentOn: html	renderBlock isNil 		ifTrue: [ super renderContentOn: html ]		ifFalse: [ renderBlock value: html ]</body></methods><methods><class-id>Seaside.WAComponentStub</class-id> <category>hooks</category><body package="Seaside-Tests-Component">children	^ childrenBlock isNil		ifTrue: [ super children ]		ifFalse: [ childrenBlock value ]</body><body package="Seaside-Tests-Component">initialRequest: aRequest	super initialRequest: aRequest.	initialRequestBlock isNil		ifFalse: [ initialRequestBlock value: aRequest ]</body></methods><methods><class-id>Seaside.WAComponentTest</class-id> <category>accessing</category><body package="Seaside-Tests-Component">renderContext	^ WARenderContext new		actionUrl: WAUrl new;		document: (WAHtmlDocument on: (WriteStream on: String new));		yourself</body><body package="Seaside-Tests-Component">renderingGuide	| context guide |	context := self renderContext.	guide := WARenderingGuide client: (WARenderVisitor context: context).	context visitor: guide.	^ guide</body></methods><methods><class-id>Seaside.WAComponentTest</class-id> <category>private</category><body package="Seaside-Tests-Component">assertLog: anArray	self		assert: log asArray = anArray		description: 'Expected ' , anArray printString , ', but got ' , log asArray printString.	log := OrderedCollection new</body><body package="Seaside-Tests-Component">assertRenders: aString	| guide |	guide := self renderingGuide start: root.	self assert: guide client renderContext document stream contents = aString</body><body package="Seaside-Tests-Component">log: aString	log add: aString</body></methods><methods><class-id>Seaside.WAComponentTest</class-id> <category>running</category><body package="Seaside-Tests-Component">setUp	super setUp.	log := OrderedCollection new.	root := WAComponentStub new.	decoration1 := WADecorationStub new.	decoration2 := WADecorationStub new.	child1 := WAComponentStub new.	child2 := WAComponentStub new.	child3 := WAComponentStub new.	child4 := WAComponentStub new</body></methods><methods><class-id>Seaside.WAComponentTest</class-id> <category>tests</category><body package="Seaside-Tests-Component">testActiveComponent	" single root component "	self assert: root activeComponent = root.	" add two children "	root onChildren: [ Array with: child1 with: child2 ].	self assert: root activeComponent = root.	self assert: child1 activeComponent = child1.	self assert: child2 activeComponent = child2.	" add two decorations "	root addDecoration: decoration1; addDecoration: decoration2.	self assert: root activeComponent = root.	self assert: child1 activeComponent = child1.	self assert: child2 activeComponent = child2.		" delegate to another component "	child2 show: child3.	self assert: root activeComponent = root.	self assert: child1 activeComponent = child1.	self assert: child2 activeComponent = child3.	self assert: child3 activeComponent = child3.		" delegate to yet another component "	child3 show: child4.	self assert: root activeComponent = root.	self assert: child1 activeComponent = child1.	self assert: child2 activeComponent = child4.	self assert: child3 activeComponent = child4.	self assert: child4 activeComponent = child4</body><body package="Seaside-Tests-Component">testAddDecoration	self assert: (root addDecoration: decoration1) = decoration1.	self assert: (root decorations size = 1).	self assert: (root decorations first = decoration1).		self assert: (root addDecoration: decoration2) = decoration2.	self assert: (root decorations size = 2).	self assert: (root decorations first = decoration2).	self assert: (root decorations last = decoration1)</body><body package="Seaside-Tests-Component">testChildComponentShouldNotBeSelfError	child1 onRender: [ :html | html text: '1' ].	child2 onRender: [ :html | html text: '2' ].	root onChildren: [ Array with: child1 with: child2 ].	"render so that we ensure component iterates over it's children"		self assertRenders: '12'.		root onChildren: [ Array with: child1 with: root ].	self		should: [ self assertRenders: 'dont care only interested in the raised exception' ] 		raise: WAChildComponentShouldNotBeSelfError		description: 'Testing WAPresenter  &gt;&gt; #childrenDo: with #children returning an array including self'</body><body package="Seaside-Tests-Component">testDecorations	self assert: root decorations isEmpty.	root show: child1.	self assert: root decorations size = 1.	root addDecoration: decoration1.	self assert: root decorations size = 2</body><body package="Seaside-Tests-Component">testDelegations	self assert: root delegations isEmpty.	root show: child1.	self assert: root delegations size = 1.	root addDecoration: decoration1.	self assert: root delegations size = 1</body><body package="Seaside-Tests-Component">testHome	root show: child1.	child1 show: child2.	self assert: root activeComponent = child2.	self assert: child1 activeComponent = child2.		root home.	self assert: root activeComponent = root.	self assert: child1 activeComponent = child2.	self assert: child2 activeComponent = child2.		child1 home.	self assert: root activeComponent = root.	self assert: child1 activeComponent = child1.	self assert: child2 activeComponent = child2.		child2 home.	self assert: root activeComponent = root.	self assert: child1 activeComponent = child1.	self assert: child2 activeComponent = child2</body><body package="Seaside-Tests-Component">testInitialRequest	| request guide |	request := WARequest new.	root onInitialRequest: [ :each |		self assert: each = request.		self log: 'root' ].	child1 onInitialRequest: [ :each |		self assert: each = request.		self log: 'child1' ].	child2 onInitialRequest: [ :each |		self assert: each = request.		self log: 'child2' ].	child3 onInitialRequest: [ :each |		self assert: each = request.		self log: 'child3' ].	decoration1 onInitialRequest: [ :each |		self assert: each = request.		self log: 'decoration1' ].	decoration2 onInitialRequest: [ :each |		self assert: each = request.		self log: 'decoration2' ].	guide := WAAllPresenterGuide client: (WAInitialRequestVisitor request: request).	" single root component "	guide start: root.	self assertLog: #('root').	" add two children "	root onChildren: [ Array with: child1 with: child2 ].	guide start: root.	self assertLog: #('root' 'child1' 'child2').	" add two decorations "	root addDecoration: decoration1; addDecoration: decoration2.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').			" delegate to another component "	child2 show: child3.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3' 'child2')</body><body package="Seaside-Tests-Component">testRemoveDecoration	root addDecoration: decoration1; addDecoration: decoration2.	self assert: (root removeDecoration: decoration2) = decoration2.	self assert: (root decorations size = 1).	self assert: (root decorations first = decoration1).		root addDecoration: decoration2.	self assert: (root removeDecoration: decoration1) = decoration1.	self assert: (root decorations size = 1).	self assert: (root decorations first = decoration2).		self assert: (root removeDecoration: decoration1) isNil.	self assert: (root decorations size = 1).	self assert: (root decorations first = decoration2).	self assert: (root removeDecoration: decoration2) = decoration2.	self assert: (root decorations isEmpty).			self assert: (root removeDecoration: decoration2) isNil</body><body package="Seaside-Tests-Component">testRemoveDelegation	self assert: root delegations isEmpty.	root show: child1.	root show: child2.	self assert: root delegations size = 2.	root removeDelegation.	self assert: root delegations size = 1.	root removeDelegation.	self assert: root delegations isEmpty.	root removeDelegation.	self assert: root delegations isEmpty</body><body package="Seaside-Tests-Component">testUpdateRoot	| htmlRoot guide |	htmlRoot := WAHtmlRoot new.	root onUpdateRoot: [ :each |		self assert: each = htmlRoot.		self log: 'root' ].	child1 onUpdateRoot: [ :each |		self assert: each = htmlRoot.		self log: 'child1' ].	child2 onUpdateRoot: [ :each |		self assert: each = htmlRoot.		self log: 'child2' ].	child3 onUpdateRoot: [ :each |		self assert: each = htmlRoot.		self log: 'child3' ].	decoration1 onUpdateRoot: [ :each |		self assert: each = htmlRoot.		self log: 'decoration1' ].	decoration2 onUpdateRoot: [ :each |		self assert: each = htmlRoot.		self log: 'decoration2' ].	guide := WAVisiblePresenterGuide client: (WAUpdateRootVisitor root: htmlRoot).	" single root component "	guide start: root.	self assertLog: #('root').	" add two children "	root onChildren: [ Array with: child1 with: child2 ].	guide start: root.	self assertLog: #('root' 'child1' 'child2').	" add two decorations "	root addDecoration: decoration1; addDecoration: decoration2.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').		" delegate to another component "	child2 show: child3.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3')</body><body package="Seaside-Tests-Component">testUpdateStates	| snapshot guide |	snapshot := WASnapshot new.	root onUpdateStates: [ :each |		self assert: each = snapshot.		self log: 'root' ].	child1 onUpdateStates: [ :each |		self assert: each = snapshot.		self log: 'child1' ].	child2 onUpdateStates: [ :each |		self assert: each = snapshot.		self log: 'child2' ].	child3 onUpdateStates: [ :each |		self assert: each = snapshot.		self log: 'child3' ].	decoration1 onUpdateStates: [ :each |		self assert: each = snapshot.		self log: 'decoration1' ].	decoration2 onUpdateStates: [ :each |		self assert: each = snapshot.		self log: 'decoration2' ].	guide := WAAllPresenterGuide client: (WAUpdateStatesVisitor snapshot: snapshot).	" single root component "	guide start: root.	self assertLog: #('root').	" add two children "	root onChildren: [ Array with: child1 with: child2 ].	guide start: root.	self assertLog: #('root' 'child1' 'child2').	" add two decorations "	root addDecoration: decoration1; addDecoration: decoration2.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').		" delegate to another component "	child2 show: child3.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3' 'child2')</body><body package="Seaside-Tests-Component">testUpdateUrl	| url guide |	url := WAUrl new.	root onUpdateUrl: [ :each |		self assert: each = url.		self log: 'root' ].	child1 onUpdateUrl: [ :each |		self assert: each = url.		self log: 'child1' ].	child2 onUpdateUrl: [ :each |		self assert: each = url.		self log: 'child2' ].	child3 onUpdateUrl: [ :each |		self assert: each = url.		self log: 'child3' ].	decoration1 onUpdateUrl: [ :each |		self assert: each = url.		self log: 'decoration1' ].	decoration2 onUpdateUrl: [ :each |		self assert: each = url.		self log: 'decoration2' ].	guide := WAVisiblePresenterGuide client: (WAUpdateUrlVisitor url: url).	" single root component "	guide start: root.	self assertLog: #('root').	" add two children "	root onChildren: [ Array with: child1 with: child2 ].	guide start: root.	self assertLog: #('root' 'child1' 'child2').	" add two decorations "	root addDecoration: decoration1; addDecoration: decoration2.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').		" delegate to another component "	child2 show: child3.	guide start: root.	self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3')</body></methods><methods><class-id>Seaside.WAComponentTest</class-id> <category>tests-rendering</category><body package="Seaside-Tests-Component">testRenderingChildren	root onChildren: [ Array with: child1 with: child2 ].	child1 onRender: [ :html | html text: '1' ].	child2 onRender: [ :html | html text: '2' ].	self assertRenders: '12'.		root onRender: [ :html | html text: 'a'; render: child1; text: 'b'; render: child2; text: 'c' ].	self assertRenders: 'a1b2c'.		root onChildren: [ Array with: child2 with: child1 ].	self assertRenders: 'a1b2c'.	root onRender: [ :html | html text: 'a'; render: child2; text: 'b'; render: child1; text: 'c' ].	self assertRenders: 'a2b1c'</body><body package="Seaside-Tests-Component">testRenderingDecoration	root onRender: [ :html | html text: 'r' ].	root addDecoration: decoration1.		decoration1 onRender: [ :html :cc | html text: '1'. cc value ].	self assertRenders: '1r'.		decoration1 onRender: [ :html :cc | cc value. html text: '1' ].	self assertRenders: 'r1'.		decoration1 onRender: [ :html :cc | html text: '1' ].	self assertRenders: '1'</body><body package="Seaside-Tests-Component">testRenderingDelegation	root onRender: [ :html | html text: 'r' ].	child1 onRender: [ :html | html text: '1' ].	child2 onRender: [ :html | html text: '2' ].	child3 onRender: [ :html | html text: '3' ].		root show: child1.	self assertRenders: '1'.		child1 show: child2.	self assertRenders: '2'.		child2 answer.	self assertRenders: '1'.		root show: child3.	self assertRenders: '3'.		root home.	self assertRenders: 'r'</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-component</category><body package="Seaside-Tests-Component">seasideTestsComponent	^ self new		name: 'Seaside-Tests-Component';		description: 'Unit tests for the package Seaside-Component.';		addDependency: 'Seaside-Component';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WADecoration</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class></st-source>