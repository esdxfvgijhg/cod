<?xml version="1.0"?><st-source><!-- Name: Seaside-VisualWorks-Tools-WebNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: This packages contains Seaside web tools specific to VisualWorks.DbIdentifier: bear73DbTrace: 492590DbUsername: jkottDbVersion: 3.2.0 - 1DevelopmentPrerequisites: #(#(#any 'Grease-VisualWorks-Core' '') #(#any 'Seaside-Session' '') #(#any 'Seaside-Canvas' '') #(#any 'Seaside-Tools-Core' '') #(#any 'Seaside-Tools-Web' ''))PackageName: Seaside-VisualWorks-Tools-WebParcel: #('Seaside-VisualWorks-Tools-Web')PrerequisiteDescriptions: #(#(#name 'Grease-VisualWorks-Core' #componentType #package) #(#name 'Seaside-Session' #componentType #package) #(#name 'Seaside-Canvas' #componentType #package) #(#name 'Seaside-Tools-Core' #componentType #package) #(#name 'Seaside-Tools-Web' #componentType #package))PrerequisiteParcels: #(#('Grease-VisualWorks-Core' '') #('Seaside-Session' '') #('Seaside-Canvas' '') #('Seaside-Tools-Core' '') #('Seaside-Tools-Web' ''))PrintStringCache: (3.2.0 - 1,jkott)Version: 3.2.0 - 1Date: 3:31:28 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:28 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAVisualWorksStatusItem</name><environment>Seaside</environment><super>Seaside.WAStatusItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-VisualWorks-Tools-Web</package></attributes></class><comment><class-id>Seaside.WAVisualWorksStatusItem</class-id><body>WAVisualWorksStatusItem is the abstract base class for other classes providing information about a specific aspect of this system.</body></comment><class><name>WAImageStatus</name><environment>Seaside</environment><super>Seaside.WAVisualWorksStatusItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-VisualWorks-Tools-Web</package></attributes></class><comment><class-id>Seaside.WAImageStatus</class-id><body>WAImageStatus displays status information about the VisualWorks image.</body></comment><class><name>WAProcessStatus</name><environment>Seaside</environment><super>Seaside.WAVisualWorksStatusItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-VisualWorks-Tools-Web</package></attributes></class><comment><class-id>Seaside.WAProcessStatus</class-id><body>WAProcessStatus displays information about the Process instances in this image.</body></comment><class><name>WAOperatingSystemStatus</name><environment>Seaside</environment><super>Seaside.WAVisualWorksStatusItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-VisualWorks-Tools-Web</package></attributes></class><comment><class-id>Seaside.WAOperatingSystemStatus</class-id><body>WAOperatingSystemStatus displays information about the host operating system.</body></comment><class><name>WAMemoryStatus</name><environment>Seaside</environment><super>Seaside.WAVisualWorksStatusItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-VisualWorks-Tools-Web</package></attributes></class><comment><class-id>Seaside.WAMemoryStatus</class-id><body>WAMemoryStatus displays information about VisualWorks memory.</body></comment><class><name>WAGarbageCollectorStatus</name><environment>Seaside</environment><super>Seaside.WAVisualWorksStatusItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-VisualWorks-Tools-Web</package></attributes></class><comment><class-id>Seaside.WAGarbageCollectorStatus</class-id><body>WAGarbageCollectorStatus displays information about the garbage collector.</body></comment><methods><class-id>Seaside.WAVisualWorksStatusItem</class-id> <category>private</category><body package="Seaside-VisualWorks-Tools-Web">days	^GRPluggablePrinter on: 			[:duration |			| days |			days := duration days.			days &gt; 0 ifTrue: [(days pluralize: 'day') , ' '] ifFalse: ['']]</body><body package="Seaside-VisualWorks-Tools-Web">durationPrinter	^self days , self paddedHours , self paddedMinutes , self paddedSeconds</body><body package="Seaside-VisualWorks-Tools-Web">numberOfSessions	| count |	count := 0.	WASession allGeneralInstancesDo: [:each | count := count + 1].	^count</body><body package="Seaside-VisualWorks-Tools-Web">paddedHours	^GRPluggablePrinter on: 			[:duration |			| hours days |			hours := duration hours.			days := duration days.			(hours isZero and: [days isZero])				ifTrue: ['']				ifFalse: 					[(((GRNumberPrinter new)						padding: $0;						digits: 2) print: hours)						, (hours = 1 ifTrue: [' hr '] ifFalse: [' hrs '])]]</body><body package="Seaside-VisualWorks-Tools-Web">paddedMinutes	^(GRMappedPrinter block: [:time | time minutes]		next: ((GRNumberPrinter new)				padding: $0;				digits: 2)) , ' min '</body><body package="Seaside-VisualWorks-Tools-Web">paddedSeconds	^(GRMappedPrinter block: [:time | time seconds]		next: (GRPrinter numberWithAtLeastDigits: 2)) , ' sec'</body><body package="Seaside-VisualWorks-Tools-Web">percent: aDecimal	^(aDecimal * 100 roundTo: 0.1) printString , '%'</body><body package="Seaside-VisualWorks-Tools-Web">printDuration: aDuration	^self durationPrinter print: aDuration</body><body package="Seaside-VisualWorks-Tools-Web">printMemory: anInteger	^GRPrinter binaryFileSize print: anInteger</body><body package="Seaside-VisualWorks-Tools-Web">printMilliSeconds: aNumber	^aNumber &gt; 2000		ifTrue: [self printDuration: (Duration milliSeconds: aNumber seasideInteger)]		ifFalse: 			[aNumber &gt; 2				ifTrue: [aNumber greaseInteger printString , ' ms']				ifFalse: [(GRNumberPrinter new precision: 2) , ' ms' print: aNumber]]</body></methods><methods><class-id>Seaside.WAVisualWorksStatusItem class</class-id> <category>testing</category><body package="Seaside-VisualWorks-Tools-Web">isAbstract	" Answer a Boolean indicating whether the receiver is an abstract class. "	^self name = #WAVisualWorksStatusItem</body></methods><methods><class-id>Seaside.WAImageStatus</class-id> <category>rendering</category><body package="Seaside-VisualWorks-Tools-Web">renderContentOn: html	super renderContentOn: html.	(html heading)		level2;		with: 'Actions'.	html unorderedList: 			[html listItem: 					[(html anchor)						callback: [ObjectMemory snapshot];						with: 'Save'].			html listItem: 					[(html anchor)						callback: [ObjectMemory snapshotThenQuit];						with: 'Save and Quit'].			html listItem: 					[(html anchor)						callback: [ObjectMemory quit];						with: 'Quit Without Saving']]</body><body package="Seaside-VisualWorks-Tools-Web">renderValuesOn: html	" Render statistics about the image. "	| systemUpTime serverUpTime |	systemUpTime := GreaseSystem upTime milliseconds.	self		renderLabel: 'System uptime'		value: (self printDuration: systemUpTime)		on: html.	serverUpTime := GreaseSystem serverUpTime milliseconds.	self		renderLabel: 'Server uptime'		value: (self printDuration: serverUpTime)		on: html.	self		renderLabel: 'Version'		value: 			[html html: (SystemUtils version						copyReplaceAll: (String with: (Character value: 174))						with: '&amp;reg;')]		on: html.	self		renderLabel: 'Image Path'		value: ObjectMemory imageFilename asAbsoluteFilename asString		on: html.	self		renderLabel: 'Number of Sessions'		value: 			[html text: self numberOfSessions.			html space.			(html anchor)				callback: 						[WAAdmin clearSessions.						ObjectMemory globalGarbageCollect];				title: 'Expires all sessions and does a full garbage collect.';				with: 'Clear']		on: html.	self		renderLabel: 'Number of Classes'		value: self numberOfClasses		on: html</body></methods><methods><class-id>Seaside.WAImageStatus</class-id> <category>accessing</category><body package="Seaside-VisualWorks-Tools-Web">numberOfClasses	| count |	count := 0.	SystemUtils allClassesDo: [:each | count := count + 1].	^count</body><body package="Seaside-VisualWorks-Tools-Web">priority	^ 100</body><body package="Seaside-VisualWorks-Tools-Web">title	^'Smalltalk Image'</body></methods><methods><class-id>Seaside.WAProcessStatus</class-id> <category>rendering</category><body package="Seaside-VisualWorks-Tools-Web">renderHeaderOn: html	html tableHead: 			[html tableRow: 					[html tableHeading: 'Name'.					html tableHeading: 'Priority'.					html tableHeading: 'Process'.					html tableData]]</body><body package="Seaside-VisualWorks-Tools-Web">renderInspect: aProcess on: html	#{Seaside.WAInspector} ifDefinedDo: 			[:inspectorClass |			inspectorClass current notNil				ifTrue: 					[(html anchor)						callback: [self show: (inspectorClass current on: aProcess)];						with: 'inspect']]</body><body package="Seaside-VisualWorks-Tools-Web">renderProcess: aProcess on: html	html tableRow: 			[self renderLabel: (self processName: aProcess) on: html.			self renderValue: aProcess priority on: html.			self renderValue: [self renderTerminate: aProcess on: html] on: html.			self renderValue: [self renderSignalSemaphore: aProcess on: html] on: html.			self renderValue: [self renderInspect: aProcess on: html] on: html]</body><body package="Seaside-VisualWorks-Tools-Web">renderSignalSemaphore: aProcess on: html	(self isWaitingOnSemaphore: aProcess)		ifTrue: 			[(html anchor)				callback: [self signalSemaphore: aProcess];				with: 'signal semaphore']</body><body package="Seaside-VisualWorks-Tools-Web">renderTerminate: aProcess on: html	(html anchor)		callback: [aProcess terminate];		with: 'terminate'</body><body package="Seaside-VisualWorks-Tools-Web">renderValuesOn: html	self processes do: [:each | self renderProcess: each on: html]</body></methods><methods><class-id>Seaside.WAProcessStatus</class-id> <category>accessing</category><body package="Seaside-VisualWorks-Tools-Web">priority	^ 800</body><body package="Seaside-VisualWorks-Tools-Web">processName: aProcess	^aProcess name ifNil: [aProcess printString]</body><body package="Seaside-VisualWorks-Tools-Web">processes	^(Process allGeneralInstances		reject: [:each | each isTerminated or: [each = Processor activeProcess]])			asSortedCollection: [:a :b | a priority &gt;= b priority]</body><body package="Seaside-VisualWorks-Tools-Web">title	^'Processes'</body></methods><methods><class-id>Seaside.WAProcessStatus</class-id> <category>private</category><body package="Seaside-VisualWorks-Tools-Web">isWaitingOnSemaphore: aProcess	"answers whether the given Process is waiting on a semaphore"	^aProcess suspendingList isKindOf: Semaphore</body></methods><methods><class-id>Seaside.WAProcessStatus</class-id> <category>actions</category><body package="Seaside-VisualWorks-Tools-Web">signalSemaphore: aProcess	(self isWaitingOnSemaphore: aProcess) ifFalse: [^self].	"there is a potential race condition here because of check-then-act but we don't care about this"	[aProcess suspendingList signal] fork</body></methods><methods><class-id>Seaside.WAOperatingSystemStatus</class-id> <category>rendering</category><body package="Seaside-VisualWorks-Tools-Web">renderValuesOn: html	self		renderLabel: 'Operating System'		value: OSHandle currentPlatformID		on: html</body></methods><methods><class-id>Seaside.WAOperatingSystemStatus</class-id> <category>accessing</category><body package="Seaside-VisualWorks-Tools-Web">label	^'OS'</body><body package="Seaside-VisualWorks-Tools-Web">priority	^ 900</body><body package="Seaside-VisualWorks-Tools-Web">title	^'Operating System'</body></methods><methods><class-id>Seaside.WAMemoryStatus</class-id> <category>rendering</category><body package="Seaside-VisualWorks-Tools-Web">renderHeaderOn: html	html tableHead: 			[html tableRow: 					[html tableData.					html tableHeading: 'Used'.					html tableHeading: 'Size'.					html tableHeading: 'Threshold'.					html tableHeading: 'Objects']]</body><body package="Seaside-VisualWorks-Tools-Web">renderLabel: aLabelString value: aFirstObject value: aSecondObject value: aThirdObject value: aFourthObject on: html	html tableRow: 			[self renderLabel: aLabelString on: html.			self renderValue: aFirstObject on: html.			self renderValue: aSecondObject on: html.			self renderValue: aThirdObject on: html.			self renderValue: aFourthObject on: html]</body><body package="Seaside-VisualWorks-Tools-Web">renderValuesOn: html	" Render the memory statistics on html. The format of this method is based on ObjectMemory&gt;&gt;spaceSummaryOn: "	| objectMemory |	objectMemory := ObjectMemory				getMemoryUsageAndZeroFragmentationStatisticsIf: false.	self		renderLabel: 'Eden'		value: (self printMemory: objectMemory edenUsedBytes)		value: (self printMemory: objectMemory edenBytes)		value: (self printMemory: objectMemory edenUsedBytesScavengeThreshold)		on: html.	self		renderLabel: 'Survivor'		value: (self printMemory: objectMemory survUsedBytes)		value: (self printMemory: objectMemory survBytes)		value: (self printMemory: objectMemory survUsedBytesTenuringThreshold)		on: html.	self		renderLabel: 'Large'		value: (self printMemory: objectMemory largeUsedBytes)		value: (self printMemory: objectMemory largeBytes)		value: (self printMemory: objectMemory largeBytes						- objectMemory largeFreeBytesTenuringThreshold)		value: objectMemory largeUsedObjects		on: html.	self		renderLabel: 'Old'		value: (self printMemory: objectMemory availableFreeOldSpaceBytes)		value: (self printMemory: objectMemory oldBytes)		value: (self printMemory: objectMemory oldBytes						- objectMemory availableFreeOldSpaceBytesLimit)		value: objectMemory oldOTEs		on: html.	self		renderLabel: 'Perm'		value: (self printMemory: objectMemory permDataBytes)		value: (self printMemory: objectMemory permBytes)		value: ''		value: objectMemory permOTEs		on: html.	self		renderLabel: 'Fixed'		value: (self printMemory: objectMemory fixedUsedBytes)		value: (self printMemory: objectMemory fixedBytes)		value: ''		value: objectMemory fixedUsedObjects		on: html</body></methods><methods><class-id>Seaside.WAMemoryStatus</class-id> <category>accessing</category><body package="Seaside-VisualWorks-Tools-Web">priority	^ 700</body><body package="Seaside-VisualWorks-Tools-Web">tableBodyCssClass	^'right'</body><body package="Seaside-VisualWorks-Tools-Web">title	^'Memory'</body></methods><methods><class-id>Seaside.WAGarbageCollectorStatus</class-id> <category>accessing</category><body package="Seaside-VisualWorks-Tools-Web">label	^'GC'</body><body package="Seaside-VisualWorks-Tools-Web">priority	^ 600</body><body package="Seaside-VisualWorks-Tools-Web">tableBodyCssClass	^'right'</body><body package="Seaside-VisualWorks-Tools-Web">title	^'Garbage Collector'</body></methods><methods><class-id>Seaside.WAGarbageCollectorStatus</class-id> <category>rendering</category><body package="Seaside-VisualWorks-Tools-Web">renderContentOn: html	super renderContentOn: html.	(html heading)		level2;		with: 'Actions'.	html unorderedList: 			[html listItem: 					[(html anchor)						callback: [ObjectMemory quickGC];						title: 'Reclaims recently created garbage (which is usually most of it) fairly quickly.';						with: 'Quick GC'].			html listItem: 					[(html anchor)						callback: [ObjectMemory globalGarbageCollect];						title: 'Reclaims all garbage.';						with: 'Full GC'].			html listItem: 					[(html anchor)						callback: [ObjectMemory compactingGC];						title: 'Perform a compacting, mark-sweep garbage collection of the entire Smalltalk system (with the exception of those objects housed in PermSpace), eliminating any unreferencable objects. Compacts both the OT and object data. May take some time even on fast machines.';						with: 'Compacting GC'].			html listItem: 					[(html anchor)						callback: [ObjectMemory compactMemory];						title: 'Compacts the data in OldSpace, but not the OT. May take some time even on fast machines.';						with: 'Compact memory']]</body><body package="Seaside-VisualWorks-Tools-Web">renderValuesOn: html	| objectMemory compactingGCs globalGCs incrementalGCs scavenges |	objectMemory := ObjectMemory current.	compactingGCs := objectMemory numGCs.	globalGCs := objectMemory numGlobalGCs.	incrementalGCs := objectMemory numIncGCs.	scavenges := objectMemory numScavenges.	self renderLabel: 'Global GCs' value: globalGCs on: html.	self renderLabel: 'Incremental GCs' value: incrementalGCs on: html.	self renderLabel: 'Compacting GCs' value: compactingGCs on: html.	self renderLabel: 'Scavenges' value: scavenges on: html</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAStatusItem</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tools-Web</category><attributes><package>Seaside-Tools-Web</package></attributes></class></st-source>