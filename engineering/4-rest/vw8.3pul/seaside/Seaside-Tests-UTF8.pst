<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-UTF8Comment: Unit tests for UTF8 support.DbIdentifier: bear73DbTrace: 492658DbUsername: jkottDbVersion: 3.2.0 - pmm.16 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Tests-Core' ''))Id: 78c67bd5-7341-4d54-bd03-9c6a9498939bNamespace: SeasidePackageName: Seaside-Tests-UTF8Parcel: #('Seaside-Tests-UTF8')ParcelName: Seaside-Tests-UTF8PrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Tests-Core' ''))PrintStringCache: (3.2.0 - pmm.16 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-UTF8-pmm.16.mczVersion: 3.2.0 - pmm.16 1Date: 12:17:57 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:57 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAUtf8UrlTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-UTF8</category><attributes><package>Seaside-Tests-UTF8</package></attributes></class><class><name>WAUtf8ResponseGeneratorTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-UTF8</category><attributes><package>Seaside-Tests-UTF8</package></attributes></class><class><name>WAUtf8ResponseTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>response </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-UTF8</category><attributes><package>Seaside-Tests-UTF8</package></attributes></class><class><name>WAUtf8CookieTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-UTF8</category><attributes><package>Seaside-Tests-UTF8</package></attributes></class><class><name>WAUtf8FileTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>file </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-UTF8</category><attributes><package>Seaside-Tests-UTF8</package></attributes></class><methods><class-id>Seaside.WAUtf8UrlTest</class-id> <category>configuration</category><body package="Seaside-Tests-UTF8">createCodec	^ GRCodec forEncoding: 'utf-8'</body></methods><methods><class-id>Seaside.WAUtf8UrlTest</class-id> <category>private</category><body package="Seaside-Tests-UTF8">asString: aCollectionOfIntegers	^ String streamContents: [ :stream |		aCollectionOfIntegers do: [ :each |			stream nextPut: (Character codePoint: each) ] ]</body><body package="Seaside-Tests-UTF8">unicodeString	^ self asString: #(165 163 8364 36 162 8353 8354 8355 8356 8357 8358 8359 8360 8361 8362 8363 8365 8366 8367)</body></methods><methods><class-id>Seaside.WAUtf8UrlTest</class-id> <category>tests</category><body package="Seaside-Tests-UTF8">testPathSqueakRegression	"Tests a path that is made up of only WideStrings"	| url |	url := (WAUrl absolute: 'http://book.seaside.st/%E1%B8%83/%C3%A1%C4%8D')		decodedWith: (GRCodec forEncoding: 'utf-8').	self assert: url pathStringUnencoded =		('/', (String with: (Character codePoint: 16r1E03)),		'/', (String with: (Character codePoint: 225) with: (Character codePoint: 269)))</body><body package="Seaside-Tests-UTF8">testPathStringUnencoded	| url |	url := (WAUrl absolute: 'http://book.seaside.st/book/%C3%A1%C4%8D')		decodedWith: (GRCodec forEncoding: 'utf-8').	self assert: url pathStringUnencoded =  ('/book/', (String with: (Character codePoint: 225) with: (Character codePoint: 269)))</body><body package="Seaside-Tests-UTF8">testPrintString	| url |	url :=  WAUrl absolute: 'http://www.seaside.st/'.	url addToPath: self unicodeString.	self assert: url printString = 'http://www.seaside.st/%C2%A5%C2%A3%E2%82%AC%24%C2%A2%E2%82%A1%E2%82%A2%E2%82%A3%E2%82%A4%E2%82%A5%E2%82%A6%E2%82%A7%E2%82%A8%E2%82%A9%E2%82%AA%E2%82%AB%E2%82%AD%E2%82%AE%E2%82%AF'</body></methods><methods><class-id>Seaside.WAUtf8ResponseGeneratorTest</class-id> <category>tests</category><body package="Seaside-Tests-UTF8">testForbidden	| generator |	generator := WAResponseGenerator on: self requestContext.	self requestContext response nextPutAll: 'oops'.	generator forbidden.	self assertContents: 'Error: you are forbidden to access "/book/', (String with: (Character codePoint: 225) with: (Character codePoint: 269)), '"'</body><body package="Seaside-Tests-UTF8">testNotFound	| generator |	generator := WAResponseGenerator on: self requestContext.	self requestContext response nextPutAll: 'oops'.	generator notFound.	self assertContents: '/book/', (String with: (Character codePoint: 225) with: (Character codePoint: 269)), ' not found'</body></methods><methods><class-id>Seaside.WAUtf8ResponseGeneratorTest</class-id> <category>private</category><body package="Seaside-Tests-UTF8">assertContents: aString	self assert: self requestContext response contents = aString</body></methods><methods><class-id>Seaside.WAUtf8ResponseGeneratorTest</class-id> <category>configuration</category><body package="Seaside-Tests-UTF8">createRequest 	| request |	request := super createRequest.	request url		addToPath: 'book';		addToPath: (String with: (Character codePoint: 225) with: (Character codePoint: 269)).	^ request</body></methods><methods><class-id>Seaside.WAUtf8ResponseTest</class-id> <category>private</category><body package="Seaside-Tests-UTF8">asString: aCollectionOfIntegers	^ String streamContents: [ :stream |		aCollectionOfIntegers do: [ :each |			stream nextPut: (Character codePoint: each) ] ]</body><body package="Seaside-Tests-UTF8">assertLines: anArray	self assert: self lines = anArray</body><body package="Seaside-Tests-UTF8">contents	| stream |	stream := WriteStream on: String new.	self response writeOn: stream.	^ stream contents</body><body package="Seaside-Tests-UTF8">lines	"Answer the response as an array of lines, to be used within the tests."	| result stream |	result := OrderedCollection new.	stream := self contents readStream.	[ stream atEnd ] whileFalse: 		[ result add: (stream greaseUpToAll: (String 					with: Character cr					with: Character lf)) ].	^ result asArray</body><body package="Seaside-Tests-UTF8">response	^ response ifNil: [ response := WABufferedResponse new ]</body><body package="Seaside-Tests-UTF8">unicodeString	^ self asString: #(165 163 8364 36 162 8353 8354 8355 8356 8357 8358 8359 8360 8361 8362 8363 8365 8366 8367)</body></methods><methods><class-id>Seaside.WAUtf8ResponseTest</class-id> <category>configuration</category><body package="Seaside-Tests-UTF8">createCodec	^ GRCodec forEncoding: 'utf-8'</body></methods><methods><class-id>Seaside.WAUtf8ResponseTest</class-id> <category>tests</category><body package="Seaside-Tests-UTF8">testRedirectTo	| url |	url :=  WAUrl absolute: 'http://www.seaside.st/'.	url addToPath: self unicodeString.	self response redirectTo: url.	self assertLines:  #('HTTP/1.1 302 Found'		'Location: http://www.seaside.st/%C2%A5%C2%A3%E2%82%AC%24%C2%A2%E2%82%A1%E2%82%A2%E2%82%A3%E2%82%A4%E2%82%A5%E2%82%A6%E2%82%A7%E2%82%A8%E2%82%A9%E2%82%AA%E2%82%AB%E2%82%AD%E2%82%AE%E2%82%AF'		'Content-Length: 0' '')</body></methods><methods><class-id>Seaside.WAUtf8CookieTest</class-id> <category>tests</category><body package="Seaside-Tests-UTF8">testWriteOn	| expiry cookie |	expiry := DateAndTime year: 2007 month: 11 day: 21 hour: 14 minute: 42 second: 48 offset: (Duration days: 0 hours: 2 minutes: 0 seconds: 0).	cookie := WACookie key: 'ikuser' value: '1234'.	self assert: cookie oldNetscapeString = 'ikuser=1234'.	self assert: cookie rfc2109String = 'ikuser="1234"; Version=1'.	self assert: cookie rfc2965String = 'ikuser="1234"; Version=1'.		cookie expiry: expiry.	cookie maxAge: 3600.	self assert: cookie oldNetscapeString = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT'.	self assert: cookie rfc2109String = 'ikuser="1234"; Max-Age="3600"; Version=1'.	self assert: cookie rfc2965String = 'ikuser="1234"; Max-Age="3600"; Version=1'.		" #('C3' 'A4' 'C3' 'BC')"	cookie path: '/seaside/', (String with: (Character codePoint: 228) with: (Character codePoint: 252)).	self assert: cookie oldNetscapeString = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; path=/seaside/%C3%A4%C3%BC'.	self assert: cookie rfc2109String = 'ikuser="1234"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; Version=1'.	self assert: cookie rfc2965String = 'ikuser="1234"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; Version=1'.		cookie value: nil.	self assert: cookie oldNetscapeString = 'ikuser=; expires=Wed, 21-Nov-2007 12:42:48 GMT; path=/seaside/%C3%A4%C3%BC'.	self assert: cookie rfc2109String = 'ikuser=""; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; Version=1'.	self assert: cookie rfc2965String = 'ikuser=""; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; Version=1'.		cookie value: '1234'.	cookie domain: 'www.example.com'.	cookie ports: (Array with: 80 with: 433).	self assert: cookie oldNetscapeString = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; path=/seaside/%C3%A4%C3%BC; domain=www.example.com'.	self assert: cookie rfc2109String = 'ikuser="1234"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; domain="www.example.com"; Version=1'.	self assert: cookie rfc2965String = 'ikuser="1234"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; Port="80,433"; domain="www.example.com"; Version=1'.		cookie discard: true.	cookie secure: true.	cookie httpOnly: true.	self assert: cookie oldNetscapeString = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; path=/seaside/%C3%A4%C3%BC; domain=www.example.com; Secure; HttpOnly'.	self assert: cookie rfc2109String = 'ikuser="1234"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; domain="www.example.com"; Secure; HttpOnly; Version=1'.	self assert: cookie rfc2965String = 'ikuser="1234"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; Port="80,433"; domain="www.example.com"; Secure; HttpOnly; Discard; Version=1'.		cookie comment: 'FIS Heer username'.	cookie commentUrl: 'http://www.example.com/session-cookie.html'.	self assert: cookie oldNetscapeString = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; path=/seaside/%C3%A4%C3%BC; domain=www.example.com; Secure; HttpOnly'.	self assert: cookie rfc2109String = 'ikuser="1234"; Comment="FIS Heer username"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; domain="www.example.com"; Secure; HttpOnly; Version=1'.	self assert: cookie rfc2965String = 'ikuser="1234"; Comment="FIS Heer username"; CommentURL="http://www.example.com/session-cookie.html"; Max-Age="3600"; path="/seaside/%C3%A4%C3%BC"; Port="80,433"; domain="www.example.com"; Secure; HttpOnly; Discard; Version=1'</body></methods><methods><class-id>Seaside.WAUtf8CookieTest</class-id> <category>configuration</category><body package="Seaside-Tests-UTF8">createCodec	^ GRCodec forEncoding: 'utf-8'</body></methods><methods><class-id>Seaside.WAUtf8FileTest</class-id> <category>running</category><body package="Seaside-Tests-UTF8">setUp	file := WAFile new</body></methods><methods><class-id>Seaside.WAUtf8FileTest</class-id> <category>tests</category><body package="Seaside-Tests-UTF8">testContents	file contents: #(83 195 169 195 164 115 195 174 100 195 169) asByteArray.	self assert: file rawContents = #(83 195 169 195 164 115 195 174 100 195 169) asByteArray.	self assert: (file contentsDecodedUsing: 'ISO-8859-1') = self brokenUnicodeString.	self assert: (file contentsDecodedUsing: 'UTF-8') = self unicodeString</body><body package="Seaside-Tests-UTF8">testContentsDecoded	file contents:  #(83 195 169 195 164 115 195 174 100 195 169) asByteArray.	self should: [ file contentsDecoded ] raise: WAIllegalStateException.	file contentType: 'text/plain'.	self should: [ file contentsDecoded ] raise: WAIllegalStateException.	file contentType: 'text/plain; charset=utf-8' seasideMimeType.	self assert: file contentsDecoded = self unicodeString</body></methods><methods><class-id>Seaside.WAUtf8FileTest</class-id> <category>private</category><body package="Seaside-Tests-UTF8">asString: aCollectionOfIntegers	^ String streamContents: [ :stream |		aCollectionOfIntegers do: [ :each |			stream nextPut: (Character codePoint: each) ] ]</body><body package="Seaside-Tests-UTF8">brokenUnicodeString	^ self asString: #(83 195 169 195 164 115 195 174 100 195 169)</body><body package="Seaside-Tests-UTF8">unicodeString	^ self asString: #(83 233 228 115 238 100 233)</body></methods><methods><class-id>Seaside.WABufferedResponseTest</class-id> <category>*seaside-tests-utf8</category><body package="Seaside-Tests-UTF8">asString: aCollectionOfIntegers	^ String streamContents: [ :stream |		aCollectionOfIntegers do: [ :each |			stream nextPut: (Character codePoint: each) ] ]</body><body package="Seaside-Tests-UTF8">decodedUnicodeString	^ self asString: #(252 116 102 45 56)</body><body package="Seaside-Tests-UTF8">encodedUnicodeString	^ self asString: #(195 188 116 102 45 56)</body><body package="Seaside-Tests-UTF8">testResetKeepsStreamKind	| resetPossible |	response := WABufferedResponse		on: ((GRCodec forEncoding: 'utf-8')			encoderFor: (GRPlatform current writeCharacterStreamOn: String new)).	resetPossible := self response		status: WAResponse statusNotFound;		attachmentWithFileName: 'upload.csv';		nextPutAll: 'the wrong content';		resetIfPossible.	self assert: resetPossible.	self response		status: WAResponse statusImATeapot;		headerAt: 'X-The-Header' put: 'the value';		nextPutAll: self decodedUnicodeString.	self assertLines: (Array		with: 'HTTP/1.1 418 I''m a teapot'		with: 'X-The-Header: the value'		with: 'Content-Length: 6'		with: ''		with: self encodedUnicodeString)</body><body package="Seaside-Tests-UTF8">unicodeString	^ self asString: 'Ã¼tf-8'</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-utf8</category><body package="Seaside-Tests-UTF8">seasideTestsUtf8	^ self new		name: 'Seaside-Tests-UTF8';		description: 'Unit tests for UTF8 support.';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>WAContextTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class><class><name>WABufferedResponseTest</name><environment>Seaside</environment><super>Seaside.WAResponseTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-HTTP</category><attributes><package>Seaside-Tests-Core</package></attributes></class></st-source>