<?xml version="1.0"?><st-source><!-- Name: Seaside-CanvasComment: The mechanism of choice to generate valid and reusable XHTML markup.DbIdentifier: bear73DbTrace: 492578DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.135 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-VisualWorks-Core' ''))Id: 800ee6ef-0dfc-42db-bc18-6b221dbdb955Namespace: SeasidePackageName: Seaside-CanvasParcel: #('Seaside-Canvas')ParcelName: Seaside-CanvasPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Core' '') #('Seaside-VisualWorks-Core' ''))PrintStringCache: (3.2.0 - JohanBrichau.135 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Canvas-JohanBrichau.135.mczVersion: 3.2.0 - JohanBrichau.135 1Date: 3:31:27 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:27 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WABrush</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas parent closed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WABrush</class-id><body>I represent a brush to be used on a *WACanvas*.Instance Variables	canvas:		The canvas instance I am used with.	parent:		The parent brush I am used within.	closed:		Wether I have been closed/flushed yet.</body></comment><class><name>WATagBrush</name><environment>Seaside</environment><super>Seaside.WABrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATagBrush</class-id><body>This is the superclass for all XML element classes. Its main additions are- element name (#tag)- attributes (instance of WAHtmlAttributes)- common events (onXXX), this is a hack and would better be solved with traits</body></comment><class><name>WADetailsTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WADetailsTag</class-id><body>The details element represents additional information or controls which the user can obtain on demand.The first element child of a details element, if it is a legend element, represents the summary of the details.If the first element is not a legend element, the UA should provide its own legend (e.g. "Details"). </body></comment><class><name>WAFormInputTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAFormInputTag</class-id><body>The &lt;input&gt; tag defines the start of an input field where the user can enter data.</body></comment><class><name>WAAbstractTextAreaTag</name><environment>Seaside</environment><super>Seaside.WAFormInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAAbstractTextAreaTag</class-id><body>An abstract class to describe the HTML elements that allow the user to enter text.</body></comment><class><name>WATextAreaTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATextAreaTag</class-id><body>I am a multi line text input widget. See WAInputTest &gt;&gt; #renderTextAreaWithExampleOn: for examples.</body></comment><class><name>WACollectionTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>list selected labelBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WACollectionTag</class-id><body>This element allows the use to select one (in single selection mode) or multiple (in single selection mode) elements. Multiple selection can be triggered with #beMultiple, single selection can be triggered with #beSingle .Default is single selection.The general idea is that you pass the collection of options to #list: and use #labels: to customize their rendering. The selected option(s) can be set with: #selected:.This whole class is kind of an awkward hack, but nobody needs MI anyway. You can always get a way with composition and delegation</body></comment><class><name>WAListTag</name><environment>Seaside</environment><super>Seaside.WACollectionTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callbackBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAListTag</class-id><body>Abstract base class for ordered and unordered list tags.Ordered and unordered lists are rendered in an identical manner except that visual user agents number ordered list items. User agents may present those numbers in a variety of ways. Unordered list items are not numbered.Both types of lists are made up of sequences of list items defined by the LI element (whose end tag may be omitted).Lists may also be nested.</body></comment><class><name>WATextInputTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATextInputTag</class-id><body>I am a single line text input widget. See WAInputTest &gt;&gt; #renderTextInputWithExampleOn: for examples.</body></comment><class><name>WAPasswordInputTag</name><environment>Seaside</environment><super>Seaside.WATextInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAPasswordInputTag</class-id><body>I am a password input widget that does not display the entered text.</body></comment><class><name>WALabelTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WALabelTag</class-id><body>Defines a label to a control. If you click the text within the label element,  it is supposed to toggle the control.</body></comment><class><name>WAOptionGroupTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAOptionGroupTag</class-id><body>The OPTGROUP element allows authors to group choices logically. This is particularly helpful when the user must choose from a long list of options; groups of related choices are easier to grasp and remember than a single long list of options.It has crappy browser support and noone as ever used it. See WAInputTest &gt;&gt; #renderOptionGroupOn: for examples.</body></comment><class><name>WATimeTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATimeTag</class-id><body>http://www.whatwg.org/specs/web-apps/current-work/#the-timenot known browser supportThe time element represents a date and/or a time.The datetime attribute, if present, must contain a date or time string that identifies the date or time being specified.If the datetime attribute is not present, then the date or time must be specified in the content of the element, such that parsing the element's textContent according to the rules for parsing date or time strings in content successfully extracts a date or time. see RFC 3339:http://www.ietf.org/rfc/rfc3339.txt</body></comment><class><name>WAColorInputTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WASteppedTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WADateTimeInputTag</name><environment>Seaside</environment><super>Seaside.WASteppedTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WADateTimeInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputA date and time (year, month, day, hour, minute, second, fractions of a second) encoded according to ISO 8601 [ISO8601] with the time zone set to UTC: four or more digits (0 to 9) representing the year, a hyphen (U+002D), two digits for the month, a hyphen, two digits for the day, a literal "T", two digits for the hour, a colon (U+003A), two digits for the minute, optionally a colon and two digits for the second, optionally (if the seconds are present) a period (U+002E) and one or more digits for the fraction of a second, and finally a mandatory literal "Z". All the numbers must be in base ten and zero-padded if necessary. If the seconds are omitted, they must be assumed to be zero. If the fraction is omitted, it must be assumed to be zero as well. For instance: 1995-12-31T23:59:59.99Z or, representing the time 10 milliseconds later, 1996-01-01T00:00Z. The step attribute specifies the precision in seconds, defaulting to 60 (one minute).User agents are expected to show an appropriate widget. UAs may display the time in whatever time zone is appropriate for the user, but should be clear to the user that the time is globally defined, not time-zone dependent. The submitted date and time must be in the UTC time zone.</body></comment><class><name>WARadioButtonTag</name><environment>Seaside</environment><super>Seaside.WAFormInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>group </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WARadioButtonTag</class-id><body>Radio buttons work like checkboxes. The difference is that radio buttons, when sharing a single control name, are exclusive. This means that only one of those radio buttons can be checked, and when it's checked, the rest are automatically unchecked.Radio buttons must be created through a radio group. The callback is only called for the selected option.| group |group := html radioGroup.group radioButton	selected: aBoolean;	callback: [ self someThing ]</body></comment><class><name>WABasicFormTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WABasicFormTag</class-id><body>Acts as a basic form, with no defaultAction, and no holding of _s and _c values.</body></comment><class><name>WARubyTextTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WARubyTextTag</class-id><body>This element works with the &lt;ruby&gt; element. The text following &lt;rt&gt; appears as a note to the base text displayed by the &lt;ruby&gt; element.</body></comment><class><name>WARadioGroup</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas key values selected </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WARadioGroup</class-id><body>A WARadioGroup is a container for several related radio buttons. It must be used to create radio buttons.Example:| group |group := html radioGroup.group radioButton	selected: aBoolean;	callback: [ self someThing ].</body></comment><class><name>WATableCellTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WATableColumnGroupTag</name><environment>Seaside</environment><super>Seaside.WATableCellTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATableColumnGroupTag</class-id><body>WATableColumnGroupTag groups a set of col elements. It allows you to group several semantically related columns together.</body></comment><class><name>WATableColumnTag</name><environment>Seaside</environment><super>Seaside.WATableColumnGroupTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATableColumnTag</class-id><body>WATableColumnTag elements define the alignment properties for cells in one or more columns.</body></comment><class><name>WAMenuTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAMenuTag</class-id><body>no known browser supportThe menu element represents a list of commands.The type attribute indicates the kind of menu. It must have either the value popup (to declare a context menu) or the value toolbar (to define a tool bar). The attribute may also be omitted, to indicate that the element is merely a list of commands that is neither declaring a context menu nor defining a tool bar.If a menu element has a type attribute with the value popup, then it represents the commands of a context menu, and the user can only interact with the commands if that context menu is activated.If a menu element has a type attribute with the value toolbar, then it represents a list of active commands that the user can immediately interact with.Otherwise, if a menu element has no type attribute, or if has a type attribute with a value other than popup or toolbar, then it either represents an unordered list of items (each represented by an li element), each of which represents a command that the user may perform or activate, or, if the element has no li element children, a paragraph describing available commands.The label attribute gives the label of the menu. It is used by user agents to display nested menus in the UI. For example, a context menu containing another menu would use the nested menu's label attribute for the submenu's menu label.The autosubmit attribute is a boolean attribute that, if present, indicates that selections made to form controls in this menu are to result in the control's form being immediately submitted. </body></comment><class><name>WAEventSourceTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAEventSourceTag</class-id><body>The event-source element represents a target for events generated by a remote server.The src attribute, if specified, must give a URI (or IRI) pointing to a resource that uses the application/x-dom-event-stream format.When the element is inserted into the document, if it has the src attribute specified, the user agent must act as if the addEventSource() method on the event-source element had been invoked with the URI resulting from resolving the src attribute's value to an absolute URI.While the element is in a document, if its src attribute is mutated, the user agent must act as if first the removeEventSource() method on the event-source element had been invoked with the URI resulting from resolving the old value of the attribute to an absolute URI, and then as if the addEventSource() method on the element had been invoked with the URI resulting from resolving the new value of the src attribute to an absolute URI.When the element is removed from the document, if it has the src attribute specified, or, when the src attribute is about to be removed, the user agent must act as if the removeEventSource() method on the event-source element had been invoked with the URI resulting from resolving the src attribute's value to an absolute URI.There can be more than one event-source element per document, but authors should take care to avoid opening multiple connections to the same server as HTTP recommends a limit to the number of simultaneous connections that a user agent can open per server.The src DOM attribute must reflect the content attribute of the same name. </body></comment><class><name>WASelectTag</name><environment>Seaside</environment><super>Seaside.WACollectionTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>enabledBlock isOptional optionalLabel titleBlock values </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WASelectTag</class-id><body>This element allows the use to select one (in single selection mode) or multiple (in single selection mode) elements. Default is single selection. Multiple selection can be triggered with #beMultiple.Single selection is in general a drop-down list, so make sure the list of options is not too big.Multiple selection has in general crappy browser support and a list of checkboxes is in general the better option.If in single selection mode and you want enable "no selection" see #beOptional.If you absolutely need to you can render the options yourself with 'html option' inside #with:Make sure to check the superclass for more methods.See WAInputTest &gt;&gt; #renderSingleSelectionOn: and WAInputTest &gt;&gt; #renderMultiSelectionOn: for examples.</body></comment><class><name>WAMultiSelectTag</name><environment>Seaside</environment><super>Seaside.WASelectTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callback </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAMultiSelectTag</class-id><body>See superclass.</body></comment><class><name>WAFileUploadTag</name><environment>Seaside</environment><super>Seaside.WAFormInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAFileUploadTag</class-id><body>I represent a file input element (&lt;input type="file"). My callbacks will be evaluated with an instance of WAFile as an argument.</body></comment><class><name>WACompound</name><environment>Seaside</environment><super>Seaside.WABrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callbackBlock value id properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WACompound</class-id><body>I am the superclass for stuff that is not html element but you still want to access via the canvas API.</body></comment><class><name>WADateInput</name><environment>Seaside</environment><super>Seaside.WACompound</super><private>false</private><indexed-type>none</indexed-type><inst-vars>options month day year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WADateInput</class-id><body>I am a composition of three input fields that allow the user to select year, month and day. #options: can be used to toggle them individually.The argument for my callback blocks is an instance of Date.See WADateTimeTest &gt;&gt; #renderDateTimeOn:</body></comment><class><name>WAMediaElementTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAMediaElementTag</class-id><body>WAMediaElementTag is an abstract class for all the media elements providing common media attributes.See: http://www.w3.org/TR/html5/video.html#media-element</body></comment><class><name>WAAudioTag</name><environment>Seaside</environment><super>Seaside.WAMediaElementTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAAudioTag</class-id><body>no known browser support, might require an open codec like Ogg Vorbis, might first appear in Opera and MozillaAn audio element represents a sound or audio stream.Content may be provided inside the audio element so that older Web browsers, which do not support audio, can display text to the user informing them of how to access the audio contents. User agents should not show this fallback content to the user. </body></comment><class><name>WACanvas</name><environment>Seaside</environment><super>Seaside.WARenderer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentBrush parentBrush </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WACanvas</class-id><body>This is the superclass of all canvas. It's a rendering interface that generates brushes (see WABrush).Subclass WAXmlCanvas, if you want to generate an XML dialect.</body></comment><class><name>WATagCanvas</name><environment>Seaside</environment><super>Seaside.WACanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WAHtmlCanvas</name><environment>Seaside</environment><super>Seaside.WATagCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAHtmlCanvas</class-id><body>I'm a canvas fro building HTML.</body></comment><class><name>WAClosedRangeTag</name><environment>Seaside</environment><super>Seaside.WASteppedTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAClosedRangeTag</class-id><body>abstract class for all the elements that have a step, min and max attribute</body></comment><class><name>WANumberInputTag</name><environment>Seaside</environment><super>Seaside.WAClosedRangeTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WANumberInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputA numerical value. The step attribute specifies the precision, defaulting to 1.Numbers must be submitted as a significand followed by an optional exponent. The significand is an optional minus sign (U+002D, "-"), an integer, and optionally a decimal point (U+002E, ".") and an integer representing the fractional part. The exponent is a lowercase literal letter "e", an optional minus sign, and an integer representing the index of a power of ten with which to multiply the significand to get the actual number. Integers are one or more decimal digits. If the exponent part is omitted its index of a power of ten must be assumed to be zero.For example, negative-root-two, to 32 significant figures, would be -1.4142135623730950488016887242097e0, the radius of the earth given in furlongs, to an arbitrary precision, would be 3.17e4, and the answer to the life, the universe and everything could be any of (amongst others) 42, 0042.000, 42e0, 4.2e1, or 420e-1.This format is designed to be compatible with scanf(3)'s %f format, ECMAScript's parseFloat, and similar parsers while being easier to parse than some other floating point syntaxes that are also compatible with those parsers.The strings +0, 0e+0, and +1e+3 are all invalid numbers (the minus sign cannot be replaced by a plus sign for non-negative numbers, it must simply be omitted). Similarly, .42e2 is invalid (there must be at least one digit before the decimal point). UAs must not submit numbers in invalid formats (whatever the user might enter).The submission format is not intended to be the format seen and used by users. UAs may use whatever format and UI is appropriate for user interaction; the description above is simply the submission format.</body></comment><class><name>WATableTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATableTag</class-id><body>The &lt;table&gt; tag defines a table. Inside a &lt;table&gt; tag you can put table headers, table rows, table cells, and other tables.</body></comment><class><name>WABreakTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WABreakTag</class-id><body>The BR element forcibly breaks (ends) the current line of text. Authors are advised to use style sheets to control text flow around floating images and other objects.Prohibiting a line break Sometimes authors may want to prevent a line break from occurring between two words. The &amp;nbsp; entity (&amp;#160; or &amp;#xA0;) acts as a space where user agents should not cause a line break.</body></comment><class><name>WAButtonTag</name><environment>Seaside</environment><super>Seaside.WAFormInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAButtonTag</class-id><body>Buttons created with the BUTTON element function just like buttons created with the INPUT element, but they offer richer rendering possibilities: the BUTTON element may have content. For example, a BUTTON element that contains an image functions like and may resemble an INPUT element whose type is set to "image", but the BUTTON element type allows content.</body></comment><class><name>WAHorizontalRuleTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAHorizontalRuleTag</class-id><body>The HR element causes a horizontal rule to be rendered by visual user agents.The amount of vertical space inserted between a rule and the content that surrounds it depends on the user agent.</body></comment><class><name>WACanvasTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WACanvasTag</class-id><body>supported on:- Firefox 1.5- Safari 2- Opera 9http://www.whatwg.org/specs/web-apps/current-work/#the-canvashttp://developer.mozilla.org/en/docs/Canvas_tutorial</body></comment><class><name>WAScriptTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAScriptTag</class-id><body>Defines a script, such as a JavaScript.</body></comment><class><name>WATelephoneInputTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WAHiddenInputTag</name><environment>Seaside</environment><super>Seaside.WAFormInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAHiddenInputTag</class-id><body>Authors may create controls that are not rendered but whose values are submitted with a form. Authors generally use this control type to store information between client/server exchanges that would otherwise be lost due to the stateless nature of HTTP (see [RFC2616]). The INPUT element is used to create a hidden control.</body></comment><class><name>WADateTimeLocalInputTag</name><environment>Seaside</environment><super>Seaside.WASteppedTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WADateTimeLocalInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputA date and time (year, month, day, hour, minute, second, fractions of a second) encoded according to ISO 8601 [ISO8601], with no time zone information: four or more digits (0 to 9) representing the year, a hyphen (U+002D), two digits for the month, a hyphen, two digits for the day, a literal "T", two digits for the hour, a colon (U+003A), two digits for the minute, optionally a colon and two digits for the second, and optionally (if the seconds are present) a period (U+002E) and one or more digits for the fraction of a second. All the numbers must be in base ten and zero-padded if necessary. If the seconds are omitted, they must be assumed to be zero. If the fraction is omitted, it must be assumed to be zero as well. For instance: 1995-12-31T23:59:59.99 or, representing the time 10 milliseconds later, 1996-01-01T00:00. The step attribute specifies the precision in seconds, defaulting to 60 (one minute).</body></comment><class><name>WAVideoTag</name><environment>Seaside</environment><super>Seaside.WAMediaElementTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAVideoTag</class-id><body>Supported only on experimental Operahttp://people.opera.com/howcome/2007/video/A video element represents a video or movie, with an alternate representation given by its contents.http://www.whatwg.org/specs/web-apps/current-work/#videohttp://lists.whatwg.org/pipermail/whatwg-whatwg.org/attachments/20070228/6a0cdddc/attachment.txt</body></comment><class><name>WAIframeTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rootBlock url </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAIframeTag</class-id><body>The IFRAME element allows authors to insert a frame within a block of text. Inserting an inline frame within a section of text is much like inserting an object via the OBJECT element: they both allow you to insert an HTML document in the middle of another, they may both be aligned with surrounding text, etc. The information to be inserted inline is designated by the src attribute of this element. The contents of the IFRAME element, on the other hand, should only be displayed by user agents that do not support frames or are configured not to display frames.Inline frames may not be resized.</body></comment><class><name>WACommandTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WACommandTag</class-id><body>The command element represents a command that the user can invoke.</body></comment><class><name>WASubmitButtonTag</name><environment>Seaside</environment><super>Seaside.WAFormInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WASubmitButtonTag</class-id><body>The submit type creates a button. When a submit button is pressed it automatically submits the form.</body></comment><class><name>WACancelButtonTag</name><environment>Seaside</environment><super>Seaside.WASubmitButtonTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WASearchInputTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WASearchInputTag</class-id><body>supported on:- Safari 1.3 and 2.0not (yet) part of HTML5graceful degeneration to text inputhttp://weblogs.mozillazine.org/hyatt/archives/2004_07.html#005890</body></comment><class><name>WAFieldSetTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>legend </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAFieldSetTag</class-id><body>The FIELDSET element allows authors to group thematically related controls and labels. Grouping controls makes it easier for users to understand their purpose while simultaneously facilitating tabbing navigation for visual user agents and speech navigation for speech-oriented user agents. The proper use of this element makes documents more accessible.The LEGEND element allows authors to assign a caption to a FIELDSET. The legend improves accessibility when the FIELDSET is rendered non-visually.</body></comment><class><name>WAMeterTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAMeterTag</class-id><body>No known browser support.The meter element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate.This is also known as a gauge.The meter element should not be used to indicate progress (as in a progress bar). For that role, HTML provides a separate progress element.There are six attributes that determine the semantics of the gauge represented by the element.The min attribute specifies the lower bound of the range, and the max attribute specifies the upper bound. The value attribute specifies the value to have the gauge indicate as the "measured" value.The other three attributes can be used to segment the gauge's range into "low", "medium", and "high" parts, and to indicate which part of the gauge is the "optimum" part. The low attribute specifies the range that is considered to be the "low" part, and the high attribute specifies the range that is considered to be the "high" part. The optimum attribute gives the position that is "optimum"; if that is higher than the "high" value then this indicates that the higher the value, the better; if it's lower than the "low" mark then it indicates that lower values are better, and naturally if it is in between then it indicates that neither high nor low values are good.The value, min, low, high, max, and optimum attributes are all optional. When present, they must have values that are valid floating point numbers.The following examples all represent a measurement of three quarters (of the maximum of whatever is being measured):&lt;meter&gt;75%&lt;/meter&gt;&lt;meter&gt;750\u2030&lt;/meter&gt;&lt;meter&gt;3/4&lt;/meter&gt;&lt;meter&gt;6 blocks used (out of 8 total)&lt;/meter&gt;&lt;meter&gt;max: 100; current: 75&lt;/meter&gt;&lt;meter&gt;&lt;object data="graph75.png"&gt;0.75&lt;/object&gt;&lt;/meter&gt;&lt;meter min="0" max="100" value="75"&gt;&lt;/meter&gt;</body></comment><class><name>WAUnorderedListTag</name><environment>Seaside</environment><super>Seaside.WAListTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAUnorderedListTag</class-id><body>See superclass comment.</body></comment><class><name>WAWeekInputTag</name><environment>Seaside</environment><super>Seaside.WASteppedTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAWeekInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputA date consisting of a year and a week number encoded according to ISO 8601 [ISO8601]: four or more digits (0 to 9) representing the year, a hyphen (U+002D), a literal "W", and two digits for the week, zero-padded if necessary. All the numbers must be in base ten. The week number must be a number greater than or equal to 01. Week 01 of a given year is the week containing the 4th of January; weeks start on Monday. For instance: 2005-W52 is the week that ends on Sunday the first of January, 2006. The step attribute specifies the precision in weeks, defaulting to 1. This type is used most frequently for dates in European industry.</body></comment><class><name>WAXmlCanvas</name><environment>Seaside</environment><super>Seaside.WATagCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAXmlCanvas</class-id><body>I'm an abstract canvas base class for building canvas for custom XML dialects.</body></comment><class><name>WAGenericTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tag </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAGenericTag</class-id><body>A WAGenericTag is the class for all tags that do not have a class of their own.Instance Variables	tag:		&lt;String&gt;tag	- the name of the tag</body></comment><class><name>WAOutputTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAOutputTag</class-id><body>The output element represents the result of a calculation.</body></comment><class><name>WAEmailInputTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAEmailInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputAn e-mail address, following the format of the addr-spec  token defined in RFC 2822 section 3.4.1 [RFC2822], but excluding the CFWS  subtoken everywhere, and excluding the FWS subtoken everywhere except in the quoted-string subtoken. UAs could, for example, offer e-mail addresses from the user's address book. (See below for notes on IDN.)</body></comment><class><name>WATimeInputTag</name><environment>Seaside</environment><super>Seaside.WAClosedRangeTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATimeInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputA time (hour, minute, seconds, fractional seconds) encoded according to ISO 8601 [ISO8601] with no time zone: two digits (0-9) for the hour, a colon (U+003A), two digits for the minute, optionally a colon and two digits for the second, and optionally (if the seconds are present) a period (U+002E) and one or more digits for the fraction of a second. All the numbers must be in base ten and zero-padded if necessary. If the seconds are omitted, they must be assumed to be zero. If the fraction is omitted, it must be assumed to be zero as well. For instance: 23:59:00.00000 or 00:00:05. The step attribute specifies the precision in seconds, defaulting to 60. Times must be greater than or equal to 0 and must be less than 24 hours, in addition to any tighter restrictions placed on the control by the min and max attributes. Note that this type is not an elapsed time data type.User agents are expected to show an appropriate widget, such as a clock. UAs should make it clear to the user that the time does not carry any time zone information. </body></comment><class><name>WAOptionTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAOptionTag</class-id><body>The option element defines an option in a drop-down list. </body></comment><class><name>WAHeadingTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>level </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAHeadingTag</class-id><body>A heading element briefly describes the topic of the section it introduces. Heading information may be used by user agents, for example, to construct a table of contents for a document automatically.There are six levels of headings in HTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones.</body></comment><class><name>WADatalistTag</name><environment>Seaside</environment><super>Seaside.WACollectionTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>valueBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WADatalistTag</class-id><body>datalist together with the a new list attribute for input is used to make comboboxes:&lt;input list=browsers&gt;&lt;datalist id=browsers&gt; &lt;option value="Safari"&gt; &lt;option value="Internet Explorer"&gt; &lt;option value="Opera"&gt; &lt;option value="Firefox"&gt;&lt;/datalist&gt;</body></comment><class><name>WAKeyGeneratorTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAKeyGeneratorTag</class-id><body>A WAKeygenTag is allows the user agent to generate a secure key and submits the public key.Supported by:    * Netscape 3, 4, 6, 7    * Mozilla 1    * Firefox 1    * Opera 3, 4, 5, 6, 7, 8    * Safari 1 === Links for more info ===http://lists.whatwg.org/pipermail/whatwg-whatwg.org/attachments/20080714/07ea5534/attachment.txthttp://wp.netscape.com/eng/security/comm4-keygen.htmlhttp://wp.netscape.com/eng/security/ca-interface.htmlhttp://webdesign.about.com/od/htmltags/p/bltags_keygen.htmhttp://eskimonorth.com/~bloo/indexdot/html/tagpages/k/keygen.htmhttp://web.archive.org/web/20040710102131/devedge.netscape.com/library/manuals/1998/htmlguide/http://64.233.183.104/search?q=cache:TExfCslqOcwJ:www.html4newbies.com/Keygen.phphttp://www.di.unito.it/~rabser/ssleay/x509_netscape.htmlhttp://msdn.microsoft.com/en-us/library/cc214558.aspx - Something that may look like the MS version of the keygen attribute</body></comment><class><name>WAFormTag</name><environment>Seaside</environment><super>Seaside.WABasicFormTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>defaultAction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAFormTag</class-id><body>The FORM element acts as a container for input elements and buttons.Evaluation order:The input fields callbacks will be evaluated in the order theyappear in the XHTML. Buttons will always be evaluated last, no matterwhere they are positioned.</body></comment><class><name>WAOptionalBreakTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WATrackTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WAUrlInputTag</name><environment>Seaside</environment><super>Seaside.WAAbstractTextAreaTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAUrlInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputAn IRI, as defined by [RFC3987] (the IRI token, defined in RFC 3987 section 2.2). UAs could, for example, offer the user URIs from his bookmarks. (See below for notes on IDN.) The value is called url (as opposed to iri or uri) for consistency with CSS syntax and because it is generally felt authors are more familiar with the term "URL" than the other, more technically correct terms.</body></comment><class><name>WATableDataTag</name><environment>Seaside</environment><super>Seaside.WATableCellTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATableDataTag</class-id><body>The WATableDataTag defines a cell in a table.</body></comment><class><name>WAMonthInputTag</name><environment>Seaside</environment><super>Seaside.WASteppedTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAMonthInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputA date consisting of a year and a month encoded according to ISO 8601 [ISO8601]: four or more digits (0 to 9) representing the year, a hyphen (U+002D), and two digits for the month, zero-padded if necessary. All the numbers must be in base ten. For instance: 1995-12. The step  attribute specifies the precision in months, defaulting to 1. This type is used most frequently for credit card expiry dates.</body></comment><class><name>WAEmbedTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WAImageButtonTag</name><environment>Seaside</environment><super>Seaside.WASubmitButtonTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAImageButtonTag</class-id><body>Creates a graphical submit button. The value of the src attribute specifies the URI of the image that will decorate the button. For accessibility reasons, authors should provide alternate text for the image via the alt attribute. When a pointing device is used to click on the image, the form is submitted and the click coordinates passed to the server. The x value is measured in pixels from the left of the image, and the y value in pixels from the top of the image. The submitted data includes name.x=x-value and name.y=y-value where "name" is the value of the name attribute, and x-value and y-value are the x and y coordinate values, respectively.</body></comment><class><name>WADateInputTag</name><environment>Seaside</environment><super>Seaside.WASteppedTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WADateInputTag</class-id><body>supported on:- Opera 9graceful degeneration to text inputA date (year, month, day) encoded according to ISO 8601 [ISO8601]: four or more digits (0 to 9) representing the year, a hyphen (U+002D), two digits for the month, a hyphen, and two digits for the day. All the numbers must be in base ten and zero padded if necessary. For instance: 1995-12-31. The step attribute specifies the precision in days, defaulting to 1. User agents are expected to show an appropriate widget, such as a datepicker.</body></comment><class><name>WAAnchorTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>url </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAAnchorTag</class-id><body>I'm the class responsible for adding anchors (links) to your webpage. There are multiple ways of using me.1. In the following case, the method #doSomethingOnClick will be sent to self when the user click on the anchor 'Click here to do something':	html anchor		callback: [ self doSomethingOnClick ];		with: 'Click here to do something'.		The following code is a shortcut to create an anchor. The executed action is #doSomethingOnClick and the text is 'Do Something On Click':	html anchor		on: #doSomethingOnClick of: self2. In the following case, a link to an external resource will be generated:	html anchor		url: 'http://www.seaside.st';		with: 'Visit the Seaside'</body></comment><class><name>WAImageMapTag</name><environment>Seaside</environment><super>Seaside.WAAnchorTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAImageMapTag</class-id><body>A WAImageMapTag is supposed to be used like this:	html map		callback: [ :point | self click: point ];		with: [ html image url: 'foo.gif' ]			An example can be found in WAScreenshot.Technical:http://www.w3.org/TR/html4/struct/objects.html#include-mapsThe location clicked is passed to the server as follows. The user agent derives a new URI from the URI specified by the href attribute of the A element, by appending `?' followed by the x and y coordinates, separated by a comma. The link is then followed using the new URI. For instance, in the given example, if the user clicks at the location x=10, y=27 then the derived URI is "http://www.acme.com/cgi-bin/competition?10,27".</body></comment><class><name>WATableHeadingTag</name><environment>Seaside</environment><super>Seaside.WATableDataTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATableHeadingTag</class-id><body>The WATableHeadingTag defines a table header cell in a table. The text within the th element usually renders in bold.</body></comment><class><name>WASourceTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WASourceTag</class-id><body>The source element allows authors to specify multiple media resources for media elements.The source attribute must be present. Either the type  attribute, the media attribute or both, must be specified, unless this is the last source element child of the parent element.</body></comment><class><name>WAOrderedListTag</name><environment>Seaside</environment><super>Seaside.WAListTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAOrderedListTag</class-id><body>See superclass comment.</body></comment><class><name>WAPopupAnchorTag</name><environment>Seaside</environment><super>Seaside.WAAnchorTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>windowTitle features </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAPopupAnchorTag</class-id><body>I am used to create a link that opens in a new window. A name can be specified using #name: and many features can be configured. Note, that not all features are supported on all web browser platforms. If Javascript is disabled the link will behave like any other anchor.Most of the time a popup-anchor is created like this:	html popupAnchor		callback: [ self session presenter			show: WACounter new ];		with: 'Open the counter within a new window'This code creates a new render-loop and displays a new instance of WACounter within the new browser window.		</body></comment><class><name>WAObjectTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAObjectTag</class-id><body>Defines an embedded object. Use this element to add multimedia to your XHTML page.This element allows you to specify the data and parameters for objects inserted into HTML documents, and the code that can be used to display/manipulate that data.</body></comment><class><name>WARangeInputTag</name><environment>Seaside</environment><super>Seaside.WAClosedRangeTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WARangeInputTag</class-id><body>supported on:- Safari 2.0 (slider)graceful degeneration to text inputFor this type, step defaults to 1, min defaults to 0, max defaults to 100, and value  defaults to the min value.Volume controls and brightness controls would be good examples of "range" data controls.</body></comment><class><name>WAProgressTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAProgressTag</class-id><body>No known browser support.The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed.There are two attributes that determine the current task completion represented by the element.The value attribute specifies how much of the task has been completed, and the max attribute specifies how much work the task requires in total. The units are arbitrary and not specified.Instead of using the attributes, authors are recommended to simply include the current value and the maximum value inline as text inside the element.</body></comment><class><name>WAEditTag</name><environment>Seaside</environment><super>Seaside.WAGenericTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAEditTag</class-id><body>INS and DEL are used to markup sections of the document that have been inserted or deleted with respect to a different version of a document (e.g., in draft legislation where lawmakers need to view the changes).These two elements are unusual for HTML in that they may serve as either block-level or inline elements (but not both). They may contain one or more words within a paragraph or contain one or more block-level elements such as paragraphs, lists and tables.This example could be from a bill to change the legislation for how many deputies a County Sheriff can employ from 3 to 5.&lt;P&gt;  A Sheriff can employ &lt;DEL&gt;3&lt;/DEL&gt;&lt;INS&gt;5&lt;/INS&gt; deputies.&lt;/P&gt;The INS and DEL elements must not contain block-level content when these elements behave as inline elements.</body></comment><class><name>WAImageTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAImageTag</class-id><body>The IMG element embeds an image in the current document at the location of the element's definition. The IMG element has no content; it is usually replaced inline by the image designated by the src attribute, the exception being for left or right-aligned images that are "floated" out of line.The alt attribute specifies alternate text that is rendered when the image cannot be displayed (see below for information on how to specify alternate text ). User agents must render alternate text when they cannot support images, they cannot support a certain image type or when they are configured not to display images.Seaside per default sets the alternate text to an empty string. This helps validation of the page.</body></comment><class><name>WATimeInput</name><environment>Seaside</environment><super>Seaside.WACompound</super><private>false</private><indexed-type>none</indexed-type><inst-vars>withSeconds hours minutes seconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WATimeInput</class-id><body>I am a composition of three input fields that allows the user to select hour, minute and optionally second.#withSeconds and #withoutSeconds can be used to toggle seconds.The argument for my callback blocks is an instance of Time.See WADateTimeTest &gt;&gt; #renderDateTimeOn:</body></comment><class><name>WACheckboxTag</name><environment>Seaside</environment><super>Seaside.WAFormInputTag</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value callback </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WACheckboxTag</class-id><body>The checkbox element is used with an associated property of typ boolean. It renders a HTML &lt;input&gt; element of type checkbox.If this input element is disabled then the callback will still be evaluated but with an argument that is false. See method comment of #callback: for more information.</body></comment><class><name>WAParameterTag</name><environment>Seaside</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas-Tags</category><attributes><package>Seaside-Canvas</package></attributes></class><comment><class-id>Seaside.WAParameterTag</class-id><body>The param element allows you to specify the run-time settings for an object inserted into XHTML documents.</body></comment><methods><class-id>Seaside.WABrush</class-id> <category>accessing</category><body package="Seaside-Canvas">parent	^ parent</body></methods><methods><class-id>Seaside.WABrush</class-id> <category>public</category><body package="Seaside-Canvas">close	"Close and flush the receiver onto the canvas and its associated document."	closed ifFalse: [ self with: nil ]</body><body package="Seaside-Canvas">with: aBlock	canvas nest: aBlock.	closed := true</body></methods><methods><class-id>Seaside.WABrush</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	closed := false</body><body package="Seaside-Canvas">setParent: aBrush canvas: aCanvas	parent := aBrush.	canvas := aCanvas</body></methods><methods><class-id>Seaside.WABrush</class-id> <category>private</category><body package="Seaside-Canvas">labelForSelector: aSymbol of: anObject	^ anObject labelForSelector: aSymbol</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>accessing</category><body package="Seaside-Canvas">attributes	^ attributes ifNil: [ attributes := WAHtmlAttributes new ]</body><body package="Seaside-Canvas">attributes: anHtmlAttributes	attributes := anHtmlAttributes</body><body package="Seaside-Canvas">document	^ canvas document</body><body package="Seaside-Canvas">id	^ self attributes at: 'id'</body><body package="Seaside-Canvas">tag	self subclassResponsibility</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>private</category><body package="Seaside-Canvas">after	"This template method is called directly after rendering the content of the receiver."</body><body package="Seaside-Canvas">before	"This template method is called directly before rendering the content of the receiver."</body><body package="Seaside-Canvas">closeTag	"Close the receiving tag onto the document."	self document closeTag: self tag</body><body package="Seaside-Canvas">openTag	"Open the receiving and all associated attributes onto the document."	self document openTag: self tag attributes: attributes closed: self isClosed</body><body package="Seaside-Canvas">storeCallback: aCallback	^ canvas callbacks store: aCallback</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>public</category><body package="Seaside-Canvas">ensureId	"Answer the id of the receiving attribute. In case the receiver doesn't have an id yet, generate a new one."	^ self attributes at: 'id' ifAbsentPut: [ canvas nextId ]</body><body package="Seaside-Canvas">with: anObject	"Render anObject into the receiver. Make sure that you call #with: last in the cascade, as this method will serialize the tag onto the output document."	self openTag.	super with: [		self before.		canvas render: anObject.		self after ].	self isClosed		ifFalse: [ self closeTag ]</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>convenience</category><body package="Seaside-Canvas">class: aString if: aBoolean	"Adds the class aString to the receiving element if aBoolean is true. 		Example:		html div		class: 'error' if: self hasError;		with: self errorMessage"	aBoolean		ifTrue: [ self class: aString ]</body><body package="Seaside-Canvas">onError: anObject	"The error event occurs when an image does not load properly or when an error occurs during script execution."	self document scriptGenerator		event: 'error'		do: anObject		on: self</body><body package="Seaside-Canvas">onInput: anObject	"Any element that accepts an onchange attribute to handle change events shall also accept an oninput  attribute to handle input events, except the output element (for which it would make no sense)."	self document scriptGenerator		event: 'input'		do: anObject		on: self</body><body package="Seaside-Canvas">onResize: anObject	"The resize event occurs when a document view is resized. "	self document scriptGenerator		event: 'resize'		do: anObject		on: self</body><body package="Seaside-Canvas">onScroll: anObject	"The scroll event occurs when a document view is scrolled. "	self document scriptGenerator		event: 'scroll'		do: anObject		on: self</body><body package="Seaside-Canvas">withLineBreaks: aString	"Renders text preserving line breaks."	self with: [ canvas withLineBreaks: aString ]</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>attributes-language</category><body package="Seaside-Canvas">direction: aString	"Set the text direction ltr (left-to-right) or right-to-left (rtl).	Not supported on:	APPLET, BASE, BASEFONT, BR, FRAME, FRAMESET, IFRAME, PARAM, SCRIPT"	self attributes at: 'dir' put: aString</body><body package="Seaside-Canvas">language: aString	"Set the language code."	self attributes		at: 'lang' put: aString;		at: 'xml:lang' put: aString</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>accessing-attributes</category><body package="Seaside-Canvas">attributeAt: aKey	^ self attributes at: aKey</body><body package="Seaside-Canvas">attributeAt: aKey ifAbsent: aBlock	^ self attributes at: aKey ifAbsent: aBlock</body><body package="Seaside-Canvas">attributeAt: aKey ifAbsentPut: aBlock	^ self attributes at: aKey ifAbsentPut: aBlock</body><body package="Seaside-Canvas">attributeAt: aKey ifPresent: aBlock	^ self attributes at: aKey ifPresent: aBlock</body><body package="Seaside-Canvas">attributeAt: aKey put: aValue	^ self attributes at: aKey put: aValue</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>attributes-core</category><body package="Seaside-Canvas">class: aString	"This attribute assigns one or more class names to an element; the element may be said to belong to these classes. A class name may be shared by several element instances. Multiple classes might be added to one brush."	self attributes addClass: aString</body><body package="Seaside-Canvas">id: aString	"The id attribute assigns a identifier to an element. The id of an element must be unique within a document."	self attributes at: 'id' put: aString</body><body package="Seaside-Canvas">style: aString	"This attribute offers optional CSS style information. The attribute is deprecated and should be avoided in favor of an external stylesheet. Multiple styles might be added to one brush."	self attributes addStyle: aString</body><body package="Seaside-Canvas">title: aString	"This attribute offers advisory information about the element for which it is set. Visual browsers frequently display the title as a 'tool tip'."	self attributes at: 'title' put: aString</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>attributes</category><body package="Seaside-Canvas">autofocus	"supported on:	- Opera 9"	self attributeAt: 'autofocus' put: true</body><body package="Seaside-Canvas">disabled	"When set for a form control, this boolean attribute disables the control for user input.When set, the disabled attribute has the following effects on an element:	-	Disabled controls do not receive focus.	-	Disabled controls are skipped in tabbing navigation.	-	Disabled controls cannot be successful (= will not be submitted).			The following elements support the disabled attribute: BUTTON, INPUT, OPTGROUP, OPTION, SELECT, and TEXTAREA. This one other example of functionality implemented way too high in the class hierarchy because we don't have traits."	self disabled: true</body><body package="Seaside-Canvas">disabled: aBoolean	self attributes at: 'disabled' put: aBoolean</body><body package="Seaside-Canvas">irrelevant	"All elements may have the irrelevant content attribute set. The irrelevant  attribute is a boolean attribute. When specified on an element, it indicates that the element is not yet, or is no longer, relevant. User agents should not render elements that have the irrelevant  attribute specified."	self attributeAt: 'irrelevant' put: true</body><body package="Seaside-Canvas">isDisabled	"answers whether the receiver is disabled"	^ self attributes at: 'disabled' ifAbsent: [ false ]</body><body package="Seaside-Canvas">required	"supported on:	- Opera 9"	self attributeAt: 'required' put: true</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>attributes-keyboard</category><body package="Seaside-Canvas">accessKey: aString	"Set a keyboard shortcut to access an element. An access key is a single character from the document character set.	Pressing an access key assigned to an element gives focus to the element. The action that occurs when an element receives focus depends on the element. For example, when a user activates a link defined by the A element, the user agent generally follows the link. When a user activates a radio button, the user agent changes the value of the radio button. When the user activates a text field, it allows input, etc.The following elements support the accesskey attribute: A, AREA, BUTTON, INPUT, LABEL, and LEGEND, and TEXTAREA.	The invocation of access keys depends on the underlying system. For instance, on machines running MS Windows, one generally has to press the 'alt' key in addition to the access key. On Apple systems, one generally has to press the 'cmd' key in addition to the access key."	self attributes at: 'accesskey' put: aString</body><body package="Seaside-Canvas">tabIndex: aString	"This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767.	The tabbing order defines the order in which elements will receive focus when navigated by the user via the keyboard. The tabbing order may include elements nested within other elements.	The following elements support the tabindex attribute: A, AREA, BUTTON, INPUT, OBJECT, SELECT, and TEXTAREA."	self attributes at: 'tabindex' put: aString</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	"Answer true if this tag should be closed immediately, such as &lt;br /&gt;."	^ false</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>attributes-events</category><body package="Seaside-Canvas">onAbort: anObject	"The abort event occurs when page loading is stopped before an image has been allowed to completely load."	self document scriptGenerator		event: 'abort'		do: anObject		on: self</body><body package="Seaside-Canvas">onBlur: anObject	"The onblurs event occurs when the element that is in focus, loses that focus."	self document scriptGenerator		event: 'blur'		do: anObject		on: self</body><body package="Seaside-Canvas">onChange: anObject	"The onchange event occurs when a select input element has a selection made or when a text input element has a change in the text."	self document scriptGenerator		event: 'change'		do: anObject		on: self</body><body package="Seaside-Canvas">onClick: anObject	"The onclick event occurs when the pointing device button is clicked over an element."	self document scriptGenerator		event: 'click'		do: anObject		on: self</body><body package="Seaside-Canvas">onDoubleClick: anObject	"The ondblclick event occurs when the pointing device button is double clicked over an element."	self document scriptGenerator		event: 'dblclick'		do: anObject		on: self</body><body package="Seaside-Canvas">onFocus: anObject	"The onfocus event occurs when an element receives focus either by the pointing device or by tabbing navigation."	self document scriptGenerator		event: 'focus'		do: anObject		on: self</body><body package="Seaside-Canvas">onKeyDown: anObject	"The onkeydown event occurs when a key is pressed down over an element."	self document scriptGenerator		event: 'keydown'		do: anObject		on: self</body><body package="Seaside-Canvas">onKeyPress: anObject	"The onkeypress event occurs when a key is pressed and released over an element."	self document scriptGenerator		event: 'keypress'		do: anObject		on: self</body><body package="Seaside-Canvas">onKeyUp: anObject	"The onkeyup event occurs when a key is released over an element."	self document scriptGenerator		event: 'keyup'		do: anObject		on: self</body><body package="Seaside-Canvas">onLoad: anObject	"The onload event occurs when the user agent finishes loading a window."	self document scriptGenerator		event: 'load'		do: anObject		on: self</body><body package="Seaside-Canvas">onMouseDown: anObject	"The onmousedown event occurs when the pointing device button is pressed over an element."	self document scriptGenerator		event: 'mousedown'		do: anObject		on: self</body><body package="Seaside-Canvas">onMouseMove: anObject	"The onmousemove event occurs when the pointing device is moved while it is over an element."	self document scriptGenerator		event: 'mousemove'		do: anObject		on: self</body><body package="Seaside-Canvas">onMouseOut: anObject	"The onmouseout event occurs when the pointing device is moved away from an element."	self document scriptGenerator		event: 'mouseout'		do: anObject		on: self</body><body package="Seaside-Canvas">onMouseOver: anObject	"The onmouseover event occurs when the pointing device is moved onto an element."	self document scriptGenerator		event: 'mouseover'		do: anObject		on: self</body><body package="Seaside-Canvas">onMouseUp: anObject	"The onmouseup event occurs when the pointing device button is released over an element."	self document scriptGenerator		event: 'mouseup'		do: anObject		on: self</body><body package="Seaside-Canvas">onReset: anObject	"The onreset event occurs when a form is reset."	self document scriptGenerator		event: 'reset'		do: anObject		on: self</body><body package="Seaside-Canvas">onSelect: anObject	"The onselect event occurs when a user selects some text in a text field."	self document scriptGenerator		event: 'select'		do: anObject		on: self</body><body package="Seaside-Canvas">onSubmit: anObject	"The onsubmit event occurs when a form is submitted."	self document scriptGenerator		event: 'submit'		do: anObject		on: self</body><body package="Seaside-Canvas">onUnload: anObject	"The onunload event occurs when the user agent removes a document from a window."	self document scriptGenerator		event: 'unload'		do: anObject		on: self</body></methods><methods><class-id>Seaside.WATagBrush class</class-id> <category>code generation</category><body package="Seaside-Canvas">tag	"WASelectTag tag"	"WAGenericTag tag"	^ (self selectors includes: #tag)		ifTrue: [ self new tag ]		ifFalse: [ nil ]</body></methods><methods><class-id>Seaside.WADetailsTag</class-id> <category>attributes</category><body package="Seaside-Canvas">open: aBoolean	"The open  content attribute is a boolean attribute. If present, it indicates that the details should be shown to the user. If the attribute is absent, the details should not be shown.	If the attribute is removed, then the details should be hidden. If the attribute is added, the details should be shown."	self attributeAt: 'open' put: aBoolean</body></methods><methods><class-id>Seaside.WADetailsTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'details'</body></methods><methods><class-id>Seaside.WAFormInputTag</class-id> <category>attributes</category><body package="Seaside-Canvas">name: aString	"This attribute assigns the control name.		A control's 'control name' is given by its name attribute. The scope of the name attribute for a control within a FORM element is the FORM element."	self attributes at: 'name' put: aString</body><body package="Seaside-Canvas">readonly: aBoolean	"When set to true, this boolean attribute prohibits changes to the widget."	self attributes at: 'readonly' put: aBoolean</body><body package="Seaside-Canvas">size: aNumber 	"This attribute tells the user agent the initial width of the widget. The width is given in pixels except when type attribute has the value 'text' or 'password'. In that case, its value refers to the (integer) number of characters."	self attributes 		at: 'size'		put: aNumber</body><body package="Seaside-Canvas">text: aString	self value: aString</body><body package="Seaside-Canvas">type: aString	self attributes at: 'type' put: aString</body><body package="Seaside-Canvas">value	^ self attributes at: 'value'</body><body package="Seaside-Canvas">value: anObject	anObject isNil		ifFalse: [ self attributes at: 'value' put: anObject ]</body></methods><methods><class-id>Seaside.WAFormInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'input'</body><body package="Seaside-Canvas">type	^ nil</body></methods><methods><class-id>Seaside.WAFormInputTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self name: (self storeCallback: (WAValueCallback on: aBlock))</body><body package="Seaside-Canvas">on: aSelector of: anObject 	self value: (anObject perform: aSelector).	self callback: (GRDelayedSend 			receiver: anObject			selector: aSelector asMutator)</body></methods><methods><class-id>Seaside.WAFormInputTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ true</body></methods><methods><class-id>Seaside.WAFormInputTag</class-id> <category>public</category><body package="Seaside-Canvas">with: aBlock	self type isNil ifFalse: [		self attributes at: 'type' ifAbsentPut: [ self type ] ].	super with: aBlock</body></methods><methods><class-id>Seaside.WAAbstractTextAreaTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self name: (self storeCallback: (WAValueCallback on: aBlock)).	self value: self value</body><body package="Seaside-Canvas">multipleValuesCallback: aBlock	self beMultiple.	self name: (self storeCallback: (self allValuesCallbackClass on: aBlock)).	self value: self value</body></methods><methods><class-id>Seaside.WAAbstractTextAreaTag</class-id> <category>attributes</category><body package="Seaside-Canvas">listId: aString	"aString is the id of a datalist"	self attributeAt: 'list' put: aString</body><body package="Seaside-Canvas">pattern: aString	"no known browser support		For the text, password, email, and url types of the input element, and for the textarea element, the pattern attribute specifies a pattern that the control value must match. When specified, the pattern attribute contains a regular expression that the control's value must match before the form may be submitted.	The regular expression language used for this attribute is the same as that defined in [ECMA262], except that the pattern attribute must match the entire value, not just any subset (somewhat as if it implied a ^(?: at the start of the pattern and a )$ at the end). The pattern must be compiled with the global, ignoreCase, and multiline flags disabled (see ECMA262, sections 15.10.7.2 through 15.10.7.4). If the attribute is omitted then the control has no pattern restriction.		The / character is not special in the pattern attribute. The two attributes pattern='/etc/.+' and pattern='\/etc\/.+' are therefore equivalent. 	In the case of the email and url types, the pattern attribute specifies a pattern that must be matched in addition to the value matching the generic pattern relevant for the control."	self attributeAt: 'pattern' put: aString</body><body package="Seaside-Canvas">placeholder: aString	"The placeholder  attribute represents a short hint (a word or short phrase) intended to aid the user with data entry. A hint could be a sample value or a brief description of the expected format. The attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters."	self attributeAt: 'placeholder' put: aString</body></methods><methods><class-id>Seaside.WAAbstractTextAreaTag</class-id> <category>private</category><body package="Seaside-Canvas">allValuesCallbackClass	^ WAAllValuesCallback</body><body package="Seaside-Canvas">beMultiple	"The multiple attribute is a boolean attribute that indicates whether the user is to be allowed to specify more than one value."	self attributeAt: 'multiple' put: true</body></methods><methods><class-id>Seaside.WATextAreaTag</class-id> <category>public</category><body package="Seaside-Canvas">with: aBlock	super with: (value ifNil: [ aBlock ])</body></methods><methods><class-id>Seaside.WATextAreaTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ false</body></methods><methods><class-id>Seaside.WATextAreaTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	self rows: 'auto'; columns: 'auto'</body></methods><methods><class-id>Seaside.WATextAreaTag</class-id> <category>attributes</category><body package="Seaside-Canvas">columns: anInteger 	"This attribute specifies the visible width in average character widths. User agents may wrap visible text lines to keep long lines visible without the need for scrolling."	self attributes 		at: 'cols'		put: anInteger</body><body package="Seaside-Canvas">rows: anInteger 	"This attribute specifies the number of visible text lines. If more are entered, the widget scrolls."	self attributes 		at: 'rows'		put: anInteger</body><body package="Seaside-Canvas">value	^ value</body><body package="Seaside-Canvas">value: aString	value := aString</body></methods><methods><class-id>Seaside.WATextAreaTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'textarea'</body></methods><methods><class-id>Seaside.WACollectionTag</class-id> <category>accessing</category><body package="Seaside-Canvas">list	^ list ifNil: [ list := OrderedCollection new ]</body><body package="Seaside-Canvas">list: aCollection	"Append aCollection of items to display. The rendering can be customized using #labels:."	aCollection isNil		ifFalse: [ self addAll: aCollection ]</body><body package="Seaside-Canvas">selected: anObject	"Set anObject to be selected."	selected := anObject</body></methods><methods><class-id>Seaside.WACollectionTag</class-id> <category>private</category><body package="Seaside-Canvas">before	super before.	self hasList ifTrue: [		self list do: [ :each |			self				renderListItem: each				labelled: (self labelForOption: each) ] ]</body><body package="Seaside-Canvas">labelForOption: anObject	^ labelBlock isNil		ifTrue: [ anObject ]		ifFalse: [ labelBlock value: anObject ]</body><body package="Seaside-Canvas">renderListItem: anObject labelled: aString	self subclassResponsibility</body></methods><methods><class-id>Seaside.WACollectionTag</class-id> <category>adding</category><body package="Seaside-Canvas">add: anObject	self list add: anObject</body><body package="Seaside-Canvas">addAll: aCollection	self list addAll: aCollection</body></methods><methods><class-id>Seaside.WACollectionTag</class-id> <category>testing</category><body package="Seaside-Canvas">hasList	^ list notNil and: [ list notEmpty ]</body><body package="Seaside-Canvas">isSelected: anObject	"Test if anObject is currently selected." 	^ selected = anObject</body></methods><methods><class-id>Seaside.WACollectionTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self subclassResponsibility</body><body package="Seaside-Canvas">labels: aBlock	"Allows to customize the rendering of list items by passing a one argument block that converts each option to a string. If you need to do custom html rendering for the options use #with: or override #renderOn: in your objects."	labelBlock := aBlock fixCallbackTemps</body><body package="Seaside-Canvas">on: aSelector of: anObject 	self selected: (anObject perform: aSelector).	self callback: (GRDelayedSend 			receiver: anObject			selector: aSelector asMutator)</body></methods><methods><class-id>Seaside.WAListTag</class-id> <category>private</category><body package="Seaside-Canvas">performCallback: anObject	self hasCallback ifTrue: [ callbackBlock value: anObject ]</body><body package="Seaside-Canvas">renderListItem: anObject labelled: aString	canvas listItem		class: 'option-selected' if: (self isSelected: anObject);		with: [			self hasCallback				ifFalse: [ canvas render: aString ]				ifTrue: [					canvas anchor						callback: [ self performCallback: anObject ];						with: aString ] ]</body></methods><methods><class-id>Seaside.WAListTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	callbackBlock := aBlock fixCallbackTemps</body></methods><methods><class-id>Seaside.WAListTag</class-id> <category>testing</category><body package="Seaside-Canvas">hasCallback	^ callbackBlock notNil</body></methods><methods><class-id>Seaside.WATextInputTag</class-id> <category>attributes</category><body package="Seaside-Canvas">maxLength: aNumber 	"This attribute specifies the maximum number of characters the user may enter. This number may exceed the specified #size:, in which case the user agent should offer a scrolling mechanism. The default value for this attribute is an unlimited number."	self attributes 		at: 'maxlength'		put: aNumber</body></methods><methods><class-id>Seaside.WATextInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'text'</body></methods><methods><class-id>Seaside.WATextInputTag</class-id> <category>public</category><body package="Seaside-Canvas">with: anObject 	anObject isNil ifFalse: [ self value: anObject greaseString ].	super with: nil</body></methods><methods><class-id>Seaside.WAPasswordInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'password'</body></methods><methods><class-id>Seaside.WALabelTag</class-id> <category>attributes</category><body package="Seaside-Canvas">for: aString 	self attributes 		at: 'for'		put: aString</body></methods><methods><class-id>Seaside.WALabelTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'label'</body></methods><methods><class-id>Seaside.WAOptionGroupTag</class-id> <category>attributes</category><body package="Seaside-Canvas">label: aString	"This attribute specifies the label for the option group."	self attributes at: 'label' put: aString</body></methods><methods><class-id>Seaside.WAOptionGroupTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'optgroup'</body></methods><methods><class-id>Seaside.WAOptionGroupTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	self label: ''</body></methods><methods><class-id>Seaside.WATimeTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'time'</body></methods><methods><class-id>Seaside.WATimeTag</class-id> <category>attributes</category><body package="Seaside-Canvas">datetime: anObject	"The datetime attribute, if present, must contain a date or time string that identifies the date or time being specified."	self attributeAt: 'datetime' put: anObject</body></methods><methods><class-id>Seaside.WAColorInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'color'</body></methods><methods><class-id>Seaside.WASteppedTag</class-id> <category>attributes</category><body package="Seaside-Canvas">step: anInteger	self attributeAt: 'step' put: anInteger</body></methods><methods><class-id>Seaside.WADateTimeInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'datetime'</body></methods><methods><class-id>Seaside.WARadioButtonTag</class-id> <category>accessing</category><body package="Seaside-Canvas">group	^ group</body><body package="Seaside-Canvas">group: aRadioGroup	self name: aRadioGroup key.	group := aRadioGroup</body><body package="Seaside-Canvas">type	^ 'radio'</body></methods><methods><class-id>Seaside.WARadioButtonTag</class-id> <category>attributes</category><body package="Seaside-Canvas">beChecked	self selected: true</body><body package="Seaside-Canvas">beUnchecked	self selected: false</body><body package="Seaside-Canvas">checked: aBoolean	self attributes 		at: 'checked'		put: aBoolean</body><body package="Seaside-Canvas">selected: aBoolean 	self checked: aBoolean</body><body package="Seaside-Canvas">value: anObject	group isNil		ifTrue: [ ^ super value: anObject ].	group hasSelection 		ifTrue: [ self selected: (group isSelected: anObject) ].	group hasCallback 		ifTrue: [ super value: (group callbackValue: anObject) ]</body></methods><methods><class-id>Seaside.WARadioButtonTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	"Only called if option was selected."		self attributes at: 'value' put: (self storeCallback: (WAValueCallback on: aBlock))</body></methods><methods><class-id>Seaside.WABasicFormTag</class-id> <category>attributes</category><body package="Seaside-Canvas">acceptCharset: aString 	"This attribute specifies the list of character encodings for input data that is accepted by the server processing this form. The value is a space- and/or comma-delimited list of charset values. The client must interpret this list as an exclusive-or list, i.e., the server is able to accept any single character encoding per entity received.The default value for this attribute is the reserved string 'UNKNOWN'. User agents may interpret this value as the character encoding that was used to transmit the document containing this FORM element."	self attributes 		at: 'accept-charset'		put: aString</body><body package="Seaside-Canvas">action: aUrlOrString	"This attribute specifies a form processing agent. User agent behavior for a value other than an HTTP URI is undefined."	self attributes 		at: 'action'		put: aUrlOrString</body><body package="Seaside-Canvas">get	"tells the user agent to use the HTTP GET method to submit this form"	self method: 'get'</body><body package="Seaside-Canvas">method: aString 	"This attribute specifies which HTTP method will be used to submit the form data set. Possible (case-insensitive) values are 'get' (the default) and 'post'."	self attributes 		at: 'method'		put: aString</body><body package="Seaside-Canvas">multipart	"Sets the content type used to submit the form to the server (when the value of method is 'post') to multipart/form-data instead the default application/x-www-form-urlencoded. This should be used in combination with a WAFileUploadTag."	self attributes 		at: 'enctype'		put: 'multipart/form-data'</body><body package="Seaside-Canvas">multipart: aBoolean	"Sets the content type used to submit the form to the server.	true: sets the content type to multipart/form-data	false: leaves the content type to default application/x-www-form-urlencoded"	aBoolean ifTrue: [ self multipart ]</body><body package="Seaside-Canvas">name: aString	"This attribute names the element so that it may be referred to from style sheets or scripts. Note. This attribute has been included for backwards compatibility. Applications should use the id attribute to identify elements."	self attributes at: 'name' put: aString</body><body package="Seaside-Canvas">noAutocomplete	self attributes 		at: 'autocomplete'		put: 'off'</body><body package="Seaside-Canvas">post	"tells the user agent to use the HTTP POST method to submit this form"	self method: 'post'</body></methods><methods><class-id>Seaside.WABasicFormTag</class-id> <category>private</category><body package="Seaside-Canvas">defaultUrlCharset	"the character set used for POSTs that are application/x-www-form-urlencoded	and GETs	There are standards that dictate this:	http://www.w3.org/International/O-URL-code.html	but that doesn't mean is will work with your favorite old browser"	^ 'utf-8'</body></methods><methods><class-id>Seaside.WABasicFormTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'form'</body></methods><methods><class-id>Seaside.WABasicFormTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	| charSet |	super initialize.	charSet := self requestContext charSet.	charSet isNil		ifTrue: [ self acceptCharset: self defaultUrlCharset ]		ifFalse: [ self acceptCharset: charSet ]</body><body package="Seaside-Canvas">setParent: aBrush canvas: aCanvas	super setParent: aBrush canvas: aCanvas.	self post; action: aCanvas actionUrl</body></methods><methods><class-id>Seaside.WARubyTextTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'rt'</body></methods><methods><class-id>Seaside.WARubyTextTag</class-id> <category>attributes</category><body package="Seaside-Canvas">span: anInteger 	self attributes 		at: 'rbspan'		put: anInteger</body></methods><methods><class-id>Seaside.WARadioGroup</class-id> <category>public api</category><body package="Seaside-Canvas">radioButton	^ canvas radioButton group: self</body><body package="Seaside-Canvas">with: aBlock	^ aBlock value: self</body></methods><methods><class-id>Seaside.WARadioGroup</class-id> <category>testing</category><body package="Seaside-Canvas">hasSelection 	^ selected notNil</body><body package="Seaside-Canvas">isSelected: anObject	"Test if anObject is currently selected." 	^ selected = anObject</body></methods><methods><class-id>Seaside.WARadioGroup</class-id> <category>accessing</category><body package="Seaside-Canvas">key	^ key ifNil: [ key := canvas callbacks store: WADispatchCallback new ]</body><body package="Seaside-Canvas">selected: anObject	"Set anObject to be selected."	selected := anObject</body></methods><methods><class-id>Seaside.WARadioGroup</class-id> <category>private</category><body package="Seaside-Canvas">callback: aBlock	values := Dictionary new.	key := canvas callbacks store: (WAValuesCallback on: aBlock values: values)</body><body package="Seaside-Canvas">callbackValue: anObject	^ self valuesAt: values size + 1 put: anObject</body><body package="Seaside-Canvas">hasCallback	^ values notNil</body><body package="Seaside-Canvas">valuesAt: aKey put: anObject	values at: aKey put: anObject.	^ values size</body></methods><methods><class-id>Seaside.WARadioGroup</class-id> <category>initialization</category><body package="Seaside-Canvas">initializeWithCanvas: aRenderCanvas	self initialize.	canvas := aRenderCanvas</body></methods><methods><class-id>Seaside.WARadioGroup class</class-id> <category>accessing</category><body package="Seaside-Canvas">canvas: aRenderCanvas	^ self basicNew initializeWithCanvas: aRenderCanvas</body></methods><methods><class-id>Seaside.WATableCellTag</class-id> <category>attributes</category><body package="Seaside-Canvas">align: aString	"This attribute specifies the alignment of data and the justification of text in a cell. Possible values:	- left: Left-flush data/Left-justify text. This is the default value for table data.- center: Center data/Center-justify text. This is the default value for table headers.- right: Right-flush data/Right-justify text.- justify: Double-justify text.- char: Align text around a specific character. If a user agent doesn't support character alignment, behavior in - the presence of this value is unspecified."	self attributes at: 'align' put: aString</body><body package="Seaside-Canvas">character: aString	"This attribute specifies a single character within a text fragment to act as an axis for alignment. The default value for this attribute is the decimal point character for the current language as set by the lang attribute. User agents are not required to support this attribute."		self attributes at: 'char' put: aString</body><body package="Seaside-Canvas">characterOffset: anInteger	"When present, this attribute specifies the offset to the first occurrence of the alignment character on each line. If a line doesn't include the alignment character, it should be horizontally shifted to end at the alignment position."	self attributes at: 'charoff' put: anInteger</body><body package="Seaside-Canvas">verticalAlign: aString	"This attribute specifies the vertical position of data within a cell. Possible values:- top: Cell data is flush with the top of the cell.- middle: Cell data is centered vertically within the cell. This is the default value.- bottom: Cell data is flush with the bottom of the cell.- baseline: All cells in the same row as a cell whose valign attribute has this value should have their textual data positioned so that the first text line occurs on a baseline common to all cells in the row. This constraint does not apply to subsequent text lines in these cells."			self attributes at: 'valign' put: aString</body></methods><methods><class-id>Seaside.WATableColumnGroupTag</class-id> <category>attributes</category><body package="Seaside-Canvas">span: anInteger	"This attribute must be an integer &gt; 0; the default value is 1. This specifies the number of columns in a colgroup, or specifies the number of columns spanned by the col element."		self attributes at: 'span' put: anInteger</body><body package="Seaside-Canvas">width: anInteger	"The width attribute specifies the width of the columns"		self attributes at: 'width' put: anInteger</body></methods><methods><class-id>Seaside.WATableColumnGroupTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'colgroup'</body></methods><methods><class-id>Seaside.WATableColumnTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ true</body></methods><methods><class-id>Seaside.WATableColumnTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'col'</body></methods><methods><class-id>Seaside.WAMenuTag</class-id> <category>attributes</category><body package="Seaside-Canvas">autosubmit	"The autosubmit attribute is a boolean attribute that, if present, indicates that selections made to form controls in this menu are to result in the control's form being immediately submitted."	self attributeAt: 'autosubmit' put: true</body><body package="Seaside-Canvas">label: aString	"The label  attribute gives the label of the menu. It is used by user agents to display nested menus in the UI. For example, a context menu containing another menu would use the nested menu's label attribute for the submenu's menu label."	self attributeAt: 'label' put: aString</body><body package="Seaside-Canvas">type: aString	"The type  attribute indicates the kind of menu. It must have either the value popup (to declare a context menu) or the value toolbar (to define a tool bar). The attribute may also be omitted, to indicate that the element is merely a list of commands that is neither declaring a context menu nor defining a tool bar."	self attributeAt: 'type' put: aString</body></methods><methods><class-id>Seaside.WAMenuTag</class-id> <category>type</category><body package="Seaside-Canvas">bePopup	self type: 'popup'</body><body package="Seaside-Canvas">beToolbar	self type: 'toolbar'</body></methods><methods><class-id>Seaside.WAMenuTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'menu'</body></methods><methods><class-id>Seaside.WAEventSourceTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'event-source'</body></methods><methods><class-id>Seaside.WAEventSourceTag</class-id> <category>attributes</category><body package="Seaside-Canvas">url: aString	"The src  attribute, if specified, must give a URI (or IRI) pointing to a resource that uses the application/x-dom-event-stream format."	self attributeAt: 'src' put: aString</body></methods><methods><class-id>Seaside.WASelectTag</class-id> <category>private</category><body package="Seaside-Canvas">before	self isOptional ifTrue: [ self renderOptional ].	super before</body><body package="Seaside-Canvas">nextKey	^ values size + 1</body><body package="Seaside-Canvas">renderListItem: anObject labelled: aString	| option |	option := canvas option.	self hasCallback		ifTrue: [ option value: (self valueFor: anObject) ].	titleBlock isNil		ifFalse: [ option title: (self titleFor: anObject) ].	option		selected: (self isSelected: anObject);		disabled: (self isEnabled: anObject) not;		with: aString</body><body package="Seaside-Canvas">renderOptional	self renderListItem: nil labelled: optionalLabel</body><body package="Seaside-Canvas">titleFor: anObject	^ titleBlock isNil		ifTrue: [ anObject ]		ifFalse: [ titleBlock value: anObject ]</body><body package="Seaside-Canvas">valueFor: anObject	^ self valuesAt: self nextKey put: anObject</body></methods><methods><class-id>Seaside.WASelectTag</class-id> <category>testing</category><body package="Seaside-Canvas">isEnabled: anObject	"Test if anObject is enabled." 	^ enabledBlock isNil or: [ enabledBlock value: anObject ]</body><body package="Seaside-Canvas">isOptional	^ isOptional</body></methods><methods><class-id>Seaside.WASelectTag</class-id> <category>attributes</category><body package="Seaside-Canvas">beOptional	"This adds a nil item to #list: which has the semantic of no selection. #optionalLabel: is the label for nil. This only really makes sense in single selection mode."	isOptional := true</body><body package="Seaside-Canvas">listId: aString	"aString is the id of a datalist"	self attributeAt: 'list' put: aString</body><body package="Seaside-Canvas">name: aString	"This attribute assigns the control name."	self attributes at: 'name' put: aString</body><body package="Seaside-Canvas">optionalLabel: aString	"The label for the nil element. See #beOptional."	optionalLabel := aString</body><body package="Seaside-Canvas">size: aNumber	"If a SELECT element is presented as a scrolled list box, this attribute specifies the number of rows in the list that should be visible at the same time. Visual user agents are not required to present a SELECT element as a list box; they may use any other mechanism, such as a drop-down menu."	self attributes at: 'size' put: aNumber</body></methods><methods><class-id>Seaside.WASelectTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	isOptional := false</body></methods><methods><class-id>Seaside.WASelectTag</class-id> <category>accessing</category><body package="Seaside-Canvas">callbackClass	^ WAValuesCallback</body><body package="Seaside-Canvas">hasCallback	^ values notNil</body><body package="Seaside-Canvas">tag	^ 'select'</body><body package="Seaside-Canvas">valuesAt: key put: anObject	values at: key put: anObject.	^ values size</body></methods><methods><class-id>Seaside.WASelectTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	values := Dictionary new.	self name: (self storeCallback: (self callbackClass on: aBlock values: values))</body><body package="Seaside-Canvas">dispatchCallback	^ self name: (self storeCallback: WADispatchCallback new)</body><body package="Seaside-Canvas">enabled: aOneArgumentBlock	"Enable only those elements for selection for whom aBlock return true."	enabledBlock := aOneArgumentBlock fixCallbackTemps</body><body package="Seaside-Canvas">titles: aOneArgumentBlock	"The given block will be used to generated title attributes for any of the options."	titleBlock := aOneArgumentBlock fixCallbackTemps</body></methods><methods><class-id>Seaside.WAMultiSelectTag</class-id> <category>testing</category><body package="Seaside-Canvas">isSelected: anObject	^ selected notNil and: [ selected includes: anObject ]</body></methods><methods><class-id>Seaside.WAMultiSelectTag</class-id> <category>private</category><body package="Seaside-Canvas">closeTag	super closeTag.	self hasCallback ifFalse: [ ^ self ].	canvas hiddenInput		callback: [ self triggerCallback ].	canvas flush</body><body package="Seaside-Canvas">openTag	self attributes at: 'multiple' put: true.	super openTag</body><body package="Seaside-Canvas">storeCallback: aCallback	^ super storeCallback: (callback := aCallback)</body><body package="Seaside-Canvas">triggerCallback	"Ensure that the callback triggers even if the browser does not submit a value."	self requestContext request		at: callback key		ifAbsent: [ callback evaluateWithFieldValues: #() ]</body></methods><methods><class-id>Seaside.WAMultiSelectTag</class-id> <category>accessing</category><body package="Seaside-Canvas">callbackClass	^ WAMultipleValuesCallback</body></methods><methods><class-id>Seaside.WAFileUploadTag</class-id> <category>attributes</category><body package="Seaside-Canvas">accept: aString	"This attribute specifies a comma-separated list of content types that a server processing this form will handle correctly. User agents may use this information to filter out non-conforming files when prompting a user to select files to be sent to the server"	self attributes at: 'accept' put: aString</body><body package="Seaside-Canvas">beMultiple	"The multiple attribute is a boolean attribute that indicates whether the user is to be allowed to specify more than one value."	self attributeAt: 'multiple' put: true</body></methods><methods><class-id>Seaside.WAFileUploadTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'file'</body></methods><methods><class-id>Seaside.WAFileUploadTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	"Only called if a file was selected."	self name: (self storeCallback: (WAUploadCallback on: aBlock))</body><body package="Seaside-Canvas">multipleValuesCallback: aBlock	self beMultiple.	self name: (self storeCallback: (WAAllUploadsCallback on: aBlock))</body><body package="Seaside-Canvas">on: aSelector of: anObject 	self callback: (GRDelayedSend 			receiver: anObject			selector: aSelector asMutator)</body></methods><methods><class-id>Seaside.WACompound</class-id> <category>accessing</category><body package="Seaside-Canvas">id	^ id</body><body package="Seaside-Canvas">id: aString	id := aString</body><body package="Seaside-Canvas">value	^ value</body><body package="Seaside-Canvas">value: aValue	value := aValue</body></methods><methods><class-id>Seaside.WACompound</class-id> <category>public</category><body package="Seaside-Canvas">close	closed ifTrue: [ ^ self ].	closed := true.	self with: nil</body><body package="Seaside-Canvas">with: anObject	anObject isNil		ifFalse: [ value := anObject ].	closed := true</body></methods><methods><class-id>Seaside.WACompound</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	callbackBlock := aBlock</body><body package="Seaside-Canvas">on: aSelector of: anObject 	self value: (anObject perform: aSelector).	self callback: (GRDelayedSend 			receiver: anObject			selector: aSelector asMutator)</body></methods><methods><class-id>Seaside.WACompound</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	"do not remove properties, it is used by SeasideAsync"	properties := Dictionary new</body></methods><methods><class-id>Seaside.WACompound</class-id> <category>testing</category><body package="Seaside-Canvas">hasCallback	^ callbackBlock notNil</body></methods><methods><class-id>Seaside.WACompound</class-id> <category>private</category><body package="Seaside-Canvas">addCallback	self subclassResponsibility</body></methods><methods><class-id>Seaside.WADateInput</class-id> <category>accessing</category><body package="Seaside-Canvas">options	^ options ifNil: [ self defaultOptions ]</body><body package="Seaside-Canvas">options: anArray	"Valid values in the array : #year #month #day	Can be used to control what is shown and in what order	Default #(month day year)"	options := anArray</body></methods><methods><class-id>Seaside.WADateInput</class-id> <category>private-rendering</category><body package="Seaside-Canvas">renderDay	| brush |	brush := canvas textInput		id: (self id isNil ifFalse: [ self id , '-day' ]);		value: (GRNumberPrinter new				padding: $0;				digits: 2;				print: day);		yourself.	self addDayCallbackToBrush: brush.	brush		attributeAt: 'size'			put: 2;		attributeAt: 'maxlength'			put: 2</body><body package="Seaside-Canvas">renderMonth	| brush |	brush := canvas select		id: self id;		list: (1 to: 12);		selected: month;		yourself.	self addMonthCallbackToBrush: brush.	brush labels: [ :ea | Date nameOfMonth: ea ]</body><body package="Seaside-Canvas">renderYear	| brush |	brush := canvas textInput		id: (self id isNil ifFalse: [ self id , '-year' ]);		value: (GRNumberPrinter new				padding: $0;				digits: 4;				print: year);		yourself.	self addYearCallbackToBrush: brush.	brush		attributeAt: 'size'			put: 4;		attributeAt: 'maxlength'			put: 4</body></methods><methods><class-id>Seaside.WADateInput</class-id> <category>private callbacks</category><body package="Seaside-Canvas">addDayCallbackToBrush: aBrush	self hasCallback		ifFalse: [ ^ self ].	aBrush callback: [ :v | self day: v ]</body><body package="Seaside-Canvas">addMonthCallbackToBrush: aBrush	self hasCallback		ifFalse: [ ^ self ].	aBrush callback: [ :v | self month: v ]</body><body package="Seaside-Canvas">addYearCallbackToBrush: aBrush	self hasCallback		ifFalse: [ ^ self ].	aBrush callback: [ :v | self year: v ]</body><body package="Seaside-Canvas">day	^ day</body><body package="Seaside-Canvas">day: anIntegerOrString 	day := anIntegerOrString greaseInteger ifNil: [ 1 ]</body><body package="Seaside-Canvas">month	^ month</body><body package="Seaside-Canvas">month: anIntegerOrString 	month := anIntegerOrString greaseInteger ifNil: [ 1 ]</body><body package="Seaside-Canvas">setValueWithNewDate	^ value := Date		newDay: ((day min: (Date daysInMonth: (Date nameOfMonth: month) forYear: year)) max: 1)		month: (Date nameOfMonth: month)		year: year</body><body package="Seaside-Canvas">year	^ year</body><body package="Seaside-Canvas">year: anIntegerOrString 	year := anIntegerOrString greaseInteger ifNil: [ 1900 ]</body></methods><methods><class-id>Seaside.WADateInput</class-id> <category>private</category><body package="Seaside-Canvas">addCallback	self hasCallback ifFalse: [		canvas flush.		^ self ].	canvas hiddenInput		callback: [ callbackBlock value: self setValueWithNewDate ];		 with: nil</body><body package="Seaside-Canvas">defaultOptions	^ #(month day year)</body></methods><methods><class-id>Seaside.WADateInput</class-id> <category>public</category><body package="Seaside-Canvas">with: anObject	super with: anObject.	value isNil ifTrue: [ value := Date today ].	day := value dayOfMonth.	month := value monthIndex.	year := value year.	self options		do: [ :each | self perform: ('render', each asLowercase capitalized) asSymbol ]		separatedBy: [ canvas space ].	self addCallback</body></methods><methods><class-id>Seaside.WAMediaElementTag</class-id> <category>attributes</category><body package="Seaside-Canvas">autoplay: aBoolean	"The autoplay attribute is a boolean attribute. When present, the user agent (as described in the algorithm described herein) will automatically begin playback of the media resource as soon as it can do so without stopping."	self attributeAt: 'autoplay' put: aBoolean</body><body package="Seaside-Canvas">controls: aBoolean	"The controls attribute is a boolean attribute. If present, it indicates that the author has not provided a scripted controller and would like the user agent to provide its own set of controls."	self attributeAt: 'controls' put: aBoolean</body><body package="Seaside-Canvas">loop: aBoolean	"The loop attribute is a boolean attribute that, if specified, indicates that the media element is to seek back to the start of the media resource upon reaching the end."	self attributeAt: 'loop' put: aBoolean</body><body package="Seaside-Canvas">preload: aString	"The preload attribute is intended to provide a hint to the user agent about what the author thinks will lead to the best user experience.	See: http://www.w3.org/TR/html5/video.html#attr-media-preload		The preload attribute can have one of three values: 'none', 'metadata', 'auto'.	Providing an empty string defaults the value of the attribute to be 'auto'."	self attributeAt: 'preload' put: aString</body><body package="Seaside-Canvas">url: aString	self attributeAt: 'src' put: aString</body></methods><methods><class-id>Seaside.WAAudioTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'audio'</body></methods><methods><class-id>Seaside.WACanvas</class-id> <category>public</category><body package="Seaside-Canvas">brush: aBrush	self flush.	currentBrush := aBrush.	aBrush setParent: parentBrush canvas: self.	^ aBrush</body><body package="Seaside-Canvas">render: anObject	self flush.	super render: anObject</body><body package="Seaside-Canvas">text: anObject	self flush.	super text: anObject</body></methods><methods><class-id>Seaside.WACanvas</class-id> <category>private</category><body package="Seaside-Canvas">flush	super flush.	currentBrush isNil		ifTrue: [ ^ self ].	currentBrush close.	currentBrush := nil</body><body package="Seaside-Canvas">insert: aBlock	| oldBrush |	oldBrush := currentBrush.	currentBrush := nil.	aBlock value.	self flush.	currentBrush := oldBrush</body><body package="Seaside-Canvas">nest: aBlock	parentBrush := currentBrush.	currentBrush := nil.	self render: aBlock.	self flush.	parentBrush := parentBrush parent</body></methods><methods><class-id>Seaside.WATagCanvas</class-id> <category>public</category><body package="Seaside-Canvas">tag: aString	"Defines a generic tag with the name aString."	^ self brush: (WAGenericTag tag: aString)</body><body package="Seaside-Canvas">tag: aString with: aBlock	(self tag: aString) with: aBlock</body></methods><methods><class-id>Seaside.WATagCanvas</class-id> <category>convenience</category><body package="Seaside-Canvas">space	self flush.	self document nextPutAll: self spaceEntity</body><body package="Seaside-Canvas">space: anInteger	anInteger timesRepeat: [ self space ]</body><body package="Seaside-Canvas">withLineBreaks: aString	"Renders text preserving line breaks."	| stream |	stream := aString readStream.	[ stream atEnd ] whileFalse: [		self text: stream nextLine.		stream atEnd ifFalse: [ self break ] ]</body></methods><methods><class-id>Seaside.WATagCanvas</class-id> <category>private</category><body package="Seaside-Canvas">break	self subclassResponsibility</body><body package="Seaside-Canvas">spaceEntity	self subclassResponsibility</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-tables</category><body package="Seaside-Canvas">table	"Defines a table."	^ self brush: WATableTag new</body><body package="Seaside-Canvas">table: aBlock	self table with: aBlock</body><body package="Seaside-Canvas">tableBody	"Defines a table body."	^ self tag: 'tbody'</body><body package="Seaside-Canvas">tableBody: aBlock	self tableBody with: aBlock</body><body package="Seaside-Canvas">tableCaption	"Defines a table caption."	^ self tag: 'caption'</body><body package="Seaside-Canvas">tableCaption: aBlock	self tableCaption with: aBlock</body><body package="Seaside-Canvas">tableColumn	"Defines attributes for table columns."	^ self brush: WATableColumnTag new</body><body package="Seaside-Canvas">tableColumn: aBlock	self tableColumn with: aBlock</body><body package="Seaside-Canvas">tableColumnGroup	"Defines groups of table columns."	^ self brush: WATableColumnGroupTag new</body><body package="Seaside-Canvas">tableColumnGroup: aBlock	self tableColumnGroup with: aBlock</body><body package="Seaside-Canvas">tableData	"Defines a table cell."	^ self brush: WATableDataTag new</body><body package="Seaside-Canvas">tableData: aBlock	self tableData with: aBlock</body><body package="Seaside-Canvas">tableFoot	"Defines a table footer."	^ self tag: 'tfoot'</body><body package="Seaside-Canvas">tableFoot: aBlock	^ self tableFoot with: aBlock</body><body package="Seaside-Canvas">tableHead	"Defines a table header."	^ self tag: 'thead'</body><body package="Seaside-Canvas">tableHead: aBlock	self tableHead with: aBlock</body><body package="Seaside-Canvas">tableHeading	"Defines a table header."	^ self brush: WATableHeadingTag new</body><body package="Seaside-Canvas">tableHeading: aBlock	self tableHeading with: aBlock</body><body package="Seaside-Canvas">tableRow	"Defines a table row."	^ self tag: 'tr'</body><body package="Seaside-Canvas">tableRow: aBlock	self tableRow with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-output</category><body package="Seaside-Canvas">code	"Defines computer code text."	^ self tag: 'code'</body><body package="Seaside-Canvas">code: aBlock	self code with: aBlock</body><body package="Seaside-Canvas">definition	"Defines a definition term."	^ self tag: 'dfn'</body><body package="Seaside-Canvas">definition: aBlock	self definition with: aBlock</body><body package="Seaside-Canvas">keyboard	"Defines keyboard text."	^ self tag: 'kbd'</body><body package="Seaside-Canvas">keyboard: aBlock	self keyboard with: aBlock</body><body package="Seaside-Canvas">preformatted	"Defines preformatted text."	^ self tag: 'pre'</body><body package="Seaside-Canvas">preformatted: aBlock	self preformatted with: aBlock</body><body package="Seaside-Canvas">sample	"Defines sample computer code."	^ self tag: 'samp'</body><body package="Seaside-Canvas">sample: aBlock	self sample with: aBlock</body><body package="Seaside-Canvas">teletype	"Defines teletype text."	^ self tag: 'tt'</body><body package="Seaside-Canvas">teletype: aBlock	self teletype with: aBlock</body><body package="Seaside-Canvas">variable	"Defines a variable."	^ self tag: 'var'</body><body package="Seaside-Canvas">variable: aBlock	self variable with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-lists</category><body package="Seaside-Canvas">definitionData	"Defines a definition description."	^ self tag: 'dd'</body><body package="Seaside-Canvas">definitionData: aBlock	self definitionData with: aBlock</body><body package="Seaside-Canvas">definitionList	"Defines a definition list."	^ self tag: 'dl'</body><body package="Seaside-Canvas">definitionList: aBlock	self definitionList with: aBlock</body><body package="Seaside-Canvas">definitionTerm	"Defines a definition term."	^ self tag: 'dt'</body><body package="Seaside-Canvas">definitionTerm: aBlock	self definitionTerm with: aBlock</body><body package="Seaside-Canvas">listItem	"Defines a list item."	^ self tag: 'li'</body><body package="Seaside-Canvas">listItem: aBlock	self listItem with: aBlock</body><body package="Seaside-Canvas">orderedList	"Defines an ordered list."	^ self brush: WAOrderedListTag new</body><body package="Seaside-Canvas">orderedList: aBlock	self orderedList with: aBlock</body><body package="Seaside-Canvas">unorderedList	"Defines an unordered list."	^ self brush: WAUnorderedListTag new</body><body package="Seaside-Canvas">unorderedList: aBlock	self unorderedList with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-block</category><body package="Seaside-Canvas">abbreviated	"Defines an abbreviation, such as 'M.', 'Inc.', 'et al.', 'etc.'"	^ self tag: 'abbr'</body><body package="Seaside-Canvas">abbreviated: aBlock	self abbreviated with: aBlock</body><body package="Seaside-Canvas">acronym	"Defines an acronym, such as 'GmbH', 'NATO', and 'F.B.I.'"	^ self tag: 'acronym'</body><body package="Seaside-Canvas">acronym: aBlock	self acronym with: aBlock</body><body package="Seaside-Canvas">address	"Defines an address element."	^ self tag: 'address'</body><body package="Seaside-Canvas">address: aBlock	self address with: aBlock</body><body package="Seaside-Canvas">blockquote	"Defines a long quotation."	^ self tag: 'blockquote'</body><body package="Seaside-Canvas">blockquote: aBlock	self blockquote with: aBlock</body><body package="Seaside-Canvas">citation	"Defines a citation."	^ self tag: 'cite'</body><body package="Seaside-Canvas">citation: aBlock	self citation with: aBlock</body><body package="Seaside-Canvas">deleted	"Defines deleted text."	^ self brush: (WAEditTag tag: 'del')</body><body package="Seaside-Canvas">deleted: aBlock	self deleted with: aBlock</body><body package="Seaside-Canvas">inserted	"Defines inserted text."	^ self brush: (WAEditTag tag: 'ins')</body><body package="Seaside-Canvas">inserted: aBlock	self inserted with: aBlock</body><body package="Seaside-Canvas">quote	"Defines a short quotation."	^ self tag: 'q'</body><body package="Seaside-Canvas">quote: aBlock	self quote with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-transitional</category><body package="Seaside-Canvas">iframe	^ self brush: WAIframeTag new</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-images</category><body package="Seaside-Canvas">image	"Defines an image."	^ self brush: WAImageTag new</body><body package="Seaside-Canvas">image: aBlock	self image with: aBlock</body><body package="Seaside-Canvas">map	"Defines an anchor to be used around an image."	^ self brush: WAImageMapTag new</body><body package="Seaside-Canvas">map: aBlock	self map with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-format</category><body package="Seaside-Canvas">big	"Defines big text."	^ self tag: 'big'</body><body package="Seaside-Canvas">big: aBlock	self big with: aBlock</body><body package="Seaside-Canvas">emphasis	"Defines emphasized text."	^ self tag: 'em'</body><body package="Seaside-Canvas">emphasis: aBlock	self emphasis with: aBlock</body><body package="Seaside-Canvas">small	"Defines small text."	^ self tag: 'small'</body><body package="Seaside-Canvas">small: aBlock	self small with: aBlock</body><body package="Seaside-Canvas">strong	"Defines strong text."	^ self tag: 'strong'</body><body package="Seaside-Canvas">strong: aBlock	self strong with: aBlock</body><body package="Seaside-Canvas">subscript	"Defines subscripted text."	^ self tag: 'sub'</body><body package="Seaside-Canvas">subscript: aBlock	self subscript with: aBlock</body><body package="Seaside-Canvas">superscript	"Defines superscripted text."	^ self tag: 'sup'</body><body package="Seaside-Canvas">superscript: aBlock	self superscript with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-input</category><body package="Seaside-Canvas">anchor	"Defines an anchor."	^ self brush: WAAnchorTag new</body><body package="Seaside-Canvas">anchor: aBlock	self anchor with: aBlock</body><body package="Seaside-Canvas">basicForm	^ self brush: WABasicFormTag new</body><body package="Seaside-Canvas">basicForm: aBlock	self basicForm with: aBlock</body><body package="Seaside-Canvas">colorInput	^ self brush: WAColorInputTag new</body><body package="Seaside-Canvas">dateInput5	^ self brush: WADateInputTag new</body><body package="Seaside-Canvas">dateTimeInput	^ self brush: WADateTimeInputTag new</body><body package="Seaside-Canvas">dateTimeLocalInput	^ self brush: WADateTimeLocalInputTag new</body><body package="Seaside-Canvas">emailInput	^ self brush: WAEmailInputTag new</body><body package="Seaside-Canvas">fieldSet	"Defines a fieldset."	^ self brush: WAFieldSetTag new</body><body package="Seaside-Canvas">fieldSet: aBlock	self fieldSet with: aBlock</body><body package="Seaside-Canvas">form: aBlock	self form with: aBlock</body><body package="Seaside-Canvas">label	"Defines a label for a form control."	^ self brush: WALabelTag new</body><body package="Seaside-Canvas">label: aBlock	self label with: aBlock</body><body package="Seaside-Canvas">legend	"Defines a title in a fieldset."	^ self tag: 'legend'</body><body package="Seaside-Canvas">legend: aBlock	self legend with: aBlock</body><body package="Seaside-Canvas">monthInput	^ self brush: WAMonthInputTag new</body><body package="Seaside-Canvas">numberInput	^ self brush: WANumberInputTag new</body><body package="Seaside-Canvas">popupAnchor	^ self brush: WAPopupAnchorTag new</body><body package="Seaside-Canvas">popupAnchor: aBlock	self popupAnchor with: aBlock</body><body package="Seaside-Canvas">rangeInput	^ self brush: WARangeInputTag new</body><body package="Seaside-Canvas">searchInput	^ self brush: WASearchInputTag new</body><body package="Seaside-Canvas">telephoneInput	^ self brush: WATelephoneInputTag new</body><body package="Seaside-Canvas">textArea	^ self brush: WATextAreaTag new</body><body package="Seaside-Canvas">time: aBlock	self time with: aBlock</body><body package="Seaside-Canvas">timeInput5	^ self brush: WATimeInputTag new</body><body package="Seaside-Canvas">urlInput	^ self brush: WAUrlInputTag new</body><body package="Seaside-Canvas">weekInput	^ self brush: WAWeekInputTag new</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags</category><body package="Seaside-Canvas">article	"The article element represents a section of a page that consists of a composition that forms an independent part of a document, page, or site. This could be a forum post, a magazine or newspaper article, a Web log entry, a user-submitted comment, or any other independent item of content.	An article element is 'independent' in that its contents could stand alone, for example in syndication. However, the element is still associated with its ancestors; for instance, contact information that applies to a parent body element still covers the article as well.	When article elements are nested, the inner article elements represent articles that are in principle related to the contents of the outer article. For instance, a Web log entry on a site that accepts user-submitted comments could represent the comments as article elements nested within the article element for the Web log entry.	Author information associated with an article element (q.v. the address element) does not apply to nested article elements.	Each article element potentially has a heading."	^ self tag: 'article'</body><body package="Seaside-Canvas">article: aBlock	self article with: aBlock</body><body package="Seaside-Canvas">aside	"The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.	When used as an inline-level content container, the element represents a paragraph.	Each aside element potentially has a heading. "	^ self tag: 'aside'</body><body package="Seaside-Canvas">aside: aBlock	self aside with: aBlock</body><body package="Seaside-Canvas">audio	"An audio element represents a sound or audio stream."	^ self brush: WAAudioTag new</body><body package="Seaside-Canvas">audio: aBlock	self audio with: aBlock</body><body package="Seaside-Canvas">bidirectional	"The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting."	^ self tag: 'bdi'</body><body package="Seaside-Canvas">bidirectional: aBlock	self bidirectional with: aBlock</body><body package="Seaside-Canvas">bidirectionalOverride	"The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]Authors must specify the dir attribute on this element, with the value ltr to specify a left-to-right override and with the value rtl to specify a right-to-left override."	^ self tag: 'bdo'</body><body package="Seaside-Canvas">bidirectionalOverride: aBlock	self bidirectionalOverride with: aBlock</body><body package="Seaside-Canvas">break	"Inserts a single line break."	^ self brush: WABreakTag new</body><body package="Seaside-Canvas">canvas	^ self brush: WACanvasTag new</body><body package="Seaside-Canvas">canvas: aBlock	self canvas with: aBlock</body><body package="Seaside-Canvas">command	^ self brush: WACommandTag new</body><body package="Seaside-Canvas">command: aBlock	self command with: aBlock</body><body package="Seaside-Canvas">datalist	^ self brush: WADatalistTag new</body><body package="Seaside-Canvas">datalist: aBlock	self datalist with: aBlock</body><body package="Seaside-Canvas">details	^ self brush: WADetailsTag new</body><body package="Seaside-Canvas">details: aBlock	self details with: aBlock</body><body package="Seaside-Canvas">embed	"The embed element represents an integration point for an external (typically non-HTML) application or interactive content."	^ self brush: WAEmbedTag new</body><body package="Seaside-Canvas">embed: aBlock	self embed with: aBlock</body><body package="Seaside-Canvas">figure	"no known browser support		The figure element represents a paragraph consisting of embedded content and a caption.The first embedded content element child of the figure element, if any, is the paragraph's content.The first legend element child of the element, if any, represents the caption of the embedded content. If there is no child legend element, then there is no caption. 	e.g.:	html figure: [		html legend: 'Credit: Media Inc., 2007'.		html image url: 'smith.jpg'; altText: 'Photo: J. Smith' ]"	^ self tag: 'figure'</body><body package="Seaside-Canvas">figure: aBlock	self figure with: aBlock</body><body package="Seaside-Canvas">figureCaption	"The figcaption element represents a caption or legend for the rest of the contents of the figcaption element's parent figure element, if any."	^ self tag: 'figcaption'</body><body package="Seaside-Canvas">figureCaption: aBlock	self figureCaption with: aBlock</body><body package="Seaside-Canvas">footer	"The footer element represents the footer for the section it applies to. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.	footer elements must not contain any footer, header, h1, h2, h3, h4, h5, or h6 elements, or any of the sectioning elements (such as section), as descendants.	When used as an inline-level content container, the element represents a paragraph.	Contact information for the section given in a footer should be marked up using the address element."	^ self tag: 'footer'</body><body package="Seaside-Canvas">footer: aBlock	self footer with: aBlock</body><body package="Seaside-Canvas">header	"The header element represents the header of a section. Headers may contain more than just the section's heading \u2014 for example it would be reasonable for the header to include version history information.	header elements must not contain any header elements, footer elements, or any sectioning elements (such as section) as descendants.	header elements must have at least one h1, h2, h3, h4, h5, or h6 element as a descendant. "	^ self tag: 'header'</body><body package="Seaside-Canvas">header: aBlock	self header with: aBlock</body><body package="Seaside-Canvas">heading	"Defines header 1 to header 6."	^ self brush: WAHeadingTag new</body><body package="Seaside-Canvas">heading: aBlock	self heading with: aBlock</body><body package="Seaside-Canvas">headingGroup	"The hgroup element represents the heading of a section. The element is used to group a set of h1-h6 elements when the heading has multiple levels, such as subheadings, alternative titles, or taglines.	For the purposes of document summaries, outlines, and the like, the text of hgroup elements is defined to be the text of the highest ranked h1-h6 element descendant of the hgroup element, if there are any such elements, and the first such element if there are multiple elements with that rank. If there are no such elements, then the text of the hgroup element is the empty string.	The rank of an hgroup element is the rank of the highest-ranked h1-h6 element descendant of the hgroup element, if there are any such elements, or otherwise the same as for an h1 element (the highest rank)."	^ self tag: 'hgroup'</body><body package="Seaside-Canvas">headingGroup: aBlock	self headingGroup with: aBlock</body><body package="Seaside-Canvas">horizontalRule	"Defines a horizontal rule."	^ self brush: WAHorizontalRuleTag new</body><body package="Seaside-Canvas">keyGenerator	^ self brush: WAKeyGeneratorTag new</body><body package="Seaside-Canvas">lineBreakOpportunity	"The wbr element represents a line break opportunity."	^ self brush: WAOptionalBreakTag new</body><body package="Seaside-Canvas">lineBreakOpportunity: aBlock	self lineBreakOpportunity with: aBlock</body><body package="Seaside-Canvas">marked	"no known browser support		The mark element represents a run of text in one document marked or highlighted for reference purposes.In the following snippet, a paragraph of text refers to a specific part of a code fragment.&lt;p&gt;The highlighted part below is where the error lies:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var i: Integer;begin   i := &lt;mark&gt;1.1&lt;/mark&gt;;end.&lt;/code&gt;&lt;/pre&gt;Another example of the mark element is highlighting parts of a document that are matching some search string. If someone looked at a document, and the server knew that the user was searching for the word 'kitten', then the server might return the document with one paragraph modified as follows:&lt;p&gt;I also have some &lt;mark&gt;kitten&lt;/mark&gt;s who are visiting methese days. They're really cute. I think they like my garden! Maybe Ishould adopt a &lt;mark&gt;kitten&lt;/mark&gt;.&lt;/p&gt;"	^ self tag: 'mark'</body><body package="Seaside-Canvas">marked: aBlock	self marked with: aBlock</body><body package="Seaside-Canvas">menu	^ self brush: WAMenuTag new</body><body package="Seaside-Canvas">menu: aBlock	self menu with: aBlock</body><body package="Seaside-Canvas">meter	^ self brush: WAMeterTag new</body><body package="Seaside-Canvas">meter: aBlock	self meter with: aBlock</body><body package="Seaside-Canvas">navigation	"The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.	When used as an inline-level content container, the element represents a paragraph.	Each nav element potentially has a heading."	^ self tag: 'nav'</body><body package="Seaside-Canvas">navigation: aBlock	self navigation with: aBlock</body><body package="Seaside-Canvas">output	^ self brush: WAOutputTag new</body><body package="Seaside-Canvas">output: aBlock	^ self output with: aBlock</body><body package="Seaside-Canvas">paragraph	"Defines a paragraph."	^ self tag: 'p'</body><body package="Seaside-Canvas">paragraph: aBlock	self paragraph with: aBlock</body><body package="Seaside-Canvas">progress	^ self brush: WAProgressTag new</body><body package="Seaside-Canvas">progress: aBlock	self progress with: aBlock</body><body package="Seaside-Canvas">section	"The section element represents a generic document or application section. A section, in this context, is a thematic grouping of content, typically with a header, possibly with a footer."	^ self tag: 'section'</body><body package="Seaside-Canvas">section: aBlock	self section with: aBlock</body><body package="Seaside-Canvas">source	^ self brush: WASourceTag new</body><body package="Seaside-Canvas">source: aBlock	self source with: aBlock</body><body package="Seaside-Canvas">summary	"The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any."	^ self tag: 'summary'</body><body package="Seaside-Canvas">summary: aBlock	self summary with: aBlock</body><body package="Seaside-Canvas">time	^ self brush: WATimeTag new</body><body package="Seaside-Canvas">track	^ self brush: WATrackTag new</body><body package="Seaside-Canvas">track: aBlock	self track with: aBlock</body><body package="Seaside-Canvas">video	^ self brush: WAVideoTag new</body><body package="Seaside-Canvas">video: aBlock	self video with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-program</category><body package="Seaside-Canvas">object	"Defines an embedded object."	^ self brush: WAObjectTag new</body><body package="Seaside-Canvas">object: aBlock	self object with: aBlock</body><body package="Seaside-Canvas">parameter	"Defines a parameter for an object."	^ self brush: WAParameterTag new</body><body package="Seaside-Canvas">parameter: aBlock	self parameter</body><body package="Seaside-Canvas">script	"Defines a script."	^ self brush: WAScriptTag new</body><body package="Seaside-Canvas">script: aStringOrJSObject	self script with: aStringOrJSObject</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>private</category><body package="Seaside-Canvas">spaceEntity	"The HTML entity representing a space. To be subclassed as needed."	^ '&amp;nbsp;'</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-styles</category><body package="Seaside-Canvas">div	"Defines a section in a document."	^ self tag: 'div'</body><body package="Seaside-Canvas">div: aBlock	self div with: aBlock</body><body package="Seaside-Canvas">span	"Defines a section in a document."	^ self tag: 'span'</body><body package="Seaside-Canvas">span: aBlock	self span with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>convenience</category><body package="Seaside-Canvas">encodeCharacter: aCharacter 	self html: '&amp;#' , aCharacter greaseInteger greaseString , ';'</body><body package="Seaside-Canvas">withLineBreaksAndUrls: aString	| stream |	aString ifNil: [ ^ self ].	stream := aString readStream.	[ stream atEnd ] whileFalse: [ 		self withUrls: stream nextLine.		stream atEnd			ifFalse: [ self break ] ]</body><body package="Seaside-Canvas">withUrls: aString 	| stream url |	stream := aString readStream.	[ stream atEnd ] whileFalse: 		[ self text: (stream greaseUpToAll: 'http://').		stream atEnd ifFalse: 			[ url := 'http://' , (stream upTo: Character space).			self anchor				url: url;				with: url.			self text: ' ' ] ]</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>public</category><body package="Seaside-Canvas">html: aString 	"Emit aString unescaped onto the target document."	self flush.	self document nextPutAll: aString greaseString</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>form-elements</category><body package="Seaside-Canvas">checkbox	^ self brush: WACheckboxTag new</body><body package="Seaside-Canvas">dateInput	^ self brush: WADateInput new</body><body package="Seaside-Canvas">fileUpload	^ self brush: WAFileUploadTag new</body><body package="Seaside-Canvas">hiddenInput	^ self brush: WAHiddenInputTag new</body><body package="Seaside-Canvas">multiSelect	^ self brush: WAMultiSelectTag new</body><body package="Seaside-Canvas">multiSelect: aBlock	^ self multiSelect with: aBlock</body><body package="Seaside-Canvas">option	^ self brush: WAOptionTag new</body><body package="Seaside-Canvas">option: aBlock	^ self option with: aBlock</body><body package="Seaside-Canvas">optionGroup	^ self brush: WAOptionGroupTag new</body><body package="Seaside-Canvas">optionGroup: aBlock	^ self optionGroup with: aBlock</body><body package="Seaside-Canvas">passwordInput	^ self brush: WAPasswordInputTag new</body><body package="Seaside-Canvas">passwordInput: anObject	^ self passwordInput with: anObject</body><body package="Seaside-Canvas">radioButton	^ self brush: WARadioButtonTag new</body><body package="Seaside-Canvas">radioButton: aBlock	^ self radioButton with: aBlock</body><body package="Seaside-Canvas">radioGroup	^ WARadioGroup canvas: self</body><body package="Seaside-Canvas">radioGroup: aBlock	^ aBlock value: self radioGroup</body><body package="Seaside-Canvas">select	^ self brush: WASelectTag new</body><body package="Seaside-Canvas">select: aBlock	^ self select with: aBlock</body><body package="Seaside-Canvas">textArea: anObject	^ self textArea with: anObject</body><body package="Seaside-Canvas">textInput	^ self brush: WATextInputTag new</body><body package="Seaside-Canvas">textInput: anObject	^ self textInput with: anObject</body><body package="Seaside-Canvas">timeInput	^ self brush: WATimeInput new</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>form-buttons</category><body package="Seaside-Canvas">button	^ self brush: WAButtonTag new</body><body package="Seaside-Canvas">button: anObject	^ self button with: anObject</body><body package="Seaside-Canvas">cancelButton	^ self brush: WACancelButtonTag new</body><body package="Seaside-Canvas">cancelButton: anObject	^ self cancelButton with: anObject</body><body package="Seaside-Canvas">imageButton	^ self brush: WAImageButtonTag new</body><body package="Seaside-Canvas">imageButton: anObject	^ self imageButton with: anObject</body><body package="Seaside-Canvas">submitButton	^ self brush: WASubmitButtonTag new</body><body package="Seaside-Canvas">submitButton: anObject	^ self submitButton with: anObject</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>form</category><body package="Seaside-Canvas">form	^ self brush: WAFormTag new</body></methods><methods><class-id>Seaside.WAHtmlCanvas</class-id> <category>tags-ruby</category><body package="Seaside-Canvas">ruby	^ self tag: 'ruby'</body><body package="Seaside-Canvas">ruby: aBlock	self ruby with: aBlock</body><body package="Seaside-Canvas">rubyParentheses	^ self tag: 'rp'</body><body package="Seaside-Canvas">rubyParentheses: aBlock	self rubyParentheses with: aBlock</body><body package="Seaside-Canvas">rubyText	^ self tag: 'rt'</body><body package="Seaside-Canvas">rubyText: aBlock	self rubyText with: aBlock</body></methods><methods><class-id>Seaside.WAHtmlCanvas class</class-id> <category>instance creation</category><body package="Seaside-Canvas">builder	^ super builder			rootClass: WAHtmlRoot;			documentClass: WAHtmlDocument;			yourself</body></methods><methods><class-id>Seaside.WAHtmlCanvas class</class-id> <category>class initialization</category><body package="Seaside-Canvas">initialize	self selectAsDefault</body><body package="Seaside-Canvas">unload	self unselectAsDefault</body></methods><methods><class-id>Seaside.WAClosedRangeTag</class-id> <category>attributes</category><body package="Seaside-Canvas">max: anInteger	self attributeAt: 'max' put: anInteger</body><body package="Seaside-Canvas">min: anInteger	self attributeAt: 'min' put: anInteger</body></methods><methods><class-id>Seaside.WANumberInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'number'</body></methods><methods><class-id>Seaside.WATableTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'table'</body></methods><methods><class-id>Seaside.WATableTag</class-id> <category>attributes</category><body package="Seaside-Canvas">cellpadding: anInteger	self attributes at: 'cellpadding' put: anInteger</body><body package="Seaside-Canvas">cellspacing: anInteger	self attributes at: 'cellspacing' put: anInteger</body><body package="Seaside-Canvas">frame: aString	"frame = void|above|below|hsides|lhs|rhs|vsides|box|border [CI]    This attribute specifies which sides of the frame surrounding a table will be visible. Possible values:        * void: No sides. This is the default value.        * above: The top side only.        * below: The bottom side only.        * hsides: The top and bottom sides only.        * vsides: The right and left sides only.        * lhs: The left-hand side only.        * rhs: The right-hand side only.        * box: All four sides.        * border: All four sides."	self attributes at: 'frame' put: aString</body><body package="Seaside-Canvas">rules: aString	"rules = none|groups|rows|cols|all [CI]    This attribute specifies which rules will appear between cells within a table. The rendering of rules is user agent dependent. Possible values:        * none: No rules. This is the default value.        * groups: Rules will appear between row groups (see THEAD, TFOOT, and TBODY) and column groups (see COLGROUP and COL) only.        * rows: Rules will appear between rows only.        * cols: Rules will appear between columns only.        * all: Rules will appear between all rows and columns."	self attributes at: 'rules' put: aString</body><body package="Seaside-Canvas">summary: aString	self attributes at: 'summary' put: aString</body></methods><methods><class-id>Seaside.WABreakTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'br'</body></methods><methods><class-id>Seaside.WABreakTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ true</body></methods><methods><class-id>Seaside.WAButtonTag</class-id> <category>accessing</category><body package="Seaside-Canvas">bePush	"Creates a push button. Push buttons have no default behavior. Each push button may have client-side scripts associated with the element's event attributes. When an event occurs (e.g., the user presses the button, releases it, etc.), the associated script is triggered."	type := 'button'</body><body package="Seaside-Canvas">beReset	"Creates a reset button. When activated it resets all controls to their initial values."	type := 'reset'</body><body package="Seaside-Canvas">beSubmit	"Creates a submit button. When activated, a submit button submits a form. A form may contain more than one submit button. This is the default."	type := 'submit'</body><body package="Seaside-Canvas">tag	^ 'button'</body><body package="Seaside-Canvas">type	^ type</body></methods><methods><class-id>Seaside.WAButtonTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ false</body></methods><methods><class-id>Seaside.WAButtonTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	self beSubmit</body></methods><methods><class-id>Seaside.WAButtonTag</class-id> <category>public</category><body package="Seaside-Canvas">with: aBlock	super with: (value ifNil: [ aBlock ])</body></methods><methods><class-id>Seaside.WAButtonTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aNiladicValuable 	aNiladicValuable argumentCount &gt; 0 ifTrue: [ GRInvalidArgumentCount signal: 'Buttons expect a niladic callback.' ].	self name: (self storeCallback: (WAActionCallback on: aNiladicValuable))</body><body package="Seaside-Canvas">on: aSymbol of: anObject 	self value: (self 			labelForSelector: aSymbol			of: anObject).	self callback: (GRDelayedSend 			receiver: anObject			selector: aSymbol)</body></methods><methods><class-id>Seaside.WAButtonTag</class-id> <category>attributes</category><body package="Seaside-Canvas">value	^ value</body><body package="Seaside-Canvas">value: aString	value := aString</body></methods><methods><class-id>Seaside.WAHorizontalRuleTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'hr'</body></methods><methods><class-id>Seaside.WAHorizontalRuleTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ true</body></methods><methods><class-id>Seaside.WACanvasTag</class-id> <category>attributes</category><body package="Seaside-Canvas">extent: aPoint	self width: aPoint x; height: aPoint y</body><body package="Seaside-Canvas">height: aNumber 	self 		attributeAt: 'height'		put: aNumber greaseString</body><body package="Seaside-Canvas">width: aNumber 	self 		attributeAt: 'width'		put: aNumber greaseString</body></methods><methods><class-id>Seaside.WACanvasTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'canvas'</body></methods><methods><class-id>Seaside.WAScriptTag</class-id> <category>attributes</category><body package="Seaside-Canvas">defer	"When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no 'document.write' in javascript) and thus, the user agent can continue parsing and rendering."	self attributes 		at: 'defer'		put: true</body><body package="Seaside-Canvas">resourceUrl: aString	self url: (canvas absoluteUrlForResource: aString)</body><body package="Seaside-Canvas">url: aString	self attributes at: 'src' put: aString</body></methods><methods><class-id>Seaside.WAScriptTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'script'</body></methods><methods><class-id>Seaside.WAScriptTag</class-id> <category>public</category><body package="Seaside-Canvas">with: aString 	self attributes 		at: 'type'		ifAbsentPut: [ 'text/javascript' ].	super with: [		aString isNil ifFalse: [			self document nextPutAll: aString greaseString ] ]</body></methods><methods><class-id>Seaside.WAScriptTag</class-id> <category>as yet unclassified</category><body package="Seaside-Canvas">async	"If the async attribute is present, then the script will be executed asynchronously, as soon as it is available.	See: http://www.w3.org/TR/html5/scripting-1.html#attr-script-async"	self attributes at: 'async' put: true</body></methods><methods><class-id>Seaside.WATelephoneInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'tel'</body></methods><methods><class-id>Seaside.WAHiddenInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'hidden'</body></methods><methods><class-id>Seaside.WADateTimeLocalInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'datetime-local'</body></methods><methods><class-id>Seaside.WAVideoTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'video'</body></methods><methods><class-id>Seaside.WAVideoTag</class-id> <category>attributes</category><body package="Seaside-Canvas">height: anInteger	"The videoHeight  DOM attribute must return the native height of the video in CSS pixels. In the absence of resolution information, user agents may assume that one pixel in the video corresponds to one CSS pixel."	self attributeAt: 'height' put: anInteger</body><body package="Seaside-Canvas">poster: aString	"The poster attribute gives the address of an image file that the user agent can show while no video data is available. The attribute, if present, must contain a valid non-empty URL potentially surrounded by spaces."	self attributeAt: 'poster' put: aString</body><body package="Seaside-Canvas">width: anInteger	"The videoWidth DOM attribute must return the native width of the video in CSS pixels. In the absence of resolution information, user agents may assume that one pixel in the video corresponds to one CSS pixel."	self attributeAt: 'width' put: anInteger</body></methods><methods><class-id>Seaside.WAIframeTag</class-id> <category>attributes</category><body package="Seaside-Canvas">height: anInteger	"The height of the inline frame."	self attributes at: 'height' put: anInteger</body><body package="Seaside-Canvas">name: aString	"This attribute assigns a name to the current frame. This name may be used as the target of subsequent links."	self attributes at: 'name' put: aString</body><body package="Seaside-Canvas">url	^ url ifNil: [ url := canvas actionUrl copy ]</body><body package="Seaside-Canvas">url: aUrlOrString 	url := aUrlOrString</body><body package="Seaside-Canvas">width: anInteger	"The width of the inline frame."	self attributes at: 'width' put: anInteger</body></methods><methods><class-id>Seaside.WAIframeTag</class-id> <category>accessing</category><body package="Seaside-Canvas">rootBlock	"Anser the block to render the HTML root."	^ rootBlock isNil		ifTrue: [ [ :root | root base target: '_top' ] ]		ifFalse: [ rootBlock ]</body><body package="Seaside-Canvas">rootBlock: aOneArgumentBlock	"Set the block hat is used to render the html &lt;head&gt; element. An instance of WAHtmlRoot will be passed as an argument. You'll probably want to add:		root base target: '_top' 	to your block."	rootBlock := aOneArgumentBlock</body><body package="Seaside-Canvas">tag	^ 'iframe'</body></methods><methods><class-id>Seaside.WAIframeTag</class-id> <category>convenience</category><body package="Seaside-Canvas">contents: anObject	self url: (canvas urlForAction: [ self performRendering: anObject ])</body></methods><methods><class-id>Seaside.WAIframeTag</class-id> <category>private</category><body package="Seaside-Canvas">performRendering: anObject	| innerContext docRoot document renderer |	self requestContext respond: [ :response |		innerContext := canvas context copy.		docRoot := WAHtmlRoot context: innerContext.		response contentType: WAMimeType textHtml.		response doNotCache.		self rootBlock value: docRoot.		document := self requestContext handler documentClass 			on: response stream codec: self requestContext codec.		canvas context document: document.		document open: docRoot.		renderer := canvas species context: canvas context.		renderer render: anObject; flush.		document close ]</body></methods><methods><class-id>Seaside.WAIframeTag</class-id> <category>public</category><body package="Seaside-Canvas">with: aBlock	url isNil		ifFalse: [ self attributes at: 'src' put: url ].	super with: aBlock</body></methods><methods><class-id>Seaside.WAIframeTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aNiladicValuable	"Evaluates the given valuable when the content of the iframe is loaded.	You probably want to switch the presenter of the switch the presenter of the session. See WAIframeFunctionalTest for an example.	In Seaside 3.1 this may be replaced by a dedicated continuation."	aNiladicValuable argumentCount &gt; 0 ifTrue: [ GRInvalidArgumentCount signal: 'Iframes expect a niladic callback.' ].	self url addField: (self storeCallback: (WAActionCallback on: aNiladicValuable))</body></methods><methods><class-id>Seaside.WACommandTag</class-id> <category>attributes</category><body package="Seaside-Canvas">beCheckbox	self type: 'checkbox'</body><body package="Seaside-Canvas">beChecked	self checked: true</body><body package="Seaside-Canvas">beCommand	self type: 'command'</body><body package="Seaside-Canvas">beDisabled	self disabled: true</body><body package="Seaside-Canvas">beHidden	self hidden: true</body><body package="Seaside-Canvas">beRadio	self type: 'radio'</body><body package="Seaside-Canvas">checked: aBoolean	"The checked attribute is a boolean attribute that, if present, indicates that the command is selected."	self attributeAt: 'checked' put: aBoolean</body><body package="Seaside-Canvas">disabled: aBoolean	"The disabled attribute is a boolean attribute that, if present, indicates that the command is not available in the current state."	self attributeAt: 'disabled' put: aBoolean</body><body package="Seaside-Canvas">hidden: aBoolean	"The hidden  attribute is a boolean attribute that, if present, indicates that the command is not relevant and is to be hidden."	self attributeAt: 'hidden' put: aBoolean</body><body package="Seaside-Canvas">icon: aString	"The icon  attribute gives a picture that represents the command. If the attribute is specified, the attribute's value must contain a URI (or IRI)."	self attributeAt: 'icon' put: aString</body><body package="Seaside-Canvas">label: aString	"The label  attribute gives the name of the command, as shown to the user."	self attributeAt: 'label' put: aString</body><body package="Seaside-Canvas">type: aString	"The type  attribute indicates the kind of command: either a normal command with an associated action, or a state or option that can be toggled, or a selection of one item from a list of items.The attribute's value must be either 'command', 'checkbox', or 'radio', denoting each of these three types of commands respectively. The attribute may also be omitted if the element is to represent the first of these types, a simple command. "	self attributeAt: 'type' put: aString</body></methods><methods><class-id>Seaside.WACommandTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'command'</body></methods><methods><class-id>Seaside.WASubmitButtonTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'submit'</body></methods><methods><class-id>Seaside.WASubmitButtonTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aNiladicValuable 	aNiladicValuable argumentCount &gt; 0 ifTrue: 		[ GRInvalidArgumentCount signal: 'Submit buttons expect a niladic callback.' ].	self name: (self storeCallback: (WAActionCallback on: aNiladicValuable))</body><body package="Seaside-Canvas">on: aSymbol of: anObject 	self value: (self 			labelForSelector: aSymbol			of: anObject).	self callback: (GRDelayedSend 			receiver: anObject			selector: aSymbol)</body></methods><methods><class-id>Seaside.WASubmitButtonTag</class-id> <category>public</category><body package="Seaside-Canvas">with: anObject 	anObject isNil ifFalse: [ self value: anObject greaseString ].	super with: nil</body></methods><methods><class-id>Seaside.WACancelButtonTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self name: (self storeCallback: (WACancelActionCallback on: aBlock))</body></methods><methods><class-id>Seaside.WASearchInputTag</class-id> <category>events</category><body package="Seaside-Canvas">onSearch: aString	"The search DOM event fires at the precise time the search should be performed and obeys the heuristic for the control, so you don't have to trap key and click events at all. You can use the onsearch attribute on the control to respond when the search happens."	self attributes at: 'onsearch' append: aString separator: ';'</body></methods><methods><class-id>Seaside.WASearchInputTag</class-id> <category>attributes</category><body package="Seaside-Canvas">autosave: aString	"The autosave attribute allows you to specify an autosave name for your search results in the dropdown. What's cool about the autosave is that it's global, which means that two Web sites could put up a search field with an autosave name of google and then they would share the search results. (Since the actual result values are not accessible to the page there is no privacy violation.)"	self attributeAt: 'autosave' put: aString</body><body package="Seaside-Canvas">incremental: aBoolean	"The incremental attribute can be used to control whether or not the search is performed as you type."	self attributeAt: 'incremental' put: aBoolean</body><body package="Seaside-Canvas">results: aNumber	"The results attribute allows you to specify how many results should be displayed in the dropdown."	self attributeAt: 'results' put: aNumber</body></methods><methods><class-id>Seaside.WASearchInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'search'</body></methods><methods><class-id>Seaside.WAFieldSetTag</class-id> <category>accessing</category><body package="Seaside-Canvas">legend: aString	legend := aString</body><body package="Seaside-Canvas">tag	^ 'fieldset'</body></methods><methods><class-id>Seaside.WAFieldSetTag</class-id> <category>private</category><body package="Seaside-Canvas">before	super before.	legend isNil		ifFalse: [ canvas legend: legend ]</body></methods><methods><class-id>Seaside.WAMeterTag</class-id> <category>attributes</category><body package="Seaside-Canvas">high: anInteger	"The high attribute specifies the range that is considered to be the 'high' part."	self attributeAt: 'high' put: anInteger</body><body package="Seaside-Canvas">low: anInteger	"The low attribute specifies the range that is considered to be the 'low' part."	self attributeAt: 'low' put: anInteger</body><body package="Seaside-Canvas">max: anInteger	"The the max attribute specifies the upper bound of the range."	self attributeAt: 'max' put: anInteger</body><body package="Seaside-Canvas">min: anInteger	"The min attribute specifies the lower bound of the range."	self attributeAt: 'min' put: anInteger</body><body package="Seaside-Canvas">optimum: anInteger	"The optimum attribute gives the position that is 'optimum'; if that is higher than the 'high' value then this indicates that the higher the value, the better; if it's lower than the 'low' mark then it indicates that lower values are better, and naturally if it is in between then it indicates that neither high nor low values are good."	self attributeAt: 'optimum' put: anInteger</body><body package="Seaside-Canvas">value: anInteger	"The value  attribute specifies the value to have the gauge indicate as the 'measured' value."	self attributeAt: 'value' put: anInteger</body></methods><methods><class-id>Seaside.WAMeterTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'meter'</body></methods><methods><class-id>Seaside.WAUnorderedListTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'ul'</body></methods><methods><class-id>Seaside.WAWeekInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'week'</body></methods><methods><class-id>Seaside.WAXmlCanvas</class-id> <category>private</category><body package="Seaside-Canvas">break	^ String with: Character cr with: Character lf</body><body package="Seaside-Canvas">spaceEntity	^ '&amp;#160;'</body></methods><methods><class-id>Seaside.WAXmlCanvas</class-id> <category>convenience</category><body package="Seaside-Canvas">cdata: aString	"aString must not include ']]&gt;'		Google says if there is an error in the feed, there is a 0.02% chance	that this is the cause, combined with the fact that about 7% of all feeds	have errors there is a (2 / 10000) * (7 / 100) chance this goes wrong.	Do you deal in chance?		http://googlereader.blogspot.com/2005/12/xml-errors-in-feeds.html"	self flush.	self document nextPutAll: '&lt;![CDATA['.	self document nextPutAll: aString.	self document nextPutAll: ']]&gt;'</body></methods><methods><class-id>Seaside.WAGenericTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ tag</body></methods><methods><class-id>Seaside.WAGenericTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initializeWithTag: aString	self initialize.	tag := aString</body></methods><methods><class-id>Seaside.WAGenericTag class</class-id> <category>instance creation</category><body package="Seaside-Canvas">tag: aString	^ self basicNew initializeWithTag: aString; yourself</body></methods><methods><class-id>Seaside.WAOutputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'output'</body></methods><methods><class-id>Seaside.WAOutputTag</class-id> <category>attributes</category><body package="Seaside-Canvas">for: aString	"The for content attribute allows an explicit relationship to be made between the result of a calculation and the elements that represent the values that went into the calculation or that otherwise influenced the calculation. The for attribute, if specified, must contain a string consisting of an unordered set of unique space-separated tokens that are case-sensitive, each of which must have the value of an ID of an element in the same Document."	self attributeAt: 'for' put: aString</body><body package="Seaside-Canvas">form: aString	"The form attribute is used to explicitly associate the output element with its form owner."	self attributeAt: 'form' put: aString</body><body package="Seaside-Canvas">name: aString	self attributeAt: 'name' put: aString</body></methods><methods><class-id>Seaside.WAEmailInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'email'</body></methods><methods><class-id>Seaside.WAEmailInputTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self name: (self storeCallback: (WAEmailCallback on: aBlock)).	self value: self value</body></methods><methods><class-id>Seaside.WAEmailInputTag</class-id> <category>private</category><body package="Seaside-Canvas">allValuesCallbackClass	^ WAAllEmailsCallback</body></methods><methods><class-id>Seaside.WATimeInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'time'</body></methods><methods><class-id>Seaside.WAOptionTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'option'</body></methods><methods><class-id>Seaside.WAOptionTag</class-id> <category>attributes</category><body package="Seaside-Canvas">label: aString	"This attribute allows authors to specify a shorter label for an option than the content of the OPTION element. When specified, user agents should use the value of this attribute rather than the content of the OPTION element as the option label."	self attributes at: 'label' put: aString</body><body package="Seaside-Canvas">selected: aBoolean	self attributes at: 'selected' put: aBoolean</body><body package="Seaside-Canvas">value: aString	self attributes at: 'value' put: aString</body><body package="Seaside-Canvas">value: anObject with: aListTag	self selected: (aListTag isSelected: anObject).	self value: (aListTag valueFor: anObject)</body></methods><methods><class-id>Seaside.WAOptionTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self value: (self storeCallback: (WAValueCallback on: aBlock))</body></methods><methods><class-id>Seaside.WAHeadingTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	self level1</body></methods><methods><class-id>Seaside.WAHeadingTag</class-id> <category>accessing</category><body package="Seaside-Canvas">level	^ level</body><body package="Seaside-Canvas">level: anInteger	level := (anInteger max: 1) min: 6</body><body package="Seaside-Canvas">tag	^ 'h' , self level greaseString</body></methods><methods><class-id>Seaside.WAHeadingTag</class-id> <category>convenience</category><body package="Seaside-Canvas">level1	level := 1</body><body package="Seaside-Canvas">level2	level := 2</body><body package="Seaside-Canvas">level3	level := 3</body><body package="Seaside-Canvas">level4	level := 4</body><body package="Seaside-Canvas">level5	level := 5</body><body package="Seaside-Canvas">level6	level := 6</body></methods><methods><class-id>Seaside.WADatalistTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'datalist'</body><body package="Seaside-Canvas">values: aBlock	"Allows to customize the rendering of list items by passing a one argument block that converts each option to a string for use in the 'value' attribute. If you need to do more customized html rendering for the options use #with: or override #renderOn: in your objects."	valueBlock := aBlock fixCallbackTemps</body></methods><methods><class-id>Seaside.WADatalistTag</class-id> <category>private</category><body package="Seaside-Canvas">renderListItem: anObject labelled: labelString	canvas option		value: (self valueFor: anObject);		selected: (self isSelected: anObject);		with: labelString</body><body package="Seaside-Canvas">valueFor: anObject	^ valueBlock isNil		ifTrue: [ anObject ]		ifFalse: [ valueBlock value: anObject ]</body></methods><methods><class-id>Seaside.WAKeyGeneratorTag</class-id> <category>attributes</category><body package="Seaside-Canvas">challenge: aString	"Specifies the challenge string to be packaged with the public key for use in verification of the form submission. If no challenge string is provided, then it is encoded as an 'IA5STRING' of length zero. "	self attributeAt: 'challenge' put: aString</body><body package="Seaside-Canvas">keyType: aString	"This attribute specifies the type of encryption security method to use to verify the receiver.     Values: 'RSA' (default) or 'DSA'"	self attributeAt: 'keytype' put: aString</body><body package="Seaside-Canvas">name: aString	"The same as WAFormInputTag &gt;&gt; #name:"	self attributeAt: 'name' put: aString</body><body package="Seaside-Canvas">pqg: aString	"This attribute appears to be a security string to be sent and verified."	self attributeAt: 'pqg' put: aString</body></methods><methods><class-id>Seaside.WAKeyGeneratorTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'keygen'</body></methods><methods><class-id>Seaside.WAKeyGeneratorTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self name: (self storeCallback: (WAValueCallback on: aBlock))</body></methods><methods><class-id>Seaside.WAKeyGeneratorTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ true</body></methods><methods><class-id>Seaside.WAFormTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">defaultAction: aBlock	"The default action gets evaluated whenever the user presses submits	the form by pressing enter without having the focus on a specific	submit-button."	defaultAction := aBlock</body></methods><methods><class-id>Seaside.WAFormTag</class-id> <category>private</category><body package="Seaside-Canvas">after	super after.	self isGet ifTrue: [		"Normally we have the session and continuation id in the action URL. However		in the case of a GET &lt;form&gt; the browser will drop them."		canvas div: [			canvas actionUrl queryFields keysAndValuesDo: [ :k :v |				canvas hiddenInput					name: k;					value: v ] ] ]</body><body package="Seaside-Canvas">before	"Define the default action form buttons. Some implementation notes on this feature: (1) a tab-index of -1 is not valid XHTML, but most todays browser accept it and ignore the element in the tab-order. (2) Internet Explorer requires an additional text field (without other functionality) to make the default action work. Other browser should not include this text-field, as it prevents remembering form input."	super before.	defaultAction ifNil: [ ^ nil ].	canvas div: [		canvas submitButton			tabIndex: -1;			value: 'Default';			callback: defaultAction;			style: 'position: absolute; top: -100em'.		self isInternetExplorer ifTrue: [			canvas textInput				tabIndex: -1;				callback: [ :v | ];				style: 'position: absolute; top: -100em' ] ]</body><body package="Seaside-Canvas">isInternetExplorer	"Tries to find out whether the current request is made by IE. This is extremely unreliable."	| userAgent |	userAgent := self requestContext request userAgent.	^ userAgent notNil		and: [ (userAgent indexOfSubCollection: 'MSIE' startingAt: 1) ~= 0		and: [ (userAgent indexOfSubCollection: 'Opera' startingAt: 1) = 0 ] ]</body></methods><methods><class-id>Seaside.WAFormTag</class-id> <category>testing</category><body package="Seaside-Canvas">isGet	^ (self attributeAt: 'method') = 'get'</body></methods><methods><class-id>Seaside.WAOptionalBreakTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'wbr'</body></methods><methods><class-id>Seaside.WAOptionalBreakTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ true</body></methods><methods><class-id>Seaside.WATrackTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'track'</body></methods><methods><class-id>Seaside.WATrackTag</class-id> <category>attributes</category><body package="Seaside-Canvas">beDefault	self default: true</body><body package="Seaside-Canvas">default: aBoolean	"The default attribute, if specified, indicates that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate. There must not be more than one track element with the same parent node with the default attribute specified."	self attributeAt: 'default' put: aBoolean</body><body package="Seaside-Canvas">label: aString	"The label attribute gives a user-readable title for the track. This title is used by user agents when listing subtitle, caption, and audio description tracks in their user interface."	self attributeAt: 'label' put: aString</body><body package="Seaside-Canvas">sourceLanguage: aString	"The srclang attribute gives the language of the text track data. The value must be a valid BCP 47 language tag. This attribute must be present if the element's kind attribute is in the subtitles state."	self attributeAt: 'srclang' put: aString</body><body package="Seaside-Canvas">url: aUrlOrString	"The src attribute gives the address of the text track data. The value must be a valid non-empty URL potentially surrounded by spaces. This attribute must be present."	self attributeAt: 'src' put: aUrlOrString</body></methods><methods><class-id>Seaside.WATrackTag</class-id> <category>attributes-kind</category><body package="Seaside-Canvas">beCaptions	"Transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information, suitable for when the soundtrack is unavailable or not clearly audible (e.g. because it is muted, drowned-out by ambient noise, or because the user is deaf). Overlaid on the video; labeled as appropriate for the hard-of-hearing."	self kind: 'captions'</body><body package="Seaside-Canvas">beChapters	"Chapter titles, intended to be used for navigating the media resource. Displayed as an interactive (potentially nested) list in the user agent's interface."	self kind: 'chapters'</body><body package="Seaside-Canvas">beDescriptions	"Textual descriptions of the video component of the media resource, intended for audio synthesis when the visual component is obscured, unavailable, or not usable (e.g. because the user is interacting with the application without a screen while driving, or because the user is blind). Synthesized as audio."	self kind: 'descriptions'</body><body package="Seaside-Canvas">beMetadata	"Tracks intended for use from script. Not displayed by the user agent."	self kind: 'metadata'</body><body package="Seaside-Canvas">beSubtitles	"Transcription or translation of the dialogue, suitable for when the sound is available but not understood (e.g. because the user does not understand the language of the media resource's soundtrack). Overlaid on the video."	self kind: 'subtitles'</body><body package="Seaside-Canvas">kind: aString	"The kind attribute is an enumerated attribute."	self attributeAt: 'kind' put: aString</body></methods><methods><class-id>Seaside.WAUrlInputTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self name: (self storeCallback: (WAUrlCallback on: aBlock)).	self value: self value</body></methods><methods><class-id>Seaside.WAUrlInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'url'</body></methods><methods><class-id>Seaside.WAUrlInputTag</class-id> <category>private</category><body package="Seaside-Canvas">allValuesCallbackClass	^ WAAllUrlsCallback</body></methods><methods><class-id>Seaside.WATableDataTag</class-id> <category>attributes</category><body package="Seaside-Canvas">abbreviation: aString	"This attribute should be used to provide an abbreviated form of the cell's content, and may be rendered by user agents when appropriate in place of the cell's content. Abbreviated names should be short since user agents may render them repeatedly. For instance, speech synthesizers may render the abbreviated headers relating to a particular cell before rendering that cell's content."		self attributes at: 'abbr' put: aString</body><body package="Seaside-Canvas">axis: aString	"This attribute may be used to place a cell into conceptual categories that can be considered to form axes in an n-dimensional space. User agents may give users access to these categories (e.g., the user may query the user agent for all cells that belong to certain categories, the user agent may present a table in the form of a table of contents, etc.). Please consult the section on categorizing cells for more information. The value of this attribute is a comma-separated list of category names."		self attributes at: 'axis' put: aString</body><body package="Seaside-Canvas">colSpan: anInteger	"This attribute specifies the number of columns spanned by the current cell. The default value of this attribute is one. The value zero means that the cell spans all columns from the current column to the last column of the column group (colgroup) in which the cell is defined."		self attributes at: 'colspan' put: anInteger</body><body package="Seaside-Canvas">headers: aString	"This attribute specifies the list of header cells that provide header information for the current data cell. The value of this attribute is a space-separated list of cell names; those cells must be named by setting their id attribute. Authors generally use the headers attribute to help non-visual user agents render header information about data cells (e.g., header information is spoken prior to the cell data), but the attribute may also be used in conjunction with style sheets. See also the scope attribute."		self attributes at: 'headers' put: aString</body><body package="Seaside-Canvas">rowSpan: anInteger	"This attribute specifies the number of rows spanned by the current cell. The default value of this attribute is one. The value zero means that the cell spans all rows from the current row to the last row of the current table section (rowgroup) in which the cell is defined. thead, tbody, and tfoot elements are rowgroups."		self attributes at: 'rowspan' put: anInteger</body><body package="Seaside-Canvas">scope: aString	"This attribute specifies the set of data cells for which the current header cell provides header information. This attribute may be used in place of the headers attribute, particularly for simple tables. When specified, this attribute must have one of the following values:- row: The current cell provides header information for the rest of the row that contains it (see also the section on table directionality).- col: The current cell provides header information for the rest of the column that contains it.- rowgroup: The header cell provides header information for the rest of the row group that contains it.- colgroup: The header cell provides header information for the rest of the column group that contains it."	self attributes at: 'scope' put: aString</body></methods><methods><class-id>Seaside.WATableDataTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'td'</body></methods><methods><class-id>Seaside.WAMonthInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'month'</body></methods><methods><class-id>Seaside.WAEmbedTag</class-id> <category>attributes</category><body package="Seaside-Canvas">height: anInteger	self attributeAt: 'height' put: anInteger</body><body package="Seaside-Canvas">type: aMimeType	self attributeAt: 'type' put: aMimeType</body><body package="Seaside-Canvas">url: aString	"The src attribute gives the address of the resource being embedded."	self attributeAt: 'src' put: aString</body><body package="Seaside-Canvas">width: anInteger	self attributeAt: 'width' put: anInteger</body></methods><methods><class-id>Seaside.WAEmbedTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'embed'</body></methods><methods><class-id>Seaside.WAImageButtonTag</class-id> <category>attributes</category><body package="Seaside-Canvas">extent: aPoint	self width: aPoint x; height: aPoint y</body><body package="Seaside-Canvas">height: aNumber	self attributes at: 'height' put: aNumber</body><body package="Seaside-Canvas">url: aString	self attributes at: 'src' put: aString</body><body package="Seaside-Canvas">width: aNumber	self attributes at: 'width' put: aNumber</body></methods><methods><class-id>Seaside.WAImageButtonTag</class-id> <category>accessing</category><body package="Seaside-Canvas">resourceUrl: aString	self url: (canvas absoluteUrlForResource: aString)</body><body package="Seaside-Canvas">type	^ 'image'</body></methods><methods><class-id>Seaside.WAImageButtonTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	self name: (self storeCallback: (WAImageCallback on: aBlock))</body></methods><methods><class-id>Seaside.WADateInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'date'</body></methods><methods><class-id>Seaside.WAAnchorTag</class-id> <category>attributes</category><body package="Seaside-Canvas">charset: aString	"This attribute specifies the character encoding of the resource designated by the link."		self attributes at: 'charset' put: aString</body><body package="Seaside-Canvas">media: aString	"This attribute specifies the intended destination medium for style information. It may be a single media descriptor or a comma-separated list. The default value for this attribute is 'screen'."	self attributeAt: 'media' put: aString</body><body package="Seaside-Canvas">name: aString	"This attribute names the current anchor so that it may be the destination of another link. The value of this attribute must be a unique anchor name. The scope of this name is the current document. Note that this attribute shares the same name space as the id attribute."	self attributes at: 'name' put: aString</body><body package="Seaside-Canvas">relationship: aString	"This attribute describes the relationship from the current document to the anchor specified by the href attribute. The value of this attribute is a space-separated list of link types."		self attributes at: 'rel' append: aString</body><body package="Seaside-Canvas">reverse: aString	"This attribute is used to describe a reverse link from the anchor specified by the href attribute to the current document. The value of this attribute is a space-separated list of link types."		self attributes at: 'rev' append: aString</body><body package="Seaside-Canvas">target: aString 	"This attribute specifies the name of a frame where a document is to be opened."		self attributes at: 'target' put: aString</body><body package="Seaside-Canvas">type: aString	"This attribute gives an advisory hint as to the content type of the content available at the link target address. It allows user agents to opt to use a fallback mechanism rather than fetch the content if they are advised that they will get content in a content type they do not support."		self attributes at: 'type' put: aString</body></methods><methods><class-id>Seaside.WAAnchorTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'a'</body><body package="Seaside-Canvas">url	^ url ifNil: [ url := canvas actionUrl copy ]</body><body package="Seaside-Canvas">url: aUrlOrString	url := aUrlOrString</body></methods><methods><class-id>Seaside.WAAnchorTag</class-id> <category>url</category><body package="Seaside-Canvas">extraParameters: aString	self url addField: aString</body><body package="Seaside-Canvas">extraPath: aString	self url addToPath: aString</body><body package="Seaside-Canvas">fragment: aString	self url fragment: aString</body><body package="Seaside-Canvas">resourceUrl: aString	self url: (canvas absoluteUrlForResource: aString)</body></methods><methods><class-id>Seaside.WAAnchorTag</class-id> <category>public</category><body package="Seaside-Canvas">navigation	"Makes the receiving anchor a purely navigational link, this is it won't redirect after processing the callbacks but directly process with the render phase. Don't use this feature if you change your model in the callback'."	self url addField: '_n'</body><body package="Seaside-Canvas">useBaseUrl	"Instead of using the URL of the current page that has been modified through #updateUrl:, use the base URL."	self url: canvas actionBaseUrl copy</body><body package="Seaside-Canvas">with: aBlock	url isNil		ifFalse: [ self attributes at: 'href' put: url ].	super with: aBlock</body></methods><methods><class-id>Seaside.WAAnchorTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aNiladicValuable 	aNiladicValuable argumentCount &gt; 0 ifTrue: [ GRInvalidArgumentCount signal: 'Anchors expect a niladic callback.' ].	self url addField: (self storeCallback: (WAActionCallback on: aNiladicValuable))</body><body package="Seaside-Canvas">on: aSymbol of: anObject 	self callback: (GRDelayedSend 			receiver: anObject			selector: aSymbol).	self with: (self 			labelForSelector: aSymbol			of: anObject)</body></methods><methods><class-id>Seaside.WAImageMapTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	"The parameter for the image-map callback must be the last one, as the web-browser will use the same name and replace it with the coordinates."	self url addField: (self storeCallback: (WAMapCallback on: aBlock)) value: ''</body></methods><methods><class-id>Seaside.WATableHeadingTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'th'</body></methods><methods><class-id>Seaside.WASourceTag</class-id> <category>attributes</category><body package="Seaside-Canvas">media: aString	"The media  attribute gives the intended media type of the media resource, to help the user agent determine if this media resource is useful to the user before downloading it. Its value must be a valid media query. [MQ]"	self attributeAt: 'media' put: aString</body><body package="Seaside-Canvas">sourceSet: aString	"One or more image candidate strings, each separated from the next by a $, (U+002C) character.	http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#attr-picture-source-srcset"	self attributes at: 'srcset' put: aString</body><body package="Seaside-Canvas">type: aString	"The type  attribute gives the type of the media resource, to help the user agent determine if it can play this media resource before downloading it. Its value must be a MIME type. The codec parameter may be specified and might be necessary to specify exactly how the resource is encoded.	http://www.faqs.org/rfcs/rfc2046.html	http://www.faqs.org/rfcs/rfc4281.html"	self attributeAt: 'type' put: aString</body><body package="Seaside-Canvas">url: aString	"The src attribute gives the address of the media resource. The value must be a URI (or IRI). This attribute must be present."	self attributeAt: 'src' put: aString</body></methods><methods><class-id>Seaside.WASourceTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'source'</body></methods><methods><class-id>Seaside.WAOrderedListTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'ol'</body></methods><methods><class-id>Seaside.WAOrderedListTag</class-id> <category>attributes</category><body package="Seaside-Canvas">reversed: aBoolean	"The reversed attribute is a boolean attribute. If present, it indicates that the list is a descending list (..., 3, 2, 1). If the attribute is omitted, the list is an ascending list (1, 2, 3, ...)."	self attributes at: 'reversed' put: aBoolean</body><body package="Seaside-Canvas">start: anInteger	"The start attribute, if present, must be a valid integer giving the ordinal value of the first list item.If the start attribute is present, user agents must parse it as an integer, in order to determine the attribute's value. The default value, used if the attribute is missing or if the value cannot be converted to a number according to the referenced algorithm, is 1 if the element has no reversed attribute, and is the number of child li elements otherwise.The first item in the list has the ordinal value given by the ol element's start attribute, unless that li element has a value attribute with a value that can be successfully parsed, in which case it has the ordinal value given by that value attribute.Each subsequent item in the list has the ordinal value given by its value attribute, if it has one, or, if it doesn't, the ordinal value of the previous item, plus one if the reversed is absent, or minus one if it is present."	self attributes at: 'start' put: anInteger</body><body package="Seaside-Canvas">type: aString	"The type attribute can be used to specify the kind of marker to use in the list, in the cases where that matters (e.g. because items are to be referened by their number/letter). The attribute, if specified, must have a value that is a case-sensitive match for one of the characters given in the first cell of one of the rows of the following table. The type attribute represents the state given in the cell in the second column of the row whose first cell matches the attribute's value; if none of the cells match, or if the attribute is omitted, then the attribute represents the decimal state.Keyword 	State 	Description 	Examples for values 1-3 and 3999-40011 (U+0031) 	decimal 	Decimal numbers 	1. 	2. 	3. 	... 	3999. 	4000. 	4001. 	...a (U+0061) 	lower-alpha 	Lowercase latin alphabet 	a. 	b. 	c. 	... 	ewu. 	ewv. 	eww. 	...A (U+0041) 	upper-alpha 	Uppercase latin alphabet 	A. 	B. 	C. 	... 	EWU. 	EWV. 	EWW. 	...i (U+0069) 	lower-roman 	Lowercase roman numerals 	i. 	ii. 	iii. 	... 	mmmcmxcix. 	iv. 	ivi. 	...I (U+0049) 	upper-roman 	Uppercase roman numerals 	I. 	II. 	III. 	... 	MMMCMXCIX. 	IV. 	IVI. 	...User agents should render the items of the list in a manner consistent with the state of the type attribute of the ol element. Numbers less than or equal to zero should always use the decimal system regardless of the type attribute."	self attributes at: 'type' put: aString</body></methods><methods><class-id>Seaside.WAPopupAnchorTag</class-id> <category>features</category><body package="Seaside-Canvas">dependent: aBoolean	"Specifies whether the new window is closed as well when the parent window gets closed."	features at: #dependent put: aBoolean</body><body package="Seaside-Canvas">extent: aPoint	"Specifies the width and height of the new window."	self width: aPoint x; height: aPoint y</body><body package="Seaside-Canvas">height: anInteger	"Specifies the height of the new window."	features at: #height put: anInteger</body><body package="Seaside-Canvas">left: anInteger	"Specifies the x coordinate of the top left corner of the new window. "	features at: #left put: anInteger</body><body package="Seaside-Canvas">location: aBoolean	"Specifies whether to display the address line in the new window."	features at: #location put: aBoolean</body><body package="Seaside-Canvas">menubar: aBoolean	"Specifies whether to display the browser menu bar."	features at: #menubar put: aBoolean</body><body package="Seaside-Canvas">position: aPoint	"Specifies the x and y coordinates of the top left corner of the new window."	self left: aPoint x; top: aPoint y</body><body package="Seaside-Canvas">resizable: aBoolean	"Specifies whether the new window is resizable."	features at: #resizable put: aBoolean</body><body package="Seaside-Canvas">scrollbars: aBoolean	"Specifies whether the new window should have scrollbars."	features at: #scrollbars put: aBoolean</body><body package="Seaside-Canvas">status: aBoolean	"Specifies whether to display the browser status bar."	features at: #status put: aBoolean</body><body package="Seaside-Canvas">toolbar: aBoolean	"Specifies whether to display the toolbar in the new window."	features at: #toolbar put: aBoolean</body><body package="Seaside-Canvas">top: anInteger	"Specifies the y coordinate of the top left corner of the new window. "	features at: #top put: anInteger</body><body package="Seaside-Canvas">width: anInteger	"Specifies the width of the new window."	features at: #width put: anInteger</body></methods><methods><class-id>Seaside.WAPopupAnchorTag</class-id> <category>private</category><body package="Seaside-Canvas">featureString	^ String streamContents:  [ :stream | 		features associations do: [ :association | 				stream					nextPutAll: association key;					nextPut: $=.				stream nextPutAll: (association value == true 						ifTrue: [ 'yes' ]						ifFalse: [							association value == false 								ifTrue: [ 'no' ]								ifFalse: [ association value greaseString ] ]) ]			separatedBy: [ stream nextPut: $, ] ]</body></methods><methods><class-id>Seaside.WAPopupAnchorTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	windowTitle := '_blank'.	features := GRSmallDictionary new</body></methods><methods><class-id>Seaside.WAPopupAnchorTag</class-id> <category>accessing</category><body package="Seaside-Canvas">windowTitle	^ windowTitle</body><body package="Seaside-Canvas">windowTitle: aString	"String specifying the name of the new window. If a window with this name already exists, then the new content will be displayed in that existing window, rather than creating a new one."	windowTitle := aString</body></methods><methods><class-id>Seaside.WAPopupAnchorTag</class-id> <category>public</category><body package="Seaside-Canvas">with: aBlock	self onClick: 'window.open(this.href,' , self windowTitle printString , ',' , self featureString printString , ');return false'.	super with: aBlock</body></methods><methods><class-id>Seaside.WAObjectTag</class-id> <category>attributes</category><body package="Seaside-Canvas">archive: aUrl 	self attributes 		at: 'archive'		put: aUrl</body><body package="Seaside-Canvas">classId: aUrl 	self attributes 		at: 'classid'		put: aUrl</body><body package="Seaside-Canvas">codebase: aUrl 	self attributes 		at: 'codebase'		put: aUrl</body><body package="Seaside-Canvas">codetype: aString 	self attributes 		at: 'codetype'		put: aString</body><body package="Seaside-Canvas">declare: aBoolean 	self attributes 		at: 'declare'		put: aBoolean</body><body package="Seaside-Canvas">height: anInteger 	self attributes 		at: 'height'		put: anInteger</body><body package="Seaside-Canvas">standby: aString 	self attributes 		at: 'standby'		put: aString</body><body package="Seaside-Canvas">type: aString 	self attributes 		at: 'type'		put: aString</body><body package="Seaside-Canvas">url: aUrl 	self attributes 		at: 'data'		put: aUrl</body><body package="Seaside-Canvas">width: anInteger 	self attributes 		at: 'width'		put: anInteger</body></methods><methods><class-id>Seaside.WAObjectTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'object'</body></methods><methods><class-id>Seaside.WARangeInputTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'range'</body></methods><methods><class-id>Seaside.WAProgressTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'progress'</body></methods><methods><class-id>Seaside.WAProgressTag</class-id> <category>attributes</category><body package="Seaside-Canvas">max: anInteger	"The max attribute specifies how much work the task requires in total"	self attributeAt: 'max' put: anInteger</body><body package="Seaside-Canvas">value: anInteger	"The value  attribute specifies how much of the task has been completed."	self attributeAt: 'value' put: anInteger</body></methods><methods><class-id>Seaside.WAEditTag</class-id> <category>attributes</category><body package="Seaside-Canvas">cite: aUrl 	"The value of this attribute is a URI that designates a source document or message. This attribute is intended to point to information explaining why a document was changed."	self attributes 		at: 'cite'		put: aUrl</body><body package="Seaside-Canvas">datetime: anObject 	"The value of this attribute specifies the date and time when the change was made.	ISO date format"	self attributes 		at: 'datetime'		put: anObject</body></methods><methods><class-id>Seaside.WAImageTag</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	self altText: ''</body><body package="Seaside-Canvas">setParent: aBrush canvas: aCanvas 	super 		setParent: aBrush		canvas: aCanvas.	(aBrush isKindOf: WAImageMapTag) ifTrue: [ 		"in case the parent is an image map we need to set this attribute"		self attributes 			at: 'ismap'			put: true ]</body></methods><methods><class-id>Seaside.WAImageTag</class-id> <category>attributes</category><body package="Seaside-Canvas">altText: aString	"The alt attribute provides a short description of the image."	self attributes at: 'alt' put: aString</body><body package="Seaside-Canvas">height: anInteger	self attributes at: 'height' put: anInteger</body><body package="Seaside-Canvas">sourceSet: aString	"One or more image candidate strings, each separated from the next by a $, (U+002C) character.	http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#attr-picture-source-srcset"	self attributes at: 'srcset' put: aString</body><body package="Seaside-Canvas">url: aString	self attributes at: 'src' put: aString</body><body package="Seaside-Canvas">width: anInteger	self attributes at: 'width' put: anInteger</body></methods><methods><class-id>Seaside.WAImageTag</class-id> <category>testing</category><body package="Seaside-Canvas">isClosed	^ true</body></methods><methods><class-id>Seaside.WAImageTag</class-id> <category>accessing</category><body package="Seaside-Canvas">resourceUrl: aString	self url: (canvas absoluteUrlForResource: aString)</body><body package="Seaside-Canvas">tag	^ 'img'</body></methods><methods><class-id>Seaside.WATimeInput</class-id> <category>accessing</category><body package="Seaside-Canvas">withSeconds	withSeconds := true</body><body package="Seaside-Canvas">withoutSeconds	withSeconds := false</body></methods><methods><class-id>Seaside.WATimeInput</class-id> <category>initialization</category><body package="Seaside-Canvas">initialize	super initialize.	self withoutSeconds</body></methods><methods><class-id>Seaside.WATimeInput</class-id> <category>private-rendering</category><body package="Seaside-Canvas">renderHours	| brush |	brush := canvas textInput		id: self id;		value: (GRNumberPrinter new				padding: $0;				digits: 2;				print: hours).	self addHoursCallbackToBrush: brush.	brush		attributeAt: 'size'			put: 2;		attributeAt: 'maxlength'			put: 2</body><body package="Seaside-Canvas">renderMinutes	| brush |	brush := canvas textInput		id: (self id isNil ifFalse: [ self id , '-mins' ]);		value: (GRNumberPrinter new				padding: $0;				digits: 2;				print: minutes);		yourself.	self addMinutesCallbackToBrush: brush.	brush		attributeAt: 'size'			put: 2;		attributeAt: 'maxlength'			put: 2</body><body package="Seaside-Canvas">renderSeconds	| brush |	brush := canvas textInput		id: (self id isNil ifFalse: [ self id , '-secs' ]);		value: (GRNumberPrinter new				padding: $0;				digits: 2;				print: seconds);		yourself.	self addSecondsCallbackToBrush: brush.	brush		attributeAt: 'size'			put: 2;		attributeAt: 'maxlength'			put: 2</body></methods><methods><class-id>Seaside.WATimeInput</class-id> <category>private callbacks</category><body package="Seaside-Canvas">addHoursCallbackToBrush: aBrush	self hasCallback		ifFalse: [ ^ self ].	aBrush callback: [ :v | self hours: v ]</body><body package="Seaside-Canvas">addMinutesCallbackToBrush: aBrush	self hasCallback		ifFalse: [ ^ self ].	aBrush callback: [ :v | self minutes: v ]</body><body package="Seaside-Canvas">addSecondsCallbackToBrush: aBrush	self hasCallback		ifFalse: [ ^ self ].	aBrush callback: [ :v | self seconds: v ]</body><body package="Seaside-Canvas">hours	^ hours</body><body package="Seaside-Canvas">hours: anIntegerOrString 	hours := anIntegerOrString greaseInteger ifNil: [ 0 ]</body><body package="Seaside-Canvas">minutes	^ minutes</body><body package="Seaside-Canvas">minutes: anIntegerOrString 	minutes := anIntegerOrString greaseInteger ifNil: [ 0 ]</body><body package="Seaside-Canvas">seconds	^ seconds</body><body package="Seaside-Canvas">seconds: anIntegerOrString	seconds := [ anIntegerOrString asNumber ] on: Error do: [ :e | 0 ]</body><body package="Seaside-Canvas">setValueWithNewTime	^ value := Time hour: hours minute: (minutes min: 59) second: (seconds min: 59)</body></methods><methods><class-id>Seaside.WATimeInput</class-id> <category>public</category><body package="Seaside-Canvas">with: anObject	super with: anObject.	value isNil		ifTrue: [ value := Time now ].	hours := value hour.	minutes := value minute.	seconds := value second.	self renderHours.	canvas		space;		text: ':';		space.	self renderMinutes.	withSeconds		ifTrue: [ 			canvas				space;				text: ':';				space.			self renderSeconds ]		ifFalse: [ seconds := 0 ].	self addCallback</body></methods><methods><class-id>Seaside.WATimeInput</class-id> <category>private</category><body package="Seaside-Canvas">addCallback	self hasCallback ifFalse: [		canvas flush.		^ self ].	canvas hiddenInput		callback: [ callbackBlock value: self setValueWithNewTime ];		 with: nil</body></methods><methods><class-id>Seaside.WACheckboxTag</class-id> <category>accessing</category><body package="Seaside-Canvas">type	^ 'checkbox'</body></methods><methods><class-id>Seaside.WACheckboxTag</class-id> <category>attributes</category><body package="Seaside-Canvas">onTrue: trueBlock onFalse: falseBlock	trueBlock fixCallbackTemps. falseBlock fixCallbackTemps.	self callback: [ :v | v ifTrue: [ trueBlock value ] ifFalse: [ falseBlock value ] ]</body><body package="Seaside-Canvas">value: aBoolean 	self attributes 		at: 'checked'		put: aBoolean</body></methods><methods><class-id>Seaside.WACheckboxTag</class-id> <category>private</category><body package="Seaside-Canvas">after	super after.	callback isNil ifTrue: [ ^ self ].	canvas hiddenInput 		callback: [			callback value: value.			value := false ]</body></methods><methods><class-id>Seaside.WACheckboxTag</class-id> <category>callbacks</category><body package="Seaside-Canvas">callback: aBlock	"Compared to other form elements this input element is disabled then the callback will still be evaluted but with an argument that is false. So either don't assign a callback to disabled checkboxes or make the callback code aware that he might be invoked in a disabled state.		However if you enable a disabled checkbox with JavaScript then the callback is invoked with the correct argument.		http://code.google.com/p/seaside/issues/detail?id=18"	value := false.	callback := aBlock fixCallbackTemps.	super callback: [ value := true ]</body></methods><methods><class-id>Seaside.WAParameterTag</class-id> <category>attributes</category><body package="Seaside-Canvas">name: aString 	self attributes 		at: 'name'		put: aString</body><body package="Seaside-Canvas">type: aString 	self attributes 		at: 'type'		put: aString</body><body package="Seaside-Canvas">value: aString 	self attributes 		at: 'value'		put: aString</body></methods><methods><class-id>Seaside.WAParameterTag</class-id> <category>accessing</category><body package="Seaside-Canvas">tag	^ 'param'</body></methods><methods><class-id>Seaside.WARequestContext</class-id> <category>*seaside-canvas</category><body package="Seaside-Canvas">closeThisPopup	^ self respond: [ :resp |		resp 			contentType: WAMimeType textHtml;			nextPutAll: (WAHtmlCanvas builder				fullDocument: true;				rootBlock: [ :root | 					root title: 'Seaside'; beHtml5 ];				render: [ :html | html script: 'window.close();' ]) ]</body><body package="Seaside-Canvas">closeThisPopupAndReloadOpener	^ self respond: [ :resp |		resp			contentType: WAMimeType textHtml;			nextPutAll: (WAHtmlCanvas builder				fullDocument: true;				rootBlock: [ :root | 					root title: 'Seaside'; beHtml5 ];				render: [ :html | html script: 'window.close();window.opener.location=window.opener.location;' ]) ]</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-canvas</category><body package="Seaside-Canvas">seasideCanvas	^ self new		name: 'Seaside-Canvas';		description: 'The mechanism of choice to generate valid and reusable XHTML markup.';		addDependency: 'Seaside-Core';		url: #seasideUrl;		yourself</body></methods><initialize><class-id>Seaside.WAHtmlCanvas</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARequestContext</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handlers request response codec consumer properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARenderer</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>context lastId </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Seaside-Core-Rendering</category><attributes><package>Seaside-Core</package></attributes></class></st-source>