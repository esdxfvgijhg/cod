<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-SessionComment: Unit tests for the package Seaside-Session.DbIdentifier: bear73DbTrace: 492648DbUsername: jkottDbVersion: 3.2.0 - pmm.81 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Session' '') #(#any 'Seaside-Tests-Core' '') #(#any 'Seaside-Tests-Canvas' ''))Id: 1cd6e2f2-3aaf-4cd6-98a0-8d0240f2ad88Namespace: SeasidePackageName: Seaside-Tests-SessionParcel: #('Seaside-Tests-Session')ParcelName: Seaside-Tests-SessionPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Session' '') #('Seaside-Tests-Core' '') #('Seaside-Tests-Canvas' ''))PrintStringCache: (3.2.0 - pmm.81 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Session-pmm.81.mczVersion: 3.2.0 - pmm.81 1Date: 12:17:55 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAApplicationTest</name><environment>Seaside</environment><super>Seaside.WARegistryTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WASessionTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WAHandlerTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WAInvisibleSessionTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WASessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WAInteractionTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><comment><class-id>Seaside.WAInteractionTest</class-id><body>The purpose of WAInteractionTest is to provide a fully initialized WARequestContext all the necessary objects are are normally there in a Seaside application like request, response, dispatcher application, session and so forth.</body></comment><class><name>WATestSession</name><environment>Seaside</environment><super>Seaside.WASession</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WACookieSessionTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WASessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WACookieIfSupportedSessionTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WACookieSessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WASessionCookieTest</name><environment>Seaside</environment><super>Seaside.WARegistryTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WACookieForBrowserIPForCrawlerTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WASessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WACanvasDocumentTest</name><environment>Seaside</environment><super>Seaside.WAAbstractCanvasBrushTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WAApplicationKeyHandlingTest</name><environment>Seaside</environment><super>Seaside.WARegistryKeyHandlingTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WAQueryFieldHandlerTrackingStrategySessionTest</name><environment>Seaside</environment><super>Seaside.WASessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><comment><class-id>Seaside.WAQueryFieldHandlerTrackingStrategySessionTest</class-id><body>I test all the session related behavior of WAQueryFieldHandlerTrackingStrategy that can't be tested in WAQueryFieldHandlerTrackingStrategyTest for dependency reasons.</body></comment><class><name>WAIPSessionTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WAInvisibleSessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WAApplicationEncodingFromCodecTest</name><environment>Seaside</environment><super>Seaside.WARegistryTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WASslSessionTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WAInvisibleSessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WACookieOnlySessionTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WACookieSessionTrackingStrategyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WASessionTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><class><name>WAApplicationEncodingFallbackTest</name><environment>Seaside</environment><super>Seaside.WARegistryTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Session</category><attributes><package>Seaside-Tests-Session</package></attributes></class><methods><class-id>Seaside.WAApplicationTest</class-id> <category>running</category><body package="Seaside-Tests-Session">requestWithMethod: aString	^ WARequest		method: aString		uri: '/app/oneo'</body></methods><methods><class-id>Seaside.WAApplicationTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testNotImplemented	| context request |	#('OPTIONS' 'HEAD' 'PUT' 'DELETE' 'TRACE' 'CONNECT') do: [ :each |		request := self requestWithMethod: each.		context := WARequestContext request: request response: WABufferedResponse new.		[ handler handle: context ]			on: WAResponseNotification			do: [ :notification | ].		self assert: context response status = 501 ].		#('GET' 'POST') do: [ :each |		request := self requestWithMethod: each.		context := WARequestContext request: request response: WABufferedResponse new.		[ handler handle: context ]			on: WAResponseNotification			do: [ :notification | ].		self assert: context response status ~= 501 ]</body><body package="Seaside-Tests-Session">testPathConsumption	| context request |	request := self requestWithMethod: 'GET'.	context := WARequestContext request: request response: WABufferedResponse new.	context consumer next.	self assert: context consumer peek = 'oneo'.	[ handler handle: context ]		on: WAResponseNotification		do: [ :notification | ].	self assert: context consumer peek = 'oneo'</body><body package="Seaside-Tests-Session">testPreFetchIsForbidden	| context request |	request := self requestWithMethod: 'GET'.	request headers at: 'x-moz' put: 'prefetch'. "turn it into a prefetch request"	self assert: request isPrefetch.			context := WARequestContext request: request response: WABufferedResponse new.	[ handler handle: context ]		on: WAResponseNotification		do: [ :notification | "ignore" ].	self assert: context response status = WAResponse statusForbidden</body><body package="Seaside-Tests-Session">testUrlFor	| context request response session url |	handler class == WARegistry "only WARegistry supports tracking generic request handlers"		ifFalse: [ ^ self ].	request := self requestWithMethod: 'GET'.	request setCookies: (Array with: (WARequestCookie key: '_s' value: 'sessionid')).	response := WABufferedResponse new.	session := WASession new.		context := WARequestContext request: request response: response.	url := WACurrentRequestContext		use: context		during: [			handler register: session.			session url ].	self assert: (url queryFields includesKey: '_s').	request url addField: '_s' value: (url queryFields at: '_s').			[  handler handle: context ]		on: WAResponseNotification		do: [ :notification | ].			self assert: response status = 200.	self assert: (response cookies isEmpty)</body></methods><methods><class-id>Seaside.WAApplicationTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newHandler	^ WAApplication new</body></methods><methods><class-id>Seaside.WAApplicationTest class</class-id> <category>testing</category><body package="Seaside-Tests-Session">shouldInheritSelectors	^ true</body></methods><methods><class-id>Seaside.WASessionTrackingStrategyTest</class-id> <category>configuration</category><body package="Seaside-Tests-Session">createHandlers	^ Array with: self newApplication</body></methods><methods><class-id>Seaside.WASessionTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">assertNotFound: aRequestContext	self assert: aRequestContext response status = WAResponse statusFound.	self assert: (aRequestContext response headerAt: 'Location') = '/catspajamassc2'</body><body package="Seaside-Tests-Session">assertOk: aRequestContext	self assert: aRequestContext response status = WAResponse statusOk</body><body package="Seaside-Tests-Session">newApplication	^ WAApplication new		cache: WAUnidirectionalCache new;		yourself</body><body package="Seaside-Tests-Session">newSession	^ WASession new</body></methods><methods><class-id>Seaside.WASessionTrackingStrategyTest class</class-id> <category>testing</category><body package="Seaside-Tests-Session">isAbstract	^ self name = #WASessionTrackingStrategyTest</body></methods><methods><class-id>Seaside.WAInvisibleSessionTrackingStrategyTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testAddKeyOfSessionToContext	| context |	context := self requestContext.	strategy addKey: 'The_Metaphor' toContext: context.	self assertNoCookies: context</body><body package="Seaside-Tests-Session">testAddKeyOfSessionToUrl	| context uri |	context := self requestContext.	uri := context request uri copy.	strategy addKey: 'The_Metaphor' toUrl: uri.	self assert: uri greaseString = '/catspajamassc2'</body><body package="Seaside-Tests-Session">testKeyFromIpAddress	| context actual |	context := self requestContext.	actual := strategy keyFromContext: context.	self assert: actual = self sessionId</body><body package="Seaside-Tests-Session">testKeyFromQueryField	| context actual |	context := self requestContext.	context request uri addField: strategy keyField value: '4e232e46-003d2-04324-d3ac8fa8'.	actual := strategy keyFromContext: context.	self assert: actual = '4e232e46-003d2-04324-d3ac8fa8'</body><body package="Seaside-Tests-Session">testNoHandlerFoundForDocumentHandlerKey	| context notified |	context := self requestContext.	strategy		addKey: 'The_Birthday_Massacre'		toUrl: context request uri copy.	notified := false.	[ strategy		noHandlerFoundForKey: 'The_Birthday_Massacre'		in: self newApplication		context: context ]		on: WAResponseNotification		do: [ :notification | notified := true ].	self assert: notified.	self assertNotFound: context</body><body package="Seaside-Tests-Session">testNoHandlerFoundForSessionKey	| context application cache session |	context := self requestContext.	application := self newApplication.	[ strategy		noHandlerFoundForKey: self sessionId		in: application		context: context ]		on: WAResponseNotification		do: [ :notification | "ignore" ].	self assertOk: context.	cache := application cache.	self assert: cache size = 1.	session := cache at: self sessionId ifAbsent: [ nil ].	self deny: session isNil.	self assert: session isSession</body></methods><methods><class-id>Seaside.WAInvisibleSessionTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">sessionId	self subclassResponsibility</body></methods><methods><class-id>Seaside.WAInvisibleSessionTrackingStrategyTest class</class-id> <category>testing</category><body package="Seaside-Tests-Session">isAbstract	^ self name = #WAInvisibleSessionTrackingStrategyTest</body></methods><methods><class-id>Seaside.WAInteractionTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testDeleteNetscapeCookie	| requestCookie responseCookies responseCookie |	self application preferenceAt: #serverPath put: '/en/private_kunden/wealth_management'.	requestCookie := WARequestCookie key: 'password' value: 'sex'.	self requestContextWithUrl: '/' cookies: (Array with: requestCookie).	self requestContext response deleteCookie: requestCookie.		responseCookies := self requestContext response cookies.	self assert: responseCookies size = 1.	responseCookie := responseCookies any.		self assert: (responseCookie isKindOf: WACookie).	self assert: responseCookie value = ''.	self assert: responseCookie path = self application url pathStringUnencoded</body><body package="Seaside-Tests-Session">testDeleteRfc2965Cookie	| requestCookie responseCookies responseCookie |	requestCookie := (WARequestCookie key: 'password' value: 'sex')		path: '/en/private_kunden/wealth_management';		version: 1;		yourself.	self requestContextWithUrl: '/' cookies: (Array with: requestCookie).	self requestContext response deleteCookie: requestCookie.		responseCookies := self requestContext response cookies.	self assert: responseCookies size = 1.	responseCookie := responseCookies any.		self assert: (responseCookie isKindOf: WACookie).	self assert: responseCookie value = ''.	self assert: responseCookie path = '/en/private_kunden/wealth_management'</body><body package="Seaside-Tests-Session">testNewCookie	| cookie |	cookie := self requestContext newCookie.	self assert: cookie path = self application url pathStringUnencoded.	self assert: cookie ports isNil.	self assert: cookie httpOnly.	self deny: cookie secure.	self assert: cookie domain isNil.		self application preferenceAt: #serverPath put: '/en/private_kunden/wealth_management'.	cookie := self requestContext newCookie.	self assert: cookie path = '/en/private_kunden/wealth_management'.	self assert: cookie ports isNil.	self assert: cookie httpOnly.	self deny: cookie secure.	self assert: cookie domain isNil.		self application preferenceAt: #serverPort put: 8080.	self application preferenceAt: #serverProtocol put: 'https'.	self application preferenceAt: #serverHostname put: 'www.lgt.com'.	cookie := self requestContext newCookie.	self assert: cookie path = '/en/private_kunden/wealth_management'.	self deny: cookie ports isNil.	self assert: cookie ports size = 1.	self assert: cookie ports first = 8080.	self assert: cookie httpOnly.	self assert: cookie secure.	self assert: cookie domain = 'www.lgt.com'</body></methods><methods><class-id>Seaside.WAInteractionTest</class-id> <category>accessing</category><body package="Seaside-Tests-Session">application	^ self requestContext application</body><body package="Seaside-Tests-Session">session	^ self requestContext session</body></methods><methods><class-id>Seaside.WAInteractionTest</class-id> <category>configuration</category><body package="Seaside-Tests-Session">createHandlers	| dispatcher application session root |	root := WADispatcher new.	dispatcher := root register: WADispatcher new at: 'rails'.	application := dispatcher register: WAApplication new at: 'homepage'.	session := WASession new.	application register: session.	^ super createHandlers, (Array with: root with: dispatcher with: application with: session)</body></methods><methods><class-id>Seaside.WATestSession</class-id> <category>handling</category><body package="Seaside-Tests-Session">start	(self requestContext response)		nextPutAll: 'start: ';		nextPutAll: self key</body></methods><methods><class-id>Seaside.WACookieSessionTrackingStrategyTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testAddCookieNonePresentYet	| context |	context := self requestContext.	strategy addKey: 'The_Metaphor' toContext: context.	self assertCookieInContext: context withValue: 'The_Metaphor'</body><body package="Seaside-Tests-Session">testAddCookieOneAlreadyPresent	| context cookie1 |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'The_Metaphor'.	context := self requestContext.	context request setCookies: (Array with: cookie1).		strategy addKey: 'The_Metaphor' toContext: context.	self assertNoCookies: context</body><body package="Seaside-Tests-Session">testAddCookieOneAlreadyPresentWithWrongValue	| context cookie1 |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'The_Abstraction'.	context := self requestContext.	context request setCookies: (Array with: cookie1).		strategy addKey: 'The_Metaphor' toContext: context.	self assertCookieInContext: context withValue: 'The_Metaphor'</body><body package="Seaside-Tests-Session">testEmpty	| key |	key := strategy keyFromContext: self requestContext.	self assert: key isNil</body><body package="Seaside-Tests-Session">testNoHandlerFoundForKey	| context notified |	context := self requestContext.	notified := false.	[ strategy		noHandlerFoundForKey: 'The_Birthday_Massacre'		in: self newApplication		context: context ]		on: WAResponseNotification		do: [ :notification | notified := true ].	self assert: notified.	self assertNotFound: context</body><body package="Seaside-Tests-Session">testOneOfMany	| cookie1 cookie2 cookie3 cookie4 actual context |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.	cookie2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')		path: '/';		yourself.	cookie3 := (WARequestCookie key: strategy keyCookieName value: 'cookie3')		path: '/1/2';		yourself.	cookie4 := (WARequestCookie key: strategy keyCookieName value: 'cookie4')		path: '/1/2/3';		yourself.	context := self requestContext.	context request setCookies: (Array			with: cookie1			with: cookie2			with: cookie3			with: cookie4).		actual := strategy keyFromContext: context.	self assert: actual = 'cookie3'</body><body package="Seaside-Tests-Session">testOneOfManySlashInCookie	| cookie1 cookie2 cookie3 cookie4 actual context |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.	cookie2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')		path: '/';		yourself.	cookie3 := (WARequestCookie key: strategy keyCookieName value: 'cookie3')		path: '/1/2/';		yourself.	cookie4 := (WARequestCookie key: strategy keyCookieName value: 'cookie4')		path: '/1/2/3/';		yourself.	context := self requestContext.	context request setCookies: (Array			with: cookie1			with: cookie2			with: cookie3			with: cookie4).	actual := strategy keyFromContext: context.	self assert: actual = 'cookie3'</body><body package="Seaside-Tests-Session">testOneOfManySlashInUrl	| cookie1 cookie2 cookie3 cookie4 actual context |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.	cookie2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')		path: '/';		yourself.	cookie3 := (WARequestCookie key: strategy keyCookieName value: 'cookie3')		path: '/1/2';		yourself.	cookie4 := (WARequestCookie key: strategy keyCookieName value: 'cookie4')		path: '/1/2/3';		yourself.	context := self requestContext.	context request setCookies: (Array			with: cookie1			with: cookie2			with: cookie3			with: cookie4).	actual := strategy keyFromContext: context.	self assert: actual = 'cookie3'</body><body package="Seaside-Tests-Session">testOnlyOne	| cookie1 key context |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.	context := self requestContext.	context request setCookies: (Array with: cookie1).		key := strategy keyFromContext: context.	self assert: key = 'cookie1'</body><body package="Seaside-Tests-Session">testQueryFieldOverridesCookie	| cookie1 key context |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.	context := self requestContext.	context request setCookies: (Array with: cookie1).	context request uri addField: strategy keyField value: 'value1'. 		key := strategy keyFromContext: context.	self assert: key = 'value1'</body><body package="Seaside-Tests-Session">testWrongKey	| cookie context actual |	cookie := WARequestCookie key: (strategy keyCookieName, '-not') value: 'cookie'.	context := self requestContext.	context request setCookies: (Array with: cookie).	actual := strategy keyFromContext: context.	self assert: actual isNil</body><body package="Seaside-Tests-Session">testWrongPrefix	| cookie1 cookie2 actual context |	cookie1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.	cookie2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')		path: '/one';		yourself.	context := self requestContext.	context request setCookies: (Array			with: cookie1			with: cookie2).	actual := strategy keyFromContext: context.	self assert: actual = 'cookie1'</body></methods><methods><class-id>Seaside.WACookieSessionTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">assertNotFound: aRequestContext	self assert: aRequestContext response status = WAResponse statusFound.	self assert: (aRequestContext response headerAt: 'Location') = '/1/2'</body><body package="Seaside-Tests-Session">createRequest	^ WARequest method: 'GET' uri: '/1/2'</body></methods><methods><class-id>Seaside.WACookieSessionTrackingStrategyTest class</class-id> <category>testing</category><body package="Seaside-Tests-Session">isAbstract	^ self name = #WACookieSessionTrackingStrategyTest</body></methods><methods><class-id>Seaside.WACookieIfSupportedSessionTrackingStrategyTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testAddKeyOfSessionToUrl	| context uri |	context := self requestContext.	uri := context request uri copy.	strategy addKey: 'The_Metaphor' toUrl: uri.	self assert: uri greaseString = '/1/2?_s=The_Metaphor'</body><body package="Seaside-Tests-Session">testAddKeyOfSessionToUrlCookieAlreadyPresent	| context uri cookie1 |	context := self requestContext.	cookie1 := WARequestCookie key: strategy keyCookieName value: 'The_Metaphor'.	context request setCookies: (Array with: cookie1).	uri := context request uri copy.	strategy addKey: 'The_Metaphor' toUrl: uri.	self assert: uri greaseString = '/1/2'</body></methods><methods><class-id>Seaside.WACookieIfSupportedSessionTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newStrategy	^ WACookieIfSupportedSessionTrackingStrategy new</body></methods><methods><class-id>Seaside.WASessionCookieTest</class-id> <category>running</category><body package="Seaside-Tests-Session">requestWithMethod: aString	^ WARequest		method: aString		uri: '/'</body></methods><methods><class-id>Seaside.WASessionCookieTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testDeleteSessionCookieDomain	| context request response cookie |	request := self requestWithMethod: 'GET'.	request setCookies: (Array with: (WARequestCookie key: '_s' value: 'goner')).	response := WABufferedResponse new.	context := WARequestContext request: request response: response.	[ handler handle: context ]		on: WAResponseNotification		do: [ :notification | ].	self assert: response status = 302. "session gone"	self assert: response cookies size = 1.	cookie := response cookies first.	self assert: cookie domain = 'www.seaside.st'</body><body package="Seaside-Tests-Session">testNewSessionCookieDomain	| context request response cookie |	request := self requestWithMethod: 'GET'.	response := WABufferedResponse new.	context := WARequestContext request: request response: response.	[ handler handle: context ]		on: WAResponseNotification		do: [ :notification | ].	self assert: response cookies size = 1.	cookie := response cookies first.	self assert: cookie domain = 'www.seaside.st'</body></methods><methods><class-id>Seaside.WASessionCookieTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newHandler	^ WAApplication new		preferenceAt: #trackingStrategy put: WACookieIfSupportedSessionTrackingStrategy new;		preferenceAt: #serverHostname put: 'www.seaside.st';		yourself</body></methods><methods><class-id>Seaside.WASessionCookieTest class</class-id> <category>testing</category><body package="Seaside-Tests-Session">shouldInheritSelectors	^ true</body></methods><methods><class-id>Seaside.WACookieForBrowserIPForCrawlerTrackingStrategyTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testIsFromCrawler	| context |	context := self requestContext.	self crawlerUserAgents do: [ :each |		context request headers at: 'user-agent' put: each.		self assert: (strategy  isFromCrawler: context) ]</body><body package="Seaside-Tests-Session">testIsNotFromCrawler	| context |	context := self requestContext.	self browserUserAgents do: [ :each |		context request headers at: 'user-agent' put: each.		self deny: (strategy  isFromCrawler: context) ]</body></methods><methods><class-id>Seaside.WACookieForBrowserIPForCrawlerTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">browserUserAgents	^ #(		'Mozilla/5.0 (X11; U; Linux i586; de; rv:5.0) Gecko/20100101 Firefox/5.0'		'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; da-dk) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1'		'Opera/9.80 (X11; Linux x86_64; U; fr) Presto/2.9.168 Version/11.50'		'Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Ubuntu/11.04 Chromium/14.0.825.0 Chrome/14.0.825.0 Safari/535.1'		'Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)'		'Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; Media Center PC 4.0; SLCC1; .NET CLR 3.0.04320)'		'Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)'		'Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)'	)</body><body package="Seaside-Tests-Session">crawlerUserAgents	^ #(		'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'		'Googlebot/2.1 (+http://www.google.com/bot.html)'		'Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)'		'Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)'		'msnbot/2.1'	)</body><body package="Seaside-Tests-Session">newStrategy	^ WACookieForBrowserIPForCrawlerTrackingStrategy new</body></methods><methods><class-id>Seaside.WACanvasDocumentTest</class-id> <category>configuration</category><body package="Seaside-Tests-Session">createHandlers	| application session |	application := WAApplication new		cache: WAPredictableCache new;		yourself.	session := WASession new		cache: WAPredictableCache new;		yourself.	application register: session.	^ Array		with: application		with: session</body></methods><methods><class-id>Seaside.WACanvasDocumentTest</class-id> <category>tests-tags-anchors</category><body package="Seaside-Tests-Session">testAnchorAttributesDocument	self		assert: [ :html | html anchor document: 'income: 1$' mimeType: 'text/plain' fileName: 'taxes.txt' ]		gives: '&lt;a type="text/plain" href="/?_s=1&amp;amp;_d=1"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor document: 'income: 2$' mimeType: 'text/plain' ]		gives: '&lt;a type="text/plain" href="/?_s=1&amp;amp;_d=2"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor document: 'income: 3$' ]		gives: '&lt;a href="/?_s=1&amp;amp;_d=3"&gt;&lt;/a&gt;'</body></methods><methods><class-id>Seaside.WAApplicationKeyHandlingTest</class-id> <category>private</category><body package="Seaside-Tests-Session">assertDefault: aResponse	"Instead of returning 404 on a default request as WARegistry does, WAApplication creates a new	Session and dispatches to it."	self assert: registry cache size = (registrySize + 1).	self assert: aResponse status = 200.	self assert: (aResponse contents beginsWithSubCollection: 'start:')</body><body package="Seaside-Tests-Session">createRegistry	^ WADispatcher new		register: (WAApplication new			sessionClass: WATestSession;			cache: WAUnidirectionalCache new;			yourself)		at: self registryName</body><body package="Seaside-Tests-Session">registerNewHandler	^ registry register: WATestNoopSessionHandler new</body></methods><methods><class-id>Seaside.WAApplicationKeyHandlingTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testFieldNoCookieHandlerAbsent	"There is a key in the URL, no cookie, but handler specified by key does not exist"		| response context |	registry := self createRegistryWithCookiesEnabled.	context := self createRequestContextWithFieldKey: '123' cookieKey: nil.	response := self dispatch: context to: registry.		self assertNoCookies: response.	self assertExpired: response</body><body package="Seaside-Tests-Session">testFieldNoCookieHandlerPresent	"There is a key in the URL but no cookie. The handler specified by key exists."		| response context key |	registry := self createRegistryWithCookiesEnabled.	key := self registerNewHandler.	context := self createRequestContextWithFieldKey: key cookieKey: nil.	response := self dispatch: context to: registry.		self assertCookieAddition: response key: key.	self assertDispatched: response</body><body package="Seaside-Tests-Session">testMatchingHandlerAbsent	"There is a key in the URL and a cookie and the values match. However, the handler specified by key does not exist."		| response context |	registry := self createRegistryWithCookiesEnabled.	context := self createRequestContextWithFieldKey: '123' cookieKey: '123'.	response := self dispatch: context to: registry.		self assertCookieDeletion: response.	self assertExpired: response</body><body package="Seaside-Tests-Session">testMatchingHandlerPresent	"There is a key in the URL and a cookie and the values match. The handler specified by key exists."		| response context key |	registry := self createRegistryWithCookiesEnabled.	key := self registerNewHandler.	context := self createRequestContextWithFieldKey: key cookieKey: key.	response := self dispatch: context to: registry.		self assertNoCookies: response.	self assertDispatched: response</body><body package="Seaside-Tests-Session">testMismatchingWithBothHandlers	"There is a key in the URL and a cookie but values do not match.	Both keys have registered handlers associated with them."		| response context urlKey cookieKey |	registry := self createRegistryWithCookiesEnabled.	urlKey := self registerNewHandler.	cookieKey := self registerNewHandler.	context := self createRequestContextWithFieldKey: urlKey cookieKey: cookieKey.	response := self dispatch: context to: registry.		self assertCookieAddition: response key: urlKey.	self assertDispatched: response</body><body package="Seaside-Tests-Session">testMismatchingWithCookieHandler	"There is a key in the URL and a cookie but values do not match.	There is no handler registered at the URL key but there is one at the cookie key."		| response context key |	registry := self createRegistryWithCookiesEnabled.	key := self registerNewHandler.	context := self createRequestContextWithFieldKey: '123' cookieKey: key.	response := self dispatch: context to: registry.		self assertNoCookies: response.	self assertExpired: response</body><body package="Seaside-Tests-Session">testMismatchingWithNoHandlers	"There is a key in the URL and a cookie but values do not match.	There is no handler registered at either key."		| response context |	registry := self createRegistryWithCookiesEnabled.	context := self createRequestContextWithFieldKey: '123' cookieKey: '456'.	response := self dispatch: context to: registry.		self assertNoCookies: response.	self assertExpired: response</body><body package="Seaside-Tests-Session">testMismatchingWithUrlHandler	"There is a key in the URL and a cookie but values do not match.	There is a handler registered at the URL key but not at the cookie key."		| response context key |	registry := self createRegistryWithCookiesEnabled.	key := self registerNewHandler.	context := self createRequestContextWithFieldKey: key cookieKey: '123'.	response := self dispatch: context to: registry.		self assertCookieAddition: response key: key.	self assertDispatched: response</body><body package="Seaside-Tests-Session">testNoFieldCookieHandlerAbsent	"There is no key in the URL but there is a cookie. However, the handler specified by key does not exist."		| response context |	registry := self createRegistryWithCookiesEnabled.	context := self createRequestContextWithFieldKey: nil cookieKey: '123'.	response := self dispatch: context to: registry.		self assertCookieDeletion: response.	self assertExpired: response</body><body package="Seaside-Tests-Session">testNoFieldCookieHandlerPresent	"There is no key in the URL but there is a cookie. The handler specified by key exists."		| response context key |	registry := self createRegistryWithCookiesEnabled.	key := self registerNewHandler.	context := self createRequestContextWithFieldKey: nil cookieKey: key.	response := self dispatch: context to: registry.		self assertNoCookies: response.	self assertDispatched: response</body><body package="Seaside-Tests-Session">testNoKey	"There is no URL field and no cookie. This is a new request to the Registry.		Instead of returning a 404, like WARegistry does, WAApplication creates a new WASession	and also adds the cookie."		| response context |	registry := self createRegistryWithCookiesEnabled.	context := self createRequestContextWithFieldKey: nil cookieKey: nil.	response := self dispatch: context to: registry.		self assertCookieAddition: response.	self assert: ((registry cache at: response cookies first value ifAbsent: [ nil ]) isKindOf: WASession).	self assertDefault: response</body></methods><methods><class-id>Seaside.WAApplicationKeyHandlingTest class</class-id> <category>testing</category><body package="Seaside-Tests-Session">shouldInheritSelectors	^ true</body></methods><methods><class-id>Seaside.WAQueryFieldHandlerTrackingStrategySessionTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testAddKeyToContext	| context |	context := self requestContext.	strategy addKey: 'The_Metaphor' toContext: context.	self assertNoCookies: context</body><body package="Seaside-Tests-Session">testAddKeyToUrl	| context uri |	context := self requestContext.	uri := context request uri copy.	strategy addKey: 'The_Metaphor' toUrl: uri.	self assert: uri greaseString = '/catspajamassc2?_s=The_Metaphor'</body><body package="Seaside-Tests-Session">testNoHandlerFoundForKey	| context notified |	context := self requestContext.	notified := false.	[ strategy		noHandlerFoundForKey: 'The_Birthday_Massacre'		in: self newApplication		context: context ]		on: WAResponseNotification		do: [ :notification | notified := true ].	self assert: notified.	self assertNotFound: context</body></methods><methods><class-id>Seaside.WAQueryFieldHandlerTrackingStrategySessionTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newStrategy	^ WAQueryFieldHandlerTrackingStrategy new</body></methods><methods><class-id>Seaside.WAIPSessionTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">createRequest	^ super createRequest		setRemoteAddress: self remoteAddress;		yourself</body><body package="Seaside-Tests-Session">newStrategy	^ WAIPSessionTrackingStrategy new</body><body package="Seaside-Tests-Session">remoteAddress	^ '17.154.81.95'</body><body package="Seaside-Tests-Session">sessionId	^ self remoteAddress</body></methods><methods><class-id>Seaside.WAApplicationEncodingFromCodecTest</class-id> <category>configuration</category><body package="Seaside-Tests-Session">createCodec	^ GRCodec forEncoding: 'iso-8859-1'</body></methods><methods><class-id>Seaside.WAApplicationEncodingFromCodecTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newHandler	^ WAApplication new		preferenceAt: #charSet put: 'utf-16';		yourself</body></methods><methods><class-id>Seaside.WAApplicationEncodingFromCodecTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testContentType	self assert: handler contentType = ('text/html' seasideMimeType		charset: 'iso-8859-1';		yourself)</body></methods><methods><class-id>Seaside.WASslSessionTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">createRequest	^ super createRequest		setSslSessionId: self sslSessionId;		yourself</body><body package="Seaside-Tests-Session">newStrategy	^ WASslSessionTrackingStrategy new</body><body package="Seaside-Tests-Session">sessionId	^ self sslSessionId</body><body package="Seaside-Tests-Session">sslSessionId	^ 'F42BAA17C89C707060E6BF5D251CC7E8832117056C1A8B0883387CA0EDDB52CF'</body></methods><methods><class-id>Seaside.WACookieOnlySessionTrackingStrategyTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newStrategy	^ WACookieOnlySessionTrackingStrategy new</body></methods><methods><class-id>Seaside.WACookieOnlySessionTrackingStrategyTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testAddKeyOfSessionToUrl	| context uri |	context := self requestContext.	uri := context request uri copy.	strategy addKey: 'The_Metaphor' toUrl: uri.	self assert: uri greaseString = '/1/2'</body></methods><methods><class-id>Seaside.WASessionTest</class-id> <category>running</category><body package="Seaside-Tests-Session">requestWithMethod: aString	^ WARequest		method: aString		uri: '/'</body><body package="Seaside-Tests-Session">setUp	super setUp.	handler := self newHandler</body></methods><methods><class-id>Seaside.WASessionTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testRegisterDocumentHandler	| context request response documentHandler sessions session url |	request := WARequest method: 'GET' uri: '/'.	response := WABufferedResponse new.	documentHandler := (WADocumentHandler		document: 'body: {color: red}'		mimeType: WAMimeType textCss		fileName: nil).		"create a new session"	context := WARequestContext request: request response: response.	[  handler handle: context ]		on: WAResponseNotification		do: [ :notification | ].			self assert: response status = WAResponse statusOk.	sessions := handler sessions.	self assert: sessions size = 1.	session := sessions first.		"register the document handler"	url := session register: documentHandler.		self assert: (url queryFields includesKey: session documentHandlerFieldName).	request := WARequest method: 'GET' uri: url.	response := WABufferedResponse new.		"dispatch to the document handler"	context := WARequestContext request: request response: response.	[  handler handle: context ]		on: WAResponseNotification		do: [ :notification | ].	self assert: response status = WAResponse statusOk.	self assert: response contents = documentHandler document contents.		"dispatch to a not existing handler"	url := url copy.	url queryFields at: session documentHandlerFieldName put: 'not_existing'.	request := WARequest method: 'GET' uri: url.	response := WABufferedResponse new.	context := WARequestContext request: request response: response.	[  handler handle: context ]		on: WAResponseNotification		do: [ :notification | ].	self assert: response status = WAResponse statusNotFound</body></methods><methods><class-id>Seaside.WASessionTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newHandler	^ WAApplication new		preferenceAt: #trackingStrategy put: WAQueryFieldHandlerTrackingStrategy new;		preferenceAt: #serverHostname put: 'www.seaside.st';		yourself</body></methods><methods><class-id>Seaside.WASessionTest class</class-id> <category>testing</category><body package="Seaside-Tests-Session">shouldInheritSelectors	^ true</body></methods><methods><class-id>Seaside.WAApplicationEncodingFallbackTest</class-id> <category>private</category><body package="Seaside-Tests-Session">newHandler	^ WAApplication new		preferenceAt: #charSet put: 'utf-16';		yourself</body></methods><methods><class-id>Seaside.WAApplicationEncodingFallbackTest</class-id> <category>tests</category><body package="Seaside-Tests-Session">testContentType	self assert: handler contentType = ('text/html' seasideMimeType		charset: 'utf-16';		yourself)</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-session</category><body package="Seaside-Tests-Session">seasideTestsSession	^ self new		name: 'Seaside-Tests-Session';		description: 'Unit tests for the package Seaside-Session.';		addDependency: 'Seaside-Session';		addDependency: 'Seaside-Tests-Core';		addDependency: 'Seaside-Tests-Canvas';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAContextTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class><class><name>WARegistryTest</name><environment>Seaside</environment><super>Seaside.WARequestHandlerTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class><class><name>WARegistryKeyHandlingTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>registry registrySize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class><class><name>WAAbstractCanvasBrushTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WASession</name><environment>Seaside</environment><super>Seaside.WARequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>continuations properties documentHandlers key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Session</category><attributes><package>Seaside-Session</package></attributes></class><class><name>WAHandlerTrackingStrategyTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>strategy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class></st-source>