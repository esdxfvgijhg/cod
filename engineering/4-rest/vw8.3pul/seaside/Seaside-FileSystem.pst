<?xml version="1.0"?><st-source><!-- Name: Seaside-FileSystemComment: File library that serves files from external directory.DbIdentifier: bear73DbTrace: 494115DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.30 2DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-VisualWorks-Core' '') #(#any 'Seaside-Canvas' ''))Id: c8457504-922b-4d20-a5cf-05a65b18ddafNamespace: SeasidePackageName: Seaside-FileSystemParcel: #('Seaside-FileSystem')ParcelName: Seaside-FileSystemPrerequisiteDescriptions: #(#(#name 'Seaside-Namespace') #(#name 'Seaside-Core') #(#name 'Seaside-VisualWorks-Core') #(#name 'Seaside-Canvas' #componentType #package))PrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Core' '') #('Seaside-VisualWorks-Core' '') #('Seaside-Canvas' ''))PrintStringCache: (3.2.0 - JohanBrichau.30 2,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-FileSystem-JohanBrichau.30.mczVersion: 3.2.0 - JohanBrichau.30 2Date: 3:31:32 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:32 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAExternalFileLibraryConfiguration</name><environment>Seaside</environment><super>Seaside.WASystemConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-FileSystem</category><attributes><package>Seaside-FileSystem</package></attributes></class><class><name>WAExternalFileLibrary</name><environment>Seaside</environment><super>Seaside.WARequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-FileSystem</category><attributes><package>Seaside-FileSystem</package></attributes></class><methods><class-id>Seaside.WAExternalFileLibraryConfiguration</class-id> <category>description</category><body package="Seaside-FileSystem">describeOn: config	(config string: #directory)		label: 'Directory';		comment: 'The base directory to serve files from.';		default: GRPlatform current defaultDirectoryPathString.	(config boolean: #listing)		label: 'Allow Listing';		comment: 'Enable listing of directory entries.';		default: false</body></methods><methods><class-id>Seaside.WAExternalFileLibrary</class-id> <category>accessing</category><body package="Seaside-FileSystem">directory	^ GRPlatform current fileNameFor: (self preferenceAt: #directory)</body><body package="Seaside-FileSystem">listing	^ self preferenceAt: #listing</body></methods><methods><class-id>Seaside.WAExternalFileLibrary</class-id> <category>private</category><body package="Seaside-FileSystem">asAbsoluteUrl: aFileName relativeTo: aRequest	^aRequest url withoutQuery		addToPath: aFileName;		yourself</body><body package="Seaside-FileSystem">contentsOfFile: aFilename	^ GRPlatform current contentsOfFile: aFilename binary: true</body><body package="Seaside-FileSystem">filenameForConsumer: aPathConsumer	"Answer the SpFilename pointing to the file for the given request."	| filename |	filename := self directory.	[ aPathConsumer atEnd ] whileFalse: [		filename := filename , GRPlatform current pathSeparator , aPathConsumer next ].	^filename</body><body package="Seaside-FileSystem">filesIn: aPath do: aOneArgumentBlock 	"this can not be done with SPort"	(GRPlatform current filesIn: aPath) do: [ :each |		aOneArgumentBlock value: (GRPlatform current localNameOf: each) ]</body><body package="Seaside-FileSystem">mimetypeForRequest: aRequest	| path |	path := aRequest url path.	^(path isEmpty or: [ (path last includes: $.) not ])		ifTrue: [ WAFileLibrary defaultMimeType seasideMimeType ]		ifFalse: [			| extension |			extension := path last copyAfterLast: $..			WAFileLibrary mimetypeFor: extension ]</body></methods><methods><class-id>Seaside.WAExternalFileLibrary</class-id> <category>configuration</category><body package="Seaside-FileSystem">defaultConfiguration	^ super defaultConfiguration		addParent: WAExternalFileLibraryConfiguration instance;		yourself</body></methods><methods><class-id>Seaside.WAExternalFileLibrary</class-id> <category>handling</category><body package="Seaside-FileSystem">handleFiltered: aRequestContext	[ self processContext: aRequestContext ] 		on: Error		do: [ :error | 			aRequestContext responseGenerator				internalError: error;				respond ]</body><body package="Seaside-FileSystem">processContext: aRequestContext	| filename |	filename := self filenameForConsumer: aRequestContext consumer.	(self listing and: [ GRPlatform current isDirectory: filename ])		ifTrue: [ self				processDirectory: filename				context: aRequestContext ]		ifFalse: [ self processFile: filename context: aRequestContext ]</body><body package="Seaside-FileSystem">processDirectory: aString context: aRequestContext 	| contents |	contents := WAHtmlCanvas builder		fullDocument: true;		rootBlock: [ :html | html title: aRequestContext request url greaseString ];		render: [ :html | 			html heading				level: 1;				with: aRequestContext request url pathStringUnencoded.			html unorderedList:  [				self 					filesIn: aString					do: [ :each | 						html listItem: [							html anchor								url: (self 									asAbsoluteUrl: each									relativeTo: aRequestContext request);								with: each ] ] ] ].	aRequestContext respond: [ :response | 		response			contentType: WAMimeType textHtml;			nextPutAll: contents ]</body><body package="Seaside-FileSystem">processFile: aFilename context: aRequestContext	aRequestContext respond: [ :response |		response			contentType: (self mimetypeForRequest: aRequestContext request);			binary;			nextPutAll: (self contentsOfFile: aFilename) ]</body></methods><methods><class-id>Seaside.WAExternalFileLibrary class</class-id> <category>accessing</category><body package="Seaside-FileSystem">description	^ 'File Directory'</body></methods><methods><class-id>Grease.GRPlatform</class-id> <category>*seaside-filesystem</category><body package="Seaside-FileSystem">defaultDirectoryPathString	self subclassResponsibility</body><body package="Seaside-FileSystem">fileNameFor: aPathString	self subclassResponsibility</body><body package="Seaside-FileSystem">isDirectory: aPathString	self subclassResponsibility</body></methods><methods><class-id>Grease.GRVisualWorksPlatform</class-id> <category>*seaside-filesystem</category><body package="Seaside-FileSystem">defaultDirectoryPathString	^ Filename defaultDirectoryName</body><body package="Seaside-FileSystem">fileNameFor: aPathString	^ aPathString asFilename asAbsoluteFilename asString</body><body package="Seaside-FileSystem">isDirectory: aPathString	^ aPathString asFilename isDirectory</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-filesystem</category><body package="Seaside-FileSystem">seasideFileSystem	^ self new		name: 'Seaside-FileSystem';		description: 'File library that serves files from external directory.';		addDependency: 'Seaside-Core';		url: #seasideLGPLUrl;		license: #LGPL;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WARequestHandler</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter parent configuration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class><class><name>GRPlatform</name><environment>Grease</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grease-Core</category><attributes><package>Grease-Core</package></attributes></class><class><name>GRVisualWorksPlatform</name><environment>Grease</environment><super>Grease.GRPlatform</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Protocols.*			</imports><category></category><attributes><package>Grease-VisualWorks-Core</package></attributes></class><class><name>WASystemConfiguration</name><environment>Seaside</environment><super>Seaside.WAConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Seaside-Core-Configuration</category><attributes><package>Seaside-Core</package></attributes></class></st-source>