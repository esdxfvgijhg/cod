<?xml version="1.0"?><st-source><!-- Name: Prototype-Tests-CoreComment: Functional and unit tests for the Prototype-Core package.DbIdentifier: bear73DbTrace: 494125DbUsername: jkottDbVersion: 3.2.0 - pmm.18 2DevelopmentPrerequisites: #(#(#any 'Prototype-Namespace' '') #(#any 'Prototype-Core' '') #(#any 'Scriptaculous-Core' '') #(#any 'Javascript-Tests-Core' '') #(#any 'Seaside-Tests-Functional' ''))Id: 64717be3-c73b-4e85-b16c-c322d1137294Namespace: PrototypePackageName: Prototype-Tests-CoreParcel: #('Prototype-Tests-Core')ParcelName: Prototype-Tests-CorePrerequisiteDescriptions: #(#(#name 'Prototype-Namespace') #(#name 'Prototype-Core') #(#name 'Scriptaculous-Core' #componentType #package) #(#name 'Javascript-Tests-Core') #(#name 'Seaside-Tests-Functional'))PrerequisiteParcels: #(#('Prototype-Namespace' '') #('Prototype-Core' '') #('Scriptaculous-Core' '') #('Javascript-Tests-Core' '') #('Seaside-Tests-Functional' ''))PrintStringCache: (3.2.0 - pmm.18 2,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Prototype-Tests-Core-pmm.18.mczVersion: 3.2.0 - pmm.18 2Date: 12:17:57 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:57 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PTAjaxTest</name><environment>Prototype</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Prototype-Tests-Core</category><attributes><package>Prototype-Tests-Core</package></attributes></class><class><name>PTElementTest</name><environment>Prototype</environment><super>Javascript.JSObjectTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Prototype-Tests-Core</category><attributes><package>Prototype-Tests-Core</package></attributes></class><methods><class-id>Prototype.PTAjaxTest</class-id> <category>accessing</category><body package="Prototype-Tests-Core">request	^ PTRequest context: self renderContext</body><body package="Prototype-Tests-Core">responders	^ PTResponders context: self renderContext</body></methods><methods><class-id>Prototype.PTAjaxTest</class-id> <category>tests</category><body package="Prototype-Tests-Core">testEvents	self		assert: (self request onCreate: 1)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onCreate":function(){1}})'.	self		assert: (self request onComplete: 2)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onComplete":function(){2}})'.	self		assert: (self request onException: 3)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onException":function(){3}})'.	self		assert: (self request onFailure: 4)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onFailure":function(){4}})'.	self		assert: (self request onInteractive: 5)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onInteractive":function(){5}})'.	self		assert: (self request onLoaded: 6)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onLoaded":function(){6}})'.	self		assert: (self request onLoading: 7)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onLoading":function(){7}})'.	self		assert: (self request onSuccess: 8)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onSuccess":function(){8}})'.	self		assert: (self request onUninitialized: 9)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"onUninitialized":function(){9}})'.	self		assert: (self request onStatus: 202 do: 10)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"on202":function(){10}})'</body><body package="Prototype-Tests-Core">testOptions	self		assert: (self request asynchronous: false)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"asynchronous":false})'.	self		assert: (self request contentType: 'text/xml')		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"contentType":"text/xml"})'.	self		assert: (self request encoding: 'iso-8660')		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"encoding":"iso-8660"})'.	self		assert: (self request method: 'get')		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"method":"get"})'.	self		assert: (self request evalJs: false)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"evalJS":false})'.	self		assert: (self request evalJson: false)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"evalJSON":false})'.	self		assert: (self request sanitizeJson: true)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"sanitizeJSON":true})'.	self		assert: (self request requestHeaders: Dictionary new)		equals: 'new Ajax.Request("http://www.seaside.st/",{"parameters":["_s=1","_k=a","1"].join("&amp;"),"requestHeaders":{}})'</body><body package="Prototype-Tests-Core">testResponders	self		assert: (self responders)		equals: 'Ajax.Responders.register({})'.	self		assert: (self responders register)		equals: 'Ajax.Responders.register({})'.	self		assert: (self responders unregister)		equals: 'Ajax.Responders.unregister({})'.	self		assert: (self responders onCreate: 1)		equals: 'Ajax.Responders.register({"onCreate":function(){1}})'.	self		assert: (self responders onComplete: 2)		equals: 'Ajax.Responders.register({"onComplete":function(){2}})'</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>utilities</category><body package="Prototype-Tests-Core">assertEnumerable: aBlock prefix: aString	self assert: (aBlock value isKindOf: PTEnumerable).	self		assert: (aBlock value allSatisfy: [ :each | each element visible ])		equals: aString , '.all(function(){return $(arguments[0]).visible()})'.	self		assert: (aBlock value anySatisfy: [ :each | each element visible not ])		equals: aString , '.any(function(){return !$(arguments[0]).visible()})'.	self		assert: (aBlock value collect: [ :each | each element up ])		equals: aString , '.map(function(){return $(arguments[0]).up()})'.	self		assert: (aBlock value detect: [ :each | each element empty ])		equals: aString , '.find(function(){return $(arguments[0]).empty()})'.	self		assert: (aBlock value detectMax: [ :each | each element width ])		equals: aString , '.max(function(){return $(arguments[0]).getWidth()})'.	self		assert: (aBlock value detectMin: [ :each | each element height ])		equals: aString , '.min(function(){return $(arguments[0]).getHeight()})'.	self		assert: (aBlock value select: [ :each | each element empty ])		equals: aString , '.findAll(function(){return $(arguments[0]).empty()})'.	self		assert: (aBlock value reject: [ :each | each element empty not ])		equals: aString , '.reject(function(){return !$(arguments[0]).empty()})'.	self		assert: (aBlock value sortBy: [ :each | each element height ])		equals: aString , '.sortBy(function(){return $(arguments[0]).getHeight()})'.	self		assert: (aBlock value grep: '[a-z]+')		equals: aString , '.grep("[a-z]+")'.	self		assert: (aBlock value include: nil)		equals: aString , '.include(null)'.	self		assert: (aBlock value invoke: 'zork')		equals: aString , '.invoke("zork")'.	self		assert: (aBlock value invoke: 'zork' with: 1)		equals: aString , '.invoke("zork",1)'.	self		assert: (aBlock value invoke: 'zork' withAll: #(1 2))		equals: aString , '.invoke("zork",1,2)'.	self		assert: (aBlock value pluck: 'id')		equals: aString , '.pluck("id")'.	self		assert: (aBlock value size)		equals: aString , '.size()'</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>accessing</category><body package="Prototype-Tests-Core">element	^ PTElement context: self renderContext</body><body package="Prototype-Tests-Core">event	^ PTEvent context: self renderContext</body><body package="Prototype-Tests-Core">form	^ PTForm context: self renderContext</body><body package="Prototype-Tests-Core">formElement	^ PTFormElement context: self renderContext</body><body package="Prototype-Tests-Core">formElementObserver	^ PTFormElementObserver context: self renderContext</body><body package="Prototype-Tests-Core">formObserver	^ PTFormObserver context: self renderContext</body><body package="Prototype-Tests-Core">insertion	^ PTInsertion context: self renderContext</body><body package="Prototype-Tests-Core">ptSelector	^ PTSelector context: self renderContext</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>tests-events</category><body package="Prototype-Tests-Core">testEventActions	self		assert: (self event stop)		equals: 'Event.stop(event)'.	self		assert: (self event observe: 'foo' on: 'click' do: self element toggle)		equals: 'Event.observe("foo","click",function(event){$(this).toggle()})'</body><body package="Prototype-Tests-Core">testEventFire	self		assert: (self element fire: 'foo')		equals: '$(this).fire("foo")'.	self		assert: (self element fire: 'foo' with: 123)		equals: '$(this).fire("foo",123)'</body><body package="Prototype-Tests-Core">testEventOnDo	self		assert: (self element on: 'click' do: self event stop)		equals: '$(this).observe("click",function(event){Event.stop(event)})'.	self		assert: (self element id: 'foo'; on: 'mouseout' do: self element hide)		equals: '$("foo").observe("mouseout",function(event){$(this).hide()})'</body><body package="Prototype-Tests-Core">testEventQuerying	self		assert: (self event element)		equals: 'Event.element(event)'.	self		assert: (self event event: 'bar'; x)		equals: 'Event.pointerX("bar")'.	self		assert: self event y		equals: 'Event.pointerY(event)'</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>tests</category><body package="Prototype-Tests-Core">testDisplaying	self		assert: (self element hide)		equals: '$(this).hide()'.	self		assert: (self element id: 'foo'; show)		equals: '$("foo").show()'.	self		assert: (self element toggle)		equals: '$(this).toggle()'.	self		assert: (self element id: 'bar'; scroll)		equals: '$("bar").scrollTo()'</body><body package="Prototype-Tests-Core">testEnumerating	self		assertEnumerable: [ self element ancestors ]		prefix: '$(this).ancestors()'.	self		assertEnumerable: [ self element childElements ]		prefix: '$(this).childElements()'.	self		assertEnumerable: [ self element descendants ]		prefix: '$(this).descendants()'.	self		assertEnumerable: [ self element nextSiblings ]		prefix: '$(this).nextSiblings()'.	self		assertEnumerable: [ self element previousSiblings ]		prefix: '$(this).previousSiblings()'.	self		assertEnumerable: [ self element select: 'div.foo' ]		prefix: '$(this).select("div.foo")'.	self		assertEnumerable: [ self element siblings ]		prefix: '$(this).siblings()'</body><body package="Prototype-Tests-Core">testGeometric	self		assert: (self element absolutize)		equals: '$(this).absolutize()'.	self		assert: (self element clonePosition: 'foo')		equals: '$(this).clonePosition("foo")'.	self		assert: (self element cumulativeOffset)		equals: '$(this).cumulativeOffset()'.	self		assert: (self element cumulativeScrollOffset)		equals: '$(this).cumulativeScrollOffset()'.	self		assert: (self element dimensions)		equals: '$(this).getDimensions()'.	self		assert: (self element height)		equals: '$(this).getHeight()'.	self		assert: (self element makeClipping)		equals: '$(this).makeClipping()'.	self		assert: (self element makePositioned)		equals: '$(this).makePositioned()'.	self		assert: (self element offsetParent)		equals: '$(this).getOffsetParent()'.	self		assert: (self element positionedOffset)		equals: '$(this).positionedOffset()'.	self		assert: (self element relativize)		equals: '$(this).relativize()'.	self		assert: (self element undoClipping)		equals: '$(this).undoClipping()'.	self		assert: (self element undoPositioned)		equals: '$(this).undoPositioned()'.	self		assert: (self element viewportOffset)		equals: '$(this).viewportOffset()'.	self		assert: (self element width)		equals: '$(this).getWidth()'</body><body package="Prototype-Tests-Core">testModifying	self		assert: (self element cleanWhitespace)		equals: '$(this).cleanWhitespace()'.	self		assert: (self element id: 'foo'; remove)		equals: '$("foo").remove()'.	self		assert: (self element wrap: 'p')		equals: '$(this).wrap("p",{})'.	self		assert: (self element wrap: 'p' attributes: (Dictionary new at: 'id' put: 'foo'; yourself))		equals: '$(this).wrap("p",{"id":"foo"})'</body><body package="Prototype-Tests-Core">testModifyingInsert	self		assert: (self element insert: 1)		equals: '$(this).insert("1")'.	self		assert: (self element insertAfter: [ :r | r div ])		equals: '$(this).insert({"after":"&lt;div&gt;&lt;/div&gt;"})'.	self		assert: (self element insertBefore: 'abc')		equals: '$(this).insert({"before":"abc"})'.	self		assert: (self element insertTop: [ :r | r span: 5 ])		equals: '$(this).insert({"top":"&lt;span&gt;5&lt;/span&gt;"})'.	self		assert: (self element insertBottom: '5')		equals: '$(this).insert({"bottom":"5"})'</body><body package="Prototype-Tests-Core">testModifyingReplace	self		assert: (self element replace: 'foo')		equals: '$(this).replace("foo")'.	self		assert: (self element replace: [ :r | r div id: 'foo' ])		equals: '$(this).replace("&lt;div id=\"foo\"&gt;&lt;/div&gt;")'</body><body package="Prototype-Tests-Core">testModifyingUpdate	self		assert: (self element id: 'foo'; update: 'bar')		equals: '$("foo").update("bar")'.	self		assert: (self element update: [ :r | r div: 'bar' ])		equals: '$(this).update("&lt;div&gt;bar&lt;/div&gt;")'</body><body package="Prototype-Tests-Core">testModifyingWrap	self		assert: (self element wrap: 'p')		equals: '$(this).wrap("p",{})'.	self		assert: (self element wrap: 'p' attributes: (Dictionary new at: 'id' put: 'foo'; yourself))		equals: '$(this).wrap("p",{"id":"foo"})'</body><body package="Prototype-Tests-Core">testNavigationDown	self		assert: (self element down)		equals: '$(this).down()'.	self		assert: (self element down: 'div')		equals: '$(this).down("div")'.	self		assert: (self element down: 'div' at: 2)		equals: '$(this).down("div",2)'</body><body package="Prototype-Tests-Core">testNavigationNext	self		assert: (self element next)		equals: '$(this).next()'.	self		assert: (self element next: 'div')		equals: '$(this).next("div")'.	self		assert: (self element next: 'div' at: 2)		equals: '$(this).next("div",2)'</body><body package="Prototype-Tests-Core">testNavigationPrevious	self		assert: (self element previous)		equals: '$(this).previous()'.	self		assert: (self element previous: 'div')		equals: '$(this).previous("div")'.	self		assert: (self element previous: 'div' at: 2)		equals: '$(this).previous("div",2)'</body><body package="Prototype-Tests-Core">testNavigationUp	self		assert: (self element up)		equals: '$(this).up()'.	self		assert: (self element up: 'div')		equals: '$(this).up("div")'.	self		assert: (self element up: 'div' at: 2)		equals: '$(this).up("div",2)'</body><body package="Prototype-Tests-Core">testQuerying	self		assert: (self element descendantOf: 'foo')		equals: '$(this).descendantOf("foo")'.	self		assert: (self element empty)		equals: '$(this).empty()'.	self		assert: (self element firstDescendant)		equals: '$(this).firstDescendant()'.	self		assert: (self element identify)		equals: '$(this).identify()'.	self		assert: (self element match: 'first-child')		equals: '$(this).match("first-child")'</body><body package="Prototype-Tests-Core">testSelector	| selector |	selector := self ptSelector add: '*'.	self assert: selector equals: '$$("*")'.	selector := self ptSelector add: 'div.zork'; add: 'p#zork'.	self assert: selector equals: '$$("div.zork","p#zork")'.	self		assertEnumerable: [ self ptSelector add: 'p&gt;a' ]		prefix: '$$("p&gt;a")'</body><body package="Prototype-Tests-Core">testStylingClasses	self		assert: (self element id: 'foo'; addClassName: 'bar')		equals: '$("foo").addClassName("bar")'.	self		assert: (self element id: 'foo'; hasClassName: 'bar')		equals: '$("foo").hasClassName("bar")'.	self		assert: (self element removeClassName: 'bar')		equals: '$(this).removeClassName("bar")'.	self		assert: (self element id: 'foo'; toggleClassName: 'bar')		equals: '$("foo").toggleClassName("bar")'</body><body package="Prototype-Tests-Core">testStylingStyles	self		assert: (self element id: 'foo'; styleAt: 'width')		equals: '$("foo").getStyle("width")'.	self		assert: (self element styleAt: 'height')		equals: '$(this).getStyle("height")'.	self		assert: (self element id: 'foo'; styleAt: 'width' put: '100px')		equals: '$("foo").setStyle({"width":"100px"})'.	self		assert: (self element styleAt: 'background-color' put: Color white)		equals: '$(this).setStyle({"background-color":"#FFFFFF"})'</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>tests-form</category><body package="Prototype-Tests-Core">testForm	self		assert: self form disable		equals: '$(this).disable()'.	self		assert: self form enable		equals: '$(this).enable()'.	self		assert: self form findFirstElement		equals: '$(this).findFirstElement()'.	self		assert: self form focusFirstElement		equals: '$(this).focusFirstElement()'.	self		assert: self form request		equals: '$(this).request()'.	self		assert: self form reset		equals: '$(this).reset()'.	self		assert: (self form id: 'foo'; serialize)		equals: '$("foo").serialize()'</body><body package="Prototype-Tests-Core">testFormElement	self		assert: self formElement activate		equals: '$(this).activate()'.	self		assert: self formElement clear		equals: '$(this).clear()'.	self		assert: self formElement disable		equals: '$(this).disable()'.	self		assert: self formElement enable		equals: '$(this).enable()'.	self		assert: self formElement focus		equals: '$(this).focus()'.	self		assert: self formElement present		equals: '$(this).present()'.	self		assert: self formElement select		equals: '$(this).select()'.	self		assert: (self formElement id: 'foo'; serialize)		equals: '$("foo").serialize()'.	self		assert: (self formElement id: 'foo'; value)		equals: '$("foo").getValue()'</body><body package="Prototype-Tests-Core">testFormEnumerating	self		assertEnumerable: [ self form elements ]		prefix: '$(this).getElements()'.	self		assertEnumerable: [ self form inputs ]		prefix: '$(this).getInputs()'</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>tests-observers</category><body package="Prototype-Tests-Core">testFormElementObserver	self 		assert: self formElementObserver		equals: 'new Form.Element.Observer(this,1,function(){})'.	self 		assert: (self formElementObserver 			id: 'foo';			frequency: 2;			function: (JSFunction context: self renderContext) refresh)		equals: 'new Form.Element.Observer("foo",2,function(element,value){window.location="http://www.seaside.st/?_s=1&amp;_k=a"})'</body><body package="Prototype-Tests-Core">testFormObserver	self 		assert: self formObserver		equals: 'new Form.Observer(this,1,function(){})'.	self 		assert: (self formObserver 			id: 'foo';			frequency: 2;			function: (JSFunction context: self renderContext) refresh)		equals: 'new Form.Observer("foo",2,function(element,value){window.location="http://www.seaside.st/?_s=1&amp;_k=a"})'</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>tests-insertion</category><body package="Prototype-Tests-Core">testInsertion	| element |	element := self insertion top.	self assert: element equals: 'Insertion.Top'.	element := self insertion bottom.	self assert: element equals: 'Insertion.Bottom'.	element := self insertion before.	self assert: element equals: 'Insertion.Before'.	element := self insertion after.	self assert: element equals: 'Insertion.After'</body><body package="Prototype-Tests-Core">testInsertionBasic	| element |	element := self insertion top; with: 'foo'.	self assert: element equals: 'new Insertion.Top(this,"foo")'.	element := self insertion bottom; id: 'bar'; with: 'foo'.	self assert: element equals: 'new Insertion.Bottom("bar","foo")'.	element := self insertion before; with: 'foo'.	self assert: element equals: 'new Insertion.Before(this,"foo")'.	element := self insertion after; id: 'bar'; with: 'foo'.	self assert: element equals: 'new Insertion.After("bar","foo")'</body><body package="Prototype-Tests-Core">testInsertionShort	| element |	element := self insertion top: 'foo'.	self assert: element equals: 'new Insertion.Top(this,"foo")'.	element := self insertion id: 'bar'; bottom: 'foo'.	self assert: element equals: 'new Insertion.Bottom("bar","foo")'.	element := self insertion before: 'foo'.	self assert: element equals: 'new Insertion.Before(this,"foo")'.	element := self insertion id: 'bar'; after: 'foo'.	self assert: element equals: 'new Insertion.After("bar","foo")'</body><body package="Prototype-Tests-Core">testInsertionWith	self		assert: (self insertion id: 'foo'; top: 'bar')		equals: 'new Insertion.Top("foo","bar")'.	self		assert: (self insertion bottom: 'bar')		equals: 'new Insertion.Bottom(this,"bar")'.	self		assert: (self insertion id: 'foo'; before: 'bar')		equals: 'new Insertion.Before("foo","bar")'.	self		assert: (self insertion after: 'bar')		equals: 'new Insertion.After(this,"bar")'</body></methods><methods><class-id>Prototype.PTElementTest</class-id> <category>tests-rendering</category><body package="Prototype-Tests-Core">testRenderedHtml	self 		assert: [ :html | html div script: (html scriptaculous element update: [ :r | r span ]) ]		renders: '&lt;div id="id1"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;$("id1").update("&lt;span&gt;&lt;/span&gt;");&lt;/script&gt;'</body><body package="Prototype-Tests-Core">testRenderedHtmlWithScripts	self		assert: [ :html |			html div script: (html scriptaculous element remove).			html div script: (html scriptaculous element update: [ :r | r span ]) ]		renders: '&lt;div id="id1"&gt;&lt;/div&gt;&lt;div id="id2"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;$("id1").remove();$("id2").update("&lt;span&gt;&lt;/span&gt;");&lt;/script&gt;'</body></methods><methods><class-id>Prototype.PTElementTest class</class-id> <category>accessing</category><body package="Prototype-Tests-Core">packageNamesUnderTest	^ #('Prototype-Core')</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*prototype-tests-core</category><body package="Prototype-Tests-Core">prototypeTestsCore	^ self new		name: 'Prototype-Tests-Core';		description: 'Functional and unit tests for the Prototype-Core package.';		addDependency: 'Prototype-Core';		addDependency: 'Javascript-Tests-Core';		addDependency: 'Seaside-Tests-Functional';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>JSObjectTest</name><environment>Javascript</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Tests-Core</category><attributes><package>Javascript-Tests-Core</package></attributes></class></st-source>