<?xml version="1.0"?><st-source><!-- Name: Grease-Tests-VisualWorks-CoreNotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Comment: Seaside-Tests-VisualWorks-Platform contains code to test certain extensions of VisualWorks for Seaside purposes.DbIdentifier: bear73DbTrace: 494118DbUsername: jkottDbVersion: 3.2.0 - 2DevelopmentPrerequisites: #(#(#any 'Grease-VisualWorks-Core' ''))PackageName: Grease-Tests-VisualWorks-CoreParcel: #('Grease-Tests-VisualWorks-Core')PrerequisiteDescriptions: #(#(#name 'Grease-VisualWorks-Core' #componentType #package))PrerequisiteParcels: #(#('Grease-VisualWorks-Core' ''))PrintStringCache: (3.2.0 - 2,jkott)Version: 3.2.0 - 2Date: 12:17:55 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VariableBindingTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Grease-Tests-VisualWorks-Core</package></attributes></class><class><name>KnownTestFailure</name><environment>Grease</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Grease-Tests-VisualWorks-Core</package></attributes></class><comment><class-id>Grease.KnownTestFailure</class-id><body>KnownTestFailure is a class to help incrementally fix known Grease &amp; Seaside failing tests.Some of imported Seaside tests don't apply to the VisualWork Seaside environment. Rather than excluding them from the code base, we wrap the original test method in 'KnownTestFailure seasideTestIgnore: self running: [ ... ] because: &lt;reasonString&gt;' code.Other tests may be failing when we first import them but need fixing. We wrap those in 'KnownTestFailure seasideTestFix: self running: [ ... ]' code.Whenever a test wrapped in one of the two methods is run, a notice is written to the Transcript.For examples, browse references to the KnownTestFailure class.</body></comment><class><name>DateAndTimeTest</name><environment>Grease</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Grease-Tests-VisualWorks-Core</package></attributes></class><class><name>ConditionalProbeResource</name><environment>Seaside</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>probedMethod probe compiledMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Grease-Tests-VisualWorks-Core</package></attributes></class><comment><class-id>Seaside.ConditionalProbeResource</class-id><body>ConditionalProbeResource is used to test the use of Association (namely, DebugActive variable) in the test expression compilation.Instance Variables	compiledMethod	&lt;CompiledMethod&gt;	the compiledMethod on which a conditional code probe is created during a test	probe	&lt;CodeProbe&gt;	a code probe created during a test	probedMethod	&lt;ProbedCompiledMethod&gt;	the probedMethod replacing compiledMethod while probe is active.</body></comment><shared-variable><name>ConditionalProbeVariable</name><environment>Seaside.VariableBindingTest</environment><private>false</private><constant>false</constant><category>New Share</category><initializer>nil</initializer><attributes><package>Grease-Tests-VisualWorks-Core</package></attributes></shared-variable><shared-variable><name>RunTests</name><environment>Grease.KnownTestFailure</environment><private>false</private><constant>false</constant><category>running</category><initializer>false</initializer><attributes><package>Grease-Tests-VisualWorks-Core</package></attributes></shared-variable><methods><class-id>Seaside.VariableBindingTest</class-id> <category>initialize-release</category><body package="Grease-Tests-VisualWorks-Core">setUp	self resources do: [ :each | each current setUp ]</body><body package="Grease-Tests-VisualWorks-Core">tearDown	self resources do: [ :each | each reset ]</body></methods><methods><class-id>Seaside.VariableBindingTest</class-id> <category>tests</category><body package="Grease-Tests-VisualWorks-Core">testAssociation	" Test the use of Association as variable binding. "	| association |	association := #ConditionalProbeVariable -&gt; ConditionalProbeVariable.	" Seaside requires that Associations be considered a variable binding: "	self assert: (association respondsTo: #isVariableBinding).	self assert: association isVariableBinding.	" VisualWorks requires that an object that returns true to #isVariableBinding understands #asDeferred and #isDeferred (see CompiledCode&gt;&gt;initializeLiteralAt:put:)"	self assert: (association respondsTo: #asDeferred).	self assert: (association respondsTo: #isDeferred).	" VisualWorks requires that a literal that is an association be installed in a compiled code as itself  (see CompiledCode&gt;&gt;initializeLiteralAt:put:)"	self assert: association asDeferred == association.	self assert: association isDeferred not.</body></methods><methods><class-id>Seaside.VariableBindingTest</class-id> <category>private</category><body package="Grease-Tests-VisualWorks-Core">addConditionalProbeIn: aConditionalProbeResource	| method probedMethod probe n |	method := aConditionalProbeResource compiledMethod.	method isProbed ifTrue: [^false].	probedMethod := method newFullProbedMethod.	probe := CodeProbe new.	n := method selector size + 1.	probe record: (probedMethod probeRecordFor: (n to: n)).	probedMethod addProbe: probe.	probe unconditionallyInsertInto: probedMethod replacing: method.	aConditionalProbeResource		probedMethod: probedMethod;		probe: probe.	^true</body><body package="Grease-Tests-VisualWorks-Core">conditionalProbeResource	^ (self resources		detect: [ :each | each = ConditionalProbeResource ]		ifNone: [ nil ]) ifNotNil: [ :resource | resource current ]</body><body package="Grease-Tests-VisualWorks-Core">makeDebugActiveWhile: aBlock	| oldValue result |	oldValue := PDPManager debugActive.	[ PDPManager debugActive: true.		result := aBlock value ] ensure: [ PDPManager debugActive: oldValue ].	^ result</body><body package="Grease-Tests-VisualWorks-Core">probedMethodForTestAssociation	" This method will have a probe installed during the running of the #testAssociation test method. "</body><body package="Grease-Tests-VisualWorks-Core">setConditionExpression: aString inProbe: aProbe on: aProbedMethod	| newMethod |	newMethod := ProbeExprCompiler new		compileProbeExpression: aString		forProbe: aProbe		inClass: self class		beginScope: (aProbedMethod scopeForProbe: aProbe)		notifying: nil		ifFail: [^false].	newMethod == nil		ifTrue: [^false].	aProbe testMethodAndSource: newMethod -&gt; aString.	^true</body></methods><methods><class-id>Seaside.VariableBindingTest class</class-id> <category>accessing</category><body package="Grease-Tests-VisualWorks-Core">resetConditionalProbeVariable	ConditionalProbeVariable := nil</body></methods><methods><class-id>Grease.KnownTestFailure class</class-id> <category>running</category><body package="Grease-Tests-VisualWorks-Core">seasideTestFix: aTest running: aBlock"	Execute aBlock only if RunTests shared variable is true. Otherwise, run #seasideIgnore:"	^ self		seasideTestFix: aTest		running: aBlock		because: ('The ', self name, '.RunTests shared variable is set to false.')</body><body package="Grease-Tests-VisualWorks-Core">seasideTestFix: aTest running: aBlock because: aString"	Execute aBlock only if RunTests shared variable is true. Otherwise, run #seasideIgnore:"	^RunTests		ifTrue: [aBlock value]		ifFalse: [self			seasideTestIgnore: aTest			running: aBlock			because: aString]</body><body package="Grease-Tests-VisualWorks-Core">seasideTestIgnore: aTest running: aBlock because: aString	"	Do not execute aBlock. Write a notice to Transcript that this test is being excluded."	| notice |	notice := String new writeStream.	notice nextPutAll: '=&gt;'.	notice		tab;		nextPutAll: aTest class name;		nextPutAll: ' &gt;&gt; ';		nextPutAll: aTest selector;		nextPutAll: ' is ignored.';		cr;		tab;		nextPutAll: aString.	Transcript		cr;		show: notice contents</body></methods><methods><class-id>Grease.DateAndTimeTest</class-id> <category>tests</category><body package="Grease-Tests-VisualWorks-Core">testInstanceCreation	| timestamp date time dateAndTime |	timestamp := Timestamp nowUTC.	date := timestamp asDate.	time := timestamp asTime.	dateAndTime := DateAndTime fromDate: date andTime: time.	self assert: dateAndTime class == DateAndTime.	self assert: dateAndTime offset class == Duration.	self assert: timestamp asSeconds = dateAndTime asSeconds.	dateAndTime := DateAndTime fromTimestamp: timestamp offset: Duration zero.	self assert: dateAndTime class == DateAndTime.	self assert: dateAndTime offset class == Duration.	self assert: timestamp = dateAndTime.	self assert: dateAndTime = timestamp.	dateAndTime := DateAndTime fromNanoseconds: timestamp asNanoseconds.	self assert: dateAndTime class == DateAndTime.	self assert: dateAndTime offset class == Duration.	self assert: timestamp asSeconds = dateAndTime asSeconds.	self assert: timestamp = dateAndTime.	self assert: dateAndTime = timestamp.</body></methods><methods><class-id>Seaside.ConditionalProbeResource</class-id> <category>accessing</category><body package="Grease-Tests-VisualWorks-Core">compiledMethod	^compiledMethod</body><body package="Grease-Tests-VisualWorks-Core">compiledMethod: anObject	compiledMethod := anObject</body><body package="Grease-Tests-VisualWorks-Core">probe	^probe</body><body package="Grease-Tests-VisualWorks-Core">probe: anObject	probe := anObject</body><body package="Grease-Tests-VisualWorks-Core">probedMethod	^probedMethod</body><body package="Grease-Tests-VisualWorks-Core">probedMethod: anObject	probedMethod := anObject</body></methods><methods><class-id>Seaside.ConditionalProbeResource</class-id> <category>Running</category><body package="Grease-Tests-VisualWorks-Core">tearDown	self probedMethod ifNotNil: [ :method | method revert ].	VariableBindingTest resetConditionalProbeVariable</body></methods><methods><class-id>Seaside.VariableBindingTest</class-id> <category>tests</category><body package="Grease-Tests-VisualWorks-Core">testConditionalProbeCompilation	" Test the use of Association as variable binding in conditional probe expression compilation.	DebugActive and ConditionalProbeVariable will be used as literals in the expression compilation. "	&lt;uses: #ConditionalProbeResource&gt;	| resource debugVariable |	self assert: ConditionalProbeVariable isNil.	(resource := self conditionalProbeResource) compiledMethod: (self class compiledMethodAt: #probedMethodForTestAssociation).	self addConditionalProbeIn: resource.	" Set the conditional probe expression compilation, and, indirectly test that it has been compiled by executing the method on which the probe is set. "	self makeDebugActiveWhile: [		self			setConditionExpression: 'DebugActive and: [ ConditionalProbeVariable := ''probed''. false ]'			inProbe: resource probe			on: resource probedMethod.		self probedMethodForTestAssociation ].	" Test DebugActive literal, binding (it should be an Association), name and value. "	debugVariable := resource probe basicTestMethod literalAt: 1.	self assert: debugVariable class == Association.	self assert: debugVariable key = #DebugActive.	self assert: debugVariable value == PDPManager debugActive.	" Test that ConditionalProbeVariable was correctly set in the condition expression. "	self assert: ConditionalProbeVariable = 'probed'</body></methods><methods><class-id>Grease.GRUtf8CodecTest</class-id> <category>accessing</category><body package="Grease-Tests-VisualWorks-Core">decodedString	&lt;SeasideOverride&gt;	^ 'ÃbÃ¨rstrÃ®Ã±gÃ©' asTwoByteString</body></methods><methods><class-id>Grease.GRUtf8CodecTest</class-id> <category>tests</category><body package="Grease-Tests-VisualWorks-Core">testCodecUtf8ShortestForm	"Non shortest form characters should be rejected	See Corrigendum #1: UTF-8 Shortest Form http://www.unicode.org/versions/corrigendum1.html"	&lt;SeasideOverride&gt;		"	The original Seaside code just does not make sense. 'self deny:' will signall an AssertionFailed exception	but that's part of the SUnit framework, so wrapping the whole thing into a 'should raise Error' is nonsense.	Simple assert: should suffice.	"	#('UTF-8' 'utf-8') do: [ :codecName |		| codec abc |		codec := GRCodec forEncoding: codecName.		abc := self asString: #(193 129 193 130 193 131 ).		self assert: (codec decode: abc) = 'ABC']</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>TestResource</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>GRUtf8CodecTest</name><environment>Grease</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grease-Tests-Core</category><attributes><package>Grease-Tests-Core</package></attributes></class></st-source>