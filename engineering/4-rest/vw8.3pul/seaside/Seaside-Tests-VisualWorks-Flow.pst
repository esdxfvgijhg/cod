<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-VisualWorks-FlowNotice: Copyright 1999-2015 Cincom Systems, Inc.  All rights reserved.Comment: VisualWorks Continuation test suite.DbIdentifier: bear73DbTrace: 492654DbUsername: jkottDbVersion: 3.2.0 - 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-VisualWorks-Flow' ''))PackageName: Seaside-Tests-VisualWorks-FlowParcel: #('Seaside-Tests-VisualWorks-Flow')PrerequisiteDescriptions: #(#(#name 'Seaside-Namespace' #componentType #package) #(#name 'Seaside-VisualWorks-Flow' #componentType #package))PrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-VisualWorks-Flow' ''))PrintStringCache: (3.2.0 - 1,jkott)Version: 3.2.0 - 1Date: 12:17:56 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAContinuationTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tmp tmp2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-Tests-VisualWorks-Flow</package></attributes></class><class><name>WAPartialContinuationTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Seaside-Tests-VisualWorks-Flow</package></attributes></class><methods><class-id>Seaside.WAContinuationTest</class-id> <category>tests</category><body package="Seaside-Tests-VisualWorks-Flow">testBlockEscape	| x |	tmp := 0.	x := [ tmp := tmp + 1. tmp2 value ].	self callcc: [ :cc | tmp2 := cc. x value ].	tmp2 := [ ].	x value.	self assert: tmp = 2</body><body package="Seaside-Tests-VisualWorks-Flow">testBlockTemps	| y |	#(1 2 3) do: [ :i |		| x |		x := i.		tmp ifNil: [ tmp2 := (self callcc: [ :cc | tmp := cc. [ :q | ] ]) ].		tmp2 value: x.		x := 17 ].	y := (self callcc: [ :cc | tmp value: cc. 42 ]).	self assert: y = 1</body><body package="Seaside-Tests-VisualWorks-Flow">testBlockVars	| continuation |	tmp := 0.	tmp := (self callcc: [ :cc | continuation := cc. 0 ]) + tmp.	tmp2		ifNotNil: [ tmp2 value ]		ifNil: [			#(1 2 3) do: [ :i |				self callcc: [ :cc | tmp2 := cc. continuation value: i ] ] ].	self assert: tmp = 6</body><body package="Seaside-Tests-VisualWorks-Flow">testComprehension	"What should this print out?	| yin yang |	yin := [ :x | Transcript cr. x ] value: Continuation current.	yang := [ :x | Transcript nextPut: $*. x ] value: Continuation current.	yin value: yang"</body><body package="Seaside-Tests-VisualWorks-Flow">testMethodTemps	| i continuation |	i := 0.	i := i + (self callcc: [:cc | continuation := cc. 1]).	self assert: i ~= 3.	i = 2 ifFalse: [ continuation value: 2 ]</body><body package="Seaside-Tests-VisualWorks-Flow">testNestedWhileTrue	| account continuation accountValues |	tmp := 0.	account := nil.	accountValues := Array new: 2.	tmp2 := Array new: 2.	[:finalVal | [:initialVal | 	"This puts account two levels up"	[account := self				callcc: [:oc | 					continuation := oc.					initialVal].	tmp2 at: tmp + 1 put: account.	account isNil] whileTrue.	tmp := tmp + 1.	accountValues at: tmp put: account.	account = finalVal ifFalse: [continuation value: finalVal]]		value: 1	"initialVal"]		value: 2.	"finalVal"	self assert: tmp = 2.	self assert: account = 2</body><body package="Seaside-Tests-VisualWorks-Flow">testReentrant	| assoc |	assoc := self callcc: [ :cc | cc -&gt; 0 ].	assoc value: assoc value + 1.	self assert: assoc value ~= 5.	assoc value = 4		ifFalse: [ assoc key value: assoc ]</body><body package="Seaside-Tests-VisualWorks-Flow">testSimpleCallCC	| x continuation |	x := self callcc: [ :cc | continuation := cc. false ].	x ifFalse: [ continuation value: true ].	self assert: x</body><body package="Seaside-Tests-VisualWorks-Flow">testSimpleCallCCWithPossibleArgument	| x continuation |	x := self callcc: [ :cc | continuation := cc. false ].	x ifFalse: [ continuation valueWithPossibleArguments: (Array with:  true) ].	self assert: x</body><body package="Seaside-Tests-VisualWorks-Flow">testSimplestCallCC	| x |	x := self callcc: [ :cc | cc value: true ].	self assert: x</body><body package="Seaside-Tests-VisualWorks-Flow">testWhileTrue	| account continuation accountValues  |	tmp := 0.	account := nil.	accountValues := Array new: 2.	tmp2 := Array new: 2.	[account := (self callcc: [:oc | continuation := oc. 1 ]).	tmp2 at: tmp + 1 put: account.	account isNil] whileTrue.	tmp := tmp + 1.	accountValues at: tmp put: account.	account = 1 ifTrue: [continuation value: 2].	self assert: tmp = 2.	self assert: account = 2.</body></methods><methods><class-id>Seaside.WAContinuationTest</class-id> <category>private</category><body package="Seaside-Tests-VisualWorks-Flow">callcc: aBlock	^WAContinuation currentDo: aBlock</body></methods><methods><class-id>Seaside.WAPartialContinuationTest</class-id> <category>tests</category><body package="Seaside-Tests-VisualWorks-Flow">testEnsure	| kk count |		" before evaluation, ensure blocks should be unwound "	count := 0.	self mark: [ 2 * (self callcc: [ :cc | kk := cc. 0 ]) ].	self assert: (self mark: [		[ kk value: 3 ]			ensure: [ count := count + 1 ] ])				= 6.	self assert: count = 1.		" ensure blocks within the continuation should be unwound as well "	count := 0.	self mark: [ [ 2 * (self callcc: [ :cc | kk := cc. 0 ]) ] ensure: [ count := count + 1 ] ].	self assert: count = 1.	self assert: (kk value: 2) = 4.	self assert: count = 2.	self assert: (kk value: 3) = 6.	self assert: count = 3</body><body package="Seaside-Tests-VisualWorks-Flow">testMarkerOnValue	| kk captured seen |	captured := false.	seen := false.	self	shouldnt: [			self markDiscardingResultOf: [ | value |				value := self callcc: [ :cc | kk := cc. captured := true ].				seen := true.				value ] ]		raise: Error.			self assert: captured.	self assert: seen.	captured := false.	seen := false.	"Make sure the marker method is not included in the continuation and the continuation returns directly	into the marker method."	self assert: (self mark: [ kk value: 123. 456 ]) = 123.	self deny: captured.	self assert: seen.</body><body package="Seaside-Tests-VisualWorks-Flow">testNestedEvaluation	| k1 k2 |	self assert: (self mark: [ 		2 * (self callcc: [ :c1 | 			k1 := c1. 			3 * (self callcc: [ :c2 |				k2 := c2.				4 ]) ]) ])					= 24.						self assert: (self mark: [		k1 value: 5 ])			= 10.	self assert: (self mark: [		k2 value: 5 ])			= 30</body><body package="Seaside-Tests-VisualWorks-Flow">testNoMarkerOnCall	| captured seen |	captured := false.	seen := false.	self	should: [ self callcc: [ :cc | captured := true ]. seen := true ]		raise: Error.			self deny: captured.	self deny: seen.</body><body package="Seaside-Tests-VisualWorks-Flow">testNoMarkerOnValue	| kk captured seen |	captured := false.	seen := false.	self	shouldnt: [			self markDiscardingResultOf: [ | value |				value := self callcc: [ :cc | kk := cc. captured := true ].				seen := true.				value ] ]		raise: Error.			self assert: captured.	self assert: seen.	captured := false.	seen := false.	"Make sure the marker method was not included in the continuation"	self assert: (kk value: 123) = 123.	self deny: captured.	self assert: seen.</body><body package="Seaside-Tests-VisualWorks-Flow">testReentrant	| kk |	self assert: (self mark: [ 		2 * (self callcc: [ :cc | 			kk := cc. 2 ]) ]) 				= 4.		self assert: (self mark: [		kk value: 3 ]) 			= 6.	self assert: (self mark: [		kk value: 4 ]) 			= 8.	self assert: (self mark: [		kk value: 5 ]) 			= 10</body><body package="Seaside-Tests-VisualWorks-Flow">testSimple	self assert: (self mark: [ self callcc: [ :cc | cc value: true ] ])</body></methods><methods><class-id>Seaside.WAPartialContinuationTest</class-id> <category>private</category><body package="Seaside-Tests-VisualWorks-Flow">callcc: aBlock	^WAPartialContinuation currentDo: aBlock</body><body package="Seaside-Tests-VisualWorks-Flow">mark: aBlock	^aBlock on: WAMarkerRequest do: [:request | request resume: thisContext supposedHome]</body><body package="Seaside-Tests-VisualWorks-Flow">markDiscardingResultOf: aBlock	aBlock on: WAMarkerRequest do: [:request | request resume: thisContext supposedHome]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>