<?xml version="1.0"?><st-source><!-- Name: Seaside-Tools-CoreComment: Administrative tools, useful to have for production and development environments.DbIdentifier: bear73DbTrace: 492582DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.27 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-VisualWorks-Core' '') #(#any 'Seaside-Component' '') #(#any 'Seaside-RenderLoop' '') #(#any 'Seaside-Session' ''))Id: f260dd1f-0bee-4357-bcb7-0c5a1d8a7ce6Namespace: SeasidePackageName: Seaside-Tools-CoreParcel: #('Seaside-Tools-Core')ParcelName: Seaside-Tools-CorePrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Core' '') #('Seaside-VisualWorks-Core' '') #('Seaside-Component' '') #('Seaside-RenderLoop' '') #('Seaside-Session' ''))PrintStringCache: (3.2.0 - JohanBrichau.27 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tools-Core-JohanBrichau.27.mczVersion: 3.2.0 - JohanBrichau.27 1Date: 3:31:27 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:27 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAAdmin</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>configuredApplicationDefaults configuredExceptionHandlingDefaults </class-inst-vars><imports></imports><category>Seaside-Tools-Core</category><attributes><package>Seaside-Tools-Core</package></attributes></class><methods><class-id>Seaside.WAAdmin class</class-id> <category>registration</category><body package="Seaside-Tools-Core">configureNewApplication: anApplication	| filter |	anApplication configuration		removeParent: WAApplicationConfiguration instance; "make the chain slightly cleaner"		addParent: WARenderLoopConfiguration instance;		addParent: self applicationDefaults.			filter := WAExceptionFilter new.	filter configuration addParent: self applicationExceptionHandlingDefaults.	anApplication addFilter: filter</body><body package="Seaside-Tools-Core">register: aComponentClass asApplicationAt: aString	^ self register: aComponentClass asApplicationAt: aString in: self defaultDispatcher</body><body package="Seaside-Tools-Core">register: aComponentClass asApplicationAt: aString in: aDispatcher	"Use this to programmatically register a component as an application."	| application |	application := self register: WAApplication at: aString in: aDispatcher.	self configureNewApplication: application.	application rootClass: aComponentClass.	^ application</body><body package="Seaside-Tools-Core">register: aComponentClass asApplicationAt: aString user: user password: password 	"Like #register:asApplicationAt: but additionally adds password protection."	| application |	application := self 		register: aComponentClass		asApplicationAt: aString.	application configuration addParent: WAAuthConfiguration instance.	application 		preferenceAt: #login		put: user.	application 		preferenceAt: #passwordHash		put: (GRPlatform current secureHashFor: password).	application addFilter: WAAuthenticationFilter new.	^ application</body><body package="Seaside-Tools-Core">register: anEntryPointClass at: aString	^ self register: anEntryPointClass at: aString in: self defaultDispatcher</body><body package="Seaside-Tools-Core">register: aRequestHandlerClass at: aString in: aDispatcher	| path dispatcher |	path := aString substrings: '/'.	dispatcher := path allButLast		inject: aDispatcher		into: [ :result :each |			result handlers 				at: each				ifAbsent: [ result register: WADispatcher new at: each ] ].	^ dispatcher register: aRequestHandlerClass new at: path last</body><body package="Seaside-Tools-Core">unregister: aString	"Unregister the application aString in the default dispatcher."	^ self unregister: aString in: self defaultDispatcher</body><body package="Seaside-Tools-Core">unregister: aString in: aDispatcher	"Unregister the application aString in aDispatcher."	| path dispatcher |	path := aString substrings: '/'.	dispatcher := path		inject: aDispatcher		into: [ :result :each |			result handlers				at: each				ifAbsent: [ ^ nil ] ].	^ dispatcher parent		unregister: dispatcher</body></methods><methods><class-id>Seaside.WAAdmin class</class-id> <category>server adaptors</category><body package="Seaside-Tools-Core">defaultServerManager	"Return the default server manager"		^ WAServerManager default</body><body package="Seaside-Tools-Core">serverAdaptors	"Return a collection of Server Adaptors that are currently registered in the default Server Manager."	^ self defaultServerManager adaptors</body></methods><methods><class-id>Seaside.WAAdmin class</class-id> <category>development</category><body package="Seaside-Tools-Core">clearAll	self clearDefaultDispatcher.	self clearConfigurationCaches.	self clearSessions</body><body package="Seaside-Tools-Core">clearConfigurationCaches	WASystemConfiguration clearAllDescriptions</body><body package="Seaside-Tools-Core">clearDefaultDispatcher	WADispatcher resetDefault</body><body package="Seaside-Tools-Core">clearSessions	self defaultServerManager adaptors do: [ :adaptor |		adaptor requestHandler withDescendantsDo: [ :handler |			handler isApplication ifTrue: [ handler clear ] ] ]</body></methods><methods><class-id>Seaside.WAAdmin class</class-id> <category>initialization</category><body package="Seaside-Tools-Core">configureApplicationDefaults: aSharedConfiguration	"WARenderLoopConfiguration is added by default because most users will use WASession and the Render Loop."	(aSharedConfiguration parents includes: WARenderLoopConfiguration instance) ifFalse: [		aSharedConfiguration addParent: WARenderLoopConfiguration instance ]</body><body package="Seaside-Tools-Core">configureApplicationExceptionHandlingDefaults: aSharedConfiguration	(aSharedConfiguration parents includes: WAExceptionFilterConfiguration instance) ifFalse: [		aSharedConfiguration addParent: WAExceptionFilterConfiguration instance ]</body></methods><methods><class-id>Seaside.WAAdmin class</class-id> <category>configuration</category><body package="Seaside-Tools-Core">applicationDefaults	| config |	config := WASharedConfiguration named: 'Application Defaults'.	(configuredApplicationDefaults ifNil: [ false ]) ifFalse: [		self configureApplicationDefaults: config.		configuredApplicationDefaults := true ].	^ config</body><body package="Seaside-Tools-Core">applicationExceptionHandlingDefaults	| config |	config := WASharedConfiguration named: 'Application Exception Handling Defaults'.	(configuredExceptionHandlingDefaults ifNil: [ false ]) ifFalse: [		self configureApplicationExceptionHandlingDefaults: config.		configuredExceptionHandlingDefaults := true ].	^ config</body><body package="Seaside-Tools-Core">defaultDispatcher	^ WADispatcher default</body></methods><methods><class-id>Seaside.WAServerAdaptor class</class-id> <category>*seaside-tools-core</category><body package="Seaside-Tools-Core">default	"Helper method that returns a single adaptor of this class from the default WAServerManager.	If there are no adaptors of this class registered, return nil. If there are multiple adaptors	of this type, signal an error."		| adaptors |	adaptors := WAAdmin serverAdaptors select: [ :each | each isKindOf: self ].	(adaptors size &gt; 1) ifTrue: [ self error: 'You cannot use this convenience method when more than one adaptor of the same type are registered. Use WAServerManager or a graphical interface when dealing with multiple adaptors of the same type.' ].	^ adaptors isEmpty		ifTrue: [ nil ]		ifFalse: [ adaptors first ]</body><body package="Seaside-Tools-Core">start	"Convenience method to start a single already registered adaptor of the type of the	receiver."	self default start</body><body package="Seaside-Tools-Core">startOn: portInteger	"Convenience method to start a single adaptor on the specified port. If an existing	adaptor of this type is already registered, it will be restarted on the specified port."	| adaptor |	adaptor := self default.	adaptor isNil		ifFalse: [ adaptor stop; port: portInteger ]		ifTrue: [ adaptor := self port: portInteger ].	adaptor start</body><body package="Seaside-Tools-Core">stop	"Convenience method to stop a currently running adaptor of the type of the receiver	as long as there is only one such adaptor currently registered."	| default |	default := self default.	default isNil ifFalse: [ default stop ]</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tools-core</category><body package="Seaside-Tools-Core">seasideToolsCore	^ self new		name: 'Seaside-Tools-Core';		description: 'Administrative tools, useful to have for production and development environments.';		addDependency: 'Seaside-Core';		addDependency: 'Seaside-Component'; "only for deprecated class-side method extension"		addDependency: 'Seaside-RenderLoop'; "for class references in WAAdmin"		addDependency: 'Seaside-Session'; "for class reference in WAAdmin"		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class></st-source>