<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-JSONComment: Unit tests for the Seaside-JSON-Core package.DbIdentifier: bear73DbTrace: 492661DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.15 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-JSON-Core' ''))Id: 7d3facf0-183f-4a55-883b-708070123ba4Namespace: SeasidePackageName: Seaside-Tests-JSONParcel: #('Seaside-Tests-JSON')ParcelName: Seaside-Tests-JSONPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-JSON-Core' ''))PrintStringCache: (3.2.0 - JohanBrichau.15 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-JSON-JohanBrichau.15.mczVersion: 3.2.0 - JohanBrichau.15 1Date: 12:17:57 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:57 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAJsonRenderingTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-JSON</category><attributes><package>Seaside-Tests-JSON</package></attributes></class><class><name>WAJsonStreamTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>printer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-JSON</category><attributes><package>Seaside-Tests-JSON</package></attributes></class><class><name>WAJsonParserTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-JSON</category><attributes><package>Seaside-Tests-JSON</package></attributes></class><methods><class-id>Seaside.WAJsonRenderingTest</class-id> <category>private</category><body package="Seaside-Tests-JSON">assert: aBlock gives: aString	| json |	json := String streamContents: [ :stream |		| context document canvas |		document := WAJsonDocument on: stream.		context := WARenderContext new			actionUrl: WAUrl new;			document: document;			yourself.		 canvas := WAJsonCanvas context: context.		canvas render: aBlock.		document close ].	self		assert: json = aString		description:	'Expected: ' , aString printString , ', Actual: ', json printString		resumable: true</body></methods><methods><class-id>Seaside.WAJsonRenderingTest</class-id> <category>tests</category><body package="Seaside-Tests-JSON">testArray	self		assert: [ :json |			json array: [				json					value: 1;					value: '1';					value: true;					value: false;					value: nil ] ]		gives: '[1, "1", true, false, null]'.	self		assert: [ :json |			json array: [				json value: 1 ] ]		gives: '[1]'</body><body package="Seaside-Tests-JSON">testNestedArray	self		assert: [ :json |			json array: [				json					value: 1;					value: [						json array: [							json value: '1' ] ];					value: 2 ] ]		gives: '[1, ["1"], 2]'.	self		assert: [ :json |			json array: [				json array: [					json value: 1 ] ] ] 		gives: '[[1]]'</body><body package="Seaside-Tests-JSON">testNestedObject	self		assert: [ :json |			json object: [				json					key: 'a' value: 'b';					key: '1' value: [						json object: [							json key: '2' value: 2 ] ];					key: 'c' value: 'd' ] ]		gives: '{"a": "b", "1": {"2": 2}, "c": "d"}'</body><body package="Seaside-Tests-JSON">testObject	self		assert: [ :json |			json object: [				json					key: '1' value: '1';					key: '2' value: 2 ] ]		gives: '{"1": "1", "2": 2}'.	self		assert: [ :json |			json object: [				json key: '1' value: 1 ] ]		gives: '{"1": 1}'</body><body package="Seaside-Tests-JSON">testObjectValues	self		assert: [ :json |			json array: [				json object: [					json key: 'name' value: 'WAXmlDocument' ].				json object: [					json key: 'name' value: 'WAJsonDocument' ] ] ]		gives: '[{"name": "WAXmlDocument"}, {"name": "WAJsonDocument"}]'</body><body package="Seaside-Tests-JSON">testSpecialFloats	"Tests that float values that can't be represented as JSON objects are null	http://code.google.com/p/seaside/issues/detail?id=730	http://ecma-international.org/ecma-262/5.1/#sec-15.12.3"	self		assert: [ :json |			json array: [				json					value: Float infinity;					value: Float infinity * -1;					value: Float nan ] ]		gives: '[null, null, null]'</body><body package="Seaside-Tests-JSON">testStringEscape	self		assert: [ :json |			json array: [				json value: '"\/' ] ]		gives: '["\"\\/"]'</body><body package="Seaside-Tests-JSON">testStringEscapeNamed	| backSpace formFeed lineFeed carriageReturn horizontalTab |	backSpace := Character codePoint: 8.	horizontalTab := Character codePoint: 9.	lineFeed := Character codePoint: 10.	formFeed := Character codePoint: 12.	carriageReturn := Character codePoint: 13.	self		assert: [ :json |			json array: [				json value: (String streamContents: [ :stream |					stream						nextPut: backSpace;						nextPut: horizontalTab;						nextPut: lineFeed;						nextPut: formFeed;						nextPut: carriageReturn ]) ] ]		gives: '["\b\t\n\f\r"]'</body><body package="Seaside-Tests-JSON">testStringEscapeUnicode	| lineSeparator paragraphSeparator snowMan |	lineSeparator := Character codePoint: 16r2028.	paragraphSeparator := Character codePoint: 16r2028.	paragraphSeparator := Character codePoint: 16r2028.	snowMan := Character codePoint: 16r2603.	self		assert: [ :json |			json array: [				json value: (String streamContents: [ :stream |					stream						nextPut: lineSeparator;						nextPut: paragraphSeparator;						nextPut: snowMan ]) ] ]		gives: '["', (String with: lineSeparator), (String with: paragraphSeparator), (String with: snowMan), '"]'</body><body package="Seaside-Tests-JSON">testStringEscapeUnicodeSmp	| emoji |	emoji := Character codePoint: 16r1F64C.	self		assert: [ :json |			json array: [				json value: (String streamContents: [ :stream |					stream nextPut: emoji ]) ] ]		gives: '["', (String with: emoji), '"]'</body></methods><methods><class-id>Seaside.WAJsonStreamTest</class-id> <category>asserting</category><body package="Seaside-Tests-JSON">assert: anObject equals: aString	self		assert: anObject asJson = aString		description: anObject asJson , ' expected to be ' , aString greaseString		resumable: true</body><body package="Seaside-Tests-JSON">assert: anObject equalsIgnoreCase: aString	self		assert: anObject asJson asLowercase = aString asLowercase		description: anObject asJson , ' expected to be ' , aString greaseString		resumable: true</body></methods><methods><class-id>Seaside.WAJsonStreamTest</class-id> <category>tests-literals</category><body package="Seaside-Tests-JSON">testCharacter	self assert: $a equals: '"a"'</body><body package="Seaside-Tests-JSON">testLiteral	self assert: true equals: 'true'.	self assert: false equals: 'false'.	self assert: nil equals: 'null'</body><body package="Seaside-Tests-JSON">testNumber	self assert: 123 equals: '123'.	self assert: 123.4 equals: '123.4'</body><body package="Seaside-Tests-JSON">testStringBasic	self assert: 'abc' equals: '"abc"'.	self assert: '123' equals: '"123"'</body><body package="Seaside-Tests-JSON">testStringEscaping	self assert: '''' equals: '"''"'.	self assert: '"' equals: '"\""'.	self assert: '\' equals: '"\\"'</body><body package="Seaside-Tests-JSON">testStringMultiByte	"regression test for	Issue 217: MultibyteString JavascriptOn infinite recursion [GemStone]	http://code.google.com/p/glassdb/issues/detail?id=217"	| multibyteString |	multibyteString := String with: (Character codePoint: 8364).	self assert: multibyteString equals: '"', multibyteString, '"'</body><body package="Seaside-Tests-JSON">testStringSpecial	self assert: (String with: Character cr) equals: '"\r"'.	self assert: (String with: Character lf) equals: '"\n"'.	self assert: (String with: Character tab) equals: '"\t"'.	self assert: (String with: (Character codePoint: 8)) equals: '"\b"'.	self assert: (String with: (Character codePoint: 12)) equals: '"\f"'.	"http://tools.ietf.org/html/rfc4627#section-2.5"	0 to: 16r001F do: [ :codePoint |		(#(8 "backspace" 9 "tab" 10 "lf" 12 "form feed" 13 "cr") includes: codePoint) ifFalse: [			self				assert: (String with: (Character codePoint: codePoint))				"case doesn't matter"				equalsIgnoreCase: '"\u', ((codePoint printStringBase: 16) padLeftTo: 4 with: $0), '"'  ] ]</body></methods><methods><class-id>Seaside.WAJsonStreamTest</class-id> <category>printing</category><body package="Seaside-Tests-JSON">jsonOn: aRenderer	printer value: aRenderer</body></methods><methods><class-id>Seaside.WAJsonStreamTest</class-id> <category>tests</category><body package="Seaside-Tests-JSON">testArray	self assert: #(1 2 3) equals: '[1, 2, 3]'</body><body package="Seaside-Tests-JSON">testDictionary	self		assert:			((GRSmallDictionary new)				at: 'foo' put: 1;				at: 'bar' put: 2;				at: 'zork' put: 3;				yourself)		equals: '{"foo": 1, "bar": 2, "zork": 3}'.	self		assert:			((GRSmallDictionary new)				at: '' put: 'empty';				yourself)		equals: '{"": "empty"}'.	self		assert:			((Dictionary new)				at: 1 put: 'not-a-string';				yourself)		equals: '{1: "not-a-string"}'.	self		assert:			((Dictionary new)				at: '1abc' put: 'not-an-id';				yourself)		equals: '{"1abc": "not-an-id"}'.	self		assert:			((Dictionary new)				at: 'abc1' put: 'totally sexy';				yourself)		equals: '{"abc1": "totally sexy"}'</body><body package="Seaside-Tests-JSON">testObject	self		should: [ Object new asJson ]		raise: Error</body></methods><methods><class-id>Seaside.WAJsonStreamTest</class-id> <category>tests-custom</category><body package="Seaside-Tests-JSON">testCustomArray	printer := [ :renderer | renderer render: #('aString1' ('aString2' 'aString3')) ].	self assert: self equals: '["aString1", ["aString2", "aString3"]]'</body><body package="Seaside-Tests-JSON">testCustomDictionary	printer := [ :renderer | 		renderer render: (GRSmallDictionary new			at: 'foo' put: 'bar';			at: 'zork' put: (GRSmallDictionary new				at: 'foo' put: 'bar';				yourself);			yourself) ].	self assert: self equals: '{"foo": "bar", "zork": {"foo": "bar"}}'</body></methods><methods><class-id>Seaside.WAJsonParserTest</class-id> <category>tests-literals</category><body package="Seaside-Tests-JSON">testFalse	self deny: (self parse: 'false')</body><body package="Seaside-Tests-JSON">testNull	self assert: (self parse: 'null') isNil</body><body package="Seaside-Tests-JSON">testNumberFloat	self assert: (self parse: '0.0') = 0.0.	self assert: (self parse: '0.12') = 0.12.	self assert: (self parse: '-0.12') = -0.12.	self assert: (self parse: '12.34') = 12.34.	self assert: (self parse: '-12.34') = -12.34.	self assert: (self parse: '1.2e0') = 1.2.	self assert: (self parse: '1.2e+1') = 12.0.	self assert: (self parse: '1.2e-1') = 1.2e-1</body><body package="Seaside-Tests-JSON">testNumberInteger	self assert: (self parse: '0') = 0.	self assert: (self parse: '1') = 1.	self assert: (self parse: '-1') = -1.	self assert: (self parse: '12') = 12.	self assert: (self parse: '-12') = -12.	self assert: (self parse: '1e2') = 100.	self assert: (self parse: '1e+2') = 100</body><body package="Seaside-Tests-JSON">testString	self assert: (self parse: '""') = ''.	self assert: (self parse: '"foo"') = 'foo'.	self assert: (self parse: '"foo bar"') = 'foo bar'.	self assert: (self parse: '" foo "') = ' foo '</body><body package="Seaside-Tests-JSON">testStringEscaped	self assert: (self parse: '"\""') = '"'.	self assert: (self parse: '"\\"') = '\'.	self assert: (self parse: '"\/"') = '/'.	self assert: (self parse: '"\b"') = (String with: Character backspace).	self assert: (self parse: '"\f"') = (String with: Character newPage).	self assert: (self parse: '"\n"') = (String with: Character lf).	self assert: (self parse: '"\r"') = (String with: Character cr).	self assert: (self parse: '"\t"') = (String with: Character tab).	self assert: (self parse: '"\u20Ac"') = (String with: (Character codePoint: 16r20AC))</body><body package="Seaside-Tests-JSON">testTrue	self assert: (self parse: 'true')</body></methods><methods><class-id>Seaside.WAJsonParserTest</class-id> <category>tests-objects</category><body package="Seaside-Tests-JSON">testBigObject	| result |	result := self parse: ' { "a" : 1 , "b" : 2 } '.	self assert: result isDictionary.	self assert: result size = 2.	self assert: (result at: 'a') = 1.	self assert: (result at: 'b') = 2</body><body package="Seaside-Tests-JSON">testEmptyObject	| result |	result := self parse: '{}'.	self assert: result isDictionary.	self assert: result isEmpty</body><body package="Seaside-Tests-JSON">testNestedObject	| result |	result := self parse: '{"object":{"1":"2"}} '.	self assert: result isDictionary.	self assert: result size = 1.	result := result at: 'object'.	self assert: result isDictionary.	self assert: result size = 1.	self assert: (result at: '1') = '2'</body><body package="Seaside-Tests-JSON">testSmallObject	| result |	result := self parse: '{"a":1}'.	self assert: result isDictionary.	self assert: result size = 1.	self assert: (result at: 'a') = 1</body></methods><methods><class-id>Seaside.WAJsonParserTest</class-id> <category>tests-invalid</category><body package="Seaside-Tests-JSON">testInvalidArray	self assertInvalid: '['.	self assertInvalid: '[1'.	self assertInvalid: '[1,'.	self assertInvalid: '[1,]'.	self assertInvalid: '[1 2]'.	self assertInvalid: '[]]'</body><body package="Seaside-Tests-JSON">testInvalidFalse	self assertInvalid: 'fa'.	self assertInvalid: 'falsely'.	self assertInvalid: 'fabulous'</body><body package="Seaside-Tests-JSON">testInvalidNull	self assertInvalid: 'nu'.	self assertInvalid: 'nuclear'.	self assertInvalid: 'nullified'</body><body package="Seaside-Tests-JSON">testInvalidObject	self assertInvalid: '{'.	self assertInvalid: '{"a"'.	self assertInvalid: '{"a":'.	self assertInvalid: '{"a":"b"'.	self assertInvalid: '{"a":"b",'.	self assertInvalid: '{"a"}'.	self assertInvalid: '{"a":}'.	self assertInvalid: '{"a":"b",}'.	self assertInvalid: '{}}'</body><body package="Seaside-Tests-JSON">testInvalidString	self assertInvalid: '"'.	self assertInvalid: '"a'.	self assertInvalid: '"\"'.	self assertInvalid: '"\a"'.	self assertInvalid: '"\u"'.	self assertInvalid: '"\u1"'.	self assertInvalid: '"\u12"'.	self assertInvalid: '"\u123"'.	self assertInvalid: '"\u123x"'</body><body package="Seaside-Tests-JSON">testInvalidTrue	self assertInvalid: 'tr'.	self assertInvalid: 'trace'.	self assertInvalid: 'truest'</body></methods><methods><class-id>Seaside.WAJsonParserTest</class-id> <category>tests-array</category><body package="Seaside-Tests-JSON">testBigArray	| result |	result := self parse: ' [ "a" , "b" ] '.	self assert: result isArray.	self assert: result size = 2.	self assert: result first = 'a'.	self assert: result second = 'b'</body><body package="Seaside-Tests-JSON">testEmptyArray	| result |	result := self parse: '[]'.	self assert: result isArray.	self assert: result isEmpty</body><body package="Seaside-Tests-JSON">testNestedArray	| result |	result := self parse: '[[2]]'.	self assert: result isArray.	self assert: result size = 1.	result := result first.	self assert: result isArray.	self assert: result size = 1.	self assert: result first = 2</body><body package="Seaside-Tests-JSON">testSmallArray	| result |	result := self parse: '["a"]'.	self assert: result isArray.	self assert: result size = 1.	self assert: result first = 'a'</body></methods><methods><class-id>Seaside.WAJsonParserTest</class-id> <category>tests-real</category><body package="Seaside-Tests-JSON">testExplorerEvent	| result |	result := self parse: '{"recordset": null, "type": "change", "fromElement": null, "toElement": null, "altLeft": false, "keyCode": 0, "repeat": false, "reason": 0, "behaviorCookie": 0, "contentOverflow": false, "behaviorPart": 0, "dataTransfer": null, "ctrlKey": false, "shiftLeft": false, "dataFld": "", "qualifier": "", "wheelDelta": 0, "bookmarks": null, "button": 0, "srcFilter": null, "nextPage": "", "cancelBubble": false, "x": 89, "y": 502, "screenX": 231, "screenY": 1694, "srcUrn": "", "boundElements": {"length": 0}, "clientX": 89, "clientY": 502, "propertyName": "", "shiftKey": false, "ctrlLeft": false, "offsetX": 25, "offsetY": 2, "altKey": false}'.	self assert: (result at: 'type') = 'change'.	self assert: (result at: 'offsetY') = 2.	self deny: (result at: 'altKey').	self assert: (result at: 'dataTransfer') isNil.	self assert: (result at: 'nextPage') = ''</body><body package="Seaside-Tests-JSON">testFirefoxEvent	| result |	result := self parse: '{"type": "change", "eventPhase": 2, "bubbles": true, "cancelable": true, "timeStamp": 0, "CAPTURING_PHASE": 1, "AT_TARGET": 2, "BUBBLING_PHASE": 3, "isTrusted": true, "MOUSEDOWN": 1, "MOUSEUP": 2, "MOUSEOVER": 4, "MOUSEOUT": 8, "MOUSEMOVE": 16, "MOUSEDRAG": 32, "CLICK": 64, "DBLCLICK": 128, "KEYDOWN": 256, "KEYUP": 512, "KEYPRESS": 1024, "DRAGDROP": 2048, "FOCUS": 4096, "BLUR": 8192, "SELECT": 16384, "CHANGE": 32768, "RESET": 65536, "SUBMIT": 131072, "SCROLL": 262144, "LOAD": 524288, "UNLOAD": 1048576, "XFER_DONE": 2097152, "ABORT": 4194304, "ERROR": 8388608, "LOCATE": 16777216, "MOVE": 33554432, "RESIZE": 67108864, "FORWARD": 134217728, "HELP": 268435456, "BACK": 536870912, "TEXT": 1073741824, "ALT_MASK": 1, "CONTROL_MASK": 2, "SHIFT_MASK": 4, "META_MASK": 8}'.	self assert: (result at: 'type') = 'change'.	self assert: (result at: 'eventPhase') = 2.	self assert: (result at: 'bubbles').	self assert: (result at: 'cancelable').	self assert: (result at: 'BACK') = 536870912</body><body package="Seaside-Tests-JSON">testSafariEvent	| result |	result := self parse: '{"returnValue": true, "timeStamp": 1226697417289, "eventPhase": 2, "type": "change", "cancelable": false, "bubbles": true, "cancelBubble": false, "MOUSEOUT": 8, "FOCUS": 4096, "CHANGE": 32768, "MOUSEMOVE": 16, "AT_TARGET": 2, "SELECT": 16384, "BLUR": 8192, "KEYUP": 512, "MOUSEDOWN": 1, "MOUSEDRAG": 32, "BUBBLING_PHASE": 3, "MOUSEUP": 2, "CAPTURING_PHASE": 1, "MOUSEOVER": 4, "CLICK": 64, "DBLCLICK": 128, "KEYDOWN": 256, "KEYPRESS": 1024, "DRAGDROP": 2048}'.	self assert: (result at: 'type') = 'change'.	self assert: (result at: 'eventPhase') = 2.	self assert: (result at: 'bubbles').	self deny: (result at: 'cancelBubble').	self deny: (result at: 'cancelable').	self assert: (result at: 'BLUR') = 8192</body></methods><methods><class-id>Seaside.WAJsonParserTest</class-id> <category>utilities</category><body package="Seaside-Tests-JSON">assertInvalid: aString	self should: [ self parse: aString ] raise: WAJsonSyntaxError</body><body package="Seaside-Tests-JSON">parse: aString	^ WAJsonParser parse: aString</body></methods><methods><class-id>Seaside.WAJsonRenderingTest</class-id> <category>tests</category><body package="Seaside-Tests-JSON">testDateAndTime	&lt;SeasideOverride&gt;   self       assert: [ :json |           | date |           date := DateAndTime year: 2007 month: 11 day: 21 hour: 14minute: 42 second: 48 offset: (Duration days: 0 hours: 2 minutes: 0seconds: 0).           json array: [               json dateAndTime: date ] ]       gives: '["2007-11-21T14:42:48"]'</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-json</category><body package="Seaside-Tests-JSON">seasideTestsJson	^ self new		name: 'Seaside-Tests-JSON';		description: 'Unit tests for the Seaside-JSON-Core package.';		addDependency: 'Seaside-JSON-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>