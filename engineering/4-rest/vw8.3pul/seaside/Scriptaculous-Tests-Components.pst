<?xml version="1.0"?><st-source><!-- Name: Scriptaculous-Tests-ComponentsComment: Functional and unit tests for the Scriptaculous-Components package.DbIdentifier: bear73DbTrace: 492673DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.44 1DevelopmentPrerequisites: #(#(#any 'Scriptaculous-Namespace' '') #(#any 'Scriptaculous-Components' '') #(#any 'Scriptaculous-Tests-Core' ''))Id: c64e88e8-c361-4e76-b161-1393839b608bNamespace: ScriptaculousPackageName: Scriptaculous-Tests-ComponentsParcel: #('Scriptaculous-Tests-Components')ParcelName: Scriptaculous-Tests-ComponentsPrerequisiteParcels: #(#('Scriptaculous-Namespace' '') #('Scriptaculous-Components' '') #('Scriptaculous-Tests-Core' ''))PrintStringCache: (3.2.0 - JohanBrichau.44 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Scriptaculous-Tests-Components-JohanBrichau.44.mczVersion: 3.2.0 - JohanBrichau.44 1Date: 12:17:57 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:57 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SULightboxTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUAllComponentTests</name><environment>Scriptaculous</environment><super>Scriptaculous.SUAllTests</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUSmallBoxTest</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUHorizontalSplitterTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>splitter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUTieredListTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tieredList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUDatePickerTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component timeComponent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUDialogTest</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>answerBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUCarouselTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>carousel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUTitlePaneTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUVerticalSplitterTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>splitter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUCarouselHorizontalTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>carousel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUWindowTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>windows </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUTooltipTest</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUTreeReportTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>treeReport </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUAccordionTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accordion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUTabPanelTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabPanel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><class><name>SUCarouselVerticalTest</name><environment>Scriptaculous</environment><super>Scriptaculous.SUFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>carousel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Components</category><attributes><package>Scriptaculous-Tests-Components</package></attributes></class><methods><class-id>Scriptaculous.SULightboxTest</class-id> <category>user interface</category><body package="Scriptaculous-Tests-Components">inform: aString	self lightbox: (WAFormDialog new addMessage: aString; yourself).	self lightbox: (WAFormDialog new addMessage: 'Back for more'; yourself)</body></methods><methods><class-id>Scriptaculous.SULightboxTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">style	^ 'div#lightbox {	background: white;	border: 1px solid #0000e8;	padding: 2em;	width: 40em;	text-align: center;}div#overlay {	background-color: black;	filter: alpha(opacity=30);	-moz-opacity: 0.3;	opacity: 0.3;}'</body></methods><methods><class-id>Scriptaculous.SULightboxTest</class-id> <category>rendering</category><body package="Scriptaculous-Tests-Components">renderContentOn: html	html form		style: 'text-align: center';		with:[			html div: [				html text: 'What is your favorite transportation system ?'.				3 timesRepeat: [ html break ].				html select					list: #(Automobile Airplane Truck Boat Bicycle Horse Walking Swimming);					selected: value;					callback: [ :v | value := v ].				html submitButton value: 'Ok'; callback: [ self inform: value ] ] ]</body></methods><methods><class-id>Scriptaculous.SUAllComponentTests</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initializeTabs	tabs := OrderedCollection new		add: 'Welcome' -&gt; (Array			with: 'Welcome' -&gt; SUWelcomeTest new			with: 'Counter' -&gt; SUCounterTest new);		add: 'Window' -&gt; (Array			with: 'Window' -&gt; SUWindowTest new			with: 'Lightbox' -&gt; SULightboxTest new			with: 'TitlePane' -&gt; SUTitlePaneTest new			with: 'Splitter Vertical'-&gt; SUVerticalSplitterTest new			with: 'Splitter Horizontal'-&gt; SUHorizontalSplitterTest new);		add: 'Navigation' -&gt; (Array			with: 'TabPanel' -&gt; SUTabPanelTest new			with: 'Accordion' -&gt; SUAccordionTest new			with: 'Carousel' -&gt; SUCarouselTest new			with: 'Carousel Horizontal'-&gt; SUCarouselHorizontalTest new			with: 'Carousel Vertical'-&gt; SUCarouselVerticalTest new);		add: 'Controls' -&gt; (Array			with: 'TieredList' -&gt; SUTieredListTest new			with: 'TreeReport' -&gt; SUTreeReportTest new			with: 'DatePicker' -&gt; SUDatePickerTest new);		yourself</body></methods><methods><class-id>Scriptaculous.SUAllComponentTests</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">title	^ super title , ' Components'</body></methods><methods><class-id>Scriptaculous.SUAllComponentTests</class-id> <category>rendering</category><body package="Scriptaculous-Tests-Components">renderChildrenOn: html	"Display 'Example Source' and 'Actual Source' using a lightbox. "	html div id: 'content'; with: [		selected do: [ :each |			html heading: each key; render: each value.			each value testClass isNil ifFalse: [				html paragraph: [					html anchor						callback: [ self lightbox: (SUClassBrowser onClass: each value testClass) ];						with: 'Example source'.					each value coreClass isNil ifFalse: [						html break.						html anchor							callback: [ self lightbox: (SUClassBrowser onClass: each value coreClass) ];							with: 'Actual implementation' ] ] ]				 ] ]</body></methods><methods><class-id>Scriptaculous.SUAllComponentTests class</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">description	^ 'Scriptaculous Component Functional Test Suite'</body></methods><methods><class-id>Scriptaculous.SUAllComponentTests class</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	(WAAdmin register: self asApplicationAt: 'javascript/scriptaculous-components')		addLibrary: PTDevelopmentLibrary;		addLibrary: SUDevelopmentLibrary;		addLibrary: SUComponentLibrary;		addLibrary: SUAllTestLibrary</body></methods><methods><class-id>Scriptaculous.SUAllComponentTests class</class-id> <category>testing</category><body package="Scriptaculous-Tests-Components">canBeRoot	^ true</body></methods><methods><class-id>Scriptaculous.SUSmallBoxTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	"Answer the actual implementation of the feature."		^ nil</body><body package="Scriptaculous-Tests-Components">text	^ text</body><body package="Scriptaculous-Tests-Components">text: anObject	text := anObject</body></methods><methods><class-id>Scriptaculous.SUSmallBoxTest</class-id> <category>rendering</category><body package="Scriptaculous-Tests-Components">renderContentOn: html	html div class: 'smallBox'; with: [		html div class: 'header'.		html div 			class: 'content';			with: text ]</body></methods><methods><class-id>Scriptaculous.SUSmallBoxTest</class-id> <category>testing</category><body package="Scriptaculous-Tests-Components">testClass	"Answer the class that represents this example."		^ self class</body></methods><methods><class-id>Scriptaculous.SUHorizontalSplitterTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUHorizontalSplitter</body></methods><methods><class-id>Scriptaculous.SUHorizontalSplitterTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	splitter := SUHorizontalSplitter new		add: (SUCounterTest on: 1) size: '50px' min: 30;		add: (SUCounterTest on: 2) size: '50px' min: 30;		add: (SUCounterTest on: 3) size: '50px' min: 30;		yourself</body></methods><methods><class-id>Scriptaculous.SUHorizontalSplitterTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: splitter</body></methods><methods><class-id>Scriptaculous.SUTieredListTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUTieredList</body></methods><methods><class-id>Scriptaculous.SUTieredListTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	tieredList := SUTieredList new		labels: [ :value | value fullName ];		children: [ :value | 			value subclasses				asSortedCollection: [ :a :b | a name &lt; b name ] ];		selection: (OrderedCollection with: Collection);		yourself</body></methods><methods><class-id>Scriptaculous.SUTieredListTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: tieredList</body></methods><methods><class-id>Scriptaculous.SUDatePickerTest</class-id> <category>rendering</category><body package="Scriptaculous-Tests-Components">openDatePickerOn: script	component openOn: script</body><body package="Scriptaculous-Tests-Components">openDateTimePickerOn: script	timeComponent openOn: script</body><body package="Scriptaculous-Tests-Components">renderContentOn: html	| theId divId theId2 | 	component := nil.	timeComponent := nil.	theId := html nextId.	divId := html nextId.	theId2 := html nextId.	html div id: divId.	html form: [		html table: [				html tableRow: [					html tableData: [ html textInput id: theId ].					html tableData: [						html button value: 'Set date';							onClick: (html prototype evaluator								callback: [ :v | self setupDatePickerOn: theId div: divId origin: v ] value: (html prototype element id: theId; cumulativeOffset);								callback: [ :script | self openDatePickerOn: script ];											return: false) ] ].				html tableRow: [					html tableData: [ html textInput id: theId2 ].					html tableData: [						html button value: 'Set date &amp; time';							onClick: (html prototype evaluator								callback: [ :v | self setupDateTimePickerOn: theId2 div: divId origin: v ] value: (html prototype element id: theId2; cumulativeOffset);								callback: [ :script | self openDateTimePickerOn: script ];											return: false) ] ] ] ]</body><body package="Scriptaculous-Tests-Components">setupDatePickerOn: theId div: divId origin: originString 	component ifNil: 		[ component := SUDatePicker 			on: theId			container: divId ].	component setOriginWith: originString</body><body package="Scriptaculous-Tests-Components">setupDateTimePickerOn: theId div: divId origin: originString 	timeComponent ifNil: 		[ timeComponent := SUDateTimePicker 			on: theId			container: divId ].	timeComponent format: #(1 2 3 $. 1 1).	timeComponent setOriginWith: originString</body></methods><methods><class-id>Scriptaculous.SUDatePickerTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUDatePicker</body></methods><methods><class-id>Scriptaculous.SUDatePickerTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: component with: timeComponent</body></methods><methods><class-id>Scriptaculous.SUDialogTest</class-id> <category>rendering</category><body package="Scriptaculous-Tests-Components">renderContentOn: html		html paragraph: 'Window answer test'.		html paragraph: [			html anchor				onClick: (html prototype evaluator callback: [ :s | answerBlock value: s ]);				with: 'OK' ]</body></methods><methods><class-id>Scriptaculous.SUDialogTest</class-id> <category>delegation</category><body package="Scriptaculous-Tests-Components">answer: aBlock	aBlock fixCallbackTemps.	answerBlock := aBlock</body></methods><methods><class-id>Scriptaculous.SUCarouselTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUNavigationCarousel</body></methods><methods><class-id>Scriptaculous.SUCarouselTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: carousel</body></methods><methods><class-id>Scriptaculous.SUCarouselTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	carousel := SUNavigationCarousel new.	1 to: 10 do: [ :index |		carousel			add: (SUCounterTest on: index)			label: 'Counter ', index greaseString ]</body></methods><methods><class-id>Scriptaculous.SUTitlePaneTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUTitlePane</body></methods><methods><class-id>Scriptaculous.SUTitlePaneTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	component := self coreClass new title: 'Title';		body: (SUFormTest new)"		body: (SUCounterTest on: 1); yourself"		"		body: (SUCarouselTest new); yourself"</body></methods><methods><class-id>Scriptaculous.SUTitlePaneTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: component</body></methods><methods><class-id>Scriptaculous.SUVerticalSplitterTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	splitter := SUVerticalSplitter new		add: (SUCounterTest on: 1) size: '150px' min: 60;		add: (SUCounterTest on: 2) size: '150px' min: 80;		add: (SUCounterTest on: 3) size: '150px' min: 80;		yourself</body></methods><methods><class-id>Scriptaculous.SUVerticalSplitterTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUVerticalSplitter</body></methods><methods><class-id>Scriptaculous.SUVerticalSplitterTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: splitter</body></methods><methods><class-id>Scriptaculous.SUCarouselHorizontalTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUHorizontalCarousel</body></methods><methods><class-id>Scriptaculous.SUCarouselHorizontalTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	carousel := SUHorizontalCarousel new.	carousel elementExtent: (Point x: 80 y: 80).	1 to: 50 do:  [ :index | 		carousel add: (SUSmallBoxTest new			text: 'Test Box: ', index greaseString;			yourself) ]</body></methods><methods><class-id>Scriptaculous.SUCarouselHorizontalTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: carousel</body></methods><methods><class-id>Scriptaculous.SUWindowTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUWindow</body></methods><methods><class-id>Scriptaculous.SUWindowTest</class-id> <category>rendering</category><body package="Scriptaculous-Tests-Components">renderContentOn: html 	| aWindow |	html div id: 'overlay'.	html big: 'Window Test:'.	html space.	html anchor		onClick: (html prototype evaluator callback: [ : script | windows first openOn: script ]) ;		with: 'Open window 1'.	html space: 2.	html anchor		onClick: (html prototype evaluator callback: [ : script | (windows at: 2) openOn: script ]) ;		with: 'Open window 2'.	html space: 2.	html anchor		onClick: (html prototype evaluator					callback: [ : script | 						script add: (JSStream on: 'Element.fullscreen("overlay")'). 						(windows at: 4) openOn: script.						script add: (JSStream on: 'Element.center("dialog_window")') ]) ;		with: 'Open dialog window'.	html space: 2.	aWindow := windows at: 3.	html anchor		class: 'tt' ;		attributeAt: 'rel'			put: 'ok' ;		with: 'Show tooltip 1'.	html space: 2.	html anchor		class: 'tt' ;		attributeAt: 'rel'			put: 'hello' ;		with: 'Show tooltip 2'.	html space: 2.	html anchor		class: 'tt' ;		attributeAt: 'rel'			put: 'illegal' ;		with: 'Show tooltip 3'.	windows do: [ :w | html render: w ].	self 		tooltipScriptOn: html		window: aWindow</body></methods><methods><class-id>Scriptaculous.SUWindowTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ windows</body><body package="Scriptaculous-Tests-Components">script	^ 'Object.extend(Position, {	windowBounds: function() {		var x = window.innerWidth			|| document.documentElement.clientWidth			|| document.body.clientWidth			|| 0;		var y = window.innerHeight			|| document.documentElement.clientHeight			|| document.body.clientHeight			|| 0;		return [x, y];	}});Object.extend(Element, {	fullscreen: function(element) {		element = $(element);		element.show();		element.style.position = "absolute";		element.style.left = element.style.top = 0;		element.style.width = "100%";		element.style.height = "5000px";	},	center: function(element) {		element = $(element);		var extent = Element.getDimensions(element);		var bounds = Position.windowBounds();		var x = (bounds[0] - extent.width) / 2;		var y = (bounds[1] - extent.height) / 2;		x = x &lt; 0 ? 0 : x; y = y &lt; 0 ? 0 : y;		element.style.position = "absolute";		element.style.left = x + "px";		element.style.top = y + "px";	}});'</body><body package="Scriptaculous-Tests-Components">style	^ 'div#overlay {	z-index: 9998;	background-color: #336699;	filter: alpha(opacity=30);	-moz-opacity: 0.3;	opacity: 0.3;}div#overlay[id] { position: fixed; }'</body></methods><methods><class-id>Scriptaculous.SUWindowTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	windows := OrderedCollection 					with: ((SUWindow on: [ :w | SUCounterTest on: 10 ]) id: 'window_1'; zIndex: 1000; title: 'Window 1'; yourself)					with: ((SUWindow on: [ :w | SUFormTest new ]) id: 'window_2';								zIndex: 1001;								origin: (300@100);								extent: 500@240;								title: 'Window 2';								yourself)					with: ((SUWindow on: [ :w | SUTooltipTest new ]) id: 'window_3';								updateBlock: [ :w :model | model textWithKey: (w tooltipKey) ];								zIndex: 1003;								extent: 150@45;								title: 'Tooltip';								closeButtonEnabled: false;								minimizeButtonEnabled: false;								yourself).	windows add: ((SUWindow on: [ :w | SUDialogTest new											answer: [ :script | 												script alert: 'Window will be closed'. 												script add: (JSStream on: '$("overlay").hide()').												w closeOn: script ];											yourself ]) 										id: 'dialog_window';										closeButtonEnabled: false;										minimizeButtonEnabled: false;										zIndex: 9999;										title: 'Window 4'; yourself)</body></methods><methods><class-id>Scriptaculous.SUWindowTest</class-id> <category>scripting</category><body package="Scriptaculous-Tests-Components">tooltipScriptOn: html window: aWindow	"add an event handler to all anchors which have the class tt"	"use the html rel attribute as tooltip index"		html document addLoadScript: (html prototype selector     	add: 'a.tt';     	do: [ :each | each element on: 'mouseover' do: ((JSStream on: 'event.target._showState = true'),				((JSStream on: 'event.target._showState') then:					(html prototype evaluator 						callback: [ :v |								| values |								values := v substrings: ','.								aWindow originX: values first y: (values at: 2) ; tooltipKey: (values at: 3) ]						value: (JSStream on: '[event.clientX,event.clientY,event.target.rel]');						callback: [ :script | aWindow openOn: script hidden: true ];						onComplete: ((JSStream on: 'event.target._showState') then: (html prototype element id: aWindow windowId; show)));						timeout: 2000)).				each element on: 'mouseout' do: 	((JSStream on: 'event.target._showState = false'),					((html prototype element id: aWindow windowId; visible) then:						(html prototype evaluator 							callback: [ :script | aWindow closeOn: script ]))) ])</body></methods><methods><class-id>Scriptaculous.SUTooltipTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">text: aText	text := aText</body><body package="Scriptaculous-Tests-Components">textWithKey: aKey	self text: (self class tooltips at: aKey asSymbol ifAbsent: [ 'Tooltip for key "', aKey , '" not found!' ])</body></methods><methods><class-id>Scriptaculous.SUTooltipTest</class-id> <category>rendering</category><body package="Scriptaculous-Tests-Components">renderContentOn: html	html text: text</body></methods><methods><class-id>Scriptaculous.SUTooltipTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	text := ''</body></methods><methods><class-id>Scriptaculous.SUTooltipTest class</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">tooltips	| dictionary |	dictionary := Dictionary new.	dictionary at: #hello put: 'Hello world!'.	dictionary at: #ok put: 'This is not the ok button!'.	^ dictionary</body></methods><methods><class-id>Scriptaculous.SUTreeReportTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	treeReport := SUTreeReport new		expand: Collection;		roots: (Array with: Collection);		children: [ :value | 			value subclasses				asSortedCollection: [ :a :b | a name &lt; b name ] ];		addColumn: [ :value | value name ]			label: 'Class Name';		addColumn: [ :value |			[ :html |				value instVarNames					do: [ :each | html text: each ]					separatedBy: [ html text: ', ' ] ] ]			label: 'Instance Variables';		yourself</body></methods><methods><class-id>Scriptaculous.SUTreeReportTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUTreeReport</body></methods><methods><class-id>Scriptaculous.SUTreeReportTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: treeReport</body></methods><methods><class-id>Scriptaculous.SUAccordionTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	accordion := SUAccordion new		add: (SUCounterTest on: 1) label: 'Counter 1';		add: (SUCounterTest on: 2) label: 'Counter 2';		add: (SUCounterTest on: 3) label: 'Counter 3';		yourself</body></methods><methods><class-id>Scriptaculous.SUAccordionTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUAccordion</body></methods><methods><class-id>Scriptaculous.SUAccordionTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: accordion</body></methods><methods><class-id>Scriptaculous.SUTabPanelTest</class-id> <category>updating</category><body package="Scriptaculous-Tests-Components">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot stylesheet url: SUComponentLibrary / #tabPanelCss</body></methods><methods><class-id>Scriptaculous.SUTabPanelTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUTabPanel</body></methods><methods><class-id>Scriptaculous.SUTabPanelTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	tabPanel := SUTabPanel new		add: (SUCounterTest on: 1) label: 'Counter 1';		add: (SUCounterTest on: 2) label: 'Counter 2';		add: (SUCounterTest on: 3) label: 'Counter 3';		yourself</body></methods><methods><class-id>Scriptaculous.SUTabPanelTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: tabPanel</body></methods><methods><class-id>Scriptaculous.SUCarouselVerticalTest</class-id> <category>accessing</category><body package="Scriptaculous-Tests-Components">coreClass	^ SUHorizontalCarousel</body></methods><methods><class-id>Scriptaculous.SUCarouselVerticalTest</class-id> <category>initialization</category><body package="Scriptaculous-Tests-Components">initialize	super initialize.	carousel := SUVerticalCarousel new.	carousel		elementExtent: (Point x: 370 y: 60);		numVisible: 3;		scrollInc: 3;		navMargin: 14;		animationSpeed: 0.3.	1 to: 20 do:  [ :index | 			carousel add: (SUSmallBoxTest new				text: 'Test Box: ', index greaseString;				yourself) ]</body></methods><methods><class-id>Scriptaculous.SUCarouselVerticalTest</class-id> <category>hooks</category><body package="Scriptaculous-Tests-Components">children	^ Array with: carousel</body></methods><methods><class-id>Scriptaculous.SUAllFunctionalTests</class-id> <category>*scriptaculous-tests-components</category><body package="Scriptaculous-Tests-Components">renderChildrenOn: html	"With Scriptaculous-Components loaded, we can display 'Example Source' using a lightbox. "	html div id: 'content'; with: [		selected do: [ :each |			html heading: each key; render: each value.			each value testClass isNil ifFalse: [				html paragraph: [					html anchor						callback: [ self lightbox: (SUClassBrowser onClass: each value testClass) ];						with: 'Example source' ] ] ] ]</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*scriptaculous-tests-components</category><body package="Scriptaculous-Tests-Components">scriptaculousTestsComponents	^ self new		name: 'Scriptaculous-Tests-Components';		description: 'Functional and unit tests for the Scriptaculous-Components package.';		addDependency: 'Scriptaculous-Components';		addDependency: 'Scriptaculous-Tests-Core';		url: #seasideUrl;		yourself</body></methods><initialize><class-id>Scriptaculous.SUAllComponentTests</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>SUFunctionalTest</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Core-Functional</category><attributes><package>Scriptaculous-Tests-Core</package></attributes></class><class><name>SUAllTests</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs selected </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Core-Functional</category><attributes><package>Scriptaculous-Tests-Core</package></attributes></class><class><name>SUAllFunctionalTests</name><environment>Scriptaculous</environment><super>Scriptaculous.SUAllTests</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Tests-Core-Functional</category><attributes><package>Scriptaculous-Tests-Core</package></attributes></class></st-source>