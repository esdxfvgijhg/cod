<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-EmailComment: Unit tests for the package Seaside-Email.DbIdentifier: bear73DbTrace: 494121DbUsername: jkottDbVersion: 3.2.0 - pmm.24 2DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-Canvas' '') #(#any 'Seaside-Email' '') #(#any 'Seaside-VisualWorks-Email' '') #(#any 'Seaside-Tests-Core' ''))Id: 73181b7c-0ad3-41ba-ae5a-f7b33a7d6beaNamespace: SeasidePackageName: Seaside-Tests-EmailParcel: #('Seaside-Tests-Email')ParcelName: Seaside-Tests-EmailPrerequisiteDescriptions: #(#(#name 'Seaside-Namespace') #(#name 'Seaside-Core' #componentType #package) #(#name 'Seaside-Canvas' #componentType #package) #(#name 'Seaside-Email') #(#name 'Seaside-VisualWorks-Email') #(#name 'Seaside-Tests-Core'))PrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Core' '') #('Seaside-Canvas' '') #('Seaside-Email' '') #('Seaside-VisualWorks-Email' '') #('Seaside-Tests-Core' ''))PrintStringCache: (3.2.0 - pmm.24 2,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Email-pmm.24.mczVersion: 3.2.0 - pmm.24 2Date: 12:17:57 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:57 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAHtmlEmailBodyTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Email</category><attributes><package>Seaside-Tests-Email</package></attributes></class><class><name>WAEmailMessageTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>message </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Email</category><attributes><package>Seaside-Tests-Email</package></attributes></class><class><name>WAMultiPartEmailMessageTest</name><environment>Seaside</environment><super>Seaside.WAEmailMessageTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Email</category><attributes><package>Seaside-Tests-Email</package></attributes></class><class><name>WAStringEmailBodyTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Email</category><attributes><package>Seaside-Tests-Email</package></attributes></class><methods><class-id>Seaside.WAHtmlEmailBodyTest</class-id> <category>as yet unclassified</category><body package="Seaside-Tests-Email">testBasics	| body |	body := WAHtmlEmailBody		renderingBlock: [ :h | 			h anchor				url: 'http://www.google.com';				with: 'hello' ].	self assert: body isHtml.	self assert: body contentString equals: '&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body onload="onLoad()"&gt;&lt;a href="http://www.google.com"&gt;hello&lt;/a&gt;&lt;script type="text/javascript"&gt;function onLoad(){};&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;'.	self assert: body contentType equals:WAMimeType textHtml</body></methods><methods><class-id>Seaside.WAEmailMessageTest</class-id> <category>private</category><body package="Seaside-Tests-Email">philippeMarschall	^ WAEmailAddress		address: 'philippe.marschall@gmail.com'		username: 'Philippe Marschall'</body><body package="Seaside-Tests-Email">seasideDev	^ WAEmailAddress		address: 'seaside-dev@lists.squeakfoundation.org'		username: 'Seaside Developers Mailinglist'</body></methods><methods><class-id>Seaside.WAEmailMessageTest</class-id> <category>configuration</category><body package="Seaside-Tests-Email">messageClass	^ WAEmailMessage</body></methods><methods><class-id>Seaside.WAEmailMessageTest</class-id> <category>tests</category><body package="Seaside-Tests-Email">testFromToSubjectBody	| cr |	cr := String with: Character cr.	message := WAEmailMessage		from: self philippeMarschall		to: self seasideDev		subject: 'new email package'.	message setStringBody: 'Hello' wrap: false.	"we don't test them here: "	message headers removeKey: 'Date'.			self assert:'From: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;', cr,'To: "Seaside Developers Mailinglist" &lt;seaside-dev@lists.squeakfoundation.org&gt;',cr ,'Subject: new email package', cr, cr,'Hello' = message plainMessage</body><body package="Seaside-Tests-Email">testHeaders	| cr now |	cr := String with: Character cr.	now := GRPrinter rfc822 print: DateAndTime now.	message replyTo: self philippeMarschall.	message headerAt: 'Date' put: now.	" We have to take into account, that the header order is not implied."	self		assert:			(('From: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;' , cr				, 'To: "Seaside Developers Mailinglist" &lt;seaside-dev@lists.squeakfoundation.org&gt;' , cr				, 'Subject: new email package' , cr , 'Date: ' , now , cr				, 'Reply-To: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;' , cr , cr , 'Hello') = message plainMessage				or: [ 					('From: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;' , cr						, 'To: "Seaside Developers Mailinglist" &lt;seaside-dev@lists.squeakfoundation.org&gt;' , cr						, 'Subject: new email package' , cr , 'Reply-To: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;' , cr						, 'Date: ' , now , cr , cr , 'Hello') = message plainMessage ])</body></methods><methods><class-id>Seaside.WAEmailMessageTest</class-id> <category>running</category><body package="Seaside-Tests-Email">setUp	super setUp.	message := self messageClass from: self philippeMarschall to: self seasideDev subject: 'new email package'.	message setStringBody: 'Hello' wrap: false</body></methods><methods><class-id>Seaside.WAMultiPartEmailMessageTest</class-id> <category>private</category><body package="Seaside-Tests-Email">convertLineEndingsToCr: aString	"converts a string to only use cr line endings"	(aString includes: Character lf) ifFalse: [ ^ aString ].	"No Lf's ; nothing to do"	(aString includes: Character cr) ifFalse: [		^ aString copyReplaceAll: (String with: Character lf) with: (String with: Character cr) ].  "Only Lf's; change them to Cr's"	^ (aString copyReplaceAll: (String with: Character cr with: Character lf) with: (String with: Character cr))		copyReplaceAll: (String with: Character lf) with: (String with: Character cr)</body></methods><methods><class-id>Seaside.WAMultiPartEmailMessageTest</class-id> <category>testing</category><body package="Seaside-Tests-Email">testFromToSubjectBody	message headers removeKey: 'Date'.	self		assert:			(self convertLineEndingsToCr: ('From: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;To: "Seaside Developers Mailinglist" &lt;seaside-dev@lists.squeakfoundation.org&gt;Subject: new email packageContent-Type: multipart/alternative;boundary=' , message boundary				,					'--' , message boundary				,					'Content-Type: text/plainHello--' , message boundary				,					'--'))		equals: (self convertLineEndingsToCr: message plainMessage)</body><body package="Seaside-Tests-Email">testHeaders	| now |	now := GRPrinter rfc822 print: DateAndTime now.	message replyTo: self philippeMarschall.	message headerAt: 'Date' put: now.	" We have to take into account, that the header order is not implied."	self		assert:			((self convertLineEndingsToCr: ('From: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;To: "Seaside Developers Mailinglist" &lt;seaside-dev@lists.squeakfoundation.org&gt;Subject: new email packageReply-To: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;Date: ' , now				,					'Content-Type: multipart/alternative;boundary=' , message boundary				,					'--' , message boundary				,					'Content-Type: text/plainHello--' , message boundary				,					'--')) = (self convertLineEndingsToCr: message plainMessage)				or: [ 					(self convertLineEndingsToCr: ('From: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;To: "Seaside Developers Mailinglist" &lt;seaside-dev@lists.squeakfoundation.org&gt;Subject: new email packageReply-To: "Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;Content-Type: multipart/alternative;boundary=' , message boundary						,							'Date: ' , now						,							'--' , message boundary						,							'Content-Type: text/plainHello--' , message boundary						,							'--')) = (self convertLineEndingsToCr: message plainMessage) ])</body><body package="Seaside-Tests-Email">testParts	| parts |	message setHtmlBody: [ :html | html paragraph: 'hello' ].	parts := message parts asArray sort.	self assert: parts size equals: 2.	self assert: parts last isHtml.	self assert: parts first contentString equals: 'Hello'.	self assert: parts last contentString equals:'&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body onload="onLoad()"&gt;&lt;p&gt;hello&lt;/p&gt;&lt;script type="text/javascript"&gt;function onLoad(){};&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;'</body></methods><methods><class-id>Seaside.WAMultiPartEmailMessageTest</class-id> <category>configuration</category><body package="Seaside-Tests-Email">messageClass	^ WAMultiPartEmailMessage</body></methods><methods><class-id>Seaside.WAStringEmailBodyTest</class-id> <category>tests</category><body package="Seaside-Tests-Email">testBasics	| body |	body := WAStringEmailBody contentString: 'hello'.	self assert: body isPlainText.	self assert: body contentString equals: 'hello'.	self assert: body contentType equals:WAMimeType textPlain</body><body package="Seaside-Tests-Email">testCrLf	| cr lf crlf body |	cr := String with: Character cr.	lf := String with: Character lf.	crlf := cr , lf.	body := WAStringEmailBody contentString: 'hello' , crlf , 'world'.	self assert: ('hello' , cr , 'world') = body greaseString</body><body package="Seaside-Tests-Email">testSplitIntoLines	| cr toSplit actual |	cr := String with: Character cr.		toSplit := cr, cr, 'a', cr, cr.	actual := WAStringEmailBody splitIntoLines: toSplit.	self assert: actual size = 5.	#('' '' 'a' '' '') keysAndValuesDo: [ :index :expected |		self assert: (actual at: index) = expected ].		toSplit := cr, cr, 'a', cr.	actual := WAStringEmailBody splitIntoLines: toSplit.	self assert: actual size = 4.	#('' '' 'a' '') keysAndValuesDo: [ :index :expected |		self assert: (actual at: index) = expected ].		toSplit := cr, cr, 'a'.	actual := WAStringEmailBody splitIntoLines: toSplit.	self assert: actual size = 3.	#('' '' 'a') keysAndValuesDo: [ :index :expected |		self assert: (actual at: index) = expected ]</body><body package="Seaside-Tests-Email">testWrapping	| cr body lf crlf |	cr := String with: Character cr.	lf := String with: Character lf.	crlf := cr , lf.	body := WAStringEmailBody 		string: '1111 222 2 33'		lineLength: 5.	self assert: ('1111' , cr , '222 2' , cr , '33') = body greaseString.	body := WAStringEmailBody 		string: '0123456789'		lineLength: 5.	self assert: ('01234' , cr , '56789') = body greaseString.	body := WAStringEmailBody 		string: '012345678'		lineLength: 5.	self assert: ('01234' , cr , '5678') = body greaseString.	body := WAStringEmailBody 		string: '01234567890'		lineLength: 5.	self assert: ('01234' , cr , '56789' , cr , '0') = body greaseString.	body := WAStringEmailBody 		string: '0123456789' , crlf , crlf , '0123456789'		lineLength: 5.	self assert: ('01234' , cr , '56789' , cr , cr , '01234' , cr , '56789') = body greaseString</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-email</category><body package="Seaside-Tests-Email">seasideTestsEmail	^ self new		name: 'Seaside-Tests-Email';		description: 'Unit tests for the package Seaside-Email.';		addDependency: 'Seaside-Email';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>