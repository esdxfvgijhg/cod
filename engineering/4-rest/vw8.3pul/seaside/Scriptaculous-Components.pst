<?xml version="1.0"?><st-source><!-- Name: Scriptaculous-ComponentsComment: A collection of AJAX based widgets written on top of script.aculo.us and Prototype.DbIdentifier: bear73DbTrace: 492619DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.116 1DevelopmentPrerequisites: #(#(#any 'Scriptaculous-Namespace' '') #(#any 'Scriptaculous-Core' '') #(#any 'Seaside-Flow' '') #(#any 'Seaside-VisualWorks-Flow' '') #(#any 'Seaside-Widgets' '') #(#any 'Seaside-Component' ''))Id: 83570de8-7fde-4671-87dd-dfd6def70db0Namespace: ScriptaculousPackageName: Scriptaculous-ComponentsParcel: #('Scriptaculous-Components')ParcelName: Scriptaculous-ComponentsPrerequisiteParcels: #(#('Scriptaculous-Namespace' '') #('Scriptaculous-Core' '') #('Seaside-Flow' '') #('Seaside-VisualWorks-Flow' '') #('Seaside-Widgets' '') #('Seaside-Component' ''))PrintStringCache: (3.2.0 - JohanBrichau.116 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Scriptaculous-Components-JohanBrichau.116.mczVersion: 3.2.0 - JohanBrichau.116 1Date: 3:31:31 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:31 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SUTreeReportColumn</name><environment>Scriptaculous</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>owner renderer label </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUDatePicker</name><environment>Scriptaculous</environment><super>Seaside.WAMiniCalendar</super><private>false</private><indexed-type>none</indexed-type><inst-vars>widgetId uid format origin containerId open </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUSplitter</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUNavigation</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items uid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUNavigationCarousel</name><environment>Scriptaculous</environment><super>Scriptaculous.SUNavigation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selected elementHeight visibleElements offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUTabPanel</name><environment>Scriptaculous</environment><super>Scriptaculous.SUNavigation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selected </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUTreeReport</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>uids roots columns expanded childrenBlock expandableBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUCarousel</name><environment>Scriptaculous</environment><super>Scriptaculous.SUNavigation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elementExtent numVisible scrollInc offset navMargin elementMargin animationSpeed created </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUVerticalCarousel</name><environment>Scriptaculous</environment><super>Scriptaculous.SUCarousel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUAccordion</name><environment>Scriptaculous</environment><super>Scriptaculous.SUNavigation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visible maxVisible </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SURenderableItem</name><environment>Scriptaculous</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>owner body </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUWindow</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title component id updateBlock componentBlock extent origin properties collapsed visible </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUSplitterItem</name><environment>Scriptaculous</environment><super>Scriptaculous.SURenderableItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>min size </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUDateTimePicker</name><environment>Scriptaculous</environment><super>Scriptaculous.SUDatePicker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showSeconds hours minutes seconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUHorizontalSplitter</name><environment>Scriptaculous</environment><super>Scriptaculous.SUSplitter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SULightbox</name><environment>Scriptaculous</environment><super>Seaside.WADecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delegate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUComponentLibrary</name><environment>Scriptaculous</environment><super>Seaside.WAFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Libraries</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUTitlePane</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title body open uid loaded alwaysRefresh </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUNavigationItem</name><environment>Scriptaculous</environment><super>Scriptaculous.SURenderableItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUTieredList</name><environment>Scriptaculous</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionPath childrenBlock labelBlock uid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUHorizontalCarousel</name><environment>Scriptaculous</environment><super>Scriptaculous.SUCarousel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><class><name>SUVerticalSplitter</name><environment>Scriptaculous</environment><super>Scriptaculous.SUSplitter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Scriptaculous-Components-Core</category><attributes><package>Scriptaculous-Components</package></attributes></class><methods><class-id>Scriptaculous.SUTreeReportColumn</class-id> <category>accessing</category><body package="Scriptaculous-Components">label	^ label</body><body package="Scriptaculous-Components">label: aString	label := aString</body><body package="Scriptaculous-Components">renderer	^ renderer</body><body package="Scriptaculous-Components">renderer: aBlock	renderer := aBlock</body></methods><methods><class-id>Scriptaculous.SUTreeReportColumn</class-id> <category>initialization</category><body package="Scriptaculous-Components">initializeOn: aComponent	self initialize.	owner := aComponent</body></methods><methods><class-id>Scriptaculous.SUTreeReportColumn</class-id> <category>rendering</category><body package="Scriptaculous-Components">render: anObject indent: anInteger on: html	html div class: 'indent'; with: [		anInteger timesRepeat: [ html div class: 'block' ].		html div class: 'block'; with: [			(owner isExpandable: anObject) ifTrue: [				html anchor					class: 'expanded' if: (owner isExpanded: anObject);					onClick: (html prototype evaluator 						callback: [ :script | owner toggle: anObject level: anInteger on: script ];						return: false) ] ].		html div class: 'text'; with: [ self render: anObject on: html ] ]</body><body package="Scriptaculous-Components">render: anObject on: html	html render: (renderer value: anObject)</body></methods><methods><class-id>Scriptaculous.SUTreeReportColumn class</class-id> <category>instance creation</category><body package="Scriptaculous-Components">on: aComponent	^ self basicNew initializeOn: aComponent</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>accessing</category><body package="Scriptaculous-Components">containerId	"Answer the value of containerId"	^ containerId</body><body package="Scriptaculous-Components">containerId: anObject 	"Set the value of containerId"	containerId := anObject</body><body package="Scriptaculous-Components">format	"Answer the value of format"	^ format ifNil: [ format := #(2 1 3 $/ 1 1) ]</body><body package="Scriptaculous-Components">format: anObject	"Set the value of format"	format := anObject</body><body package="Scriptaculous-Components">formattedResult	^ self date printFormat: self format</body><body package="Scriptaculous-Components">isOpen	^ open</body><body package="Scriptaculous-Components">origin	^ origin</body><body package="Scriptaculous-Components">origin: aPoint	origin := aPoint</body><body package="Scriptaculous-Components">uid	"Answer the value of uid"	^ uid</body><body package="Scriptaculous-Components">uid: anObject	"Set the value of uid"	uid := anObject</body><body package="Scriptaculous-Components">widgetId	"Answer the value of widgetId"	^ widgetId</body><body package="Scriptaculous-Components">widgetId: anObject	"Set the value of widgetId"	widgetId := anObject</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>actions</category><body package="Scriptaculous-Components">nextMonthUpdateOn: aScript	self nextMonth.	self scriptUpdateOn: aScript</body><body package="Scriptaculous-Components">nextYear	self year: self year + 1</body><body package="Scriptaculous-Components">nextYearUpdateOn: aScript	self nextYear.	self scriptUpdateOn: aScript</body><body package="Scriptaculous-Components">previousMonthUpdateOn: aScript	self previousMonth.	self scriptUpdateOn: aScript</body><body package="Scriptaculous-Components">previousYear	self year: self year - 1</body><body package="Scriptaculous-Components">previousYearUpdateOn: aScript	self previousYear.	self scriptUpdateOn: aScript</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderBodyOn: html	html table		cellspacing: 0;		class: 'main';		with: [ self renderCalendarOn: html ]</body><body package="Scriptaculous-Components">renderCalendarOn: html	html tableRow: [		html tableHeading			colSpan: 9;			with: [ self renderMonthNavigationOn: html ] ].	html tableRow			class: 'calendarTitle';			with: [				self weekDays do: [ :each |					html tableData						class: 'weekDay';						with: each ] ].	self weeksDo: [ :week | self renderRowForWeek: week on: html ].	html tableRow: [		html tableData			colSpan: 9;			with: [ self renderYearNavigationOn: html ] ]</body><body package="Scriptaculous-Components">renderCellForDate: aDate on: html	html tableData		class: 'day';		class: 'daySelected' if: self date = aDate;		with: [			aDate monthIndex = self monthIndex ifTrue: [					(self canSelect: aDate)						ifTrue: [							html anchor								class: 'today' if: aDate = Date today;								onClick: (self ajaxCallbackFor: aDate on: html);								with: aDate dayOfMonth ]						ifFalse: [ html text: aDate dayOfMonth ] ] ]</body><body package="Scriptaculous-Components">renderContentOn: html	uid ifNil: [ uid := html nextId ].	html div		id: uid;		class: 'calendar';		with: [ self renderBodyOn: html ]</body><body package="Scriptaculous-Components">renderMonthNavigationOn: htmlhtml table class: 'monthTable';	cellspacing:0;	with: [			html tableRow			class: 'monthRow';			with: [				html tableData					class: 'calendarPrevious';					with: [						html anchor							callback: [ self previousMonth ];							onClick: (html prototype evaluator									callback: [ :script |										self previousMonthUpdateOn: script ];							return: false);							with: '&lt;&lt;' ].				html tableData class: 'monthCurrent'; with: (Date nameOfMonth: self monthIndex).				html tableData					class: 'calendarNext';					with: [						html anchor							callback: [ self nextMonth ] ;							onClick: (html prototype evaluator										callback: [ :script | 											self nextMonthUpdateOn: script ];										return: false);							with: '&gt;&gt;' ] ] ]</body><body package="Scriptaculous-Components">renderYearNavigationOn: html	html table		class: 'yearTable';		cellspacing:0;		with: [				html tableRow: [				html tableData					class: 'year';					with: [						html anchor							callback: [ self previousYear ];							onClick:	(html scriptaculous evaluator										callback: [ :script |											self previousYearUpdateOn: script ];											return: false);							with: (self year - 1) ].				html tableData					class: 'year';					class: 'yearCurrent';					with: (self year name).				html tableData					class: 'year';					with: [						html anchor							callback: [ self nextYear ];							onClick: ((html prototype evaluator)										callback: [ :script | self nextYearUpdateOn: script ];										return: false);							with: (self year + 1) ] ] ]</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>updating</category><body package="Scriptaculous-Components">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot stylesheet url: SUComponentLibrary / #datePickerCss</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	open := false.	self date: Date today</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>scripting</category><body package="Scriptaculous-Components">ajaxCallbackFor: aDate on: html	^ html prototype evaluator		callback: [ :script | self scriptSelect: aDate on: script ];		return: false</body><body package="Scriptaculous-Components">openOn: aScript 	| anElement |	anElement := aScript prototype element id: containerId.	anElement			absolutize;		styleAt: 'left'			put: origin x greaseString , 'px';		styleAt: 'top'			put: origin y greaseString , 'px'.	self isOpen		ifFalse: [			anElement update: self.			open := true ]</body><body package="Scriptaculous-Components">scriptSelect: aDate on: script 	"Ajax select"	self select: aDate.	widgetId isNil ifTrue: [ ^ self ].	script prototype element		id: widgetId;		access: 'value';		assign: self formattedResult.	script prototype element		id: uid;		remove.	open := false</body><body package="Scriptaculous-Components">scriptUpdateOn: script	script prototype element		id: uid;		update: [ :r | self renderBodyOn: r ]</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>hooks</category><body package="Scriptaculous-Components">states	"Answer a collection of states that should be backtracked."	^ #()</body></methods><methods><class-id>Scriptaculous.SUDatePicker</class-id> <category>public</category><body package="Scriptaculous-Components">setOriginWith: aString	| anArray |	anArray := (aString substrings: ',')		collect: [ :each | each select: [ :char | char isDigit ] ].	anArray size &gt; 1		ifTrue: [ self origin: (Point x: (anArray at: 1) asNumber y: (anArray at: 2) asNumber + 20) ]</body></methods><methods><class-id>Scriptaculous.SUDatePicker class</class-id> <category>instance creation</category><body package="Scriptaculous-Components">on: aId 	^ self 		on: aId		container: nil</body><body package="Scriptaculous-Components">on: aId container: buttonId 	^ self new		widgetId: aId;		containerId: buttonId;		yourself</body></methods><methods><class-id>Scriptaculous.SUSplitter</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssClass	^ self subclassResponsibility</body><body package="Scriptaculous-Components">items	^ items</body></methods><methods><class-id>Scriptaculous.SUSplitter</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderContentOn: html	html div class: self cssClass; with: [		1 to: self items size do: [ :index |			self renderItem: (self items at: index) on: html.			self items size = index ifFalse: [ 				self					renderSplitter: (self items at: index) 					and: (self items at: index + 1) 					on: html ] ] ]</body><body package="Scriptaculous-Components">renderItem: anItem on: html	self subclassResponsibility</body><body package="Scriptaculous-Components">renderSplitter: aBeforeItem and: anAfterItem on: html	html div 		class: 'handle'; 		script: (self 			draggable: aBeforeItem 			and: anAfterItem			on: html)</body></methods><methods><class-id>Scriptaculous.SUSplitter</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	items := OrderedCollection new</body></methods><methods><class-id>Scriptaculous.SUSplitter</class-id> <category>scripts</category><body package="Scriptaculous-Components">draggable: aBeforeItem and: anAfterItem on: html	^ html scriptaculous draggable		revert: true;		endEffect: nil;		startEffect: nil;		onStart: ((JSStream on: 'var splitter = drag.element;',								self initOffsetScript ,'								drag._previous = splitter.previous();								drag._next = splitter.next();')			asFunction: #(drag))</body><body package="Scriptaculous-Components">initOffsetScript	^ self subclassResponsibility</body></methods><methods><class-id>Scriptaculous.SUSplitter</class-id> <category>public</category><body package="Scriptaculous-Components">add: anObject	^ items add: (SUSplitterItem on: self body: anObject)</body><body package="Scriptaculous-Components">add: anObject size: aString	^ (self add: anObject) size: aString</body><body package="Scriptaculous-Components">add: anObject size: aString min: anInteger	^ (self add: anObject) size: aString; min: anInteger</body></methods><methods><class-id>Scriptaculous.SUSplitter</class-id> <category>hooks</category><body package="Scriptaculous-Components">children	^ (items select: [ :each | each isComponent ]) collect: [ :each | each body ]</body></methods><methods><class-id>Scriptaculous.SUNavigation</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssClass	"Answer the css class the outermost DOM element will use."	self subclassResponsibility</body><body package="Scriptaculous-Components">navigationItemClass	"Answer the navigation class to represent the child items."	^ SUNavigationItem</body><body package="Scriptaculous-Components">visible	"override in subclasses if not all items are displayed, see for example SUTabPanel"	^ items</body><body package="Scriptaculous-Components">visibleComponentsFor: aCollection	^ (aCollection select: [ :each | each isComponent ]) collect: [ :each | each body ]</body></methods><methods><class-id>Scriptaculous.SUNavigation</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	items := OrderedCollection new</body></methods><methods><class-id>Scriptaculous.SUNavigation</class-id> <category>private</category><body package="Scriptaculous-Components">findIndex: anItem ifAbsent: aBlock 	| index |	index := items findFirst: [ :each | each = anItem ].	index isZero ifTrue: [ aBlock value ].	^ index</body><body package="Scriptaculous-Components">uid	^ uid</body><body package="Scriptaculous-Components">uid: aString at: anInteger	^ uid , '_' , aString , '_' , anInteger greaseString</body></methods><methods><class-id>Scriptaculous.SUNavigation</class-id> <category>public</category><body package="Scriptaculous-Components">add: anObject	"Add anObject to the collection of child items. Answer an instance of SUNavigationItem."	^ items add: (self navigationItemClass on: self body: anObject)</body><body package="Scriptaculous-Components">add: anObject label: aString	^ (self add: anObject) label: aString</body><body package="Scriptaculous-Components">remove: anItem	"Remove anItem from the collection of child items."	^ items remove: anItem ifAbsent: [ nil ]</body></methods><methods><class-id>Scriptaculous.SUNavigation</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderContentOn: html	uid := html nextId.	self renderNavigationOn: html</body><body package="Scriptaculous-Components">renderNavigationOn: html	self subclassResponsibility</body></methods><methods><class-id>Scriptaculous.SUNavigation</class-id> <category>hooks</category><body package="Scriptaculous-Components">children	^ self visibleComponentsFor: self visible</body></methods><methods><class-id>Scriptaculous.SUNavigationCarousel</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderActionsForId: id on: html	html table style: 'width:100%;margin-top:10px'; with: [		html tableRow: [			html tableData class: 'action'; with: [				html anchor onClick: ((html prototype evaluator)								callback: [ :script | self scriptMove: 1 for: id on: script ]; return: false);								with: 'Previous' ].				html tableData style: 'width:100%'; with: [ html space ].				html tableData class: 'action'; class: 'right'; with: [					html anchor onClick: ((html prototype evaluator)								callback: [ :script | self scriptMove: -1 for: id on: script ]; return: false);								with: 'Next' ] ] ]</body><body package="Scriptaculous-Components">renderBodyOn: html	html div		id: (self uid: 'body' at: 0);		class: 'body';		with: self selected</body><body package="Scriptaculous-Components">renderElement: element index: index on: html 	| currentId |	currentId := self 		uid: 'head'		at: index.	html div		id: currentId;		class: 'active'			if: self selected = element;		style: 'height:' , self elementHeight greaseString , 'px';		with: 			[ html anchor				onClick: (html prototype evaluator						callback: 							[ :script | 							self 								scriptSelected: element								id: currentId								on: script ];						return: false);				callback: [ self selected: element ];				with: [ html div: element label ] ]</body><body package="Scriptaculous-Components">renderNavElementsOn: html 	| moveId |	moveId := html nextId.	html div		class: 'nav';		with: [			html div				style: 'height:' , self innerHeight greaseString , 'px';				class: 'inner';				with: [					html div						id: moveId;						class: 'move';						with: [ 							items keysAndValuesDo: [ :index :element | 								self 									renderElement: element									index: index									on: html ] ] ].			self 				renderActionsForId: moveId				on: html ]</body><body package="Scriptaculous-Components">renderNavigationOn: html	"reset offset for each full refresh"	offset := 1.	html div 		class: self cssClass;		with: [			html table: [				html tableRow: [					html tableData: [ self renderNavElementsOn: html ].					html tableData						verticalAlign: 'top';						with: [ self renderBodyOn: html ] ] ] ]</body></methods><methods><class-id>Scriptaculous.SUNavigationCarousel</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	visibleElements := 5.	elementHeight := 14.	offset := 1</body></methods><methods><class-id>Scriptaculous.SUNavigationCarousel</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssClass	^ 'carousel'</body><body package="Scriptaculous-Components">elementHeight	"Answer the value of elementHeight"	^ elementHeight</body><body package="Scriptaculous-Components">elementHeight: anObject	"Set the value of elementHeight"	elementHeight := anObject</body><body package="Scriptaculous-Components">innerHeight	^ elementHeight * visibleElements</body><body package="Scriptaculous-Components">selected	^ selected ifNil: [ selected := items isEmpty ifFalse: [ items first ] ]</body><body package="Scriptaculous-Components">selected: anElement	selected := anElement</body><body package="Scriptaculous-Components">visible	selected ifNil: [ ^ #() ].	^ Array with: selected</body><body package="Scriptaculous-Components">visibleElements	"Answer the value of visibleElements"	^ visibleElements</body><body package="Scriptaculous-Components">visibleElements: anObject	"Set the value of visibleElements"	visibleElements := anObject</body></methods><methods><class-id>Scriptaculous.SUNavigationCarousel</class-id> <category>scripting</category><body package="Scriptaculous-Components">scriptMove: anInteger for: id on: script	| elementsToMove |	elementsToMove := visibleElements - 1.	anInteger = 1		ifTrue: [ 			offset = 1				ifTrue: [ ^ self ].			offset := offset - elementsToMove ]		ifFalse: [ 			offset + elementsToMove abs &gt; items size				ifTrue: [ ^ self ].			offset := offset + elementsToMove ].	script scriptaculous effect		id: id;		duration: 0.2;		x: 0;		y: self elementHeight * elementsToMove * anInteger;		move</body><body package="Scriptaculous-Components">scriptSelected: aComponent id: currentId on: aScript	aScript prototype element		id: (self uid: 'head' at: (self findIndex: self selected ifAbsent: [ ]));		removeClassName: 'active'.	self selected: aComponent.	aScript prototype element		id: currentId;		addClassName: 'active'.	aScript prototype element		id: (self uid: 'body' at: 0);		update: self selected</body></methods><methods><class-id>Scriptaculous.SUTabPanel</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssClass	^ 'tabPanel'</body><body package="Scriptaculous-Components">selected	^ selected ifNil: [ selected := items isEmpty ifFalse: [ items first ] ]</body><body package="Scriptaculous-Components">selected: anElement	selected := anElement</body><body package="Scriptaculous-Components">visible	selected ifNil: [ ^ #() ].	^ Array with: selected</body></methods><methods><class-id>Scriptaculous.SUTabPanel</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderNavigationOn: html	html div		class: self cssClass;		with: [			self renderTabsOn: html.			self renderPanelOn: html ]</body><body package="Scriptaculous-Components">renderPanelOn: html	html div		id: (self uid: 'body' at: 0);		class: 'body';		with: self selected</body><body package="Scriptaculous-Components">renderTabsOn: html 	| active |	html unorderedList		class: 'head';		with: [			items keysAndValuesDo: [ :index :element | 				active := self selected = element.				html listItem: [					html anchor						id: (self uid: 'head' at: index);						class: 'active' if: active;						onClick: (html prototype evaluator							callback: [ :script | self scriptSelected: element on: script ];							return: false);						callback: [ self selected: element ];						with: element label ] ] ]</body></methods><methods><class-id>Scriptaculous.SUTabPanel</class-id> <category>scripting</category><body package="Scriptaculous-Components">scriptSelected: aComponent on: aScript	aScript prototype element		id: (self uid: 'head' at: (self			findIndex: self selected			ifAbsent: [ ]));		removeClassName: 'active'.	self selected: aComponent.	aScript prototype element		id: (self uid: 'head' at: (self			findIndex: self selected			ifAbsent: [ ^ self ]));		addClassName: 'active'.	aScript prototype element		id: (self uid: 'body' at: 0);		update: self selected</body></methods><methods><class-id>Scriptaculous.SUTreeReport</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderBodyOn: html	"Render the body of the tree report."		self renderRows: roots level: 0 on: html</body><body package="Scriptaculous-Components">renderContentOn: html	uids := IdentityDictionary new.	html table 		cellspacing: 0;		class: self cssClass;		with: [ self renderTableOn: html ]</body><body package="Scriptaculous-Components">renderHeadOn: html	"Display the column titles of the tree report."		html tableRow: [		columns do: [ :each | 			html tableHeading: each label ] ]</body><body package="Scriptaculous-Components">renderRow: anObject level: anInteger on: html	"Render a specific row anObject at level anInteger."		html tableRow id: (self uid: anObject on: html); with: [		columns keysAndValuesDo: [ :index :each |			html tableData: [				index = 1 					ifFalse: [ each render: anObject on: html ]					ifTrue: [ each render: anObject indent: anInteger on: html ] ] ] ]</body><body package="Scriptaculous-Components">renderRowIndent: anObject level: anInteger on: html	anInteger timesRepeat: [ html div class: 'space' ].	html div		class: 'space';		with: [ 			(expandableBlock value: anObject) ifTrue: [ 				html anchor					class: 'expanded' if: (expanded includes: anObject);					onClick: ((html prototype evaluator)						callback: [ :script | self toggle: anObject level: anInteger on: script ];						return: false) ] ]</body><body package="Scriptaculous-Components">renderRows: aCollection level: anInteger on: html	aCollection do: [ :each |		self renderRow: each level: anInteger on: html.		(expanded includes: each) ifTrue: [			self 				renderRows: (childrenBlock value: each)				level: anInteger + 1 on: html ] ]</body><body package="Scriptaculous-Components">renderTableOn: html	html tableHead: [ self renderHeadOn: html ].	html tableBody: [ self renderBodyOn: html ]</body></methods><methods><class-id>Scriptaculous.SUTreeReport</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	roots := OrderedCollection new.	columns := OrderedCollection new.	expanded := IdentitySet new.	childrenBlock := [ :value | #() ].	expandableBlock := [ :value | (childrenBlock value: value) notEmpty ]</body></methods><methods><class-id>Scriptaculous.SUTreeReport</class-id> <category>accessing</category><body package="Scriptaculous-Components">addColumn: aBlock label: aString	^ columns add: ((self treeReportColumnClass on: self)		renderer: aBlock;		label: aString;		yourself)</body><body package="Scriptaculous-Components">children: aBlock	childrenBlock := aBlock</body><body package="Scriptaculous-Components">cssClass	^ 'treeReport'</body><body package="Scriptaculous-Components">expand: anObject	expanded add: anObject</body><body package="Scriptaculous-Components">expandable: aBlock	expandableBlock := aBlock</body><body package="Scriptaculous-Components">roots: aCollection	roots := aCollection</body><body package="Scriptaculous-Components">treeReportColumnClass	^ SUTreeReportColumn</body></methods><methods><class-id>Scriptaculous.SUTreeReport</class-id> <category>testing</category><body package="Scriptaculous-Components">isExpandable: anObject	^ expandableBlock value: anObject</body><body package="Scriptaculous-Components">isExpanded: anObject	^ expanded includes: anObject</body></methods><methods><class-id>Scriptaculous.SUTreeReport</class-id> <category>private</category><body package="Scriptaculous-Components">recursiveCollapse: anObject on: aScript	expanded remove: anObject.	(childrenBlock value: anObject) do: [ :each |		aScript prototype element			id: (self uid: each on: aScript);			remove.		(expanded includes: each)			ifTrue: [ self recursiveCollapse: each on: aScript ] ]</body><body package="Scriptaculous-Components">uid: anObject on: html	^ uids at: anObject ifAbsentPut: [ html nextId ]</body></methods><methods><class-id>Scriptaculous.SUTreeReport</class-id> <category>scripts</category><body package="Scriptaculous-Components">collapse: anObject level: anInteger on: aScript	self recursiveCollapse: anObject on: aScript.	aScript prototype element		down: '.indent a';		removeClassName: 'expanded';		id: (self uid: anObject on: aScript)</body><body package="Scriptaculous-Components">expand: anObject level: anInteger on: aScript	| children parentId |	children := childrenBlock value: anObject.	children isEmpty ifTrue: [ ^ self ].	parentId := self uid: anObject on: aScript.	aScript prototype element		id: parentId; 		down: '.indent a';		addClassName: 'expanded'.	aScript prototype insertion		id: parentId;		after: [ :html | 			children do: [ :each |				self renderRow: each level: anInteger + 1 on: html ] ].	expanded add: anObject</body><body package="Scriptaculous-Components">toggle: anObject level: anInteger on: aScript	(expanded includes: anObject)		ifTrue: [ self collapse: anObject level: anInteger on: aScript ]		ifFalse: [ self expand: anObject level: anInteger on: aScript ]</body></methods><methods><class-id>Scriptaculous.SUCarousel</class-id> <category>accessing</category><body package="Scriptaculous-Components">animationSpeed	^ animationSpeed</body><body package="Scriptaculous-Components">animationSpeed: anObject	animationSpeed := anObject</body><body package="Scriptaculous-Components">cssButton	^ self subclassResponsibility</body><body package="Scriptaculous-Components">cssClass	^ 'carouselComponent'</body><body package="Scriptaculous-Components">cssFloat	^ self subclassResponsibility</body><body package="Scriptaculous-Components">cssOrientation	^ self subclassResponsibility</body><body package="Scriptaculous-Components">elementExtent	^ elementExtent</body><body package="Scriptaculous-Components">elementExtent: anObject	elementExtent := anObject</body><body package="Scriptaculous-Components">elementHeight	^ elementExtent y</body><body package="Scriptaculous-Components">elementMargin	^ elementMargin</body><body package="Scriptaculous-Components">elementMargin: anObject	elementMargin := anObject</body><body package="Scriptaculous-Components">elementSize	^ self subclassResponsibility</body><body package="Scriptaculous-Components">elementSizeWithMargins	^ self elementSize + (2 * elementMargin)</body><body package="Scriptaculous-Components">elementWidth	^ elementExtent x</body><body package="Scriptaculous-Components">lastOffset	^ offset + numVisible - 1</body><body package="Scriptaculous-Components">navMargin	^ navMargin</body><body package="Scriptaculous-Components">navMargin: anObject	navMargin := anObject</body><body package="Scriptaculous-Components">numVisible	^ numVisible</body><body package="Scriptaculous-Components">numVisible: anObject	numVisible := anObject</body><body package="Scriptaculous-Components">scrollInc	^ scrollInc</body><body package="Scriptaculous-Components">scrollInc: anObject	scrollInc := anObject</body><body package="Scriptaculous-Components">visibleItems	^ items copyFrom: offset to: (self lastOffset min: items size)</body></methods><methods><class-id>Scriptaculous.SUCarousel</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderElement: element index: index on: html 	| currentId |	currentId := self 		uid: 'head'		at: index.	html div		id: currentId;		class: 'carousel-element';		class: self cssFloat;		style: 'margin:' , elementMargin greaseString , 'px;height:' , self elementHeight greaseString , 'px;width:' , self elementWidth greaseString , 'px;';		with: element</body><body package="Scriptaculous-Components">renderNavElementsOn: html 	html div		class: self cssOrientation;		id: uid;		with: [ 			self visibleItems keysAndValuesDo: [ :index :element | 				self 					renderElement: element					index: index					on: html ] ]</body><body package="Scriptaculous-Components">renderNavigationOn: html	"reset offset for each full refresh"	| theExtent clipExtent |	offset := 1.	created := self visibleItems.	theExtent := self componentExtent.	clipExtent := self clipExtent.	html div		class: self cssClass; 		style: 'height:', theExtent y greaseString, 'px;width:', theExtent x greaseString ,'px' ;		with: [			self renderPreviousButtonOn: html.			html div				class: 'clip-region';				class: self cssFloat;				style: 'height:', clipExtent y greaseString, 'px;width:', clipExtent x greaseString ,'px' ;				id: 'clip_', uid;				with: [ self renderNavElementsOn: html ].			self renderNextButtonOn: html ]</body><body package="Scriptaculous-Components">renderNextButtonOn: html	html div		id: uid, '_next';		style: self buttonStyle;		class: self cssButton;		onClick: (html prototype evaluator					callback: [ :script |						self scriptMove: -1 for: uid on: script ];						return: false);		with: self nextText</body><body package="Scriptaculous-Components">renderPreviousButtonOn: html	html div		id: uid, '_prev';		style: self buttonStyle;		class: self cssButton;		onClick: (html prototype evaluator					callback: [ :script |						self scriptMove: 1 for: uid on: script ];						return: false);		with: self prevText</body></methods><methods><class-id>Scriptaculous.SUCarousel</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	numVisible := 5.	elementExtent := Point x: 40 y: 40.	elementMargin := 5.	scrollInc := 5.	animationSpeed := 0.5.	navMargin := 12.	offset := 1</body></methods><methods><class-id>Scriptaculous.SUCarousel</class-id> <category>private</category><body package="Scriptaculous-Components">buttonStyle	^ self subclassResponsibility</body><body package="Scriptaculous-Components">moveSizeX: anInteger	^ 0</body><body package="Scriptaculous-Components">moveSizeY: anInteger	^ 0</body><body package="Scriptaculous-Components">nextText	^ self subclassResponsibility</body><body package="Scriptaculous-Components">prevText	^ self subclassResponsibility</body></methods><methods><class-id>Scriptaculous.SUCarousel</class-id> <category>accessing-bounds</category><body package="Scriptaculous-Components">clipExtent	^ self subclassResponsibility</body><body package="Scriptaculous-Components">componentExtent	^ self subclassResponsibility</body></methods><methods><class-id>Scriptaculous.SUCarousel</class-id> <category>scripting</category><body package="Scriptaculous-Components">scriptMove: anInteger for: id on: script	"hide buttons to avoid clicks between move operation, works only for IE and firefox"		| currentIndex nextIndex direction buttonId |	currentIndex := self lastOffset. 	anInteger = 1 			ifTrue: [				offset = 1 ifTrue: [ ^ self ].				offset := offset - scrollInc.				direction := '_prev' ]			ifFalse: [ (offset + scrollInc abs) &gt; (items size) ifTrue: [ ^ self ].				direction := '_next'.				offset := offset + scrollInc ].	anInteger &lt; 0 ifTrue: [		nextIndex := (currentIndex + scrollInc) min: (items size).		nextIndex &gt; currentIndex ifTrue: [		currentIndex + 1 to: nextIndex do: [ :idx |			| anItem |			anItem := items at: idx.			(created includes: anItem) ifFalse: [				created add: anItem.				script prototype element					id: (self uid: 'head' at: idx);					then: (script prototype element						id: (self uid: 'head' at: idx - 1);						insertAfter: [ :html | 							self renderElement: (items at: idx) index: idx on: html ]) ] ] ] ].	buttonId := uid,direction.	script prototype element		id: buttonId;		styleAt: 'visibility' put: 'hidden'.	script scriptaculous effect id: id;		duration: animationSpeed;		y: (self moveSizeY: anInteger); x: (self moveSizeX: anInteger);		move;		onAfterFinish: (PTElement new id: buttonId; styleAt: 'visibility' put: 'visible')</body></methods><methods><class-id>Scriptaculous.SUVerticalCarousel</class-id> <category>accessing-bounds</category><body package="Scriptaculous-Components">clipExtent	| xSize ySize |	xSize := elementExtent x.	ySize := elementExtent y + (2 * elementMargin).	^ Point x: xSize + (2 * elementMargin) y: ySize * numVisible</body><body package="Scriptaculous-Components">componentExtent	| clipExtent |	clipExtent := self clipExtent.	^ Point x: clipExtent x y: clipExtent y + (navMargin * 2) + 3</body></methods><methods><class-id>Scriptaculous.SUVerticalCarousel</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssButton	^ 'buttonv'</body><body package="Scriptaculous-Components">cssFloat	^ 'carousel-float-v'</body><body package="Scriptaculous-Components">cssOrientation	^ 'carousel-list-v'</body><body package="Scriptaculous-Components">elementSize	^ self elementExtent y</body></methods><methods><class-id>Scriptaculous.SUVerticalCarousel</class-id> <category>private</category><body package="Scriptaculous-Components">buttonStyle	^ 'height:' , navMargin greaseString , 'px;'</body><body package="Scriptaculous-Components">moveSizeY: anInteger	^ self elementSizeWithMargins * scrollInc * anInteger</body><body package="Scriptaculous-Components">nextText	^ '\/'</body><body package="Scriptaculous-Components">prevText	^ '/\'</body></methods><methods><class-id>Scriptaculous.SUAccordion</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderBody: anElement index: anInteger visible: aBoolean on: html	(self isVisible: anElement)		ifFalse: [ ^ self ].	html definitionData		id: (self uid: 'body' at: anInteger);		style: (aBoolean ifFalse: [ 'display: none' ]);		with: anElement</body><body package="Scriptaculous-Components">renderHead: anElement index: anInteger on: html	html definitionTerm 		id: (self uid: 'head' at: anInteger); 		class: 'active' if: (self isVisible: anElement);		with: [			html anchor				onClick: (html prototype evaluator					callback: [ :script | self scriptToggle: anElement on: script ];					return: false);				callback: [ self toggle: anElement ];				with: anElement label ]</body><body package="Scriptaculous-Components">renderNavigationOn: html 	html definitionList class: self cssClass; with: [		items keysAndValuesDo: [ :index :element | 			self renderHead: element index: index on: html.			self renderBody: element index: index visible: true on: html ] ]</body></methods><methods><class-id>Scriptaculous.SUAccordion</class-id> <category>actions</category><body package="Scriptaculous-Components">hide: anElement	self visible remove: anElement ifAbsent: [ ]</body><body package="Scriptaculous-Components">toggle: anElement	(self isVisible: anElement)		ifTrue: [ self hide: anElement ]		ifFalse: [ self show: anElement ]</body></methods><methods><class-id>Scriptaculous.SUAccordion</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssClass	^ 'accordion'</body><body package="Scriptaculous-Components">maxVisible	^ maxVisible</body><body package="Scriptaculous-Components">maxVisible: anInteger	maxVisible := anInteger</body><body package="Scriptaculous-Components">visible	^ visible</body></methods><methods><class-id>Scriptaculous.SUAccordion</class-id> <category>testing</category><body package="Scriptaculous-Components">isVisible: aComponent	^ self visible includes: aComponent</body></methods><methods><class-id>Scriptaculous.SUAccordion</class-id> <category>scripting</category><body package="Scriptaculous-Components">scriptHide: anElement on: aScript	| index |	index := self findIndex: anElement ifAbsent: [ ^ self ].	aScript scriptaculous effect		id: (self uid: 'body' at: index);		onAfterFinish: (PTElement new						id: (self uid: 'body' at: index); 						remove);		duration: 0.2;		blindUp.	aScript prototype element		id: (self uid: 'head' at: index);		removeClassName: 'active'</body><body package="Scriptaculous-Components">scriptShow: anElement on: aScript	| index |	index := self findIndex: anElement ifAbsent: [ ^ self ].	aScript prototype element		id: (self uid: 'head' at: index);		insertAfter: [ :html | 			self 				renderBody: anElement index: index				visible: false on: html ].	aScript scriptaculous effect		id: (self uid: 'body' at: index);		duration: 0.2;		blindDown.	aScript prototype element		id: (self uid: 'head' at: index);		addClassName: 'active'</body><body package="Scriptaculous-Components">scriptToggle: anElement on: aScript	| previous |	previous := self visible copy.	self toggle: anElement.	(previous difference: self visible)		do: [ :each | self scriptHide: each on: aScript ].	(self visible difference: previous)		do: [ :each | self scriptShow: each on: aScript ]</body></methods><methods><class-id>Scriptaculous.SUAccordion</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	visible := OrderedCollection new.	maxVisible := 1</body></methods><methods><class-id>Scriptaculous.SUAccordion</class-id> <category>delegation</category><body package="Scriptaculous-Components">show: anElement	self visible addLast: anElement.	self maxVisible isNil ifFalse: [		[ self maxVisible &lt; self visible size ]			whileTrue: [ self hide: self visible first ] ]</body></methods><methods><class-id>Scriptaculous.SURenderableItem</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderOn: html 	html render: self body</body></methods><methods><class-id>Scriptaculous.SURenderableItem</class-id> <category>accessing</category><body package="Scriptaculous-Components">body	^ body</body><body package="Scriptaculous-Components">owner	^ owner</body></methods><methods><class-id>Scriptaculous.SURenderableItem</class-id> <category>testing</category><body package="Scriptaculous-Components">isComponent	"Answer true if the body of the receiver is a component, and therefor needs to be registered as a child."	^ self body isKindOf: WAComponent</body></methods><methods><class-id>Scriptaculous.SURenderableItem</class-id> <category>initialization</category><body package="Scriptaculous-Components">initializeOn: aComponent body: anObject	self initialize.	owner := aComponent.	body := anObject</body></methods><methods><class-id>Scriptaculous.SURenderableItem class</class-id> <category>instance creation</category><body package="Scriptaculous-Components">on: aComponent body: anObject	^ self basicNew initializeOn: aComponent body: anObject</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>testing</category><body package="Scriptaculous-Components">isVisible	^ visible</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>accessing-properties</category><body package="Scriptaculous-Components">closeButtonEnabled	^ self propertiesAt: #closeButton ifAbsent: [ true ]</body><body package="Scriptaculous-Components">closeButtonEnabled: aBoolean	self propertiesAt: #closeButton put: aBoolean</body><body package="Scriptaculous-Components">minimizeButtonEnabled	^ self propertiesAt: #minimizeButton ifAbsent: [ true ]</body><body package="Scriptaculous-Components">minimizeButtonEnabled: aBoolean	self propertiesAt: #minimizeButton put: aBoolean</body><body package="Scriptaculous-Components">tooltipKey	^ self propertiesAt: #tooltipKey ifAbsent: [ #unknown ]</body><body package="Scriptaculous-Components">tooltipKey: aKey	self propertiesAt: #tooltipKey put: aKey</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>accessing</category><body package="Scriptaculous-Components">collapsed	^ collapsed</body><body package="Scriptaculous-Components">collapsed: aBoolean	collapsed := aBoolean</body><body package="Scriptaculous-Components">component: aComponent	component := aComponent</body><body package="Scriptaculous-Components">componentBlock: aBlock	componentBlock := aBlock fixCallbackTemps</body><body package="Scriptaculous-Components">componentId	^ 'comp_' , self windowId</body><body package="Scriptaculous-Components">containerId	^ 'container_' , self windowId</body><body package="Scriptaculous-Components">cssClass	^ 'suWindow'</body><body package="Scriptaculous-Components">extent: aPoint	extent := aPoint</body><body package="Scriptaculous-Components">id	^ id</body><body package="Scriptaculous-Components">id: aId	id := aId</body><body package="Scriptaculous-Components">origin: aPoint	origin := aPoint</body><body package="Scriptaculous-Components">properties	^ properties ifNil: [ properties := Dictionary new ]</body><body package="Scriptaculous-Components">propertiesAt: aKey	^ self properties at: aKey ifAbsent: [  ]</body><body package="Scriptaculous-Components">propertiesAt: aKey ifAbsent: aBlock	^ self properties at: aKey ifAbsent: aBlock</body><body package="Scriptaculous-Components">propertiesAt: aKey put: aValue	self properties at: aKey put: aValue</body><body package="Scriptaculous-Components">title: aString	title := aString</body><body package="Scriptaculous-Components">titleHeight	^ 20</body><body package="Scriptaculous-Components">titleId	^ 'title_' , self windowId</body><body package="Scriptaculous-Components">updateBlock: aBlock	updateBlock := aBlock</body><body package="Scriptaculous-Components">windowId	^ id ifNil: [ id := 'suwindow' ]</body><body package="Scriptaculous-Components">zIndex	^ self propertiesAt: #zIndex ifAbsent: [ 999 ]</body><body package="Scriptaculous-Components">zIndex: anInteger	^ self propertiesAt: #zIndex put: anInteger</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderBodyOn: html	html div		class: 'title';		id: self titleId;		with: [ self renderTitleOn: html ].	html div		class: 'container';		style: self cssContainerExtent;		id: self containerId</body><body package="Scriptaculous-Components">renderCloseOn: html	self closeButtonEnabled		ifTrue: [ html anchor					title: 'Close';					onClick: (html prototype evaluator								callback: [ :script |									self closeOn: script ];									return: false);					with: 'X' ]</body><body package="Scriptaculous-Components">renderComponentOn: html	html div		id: self componentId;		with: component</body><body package="Scriptaculous-Components">renderContentOn: html 	self close.	collapsed := false.	html div		id: self windowId;		script: (html scriptaculous draggable				handle: self titleId;				revert: false);		class: self cssClass;		style: 'display: none';		style: 'z-index:' , self zIndex greaseString , ';' , self cssOrigin , self cssExtent;		with: [ self renderBodyOn: html ]</body><body package="Scriptaculous-Components">renderMinimizeOn: html	self minimizeButtonEnabled		ifTrue: [			html anchor					title: 'Minimize';					onClick: (html prototype evaluator									callback: [ :script | 												self collapseOn: script ];												return: false);					with: '-' ]</body><body package="Scriptaculous-Components">renderTitleOn: html	html table		class: 'title';		style: 'width:100%';		cellspacing: 0;		cellpadding:0;		with: [			html tableRow: [				html tableData					style: 'width:100%';					class: 'label';					with: title.				html tableData: [ self renderMinimizeOn: html ] .				html tableData: [ self renderCloseOn: html ] ] ]</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>private</category><body package="Scriptaculous-Components">cssContainerExtent	^ 'width:' , extent x greaseString , 'px;height:' , (extent y - 16) greaseString , 'px;'</body><body package="Scriptaculous-Components">cssExtent	^ 'width:' , extent x greaseString , 'px;height:' , extent y greaseString , 'px;'</body><body package="Scriptaculous-Components">cssOrigin	^ 'left:' , origin x greaseString , 'px;top:' , origin y greaseString , 'px;'</body><body package="Scriptaculous-Components">setComponent	component isNil		ifTrue: [ component := componentBlock value: self ].	updateBlock notNil		ifTrue: [ updateBlock value: self value: component ]</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>scripting</category><body package="Scriptaculous-Components">closeOn: script	self close.	script prototype element		id: self componentId;		remove.	script scriptaculous effect		id: self windowId;		duration: 0.5; fade</body><body package="Scriptaculous-Components">collapseOn: script	collapsed 		ifFalse: [			script prototype element				id: self windowId;				styleAt: 'height' put: self titleHeight greaseString , 'px'.			script prototype element				id: self containerId; hide ]		ifTrue: [			script prototype element				id: self windowId;				styleAt: 'height' put: extent y greaseString, 'px'.			script prototype element				id: self containerId;				show ].	collapsed := collapsed not</body><body package="Scriptaculous-Components">openOn: aScript 	self 		openOn: aScript		hidden: false</body><body package="Scriptaculous-Components">openOn: aScript hidden: aBoolean	self isVisible		ifFalse: [			visible := true.			aBoolean ifFalse: [ self showOn: aScript ].			aScript prototype element				id: self windowId;				styleAt: 'left' put: origin x greaseString, 'px';				styleAt: 'top' put: origin y greaseString, 'px'.			aScript prototype element				id: self containerId;				insert: [ :html |					self setComponent.					self renderComponentOn: html ] ]</body><body package="Scriptaculous-Components">showOn: aScript	aScript scriptaculous effect id: self windowId; duration: 0.3; appear</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	extent := 300 @ 200.	origin := 100 @ 100.	title := 'SU_Window'.	componentBlock := [  ].	collapsed := false.	visible := false</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>actions</category><body package="Scriptaculous-Components">close	visible := false</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>public</category><body package="Scriptaculous-Components">originX: x y: y	self origin: (Point x: x asNumber y: y asNumber + 16)</body></methods><methods><class-id>Scriptaculous.SUWindow</class-id> <category>hooks</category><body package="Scriptaculous-Components">children	^ Array with: component</body></methods><methods><class-id>Scriptaculous.SUWindow class</class-id> <category>instance creation</category><body package="Scriptaculous-Components">on: aBlock	^ self new		componentBlock: aBlock;		yourself</body></methods><methods><class-id>Scriptaculous.SUSplitterItem</class-id> <category>accessing</category><body package="Scriptaculous-Components">min	^ min</body><body package="Scriptaculous-Components">min: aNumber	min := aNumber</body><body package="Scriptaculous-Components">size	^ size</body><body package="Scriptaculous-Components">size: aNumber	size := aNumber</body></methods><methods><class-id>Scriptaculous.SUSplitterItem</class-id> <category>initialization</category><body package="Scriptaculous-Components">initializeOn: aComponent body: anObject	super initializeOn: aComponent body: anObject.	size := '200px'.	min := 50</body></methods><methods><class-id>Scriptaculous.SUDateTimePicker</class-id> <category>accessing</category><body package="Scriptaculous-Components">formattedResult	^ super formattedResult , ' ' , (self withLeadingZero: hours) , ':' , (self withLeadingZero: minutes) , ':'		, (self withLeadingZero: seconds)</body><body package="Scriptaculous-Components">hours	^ hours</body><body package="Scriptaculous-Components">hours: anObject	hours := self convertToInteger: anObject max: 23</body><body package="Scriptaculous-Components">minutes	^ minutes</body><body package="Scriptaculous-Components">minutes: anObject	minutes := self convertToInteger: anObject max: 59</body><body package="Scriptaculous-Components">seconds	^ seconds</body><body package="Scriptaculous-Components">seconds: anObject	seconds := self convertToInteger: anObject max: 59</body><body package="Scriptaculous-Components">timeId	^ 'time_' , uid</body></methods><methods><class-id>Scriptaculous.SUDateTimePicker</class-id> <category>private</category><body package="Scriptaculous-Components">convertToInteger: aString max: maxValue 	| anInteger |	anInteger := aString greaseInteger.	anInteger isNil ifTrue: [ ^ 0 ].	^ (anInteger max: 0) min: maxValue</body><body package="Scriptaculous-Components">withLeadingZero: anInteger 	^ anInteger &lt; 10 		ifTrue: [ '0' , anInteger greaseString ]		ifFalse: [ anInteger greaseString ]</body></methods><methods><class-id>Scriptaculous.SUDateTimePicker</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	| now |	super initialize.	showSeconds := false.	now := DateAndTime now.	hours := now hour.	minutes := now minute.	seconds := 0</body></methods><methods><class-id>Scriptaculous.SUDateTimePicker</class-id> <category>scripting</category><body package="Scriptaculous-Components">ajaxCallbackFor: aDate on: html	^ html prototype evaluator		callback: [ :script | 			self select: aDate.			self scriptUpdateOn: script ];		return: false</body><body package="Scriptaculous-Components">triggerFormOn: html	^ html prototype evaluator		triggerForm: self timeId;		callback: [ :script | self scriptSelect: self date on: script ];		return: false</body></methods><methods><class-id>Scriptaculous.SUDateTimePicker</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderBodyOn: html	html table		cellspacing: 0;		class: 'main';		with: [			self renderCalendarOn: html.			self renderTimeOn: html ]</body><body package="Scriptaculous-Components">renderTimeOn: html	html tableRow: [		html tableData			class: 'time';			colSpan: 9;			align: 'center';			with: [				html form 					id: self timeId;					with: [						html textInput							maxLength: 2;							value: (self withLeadingZero: hours);							callback: [ :v | self hours: v ].						html text: ':'.						html textInput							maxLength: 2;							value: (self withLeadingZero: minutes);							callback: [ :v | self minutes: v ].						showSeconds ifTrue: [							html text: ':'.							html textInput								maxLength: 2;								value: (self withLeadingZero: seconds);								callback: [ :v | self seconds: v ] ].						html space.						html anchor							class: 'button';							onClick: (self triggerFormOn: html);							with: 'Ok' ] ] ]</body></methods><methods><class-id>Scriptaculous.SUHorizontalSplitter</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssClass	^ 'splitter-horizontal'</body></methods><methods><class-id>Scriptaculous.SUHorizontalSplitter</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderItem: anItem on: html	html div style: 'height:' , anItem size; with: anItem body</body></methods><methods><class-id>Scriptaculous.SUHorizontalSplitter</class-id> <category>scripts</category><body package="Scriptaculous-Components">draggable: aBeforeItem and: anAfterItem on: html 	^ (super 		draggable: aBeforeItem		and: anAfterItem		on: html)		constraintVertical;		onDrag: (JSStream on: '				var splitter = arguments[0].element;				offset = splitter.offsetTop - arguments[0]._originalTop;				arguments[0]._originalTop = splitter.offsetTop;				leftElement = arguments[0]._previous;				leftHeight = leftElement.offsetHeight + offset;				rightElement = arguments[0]._next;				rightHeight = rightElement.offsetHeight - offset;				if (leftHeight &gt; ' , aBeforeItem min greaseString , ' &amp;&amp; rightHeight &gt; ' , anAfterItem min greaseString , ') {					leftElement.style.height = leftHeight + "px";					rightElement.style.height = rightHeight + "px";				}');		onEnd: (html prototype request				callback: [ :value | aBeforeItem size: value ]					value: (JSStream on: 'arguments[0].element.previous().offsetHeight + ''px''');				callback: [ :value | anAfterItem size: value ]					value: (JSStream on: 'arguments[0].element.next().offsetHeight + ''px'''))</body><body package="Scriptaculous-Components">initOffsetScript	^ 'drag._originalTop=splitter.offsetTop;'</body></methods><methods><class-id>Scriptaculous.SULightbox</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderContentOn: html	super renderContentOn: html.	html div id: 'overlay'.	html div		id: 'lightbox';		style: 'display: none';		with: self delegate.	html document addLoadScriptFirst: self lighter</body></methods><methods><class-id>Scriptaculous.SULightbox</class-id> <category>accessing</category><body package="Scriptaculous-Components">delegate	^ delegate</body><body package="Scriptaculous-Components">delegate: aComponent	delegate := aComponent</body></methods><methods><class-id>Scriptaculous.SULightbox</class-id> <category>testing</category><body package="Scriptaculous-Components">isDelegation	^ true</body></methods><methods><class-id>Scriptaculous.SULightbox</class-id> <category>hooks</category><body package="Scriptaculous-Components">children	^ super children copyWith: self delegate</body><body package="Scriptaculous-Components">script	^ 'Object.extend(Position, {	windowBounds: function() {		var x = window.innerWidth			|| document.documentElement.clientWidth			|| document.body.clientWidth			|| 0;		var y = window.innerHeight			|| document.documentElement.clientHeight			|| document.body.clientHeight			|| 0;		return [x, y];	}});Object.extend(Element, {	fullscreen: function(element) {		element = $(element);		var bounds = Position.windowBounds();		element.style.position = "absolute";		element.style.left = element.style.top = 0;		element.style.width = bounds[0] + "px";		element.style.height = bounds[1] + "px";	},	center: function(element) {		element = $(element);		var extent = Element.getDimensions(element);		var bounds = Position.windowBounds();		var x = (bounds[0] - extent.width) / 2;		var y = (bounds[1] - extent.height) / 2;		x = x &lt; 0 ? 0 : x; y = y &lt; 0 ? 0 : y;		element.style.position = "absolute";		element.style.left = x + "px";		element.style.top = y + "px";	}});function updateLightbox() {//ie6 fix hide all select elements not inside the lightbox	if (Prototype.Browser.IE) {if (navigator.userAgent.indexOf("MSIE 6") != -1) 								{$$("select").invoke("setStyle", {visibility: "hidden"})								$("lightbox").descendants().each(function(item) {item.setStyle({visibility: "visible"})})}};	Element.fullscreen("overlay");	Element.center("lightbox");	Element.show("lightbox");};'</body><body package="Scriptaculous-Components">style	^ 'html { overflow: hidden; }body { overflow: hidden; }div#overlay {	z-index: 9998;	background-color: black;	filter: alpha(opacity=40);	-moz-opacity: 0.4;	opacity: 0.4;}div#overlay[id] { position: fixed; }div#lightbox { z-index: 9999; }'</body></methods><methods><class-id>Scriptaculous.SULightbox</class-id> <category>accessing-scripts</category><body package="Scriptaculous-Components">lighter	^ JSStream on: 'updateLightbox();Event.observe(window,"resize",function(){updateLightbox();});'</body></methods><methods><class-id>Scriptaculous.SUComponentLibrary</class-id> <category>styles</category><body package="Scriptaculous-Components">accordionCss	^ '.accordion dt,.accordion dd {	margin: 0;	padding: 0;	overflow: auto;}.accordion dt {	padding: 0.25em;	background-color: #c5dea1;}.accordion dt.active {	background-color: #e8a400;}.accordion dt a:link,.accordion dt a:visited {	color: #444;	outline: none;	display: block;	padding: 0.25em;	text-decoration: none;}.accordion dt.active a:link,.accordion dt.active a:visited {	color: #000;}.accordion dd {	background-color: #fff;}'</body><body package="Scriptaculous-Components">carouselComponentCss	^ '.carouselComponent {position:relative;border:1px solid #ccc;overflow:hidden} .carouselComponent .carousel-list-h {width:10000px;		position:relative;		z-index:1} .carouselComponent .carousel-list-v {height:10000px;		position:relative;		z-index:1} .carouselComponent .carousel-element {		list-style:none;		overflow:hidden	}.carousel-float-h {float:left}.carousel-float-v {clear:left;float:left}.carouselComponent .buttonh {position:relative;height:100%;float:left;background:#c5dea1;vertical-align:middle;cursor:pointer}.carouselComponent .buttonv {clear:left;position:relative;text-align:center;background:#c5dea1;cursor:pointer}  .carouselComponent .clip-region { border:1px dotted #ccc;		overflow:hidden;		margin:0px auto;		position:relative; 	}'</body><body package="Scriptaculous-Components">carouselCss	^ '.carousel .nav {position:relative;padding:5px;border:1px solid #ccc;width:140px;height:100%}	.carousel .inner {position:relative;margin:2px;overflow:hidden}	.carousel .move {background:white;position:relative;top:0;left:0}	.carousel .body {border:1px solid #ccc}	.carousel .action {border:1px solid #ccc;background:#ffffe0;padding:2px}	.carousel .nav a {text-decoration:none;color:black}	.carousel td.right {text-align:right}	.carousel .nav .active {background:#99ccff;border:1px dotted #ccc}'</body><body package="Scriptaculous-Components">datePickerCss	^ '.calendar {font-family:Arial;font-size:10px;width:150px;z-index:999}	.calendar .day {text-align:center;border:1px solid #ccc}	.calendar .main {border:1px solid black;background:#fff}	.calendar .daySelected {background:#e0e0e0;font-weight:bold}	.calendar a {text-decoration:none;color:black;}	.calendar .day a {color:#336699;display:block;width:16px}	.calendar .day a:hover {background:#aaa;color:white}	.calendar .monthTable {width:100%}	.calendar .monthRow {background:#e0e0e0}	.calendar .calendarTitle {background-color:#f0f0f0}	.calendar .monthCurrent {font-size:12px;font-family:verdana;width:100%}	.calendar .yearTable {width:100%;border-top:1px solid #ccc}	.calendar .year {font-size:10px;font-family:verdana;text-align:center}	.calendar .year a:hover {background:#aaa;color:white}	.calendar .yearCurrent {background:#e0e0e0;font-weight:bold}	.calendar .day a.today {text-decoration:underline;font-weight:bold}	.calendar .weekDay {text-align:center}	.calendar .time {border:1px solid #ccc}	.calendar .time input.text {width:18px}	.calendar .time a.button {border:1px solid #aaa;background:#ccc;padding:2px;-moz-border-radius:5px;border-radius:5px}	.calendar .time a.button:hover {background:#69c}'</body><body package="Scriptaculous-Components">splitterCss	^ '.splitter-horizontal .handle {	height: 5px;	position: relative;	background-color: #c5dea1;	cursor: row-resize;}.splitter-vertical div {	float: left;}.splitter-vertical div.handle {	float: left;	width: 5px;	height: 200px;	position: relative;	cursor: col-resize;	background-color: #c5dea1;}'</body><body package="Scriptaculous-Components">tabPanelCss	"Based on: http://www.kalsey.com/tools/csstabs/"	^ '.tabPanel ul.head {	margin: 0;	padding-left: 1em;	padding-bottom: 19px;	border-bottom: 1px solid #ccc;}.tabPanel ul.head li	{	margin: 0;	padding: 0;	display: inline;	list-style-type: none;}.tabPanel ul.head a:link, .tabPanel ul.head a:visited {	float: left;	color: #444;	outline: none;	line-height: 14px;	margin-right: 1em;	background: #eee;	text-decoration: none;	border: 1px solid #ccc;	padding: 2px 1em 2px 1em;}.tabPanel ul.head a:link.active, .tabPanel ul.head a:visited.active {	color: #000;	background: #fff;	border-bottom: 1px solid #fff;}.tabPanel ul.head a:hover {	background-color: #fff;}'</body><body package="Scriptaculous-Components">titlePaneCss	^ '.titlePane .title {background:#e0e0e0;border-bottom-color:black;border-bottom-style:dotted;border-bottom-width:1px}	.titlePane {border:4px solid #ccc;width:450px;overflow:hidden}	.titlePane .body {background:white;height:100%;width:100%;overflow:hidden}	.titlePane .closed {height:0px;display:none}	.titlePane a.title {cursor:pointer;					outline: none;					padding: 0.25em;					display: block;					text-decoration:none;					color:black}	.titlePane td.label {width:100%;white-space:nowrap}	.titlePane .gfx {background-position: center center;					width:16px;height:10px;					background-image: url(arrowright.gif)}	.titlePane .gfxopen {background-position: center center;					width:16px;height:10px;					background-image: url(arrowdown.gif)}	'</body><body package="Scriptaculous-Components">treeReportCss	^ '.treeReport {	border: solid 1px #ccc;	border-collapse: collapse;	background-color: white;}.treeReport th {	padding: 4px;	text-align: left;	background-color: #ccc;}.treeReport td {	text-align: left;	vertical-align: top;	padding-right: 5px;}.treeReport td .indent {	height: 16px;	overflow: hidden;	white-space: nowrap;}.treeReport td .indent .block,.treeReport td .indent .text {	float: left;	height: 16px;}.treeReport td .indent .block {	width: 16px;}.treeReport td .indent .block a {	width: 16px;	height: 16px;	outline: none;	display: block;	background-position: center center;	background-image: url(arrowright.gif);}.treeReport td .indent .block a.expanded {	background-image: url(arrowdown.gif);}'</body><body package="Scriptaculous-Components">windowCss	^ 'div.suWindow {background:#e0e0e0;border:1px solid #888;overflow:hidden;position:fixed;-moz-border-radius:5px;border-radius:5px}	.suWindow .container {overflow:auto;padding:2px}	.suWindow .title {cursor:move;background:#888;color:white;height:16px; padding:2px 2px 3px 3px}	.suWindow .title a {text-decoration:none;padding:2px;}'</body></methods><methods><class-id>Scriptaculous.SUComponentLibrary</class-id> <category>uploaded</category><body package="Scriptaculous-Components">arrowdownGif	^ #(71 73 70 56 57 97 16 0 16 0 196 17 0 129 129 129 176 176 176 212 212 212 234 234 234 251 251 251 157 157 157 193 193 193 229 229 229 133 133 133 142 142 142 243 243 243 232 232 232 233 233 233 149 149 149 147 147 147 203 203 203 128 128 128 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 17 0 44 0 0 0 0 16 0 16 0 0 5 58 96 36 142 100 105 158 104 106 50 79 235 182 139 233 64 116 77 55 166 97 219 134 73 36 59 72 130 112 18 4 5 169 130 173 160 58 0 158 128 131 42 18 160 5 166 17 5 2 161 192 70 6 3 175 120 236 13 1 0 59) asByteArray</body><body package="Scriptaculous-Components">arrowrightGif	^ #(71 73 70 56 57 97 16 0 16 0 196 17 0 129 129 129 176 176 176 212 212 212 234 234 234 251 251 251 157 157 157 193 193 193 229 229 229 133 133 133 142 142 142 243 243 243 232 232 232 233 233 233 149 149 149 147 147 147 203 203 203 128 128 128 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 17 0 44 0 0 0 0 16 0 16 0 0 5 54 96 36 142 100 105 158 104 106 46 141 65 168 226 3 65 137 0 203 51 84 28 41 158 3 1 197 201 55 3 64 16 3 19 17 98 68 42 115 197 224 16 186 235 205 106 48 134 195 5 235 122 191 167 16 0 59) asByteArray</body></methods><methods><class-id>Scriptaculous.SUComponentLibrary</class-id> <category>accessing</category><body package="Scriptaculous-Components">selectorsToInclude	^ #( treeReportCss tabPanelCss accordionCss titlePaneCss carouselCss carouselComponentCss datePickerCss windowCss splitterCss)</body></methods><methods><class-id>Scriptaculous.SUTitlePane</class-id> <category>accessing</category><body package="Scriptaculous-Components">alwaysRefresh	"Answer the value of alwaysRefresh"	^ alwaysRefresh</body><body package="Scriptaculous-Components">alwaysRefresh: anObject	"Set the value of alwaysRefresh"	alwaysRefresh := anObject</body><body package="Scriptaculous-Components">body	"Answer the value of body"	^ body</body><body package="Scriptaculous-Components">body: anObject	"Set the value of body"	body := anObject</body><body package="Scriptaculous-Components">cssClass	^ 'titlePane'</body><body package="Scriptaculous-Components">loaded	"Answer the value of loaded"	^ loaded</body><body package="Scriptaculous-Components">loaded: anObject	"Set the value of loaded"	loaded := anObject</body><body package="Scriptaculous-Components">mainId	^ 'main' , uid</body><body package="Scriptaculous-Components">open	"Answer the value of open"	^ open</body><body package="Scriptaculous-Components">open: anObject	"Set the value of open"	open := anObject</body><body package="Scriptaculous-Components">title	"Answer the value of title"	^ title</body><body package="Scriptaculous-Components">title: anObject	"Set the value of title"	title := anObject</body><body package="Scriptaculous-Components">uid	"Answer the value of uid"	^ uid</body><body package="Scriptaculous-Components">uid: anObject	"Set the value of uid"	uid := anObject</body></methods><methods><class-id>Scriptaculous.SUTitlePane</class-id> <category>public</category><body package="Scriptaculous-Components">startOpen	"Set the value of open and loaded"	"use this if the content should be open and rendered at startup"	open := true.	loaded := true</body></methods><methods><class-id>Scriptaculous.SUTitlePane</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderBodyOn: html	html div		id: uid;		class: 'body';		class: 'closed' if: open not;		with: [ open ifTrue: [ html render: body ] ]</body><body package="Scriptaculous-Components">renderContentOn: html	uid := html nextId.	html div		id: self mainId;		class: self cssClass;		with: [ 			html div: [ 				self renderTitleOn: html.				self renderBodyOn: html ] ]</body><body package="Scriptaculous-Components">renderTitleOn: html	html anchor class: 'title'; 		callback: [ open := open not ];		onClick: (html prototype evaluator						callback: [ :script | self scriptToggleOn: script ];						return: false);		 with: [			html table				style: 'width:100%';				cellspacing: 0;				with: [					html tableRow: [						html tableData							class: 'label';							with: title.						html tableData: [							html div								id: 'gfx',uid;								class: 'gfxopen' if: open;								class: 'gfx' if: open not ] ] ] ]</body></methods><methods><class-id>Scriptaculous.SUTitlePane</class-id> <category>scripting</category><body package="Scriptaculous-Components">scriptToggleOn: script	open		ifTrue: [ 			(script scriptaculous effect)				id: uid;				duration: 0.3;				blindUp.			(script prototype element)				id: 'gfx' , uid;				removeClassName: 'gfxopen';				addClassName: 'gfx' ]		ifFalse: [ 			(loaded not or: [ alwaysRefresh ])				ifTrue: [ 					(script prototype element)						id: uid;						update: body.					loaded := true ].			(script prototype element)				id: uid;				removeClassName: 'closed'.			(script prototype element)				id: 'gfx' , uid;				removeClassName: 'gfx';				addClassName: 'gfxopen'.			(script scriptaculous effect)				id: uid;				duration: 0.3;				blindDown ].	open := open not</body></methods><methods><class-id>Scriptaculous.SUTitlePane</class-id> <category>hooks</category><body package="Scriptaculous-Components">children	^ (body isKindOf: WAComponent)		ifTrue: [ Array with: body ]		ifFalse: [ #() ]</body></methods><methods><class-id>Scriptaculous.SUTitlePane</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	open := false.	loaded := false.	alwaysRefresh := true</body></methods><methods><class-id>Scriptaculous.SUNavigationItem</class-id> <category>accessing</category><body package="Scriptaculous-Components">label	^ label</body><body package="Scriptaculous-Components">label: aString	label := aString</body></methods><methods><class-id>Scriptaculous.SUTieredList</class-id> <category>accessing</category><body package="Scriptaculous-Components">children: aOneArgumentBlock	"Define a one argument block that answers a collection of children for a given node."	childrenBlock := aOneArgumentBlock</body><body package="Scriptaculous-Components">cssClass	^ 'tieredList'</body><body package="Scriptaculous-Components">labels: aOneArgumentBlock	"Define a one argument block that answers a string for a given node."	labelBlock := aOneArgumentBlock</body><body package="Scriptaculous-Components">selection	"Answer the selection path including the root node."	^ selectionPath</body><body package="Scriptaculous-Components">selection: anOrderedCollection	"Set the selection path including the root node."	selectionPath := anOrderedCollection</body></methods><methods><class-id>Scriptaculous.SUTieredList</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderContentOn: html	html div		class: self cssClass;		id: (uid := html nextId);		with: [ self renderListOn: html ]</body><body package="Scriptaculous-Components">renderList: aCollection level: anInteger on: html	| id selected |	aCollection isEmpty ifTrue: [ ^ self ].	html select		beOptional;		list: aCollection;		labels: labelBlock;		id: (id := html nextId);		optionalLabel: '(select)';		selected: (selected := selectionPath			at: anInteger			ifAbsent: [ nil ]);		callback: [ :value |			[ selectionPath size &lt; anInteger ]		 		whileFalse: [ selectionPath removeLast ].			selectionPath addLast: value ];		onChange: (html scriptaculous updater			id: uid;			triggerFormElement: id;			callback: [ :r | self renderListOn: r ]).	selected isNil		ifFalse: [ self renderList: (childrenBlock value: selected) level: anInteger + 1 on: html ]</body><body package="Scriptaculous-Components">renderListOn: html	selectionPath isEmpty		ifFalse: [ self renderList: (childrenBlock value: selectionPath first) level: 2 on: html ]</body></methods><methods><class-id>Scriptaculous.SUTieredList</class-id> <category>initialization</category><body package="Scriptaculous-Components">initialize	super initialize.	selectionPath := OrderedCollection new.	childrenBlock := [ :value | #() ].	labelBlock := [ :value | value printString ]</body></methods><methods><class-id>Scriptaculous.SUHorizontalCarousel</class-id> <category>private</category><body package="Scriptaculous-Components">buttonStyle	^ 'width:' , navMargin greaseString , 'px;line-height:' , self componentExtent y greaseString , 'px;'</body><body package="Scriptaculous-Components">moveSizeX: anInteger 	^ self elementSizeWithMargins * scrollInc * anInteger</body><body package="Scriptaculous-Components">nextText	^ '&gt;'</body><body package="Scriptaculous-Components">prevText	^ '&lt;'</body></methods><methods><class-id>Scriptaculous.SUHorizontalCarousel</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssButton	^ 'buttonh'</body><body package="Scriptaculous-Components">cssFloat	^ 'carousel-float-h'</body><body package="Scriptaculous-Components">cssOrientation	^ 'carousel-list-h'</body><body package="Scriptaculous-Components">elementSize	^ self elementExtent x</body></methods><methods><class-id>Scriptaculous.SUHorizontalCarousel</class-id> <category>accessing-bounds</category><body package="Scriptaculous-Components">clipExtent	| xSize ySize |	xSize := elementExtent x + (2 * elementMargin).	ySize := elementExtent y.	^ Point x: numVisible * xSize y: ySize + (2 * elementMargin)</body><body package="Scriptaculous-Components">componentExtent	| clipExtent |	clipExtent := self clipExtent.	^ Point x: clipExtent x + (navMargin * 2) + 3 y: clipExtent y</body></methods><methods><class-id>Scriptaculous.SUVerticalSplitter</class-id> <category>rendering</category><body package="Scriptaculous-Components">renderItem: anItem on: html	html div style: 'width:' , anItem size; with: anItem body</body></methods><methods><class-id>Scriptaculous.SUVerticalSplitter</class-id> <category>accessing</category><body package="Scriptaculous-Components">cssClass	^ 'splitter-vertical'</body></methods><methods><class-id>Scriptaculous.SUVerticalSplitter</class-id> <category>scripts</category><body package="Scriptaculous-Components">draggable: aBeforeItem and: anAfterItem on: html 	^ (super 		draggable: aBeforeItem		and: anAfterItem		on: html)		constraintHorizontal;		onDrag: (JSStream on: '				var splitter = arguments[0].element;				offset = splitter.offsetLeft - arguments[0]._originalLeft;				arguments[0]._originalLeft = splitter.offsetLeft;				leftElement = arguments[0]._previous;				leftWidth = leftElement.offsetWidth + offset;				rightElement = arguments[0]._next;				rightWidth = rightElement.offsetWidth - offset;				if (leftWidth &gt; ' , aBeforeItem min greaseString , ' &amp;&amp; rightWidth &gt; ' , anAfterItem min greaseString , ') {					leftElement.style.width = leftWidth + "px";					rightElement.style.width = rightWidth + "px";				}');		onEnd: (html prototype request				callback: [ :value | aBeforeItem size: value ]					value: (JSStream on: 'arguments[0].element.previous().offsetWidth + ''px''');				callback: [ :value | anAfterItem size: value ]					value: (JSStream on: 'arguments[0].element.next().offsetWidth + ''px'''))</body><body package="Scriptaculous-Components">initOffsetScript	^ 'drag._originalLeft=splitter.offsetLeft;'</body></methods><methods><class-id>Seaside.WAComponent</class-id> <category>*scriptaculous-components-call/answer</category><body package="Scriptaculous-Components">lightbox: aComponent	"Display aComponent within a lightbox of the receiver. Note, that this does a full refresh displaying the lightbox. Also note, that this only works well, if you sent to the root component of your application."		^ self wait: [ :cc | 		self 			show: aComponent			onAnswer: cc			delegation: (SULightbox new				delegate: aComponent;				yourself).		WARenderNotification signal ]</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*scriptaculous-components</category><body package="Scriptaculous-Components">scriptaculousComponents	^ self new		name: 'Scriptaculous-Components';		description: 'A collection of AJAX based widgets written on top of script.aculo.us and Prototype.';		addDependency: 'Scriptaculous-Core';		addDependency: 'Seaside-Flow'; "Flow is used to implement #lightbox:"		addDependency: 'Seaside-Widgets';  "SUDatePicker subclasses WAMiniCalendar"		addDependency: 'Seaside-Component'; "WAComponent is extended"		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WAMiniCalendar</name><environment>Seaside</environment><super>Seaside.WACanvasWidget</super><private>false</private><indexed-type>none</indexed-type><inst-vars>monthIndex year date canSelectBlock selectBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Widgets-Components</category><attributes><package>Seaside-Widgets</package></attributes></class><class><name>WADecoration</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WAFileLibrary</name><environment>Seaside</environment><super>Seaside.WAAbstractFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Libraries</category><attributes><package>Seaside-Core</package></attributes></class></st-source>