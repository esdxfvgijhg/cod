<?xml version="1.0"?><st-source><!-- Name: Mootools-MochaUINotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: MochaUI is a web applications user interface library built on the Mootools JavaScript framework. The MochaUI components are rendered using the <canvas> tag.http://greghoustondesign.com/demos/mocha/DbIdentifier: bear73DbTrace: 492625DbUsername: jkottDbVersion: 3.2.0 - 1DevelopmentPrerequisites: #(#(#any 'Seaside-Core' '') #(#any 'Seaside-VisualWorks-Core' '') #(#any 'Seaside-Canvas' '') #(#any 'Mootools-Core' ''))ExplicitPrerequisites: #('Seaside-Javascript')IgnoredPrerequisites: #('Squeak')Library: trueNamespace: Smalltalk.MochaPackageName: Mootools-MochaUIParcel: #('Mootools-MochaUI')PrerequisiteDescriptions: #(#(#name 'Seaside-Core' #componentType #package) #(#name 'Seaside-VisualWorks-Core' #componentType #package) #(#name 'Seaside-Canvas' #componentType #package) #(#name 'Mootools-Core' #componentType #package))PrerequisiteParcels: #(#('Seaside-Core' '') #('Seaside-VisualWorks-Core' '') #('Seaside-Canvas' '') #('Mootools-Core' ''))PrintStringCache: (3.2.0 - 1,jkott)Version: 3.2.0 - 1Date: 3:31:31 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:31 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MochaLibrary</name><environment>Mootools</environment><super>Seaside.WAFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Mootools-MochaUI</package></attributes></class><comment><class-id>Mootools.MochaLibrary</class-id><body>This library provides the MochaUI sources, combined mocha.js, CSS for its UI and plugins if you wish to use them.</body></comment><methods><class-id>Mootools.MochaLibrary</class-id> <category>images/icons/tree/</category><body package="Mootools-MochaUI">IGif	^#[71 73 70 56 57 97 18 0 18 0 128 1 0 128 128 128 255 255 255 33 249 4 1 0 0 1 0 44 0 0 0 0 18 0 18 0 0 2 25 140 31 128 203 237 171 158 156 40 210 235 44 222 71 243 237 125 87 40 78 100 249 156 104 1 0 59]</body><body package="Mootools-MochaUI">LGif	^#[71 73 70 56 57 97 18 0 18 0 128 1 0 128 128 128 255 255 255 33 249 4 1 0 0 1 0 44 0 0 0 0 18 0 18 0 0 2 25 140 31 128 203 237 171 158 156 40 210 235 44 222 71 249 4 106 220 72 150 230 137 166 70 1 0 59]</body><body package="Mootools-MochaUI">LminusGif	^#[71 73 70 56 57 97 18 0 18 0 145 0 0 255 255 255 128 128 128 0 0 0 125 189 201 33 249 4 1 0 0 3 0 44 0 0 0 0 18 0 18 0 0 2 45 156 63 129 203 237 171 158 156 161 90 251 2 216 28 196 166 117 219 199 132 34 9 1 194 186 122 201 251 153 29 138 200 28 125 216 99 118 93 211 15 12 10 135 194 2 0 59]</body><body package="Mootools-MochaUI">LplusGif	^#[71 73 70 56 57 97 18 0 18 0 145 0 0 255 255 255 128 128 128 0 0 0 125 189 201 33 249 4 1 0 0 3 0 44 0 0 0 0 18 0 18 0 0 2 49 156 63 129 203 237 171 158 156 161 90 251 2 216 28 196 166 109 2 247 49 33 48 110 37 132 10 238 168 196 201 113 166 94 198 217 43 114 118 59 125 185 76 134 196 162 241 104 44 0 0 59]</body><body package="Mootools-MochaUI">RminusGif	^#[71 73 70 56 57 97 18 0 18 0 145 0 0 255 255 255 128 128 128 0 0 0 125 189 201 33 249 4 1 0 0 3 0 44 0 0 0 0 18 0 18 0 0 2 42 156 143 169 203 237 223 130 156 51 130 139 65 176 249 110 22 116 158 37 148 165 54 108 234 17 138 223 210 118 175 18 103 115 66 229 208 206 247 254 223 40 0 0 59]</body><body package="Mootools-MochaUI">RplusGif	^#[71 73 70 56 57 97 18 0 18 0 145 0 0 255 255 255 128 128 128 0 0 0 125 189 201 33 249 4 1 0 0 3 0 44 0 0 0 0 18 0 18 0 0 2 44 156 143 169 203 237 223 130 156 51 130 139 65 176 87 224 205 4 152 119 129 139 40 164 169 54 108 238 33 118 31 7 144 108 152 205 33 69 65 254 15 12 10 27 5 0 59]</body><body package="Mootools-MochaUI">TGif	^#[71 73 70 56 57 97 18 0 18 0 128 1 0 128 128 128 255 255 255 33 249 4 1 0 0 1 0 44 0 0 0 0 18 0 18 0 0 2 28 140 31 128 203 237 171 158 156 40 210 235 44 222 71 249 4 106 28 52 150 98 73 157 168 164 174 65 1 0 59]</body><body package="Mootools-MochaUI">TminusGif	^#[71 73 70 56 57 97 18 0 18 0 162 0 0 255 255 255 130 130 130 128 128 128 0 0 0 125 189 201 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 4 0 44 0 0 0 0 18 0 18 0 0 3 50 72 186 36 252 48 202 231 166 189 34 107 61 5 248 32 80 69 94 248 141 80 105 162 20 48 188 175 216 204 163 26 178 140 13 226 139 126 118 155 205 101 40 9 16 143 18 30 18 146 0 0 59]</body><body package="Mootools-MochaUI">TplusGif	^#[71 73 70 56 57 97 18 0 18 0 145 0 0 255 255 255 128 128 128 0 0 0 125 189 201 33 249 4 1 0 0 3 0 44 0 0 0 0 18 0 18 0 0 2 50 156 63 129 203 237 171 158 156 161 90 251 2 216 28 196 166 109 2 247 49 33 48 110 37 132 10 238 168 196 201 113 166 94 198 217 43 114 118 59 125 185 76 134 142 31 241 56 67 14 11 0 59]</body><body package="Mootools-MochaUI">closedGif	^(ByteArray fromPackedString: 'Q4%FNC%!D @R@LPX@O?KX??7#O?3#O?_^??3''JU=DO?+!O?7)_?SZ?_W!M:2P.^&gt;T-:2N]:6R/?;%O?;=??#^??''!O?WZ;6^L_??''I19FKVNFO???????0@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@A @K@@@@@@R@AH@@@U/HBZNYF&amp;^:C"-T4)NU?24K$3]5FW-^5EN!H@0HH Y_R=C!L],* ZV26L:MRX^%()( +C JH\/ IK]@+2N-M(!VIB5&amp;L&amp;YD*''[H8[F(Q2_P?:@D@LJ[6Y^D("I"@0D_A!M$C10H!VU%)^VK)*[''B8!@C,b')</body><body package="Mootools-MochaUI">docGif	^#[71 73 70 56 57 97 18 0 18 0 179 15 0 87 88 136 104 107 153 119 123 165 118 129 176 140 171 217 228 239 255 169 206 255 195 220 255 212 230 255 237 245 255 246 250 255 90 156 214 255 255 255 235 235 235 212 212 212 255 255 255 33 249 4 1 0 0 15 0 44 0 0 0 0 18 0 18 0 0 4 110 240 201 73 107 93 36 227 60 90 179 15 193 140 36 51 44 158 37 150 227 112 160 31 181 178 65 61 56 23 59 22 136 33 224 50 157 34 209 251 85 102 35 133 2 81 4 78 144 12 37 209 16 112 74 22 36 5 35 145 40 28 168 214 80 54 161 40 120 13 128 176 72 74 68 28 190 233 227 144 203 124 195 213 60 183 253 141 86 27 254 128 129 113 20 0 133 134 135 133 97 15 14 140 141 142 140 32 145 22 17 0 59]</body><body package="Mootools-MochaUI">minusGif	^#[71 73 70 56 57 97 18 0 18 0 162 0 0 255 255 255 130 130 130 128 128 128 0 0 0 125 189 201 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 4 0 44 0 0 0 0 18 0 18 0 0 3 39 72 186 220 254 48 202 25 133 189 183 130 205 129 208 221 246 65 66 40 106 67 154 122 96 56 62 165 249 58 177 91 97 24 165 239 124 239 71 9 0 59]</body><body package="Mootools-MochaUI">openGif	^(ByteArray fromPackedString: 'Q4%FNC%!D @R@MT%@O?3#L:"H_?''!O7U[&gt;&gt;:P/C$^_?3''L&gt;"I_??)^KAS?_0"Y5:F_?W!O/9%.^&gt;T,ZZF]*?Z;&gt;YJM^8O??GV,:&lt;V=:2P/?_^&lt;&amp; HO?;=&lt;^\F&gt;J3P/?#^:U2CO?+!O?7%O?WZ919FLBVFO??''LZZFO???????0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@BT@K@@@@@@R@AH@@@Y&lt;0II0RB0Z#&lt;!!XA%HD N$JF''$KH5H(*1(N.)6"2LCXC2VQ$\K8*"S&lt;K+]''NFHLXIDLVZR APW# X#B%*CH!LM_UXZE0 ^#X:MC!RHH0\RH!6X&amp;Q4BAH!VC0T"F:N$F1XU''"LYH!&gt;-+*8Q''"T!-KV6HRAGHK.&lt;/UV?0LEIPP@;')</body><body package="Mootools-MochaUI">plusGif	^#[71 73 70 56 57 97 18 0 18 0 145 0 0 255 255 255 128 128 128 0 0 0 125 189 201 33 249 4 1 0 0 3 0 44 0 0 0 0 18 0 18 0 0 2 41 156 143 169 203 237 223 130 156 51 130 139 65 176 87 224 205 4 152 119 129 139 40 164 169 198 1 36 27 142 95 155 153 10 133 67 250 206 247 126 83 0 0 59]</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>images/icons/</category><body package="Mootools-MochaUI">cogGif	^(ByteArray fromPackedString: 'Q4%FNC%!D@@P@NY?@M3]7)^Y&amp;]KS5L+J28:O#6-+Z3$9NY.\''UEQTTIBP%)ZV$]GQ4!HRN?0&lt;M? 8T9NS,/K3NC!8-OU5.++:&gt;G"8&gt;C"85IRT-SV5&gt;S%9,_H2]?!8-; 8T1LSOW6=.7.;._(:C\7M&gt;['':N3-;_K3&lt;&gt;W&amp;9=7^7.''*:$=OS&gt;#+;I&amp;Z&amp;+?@0M3^7-?!8^G!8-SU5.#):/???:J"(;^7.M/\7\KC1L?P4^[''96!(ZNS$9K:&gt;/-CQ4+B2,''I2\-''Z6-WV6NO$9I.[&amp;&gt;/,;T)JR.;/;?+;&gt;&lt;OD1]_X6G=?_&lt;WF2NO#861-[][W5;R5-/O4=E-\WE5]W]? 8I6]''__9&gt;[B0,D5MS*2,+J.,+HBA \''I2-7_8L+K2&lt;;O3&lt;SE1/S5=_S5=/#9&gt;.3-;&amp;M#X&gt;G"8.G$9W!8^G-;^::.+.3.;(RE!^7.;=KR44YFQ%QTUM_Y6.[(:^K#9MWV5*Z&amp;)-+[6=[W6[N4-NK$9^W%9,[H2ZF!()*Z&amp;+6&gt;/4%IRX2L#H6M#^/,;D1LSBG9A@D@@G&lt;@K@@@@@@P@A@@@@_T G&gt;B 0=9PF.C"XLVC3])SPTOE()?OC,A\RD$H$QUA3$E 10GX18^D1P_I"M]W5FIGAT+C!@4V2TMCQ5;"V [\3HNZ!P]J"&lt;#U8I,_DX@@7X)A YSY1@$OW4KB2!-@%03UHINL4!"KFA+BS&lt;&gt;N$UAYXHDHT0RDU@IC@)8[3TMY#E1+G3P$"V@@ ZBDG#A(F^B@A\-:E3PHBSQDR%C9FB9$2FCE 152BQR@$NDG1,RK%SXDLEM&amp;DPLDA @,TRC@3  CI1@RN$O@Q1I''/QT-DBA  VT@ D@N0@a')</body><body package="Mootools-MochaUI">pageGif	^(ByteArray fromPackedString: 'Q4%FNC%!D@@P@O^+@MO%?^73&gt;MG$?LK\&gt;EVP2#Y+/O+;?\7#?N32=&lt;__&gt;$&gt;2=&lt;7#&gt;=C$&gt;=_(?#Y*/M[''?-3*=%J3=&gt;/2&gt;EFM2O#;?SU*.=O%?L3!&gt;=#(?/G5&gt;\''!&gt;&lt;_ &gt;-W''?VR&gt;?N+2&gt;&amp;V&gt;&gt;&gt;/3&gt;/#;?=K&amp;?I[V?9SU?9WV?4&gt;L2HR(5T6H2D"D2L7&amp;?OK7&gt;9#W?5.T3D"D16B&gt;?L/!&gt;;WT&lt;5N4&gt;EN2&gt;F.X7N#1&gt;JCX?4A10DZ@1,G[&gt;E*R2-O&amp;?MS&amp;?S140^33&gt;_7&gt;?++V=S],/UVQ2,;#&gt;8R68,# &gt;,?$?FNK2-?)=L# &gt;5VO2[''N:G608^?4&gt;%R5=6"??S-./\S]&gt;^[0=4.F2L/"&gt;45:0?O7?N74&gt;%F2=&gt;?4&gt;\;"?L?#?D2G2M[(?$E:09/V?45&lt;1[3Y=,3#&gt;5VP2;/V=\+!&gt;&amp;&amp;V7OS7&gt;&lt;# &gt;V;B?_K6&gt;/O7&gt;5JM2EV4&gt;J+@8-O''?[/X=&amp;&amp;]3?C4&gt;]_&amp;&lt;);W?=W&amp;?VN=&gt;&gt;32&gt;O_:?]W%?.74&gt;IOT?4"@06ZM3G628%Z4=6J=?KSX=,W_&gt;S]+/GR"4,7"?EBL2L[_&gt;/S8?G2*54I&lt;0?W9?KOR&lt;]?+=[#V=L'' &gt;&gt;;4&gt;J;B86F&lt;&gt;6^=?IB17TV@13U).=;*=+7Z=-;+=.74&gt;T.F1&lt;O]&gt;TA70,#!&gt;=?,=&lt;''"&gt;&gt;''/=\3"?M_''?,''%&gt;-S&amp;?D2F1&amp;J&lt;?OC4&gt;NO-==[''?_???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@J,@K@@@@@@P@A@@@@#?@E\-R]RB DD!X9SD(VQ %\MU!@I@4!N 8!4D\?3PZN!P!9(MF$@%DYSCTX!@SL10YIO!0I@EUM@L@DIAAR$"I11N2KBE YDCYZJDPXI SR &gt;N.W,JOUF0HH"@&lt;#DXHSJ%DMCVTZ)8,AC1HTD@3CAZ\KE(P%MFC@4^@A@0HTM''@Y\&amp;^HP!X&lt;.CUQ-A\A@SHICG%H87BS! U9U]](V *E!QRVGK&amp;+$@PC@  TAV$P=&lt;(SG"4L\T-+&lt;\RI#Q(PHVAP(VMSC(ZITZV3P&gt;\I"Q@$R^3:\B^J0T:L''$394:@CH#*PW)2 L\ !F0*]L%2A@@@GB 1UDO:(8]MO''Q(G/C!1TBZ! B\*QRJ,B@ @;')</body><body package="Mootools-MochaUI">pagegreenGif	^(ByteArray fromPackedString: 'Q4%FNC%!D@@P@O^S@MO%?^73&gt;LK\&gt;MG$?O+;?SY+/EVP2,7#&gt;=_(?./2&gt;M3*=-[''?,__&gt;-#(?-C$&gt;5FM2O#;?SU*.&lt;''!&gt;&lt;_ &gt;,7#?N32=&gt;+2&gt;./3&gt;,3!&gt;=O%?OG5&gt;]W''?SY*/L/"&gt;=K&amp;?FNK2.74&gt;T&gt;L2L/!&gt;&lt;# &gt;_K6&gt;/O7?DA70$6H2EJM2K3Y=#-./W608_C4&gt;T2G2DZ@1#U).4.F2OC4&gt;MS&amp;?]S&amp;?N33&gt;^32&gt;L#!&gt;=_&amp;&lt;''628/S8?M?+=\7&amp;?D2F1#140^''/=S],/];*=,''"&gt;5VO2^?4&gt;T"@0=[(?.74&gt;,G[&gt;N#1&gt;N?4&gt;,?#?L[_&gt;+7Z=-?,=;/V=\3#&gt;9B17TI&lt;04"D1&lt;3"?DV@15.T3FZM3EVP245:08R(5]O&amp;?F.X7KOR&lt;\?$?L;"?K/X=+WT&lt;4A10L# &gt;?S7&gt;4E:0?W9?M?)=HR68/#;?&lt;''%&gt;/K7&gt;&lt;W_&gt;[SX=,S]&gt;^O-=&gt;;4&gt;F&amp;]3&lt;;#&gt;7R"4-W&amp;?T.F16&amp;V7MO''?_O7&gt;:;B8&lt;7"?MW%?,# &gt;%BL2C]+/L+!&gt;''2*5&lt;'' &gt;=;+=%*R2+''N:N74&gt;O7&gt;?$5&lt;1^[0=;#V=K+V=T"D2EVQ2,O]&gt;__:?Z+@8-_''?-[''?X#@X&amp;2%R????0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@IL@K@@@@@@P@A@@@@#5@B\M&gt;%OE LEEU8S@ TI $,MI\ J&lt;HQR X(4JM7A,Z^!PDH$ID(JHVWLDDQ(6J&gt;)0QJFAP)0CGTXHR@Q!Q9(3VQ0&gt;4JCDPQ\J_-*$LEO!# &lt;"N%%(&amp;VE''0HD=@)2@8QJC!4L&gt;P19A6"CC@0XF@)!&lt;R]KBXP PCQ( V@A @HXI#@PX ^G0AH4"BBA-A^C BXL%E!P9)IM  U9H\=+&amp;DREACQVGT)C(@P@ P8XAW*X@,-FH#DLW!2RIG$6:S@&gt;GT]1H",R:MV-IX788MJFC-F5IDO(8MIR RR@ B!Q\.FB!QH9BVA0:,!J&amp; GLNGBID^JG"@99I@PD@N0@a')</body><body package="Mootools-MochaUI">pageredGif	^(ByteArray fromPackedString: 'Q4%FNC%!D@@P@O^+@MO%?^73&gt;MG$?LK\&gt;CY+/EVP2/+;?_E0\-3*=.32=&lt;7#?CU*.=_(?,7#&gt;=C$&gt;=[''?,__&gt;#Y*/N-]W%FM2O#;?\3!&gt;=#(?.1[WN/2&gt;OE.[&lt;''!&gt;=W''?\_ &gt;/G5&gt;]O%?N+2&gt;./3&gt;$.F14"D16&amp;V7CU).8R68.74&gt;+''N:MO''?T&gt;L2N''/=YB17]W%?%*R2%VP2?M8^\7&amp;?O:^''4A10GR"4%VQ2/C4&gt;_C4&gt;L?$?D"@07628-W&amp;?_O7?EJM2OI3\.32&gt;J;B8&lt;G[&gt;N#1&gt;L# &gt;?I-[=?,==O&amp;?L''%&gt;,# &gt;$2G2O#;?&lt;# &gt;S],/^5!XT5&lt;1\7"?M_&amp;&lt;.O-=&gt;?4&gt;\W_&gt;V&amp;]3=?)=LS]&gt;^1^W&gt;1!X.1_W+/V=_2Y''O6U%;SX=%BL2N74&gt;K+V=];*=,;#&gt;?S8?L;"?OM3\?2V&amp;T5:03140T.F2MK&amp;?D"D2OO7&gt;?K6&gt;/2W&amp;4A70/6\''KWT&lt;4Z@1+#V=LO]&gt;W608]S&amp;?^33&gt;\#!&gt;=S&amp;?OI-[UVO2_7&gt;?,''"&gt;&gt;1 X+3Y=#-./XR(5_S7&gt;=?+=_:!(+7Z=/6Z''\3#&gt;72*54E:0=;+=$6H2OA-[.-\WN[0=?E+[*+@8&amp;NK2.?4&gt;.74&gt;\/!&gt;;OR&lt;]_''?/K7&gt;&lt;?#?L3"?FZM3E.T3DI&lt;0?_:?_E,[$2F1&amp;.X7C]+/DV@1&lt;[_&gt;.;4&gt;L/"&gt;;/X=/W9?M[(?,'' &gt;&lt;+!&gt;-[''?_???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@J,@K@@@@@@P@A@@@@#?@E^]NJR) DDZK/QLVVE %\MUL0JL&lt;!J ((&lt;DS7I&lt;Z."0AQ,NF/ H$PIDS!H.]DY09MEAPY F)IPL&gt;DHA!)DR A1N:GCI0P4E*Z+8(YI #P(\N&amp;,T0XMBPHL#@;K@(VSC$&lt;L.TR*)6%@''SPTH@0"U"(SDXP)IE"00^@A@P@TN\0ZXPNMP$Y5SCEQ-A^C@D@QQG=P8CHG! U9UN-(:&amp;ZSAT""GH(J0@@C@ 0\AX3B!.,LI$\L8#Y!\:VLE"0PI#B9\LGWF8RX(K0[E^EMHR9,2V08DV.KP#R@2OP9$2CA$TR]G^R"@\- D@9EDXA@ @@G"0081^&lt;08_IQIA(G/DRH,BU!@8 &gt;$G:,B@ @;')</body><body package="Mootools-MochaUI">sheetGif	^(ByteArray fromPackedString: 'Q4%FNC%!D@@P@MT:@J2,+O7=?/+:&gt;/W7&gt;O+&lt;?_K3=]_#&lt;OG2=O''9&gt;_;&gt;?/S5=/C1&lt;=''$&lt;__8&gt;//&lt;?_#:?O#7=?#8&gt;O/=?/[8&gt;_W6=?S6==''$&lt;.;/&lt;__9&gt;?7=?__8&gt;_/;&gt;&gt;7,;M/&amp;=O#3=O'':?O'';?^?1&lt;.7/&lt;M##&lt;O#9&gt;/[7&gt;_[6=/''8&gt;O+9&gt;_'':&gt;;N3,=_"&lt;OO5=&gt;?0&lt;/K4=]##&lt;_C2=M+%&lt;-/''=M''%&lt;/3=?-+&amp;&lt;=#$&lt;_/H2O???;F1,_???0@@@@@@@@@@@@@@@@@@@BG9A@D@@C(@K@@@@@@P@A@@@@ZWPE5.RB0V]TJ\\,%T9)@9GL^C^S1@!B1F&lt;$0B[+U0Q4ZV4[)Q5J6$4YARC \- LY=X?!0&amp;P;E''V8,EQTCD04MG6]=W1X3L7%!"THIBC\0APTJE@ND$S$YW3Z!CH2N''Q,PM2DKB0^X&amp;W1B@%&lt;#(SXL#SN0NP"(H!\WKZ0GK)4QJ#\+A,(/-U1=I!DH@ H[FP$IS%AF64L:PP@;')</body><body package="Mootools-MochaUI">windowsGif	^(ByteArray fromPackedString: 'Q4%FNC%!D@@P@MT+@M? 7NO$8^C!7-7^6-3\6W%:]&gt;K#8CYKZ^W%8=?_7NC!7]#Z5-#Y5];_7M+Z5=7_6&gt;K"7=/\6]7^6]7]6^O$8NG"7.C"792^&amp;^C 7^W%8-7^6&gt;[&amp;9NO#8^''(9.#(9]3]6^S$8-/[6NW&amp;8=+[5&gt;G"7=;_63Q%)GJ_32AJ!8"J!_???41LS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@B,@K@@@@@@P@A@@@@ZJ0@M*RB2"C*,$:,Q,N$&gt;(9F))*%*-TF%J5_FHL(F00ZIJCP?[CPKDH[$E CHS-TTDCAV7(#D(&amp;:A5]7$$^74)YB%[EAA0IX8SAFU1"R*K#X&gt;QJXY[@! @F(8_HP9%&amp;2(IC1HQH:0KCFVYV2*3-KT)&amp;PVI.+.IE:P)V*^)*:6/0D&amp;2-\+GJ;&amp;&lt;/@UA@C,b')</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>images/</category><body package="Mootools-MochaUI">arrowrightGif	^#[71 73 70 56 57 97 9 0 7 0 128 1 0 25 25 25 255 255 255 33 249 4 1 0 0 1 0 44 0 0 0 0 9 0 7 0 0 2 13 68 142 7 150 186 29 214 75 18 206 198 96 1 0 59]</body><body package="Mootools-MochaUI">bgdropdownGif	^#[71 73 70 56 57 97 20 0 10 0 128 0 0 235 235 235 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 20 0 10 0 0 2 12 132 143 169 203 237 15 163 156 180 218 235 10 0 59]</body><body package="Mootools-MochaUI">bghandlehorizontalGif	^#[71 73 70 56 57 97 10 0 4 0 145 0 0 228 228 228 241 241 241 235 235 235 248 248 248 33 249 4 0 0 0 0 0 44 0 0 0 0 10 0 4 0 0 2 10 156 143 161 203 226 15 129 156 180 0 0 59]</body><body package="Mootools-MochaUI">bgheaderGif	^(ByteArray fromPackedString: 'Q4%FNC%!B @-@LP@@A4]GSP4MCH2L# 8NC(:N",+J2$)JQ0\GBP$IBH"H!8^G#,;N2&lt;/K24-KSD1LR\''I3X6M"X&amp;I"@ HBL#H3@0LB(*J#\7M2D!HR8.K" (JCT5MRT%IQ&lt;_G20,KC$9NSL3L2G9A@@@@@@@K@@@@@@J@B4@@@VL8BJNIFF^*J^.[M,N\B1[]F7_M:S//N[?0F@0PB0ZO&lt;"$\+$TNI=P!7QJ)U"/6F2V0^5:L^B0^C1.&amp;L?(#''+M[+\K&lt;K"&lt;P*?[;7^C_,?O&gt;O&gt;@ XDO!HVFDX"I"!.L#X:O#0"R$9PS%)^X&amp;Y$I''I6^E:B!(*N#D*Z''*A2**:2-+P*0,[H@-KV6A;"9."D@N0@a')</body><body package="Mootools-MochaUI">bgpanelheaderGif	^(ByteArray fromPackedString: 'Q4%FNC%!B @#@LP@@N_''9&gt;?/;&gt;[&amp;9/O3&lt;?+:&gt;./+:?#8&gt;OG1&lt;^;.;.#(:OW5=_K2&lt;.3,;O''9&gt;^''):_[6=/C0&lt;N7-;^+*:/_7=?S4=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@@@@@@@K@@@@@@J@BL@@@U"HBFNYFN^ZI(Z[N-N\B3O&lt;6O_^I8+_N??O8)0RB0VA&lt;"$\,E,N)?O 7QJ+UX!6J16.058/6BD^D0.%2O(-G*=Y+#_&lt;G"&lt;PJ?[I_"&lt;_+=7&gt;O&gt;@ XDI!HVF!8\@"(.L@(:O$BD@N0@a')</body><body package="Mootools-MochaUI">collapseexpandGif	^(ByteArray fromPackedString: 'Q4%FNC%!C0@_@KLH@IKH9N''-&lt;NC*;'':=7*?S9([A7????6666?G1&lt;P@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@@ @K@@@@@@O@A&lt;@@@Q7DL%IJ2W#:DE,JE*(EPDE"&amp;H1DV#[HU$+C%I(7K Q5!*PF8@]P.R;AXV1G''@&amp;X\%BK&lt;QI)))&lt;*JTJI,R1U@S^,G#,7V:"5&amp;$*J5F#* "''Q(]:IP&lt;7EF4(0*E8M''9BJC!GF!I7Q$11_XXZTV8)EE\-IAY&amp;A55$W!D@N0@a')</body><body package="Mootools-MochaUI">docktabsGif	^(ByteArray fromPackedString: 'Q4%FNC%!% @0@JHF@FM#X6A XEQTUHRD!H2L#FY&amp;Y$1LS@@@@BG9A@D@@@X@K@@@@@BV@C@@@@N4Z@KU?#CJRZ.=NN,= UA\JH9$ZT;K*Z9,F3I.KL=4[]=8+.=&lt;;??@(GAHKA*O2JQ22V0:''=B(]D*-V*?X+G[K;W*?8O@II+Y:2-]OB!75F@2A@VEN+=//&gt;K1&gt;3&gt;?;?8BA^PLA\HJG"H&amp;J"819\X6P$YJS!7JT%9"Y&amp;).\''Y:_(JF"(:R%)*^(*Z*++J6.+;B1,+N4-[Z7.K&amp;:.;2=/+?@0\KC1LWF186V2K2D2;6E#&lt;:7!@XI@C,b')</body><body package="Mootools-MochaUI">handleiconGif	^#[71 73 70 56 57 97 2 0 8 0 128 1 0 51 51 51 241 241 241 33 249 4 1 0 0 1 0 44 0 0 0 0 2 0 8 0 0 2 5 132 17 113 168 87 0 59]</body><body package="Mootools-MochaUI">handleiconhorizontalGif	^#[71 73 70 56 57 97 8 0 2 0 128 1 0 100 100 100 255 255 255 33 249 4 1 0 0 1 0 44 0 0 0 0 8 0 2 0 0 2 5 4 98 104 151 86 0 59]</body><body package="Mootools-MochaUI">knobGif	^#[71 73 70 56 57 97 19 0 9 0 196 17 0 255 255 255 126 126 128 104 104 105 99 99 100 138 139 142 151 152 155 141 142 144 128 129 131 173 174 176 146 148 151 141 143 146 160 162 165 155 157 160 164 167 170 143 145 147 148 151 153 89 89 89 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 17 0 44 0 0 0 0 19 0 9 0 0 5 67 96 4 141 100 105 142 162 224 60 108 235 182 142 48 26 77 109 223 184 49 46 124 191 0 64 31 143 49 98 24 143 12 32 0 121 28 21 158 208 130 50 10 29 29 18 216 44 98 155 205 30 70 131 128 98 76 46 143 9 129 1 68 116 106 147 34 33 0 59]</body><body package="Mootools-MochaUI">logo2Gif	^(ByteArray fromPackedString: 'Q4%FNC%!% @-@LP@@J''N8L_Y88/B7''V97M;"9K#S8Y+H7=[_9L?\872&lt;7LCV8)OE7*KK78R?7[GP8V666&gt;W%9P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@@@@@@@K@@@@@BV@B4@@@W?HBRNYF&amp;^ZJ*.[N.&gt;\B3O]F7_^J;/_N??0JA0RB0Z#&lt;"$\,%,N)?P*GQJ_SHD@ @V@RT8@H^*T_@(%0OO0&lt;B,DALA9/OSDD&gt;8!?@88T&amp;N78U9Y%BAC0-?PXPOTP-%CW.GO8%S#9BQ\X*UOPE_ZBPD@P@@''R$AB*DAXR2_W0TA%IHP'':\*, @J*W]=YPHPAP%1@64P@F-&amp;BZL#A0[E\P4E)K+M39KD0LH$@]F;WBLB@5"?IG@M@ 4O''VQXZ; 74PI4%6TH&lt;I\C7BHE3E''4C0ZTH S81SL0;IJ9^@&gt;.PVB@,L0@WM+DWTI7ZX_@! &gt;X1^NEK88!DP8&lt;%(#VHET^A;40?5:2L:JL UCZO$JHM$A"''D:L3MST$V @&amp; @Z230CV!FB&amp;##7HO02&lt;40D(PG?:O2L98B@ *C7E#PUH[A[GH9NI8X5@1YGH @#AJHU0_C&amp;0#(%6)Y!^^@RPQI5QPR0N2HQ,!HDK''E3Y=MLI4I%[2R:U4B,B@U"%&gt;8*,Q!BRK\%N%46OFH/Y!RR3;G=V%#^6L$&lt;"&gt;)UC\D394.IH\]A&amp;]LLN&lt;*W?#$FWDC[X]H#Y@,:?RB1CU"+?WR^"NBR3NQ&amp;4DYL U3D;% EZ#-F#D45==SJ(Y_)_-N52&lt;2W)@.&amp;3!+B;&amp;)%FBBH=),,&gt;^DE;XOG79*5&gt;WM5@[]\GN+E(QA.8U&amp;G&amp;_&lt;.=(!@G7E%H_]]C-W=]9&lt;\,IV0&amp;Q3Z=\M^ .:95U!4W''FVG6+DXWI"\S-T:I=X6+GTU68)@_MOZR(*2I%6(10$18(;\[V] FZ1-&amp;FN0,$1H''&lt;PZG\W@TF-YTH";H UCT*1CH%Y I!M"HM@+;3''VCQ[AZXSK$-F=&lt; A@CB0(&amp; @"RUWQ* HID2ZFSD@PF ?O+VC[3M&gt;9!]@O/)$%H&lt;O[MUQO@4T&lt;&lt;2\\O[''5''&lt;MC_@R@W2Z R"\W^$@ZH*#IEH&amp;)GT$EU2&amp;Y.31*ZP$P''CQ@O''0!TAP1Y%)8''P9EACJ++"@,",X''_4*R %,B+CTN0^ZTH@A_RP  G38BH,K&amp;;&gt;N((@2M&lt;T1,L\&lt;VF"UC@O&amp;IKC@X[&gt;&amp;(../&amp;ZR+;++,-./..?CFJ&gt;&gt;&lt;=MY+;;789*////3"D@H@N0@a')</body><body package="Mootools-MochaUI">logoGif	^(ByteArray fromPackedString: 'Q4%FNC%!* @-@NX@@B (JB(*J%9.]&amp;&gt;#/VZP)RP$IFVJ''BD!HWV86%)%Z&amp;:\-A&lt;_G6M.\6F@$BX&amp;I&amp;2 .''#A9&amp;&amp;R)7B$/&amp;*S*A8^G''B*1&amp;2[,6*X,F*T*VU:!U9)[&amp;&gt;(1UU_YF"L''&amp;&amp;N(E%^XU92_TQDQC&lt;?O6M="''Z:7E1!YF:W+E-[V6=/[51\WGE1\VI"X&amp;A XE9^W%=_W7M3\5QTUEUUUUIRT%)ZV%YVU%EQTUAPTE%YVU!XVE-/^#\7M3T5MR0,KB8.K#L3L3@0LGJ04C 8NB4-KSP4MB&lt;/K3H2L#D1LWR34''Z967N14W+H;3X6M%IWV&amp;^F%&amp;2U*&amp;M7 ''N14F"Q)''R24%93_%=4_''/H&lt;G/I&lt;F^Q)&amp;A?#6A5_7J14E52_EQYWFM8 %-0^7J+2GBY+%!''[6E6 GJ037_@9VNG&amp;''N24V6V*6Y&gt;"511_F2K&amp;511^7V446Q$YFA:!6I6 V5-[V)*Z&amp;-+Z6!(ZFU%YVM#X3(:N#,;N4=OS3$9NUMST49NS$5MSW7P&gt;$1LSFY&amp;Y"G9A@@@@@@@K@@@@@B*@B4@@@_? G^B 8RE!(^H"X*K#H6N#9BQ$WZT%YZW&amp;I&amp;Z&amp;92]'')&gt; (ZJ#(7&amp;&amp;):")**.,+Z:/,KF2,;R5-*];[R&gt;;/K6&gt;/&lt;CA0,OD1\[G2L''E[W.2PTD"_2+S5MWV5=#Y6-/\7];_8NG!_2KO9._&amp;N"I2JN7.;?C1&lt;/O4=_[7&gt;O'':&gt;?0(\"H:@ (\FK@N''HLHD2)\2KB!08\PH4*\RKF"QXQ5BF+4H:^#18&lt; P8(\R[J$2YL(T:)\2QJ$''2T0X&lt;)LDZ^&amp;3Y,8\&gt;+\2[N''39=@ 0(]R!Q''"!5H$2*]0;R)4:]P(4*]R+V*5Z-X,6+]F%V)515?0((]R;Z,6[M(4:)]2;Z-6;]0?&lt;4N&amp;T.7K)6;^OO*7\.7+=&gt;? @LKG$28,FF&gt;O!H+W%2'',^OG$BMK''$29,.WK&amp;CM+7,1Y&lt;.KOO%ZHG$6:-N''S*EN+W,5ZMA(0,MV4''''6Z@Q#Y-GN[K,J;-6&lt;V0HLKG4:&lt;.OG#2IL+A6:"#7L62:LS?6OE.P'')6H$[6\:=.8//8LNKG4&gt;&gt;/O''3:MM?[?9\/_/1FY37X_N&gt;?/ _&gt;OO+[&lt;F?/???@@X(8H@DE&amp;  _&gt;35H\FAC@KH G0JMB ! O)U&gt;DLJFFZ(8XX\].#!!2BFJBJFY&lt;!71( (])#AFQ:$:FJGQLP(880''5F###S#&amp;*NNNOO[(88&lt;5M"F_D4@VZ^RQROZ 9O&gt;RSL; 9IMPQ"''%%EP:XVTSL30!0QDRONE$D5-&gt;8RVTF''#01QEGJCA&amp;%FV^^XPSZFP9)@YN(J%@BUFB"ZXSF#3YQA]]MME''%''&gt;" ^TS!S)A9ZJLL,+$(37\HN&amp;$%EY*:ZVX2"_E@OH950R''''SX1*P^ZU-^GEBUP*$B''&lt;''W0!''1_&amp;N*\EQ)HJ @D+E(! JQR2O^F)A!(^,LH0&amp;I*;KGFB*G,,,3"8N234DX+;[ST,()DE]Y"N&gt;,GN@S+''A 8_HA+G2P&lt;B6(_E.BP@AI=BBBF-Y4N8J0EUWP0P W2H^E,+=&lt;::26:NK3+''ASTE&amp;200S0$+OCBMCS,&lt;LLPQ2311I5NPDO?@)5VPLLG6/ZQA\[NH^G0AOH5PTLV&gt;S*L&lt;\&amp;]B$@C2\:Y4[@@K#_L+''LM&amp;2E_E 7C7H_EJL\&lt;&lt;]ADD;704S3D(OSRSC_-=MMP]9*@4#_7PXWRR\!GQP_2C[@4,\8%DPN&gt;3$7@=MUT9J,42G6H;[PE&lt;&amp;F--]H&gt;&amp;9566EC''+[_^@_S-==&lt;0AB;88HPW[/#!''P*^-WL_AK98G5MDHE&lt;D $&lt;!W1T0]C1E8YX;M8C &lt;"T1^@HFUM6G8?I-C(O$3%G^^].G12:;;G?WG(@^.N^.&gt;&gt;:&lt;=&gt;9;);%CHU?0&lt;(D _N.9 0A&lt;)6;0+#32.L,GA^9S7O0@6W7 _''0_HNCN^!&lt;Q:OE&lt;?1?S&gt;6;&gt;&gt;^[[?#_:;K\OON9ZC@&gt;?_E-DHU&lt;T.V&lt;!G1%:]G(A;0Z8W&gt;;$(0T=:L&lt;93[N_\&gt;[''''B7 S(E=0M&lt;A&gt;5C@=%''P_@CH(@X7JHLN^/BCH@2!BD_XJP&lt;BPS8&amp;%D&lt;ZF"@_HG#PC_KY @06,K&lt;PW*FEG,P!C_.@ @;^4C$]OJE34-CAB&lt;#''B#IH@09G2LP&amp;L''FCT@Q@CZYH1R)Z&lt;X)X3FJ''*B#DO(Q!"%5\@1^T8A0DTMFH3&amp;%@CU (G0MP$P-\&gt;FD_ DCEE-Y@"D+ 0!7%08DZ;K@OF:#AFH=X 3WXLX.HSBP"(;!AF3#2$YBL)BP''R\%NOQHA&lt;/FBH;/X@A.0,_&lt;O''VPBF^_82@]4: DD.@@Y/DB@E#92_3X0YQ%%:Q0B^NFS_R@C*19 @2&gt;8$)K@CBX0FZ%AOA#3&amp;L!L)#JW2\1NG[MSNSC&amp;FNQC@FM"XYPHFNTE&amp;HCLU+J*C7#0Y!?FXD0NNILC(7SNA-J)AC1 T#9JDB\9\2@_\#K3''/"&lt;)0O62\=&gt;9/N_@L6APGO@SS0L%JCFCLM@NWALI&amp;BA@J ,@4NU2XFGD(@@D,TCA0XZA&amp;L28Z@^/R A(,&amp;A"6J!(AX-@1L&gt;J-BN[+R%@H4)O -@49+Z]@&lt;83Z%N]&lt;+S''/+4)4@M*%BGR-R"F/V(O[V)T .@5JX:=Z%P#Z)T!;)T&amp;?K!*%"-3Z)V-&lt;+U+''+5*6@M*5#GR-Z2&amp;)V+UZ7)V]_J5+Z:=Z50EZ,P4%*@.M+5+''#MZ52E\HB&gt;&gt;-V/_ ",X@]K6LHZ=+BHSZ1"E&lt;/X1#+6,Y@5+@;&gt;R-''HV/Z2&amp;L6,Y#_K6AAP=*&gt;\CZ5(Q4/Z4@[ ,74-+V)W2=+V&gt;"DDB8"-[FO+6-+Z=+ZO/\M,YX/[7/+6-7:800D(PE3"@/^82E5-B@APW@($=;''P9V0H!)CAP@@@N0@a')</body><body package="Mootools-MochaUI">logoblankGif	^(ByteArray fromPackedString: 'Q4%FNC%!* @-@NX@@F-+Z6E!XUIRT%UUUUYVU&amp;M#X5QTUE!XVE9^W&amp;]''Y5%YVU]WU6%)ZV5-[V=/[7E1\WM3\3\7M2 (JB0,KC@0LCT5MR8.K"(*J"T%ISL3L2D!HRL#H1&lt;_G3 8NB4-KR$)JSP4MB,+J3D1LSX6M"X&amp;I#H2L"\''I2P$IB&lt;/K2H"H"@ HA8^G!4]GVI"X$QDQC&lt;?O4MCP38&gt;O$)JR%MST6A XEAPTE5]WU)ZV&amp;Q$YE1\WC(:N#,;N3$9NUEQTT=OS49NS$5MST1LSFY&amp;Y @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@@@@@@@K@@@@@B*@B4@@@_? C.B 8RE!(^H"X*K#H6N#9BQ$S*T%YZW&amp;I&amp;Z&amp;92]'')&gt; (ZJ#(32&amp;):")**.,+Z:/,KF2,;R5-*\?NAB;/K6&gt;/&lt;CA0,OD1\[G2L''ENC&gt;2GQ4/P ?S5MWV5=#Y6-/\7];_8NG!P"?O9._&amp;DSD@C.7.;?C1&lt;/O4=_[7&gt;O'':&gt;?0N@CDQ@ (\FKAE 8LHD2)\2KB!08\PH4*\RKF"QXP-BF*T@ZB#18&lt; P8(\R[J$2YL(T:)\2QJ$#AD0X&lt;+L0ZB&amp;3Y,8\&gt;+\2[N''39=@ 0(]R!Q''# )H$2)M0KR)4:]P(4*]R+V*5Z-X,6+]F%V)50)B0((]R;Z,6[M(4:)]2;Z-6;]0?&lt;6B&amp;D.7K(:;^OO*7\.7+=&gt;? @LKG$28,FF&gt;FQH+W%2 ,^OG$BMK''$29,.WK&amp;CM+7,1Y&lt;.KOFPJHG$6:-N''S*EN+W,6:-^/W,FN_K$F;-&amp;4Z.GO+7,6;-&gt;?_0HLKG4:&lt;.OG#/TT(W&lt;8\ _O''4JMK''4:=./W+6KM+7&lt;:=&gt;7PJ8LNK-4F&gt;/O''3:MN+W&lt;&gt;&gt;/_/7&lt;NOK''9=^/G4JN_K+7&lt;&gt;?/???@@X(8H@DE&amp;#  P#:!&lt;JBCCY808LPQ"#!!AQVZNFEFFZ(8XX\]. !!QZDJNJHB)Q(8($()*#"""26:NJKLLX(8804*##"#QX\(NNNOO[(88=@A"''$$DPVZ^RQRB[9(?&lt;GSC[)9@IPQ"''%%EQVZ^VUVFZ)9YY\].''%%5UNHNZXYAI 9)%()*''&amp;&amp;&amp;26:^Z[\LX)99145+$&amp;&amp;W!NLLB^_O[)99&gt;@A"+((HPVZ."!"BZ*JJ@!MN+((0YDJ.&amp;$%EY*:ZVXY*+)))16:.&amp;''(E):0Z"$%#+C*Z"&amp;*.**+K[*:*.01"+++KSVZ".+)^Y: PB&lt;=.+++&lt;@FJ&gt;201AY+;KGHI*/,,,E&gt;8N234OX ;[STU&amp;/--]!&amp;*&gt;667G[+;[_ !''.-ANRVZ::8:JZ+;++,--.-._AJTLN&lt;=MY+;;789*////36:&gt;&gt;?@@\,LK8&amp;EF300S8$+OCBCC_,&lt;LLPQ2311AQW[OG*1Q ;SLKFGG^\&lt;\\ !2322BQS#LGIJJ_&lt;0&lt;(,-&gt;3223CGKOOLMM],&lt;&lt;489:033B''7#LGNP@\-=MADE673BT ''+SPPSC_-=MMPQ2755EQW[_WUVF^-=]YQ[&gt;C556A3K_[XYI]-=-%W^0C66&amp;"7;_[[\JO-PP)45557DG#''+__^_O_-==&gt;@A2;88HPW[/#!_T^ 0^JLL8;889AGK/''$%@?.P.NXU:;99)17+''$HJ(P.^."^%6;::Z G8PHG+K_N^.*012:;8S.87/+,.N^.^1@;ZKCB;;?/K/30),O0@P/H,4C&lt;&lt;,1WC LH9@XB@C,b')</body><body package="Mootools-MochaUI">sliderareaGif	^#[71 73 70 56 57 97 10 0 7 0 162 0 0 228 228 228 222 222 222 216 216 216 210 210 210 198 198 198 179 179 179 204 204 204 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 10 0 7 0 0 3 19 88 186 76 254 208 200 73 135 189 88 232 205 131 255 32 32 142 100 2 0 59]</body><body package="Mootools-MochaUI">spacerGif	^#[71 73 70 56 57 97 10 0 10 0 128 0 0 255 255 255 0 0 0 33 249 4 1 0 0 0 0 44 0 0 0 0 10 0 10 0 0 2 8 132 143 169 203 237 15 99 43 0 59]</body><body package="Mootools-MochaUI">spinnerGif	^(ByteArray fromPackedString: 'Q4%FNC%!D@@P@KLI@H6T&amp;(^N%JJ''*6%2^,CB1[F5.G"@!&lt;?P4-;^7????0@@@@@@@@@@@@@@@@@@@@@@@BG?B49EUEMCPUAEL"80@0D@@@@!&gt;PPE@@@I@B0@@@@@D@@P@@@DQCCI&amp;\Z FM,&lt;#Y&amp;[!BBT=5UWL)J%!:(#9481Y5MA''&amp;]G7&gt;,;#J=7J2XD@ *A0DD&amp;B8WD$$%1R*BRZSU9#VZ)GJ2128$@@BG9A@T@@@$@K@@@@@@P@A@@@@QDLL&amp;Y#JDX630A&amp;I,4CIS7UU\2$*VG*"O''S#E''T4J^Y4#_:3.L+7\+I (E2.G@PRXI!LRRRWEJ(II)MW&amp;MY*$\+KGK"P@@H_$DAP@@BP@,@@@@@A@@D@@@ADP02Y%B(A#[OHVX&amp;6PX%O]UU3JR)X^*H&gt;]NLV]SQY9''P=?+N82/]2,&amp;B@PJ@,EAI &gt;G1III\T* $&amp;$5^X5&amp;*Q2,,\.I@@@!&gt;PPE@@@I@B0@@@@@D@@P@@@DQCCI&amp;XR FM,&lt;R9&amp;[A@BT=5UWL)J%!:(#9481Y5MD''&amp;]F7&gt;,;#J=7J2XNA&lt;) 0DD&amp;DX#D$$%1R*BRZSU9#VZ)GJ2128$@@BG9A@T@@@$@K@@@@@@P@A@@@@QDLL&amp;YR*DX630I&amp;Y,$BIS7UU\2$*VG*"O''S#E''T4^^Y4G_:3.L+7\+I!@H",G@PRXG &lt;RRRWEJ(II)MW&amp;MY*$\+KGK"P@@H_$DAP@@BP@,@@@@@A@@D@@@ADP02Y$H(Q#[OL&gt;Y&amp;5PT%O]UU3JR)X^*H&gt;]NLV]SRI9''P-?+N82/]2,&amp;A LJ@LAAI 6F1III\T* $&amp;$5^X5&amp;*Q2,,\.I@@@!&gt;PPE@@@I@B0@@@@@D@@P@@@DQCCI&amp;\:!FM,&lt;DY*[QABT=5UWL)J%!:(#9481Y5MC''&amp;]E7&gt;,;#J=7J2XLA()@0DD&amp;@8GD$$%1R*BRZSU9#VZ)GJ2128$@@BG9A@T@@@$@K@@@@@@P@A@@@@QDLL&amp;YDJHX633G&amp;I-4GIS7UU\2$*VG*"O''S#E''T4Z^Y4S_:3.L+7\+I @@R*G@PRXE ,RRRWEJ(II)MW&amp;MY*$\+KGK"P@@N0@a')</body><body package="Mootools-MochaUI">spinnerplaceholderGif	^#[71 73 70 56 57 97 16 0 16 0 128 1 0 194 194 194 255 255 255 33 249 4 1 0 0 1 0 44 0 0 0 0 16 0 16 0 0 2 39 140 31 0 200 172 125 158 145 105 69 137 233 124 92 95 228 65 162 66 54 228 89 58 167 200 126 174 186 116 214 101 101 115 245 134 111 139 55 5 0 59]</body><body package="Mootools-MochaUI">tabsGif	^(ByteArray fromPackedString: 'Q4%FNC%!K@E$@MT)@L3L3I&amp;Y&amp;_[6=/W5=_S4=OO3&lt;?K2&lt;/G1&lt;_C0&lt;N?/;&gt;7-;^3,;N/+:&gt;+*:.#(:N_''9&gt;W%9[.;.=WT5\B?/:2+*?+:&gt;/#8&gt;O_7=&gt;;.;.''):^[&amp;9.S$9NG!8];^7-/[6=''Y6]CP4L/K2&lt;''I2\[F1,SD1LOC0&lt;GA0["8.KR4-O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG9A@D@@B$@K@@@@@@,@VP@@@[?PDK!$E 4GL"$\,%,N)?P*GQJ+U*/6J162&gt;5JF8/D(RADKA:\#,_3Z[/_&lt;K!&lt;S*?[;?"&lt;_,?/&gt;?&gt;@ XI3Z14\C0,HAP$YGA&lt; HRL$IYRU%)^X&amp;Y*[''I6^'':B!(*N$)ZZ''*J&amp;ZIBL!HA&lt;\FP$LGAH"H10CE[.&lt;/[:?0LGB0&lt;SE1,_H2\+K3L7N3=CC@10#H!H\CA(_H"PD4]? 8^K#9NW&amp;9;8DIBH_F!0 H0TV&lt;?S5=/_8&gt;_+;?O7&gt;?0@CB!1H,JCA 0 CE! AH$6HC!\"R)1H,ZKE"1 3Z-3H,ZOG#2AC"!1I,*SI$A4^_!!!PHCK%3A#2)1I,:[M&amp;3!3:-3I,:_O?9=@ 0(]:-O@"CX%"B)]2+R)4:]P(4*=VPK) J-X,6+]2+V+5:= 08(]R;Z,6[M(4:)]23Y-UP$%BL"]R;^.7[-8&lt;&gt;+]2;^/7;&gt;@@0,^SK"08\NDSW2PXJJ@8&lt;^PH4.^SK&amp;29\.XL6/^3K&amp;39&lt;&gt; P8,^C]*DALXFT*-^3[*5:=^0X&lt;.^S[.6;].8\&gt;/^3[.7;=6&amp;FQ&lt;XS+28&lt;^OH$2-_3+29&lt;&gt;_P(4._S+6:=^/X*0\7 ZB;=&gt;? 08,_S;:&lt;&gt;_O(4:-_3;:=&gt;?_08&lt;-?/36A?_/8&lt;&gt;/_3;&gt;???&lt;@A"#  @PVZNBABBZ(8HHH[(_A 1AFJNFDEEY(8XTXY*#!!!16:O?!!2BFJNJHIHZ8''PH()*#"""26:NJKLLX(88045&amp;###S#&amp;*NNNOOZ(X7@SKBC$$DPVZ^RQRBZ)9IILM.''$$5AFJ^VTUEY)9YUTS''CZA@14:^VWXHX)9)!$%&amp;''&amp;&amp;V"&amp;*^ZZ[K[)9)-01"''''&amp;5*BDDDC^NZ)999&lt;=.''''''8@FJ." !AY*:JFHI*+(((06*&amp; DH@A0P ZTU&amp;+))Y!&amp;*.&amp;&amp;''G[*:Z^ !"+**JRVZ.*)*JY*: $@#HBBE;CFJ..,-MY*::68Q(GBBAMP&lt;LB/0@X+;KCDE&amp;/,,\ &amp;*&gt;223C[+;KOPQ"/--MQFR4F/@V" ;[[\]./--&gt;BFJ&gt;:89IY+;+''()*/?;++,-./..&gt;0FPLDFDMQ+;;789*////36:&gt;&gt;?@@\,&lt;L@DE6300P ''+GCB=B;,&lt;LLPQ2311AQW[OGEFF^,&lt;\X\]&gt;3112BGKOKHII],&lt;,$():122B&amp;4;OKKLL\,&lt;&lt;0456333S#''+OONOO_,&lt;&lt;=@A2744DPW[_SQRB^-=MILM&gt;7445AGK_WTUE]-=]UXY:755%17;_WWXH^-,1ADFIG+6V"''+_[Z[MLJ!!!$EF@FF&amp;*0L\#]^N^-==9&lt;=&gt;5778T\$, "#S0R2RR*IJ;88(07;/##$C?N"".02DJKKRQ8$L!&lt;''G_.&gt;^^ !2;::JP/8LD:56R3SP$LLN#::;CGK//,-M].?7-&gt;CIS@##, $MC@;\@GK?301A]/^0L$MISRA2T6;?334D\/?_STU6?!A2*M$HFO7G_/?__ !2?&gt;&gt;NR?&amp;LEQG9QP?/+,-&gt;?&gt;&gt;?B7W=TGI&amp;A)??789:???/37;?&gt;R&lt;6O]''@YH0@HZ&lt;H@HSJ@BE5"&amp;-9"@ QBL(@P''RLDJR''@;#,* A#_H0P9:&lt;HL CFF LB#BD)+0!B!L(P)M.A5U._BELH2!CF]H01+Z,EO[ZY,N]&lt;#CG/+0[C''&lt;(QBGRLP"D''D;5T*"D)_H1BX:&lt;X%P#BJ2- N/J%+1"%#L(!Z72LT.# -HF0"#FL]H1#JZ&lt;X1(SJLZ5&lt;#FM++1#WBL(13''RL\:6/=1#''VJ@@_62L\&gt;&gt;/FO @2$H@]I2DHZ&lt;)BHSJP"E&lt;''HQ#+2$YA,IJP$-XYJV/JR&amp;L2$I#_I2T9:&lt;)N CJT(Q4''JT)+2%J!L9R%Y9Z+S.OJU,H2%KF]I25+Z&lt;)Z83JT.]&lt;''KW/+2%&lt;@L)#BA.Z-^@^BX2D2&amp;L)_I3FX:&lt;9''P#JX4)4''MZ%+3&amp;-#L)#Z72\5,W",B8@2''NL]I3''JZ&lt;93(SJ\:5&lt;''N]++3''_BL)33''R\=:6''M%&gt;L2''O/_I37;:&lt;9&lt;@CZ!@A4+P !+4(@!M*DHW2-BF8$-,DH6(QB]J4X)Z=JHX3Z!FM&lt;+Q#''+4(2@M*T!GR-JIS.V$JD6)R%_J4)Z:=JW?LH6)SF\*%[[X=JX83Z%N]&lt;+S''/+4)4@M*%BGR-R"F/V(RD6*T)_J5JX:=Z%P#Z)T)4+U*%+5*%#]B&amp;J62-V.^/V+X@6+VL]J5+JZ=Z1(SZ-Z5&lt;+V-++5+WBM*53''R-^:6/V.[2VMW/_J5;;:=Z&gt;@CZ1 A4/X0!+6,H!M+FHW2=#FN/Z1$H6,YB]K6\)Z=+JX3Z1&amp;M&lt;-Y2_3&amp;,:@M+V!GR=+R&amp;/Z4*D6-Z%_K6-Z:=+V62X9,Y4/[6-+6-+#M+V:!P;+^&gt;/Z70@6.\H\;''/&lt;Y=;#HSZ92%&lt;-\JS+7.]BM+''R''R=5HV/^:6L6.]+_K7^9:E9E?B:=814/^&lt;)+7/GN0JZ]:5&lt;/^=++7/_BM+73[:]C:6/^&gt;&gt;L6/_/_K7?;:=;&lt;@C+B@A41 _@XA@C,b')</body><body package="Mootools-MochaUI">toolboxdivider2Gif	^#[71 73 70 56 57 97 2 0 22 0 145 0 0 52 52 52 91 91 91 51 51 51 92 92 92 33 249 4 0 0 0 0 0 44 0 0 0 0 2 0 22 0 0 2 9 12 38 168 201 235 13 223 50 5 0 59]</body><body package="Mootools-MochaUI">toolboxdividerGif	^#[71 73 70 56 57 97 2 0 20 0 128 0 0 196 196 196 255 255 255 33 249 4 0 0 0 0 0 44 0 0 0 0 2 0 20 0 0 2 7 12 140 167 201 235 157 10 0 59]</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>scripts/source/Layout/</category><body package="Mootools-MochaUI">dockJs	^'/*Script: Dock.js	Implements the dock/taskbar. Enables window minimize.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.Requires:	Core.js, Window.js, Layout.js	Todo:	- Make it so the dock requires no initial html markup.*/MochaUI.options.extend({		// Naming options:		// If you change the IDs of the Mocha Desktop containers in your HTML, you need to change them here as well.		dockWrapper: ''dockWrapper'',		dock:        ''dock''});// Used by Desktop.js before MochaUI.Dock is initialized.window.addEvent(''domready'', function(){		if ($(''dockWrapper'')) {		MochaUI.dockVisible = true;	}});MochaUI.extend({	/*	Function: minimizeAll		Minimize all windows that are minimizable.	*/		minimizeAll: function() {		$$(''div.mocha'').each(function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);			if (!currentInstance.isMinimized &amp;&amp; currentInstance.options.minimizable == true){				MochaUI.Dock.minimizeWindow(windowEl);			}		}.bind(this));	}});MochaUI.Dock = new Class({	Extends: MochaUI.Window,	Implements: [Events, Options],	options: {		useControls:          true,      // Toggles autohide and dock placement controls.		dockPosition:         ''top'',     // Position the dock starts in, top or bottom.		// Style options		dockTabColor:         [255, 255, 255],		trueButtonColor:      [70, 245, 70],     // Color for autohide on		enabledButtonColor:   [125, 208, 250], 		disabledButtonColor:  [170, 170, 170]	},	initialize: function(options){		// Stops if MochaUI.Desktop is not implemented		if (!MochaUI.Desktop) return;		this.setOptions(options);				this.dockWrapper   = $(MochaUI.options.dockWrapper);		this.dock          = $(MochaUI.options.dock);		this.autoHideEvent = null;				this.dockAutoHide  = false;  // True when dock autohide is set to on, false if set to off		if (!this.dockWrapper) return;		if (!this.options.useControls){			if($(''dockPlacement'')){				$(''dockPlacement'').setStyle(''cursor'', ''default'');			}			if($(''dockAutoHide'')){				$(''dockAutoHide'').setStyle(''cursor'', ''default'');			}		}		this.dockWrapper.setStyles({			''display'':  ''block'',			''position'': ''absolute'',			''top'':      null,			''bottom'':   MochaUI.Desktop.desktopFooter ? MochaUI.Desktop.desktopFooter.offsetHeight : 0,			''left'':     0		});				if (this.options.useControls){			this.initializeDockControls();		}		// Add check mark to menu if link exists in menu		if ($(''dockLinkCheck'')){			this.sidebarCheck = new Element(''div'', {				''class'': ''check'',				''id'': ''dock_check''			}).inject($(''dockLinkCheck''));		}		this.dockSortables = new Sortables(''#dockSort'', {			opacity: Browser.Engine.trident ? 1 : .5,			constrain: true,			clone: false,			revert: false		});		MochaUI.Desktop.setDesktopSize();	},	initializeDockControls: function(){				if (this.options.useControls){			// Insert canvas			var canvas = new Element(''canvas'', {				''id'':     ''dockCanvas'',				''width'':  ''15'',				''height'': ''18''			}).inject(this.dock);			// Dynamically initialize canvas using excanvas. This is only required by IE			if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(canvas);			}		}				var dockPlacement = $(''dockPlacement'');		var dockAutoHide = $(''dockAutoHide'');		// Position top or bottom selector		dockPlacement.setProperty(''title'',''Position Dock Top'');		// Attach event		dockPlacement.addEvent(''click'', function(){			this.moveDock();		}.bind(this));		// Auto Hide toggle switch		dockAutoHide.setProperty(''title'',''Turn Auto Hide On'');				// Attach event Auto Hide 		dockAutoHide.addEvent(''click'', function(event){			if ( this.dockWrapper.getProperty(''dockPosition'') == ''top'' )				return false;			var ctx = $(''dockCanvas'').getContext(''2d'');			this.dockAutoHide = !this.dockAutoHide;	// Toggle			if (this.dockAutoHide){				$(''dockAutoHide'').setProperty(''title'', ''Turn Auto Hide Off'');				//ctx.clearRect(0, 11, 100, 100);				MochaUI.circle(ctx, 5 , 14, 3, this.options.trueButtonColor, 1.0);				// Define event				this.autoHideEvent = function(event) {					if (!this.dockAutoHide)						return;					if (!MochaUI.Desktop.desktopFooter) {						var dockHotspotHeight = this.dockWrapper.offsetHeight;						if (dockHotspotHeight &lt; 25) dockHotspotHeight = 25;					}					else if (MochaUI.Desktop.desktopFooter) {						var dockHotspotHeight = this.dockWrapper.offsetHeight + MochaUI.Desktop.desktopFooter.offsetHeight;						if (dockHotspotHeight &lt; 25) dockHotspotHeight = 25;					}											if (!MochaUI.Desktop.desktopFooter &amp;&amp; event.client.y &gt; (document.getCoordinates().height - dockHotspotHeight)){						if (!MochaUI.dockVisible){							this.dockWrapper.setStyle(''display'', ''block'');							MochaUI.dockVisible = true;							MochaUI.Desktop.setDesktopSize();						}					}					else if (MochaUI.Desktop.desktopFooter &amp;&amp; event.client.y &gt; (document.getCoordinates().height - dockHotspotHeight)){						if (!MochaUI.dockVisible){							this.dockWrapper.setStyle(''display'', ''block'');							MochaUI.dockVisible = true;							MochaUI.Desktop.setDesktopSize();						}					}					else if (MochaUI.dockVisible){						this.dockWrapper.setStyle(''display'', ''none'');						MochaUI.dockVisible = false;						MochaUI.Desktop.setDesktopSize();											}				}.bind(this);				// Add event				document.addEvent(''mousemove'', this.autoHideEvent);			} else {				$(''dockAutoHide'').setProperty(''title'', ''Turn Auto Hide On'');				//ctx.clearRect(0, 11, 100, 100);				MochaUI.circle(ctx, 5 , 14, 3, this.options.enabledButtonColor, 1.0);				// Remove event				document.removeEvent(''mousemove'', this.autoHideEvent);			}		}.bind(this));		// Draw dock controls		var ctx = $(''dockCanvas'').getContext(''2d'');		ctx.clearRect(0, 0, 100, 100);		MochaUI.circle(ctx, 5 , 4, 3, this.options.enabledButtonColor, 1.0);		MochaUI.circle(ctx, 5 , 14, 3, this.options.enabledButtonColor, 1.0);				if (this.options.dockPosition == ''top''){			this.moveDock();		}	},	moveDock: function(){			var ctx = $(''dockCanvas'').getContext(''2d'');			// Move dock to top position			if (this.dockWrapper.getStyle(''position'') != ''relative''){				this.dockWrapper.setStyles({					''position'': ''relative'',					''bottom'':   null				});				this.dockWrapper.addClass(''top'');				MochaUI.Desktop.setDesktopSize();				this.dockWrapper.setProperty(''dockPosition'',''top'');				ctx.clearRect(0, 0, 100, 100);				MochaUI.circle(ctx, 5, 4, 3, this.options.enabledButtonColor, 1.0);				MochaUI.circle(ctx, 5, 14, 3, this.options.disabledButtonColor, 1.0);				$(''dockPlacement'').setProperty(''title'', ''Position Dock Bottom'');				$(''dockAutoHide'').setProperty(''title'', ''Auto Hide Disabled in Top Dock Position'');				this.dockAutoHide = false;			}			// Move dock to bottom position			else {				this.dockWrapper.setStyles({					''position'':      ''absolute'',					''bottom'':        MochaUI.Desktop.desktopFooter ? MochaUI.Desktop.desktopFooter.offsetHeight : 0				});				this.dockWrapper.removeClass(''top'');				MochaUI.Desktop.setDesktopSize();				this.dockWrapper.setProperty(''dockPosition'', ''bottom'');				ctx.clearRect(0, 0, 100, 100);				MochaUI.circle(ctx, 5, 4, 3, this.options.enabledButtonColor, 1.0);				MochaUI.circle(ctx, 5 , 14, 3, this.options.enabledButtonColor, 1.0);				$(''dockPlacement'').setProperty(''title'', ''Position Dock Top'');				$(''dockAutoHide'').setProperty(''title'', ''Turn Auto Hide On'');			}	},	createDockTab: function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var dockTab = new Element(''div'', {			''id'': currentInstance.options.id + ''_dockTab'',			''class'': ''dockTab'',			''title'': titleText		}).inject($(''dockClear''), ''before'');				dockTab.addEvent(''mousedown'', function(e){			new Event(e).stop();			this.timeDown = $time();		});				dockTab.addEvent(''mouseup'', function(e){			this.timeUp = $time();			if ((this.timeUp - this.timeDown) &lt; 275){				// If the visibility of the windows on the page are toggled off, toggle visibility on.				if (MochaUI.Windows.windowsVisible == false) {					MochaUI.toggleWindowVisibility();					if (currentInstance.isMinimized == true) {						MochaUI.Dock.restoreMinimized.delay(25, MochaUI.Dock, windowEl);					}					else {						MochaUI.focusWindow(windowEl);					}					return;				}				// If window is minimized, restore window.				if (currentInstance.isMinimized == true) {					MochaUI.Dock.restoreMinimized.delay(25, MochaUI.Dock, windowEl);				}				else{					// If window is not minimized and is focused, minimize window.					if (currentInstance.windowEl.hasClass(''isFocused'') &amp;&amp; currentInstance.options.minimizable == true){						MochaUI.Dock.minimizeWindow(windowEl)					}					// If window is not minimized and is not focused, focus window.						else{						MochaUI.focusWindow(windowEl);					}					// if the window is not minimized and is outside the viewport, center it in the viewport.					var coordinates = document.getCoordinates();					if (windowEl.getStyle(''left'').toInt() &gt; coordinates.width || windowEl.getStyle(''top'').toInt() &gt; coordinates.height){						MochaUI.centerWindow(windowEl);						}				}			}		});		this.dockSortables.addItems(dockTab);		var titleText = currentInstance.titleEl.innerHTML;		var dockTabText = new Element(''div'', {			''id'': currentInstance.options.id + ''_dockTabText'',			''class'': ''dockText''		}).set(''html'', titleText.substring(0,20) + (titleText.length &gt; 20 ? ''...'' : '''')).inject($(dockTab));		// If I implement this again, will need to also adjust the titleText truncate and the tab''s		// left padding.		if (currentInstance.options.icon != false){			// dockTabText.setStyle(''background'', ''url('' + currentInstance.options.icon + '') 4px 4px no-repeat'');		}				// Need to resize everything in case the dock wraps when a new tab is added		MochaUI.Desktop.setDesktopSize();	},	makeActiveTab: function(){		// getWindowWith HighestZindex is used in case the currently focused window		// is closed.				var windowEl = MochaUI.getWindowWithHighestZindex();		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);				$$(''div.dockTab'').removeClass(''activeDockTab'');		if (currentInstance.isMinimized != true) {						currentInstance.windowEl.addClass(''isFocused'');			var currentButton = $(currentInstance.options.id + ''_dockTab'');			if (currentButton != null) {				currentButton.addClass(''activeDockTab'');			}		}		else {			currentInstance.windowEl.removeClass(''isFocused'');		}		},		minimizeWindow: function(windowEl){		if (windowEl != $(windowEl)) return;				var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		currentInstance.isMinimized = true;		// Hide iframe		// Iframe should be hidden when minimizing, maximizing, and moving for performance and Flash issues		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');		}		// Hide window and add to dock			currentInstance.contentBorderEl.setStyle(''visibility'', ''hidden'');		if(currentInstance.toolbarWrapperEl){					currentInstance.toolbarWrapperEl.setStyle(''visibility'', ''hidden'');		}		windowEl.setStyle(''visibility'', ''hidden'');		 // Fixes a scrollbar issue in Mac FF2		if (Browser.Platform.mac &amp;&amp; Browser.Engine.gecko){			if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {				var ffversion = new Number(RegExp.$1);				if (ffversion &lt; 3) {					currentInstance.contentWrapperEl.setStyle(''overflow'', ''hidden'');				}			}		}			MochaUI.Desktop.setDesktopSize();		// Have to use timeout because window gets focused when you click on the minimize button		setTimeout(function(){			windowEl.setStyle(''zIndex'', 1);			windowEl.removeClass(''isFocused'');			this.makeActiveTab();			}.bind(this),100);			currentInstance.fireEvent(''onMinimize'', windowEl);	},	restoreMinimized: function(windowEl) {		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		if (currentInstance.isMinimized == false) return;		if (MochaUI.Windows.windowsVisible == false){			MochaUI.toggleWindowVisibility();		}		MochaUI.Desktop.setDesktopSize();		 // Part of Mac FF2 scrollbar fix		if (currentInstance.options.scrollbars == true &amp;&amp; !currentInstance.iframeEl){ 			currentInstance.contentWrapperEl.setStyle(''overflow'', ''auto'');		}		if (currentInstance.isCollapsed) {			MochaUI.collapseToggle(windowEl);		}		windowEl.setStyle(''visibility'', ''visible'');		currentInstance.contentBorderEl.setStyle(''visibility'', ''visible'');		if(currentInstance.toolbarWrapperEl){			currentInstance.toolbarWrapperEl.setStyle(''visibility'', ''visible'');		}		// Show iframe		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''visible'');		}		currentInstance.isMinimized = false;		MochaUI.focusWindow(windowEl);		currentInstance.fireEvent(''onRestore'', windowEl);	}});MochaUI.Dock.implement(new Options, new Events);'</body><body package="Mootools-MochaUI">layoutJs	^'/*Script: Layout.js	Create web application layouts. Enables window maximize.	Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.	Requires:	Core.js, Window.js	*/MochaUI.Desktop = new Class({	Extends: MochaUI.Window,	Implements: [Events, Options],		options: {		// Naming options:		// If you change the IDs of the Mocha Desktop containers in your HTML, you need to change them here as well.		desktop:             ''desktop'',		desktopHeader:       ''desktopHeader'',		desktopFooter:       ''desktopFooter'',		desktopNavBar:       ''desktopNavbar'',		pageWrapper:         ''pageWrapper'',		page:                ''page'',		desktopFooter:       ''desktopFooterWrapper''	},		initialize: function(options){		this.setOptions(options);		this.desktop         = $(this.options.desktop);		this.desktopHeader   = $(this.options.desktopHeader);		this.desktopNavBar   = $(this.options.desktopNavBar);		this.pageWrapper     = $(this.options.pageWrapper);		this.page            = $(this.options.page);		this.desktopFooter   = $(this.options.desktopFooter);					// This is run on dock initialize so no need to do it twice.		if (!MochaUI.Dock.dockWrapper){			this.setDesktopSize();		}		this.menuInitialize();				// Resize desktop, page wrapper, modal overlay, and maximized windows when browser window is resized		window.addEvent(''resize'', function(e){			this.onBrowserResize();		}.bind(this));	},	menuInitialize: function(){		// Fix for dropdown menus in IE6		if (Browser.Engine.trident4 &amp;&amp; this.desktopNavBar){			this.desktopNavBar.getElements(''li'').each(function(element) {				element.addEvent(''mouseenter'', function(){					this.addClass(''ieHover'');				});				element.addEvent(''mouseleave'', function(){					this.removeClass(''ieHover'');				});			});		};	},	onBrowserResize: function(){		this.setDesktopSize();		// Resize maximized windows to fit new browser window size		setTimeout( function(){			MochaUI.Windows.instances.each(function(instance){				if (instance.isMaximized){					// Hide iframe while resize for better performance					if ( instance.iframeEl ){						instance.iframeEl.setStyle(''visibility'', ''hidden'');					}					var coordinates = document.getCoordinates();					var borderHeight = instance.contentBorderEl.getStyle(''border-top'').toInt() + instance.contentBorderEl.getStyle(''border-bottom'').toInt();					var toolbarHeight = instance.toolbarWrapperEl ? instance.toolbarWrapperEl.getStyle(''height'').toInt() + instance.toolbarWrapperEl.getStyle(''border-top'').toInt() : 0;					instance.contentWrapperEl.setStyles({						''height'': coordinates.height - instance.options.headerHeight - instance.options.footerHeight - borderHeight - toolbarHeight,						''width'': coordinates.width					});					instance.drawWindow($(instance.options.id));					if ( instance.iframeEl ){						instance.iframeEl.setStyles({							''height'': instance.contentWrapperEl.getStyle(''height'')						});						instance.iframeEl.setStyle(''visibility'', ''visible'');					}				}			}.bind(this));		}.bind(this), 100);	},	setDesktopSize: function(){		var windowDimensions = window.getCoordinates();		// var dock = $(MochaUI.options.dock);		var dockWrapper = $(MochaUI.options.dockWrapper);				// Setting the desktop height may only be needed by IE7		if (this.desktop){			this.desktop.setStyle(''height'', windowDimensions.height);		}		// Set pageWrapper height so the dock doesn''t cover the pageWrapper scrollbars.		if (this.pageWrapper) {			var dockOffset = MochaUI.dockVisible ? dockWrapper.offsetHeight : 0;			var pageWrapperHeight = windowDimensions.height;			pageWrapperHeight -= this.pageWrapper.getStyle(''border-top'').toInt();			pageWrapperHeight -= this.pageWrapper.getStyle(''border-bottom'').toInt();			if (this.desktopHeader){ pageWrapperHeight -= this.desktopHeader.offsetHeight; }			if (this.desktopFooter){ pageWrapperHeight -= this.desktopFooter.offsetHeight; }			pageWrapperHeight -= dockOffset;			if (pageWrapperHeight &lt; 0){				pageWrapperHeight = 0;			}			this.pageWrapper.setStyle(''height'', pageWrapperHeight);		}		if (MochaUI.Columns.instances.getKeys().length &gt; 0){ // Conditional is a fix for a bug in IE6 in the no toolbars demo.			MochaUI.Desktop.resizePanels();		}			},	resizePanels: function(){		if (Browser.Engine.trident4){			$$(''.pad'').setStyle(''display'', ''none'');			$$(''.rHeight'').setStyle(''height'', 1);		}		MochaUI.panelHeight();		MochaUI.rWidth();		if (Browser.Engine.trident4) $$(''.pad'').setStyle(''display'', ''block'');	},	/*		Function: maximizeWindow		Maximize a window.		Syntax:		(start code)		MochaUI.Desktop.maximizeWindow(windowEl);		(end)		*/		maximizeWindow: function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var options = currentInstance.options;		var windowDrag = currentInstance.windowDrag;		// If window no longer exists or is maximized, stop		if (windowEl != $(windowEl) || currentInstance.isMaximized ) return;				if (currentInstance.isCollapsed){			MochaUI.collapseToggle(windowEl);			}		currentInstance.isMaximized = true;				// If window is restricted to a container, it should not be draggable when maximized.		if (currentInstance.options.restrict){			windowDrag.detach();			if (options.resizable) {				currentInstance.detachResizable();			}			currentInstance.titleBarEl.setStyle(''cursor'', ''default'');		}			// If the window has a container that is not the desktop		// temporarily move the window to the desktop while it is minimized.		if (options.container != this.desktop){			this.desktop.grab(windowEl);			if (this.options.restrict){			windowDrag.container = this.desktop;			}		}				// Save original position		currentInstance.oldTop = windowEl.getStyle(''top'');		currentInstance.oldLeft = windowEl.getStyle(''left'');		var contentWrapperEl = currentInstance.contentWrapperEl;		// Save original dimensions		contentWrapperEl.oldWidth = contentWrapperEl.getStyle(''width'');		contentWrapperEl.oldHeight = contentWrapperEl.getStyle(''height'');		// Hide iframe		// Iframe should be hidden when minimizing, maximizing, and moving for performance and Flash issues		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');		}		var windowDimensions = document.getCoordinates();		var options = currentInstance.options;		var shadowBlur = options.shadowBlur;		var shadowOffset = options.shadowOffset;		var newHeight = windowDimensions.height - options.headerHeight - options.footerHeight;		newHeight -= currentInstance.contentBorderEl.getStyle(''border-top'').toInt();		newHeight -= currentInstance.contentBorderEl.getStyle(''border-bottom'').toInt();		newHeight -= (  currentInstance.toolbarWrapperEl ? currentInstance.toolbarWrapperEl.getStyle(''height'').toInt() + currentInstance.toolbarWrapperEl.getStyle(''border-top'').toInt() : 0);		if (MochaUI.options.useEffects == false){			windowEl.setStyles({				''top'': shadowOffset.y - shadowBlur,				''left'': shadowOffset.x - shadowBlur			});			currentInstance.contentWrapperEl.setStyles({				''height'': newHeight,				''width'':  windowDimensions.width			});			currentInstance.drawWindow(windowEl);			// Show iframe			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}			currentInstance.fireEvent(''onMaximize'', windowEl);		}		else {			// Todo: Initialize the variables for these morphs once in an initialize function and reuse them			var maximizeMorph = new Fx.Elements([contentWrapperEl, windowEl], { 				duration: 70,				onStart: function(windowEl){					currentInstance.maximizeAnimation = currentInstance.drawWindow.periodical(20, currentInstance, windowEl);				}.bind(this),				onComplete: function(windowEl){					$clear(currentInstance.maximizeAnimation);					currentInstance.drawWindow(windowEl);					// Show iframe					if ( currentInstance.iframeEl ) {						currentInstance.iframeEl.setStyle(''visibility'', ''visible'');					}					currentInstance.fireEvent(''onMaximize'', windowEl);					}.bind(this)			});			maximizeMorph.start({				''0'': {	''height'': newHeight,						''width'':  windowDimensions.width				},				''1'': {	''top'': shadowOffset.y - shadowBlur,						''left'': shadowOffset.x - shadowBlur 				}			});				}		currentInstance.maximizeButtonEl.setProperty(''title'', ''Restore'');		MochaUI.focusWindow(windowEl);	},	/*	Function: restoreWindow		Restore a maximized window.	Syntax:		(start code)		MochaUI.Desktop.restoreWindow(windowEl);		(end)		*/		restoreWindow: function(windowEl){				var currentInstance = MochaUI.Windows.instances.get(windowEl.id);				// Window exists and is maximized ?		if (windowEl != $(windowEl) || !currentInstance.isMaximized) return;					var options = currentInstance.options;		currentInstance.isMaximized = false;				if (options.restrict){			currentInstance.windowDrag.attach();			if (options.resizable){				currentInstance.reattachResizable();			}						currentInstance.titleBarEl.setStyle(''cursor'', ''move'');		}						// Hide iframe		// Iframe should be hidden when minimizing, maximizing, and moving for performance and Flash issues		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');		}				var contentWrapperEl = currentInstance.contentWrapperEl;				if (MochaUI.options.useEffects == false){			contentWrapperEl.setStyles({				''width'':  contentWrapperEl.oldWidth,				''height'': contentWrapperEl.oldHeight			});			currentInstance.drawWindow(windowEl);			windowEl.setStyles({				''top'': currentInstance.oldTop,				''left'': currentInstance.oldLeft			});			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}						if (options.container != this.desktop){				$(options.container).grab(windowEl);				if (options.restrict){					currentInstance.windowDrag.container = $(options.container);				}			}			currentInstance.fireEvent(''onRestore'', windowEl);		}		else {			var restoreMorph = new Fx.Elements([contentWrapperEl, windowEl], { 				''duration'':   150,				''onStart'': function(windowEl){					currentInstance.maximizeAnimation = currentInstance.drawWindow.periodical(20, currentInstance, windowEl);				}.bind(this),				''onComplete'': function(el){					$clear(currentInstance.maximizeAnimation);					currentInstance.drawWindow(windowEl);					if (currentInstance.iframeEl){						currentInstance.iframeEl.setStyle(''visibility'', ''visible'');					}					if (options.container != this.desktop){						$(options.container).grab(windowEl);						if (options.restrict){								currentInstance.windowDrag.container = $(options.container);						}					}					currentInstance.fireEvent(''onRestore'', windowEl);				}.bind(this)			});			restoreMorph.start({ 				''0'': {	''height'': contentWrapperEl.oldHeight,						''width'':  contentWrapperEl.oldWidth				},				''1'': {	''top'':  currentInstance.oldTop,						''left'': currentInstance.oldLeft				}			});		}		currentInstance.maximizeButtonEl.setProperty(''title'', ''Maximize'');	}});MochaUI.Desktop.implement(new Options, new Events);/*Class: Column	Create a column. Columns should be created from left to right.Syntax:(start code)	MochaUI.Panel();(end)Arguments:	optionsOptions:	id - The ID of the column. This must be set when creating the column.		placement - Can be ''right'', ''main'', or ''left''. There must be at least one column with the ''main'' option.	width - ''main'' column is fluid and should not be given a width.	resizeLimit - resizelimit of a ''right'' or ''left'' column.	onResize - (function) Fired when the column is resized.	onCollapse - (function) Fired when the column is collapsed.	onExpand - (function) Fired when the column is expanded.		*/MochaUI.Column = new Class({	Extends: MochaUI.Desktop,	Implements: [Events, Options],	options: {		id:            null, 		placement:     null, 		width:         null,		resizeLimit:   [],		// Events		onResize:     $empty, 		onCollapse:   $empty,		onExpand:     $empty	},	initialize: function(options){		this.setOptions(options);				$extend(this, {			timestamp: $time(),			isCollapsed: false,			oldWidth: 0		});		// Shorten object chain		var options = this.options;		var instances = MochaUI.Columns.instances;		var instanceID = instances.get(options.id);		// Check to see if there is already a class instance for this Column		if (instanceID){			var currentInstance = instanceID;		}		// Check if column already exists		if ( this.columnEl ){			return;		}		else {						instances.set(options.id, this);		}								this.columnEl = new Element(''div'', {			''id'': this.options.id,			''class'': ''column expanded'',			''styles'': {				''width'': options.placement == ''main'' ? null : options.width			}		}).inject($(MochaUI.Desktop.pageWrapper));		var parent = this.columnEl.getParent();		var columnHeight = parent.getStyle(''height'').toInt();		this.columnEl.setStyle(''height'', columnHeight);		if (options.placement == ''main''){			this.columnEl.addClass(''rWidth'');		}		this.spacerEl = new Element(''div'', {			''id'': this.options.id + ''_spacer'',			''class'': ''horizontalHandle''		}).inject(this.columnEl);		switch (this.options.placement) {			case ''left'':				this.handleEl = new Element(''div'', {					''id'': this.options.id + ''_handle'',					''class'': ''columnHandle''				}).inject(this.columnEl, ''after'');				this.handleIconEl = new Element(''div'', {					''id'': options.id + ''_handle_icon'',					''class'': ''handleIcon''				}).inject(this.handleEl);				addResizeRight(this.columnEl, options.resizeLimit[0], options.resizeLimit[1]);				break;			case ''right'':				this.handleEl = new Element(''div'', {					''id'': this.options.id + ''_handle'',					''class'': ''columnHandle''				}).inject(this.columnEl, ''before'');				this.handleIconEl = new Element(''div'', {					''id'': options.id + ''_handle_icon'',					''class'': ''handleIcon''				}).inject(this.handleEl);				addResizeLeft(this.columnEl, options.resizeLimit[0], options.resizeLimit[1]);				break;		}		if (this.handleEl != null){			this.handleEl.addEvent(''dblclick'', function(){				this.columnToggle();			}.bind(this));		}		MochaUI.rWidth();	},	columnToggle: function(){		var column= this.columnEl;				// Collapse		if (this.isCollapsed == false){			this.oldWidth = column.getStyle(''width'').toInt();			this.resize.detach();			this.handleEl.removeEvents(''dblclick'');			this.handleEl.addEvent(''click'', function(){				this.columnToggle();			}.bind(this));			this.handleEl.setStyle(''cursor'', ''pointer'').addClass(''detached'');						column.setStyle(''width'', 0);			this.isCollapsed = true;			column.addClass(''collapsed'');			column.removeClass(''expanded'');			MochaUI.rWidth();			this.fireEvent(''onCollapse'');		}		// Expand		else {			column.setStyle(''width'', this.oldWidth);			this.isCollapsed = false;			column.addClass(''expanded'');			column.removeClass(''collapsed'');			this.handleEl.removeEvents(''click'');			this.handleEl.addEvent(''dblclick'', function(){				this.columnToggle();			}.bind(this));			this.resize.attach();			this.handleEl.setStyle(''cursor'', ''e-resize'').addClass(''attached'');			MochaUI.rWidth();			this.fireEvent(''onExpand'');		}	}});MochaUI.Column.implement(new Options, new Events);/*Class: Panel	Create a panel. Panels go one on top of another in columns. Create your columns first and then add your panels. Panels should be created from top to bottom, left to right.Syntax:(start code)	MochaUI.Panel();(end)Arguments:	optionsOptions:	id - The ID of the panel. This must be set when creating the panel.	column - Where to inject the panel. This must be set when creating the panel.	loadMethod - (''html'', ''xhr'', or ''iframe'')	contentURL - Used if loadMethod is set to ''xhr'' or ''iframe''.	evalScripts - (boolean) An xhr loadMethod option. Defaults to true.	evalResponse - (boolean) An xhr loadMethod option. Defaults to false.	content - (string or element) An html loadMethod option.	tabsURL - (url)		footer - (boolean)	footerURL - (url)	height - (number) Height of content area.	addClass - (string) Add a class to the panel.	scrollbars - (boolean)	padding - (object)	panelBackground - CSS background property for the panel.	onBeforeBuild - (function) Fired before the panel is created.	onContentLoaded - (function) Fired after the panel''s conten is loaded.	onResize - (function) Fired when the panel is resized.	onCollapse - (function) Fired when the panel is collapsed.	onExpand - (function) Fired when the panel is expanded.		*/MochaUI.Panel = new Class({								Extends: MochaUI.Desktop,		Implements: [Events, Options],		options: {		id:               null,		title:            ''New Panel'',		column:           null,		loadMethod:       ''html'',		contentURL:       ''pages/lipsum.html'',			// xhr options		evalScripts:      true,		evalResponse:     false,			// html options		content:          ''Panel content'',				// Tabs		tabsURL:          null,		footer:           false,		footerURL:        ''pages/lipsum.html'',				// Style options:		height:           125,		addClass:         '''',		scrollbars:       true,		padding:   		  { top: 8, right: 8, bottom: 8, left: 8 },		// Color options:				panelBackground:   ''#f8f8f8'',		// Events		onBeforeBuild:     $empty,		onContentLoaded:   $empty,		onResize:          $empty,		onCollapse:        $empty,		onExpand:          $empty	},		initialize: function(options){		this.setOptions(options);		$extend(this, {			timestamp: $time(),			isCollapsed: false,			oldHeight: 0,			partner: null		});		// Shorten object chain		var instances = MochaUI.Panels.instances;		var instanceID = instances.get(this.options.id);			// Check to see if there is already a class instance for this panel		if (instanceID){			var currentInstance = instanceID;		}		// Check if panel already exists		if ( this.panelEl ){			return;		}		else {						instances.set(this.options.id, this);		}		this.fireEvent(''onBeforeBuild'');				if (this.options.loadMethod == ''iframe'') {			// Iframes have their own scrollbars and padding.			this.options.scrollbars = false;			this.options.padding = { top: 0, right: 0, bottom: 0, left: 0 };		}		this.showHandle = true;		if ($(this.options.column).getChildren().length == 0){			this.showHandle = false;		}		this.panelEl = new Element(''div'', {			''id'': this.options.id,			''class'': ''panel expanded'',			''styles'': {				''height'': this.options.height,				''background'': this.options.panelBackground			}		}).inject($(this.options.column));		this.panelEl.addClass(this.options.addClass);		this.contentEl = new Element(''div'', {			''id'': this.options.id + ''_pad'',			''class'': ''pad''		}).inject(this.panelEl);		if (this.options.footer){			this.footerWrapperEl = new Element(''div'', {				''id'': this.options.id + ''_panelFooterWrapper'',				''class'': ''panel-footerWrapper''			}).inject(this.panelEl);						this.footerEl = new Element(''div'', {				''id'': this.options.id + ''_panelFooter'',				''class'': ''panel-footer''			}).inject(this.footerWrapperEl);			MochaUI.updateContent({				''element'':       this.panelEl,				''childElement'':  this.footerEl,				''loadMethod'':    ''xhr'',				''url'':           this.options.footerURL			});					}		// This is in order to use the same variable as the windows do in updateContent.		// May rethink this.		this.contentWrapperEl = this.panelEl;				// Set scrollbars, always use ''hidden'' for iframe windows		this.contentWrapperEl.setStyles({			''overflow'': this.options.scrollbars &amp;&amp; !this.iframeEl ? ''auto'' : ''hidden''		});		this.contentEl.setStyles({			''padding-top'': this.options.padding.top,			''padding-bottom'': this.options.padding.bottom,			''padding-left'': this.options.padding.left,			''padding-right'': this.options.padding.right		});							this.panelHeaderEl = new Element(''div'', {			''id'': this.options.id + ''_header'',			''class'': ''panel-header''		}).inject(this.panelEl, ''before'');				this.panelHeaderToolboxEl = new Element(''div'', {			''id'': this.options.id + ''_headerToolbox'',			''class'': ''panel-header-toolbox''		}).inject(this.panelHeaderEl);		this.collapseToggleEl = new Element(''div'', {			''id'': this.options.id + ''_minmize'',			''class'': ''panel-collapse icon16'',			''styles'': {				''width'': 16,				''height'': 16			},			''title'': ''Collapse Panel''		}).inject(this.panelHeaderToolboxEl);		this.collapseToggleEl.addEvent(''click'', function(event){			var panel = this.panelEl;						// Get siblings and make sure they are not all collapsed.			var instances = MochaUI.Panels.instances;			var expandedSiblings = [];			panel.getAllPrevious(''.panel'').each(function(sibling){				var currentInstance = instances.get(sibling.id);				if (currentInstance.isCollapsed == false){					expandedSiblings.push(sibling);				}			});			panel.getAllNext(''.panel'').each(function(sibling){				var currentInstance = instances.get(sibling.id);				if (currentInstance.isCollapsed == false){					expandedSiblings.push(sibling);				}			});			if (this.isCollapsed == false) {				var currentColumn = MochaUI.Columns.instances.get($(this.options.column).id);				if (expandedSiblings.length == 0 &amp;&amp; currentColumn.options.placement != ''main''){					var currentColumn = MochaUI.Columns.instances.get($(this.options.column).id);					currentColumn.columnToggle();					return;				}				else if (expandedSiblings.length == 0 &amp;&amp; currentColumn.options.placement == ''main''){					return;				}				this.oldHeight = panel.getStyle(''height'').toInt();				if (this.oldHeight &lt; 10) this.oldHeight = 20;				panel.setStyle(''height'', 0);				this.isCollapsed = true;				panel.addClass(''collapsed'');				panel.removeClass(''expanded'');				MochaUI.panelHeight(this.options.column, panel, ''collapsing'');				this.collapseToggleEl.removeClass(''panel-collapsed'');				this.collapseToggleEl.addClass(''panel-expand'');				this.collapseToggleEl.setProperty(''title'',''Expand Panel'');				this.fireEvent(''onCollapse'');			}			else {				panel.setStyle(''height'', this.oldHeight);				this.isCollapsed = false;				panel.addClass(''expanded'');				panel.removeClass(''collapsed'');				MochaUI.panelHeight(this.options.column, panel, ''expanding'');				this.collapseToggleEl.removeClass(''panel-expand'');				this.collapseToggleEl.addClass(''panel-collapsed'');				this.collapseToggleEl.setProperty(''title'',''Collapse Panel'');				this.fireEvent(''onExpand'');			}		}		.bind(this));				this.panelHeaderContentEl = new Element(''div'', {			''id'': this.options.id + ''_headerContent'',			''class'': ''panel-headerContent''		}).inject(this.panelHeaderEl);		this.titleEl = new Element(''h2'', {			''id'': this.options.id + ''_title''		}).inject(this.panelHeaderContentEl);		if (this.options.tabsURL == null){			this.titleEl.set(''html'', this.options.title);		}				else {			this.panelHeaderContentEl.addClass(''tabs'');			MochaUI.updateContent({				''element'':      this.panelEl,				''childElement'': this.panelHeaderContentEl,				''loadMethod'':   ''xhr'',				''url'':          this.options.tabsURL			});		}		this.handleEl = new Element(''div'', {			''id'': this.options.id + ''_handle'',			''class'': ''horizontalHandle'',			''styles'': {				''display'': this.showHandle == true ? ''block'' : ''none''			}		}).inject(this.panelEl, ''after'');				this.handleIconEl = new Element(''div'', {			''id'': this.options.id + ''_handle_icon'',			''class'': ''handleIcon''		}).inject(this.handleEl);		addResizeBottom(this.options.id);		// Add content to panel.		MochaUI.updateContent({			''element'': this.panelEl,			''content'':  this.options.content,			''url'':      this.options.contentURL		});		MochaUI.panelHeight(this.options.column, this.panelEl, ''new'');	}});MochaUI.Panel.implement(new Options, new Events);MochaUI.extend({	// Panel Height		panelHeight: function(column, changing, action){		if (column != null) {			MochaUI.panelHeight2($(column), changing, action);		}		else {			$$(''.column'').each(function(column){				MochaUI.panelHeight2(column);			}.bind(this));		}	},	/*	actions can be new, collapsing or expanding.	*/	panelHeight2: function(column, changing, action){			var instances = MochaUI.Panels.instances;						var parent = column.getParent();			var columnHeight = parent.getStyle(''height'').toInt();			if (Browser.Engine.trident4){				columnHeight -= 1;			}			column.setStyle(''height'', columnHeight);			var panels = column.getChildren(''.panel'');            // All the panels in the column.			var panelsExpanded = column.getChildren(''.expanded''); // All the expanded panels in the column.			var panelsToResize = [];    // All the panels in the column whose height will be effected.			var tallestPanel;           // The panel with the greatest height			var tallestPanelHeight = 0;			this.panelsHeight = 0;		// Height of all the panels in the column				this.height = 0;            // Height of all the elements in the column				// Set panel resize partners			panels.each(function(panel){				currentInstance = instances.get(panel.id);				if (panel.hasClass(''expanded'') &amp;&amp; panel.getNext(''.expanded'')){					currentInstance.partner = panel.getNext(''.expanded'');					currentInstance.resize.attach();					currentInstance.handleEl.setStyles({						''display'': ''block'',						''cursor'': ''n-resize''					}).removeClass(''detached'');				}				else {					currentInstance.resize.detach();					currentInstance.handleEl.setStyle(''cursor'', null).addClass(''detached'');				}				if (panel.getNext(''.panel'') == null){					currentInstance.handleEl.setStyle(''display'', ''none'');				}			}.bind(this));						// Get the total height of all the column''s children			column.getChildren().each(function(el){				if (el.hasClass(''panel'')){					var currentInstance = instances.get(el.id);					// Are any next siblings Expanded?					areAnyNextSiblingsExpanded = function(el){						var test;						el.getAllNext(''.panel'').each(function(sibling){							var siblingInstance = instances.get(sibling.id);							if (siblingInstance.isCollapsed == false){								test = true;							}						}.bind(this));						return test;					}.bind(this);					// If a next sibling is expanding, are any of the nexts siblings of the expanding sibling Expanded?					areAnyExpandingNextSiblingsExpanded = function(){						var test;						changing.getAllNext(''.panel'').each(function(sibling){							var siblingInstance = instances.get(sibling.id);							if (siblingInstance.isCollapsed == false){								test = true;							}						}.bind(this));						return test;					}.bind(this);										// Resize panels that are not collapsed or "new"					if (action == ''new'' ) {						if (currentInstance.isCollapsed != true &amp;&amp; el != changing) {							panelsToResize.push(el);						}												// Height of panels that can be resized						if (currentInstance.isCollapsed != true &amp;&amp; el != changing) {							this.panelsHeight += el.offsetHeight.toInt();						}					}					// Resize panels that are not collapsed. If a panel is collapsing					// resize any expanded panels below. If there are no expanded panels					// below it, resize the expanded panels above it.					else if (action == null || action == ''collapsing'' ){						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || areAnyNextSiblingsExpanded(el) != true)){							panelsToResize.push(el);						}												// Height of panels that can be resized						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || areAnyNextSiblingsExpanded(el) != true)){							this.panelsHeight += el.offsetHeight.toInt();						}					}					// Resize panels that are not collapsed and are not expanding.					// Resize any expanded panels below the expanding panel. If there are no expanded panels					// below it, resize the first expanded panel above it.					else if (action == ''expanding''){						   						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || (areAnyExpandingNextSiblingsExpanded() != true &amp;&amp; el.getNext(''.expanded'') == changing)) &amp;&amp; el != changing){							panelsToResize.push(el);						}						// Height of panels that can be resized						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || (areAnyExpandingNextSiblingsExpanded() != true &amp;&amp; el.getNext(''.expanded'') == changing)) &amp;&amp; el != changing){							this.panelsHeight += el.offsetHeight.toInt();						}					}					if (el.style.height){						this.height += el.getStyle(''height'').toInt();					}				}				else {					this.height += el.offsetHeight.toInt();				}			}.bind(this));			// Get the remaining height			var remainingHeight = column.offsetHeight.toInt() - this.height;						this.height = 0;			// Get height of all the column''s children			column.getChildren().each(function(el){				this.height += el.offsetHeight.toInt();			}.bind(this));							var remainingHeight = column.offsetHeight.toInt() - this.height;			panelsToResize.each(function(panel){				var ratio = this.panelsHeight / panel.offsetHeight.toInt();				var newPanelHeight = panel.getStyle(''height'').toInt() + (remainingHeight / ratio);				if (newPanelHeight &lt; 1){					newPanelHeight = 0;				}				panel.setStyle(''height'', newPanelHeight);			}.bind(this));				// Make sure the remaining height is 0. If not add/subtract the			// remaining height to the tallest panel. This makes up for browser resizing,			// off ratios, and users trying to give panels too much height.						// Get height of all the column''s children			this.height = 0;			column.getChildren().each(function(el){				this.height += el.offsetHeight.toInt();				if (el.hasClass(''panel'') &amp;&amp; el.getStyle(''height'').toInt() &gt; tallestPanelHeight){					tallestPanel = el;					tallestPanelHeight = el.getStyle(''height'').toInt();				}			}.bind(this));			var remainingHeight = column.offsetHeight.toInt() - this.height;			if ((remainingHeight &gt; 0 || remainingHeight &lt; 0) &amp;&amp; tallestPanelHeight &gt; 0){				tallestPanel.setStyle(''height'', tallestPanel.getStyle(''height'').toInt() + remainingHeight );				if (tallestPanel.getStyle(''height'') &lt; 1){					tallestPanel.setStyle(''height'', 0 );				}			}			$$(''.columnHandle'').each(function(handle){				var handleHeight = parent.getStyle(''height'').toInt() - handle.getStyle(''border-top'').toInt() - handle.getStyle(''border-bottom'').toInt();				if (Browser.Engine.trident4){					handleHeight -= 1;				}				handle.setStyle(''height'', handleHeight);			});						panelsExpanded.each(function(panel){				MochaUI.resizeChildren(panel);			}.bind(this));	},	// May rename this resizeIframeEl()	resizeChildren: function(panel){		var instances = MochaUI.Panels.instances;		var currentInstance = instances.get(panel.id);		var contentWrapperEl = currentInstance.contentWrapperEl;		if (currentInstance.iframeEl){			currentInstance.iframeEl.setStyles({				''height'': contentWrapperEl.getStyle(''height''),				''width'': contentWrapperEl.offsetWidth - contentWrapperEl.getStyle(''border-left'').toInt() - contentWrapperEl.getStyle(''border-right'').toInt()			});		}	},	// Remaining Width	rWidth: function(){			$$(''.rWidth'').each(function(column){			var currentWidth = column.offsetWidth.toInt();			currentWidth -= column.getStyle(''border-left'').toInt();			currentWidth -= column.getStyle(''border-right'').toInt();			var parent = column.getParent();			this.width = 0;						// Get the total width of all the parent element''s children			parent.getChildren().each(function(el){				if (el.hasClass(''mocha'') != true){					this.width += el.offsetWidth.toInt();				}			}.bind(this));					// Add the remaining width to the current element			var remainingWidth = parent.offsetWidth.toInt() - this.width;			var newWidth =	currentWidth + remainingWidth;			if (newWidth &lt; 1) newWidth = 0;			column.setStyle(''width'', newWidth);			column.getChildren(''.panel'').each(function(panel){				panel.setStyle(''width'', newWidth - panel.getStyle(''border-left'').toInt() - panel.getStyle(''border-right'').toInt());				MochaUI.resizeChildren(panel);			}.bind(this));		});	}});function addResizeRight(element, min, max){	if (!$(element)) return;	element = $(element);	var instances = MochaUI.Columns.instances;	var currentInstance = instances.get(element.id);	var handle = element.getNext(''.columnHandle'');	handle.setStyle(''cursor'', ''e-resize'');		if (!min) min = 50;	if (!max) max = 250;	if (Browser.Engine.trident){		handle.addEvents({			''mousedown'': function(){				handle.setCapture();			},			''mouseup'': function(){				handle.releaseCapture();			}		});	}	currentInstance.resize = element.makeResizable({		handle: handle,		modifiers: {x: ''width'', y: false},		limit: { x: [min, max] },		onStart: function(){			element.getElements(''iframe'').setStyle(''visibility'',''hidden'');			element.getNext(''.column'').getElements(''iframe'').setStyle(''visibility'',''hidden'');		}.bind(this),		onDrag: function(){			MochaUI.rWidth();			if (Browser.Engine.trident4){				element.getChildren().each(function(el){					var width = $(element).getStyle(''width'').toInt();					width -= el.getStyle(''border-right'').toInt();					width -= el.getStyle(''border-left'').toInt();					width -= el.getStyle(''padding-right'').toInt();					width -= el.getStyle(''padding-left'').toInt();					el.setStyle(''width'', width);				}.bind(this));			}								}.bind(this),		onComplete: function(){			MochaUI.rWidth();			element.getElements(''iframe'').setStyle(''visibility'',''visible'');			element.getNext(''.column'').getElements(''iframe'').setStyle(''visibility'',''visible'');			currentInstance.fireEvent(''onResize'');		}.bind(this)	});	}function addResizeLeft(element, min, max){	if (!$(element)) return;	element = $(element);	var instances = MochaUI.Columns.instances;	var currentInstance = instances.get(element.id);	var handle = element.getPrevious(''.columnHandle'');	handle.setStyle(''cursor'', ''e-resize'');	var partner = element.getPrevious(''.column'');	if (!min) min = 50;	if (!max) max = 250;	if (Browser.Engine.trident){			handle.addEvents({			''mousedown'': function(){				handle.setCapture();			},				''mouseup'': function(){				handle.releaseCapture();			}		});	}	currentInstance.resize = element.makeResizable({		handle: handle,		modifiers: {x: ''width'' , y: false},		invert: true,		limit: { x: [min, max] },		onStart: function(){			$(element).getElements(''iframe'').setStyle(''visibility'',''hidden'');			partner.getElements(''iframe'').setStyle(''visibility'',''hidden'');		}.bind(this),		onDrag: function(){			MochaUI.rWidth();		}.bind(this),		onComplete: function(){			MochaUI.rWidth();			$(element).getElements(''iframe'').setStyle(''visibility'',''visible'');			partner.getElements(''iframe'').setStyle(''visibility'',''visible'');			currentInstance.fireEvent(''onResize'');		}.bind(this)	});}function addResizeBottom(element){	if (!$(element)) return;	var element = $(element);		var instances = MochaUI.Panels.instances;	var currentInstance = instances.get(element.id);	var handle = currentInstance.handleEl;	handle.setStyle(''cursor'', ''n-resize'');	partner = currentInstance.partner;	min = 0;	max = function(){		return element.getStyle(''height'').toInt() + partner.getStyle(''height'').toInt();	}.bind(this);		if (Browser.Engine.trident){			handle.addEvents({			''mousedown'': function(){				handle.setCapture();			},				''mouseup'': function(){				handle.releaseCapture();			}		});	}	currentInstance.resize = element.makeResizable({		handle: handle,		modifiers: {x: false, y: ''height''},		limit: { y: [min, max] },		invert: false,		onBeforeStart: function(){			partner = currentInstance.partner;			this.originalHeight = element.getStyle(''height'').toInt();			this.partnerOriginalHeight = partner.getStyle(''height'').toInt();		}.bind(this),		onStart: function(){			if (currentInstance.iframeEl) {				currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');			}			partner.getElements(''iframe'').setStyle(''visibility'',''hidden'');		}.bind(this),		onDrag: function(){			partnerHeight = partnerOriginalHeight + (this.originalHeight - element.getStyle(''height'').toInt());			partner.setStyle(''height'', partnerHeight);			MochaUI.resizeChildren(element, element.getStyle(''height'').toInt());			MochaUI.resizeChildren(partner, partnerHeight);		}.bind(this),		onComplete: function(){			partnerHeight = partnerOriginalHeight + (this.originalHeight - element.getStyle(''height'').toInt());			partner.setStyle(''height'', partnerHeight);			MochaUI.resizeChildren(element, element.getStyle(''height'').toInt());			MochaUI.resizeChildren(partner, partnerHeight);			if (currentInstance.iframeEl) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}			partner.getElements(''iframe'').setStyle(''visibility'',''visible'');			currentInstance.fireEvent(''onResize'');		}.bind(this)	});}'</body><body package="Mootools-MochaUI">workspacesJs	^'/*Script: Workspaces.js	Save and load workspaces. The Workspaces emulate Adobe Illustrator functionality remembering what windows are open and where they are positioned. There will be two versions, a limited version that saves state to a cookie, and a fully functional version that saves state to a database.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.Requires:	Core.js, Window.jsTo do:	- Move to Window*/MochaUI.extend({			   	/*		Function: saveWorkspace		Save the current workspace.		Syntax:	(start code)		MochaUI.saveWorkspace();	(end)		Notes:		This is experimental. This version saves the ID of each open window to a cookie, and reloads those windows using the functions in mocha-init.js. This requires that each window have a function in mocha-init.js used to open them. Functions must be named the windowID + "Window". So if your window is called mywindow, it needs a function called mywindowWindow in mocha-init.js.		*/	saveWorkspace: function(){		this.cookie = new Hash.Cookie(''mochaUIworkspaceCookie'', {duration: 3600});		this.cookie.empty();		MochaUI.Windows.instances.each(function(instance) {			instance.saveValues();			this.cookie.set(instance.options.id, {				''id'': instance.options.id,				''top'': instance.options.y,				''left'': instance.options.x			});		}.bind(this));		this.cookie.save();		new MochaUI.Window({			loadMethod: ''html'',			type: ''notification'',			addClass: ''notification'',			content: ''Workspace saved.'',			closeAfter: ''1400'',			width: 200,			height: 40,			y: 53,			padding:  { top: 10, right: 12, bottom: 10, left: 12 },			shadowBlur: 5,			bodyBgColor: [255, 255, 255]		});			},	windowUnload: function(){		if ($$(''div.mocha'').length == 0 &amp;&amp; this.myChain){			this.myChain.callChain();		}			},	loadWorkspace2: function(workspaceWindows){				workspaceWindows.each(function(instance){			windowFunction = eval(''MochaUI.'' + instance.id + ''Window'');			if (windowFunction){				eval(''MochaUI.'' + instance.id + ''Window();'');				$(instance.id).setStyles({					top: instance.top,					left: instance.left				});			}		}.bind(this));		this.loadingWorkspace = false;	},	/*	Function: loadWorkspace		Load the saved workspace.	Syntax:	(start code)		MochaUI.loadWorkspace();	(end)	*/	loadWorkspace: function(){		cookie = new Hash.Cookie(''mochaUIworkspaceCookie'', {duration: 3600});		workspaceWindows = cookie.load();		if(!cookie.getKeys().length){			new MochaUI.Window({				loadMethod: ''html'',				type: ''notification'',				addClass: ''notification'',				content: ''You have no saved workspace.'',				closeAfter: ''1400'',				width: 220,				height: 40,				y: 25,				padding:  { top: 10, right: 12, bottom: 10, left: 12 },				shadowBlur: 5,				bodyBgColor: [255, 255, 255]			});			return;		}		if ($$(''div.mocha'').length != 0){			this.loadingWorkspace = true;			this.myChain = new Chain();			this.myChain.chain(				function(){					$$(''div.mocha'').each(function(el) {						this.closeWindow(el);					}.bind(this));				}.bind(this),				function(){					this.loadWorkspace2(workspaceWindows);				}.bind(this)			);			this.myChain.callChain();		}		else {			this.loadWorkspace2(workspaceWindows);		}	}});'</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>plugins/</category><body package="Mootools-MochaUI">coolclockJs	^'/*CoolClock by Simon Baird (simon dot baird at gmail dot com)Version 1.0.4 (09-Nov-2006)See http://simonbaird.com/coolclock/Copyright (c) Simon Baird 2006Redistribution and use in source and binary forms, with or without modification,are permitted provided that the following conditions are met:Redistributions of source code must retain the above copyright notice, thislist of conditions and the following disclaimer.Redistributions in binary form must reproduce the above copyright notice, thislist of conditions and the following disclaimer in the documentation and/or othermaterials provided with the distribution.Neither the name of the Simon Baird nor the names of other contributors may beused to endorse or promote products derived from this software without specificprior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANYEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIESOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENTSHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITEDTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; ORBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER INCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING INANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCHDAMAGE.*/window.CoolClock = function(canvasId,displayRadius,skinId,showSecondHand,gmtOffset) {	return this.init(canvasId,displayRadius,skinId,showSecondHand,gmtOffset);}CoolClock.findAndCreateClocks = function() {	var canvases = document.getElementsByTagName("canvas");	for (var i=0;i&lt;canvases.length;i++) {		var fields = canvases[i].className.split(" ")[0].split(":");		if (fields[0] == "CoolClock") {			new CoolClock(canvases[i].id,fields[2],fields[1],fields[3]!="noSeconds",fields[4]);		}	}}CoolClock.config = {	clockTracker: {},	tickDelay: 1000,	longTickDelay: 15000,	defaultRadius: 85,	renderRadius: 100,	defaultSkin: "swissRail",	skins:	{		// more skins in moreskins.js		// try making your own...		swissRail: {			outerBorder: { lineWidth: 1, radius:95, color: "black", alpha: 1 },			smallIndicator: { lineWidth: 2, startAt: 89, endAt: 93, color: "black", alpha: 1 },			largeIndicator: { lineWidth: 4, startAt: 80, endAt: 93, color: "black", alpha: 1 },			hourHand: { lineWidth: 8, startAt: -15, endAt: 50, color: "black", alpha: 1 },			minuteHand: { lineWidth: 7, startAt: -15, endAt: 75, color: "black", alpha: 1 },			secondHand: { lineWidth: 1, startAt: -20, endAt: 85, color: "red", alpha: 1 },			secondDecoration: { lineWidth: 1, startAt: 70, radius: 4, fillColor: "red", color: "red", alpha: 1 }		},		chunkySwiss: {			outerBorder: { lineWidth: 4, radius:97, color: "black", alpha: 1 },			smallIndicator: { lineWidth: 4, startAt: 89, endAt: 93, color: "black", alpha: 1 },			largeIndicator: { lineWidth: 8, startAt: 80, endAt: 93, color: "black", alpha: 1 },			hourHand: { lineWidth: 12, startAt: -15, endAt: 60, color: "black", alpha: 1 },			minuteHand: { lineWidth: 10, startAt: -15, endAt: 85, color: "black", alpha: 1 },			secondHand: { lineWidth: 4, startAt: -20, endAt: 85, color: "red", alpha: 1 },			secondDecoration: { lineWidth: 2, startAt: 70, radius: 8, fillColor: "red", color: "red", alpha: 1 }		},		chunkySwissOnBlack: {			outerBorder: { lineWidth: 4, radius:97, color: "white", alpha: 1 },			smallIndicator: { lineWidth: 4, startAt: 89, endAt: 93, color: "white", alpha: 1 },			largeIndicator: { lineWidth: 8, startAt: 80, endAt: 93, color: "white", alpha: 1 },			hourHand: { lineWidth: 12, startAt: -15, endAt: 60, color: "white", alpha: 1 },			minuteHand: { lineWidth: 10, startAt: -15, endAt: 85, color: "white", alpha: 1 },			secondHand: { lineWidth: 4, startAt: -20, endAt: 85, color: "red", alpha: 1 },			secondDecoration: { lineWidth: 2, startAt: 70, radius: 8, fillColor: "red", color: "red", alpha: 1 }		},		mochaUI: {			outerBorder: { lineWidth: 185, radius:1, color: "#000", alpha: 0 },			smallIndicator: { lineWidth: 3, startAt: 88, endAt: 94, color: "#595959", alpha: 1 },			largeIndicator: { lineWidth: 3, startAt: 82, endAt: 94, color: "#ddd", alpha: 1 },			hourHand: { lineWidth: 4, startAt: 0, endAt: 58, color: "#fff", alpha: 1 },			minuteHand: { lineWidth: 4, startAt: 0, endAt: 78, color: "#fff", alpha: 1 },			secondHand: { lineWidth: 4, startAt: 82, endAt: 94, color: "#98B8D9", alpha: 1 },			secondDecoration: { lineWidth: 3, startAt: 0, radius: 6, fillColor: "white", color: "white", alpha: 1 }		},		mochaUI2: {			outerBorder: { lineWidth: 6, radius:98, color: "#fff", alpha: 0 },			smallIndicator: { lineWidth: 2, startAt: 86, endAt: 91, color: "#555", alpha: 1 },			largeIndicator: { lineWidth: 3, startAt: 80, endAt: 91, color: "#555", alpha: 1 },			hourHand: { lineWidth: 4, startAt: -1, endAt: 56, color: "#141414", alpha: 1 },			minuteHand: { lineWidth: 4, startAt: -1, endAt: 78, color: "#141414", alpha: 1 },			secondHand: { lineWidth: 1, startAt: -16, endAt: 80, color: "#ce1717", alpha: 1 },			secondDecoration: { lineWidth: 2, startAt: 0, radius: 7, fillColor: "#fff", color: "#ce1717", alpha: 0 }		},		mochaUI3: {			outerBorder: { lineWidth: 185, radius:1, color: "#000", alpha: 0 },			smallIndicator: { lineWidth: 3, startAt: 88, endAt: 94, color: "#2CC2D1", alpha: 1 },			largeIndicator: { lineWidth: 3, startAt: 82, endAt: 94, color: "#1BFFD9", alpha: 1 },			hourHand: { lineWidth: 4, startAt: 0, endAt: 58, color: "#fff", alpha: 1 },			minuteHand: { lineWidth: 4, startAt: 0, endAt: 78, color: "#fff", alpha: 1 },			secondHand: { lineWidth: 4, startAt: 82, endAt: 94, color: "#EFCD5F", alpha: 1 },			secondDecoration: { lineWidth: 0, startAt: 0, radius: 6, fillColor: "#fff", color: "#000", alpha: 1 }		},		mochaUI4: {			outerBorder: { lineWidth: 185, radius:1, color: "#000", alpha: 0 },			smallIndicator: { lineWidth: 3, startAt: 88, endAt: 94, color: "#C7C3B7", alpha: 1 },			largeIndicator: { lineWidth: 3, startAt: 82, endAt: 94, color: "#C7C3B7", alpha: 1 },			hourHand: { lineWidth: 4, startAt: -1, endAt: 58, color: "#C7C3B7", alpha: 1 },			minuteHand: { lineWidth: 4, startAt: -1, endAt: 78, color: "#C7C3B7", alpha: 1 },			secondHand: { lineWidth: 3, startAt: 82, endAt: 94, color: "#ce1717", alpha: 1 },			secondDecoration: { lineWidth: 0, startAt: 0, radius: 6, fillColor: "#999", color: "#000", alpha: 0 }		}	}};CoolClock.prototype = {	init: function(canvasId,displayRadius,skinId,showSecondHand,gmtOffset) {		this.canvasId = canvasId;		this.displayRadius = displayRadius || CoolClock.config.defaultRadius;		this.skinId = skinId || CoolClock.config.defaultSkin;		this.showSecondHand = typeof showSecondHand == "boolean" ? showSecondHand : true;		this.tickDelay = CoolClock.config[ this.showSecondHand ? "tickDelay" : "longTickDelay"];		this.canvas = document.getElementById(canvasId);				if ( Browser.Engine.trident ) {			G_vmlCanvasManager.initElement(this.canvas);		}		this.canvas = document.getElementById(canvasId);			this.canvas.setAttribute("width",this.displayRadius*2);		this.canvas.setAttribute("height",this.displayRadius*2);		this.canvas.style.width = this.displayRadius*2 + "px";		this.canvas.style.height = this.displayRadius*2 + "px";		this.renderRadius = CoolClock.config.renderRadius; 		this.scale = this.displayRadius / this.renderRadius;		this.ctx = this.canvas.getContext("2d");		this.ctx.scale(this.scale,this.scale);		this.gmtOffset = gmtOffset != null ? parseFloat(gmtOffset) : gmtOffset;		CoolClock.config.clockTracker[canvasId] = this;		this.initializing = true;		this.tick();		return this;	},	fullCircle: function(skin) {		this.fullCircleAt(this.renderRadius,this.renderRadius,skin);	},	fullCircleAt: function(x,y,skin) {		with (this.ctx) {			save();			globalAlpha = skin.alpha;			lineWidth = skin.lineWidth;			if (document.all)				// excanvas doesn''t scale line width so we will do it here				lineWidth = lineWidth * this.scale;			beginPath();				arc(x, y, skin.radius, 0, 2*Math.PI, false);			closePath();					if (document.all)				// excanvas doesn''t close the circle so let''s color in the gap				arc(x, y, skin.radius, -0.1, 0.1, false);			if (skin.fillColor) {				fillStyle = skin.fillColor				fill();			}			if (skin.color) {				// XXX why not stroke and fill				strokeStyle = skin.color;				stroke();			}			restore();		}	},	reflection: function(){		with (this.ctx) {  			beginPath();   			fillStyle = ''rgba(250, 250, 250, .4)'';    			arc(100, 100, 98, 0, Math.PI, true);  			bezierCurveTo(60, 80, 160, 80, 196, 100);      			fill();		}	},	bgGradient: function(){		var lingrad = this.ctx.createLinearGradient(0, 0, 0, 200);		lingrad.addColorStop(0, ''rgba(190, 190, 190, 1)'');		lingrad.addColorStop(1, ''rgba(230, 230, 230, 1)'');		with (this.ctx) {			fillStyle = lingrad;						beginPath();						arc(100, 100, 99, 0, 2*Math.PI, false);			closePath();			fill();		}	},	center: function(){		with (this.ctx) {			beginPath();			fillStyle = "#fff";			arc(100, 100, 7, 0, 2 * Math.PI, false);			fill();			strokeStyle = "#ce1717";			lineWidth = 2;			arc(100, 100, 7, 0, 2 * Math.PI, false);			stroke();					}	},	radialLineAtAngle: function(angleFraction,skin) {		with (this.ctx) {			save();			translate(this.renderRadius,this.renderRadius);			rotate(Math.PI * (2 * angleFraction - 0.5));			globalAlpha = skin.alpha;			strokeStyle = skin.color;			lineWidth = skin.lineWidth;			if (document.all)				// excanvas doesn''t scale line width so we will do it here				lineWidth = lineWidth * this.scale;			if (skin.radius) {				this.fullCircleAt(skin.startAt,0,skin)			}			else {				beginPath();				moveTo(skin.startAt,0)				lineTo(skin.endAt,0);				stroke();			}			restore();		}	},	render: function(hour,min,sec) {		var skin = CoolClock.config.skins[this.skinId];		this.ctx.clearRect(0,0,this.renderRadius*2,this.renderRadius*2);		this.bgGradient();		//this.fullCircle(skin.outerBorder);		for (var i=0;i&lt;60;i++)			this.radialLineAtAngle(i/60,skin[ i%5 ? "smallIndicator" : "largeIndicator"]);		this.radialLineAtAngle((hour+min/60)/12,skin.hourHand);		this.radialLineAtAngle((min+sec/60)/60,skin.minuteHand);		if (this.showSecondHand) {			this.radialLineAtAngle(sec/60,skin.secondHand);			if (!document.all)				// decoration doesn''t render right in IE so lets turn it off				this.radialLineAtAngle(sec/60,skin.secondDecoration);		}		this.center();		this.reflection();	},	nextTick: function() {		setTimeout("CoolClock.config.clockTracker[''"+this.canvasId+"''].tick()",this.tickDelay);	},	stillHere: function() {		return document.getElementById(this.canvasId) != null;	},	refreshDisplay: function() {		var now = new Date();		if (this.gmtOffset != null) {			// use GMT + gmtOffset			var offsetNow = new Date(now.valueOf() + (this.gmtOffset * 1000 * 60 * 60));			this.render(offsetNow.getUTCHours(),offsetNow.getUTCMinutes(),offsetNow.getUTCSeconds());		}		else {			// use local time			var hours = now.getHours();			var minutes = now.getMinutes();			var seconds = now.getSeconds();			var time;			this.refreshTime(hours, minutes, seconds);			this.render(hours,minutes,seconds);		}	},	refreshTime: function(hours, minutes, seconds){		var now = new Date();				var time;		if (hours &gt;= 12) {			time = " PM";		}		else {			time = " AM";		}		if (hours &gt; 12) {			hours -= 12;		}		if (hours == 0) {			hours = 12;		}		if (minutes &lt; 10) {			minutes = "0" + minutes;		}		if (seconds == 0 || this.initializing == true){			$(''clock_title'').set(''html'', hours + ":" + minutes + time);			if ($(''clock_dockTabText'')){				$(''clock_dockTabText'').set(''html'', hours + ":" + minutes + time);			}			this.initializing = false;		}	},	tick: function() {		if (this.stillHere()) {			this.refreshDisplay()			this.nextTick();		}	}}'</body><body package="Mootools-MochaUI">parametricsJs	^'/*Script: Parametrics.js	Initializes the GUI property sliders.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.Requires:	Core.js, Window.js*/MochaUI.extend({	addRadiusSlider: function(){		if ($(''radiusSliderarea'')) {			var windowOptions = MochaUI.Windows.windowOptions;			var sliderFirst = true;			var mochaSlide = new Slider($(''radiusSliderarea''), $(''radiusSliderknob''), {				steps: 14,				offset: 0,				onChange: function(pos){					$(''radiusUpdatevalue'').set(''html'', pos);					// Change default corner radius of the original class					windowOptions.cornerRadius = pos;					MochaUI.Window.implement({ options: windowOptions });					// Don''t redraw windows the first time the slider is initialized					if (sliderFirst == true) {						sliderFirst = false;						return;					}					// Change corner radius of all active classes and their windows					MochaUI.Windows.instances.each(function(instance) {						instance.options.cornerRadius = pos;						instance.drawWindow($(instance.options.id));					}.bind(this));					MochaUI.Windows.indexLevel++;				}.bind(this)			}).set(windowOptions.cornerRadius);		}	},	addShadowSlider: function(){		if ($(''shadowSliderarea'')){			var windowOptions = MochaUI.Windows.windowOptions;			var sliderFirst = true;			var mochaSlide = new Slider($(''shadowSliderarea''), $(''shadowSliderknob''), {				range: [1, 10],				offset: 0,				onStart: function(){					// Set variable to adjust position in relation to shadow width					MochaUI.Windows.instances.each(function(instance) {						instance.adjusted = false;					}.bind(this));							}.bind(this),				onChange: function(pos){					$(''shadowUpdatevalue'').set(''html'', pos);					// Change default shadow width of the original class					windowOptions.shadowBlur = pos;					MochaUI.Window.implement({ options: windowOptions });					// Don''t redraw windows the first time the slider is initialized					// !!! Probably need to make this separate from the corner radius slider					if (sliderFirst == true) { 						sliderFirst = false;						return;					}					// Change shadow width of all active classes and their windows					MochaUI.Windows.instances.each(function(instance) {						instance.oldshadowBlur = instance.options.shadowBlur;						instance.options.shadowBlur = pos;						instance.windowEl.setStyles({							''top'': instance.windowEl.getStyle(''top'').toInt() - (instance.options.shadowBlur - instance.oldshadowBlur),							''left'': instance.windowEl.getStyle(''left'').toInt() - (instance.options.shadowBlur - instance.oldshadowBlur)						});						instance.drawWindow($(instance.options.id));					}.bind(this));					MochaUI.Windows.indexLevel++; 				}.bind(this),				onComplete: function(){					MochaUI.Windows.instances.each(function(instance) {						if (instance.options.resizable){							instance.adjustHandles();						}					}.bind(this));				}.bind(this)			}).set(windowOptions.shadowBlur);		}	}});'</body><body package="Mootools-MochaUI">treeJs	^'/*Script: Tree.js	Create folder trees.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	*/function buildTree(treeID){	$$(''#''+treeID+'' li.folder'').each(function(folder){		var folderContents = folder.getChildren(''ul'');		var folderImage = new Element(''img'', {			''src'': "', (MochaLibrary / #openGif) greaseString, '",			''width'': 18,			''height'': 18		}).inject(folder, ''top'');		// Determine which open and close graphic each folder gets				if (folder.hasClass(''root'')) {			folder.minus = "', (MochaLibrary / #RminusGif) greaseString, '"			folder.plus = "', (MochaLibrary / #RplusGif) greaseString, '"		}		else 			if (folder.getNext()) {				folder.minus = "', (MochaLibrary / #TminusGif) greaseString, '"				folder.plus = "', (MochaLibrary / #TplusGif) greaseString, '"			}			else {				folder.minus = "', (MochaLibrary / #LminusGif) greaseString, '"				folder.plus = "', (MochaLibrary / #LplusGif) greaseString, '"			}				var image = new Element(''img'', {			''src'': folder.minus,			''width'': 18,			''height'': 18		}).addEvent(''click'', function(){			if (folder.hasClass(''f-open'')) {				image.setProperty(''src'', folder.plus);				folderImage.setProperty(''src'', "', (MochaLibrary / #closedGif) greaseString, '");				folderContents.each(function(el){					el.setStyle(''display'', ''none'');				});				folder.removeClass(''f-open'');			}			else {				image.setProperty(''src'', folder.minus);				folderImage.setProperty(''src'', "', (MochaLibrary / #openGif) greaseString, '");				folderContents.each(function(el){					el.setStyle(''display'', ''block'');				});				folder.addClass(''f-open'');			}		}).inject(folder, ''top'');				if (!folder.hasClass(''f-open'')) {			image.setProperty(''src'', folder.plus);			folderContents.each(function(el){				el.setStyle(''display'', ''none'');			});			folder.removeClass(''f-open'');		}		// Add connecting branches to each file node		folderContents.each(function(element){			var docs = element.getChildren(''li.doc'');			docs.each(function(el){				if (el == docs.getLast() &amp;&amp; !el.getNext()) {					new Element(''img'', {						''src'': "', (MochaLibrary / #LGif) greaseString, '",						''width'': 18,						''height'': 18					}).inject(el.getElement(''span''), ''before'');				}				else {					new Element(''img'', {						''src'': "', (MochaLibrary / #TGif) greaseString, '",						''width'': 18,						''height'': 18					}).inject(el.getElement(''span''), ''before'');				}			});		});			});		// Add connecting branches to each node	$$(''#''+treeID+'' li'').each(function(node){		node.getParents(''li'').each(function(parent){			if (parent.getNext()) {				new Element(''img'', {					''src'': "', (MochaLibrary / #lGif) greaseString, '",					''width'': 18,					''height'': 18				}).inject(node, ''top'');			}			else {				new Element(''img'', {					''src'': "', (MochaLibrary / #spacerGif) greaseString, '",					''width'': 18,					''height'': 18				}).inject(node, ''top'');			}		});	});	$$(''#''+treeID+'' li.doc'').each(function(el){		new Element(''img'', {			''src'': "', (MochaLibrary / #docGif) greaseString, '",			''width'': 18,			''height'': 18		}).inject(el.getElement(''span''), ''before'');	});	}'</body><body package="Mootools-MochaUI">windowFromFormJs	^'/*Script: Window-from-form.js	Create a window from a form.	Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Requires:	Core.js, Window.js	See Also:	&lt;Window&gt;	*/MochaUI.WindowForm = new Class({	options: {		id: null,		title: ''New Window'',		loadMethod: ''html'', 		content: '''',		contentURL: ''pages/lipsum.html'',		type: ''window'',		width: 300,		height: 125,		scrollbars: true,		x: null,		y: null	},	initialize: function(options){		this.setOptions(options);		this.options.id = ''win'' + (++MochaUI.Windows.windowIDCount);		this.options.title = $(''newWindowHeaderTitle'').value;		if ($(''htmlLoadMethod'').checked){			this.options.loadMethod = ''html'';		}		if ($(''iframeLoadMethod'').checked){			this.options.loadMethod = ''iframe'';		}		this.options.content = $(''newWindowContent'').value;				// Remove eval(), javascript:, and script from User Provided Markup				this.options.content = this.options.content.replace(/\&lt;(.*)script(.*)\&lt;\/(.*)script(.*)\&gt;/g, "");     	this.options.content = this.options.content.replace(/[\"\''][\s]*javascript:(.*)[\"\'']/g, "\"\"");        	this.options.content = this.options.content.replace(/eval\((.*)\)/g, "");						if ($(''newWindowContentURL'').value){			this.options.contentURL = $(''newWindowContentURL'').value;		}				if ($(''newWindowModal'').checked) {			this.options.type = ''modal'';		}		this.options.width = $(''newWindowWidth'').value.toInt();		this.options.height = $(''newWindowHeight'').value.toInt();			this.options.x = $(''newWindowX'').value.toInt();		this.options.y = $(''newWindowY'').value.toInt();		new MochaUI.Window(this.options);	}});MochaUI.WindowForm.implement(new Options);'</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>scripts/source/Core/</category><body package="Mootools-MochaUI">coreJs	^'/* Script: Core.js	MochaUI - A Web Applications User Interface Framework.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.Contributors:	- Scott F. Frederick	- Joel LindauNote:	This documentation is taken directly from the javascript source files. It is built using Natural Docs.Todo:	Consider making title tooltips optional and using them more often.*/var MochaUI = new Hash({	options: new Hash({		useEffects: true  // Toggles the majority of window fade and move effects.	}),	Columns: {		instances:      new Hash()	},	Panels: {		instances:      new Hash()	},			Windows: {	  		instances:      new Hash(),		indexLevel:     100,          // Used for z-Index		windowIDCount:  0,	          // Used for windows without an ID defined by the user		windowsVisible: true          // Ctrl-Alt-Q to toggle window visibility	},		ieSupport:  ''excanvas'',   // Makes it easier to switch between Excanvas and Moocanvas for testing	focusingWindow: ''false'',	/*		Function: updateContent		Replace the content of a window or panel.			Arguments:		element - The parent window or panel.		childElement - The child element of the window or panel recieving the content.		title - (string) Change this if you want to change the title of the window or panel.		content - (string or element) An html loadMethod option.		loadMethod - (''html'', ''xhr'', or ''iframe'') Defaults to ''html''.		url - Used if loadMethod is set to ''xhr'' or ''iframe''.		padding - (object)	*/		updateContent: function(updateOptions){		var options = {			''element'':      null,			''childElement'': null,			''title'':        null,			''content'':      null,			''loadMethod'':   null,			''url'':          null,			''padding'':      null		};		$extend(options, updateOptions);		if (!options.element) return;		var element = options.element;		if (MochaUI.Windows.instances.get(element.id)) {			var recipient = ''window'';			var currentInstance = MochaUI.Windows.instances.get(element.id);			var spinnerEl = currentInstance.spinnerEl;			if (options.title) {				currentInstance.titleEl.set(''html'', options.title);			}		}		else {			var recipient = ''panel'';			var currentInstance = MochaUI.Panels.instances.get(element.id);			if (options.title) {				currentInstance.titleEl.set(''html'', options.title);			}		}		var contentEl = currentInstance.contentEl;		if (options.childElement != null) {			var contentContainer = options.childElement;		}		else {			var contentContainer = currentInstance.contentEl;		}				var loadMethod = options.loadMethod != null ? options.loadMethod : currentInstance.options.loadMethod;				// Set scrollbars if loading content in main content container.		// Always use ''hidden'' for iframe windows		if (contentContainer == currentInstance.contentEl) {			currentInstance.contentWrapperEl.setStyles({				''overflow'': currentInstance.options.scrollbars == true &amp;&amp; loadMethod != ''iframe'' ? ''auto'' : ''hidden''			});		}		var contentWrapperEl = currentInstance.contentWrapperEl;				if (options.padding != null) {			contentEl.setStyles({				''padding-top'': options.padding.top,				''padding-bottom'': options.padding.bottom,				''padding-left'': options.padding.left,				''padding-right'': options.padding.right			});		}		// Remove old content.		if (contentContainer == contentEl){			contentEl.empty();		}		// Load new content.		switch(loadMethod){			case ''xhr'':				new Request.HTML({					url: options.url,					update: contentContainer,					evalScripts: currentInstance.options.evalScripts,					evalResponse: currentInstance.options.evalResponse,					onRequest: function(){						if (recipient == ''window'' &amp;&amp; contentContainer == contentEl){							currentInstance.showSpinner(spinnerEl);						}						else if (recipient == ''panel'' &amp;&amp; contentContainer == contentEl &amp;&amp; $(''spinner'')){							$(''spinner'').setStyle(''visibility'',''visible'');							}					}.bind(this),					onFailure: function(){						if (contentContainer == contentEl){							contentContainer.set(''html'',''&lt;p&gt;&lt;strong&gt;Error Loading XMLHttpRequest&lt;/strong&gt;&lt;/p&gt;'');							if (recipient == ''window'') {								currentInstance.hideSpinner(spinnerEl);							}							else if (recipient == ''panel'' &amp;&amp; $(''spinner'')) {								$(''spinner'').setStyle(''visibility'', ''hidden'');							}						}					}.bind(this),					onException: function(){}.bind(this),					onSuccess: function(){						if (contentContainer == contentEl){							if (recipient == ''window''){								currentInstance.hideSpinner(spinnerEl);							}							else if (recipient == ''panel'' &amp;&amp; $(''spinner'')){								$(''spinner'').setStyle(''visibility'', ''hidden'');							}							currentInstance.fireEvent(''onContentLoaded'', element);						}					}.bind(this),					onComplete: function(){}.bind(this)				}).get();				break;			case ''iframe'': // May be able to streamline this if the iframe already exists.				if ( currentInstance.options.contentURL == '''' || contentContainer != contentEl) {					break;				}				currentInstance.iframeEl = new Element(''iframe'', {					''id'': currentInstance.options.id + ''_iframe'',					''name'':  currentInstance.options.id + ''_iframe'',					''class'': ''mochaIframe'',					''src'': options.url,					''marginwidth'':  0,					''marginheight'': 0,					''frameBorder'':  0,					''scrolling'':    ''auto'',					''styles'': {						''height'': contentWrapperEl.offsetHeight - contentWrapperEl.getStyle(''border-top'').toInt() - contentWrapperEl.getStyle(''border-bottom'').toInt(),						''width'': currentInstance.panelEl ? contentWrapperEl.offsetWidth - contentWrapperEl.getStyle(''border-left'').toInt() - contentWrapperEl.getStyle(''border-right'').toInt() : ''100%''						}				}).injectInside(contentEl);				// Add onload event to iframe so we can hide the spinner and run onContentLoaded()				currentInstance.iframeEl.addEvent(''load'', function(e) {					if (recipient == ''window'') {						currentInstance.hideSpinner(spinnerEl);					}					else if (recipient == ''panel'' &amp;&amp; contentContainer == contentEl &amp;&amp; $(''spinner'')) {						$(''spinner'').setStyle(''visibility'', ''hidden'');					}					currentInstance.fireEvent(''onContentLoaded'', element);				}.bind(this));				if (recipient == ''window'') {					currentInstance.showSpinner(spinnerEl);				}				else if (recipient == ''panel'' &amp;&amp; contentContainer == contentEl &amp;&amp; $(''spinner'')){					$(''spinner'').setStyle(''visibility'', ''visible'');					}				break;			case ''html'':			default:				// Need to test injecting elements as content.				var elementTypes = new Array(''element'', ''textnode'', ''whitespace'', ''collection'');				if (elementTypes.contains($type(options.content))){					options.content.inject(contentContainer);				} else {					contentContainer.set(''html'', options.content);				}				currentInstance.fireEvent(''onContentLoaded'', element);				break;		}	},	/*		Function: reloadIframe		Reload an iframe. Fixes an issue in Firefox when trying to use location.reload on an iframe that has been destroyed and recreated.	Arguments:		iframe - This should be both the name and the id of the iframe.	Syntax:		(start code)		MochaUI.reloadIframe(element);		(end)	Example:		To reload an iframe from within another iframe:		(start code)		parent.MochaUI.reloadIframe(''myIframeName'');		(end)	*/	reloadIframe: function(iframe){		if (Browser.Engine.gecko) {			$(iframe).src = $(iframe).src;		}		else {			top.frames[iframe].location.reload(true);		}	},	collapseToggle: function(windowEl){		var instances = MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);		var handles = currentInstance.windowEl.getElements(''.handle'');		if (currentInstance.isMaximized == true) return;				if (currentInstance.isCollapsed == false) {			currentInstance.isCollapsed = true;			handles.setStyle(''display'', ''none'');			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');			}			currentInstance.contentBorderEl.setStyles({				visibility: ''hidden'',				position: ''absolute'',				top: -10000,				left: -10000			});			if(currentInstance.toolbarWrapperEl){				currentInstance.toolbarWrapperEl.setStyles({					visibility: ''hidden'',					position: ''absolute'',					top: -10000,					left: -10000				});			}			currentInstance.drawWindowCollapsed(windowEl);		}		else {			currentInstance.isCollapsed = false;			currentInstance.drawWindow(windowEl);			currentInstance.contentBorderEl.setStyles({				visibility: ''visible'',				position: null,				top: null,				left: null			});			if(currentInstance.toolbarWrapperEl){				currentInstance.toolbarWrapperEl.setStyles({					visibility: ''visible'',					position: null,					top: null,					left: null				});			}			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}			handles.setStyle(''display'', ''block'');		}	},	/*	Function: closeWindow		Closes a window.	Syntax:	(start code)		MochaUI.closeWindow();	(end)	Arguments: 		windowEl - the ID of the window to be closed	Returns:		true - the window was closed		false - the window was not closed	*/	closeWindow: function(windowEl){		// Does window exist and is not already in process of closing ?		var instances = MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);		if (windowEl != $(windowEl) || currentInstance.isClosing) return;					currentInstance.isClosing = true;		currentInstance.fireEvent(''onClose'', windowEl);		if (currentInstance.check) currentInstance.check.destroy();		if ((currentInstance.options.type == ''modal'' || currentInstance.options.type == ''modal2'') &amp;&amp; Browser.Engine.trident4){				$(''modalFix'').setStyle(''display'', ''none'');		}		if (MochaUI.options.useEffects == false){			if (currentInstance.options.type == ''modal'' || currentInstance.options.type == ''modal2''){				$(''modalOverlay'').setStyle(''opacity'', 0);			}			MochaUI.closingJobs(windowEl);			return true;			}		else {			// Redraws IE windows without shadows since IE messes up canvas alpha when you change element opacity			if (Browser.Engine.trident) currentInstance.drawWindow(windowEl, false);			if (currentInstance.options.type == ''modal'' || currentInstance.options.type == ''modal2''){				MochaUI.Modal.modalOverlayCloseMorph.start({					''opacity'': 0				});			}			var closeMorph = new Fx.Morph(windowEl, {				duration: 120,				onComplete: function(){					MochaUI.closingJobs(windowEl);					return true;				}.bind(this)			});			closeMorph.start({				''opacity'': .4			});		}	},	closingJobs: function(windowEl){		var instances = MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);		windowEl.setStyle(''visibility'', ''hidden'');		windowEl.destroy();		currentInstance.fireEvent(''onCloseComplete'');				if (currentInstance.options.type != ''notification''){			var newFocus = this.getWindowWithHighestZindex();			this.focusWindow(newFocus);		}		instances.erase(currentInstance.options.id);		if (this.loadingWorkspace == true) {			this.windowUnload();		}		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock) &amp;&amp; currentInstance.options.type == ''window'') {			var currentButton = $(currentInstance.options.id + ''_dockTab'');			if (currentButton != null) {				MochaUI.Dock.dockSortables.removeItems(currentButton).destroy();			}			// Need to resize everything in case the dock becomes smaller when a tab is removed			MochaUI.Desktop.setDesktopSize();		}	},	/*		Function: closeAll			Close all open windows.	*/	closeAll: function() {				$$(''div.mocha'').each(function(windowEl){			this.closeWindow(windowEl);		}.bind(this));	},	/*	Function: toggleWindowVisibility		Toggle window visibility with Ctrl-Alt-Q.	*/		toggleWindowVisibility: function(){		MochaUI.Windows.instances.each(function(instance){			if (instance.options.type == ''modal'' || instance.options.type == ''modal2'' || instance.isMinimized == true) return;												var id = $(instance.options.id);			if (id.getStyle(''visibility'') == ''visible''){				if (instance.iframe){					instance.iframeEl.setStyle(''visibility'', ''hidden'');				}				if (instance.toolbarEl){					instance.toolbarWrapperEl.setStyle(''visibility'', ''hidden'');				}				instance.contentBorderEl.setStyle(''visibility'', ''hidden'');				id.setStyle(''visibility'', ''hidden'');				MochaUI.Windows.windowsVisible = false;			}			else {				id.setStyle(''visibility'', ''visible'');				instance.contentBorderEl.setStyle(''visibility'', ''visible'');				if (instance.iframe){					instance.iframeEl.setStyle(''visibility'', ''visible'');				}				if (instance.toolbarEl){					instance.toolbarWrapperEl.setStyle(''visibility'', ''visible'');				}				MochaUI.Windows.windowsVisible = true;			}		}.bind(this));	},	focusWindow: function(windowEl, fireEvent){		// This is used with blurAll		MochaUI.focusingWindow = ''true'';		var windowClicked = function(){			MochaUI.focusingWindow = ''false'';		};				windowClicked.delay(170, this);		// Only focus when needed		if ($$(''.mocha'').length == 0) return;		if (windowEl != $(windowEl) || windowEl.hasClass(''isFocused'')) return;		var instances =  MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);			if (currentInstance.options.type == ''notification'') return;		MochaUI.Windows.indexLevel += 2;		windowEl.setStyle(''zIndex'', MochaUI.Windows.indexLevel);		// Used when dragging and resizing windows		$(''windowUnderlay'').setStyle(''zIndex'', MochaUI.Windows.indexLevel - 1).inject($(windowEl),''after'');		// Fire onBlur for the window that lost focus.		instances.each(function(instance){			if (instance.windowEl.hasClass(''isFocused'')){				instance.fireEvent(''onBlur'', instance.windowEl);			}			instance.windowEl.removeClass(''isFocused'');		});		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock) &amp;&amp; currentInstance.options.type == ''window'') {			MochaUI.Dock.makeActiveTab();		}		currentInstance.windowEl.addClass(''isFocused'');		if (fireEvent != false){			currentInstance.fireEvent(''onFocus'', windowEl);		}	},	getWindowWithHighestZindex: function(){		this.highestZindex = 0;		$$(''div.mocha'').each(function(element){			this.zIndex = element.getStyle(''zIndex'');			if (this.zIndex &gt;= this.highestZindex) {				this.highestZindex = this.zIndex;			}			}.bind(this));		$$(''div.mocha'').each(function(element){			if (element.getStyle(''zIndex'') == this.highestZindex) {				this.windowWithHighestZindex = element;			}		}.bind(this));		return this.windowWithHighestZindex;	},	blurAll: function(){		if (MochaUI.focusingWindow == ''false'') {			$$(''.mocha'').each(function(windowEl){				var instances =  MochaUI.Windows.instances;				var currentInstance = instances.get(windowEl.id);				if (currentInstance.options.type != ''modal'' &amp;&amp; currentInstance.options.type != ''modal2''){					windowEl.removeClass(''isFocused'');				}			});			$$(''div.dockTab'').removeClass(''activeDockTab'');		}	},	roundedRect: function(ctx, x, y, width, height, radius, rgb, a){		ctx.fillStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x, y + radius);		ctx.lineTo(x, y + height - radius);		ctx.quadraticCurveTo(x, y + height, x + radius, y + height);		ctx.lineTo(x + width - radius, y + height);		ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill(); 	},	triangle: function(ctx, x, y, width, height, rgb, a){		ctx.beginPath();		ctx.moveTo(x + width, y);		ctx.lineTo(x, y + height);		ctx.lineTo(x + width, y + height);		ctx.closePath();		ctx.fillStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.fill();	},	circle: function(ctx, x, y, diameter, rgb, a){		ctx.beginPath();		ctx.moveTo(x, y);		ctx.arc(x, y, diameter, 0, Math.PI*2, true);		ctx.fillStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.fill();	},	/*	Function: centerWindow		Center a window in it''s container. If windowEl is undefined it will center the window that has focus.	*/	centerWindow: function(windowEl){				if(!windowEl){			MochaUI.Windows.instances.each(function(instance){				if (instance.windowEl.hasClass(''isFocused'')){					windowEl = instance.windowEl;				}			});		}		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var options = currentInstance.options;		var dimensions = options.container.getCoordinates();		var windowPosTop = (dimensions.height * .5) - ((options.height + currentInstance.headerFooterShadow) * .5);		if (windowPosTop &lt; 0) {			windowPosTop = 0;		}		var windowPosLeft =	(dimensions.width * .5) - (options.width * .5);		if (windowPosLeft &lt; 0) {			windowPosLeft = 0;		}		if (MochaUI.options.useEffects == true){			currentInstance.morph.start({				''top'': windowPosTop,				''left'': windowPosLeft			});		}		else {			windowEl.setStyles({				''top'': windowPosTop,				''left'': windowPosLeft			});		}	},	notification: function(message){			new MochaUI.Window({				loadMethod: ''html'',				closeAfter: 1500,				type: ''notification'',				addClass: ''notification'',				content: message,				width: 220,				height: 40,				y: 53,				padding:  { top: 10, right: 12, bottom: 10, left: 12 },				shadowBlur: 5,				bodyBgColor: [255, 255, 255]				});	},	/*	Function: dynamicResize		Use with a timer to resize a window as the window''s content size changes, such as with an accordian.	*/	dynamicResize: function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var contentWrapperEl = currentInstance.contentWrapperEl;		var contentEl = currentInstance.contentEl;				contentWrapperEl.setStyle(''height'', contentEl.offsetHeight);		contentWrapperEl.setStyle(''width'', contentEl.offsetWidth);					currentInstance.drawWindow(windowEl);	},		/*	Function: garbageCleanUp		Empties all windows of their children, and removes and garbages the windows. It is does not trigger onClose() or onCloseComplete(). This is useful to clear memory before the pageUnload.	Syntax:	(start code)		MochaUI.garbageCleanUp();	(end)		*/	garbageCleanUp: function(){		$$(''div.mocha'').each(function(el){			el.destroy();		}.bind(this));	},	/*		The underlay is inserted directly under windows when they are being dragged or resized	so that the cursor is not captured by iframes or other plugins (such as Flash)	underneath the window.		*/	underlayInitialize: function(){		var windowUnderlay = new Element(''div'', {			''id'': ''windowUnderlay'',			''styles'': {				''height'': parent.getCoordinates().height,				''opacity'': .01,				''display'': ''none''			}		}).inject(document.body);	},	setUnderlaySize: function(){		$(''windowUnderlay'').setStyle(''height'', parent.getCoordinates().height);	}});/* function: fixPNG	Bob Osola''s PngFix for IE6.example:	(begin code)	&lt;img src="xyz.png" alt="foo" width="10" height="20" onload="fixPNG(this)"&gt;	(end)note:	You must have the image height and width attributes specified in the markup.*/function fixPNG(myImage){	if (Browser.Engine.trident4 &amp;&amp; document.body.filters){		var imgID = (myImage.id) ? "id=''" + myImage.id + "'' " : "";		var imgClass = (myImage.className) ? "class=''" + myImage.className + "'' " : "";		var imgTitle = (myImage.title) ? "title=''" + myImage.title  + "'' " : "title=''" + myImage.alt + "'' ";		var imgStyle = "display:inline-block;" + myImage.style.cssText;		var strNewHTML = "&lt;span " + imgID + imgClass + imgTitle			+ " style=\"" + "width:" + myImage.width			+ "px; height:" + myImage.height			+ "px;" + imgStyle + ";"			+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"			+ "(src=\''" + myImage.src + "\'', sizingMethod=''scale'');\"&gt;&lt;/span&gt;";		myImage.outerHTML = strNewHTML;			}}// Toggle window visibility with Ctrl-Alt-Qdocument.addEvent(''keydown'', function(event){	if (event.key == ''q'' &amp;&amp; event.control &amp;&amp; event.alt) {		MochaUI.toggleWindowVisibility();	}});// Blur all windows if user clicks anywhere else on the pagedocument.addEvent(''mousedown'', function(event){	MochaUI.blurAll.delay(50);});document.addEvent(''domready'', function(){	MochaUI.underlayInitialize();});window.addEvent(''resize'', function(){		MochaUI.setUnderlaySize();});'</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>scripts/source/Window/</category><body package="Mootools-MochaUI">arrangeCascadeJs	^'/*Script: Arrange-cascade.js	Cascade windows.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Requires:	Core.js, Window.jsSyntax:	(start code)	MochaUI.arrangeCascade();	(end)*/MochaUI.options.extend({	viewportTopOffset:  30,    // Use a negative number if neccessary to place first window where you want it	viewportLeftOffset: 20,	windowTopOffset:    50,    // Initial vertical spacing of each window	windowLeftOffset:   40     // Initial horizontal spacing of each window	});MochaUI.extend({   	arrangeCascade: function(){		// See how much space we have to work with		var coordinates = document.getCoordinates();				var openWindows = 0;		MochaUI.Windows.instances.each(function(instance){			if (!instance.isMinimized) openWindows ++; 		});				if ((this.options.windowTopOffset * (openWindows + 1)) &gt;= (coordinates.height - this.options.viewportTopOffset)) {			var topOffset = (coordinates.height - this.options.viewportTopOffset) / (openWindows + 1);		}		else {			var topOffset = this.options.windowTopOffset;		}				if ((this.options.windowLeftOffset * (openWindows + 1)) &gt;= (coordinates.width - this.options.viewportLeftOffset - 20)) {			var leftOffset = (coordinates.width - this.options.viewportLeftOffset - 20) / (openWindows + 1);		}		else {			var leftOffset = this.options.windowLeftOffset;		}		var x = this.options.viewportLeftOffset;		var y = this.options.viewportTopOffset;		$$(''div.mocha'').each(function(windowEl){			var currentWindowClass = MochaUI.Windows.instances.get(windowEl.id);			if (!currentWindowClass.isMinimized &amp;&amp; !currentWindowClass.isMaximized){				id = windowEl.id;				MochaUI.focusWindow(windowEl);				x += leftOffset;				y += topOffset;				if (MochaUI.options.useEffects == false){					windowEl.setStyles({						''top'': y,						''left'': x					});				}				else {					var cascadeMorph = new Fx.Morph(windowEl, {						''duration'': 550					});					cascadeMorph.start({						''top'': y,						''left'': x					});				}			}		}.bind(this));	}});'</body><body package="Mootools-MochaUI">arrangeTileJs	^'/*Script: Arrange-tile.js	Cascade windows.Authors:	Harry Roberts and Greg HoustonLicense:	MIT-style license.	Requires:	Core.js, Window.jsSyntax:	(start code)	MochaUI.arrangeTile();	(end)*/ MochaUI.extend({	arrangeTile: function(){		var x = 10;		var y = 10;			var instances =  MochaUI.Windows.instances;		var windowsNum = 0;		instances.each(function(instance){			if (!instance.isMinimized &amp;&amp; !instance.isMaximized){				windowsNum++;			}		});		var cols = 3;		var rows = Math.ceil(windowsNum / cols);				var coordinates = document.getCoordinates();			var col_width = ((coordinates.width - this.options.viewportLeftOffset) / cols);		var col_height = ((coordinates.height - this.options.viewportTopOffset) / rows);				var row = 0;		var col = 0;				instances.each(function(instance){			if (!instance.isMinimized &amp;&amp; !instance.isMaximized){								var content = instance.contentWrapperEl;				var content_coords = content.getCoordinates();				var window_coords = instance.windowEl.getCoordinates();								// Calculate the amount of padding around the content window				var padding_top = content_coords.top - window_coords.top;				var padding_bottom = window_coords.height - content_coords.height - padding_top;				var padding_left = content_coords.left - window_coords.left;				var padding_right = window_coords.width - content_coords.width - padding_left;				/*				// This resizes the windows				if (instance.options.shape != ''gauge'' &amp;&amp; instance.options.resizable == true){					var width = (col_width - 3 - padding_left - padding_right);					var height = (col_height - 3 - padding_top - padding_bottom);					if (width &gt; instance.options.resizeLimit.x[0] &amp;&amp; width &lt; instance.options.resizeLimit.x[1]){						content.setStyle(''width'', width);					}					if (height &gt; instance.options.resizeLimit.y[0] &amp;&amp; height &lt; instance.options.resizeLimit.y[1]){						content.setStyle(''height'', height);					}				}*/				var left = (x + (col * col_width));				var top = (y + (row * col_height));				instance.windowEl.setStyles({					''left'': left,					''top'': top				});				instance.drawWindow(instance.windowEl);				MochaUI.focusWindow(instance.windowEl);				if (++col === cols) {					row++;					col = 0;				}			}		}.bind(this));	}});'</body><body package="Mootools-MochaUI">modalJs	^'/*Script: Modal.js	Create modal dialog windows.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Requires:	Core.js, Window.jsSee Also:	&lt;Window&gt;		*/MochaUI.Modal = new Class({	Extends: MochaUI.Window,	Implements: [Events, Options],	initialize: function(options){		this.modalInitialize();				window.addEvent(''resize'', function(){			this.setModalSize();		}.bind(this));	},	modalInitialize: function(){		var modalOverlay = new Element(''div'', {			''id'': ''modalOverlay'',			''styles'': {				''height'': document.getCoordinates().height,				''opacity'': .6			}		}).inject(document.body);				modalOverlay.addEvent(''click'', function(e){			MochaUI.closeWindow(MochaUI.currentModal);		});				if (Browser.Engine.trident4){			var modalFix = new Element(''iframe'', {				''id'': ''modalFix'',				''scrolling'': ''no'',				''marginWidth'': 0,				''marginHeight'': 0,				''src'': '''',				''styles'': {					''height'': document.getCoordinates().height				}			}).inject(document.body);		}		this.modalOverlayOpenMorph = new Fx.Morph($(''modalOverlay''), {				''duration'': 150				});		this.modalOverlayCloseMorph = new Fx.Morph($(''modalOverlay''), {			''duration'': 150,			onComplete: function(){				$(''modalOverlay'').setStyle(''display'', ''none'');				if (Browser.Engine.trident4){					$(''modalFix'').setStyle(''display'', ''none'');				}			}.bind(this)		});	},	setModalSize: function(){		$(''modalOverlay'').setStyle(''height'', document.getCoordinates().height);		if (Browser.Engine.trident4){			$(''modalFix'').setStyle(''height'', document.getCoordinates().height);		}	}});MochaUI.Modal.implement(new Options, new Events);'</body><body package="Mootools-MochaUI">tabsJs	^'/*Script: Tabs.js	Functionality for window tabs.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.Requires:	Core.js, Window.js (for tabbed windows) or Layout.js (for tabbed panels)*/MochaUI.extend({	/*	Function: initializeTabs		Add click event to each list item that fires the selected function.	*/	initializeTabs: function(el){		$(el).getElements(''li'').each(function(listitem){			listitem.addEvent(''click'', function(e){				MochaUI.selected(this, el);			});		});	},	/*	Function: selected		Add "selected" class to current list item and remove it from sibling list items.	Syntax:		(start code)			selected(el, parent);		(end)Arguments:	el - the list item	parent - the ul	*/	selected: function(el, parent){		$(parent).getChildren().each(function(listitem){			listitem.removeClass(''selected'');		});		el.addClass(''selected'');	}});'</body><body package="Mootools-MochaUI">windowJs	^'/*Script: Window.js	Build windows.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.	Requires:	Core.js*//*Class: Window	Creates a single MochaUI window.	Syntax:	(start code)	new MochaUI.Window(options);	(end)	Arguments:	optionsOptions:	id - The ID of the window. If not defined, it will be set to ''win'' + windowIDCount.	title - The title of the window.	icon - Place an icon in the window''s titlebar. This is either set to false or to the url of the icon. It is set up for icons that are 16 x 16px.	type - (''window'', ''modal'', ''modal2'', or ''notification'') Defaults to ''window''.	loadMethod - (''html'', ''xhr'', or ''iframe'') Defaults to ''html''.	contentURL - Used if loadMethod is set to ''xhr'' or ''iframe''.	closeAfter - Either false or time in milliseconds. Closes the window after a certain period of time in milliseconds. This is particularly useful for notifications.	evalScripts - (boolean) An xhr loadMethod option. Defaults to true.	evalResponse - (boolean) An xhr loadMethod option. Defaults to false.	content - (string or element) An html loadMethod option.	toolbar - (boolean) Create window toolbar. Defaults to false. This can be used for tabs, media controls, and so forth.	toolbarPosition - (''top'' or ''bottom'') Defaults to top.	toolbarHeight - (number)	toolbarURL - (url) Defaults to ''pages/lipsum.html''.	toolbarContent - (string)	container - (element ID) Element the window is injected in. The container defaults to ''desktop''. If no desktop then to document.body. Use ''pageWrapper'' if you don''t want the windows to overlap the toolbars.	restrict - (boolean) Restrict window to container when dragging.	shape - (''box'' or ''gauge'') Shape of window. Defaults to ''box''.	collapsible - (boolean) Defaults to true.	minimizable - (boolean) Requires MochaUI.Desktop and MochaUI.Dock. Defaults to true if dependenices are met. 	maximizable - (boolean) Requires MochaUI.Desktop. Defaults to true if dependenices are met.	closable - (boolean) Defaults to true. 	draggable - (boolean) Defaults to false for modals; otherwise true.	draggableGrid - (false or number) Distance in pixels for snap-to-grid dragging. Defaults to false. 	draggableLimit - (false or number) An object with x and y properties used to limit the movement of the Window. Defaults to false.	draggableSnap - (boolean) The distance to drag before the Window starts to respond to the drag. Defaults to false.	resizable - (boolean) Defaults to false for modals, notifications and gauges; otherwise true.	resizeLimit - (object) Minimum and maximum width and height of window when resized.	addClass - (string) Add a class to the window for more control over styling.		width - (number) Width of content area.		height - (number) Height of content area.	x - (number) If x and y are left undefined the window is centered on the page.	y - (number)	scrollbars - (boolean)	padding - (object)	shadowBlur - (number) Width of shadows.	shadowOffset - Should be positive and not be greater than the ShadowBlur.	controlsOffset - Change this if you want to reposition the window controls.	useCanvas - (boolean) Set this to false if you don''t want a canvas body.	useCanvasControls - (boolean) Set this to false if you wish to use images for the buttons.	headerHeight - (number) Height of window titlebar.	footerHeight - (number) Height of window footer.	cornerRadius - (number)	contentBgColor - (hex) Body background color	headerStartColor - ([r,g,b,]) Titlebar gradient''s top color	headerStopColor - ([r,g,b,]) Titlebar gradient''s bottom color	bodyBgColor - ([r,g,b,]) Background color of the main canvas shape	minimizeBgColor - ([r,g,b,]) Minimize button background color	minimizeColor - ([r,g,b,]) Minimize button color	maximizeBgColor - ([r,g,b,]) Maximize button background color	maximizeColor - ([r,g,b,]) Maximize button color	closeBgColor - ([r,g,b,]) Close button background color	closeColor - ([r,g,b,]) Close button color	resizableColor - ([r,g,b,]) Resizable icon color	onBeforeBuild - (function) Fired just before the window is built.	onContentLoaded - (function) Fired when content is successfully loaded via XHR or Iframe.	onFocus - (function)  Fired when the window is focused.	onBlur - (function) Fired when window loses focus.	onResize - (function) Fired when the window is resized.	onMinimize - (function) Fired when the window is minimized.	onMaximize - (function) Fired when the window is maximized.	onRestore - (function) Fired when a window is restored from minimized or maximized.	onClose - (function) Fired just before the window is closed.	onCloseComplete - (function) Fired after the window is closed.Returns:	Window object.Example:	Define a window. It is suggested you name the function the same as your window ID + "Window".	(start code)	var mywindowWindow = function(){		new MochaUI.Window({			id: ''mywindow'',			title: ''My Window'',			loadMethod: ''xhr'',			contentURL: ''pages/lipsum.html'',			width: 340,			height: 150		});	}	(end)Example:	Create window onDomReady.	(start code)		window.addEvent(''domready'', function(){		mywindow();	});	(end)Example:	Add link events to build future windows. It is suggested you give your anchor the same ID as your window + "WindowLink" or + "WindowLinkCheck". Use the latter if it is a link in the menu toolbar.	If you wish to add links in windows that open other windows remember to add events to those links when the windows are created.	(start code)	// Javascript:	if ($(''mywindowLink'')){		$(''mywindowLink'').addEvent(''click'', function(e) {			new Event(e).stop();			mywindow();		});	}	// HTML:	&lt;a id="mywindowLink" href="pages/lipsum.html"&gt;My Window&lt;/a&gt;		(end)	Loading Content with an XMLHttpRequest(xhr):		For content to load via xhr all the files must be online and in the same domain. If you need to load content from another domain or wish to have it work offline, load the content in an iframe instead of using the xhr option.		Iframes:		If you use the iframe loadMethod your iframe will automatically be resized when the window it is in is resized. If you want this same functionality when using one of the other load options simply add class="mochaIframe" to those iframes and they will be resized for you as well.*/// Having these options outside of the Class allows us to add, change, and remove// individual options without rewriting all of them.MochaUI.Windows.windowOptions = {	id:                null,	title:             ''New Window'',	icon:              false,	type:              ''window'',	loadMethod:        ''html'',	contentURL:        ''pages/lipsum.html'',	closeAfter:        false,	// xhr options	evalScripts:       true,	evalResponse:      false,	// html options	content:           ''Window content'',	// Toolbar	toolbar:           false,	toolbarPosition:   ''top'',	toolbarHeight:     29,	toolbarURL:        ''pages/lipsum.html'',	toolbarContent:    '''',	// Toolbar	toolbar2:           false,	toolbar2Position:   ''bottom'',	toolbar2Height:     29,	toolbar2URL:        ''pages/lipsum.html'',	toolbar2Content:    '''',		// Container options	container:         null,	restrict:          true,	shape:             ''box'',	// Window Controls	collapsible:       true,	minimizable:       true,	maximizable:       true,	closable:          true,	// Draggable	draggable:         null,	draggableGrid:     false,	draggableLimit:    false,	draggableSnap:     false,	// Resizable	resizable:         null,	resizeLimit:       {''x'': [250, 2500], ''y'': [125, 2000]},		// Style options:	addClass:          '''',	width:             300,	height:            125,	x:                 null,	y:                 null,	scrollbars:        true,	padding:   		   { top: 10, right: 12, bottom: 10, left: 12 },	shadowBlur:        5,	shadowOffset:      {''x'': 0, ''y'': 1},	controlsOffset:    {''right'': 6, ''top'': 6},	useCanvas:         true,	useCanvasControls: true,	useSpinner:        true,    // Toggles whether or not the ajax spinners are displayed in window footers.	// Color options:			headerHeight:      25,	footerHeight:      25,	cornerRadius:      8,	contentBgColor:    ''#fff'',	headerStartColor:  [250, 250, 250],	headerStopColor:   [229, 229, 229],	bodyBgColor:       [229, 229, 229],	minimizeBgColor:   [255, 255, 255],	minimizeColor:     [0, 0, 0],	maximizeBgColor:   [255, 255, 255],	maximizeColor:     [0, 0, 0],	closeBgColor:      [255, 255, 255],	closeColor:        [0, 0, 0],	resizableColor:    [254, 254, 254],	// Events	onBeforeBuild:     $empty,	onContentLoaded:   $empty,	onFocus:           $empty,	onBlur:            $empty,	onResize:          $empty,	onMinimize:        $empty,	onMaximize:        $empty,	onRestore:         $empty,	onClose:           $empty,	onCloseComplete:   $empty};MochaUI.Window = new Class({	Implements: Events,	options: MochaUI.Windows.windowOptions,	initialize: function(options){		this.setOptions(options);		// Shorten object chain		var options = this.options;		$extend(this, {			mochaControlsWidth: 0,			minimizebuttonX:  0,  // Minimize button horizontal position			maximizebuttonX: 0,  // Maximize button horizontal position			closebuttonX: 0,  // Close button horizontal position			headerFooterShadow: options.headerHeight + options.footerHeight + (options.shadowBlur * 2),			oldTop: 0,			oldLeft: 0,			isMaximized: false,			isMinimized: false,			isCollapsed: false,			timestamp: $time()		});				// May be better to use if type != window		if (options.type != ''window''){			options.container = document.body;			options.minimizable = false;		}		if (!options.container){			options.container = MochaUI.Desktop.desktop ? MochaUI.Desktop.desktop : document.body;		}		// Set this.options.resizable to default if it was not defined		if (options.resizable == null){			if (options.type != ''window'' || options.shape == ''gauge''){				options.resizable = false;			}			else {				options.resizable = true;				}		}		// Set this.options.draggable if it was not defined		if (options.draggable == null){			if (options.type != ''window''){				options.draggable = false;			}			else {				options.draggable = true;			}		}		// Gauges are not maximizable or resizable		if (options.shape == ''gauge'' || options.type == ''notification''){			options.collapsible = false;			options.maximizable = false;			options.contentBgColor = ''transparent'';			options.scrollbars = false;			options.footerHeight = 0;		}		if (options.type == ''notification''){			options.closable = false;			options.headerHeight = 0;		}				// Minimizable, dock is required and window cannot be modal		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock)){			if (MochaUI.Dock.dock &amp;&amp; options.type != ''modal'' &amp;&amp; options.type != ''modal2''){				options.minimizable = options.minimizable;			}		}		else {			options.minimizable = false;		}		// Maximizable, desktop is required		options.maximizable = MochaUI.Desktop.desktop &amp;&amp; options.maximizable &amp;&amp; options.type != ''modal'' &amp;&amp; options.type != ''modal2'';		if (this.options.type == ''modal2'') {			this.options.shadowBlur = 0;			this.options.shadowOffset = {''x'': 0, ''y'': 0};			this.options.useSpinner = false;			this.options.useCanvas = false;			this.options.footerHeight = 0;			this.options.headerHeight = 0;		}		// If window has no ID, give it one.		if (options.id == null){			options.id = ''win'' + (++MochaUI.Windows.windowIDCount);		}		this.windowEl = $(options.id);				this.newWindow();				// Return window object		return this;	},	saveValues: function(){			var coordinates = this.windowEl.getCoordinates();		this.options.x = coordinates.left.toInt();		this.options.y = coordinates.top.toInt();	},	/*	Internal Function: newWindow		Arguments: 		properties	*/	newWindow: function(properties){ // options is not doing anything		// Shorten object chain		var instances = MochaUI.Windows.instances;		var instanceID = instances.get(this.options.id);			// Here we check to see if there is already a class instance for this window		if (instanceID){			var currentInstance = instanceID;		}		// Check if window already exists and is not in progress of closing		if ( this.windowEl &amp;&amp; !this.isClosing ){			 // Restore if minimized			if (currentInstance.isMinimized){				MochaUI.Dock.restoreMinimized(this.windowEl);			}			// Expand and focus if collapsed			if (currentInstance.isCollapsed){				MochaUI.collapseToggle(this.windowEl);				setTimeout(MochaUI.focusWindow.pass(this.windowEl, this),10);			}			// Else focus			else {				var coordinates = document.getCoordinates();				if (this.windowEl.getStyle(''left'').toInt() &gt; coordinates.width || this.windowEl.getStyle(''top'').toInt() &gt; coordinates.height){					MochaUI.centerWindow(this.windowEl);					}				setTimeout(MochaUI.focusWindow.pass(this.windowEl, this),10);			}			return;		}		else {			instances.set(this.options.id, this);		}		this.isClosing = false;		this.fireEvent(''onBeforeBuild'');		// Create window div		MochaUI.Windows.indexLevel++;		this.windowEl = new Element(''div'', {			''class'': ''mocha'',			''id'':    this.options.id,			''styles'': {				''width'':   this.options.width,				''height'':  this.options.height,				''display'': ''block'',				''opacity'': 0,				''zIndex'': MochaUI.Windows.indexLevel += 2			}		});		this.windowEl.addClass(this.options.addClass);				if (this.options.type == ''modal2'') {			this.windowEl.addClass(''modal2'');		}		// Fix a mouseover issue with gauges in IE7		if ( Browser.Engine.trident &amp;&amp; this.options.shape == ''gauge'') {			this.windowEl.setStyle(''background'', ''url(../images/spacer.gif)'');		}		if ((this.options.type == ''modal'' || this.options.type == ''modal2'' ) &amp;&amp; Browser.Platform.mac &amp;&amp; Browser.Engine.gecko){			if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {				var ffversion = new Number(RegExp.$1);				if (ffversion &lt; 3) {					this.windowEl.setStyle(''position'', ''fixed'');				}			}		}		if (this.options.loadMethod == ''iframe'') {			this.options.padding = { top: 0, right: 0, bottom: 0, left: 0 };		}		// Insert sub elements inside windowEl		this.insertWindowElements();		// Set title		this.titleEl.set(''html'',this.options.title);		// Set scrollbars, always use ''hidden'' for iframe windows		this.contentWrapperEl.setStyles({			''overflow'': ''hidden'',			''background'': this.options.contentBgColor		});		this.contentEl.setStyles({			''padding-top'': this.options.padding.top,			''padding-bottom'': this.options.padding.bottom,			''padding-left'': this.options.padding.left,			''padding-right'': this.options.padding.right		});		if (this.options.shape == ''gauge''){			if (this.options.useCanvasControls){				this.canvasControlsEl.setStyle(''display'', ''none'');			}			else {				this.controlsEl.setStyle(''display'', ''none'');			}			this.windowEl.addEvent(''mouseover'', function(){				this.mouseover = true;				var showControls = function(){					if (this.mouseover != false){						if (this.options.useCanvasControls){							this.canvasControlsEl.setStyle(''display'', ''block'');						}						else {							this.controlsEl.setStyle(''display'', ''block'');						}						this.canvasHeaderEl.setStyle(''display'', ''block'');						this.titleEl.setStyle(''display'', ''block'');					}				};				showControls.delay(150, this);			}.bind(this));			this.windowEl.addEvent(''mouseleave'', function(){				this.mouseover = false;				if (this.options.useCanvasControls){					this.canvasControlsEl.setStyle(''display'', ''none'');				}				else {					this.controlsEl.setStyle(''display'', ''none'');				}				this.canvasHeaderEl.setStyle(''display'', ''none'');				this.titleEl.setStyle(''display'', ''none'');			}.bind(this));		}		// Inject window into DOM		this.windowEl.injectInside(this.options.container);		if (this.options.type != ''notification''){			this.setMochaControlsWidth();		}				// Add content to window.		MochaUI.updateContent({			''element'': this.windowEl,			''content'':  this.options.content,			''url'':      this.options.contentURL		});					// Add content to window toolbar.		if (this.options.toolbar == true){			MochaUI.updateContent({				''element'':       this.windowEl,				''childElement'':  this.toolbarEl,				''content'':       this.options.toolbarContent,				''loadMethod'':    ''xhr'',				''url'':           this.options.toolbarURL			});		}		// Add content to window toolbar.		if (this.options.toolbar2 == true){			MochaUI.updateContent({				''element'':       this.windowEl,				''childElement'':  this.toolbar2El,				''content'':       this.options.toolbar2Content,				''loadMethod'':    ''xhr'',				''url'':           this.options.toolbar2URL			});		}				this.drawWindow(this.windowEl);				// Attach events to the window		this.attachDraggable(this.windowEl);		this.attachResizable(this.windowEl);		this.setupEvents(this.windowEl);				if (this.options.resizable){			this.adjustHandles();		}		// Move window into position. If position not specified by user then center the window on the page.		if (this.options.container == document.body || this.options.container == MochaUI.Desktop.desktop){			var dimensions = window.getSize();		}		else {			var dimensions = $(this.options.container).getSize();		}		if (!this.options.y) {			var y = (dimensions.y * .5) - ((this.options.height + this.headerFooterShadow + this.windowEl.getStyle(''border-top'').toInt() + this.windowEl.getStyle(''border-bottom'').toInt()) * .5);		}		else {			var y = this.options.y - this.options.shadowBlur;		}		if (!this.options.x) {			var x =	(dimensions.x * .5) - (this.options.width * .5);		}		else {			var x = this.options.x - this.options.shadowBlur;		}		this.windowEl.setStyles({			''top'': y,			''left'': x		});		// Create opacityMorph		if (MochaUI.options.useEffects == true){			// IE cannot handle both element opacity and VML alpha at the same time.			if (Browser.Engine.trident){				this.drawWindow(this.windowEl, false);			}			this.opacityMorph = new Fx.Morph(this.windowEl, {				''duration'': 350,				onComplete: function(){					if (Browser.Engine.trident){						this.drawWindow(this.windowEl);					}				}.bind(this)			});		}		if (this.options.type == ''modal'' || this.options.type == ''modal2'') {			MochaUI.currentModal = this.windowEl;			if (Browser.Engine.trident4){				$(''modalFix'').setStyle(''display'', ''block'');			}			$(''modalOverlay'').setStyle(''display'', ''block'');			if (MochaUI.options.useEffects == false){				$(''modalOverlay'').setStyle(''opacity'', .6);				this.windowEl.setStyles({					''zIndex'': 11000,					''opacity'': 1				});			}			else {				MochaUI.Modal.modalOverlayCloseMorph.cancel();				MochaUI.Modal.modalOverlayOpenMorph.start({					''opacity'': .6				});				this.windowEl.setStyles({					''zIndex'': 11000				});				this.opacityMorph.start({					''opacity'': 1				});			}			$$(''.dockTab'').removeClass(''activeDockTab'');			$$(''.mocha'').removeClass(''isFocused'');			this.windowEl.addClass(''isFocused'');					}		else if (MochaUI.options.useEffects == false){			this.windowEl.setStyle(''opacity'', 1);			setTimeout(MochaUI.focusWindow.pass(this.windowEl, this), 10);		}		else {			this.opacityMorph.start({				''opacity'': 1			});			setTimeout(MochaUI.focusWindow.pass(this.windowEl, this), 10);		}		// This is a generic morph that can be reused later by functions like centerWindow()		this.morph = new Fx.Morph(this.windowEl, {			''duration'': 200		});		// Add check mark to menu if link exists in menu		// Need to make sure the check mark is not added to links not in menu			if ($(this.windowEl.id + ''LinkCheck'')){			this.check = new Element(''div'', {				''class'': ''check'',				''id'': this.options.id + ''_check''			}).inject(this.windowEl.id + ''LinkCheck'');		}				if (this.options.closeAfter != false){			MochaUI.closeWindow.delay(this.options.closeAfter, this, this.windowEl);		}		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock) &amp;&amp; this.options.type == ''window'' ){			MochaUI.Dock.createDockTab(this.windowEl);		}	},	setupEvents: function(windowEl) {		// Set events		// Note: if a button does not exist, its due to properties passed to newWindow() stating otherwice		if (this.closeButtonEl){			this.closeButtonEl.addEvent(''click'', function(e) {				new Event(e).stop();				MochaUI.closeWindow(windowEl);			}.bind(this));		}		if (this.options.type == ''window''){			windowEl.addEvent(''mousedown'', function() {				MochaUI.focusWindow(windowEl);			}.bind(this));		}		if (this.minimizeButtonEl) {			this.minimizeButtonEl.addEvent(''click'', function(e) {				new Event(e).stop();				MochaUI.Dock.minimizeWindow(windowEl);		}.bind(this));		}		if (this.maximizeButtonEl) {			this.maximizeButtonEl.addEvent(''click'', function(e) {				new Event(e).stop(); 				if (this.isMaximized) {					MochaUI.Desktop.restoreWindow(windowEl);				} else {					MochaUI.Desktop.maximizeWindow(windowEl);				}			}.bind(this));		}		if (this.options.collapsible == true){			// Keep titlebar text from being selected on double click in Safari.			this.titleEl.addEvent(''selectstart'', function(e) {				e = new Event(e).stop();			}.bind(this));			// Keep titlebar text from being selected on double click in Opera.			this.titleBarEl.addEvent(''mousedown'', function(e) {				if (Browser.Engine.trident) {					this.titleEl.setCapture();				}			}.bind(this));			this.titleBarEl.addEvent(''mouseup'', function(e) {				if (Browser.Engine.trident) {					this.titleEl.releaseCapture();				}			}.bind(this));			this.titleBarEl.addEvent(''dblclick'', function(e) {				e = new Event(e).stop();				MochaUI.collapseToggle(this.windowEl);			}.bind(this));		}	},	/*	Internal Function: attachDraggable()		Make window draggable.	Arguments:		windowEl			*/	attachDraggable: function(windowEl){		if (!this.options.draggable) return;		this.windowDrag = new Drag.Move(windowEl, {			handle: this.titleBarEl,			container: this.options.restrict == true ? $(this.options.container) : false,			grid: this.options.draggableGrid,			limit: this.options.draggableLimit,			snap: this.options.draggableSnap,			onStart: function() {				if (this.options.type != ''modal'' &amp;&amp; this.options.type != ''modal2''){ 					MochaUI.focusWindow(windowEl);					$(''windowUnderlay'').setStyle(''display'',''block'');				}				if ( this.iframeEl )					this.iframeEl.setStyle(''visibility'', ''hidden'');			}.bind(this),			onComplete: function() {				if (this.options.type != ''modal'' &amp;&amp; this.options.type != ''modal2'') {					$(''windowUnderlay'').setStyle(''display'', ''none'');				}				if ( this.iframeEl ){					this.iframeEl.setStyle(''visibility'', ''visible'');				}				// Store new position in options.				this.saveValues();			}.bind(this)		});	},	/*	Internal Function: attachResizable		Make window resizable.	Arguments:		windowEl	*/	attachResizable: function(windowEl){		if (!this.options.resizable) return;		this.resizable1 = this.windowEl.makeResizable({			handle: [this.n, this.ne, this.nw],			limit: {				y: [					function(){						return this.windowEl.getStyle(''top'').toInt() + this.windowEl.getStyle(''height'').toInt() - this.options.resizeLimit.y[1];					}.bind(this),					function(){						return this.windowEl.getStyle(''top'').toInt() + this.windowEl.getStyle(''height'').toInt() - this.options.resizeLimit.y[0];					}.bind(this)				]			},			modifiers: {x: false, y: ''top''},			onStart: function(){				this.resizeOnStart();				this.coords = this.contentWrapperEl.getCoordinates();				this.y2 = this.coords.top.toInt() + this.contentWrapperEl.offsetHeight;			}.bind(this),			onDrag: function(){				this.coords = this.contentWrapperEl.getCoordinates();				this.contentWrapperEl.setStyle(''height'', this.y2 - this.coords.top.toInt());				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});		this.resizable2 = this.contentWrapperEl.makeResizable({			handle: [this.e, this.ne],			limit: {				x: [this.options.resizeLimit.x[0] - (this.options.shadowBlur * 2), this.options.resizeLimit.x[1] - (this.options.shadowBlur * 2) ]			},				modifiers: {x: ''width'', y: false},			onStart: function(){				this.resizeOnStart();			}.bind(this),			onDrag: function(){				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});		this.resizable3 = this.contentWrapperEl.makeResizable({			container: this.options.restrict == true ? $(this.options.container) : false,			handle: this.se,			limit: {				x: [this.options.resizeLimit.x[0] - (this.options.shadowBlur * 2), this.options.resizeLimit.x[1] - (this.options.shadowBlur * 2) ],				y: [this.options.resizeLimit.y[0] - this.headerFooterShadow, this.options.resizeLimit.y[1] - this.headerFooterShadow]			},			modifiers: {x: ''width'', y: ''height''},			onStart: function(){				this.resizeOnStart();			}.bind(this),			onDrag: function(){				this.drawWindow(windowEl);					this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)			});		this.resizable4 = this.contentWrapperEl.makeResizable({			handle: [this.s, this.sw],			limit: {				y: [this.options.resizeLimit.y[0] - this.headerFooterShadow, this.options.resizeLimit.y[1] - this.headerFooterShadow]			},			modifiers: {x: false, y: ''height''},			onStart: function(){				this.resizeOnStart();			}.bind(this),			onDrag: function(){				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});		this.resizable5 = this.windowEl.makeResizable({			handle: [this.w, this.sw, this.nw],			limit: {				x: [					function(){						return this.windowEl.getStyle(''left'').toInt() + this.windowEl.getStyle(''width'').toInt() - this.options.resizeLimit.x[1];					}.bind(this),				   function(){					   return this.windowEl.getStyle(''left'').toInt() + this.windowEl.getStyle(''width'').toInt() - this.options.resizeLimit.x[0];					}.bind(this)				]			},			modifiers: {x: ''left'', y: false},			onStart: function(){				this.resizeOnStart();				this.coords = this.contentWrapperEl.getCoordinates();				this.x2 = this.coords.left.toInt() + this.contentWrapperEl.offsetWidth;			}.bind(this),			onDrag: function(){				this.coords = this.contentWrapperEl.getCoordinates();				this.contentWrapperEl.setStyle(''width'', this.x2 - this.coords.left.toInt());				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});	},	resizeOnStart: function(){		$(''windowUnderlay'').setStyle(''display'',''block'');		if (this.iframeEl){			this.iframeEl.setStyle(''visibility'', ''hidden'');		}		},		resizeOnComplete: function(){		$(''windowUnderlay'').setStyle(''display'',''none'');		if (this.iframeEl){			this.iframeEl.setStyle(''visibility'', ''visible'');		}		this.fireEvent(''onResize'', this.windowEl);	},	adjustHandles: function(){		var shadowBlur = this.options.shadowBlur;		var shadowBlur2x = shadowBlur * 2;		var shadowOffset = this.options.shadowOffset;		var top = shadowBlur - shadowOffset.y - 1;		var right = shadowBlur + shadowOffset.x - 1;		var bottom = shadowBlur + shadowOffset.y - 1;		var left = shadowBlur - shadowOffset.x - 1;				var coordinates = this.windowEl.getCoordinates();		var width = coordinates.width - shadowBlur2x + 2;		var height = coordinates.height - shadowBlur2x + 2;		this.n.setStyles({			''top'': top,			''left'': left + 10,			''width'': width - 20		});		this.e.setStyles({			''top'': top + 10,			''right'': right,			''height'': height - 30		});		this.s.setStyles({			''bottom'': bottom,			''left'': left + 10,			''width'': width - 30		});		this.w.setStyles({			''top'': top + 10,			''left'': left,			''height'': height - 20		});		this.ne.setStyles({			''top'': top,			''right'': right			});		this.se.setStyles({			''bottom'': bottom,			''right'': right		});		this.sw.setStyles({			''bottom'': bottom,			''left'': left		});		this.nw.setStyles({			''top'': top,			''left'': left		});	},	detachResizable: function(){			this.resizable1.detach();			this.resizable2.detach();			this.resizable3.detach();			this.resizable4.detach();			this.resizable5.detach();			this.windowEl.getElements(''.handle'').setStyle(''display'', ''none'');	},	reattachResizable: function(){			this.resizable1.attach();			this.resizable2.attach();			this.resizable3.attach();			this.resizable4.attach();			this.resizable5.attach();			this.windowEl.getElements(''.handle'').setStyle(''display'', ''block'');	},	/*	Internal Function: insertWindowElements	Arguments:		windowEl	*/	insertWindowElements: function(){				var options = this.options;		var height = options.height;		var width = options.width;		var id = options.id;		var cache = {};		if (Browser.Engine.trident4){			cache.zIndexFixEl = new Element(''iframe'', {				''id'': id + ''_zIndexFix'',				''class'': ''zIndexFix'',				''scrolling'': ''no'',				''marginWidth'': 0,				''marginHeight'': 0,				''src'': ''''			}).inject(this.windowEl);		}		cache.overlayEl = new Element(''div'', {			''id'': id + ''_overlay'',			''class'': ''mochaOverlay''		}).inject(this.windowEl);		cache.titleBarEl = new Element(''div'', {			''id'': id + ''_titleBar'',			''class'': ''mochaTitlebar'',			''styles'': {				''cursor'': options.draggable ? ''move'' : ''default''			}		}).inject(cache.overlayEl, ''top'');		cache.titleEl = new Element(''h3'', {			''id'': id + ''_title'',			''class'': ''mochaTitle''		}).inject(cache.titleBarEl);		if (options.icon != false){			cache.titleBarEl.setStyles({				''padding-left'': 15,				''background'': ''url('' + options.icon + '') 5px 5px no-repeat''			});		}				cache.contentBorderEl = new Element(''div'', {			''id'': id + ''_contentBorder'',			''class'': ''mochaContentBorder''		}).inject(cache.overlayEl);		if (options.toolbar){			cache.toolbarWrapperEl = new Element(''div'', {				''id'': id + ''_toolbarWrapper'',				''class'': ''mochaToolbarWrapper''			}).inject(cache.contentBorderEl, options.toolbarPosition == ''bottom'' ? ''after'' : ''before'');			if (options.toolbarPosition == ''bottom'') {				cache.toolbarWrapperEl.addClass(''bottom'');			}			cache.toolbarEl = new Element(''div'', {				''id'': id + ''_toolbar'',				''class'': ''mochaToolbar''			}).inject(cache.toolbarWrapperEl);		}		if (options.toolbar2){			cache.toolbar2WrapperEl = new Element(''div'', {				''id'': id + ''_toolbar2Wrapper'',				''class'': ''mochaToolbarWrapper''			}).inject(cache.contentBorderEl, options.toolbar2Position == ''bottom'' ? ''after'' : ''before'');			if (options.toolbar2Position == ''bottom'') {				cache.toolbar2WrapperEl.addClass(''bottom'');			}			cache.toolbar2El = new Element(''div'', {				''id'': id + ''_toolbar2'',				''class'': ''mochaToolbar''			}).inject(cache.toolbar2WrapperEl);		}		cache.contentWrapperEl = new Element(''div'', {			''id'': id + ''_contentWrapper'',			''class'': ''mochaContentWrapper'',			''styles'': {				''width'': width + ''px'',				''height'': height + ''px''			}		}).inject(cache.contentBorderEl);				if (this.options.shape == ''gauge''){			cache.contentBorderEl.setStyle(''borderWidth'', 0);		}		cache.contentEl = new Element(''div'', {			''id'': id + ''_content'',			''class'': ''mochaContent''		}).inject(cache.contentWrapperEl);		if (this.options.useCanvas == true) {			cache.canvasEl = new Element(''canvas'', {				''id'': id + ''_canvas'',				''class'': ''mochaCanvas'',				''width'': 1,				''height'': 1			}).inject(this.windowEl);			if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(cache.canvasEl);				cache.canvasEl = this.windowEl.getElement(''.mochaCanvas'');			}		}		cache.controlsEl = new Element(''div'', {			''id'': id + ''_controls'',			''class'': ''mochaControls''		}).inject(cache.overlayEl, ''after'');		if (options.useCanvasControls == true){			cache.canvasControlsEl = new Element(''canvas'', {				''id'': id + ''_canvasControls'',				''class'': ''mochaCanvasControls'',				''width'': 14,				''height'': 14			}).inject(this.windowEl);			if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(cache.canvasControlsEl);				cache.canvasControlsEl = this.windowEl.getElement(''.mochaCanvasControls'');			}		}		if (options.closable){			cache.closeButtonEl = new Element(''div'', {				''id'': id + ''_closeButton'',				''class'': ''mochaCloseButton'',				''title'': ''Close''			}).inject(cache.controlsEl);			if (options.useCanvasControls == true){				cache.closeButtonEl.setStyle(''background'', ''none'');			}		}		if (options.maximizable){			cache.maximizeButtonEl = new Element(''div'', {				''id'': id + ''_maximizeButton'',				''class'': ''mochaMaximizeButton'',				''title'': ''Maximize''			}).inject(cache.controlsEl);			if (options.useCanvasControls == true){				cache.maximizeButtonEl.setStyle(''background'', ''none'');			}		}		if (options.minimizable){			cache.minimizeButtonEl = new Element(''div'', {				''id'': id + ''_minimizeButton'',				''class'': ''mochaMinimizeButton'',				''title'': ''Minimize''			}).inject(cache.controlsEl);			if (options.useCanvasControls == true){				cache.minimizeButtonEl.setStyle(''background'', ''none'');			}		}		if (options.useSpinner == true &amp;&amp; options.shape != ''gauge'' &amp;&amp; options.type != ''notification''){			cache.spinnerEl = new Element(''div'', {				''id'': id + ''_spinner'',				''class'': ''mochaSpinner'',				''width'': 16,				''height'': 16			}).inject(this.windowEl, ''bottom'');		}		if (this.options.shape == ''gauge''){			cache.canvasHeaderEl = new Element(''canvas'', {				''id'': id + ''_canvasHeader'',				''class'': ''mochaCanvasHeader'',				''width'': this.options.width,				''height'': 26			}).inject(this.windowEl, ''bottom'');					if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(cache.canvasHeaderEl);				cache.canvasHeaderEl = this.windowEl.getElement(''.mochaCanvasHeader'');			}		}		if ( Browser.Engine.trident ){			cache.overlayEl.setStyle(''zIndex'', 2);		}		// For Mac Firefox 2 to help reduce scrollbar bugs in that browser		if (Browser.Platform.mac &amp;&amp; Browser.Engine.gecko){			if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)){				var ffversion = new Number(RegExp.$1);				if (ffversion &lt; 3){					cache.overlayEl.setStyle(''overflow'', ''auto'');				}			}		}		if (options.resizable){			cache.n = new Element(''div'', {				''id'': id + ''_resizeHandle_n'',				''class'': ''handle'',				''styles'': {					''top'': 0,					''left'': 10,					''cursor'': ''n-resize''				}			}).inject(cache.overlayEl, ''after'');			cache.ne = new Element(''div'', {				''id'': id + ''_resizeHandle_ne'',				''class'': ''handle corner'',				''styles'': {					''top'': 0,					''right'': 0,					''cursor'': ''ne-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.e = new Element(''div'', {				''id'': id + ''_resizeHandle_e'',				''class'': ''handle'',						''styles'': {					''top'': 10,					''right'': 0,					''cursor'': ''e-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.se = new Element(''div'', {				''id'': id + ''_resizeHandle_se'',				''class'': ''handle cornerSE'',				''styles'': {					''bottom'': 0,					''right'': 0,					''cursor'': ''se-resize''				}			}).inject(cache.overlayEl, ''after'');			cache.s = new Element(''div'', {				''id'': id + ''_resizeHandle_s'',				''class'': ''handle'',				''styles'': {					''bottom'': 0,					''left'': 10,					''cursor'': ''s-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.sw = new Element(''div'', {				''id'': id + ''_resizeHandle_sw'',				''class'': ''handle corner'',				''styles'': {					''bottom'': 0,					''left'': 0,					''cursor'': ''sw-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.w = new Element(''div'', {				''id'': id + ''_resizeHandle_w'',				''class'': ''handle'',						''styles'': {					''top'': 10,					''left'': 0,					''cursor'': ''w-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.nw = new Element(''div'', {				''id'': id + ''_resizeHandle_nw'',				''class'': ''handle corner'',						''styles'': {					''top'': 0,					''left'': 0,					''cursor'': ''nw-resize''				}			}).inject(cache.overlayEl, ''after'');		}		$extend(this, cache);			},	/*	Internal function: drawWindow		This is where we create the canvas GUI		Arguments: 		windowEl: the $(window)		shadows: (boolean) false will draw a window without shadows	*/		drawWindow: function(windowEl, shadows) {						if (this.isCollapsed){			this.drawWindowCollapsed(windowEl, shadows);			return;		}		var options = this.options;		var shadowBlur = options.shadowBlur;		var shadowBlur2x = shadowBlur * 2;		var shadowOffset = this.options.shadowOffset;		this.overlayEl.setStyles({			''width'': this.contentWrapperEl.offsetWidth		});		// Resize iframe when window is resized		if (this.iframeEl) {			this.iframeEl.setStyles({				''height'': this.contentWrapperEl.offsetHeight			});		}		var borderHeight = this.contentBorderEl.getStyle(''border-top'').toInt() + this.contentBorderEl.getStyle(''border-bottom'').toInt();		var toolbarHeight = this.toolbarWrapperEl ? this.toolbarWrapperEl.getStyle(''height'').toInt() + this.toolbarWrapperEl.getStyle(''border-top'').toInt() : 0;		var toolbar2Height = this.toolbar2WrapperEl ? this.toolbar2WrapperEl.getStyle(''height'').toInt() + this.toolbar2WrapperEl.getStyle(''border-top'').toInt() : 0;		this.headerFooterShadow = options.headerHeight + options.footerHeight + shadowBlur2x;		var height = this.contentWrapperEl.getStyle(''height'').toInt() + this.headerFooterShadow + toolbarHeight + toolbar2Height + borderHeight;		var width = this.contentWrapperEl.getStyle(''width'').toInt() + shadowBlur2x;		this.windowEl.setStyles({			''height'': height,			''width'': width		});		this.overlayEl.setStyles({			''height'': height,			''top'': shadowBlur - shadowOffset.y,			''left'': shadowBlur - shadowOffset.x		});				// Opera requires the canvas height and width be set this way when resizing:		if (this.options.useCanvas == true) {			this.canvasEl.height = height;			this.canvasEl.width = width;		}		// Part of the fix for IE6 select z-index bug		if (Browser.Engine.trident4){			this.zIndexFixEl.setStyles({				''width'': width,				''height'': height			})		}		this.titleBarEl.setStyles({			''width'': width - shadowBlur2x,			''height'': options.headerHeight		});		// Make sure loading icon is placed correctly.		if (options.useSpinner == true &amp;&amp; options.shape != ''gauge'' &amp;&amp; options.type != ''notification''){			this.spinnerEl.setStyles({				''left'': shadowBlur - shadowOffset.x + 3,				''bottom'': shadowBlur + shadowOffset.y +  4			});		}				if (this.options.useCanvas != false) {					// Draw Window			var ctx = this.canvasEl.getContext(''2d'');			ctx.clearRect(0, 0, width, height);						switch (options.shape) {				case ''box'':					this.drawBox(ctx, width, height, shadowBlur, shadowOffset, shadows);					break;				case ''gauge'':					this.drawGauge(ctx, width, height, shadowBlur, shadowOffset, shadows);					break;			}			if (options.resizable){ 				MochaUI.triangle(					ctx,					width - (shadowBlur + shadowOffset.x + 17),					height - (shadowBlur + shadowOffset.y + 18),					11,					11,					options.resizableColor,					1.0				);			}			// Invisible dummy object. The last element drawn is not rendered consistently while resizing in IE6 and IE7			if (Browser.Engine.trident){				MochaUI.triangle(ctx, 0, 0, 10, 10, options.resizableColor, 0);			}		}				if (options.type != ''notification'' &amp;&amp; options.useCanvasControls == true){			this.drawControls(width, height, shadows);		}	},	drawWindowCollapsed: function(windowEl, shadows) {				var options = this.options;		var shadowBlur = options.shadowBlur;		var shadowBlur2x = shadowBlur * 2;		var shadowOffset = options.shadowOffset;				var headerShadow = options.headerHeight + shadowBlur2x + 2;		var height = headerShadow;		var width = this.contentWrapperEl.getStyle(''width'').toInt() + shadowBlur2x;		this.windowEl.setStyle(''height'', height);				this.overlayEl.setStyles({			''height'': height,			''top'': shadowBlur - shadowOffset.y,			''left'': shadowBlur - shadowOffset.x		});				// Opera height and width must be set like this, when resizing:		this.canvasEl.height = height;		this.canvasEl.width = width;		// Part of the fix for IE6 select z-index bug		if (Browser.Engine.trident4){			this.zIndexFixEl.setStyles({				''width'': width,				''height'': height			});		}		// Set width		this.windowEl.setStyle(''width'', width);		this.overlayEl.setStyle(''width'', width);		this.titleBarEl.setStyles({			''width'': width - shadowBlur2x,			''height'': options.headerHeight		});			// Draw Window		if (this.options.useCanvas != false) {			var ctx = this.canvasEl.getContext(''2d'');			ctx.clearRect(0, 0, width, height);						this.drawBoxCollapsed(ctx, width, height, shadowBlur, shadowOffset, shadows);			if (options.useCanvasControls == true) {				this.drawControls(width, height, shadows);			}						// Invisible dummy object. The last element drawn is not rendered consistently while resizing in IE6 and IE7			if (Browser.Engine.trident){				MochaUI.triangle(ctx, 0, 0, 10, 10, options.resizableColor, 0);			}		}	},		drawControls : function(width, height, shadows){		var options = this.options;		var shadowBlur = options.shadowBlur;		var shadowOffset = options.shadowOffset;		var controlsOffset = options.controlsOffset;				// Make sure controls are placed correctly.		this.controlsEl.setStyles({			''right'': shadowBlur + shadowOffset.x + controlsOffset.right,			''top'': shadowBlur - shadowOffset.y + controlsOffset.top		});		this.canvasControlsEl.setStyles({			''right'': shadowBlur + shadowOffset.x + controlsOffset.right,			''top'': shadowBlur - shadowOffset.y + controlsOffset.top		});		// Calculate X position for controlbuttons		//var mochaControlsWidth = 52;		this.closebuttonX = options.closable ? this.mochaControlsWidth - 7 : this.mochaControlsWidth + 12;		this.maximizebuttonX = this.closebuttonX - (options.maximizable ? 19 : 0);		this.minimizebuttonX = this.maximizebuttonX - (options.minimizable ? 19 : 0);				var ctx2 = this.canvasControlsEl.getContext(''2d'');		ctx2.clearRect(0, 0, 100, 100);		if (this.options.closable){			this.closebutton(				ctx2,				this.closebuttonX,				7,				options.closeBgColor,				1.0,				options.closeColor,				1.0			);		}		if (this.options.maximizable){			this.maximizebutton(				ctx2,				this.maximizebuttonX,				7,				options.maximizeBgColor,				1.0,				options.maximizeColor,				1.0			);		}		if (this.options.minimizable){			this.minimizebutton(				ctx2,				this.minimizebuttonX,				7,				options.minimizeBgColor,				1.0,				options.minimizeColor,				1.0			);		}			},	drawBox: function(ctx, width, height, shadowBlur, shadowOffset, shadows){		var shadowBlur2x = shadowBlur * 2;		var cornerRadius = this.options.cornerRadius;		// This is the drop shadow. It is created onion style.		if ( shadows != false ) {				for (var x = 0; x &lt;= shadowBlur; x++){				MochaUI.roundedRect(					ctx,					shadowOffset.x + x,					shadowOffset.y + x,					width - (x * 2) - shadowOffset.x,					height - (x * 2) - shadowOffset.y,					cornerRadius + (shadowBlur - x),					[0, 0, 0],					x == shadowBlur ? .29 : .065 + (x * .01)				);			}		}		// Window body.		this.bodyRoundedRect(			ctx,                          // context			shadowBlur - shadowOffset.x,  // x			shadowBlur - shadowOffset.y,  // y			width - shadowBlur2x,         // width			height - shadowBlur2x,        // height			cornerRadius,                 // corner radius			this.options.bodyBgColor      // Footer color		);		if (this.options.type != ''notification''){		// Window header.			this.topRoundedRect(				ctx,                            // context				shadowBlur - shadowOffset.x,    // x				shadowBlur - shadowOffset.y,    // y				width - shadowBlur2x,           // width				this.options.headerHeight,      // height				cornerRadius,                   // corner radius				this.options.headerStartColor,  // Header gradient''s top color				this.options.headerStopColor    // Header gradient''s bottom color			);		}		},	drawBoxCollapsed: function(ctx, width, height, shadowBlur, shadowOffset, shadows){		var options = this.options;		var shadowBlur2x = shadowBlur * 2;		var cornerRadius = options.cornerRadius;			// This is the drop shadow. It is created onion style.		if ( shadows != false ){			for (var x = 0; x &lt;= shadowBlur; x++){				MochaUI.roundedRect(					ctx,					shadowOffset.x + x,					shadowOffset.y + x,					width - (x * 2) - shadowOffset.x,					height - (x * 2) - shadowOffset.y,					cornerRadius + (shadowBlur - x),					[0, 0, 0],					x == shadowBlur ? .3 : .06 + (x * .01)				);			}		}		// Window header		this.topRoundedRect2(			ctx,                          // context			shadowBlur - shadowOffset.x,  // x			shadowBlur - shadowOffset.y,  // y			width - shadowBlur2x,         // width			options.headerHeight + 2,     // height			cornerRadius,                 // corner radius			options.headerStartColor,     // Header gradient''s top color			options.headerStopColor       // Header gradient''s bottom color		);	},		drawGauge: function(ctx, width, height, shadowBlur, shadowOffset, shadows){		var options = this.options;		var radius = (width * .5) - (shadowBlur) + 16;		if (shadows != false) {				for (var x = 0; x &lt;= shadowBlur; x++){				MochaUI.circle(					ctx,					width * .5 + shadowOffset.x,					(height  + options.headerHeight) * .5 + shadowOffset.x,					(width *.5) - (x * 2) - shadowOffset.x,					[0, 0, 0],					x == shadowBlur ? .75 : .075 + (x * .04)				);			}		}		MochaUI.circle(			ctx,			width * .5  - shadowOffset.x,			(height + options.headerHeight) * .5  - shadowOffset.y,			(width *.5) - shadowBlur,			options.bodyBgColor,			1		);		// Draw gauge header		this.canvasHeaderEl.setStyles({			''top'': shadowBlur - shadowOffset.y,			''left'': shadowBlur - shadowOffset.x		});				var ctx = this.canvasHeaderEl.getContext(''2d'');		ctx.clearRect(0, 0, width, 100);		ctx.beginPath();		ctx.lineWidth = 24;		ctx.lineCap = ''round'';		ctx.moveTo(13, 13);		ctx.lineTo(width - (shadowBlur*2) - 13, 13);		ctx.strokeStyle = ''rgba(0, 0, 0, .65)'';		ctx.stroke();	},	bodyRoundedRect: function(ctx, x, y, width, height, radius, rgb){		ctx.fillStyle = ''rgba('' + rgb.join('','') + '', 100)'';		ctx.beginPath();		ctx.moveTo(x, y + radius);		ctx.lineTo(x, y + height - radius);		ctx.quadraticCurveTo(x, y + height, x + radius, y + height);		ctx.lineTo(x + width - radius, y + height);		ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill();	},	topRoundedRect: function(ctx, x, y, width, height, radius, headerStartColor, headerStopColor){		var lingrad = ctx.createLinearGradient(0, 0, 0, height);		lingrad.addColorStop(0, ''rgba('' + headerStartColor.join('','') + '', 1)'');		lingrad.addColorStop(1, ''rgba('' + headerStopColor.join('','') + '', 1)'');				ctx.fillStyle = lingrad;		ctx.beginPath();		ctx.moveTo(x, y);		ctx.lineTo(x, y + height);		ctx.lineTo(x + width, y + height);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill();		/*		ctx.beginPath();		ctx.strokeStyle = ''#000'';		ctx.lineWidth = 1;		ctx.moveTo(x, y + height + .5);		ctx.lineTo(x + width, y + height + .5);		ctx.stroke();		*/	},	topRoundedRect2: function(ctx, x, y, width, height, radius, headerStartColor, headerStopColor){		var lingrad = ctx.createLinearGradient(0, this.options.shadowBlur - 1, 0, height + this.options.shadowBlur + 3);		lingrad.addColorStop(0, ''rgba('' + headerStartColor.join('','') + '', 1)'');		lingrad.addColorStop(1, ''rgba('' + headerStopColor.join('','') + '', 1)'');		ctx.fillStyle = lingrad;		ctx.beginPath();		ctx.moveTo(x, y + radius);		ctx.lineTo(x, y + height - radius);		ctx.quadraticCurveTo(x, y + height, x + radius, y + height);		ctx.lineTo(x + width - radius, y + height);		ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill();		},	maximizebutton: function(ctx, x, y, rgbBg, aBg, rgb, a){		// Circle		ctx.beginPath();		ctx.moveTo(x, y);		ctx.arc(x, y, 7, 0, Math.PI*2, true);		ctx.fillStyle = ''rgba('' + rgbBg.join('','') + '','' + aBg + '')'';		ctx.fill();		// X sign		ctx.strokeStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x, y - 4);		ctx.lineTo(x, y + 4);		ctx.stroke();		ctx.beginPath();		ctx.moveTo(x - 4, y);		ctx.lineTo(x + 4, y);		ctx.stroke();	},	closebutton: function(ctx, x, y, rgbBg, aBg, rgb, a){		// Circle		ctx.beginPath();		ctx.moveTo(x, y);		ctx.arc(x, y, 7, 0, Math.PI*2, true);		ctx.fillStyle = ''rgba('' + rgbBg.join('','') + '','' + aBg + '')'';		ctx.fill();		// Plus sign		ctx.strokeStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x - 3, y - 3);		ctx.lineTo(x + 3, y + 3);		ctx.stroke();		ctx.beginPath();		ctx.moveTo(x + 3, y - 3);		ctx.lineTo(x - 3, y + 3);		ctx.stroke();	},	minimizebutton: function(ctx, x, y, rgbBg, aBg, rgb, a){		// Circle		ctx.beginPath();		ctx.moveTo(x,y);		ctx.arc(x,y,7,0,Math.PI*2,true);		ctx.fillStyle = ''rgba('' + rgbBg.join('','') + '','' + aBg + '')'';		ctx.fill();		// Minus sign		ctx.strokeStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x - 4, y);		ctx.lineTo(x + 4, y);		ctx.stroke();	},	/*	Function: hideSpinner		Hides the spinner.			*/		hideSpinner: function(spinner) {		if ($(spinner))	$(spinner).setStyle(''visibility'', ''hidden'');	},	/*	Function: showSpinner		Shows the spinner.		*/		showSpinner: function(spinner){		if (!this.options.useSpinner || this.options.shape == ''gauge'' || this.options.type == ''notification'') return;		$(spinner).setStyles({			''visibility'': ''visible''		});	},	setMochaControlsWidth: function(){		this.mochaControlsWidth = 0;		var options = this.options;		if (options.minimizable){			this.mochaControlsWidth += (this.minimizeButtonEl.getStyle(''margin-left'').toInt() + this.minimizeButtonEl.getStyle(''width'').toInt());		}		if (options.maximizable){			this.mochaControlsWidth += (this.maximizeButtonEl.getStyle(''margin-left'').toInt() + this.maximizeButtonEl.getStyle(''width'').toInt());		}		if (options.closable){			this.mochaControlsWidth += (this.closeButtonEl.getStyle(''margin-left'').toInt() + this.closeButtonEl.getStyle(''width'').toInt());		}		this.controlsEl.setStyle(''width'', this.mochaControlsWidth);		if (options.useCanvasControls == true){			this.canvasControlsEl.setProperty(''width'', this.mochaControlsWidth);		}	}});MochaUI.Window.implement(new Options, new Events);'</body><body package="Mootools-MochaUI">windowsFromHtmlJs	^'/*Script: Windows-from-html.js	Create windows from html markup in page.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Requires:	Core.js, Window.jsExample:	HTML markup.	(start code)&lt;div class="mocha" id="mywindow" style="width:300px;height:255px;top:50px;left:350px"&gt;	&lt;h3 class="mochaTitle"&gt;My Window&lt;/h3&gt;	&lt;p&gt;My Window Content&lt;/p&gt;&lt;/div&gt;		(end)See Also:	&lt;Window&gt;*/MochaUI.extend({	NewWindowsFromHTML: function(){		$$(''div.mocha'').each(function(el) {			// Get the window title and destroy that element, so it does not end up in window content			if ( Browser.Engine.presto || Browser.Engine.trident5 ){				el.setStyle(''display'',''block''); // Required by Opera, and probably IE7			}			var title = el.getElement(''h3.mochaTitle'');			var elDimensions = el.getStyles(''height'', ''width'');			var properties = {				id: el.getProperty(''id''),				height: elDimensions.height.toInt(),				width: elDimensions.width.toInt(),				x: el.getStyle(''left'').toInt(),				y: el.getStyle(''top'').toInt()			};			// If there is a title element, set title and destroy the element so it does not end up in window content			if ( title ) {				properties.title = title.innerHTML;				title.destroy();			}					// Get content and destroy the element			properties.content = el.innerHTML;			el.destroy();						// Create window			new MochaUI.Window(properties, true);		}.bind(this));	}});'</body><body package="Mootools-MochaUI">windowsFromJsonJs	^'/*Script: Windows-from-json.js	Create one or more windows from JSON data. You can define all the same properties as you can for new MochaUI.Window(). Undefined properties are set to their defaults.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Syntax:	(start code)	MochaUI.newWindowsFromJSON(properties);	(end)Example:	(start code)	MochaUI.jsonWindows = function(){		var url = ''data/json-windows-data.js'';		var request = new Request.JSON({			url: url,			method: ''get'',			onComplete: function(properties) {				MochaUI.newWindowsFromJSON(properties.windows);			}		}).send();	}	(end)Note: 	Windows created from JSON are not compatible with the current cookie based version	of Save and Load Workspace.  	See Also:	&lt;Window&gt;*/MochaUI.extend({		newWindowsFromJSON: function(properties){		properties.each(function(properties) {				new MochaUI.Window(properties);		}.bind(this));	}});'</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>images/icons/48x48/</category><body package="Mootools-MochaUI">cameraPng	^(ByteArray fromPackedString: '"UANQ04JF (@@@@MRT!DT @@@C@@@@@0B@X@@@AW@/&amp;G@@@PMT%DPUQ( [6YZ81]U7WG_?-1W''L_L7O''[X=-D&amp;1"I7Y,EID@H\T1T .)B#R)%AHJ8REDEQ(^''0B)()D"/+S9T-H/EQB ((D@]UAKRD!BWJT)XA,[''AA,18''-,S4/3?,&gt;37O/_##7#,\^I99PXD-[Y&lt;:Y_\?9?=_^Z:7?W%-XZ5%+&amp;9(&gt;#&lt;$LE(-@@BCD" F"&lt;7S9@U(+1,:\9^"188@%RUJ"JM)#SGXWE&amp;V,&amp;QBB?7D\99%"(Q GWS:/!.''6=;=?5SN1-EQ]D7!#CFDT$\PI+UZKT*$D EHRJRUI$"BDPD"I$)H4SWLB#&amp;I:&gt;#2G_7TD BQI+).Y&amp;_;7V*61L0 BV*4V5)+1*:9:0;&lt;EP]^?AHD7LS\7/2YL@G+MH7&lt;?;X;I2X%/M%-1,UK)YVA  GT#H5 !5,_M9!^#NO( \B-0\*4/?JLQ,MY&gt;[''I*&gt;)&lt;,P 4MCSJ:_!5CP8LT"56TR-5(+S!6;M#F*\''I+0C/A\1Z7/.GIE@FQ(E[$3R=(5*-7]),5!$\FNSZZ;_Q6=-K(QB -RZJH!XW&amp;&lt;Q13OS4&gt;S&gt;76C&lt;CG/=#D; Z.@[XC+3G]]7+)IPCR"%17]Y+6GW=C.*5N"&gt;&lt;&gt;BIQ$!@DO''F\LCL3R;5^)=F(L3U5''*W*D$&amp;R//''V7[,_#:K(C4+ N/K5.!58,&gt;]9[9YRN%IJ%EJ9P;^;1VJL(U *&lt;+Z77$R=7.C)__&gt;M2SJRIFE&gt;_(:)*V''&amp;9&gt;^)5&amp;),6+#1W\@CPG0%DJ&lt;7B%6[1L''_-%*-O?DC_4^!*4,*)_A\E0,+PE.DTB %DBJOT)^66Y%Y//Z-[3E6Z(0([FD0%H)%Q(ZG.W;''S++K9Q?L3&lt;=?@D!?W0Q6@3&lt;V &amp;A1\X%R,TB%+0&gt;@Z*5FLR! !V4C/# [FF-I$) 0"(![LWFZDG &gt;/356%DNGC+M9&lt;6Z: (B J4@)3UJ52/STMD/U)Q.A ;&lt;O@"*J0''6OOOKHK____3&lt;396^8?+++&gt;]2=''&gt;O.S=8MPI)%ZJT.@H9"0"P"Z$T9&lt;C &amp;#&amp;N"JL*SVYH +LTB3VZSQ+5A(=$$"$J,ET I+UY+C;C/-XC)6Y''3U4P_ALE__.6+W;7%R?_]-?3,2H-G&gt;L!=G&gt;GX&gt;CD&gt;&lt;8''OT. .DAPBY._&amp;"R&lt;AGL\IXQPQ!RE1GMLJ03ZQ!BSI6$/L(+P&amp;B@I\5&lt;7AZW7ETK(VI5X''S)38=O5_?#H@%WJE&gt;^(&lt;.&gt;;Y1P4;[&amp;C?K7;N=;&lt;?0+*M(=31U;\3^V:\U!Q6I@M!GMM*!TQ!S")K4512BMCZ(U#(X&amp;9.%.FQDPH/PF&amp;M:6+RMDM]1'']VDU"CD!+Y_?C V9H$X]6:]T1LSCB&lt;[Y"Z+WG48EE6;]3EUF6J9;;;L;[/6D9PJOC&lt;[7:K%YBFLZ$1B@EJR+SV&gt;DDQ57F1I"UIX!1G,6O;M"0R+U5\3&lt;WQ&amp;#"NU?''RYP%$:V,:NTA1;OQ)C[A)42X&amp;I"Y0" ;#8&gt;M$M.NN=W^0HQ#%E3&lt;=2FL?&gt;"&lt;&gt;?MFO\''9&amp;!''IOB\=1:_I\-GY0GH6#ML+UZJ&amp;I81X7/?5]?FK?PW[.7D$X)ZR)H\-2S[V8.L"Z&lt;$A:YPJ6D0X7#F; %?2R)]$%6@CJJLH0)N&gt;*O.:&gt;&gt;4LLCP=R:")P:Z/PT2;#.";Z4V"-4T*#-\I5W[(JAV+UQPB6[K&amp;F*Z''3ME(-_/[\\?12?&lt;?9&lt;D\?3/+QCQ!30PU\Q55V)^(8S*9DXFG].''U5HTQO+UZ#-=KK&gt;UO''TU,TX&gt;DX!88]X''I2$ ?^&lt;#^&lt;=^47DTX!_[4UR,T"#.? Z(&lt; &lt;OC= BCH)_K,7B1)Z''#&lt;"R^Y&amp;I0$#FHV%1X9\?H$VQRRI$$N/ 5X*U]_R)(+N4)5&lt;&gt;[M"&lt;U"(^^E7;1@74@_B?LK=L75L\TT^9?YR8?W06_^&gt;1$@&amp;(4V!THWO[7]EHH@7?^Y''I9&amp;\''JR*_O''NWM&amp;#F(;]B/-DO &gt;_"F TB PE@*$T(@PFFL05+Q\Q;?*? A@OO&gt;[E:=DPF.%#/3=E;=0;YMOO&lt;76;]-)5U+4%?-IA5MN5T81&lt;?HL3YMMTCB?,LBID:=P*UPPP/C((8&gt;BEE25ZRLX"&gt;L8JD^#!@JY17,)EU%&amp;"\H&amp;I$7)F1 "B@KB,O&amp;?0H25E*WT=:2575$EK$6.;@M=%S;3]?_^2;FWW.K,&amp;[M\?\Z+*P1VFN$_X^G(@)&gt;=9;N 8N3Y,?S7C&gt;S:15+*=S)!GGG]5#^1Y\,VWL^%.:^GR*V2GN,/[T&amp;V4Z!UZSZ[!FE4\=#NFVDX?$VVY\^@W:4\K77_94(]KK;_1Z_..X\MF3]0=N!Q''-''7T;;2+5&gt;!_;R_6=;7G#;&gt;,X=!#DG+_L+SMLW7O_+;&gt;4&amp;R!EJ)#N_;E2V*24:7%@QAE&lt;U""^;.["*UB+;/X:5U0MB*&lt;Y;7:"?+MJT4B8/3AE5]OO#  &gt;3]&gt;1&gt;L#8=3;[WW\_/--?NM+7&gt;]1\T*9WHY@2QI"%RJ+,AGHW@\%2QI^OSQQ&gt;''):\G3OJRTFFLP;_W^&amp;SU#CMYZ!A@DP\CT5AR77WX[#.LP!&amp;F6",@U4POVF$YG53M6= 0K"4-&lt;&lt;J8OHYR 6V!2^.0L 2OCMI-M)IQ$VXYR"$Z=0WOO;,NZ#J;@)5Z+,V?_O+Y,6TH\1&gt;779$@/M)[B&lt;31:^7/9=Z=?3]:=^;''11!,)%T*DX[!:1-YR%CCFTB2VFA(XPD+E?LH&lt;=W(]5?O(:"(R^@ECP2M$5.HJ"&gt;];-I)M#!19''%6;]*E]M&lt;&lt;EV"N%1GF\U]&gt;PT"JD(E ,X*7%!3?&lt;HX\OG0Z TB",H+*B0M+JJ$HHA ^G&lt;&gt;''WF F8[Q&lt;)]7_#A39)$"C&lt;@J44,&amp;5I@HE@*S3)UZ-U#CGK^8SNKN"6$C-29@!OO_WTQU%X-UW.YP&amp;,A[1-/&lt;S7OO(FA("SBF$-%_9&gt;^'');VY)_YGE1E-ON:%IIIG''M2E*3CJKUZ-E(MB9Z=4HH_M&gt;''5V+1;KOO\/38\YQRE@(E$"Q)Z:IN&amp;^Y7IHCM%ZLT@,]5&lt;S6OT*GD*]N''.^&lt;_/,PG;/1+J/4CYLZ6!Y/JVW]&gt;["5RR,H0)EZ+(YQBR+&amp;&lt;''L[F1''#!!Q](MA)TJ)W%RAZ5YW''G0R&lt;+I]YD@H/+N+"^";@V(RWE(L"SS?:D[773&amp;63[.)W7/.==&gt;T_Z5+Z]*V,7HPQI$!BFHT*)YY@//?02D1LSZJ7);&gt;=_'')VUN.!2V=KWRPB4T  )$THB$#@J._D-M?J6&amp;=?F&amp;;Y.1Q(C,+O^AVAW8%?6 TZ# ^]9UJ-U9.[&amp;"JJH;.;.YR]^M%''[6)6\&lt;V*&gt;.*X(YBFW@D*A%@!!*R7U^\\;7,DO_/@(B;M3ME,-R.T2P(#\X+XCAKH,C=&gt;5V&amp;7Y ZL(P !1TUI[Z_WN?T)''/22AJ&lt;OOFR"-$UH!AP +LA"RMJUXKCD=LXFTL/&gt;H@B$T&amp;SFD;R5$%&amp;WL3&gt;_53&amp;Z3^UET2[HLH\@X.;1&lt;U+YN2K6T7CJAKY./V/W0)QN/+G(&amp;AB"-$EK%5P]#,\ZPICEV MXR+DUX \49L3*:''(FA@Y+MI$HH'''';:Z\+%L(UB@\?3LE$FP"3ODE"23IB5:4U)&amp;-I,M"$TB,3O3:?]"]&gt;49X4@5N+5?E*+X25HHU@*-;RU(+5.IU(+(@L&lt;K:DTB T&gt;&lt;\%ODPPN77#(F6QY1-CPDF&amp;Z8##9C"7ML(1I2SJ;GFVRIBFJH*H((%Z+4V 4ZCPZID%2V[2/.XQJ1RKFVE&amp;/M6P''ED()2Z1A--^:%JB$1% C-I7W)E!+&amp;Y.[89&amp;_OL;8.[NXIDX)Q[UV8&gt;VWW2G0_T3[TUZ^J&amp;P606ZVNH;);^593ON&lt;\5IJYX1)#(:NO/=:B@!@VJ0ORFBY L''L!W /AH;+-L&lt;G&lt;,RU&amp;W0.AAZ-E^=&lt;96:._.LV+KV\O''NZ\;O''*MW+;\C WJ# JXT#I]I1TLZ2_\^N_18ZGG3*-X1&lt;NPJ"7Q7@D]@M.I@''JR$ED UR \ G^+9O&amp;&amp;U9?@YLZ$@H("#"5#==M:5&amp;B3?0NG7:EE(([++)I"X&amp;10%[HT+)]&amp;J;THYTR-HTD)GK95;2T'',DIN6?%95A77WWW\/HG7;88P8AE0"@(!B"W8@OD*U2LRZMPYF_3"ADW)G+QAA+D\+"B(6+EV_O#CD2ODQ/S9$1KAZK5)(M(1-)-Q+T:06L,R"%%(%H&amp;_.T4+)D[,B(C]0@-%Z+WRA0*_VSIMERR-]ZV1QB=A)#A(RT#!B9C7"&gt;C6FHZ*-KZ&lt;E3OXR--!4\D@()0_E&lt;Y.]&amp;ZS[*SD1L !V,G14%SUN,L[".S6?EI8:"YUF''%HOV.R3O,*2\YU%W&amp;*XHHS(34E$!=%HB8/S)4;IV*2$!!B&gt;DJ@ !2 I:^2)=''.&lt;GKB8.LSD&gt;S+%\Q#/NL G-9GE]JP4VI@J)E\Z$;M"&gt;$7*=2,#PBF_O#SD5N\'':4WT$RYZGQV,IO@&lt;$9HVH_EM#,(1S)485)*\&amp;7R03$[UVB"FD-YYC!09]&lt;HDCA08,73344DLXX5RZ)%(H8VQY9 %0O7W/)4VRY''RW21"SK8D4SZ''UZ''$&lt;[2/K3+&amp;@Z-]?)ISTZ0.,G1&amp;&amp;-=IM-U($3T@H#YPVZ5\JC(-R&gt;R:-4Z#[&lt;3L3K14&gt;]OA&lt;/U8WV&amp;-#+\6DDGY&amp;Y,Y&gt;&gt;=/_/$C %U\.IJ4GG''!@=OW5VR&amp;%$UJZNH9-$"SMV7[_^&amp;;=.''W[3$5L$"T)VYX0OCJ2+O^;.;-YV*+"NF9^&lt;5S9;G".1&gt;K"J3R[MRX&amp;WQ3GX7SCN*3IZ37V *O3/\OB0#1#X2_#8&lt;^OG96Z''#9RBHK)I998(#$&gt;O-94GB_L,"2)5V+Y4-JR5U)_5 ],*=T29&lt;:]2&lt;!OQ%)@G_B??;5GG-=63SUW/6GSI$=+1\%S):#U:2Q1R)QD]ATJRB$)%X*D+P#G20&lt;=!HB-V;^RYQ&amp;&gt;E6@0)E&amp;F*17&lt;0J_Y[GK8&lt;NG88LDC80\OGC2&gt;.KA0)*-P&amp;J?4=]UG!(_+L3L3\1LSD5V 4U;?FQ])7MUN[L%OQDJ A$ ))S03M''[$&lt;5?8?C?^\LLM^=;=;/_\,FW3Y-=1MJ;+K&amp;.W-K,7]2RY&gt;4IG)K&amp;.&amp;&gt;?N6&amp;N3KNVU$:^2;7378UO;_;9??LRID&gt;_@K)Z;.1/]9]H"P,2[KE.L(&amp; 1CJNIM(:8#V.UHK+\Q%N6.0,DT,+R66&gt;&gt;^ZOI,-;):^&amp;"%GK=:N#(9(6#F3_,7+M;6&gt;;].4^F!8_]/O2R-5X+H "&lt;Y^6R)!%3\;O)H=?=7-$_O_Z_I9=??(WI^+4&gt;G0QAUB TF+;/K;".-1A4A_O%T''%)\GB0U*?W%!9;;L_S1&amp;R+KJ?5A[.?V-EQ-D%(0M&amp;4:P5%)VR1W*&gt;W8# .QUET".N8ZJ7-K!PJ__7=?PM;=.3Y\.^]]&gt;;\.WM''[10''6%(#!IC) PO;)1=&lt;&lt;LDCA0&lt;^OM-(MIZDDIG+.)GV.*:T*$()%9SRU]]5*+;/M33O[3Z[#][D1DRT)&amp;%6NZ./!\B%QER[#M_.@]CU;"; -&lt;_8''.\UW]_5#CD"2;H8CLMF68H)&gt;UJH2O6+ASS[5:#=/8:5#][Z/.(&gt;&gt;GTPVC&amp;.43.DN*R\=%V7''7WF]Y)- &gt;*PVM$;E.;43/#%TG4%@&amp;/]T''X$O.6O+,2HG[BW7%?:V7/IOU0RTW:W=/&lt;9:E8I9MH&amp;U(39 ;[?@:5;;_L1OVUY@@@@@D%ES$R.P&amp;BB')</body><body package="Mootools-MochaUI">globePng	^(ByteArray fromPackedString: '"UANQ04JF (@@@@MRT!DT @@@C@@@@@0B@X@@@AW@/&amp;G@@@R0T%DPUQ( Y6Z^Y@\U77GO:?/:^:9]/[TZV%56_H%0IJ-$AA&lt;DTMLD,@X!LEIB" B&amp;ICBRQ0''*Q0P3"+#PD0UICGX1$R\M!B0LX\/WKH,V9X-2X\NU-+UR''/L;,8=4&gt;_KG6&lt;%;V(%2&gt;QUST7O=OS+7?G=_W=G#9AR&lt;&amp;+W.$,_P=\E-WJSSLX"RRTH#WL/:._PVNA41*/]*2?(VS_P:59X+T\=![2#]RII)Q*&amp;=TY8)EK.OA=60)\[#VA:Z&amp;H:I$5I(!#ZMQ@:FAXHB^D0B@N49Y@\A!8@6(S!= T2FZ=Z&gt;+$+%ZQ1P"I4+7?@_&gt;6&amp;59W^=Z]+,)/VC]+]_W5ZO-T0 !Q&amp;*,"YI(1OH_X^;KC?\CN,U&gt;J)X2N5"T@S.5)S-W.R,KLS$!A4-_\I^4(8XU09=&lt;S?W0DAIEFJ4H7",,G.]5&gt;?Y_CF-5:YV3-PP MBH@YZLU@OPZZ :6BZ8O,NF&lt;97QB\"-6-_*^/W/[$KC;1T6QJLS&gt;&lt;L#(;^&amp;SQ*O4B&amp;[XRXH:08.42''P,"6[0M@L7O(6S3Y_A[GM$''SEM/VQU]O;%7W?MG KS]\U50=VJHMAGN/%4@3!TX[*$6(-:GZ )$:SMT "!G%&amp;)RUZ"2^_+;J[8XZ=/Q(7T;KT&lt;=R''_2T2AX^%EN;PKMAW0[QLL#''PA8;(U XO/AJG)C3MS?9\^&amp;Z"9[]-.WF0V..6"2B+DD%AJ1S+&amp;8AXPQB JFCI$A((I- V5A/HQ5[TB*X&lt;(6[.&lt;V:M[% 1=L30XF=9/+TK78''+T5&lt;F?!WXNRDI&gt;Q\BL47&gt;A$!IN\^RSY,&gt;O65=;;7_\.V/&amp;8]-Z@C. 6&gt;N_&gt;Z#%SBA1J"@MHT]@M,P15W&amp;!ADTL2BV0SWP?ZWKEZ.:NOQO+_33H:2BGO&gt;.0O[7R3G''+$A^OYLT!5_6 KAE?;&amp;"''V?,&gt;XGU;5%VW&lt;1Q34L0MKA5N\#]BZD&amp;P;DJTPQMDN(-YWP-Q[HAK)2,G(IWGX&gt;WK0Z&lt;"8T,!A7XGAUU%;:&gt;"WR&lt;Z2:2GPM"HG_?RE09Z%B''2+_FRA4X/6^,73)OR/V==!)R''/_LLI3HINA$''ZBM1!/07P]S@NBEA1MVS*L(QMCKXQV)@P6]U!T $8H*US,&amp;P#%4[9^T=ZZ?VKO#/ENZ&lt;[4QO&gt;:.=NQ8R7@H6^B4@HO3E''''9]^,//N"R1_[&gt;Z0QUN*)"BKXOPS59$''!H6A(S@%TZ8L-(A9@JJDUP)2@Z4H; DO#4E&gt;BO!.:,/C2JO N"AR:_OU&gt;7%)S="?/1/P2$UW0KV7 &lt;&amp;&gt;B7B@%''B9''''TXA YP2$5&amp;9= :7+="3.L&lt;M)MSPMHDTXD %:ODUIUA-*&gt;?NW0R+R-BNEYR$@M.D\1]A-PD9E29Y+J;K3%;;5Q&gt;]UB3#P$&lt;IU 0:9G)2ZR[''1UY7''4_1)*&gt;@=D9''9PTPD.9"KL&gt;8M_J;M)ZJS#VHAFX$,UJM,@*=WSAQ Q6FD,[T(Q6AY\CH%HIP,0E!B $0WXVCX0)BA2_ :RN :WC^ JKUV;]@ELMHFW0[(!B:.&amp;C9XIZ1H:E,M6*A7+7, +!37V\I=-;4J%!H''.&gt;-W/?A''&amp;W9&gt;%./;!TCOTHNGYD4&amp;1K_E10+ &gt;-A.P:UF&amp;"Z^+UC^N$X]BHU7I4T$!PZGW@,^NLE&lt;L5G8ID=LM G85V8=#IX$XVQE.S[4ENDQDI?+8*O:[H%K]]E59M6(?[&amp;]3F9958$S;:2@,W&gt;V5.!%#%?[ZGQWQS(N+3-B$FWA?TV_NM''8K\ :2''\&gt;::"RLMT *\R4$SQZRS!H9_C5*_!&lt;#W00*!"$S?Y\OI6L:!,''_]!) V&gt;A2,WP[LE2&lt;8A\FV3J)M6ER=)/^V/ZC=&gt;?U119&lt;V@L?C#R?Q\51UQI6:NS4X&lt;/5?23?=Q8[''=,L1WE)6XTQ!/!QBDI8N74XIV(B!T:B@5AZD''C&lt;G&gt;L[W?]Y/ &gt;$73;VV#\(U)PRDGVQ^$+*;U]OV=9P&amp;Y:7W[V/F2M0EW'']$C_/[C_$?V;^91:9,79W''1PH_%R202C.0X _6#4@ U+-M4%)NO56@Z)D@'' FQV&amp;T8B]0:A%8D_;8E+35&lt;HVA^H]S@2J. +]YV1.0)P*\C4MKS[RL/WT2//F4G-"''\BO5? @Z/+?&amp;JZ^),LWV&lt;O+,+RC&amp;GOR17JT9JC0;C;LK04CK_=!P*8$V%E(T&amp;* +!\!_DJ%I,07UZJ-$HEKRS&lt;8A''86T/3!Y&lt;NX^\(9@CW F8_&gt;++A3: D%?D!U5@19?#HUAI(!T,.M;7[A1Y:0L5]*Q_2243[+&amp;V3K$&lt;&lt;6Z@SJ$-^&gt;0YXU8HN8@O_/ U&gt;&gt;@3&lt;;5N0)D-!OVOO;"NTT(&amp;DNHYRC''PM++8X+%:''=/#[+WCU&gt;^CZ$GO .T''8:WYX,PP6'' ^5@L(5%SA]G&lt;0LNAI)6"P2]'',R1=4@GI/''@]7M''V]ZE)Y%".%J2/X'':3S*F,_F8Y]OJW \K=12A&amp;1XC!-VJ) 4Y/M@L5CG+PC*GP!"1T8)\L4:E^P;Q1QT?.-!.O7G&lt;I''/0JT_!N$N7O@7&lt;H\_!Q9_^\GO N,*C5 Y4C6$;&amp;I(3+$[3]2?:R\&lt;$A''\(V-&gt;;''V:ZTZFZVAZF*?YUBS(0OQAFI,BD5W0R&gt;B+C2-A[7$K?O5=\JPLNZ''(EJG"(15@O*,T#E-PR5Q&lt;CNS!\=]CA/#B 7CWP7C5:&gt;G"EWC7Y&lt;F2UA7UV0SG@S.#W+D*CFTZ ''P6+8\KMR@1@IIN"%V2A96LEZVXFH[ ;]\:WK0Z)",0MPLUBW$AP5U8;G%X4 -/&gt;:K*XJITEV2ZTFV4AKHYFN!R0!2+0L^?AW^&gt;]78L?OT_*M_\5PP&gt;&gt;W50[N#+T[E%VUB- &amp;X"$9ADR''4@N9&gt;^!IC!2AR#8K!6$",:L(2!)U)A5)8C552&amp;&amp;)HN,CHO7?)K&gt;LB[8NU!QZU1)F(^40CSTT(IG\(MFJ/B$P&amp;8X_N)?KM0UUA98_TW0*O[XZXI1QH8''(J]T4CF@R&amp;RO@*YR(G0&lt;DT)P/N"@A%GF-5E9[X  )&amp;Z8''!CT9Q7Z@ZJV&gt;B]''5EISMOUS,4@I&amp;(0L*:.RUB%]KN)##^.NK,BF!BF,GH9_F K_F,+GA&amp;F''#;(;(^IE4DF HD!Y'',Q@&lt;AZOZQ%.''1M400,P9THQ&lt;X X4HRP2(T*0A&lt;83F(UVCR@,-Q]T3J[HV"*8OE?Q@&amp;2 C%I*1Z@/8+5[63J0T0(S8MJ9_@]^&gt;@66&gt;G]Q]B^QSZX2@,)M@Q0$@GX+V-MH04DS".P3+[34Z1:,9[DRPI!KO]2?]?AV%G''X&lt;"%X&amp;SU@U(DJ+$Y-$*V4^)2!V7//''UBY&gt; 2''GO 5X[K% C_?Y&gt;U^B-V ?$PU HXXE&amp;X!;7F$#MRAN= =AD/ZV,&amp;ZR*''.''DR!!%G''##I^)NZW+2M9*!%H$"JAYTW(!''!V=5XGG1;@(H(@5L-&amp;B*+&amp;I''[DY%:C]^AT8NL"T0OHQ.$1 ^=$$ET$OS]J,QA@!MU3"LX VAHEF\7.WA0&lt;O0-Z6 Y9PB,URV#6ZCVC_A\&amp;\SFZ(R''Z2(L.I,*8MRNH0UWBOT_R,5FA:C9;]CVD]$R&amp;!&amp;#)[%J?!+@I+-ICKVQ%-UCE4 (''"6NY&lt;USF)P@ 8\ ^AEQYU!*E3[:* @C&amp;M%_\5P'':-5NCXNXP^&gt;=KN3J1CM^,D6UWUZ[Z =WQ&gt;NGHG!E0BABI+XW!^#]$:E''PY &amp;FZX1N0I6%!1CF&amp;,,M6IHNN)"]?&amp;&amp;2GUHG,A1D^ LZ&amp;JKR%'',6U^,\;0F@0] -D1ES.&gt;C7,N0))? Z_FS0+&lt;0F? X?_C/\&gt;)3&lt;\GGL50M/%)*&amp;NK ]GC8OZA78?PSJR[Y5.!#0[L,%A#-9/XZ8J=ZXS^*BI2IVR3)VB?_0P&gt;&lt;SVX_@2^_!Z6W@=K%&lt;B*_+!$AW3:^&gt;)&amp;C60CT#VEL65%QSF[&amp;WL&gt;GC$J&amp;?&lt;A+-&amp;(:)0'']8J08L,)WG.WJ.#*T#W8''T"UHXETB-P*J-] (N,Y$&amp;2I99?=''A*(''R#&amp;3H3=RAIQ[=\Q+P[B])E1@''__@9O[ W;(J,GPTRU@]1;&gt;97F8=;&gt;AO,#5PZ6L*!EL2FXUGAJT%3J^N/W(W-U&gt;''#N(R(&lt;#H?C1G&lt;F][0U-M''X* VJ0HHV^@"1]AR&lt;&lt; T!4+JW+*I &amp;^8?K_TJA1''O,3*1''U1*3ZVZJS+D_Z''UX_2D\_ KVWP(7/ &gt;&gt;&lt;FV0\/BS.6GQ;&lt;KG[(Z[702KWW#OW_CG+8V!F_#&lt;#:@&lt;)QIPO*,2ZY*@X&lt;3FU4_M%0ZV0]^?*3*2&amp;2&gt;G(;O4&amp;?TT#V,R^)ZA^0CM39KIE+''?*T&lt;1_E3.^[MQ\3$_,D-&lt;4^&gt;#X[&amp;$E;&lt;A&gt;/-UE[)"AR3- R/O U.60''?^A+,^ (,J)0?JJ/CBFE3V_?J;1Y=RR%"F"#8-UY8YOZ3 &gt;)MO*:@\&amp;%S5T3.A,T''8=WX(#6HMKBU''1W3 2W?"+ T^@BC%''&amp;BZC4UMU"RB,E8%]P.0_@4&lt;= S,7 [W?3''\=RG82C- -ZF863294P%+9DGLEQ;@-AT,ST,1#$0Q!*Z8_/M+XEDF=$2)9A&amp;&amp;" FO%*GYQL/6$)]A,CLZ&gt;-UV.N[D''/LT"D[(&amp;B/9Z!+1QZDQUXXP3S22_ES5*Y(I7?,&gt;?O11MS1&gt;&lt;L/H)Q:$J!:E)00(SAV?&lt;6[#$: &gt;H^\ L0YR D1R)F$!,5%$+XOH(?*GY*H6&amp;Y2ATBI""Z$YIK''6/#,Z)43CS5^!_E436BX4GLMF,120G_A&lt;,D3PT9 9!"0_!O4S:CFX$2''VCFS*8M[A&amp;0Z/B%8M,#WH-"G[@=8%*?DLG\&lt;1\V6[#F%!VRY&amp;O(&lt;1\ 31&gt;^7H+@^6+&amp;H&amp;RFF: V;8YE\/9VFA.O-TXT&lt;7''X:D2\]H^T 3\VVBCF.$7#KUM Y-,CK(#P;: 3,0M:;@R@KLJ&amp;"1!V[)(J-*V(A:X"RDX*BK3(FQL-KMHAGHJBX1AZ&amp;YHSHD&lt;P&gt;7DV48!3Q#$^8^P7Q"MBNC/7X54:,22T5\^"90;%$TTJO8E02WV1G\$TP$ZMB^IOW:0]X0( SK]SA?&gt;!CVZ&lt;=C73"H$B&amp;DKSU]"=MY[:FB4=V!A(3W(Y!EYC4DBTPI^)("B39&amp;-T;"N(R?6D5P:"K)!JQ^A&amp;^ G76M12_*YP:@L,[YHGQ&lt;7^4T&gt;YJ&amp;82OPRMD:U\1LG,_K$WE=''FX]89M_PS2&gt;G1I]=QCM6V''4=N14(!$([-=:DE8:B*TB.A&amp;U([,K4M^M\F141&lt;[2KSK[])M9&gt;QAV]8FLU&lt;I]X?@E8M83B['' D]NJ=2R3Y0BIB@O-#,*8.EEB HE!E&lt;"8QP1&amp;&gt;8E6BG(V%":BP!^&lt;?6+(\ZCZT]LHT8^^+I*I7+\K^ .*7T0RUPS*.))J33Q!X$(=Q&gt;#)P997K.&amp;K=3^&gt;=-B''W?8($H(9''C@=&lt;Y)W MA\JHED&lt;&amp;GWGF6$6\T7!Q6LNLAHX-BEF$ U.%W:G38FK05AU1;^/ &amp;HUXU)F.AE$KUU#&gt;1''5OYQ(.+&gt;/@ESKT!5VCH@QQ&gt;V%!BO73%172&gt;?.&gt;&lt;_SSK)_IOOE?NUEQAP^?9. K?+N/^2R@:,&gt;TPXX0 M7IJZ 4ZIF''$LEARLC!:A:P/@4-S9#HQ6A?YN*/54SWE,5%N$4F:+\*F7R84VQU%27;&lt;_O+S#4ZLOB]OP8?9(#-A"0WOKAP)LOOG J\?9^ B)5X^G;/U[=\WYEV./R53_CPJ0OYVD  8D Q)@-PT&lt;.P?V'':LB+!GO#%P$KN5VB&amp;Q,&lt;B0E''VHO.I[*]U=&lt;),E7-19.C+5X6&gt;&lt;T3V(*YS3O&gt;DJ\7PMI&gt;;$E3!BHQAZ/&amp;.''L-G9I/K^'',K1;,;94^ZE-FF"F0''8+TLK)E.0?*$ZB7[;B^B-QW#@-VIJEQW$E%ZITGU?9VLHSS8?J1;ZUN9UFL.S5&amp;#-EH :4N$%S,\8\0T&gt;!(]OSJGL&lt;HDD"4;A%SNMZS&lt;,:W/S2QN"LUR94&gt;?LC?,(^1?I=,WRY#&amp;Z(JXU!J$[BU-BJIQQJ,J0HWUI5^YUI2]AX"&lt;''2MNOS-_C(QEH5_N47_$''&gt;N&amp;"JW4 -O%S[%XX''SG FAQZ04B,-[&lt;46Q;^5Q[+AA*F3TSOR"05OV&gt;976=7=*?K^0GK_;E&amp;T4P,E!6INI&gt;&lt;J_A,\P2K#!D*505P%YKKRSDX''Z''FRI)6,H&gt;*F+!5---$7MQL=UZ/0UA2%&gt;88^RJ*SO4=RKQP''2K;Y7KQ@)-=J X2?CX(XQ+^VM44V::YXH3J,5V09ZK(,&lt;(*"5MV-Y7-;+L2"O-MZ5&amp;,ZAT&lt;#SQL&amp;:7D27(#"JIZAI$QSP:-H2S"RXRGYE&lt;[,Z7_$0U)]%%&lt;XB]/#=4UR# ''DGH2\S(G_;+&lt;R"XR2"NL(''VZQU-_3CA,FN05W;3U\&gt;#AD[3,Q)Z%&amp;''ML**Z^[,QUI(S.FK$6[^KE%-''UAWT *\T*9GZQ#''XA1(N2Y5IH)6]$5D:ZSN2K4RBC4^W\?+T2?7[=UY/\PEVQ\S&lt;OVB!&amp;: 4[UL\VHYVGYC)Y%X5.V[&amp;&amp;ZLMLTOT55HQC8!$ M = 4BMNTHH$IGT4K@4=FCS-I''0)BVQ.U#H&gt;EVEH;)TX8&lt;9&lt;&gt;? &lt;:C62D#NOB9P@@@@AIQT9D+$I   @a')</body><body package="Mootools-MochaUI">headsetPng	^(ByteArray fromPackedString: '"UANQ04JF (@@@@MRT!DT @@@C@@@@@0B@X@@@AW@/&amp;G@@@NB4%DPUQ( [5YZYA]1WW&gt;./,.[9&amp;73_K&amp;#Y" YZPYVP)UC$PNB!Y# PCGBYCDA!,[H&lt;1RTB A$5@QR@&amp;UB$.!" 1JIZI,%2%J + *(UIBAJL_RJ8"A"QELIIX-\9HZAZ=4[2Y^_.=_V?72X?77#BZSZNE_EV''7''77=#%=/.93[9&lt;&gt;3V:::].XKW3_!&gt;?;4E)AZ04"@!G ^QJFXZB/+2=%&amp;.Z2VB363[*:.,V!TJ"YLRZ$%O%&lt;O-=SKAZ;OL=;Q4)9/K:&gt;(V3[U-TN(IPOH$A+C\XX!ABH11O''=L&amp;X-__SH0'' N0C.''3]/7!H!QI13C,XXOL&lt;C@GCNDX?GU4Z#4W.45,+3/IOEX.$M@J&lt;@:K*X3"&gt;FP@3@04+9C2&amp;%T.U2^V2F%EI#,&lt;LX0A C912\B1"FDJY)K#AM&lt;:]J*T\XX:&lt;C&gt;A&amp;@=?8?B]2*%M+ NF9G.U2F:;+0_P=JZV"-EAG%-JX"PA;@0A 8X23HFH-03(LUH YL46BVY_6EZY(7B2D6@?!;@HV/$ @C&lt;J2T7.N%T &amp;%T*''*/G=BZ;UOZ?4VD^4ELD1DAXAI1 !ZD0]XBD@\(@T@&gt;0;'';H&lt;9E&lt;-L41B&amp;ZQ&amp;6[S="65X''X?2G@C;?J  XQOR2%M:]893_9_/^E*5)F&lt;8=\":@DP@=@GXA N_IY[;/?\!59T&gt;$%EG_C78=D@#,L$7330G&lt;;62\X+%\[,XF+;?&gt;A+Y/789",_AR.U2&gt;I9?O(5@(_N::;''*%5C[_=:@5@ZB1K1N@:"&lt;CX5=^U5B99)1AJPWFFH"0"GO6.F%Z=8QBHXQB(TG[-*&gt;O11N_''H,@''05K@G=M!G.T4%AJ/4QDU0OXM$/]6^@( G-=7;=]R#''$^U9RZ?(5 MB9EF\SP.K**??(4W_^^P^\&lt;04@G+=X[6_@Z4ST(;U&gt;(;$9^\W29\/?=IY[[''9-I(U33\C%;^4KW6)IM\=/ZV%9FE&gt;-&lt;3U&lt;$D $U#P7I8?L''3]7D8@?&amp;Z&amp;1TP7Y:[@&lt;E(6.M"5+B8A?/XQNS,K*5Z.1]^,+-[?G:&gt;,[;#P-Z4&lt;8GE8_#TY7SJ]''''C$3NIO]6L#HBH+E4&amp;&gt;WK5&gt;N9\.W88,/S(:=_CW&lt;?N^?NF&gt;G;;+++$''7_/3#N2GDVEP_$EI&amp;S)&lt;^"DR#TP9@S4$ &amp;T1N6TD5C^#7O@$!&gt;B@@;M.7C86M#YOZO/# @6OW&amp;3]/''-G1.&gt;&gt;&gt;^&lt;[''R/&amp;H1^H@ H@]XOLWKC"S2VQ4J)VZ,/64;8BTG''J97J4__?Q16''W%0_7;=&lt;?X\P5+5*1AI)OA&lt;O@0!(\3Y57____*V]''(:/(PR9Y&lt;3S-2=L"/#189, 3@0.''ZS$_@A+C1&gt;KE#-7W-O7A]L-''D@O0D0CL@5 N8[%Z^''A=R@O8V0IN()AQ?^NNMM3;2?/.;-8E(E8@+)%H2-I82-M++H.DG28;;3ZUK%525\.WJ_1,ZF((^NWHDR"%03+.IZ@$**&gt;.,&lt;_3336O-6+WSO[8M0DZ%EN[N''X/E"1\?UR:W]8YB8Q,Y8;&lt;MA(L[@]04"\C===&lt;?2]ISS36M!([:3?(G&gt; =&lt;;;/_?W_G\ZKG#!4CX01U0!XQ3J$HOO74T3NR6KA!@=Z-V3_UH0L@"B+)=&lt;C@@EZ-V+T*F@3]2@S_$\7&amp;/+56;]=MT)(*!L3-[61?(J&gt;/[3F@#Y;''KQ(XFHBTD+;/P4(IJZW6OH&lt;&lt;3&lt;M8NY_3MS3;;KMS7ZYZ:&amp;DXA$:_S,M1GOS5=_;02NGC*7);^;&lt;N(FLR::UK%4:&lt;]6.*.W''M:WPZS-''9''.?;Q#*]Q*%T !@BP !0O)''7)$6[Y.W&lt;^AI+59:=K#HFJEWY$Y4&lt;^PJ9W@:FLK:Q]WHQ17TR75*9&lt;)&lt;A7GHV@\.2I-*NR&lt;=CY""C\+&amp;\J!PJ+K.;F8UBDZY) GLAHS"&gt;SL:@W?;2?M\A@M"08S$&lt;&gt;.#_''DW@=1T891 ^G$X&amp;$8F/?DWEX$'''',%''TI1KQ"SZL;.;."_^T5(Q0WQ#Y[MYN)=O(:^%AO)&gt;GZQ)#L6BZI A :=Z-E&gt;Q&lt;CR&gt;&lt;&lt;C0^^. !@IW8=74_!"EPJ)WP7=&gt;O4V1VYD]G!V5YFA4]UYLH=OW5SSHZC-^!TB2 VB1"\G@P 8NC2N_3LH0J@]L4$\?''K&lt;+1&lt;R"U2 @@)QQ&lt;78\PA!2''#NG!XYQJIX1&amp;,1ABXGAB5/CL44?C6KF#$&amp;Z,..FF,P^EP!F#6R2B P@\14D&gt;'':&lt;R*F0E"R*KSZ%T@,[G4 W"$4&lt;&gt;I BXN7\^WM\E911RR)QJIQ@Q,-$,@HK/&gt;VL:F3X&lt;A6A\N+73;[^18-)N@HC+N,!$L&amp;!.[*;&gt;%=TPL"FD EHJ#.OT7.SY;"&amp;&amp;1^C FPV@IQK5\A0W''CMHJ^E9G #@4I$!NH:CXC@@@M#40 -#.&amp;_-A;J#H0B@\%LSC!8&lt;"L;NS''CNXQ FB(TB@(D@!NAP"!!#3@@ 1-% *F673(63\&amp;C_=1P@'',/%HJTD0JBTA1CA=1TNG38D6;[Q7+9($*G1''SOF&amp;@Y JJW ^Q8\55VLLQDH6B"W2=WRBHOVABJ2@E SA.E&lt;0&amp;&amp;LQG=?/=/T5FPT"4U8'' ^%E@3C@NLL9WHY#.M*@M1W2''"%&lt;-F(3S+UN.\@1LFCA6U+Z:,L!2ODNV^E_ND4 C&amp;)UH+URGGN([U&amp;U^\/%$A-5$3O&lt;85Z[\%5WZQRJPPBPY0:5W^*VB*ZQIS*;.96*#)&amp;UT?WN#^+D.#+;W7C==W?A@JA3/Q &gt;&amp; .%6&gt;N1&gt;LFX02&gt;;&lt;D4SQC)&amp;!DK%SB:VI!ZJ2:%!EHJ)UHI3\5I&amp;JZI8=7GO2&lt;VB0,X NOG#68BDJ#6*0B(6%QX*FR @PJ\_C;7-%J&gt;_?ID3&lt;&gt;:.#8&lt;IZVDZY+0_XW*C(9W!U4*HRINQFN557@8#N;.G.3/:''(7L9R9(;_75I&lt;9#''L@PJS**07@*!D01(&amp;%%N(GHKKY;H$=^?Z&lt;%\/%*JF!@U++Z#KG_@C&gt;NBJWP*B5+"9$A)QR&gt;NBC_PMG#1;[+)Q?QD*9F5&gt;F39"?T&lt;V/4E*OB"FXDFI!I)OY7M7]?S/GJU=CQE]*+YS/*3^I*E05]"$P&lt;#1/%9S2J"IJJJW3:WS:]]?7S6&amp;-!*.#O-;G,^,Z ])(B @PP(0J3!FK1YZ6-[U=H*T&lt;%D:''O:4T[H%Q)UHU0HSO8TW@H*J497''+%UH$)X-B(\CZ6-+L XGS$WS:-B^D8J;+%%BI_U756Z&gt;E$@/@@^BZ),''B8[(BFONS2VQ[_W4=RR&amp;YT-+$WI @&amp;]V/52VK?:)0 B3F&amp;LV9LOO9/FG[M+V$T#0XC@V#4U 0D($H@KK*+0- [CW5*3_JST5M_$-KJ$=D6V 4V &gt; OC(:V&amp;XLC&amp;OLA^@RPUYG \[I!ZB&amp;*0D(3+''KNWL-27PK!XISKAYK4U!T6+Y]L$63,GCQH!=@.S[X@O1ZBMV\T\E "LU",T29WL:EP*E8JAP*U!XV$1.F0Q$C59U"*EOUGS&gt;JE42@\4FVYR&amp;-RSOFBBA-&amp;"[Y-*4#$X NA@KTTM=PF?41WVNBHWCN?VR2^ZQTJ)4A$F)*Z/JC0V@!D($H3"/GE[;/H9_K5P"L38T.YBT&amp;@FQY%(1F(:[V&amp;(P0"D#+9.Y&amp;,&amp;6[R&amp;TG=_TI$*;4&lt;VU="H@I.UA''9;]*C5P,G/=LN,8OV%-[P7O&amp;3A''1OL=$#HL11!3G(\GA-LRE#?1DH!PN!86V%#$&gt;$R[SMD$)#_[6]*+,?! ZF1-QKAXUI(S+6B):&gt;?]? K*:N-SU5[F:.#CEX;GK.;.;[69/[??X=?4CQNC1^H3"&lt;Y!NIAJ:+:=W^Y9W"=&gt;KDPI@B1\.)B..&gt;G4J!&gt;-4X6L#AXMA:.3,IBDDDQD5)9*I"F#U*!/43)4;10 XS3;99JP!&amp;S]/G/JE0+-;=&gt;;Q.7[.?I]E;^4= TC 7V 4Z $!XM-V[^P.FZ:99!+X-(5 L@SNNXKAHE)[V&lt;DYQ;'',HM&amp;TQB0V@0C&lt;96.U /W--=4F[! &amp;I (@:?+++-??A5]^=TC?0DA"=&gt;;]N0C&lt;YV=/+83E("(PBFB*\,2EX/7:=X#EX#AMD;Y-0S@LIIMMZF%) VW["DP#%D $TB0T3)JWW7992/LA''\5&amp;ER*+;J?V+E&amp;S_?GEE7=58LC&gt;?5*0(N4_CLM&lt;S"''_6;-7K::&lt;&lt;$(PDP3C0K9=&gt;2;H&gt;WW+5(6]:  !TL.G6-+ZDH?G([WR$[(H0.D06;-7;&gt;P=&lt;^*):9T:G(/1G=51A38?]N ?-&amp;3Y\/#!!1?^&lt;-%''''3:U26V/W[E"1W4@/!"/,F3YL @8K2IOOOGD&amp;OL@*$^3EPK39&lt;&gt;G5!*IQDKEX#F^SBZ''WF?XMI-3I*T4=.3^#\&lt;OG_H[F!*)-?]T;MUWW=5XKA[/Z4&amp;%^$3K6.D83*]D=@/CLBZM3K&amp;HOO[XX1M/\RHRV&amp;-$L!''\^=&gt;=.)@+4L$/S.KZER.L2&gt;_NUZ"$DV\+SVN_@G KE"2 %%R*%#Y$@]3/NL9O!4]F9&amp;.-G6),ZM \C(]? &lt;*!=5&amp;(3\!9P@O01(''::JNO4G+YGDLS&gt;UL9O1LAJJWP4M"(%21]2(&amp;HWWYYJ?+;&gt;&gt;F:;(,#(:L''S)8&lt;"UN=/QB\76PZ1#?&amp;\#%L%H:NC''Q4SJ(F3 (''^''(09;HV&lt;[T%R6._:"%!C@4M3VRGU\,);K777,]UU27C!1?.&lt;30)?4+9?#[W]\5B(XAHIOI=UL;O)*1V]7Q48OC!0;M2_L][%SJOY]&amp;8&gt;.)/,O;&gt;_ J@$YFQ*P$4MT5=P%LERR&amp;)+;]W(K+(UD''&lt;Q"%5/UK*FZWT;9UJ)Y\997H&amp;P45MSS!39 0@XGGGX+3976&gt;^"8,Q"&lt;YXR4/K%JES0;%*N+*+:8BW3^X($1&amp;*/P,5?@;@-TR4EL@?XYXK6&gt;JN1[M)I$YGQ="18=7S1''8M?0\-,C./TM-C3@@@@@AIQT9D+$I   @a')</body><body package="Mootools-MochaUI">speakerPng	^(ByteArray fromPackedString: '"UANQ04JF (@@@@MRT!DT @@@C@@@@@0B@X@@@AW@/&amp;G@@@R]4%DPUQ( \UY^7A]Q77&gt;]/_,''.]=R?JU9I\$&amp;="N;RQM@"SP!D\:HRY=LI6FJW&gt;DO&gt; TJD03;]A?:GRF&amp;TJ!40HI^P@AY-)N2TB]M,70FDH=SAMBBBPPGB^N;U"2YU-R[E5]W]5;7._,[/&lt;8Q8*]VH''K(57M4]W(''+O;_[/_;7&amp;H5!*WN#9?534 AJBTPV.EA;?9CUAJLST5!Z&amp;)JT1NSVGGYY]-7S(1\U6R)K&gt;54.&gt;7&gt;/4&gt;NWS(.\8SS33&gt;&lt;1&lt;?&lt;\QOS)6ZOSD9LZ&amp;7S$:!6V1BJ(&amp;_OO$$J)TJV*4V*)T*[L\AX02LLUAJ@TH@@O]?:[9WXSH.F_4:P6,MJZWGCNNO/D+%0;UF_[_''^[[#JE"N"V*5 $9''D]U*AYSQRD)9!A+F_U++[6*-A;?*&gt;+&lt;R S3OPQ&amp;;ZTN;?[''-%566Y7I2D);''HT5SYE&amp;FID&amp;PYQ$Z#PZ6[].F!XVW;C3O+:+W:5&lt;YG!:90;KL#?%A&lt;L#?B0D%EXZGQ?;4;^=&lt;13477G@C7;I%L5+MI/H&lt;Q9)&amp;(IR@\09BJTYGQ7G99[/A.\CX6A"NGS.J:^$W]5\*%^&gt;:+/\WV.,/?I&lt;R4E*=*UZ/?^TG?&gt;3C-67Y/A''MQ LU30L!AV#C8MAZPV-]RJ1V!^^:*M^*,F4K!@AO?N!G&gt;N9#?44=+7KW6M#8=X21N9URS?:&amp;B[RUT''=-V=YGJ9:KQ+4N57WVYCO0_TQQ!L@O$JP)%EH@@D()NN]0OP=//OZM6KE#A::9&gt;!(&lt;=M@&amp;GC18DLH475./5==+6&lt;8=R.-OZZ5_.%Q@9EJ=4I5_.O]7%UI7I4&amp;&lt;YWQ4EM.7SVE$^A!ZZ0Q!"B@HHFTA&amp;AB@D@J@%D=++B9CB@F!AE()C@Y=3I:\1X/G#:OSVXHPI"3K&amp; ''C8@8)9[\99:?+!R:I0C5_?OKG.VG&lt;[QQE-E*)XF+[EC3WQY*&amp;$EJBT++&amp;V*VT$KJTC7QI(PCMJHU!FBBDPN.B#IP9A L_&lt;?M3&amp;I=_PI0$XL3P"&gt;_N?T4XA)?"''O=*[/RK=7?53%*-]$^Z)!!+5CD2O@3K-IA%^P&amp;FH 1CID$BO0 P10''RMB$&lt;TY*ADHA3@VDJBBE 63Y\58T)AA3G!!@B+UXS=W(](:M#NCL7!59/![".&gt;&lt;&amp;E!_&amp;Q%U;/C&amp;Z,C?L5B]379Z=&lt;*%:/74E@4M1PQ:/YWM/AOL&gt;15N5"L@#P:25#XW8^&lt;6_NXC@XXMA_PQ@D2KJ,VLP08K(.J-TZ*-T*M&amp;?]"/[(FN+5F"*^!5*-A,M FA8^Q+UZ0^$3\3#;4%%,7[+534&gt;]N!W4%)\?S!&amp;;JLY5IWSO_U=:W:OU&gt;#(%AJ5&amp;D:5&amp;(=@# NW%G)Z:WWR;WQ3:1R&lt;0\?08%)^;2KH\%AIPR ,[H@SPF$()2E1BJ &amp;Y91B&amp;PKL9!I6;]&gt;NJ*:9B/U9G*=UD-UHA@B"%LS,;"?&amp;EAUAB\N3X,]/BLM1??9^?^F$DO''?W7U-[P4MOL&lt;YZ3VXC;YDMXIP 3SJ\V&gt;1 ZV$I!08^1CL?&gt;1%V^#50[,C _L50R&lt;%BZ05(PF,E)SRTU-B*,IL4RYC%NTYFQ''C]V7&lt;[^?Y^ VZ+"ZEVD801ZJ51?O 4N)4N4"1=:\ KQ::&gt;;=:;92=IP);''?S5#+NU9G,[Z[SCFDDTQ3)8=!3M''9/BC??(&gt;Y&amp;]OP  A+5HA)PRD4AH8N\?9EM:''"@\JR!TW$0*LFQAJ(+.4!O=&lt;\C&gt;&amp;#;&gt;H&amp;?^=F4)J#H0LP0"A;].7H&lt;=3!EGX7+!1?ML@7/&gt;:I?BE^&gt;:;+-%*?]@2S[Y-Z!J&amp;D@"#BB&gt;]OX_)E8?#N==:FK;/0;K,4//P&lt;0", "\(-!;P4MC*P IJ+W(+BY%K9CICLO@1N#:N6?;8_] :LXG6!!DH0QGGBP8__ EID&amp;_OO_?&lt;]Y?;17?86_%8:R,YNX;3TT()63 &gt;A,]1$NTRR4-]''C11@-=:&gt;BEDTP3W=RBDVK-8^P%S CHFJRW2WJ:A3_L\T"(01(+;&gt;^+E0PTG90JUZ!U''E1[00K?&lt;L1[&amp;9;GTWXYV N,8&amp;I#XB-L4&gt;UB+=R^/^PI77W7/)''*#&lt;^3H&lt;GA=6&gt;PD-MY8:^09''C9=F-?8&gt;+="LA#@,&amp;40V*Z:#IXFR0DBID&amp;B(]XP].7Z!X6[M&amp;I$Y@Q9''&amp;M&gt;XPF''S97F8\OOX7%)BY2K&lt;!Q29KH0;C3OH_L\ &lt;D@D1NS&gt;LBGO(#6!#ZFV$5(@MOS49"^''%89_''3:,#,??=&amp;3E;TAH\Q[N^_54_XFFHZA7,(J("#B88&lt;="/9JG:;''%\A_I,@(V4,Y[''3[6;E/73:L#85A&amp;JI0-5H"R3LDXX"#Q8; &gt;8=&lt;C&lt;&lt;]N%QJS8BPGIPPEC&gt;@97&amp;X&amp;S:N11==EK_&gt;7.&lt;#RUL8#(M6.87S)4?W!B%6@% #\HFD&amp;FG,+-\JW:6TQ!3G&amp;I&amp;^1-D#Q&gt;A:G 3N"6L/K2DDBJT0NL_M-=2B_^=&gt;M&gt;+5V)&amp;Q)$#SACKOB&lt;&gt;SY?@&lt;C6?9;Q-1;Y/^CDH)JJO ($#&gt;CF;@LH)9G]_E88&lt;=!(VE^TQQA@B(5&gt;-(MA(PWK1#WQ- #E4;5F)BBHD8"QGGBY9&gt;:"$X!%E*-=Q,*W''C8M@@++#2R(2M#2O0_VQY#%0VAIH$QYH$BJLHZY*BLXX$"SD&lt;L(J-$9MPR,D0#KTMVRU!V![BHLRO_?PD\"&amp;Q93$D91 ^F H76GW''X;9@P+Y%[Z''UZ"@@)IS(]AY1;-096KXC 7LX! E&amp;LCAV_NY9#&amp;Z+"U*-!,E @L=5,]3-0''H\"CH.2C1GEL_0_Q&gt;&gt;;4MJ"R@H8C .[M]E''*X0N@\@+E*#!([-NC!69@W4^2.(UZ,@HV"767@\Y?N:AB+U*.59K*QT$D)!Y''(FT$)X+ /CLD(BIP''JHJVB8; H0!CBMKGX:RBJ82KG8VH-9X!K@/5&gt;G;6UG*H(P!RELI"AGA$8_1$FPQD7[M-B-=/E;N1I#F?\B@A0OQ^.:=*/]PJZF102#0F-4^&gt;/PI"E]I#AXG@N1! L(=!]%._H,01!DHA3C$)HDVWS-J#F2)NL$0QADAQ94,AGFHZH(!AY&amp;(ARB&amp;XX9^:W/5W1RQ''CR*&lt;GR(/HJK"@YU$WAJ8K/QC''XJ3H/4$IQ''@AK# (X&gt;AF&lt;V$XA""%2KHLTQ#B-420L,%SR"EKT;C3BBUI #@L8_,&gt; "A@F@RH !AQELE6WA FA4CVT &gt;%ET@@3#&amp;RIB&amp;;D0R\F7C,B0; P JTL\HX@:N4_H"-AR)J"**J,.H$JJT04!R!;&lt;O/&lt;;H^4HU$$ QF&amp;PH+)YB&amp;ZUF)APG&lt;0PBA;2LH_JQI &amp;*-/''YZV&amp;,PDB"-P@&amp;EZY)E8:B,IQ!#8HJS]P$PP"P- =RZ93DE.EDT9;14&amp;;24A&gt;WX:J&gt;,(M?/ ]A2=;LLP( ";PX 2?&lt;%\U3H*M=G8O,X=O,0NH_-NNB\P4NCZ05JBYRRTDPUYZ![''AB%1XXBQJ9KPF.5RB''Y. +^]Q5X%+UV.I"&amp;BP6,F[QCJU3O1^KY,2BDP.X94#RADBXXX8V$)DRVYX##FFDXHA#8:O^K@K%)Y@M\58WVQZYJ@ECIHGLIQQT,[ZMZ+QX6VL:W).''". R2KG.AT''+-J(EZ/P;[-,,:%*9EXDKHV%83MC0B_&gt;A#.[-TD,  R),!AIARHR=;QEDXH/A==K+KFA(Y0\"FCQB&amp;PIY&amp;LI AQ!''"NHY)VUARP''BNY*-U[% !4S"N''5&gt;WPABD32"%[&gt;^B03PE-$5-0&gt;3IVT"%XG@N+QP,28JT,''B)#JEV*6E"Z!H''#$&gt;#.;PD60%!&amp;!ZX0PBPL)''K$LPI@''&gt;@L@ 04-:@"V7[8[(.)IQ%-*)ABIB&amp;JP2CPT(J57V1__-6&lt;MI=Y6&amp;JIH$O+D- 8O,?=74_+UXSFQ^X&amp;M"J^*NNND8 5V+G \B6;RJJL Y&amp;FA ^G(E-N5"X''&lt;O\:]O(KW\K#5HR$G$N)QVDDM"9^0?Z(:L0[Q-ZR*P@UG''"/.?C\Q6$ZP+SMCD1LXG1&lt;_GBE 4C''T9G@^R)]P&amp;DT_#D8%K''&amp;YFQ8Z-L24R-U,O%%5&gt;NP&lt;&lt;=#30/#CMML:26N9QRZ0Y/VQY*-Q(6[]*L%YT^.$-]QEDH+WS1WZNAR+TB67Y@JTV^9&lt; @FE+CM@V"LE*KIY13LDI0?U.._3%%912G''''76!0\NGI#&gt;4H\&gt;^GDBG7#?;_''___(3W==3&gt;^UWBR: SH$++; BY&lt;;LH\-3AK:OZ*VBID%!. HFL2BUV+LIT0!TO@?CH2NP$1IJ2+J=T)2\A"C3GE&amp;V+SV;KL-DFDX@@Z+UJ(K@Q&lt;V.XL.VK]"5\1]L,?A(^Y;#.^^_/??AA?]_8HU^U]@&lt;=]QSW95_VI!''#LJ2KMP[]U177Y-ABDF#6XCRF+UZ-V!"DPKO]VG[]!G\R"L/V"XNWL&gt;C:7%0;BH7X*P(&gt;K%!0GF\(&amp;CJ&lt;&amp;K.^ M)%*F=(P7W]_B.V68.V#F&amp;B\X(#!8=&gt;.21(&lt;\^^"W^U1E8:C?&gt;_^W[7?;NY0B, ]&amp;&gt;[P);=&gt;:A0P3T:3UHIUF/5\@XP9[''8@ZC9;)0G@^&amp;ZZ;E@\L0XC@F 1/ P,B2KK".B&lt;]5@PA)$,B2KER+URQ)"/F1LV!(7G+++Q ^G(Y%&amp;*A%]O?^H8=&lt;=&amp;-_&gt;6+TZ+WVC6P@\O/--3OW\_?)&amp;V./&gt;\N+++32Q%[6X=983]T0FLNI$2_!N"8F 0E\50V#-D!9)XSAFK (]$3#0&amp;I^9!II&amp;*:57C$7XE%5QEFLKL,0O#:FND:0[=&lt;-6K%#A8CU="S0:JNOOW342IFGO?JQ#8!&amp;,9&amp;]#9]=8!N_.HC@;N0,2;JL''C19&lt;/CN''[/^9[).][WOL38&gt;A%LHKO]:*MV*4FV+1KX,NH;3\%)\-BJ -B:J&amp;[H6)(S@L$6X) @4$JP)J):GR+TBT0#\_OO/XF)2,)AF6XNZ&amp;S%1_O?&gt;_?,+57V;3VX36;-7+;311!/WI=C-] $!1D+SMI:]OW%&amp;5:9][&gt;N\&amp;:.;LSP4!GY;@0ZC@R +)@NP, =JHDQ!&amp;JY)0%0+?O%Z1"%%XXN&amp;YZI^*8L1!"6[M&gt;F];7 ;F(7FAS/_:WPVG7#  T&lt;21(:66&gt;605V+E^?_.UQLSD6-8W=UV^_+))&gt;'',;J3%&gt;793\WF17V*5[+7---,&gt;9+*%\L&lt;[9&lt;8-X&amp;9.G&amp;&amp;VP)V;+,-^4F++QB%UIL&amp;%%EZ3S$(IOL?C3!4;TJ-UW3$5%)ZV^ &lt;&lt;&lt;LB=XQ#&gt;(MU*''Z)V*&gt;\*%T)822679N__=2(B?W:_OO''$$30H $*/56-7N)7MP4MC&gt;=;3''/^&lt;/5:/U5:5D(@ BGG6;E$$ZU*6D#V$K KX6/2EK8WVB+UZCY,7[XPP8&amp;KSXV9.[''''??/7_"NO8!4MCP=OUZ/V4YU&amp;=OW/6IALSD&gt;(5BPC@,VOG6OS4-A%ET\O7?X6]S&amp;^B\7;=SS_]=@\;]&gt;;\]MEU2:FTP)J$2KHT^R8A,.+MSE"V&gt;U*O@ A&gt;&gt;-N_3!88\N@Q3/''O&amp;&lt;7&amp;"9UJY]Y1''LUF(1E]__WU&gt;R,K&amp;(,R2KJLGC18$OU:OR\L0&gt;Y LM#X:?T&amp;&gt;/7&gt;+)4;];;-!!-..KKY[E*/"&gt;Y?L^[&amp;9*HCA08\N''G"1D&gt;Z3^[Q^+5&gt;7ON&lt;$9;'']T3SGN3^/S-+-U*/@+-.]3(H@''+4:EE#LA#XXQ 60#@\=W5?Z:_S&amp;PA0&gt;Y8=^:;^,6_O9-GQT_."D53"&amp;I&amp;YBY=99)$3!0&lt;__,843ZMCP4L3+./NNH839;+.$&amp;UY?)X-V;K1&lt;WE9,^]_&lt;05MFHY4Y&amp;ZFATE Q5ETC\M0JH*"L]?7M7^;7\5Z::%6.365Y\.V,S^&lt;8P6-V*4&amp;5-O5:(##FM5.M35&lt;&gt;GC7=N''SY1\VE$8JHT86&amp;&lt;5S''.^]\!3''#FUYY17G:U&amp;VEX:O#&gt;\[M&amp;28JO#WIP@@^Y;S1\UE5.%4QAQES!3G5S"N!9H$ZP]ALC(XCM)ADKP))V4!QL,43V*=W/\*%X)-F@XEPMH4%R,+J7F/50.RIA$$R]HE,N!97+%J)[K NL:BZY(K%&amp;T-V)Z5[M-6TJ%T$/G1&lt;UWM+0/2T%?2$S@L:^K"(#DXCDRZ)$:VYYT4SV-)&amp;#[SMF4&amp;R]JL8;"V)&amp;$%SUL''37MSJVT@HHPPZQ!FJ(RH!AB&gt;ZY(+)&amp;$.B2FV!AA]HTRO\3; ''@^6[\_C0&lt;M9+UZS%MKWAW_I[2%W;8&gt;""O*&gt;373_97&amp;^"2QI;C3O;S3OGR&amp;%H:V4%UJVT((CXDV!P!R%MB^DIH21"CDVF(XQT$)C2;I"03@R17D23?M217DTX42=K)I_$,CZ\7&amp;^D2$%3[JLA$E 9G''N-MYF''.^FT()IJY&amp;T$ @ %EKMFINDDL$932&amp;%$%JZN8:S&amp;:X)FVNJ\?:ZT/%5D;! C APR!EBBMEZD:TT2[JLZJ5I&lt;T)UZ&lt;:9K%&gt;HZJ65K.W1R8G&gt;]QMX]&gt;;3?/:MK_H?4 TCX_G+PK @@@@@RTUNQJ9BXHHb')</body><body package="Mootools-MochaUI">viewPng	^(ByteArray fromPackedString: '"UANQ04JF (@@@@MRT!DT @@@C@@@@@0B@X@@@AW@/&amp;G@@@QN$%DPUQ( ]VZ^YQ\UY7GO7]9-WYWU^&gt;];''SR''YT,+@$&amp;+KJITQ(HB"(:8GH K ]TGDEQ!#%0C&amp;9''GLREUTA%''GECTHE@PAHX@%%H I@=''PR:,?Q^5]UK[^?]N7&gt;&lt;*.+.,@0\''UE?9=2.V&gt;&gt;=^/_7?^77]5-XZ?%GI/&amp;7Y.@/I_5.G+9 &gt;\UHIH&amp;*VG3&amp;3E%U1#LU&lt;W &lt;''L7%SJFPG46%!-I;=&gt;9M.):W,\Y ?,+ZW_''(06&gt;8=*8@@HE)+R6''3Y&lt;7_5''[#MXS 4(7N,E 7A#O21\J@8LC ?.#EYF5.7_-^ZI?XFBK%@J%7.4R;8;DN?FAB9Y_GE64ZOE''33''+#L&gt;9[''[6:#&lt;?;S7==MLGM&amp;5:*W\,N3XJ"F$-KX%SS3&amp;-Z]&amp;2\&gt;.N&amp;+&gt;P;S-7+_;#G?;47XFA9AO!RN"/0.2[ZT@&lt;&lt;, #[8. +7&gt;@--YV,)$1//_];5HQ"3E/7#0ZF!*HQBH()[CV$,%$RJUR]GU5,V/WK$8?=UP.&gt;^"%+G7!^^)+Z0"G07&lt;UDAN)/[5]Z8C33#//SQ=8X]4FY+[M9H\?.(6:&gt;'')./^46&amp;).[FT2&amp;*J"H&gt; B4 9XJJPWFV-1B ^;.063Z-H%/_?,VK+?,L)PNLF_.[M)ZV?&lt;B]*4?+@F!^_SQQ7D\I5P64FP2!YR:?N2F#Q.Y5-KDU:&gt;=%"./WLGR)^?!TG\/,U"\^C2A-XB5VB3V&gt; LKT&amp;*&amp;SI%J&gt;7%S&amp;S-7G &lt;??ABMCP5XB99+&amp;M(&lt;EPD AMZBDF@EB@QB8M&lt;CR#OKD]^D1GGFK432,D?\^P!G !3^224_[&gt;OB2:&gt;!9X2+.W-SGN(-I&lt;6_2?:&gt;@#5CAYJ#K*%Q#&gt;FL17CVYWCX9^A ''-F,U59Q8IB5;&gt;O0T:.88"3I+*8$Z?)SRA7AB(D(L" AJ&lt;Q8SA^T;4,AE(EDHBS\_%%M&amp;U=#3NP(E@4*2@511U%U_OO&amp;V9''=/"&lt;QBD[97((SZJ(N\F 03=BXQ&lt;:5EC2KL[;;YGJF7"DWDDQBF.DKFB1DP7WDS63''?%V?9_/W_HA-''Y/I5+57D @1#+ 8D4WM%N&lt; !T@JLYE]OL&gt;[''L"T%HRRF2$LC3AP,X!(+H;/+E!LZ76P?&amp;FWSM:R=219E51OXAFLY@6G!32$$(RB"''A1A@NJTE@RCB#B,V+ZE+W3%Y//9!O''3LT[O(!VD"$UV"&amp;4$" %$T*!%DH)"]HJKRUZR[RV9V^N)D$Z2J^;.WKY@+93=1=(ON82)#SVT!=3RF\L6XH%;5(JG''#FX(F,B35)C4]K (: IMNR7Q[]AF/AZY1N&gt;*!36M7QPY5''FEF-Y]%[P@!Q5$YI4JJ$@^GOI7)C"RYA:-&gt;=F"5\QN71MM[D*X (;''$62T#VX@28A#3#6:QELCC,(YR$H.0PCV$"HTT$)H&amp;FMJFPI!3R!HK&gt;"HX44&gt;^]3IL[N3%%PST6%?Z%*!UZ&gt;9I7-DK+2]^$U""%"4N=-PZ,-Q1UY5"7)YOF5.L9?9QZE$8I&lt;,L''A7%&lt;23AKY$X0 KDBHPR#NT/AB"+BC$JTT,&amp;8!B1 ,E D'' ^.B9W1J#J5B8"F@''")_XQ";8F21LW8F&lt;)NMEDC4%_%V0G(;.9&amp;2SE-[C.$"M_G&amp;UT[(K)B\]F"R!;[N,J&amp;57OLZWBP4)]&gt;1!UTQGSY@R\ZS6$YT0S"^%A0PR%K]_M\Q#M;BG%I%E[%$E)&gt;10Q3J]&lt;+N[37M @:N3-)*D60_R!DU[2RVE"Q3!"&amp;IA3N''!/%1PM9= 58MLXUAR.PV%K!2KKLI&gt;* 1K U8ATA:I3OVB1QB48/T]&amp;M4Z),;42LLBVIE:?KH!2+I:94AHB^''&amp;:&amp;-;PP+("S"@UA&gt;@/''OZ"KN20R$+6CK''6#A"TD%QG%I4[F''WVB0H(&amp;AI:@ &amp;-QP&amp;@LABHQP!TIGF70-B!K61YC*B#GT%F^%13[F F8[08 %&lt;,#ILP+J0!("V_@EA''4KLP#"#%J4C=*2G*VB.6[$ FLA5YX,HI2,B!&amp;VD=@/ CBP"E''\Q1EH!GG.":NH&lt;\_K".!AJ(4K4T#8^^]T- :D$A%YRT#(:OT1(I$)\RTIR)P4 &gt;]8XB$S "RNX,,R[ X&amp;X25F@QJR*P0HL]MR@ 0AX,#IYU!*D&amp;D2QPLUU*U6I1$Q*ITT="I@L@X [S&gt;.*W_%@GT5MR0.:NC^T,V43D$&lt;J2_?YR4VB-@ 3S V( V[\QZ7&lt;1\X7FE1!R2JFGP(S@B"5TB5?+NU5B DMSEKTG)$"NL(3UXN2;1&lt;Y@36[%K''7YB%B)RNP&lt;4M#Z28ZT]3F HD''P$WV%PR*B%0EFB IXD-D@GIIF IA2TA@NRPD RBC&amp;(,XMDA+X ^+_!$B\T5 RB?.&gt;U%@ #BR!AV8N"9?@A@-WS4E+"ACSZT_;PF,_Q_#90EH:VNM+?;&amp; ?I5#!Z;&lt;D( 2 /+:^U3*:4WZT*]VB@34BU8B''ATXK+AXHQ:HC &amp;APD@(HP,E"&gt;UC(H&gt;G6T5$Y0WD$*\O;TX9AN]J/W31AO"N("P.ZJ0T[M&amp;:&amp;+.4X@#*@K"X-Q2,\Y&lt;I\R?&gt;^89\P#)P8R$4H4$\@B@ZC3E.:#CU+''&amp;E!"6&lt;"&gt;7.!HBB/0V#@@^4HGD\PB@$BPTGHR1DU(0R+*-B1FOWS)%@Y\7C]CA*A=RRE''LPVIL_OD Q-!&amp;4GQ(#WM:L\VYR2KCH.\[P(_0=EIMU5 /)&amp;P[1ADH BR&amp;EKDX(#Z*D9I93N;W]=#P/O[&gt;_(5 R[]8G#PC@LJ !2/@;7Z7&amp;/ @ XBLQP1&amp;JDQF)IH%SAVDEP2DI.EHXF(Z4I&amp;",D??&amp;KW=M40 ]0@+I(=-JOVMZW) )@-AJ"LT OFWY-;*C?X@\/O[^J/-]7&lt;I&amp;''_8&lt;UG-XGXB\AZF!*X]ZR=7O''O_]37[WW$L''B=''7P5@2!LL PN@FPPY@J,@([RO Q11"TUK 9"?T,5,IX6-K_J:"N0E''38^BAS%Z.6&lt;O;/?C)\Y&lt;E)@P''CD8P,''&amp;O[Y-7,O+A^=''=8%NLCWR!ALR*0)BSVFE&lt;8T'';Q 6D ((SS%/FP7_]1JH??9&amp;3338[Z6GKG*"LP; RP!T&gt;BCR IDXVF_D$) B6HB!$XC M ?4PC&lt;FGS [#^W3=!%,8=0,7TQ$-I#8I2(E\1''A 14:6+''.\=J8M)@?,@S_GE&lt;8&gt;"&gt;1H%&amp;BEY-7&gt;GP0L)_0HIR3B&lt;DXMZ@+T5]U1;,UW\L6MM7E_KL["D4&lt;$DXU''W8F&gt;IEQTPB#*&amp;9PPO!MR CE &lt;.@V&amp;\=&amp;XMYTNN\X?=4?//4NE"2\2&gt;(G;.ZXL9X! 1THKT''5]GI87SLL];1JOAI&amp;5-Q:V)\,YVQ(&amp;JFAP:0?.IN#9&lt;6&amp;-R;A'' L]1RQV2/=G[B&amp;5M8ZT -ZYL5!&gt;&gt;UU\&lt;ZW+.^&amp;:*;!0&gt;WH.N1OV;?UM**&lt;WO@UZ 2(V"Y8E&amp;0]G0)QZ.NAT*GX MS#H5U&gt;=#&amp;=&lt;;W+&amp;3);I*=.7LZ6%&amp;Y?\=SO&gt;8;=&gt;2YJV:T2)#EOULAW%PFT40..]!;BET_(F4"S"TTX2H4R*P,2(SX@)9"AYD/+D$FS3JBNPD.X.OIZO+O *-=7?@D&lt;&gt;,9Y?/_8:%,2,X&lt;%L:L''@?(OP$8Q,5''=KSP"&amp;SXMYM^N![^V#J?''&lt;UU=$HIW&amp;._=&gt;#/U+5?KL:&amp;^IIVK\\M6WN__4=;C!,YTL=*W(:T,S$(+A_(U''\ SC$**JFIU#D[II#:G!@X[$FA[#N;5/P)L5(H3''[&gt;N4 0(:1H8= X[:I%9X?Q#GK3&amp;S#57&lt;PS:78$)&amp;3Y9M023^%CI#X:1\&gt;PS_&gt;,;7:S&amp;&lt;$5!COU&amp;UXFP$3\ECA:&amp;)*&gt;FO_72T''[-6\=NMM=AXM8V_77X''NS]ISD_(F^ !Z7N45S[ 9U3:Q)LLA)OX@+P%V+@B/2Z2[:HAXS2F!=O4=11 XO=N=''Y5LV[G6O''*200MG&gt;IGO?8I-=;:@4K!LGM&amp;K&gt;C81P.)*Z0%Z7J&lt;/&amp;&lt;_K6;XQCKUR3 XXW9[CV^\M)O-N0+LSC L!2RWWO(Q5#67%,:.K''Y,6&lt;9557&gt;C_;;:R515&lt;=_98\7?S/J553"XN,3&amp;?/6\O''X,.&amp;BQ-Q;3F*^P:")PWQTEX9DH/7 &lt;D,C*7=5G''!F6[]+I?(8NBB!&amp;3I;B?KXY''K''4ME;Z-)$YMQG***L&lt;,&amp;(]K:8_)GO_XQX/OI[C!SS?-NK#''MKXR)?L,/JEQ5!&gt;2#%&lt;=LN3^G;U&lt;7S4;.EP=2D&gt;_&gt;TJ?.7VV;''=''''/0&lt;":77WD;%592L]]?&gt;5?89^57D=8SX/^ZG-Y7[^VBD4=!0\J9Y@^2]FZ7D!''1D8[!KSP0_N  $U"BNR63\S1M:81)JN,0LCJL3V-* 3WT!N-)W7X&amp;92;;E@5M45#;5F+6]^9''8:=&gt;2&lt;1(ES_&gt;8C^\]NY"7''-\N9,;AGVMA6"\E*U3-H(9L6M$#^V&gt;''?&gt;\22;=NO\?&lt;@A5M[T&lt;,''HU2VRJS5=3EP&lt;==B.^^^$U-.9;#[V;N&gt;$X2!F-[LIFP328ZRL7%HHP[0H 4U2CH01VY5!&lt;:''2* 9JQ8SRUURE4.H]EI&lt;M031A+W5!G\''"D''C/JR\\.XLZLFI=X_!2''KY5G74@_+;:&gt;!35[.5"9= AV0T!*$J''SF&lt;&amp;L.U"):N#,X6)3L1]^6L;#J9&gt;$+WT:67_.XCR[8ZJKO$X&lt;''.C&gt;^&gt;&gt;#/:&gt;@H0SU"S1^UKO .A% I1V#$0G,:[.W2$(G*R6G40VD$XR4Q@)K5A"FT(+:6$*2@Y^*F"#$,61NO( &amp;RJ813Z5OO(ZLZ''QS''''8Y8-QKGLYF\&lt; QP2#R#;T^*Z2K&amp;5O&lt;=E\[&gt;Y^/?H1SS5+J25.6LG_6GHZF!/#=07?"P&lt;/OQ:%^_/*K[&gt;ITR+I^C,&gt;1UHQL\]?=E C:A \XFUTD0 H/[2!H4@),3.ADAK$1R9_. 8" 4$H6[:%U&amp;,;WQ&gt; 5%)(:DBYG*@9B8PKIW$D6Y1DB7FPF%X]PB@HZ8%W0-Q,/8+:;5#M7=&amp;0NGC3H4P,VLI(Y9[GG''&gt;BC228''M9[!/%=?&amp;YF&lt;R3R*FD#&amp;7!C5I/VE7K1 NF5H=_+3(MH8FXWJN(0LBDJ^)#@&amp;DU4N(YD :U:E&amp;7U(''.MPWZ=I:@CM%QDV62XZL %"VT5TN6@$@T&gt;"GTT$8J@""$ATT#]M\/%''%+I08Q0ZF1-9+_L5&amp;*X4DX5F^W+ML93; \=28_''W81((#G(8&gt;&amp;7:P#8Z"7SA4R:^A36;OS3OK172^P 8!&amp;PAB%&amp;O9C@$CQ0&lt;9AJHPQU0J@ U[)8\NP9Y#;PCH 2EKEQD0NS@*?U0AG!IPDE-CU1&lt;8]G&lt;9.F-[M&amp;: 8:=^5&amp;&lt;ZAGC0&lt;N,_W8]%7;8Q%H#NW;?&lt;K\X^ZLBI MX&lt;&gt;B0O;E&gt;_UO.2P"?X$SH&lt;VZ EW:O*MSGJV8M#V\QP/)]AF/J7V\@J0WVJ7ZN)L@Z/3A;+_M5;+/7W#;5&amp;T&gt;3_],N-.?X3-J%R4$O)]&amp;8ZSN_?&gt;P-_JS=V&amp;JULTYF46=-P!OI;&gt;/8F5=!K][8F]@X ;TVX27VAV,,5 ML*V]*&lt;Z3AF.-7MR0XQO$&lt;X]HBQX^\O''4:''?3$)?#Y?_\3[=8\OM_#9U^64MKRSD/KUG[.6$MMSXITJ/TFO/&gt;WH2Y[?B,P5!Q7P/"[_OB[J$K )1ZE0OL58(EUB&amp;DLU,!"?=?_%A]?&gt;J[T7]7MD4&lt;&lt;0S]..IF.+$:**:(99^R%)MM)&gt;/+:&amp;SF##SU+''&amp;E,[AR@=/Y6964N&gt;V19UV/&lt;(9Q0INI7\ZP/TR$%4 IBX+EHVS*-&lt;ZW-V)=)8;)X?OLD"1%W!C42J@KPB*3X&lt;NJKW13(S4V+*!L,NWDQX6MY$*$T3T6M!_W+M;X/VWK"*.H;;C,Z''..&gt;\Z''?N9(N_ON99=Z&amp;''5*=1+:8:RU++[TC2ZR55-)5F3[]OG:,=P8A?@7&gt;IZDY&gt;O+J15_5+5;3WA''D&amp;#WO[ _*?1D@@D0A+/;] 0=5/;1%*;7#3+-7@$]O8.''/G@A@O_CY6WNN. NX\2QO;&gt;"$/$S#S]_?]4(@VV--=, [;0+@72O=C5#^:5G88,(3@@@@@D%ES$R.P&amp;BB')</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>scripts/</category><body package="Mootools-MochaUI">excanvasCompressedJs	^'if(!window.CanvasRenderingContext2D){(function(){var I=Math,i=I.round,L=I.sin,M=I.cos,m=10,A=m/2,Q={init:function(a){var b=a||document;if(/MSIE/.test(navigator.userAgent)&amp;&amp;!window.opera){var c=this;b.attachEvent("onreadystatechange",function(){c.r(b)})}},r:function(a){if(a.readyState=="complete"){if(!a.namespaces["s"]){a.namespaces.add("g_vml_","urn:schemas-microsoft-com:vml")}var b=a.createStyleSheet();b.cssText="canvas{display:inline-block;overflow:hidden;text-align:left;width:300px;height:150px}g_vml_\\:*{behavior:url(#default#VML)}";var c=a.getElementsByTagName("canvas");for(var d=0;d&lt;c.length;d++){if(!c[d].getContext){this.initElement(c[d])}}}},q:function(a){var b=a.outerHTML,c=a.ownerDocument.createElement(b);if(b.slice(-2)!="/&gt;"){var d="/"+a.tagName,e;while((e=a.nextSibling)&amp;&amp;e.tagName!=d){e.removeNode()}if(e){e.removeNode()}}a.parentNode.replaceChild(c,a);return c},initElement:function(a){a=this.q(a);a.getContext=function(){if(this.l){return this.l}return this.l=new K(this)};a.attachEvent("onpropertychange",V);a.attachEvent("onresize",W);var b=a.attributes;if(b.width&amp;&amp;b.width.specified){a.style.width=b.width.nodeValue+"px"}else{a.width=a.clientWidth}if(b.height&amp;&amp;b.height.specified){a.style.height=b.height.nodeValue+"px"}else{a.height=a.clientHeight}return a}};function V(a){var b=a.srcElement;switch(a.propertyName){case "width":b.style.width=b.attributes.width.nodeValue+"px";b.getContext().clearRect();break;case "height":b.style.height=b.attributes.height.nodeValue+"px";b.getContext().clearRect();break}}function W(a){var b=a.srcElement;if(b.firstChild){b.firstChild.style.width=b.clientWidth+"px";b.firstChild.style.height=b.clientHeight+"px"}}Q.init();var R=[];for(var E=0;E&lt;16;E++){for(var F=0;F&lt;16;F++){R[E*16+F]=E.toString(16)+F.toString(16)}}function J(){return[[1,0,0],[0,1,0],[0,0,1]]}function G(a,b){var c=J();for(var d=0;d&lt;3;d++){for(var e=0;e&lt;3;e++){var g=0;for(var h=0;h&lt;3;h++){g+=a[d][h]*b[h][e]}c[d][e]=g}}return c}function N(a,b){b.fillStyle=a.fillStyle;b.lineCap=a.lineCap;b.lineJoin=a.lineJoin;b.lineWidth=a.lineWidth;b.miterLimit=a.miterLimit;b.shadowBlur=a.shadowBlur;b.shadowColor=a.shadowColor;b.shadowOffsetX=a.shadowOffsetX;b.shadowOffsetY=a.shadowOffsetY;b.strokeStyle=a.strokeStyle;b.d=a.d;b.e=a.e}function O(a){var b,c=1;a=String(a);if(a.substring(0,3)=="rgb"){var d=a.indexOf("(",3),e=a.indexOf(")",d+1),g=a.substring(d+1,e).split(",");b="#";for(var h=0;h&lt;3;h++){b+=R[Number(g[h])]}if(g.length==4&amp;&amp;a.substr(3,1)=="a"){c=g[3]}}else{b=a}return[b,c]}function S(a){switch(a){case "butt":return"flat";case "round":return"round";case "square":default:return"square"}}function K(a){this.a=J();this.m=[];this.k=[];this.c=[];this.strokeStyle="#000";this.fillStyle="#000";this.lineWidth=1;this.lineJoin="miter";this.lineCap="butt";this.miterLimit=m*1;this.globalAlpha=1;this.canvas=a;var b=a.ownerDocument.createElement("div");b.style.width=a.clientWidth+"px";b.style.height=a.clientHeight+"px";b.style.overflow="hidden";b.style.position="absolute";a.appendChild(b);this.j=b;this.d=1;this.e=1}var j=K.prototype;j.clearRect=function(){this.j.innerHTML="";this.c=[]};j.beginPath=function(){this.c=[]};j.moveTo=function(a,b){this.c.push({type:"moveTo",x:a,y:b});this.f=a;this.g=b};j.lineTo=function(a,b){this.c.push({type:"lineTo",x:a,y:b});this.f=a;this.g=b};j.bezierCurveTo=function(a,b,c,d,e,g){this.c.push({type:"bezierCurveTo",cp1x:a,cp1y:b,cp2x:c,cp2y:d,x:e,y:g});this.f=e;this.g=g};j.quadraticCurveTo=function(a,b,c,d){var e=this.f+0.6666666666666666*(a-this.f),g=this.g+0.6666666666666666*(b-this.g),h=e+(c-this.f)/3,l=g+(d-this.g)/3;this.bezierCurveTo(e,g,h,l,c,d)};j.arc=function(a,b,c,d,e,g){c*=m;var h=g?"at":"wa",l=a+M(d)*c-A,n=b+L(d)*c-A,o=a+M(e)*c-A,f=b+L(e)*c-A;if(l==o&amp;&amp;!g){l+=0.125}this.c.push({type:h,x:a,y:b,radius:c,xStart:l,yStart:n,xEnd:o,yEnd:f})};j.rect=function(a,b,c,d){this.moveTo(a,b);this.lineTo(a+c,b);this.lineTo(a+c,b+d);this.lineTo(a,b+d);this.closePath()};j.strokeRect=function(a,b,c,d){this.beginPath();this.moveTo(a,b);this.lineTo(a+c,b);this.lineTo(a+c,b+d);this.lineTo(a,b+d);this.closePath();this.stroke()};j.fillRect=function(a,b,c,d){this.beginPath();this.moveTo(a,b);this.lineTo(a+c,b);this.lineTo(a+c,b+d);this.lineTo(a,b+d);this.closePath();this.fill()};j.createLinearGradient=function(a,b,c,d){var e=new H("gradient");return e};j.createRadialGradient=function(a,b,c,d,e,g){var h=new H("gradientradial");h.n=c;h.o=g;h.i.x=a;h.i.y=b;return h};j.drawImage=function(a,b){var c,d,e,g,h,l,n,o,f=a.runtimeStyle.width,k=a.runtimeStyle.height;a.runtimeStyle.width="auto";a.runtimeStyle.height="auto";var q=a.width,r=a.height;a.runtimeStyle.width=f;a.runtimeStyle.height=k;if(arguments.length==3){c=arguments[1];d=arguments[2];h=(l=0);n=(e=q);o=(g=r)}else if(arguments.length==5){c=arguments[1];d=arguments[2];e=arguments[3];g=arguments[4];h=(l=0);n=q;o=r}else if(arguments.length==9){h=arguments[1];l=arguments[2];n=arguments[3];o=arguments[4];c=arguments[5];d=arguments[6];e=arguments[7];g=arguments[8]}else{throw"Invalid number of arguments";}var s=this.b(c,d),t=[],v=10,w=10;t.push(" &lt;g_vml_:group",'' coordsize="'',m*v,",",m*w,''"'','' coordorigin="0,0"'','' style="width:'',v,";height:",w,";position:absolute;");if(this.a[0][0]!=1||this.a[0][1]){var x=[];x.push("M11=''",this.a[0][0],"'',","M12=''",this.a[1][0],"'',","M21=''",this.a[0][1],"'',","M22=''",this.a[1][1],"'',","Dx=''",i(s.x/m),"'',","Dy=''",i(s.y/m),"''");var p=s,y=this.b(c+e,d),z=this.b(c,d+g),B=this.b(c+e,d+g);p.x=Math.max(p.x,y.x,z.x,B.x);p.y=Math.max(p.y,y.y,z.y,B.y);t.push("padding:0 ",i(p.x/m),"px ",i(p.y/m),"px 0;filter:progid:DXImageTransform.Microsoft.Matrix(",x.join(""),", sizingmethod=''clip'');")}else{t.push("top:",i(s.y/m),"px;left:",i(s.x/m),"px;")}t.push('' "&gt;'',''&lt;g_vml_:image src="'',a.src,''"'','' style="width:'',m*e,";"," height:",m*g,'';"'','' cropleft="'',h/q,''"'','' croptop="'',l/r,''"'','' cropright="'',(q-h-n)/q,''"'','' cropbottom="'',(r-l-o)/r,''"''," /&gt;","&lt;/g_vml_:group&gt;");this.j.insertAdjacentHTML("BeforeEnd",t.join(""))};j.stroke=function(a){var b=[],c=O(a?this.fillStyle:this.strokeStyle),d=c[0],e=c[1]*this.globalAlpha,g=10,h=10;b.push("&lt;g_vml_:shape",'' fillcolor="'',d,''"'','' filled="'',Boolean(a),''"'','' style="position:absolute;width:'',g,";height:",h,'';"'','' coordorigin="0 0" coordsize="'',m*g," ",m*h,''"'','' stroked="'',!a,''"'','' strokeweight="'',this.lineWidth,''"'','' strokecolor="'',d,''"'','' path="'');var l={x:null,y:null},n={x:null,y:null};for(var o=0;o&lt;this.c.length;o++){var f=this.c[o];if(f.type=="moveTo"){b.push(" m ");var k=this.b(f.x,f.y);b.push(i(k.x),",",i(k.y))}else if(f.type=="lineTo"){b.push(" l ");var k=this.b(f.x,f.y);b.push(i(k.x),",",i(k.y))}else if(f.type=="close"){b.push(" x ")}else if(f.type=="bezierCurveTo"){b.push(" c ");var k=this.b(f.x,f.y),q=this.b(f.cp1x,f.cp1y),r=this.b(f.cp2x,f.cp2y);b.push(i(q.x),",",i(q.y),",",i(r.x),",",i(r.y),",",i(k.x),",",i(k.y))}else if(f.type=="at"||f.type=="wa"){b.push(" ",f.type," ");var k=this.b(f.x,f.y),s=this.b(f.xStart,f.yStart),t=this.b(f.xEnd,f.yEnd);b.push(i(k.x-this.d*f.radius),",",i(k.y-this.e*f.radius)," ",i(k.x+this.d*f.radius),",",i(k.y+this.e*f.radius)," ",i(s.x),",",i(s.y)," ",i(t.x),",",i(t.y))}if(k){if(l.x==null||k.x&lt;l.x){l.x=k.x}if(n.x==null||k.x&gt;n.x){n.x=k.x}if(l.y==null||k.y&lt;l.y){l.y=k.y}if(n.y==null||k.y&gt;n.y){n.y=k.y}}}b.push('' "&gt;'');if(typeof this.fillStyle=="object"){var v={x:"50%",y:"50%"},w=n.x-l.x,x=n.y-l.y,p=w&gt;x?w:x;v.x=i(this.fillStyle.i.x/w*100+50)+"%";v.y=i(this.fillStyle.i.y/x*100+50)+"%";var y=[];if(this.fillStyle.p=="gradientradial"){var z=this.fillStyle.n/p*100,B=this.fillStyle.o/p*100-z}else{var z=0,B=100}var C={offset:null,color:null},D={offset:null,color:null};this.fillStyle.h.sort(function(T,U){return T.offset-U.offset});for(var o=0;o&lt;this.fillStyle.h.length;o++){var u=this.fillStyle.h[o];y.push(u.offset*B+z,"% ",u.color,",");if(u.offset&gt;C.offset||C.offset==null){C.offset=u.offset;C.color=u.color}if(u.offset&lt;D.offset||D.offset==null){D.offset=u.offset;D.color=u.color}}y.pop();b.push("&lt;g_vml_:fill",'' color="'',D.color,''"'','' color2="'',C.color,''"'','' type="'',this.fillStyle.p,''"'','' focusposition="'',v.x,", ",v.y,''"'','' colors="'',y.join(""),''"'','' opacity="'',e,''" /&gt;'')}else if(a){b.push(''&lt;g_vml_:fill color="'',d,''" opacity="'',e,''" /&gt;'')}else{b.push("&lt;g_vml_:stroke",'' opacity="'',e,''"'','' joinstyle="'',this.lineJoin,''"'','' miterlimit="'',this.miterLimit,''"'','' endcap="'',S(this.lineCap),''"'','' weight="'',this.lineWidth,''px"'','' color="'',d,''" /&gt;'')}b.push("&lt;/g_vml_:shape&gt;");this.j.insertAdjacentHTML("beforeEnd",b.join(""));this.c=[]};j.fill=function(){this.stroke(true)};j.closePath=function(){this.c.push({type:"close"})};j.b=function(a,b){return{x:m*(a*this.a[0][0]+b*this.a[1][0]+this.a[2][0])-A,y:m*(a*this.a[0][1]+b*this.a[1][1]+this.a[2][1])-A}};j.save=function(){var a={};N(this,a);this.k.push(a);this.m.push(this.a);this.a=G(J(),this.a)};j.restore=function(){N(this.k.pop(),this);this.a=this.m.pop()};j.translate=function(a,b){var c=[[1,0,0],[0,1,0],[a,b,1]];this.a=G(c,this.a)};j.rotate=function(a){var b=M(a),c=L(a),d=[[b,c,0],[-c,b,0],[0,0,1]];this.a=G(d,this.a)};j.scale=function(a,b){this.d*=a;this.e*=b;var c=[[a,0,0],[0,b,0],[0,0,1]];this.a=G(c,this.a)};j.clip=function(){};j.arcTo=function(){};j.createPattern=function(){return new P};function H(a){this.p=a;this.n=0;this.o=0;this.h=[];this.i={x:0,y:0}}H.prototype.addColorStop=function(a,b){b=O(b);this.h.push({offset:1-a,color:b})};function P(){}G_vmlCanvasManager=Q;CanvasRenderingContext2D=K;CanvasGradient=H;CanvasPattern=P})()};'</body><body package="Mootools-MochaUI">mochaJs	^'/* Script: Core.js	MochaUI - A Web Applications User Interface Framework.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.Contributors:	- Scott F. Frederick	- Joel LindauNote:	This documentation is taken directly from the javascript source files. It is built using Natural Docs.Todo:	Consider making title tooltips optional and using them more often.*/var MochaUI = new Hash({	options: new Hash({		useEffects: true  // Toggles the majority of window fade and move effects.	}),	Columns: {		instances:      new Hash()	},	Panels: {		instances:      new Hash()	},			Windows: {	  		instances:      new Hash(),		indexLevel:     100,          // Used for z-Index		windowIDCount:  0,	          // Used for windows without an ID defined by the user		windowsVisible: true          // Ctrl-Alt-Q to toggle window visibility	},		ieSupport:  ''excanvas'',   // Makes it easier to switch between Excanvas and Moocanvas for testing	focusingWindow: ''false'',	/*		Function: updateContent		Replace the content of a window or panel.			Arguments:		element - The parent window or panel.		childElement - The child element of the window or panel recieving the content.		title - (string) Change this if you want to change the title of the window or panel.		content - (string or element) An html loadMethod option.		loadMethod - (''html'', ''xhr'', or ''iframe'') Defaults to ''html''.		url - Used if loadMethod is set to ''xhr'' or ''iframe''.		padding - (object)	*/		updateContent: function(updateOptions){		var options = {			''element'':      null,			''childElement'': null,			''title'':        null,			''content'':      null,			''loadMethod'':   null,			''url'':          null,			''padding'':      null		};		$extend(options, updateOptions);		if (!options.element) return;		var element = options.element;		if (MochaUI.Windows.instances.get(element.id)) {			var recipient = ''window'';			var currentInstance = MochaUI.Windows.instances.get(element.id);			var spinnerEl = currentInstance.spinnerEl;			if (options.title) {				currentInstance.titleEl.set(''html'', options.title);			}		}		else {			var recipient = ''panel'';			var currentInstance = MochaUI.Panels.instances.get(element.id);			if (options.title) {				currentInstance.titleEl.set(''html'', options.title);			}		}		var contentEl = currentInstance.contentEl;		if (options.childElement != null) {			var contentContainer = options.childElement;		}		else {			var contentContainer = currentInstance.contentEl;		}				var loadMethod = options.loadMethod != null ? options.loadMethod : currentInstance.options.loadMethod;				// Set scrollbars if loading content in main content container.		// Always use ''hidden'' for iframe windows		if (contentContainer == currentInstance.contentEl) {			currentInstance.contentWrapperEl.setStyles({				''overflow'': currentInstance.options.scrollbars == true &amp;&amp; loadMethod != ''iframe'' ? ''auto'' : ''hidden''			});		}		var contentWrapperEl = currentInstance.contentWrapperEl;				if (options.padding != null) {			contentEl.setStyles({				''padding-top'': options.padding.top,				''padding-bottom'': options.padding.bottom,				''padding-left'': options.padding.left,				''padding-right'': options.padding.right			});		}		// Remove old content.		if (contentContainer == contentEl){			contentEl.empty();		}		// Load new content.		switch(loadMethod){			case ''xhr'':				new Request.HTML({					url: options.url,					update: contentContainer,					evalScripts: currentInstance.options.evalScripts,					evalResponse: currentInstance.options.evalResponse,					onRequest: function(){						if (recipient == ''window'' &amp;&amp; contentContainer == contentEl){							currentInstance.showSpinner(spinnerEl);						}						else if (recipient == ''panel'' &amp;&amp; contentContainer == contentEl &amp;&amp; $(''spinner'')){							$(''spinner'').setStyle(''visibility'',''visible'');							}					}.bind(this),					onFailure: function(){						if (contentContainer == contentEl){							contentContainer.set(''html'',''&lt;p&gt;&lt;strong&gt;Error Loading XMLHttpRequest&lt;/strong&gt;&lt;/p&gt;'');							if (recipient == ''window'') {								currentInstance.hideSpinner(spinnerEl);							}							else if (recipient == ''panel'' &amp;&amp; $(''spinner'')) {								$(''spinner'').setStyle(''visibility'', ''hidden'');							}						}					}.bind(this),					onException: function(){}.bind(this),					onSuccess: function(){						if (contentContainer == contentEl){							if (recipient == ''window''){								currentInstance.hideSpinner(spinnerEl);							}							else if (recipient == ''panel'' &amp;&amp; $(''spinner'')){								$(''spinner'').setStyle(''visibility'', ''hidden'');							}							currentInstance.fireEvent(''onContentLoaded'', element);						}					}.bind(this),					onComplete: function(){}.bind(this)				}).get();				break;			case ''iframe'': // May be able to streamline this if the iframe already exists.				if ( currentInstance.options.contentURL == '''' || contentContainer != contentEl) {					break;				}				currentInstance.iframeEl = new Element(''iframe'', {					''id'': currentInstance.options.id + ''_iframe'',					''name'':  currentInstance.options.id + ''_iframe'',					''class'': ''mochaIframe'',					''src'': options.url,					''marginwidth'':  0,					''marginheight'': 0,					''frameBorder'':  0,					''scrolling'':    ''auto'',					''styles'': {						''height'': contentWrapperEl.offsetHeight - contentWrapperEl.getStyle(''border-top'').toInt() - contentWrapperEl.getStyle(''border-bottom'').toInt(),						''width'': currentInstance.panelEl ? contentWrapperEl.offsetWidth - contentWrapperEl.getStyle(''border-left'').toInt() - contentWrapperEl.getStyle(''border-right'').toInt() : ''100%''						}				}).injectInside(contentEl);				// Add onload event to iframe so we can hide the spinner and run onContentLoaded()				currentInstance.iframeEl.addEvent(''load'', function(e) {					if (recipient == ''window'') {						currentInstance.hideSpinner(spinnerEl);					}					else if (recipient == ''panel'' &amp;&amp; contentContainer == contentEl &amp;&amp; $(''spinner'')) {						$(''spinner'').setStyle(''visibility'', ''hidden'');					}					currentInstance.fireEvent(''onContentLoaded'', element);				}.bind(this));				if (recipient == ''window'') {					currentInstance.showSpinner(spinnerEl);				}				else if (recipient == ''panel'' &amp;&amp; contentContainer == contentEl &amp;&amp; $(''spinner'')){					$(''spinner'').setStyle(''visibility'', ''visible'');					}				break;			case ''html'':			default:				// Need to test injecting elements as content.				var elementTypes = new Array(''element'', ''textnode'', ''whitespace'', ''collection'');				if (elementTypes.contains($type(options.content))){					options.content.inject(contentContainer);				} else {					contentContainer.set(''html'', options.content);				}				currentInstance.fireEvent(''onContentLoaded'', element);				break;		}	},	/*		Function: reloadIframe		Reload an iframe. Fixes an issue in Firefox when trying to use location.reload on an iframe that has been destroyed and recreated.	Arguments:		iframe - This should be both the name and the id of the iframe.	Syntax:		(start code)		MochaUI.reloadIframe(element);		(end)	Example:		To reload an iframe from within another iframe:		(start code)		parent.MochaUI.reloadIframe(''myIframeName'');		(end)	*/	reloadIframe: function(iframe){		if (Browser.Engine.gecko) {			$(iframe).src = $(iframe).src;		}		else {			top.frames[iframe].location.reload(true);		}	},	collapseToggle: function(windowEl){		var instances = MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);		var handles = currentInstance.windowEl.getElements(''.handle'');		if (currentInstance.isMaximized == true) return;				if (currentInstance.isCollapsed == false) {			currentInstance.isCollapsed = true;			handles.setStyle(''display'', ''none'');			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');			}			currentInstance.contentBorderEl.setStyles({				visibility: ''hidden'',				position: ''absolute'',				top: -10000,				left: -10000			});			if(currentInstance.toolbarWrapperEl){				currentInstance.toolbarWrapperEl.setStyles({					visibility: ''hidden'',					position: ''absolute'',					top: -10000,					left: -10000				});			}			currentInstance.drawWindowCollapsed(windowEl);		}		else {			currentInstance.isCollapsed = false;			currentInstance.drawWindow(windowEl);			currentInstance.contentBorderEl.setStyles({				visibility: ''visible'',				position: null,				top: null,				left: null			});			if(currentInstance.toolbarWrapperEl){				currentInstance.toolbarWrapperEl.setStyles({					visibility: ''visible'',					position: null,					top: null,					left: null				});			}			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}			handles.setStyle(''display'', ''block'');		}	},	/*	Function: closeWindow		Closes a window.	Syntax:	(start code)		MochaUI.closeWindow();	(end)	Arguments: 		windowEl - the ID of the window to be closed	Returns:		true - the window was closed		false - the window was not closed	*/	closeWindow: function(windowEl){		// Does window exist and is not already in process of closing ?		var instances = MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);		if (windowEl != $(windowEl) || currentInstance.isClosing) return;					currentInstance.isClosing = true;		currentInstance.fireEvent(''onClose'', windowEl);		if (currentInstance.check) currentInstance.check.destroy();		if ((currentInstance.options.type == ''modal'' || currentInstance.options.type == ''modal2'') &amp;&amp; Browser.Engine.trident4){				$(''modalFix'').setStyle(''display'', ''none'');		}		if (MochaUI.options.useEffects == false){			if (currentInstance.options.type == ''modal'' || currentInstance.options.type == ''modal2''){				$(''modalOverlay'').setStyle(''opacity'', 0);			}			MochaUI.closingJobs(windowEl);			return true;			}		else {			// Redraws IE windows without shadows since IE messes up canvas alpha when you change element opacity			if (Browser.Engine.trident) currentInstance.drawWindow(windowEl, false);			if (currentInstance.options.type == ''modal'' || currentInstance.options.type == ''modal2''){				MochaUI.Modal.modalOverlayCloseMorph.start({					''opacity'': 0				});			}			var closeMorph = new Fx.Morph(windowEl, {				duration: 120,				onComplete: function(){					MochaUI.closingJobs(windowEl);					return true;				}.bind(this)			});			closeMorph.start({				''opacity'': .4			});		}	},	closingJobs: function(windowEl){		var instances = MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);		windowEl.setStyle(''visibility'', ''hidden'');		windowEl.destroy();		currentInstance.fireEvent(''onCloseComplete'');				if (currentInstance.options.type != ''notification''){			var newFocus = this.getWindowWithHighestZindex();			this.focusWindow(newFocus);		}		instances.erase(currentInstance.options.id);		if (this.loadingWorkspace == true) {			this.windowUnload();		}		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock) &amp;&amp; currentInstance.options.type == ''window'') {			var currentButton = $(currentInstance.options.id + ''_dockTab'');			if (currentButton != null) {				MochaUI.Dock.dockSortables.removeItems(currentButton).destroy();			}			// Need to resize everything in case the dock becomes smaller when a tab is removed			MochaUI.Desktop.setDesktopSize();		}	},	/*		Function: closeAll			Close all open windows.	*/	closeAll: function() {				$$(''div.mocha'').each(function(windowEl){			this.closeWindow(windowEl);		}.bind(this));	},	/*	Function: toggleWindowVisibility		Toggle window visibility with Ctrl-Alt-Q.	*/		toggleWindowVisibility: function(){		MochaUI.Windows.instances.each(function(instance){			if (instance.options.type == ''modal'' || instance.options.type == ''modal2'' || instance.isMinimized == true) return;												var id = $(instance.options.id);			if (id.getStyle(''visibility'') == ''visible''){				if (instance.iframe){					instance.iframeEl.setStyle(''visibility'', ''hidden'');				}				if (instance.toolbarEl){					instance.toolbarWrapperEl.setStyle(''visibility'', ''hidden'');				}				instance.contentBorderEl.setStyle(''visibility'', ''hidden'');				id.setStyle(''visibility'', ''hidden'');				MochaUI.Windows.windowsVisible = false;			}			else {				id.setStyle(''visibility'', ''visible'');				instance.contentBorderEl.setStyle(''visibility'', ''visible'');				if (instance.iframe){					instance.iframeEl.setStyle(''visibility'', ''visible'');				}				if (instance.toolbarEl){					instance.toolbarWrapperEl.setStyle(''visibility'', ''visible'');				}				MochaUI.Windows.windowsVisible = true;			}		}.bind(this));	},	focusWindow: function(windowEl, fireEvent){		// This is used with blurAll		MochaUI.focusingWindow = ''true'';		var windowClicked = function(){			MochaUI.focusingWindow = ''false'';		};				windowClicked.delay(170, this);		// Only focus when needed		if ($$(''.mocha'').length == 0) return;		if (windowEl != $(windowEl) || windowEl.hasClass(''isFocused'')) return;		var instances =  MochaUI.Windows.instances;		var currentInstance = instances.get(windowEl.id);			if (currentInstance.options.type == ''notification'') return;		MochaUI.Windows.indexLevel += 2;		windowEl.setStyle(''zIndex'', MochaUI.Windows.indexLevel);		// Used when dragging and resizing windows		$(''windowUnderlay'').setStyle(''zIndex'', MochaUI.Windows.indexLevel - 1).inject($(windowEl),''after'');		// Fire onBlur for the window that lost focus.		instances.each(function(instance){			if (instance.windowEl.hasClass(''isFocused'')){				instance.fireEvent(''onBlur'', instance.windowEl);			}			instance.windowEl.removeClass(''isFocused'');		});		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock) &amp;&amp; currentInstance.options.type == ''window'') {			MochaUI.Dock.makeActiveTab();		}		currentInstance.windowEl.addClass(''isFocused'');		if (fireEvent != false){			currentInstance.fireEvent(''onFocus'', windowEl);		}	},	getWindowWithHighestZindex: function(){		this.highestZindex = 0;		$$(''div.mocha'').each(function(element){			this.zIndex = element.getStyle(''zIndex'');			if (this.zIndex &gt;= this.highestZindex) {				this.highestZindex = this.zIndex;			}			}.bind(this));		$$(''div.mocha'').each(function(element){			if (element.getStyle(''zIndex'') == this.highestZindex) {				this.windowWithHighestZindex = element;			}		}.bind(this));		return this.windowWithHighestZindex;	},	blurAll: function(){		if (MochaUI.focusingWindow == ''false'') {			$$(''.mocha'').each(function(windowEl){				var instances =  MochaUI.Windows.instances;				var currentInstance = instances.get(windowEl.id);				if (currentInstance.options.type != ''modal'' &amp;&amp; currentInstance.options.type != ''modal2''){					windowEl.removeClass(''isFocused'');				}			});			$$(''div.dockTab'').removeClass(''activeDockTab'');		}	},	roundedRect: function(ctx, x, y, width, height, radius, rgb, a){		ctx.fillStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x, y + radius);		ctx.lineTo(x, y + height - radius);		ctx.quadraticCurveTo(x, y + height, x + radius, y + height);		ctx.lineTo(x + width - radius, y + height);		ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill(); 	},	triangle: function(ctx, x, y, width, height, rgb, a){		ctx.beginPath();		ctx.moveTo(x + width, y);		ctx.lineTo(x, y + height);		ctx.lineTo(x + width, y + height);		ctx.closePath();		ctx.fillStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.fill();	},	circle: function(ctx, x, y, diameter, rgb, a){		ctx.beginPath();		ctx.moveTo(x, y);		ctx.arc(x, y, diameter, 0, Math.PI*2, true);		ctx.fillStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.fill();	},	/*	Function: centerWindow		Center a window in it''s container. If windowEl is undefined it will center the window that has focus.	*/	centerWindow: function(windowEl){				if(!windowEl){			MochaUI.Windows.instances.each(function(instance){				if (instance.windowEl.hasClass(''isFocused'')){					windowEl = instance.windowEl;				}			});		}		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var options = currentInstance.options;		var dimensions = options.container.getCoordinates();		var windowPosTop = (dimensions.height * .5) - ((options.height + currentInstance.headerFooterShadow) * .5);		if (windowPosTop &lt; 0) {			windowPosTop = 0;		}		var windowPosLeft =	(dimensions.width * .5) - (options.width * .5);		if (windowPosLeft &lt; 0) {			windowPosLeft = 0;		}		if (MochaUI.options.useEffects == true){			currentInstance.morph.start({				''top'': windowPosTop,				''left'': windowPosLeft			});		}		else {			windowEl.setStyles({				''top'': windowPosTop,				''left'': windowPosLeft			});		}	},	notification: function(message){			new MochaUI.Window({				loadMethod: ''html'',				closeAfter: 1500,				type: ''notification'',				addClass: ''notification'',				content: message,				width: 220,				height: 40,				y: 53,				padding:  { top: 10, right: 12, bottom: 10, left: 12 },				shadowBlur: 5,				bodyBgColor: [255, 255, 255]				});	},	/*	Function: dynamicResize		Use with a timer to resize a window as the window''s content size changes, such as with an accordian.	*/	dynamicResize: function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var contentWrapperEl = currentInstance.contentWrapperEl;		var contentEl = currentInstance.contentEl;				contentWrapperEl.setStyle(''height'', contentEl.offsetHeight);		contentWrapperEl.setStyle(''width'', contentEl.offsetWidth);					currentInstance.drawWindow(windowEl);	},		/*	Function: garbageCleanUp		Empties all windows of their children, and removes and garbages the windows. It is does not trigger onClose() or onCloseComplete(). This is useful to clear memory before the pageUnload.	Syntax:	(start code)		MochaUI.garbageCleanUp();	(end)		*/	garbageCleanUp: function(){		$$(''div.mocha'').each(function(el){			el.destroy();		}.bind(this));	},	/*		The underlay is inserted directly under windows when they are being dragged or resized	so that the cursor is not captured by iframes or other plugins (such as Flash)	underneath the window.		*/	underlayInitialize: function(){		var windowUnderlay = new Element(''div'', {			''id'': ''windowUnderlay'',			''styles'': {				''height'': parent.getCoordinates().height,				''opacity'': .01,				''display'': ''none''			}		}).inject(document.body);	},	setUnderlaySize: function(){		$(''windowUnderlay'').setStyle(''height'', parent.getCoordinates().height);	}});/* function: fixPNG	Bob Osola''s PngFix for IE6.example:	(begin code)	&lt;img src="xyz.png" alt="foo" width="10" height="20" onload="fixPNG(this)"&gt;	(end)note:	You must have the image height and width attributes specified in the markup.*/function fixPNG(myImage){	if (Browser.Engine.trident4 &amp;&amp; document.body.filters){		var imgID = (myImage.id) ? "id=''" + myImage.id + "'' " : "";		var imgClass = (myImage.className) ? "class=''" + myImage.className + "'' " : "";		var imgTitle = (myImage.title) ? "title=''" + myImage.title  + "'' " : "title=''" + myImage.alt + "'' ";		var imgStyle = "display:inline-block;" + myImage.style.cssText;		var strNewHTML = "&lt;span " + imgID + imgClass + imgTitle			+ " style=\"" + "width:" + myImage.width			+ "px; height:" + myImage.height			+ "px;" + imgStyle + ";"			+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"			+ "(src=\''" + myImage.src + "\'', sizingMethod=''scale'');\"&gt;&lt;/span&gt;";		myImage.outerHTML = strNewHTML;			}}// Toggle window visibility with Ctrl-Alt-Qdocument.addEvent(''keydown'', function(event){	if (event.key == ''q'' &amp;&amp; event.control &amp;&amp; event.alt) {		MochaUI.toggleWindowVisibility();	}});// Blur all windows if user clicks anywhere else on the pagedocument.addEvent(''mousedown'', function(event){	MochaUI.blurAll.delay(50);});document.addEvent(''domready'', function(){	MochaUI.underlayInitialize();});window.addEvent(''resize'', function(){		MochaUI.setUnderlaySize();});/*Script: Window.js	Build windows.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.	Requires:	Core.js*//*Class: Window	Creates a single MochaUI window.	Syntax:	(start code)	new MochaUI.Window(options);	(end)	Arguments:	optionsOptions:	id - The ID of the window. If not defined, it will be set to ''win'' + windowIDCount.	title - The title of the window.	icon - Place an icon in the window''s titlebar. This is either set to false or to the url of the icon. It is set up for icons that are 16 x 16px.	type - (''window'', ''modal'', ''modal2'', or ''notification'') Defaults to ''window''.	loadMethod - (''html'', ''xhr'', or ''iframe'') Defaults to ''html''.	contentURL - Used if loadMethod is set to ''xhr'' or ''iframe''.	closeAfter - Either false or time in milliseconds. Closes the window after a certain period of time in milliseconds. This is particularly useful for notifications.	evalScripts - (boolean) An xhr loadMethod option. Defaults to true.	evalResponse - (boolean) An xhr loadMethod option. Defaults to false.	content - (string or element) An html loadMethod option.	toolbar - (boolean) Create window toolbar. Defaults to false. This can be used for tabs, media controls, and so forth.	toolbarPosition - (''top'' or ''bottom'') Defaults to top.	toolbarHeight - (number)	toolbarURL - (url) Defaults to ''pages/lipsum.html''.	toolbarContent - (string)	container - (element ID) Element the window is injected in. The container defaults to ''desktop''. If no desktop then to document.body. Use ''pageWrapper'' if you don''t want the windows to overlap the toolbars.	restrict - (boolean) Restrict window to container when dragging.	shape - (''box'' or ''gauge'') Shape of window. Defaults to ''box''.	collapsible - (boolean) Defaults to true.	minimizable - (boolean) Requires MochaUI.Desktop and MochaUI.Dock. Defaults to true if dependenices are met. 	maximizable - (boolean) Requires MochaUI.Desktop. Defaults to true if dependenices are met.	closable - (boolean) Defaults to true. 	draggable - (boolean) Defaults to false for modals; otherwise true.	draggableGrid - (false or number) Distance in pixels for snap-to-grid dragging. Defaults to false. 	draggableLimit - (false or number) An object with x and y properties used to limit the movement of the Window. Defaults to false.	draggableSnap - (boolean) The distance to drag before the Window starts to respond to the drag. Defaults to false.	resizable - (boolean) Defaults to false for modals, notifications and gauges; otherwise true.	resizeLimit - (object) Minimum and maximum width and height of window when resized.	addClass - (string) Add a class to the window for more control over styling.		width - (number) Width of content area.		height - (number) Height of content area.	x - (number) If x and y are left undefined the window is centered on the page.	y - (number)	scrollbars - (boolean)	padding - (object)	shadowBlur - (number) Width of shadows.	shadowOffset - Should be positive and not be greater than the ShadowBlur.	controlsOffset - Change this if you want to reposition the window controls.	useCanvas - (boolean) Set this to false if you don''t want a canvas body.	useCanvasControls - (boolean) Set this to false if you wish to use images for the buttons.	headerHeight - (number) Height of window titlebar.	footerHeight - (number) Height of window footer.	cornerRadius - (number)	contentBgColor - (hex) Body background color	headerStartColor - ([r,g,b,]) Titlebar gradient''s top color	headerStopColor - ([r,g,b,]) Titlebar gradient''s bottom color	bodyBgColor - ([r,g,b,]) Background color of the main canvas shape	minimizeBgColor - ([r,g,b,]) Minimize button background color	minimizeColor - ([r,g,b,]) Minimize button color	maximizeBgColor - ([r,g,b,]) Maximize button background color	maximizeColor - ([r,g,b,]) Maximize button color	closeBgColor - ([r,g,b,]) Close button background color	closeColor - ([r,g,b,]) Close button color	resizableColor - ([r,g,b,]) Resizable icon color	onBeforeBuild - (function) Fired just before the window is built.	onContentLoaded - (function) Fired when content is successfully loaded via XHR or Iframe.	onFocus - (function)  Fired when the window is focused.	onBlur - (function) Fired when window loses focus.	onResize - (function) Fired when the window is resized.	onMinimize - (function) Fired when the window is minimized.	onMaximize - (function) Fired when the window is maximized.	onRestore - (function) Fired when a window is restored from minimized or maximized.	onClose - (function) Fired just before the window is closed.	onCloseComplete - (function) Fired after the window is closed.Returns:	Window object.Example:	Define a window. It is suggested you name the function the same as your window ID + "Window".	(start code)	var mywindowWindow = function(){		new MochaUI.Window({			id: ''mywindow'',			title: ''My Window'',			loadMethod: ''xhr'',			contentURL: ''pages/lipsum.html'',			width: 340,			height: 150		});	}	(end)Example:	Create window onDomReady.	(start code)		window.addEvent(''domready'', function(){		mywindow();	});	(end)Example:	Add link events to build future windows. It is suggested you give your anchor the same ID as your window + "WindowLink" or + "WindowLinkCheck". Use the latter if it is a link in the menu toolbar.	If you wish to add links in windows that open other windows remember to add events to those links when the windows are created.	(start code)	// Javascript:	if ($(''mywindowLink'')){		$(''mywindowLink'').addEvent(''click'', function(e) {			new Event(e).stop();			mywindow();		});	}	// HTML:	&lt;a id="mywindowLink" href="pages/lipsum.html"&gt;My Window&lt;/a&gt;		(end)	Loading Content with an XMLHttpRequest(xhr):		For content to load via xhr all the files must be online and in the same domain. If you need to load content from another domain or wish to have it work offline, load the content in an iframe instead of using the xhr option.		Iframes:		If you use the iframe loadMethod your iframe will automatically be resized when the window it is in is resized. If you want this same functionality when using one of the other load options simply add class="mochaIframe" to those iframes and they will be resized for you as well.*/// Having these options outside of the Class allows us to add, change, and remove// individual options without rewriting all of them.MochaUI.Windows.windowOptions = {	id:                null,	title:             ''New Window'',	icon:              false,	type:              ''window'',	loadMethod:        ''html'',	contentURL:        ''pages/lipsum.html'',	closeAfter:        false,	// xhr options	evalScripts:       true,	evalResponse:      false,	// html options	content:           ''Window content'',	// Toolbar	toolbar:           false,	toolbarPosition:   ''top'',	toolbarHeight:     29,	toolbarURL:        ''pages/lipsum.html'',	toolbarContent:    '''',	// Toolbar	toolbar2:           false,	toolbar2Position:   ''bottom'',	toolbar2Height:     29,	toolbar2URL:        ''pages/lipsum.html'',	toolbar2Content:    '''',		// Container options	container:         null,	restrict:          true,	shape:             ''box'',	// Window Controls	collapsible:       true,	minimizable:       true,	maximizable:       true,	closable:          true,	// Draggable	draggable:         null,	draggableGrid:     false,	draggableLimit:    false,	draggableSnap:     false,	// Resizable	resizable:         null,	resizeLimit:       {''x'': [250, 2500], ''y'': [125, 2000]},		// Style options:	addClass:          '''',	width:             300,	height:            125,	x:                 null,	y:                 null,	scrollbars:        true,	padding:   		   { top: 10, right: 12, bottom: 10, left: 12 },	shadowBlur:        5,	shadowOffset:      {''x'': 0, ''y'': 1},	controlsOffset:    {''right'': 6, ''top'': 6},	useCanvas:         true,	useCanvasControls: true,	useSpinner:        true,    // Toggles whether or not the ajax spinners are displayed in window footers.	// Color options:			headerHeight:      25,	footerHeight:      25,	cornerRadius:      8,	contentBgColor:    ''#fff'',	headerStartColor:  [250, 250, 250],	headerStopColor:   [229, 229, 229],	bodyBgColor:       [229, 229, 229],	minimizeBgColor:   [255, 255, 255],	minimizeColor:     [0, 0, 0],	maximizeBgColor:   [255, 255, 255],	maximizeColor:     [0, 0, 0],	closeBgColor:      [255, 255, 255],	closeColor:        [0, 0, 0],	resizableColor:    [254, 254, 254],	// Events	onBeforeBuild:     $empty,	onContentLoaded:   $empty,	onFocus:           $empty,	onBlur:            $empty,	onResize:          $empty,	onMinimize:        $empty,	onMaximize:        $empty,	onRestore:         $empty,	onClose:           $empty,	onCloseComplete:   $empty};MochaUI.Window = new Class({	Implements: Events,	options: MochaUI.Windows.windowOptions,	initialize: function(options){		this.setOptions(options);		// Shorten object chain		var options = this.options;		$extend(this, {			mochaControlsWidth: 0,			minimizebuttonX:  0,  // Minimize button horizontal position			maximizebuttonX: 0,  // Maximize button horizontal position			closebuttonX: 0,  // Close button horizontal position			headerFooterShadow: options.headerHeight + options.footerHeight + (options.shadowBlur * 2),			oldTop: 0,			oldLeft: 0,			isMaximized: false,			isMinimized: false,			isCollapsed: false,			timestamp: $time()		});				// May be better to use if type != window		if (options.type != ''window''){			options.container = document.body;			options.minimizable = false;		}		if (!options.container){			options.container = MochaUI.Desktop.desktop ? MochaUI.Desktop.desktop : document.body;		}		// Set this.options.resizable to default if it was not defined		if (options.resizable == null){			if (options.type != ''window'' || options.shape == ''gauge''){				options.resizable = false;			}			else {				options.resizable = true;				}		}		// Set this.options.draggable if it was not defined		if (options.draggable == null){			if (options.type != ''window''){				options.draggable = false;			}			else {				options.draggable = true;			}		}		// Gauges are not maximizable or resizable		if (options.shape == ''gauge'' || options.type == ''notification''){			options.collapsible = false;			options.maximizable = false;			options.contentBgColor = ''transparent'';			options.scrollbars = false;			options.footerHeight = 0;		}		if (options.type == ''notification''){			options.closable = false;			options.headerHeight = 0;		}				// Minimizable, dock is required and window cannot be modal		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock)){			if (MochaUI.Dock.dock &amp;&amp; options.type != ''modal'' &amp;&amp; options.type != ''modal2''){				options.minimizable = options.minimizable;			}		}		else {			options.minimizable = false;		}		// Maximizable, desktop is required		options.maximizable = MochaUI.Desktop.desktop &amp;&amp; options.maximizable &amp;&amp; options.type != ''modal'' &amp;&amp; options.type != ''modal2'';		if (this.options.type == ''modal2'') {			this.options.shadowBlur = 0;			this.options.shadowOffset = {''x'': 0, ''y'': 0};			this.options.useSpinner = false;			this.options.useCanvas = false;			this.options.footerHeight = 0;			this.options.headerHeight = 0;		}		// If window has no ID, give it one.		if (options.id == null){			options.id = ''win'' + (++MochaUI.Windows.windowIDCount);		}		this.windowEl = $(options.id);				this.newWindow();				// Return window object		return this;	},	saveValues: function(){			var coordinates = this.windowEl.getCoordinates();		this.options.x = coordinates.left.toInt();		this.options.y = coordinates.top.toInt();	},	/*	Internal Function: newWindow		Arguments: 		properties	*/	newWindow: function(properties){ // options is not doing anything		// Shorten object chain		var instances = MochaUI.Windows.instances;		var instanceID = instances.get(this.options.id);			// Here we check to see if there is already a class instance for this window		if (instanceID){			var currentInstance = instanceID;		}		// Check if window already exists and is not in progress of closing		if ( this.windowEl &amp;&amp; !this.isClosing ){			 // Restore if minimized			if (currentInstance.isMinimized){				MochaUI.Dock.restoreMinimized(this.windowEl);			}			// Expand and focus if collapsed			if (currentInstance.isCollapsed){				MochaUI.collapseToggle(this.windowEl);				setTimeout(MochaUI.focusWindow.pass(this.windowEl, this),10);			}			// Else focus			else {				var coordinates = document.getCoordinates();				if (this.windowEl.getStyle(''left'').toInt() &gt; coordinates.width || this.windowEl.getStyle(''top'').toInt() &gt; coordinates.height){					MochaUI.centerWindow(this.windowEl);					}				setTimeout(MochaUI.focusWindow.pass(this.windowEl, this),10);			}			return;		}		else {			instances.set(this.options.id, this);		}		this.isClosing = false;		this.fireEvent(''onBeforeBuild'');		// Create window div		MochaUI.Windows.indexLevel++;		this.windowEl = new Element(''div'', {			''class'': ''mocha'',			''id'':    this.options.id,			''styles'': {				''width'':   this.options.width,				''height'':  this.options.height,				''display'': ''block'',				''opacity'': 0,				''zIndex'': MochaUI.Windows.indexLevel += 2			}		});		this.windowEl.addClass(this.options.addClass);				if (this.options.type == ''modal2'') {			this.windowEl.addClass(''modal2'');		}		// Fix a mouseover issue with gauges in IE7		if ( Browser.Engine.trident &amp;&amp; this.options.shape == ''gauge'') {			this.windowEl.setStyle(''background'', ''url(../images/spacer.gif)'');		}		if ((this.options.type == ''modal'' || this.options.type == ''modal2'' ) &amp;&amp; Browser.Platform.mac &amp;&amp; Browser.Engine.gecko){			if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {				var ffversion = new Number(RegExp.$1);				if (ffversion &lt; 3) {					this.windowEl.setStyle(''position'', ''fixed'');				}			}		}		if (this.options.loadMethod == ''iframe'') {			this.options.padding = { top: 0, right: 0, bottom: 0, left: 0 };		}		// Insert sub elements inside windowEl		this.insertWindowElements();		// Set title		this.titleEl.set(''html'',this.options.title);		// Set scrollbars, always use ''hidden'' for iframe windows		this.contentWrapperEl.setStyles({			''overflow'': ''hidden'',			''background'': this.options.contentBgColor		});		this.contentEl.setStyles({			''padding-top'': this.options.padding.top,			''padding-bottom'': this.options.padding.bottom,			''padding-left'': this.options.padding.left,			''padding-right'': this.options.padding.right		});		if (this.options.shape == ''gauge''){			if (this.options.useCanvasControls){				this.canvasControlsEl.setStyle(''display'', ''none'');			}			else {				this.controlsEl.setStyle(''display'', ''none'');			}			this.windowEl.addEvent(''mouseover'', function(){				this.mouseover = true;				var showControls = function(){					if (this.mouseover != false){						if (this.options.useCanvasControls){							this.canvasControlsEl.setStyle(''display'', ''block'');						}						else {							this.controlsEl.setStyle(''display'', ''block'');						}						this.canvasHeaderEl.setStyle(''display'', ''block'');						this.titleEl.setStyle(''display'', ''block'');					}				};				showControls.delay(150, this);			}.bind(this));			this.windowEl.addEvent(''mouseleave'', function(){				this.mouseover = false;				if (this.options.useCanvasControls){					this.canvasControlsEl.setStyle(''display'', ''none'');				}				else {					this.controlsEl.setStyle(''display'', ''none'');				}				this.canvasHeaderEl.setStyle(''display'', ''none'');				this.titleEl.setStyle(''display'', ''none'');			}.bind(this));		}		// Inject window into DOM		this.windowEl.injectInside(this.options.container);		if (this.options.type != ''notification''){			this.setMochaControlsWidth();		}				// Add content to window.		MochaUI.updateContent({			''element'': this.windowEl,			''content'':  this.options.content,			''url'':      this.options.contentURL		});					// Add content to window toolbar.		if (this.options.toolbar == true){			MochaUI.updateContent({				''element'':       this.windowEl,				''childElement'':  this.toolbarEl,				''content'':       this.options.toolbarContent,				''loadMethod'':    ''xhr'',				''url'':           this.options.toolbarURL			});		}		// Add content to window toolbar.		if (this.options.toolbar2 == true){			MochaUI.updateContent({				''element'':       this.windowEl,				''childElement'':  this.toolbar2El,				''content'':       this.options.toolbar2Content,				''loadMethod'':    ''xhr'',				''url'':           this.options.toolbar2URL			});		}				this.drawWindow(this.windowEl);				// Attach events to the window		this.attachDraggable(this.windowEl);		this.attachResizable(this.windowEl);		this.setupEvents(this.windowEl);				if (this.options.resizable){			this.adjustHandles();		}		// Move window into position. If position not specified by user then center the window on the page.		if (this.options.container == document.body || this.options.container == MochaUI.Desktop.desktop){			var dimensions = window.getSize();		}		else {			var dimensions = $(this.options.container).getSize();		}		if (!this.options.y) {			var y = (dimensions.y * .5) - ((this.options.height + this.headerFooterShadow + this.windowEl.getStyle(''border-top'').toInt() + this.windowEl.getStyle(''border-bottom'').toInt()) * .5);		}		else {			var y = this.options.y - this.options.shadowBlur;		}		if (!this.options.x) {			var x =	(dimensions.x * .5) - (this.options.width * .5);		}		else {			var x = this.options.x - this.options.shadowBlur;		}		this.windowEl.setStyles({			''top'': y,			''left'': x		});		// Create opacityMorph		if (MochaUI.options.useEffects == true){			// IE cannot handle both element opacity and VML alpha at the same time.			if (Browser.Engine.trident){				this.drawWindow(this.windowEl, false);			}			this.opacityMorph = new Fx.Morph(this.windowEl, {				''duration'': 350,				onComplete: function(){					if (Browser.Engine.trident){						this.drawWindow(this.windowEl);					}				}.bind(this)			});		}		if (this.options.type == ''modal'' || this.options.type == ''modal2'') {			MochaUI.currentModal = this.windowEl;			if (Browser.Engine.trident4){				$(''modalFix'').setStyle(''display'', ''block'');			}			$(''modalOverlay'').setStyle(''display'', ''block'');			if (MochaUI.options.useEffects == false){				$(''modalOverlay'').setStyle(''opacity'', .6);				this.windowEl.setStyles({					''zIndex'': 11000,					''opacity'': 1				});			}			else {				MochaUI.Modal.modalOverlayCloseMorph.cancel();				MochaUI.Modal.modalOverlayOpenMorph.start({					''opacity'': .6				});				this.windowEl.setStyles({					''zIndex'': 11000				});				this.opacityMorph.start({					''opacity'': 1				});			}			$$(''.dockTab'').removeClass(''activeDockTab'');			$$(''.mocha'').removeClass(''isFocused'');			this.windowEl.addClass(''isFocused'');					}		else if (MochaUI.options.useEffects == false){			this.windowEl.setStyle(''opacity'', 1);			setTimeout(MochaUI.focusWindow.pass(this.windowEl, this), 10);		}		else {			this.opacityMorph.start({				''opacity'': 1			});			setTimeout(MochaUI.focusWindow.pass(this.windowEl, this), 10);		}		// This is a generic morph that can be reused later by functions like centerWindow()		this.morph = new Fx.Morph(this.windowEl, {			''duration'': 200		});		// Add check mark to menu if link exists in menu		// Need to make sure the check mark is not added to links not in menu			if ($(this.windowEl.id + ''LinkCheck'')){			this.check = new Element(''div'', {				''class'': ''check'',				''id'': this.options.id + ''_check''			}).inject(this.windowEl.id + ''LinkCheck'');		}				if (this.options.closeAfter != false){			MochaUI.closeWindow.delay(this.options.closeAfter, this, this.windowEl);		}		if (MochaUI.Dock &amp;&amp; $(MochaUI.options.dock) &amp;&amp; this.options.type == ''window'' ){			MochaUI.Dock.createDockTab(this.windowEl);		}	},	setupEvents: function(windowEl) {		// Set events		// Note: if a button does not exist, its due to properties passed to newWindow() stating otherwice		if (this.closeButtonEl){			this.closeButtonEl.addEvent(''click'', function(e) {				new Event(e).stop();				MochaUI.closeWindow(windowEl);			}.bind(this));		}		if (this.options.type == ''window''){			windowEl.addEvent(''mousedown'', function() {				MochaUI.focusWindow(windowEl);			}.bind(this));		}		if (this.minimizeButtonEl) {			this.minimizeButtonEl.addEvent(''click'', function(e) {				new Event(e).stop();				MochaUI.Dock.minimizeWindow(windowEl);		}.bind(this));		}		if (this.maximizeButtonEl) {			this.maximizeButtonEl.addEvent(''click'', function(e) {				new Event(e).stop(); 				if (this.isMaximized) {					MochaUI.Desktop.restoreWindow(windowEl);				} else {					MochaUI.Desktop.maximizeWindow(windowEl);				}			}.bind(this));		}		if (this.options.collapsible == true){			// Keep titlebar text from being selected on double click in Safari.			this.titleEl.addEvent(''selectstart'', function(e) {				e = new Event(e).stop();			}.bind(this));			// Keep titlebar text from being selected on double click in Opera.			this.titleBarEl.addEvent(''mousedown'', function(e) {				if (Browser.Engine.trident) {					this.titleEl.setCapture();				}			}.bind(this));			this.titleBarEl.addEvent(''mouseup'', function(e) {				if (Browser.Engine.trident) {					this.titleEl.releaseCapture();				}			}.bind(this));			this.titleBarEl.addEvent(''dblclick'', function(e) {				e = new Event(e).stop();				MochaUI.collapseToggle(this.windowEl);			}.bind(this));		}	},	/*	Internal Function: attachDraggable()		Make window draggable.	Arguments:		windowEl			*/	attachDraggable: function(windowEl){		if (!this.options.draggable) return;		this.windowDrag = new Drag.Move(windowEl, {			handle: this.titleBarEl,			container: this.options.restrict == true ? $(this.options.container) : false,			grid: this.options.draggableGrid,			limit: this.options.draggableLimit,			snap: this.options.draggableSnap,			onStart: function() {				if (this.options.type != ''modal'' &amp;&amp; this.options.type != ''modal2''){ 					MochaUI.focusWindow(windowEl);					$(''windowUnderlay'').setStyle(''display'',''block'');				}				if ( this.iframeEl )					this.iframeEl.setStyle(''visibility'', ''hidden'');			}.bind(this),			onComplete: function() {				if (this.options.type != ''modal'' &amp;&amp; this.options.type != ''modal2'') {					$(''windowUnderlay'').setStyle(''display'', ''none'');				}				if ( this.iframeEl ){					this.iframeEl.setStyle(''visibility'', ''visible'');				}				// Store new position in options.				this.saveValues();			}.bind(this)		});	},	/*	Internal Function: attachResizable		Make window resizable.	Arguments:		windowEl	*/	attachResizable: function(windowEl){		if (!this.options.resizable) return;		this.resizable1 = this.windowEl.makeResizable({			handle: [this.n, this.ne, this.nw],			limit: {				y: [					function(){						return this.windowEl.getStyle(''top'').toInt() + this.windowEl.getStyle(''height'').toInt() - this.options.resizeLimit.y[1];					}.bind(this),					function(){						return this.windowEl.getStyle(''top'').toInt() + this.windowEl.getStyle(''height'').toInt() - this.options.resizeLimit.y[0];					}.bind(this)				]			},			modifiers: {x: false, y: ''top''},			onStart: function(){				this.resizeOnStart();				this.coords = this.contentWrapperEl.getCoordinates();				this.y2 = this.coords.top.toInt() + this.contentWrapperEl.offsetHeight;			}.bind(this),			onDrag: function(){				this.coords = this.contentWrapperEl.getCoordinates();				this.contentWrapperEl.setStyle(''height'', this.y2 - this.coords.top.toInt());				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});		this.resizable2 = this.contentWrapperEl.makeResizable({			handle: [this.e, this.ne],			limit: {				x: [this.options.resizeLimit.x[0] - (this.options.shadowBlur * 2), this.options.resizeLimit.x[1] - (this.options.shadowBlur * 2) ]			},				modifiers: {x: ''width'', y: false},			onStart: function(){				this.resizeOnStart();			}.bind(this),			onDrag: function(){				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});		this.resizable3 = this.contentWrapperEl.makeResizable({			container: this.options.restrict == true ? $(this.options.container) : false,			handle: this.se,			limit: {				x: [this.options.resizeLimit.x[0] - (this.options.shadowBlur * 2), this.options.resizeLimit.x[1] - (this.options.shadowBlur * 2) ],				y: [this.options.resizeLimit.y[0] - this.headerFooterShadow, this.options.resizeLimit.y[1] - this.headerFooterShadow]			},			modifiers: {x: ''width'', y: ''height''},			onStart: function(){				this.resizeOnStart();			}.bind(this),			onDrag: function(){				this.drawWindow(windowEl);					this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)			});		this.resizable4 = this.contentWrapperEl.makeResizable({			handle: [this.s, this.sw],			limit: {				y: [this.options.resizeLimit.y[0] - this.headerFooterShadow, this.options.resizeLimit.y[1] - this.headerFooterShadow]			},			modifiers: {x: false, y: ''height''},			onStart: function(){				this.resizeOnStart();			}.bind(this),			onDrag: function(){				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});		this.resizable5 = this.windowEl.makeResizable({			handle: [this.w, this.sw, this.nw],			limit: {				x: [					function(){						return this.windowEl.getStyle(''left'').toInt() + this.windowEl.getStyle(''width'').toInt() - this.options.resizeLimit.x[1];					}.bind(this),				   function(){					   return this.windowEl.getStyle(''left'').toInt() + this.windowEl.getStyle(''width'').toInt() - this.options.resizeLimit.x[0];					}.bind(this)				]			},			modifiers: {x: ''left'', y: false},			onStart: function(){				this.resizeOnStart();				this.coords = this.contentWrapperEl.getCoordinates();				this.x2 = this.coords.left.toInt() + this.contentWrapperEl.offsetWidth;			}.bind(this),			onDrag: function(){				this.coords = this.contentWrapperEl.getCoordinates();				this.contentWrapperEl.setStyle(''width'', this.x2 - this.coords.left.toInt());				this.drawWindow(windowEl);				this.adjustHandles();			}.bind(this),			onComplete: function(){				this.resizeOnComplete();			}.bind(this)		});	},	resizeOnStart: function(){		$(''windowUnderlay'').setStyle(''display'',''block'');		if (this.iframeEl){			this.iframeEl.setStyle(''visibility'', ''hidden'');		}		},		resizeOnComplete: function(){		$(''windowUnderlay'').setStyle(''display'',''none'');		if (this.iframeEl){			this.iframeEl.setStyle(''visibility'', ''visible'');		}		this.fireEvent(''onResize'', this.windowEl);	},	adjustHandles: function(){		var shadowBlur = this.options.shadowBlur;		var shadowBlur2x = shadowBlur * 2;		var shadowOffset = this.options.shadowOffset;		var top = shadowBlur - shadowOffset.y - 1;		var right = shadowBlur + shadowOffset.x - 1;		var bottom = shadowBlur + shadowOffset.y - 1;		var left = shadowBlur - shadowOffset.x - 1;				var coordinates = this.windowEl.getCoordinates();		var width = coordinates.width - shadowBlur2x + 2;		var height = coordinates.height - shadowBlur2x + 2;		this.n.setStyles({			''top'': top,			''left'': left + 10,			''width'': width - 20		});		this.e.setStyles({			''top'': top + 10,			''right'': right,			''height'': height - 30		});		this.s.setStyles({			''bottom'': bottom,			''left'': left + 10,			''width'': width - 30		});		this.w.setStyles({			''top'': top + 10,			''left'': left,			''height'': height - 20		});		this.ne.setStyles({			''top'': top,			''right'': right			});		this.se.setStyles({			''bottom'': bottom,			''right'': right		});		this.sw.setStyles({			''bottom'': bottom,			''left'': left		});		this.nw.setStyles({			''top'': top,			''left'': left		});	},	detachResizable: function(){			this.resizable1.detach();			this.resizable2.detach();			this.resizable3.detach();			this.resizable4.detach();			this.resizable5.detach();			this.windowEl.getElements(''.handle'').setStyle(''display'', ''none'');	},	reattachResizable: function(){			this.resizable1.attach();			this.resizable2.attach();			this.resizable3.attach();			this.resizable4.attach();			this.resizable5.attach();			this.windowEl.getElements(''.handle'').setStyle(''display'', ''block'');	},	/*	Internal Function: insertWindowElements	Arguments:		windowEl	*/	insertWindowElements: function(){				var options = this.options;		var height = options.height;		var width = options.width;		var id = options.id;		var cache = {};		if (Browser.Engine.trident4){			cache.zIndexFixEl = new Element(''iframe'', {				''id'': id + ''_zIndexFix'',				''class'': ''zIndexFix'',				''scrolling'': ''no'',				''marginWidth'': 0,				''marginHeight'': 0,				''src'': ''''			}).inject(this.windowEl);		}		cache.overlayEl = new Element(''div'', {			''id'': id + ''_overlay'',			''class'': ''mochaOverlay''		}).inject(this.windowEl);		cache.titleBarEl = new Element(''div'', {			''id'': id + ''_titleBar'',			''class'': ''mochaTitlebar'',			''styles'': {				''cursor'': options.draggable ? ''move'' : ''default''			}		}).inject(cache.overlayEl, ''top'');		cache.titleEl = new Element(''h3'', {			''id'': id + ''_title'',			''class'': ''mochaTitle''		}).inject(cache.titleBarEl);		if (options.icon != false){			cache.titleBarEl.setStyles({				''padding-left'': 15,				''background'': ''url('' + options.icon + '') 5px 5px no-repeat''			});		}				cache.contentBorderEl = new Element(''div'', {			''id'': id + ''_contentBorder'',			''class'': ''mochaContentBorder''		}).inject(cache.overlayEl);		if (options.toolbar){			cache.toolbarWrapperEl = new Element(''div'', {				''id'': id + ''_toolbarWrapper'',				''class'': ''mochaToolbarWrapper''			}).inject(cache.contentBorderEl, options.toolbarPosition == ''bottom'' ? ''after'' : ''before'');			if (options.toolbarPosition == ''bottom'') {				cache.toolbarWrapperEl.addClass(''bottom'');			}			cache.toolbarEl = new Element(''div'', {				''id'': id + ''_toolbar'',				''class'': ''mochaToolbar''			}).inject(cache.toolbarWrapperEl);		}		if (options.toolbar2){			cache.toolbar2WrapperEl = new Element(''div'', {				''id'': id + ''_toolbar2Wrapper'',				''class'': ''mochaToolbarWrapper''			}).inject(cache.contentBorderEl, options.toolbar2Position == ''bottom'' ? ''after'' : ''before'');			if (options.toolbar2Position == ''bottom'') {				cache.toolbar2WrapperEl.addClass(''bottom'');			}			cache.toolbar2El = new Element(''div'', {				''id'': id + ''_toolbar2'',				''class'': ''mochaToolbar''			}).inject(cache.toolbar2WrapperEl);		}		cache.contentWrapperEl = new Element(''div'', {			''id'': id + ''_contentWrapper'',			''class'': ''mochaContentWrapper'',			''styles'': {				''width'': width + ''px'',				''height'': height + ''px''			}		}).inject(cache.contentBorderEl);				if (this.options.shape == ''gauge''){			cache.contentBorderEl.setStyle(''borderWidth'', 0);		}		cache.contentEl = new Element(''div'', {			''id'': id + ''_content'',			''class'': ''mochaContent''		}).inject(cache.contentWrapperEl);		if (this.options.useCanvas == true) {			cache.canvasEl = new Element(''canvas'', {				''id'': id + ''_canvas'',				''class'': ''mochaCanvas'',				''width'': 1,				''height'': 1			}).inject(this.windowEl);			if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(cache.canvasEl);				cache.canvasEl = this.windowEl.getElement(''.mochaCanvas'');			}		}		cache.controlsEl = new Element(''div'', {			''id'': id + ''_controls'',			''class'': ''mochaControls''		}).inject(cache.overlayEl, ''after'');		if (options.useCanvasControls == true){			cache.canvasControlsEl = new Element(''canvas'', {				''id'': id + ''_canvasControls'',				''class'': ''mochaCanvasControls'',				''width'': 14,				''height'': 14			}).inject(this.windowEl);			if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(cache.canvasControlsEl);				cache.canvasControlsEl = this.windowEl.getElement(''.mochaCanvasControls'');			}		}		if (options.closable){			cache.closeButtonEl = new Element(''div'', {				''id'': id + ''_closeButton'',				''class'': ''mochaCloseButton'',				''title'': ''Close''			}).inject(cache.controlsEl);			if (options.useCanvasControls == true){				cache.closeButtonEl.setStyle(''background'', ''none'');			}		}		if (options.maximizable){			cache.maximizeButtonEl = new Element(''div'', {				''id'': id + ''_maximizeButton'',				''class'': ''mochaMaximizeButton'',				''title'': ''Maximize''			}).inject(cache.controlsEl);			if (options.useCanvasControls == true){				cache.maximizeButtonEl.setStyle(''background'', ''none'');			}		}		if (options.minimizable){			cache.minimizeButtonEl = new Element(''div'', {				''id'': id + ''_minimizeButton'',				''class'': ''mochaMinimizeButton'',				''title'': ''Minimize''			}).inject(cache.controlsEl);			if (options.useCanvasControls == true){				cache.minimizeButtonEl.setStyle(''background'', ''none'');			}		}		if (options.useSpinner == true &amp;&amp; options.shape != ''gauge'' &amp;&amp; options.type != ''notification''){			cache.spinnerEl = new Element(''div'', {				''id'': id + ''_spinner'',				''class'': ''mochaSpinner'',				''width'': 16,				''height'': 16			}).inject(this.windowEl, ''bottom'');		}		if (this.options.shape == ''gauge''){			cache.canvasHeaderEl = new Element(''canvas'', {				''id'': id + ''_canvasHeader'',				''class'': ''mochaCanvasHeader'',				''width'': this.options.width,				''height'': 26			}).inject(this.windowEl, ''bottom'');					if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(cache.canvasHeaderEl);				cache.canvasHeaderEl = this.windowEl.getElement(''.mochaCanvasHeader'');			}		}		if ( Browser.Engine.trident ){			cache.overlayEl.setStyle(''zIndex'', 2);		}		// For Mac Firefox 2 to help reduce scrollbar bugs in that browser		if (Browser.Platform.mac &amp;&amp; Browser.Engine.gecko){			if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)){				var ffversion = new Number(RegExp.$1);				if (ffversion &lt; 3){					cache.overlayEl.setStyle(''overflow'', ''auto'');				}			}		}		if (options.resizable){			cache.n = new Element(''div'', {				''id'': id + ''_resizeHandle_n'',				''class'': ''handle'',				''styles'': {					''top'': 0,					''left'': 10,					''cursor'': ''n-resize''				}			}).inject(cache.overlayEl, ''after'');			cache.ne = new Element(''div'', {				''id'': id + ''_resizeHandle_ne'',				''class'': ''handle corner'',				''styles'': {					''top'': 0,					''right'': 0,					''cursor'': ''ne-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.e = new Element(''div'', {				''id'': id + ''_resizeHandle_e'',				''class'': ''handle'',						''styles'': {					''top'': 10,					''right'': 0,					''cursor'': ''e-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.se = new Element(''div'', {				''id'': id + ''_resizeHandle_se'',				''class'': ''handle cornerSE'',				''styles'': {					''bottom'': 0,					''right'': 0,					''cursor'': ''se-resize''				}			}).inject(cache.overlayEl, ''after'');			cache.s = new Element(''div'', {				''id'': id + ''_resizeHandle_s'',				''class'': ''handle'',				''styles'': {					''bottom'': 0,					''left'': 10,					''cursor'': ''s-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.sw = new Element(''div'', {				''id'': id + ''_resizeHandle_sw'',				''class'': ''handle corner'',				''styles'': {					''bottom'': 0,					''left'': 0,					''cursor'': ''sw-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.w = new Element(''div'', {				''id'': id + ''_resizeHandle_w'',				''class'': ''handle'',						''styles'': {					''top'': 10,					''left'': 0,					''cursor'': ''w-resize''				}			}).inject(cache.overlayEl, ''after'');						cache.nw = new Element(''div'', {				''id'': id + ''_resizeHandle_nw'',				''class'': ''handle corner'',						''styles'': {					''top'': 0,					''left'': 0,					''cursor'': ''nw-resize''				}			}).inject(cache.overlayEl, ''after'');		}		$extend(this, cache);			},	/*	Internal function: drawWindow		This is where we create the canvas GUI		Arguments: 		windowEl: the $(window)		shadows: (boolean) false will draw a window without shadows	*/		drawWindow: function(windowEl, shadows) {						if (this.isCollapsed){			this.drawWindowCollapsed(windowEl, shadows);			return;		}		var options = this.options;		var shadowBlur = options.shadowBlur;		var shadowBlur2x = shadowBlur * 2;		var shadowOffset = this.options.shadowOffset;		this.overlayEl.setStyles({			''width'': this.contentWrapperEl.offsetWidth		});		// Resize iframe when window is resized		if (this.iframeEl) {			this.iframeEl.setStyles({				''height'': this.contentWrapperEl.offsetHeight			});		}		var borderHeight = this.contentBorderEl.getStyle(''border-top'').toInt() + this.contentBorderEl.getStyle(''border-bottom'').toInt();		var toolbarHeight = this.toolbarWrapperEl ? this.toolbarWrapperEl.getStyle(''height'').toInt() + this.toolbarWrapperEl.getStyle(''border-top'').toInt() : 0;		var toolbar2Height = this.toolbar2WrapperEl ? this.toolbar2WrapperEl.getStyle(''height'').toInt() + this.toolbar2WrapperEl.getStyle(''border-top'').toInt() : 0;		this.headerFooterShadow = options.headerHeight + options.footerHeight + shadowBlur2x;		var height = this.contentWrapperEl.getStyle(''height'').toInt() + this.headerFooterShadow + toolbarHeight + toolbar2Height + borderHeight;		var width = this.contentWrapperEl.getStyle(''width'').toInt() + shadowBlur2x;		this.windowEl.setStyles({			''height'': height,			''width'': width		});		this.overlayEl.setStyles({			''height'': height,			''top'': shadowBlur - shadowOffset.y,			''left'': shadowBlur - shadowOffset.x		});				// Opera requires the canvas height and width be set this way when resizing:		if (this.options.useCanvas == true) {			this.canvasEl.height = height;			this.canvasEl.width = width;		}		// Part of the fix for IE6 select z-index bug		if (Browser.Engine.trident4){			this.zIndexFixEl.setStyles({				''width'': width,				''height'': height			})		}		this.titleBarEl.setStyles({			''width'': width - shadowBlur2x,			''height'': options.headerHeight		});		// Make sure loading icon is placed correctly.		if (options.useSpinner == true &amp;&amp; options.shape != ''gauge'' &amp;&amp; options.type != ''notification''){			this.spinnerEl.setStyles({				''left'': shadowBlur - shadowOffset.x + 3,				''bottom'': shadowBlur + shadowOffset.y +  4			});		}				if (this.options.useCanvas != false) {					// Draw Window			var ctx = this.canvasEl.getContext(''2d'');			ctx.clearRect(0, 0, width, height);						switch (options.shape) {				case ''box'':					this.drawBox(ctx, width, height, shadowBlur, shadowOffset, shadows);					break;				case ''gauge'':					this.drawGauge(ctx, width, height, shadowBlur, shadowOffset, shadows);					break;			}			if (options.resizable){ 				MochaUI.triangle(					ctx,					width - (shadowBlur + shadowOffset.x + 17),					height - (shadowBlur + shadowOffset.y + 18),					11,					11,					options.resizableColor,					1.0				);			}			// Invisible dummy object. The last element drawn is not rendered consistently while resizing in IE6 and IE7			if (Browser.Engine.trident){				MochaUI.triangle(ctx, 0, 0, 10, 10, options.resizableColor, 0);			}		}				if (options.type != ''notification'' &amp;&amp; options.useCanvasControls == true){			this.drawControls(width, height, shadows);		}	},	drawWindowCollapsed: function(windowEl, shadows) {				var options = this.options;		var shadowBlur = options.shadowBlur;		var shadowBlur2x = shadowBlur * 2;		var shadowOffset = options.shadowOffset;				var headerShadow = options.headerHeight + shadowBlur2x + 2;		var height = headerShadow;		var width = this.contentWrapperEl.getStyle(''width'').toInt() + shadowBlur2x;		this.windowEl.setStyle(''height'', height);				this.overlayEl.setStyles({			''height'': height,			''top'': shadowBlur - shadowOffset.y,			''left'': shadowBlur - shadowOffset.x		});				// Opera height and width must be set like this, when resizing:		this.canvasEl.height = height;		this.canvasEl.width = width;		// Part of the fix for IE6 select z-index bug		if (Browser.Engine.trident4){			this.zIndexFixEl.setStyles({				''width'': width,				''height'': height			});		}		// Set width		this.windowEl.setStyle(''width'', width);		this.overlayEl.setStyle(''width'', width);		this.titleBarEl.setStyles({			''width'': width - shadowBlur2x,			''height'': options.headerHeight		});			// Draw Window		if (this.options.useCanvas != false) {			var ctx = this.canvasEl.getContext(''2d'');			ctx.clearRect(0, 0, width, height);						this.drawBoxCollapsed(ctx, width, height, shadowBlur, shadowOffset, shadows);			if (options.useCanvasControls == true) {				this.drawControls(width, height, shadows);			}						// Invisible dummy object. The last element drawn is not rendered consistently while resizing in IE6 and IE7			if (Browser.Engine.trident){				MochaUI.triangle(ctx, 0, 0, 10, 10, options.resizableColor, 0);			}		}	},		drawControls : function(width, height, shadows){		var options = this.options;		var shadowBlur = options.shadowBlur;		var shadowOffset = options.shadowOffset;		var controlsOffset = options.controlsOffset;				// Make sure controls are placed correctly.		this.controlsEl.setStyles({			''right'': shadowBlur + shadowOffset.x + controlsOffset.right,			''top'': shadowBlur - shadowOffset.y + controlsOffset.top		});		this.canvasControlsEl.setStyles({			''right'': shadowBlur + shadowOffset.x + controlsOffset.right,			''top'': shadowBlur - shadowOffset.y + controlsOffset.top		});		// Calculate X position for controlbuttons		//var mochaControlsWidth = 52;		this.closebuttonX = options.closable ? this.mochaControlsWidth - 7 : this.mochaControlsWidth + 12;		this.maximizebuttonX = this.closebuttonX - (options.maximizable ? 19 : 0);		this.minimizebuttonX = this.maximizebuttonX - (options.minimizable ? 19 : 0);				var ctx2 = this.canvasControlsEl.getContext(''2d'');		ctx2.clearRect(0, 0, 100, 100);		if (this.options.closable){			this.closebutton(				ctx2,				this.closebuttonX,				7,				options.closeBgColor,				1.0,				options.closeColor,				1.0			);		}		if (this.options.maximizable){			this.maximizebutton(				ctx2,				this.maximizebuttonX,				7,				options.maximizeBgColor,				1.0,				options.maximizeColor,				1.0			);		}		if (this.options.minimizable){			this.minimizebutton(				ctx2,				this.minimizebuttonX,				7,				options.minimizeBgColor,				1.0,				options.minimizeColor,				1.0			);		}			},	drawBox: function(ctx, width, height, shadowBlur, shadowOffset, shadows){		var shadowBlur2x = shadowBlur * 2;		var cornerRadius = this.options.cornerRadius;		// This is the drop shadow. It is created onion style.		if ( shadows != false ) {				for (var x = 0; x &lt;= shadowBlur; x++){				MochaUI.roundedRect(					ctx,					shadowOffset.x + x,					shadowOffset.y + x,					width - (x * 2) - shadowOffset.x,					height - (x * 2) - shadowOffset.y,					cornerRadius + (shadowBlur - x),					[0, 0, 0],					x == shadowBlur ? .29 : .065 + (x * .01)				);			}		}		// Window body.		this.bodyRoundedRect(			ctx,                          // context			shadowBlur - shadowOffset.x,  // x			shadowBlur - shadowOffset.y,  // y			width - shadowBlur2x,         // width			height - shadowBlur2x,        // height			cornerRadius,                 // corner radius			this.options.bodyBgColor      // Footer color		);		if (this.options.type != ''notification''){		// Window header.			this.topRoundedRect(				ctx,                            // context				shadowBlur - shadowOffset.x,    // x				shadowBlur - shadowOffset.y,    // y				width - shadowBlur2x,           // width				this.options.headerHeight,      // height				cornerRadius,                   // corner radius				this.options.headerStartColor,  // Header gradient''s top color				this.options.headerStopColor    // Header gradient''s bottom color			);		}		},	drawBoxCollapsed: function(ctx, width, height, shadowBlur, shadowOffset, shadows){		var options = this.options;		var shadowBlur2x = shadowBlur * 2;		var cornerRadius = options.cornerRadius;			// This is the drop shadow. It is created onion style.		if ( shadows != false ){			for (var x = 0; x &lt;= shadowBlur; x++){				MochaUI.roundedRect(					ctx,					shadowOffset.x + x,					shadowOffset.y + x,					width - (x * 2) - shadowOffset.x,					height - (x * 2) - shadowOffset.y,					cornerRadius + (shadowBlur - x),					[0, 0, 0],					x == shadowBlur ? .3 : .06 + (x * .01)				);			}		}		// Window header		this.topRoundedRect2(			ctx,                          // context			shadowBlur - shadowOffset.x,  // x			shadowBlur - shadowOffset.y,  // y			width - shadowBlur2x,         // width			options.headerHeight + 2,     // height			cornerRadius,                 // corner radius			options.headerStartColor,     // Header gradient''s top color			options.headerStopColor       // Header gradient''s bottom color		);	},		drawGauge: function(ctx, width, height, shadowBlur, shadowOffset, shadows){		var options = this.options;		var radius = (width * .5) - (shadowBlur) + 16;		if (shadows != false) {				for (var x = 0; x &lt;= shadowBlur; x++){				MochaUI.circle(					ctx,					width * .5 + shadowOffset.x,					(height  + options.headerHeight) * .5 + shadowOffset.x,					(width *.5) - (x * 2) - shadowOffset.x,					[0, 0, 0],					x == shadowBlur ? .75 : .075 + (x * .04)				);			}		}		MochaUI.circle(			ctx,			width * .5  - shadowOffset.x,			(height + options.headerHeight) * .5  - shadowOffset.y,			(width *.5) - shadowBlur,			options.bodyBgColor,			1		);		// Draw gauge header		this.canvasHeaderEl.setStyles({			''top'': shadowBlur - shadowOffset.y,			''left'': shadowBlur - shadowOffset.x		});				var ctx = this.canvasHeaderEl.getContext(''2d'');		ctx.clearRect(0, 0, width, 100);		ctx.beginPath();		ctx.lineWidth = 24;		ctx.lineCap = ''round'';		ctx.moveTo(13, 13);		ctx.lineTo(width - (shadowBlur*2) - 13, 13);		ctx.strokeStyle = ''rgba(0, 0, 0, .65)'';		ctx.stroke();	},	bodyRoundedRect: function(ctx, x, y, width, height, radius, rgb){		ctx.fillStyle = ''rgba('' + rgb.join('','') + '', 100)'';		ctx.beginPath();		ctx.moveTo(x, y + radius);		ctx.lineTo(x, y + height - radius);		ctx.quadraticCurveTo(x, y + height, x + radius, y + height);		ctx.lineTo(x + width - radius, y + height);		ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill();	},	topRoundedRect: function(ctx, x, y, width, height, radius, headerStartColor, headerStopColor){		var lingrad = ctx.createLinearGradient(0, 0, 0, height);		lingrad.addColorStop(0, ''rgba('' + headerStartColor.join('','') + '', 1)'');		lingrad.addColorStop(1, ''rgba('' + headerStopColor.join('','') + '', 1)'');				ctx.fillStyle = lingrad;		ctx.beginPath();		ctx.moveTo(x, y);		ctx.lineTo(x, y + height);		ctx.lineTo(x + width, y + height);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill();		/*		ctx.beginPath();		ctx.strokeStyle = ''#000'';		ctx.lineWidth = 1;		ctx.moveTo(x, y + height + .5);		ctx.lineTo(x + width, y + height + .5);		ctx.stroke();		*/	},	topRoundedRect2: function(ctx, x, y, width, height, radius, headerStartColor, headerStopColor){		var lingrad = ctx.createLinearGradient(0, this.options.shadowBlur - 1, 0, height + this.options.shadowBlur + 3);		lingrad.addColorStop(0, ''rgba('' + headerStartColor.join('','') + '', 1)'');		lingrad.addColorStop(1, ''rgba('' + headerStopColor.join('','') + '', 1)'');		ctx.fillStyle = lingrad;		ctx.beginPath();		ctx.moveTo(x, y + radius);		ctx.lineTo(x, y + height - radius);		ctx.quadraticCurveTo(x, y + height, x + radius, y + height);		ctx.lineTo(x + width - radius, y + height);		ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);		ctx.lineTo(x + width, y + radius);		ctx.quadraticCurveTo(x + width, y, x + width - radius, y);		ctx.lineTo(x + radius, y);		ctx.quadraticCurveTo(x, y, x, y + radius);		ctx.fill();		},	maximizebutton: function(ctx, x, y, rgbBg, aBg, rgb, a){		// Circle		ctx.beginPath();		ctx.moveTo(x, y);		ctx.arc(x, y, 7, 0, Math.PI*2, true);		ctx.fillStyle = ''rgba('' + rgbBg.join('','') + '','' + aBg + '')'';		ctx.fill();		// X sign		ctx.strokeStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x, y - 4);		ctx.lineTo(x, y + 4);		ctx.stroke();		ctx.beginPath();		ctx.moveTo(x - 4, y);		ctx.lineTo(x + 4, y);		ctx.stroke();	},	closebutton: function(ctx, x, y, rgbBg, aBg, rgb, a){		// Circle		ctx.beginPath();		ctx.moveTo(x, y);		ctx.arc(x, y, 7, 0, Math.PI*2, true);		ctx.fillStyle = ''rgba('' + rgbBg.join('','') + '','' + aBg + '')'';		ctx.fill();		// Plus sign		ctx.strokeStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x - 3, y - 3);		ctx.lineTo(x + 3, y + 3);		ctx.stroke();		ctx.beginPath();		ctx.moveTo(x + 3, y - 3);		ctx.lineTo(x - 3, y + 3);		ctx.stroke();	},	minimizebutton: function(ctx, x, y, rgbBg, aBg, rgb, a){		// Circle		ctx.beginPath();		ctx.moveTo(x,y);		ctx.arc(x,y,7,0,Math.PI*2,true);		ctx.fillStyle = ''rgba('' + rgbBg.join('','') + '','' + aBg + '')'';		ctx.fill();		// Minus sign		ctx.strokeStyle = ''rgba('' + rgb.join('','') + '','' + a + '')'';		ctx.beginPath();		ctx.moveTo(x - 4, y);		ctx.lineTo(x + 4, y);		ctx.stroke();	},	/*	Function: hideSpinner		Hides the spinner.			*/		hideSpinner: function(spinner) {		if ($(spinner))	$(spinner).setStyle(''visibility'', ''hidden'');	},	/*	Function: showSpinner		Shows the spinner.		*/		showSpinner: function(spinner){		if (!this.options.useSpinner || this.options.shape == ''gauge'' || this.options.type == ''notification'') return;		$(spinner).setStyles({			''visibility'': ''visible''		});	},	setMochaControlsWidth: function(){		this.mochaControlsWidth = 0;		var options = this.options;		if (options.minimizable){			this.mochaControlsWidth += (this.minimizeButtonEl.getStyle(''margin-left'').toInt() + this.minimizeButtonEl.getStyle(''width'').toInt());		}		if (options.maximizable){			this.mochaControlsWidth += (this.maximizeButtonEl.getStyle(''margin-left'').toInt() + this.maximizeButtonEl.getStyle(''width'').toInt());		}		if (options.closable){			this.mochaControlsWidth += (this.closeButtonEl.getStyle(''margin-left'').toInt() + this.closeButtonEl.getStyle(''width'').toInt());		}		this.controlsEl.setStyle(''width'', this.mochaControlsWidth);		if (options.useCanvasControls == true){			this.canvasControlsEl.setProperty(''width'', this.mochaControlsWidth);		}	}});MochaUI.Window.implement(new Options, new Events);/*Script: Modal.js	Create modal dialog windows.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Requires:	Core.js, Window.jsSee Also:	&lt;Window&gt;		*/MochaUI.Modal = new Class({	Extends: MochaUI.Window,	Implements: [Events, Options],	initialize: function(options){		this.modalInitialize();				window.addEvent(''resize'', function(){			this.setModalSize();		}.bind(this));	},	modalInitialize: function(){		var modalOverlay = new Element(''div'', {			''id'': ''modalOverlay'',			''styles'': {				''height'': document.getCoordinates().height,				''opacity'': .6			}		}).inject(document.body);				modalOverlay.addEvent(''click'', function(e){			MochaUI.closeWindow(MochaUI.currentModal);		});				if (Browser.Engine.trident4){			var modalFix = new Element(''iframe'', {				''id'': ''modalFix'',				''scrolling'': ''no'',				''marginWidth'': 0,				''marginHeight'': 0,				''src'': '''',				''styles'': {					''height'': document.getCoordinates().height				}			}).inject(document.body);		}		this.modalOverlayOpenMorph = new Fx.Morph($(''modalOverlay''), {				''duration'': 150				});		this.modalOverlayCloseMorph = new Fx.Morph($(''modalOverlay''), {			''duration'': 150,			onComplete: function(){				$(''modalOverlay'').setStyle(''display'', ''none'');				if (Browser.Engine.trident4){					$(''modalFix'').setStyle(''display'', ''none'');				}			}.bind(this)		});	},	setModalSize: function(){		$(''modalOverlay'').setStyle(''height'', document.getCoordinates().height);		if (Browser.Engine.trident4){			$(''modalFix'').setStyle(''height'', document.getCoordinates().height);		}	}});MochaUI.Modal.implement(new Options, new Events);/*Script: Windows-from-html.js	Create windows from html markup in page.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Requires:	Core.js, Window.jsExample:	HTML markup.	(start code)&lt;div class="mocha" id="mywindow" style="width:300px;height:255px;top:50px;left:350px"&gt;	&lt;h3 class="mochaTitle"&gt;My Window&lt;/h3&gt;	&lt;p&gt;My Window Content&lt;/p&gt;&lt;/div&gt;		(end)See Also:	&lt;Window&gt;*/MochaUI.extend({	NewWindowsFromHTML: function(){		$$(''div.mocha'').each(function(el) {			// Get the window title and destroy that element, so it does not end up in window content			if ( Browser.Engine.presto || Browser.Engine.trident5 ){				el.setStyle(''display'',''block''); // Required by Opera, and probably IE7			}			var title = el.getElement(''h3.mochaTitle'');			var elDimensions = el.getStyles(''height'', ''width'');			var properties = {				id: el.getProperty(''id''),				height: elDimensions.height.toInt(),				width: elDimensions.width.toInt(),				x: el.getStyle(''left'').toInt(),				y: el.getStyle(''top'').toInt()			};			// If there is a title element, set title and destroy the element so it does not end up in window content			if ( title ) {				properties.title = title.innerHTML;				title.destroy();			}					// Get content and destroy the element			properties.content = el.innerHTML;			el.destroy();						// Create window			new MochaUI.Window(properties, true);		}.bind(this));	}});/*Script: Windows-from-json.js	Create one or more windows from JSON data. You can define all the same properties as you can for new MochaUI.Window(). Undefined properties are set to their defaults.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Syntax:	(start code)	MochaUI.newWindowsFromJSON(properties);	(end)Example:	(start code)	MochaUI.jsonWindows = function(){		var url = ''data/json-windows-data.js'';		var request = new Request.JSON({			url: url,			method: ''get'',			onComplete: function(properties) {				MochaUI.newWindowsFromJSON(properties.windows);			}		}).send();	}	(end)Note: 	Windows created from JSON are not compatible with the current cookie based version	of Save and Load Workspace.  	See Also:	&lt;Window&gt;*/MochaUI.extend({		newWindowsFromJSON: function(properties){		properties.each(function(properties) {				new MochaUI.Window(properties);		}.bind(this));	}});/*Script: Arrange-cascade.js	Cascade windows.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.	Requires:	Core.js, Window.jsSyntax:	(start code)	MochaUI.arrangeCascade();	(end)*/MochaUI.options.extend({	viewportTopOffset:  30,    // Use a negative number if neccessary to place first window where you want it	viewportLeftOffset: 20,	windowTopOffset:    50,    // Initial vertical spacing of each window	windowLeftOffset:   40     // Initial horizontal spacing of each window	});MochaUI.extend({   	arrangeCascade: function(){		// See how much space we have to work with		var coordinates = document.getCoordinates();				var openWindows = 0;		MochaUI.Windows.instances.each(function(instance){			if (!instance.isMinimized) openWindows ++; 		});				if ((this.options.windowTopOffset * (openWindows + 1)) &gt;= (coordinates.height - this.options.viewportTopOffset)) {			var topOffset = (coordinates.height - this.options.viewportTopOffset) / (openWindows + 1);		}		else {			var topOffset = this.options.windowTopOffset;		}				if ((this.options.windowLeftOffset * (openWindows + 1)) &gt;= (coordinates.width - this.options.viewportLeftOffset - 20)) {			var leftOffset = (coordinates.width - this.options.viewportLeftOffset - 20) / (openWindows + 1);		}		else {			var leftOffset = this.options.windowLeftOffset;		}		var x = this.options.viewportLeftOffset;		var y = this.options.viewportTopOffset;		$$(''div.mocha'').each(function(windowEl){			var currentWindowClass = MochaUI.Windows.instances.get(windowEl.id);			if (!currentWindowClass.isMinimized &amp;&amp; !currentWindowClass.isMaximized){				id = windowEl.id;				MochaUI.focusWindow(windowEl);				x += leftOffset;				y += topOffset;				if (MochaUI.options.useEffects == false){					windowEl.setStyles({						''top'': y,						''left'': x					});				}				else {					var cascadeMorph = new Fx.Morph(windowEl, {						''duration'': 550					});					cascadeMorph.start({						''top'': y,						''left'': x					});				}			}		}.bind(this));	}});/*Script: Arrange-tile.js	Cascade windows.Authors:	Harry Roberts and Greg HoustonLicense:	MIT-style license.	Requires:	Core.js, Window.jsSyntax:	(start code)	MochaUI.arrangeTile();	(end)*/ MochaUI.extend({	arrangeTile: function(){		var x = 10;		var y = 10;			var instances =  MochaUI.Windows.instances;		var windowsNum = 0;		instances.each(function(instance){			if (!instance.isMinimized &amp;&amp; !instance.isMaximized){				windowsNum++;			}		});		var cols = 3;		var rows = Math.ceil(windowsNum / cols);				var coordinates = document.getCoordinates();			var col_width = ((coordinates.width - this.options.viewportLeftOffset) / cols);		var col_height = ((coordinates.height - this.options.viewportTopOffset) / rows);				var row = 0;		var col = 0;				instances.each(function(instance){			if (!instance.isMinimized &amp;&amp; !instance.isMaximized){								var content = instance.contentWrapperEl;				var content_coords = content.getCoordinates();				var window_coords = instance.windowEl.getCoordinates();								// Calculate the amount of padding around the content window				var padding_top = content_coords.top - window_coords.top;				var padding_bottom = window_coords.height - content_coords.height - padding_top;				var padding_left = content_coords.left - window_coords.left;				var padding_right = window_coords.width - content_coords.width - padding_left;				/*				// This resizes the windows				if (instance.options.shape != ''gauge'' &amp;&amp; instance.options.resizable == true){					var width = (col_width - 3 - padding_left - padding_right);					var height = (col_height - 3 - padding_top - padding_bottom);					if (width &gt; instance.options.resizeLimit.x[0] &amp;&amp; width &lt; instance.options.resizeLimit.x[1]){						content.setStyle(''width'', width);					}					if (height &gt; instance.options.resizeLimit.y[0] &amp;&amp; height &lt; instance.options.resizeLimit.y[1]){						content.setStyle(''height'', height);					}				}*/				var left = (x + (col * col_width));				var top = (y + (row * col_height));				instance.windowEl.setStyles({					''left'': left,					''top'': top				});				instance.drawWindow(instance.windowEl);				MochaUI.focusWindow(instance.windowEl);				if (++col === cols) {					row++;					col = 0;				}			}		}.bind(this));	}});/*Script: Tabs.js	Functionality for window tabs.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.Requires:	Core.js, Window.js (for tabbed windows) or Layout.js (for tabbed panels)*/MochaUI.extend({	/*	Function: initializeTabs		Add click event to each list item that fires the selected function.	*/	initializeTabs: function(el){		$(el).getElements(''li'').each(function(listitem){			listitem.addEvent(''click'', function(e){				MochaUI.selected(this, el);			});		});	},	/*	Function: selected		Add "selected" class to current list item and remove it from sibling list items.	Syntax:		(start code)			selected(el, parent);		(end)Arguments:	el - the list item	parent - the ul	*/	selected: function(el, parent){		$(parent).getChildren().each(function(listitem){			listitem.removeClass(''selected'');		});		el.addClass(''selected'');	}});/*Script: Layout.js	Create web application layouts. Enables window maximize.	Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.	Requires:	Core.js, Window.js	*/MochaUI.Desktop = new Class({	Extends: MochaUI.Window,	Implements: [Events, Options],		options: {		// Naming options:		// If you change the IDs of the Mocha Desktop containers in your HTML, you need to change them here as well.		desktop:             ''desktop'',		desktopHeader:       ''desktopHeader'',		desktopFooter:       ''desktopFooter'',		desktopNavBar:       ''desktopNavbar'',		pageWrapper:         ''pageWrapper'',		page:                ''page'',		desktopFooter:       ''desktopFooterWrapper''	},		initialize: function(options){		this.setOptions(options);		this.desktop         = $(this.options.desktop);		this.desktopHeader   = $(this.options.desktopHeader);		this.desktopNavBar   = $(this.options.desktopNavBar);		this.pageWrapper     = $(this.options.pageWrapper);		this.page            = $(this.options.page);		this.desktopFooter   = $(this.options.desktopFooter);					// This is run on dock initialize so no need to do it twice.		if (!MochaUI.Dock.dockWrapper){			this.setDesktopSize();		}		this.menuInitialize();				// Resize desktop, page wrapper, modal overlay, and maximized windows when browser window is resized		window.addEvent(''resize'', function(e){			this.onBrowserResize();		}.bind(this));	},	menuInitialize: function(){		// Fix for dropdown menus in IE6		if (Browser.Engine.trident4 &amp;&amp; this.desktopNavBar){			this.desktopNavBar.getElements(''li'').each(function(element) {				element.addEvent(''mouseenter'', function(){					this.addClass(''ieHover'');				});				element.addEvent(''mouseleave'', function(){					this.removeClass(''ieHover'');				});			});		};	},	onBrowserResize: function(){		this.setDesktopSize();		// Resize maximized windows to fit new browser window size		setTimeout( function(){			MochaUI.Windows.instances.each(function(instance){				if (instance.isMaximized){					// Hide iframe while resize for better performance					if ( instance.iframeEl ){						instance.iframeEl.setStyle(''visibility'', ''hidden'');					}					var coordinates = document.getCoordinates();					var borderHeight = instance.contentBorderEl.getStyle(''border-top'').toInt() + instance.contentBorderEl.getStyle(''border-bottom'').toInt();					var toolbarHeight = instance.toolbarWrapperEl ? instance.toolbarWrapperEl.getStyle(''height'').toInt() + instance.toolbarWrapperEl.getStyle(''border-top'').toInt() : 0;					instance.contentWrapperEl.setStyles({						''height'': coordinates.height - instance.options.headerHeight - instance.options.footerHeight - borderHeight - toolbarHeight,						''width'': coordinates.width					});					instance.drawWindow($(instance.options.id));					if ( instance.iframeEl ){						instance.iframeEl.setStyles({							''height'': instance.contentWrapperEl.getStyle(''height'')						});						instance.iframeEl.setStyle(''visibility'', ''visible'');					}				}			}.bind(this));		}.bind(this), 100);	},	setDesktopSize: function(){		var windowDimensions = window.getCoordinates();		// var dock = $(MochaUI.options.dock);		var dockWrapper = $(MochaUI.options.dockWrapper);				// Setting the desktop height may only be needed by IE7		if (this.desktop){			this.desktop.setStyle(''height'', windowDimensions.height);		}		// Set pageWrapper height so the dock doesn''t cover the pageWrapper scrollbars.		if (this.pageWrapper) {			var dockOffset = MochaUI.dockVisible ? dockWrapper.offsetHeight : 0;			var pageWrapperHeight = windowDimensions.height;			pageWrapperHeight -= this.pageWrapper.getStyle(''border-top'').toInt();			pageWrapperHeight -= this.pageWrapper.getStyle(''border-bottom'').toInt();			if (this.desktopHeader){ pageWrapperHeight -= this.desktopHeader.offsetHeight; }			if (this.desktopFooter){ pageWrapperHeight -= this.desktopFooter.offsetHeight; }			pageWrapperHeight -= dockOffset;			if (pageWrapperHeight &lt; 0){				pageWrapperHeight = 0;			}			this.pageWrapper.setStyle(''height'', pageWrapperHeight);		}		if (MochaUI.Columns.instances.getKeys().length &gt; 0){ // Conditional is a fix for a bug in IE6 in the no toolbars demo.			MochaUI.Desktop.resizePanels();		}			},	resizePanels: function(){		if (Browser.Engine.trident4){			$$(''.pad'').setStyle(''display'', ''none'');			$$(''.rHeight'').setStyle(''height'', 1);		}		MochaUI.panelHeight();		MochaUI.rWidth();		if (Browser.Engine.trident4) $$(''.pad'').setStyle(''display'', ''block'');	},	/*		Function: maximizeWindow		Maximize a window.		Syntax:		(start code)		MochaUI.Desktop.maximizeWindow(windowEl);		(end)		*/		maximizeWindow: function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var options = currentInstance.options;		var windowDrag = currentInstance.windowDrag;		// If window no longer exists or is maximized, stop		if (windowEl != $(windowEl) || currentInstance.isMaximized ) return;				if (currentInstance.isCollapsed){			MochaUI.collapseToggle(windowEl);			}		currentInstance.isMaximized = true;				// If window is restricted to a container, it should not be draggable when maximized.		if (currentInstance.options.restrict){			windowDrag.detach();			if (options.resizable) {				currentInstance.detachResizable();			}			currentInstance.titleBarEl.setStyle(''cursor'', ''default'');		}			// If the window has a container that is not the desktop		// temporarily move the window to the desktop while it is minimized.		if (options.container != this.desktop){			this.desktop.grab(windowEl);			if (this.options.restrict){			windowDrag.container = this.desktop;			}		}				// Save original position		currentInstance.oldTop = windowEl.getStyle(''top'');		currentInstance.oldLeft = windowEl.getStyle(''left'');		var contentWrapperEl = currentInstance.contentWrapperEl;		// Save original dimensions		contentWrapperEl.oldWidth = contentWrapperEl.getStyle(''width'');		contentWrapperEl.oldHeight = contentWrapperEl.getStyle(''height'');		// Hide iframe		// Iframe should be hidden when minimizing, maximizing, and moving for performance and Flash issues		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');		}		var windowDimensions = document.getCoordinates();		var options = currentInstance.options;		var shadowBlur = options.shadowBlur;		var shadowOffset = options.shadowOffset;		var newHeight = windowDimensions.height - options.headerHeight - options.footerHeight;		newHeight -= currentInstance.contentBorderEl.getStyle(''border-top'').toInt();		newHeight -= currentInstance.contentBorderEl.getStyle(''border-bottom'').toInt();		newHeight -= (  currentInstance.toolbarWrapperEl ? currentInstance.toolbarWrapperEl.getStyle(''height'').toInt() + currentInstance.toolbarWrapperEl.getStyle(''border-top'').toInt() : 0);		if (MochaUI.options.useEffects == false){			windowEl.setStyles({				''top'': shadowOffset.y - shadowBlur,				''left'': shadowOffset.x - shadowBlur			});			currentInstance.contentWrapperEl.setStyles({				''height'': newHeight,				''width'':  windowDimensions.width			});			currentInstance.drawWindow(windowEl);			// Show iframe			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}			currentInstance.fireEvent(''onMaximize'', windowEl);		}		else {			// Todo: Initialize the variables for these morphs once in an initialize function and reuse them			var maximizeMorph = new Fx.Elements([contentWrapperEl, windowEl], { 				duration: 70,				onStart: function(windowEl){					currentInstance.maximizeAnimation = currentInstance.drawWindow.periodical(20, currentInstance, windowEl);				}.bind(this),				onComplete: function(windowEl){					$clear(currentInstance.maximizeAnimation);					currentInstance.drawWindow(windowEl);					// Show iframe					if ( currentInstance.iframeEl ) {						currentInstance.iframeEl.setStyle(''visibility'', ''visible'');					}					currentInstance.fireEvent(''onMaximize'', windowEl);					}.bind(this)			});			maximizeMorph.start({				''0'': {	''height'': newHeight,						''width'':  windowDimensions.width				},				''1'': {	''top'': shadowOffset.y - shadowBlur,						''left'': shadowOffset.x - shadowBlur 				}			});				}		currentInstance.maximizeButtonEl.setProperty(''title'', ''Restore'');		MochaUI.focusWindow(windowEl);	},	/*	Function: restoreWindow		Restore a maximized window.	Syntax:		(start code)		MochaUI.Desktop.restoreWindow(windowEl);		(end)		*/		restoreWindow: function(windowEl){				var currentInstance = MochaUI.Windows.instances.get(windowEl.id);				// Window exists and is maximized ?		if (windowEl != $(windowEl) || !currentInstance.isMaximized) return;					var options = currentInstance.options;		currentInstance.isMaximized = false;				if (options.restrict){			currentInstance.windowDrag.attach();			if (options.resizable){				currentInstance.reattachResizable();			}						currentInstance.titleBarEl.setStyle(''cursor'', ''move'');		}						// Hide iframe		// Iframe should be hidden when minimizing, maximizing, and moving for performance and Flash issues		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');		}				var contentWrapperEl = currentInstance.contentWrapperEl;				if (MochaUI.options.useEffects == false){			contentWrapperEl.setStyles({				''width'':  contentWrapperEl.oldWidth,				''height'': contentWrapperEl.oldHeight			});			currentInstance.drawWindow(windowEl);			windowEl.setStyles({				''top'': currentInstance.oldTop,				''left'': currentInstance.oldLeft			});			if ( currentInstance.iframeEl ) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}						if (options.container != this.desktop){				$(options.container).grab(windowEl);				if (options.restrict){					currentInstance.windowDrag.container = $(options.container);				}			}			currentInstance.fireEvent(''onRestore'', windowEl);		}		else {			var restoreMorph = new Fx.Elements([contentWrapperEl, windowEl], { 				''duration'':   150,				''onStart'': function(windowEl){					currentInstance.maximizeAnimation = currentInstance.drawWindow.periodical(20, currentInstance, windowEl);				}.bind(this),				''onComplete'': function(el){					$clear(currentInstance.maximizeAnimation);					currentInstance.drawWindow(windowEl);					if (currentInstance.iframeEl){						currentInstance.iframeEl.setStyle(''visibility'', ''visible'');					}					if (options.container != this.desktop){						$(options.container).grab(windowEl);						if (options.restrict){								currentInstance.windowDrag.container = $(options.container);						}					}					currentInstance.fireEvent(''onRestore'', windowEl);				}.bind(this)			});			restoreMorph.start({ 				''0'': {	''height'': contentWrapperEl.oldHeight,						''width'':  contentWrapperEl.oldWidth				},				''1'': {	''top'':  currentInstance.oldTop,						''left'': currentInstance.oldLeft				}			});		}		currentInstance.maximizeButtonEl.setProperty(''title'', ''Maximize'');	}});MochaUI.Desktop.implement(new Options, new Events);/*Class: Column	Create a column. Columns should be created from left to right.Syntax:(start code)	MochaUI.Panel();(end)Arguments:	optionsOptions:	id - The ID of the column. This must be set when creating the column.		placement - Can be ''right'', ''main'', or ''left''. There must be at least one column with the ''main'' option.	width - ''main'' column is fluid and should not be given a width.	resizeLimit - resizelimit of a ''right'' or ''left'' column.	onResize - (function) Fired when the column is resized.	onCollapse - (function) Fired when the column is collapsed.	onExpand - (function) Fired when the column is expanded.		*/MochaUI.Column = new Class({	Extends: MochaUI.Desktop,	Implements: [Events, Options],	options: {		id:            null, 		placement:     null, 		width:         null,		resizeLimit:   [],		// Events		onResize:     $empty, 		onCollapse:   $empty,		onExpand:     $empty	},	initialize: function(options){		this.setOptions(options);				$extend(this, {			timestamp: $time(),			isCollapsed: false,			oldWidth: 0		});		// Shorten object chain		var options = this.options;		var instances = MochaUI.Columns.instances;		var instanceID = instances.get(options.id);		// Check to see if there is already a class instance for this Column		if (instanceID){			var currentInstance = instanceID;		}		// Check if column already exists		if ( this.columnEl ){			return;		}		else {						instances.set(options.id, this);		}								this.columnEl = new Element(''div'', {			''id'': this.options.id,			''class'': ''column expanded'',			''styles'': {				''width'': options.placement == ''main'' ? null : options.width			}		}).inject($(MochaUI.Desktop.pageWrapper));		var parent = this.columnEl.getParent();		var columnHeight = parent.getStyle(''height'').toInt();		this.columnEl.setStyle(''height'', columnHeight);		if (options.placement == ''main''){			this.columnEl.addClass(''rWidth'');		}		this.spacerEl = new Element(''div'', {			''id'': this.options.id + ''_spacer'',			''class'': ''horizontalHandle''		}).inject(this.columnEl);		switch (this.options.placement) {			case ''left'':				this.handleEl = new Element(''div'', {					''id'': this.options.id + ''_handle'',					''class'': ''columnHandle''				}).inject(this.columnEl, ''after'');				this.handleIconEl = new Element(''div'', {					''id'': options.id + ''_handle_icon'',					''class'': ''handleIcon''				}).inject(this.handleEl);				addResizeRight(this.columnEl, options.resizeLimit[0], options.resizeLimit[1]);				break;			case ''right'':				this.handleEl = new Element(''div'', {					''id'': this.options.id + ''_handle'',					''class'': ''columnHandle''				}).inject(this.columnEl, ''before'');				this.handleIconEl = new Element(''div'', {					''id'': options.id + ''_handle_icon'',					''class'': ''handleIcon''				}).inject(this.handleEl);				addResizeLeft(this.columnEl, options.resizeLimit[0], options.resizeLimit[1]);				break;		}		if (this.handleEl != null){			this.handleEl.addEvent(''dblclick'', function(){				this.columnToggle();			}.bind(this));		}		MochaUI.rWidth();	},	columnToggle: function(){		var column= this.columnEl;				// Collapse		if (this.isCollapsed == false){			this.oldWidth = column.getStyle(''width'').toInt();			this.resize.detach();			this.handleEl.removeEvents(''dblclick'');			this.handleEl.addEvent(''click'', function(){				this.columnToggle();			}.bind(this));			this.handleEl.setStyle(''cursor'', ''pointer'').addClass(''detached'');						column.setStyle(''width'', 0);			this.isCollapsed = true;			column.addClass(''collapsed'');			column.removeClass(''expanded'');			MochaUI.rWidth();			this.fireEvent(''onCollapse'');		}		// Expand		else {			column.setStyle(''width'', this.oldWidth);			this.isCollapsed = false;			column.addClass(''expanded'');			column.removeClass(''collapsed'');			this.handleEl.removeEvents(''click'');			this.handleEl.addEvent(''dblclick'', function(){				this.columnToggle();			}.bind(this));			this.resize.attach();			this.handleEl.setStyle(''cursor'', ''e-resize'').addClass(''attached'');			MochaUI.rWidth();			this.fireEvent(''onExpand'');		}	}});MochaUI.Column.implement(new Options, new Events);/*Class: Panel	Create a panel. Panels go one on top of another in columns. Create your columns first and then add your panels. Panels should be created from top to bottom, left to right.Syntax:(start code)	MochaUI.Panel();(end)Arguments:	optionsOptions:	id - The ID of the panel. This must be set when creating the panel.	column - Where to inject the panel. This must be set when creating the panel.	loadMethod - (''html'', ''xhr'', or ''iframe'')	contentURL - Used if loadMethod is set to ''xhr'' or ''iframe''.	evalScripts - (boolean) An xhr loadMethod option. Defaults to true.	evalResponse - (boolean) An xhr loadMethod option. Defaults to false.	content - (string or element) An html loadMethod option.	tabsURL - (url)		footer - (boolean)	footerURL - (url)	height - (number) Height of content area.	addClass - (string) Add a class to the panel.	scrollbars - (boolean)	padding - (object)	panelBackground - CSS background property for the panel.	onBeforeBuild - (function) Fired before the panel is created.	onContentLoaded - (function) Fired after the panel''s conten is loaded.	onResize - (function) Fired when the panel is resized.	onCollapse - (function) Fired when the panel is collapsed.	onExpand - (function) Fired when the panel is expanded.		*/MochaUI.Panel = new Class({								Extends: MochaUI.Desktop,		Implements: [Events, Options],		options: {		id:               null,		title:            ''New Panel'',		column:           null,		loadMethod:       ''html'',		contentURL:       ''pages/lipsum.html'',			// xhr options		evalScripts:      true,		evalResponse:     false,			// html options		content:          ''Panel content'',				// Tabs		tabsURL:          null,		footer:           false,		footerURL:        ''pages/lipsum.html'',				// Style options:		height:           125,		addClass:         '''',		scrollbars:       true,		padding:   		  { top: 8, right: 8, bottom: 8, left: 8 },		// Color options:				panelBackground:   ''#f8f8f8'',		// Events		onBeforeBuild:     $empty,		onContentLoaded:   $empty,		onResize:          $empty,		onCollapse:        $empty,		onExpand:          $empty	},		initialize: function(options){		this.setOptions(options);		$extend(this, {			timestamp: $time(),			isCollapsed: false,			oldHeight: 0,			partner: null		});		// Shorten object chain		var instances = MochaUI.Panels.instances;		var instanceID = instances.get(this.options.id);			// Check to see if there is already a class instance for this panel		if (instanceID){			var currentInstance = instanceID;		}		// Check if panel already exists		if ( this.panelEl ){			return;		}		else {						instances.set(this.options.id, this);		}		this.fireEvent(''onBeforeBuild'');				if (this.options.loadMethod == ''iframe'') {			// Iframes have their own scrollbars and padding.			this.options.scrollbars = false;			this.options.padding = { top: 0, right: 0, bottom: 0, left: 0 };		}		this.showHandle = true;		if ($(this.options.column).getChildren().length == 0){			this.showHandle = false;		}		this.panelEl = new Element(''div'', {			''id'': this.options.id,			''class'': ''panel expanded'',			''styles'': {				''height'': this.options.height,				''background'': this.options.panelBackground			}		}).inject($(this.options.column));		this.panelEl.addClass(this.options.addClass);		this.contentEl = new Element(''div'', {			''id'': this.options.id + ''_pad'',			''class'': ''pad''		}).inject(this.panelEl);		if (this.options.footer){			this.footerWrapperEl = new Element(''div'', {				''id'': this.options.id + ''_panelFooterWrapper'',				''class'': ''panel-footerWrapper''			}).inject(this.panelEl);						this.footerEl = new Element(''div'', {				''id'': this.options.id + ''_panelFooter'',				''class'': ''panel-footer''			}).inject(this.footerWrapperEl);			MochaUI.updateContent({				''element'':       this.panelEl,				''childElement'':  this.footerEl,				''loadMethod'':    ''xhr'',				''url'':           this.options.footerURL			});					}		// This is in order to use the same variable as the windows do in updateContent.		// May rethink this.		this.contentWrapperEl = this.panelEl;				// Set scrollbars, always use ''hidden'' for iframe windows		this.contentWrapperEl.setStyles({			''overflow'': this.options.scrollbars &amp;&amp; !this.iframeEl ? ''auto'' : ''hidden''		});		this.contentEl.setStyles({			''padding-top'': this.options.padding.top,			''padding-bottom'': this.options.padding.bottom,			''padding-left'': this.options.padding.left,			''padding-right'': this.options.padding.right		});							this.panelHeaderEl = new Element(''div'', {			''id'': this.options.id + ''_header'',			''class'': ''panel-header''		}).inject(this.panelEl, ''before'');				this.panelHeaderToolboxEl = new Element(''div'', {			''id'': this.options.id + ''_headerToolbox'',			''class'': ''panel-header-toolbox''		}).inject(this.panelHeaderEl);		this.collapseToggleEl = new Element(''div'', {			''id'': this.options.id + ''_minmize'',			''class'': ''panel-collapse icon16'',			''styles'': {				''width'': 16,				''height'': 16			},			''title'': ''Collapse Panel''		}).inject(this.panelHeaderToolboxEl);		this.collapseToggleEl.addEvent(''click'', function(event){			var panel = this.panelEl;						// Get siblings and make sure they are not all collapsed.			var instances = MochaUI.Panels.instances;			var expandedSiblings = [];			panel.getAllPrevious(''.panel'').each(function(sibling){				var currentInstance = instances.get(sibling.id);				if (currentInstance.isCollapsed == false){					expandedSiblings.push(sibling);				}			});			panel.getAllNext(''.panel'').each(function(sibling){				var currentInstance = instances.get(sibling.id);				if (currentInstance.isCollapsed == false){					expandedSiblings.push(sibling);				}			});			if (this.isCollapsed == false) {				var currentColumn = MochaUI.Columns.instances.get($(this.options.column).id);				if (expandedSiblings.length == 0 &amp;&amp; currentColumn.options.placement != ''main''){					var currentColumn = MochaUI.Columns.instances.get($(this.options.column).id);					currentColumn.columnToggle();					return;				}				else if (expandedSiblings.length == 0 &amp;&amp; currentColumn.options.placement == ''main''){					return;				}				this.oldHeight = panel.getStyle(''height'').toInt();				if (this.oldHeight &lt; 10) this.oldHeight = 20;				panel.setStyle(''height'', 0);				this.isCollapsed = true;				panel.addClass(''collapsed'');				panel.removeClass(''expanded'');				MochaUI.panelHeight(this.options.column, panel, ''collapsing'');				this.collapseToggleEl.removeClass(''panel-collapsed'');				this.collapseToggleEl.addClass(''panel-expand'');				this.collapseToggleEl.setProperty(''title'',''Expand Panel'');				this.fireEvent(''onCollapse'');			}			else {				panel.setStyle(''height'', this.oldHeight);				this.isCollapsed = false;				panel.addClass(''expanded'');				panel.removeClass(''collapsed'');				MochaUI.panelHeight(this.options.column, panel, ''expanding'');				this.collapseToggleEl.removeClass(''panel-expand'');				this.collapseToggleEl.addClass(''panel-collapsed'');				this.collapseToggleEl.setProperty(''title'',''Collapse Panel'');				this.fireEvent(''onExpand'');			}		}		.bind(this));				this.panelHeaderContentEl = new Element(''div'', {			''id'': this.options.id + ''_headerContent'',			''class'': ''panel-headerContent''		}).inject(this.panelHeaderEl);		this.titleEl = new Element(''h2'', {			''id'': this.options.id + ''_title''		}).inject(this.panelHeaderContentEl);		if (this.options.tabsURL == null){			this.titleEl.set(''html'', this.options.title);		}				else {			this.panelHeaderContentEl.addClass(''tabs'');			MochaUI.updateContent({				''element'':      this.panelEl,				''childElement'': this.panelHeaderContentEl,				''loadMethod'':   ''xhr'',				''url'':          this.options.tabsURL			});		}		this.handleEl = new Element(''div'', {			''id'': this.options.id + ''_handle'',			''class'': ''horizontalHandle'',			''styles'': {				''display'': this.showHandle == true ? ''block'' : ''none''			}		}).inject(this.panelEl, ''after'');				this.handleIconEl = new Element(''div'', {			''id'': this.options.id + ''_handle_icon'',			''class'': ''handleIcon''		}).inject(this.handleEl);		addResizeBottom(this.options.id);		// Add content to panel.		MochaUI.updateContent({			''element'': this.panelEl,			''content'':  this.options.content,			''url'':      this.options.contentURL		});		MochaUI.panelHeight(this.options.column, this.panelEl, ''new'');	}});MochaUI.Panel.implement(new Options, new Events);MochaUI.extend({	// Panel Height		panelHeight: function(column, changing, action){		if (column != null) {			MochaUI.panelHeight2($(column), changing, action);		}		else {			$$(''.column'').each(function(column){				MochaUI.panelHeight2(column);			}.bind(this));		}	},	/*	actions can be new, collapsing or expanding.	*/	panelHeight2: function(column, changing, action){			var instances = MochaUI.Panels.instances;						var parent = column.getParent();			var columnHeight = parent.getStyle(''height'').toInt();			if (Browser.Engine.trident4){				columnHeight -= 1;			}			column.setStyle(''height'', columnHeight);			var panels = column.getChildren(''.panel'');            // All the panels in the column.			var panelsExpanded = column.getChildren(''.expanded''); // All the expanded panels in the column.			var panelsToResize = [];    // All the panels in the column whose height will be effected.			var tallestPanel;           // The panel with the greatest height			var tallestPanelHeight = 0;			this.panelsHeight = 0;		// Height of all the panels in the column				this.height = 0;            // Height of all the elements in the column				// Set panel resize partners			panels.each(function(panel){				currentInstance = instances.get(panel.id);				if (panel.hasClass(''expanded'') &amp;&amp; panel.getNext(''.expanded'')){					currentInstance.partner = panel.getNext(''.expanded'');					currentInstance.resize.attach();					currentInstance.handleEl.setStyles({						''display'': ''block'',						''cursor'': ''n-resize''					}).removeClass(''detached'');				}				else {					currentInstance.resize.detach();					currentInstance.handleEl.setStyle(''cursor'', null).addClass(''detached'');				}				if (panel.getNext(''.panel'') == null){					currentInstance.handleEl.setStyle(''display'', ''none'');				}			}.bind(this));						// Get the total height of all the column''s children			column.getChildren().each(function(el){				if (el.hasClass(''panel'')){					var currentInstance = instances.get(el.id);					// Are any next siblings Expanded?					areAnyNextSiblingsExpanded = function(el){						var test;						el.getAllNext(''.panel'').each(function(sibling){							var siblingInstance = instances.get(sibling.id);							if (siblingInstance.isCollapsed == false){								test = true;							}						}.bind(this));						return test;					}.bind(this);					// If a next sibling is expanding, are any of the nexts siblings of the expanding sibling Expanded?					areAnyExpandingNextSiblingsExpanded = function(){						var test;						changing.getAllNext(''.panel'').each(function(sibling){							var siblingInstance = instances.get(sibling.id);							if (siblingInstance.isCollapsed == false){								test = true;							}						}.bind(this));						return test;					}.bind(this);										// Resize panels that are not collapsed or "new"					if (action == ''new'' ) {						if (currentInstance.isCollapsed != true &amp;&amp; el != changing) {							panelsToResize.push(el);						}												// Height of panels that can be resized						if (currentInstance.isCollapsed != true &amp;&amp; el != changing) {							this.panelsHeight += el.offsetHeight.toInt();						}					}					// Resize panels that are not collapsed. If a panel is collapsing					// resize any expanded panels below. If there are no expanded panels					// below it, resize the expanded panels above it.					else if (action == null || action == ''collapsing'' ){						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || areAnyNextSiblingsExpanded(el) != true)){							panelsToResize.push(el);						}												// Height of panels that can be resized						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || areAnyNextSiblingsExpanded(el) != true)){							this.panelsHeight += el.offsetHeight.toInt();						}					}					// Resize panels that are not collapsed and are not expanding.					// Resize any expanded panels below the expanding panel. If there are no expanded panels					// below it, resize the first expanded panel above it.					else if (action == ''expanding''){						   						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || (areAnyExpandingNextSiblingsExpanded() != true &amp;&amp; el.getNext(''.expanded'') == changing)) &amp;&amp; el != changing){							panelsToResize.push(el);						}						// Height of panels that can be resized						if (currentInstance.isCollapsed != true &amp;&amp; (el.getAllNext(''.panel'').contains(changing) != true || (areAnyExpandingNextSiblingsExpanded() != true &amp;&amp; el.getNext(''.expanded'') == changing)) &amp;&amp; el != changing){							this.panelsHeight += el.offsetHeight.toInt();						}					}					if (el.style.height){						this.height += el.getStyle(''height'').toInt();					}				}				else {					this.height += el.offsetHeight.toInt();				}			}.bind(this));			// Get the remaining height			var remainingHeight = column.offsetHeight.toInt() - this.height;						this.height = 0;			// Get height of all the column''s children			column.getChildren().each(function(el){				this.height += el.offsetHeight.toInt();			}.bind(this));							var remainingHeight = column.offsetHeight.toInt() - this.height;			panelsToResize.each(function(panel){				var ratio = this.panelsHeight / panel.offsetHeight.toInt();				var newPanelHeight = panel.getStyle(''height'').toInt() + (remainingHeight / ratio);				if (newPanelHeight &lt; 1){					newPanelHeight = 0;				}				panel.setStyle(''height'', newPanelHeight);			}.bind(this));				// Make sure the remaining height is 0. If not add/subtract the			// remaining height to the tallest panel. This makes up for browser resizing,			// off ratios, and users trying to give panels too much height.						// Get height of all the column''s children			this.height = 0;			column.getChildren().each(function(el){				this.height += el.offsetHeight.toInt();				if (el.hasClass(''panel'') &amp;&amp; el.getStyle(''height'').toInt() &gt; tallestPanelHeight){					tallestPanel = el;					tallestPanelHeight = el.getStyle(''height'').toInt();				}			}.bind(this));			var remainingHeight = column.offsetHeight.toInt() - this.height;			if ((remainingHeight &gt; 0 || remainingHeight &lt; 0) &amp;&amp; tallestPanelHeight &gt; 0){				tallestPanel.setStyle(''height'', tallestPanel.getStyle(''height'').toInt() + remainingHeight );				if (tallestPanel.getStyle(''height'') &lt; 1){					tallestPanel.setStyle(''height'', 0 );				}			}			$$(''.columnHandle'').each(function(handle){				var handleHeight = parent.getStyle(''height'').toInt() - handle.getStyle(''border-top'').toInt() - handle.getStyle(''border-bottom'').toInt();				if (Browser.Engine.trident4){					handleHeight -= 1;				}				handle.setStyle(''height'', handleHeight);			});						panelsExpanded.each(function(panel){				MochaUI.resizeChildren(panel);			}.bind(this));	},	// May rename this resizeIframeEl()	resizeChildren: function(panel){		var instances = MochaUI.Panels.instances;		var currentInstance = instances.get(panel.id);		var contentWrapperEl = currentInstance.contentWrapperEl;		if (currentInstance.iframeEl){			currentInstance.iframeEl.setStyles({				''height'': contentWrapperEl.getStyle(''height''),				''width'': contentWrapperEl.offsetWidth - contentWrapperEl.getStyle(''border-left'').toInt() - contentWrapperEl.getStyle(''border-right'').toInt()			});		}	},	// Remaining Width	rWidth: function(){			$$(''.rWidth'').each(function(column){			var currentWidth = column.offsetWidth.toInt();			currentWidth -= column.getStyle(''border-left'').toInt();			currentWidth -= column.getStyle(''border-right'').toInt();			var parent = column.getParent();			this.width = 0;						// Get the total width of all the parent element''s children			parent.getChildren().each(function(el){				if (el.hasClass(''mocha'') != true){					this.width += el.offsetWidth.toInt();				}			}.bind(this));					// Add the remaining width to the current element			var remainingWidth = parent.offsetWidth.toInt() - this.width;			var newWidth =	currentWidth + remainingWidth;			if (newWidth &lt; 1) newWidth = 0;			column.setStyle(''width'', newWidth);			column.getChildren(''.panel'').each(function(panel){				panel.setStyle(''width'', newWidth - panel.getStyle(''border-left'').toInt() - panel.getStyle(''border-right'').toInt());				MochaUI.resizeChildren(panel);			}.bind(this));		});	}});function addResizeRight(element, min, max){	if (!$(element)) return;	element = $(element);	var instances = MochaUI.Columns.instances;	var currentInstance = instances.get(element.id);	var handle = element.getNext(''.columnHandle'');	handle.setStyle(''cursor'', ''e-resize'');		if (!min) min = 50;	if (!max) max = 250;	if (Browser.Engine.trident){		handle.addEvents({			''mousedown'': function(){				handle.setCapture();			},			''mouseup'': function(){				handle.releaseCapture();			}		});	}	currentInstance.resize = element.makeResizable({		handle: handle,		modifiers: {x: ''width'', y: false},		limit: { x: [min, max] },		onStart: function(){			element.getElements(''iframe'').setStyle(''visibility'',''hidden'');			element.getNext(''.column'').getElements(''iframe'').setStyle(''visibility'',''hidden'');		}.bind(this),		onDrag: function(){			MochaUI.rWidth();			if (Browser.Engine.trident4){				element.getChildren().each(function(el){					var width = $(element).getStyle(''width'').toInt();					width -= el.getStyle(''border-right'').toInt();					width -= el.getStyle(''border-left'').toInt();					width -= el.getStyle(''padding-right'').toInt();					width -= el.getStyle(''padding-left'').toInt();					el.setStyle(''width'', width);				}.bind(this));			}								}.bind(this),		onComplete: function(){			MochaUI.rWidth();			element.getElements(''iframe'').setStyle(''visibility'',''visible'');			element.getNext(''.column'').getElements(''iframe'').setStyle(''visibility'',''visible'');			currentInstance.fireEvent(''onResize'');		}.bind(this)	});	}function addResizeLeft(element, min, max){	if (!$(element)) return;	element = $(element);	var instances = MochaUI.Columns.instances;	var currentInstance = instances.get(element.id);	var handle = element.getPrevious(''.columnHandle'');	handle.setStyle(''cursor'', ''e-resize'');	var partner = element.getPrevious(''.column'');	if (!min) min = 50;	if (!max) max = 250;	if (Browser.Engine.trident){			handle.addEvents({			''mousedown'': function(){				handle.setCapture();			},				''mouseup'': function(){				handle.releaseCapture();			}		});	}	currentInstance.resize = element.makeResizable({		handle: handle,		modifiers: {x: ''width'' , y: false},		invert: true,		limit: { x: [min, max] },		onStart: function(){			$(element).getElements(''iframe'').setStyle(''visibility'',''hidden'');			partner.getElements(''iframe'').setStyle(''visibility'',''hidden'');		}.bind(this),		onDrag: function(){			MochaUI.rWidth();		}.bind(this),		onComplete: function(){			MochaUI.rWidth();			$(element).getElements(''iframe'').setStyle(''visibility'',''visible'');			partner.getElements(''iframe'').setStyle(''visibility'',''visible'');			currentInstance.fireEvent(''onResize'');		}.bind(this)	});}function addResizeBottom(element){	if (!$(element)) return;	var element = $(element);		var instances = MochaUI.Panels.instances;	var currentInstance = instances.get(element.id);	var handle = currentInstance.handleEl;	handle.setStyle(''cursor'', ''n-resize'');	partner = currentInstance.partner;	min = 0;	max = function(){		return element.getStyle(''height'').toInt() + partner.getStyle(''height'').toInt();	}.bind(this);		if (Browser.Engine.trident){			handle.addEvents({			''mousedown'': function(){				handle.setCapture();			},				''mouseup'': function(){				handle.releaseCapture();			}		});	}	currentInstance.resize = element.makeResizable({		handle: handle,		modifiers: {x: false, y: ''height''},		limit: { y: [min, max] },		invert: false,		onBeforeStart: function(){			partner = currentInstance.partner;			this.originalHeight = element.getStyle(''height'').toInt();			this.partnerOriginalHeight = partner.getStyle(''height'').toInt();		}.bind(this),		onStart: function(){			if (currentInstance.iframeEl) {				currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');			}			partner.getElements(''iframe'').setStyle(''visibility'',''hidden'');		}.bind(this),		onDrag: function(){			partnerHeight = partnerOriginalHeight + (this.originalHeight - element.getStyle(''height'').toInt());			partner.setStyle(''height'', partnerHeight);			MochaUI.resizeChildren(element, element.getStyle(''height'').toInt());			MochaUI.resizeChildren(partner, partnerHeight);		}.bind(this),		onComplete: function(){			partnerHeight = partnerOriginalHeight + (this.originalHeight - element.getStyle(''height'').toInt());			partner.setStyle(''height'', partnerHeight);			MochaUI.resizeChildren(element, element.getStyle(''height'').toInt());			MochaUI.resizeChildren(partner, partnerHeight);			if (currentInstance.iframeEl) {				currentInstance.iframeEl.setStyle(''visibility'', ''visible'');			}			partner.getElements(''iframe'').setStyle(''visibility'',''visible'');			currentInstance.fireEvent(''onResize'');		}.bind(this)	});}/*Script: Dock.js	Implements the dock/taskbar. Enables window minimize.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.Requires:	Core.js, Window.js, Layout.js	Todo:	- Make it so the dock requires no initial html markup.*/MochaUI.options.extend({		// Naming options:		// If you change the IDs of the Mocha Desktop containers in your HTML, you need to change them here as well.		dockWrapper: ''dockWrapper'',		dock:        ''dock''});// Used by Desktop.js before MochaUI.Dock is initialized.window.addEvent(''domready'', function(){		if ($(''dockWrapper'')) {		MochaUI.dockVisible = true;	}});MochaUI.extend({	/*	Function: minimizeAll		Minimize all windows that are minimizable.	*/		minimizeAll: function() {		$$(''div.mocha'').each(function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);			if (!currentInstance.isMinimized &amp;&amp; currentInstance.options.minimizable == true){				MochaUI.Dock.minimizeWindow(windowEl);			}		}.bind(this));	}});MochaUI.Dock = new Class({	Extends: MochaUI.Window,	Implements: [Events, Options],	options: {		useControls:          true,      // Toggles autohide and dock placement controls.		dockPosition:         ''top'',     // Position the dock starts in, top or bottom.		// Style options		dockTabColor:         [255, 255, 255],		trueButtonColor:      [70, 245, 70],     // Color for autohide on		enabledButtonColor:   [125, 208, 250], 		disabledButtonColor:  [170, 170, 170]	},	initialize: function(options){		// Stops if MochaUI.Desktop is not implemented		if (!MochaUI.Desktop) return;		this.setOptions(options);				this.dockWrapper   = $(MochaUI.options.dockWrapper);		this.dock          = $(MochaUI.options.dock);		this.autoHideEvent = null;				this.dockAutoHide  = false;  // True when dock autohide is set to on, false if set to off		if (!this.dockWrapper) return;		if (!this.options.useControls){			if($(''dockPlacement'')){				$(''dockPlacement'').setStyle(''cursor'', ''default'');			}			if($(''dockAutoHide'')){				$(''dockAutoHide'').setStyle(''cursor'', ''default'');			}		}		this.dockWrapper.setStyles({			''display'':  ''block'',			''position'': ''absolute'',			''top'':      null,			''bottom'':   MochaUI.Desktop.desktopFooter ? MochaUI.Desktop.desktopFooter.offsetHeight : 0,			''left'':     0		});				if (this.options.useControls){			this.initializeDockControls();		}		// Add check mark to menu if link exists in menu		if ($(''dockLinkCheck'')){			this.sidebarCheck = new Element(''div'', {				''class'': ''check'',				''id'': ''dock_check''			}).inject($(''dockLinkCheck''));		}		this.dockSortables = new Sortables(''#dockSort'', {			opacity: Browser.Engine.trident ? 1 : .5,			constrain: true,			clone: false,			revert: false		});		MochaUI.Desktop.setDesktopSize();	},	initializeDockControls: function(){				if (this.options.useControls){			// Insert canvas			var canvas = new Element(''canvas'', {				''id'':     ''dockCanvas'',				''width'':  ''15'',				''height'': ''18''			}).inject(this.dock);			// Dynamically initialize canvas using excanvas. This is only required by IE			if (Browser.Engine.trident &amp;&amp; MochaUI.ieSupport == ''excanvas''){				G_vmlCanvasManager.initElement(canvas);			}		}				var dockPlacement = $(''dockPlacement'');		var dockAutoHide = $(''dockAutoHide'');		// Position top or bottom selector		dockPlacement.setProperty(''title'',''Position Dock Top'');		// Attach event		dockPlacement.addEvent(''click'', function(){			this.moveDock();		}.bind(this));		// Auto Hide toggle switch		dockAutoHide.setProperty(''title'',''Turn Auto Hide On'');				// Attach event Auto Hide 		dockAutoHide.addEvent(''click'', function(event){			if ( this.dockWrapper.getProperty(''dockPosition'') == ''top'' )				return false;			var ctx = $(''dockCanvas'').getContext(''2d'');			this.dockAutoHide = !this.dockAutoHide;	// Toggle			if (this.dockAutoHide){				$(''dockAutoHide'').setProperty(''title'', ''Turn Auto Hide Off'');				//ctx.clearRect(0, 11, 100, 100);				MochaUI.circle(ctx, 5 , 14, 3, this.options.trueButtonColor, 1.0);				// Define event				this.autoHideEvent = function(event) {					if (!this.dockAutoHide)						return;					if (!MochaUI.Desktop.desktopFooter) {						var dockHotspotHeight = this.dockWrapper.offsetHeight;						if (dockHotspotHeight &lt; 25) dockHotspotHeight = 25;					}					else if (MochaUI.Desktop.desktopFooter) {						var dockHotspotHeight = this.dockWrapper.offsetHeight + MochaUI.Desktop.desktopFooter.offsetHeight;						if (dockHotspotHeight &lt; 25) dockHotspotHeight = 25;					}											if (!MochaUI.Desktop.desktopFooter &amp;&amp; event.client.y &gt; (document.getCoordinates().height - dockHotspotHeight)){						if (!MochaUI.dockVisible){							this.dockWrapper.setStyle(''display'', ''block'');							MochaUI.dockVisible = true;							MochaUI.Desktop.setDesktopSize();						}					}					else if (MochaUI.Desktop.desktopFooter &amp;&amp; event.client.y &gt; (document.getCoordinates().height - dockHotspotHeight)){						if (!MochaUI.dockVisible){							this.dockWrapper.setStyle(''display'', ''block'');							MochaUI.dockVisible = true;							MochaUI.Desktop.setDesktopSize();						}					}					else if (MochaUI.dockVisible){						this.dockWrapper.setStyle(''display'', ''none'');						MochaUI.dockVisible = false;						MochaUI.Desktop.setDesktopSize();											}				}.bind(this);				// Add event				document.addEvent(''mousemove'', this.autoHideEvent);			} else {				$(''dockAutoHide'').setProperty(''title'', ''Turn Auto Hide On'');				//ctx.clearRect(0, 11, 100, 100);				MochaUI.circle(ctx, 5 , 14, 3, this.options.enabledButtonColor, 1.0);				// Remove event				document.removeEvent(''mousemove'', this.autoHideEvent);			}		}.bind(this));		// Draw dock controls		var ctx = $(''dockCanvas'').getContext(''2d'');		ctx.clearRect(0, 0, 100, 100);		MochaUI.circle(ctx, 5 , 4, 3, this.options.enabledButtonColor, 1.0);		MochaUI.circle(ctx, 5 , 14, 3, this.options.enabledButtonColor, 1.0);				if (this.options.dockPosition == ''top''){			this.moveDock();		}	},	moveDock: function(){			var ctx = $(''dockCanvas'').getContext(''2d'');			// Move dock to top position			if (this.dockWrapper.getStyle(''position'') != ''relative''){				this.dockWrapper.setStyles({					''position'': ''relative'',					''bottom'':   null				});				this.dockWrapper.addClass(''top'');				MochaUI.Desktop.setDesktopSize();				this.dockWrapper.setProperty(''dockPosition'',''top'');				ctx.clearRect(0, 0, 100, 100);				MochaUI.circle(ctx, 5, 4, 3, this.options.enabledButtonColor, 1.0);				MochaUI.circle(ctx, 5, 14, 3, this.options.disabledButtonColor, 1.0);				$(''dockPlacement'').setProperty(''title'', ''Position Dock Bottom'');				$(''dockAutoHide'').setProperty(''title'', ''Auto Hide Disabled in Top Dock Position'');				this.dockAutoHide = false;			}			// Move dock to bottom position			else {				this.dockWrapper.setStyles({					''position'':      ''absolute'',					''bottom'':        MochaUI.Desktop.desktopFooter ? MochaUI.Desktop.desktopFooter.offsetHeight : 0				});				this.dockWrapper.removeClass(''top'');				MochaUI.Desktop.setDesktopSize();				this.dockWrapper.setProperty(''dockPosition'', ''bottom'');				ctx.clearRect(0, 0, 100, 100);				MochaUI.circle(ctx, 5, 4, 3, this.options.enabledButtonColor, 1.0);				MochaUI.circle(ctx, 5 , 14, 3, this.options.enabledButtonColor, 1.0);				$(''dockPlacement'').setProperty(''title'', ''Position Dock Top'');				$(''dockAutoHide'').setProperty(''title'', ''Turn Auto Hide On'');			}	},	createDockTab: function(windowEl){		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		var dockTab = new Element(''div'', {			''id'': currentInstance.options.id + ''_dockTab'',			''class'': ''dockTab'',			''title'': titleText		}).inject($(''dockClear''), ''before'');				dockTab.addEvent(''mousedown'', function(e){			new Event(e).stop();			this.timeDown = $time();		});				dockTab.addEvent(''mouseup'', function(e){			this.timeUp = $time();			if ((this.timeUp - this.timeDown) &lt; 275){				// If the visibility of the windows on the page are toggled off, toggle visibility on.				if (MochaUI.Windows.windowsVisible == false) {					MochaUI.toggleWindowVisibility();					if (currentInstance.isMinimized == true) {						MochaUI.Dock.restoreMinimized.delay(25, MochaUI.Dock, windowEl);					}					else {						MochaUI.focusWindow(windowEl);					}					return;				}				// If window is minimized, restore window.				if (currentInstance.isMinimized == true) {					MochaUI.Dock.restoreMinimized.delay(25, MochaUI.Dock, windowEl);				}				else{					// If window is not minimized and is focused, minimize window.					if (currentInstance.windowEl.hasClass(''isFocused'') &amp;&amp; currentInstance.options.minimizable == true){						MochaUI.Dock.minimizeWindow(windowEl)					}					// If window is not minimized and is not focused, focus window.						else{						MochaUI.focusWindow(windowEl);					}					// if the window is not minimized and is outside the viewport, center it in the viewport.					var coordinates = document.getCoordinates();					if (windowEl.getStyle(''left'').toInt() &gt; coordinates.width || windowEl.getStyle(''top'').toInt() &gt; coordinates.height){						MochaUI.centerWindow(windowEl);						}				}			}		});		this.dockSortables.addItems(dockTab);		var titleText = currentInstance.titleEl.innerHTML;		var dockTabText = new Element(''div'', {			''id'': currentInstance.options.id + ''_dockTabText'',			''class'': ''dockText''		}).set(''html'', titleText.substring(0,20) + (titleText.length &gt; 20 ? ''...'' : '''')).inject($(dockTab));		// If I implement this again, will need to also adjust the titleText truncate and the tab''s		// left padding.		if (currentInstance.options.icon != false){			// dockTabText.setStyle(''background'', ''url('' + currentInstance.options.icon + '') 4px 4px no-repeat'');		}				// Need to resize everything in case the dock wraps when a new tab is added		MochaUI.Desktop.setDesktopSize();	},	makeActiveTab: function(){		// getWindowWith HighestZindex is used in case the currently focused window		// is closed.				var windowEl = MochaUI.getWindowWithHighestZindex();		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);				$$(''div.dockTab'').removeClass(''activeDockTab'');		if (currentInstance.isMinimized != true) {						currentInstance.windowEl.addClass(''isFocused'');			var currentButton = $(currentInstance.options.id + ''_dockTab'');			if (currentButton != null) {				currentButton.addClass(''activeDockTab'');			}		}		else {			currentInstance.windowEl.removeClass(''isFocused'');		}		},		minimizeWindow: function(windowEl){		if (windowEl != $(windowEl)) return;				var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		currentInstance.isMinimized = true;		// Hide iframe		// Iframe should be hidden when minimizing, maximizing, and moving for performance and Flash issues		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''hidden'');		}		// Hide window and add to dock			currentInstance.contentBorderEl.setStyle(''visibility'', ''hidden'');		if(currentInstance.toolbarWrapperEl){					currentInstance.toolbarWrapperEl.setStyle(''visibility'', ''hidden'');		}		windowEl.setStyle(''visibility'', ''hidden'');		 // Fixes a scrollbar issue in Mac FF2		if (Browser.Platform.mac &amp;&amp; Browser.Engine.gecko){			if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {				var ffversion = new Number(RegExp.$1);				if (ffversion &lt; 3) {					currentInstance.contentWrapperEl.setStyle(''overflow'', ''hidden'');				}			}		}			MochaUI.Desktop.setDesktopSize();		// Have to use timeout because window gets focused when you click on the minimize button		setTimeout(function(){			windowEl.setStyle(''zIndex'', 1);			windowEl.removeClass(''isFocused'');			this.makeActiveTab();			}.bind(this),100);			currentInstance.fireEvent(''onMinimize'', windowEl);	},	restoreMinimized: function(windowEl) {		var currentInstance = MochaUI.Windows.instances.get(windowEl.id);		if (currentInstance.isMinimized == false) return;		if (MochaUI.Windows.windowsVisible == false){			MochaUI.toggleWindowVisibility();		}		MochaUI.Desktop.setDesktopSize();		 // Part of Mac FF2 scrollbar fix		if (currentInstance.options.scrollbars == true &amp;&amp; !currentInstance.iframeEl){ 			currentInstance.contentWrapperEl.setStyle(''overflow'', ''auto'');		}		if (currentInstance.isCollapsed) {			MochaUI.collapseToggle(windowEl);		}		windowEl.setStyle(''visibility'', ''visible'');		currentInstance.contentBorderEl.setStyle(''visibility'', ''visible'');		if(currentInstance.toolbarWrapperEl){			currentInstance.toolbarWrapperEl.setStyle(''visibility'', ''visible'');		}		// Show iframe		if ( currentInstance.iframeEl ) {			currentInstance.iframeEl.setStyle(''visibility'', ''visible'');		}		currentInstance.isMinimized = false;		MochaUI.focusWindow(windowEl);		currentInstance.fireEvent(''onRestore'', windowEl);	}});MochaUI.Dock.implement(new Options, new Events);/*Script: Workspaces.js	Save and load workspaces. The Workspaces emulate Adobe Illustrator functionality remembering what windows are open and where they are positioned. There will be two versions, a limited version that saves state to a cookie, and a fully functional version that saves state to a database.Copyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.Requires:	Core.js, Window.jsTo do:	- Move to Window*/MochaUI.extend({			   	/*		Function: saveWorkspace		Save the current workspace.		Syntax:	(start code)		MochaUI.saveWorkspace();	(end)		Notes:		This is experimental. This version saves the ID of each open window to a cookie, and reloads those windows using the functions in mocha-init.js. This requires that each window have a function in mocha-init.js used to open them. Functions must be named the windowID + "Window". So if your window is called mywindow, it needs a function called mywindowWindow in mocha-init.js.		*/	saveWorkspace: function(){		this.cookie = new Hash.Cookie(''mochaUIworkspaceCookie'', {duration: 3600});		this.cookie.empty();		MochaUI.Windows.instances.each(function(instance) {			instance.saveValues();			this.cookie.set(instance.options.id, {				''id'': instance.options.id,				''top'': instance.options.y,				''left'': instance.options.x			});		}.bind(this));		this.cookie.save();		new MochaUI.Window({			loadMethod: ''html'',			type: ''notification'',			addClass: ''notification'',			content: ''Workspace saved.'',			closeAfter: ''1400'',			width: 200,			height: 40,			y: 53,			padding:  { top: 10, right: 12, bottom: 10, left: 12 },			shadowBlur: 5,			bodyBgColor: [255, 255, 255]		});			},	windowUnload: function(){		if ($$(''div.mocha'').length == 0 &amp;&amp; this.myChain){			this.myChain.callChain();		}			},	loadWorkspace2: function(workspaceWindows){				workspaceWindows.each(function(instance){			windowFunction = eval(''MochaUI.'' + instance.id + ''Window'');			if (windowFunction){				eval(''MochaUI.'' + instance.id + ''Window();'');				$(instance.id).setStyles({					top: instance.top,					left: instance.left				});			}		}.bind(this));		this.loadingWorkspace = false;	},	/*	Function: loadWorkspace		Load the saved workspace.	Syntax:	(start code)		MochaUI.loadWorkspace();	(end)	*/	loadWorkspace: function(){		cookie = new Hash.Cookie(''mochaUIworkspaceCookie'', {duration: 3600});		workspaceWindows = cookie.load();		if(!cookie.getKeys().length){			new MochaUI.Window({				loadMethod: ''html'',				type: ''notification'',				addClass: ''notification'',				content: ''You have no saved workspace.'',				closeAfter: ''1400'',				width: 220,				height: 40,				y: 25,				padding:  { top: 10, right: 12, bottom: 10, left: 12 },				shadowBlur: 5,				bodyBgColor: [255, 255, 255]			});			return;		}		if ($$(''div.mocha'').length != 0){			this.loadingWorkspace = true;			this.myChain = new Chain();			this.myChain.chain(				function(){					$$(''div.mocha'').each(function(el) {						this.closeWindow(el);					}.bind(this));				}.bind(this),				function(){					this.loadWorkspace2(workspaceWindows);				}.bind(this)			);			this.myChain.callChain();		}		else {			this.loadWorkspace2(workspaceWindows);		}	}});'</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>css/</category><body package="Mootools-MochaUI">contentCss	^'/*CSS for Mocha UICopyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.License:	MIT-style license.Note:		If you are adding MochaUI to an existing site, this CSS file may not be necessary.*//* Reset */ul,ol,dl,li,dt,dd,h1,h2,h3,h4,h5,h6,pre,form,body,html,p,blockquote,fieldset,input,object,iframe { margin: 0; padding: 0; }a img,:link img,:visited img { border: none; }table { border-collapse: collapse; border-spacing: 0; }:focus { outline: none; }/* Structure */body {	text-align: left;	font-family: Arial, Helvetica, sans-serif;	font-size: 12px;	line-height: 18px;	color: #3f3f3f;	}/* Typography */	h2, h3, h4 {	margin: 0;	padding: 0 0 5px 0;	font-size: 12px;	font-weight: bold;}	h2 {	font-size: 14px;	font-weight: bold;}	#mochaPage h3 {	display: block;	font-size: 12px;	padding: 6px 0 6px 0;	margin: 0 0 8px 0;	border-bottom: 1px solid #bbb;}h4 {	font-size: 11px;}a {	color: #098ED1;	text-decoration: none;	cursor: pointer;}a:hover {	text-decoration: none;}p {	margin: 0;	padding: 0 0 9px 0;}.lite {	color: #999;}/* List Elements */ul {	list-style: outside;	margin: 0 0 9px 16px;	list-style-type: disc;}dt {	font-weight: bold;}dd {	padding: 0 0 9px 0;}/* Forms */textarea, input {	font-family: Arial, Helvetica, sans-serif;	font-size: 12px;		}	/* Code */pre {	background-color: #f6f6f6;	color: #060;	display: block;	font-family: ''Courier New'', Courier, monospace;	font-size: 11px;	max-height: 250px;	overflow: auto;	margin: 0 0 10px 0;	padding: 0 10px 10px 10px;	border: 1px solid #d1d7dc;	}/* Dividers */hr {	background-color: #ddd;	color: #ccc;	height: 1px;	border: 0px;}'</body><body package="Mootools-MochaUI">uiCss	^'/*CSS for Mocha UICopyright:	Copyright (c) 2007-2008 Greg Houston, &lt;http://greghoustondesign.com/&gt;.	License:	MIT-style license.*//* Layout---------------------------------------------------------------- */html, body {	overflow: hidden;}body {	margin: 0; /* Required */	background: #fff; /* #6989b3 url(splash.gif) center center no-repeat; */}#desktop {	visibility: hidden; 	position: relative;	min-width: 750px; /* Helps keep header content from wrapping */	height: 100%;	overflow: hidden;	cursor: default; /* Fix for issue in IE7. IE7 wants to use the I-bar text cursor */}#desktopHeader {	background: #f1f1f1;}#desktopTitlebarWrapper {	position: relative;		height: 45px;	overflow: hidden;	background: #333 url(bgheader.gif) repeat-x;}#desktopTitlebar {	padding: 7px 8px 6px 8px;	height: 32px;	background: url(logo.gif) no-repeat;	background-position: left 0;}#desktopTitlebar h1.applicationTitle {	display: none;	margin: 0;	padding: 0 5px 0 0;	font-size: 20px;	line-height: 25px;	font-weight: bold;	color: #fff;}#desktopTitlebar h2.tagline {	font-size: 12px;	color: #b2b2b2;	font-weight: bold;	padding: 5px 0 0 0;	text-align: center;}#desktopTitlebar h2.tagline .taglineEm {	color: #fff;	font-weight: bold;}#topNav {	font-family: Verdana, Arial, Helvetica, sans-serif;	font-size: 10px;	position: absolute;	right: 0;	top: 0;	color: #b2b2b2;	text-align: right;	padding: 13px 10px 0 0;}#topNav a {	color: #7DD0FA;	font-weight: normal;}#topNav a:hover {	text-decoration: none;}/* Toolboxes */.toolbox {	float: right;	padding: 6px 3px 0 5px;	height: 23px;	overflow: hidden;}div.toolbox.divider { /* Have to specify div here for IE6''s sake */	background: url(toolboxdivider.gif) left center no-repeat;	padding: 6px 3px 0 12px;}div.toolbox.divider2 { /* Have to specify div here for IE6''s sake */	background: url(toolboxdivider2.gif) left center no-repeat;	padding: 6px 4px 0 12px;}.toolbox img {	cursor: pointer;	margin-right: 6px;	padding: 0;	float: left;}.toolbox img.disabled {	cursor: default;}#spinnerWrapper {	width: 16px;	height: 16px;	background: url(spinnerplaceholder.gif) no-repeat;	margin-right: 5px;}#spinner {	visibility: hidden;	background: url(spinner.gif) no-repeat;	width: 16px;	height: 16px;}/* Navbar */#desktopNavbar {	background: #4C4C4C;	height: 30px;	margin: 0 0px;	}#desktopNavbar ul {		padding: 0;	margin: 0;	list-style: none;	font-size: 12px;}#desktopNavbar li {	float: left;}#desktopNavbar a {	display: block;}		#desktopNavbar ul li a {	padding: 6px 10px 6px 10px;		color: #b2b2b2;	font-weight: normal;}#desktopNavbar ul li a:hover {	color: #fff;}#desktopNavbar ul li a.arrow-right, #desktopNavbar ul li a:hover.arrow-right {	background-image: url(arrowright.gif);	background-repeat: no-repeat;	background-position: right 7px;	} #desktopNavbar li ul {	padding: 2px;	border: 1px solid #3f3f3f;	background: #fff url(bgdropdown.gif) repeat-y;	position: absolute;	width: 164px;	left: -999em;	z-index: 8000;}#desktopNavbar li:hover ul ul,#desktopNavbar li.ieHover ul ul,#desktopNavbar li:hover ul ul ul,#desktopNavbar li.ieHover ul ul ul {	left: -999em;}#desktopNavbar li ul ul { /* third-and-above-level lists */	margin: -22px 0 0 164px;}#desktopNavbar li ul li .check {	position: absolute;	top: 8px;	left: 6px;	width: 5px;	height: 5px;	background: #555;	overflow: hidden;	line-height: 1px;	font-size: 1px;}#desktopNavbar li ul li a {	position: relative;	padding: 1px 9px 1px 25px;	width: 130px;	color: #3f3f3f;	font-weight: normal;}#desktopNavbar li ul li a:hover {	background: #6C98D9;	color: #fff;}#desktopNavbar li ul li a:hover .check {	background: #fff;}#desktopNavbar li:hover ul,#desktopNavbar li.ieHover ul,#desktopNavbar li li.ieHover ul,#desktopNavbar li li li.ieHover ul,#desktopNavbar li li:hover ul,#desktopNavbar li li li:hover ul { /* lists nested under hovered list items */	left: auto;}#desktopNavbar li:hover { /* For IE7 */    position: static;}li.divider {	margin-top: 2px;	padding-top: 3px;		border-top: 1px solid #ebebeb;}	#pageWrapper {	position: relative;	overflow: hidden; /* This can be set to hidden or auto */	border-top: 1px solid #222;}/* Footer */#desktopFooterWrapper {	position: absolute;	left: 0;	bottom: 0;	width: 100%;	height: 30px;	overflow: hidden;	border-top: 1px solid #222;}#desktopFooter {	font-family: Verdana, Arial, Helvetica, sans-serif;	font-size: 10px;	height: 24px;	padding: 6px 8px 0 8px;	background: #333;	color: #b2b2b2;}#desktopFooter a {	color: #7DD0FA;	font-weight: normal;}#desktopFooter a:hover {	text-decoration: none;}/* Dock/Taskbar */#dockWrapper {	display: none;	width: 100%;	border-top: 1px solid #222;}#dockWrapper.top {	border: 0;}#dock {	position: relative;	padding: 3px 16px 0 6px;	bottom: 0;	left: 0;	background: #4c4c4c;	min-height: 27px;	height: auto;}*html #dock {	height: 30px; /* Used for IE 6.0 since it does not support min-height */}.dockTab {	float: left;	position: relative;		font-size: 11px;	width: 150px;	height: 24px;	margin: 0 3px 2px 0;	overflow: hidden;		cursor: pointer;	background: url(docktabs.gif) left top no-repeat;}.dockTab.activeDockTab {		background-position: left -24px;}.dockText {	position: absolute;	top: 0;	left: 0;	display: block;	font-weight: normal;	color: #bbb;		text-align: left;	padding: 4px 10px 2px 10px;	width: 130px;	height: 19px;	overflow: hidden;}.dockText:hover {	color: #fff;}.dockTab.activeDockTab .dockText {	color: #fff;}#dockCanvas {	position: absolute;	top: 5px;	right: 3px;	z-index: 2;}#dockPlacement {	position: absolute;	top: 4px;	right: 8px;	width: 10px;	height: 9px;	opacity: 0;	filter: alpha(opacity=0);	-moz-opacity: 0;	background: #f00; /* for troubleshooting */	cursor: pointer;	z-index: 3; /* for IE */	text-align: right;}#dockAutoHide {	position: absolute;	top: 14px;	right: 8px;	width: 10px;	height: 9px;	opacity: 0;	filter: alpha(opacity=0);	-moz-opacity: 0;	background: #f00; /* for troubleshooting */	cursor: pointer;	z-index: 3; /* for IE */}/* Panel Layout---------------------------------------------------------------- *//* Columns */.column {	position: relative;		float: left;	overflow: hidden;	background: #f1f1f1;}/* Panels */.panel {	position: relative;		overflow: auto;	border-bottom: 1px solid #b9b9b9;	border-top: 0;}.pad {	position: absolute;	top: 0;	left: 0;	padding: 8px;	overflow: hidden;}#mainPanel {	background: #fff; 	}	.panel-header {	position: relative;		background: #f1f1f1 url(bgpanelheader.gif) repeat-x;	height: 30px;	overflow: hidden;	border-bottom: 1px solid #d3d3d3;		}.panel-headerContent {	padding-top: 2px;}	.panel-headerContent.tabs {	background: url(tabs.gif) repeat-x;	background-position: left -68px;	}.panel-header h2 {	display: inline-block;	font-size: 12px;	margin: 0;	padding: 3px 8px 0 8px;	height: 22px;	overflow: hidden;	color: #3f3f3f;}.panel-header-toolbox {	float: right;	height: 26px;	margin: 2px 5px 5px 0;	text-align: right;}.panel-collapse {	background: url(collapseexpand.gif) left top no-repeat;}.panel-expand {	background: url(collapseexpand.gif) left -16px no-repeat;}.icon16 {	margin: 5px 0 0 2px;	cursor: pointer;}.panel-footerWrapper {	position: absolute;	left: 0;	bottom: 0;	width: 100%;	background: #f9f9f9;	height: 30px;	overflow: hidden;	border-top: 1px solid #b9b9b9;}.panel-footer {	padding: 1px 0 0 8px;	}.panel-footerContent {	margin-top: 5px;}/* Handles */	.horizontalHandle {	height: 4px;	line-height: 1px;	font-size: 1px;	overflow: hidden;	background: #d1d1d1 url(bghandlehorizontal.gif) repeat-x;}.horizontalHandle.detached .handleIcon {	background: transparent;	}.horizontalHandle .handleIcon {		margin: 0 auto;	height: 4px;	line-height: 1px;	font-size: 1px;	overflow: hidden;	background: url(handleiconhorizontal.gif) center center no-repeat;}.columnHandle {	min-height: 10px;		float: left;	width: 4px;	overflow: hidden;	background: #bbb url(handleicon.gif) center center no-repeat;	border: 1px solid #9a9a9a;	border-top: 0;}/* Viewport overlays---------------------------------------------------------------- */#modalOverlay {	display: none;	position: fixed;	top: 0;	left: 0;	width: 100%;	background: #000;	opacity: 0;	filter: alpha(opacity=0);	-moz-opacity: 0;	z-index: 10000;}* html 	#modalOverlay {	position: absolute;}/* Fix for IE6 select z-index issue */#modalFix {	display: none;	position: absolute;	top: 0;	left: 0;	width: 100%;	opacity: 0;	filter: alpha(opacity=0);	-moz-opacity: 0;	z-index: 9999;}/* Underlay */#windowUnderlay { 	position: fixed;	top: 0;	left: 0;	width: 100%;	background: #fff;	}* html #windowUnderlay { 	position: absolute;}/* Windows---------------------------------------------------------------- */.mocha {	position: absolute;	top: 0;	left: 0;	display: none;	overflow: hidden;	}.mocha.isFocused {	}	.mochaOverlay {	position: absolute;	top: 0;	left: 0;	}	.mochaTitlebar {	width: 100%;	overflow: hidden;	}.mochaTitlebar h3 {	font-size: 12px;	line-height: 15px;		font-weight: bold;	margin: 5px 10px 4px 12px;	padding: 0;	color: #888;}.mocha.isFocused .mochaTitlebar h3 {	color: #141414;}.mochaToolbarWrapper {	width: 100%; /* For IE */	position: relative;	height: 29px;	background: #f1f1f1;		overflow: hidden;	border-top: 1px solid #d9d9d9;}div.mochaToolbarWrapper.bottom {	border: 0;	border-bottom: 1px solid #d9d9d9;}.mochaToolbar {	width: 100%; /* For IE */	border-top: 1px solid #fff;}.mochaContentBorder {	border-top: 1px solid #dadada;	border-bottom: 1px solid #dadada;}.mochaContentWrapper { /* Has a fixed height and scrollbars if required. */	font-size: 12px;	overflow: auto;}	.mochaContent {	padding: 10px 12px;}.mocha .handle {	position: absolute;	background: #0f0;	width: 3px;	height: 3px;	z-index: 2;	opacity: .0;	filter: alpha(opacity=0);	-moz-opacity: .0;	overflow: hidden;	font-size: 1px; /* For IE6 */}.mocha .corner { /* Corner resize handles */	background: #f00;	width: 10px;	height: 10px;}.mocha .cornerSE { /* Bottom right resize handle */	background: #f00;	width: 20px;	height: 20px;}.mochaCanvasHeader {	position: absolute;	top: 0;	left: 0;	background: transparent;	z-index: -1;	display: none;	overflow: hidden;}.mochaControls {	position: absolute;	width: 52px;	top: 8px;	right: 8px;	height: 14px;	z-index: 4;	background: transparent;}.mochaCanvasControls {	position: absolute;		top: 8px;	right: 8px;		z-index: 3;	background: transparent;}/*	To use images for these buttons:	1. Set the useCanvasControls window option to false.	2. If you use a different button size you may need to reposition the controls.	   Modify the controlsOffset window option.			2. Add background images to each button.*/.mochaMinimizeButton, .mochaMaximizeButton, .mochaCloseButton {	float: right;	width: 14px;	height: 14px;	font-size: 1px;		cursor: pointer;	z-index: 4;	background: #f00;	margin-left: 5px;}.mochaMinimizeButton {	margin-left: 0;}.mochaMaximizeButton {}.mochaCloseButton {}.mochaSpinner{	visibility: hidden;		position: absolute;	bottom: 7px;	left: 6px;	width: 16px;	height: 16px;	background: url(spinner.gif) no-repeat;}.mochaIframe {	width: 100%;}  		/* Fix for IE6 select z-index issue */.zIndexFix {	display: block;	position: absolute;	top: 0;	left: 0;	z-index: -1;	filter: mask();	width: 100px;	height: 100px;	border: 1px solid transparent;}/* Modals */.modal2 {	border: 8px solid #fff;		}.modal2 .mochaContentBorder {	border-width: 0px;}	/* Window Themes */.mocha.no-canvas {	background: #f1f1f1;	border: 2px solid #555;	}.mocha.no-canvas .mochaTitlebar {	background: #f1f1f1;	}.mocha.transparent .mochaTitlebar h3 {	color: #fff;	display: none;}.mocha.notification .mochaTitlebar {	opacity: .0;	filter: alpha(opacity=0);	-moz-opacity: 0;}.mocha.notification .mochaContentBorder {	border-width: 0px;}.mocha.notification .mochaContentWrapper {	text-align: center;	font-size: 12px;	font-weight: bold;}/* Compontents---------------------------------------------------------------- *//* Toolbar Tabs */.toolbarTabs {		padding: 0 5px 2px 2px;	background: url(tabs.gif) repeat-x;	background-position: left -70px;	overflow: visible;}.tab-menu {		padding-top: 1px;	list-style:	none;	margin: 0;	padding: 0;	line-height: 16px;	font-size: 11px;}.tab-menu li {	display: block;	float: left;	margin:	0 0 5px 0;	cursor: pointer;		background: url(tabs.gif) repeat-x;	background-position: left -35px;}.tab-menu li.selected {	background: url(tabs.gif) repeat-x;	background-position: left 0;}.tab-menu li a {	display: block;	margin-left: 8px;	padding: 6px 16px 5px 10px;	text-align: center;	font-weight: normal;	color: #141414;	background: url(tabs.gif) repeat-x;	background-position: right -35px;	}.tab-menu li.selected a {	color: #141414;	font-weight: bold;		background: url(tabs.gif) repeat-x;	background-position: right 0;}/* Accordian */.accordianWrapper {	padding: 0;	background: #fff;}.accordianToggler {	margin: 0;	padding: 6px 10px;	background: #f1f1f1 url(bgpanelheader.gif) repeat-x;	font-size: 12px;	cursor: pointer;	border-top: 1px solid #e3e3e3;	}.topToggler {	border-top: none;}.accordianToggler.open {	background: #fff url(bgpanelheader.gif) repeat-x;	}.accordianContent {	padding: 10px 10px 5px 10px;}/* Sliders */.slider {	clear: both;	position: relative;	font-size: 12px;	font-weight: bold;	width: 200px;	margin-bottom: 15px;	}.sliderWrapper {	position: relative;	font-size: 1px;	line-height: 1px;	height: 9px;	width: 222px;}.sliderarea {	position: absolute;	top: 0;	left: 0;	height: 7px;	width: 220px;	font-size: 1px;	line-height: 1px;	background: url(sliderarea.gif) repeat-x;	border: 1px solid #a3a3a3;	border-bottom: 1px solid #ccc;	border-left: 1px solid #ccc;	margin: 0;	padding: 0;	overflow: hidden;} .sliderknob {	position: absolute;	top: 0;	left: 0;	height: 9px;	width: 19px;	font-size: 1px;	line-height: 1px;		background: url(knob.gif) no-repeat;	cursor: pointer;	overflow: hidden;	z-index: 2;}	.update {	padding-bottom: 5px;	}/* Folder Tree */.tree {	font-size: 11px;	line-height: 15px;	margin: 0;}.tree ul {	margin: 0;}.tree li {	list-style-type: none;	white-space: nowrap;}.tree li a {	color: #3f3f3f;	}	.tree li img {	vertical-align: middle;	width: 18px;	height: 18px;	overflow: hidden;}.tree li span {	padding-left: 2px;}/* View Toggle */.viewToggle {	position: absolute;	top: 4px;	right: 5px;	width: 60px;	text-align: right;}.viewToggle img.viewToggleList, .viewToggle img.viewToggleGrid {	width: 28px;	height: 22px;}	.viewToggle img.viewToggleList {	background: url(viewtoggle.gif) no-repeat;	background-position: 0 -66px;}.viewToggle img.viewToggleGrid {	background: url(viewtoggle.gif) no-repeat;	background-position: 0 0;}/* Miscellaneous---------------------------------------------------------------- *//* Window Builder Form Elements */	#desktop form {	margin: 0 0 0 0;	padding: 5px 0 0 0;}#newWindowForm {	width: 320px;}#desktop .input {	width: 225px;	padding: 1px 0 1px 3px;	border: 1px solid #bbb;	}#desktop textarea {	width: 225px;	height: 100px;	padding: 1px 0 1px 3px;	border: 1px solid #bbb;}#desktop .formLabel {	float: left;		text-align: right;	width: 80px;	margin: 0 0 5px 0;}#desktop .formField {	float: right;	margin: 0 0 5px 0;	padding: 0 0 0 0;	width: 230px;}#desktop form .number {	width: 40px;}/* Menus */.menu-right li {	list-style-type: none;	display: inline;		margin: 0 0 0 15px;}/* Notifications *//* Success, error &amp; notice boxes for messages and errors. */.error,.notice, .success    { padding: 8px; margin-bottom: 10px; border: 2px solid #ddd; }.error      { background: #FBE3E4; color: #D12F19; border-color: #FBC2C4; }.notice     { background: #FFF6BF; color: #817134; border-color: #FFD324; }.success    { background: #E6EFC2; color: #529214; border-color: #C6D880; }.error a    { color: #D12F19; }.notice a   { color: #817134; }.success a  { color: #529214; }/* Clears */.clear {	clear: both;	height: 0;}*html .clear {	height: 1%;	font-size: 1px;	line-height: 1px;	overflow: hidden;	visibility: hidden;}'</body></methods><methods><class-id>Mootools.MochaLibrary</class-id> <category>accessing</category><body package="Mootools-MochaUI">selectorsToInclude	^	#(contentCss uiCss excanvasCompressedJs),		(RuntimeSystem isRuntime			ifTrue:	[#(mochaJs)]			ifFalse:	[#(coreJs windowJs modalJs windowsFromHtmlJs windowsFromJsonJs arrangeCascadeJs arrangeTileJs tabsJs layoutJs dockJs workspacesJs)])</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAFileLibrary</name><environment>Seaside</environment><super>Seaside.WAAbstractFileLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Libraries</category><attributes><package>Seaside-Core</package></attributes></class></st-source>