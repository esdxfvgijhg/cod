<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-SecurityDbIdentifier: bear73DbTrace: 494128DbUsername: jkottDbVersion: 3.2.0 - pmm.5 2DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-Security' '') #(#any 'Seaside-Tests-Core' ''))Id: dedd6c10-5733-477e-8c5b-aaa014a80d2cNamespace: SeasidePackageName: Seaside-Tests-SecurityParcel: #('Seaside-Tests-Security')ParcelName: Seaside-Tests-SecurityPrerequisiteDescriptions: #(#(#name 'Seaside-Namespace') #(#name 'Seaside-Core' #componentType #package) #(#name 'Seaside-Security') #(#name 'Seaside-Tests-Core'))PrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Core' '') #('Seaside-Security' '') #('Seaside-Tests-Core' ''))PrintStringCache: (3.2.0 - pmm.5 2,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Security-pmm.5.mczVersion: 3.2.0 - pmm.5 2Date: 12:17:58 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:58 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAFrameOptionsFilterTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Security</category><attributes><package>Seaside-Tests-Security</package></attributes></class><class><name>WANoSniffFilterTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Security</category><attributes><package>Seaside-Tests-Security</package></attributes></class><class><name>WAStrictTransportSecurityFilterTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Security</category><attributes><package>Seaside-Tests-Security</package></attributes></class><class><name>WAFrameOptionsAllowFromFilterTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Security</category><attributes><package>Seaside-Tests-Security</package></attributes></class><class><name>WAEmptyHandler</name><environment>Seaside</environment><super>Seaside.WARequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Security</category><attributes><package>Seaside-Tests-Security</package></attributes></class><methods><class-id>Seaside.WAFrameOptionsFilterTest</class-id> <category>running</category><body package="Seaside-Tests-Security">setUp	super setUp.	filter := self newFilter</body></methods><methods><class-id>Seaside.WAFrameOptionsFilterTest</class-id> <category>testing</category><body package="Seaside-Tests-Security">testAddHeader	| context request response |	request := WARequest method: 'GET' uri: '/login.do?username=admin'.	response := WABufferedResponse new.		context := WARequestContext request: request response: response.	filter setNext: WAEmptyHandler new.	[  filter handleFiltered: context ]		on: WAResponseNotification		do: [ :notification | ].			self assert: response status = WAResponse statusOk.	self assert: (response headerAt: 'X-Frame-Options') = 'DENY'</body></methods><methods><class-id>Seaside.WAFrameOptionsFilterTest</class-id> <category>private</category><body package="Seaside-Tests-Security">newFilter	^ WAFrameOptionsFilter new</body></methods><methods><class-id>Seaside.WANoSniffFilterTest</class-id> <category>testing</category><body package="Seaside-Tests-Security">testAddHeader	| context request response |	request := WARequest method: 'GET' uri: '/login.do?username=admin'.	response := WABufferedResponse new.		context := WARequestContext request: request response: response.	filter setNext: WAEmptyHandler new.	[  filter handleFiltered: context ]		on: WAResponseNotification		do: [ :notification | ].			self assert: response status = WAResponse statusOk.	self assert: (response headerAt: 'X-Content-Type-Options') = 'nosniff'</body></methods><methods><class-id>Seaside.WANoSniffFilterTest</class-id> <category>private</category><body package="Seaside-Tests-Security">newFilter	^ WANoSniffFilter new</body></methods><methods><class-id>Seaside.WANoSniffFilterTest</class-id> <category>running</category><body package="Seaside-Tests-Security">setUp	super setUp.	filter := self newFilter</body></methods><methods><class-id>Seaside.WAStrictTransportSecurityFilterTest</class-id> <category>testing</category><body package="Seaside-Tests-Security">testAddHeaderWithSsl	| context request response |	request := WARequest method: 'GET' uri: '/login.do?username=admin'.	request url scheme: 'https'.	request headers at: 'host' put: 'bank.com'.	response := WABufferedResponse new.	self assert: request isSsl.		context := WARequestContext request: request response: response.	filter setNext: WAEmptyHandler new.	[  filter handleFiltered: context ]		on: WAResponseNotification		do: [ :notification | ].			self assert: response status = WAResponse statusOk.	self assert: (response headerAt: 'Strict-Transport-Security') = 'max-age=1209600'</body><body package="Seaside-Tests-Security">testRedirectNoSsl	| context request response |	request := WARequest method: 'GET' uri: '/login.do?username=admin'.	request headers at: 'host' put: 'bank.com'.	response := WABufferedResponse new.	self deny: request isSsl.		context := WARequestContext request: request response: response.	[  filter handleFiltered: context ]		on: WAResponseNotification		do: [ :notification | ].			self assert: response status = WAResponse statusFound.	self assert: ((response headerAt: 'Location') beginsWithSubCollection: 'https://')</body></methods><methods><class-id>Seaside.WAStrictTransportSecurityFilterTest</class-id> <category>private</category><body package="Seaside-Tests-Security">newFilter	^ WAStrictTransportSecurityFilter new</body></methods><methods><class-id>Seaside.WAStrictTransportSecurityFilterTest</class-id> <category>running</category><body package="Seaside-Tests-Security">setUp	super setUp.	filter := self newFilter</body></methods><methods><class-id>Seaside.WAFrameOptionsAllowFromFilterTest</class-id> <category>running</category><body package="Seaside-Tests-Security">setUp	super setUp.	filter := self newFilter</body></methods><methods><class-id>Seaside.WAFrameOptionsAllowFromFilterTest</class-id> <category>private</category><body package="Seaside-Tests-Security">newFilter	^ WAFrameOptionsAllowFromFilter new</body></methods><methods><class-id>Seaside.WAFrameOptionsAllowFromFilterTest</class-id> <category>testing</category><body package="Seaside-Tests-Security">testAddHeader	| context request response |	request := WARequest method: 'GET' uri: '/login.do?username=admin'.	response := WABufferedResponse new.		context := WARequestContext request: request response: response.	filter setNext: WAEmptyHandler new.	filter configuration at: #origin put: 'http://www.seaside.st'.	[  filter handleFiltered: context ]		on: WAResponseNotification		do: [ :notification | ].			self assert: response status = WAResponse statusOk.	self assert: (response headerAt: 'X-Frame-Options') = 'ALLOW FROM http://www.seaside.st'</body></methods><methods><class-id>Seaside.WAEmptyHandler</class-id> <category>processing</category><body package="Seaside-Tests-Security">handleFiltered: aRequestContext</body></methods><methods><class-id>Seaside.WAResponseTest</class-id> <category>*seaside-tests-security</category><body package="Seaside-Tests-Security">testNoSniff	self response noSniff.	self assert: (self response headerAt: 'X-Content-Type-Options') = 'nosniff'.	self assert: (self response headers size) = 1</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-security</category><body package="Seaside-Tests-Security">seasideTestsSecurity	^ self new		name: 'Seaside-Tests-Security';		addDependency: 'Seaside-Security';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>WAResponseTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>response </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-HTTP</category><attributes><package>Seaside-Tests-Core</package></attributes></class><class><name>WARequestHandler</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter parent configuration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class></st-source>