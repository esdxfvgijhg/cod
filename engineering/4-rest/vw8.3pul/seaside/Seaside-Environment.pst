<?xml version="1.0"?><st-source><!-- Name: Seaside-EnvironmentComment: The standard Seaside distribution environment. This package can depend on all other code packages as needed.DbIdentifier: bear73DbTrace: 492584DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.85 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Tools-Core' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-VisualWorks-Core' '') #(#any 'Seaside-Component' '') #(#any 'Seaside-RenderLoop' '') #(#any 'Seaside-Session' '') #(#any 'Seaside-Canvas' '') #(#any 'Seaside-Widgets' ''))Id: 629f69e2-b273-414d-b13d-551af2dec660Namespace: SeasidePackageName: Seaside-EnvironmentParcel: #('Seaside-Environment')ParcelName: Seaside-EnvironmentPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Tools-Core' '') #('Seaside-Core' '') #('Seaside-VisualWorks-Core' '') #('Seaside-Component' '') #('Seaside-RenderLoop' '') #('Seaside-Session' '') #('Seaside-Canvas' '') #('Seaside-Widgets' ''))PrintStringCache: (3.2.0 - JohanBrichau.85 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Environment-JohanBrichau.85.mczVersion: 3.2.0 - JohanBrichau.85 1Date: 3:31:27 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:27 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAHtmlResponseGenerator</name><environment>Seaside</environment><super>Seaside.WAResponseGenerator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Environment</category><attributes><package>Seaside-Environment</package></attributes></class><comment><class-id>Seaside.WAHtmlResponseGenerator</class-id><body>This subclass overrides certain generation methods to create prettier HTML responses, instead of plain text.</body></comment><class><name>WAHtmlErrorHandler</name><environment>Seaside</environment><super>Seaside.WAErrorHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Environment</category><attributes><package>Seaside-Environment</package></attributes></class><comment><class-id>Seaside.WAHtmlErrorHandler</class-id><body>This exception handler returns a simple HTML error message response for Warnings and Errors.It provides two methods to allow the easy creation of custom error responses:#titleForException:  - can be used to override the text displayed in the title#renderContentForException:  - can be used to fully customize the HTML output</body></comment><class><name>WAEnvironment</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>configuredApplicationDefaults configuredExceptionHandlingDefaults </class-inst-vars><imports></imports><category>Seaside-Environment</category><attributes><package>Seaside-Environment</package></attributes></class><class><name>WAHtmlFileHandlerListing</name><environment>Seaside</environment><super>Seaside.WAFileHandlerListing</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Environment</category><attributes><package>Seaside-Environment</package></attributes></class><class><name>WALegacyRedirectionHandler</name><environment>Seaside</environment><super>Seaside.WARequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Environment</category><attributes><package>Seaside-Environment</package></attributes></class><comment><class-id>Seaside.WALegacyRedirectionHandler</class-id><body>I provide compatibility with old Seaside URLs that have Seaside in the path (eg. '/seaside/examples/counter') by simply removing it.</body></comment><methods><class-id>Seaside.WAHtmlResponseGenerator</class-id> <category>generation</category><body package="Seaside-Environment">forbidden	self ifResetPossible: [		self response			forbidden;			contentType: WAMimeType textHtml ].	self response		nextPutAll: (WAHtmlCanvas builder			fullDocument: true;			rootBlock: [ :root | root title: 'Forbidden' ];			render: [ :html |				html heading: [					html text: 'Error: you are forbidden to access "'.					html render: self request url.					html text: '"' ] ])</body><body package="Seaside-Environment">notFound	self ifResetPossible: [		self response			notFound;			contentType: WAMimeType textHtml ].	self response		nextPutAll: (WAHtmlCanvas builder			fullDocument: true;			rootBlock: [ :root | root title: 'Not Found' ];			render: [ :html |				html heading: [					html text: 'Error: "'.					html render: self request url.					html text: '" not found' ] ])</body><body package="Seaside-Environment">pageExpired	self ifResetPossible: [		self response			doNotCache;			contentType: WAMimeType textHtml ].	self response		nextPutAll: (WAHtmlCanvas builder			fullDocument: true;			rootBlock: [ :root | root title: 'Page Expired' ];			render: [ :html | 				html heading: 'Page Expired'.				html paragraph: 'This page has expired. Please use the back-button to navigate to the last valid page.' ])</body><body package="Seaside-Environment">refreshAfter: aNumber location: aUrlOrString message: aString	self ifResetPossible: [	self response		contentType: WAMimeType textHtml;		refreshAfter: aNumber			location: aUrlOrString ].	self response		nextPutAll: (WAHtmlCanvas builder				fullDocument: true;				render: [ :html | 					html heading: aString.					html paragraph: [						html text: 'You are being redirected to '.						html anchor							url: aUrlOrString;							with: aUrlOrString greaseString ] ])</body></methods><methods><class-id>Seaside.WAHtmlErrorHandler</class-id> <category>actions</category><body package="Seaside-Environment">handleDefault: anException	self requestContext respond: [ :response |		response			internalError;			contentType: WAMimeType textHtml;			nextPutAll: (self rendererClass builder				fullDocument: true;				rootBlock: [ :root | self updateHtmlRoot: root forException: anException ];				render: [ :html | self renderContentForException: anException on: html ]) ]</body><body package="Seaside-Environment">renderContentForException: anException on: html	html heading level1; with: anException description.	html paragraph: 'Your request could not be completed. An exception occurred.'</body></methods><methods><class-id>Seaside.WAHtmlErrorHandler</class-id> <category>content</category><body package="Seaside-Environment">titleForException: anException	^ anException description</body><body package="Seaside-Environment">updateHtmlRoot: anHtmlRoot forException: anException	anHtmlRoot title: (self titleForException: anException)</body></methods><methods><class-id>Seaside.WAHtmlErrorHandler</class-id> <category>accessing</category><body package="Seaside-Environment">rendererClass	^ WAHtmlCanvas</body></methods><methods><class-id>Seaside.WAEnvironment class</class-id> <category>registration</category><body package="Seaside-Environment">registerDefaultComponents	WAPainter allSubclasses do: [ :each |		(each class includesSelector: #initialize)			ifTrue: [ each initialize ] ]</body><body package="Seaside-Environment">registerDefaultRequestHandlers	WAFileHandler default: WAFileHandler new.	WAFileHandler default 		preferenceAt: #fileHandlerListingClass		put: WAHtmlFileHandlerListing.	WAAdmin defaultDispatcher 		register: WAFileHandler default		at: 'files'.	WAAdmin defaultDispatcher 		register: WALegacyRedirectionHandler new		at: 'seaside'</body><body package="Seaside-Environment">reloadApplications	WAAdmin clearAll.	self registerDefaultRequestHandlers.	self registerDefaultComponents</body></methods><methods><class-id>Seaside.WAEnvironment class</class-id> <category>class initialization</category><body package="Seaside-Environment">configureApplicationDefaults	(configuredApplicationDefaults ifNil: [ false ]) ifFalse: [		WAAdmin applicationDefaults			at: #responseGenerator putClass: WAHtmlResponseGenerator.		configuredApplicationDefaults := true ]</body><body package="Seaside-Environment">configureApplicationExceptionHandlingDefaults	(configuredExceptionHandlingDefaults ifNil: [ false ]) ifFalse: [		WAAdmin applicationExceptionHandlingDefaults			at: #exceptionHandler put: WAWalkbackErrorHandler.		configuredExceptionHandlingDefaults := true ]</body><body package="Seaside-Environment">initialize	self configureApplicationDefaults.	self configureApplicationExceptionHandlingDefaults.	self registerDefaultRequestHandlers.	self registerDefaultComponents</body></methods><methods><class-id>Seaside.WAHtmlFileHandlerListing</class-id> <category>responding</category><body package="Seaside-Environment">responseForLibraries	| title contents |	title := 'Index of ', handler url pathStringUnencoded.	contents := WAHtmlCanvas builder		fullDocument: true;		rootBlock: [ :html | html title: title ];		render: [ :html |			html heading: title.			html unorderedList: [				handler libraries do: [ :each |					html listItem: [						html anchor							url: (each urlOf: '');							with: each name ] ] ] ].	context respond: [ :response |		response			contentType: WAMimeType textHtml;			nextPutAll: contents ]</body><body package="Seaside-Environment">responseForLibrary: aLibrary	| title contents |	title := 'Index of ', aLibrary name.	contents := WAHtmlCanvas builder		fullDocument: true;		rootBlock: [ :html | html title: title ];		render: [ :html |			html heading level: 1; with: title.			html table: [				html tableRow: [					html tableHeading: 'Name'.					html tableHeading: 'Size'.					html tableHeading: 'Description' ].				aLibrary fileSelectors do: [ :each |					html tableRow: [						html tableData: [							html anchor								url: (aLibrary urlOf: each);								with: (aLibrary asFilename: each) ].						html tableData: (aLibrary fileSizeOf: each).						html tableData: (aLibrary mimetypeOf: each) ] ] ] ].	context respond: [ :response |		response			contentType: WAMimeType textHtml;			nextPutAll: contents ]</body></methods><methods><class-id>Seaside.WALegacyRedirectionHandler</class-id> <category>handling</category><body package="Seaside-Environment">handleFiltered: aRequestContext	| url |	url := aRequestContext request url copy.	url path removeFirst.	aRequestContext respond: [ :response |		response			movedPermanently;			location: url ]</body></methods><methods><class-id>Seaside.WALegacyRedirectionHandler class</class-id> <category>accessing</category><body package="Seaside-Environment">description	^ 'Legacy redirection'</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-environment</category><body package="Seaside-Environment">seasideEnvironment	^ self new		name: 'Seaside-Environment';		description: 'The standard Seaside distribution environment. This package can depend on all other code packages as needed.';		addDependency: 'Seaside-Tools-Core';		addDependency: 'Seaside-Core';		addDependency: 'Seaside-Component';		addDependency: 'Seaside-RenderLoop';		addDependency: 'Seaside-Session';		addDependency: 'Seaside-Canvas';		addDependency: 'Seaside-Widgets'; "Users expect #inform:, etc. to be available"		url: #seasideUrl;		yourself</body></methods><initialize><class-id>Seaside.WAEnvironment</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAResponseGenerator</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARequestHandler</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter parent configuration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAFileHandlerListing</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handler context </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Libraries</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAErrorHandler</name><environment>Seaside</environment><super>Seaside.WAExceptionHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class></st-source>