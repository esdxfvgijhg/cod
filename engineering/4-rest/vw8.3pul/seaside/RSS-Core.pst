<?xml version="1.0"?><st-source><!-- Name: RSS-CoreComment: RSS integration for Seaside. Helps to create RSS 2.0 feeds.DbIdentifier: bear73DbTrace: 492607DbUsername: jkottDbVersion: 3.2.0 - pmm.71 1DevelopmentPrerequisites: #(#(#any 'RSS-Namespace' '') #(#any 'Seaside-Canvas' ''))Id: 335f4416-d838-4f67-b9da-71f5d480786aNamespace: RSSPackageName: RSS-CoreParcel: #('RSS-Core')ParcelName: RSS-CorePrerequisiteParcels: #(#('RSS-Namespace' '') #('Seaside-Canvas' ''))PrintStringCache: (3.2.0 - pmm.71 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/RSS-Core-pmm.71.mczVersion: 3.2.0 - pmm.71 1Date: 3:31:29 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:29 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RRCategoryTag</name><environment>RSS</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Tags</category><attributes><package>RSS-Core</package></attributes></class><class><name>RRSystemConfiguration</name><environment>RSS</environment><super>Seaside.WASystemConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core</category><attributes><package>RSS-Core</package></attributes></class><comment><class-id>RSS.RRSystemConfiguration</class-id><body>A RRSystemConfiguration is the configuration of an RRRssHandler.</body></comment><class><name>RRXmlStyleSheet</name><environment>RSS</environment><super>Seaside.WAContentElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core</category><attributes><package>RSS-Core</package></attributes></class><class><name>RRRssHandler</name><environment>RSS</environment><super>Seaside.WARequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core</category><attributes><package>RSS-Core</package></attributes></class><comment><class-id>RSS.RRRssHandler</class-id><body>A RRRssHandler is an entry point that generates an RSS feed.</body></comment><class><name>RRGuidTag</name><environment>RSS</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Tags</category><attributes><package>RSS-Core</package></attributes></class><class><name>RRCloudTag</name><environment>RSS</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Tags</category><attributes><package>RSS-Core</package></attributes></class><comment><class-id>RSS.RRCloudTag</class-id><body>&lt;cloud&gt; is an optional sub-element of &lt;channel&gt;.It specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1.Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds. A full explanation of this element and the rssCloud interface is here:http://www.rssboard.org/rsscloud-interface</body></comment><class><name>RRLanguageTag</name><environment>RSS</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Tags</category><attributes><package>RSS-Core</package></attributes></class><class><name>RRRssRenderCanvas</name><environment>RSS</environment><super>Seaside.WAXmlCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core</category><attributes><package>RSS-Core</package></attributes></class><comment><class-id>RSS.RRRssRenderCanvas</class-id><body>Structure of an RSS DocumentElements with a star (*) at the beginning are required. Elements with a plus sign (+) are an extension. Channel is automatically open.channel	*title	*link	*description	language	copyright	managingEditor	webMaster	publicationDate	lastBuildDate	category	generator	documentation	cloud	timeToLive	image		*url		*title		*link		width		height		description	rating	textInput		*title		*description		*name		*link	skipHours		hour	skipDays		day	item		*title		*link		*description		author		category		comments		enclosure		guid		publicationDate		source		+creator		+comment		+commentRss		+contentEncoded		Email Addresses:Email addresses must conform to RFC 2822Convert the email address to a valid form. Examples of valid email addresses:    * joesmith@example.com    * joesmith@example.com (Joe Smith)    * Joe Smith &lt;joesmith@example.com&gt;    * joesmith.nospamplease@nospam.example.comYou can either:- use correctly formatted strings- implement #displayString in your domain email address class so that it return a string in a valid form- implement #renderOn: in your domain  email address class so that it renders a string in a valid form- use RREmailAddressdate times:The value specified must meet the Date and Time specifications as defined by RFC822, with the exception that the year should be expressed as four digits.Here are examples of valid RFC822 date-times:Wed, 02 Oct 2002 08:00:00 ESTWed, 02 Oct 2002 13:00:00 GMTWed, 02 Oct 2002 15:00:00 +0200If you use Chronos you can useprintStringUsing: printStringUsing: ChronosPrintPolicy rfc822Else you can use RRRfc822DateTime.Here is an example of an invalid RFC822 date-time:2002-10-02T08:00:00-05:00</body></comment><class><name>RRSourceTag</name><environment>RSS</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Tags</category><attributes><package>RSS-Core</package></attributes></class><class><name>RRDayTag</name><environment>RSS</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Tags</category><attributes><package>RSS-Core</package></attributes></class><class><name>RREnclosureTag</name><environment>RSS</environment><super>Seaside.WATagBrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Tags</category><attributes><package>RSS-Core</package></attributes></class><class><name>RRRfc822DateTime</name><environment>RSS</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dateAndTime timeZoneString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core-Model</category><attributes><package>RSS-Core</package></attributes></class><comment><class-id>RSS.RRRfc822DateTime</class-id><body>A RRRfc822DateTime is holds on to a DateAndTime and a timezone string. It is mainly used for correct formatting of RSS items. You can also use your native classes if they support the correct printing methods.Instance Variables	dateAndTime:		&lt;DateAndTime&gt;	timezoneString:		&lt;String&gt;dateAndTime	- the date and timetimezoneString	- the time zone string</body></comment><class><name>RRRssRoot</name><environment>RSS</environment><super>Seaside.WAXmlRoot</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rssAttributes channelAttributes styles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core</category><attributes><package>RSS-Core</package></attributes></class><class><name>RRComponent</name><environment>RSS</environment><super>Seaside.WAPainter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSS-Core</category><attributes><package>RSS-Core</package></attributes></class><comment><class-id>RSS.RRComponent</class-id><body>Base class for all RSS rendering components. Note that RSS components are stripped down versions of Seaside components. Many things like #call: don't work. Also #initialRequest: and #updateRoot: only get sent to the root component.</body></comment><methods><class-id>RSS.RRCategoryTag</class-id> <category>accessing</category><body package="RSS-Core">tag	^ 'category'</body></methods><methods><class-id>RSS.RRCategoryTag</class-id> <category>attributes</category><body package="RSS-Core">category: aString	self attributeAt: 'category' put: aString</body></methods><methods><class-id>RSS.RRSystemConfiguration</class-id> <category>accessing</category><body package="RSS-Core">rootComponents	^ (RRComponent allSubclasses select: [ :each | each canBeRoot ])		asSortedCollection: [ :a :b | a name &lt;= b name ]</body></methods><methods><class-id>RSS.RRSystemConfiguration</class-id> <category>description</category><body package="RSS-Core">describeOn: config	(config classBinding: #rootComponentClass)		label: 'Root Component';		options: [ self rootComponents ].	config at: #documentClass putClass: WAXmlDocument</body></methods><methods><class-id>RSS.RRSystemConfiguration</class-id> <category>ancestry</category><body package="RSS-Core">parents	^ Array with: WARequestHandlingConfiguration instance</body></methods><methods><class-id>RSS.RRXmlStyleSheet</class-id> <category>attributes</category><body package="RSS-Core">beCss	self type: WAMimeType textCss</body><body package="RSS-Core">beXsl	self type: 'text/xsl' seasideMimeType</body><body package="RSS-Core">url: aString	self attributeAt: 'href' put: aString</body></methods><methods><class-id>RSS.RRXmlStyleSheet</class-id> <category>printing</category><body package="RSS-Core">encodeOn: aDocument	aDocument nextPutAll: '&lt;?xml-stylesheet'.		attributes encodeOn: aDocument.	self childrenDo: [ :each | each encodeOn: aDocument ].		aDocument nextPutAll: '?&gt;'</body></methods><methods><class-id>RSS.RRXmlStyleSheet</class-id> <category>accessing</category><body package="RSS-Core">tag	self shouldNotImplement</body></methods><methods><class-id>RSS.RRRssHandler</class-id> <category>private</category><body package="RSS-Core">createDocumentRoot	^ RRRssRoot new		charSet: self requestContext charSet;		yourself</body><body package="RSS-Core">createRootComponent	^ self rootComponentClass new</body><body package="RSS-Core">setContentType: aResponse	| contentType |	contentType := WAMimeType applicationRssXml		charset: self requestContext charSet;		yourself.	aResponse contentType: contentType</body></methods><methods><class-id>RSS.RRRssHandler</class-id> <category>configuration</category><body package="RSS-Core">defaultConfiguration	^ super defaultConfiguration		addParent: RRSystemConfiguration instance;		yourself</body><body package="RSS-Core">rootComponentClass	^ (self preferenceAt: #rootComponentClass) value</body><body package="RSS-Core">rootComponentClass: aClass	^ self preferenceAt: #rootComponentClass put: (GRPlatform current bindingOf: aClass)</body></methods><methods><class-id>RSS.RRRssHandler</class-id> <category>handling</category><body package="RSS-Core">handleFiltered: aRequestContext	| document context canvas root rootComponent |	self setContentType: aRequestContext response.	document := aRequestContext newDocument.	root := self createDocumentRoot.	context := WARenderContext new document: document.	[ canvas := RRRssRenderCanvas context: context.	rootComponent := self createRootComponent.		rootComponent updateRoot: root.	document open: root.	canvas render: rootComponent.			document close ] ensure: [ context destroy ].	aRequestContext respond</body></methods><methods><class-id>RSS.RRRssHandler</class-id> <category>initialization</category><body package="RSS-Core">initialize	super initialize.	self addFilter: WAExceptionFilter new</body></methods><methods><class-id>RSS.RRRssHandler class</class-id> <category>accessing</category><body package="RSS-Core">description	^ 'RSS feed'</body></methods><methods><class-id>RSS.RRGuidTag</class-id> <category>attributes</category><body package="RSS-Core">beNoPermaLink	self isPermaLink: false</body><body package="RSS-Core">bePermaLink	self isPermaLink: true</body><body package="RSS-Core">isPermaLink: aBoolean 	"the value really must be a string else seaside makes	isPermaLink='isPermaLink'"	self 		attributeAt: 'isPermaLink'		put: aBoolean greaseString</body></methods><methods><class-id>RSS.RRGuidTag</class-id> <category>accessing</category><body package="RSS-Core">tag	^ 'guid'</body></methods><methods><class-id>RSS.RRCloudTag</class-id> <category>attributes</category><body package="RSS-Core">domain: aString	^ self attributeAt: 'domain' put: aString</body><body package="RSS-Core">path: aString	^ self attributeAt: 'path' put: aString</body><body package="RSS-Core">port: anInteger	^ self attributeAt: 'port' put: anInteger</body><body package="RSS-Core">protocol: aString	^ self attributeAt: 'protocol' put: aString</body><body package="RSS-Core">registerProcedure: aString	^ self attributeAt: 'registerProcedure' put: aString</body></methods><methods><class-id>RSS.RRCloudTag</class-id> <category>accessing</category><body package="RSS-Core">tag	^ 'cloud'</body></methods><methods><class-id>RSS.RRCloudTag</class-id> <category>protocols</category><body package="RSS-Core">beSoap	self protocol: 'soap'</body><body package="RSS-Core">beXmlRpc	self protocol: 'xml-rpc'</body></methods><methods><class-id>RSS.RRCloudTag class</class-id> <category>accessing-tags</category><body package="RSS-Core">tags	"	self generateTags	"	^ #(		('item' item item: 'item')			('title' title title: 'channel-required')		('link' link link: 'channel-required')		('description' description description: 'channel-required')				('language' language language: 'channel-optional')		('copyright' copyright copyright: 'channel-optional')		('managingEditor' managingEditor managingEditor: 'channel-optional')		('webMaster' webMaster webMaster: 'channel-optional')		('pubDate' publicationDate publicationDate: 'channel-optional')		('lastBuildDate' lastBuildDate lastBuildDate: 'channel-optional')		('category' category category: 'channel-optional')		('generator' generator generator: 'channel-optional')		('docs' documentation documentation: 'channel-optional')		('cloud' cloud cloud: 'channel-optional')		('ttl' timeToLive timeToLive: 'channel-optional')		('image' image image: 'channel-optional')		('rating' rating rating: 'channel-optional')		('textInput' textInput textInput: 'channel-optional')		('skipHours' skipHours skipHours: 'channel-optional')		('skipDays' skipDays skipDays: 'channel-optional')				('comments' comments comments: 'item-optional')		('enclosure' enclosure enclosure: 'item-optional')		('guid' guid guid: 'item-optional')				('name' name name: 'image-required')				)</body></methods><methods><class-id>RSS.RRLanguageTag</class-id> <category>languages-generated</category><body package="RSS-Core">afrikaans	self with: 'af'</body><body package="RSS-Core">albanian	self with: 'sq'</body><body package="RSS-Core">basque	self with: 'eu'</body><body package="RSS-Core">belarusian	self with: 'be'</body><body package="RSS-Core">bulgarian	self with: 'bg'</body><body package="RSS-Core">catalan	self with: 'ca'</body><body package="RSS-Core">chineseSimplified	self with: 'zh-cn'</body><body package="RSS-Core">chineseTraditional	self with: 'zh-tw'</body><body package="RSS-Core">croatian	self with: 'hr'</body><body package="RSS-Core">czech	self with: 'cs'</body><body package="RSS-Core">danish	self with: 'da'</body><body package="RSS-Core">dutch	self with: 'nl'</body><body package="RSS-Core">dutchBelgium	self with: 'nl-be'</body><body package="RSS-Core">dutchNetherlands	self with: 'nl-nl'</body><body package="RSS-Core">english	self with: 'en'</body><body package="RSS-Core">englishAustralia	self with: 'en-au'</body><body package="RSS-Core">englishBelize	self with: 'en-bz'</body><body package="RSS-Core">englishCanada	self with: 'en-ca'</body><body package="RSS-Core">englishIreland	self with: 'en-ie'</body><body package="RSS-Core">englishJamaica	self with: 'en-jm'</body><body package="RSS-Core">englishNewZealand	self with: 'en-nz'</body><body package="RSS-Core">englishPhillipines	self with: 'en-ph'</body><body package="RSS-Core">englishSouthAfrica	self with: 'en-za'</body><body package="RSS-Core">englishTrinidad	self with: 'en-tt'</body><body package="RSS-Core">englishUnitedKingdom	self with: 'en-gb'</body><body package="RSS-Core">englishUnitedStates	self with: 'en-us'</body><body package="RSS-Core">englishZimbabwe	self with: 'en-zw'</body><body package="RSS-Core">estonian	self with: 'et'</body><body package="RSS-Core">faeroese	self with: 'fo'</body><body package="RSS-Core">finnish	self with: 'fi'</body><body package="RSS-Core">french	self with: 'fr'</body><body package="RSS-Core">frenchBelgium	self with: 'fr-be'</body><body package="RSS-Core">frenchCanada	self with: 'fr-ca'</body><body package="RSS-Core">frenchFrance	self with: 'fr-fr'</body><body package="RSS-Core">frenchLuxembourg	self with: 'fr-lu'</body><body package="RSS-Core">frenchMonaco	self with: 'fr-mc'</body><body package="RSS-Core">frenchSwitzerland	self with: 'fr-ch'</body><body package="RSS-Core">gaelic	self with: 'gd'</body><body package="RSS-Core">galician	self with: 'gl'</body><body package="RSS-Core">german	self with: 'de'</body><body package="RSS-Core">germanAustria	self with: 'de-at'</body><body package="RSS-Core">germanGermany	self with: 'de-de'</body><body package="RSS-Core">germanLiechtenstein	self with: 'de-li'</body><body package="RSS-Core">germanLuxembourg	self with: 'de-lu'</body><body package="RSS-Core">germanSwitzerland	self with: 'de-ch'</body><body package="RSS-Core">greek	self with: 'el'</body><body package="RSS-Core">hawaiian	self with: 'haw'</body><body package="RSS-Core">hungarian	self with: 'hu'</body><body package="RSS-Core">icelandic	self with: 'is'</body><body package="RSS-Core">indonesian	self with: 'in'</body><body package="RSS-Core">irish	self with: 'ga'</body><body package="RSS-Core">italian	self with: 'it'</body><body package="RSS-Core">italianItaly	self with: 'it-it'</body><body package="RSS-Core">italianSwitzerland	self with: 'it-ch'</body><body package="RSS-Core">japanese	self with: 'ja'</body><body package="RSS-Core">korean	self with: 'ko'</body><body package="RSS-Core">macedonian	self with: 'mk'</body><body package="RSS-Core">norwegian	self with: 'no'</body><body package="RSS-Core">polish	self with: 'pl'</body><body package="RSS-Core">portuguese	self with: 'pt'</body><body package="RSS-Core">portugueseBrazil	self with: 'pt-br'</body><body package="RSS-Core">portuguesePortugal	self with: 'pt-pt'</body><body package="RSS-Core">romanian	self with: 'ro'</body><body package="RSS-Core">romanianMoldova	self with: 'ro-mo'</body><body package="RSS-Core">romanianRomania	self with: 'ro-ro'</body><body package="RSS-Core">russian	self with: 'ru'</body><body package="RSS-Core">russianMoldova	self with: 'ru-mo'</body><body package="RSS-Core">russianRussia	self with: 'ru-ru'</body><body package="RSS-Core">serbian	self with: 'sr'</body><body package="RSS-Core">slovak	self with: 'sk'</body><body package="RSS-Core">slovenian	self with: 'sl'</body><body package="RSS-Core">spanish	self with: 'es'</body><body package="RSS-Core">spanishArgentina	self with: 'es-ar'</body><body package="RSS-Core">spanishBolivia	self with: 'es-bo'</body><body package="RSS-Core">spanishChile	self with: 'es-cl'</body><body package="RSS-Core">spanishColombia	self with: 'es-co'</body><body package="RSS-Core">spanishCostaRica	self with: 'es-cr'</body><body package="RSS-Core">spanishDominicanRepublic	self with: 'es-do'</body><body package="RSS-Core">spanishEcuador	self with: 'es-ec'</body><body package="RSS-Core">spanishElSalvador	self with: 'es-sv'</body><body package="RSS-Core">spanishGuatemala	self with: 'es-gt'</body><body package="RSS-Core">spanishHonduras	self with: 'es-hn'</body><body package="RSS-Core">spanishMexico	self with: 'es-mx'</body><body package="RSS-Core">spanishNicaragua	self with: 'es-ni'</body><body package="RSS-Core">spanishPanama	self with: 'es-pa'</body><body package="RSS-Core">spanishParaguay	self with: 'es-py'</body><body package="RSS-Core">spanishPeru	self with: 'es-pe'</body><body package="RSS-Core">spanishPuertoRico	self with: 'es-pr'</body><body package="RSS-Core">spanishSpain	self with: 'es-es'</body><body package="RSS-Core">spanishUruguay	self with: 'es-uy'</body><body package="RSS-Core">spanishVenezuela	self with: 'es-ve'</body><body package="RSS-Core">swedish	self with: 'sv'</body><body package="RSS-Core">swedishFinland	self with: 'sv-fi'</body><body package="RSS-Core">swedishSweden	self with: 'sv-se'</body><body package="RSS-Core">turkish	self with: 'tr'</body><body package="RSS-Core">ukranian	self with: 'uk'</body></methods><methods><class-id>RSS.RRLanguageTag</class-id> <category>accessing</category><body package="RSS-Core">tag	^ 'language'</body></methods><methods><class-id>RSS.RRLanguageTag class</class-id> <category>accessing</category><body package="RSS-Core">codes	^ Array streamContents: [ :stream |		self codesString lines do: [ :line |			stream nextPut: (Array				with: (line copyUpTo: Character tab) asLegalSelector				with: (line copyAfter: Character tab)) ] ]</body><body package="RSS-Core">codesString	^'Afrikaans	afAlbanian	sqBasque	euBelarusian	beBulgarian	bgCatalan	caChinese (Simplified)	zh-cnChinese (Traditional)	zh-twCroatian	hrCzech	csDanish	daDutch	nlDutch (Belgium)	nl-beDutch (Netherlands)	nl-nlEnglish	enEnglish (Australia)	en-auEnglish (Belize)	en-bzEnglish (Canada)	en-caEnglish (Ireland)	en-ieEnglish (Jamaica)	en-jmEnglish (New Zealand)	en-nzEnglish (Phillipines)	en-phEnglish (South Africa)	en-zaEnglish (Trinidad)	en-ttEnglish (United Kingdom)	en-gbEnglish (United States)	en-usEnglish (Zimbabwe)	en-zwEstonian	etFaeroese	foFinnish	fiFrench	frFrench (Belgium)	fr-beFrench (Canada)	fr-caFrench (France)	fr-frFrench (Luxembourg)	fr-luFrench (Monaco)	fr-mcFrench (Switzerland)	fr-chGalician	glGaelic	gdGerman	deGerman (Austria)	de-atGerman (Germany)	de-deGerman (Liechtenstein)	de-liGerman (Luxembourg)	de-luGerman (Switzerland)	de-chGreek	elHawaiian	hawHungarian	huIcelandic	isIndonesian	inIrish	gaItalian	itItalian (Italy)	it-itItalian (Switzerland)	it-chJapanese	jaKorean	koMacedonian	mkNorwegian	noPolish	plPortuguese	ptPortuguese (Brazil)	pt-brPortuguese (Portugal)	pt-ptRomanian	roRomanian (Moldova)	ro-moRomanian (Romania)	ro-roRussian	ruRussian (Moldova)	ru-moRussian (Russia)	ru-ruSerbian	srSlovak	skSlovenian	slSpanish	esSpanish (Argentina)	es-arSpanish (Bolivia)	es-boSpanish (Chile)	es-clSpanish (Colombia)	es-coSpanish (Costa Rica)	es-crSpanish (Dominican Republic)	es-doSpanish (Ecuador)	es-ecSpanish (El Salvador)	es-svSpanish (Guatemala)	es-gtSpanish (Honduras)	es-hnSpanish (Mexico)	es-mxSpanish (Nicaragua)	es-niSpanish (Panama)	es-paSpanish (Paraguay)	es-pySpanish (Peru)	es-peSpanish (Puerto Rico)	es-prSpanish (Spain)	es-esSpanish (Uruguay)	es-uySpanish (Venezuela)	es-veSwedish	svSwedish (Finland)	sv-fiSwedish (Sweden)	sv-seTurkish	trUkranian	uk'</body><body package="RSS-Core">generatedCategory	^ 'languages-generated'</body></methods><methods><class-id>RSS.RRLanguageTag class</class-id> <category>generating</category><body package="RSS-Core">generateFor: aPair	(self includesSelector: aPair first) ifFalse: [		self 			compile: aPair first, '	self with: ''', aPair last, ''''			classified: self generatedCategory ]</body><body package="RSS-Core">generateTags	^ self codes do: [ :each | self generateFor: each ]</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>image-required</category><body package="RSS-Core">url	"is the URL of a GIF, JPEG or PNG image that represents the channel."	^ self tag: 'url'</body><body package="RSS-Core">url: aBlock	self url with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>convenience</category><body package="RSS-Core">renderContentEncoded: aOneArgumentBlock	"renders the html content of an item	a render canvas will be passed as an argument to the block"	self contentEncoded		with: [			self renderHtml: aOneArgumentBlock ]</body><body package="RSS-Core">renderHtml: aOneArgumentBlock	"convenience method to render html	aOneArgumentBlock will be passed an html canvas"	self text: (WAHtmlCanvas builder render: aOneArgumentBlock)</body><body package="RSS-Core">space	self html: self spaceEntity</body><body package="RSS-Core">withLineBreaks: aString	aString isEmptyOrNil		ifTrue: [ ^ self ].	self renderHtml: [ :html | html withLineBreaks: aString ]</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>private</category><body package="RSS-Core">comment: aString</body><body package="RSS-Core">defaultGeneratorString	^ 'Seaside-RSRSS'</body><body package="RSS-Core">html: aString	self flush.	self document nextPutAll: aString</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>skiphours</category><body package="RSS-Core">hour	^ self tag: 'hour'</body><body package="RSS-Core">hour: aBlock	self hour with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>channel-optional</category><body package="RSS-Core">category	"---- as optional subelement of channel ----	Specify one or more categories that the channel belongs to. Follows the same rules as the &lt;item&gt;-level category element below.		---- as optional subelement of item ----	Includes the item in one or more categories.		The value of the element is a forward-slash-separated string that identifies a hierarchic location in the indicated taxonomy. Processors may establish conventions for the interpretation of categories.		You may include as many category elements as you need to, for different domains, and to have an item cross-referenced in different parts of the same domain.		It has one optional attribute, domain, a string that identifies a categorization taxonomy.		In RSS 2.0, a provision is made for linking a channel to its identifier in a cataloging system, using the channel-level category feature, described above. For example, to link a channel to its Syndic8 identifier, include a category element as a sub-element of &lt;channel&gt;, with domain 'Syndic8', and value the identifier for your channel in the Syndic8 database. The appropriate category element for Scripting News would be		rss category		domain: 'Syndic8';		with: 1765"	^ self brush: RRCategoryTag new</body><body package="RSS-Core">category: aBlock	self category with: aBlock</body><body package="RSS-Core">cloud	"Allows processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.		for more info see RRCloudTag"	^ self brush: RRCloudTag new</body><body package="RSS-Core">cloud: aBlock	self cloud with: aBlock</body><body package="RSS-Core">copyright	"Copyright notice for content in the channel."	^ self tag: 'copyright'</body><body package="RSS-Core">copyright: aBlock	self copyright with: aBlock</body><body package="RSS-Core">defaultDocumentation	self documentation: 'http://www.rssboard.org/rss-specification'</body><body package="RSS-Core">defaultGenerator	self generator: self defaultGeneratorString</body><body package="RSS-Core">documentation	"A URL that points to the documentation for the format used in the RSS file. It's probably a pointer to this page. It's for people who might stumble across an RSS file on a Web server 25 years from now and wonder what it is.	e.g. 'http://www.rssboard.org/rss-specification'	see #defaultDocumentation"	^ self tag: 'docs'</body><body package="RSS-Core">documentation: aBlock	self documentation with: aBlock</body><body package="RSS-Core">generator	"A string indicating the program used to generate the channel.	e.g.: 'RSRSS-pmm.3'	see #defaultGenerator"	^ self tag: 'generator'</body><body package="RSS-Core">generator: aBlock	self generator with: aBlock</body><body package="RSS-Core">image	"Specifies a GIF, JPEG or PNG image that can be displayed with the channel.	the following subelements are required:		url		title		link	the following subelements are optional:		width		height		description	"	^ self tag: 'image'</body><body package="RSS-Core">image: aBlock	self image with: aBlock</body><body package="RSS-Core">language	"The language the channel is written in. This allows aggregators to group all Italian language sites, for example, on a single page. A list of allowable values for this element, as provided by Netscape, is implemented in the 'languages-generated' protocl of RRLanguageTag. You may also use values defined by the W3C (http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes)."	^ self brush: RRLanguageTag new</body><body package="RSS-Core">language: aBlock	self language with: aBlock</body><body package="RSS-Core">lastBuildDate	"The last time the content of the channel changed.	again an RFC 822 date like all the other dates	e.g.: 'Sat, 07 Sep 2002 09:42:31 GMT'"	^ self tag: 'lastBuildDate'</body><body package="RSS-Core">lastBuildDate: aBlock	self lastBuildDate with: aBlock</body><body package="RSS-Core">managingEditor	"Email address for person responsible for editorial content.	e.g.: 'George Matesky &lt;geo@herald.com&gt;'"	^ self tag: 'managingEditor'</body><body package="RSS-Core">managingEditor: aBlock	self managingEditor with: aBlock</body><body package="RSS-Core">publicationDate	"---- as optional subelement of channel ----	The publication date for the content in the channel. For example, the New York Times publishes on a daily basis, the publication date flips once every 24 hours. That's when the pubDate of the channel changes. All date-times in RSS conform to the Date and Time Specification of RFC 822(http://asg.web.cmu.edu/rfc/rfc822.html#sec-5), with the exception that the year may be expressed with two characters or four characters (four preferred).		---- as optional subelement of item ----	Indicates when the item was published.	Its value is a date, indicating when the item was published. If it's a date in the future, aggregators may choose to not display the item until that date.		e.g: 'Sat, 07 Sep 2002 00:00:01 GMT'	minimal: '20 Jun 82 23:59 EST'"	^ self tag: 'pubDate'</body><body package="RSS-Core">publicationDate: aBlock	self publicationDate with: aBlock</body><body package="RSS-Core">rating	"The PICS (http://www.w3.org/PICS/) rating for the channel."	^ self tag: 'rating'</body><body package="RSS-Core">rating: aBlock	self rating with: aBlock</body><body package="RSS-Core">skipDays	"A hint for aggregators telling them which days they can skip.		An XML element that contains up to seven &lt;day&gt; sub-elements whose value is Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday. Aggregators may not read the channel during days listed in the skipDays element."	^ self tag: 'skipDays'</body><body package="RSS-Core">skipDays: aBlock	self skipDays with: aBlock</body><body package="RSS-Core">skipHours	"A hint for aggregators telling them which hours they can skip.		An XML element that contains up to 24 &lt;hour&gt; sub-elements whose value is a number between 0 and 23, representing a time in GMT, when aggregators, if they support the feature, may not read the channel on hours listed in the skipHours element. The hour beginning at midnight is hour zero."	^ self tag: 'skipHours'</body><body package="RSS-Core">skipHours: aBlock	self skipHours with: aBlock</body><body package="RSS-Core">textInput	"Specifies a text input box that can be displayed with the channel.	The purpose of the &lt;textInput&gt; element is something of a mystery. You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.		It has the following required subelements:		title		description		name		link"	^ self tag: 'textInput'</body><body package="RSS-Core">textInput: aBlock	self textInput with: aBlock</body><body package="RSS-Core">timeToLive	"It's a number of minutes that indicates how long a channel can be cached before refreshing from the source. This makes it possible for RSS sources to be managed by a file-sharing network such as Gnutella.		e.g.: 60"	^ self tag: 'ttl'</body><body package="RSS-Core">timeToLive: aBlock	self timeToLive with: aBlock</body><body package="RSS-Core">webMaster	"Email address for person responsible for technical issues relating to channel.	e.g.: 'Betty Guernsey &lt;betty@herald.com&gt;'"	^ self tag: 'webMaster'</body><body package="RSS-Core">webMaster: aBlock	self webMaster with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>dublin core</category><body package="RSS-Core">creator	"An entity primarily responsible for making the resource.	Examples of a Creator include a person, an organization, or a service. Typically, the name of a Creator should be used to indicate the entity.		http://dublincore.org/documents/dces/	http://purl.org/dc/elements/1.1/creator"	^ self tag: 'dc:creator'</body><body package="RSS-Core">creator: aBlock	self creator with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>item-optional</category><body package="RSS-Core">author	"Email address of the author of the item.		It's the email address of the author of the item. For newspapers and magazines syndicating via RSS, the author is the person who wrote the article that the &lt;item&gt; describes. For collaborative weblogs, the author of the item might be different from the managing editor or webmaster. For a weblog authored by a single individual it would make sense to omit the &lt;author&gt; element."	^ self tag: 'author'</body><body package="RSS-Core">author: aBlock	self author with: aBlock</body><body package="RSS-Core">comments	"URL of a page for comments relating to the item.		If present, it is the url of the comments page for the item."	^ self tag: 'comments'</body><body package="RSS-Core">comments: aBlock	self comments with: aBlock</body><body package="RSS-Core">enclosure	"Describes a media object that is attached to the item.		It has three required attributes. url says where the enclosure is located, length says how big it is in bytes, and type says what its type is, a standard MIME type.		The url must be an http url.		e.g.:	rss enclosure		url: 'http://www.scripting.com/mp3s/weatherReportSuite.mp3';		length: 12216320;		type: 'audio/mpeg'"	^ self brush: RREnclosureTag new</body><body package="RSS-Core">enclosure: aBlock	self enclosure with: aBlock</body><body package="RSS-Core">guid	"A string that uniquely identifies the item.		guid stands for globally unique identifier. It's a string that uniquely identifies the item. When present, an aggregator may choose to use this string to determine if an item is new.		e.g.: 'http://some.server.com/weblogItem3207'		There are no rules for the syntax of a guid. Aggregators must view them as a string. It's up to the source of the feed to establish the uniqueness of the string.		If the guid element has an attribute named isPermaLink with a value of true, the reader may assume that it is a permalink to the item, that is, a url that can be opened in a Web browser, that points to the full item described by the &lt;item&gt; element. An example:		e.g.:	rss guid		bePermaLink;		with: 'http://inessential.com/2002/09/01.php#a2'			isPermaLink is optional, its default value is true. If its value is false, the guid may not be assumed to be a url, or a url to anything in particular."	^ self brush: RRGuidTag new</body><body package="RSS-Core">guid: aBlock	self guid with: aBlock</body><body package="RSS-Core">source	"The RSS channel that the item came from.		Its value is the name of the RSS channel that the item came from, derived from its &lt;title&gt;. It has one required attribute, url, which links to the XMLization of the source.		rss source		url: 'http://www.tomalak.org/links2.xml';		with: 'Tomalak''s Realm'		The purpose of this element is to propagate credit for links, to publicize the sources of news items. It can be used in the Post command of an aggregator. It should be generated automatically when forwarding an item from an aggregator to a weblog authoring tool."	^ self brush: RRSourceTag new</body><body package="RSS-Core">source: aBlock	self source with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>image-optional</category><body package="RSS-Core">height	"Optional elements include &lt;width&gt; and &lt;height&gt;, numbers, indicating the width and height of the image in pixels.		Maximum value for height is 400, default value is 31."	^ self tag: 'height'</body><body package="RSS-Core">height: aBlock	self height with: aBlock</body><body package="RSS-Core">width	"Optional elements include &lt;width&gt; and &lt;height&gt;, numbers, indicating the width and height of the image in pixels.		Maximum value for width is 144, default value is 88."	^ self tag: 'width'</body><body package="RSS-Core">width: aBlock	self width with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>item</category><body package="RSS-Core">item	^ self tag: 'item'</body><body package="RSS-Core">item: aBlock	self item with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>textinput-required</category><body package="RSS-Core">name	"The name of the text object in the text input area."	^ self tag: 'name'</body><body package="RSS-Core">name: aBlock	self name with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>channel-required</category><body package="RSS-Core">description	"	---- as required subelement of channel ----	Phrase or sentence describing the channel.	e.g.: 'The latest news from GoUpstate.com, a Spartanburg Herald-Journal Web site.'		---- a required subelement of item ----	The item synopsis.		---- as required subelement of textInput ----	Explains the text input area.		----  as an optional subelement of image ----	contains text that is included in the TITLE attribute of the link formed around the image in the HTML rendering."	^ self tag: 'description'</body><body package="RSS-Core">description: aBlock	self description with: aBlock</body><body package="RSS-Core">link	"---- as required subelement of channel ----	The URL to the HTML website corresponding to the channel.	e.g.: 'http://www.goupstate.com/'		---- as required subelement of item ----	The URL of the item.		---- as required subelement of image ----	is the URL of the site, when the channel is rendered, the image is a link to the site. (Note, in practice the image &lt;title&gt; and &lt;link&gt; should have the same value as the channel's &lt;title&gt; and &lt;link&gt;		---- as required subelement of textInput ----	The URL of the CGI script that processes text input requests."		^ self tag: 'link'</body><body package="RSS-Core">link: aBlock	self link with: aBlock</body><body package="RSS-Core">title	"----- as required subelement of channel ----	The name of the channel. It's how people refer to your service. If you have an HTML website that contains the same information as your RSS file, the title of your channel should be the same as the title of your website.	e.g.: 'GoUpstate.com News Headlines'		---- as required subelement of item ----	The title of the item.		---- as required subelement of image ----	describes the image, it's used in the ALT attribute of the HTML &lt;img&gt; tag when the channel is rendered in HTML		---- as required subelement of textInput ----	The label of the Submit button in the text input area."		^ self tag: 'title'</body><body package="RSS-Core">title: aBlock	self title with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>skipdays</category><body package="RSS-Core">day	^ self brush: RRDayTag new</body><body package="RSS-Core">day: aBlock	self day with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>well-formed-web</category><body package="RSS-Core">comment	"This element appears in RSS feeds and contains the URI that comment entries are to be POSTed to. The details of this are outlined in the CommentAPI Specification (http://wellformedweb.org/story/9)"	^ self tag: 'wfw:comment'</body><body package="RSS-Core">commentRss	"This element also appears in RSS feeds and contains the URI of the RSS feed for comments on that Item. This is documented in Chris Sells' Specification(http://www.sellsbrothers.com/spout/default.aspx?content=archive.htm#exposingRssComments). Note that for quite a while this page has had a typo and erroneously referred to this element as 'commentRSS' as opposed to the correct 'commentRss'. Feed consumers should be aware that they may run into both spellings in the wild. Please see this page (http://www.intertwingly.net/blog/2006/04/16/commentRss) for more information."	^ self tag: 'wfw:commentRss'</body><body package="RSS-Core">commentRss: aBlock	^ self commentRss with: aBlock</body></methods><methods><class-id>RSS.RRRssRenderCanvas</class-id> <category>content</category><body package="RSS-Core">contentEncoded	"A module for the actual content of websites, in multiple formats.	http://web.resource.org/rss/1.0/modules/content/		example:	rss contentEncoded: '&lt;p&gt;What a &lt;em&gt;beautiful&lt;/em&gt; day!&lt;/p&gt;'"	^ self tag: 'content:encoded'</body><body package="RSS-Core">contentEncoded: aString	"A module for the actual content of websites.		aString must not include ']]&gt;'"	self contentEncoded		with: [ self cdata: aString ]</body></methods><methods><class-id>RSS.RRRssRenderCanvas class</class-id> <category>instance creation</category><body package="RSS-Core">builder	^ super builder		documentClass: WAXmlDocument;		rootClass: RRRssRoot;		yourself</body></methods><methods><class-id>RSS.RRRssRenderCanvas class</class-id> <category>accessing-tags</category><body package="RSS-Core">tags	"	self generateTags	"	^ #(		('item' item item: 'item')			('title' title title: 'channel-required')		('link' link link: 'channel-required')		('description' description description: 'channel-required')				('language' language language: 'channel-optional')		('copyright' copyright copyright: 'channel-optional')		('managingEditor' managingEditor managingEditor: 'channel-optional')		('webMaster' webMaster webMaster: 'channel-optional')		('pubDate' publicationDate publicationDate: 'channel-optional')		('lastBuildDate' lastBuildDate lastBuildDate: 'channel-optional')		('category' category category: 'channel-optional')		('generator' generator generator: 'channel-optional')		('docs' documentation documentation: 'channel-optional')		('cloud' cloud cloud: 'channel-optional')		('ttl' timeToLive timeToLive: 'channel-optional')		('image' image image: 'channel-optional')		('rating' rating rating: 'channel-optional')		('textInput' textInput textInput: 'channel-optional')		('skipHours' skipHours skipHours: 'channel-optional')		('skipDays' skipDays skipDays: 'channel-optional')				('author' author author: 'item-optional')		('comments' comments comments: 'item-optional')		('enclosure' enclosure enclosure: 'item-optional')		('guid' guid guid: 'item-optional')		('source' source source: 'item-optional')		('language' language language: 'item-optional')				('width' width width: 'image-optional')		('height' height height: 'image-optional')				('name' name name: 'textinput-required')				('hour' hour hour: 'skipHours')		('day' day day: 'skipDays')				('url' url url: 'image')		)</body></methods><methods><class-id>RSS.RRRssRenderCanvas class</class-id> <category>generating-tags</category><body package="RSS-Core">generateBinaryFor: aCollection	(aCollection size = 4 and: [ (self includesSelector: aCollection third) not ]) ifTrue: [		self 			compile: aCollection third, ' aBlock	self ', aCollection second, ' with: aBlock'			classified: aCollection fourth ]</body></methods><methods><class-id>RSS.RRSourceTag</class-id> <category>accessing</category><body package="RSS-Core">tag	^ 'source'</body></methods><methods><class-id>RSS.RRSourceTag</class-id> <category>attributes</category><body package="RSS-Core">url: aString	self attributeAt: 'url' put: aString</body></methods><methods><class-id>RSS.RRDayTag</class-id> <category>attributes</category><body package="RSS-Core">friday	^ self with: 'Friday'</body><body package="RSS-Core">monday	^ self with: 'Monday'</body><body package="RSS-Core">saturday	^ self with: 'Saturday'</body><body package="RSS-Core">sunday	^ self with: 'Sunday'</body><body package="RSS-Core">thursday	^ self with: 'Thursday'</body><body package="RSS-Core">tuesday	^ self with: 'Tuesday'</body><body package="RSS-Core">wednesday	^ self with: 'Wednesday'</body></methods><methods><class-id>RSS.RRDayTag</class-id> <category>accessing</category><body package="RSS-Core">tag	^ 'day'</body></methods><methods><class-id>RSS.RREnclosureTag</class-id> <category>attributes</category><body package="RSS-Core">length: anInteger	self attributeAt: 'length' put: anInteger</body><body package="RSS-Core">type: aString	self attributeAt: 'type' put: aString</body><body package="RSS-Core">url: aString	self attributeAt: 'url' put: aString</body></methods><methods><class-id>RSS.RREnclosureTag</class-id> <category>accessing</category><body package="RSS-Core">tag	^ 'enclosure'</body></methods><methods><class-id>RSS.RRRfc822DateTime</class-id> <category>printing</category><body package="RSS-Core">encodeOn: aDocument	(GRPrinter rfc822WithTimeZone: self timeZoneString)		print: self dateAndTime		on: aDocument</body><body package="RSS-Core">printString	^ String streamContents: [ :stream | 		self encodeOn: stream ]</body></methods><methods><class-id>RSS.RRRfc822DateTime</class-id> <category>accessing</category><body package="RSS-Core">dateAndTime	^ dateAndTime</body><body package="RSS-Core">dateAndTime: anObject	dateAndTime := anObject</body><body package="RSS-Core">timeZoneString	^ timeZoneString</body><body package="RSS-Core">timeZoneString: aString	timeZoneString := aString</body></methods><methods><class-id>RSS.RRRfc822DateTime class</class-id> <category>instance creation</category><body package="RSS-Core">dateAndTime: aDateAndTime timeZoneString: aString	^ self new		dateAndTime: aDateAndTime;		timeZoneString: aString;		yourself</body><body package="RSS-Core">newDateAndTime: aDateAndTime	^ self		newDateAndTime: aDateAndTime		offset: aDateAndTime offset</body><body package="RSS-Core">newDateAndTime: aDateAndTime offset: aDuration	^ self		dateAndTime: aDateAndTime		timeZoneString: (self offsetString: aDuration)</body><body package="RSS-Core">newUtc: aDateAndTime	^ self dateAndTime: aDateAndTime asUTC timeZoneString: 'UT'</body></methods><methods><class-id>RSS.RRRfc822DateTime class</class-id> <category>private</category><body package="RSS-Core">offsetString: aDuration	^ String streamContents: [ :stream |		stream nextPut: (aDuration positive ifTrue: [ $+ ] ifFalse: [ $- ]).		stream nextPutAll: (aDuration hours abs printPaddedWith: $0 to: 2 base: 10).		stream nextPutAll: (aDuration minutes abs printPaddedWith: $0 to: 2 base: 10) ]</body></methods><methods><class-id>RSS.RRRssRoot</class-id> <category>accessing</category><body package="RSS-Core">channelAttributes	^ channelAttributes</body><body package="RSS-Core">rssAttributes	^ rssAttributes</body><body package="RSS-Core">styles	^ styles ifNil: [ styles := OrderedCollection new ]</body></methods><methods><class-id>RSS.RRRssRoot</class-id> <category>initialization</category><body package="RSS-Core">initialize		super initialize.	rssAttributes := WAHtmlAttributes new		at: 'version' put: '2.0';		at: 'xmlns:content' put: 'http://purl.org/rss/1.0/modules/content/';		at: 'xmlns:wfw' put: 'http://wellformedweb.org/CommentAPI/';		at: 'xmlns:dc' put: 'http://purl.org/dc/elements/1.1/';		yourself.	channelAttributes := WAHtmlAttributes new</body></methods><methods><class-id>RSS.RRRssRoot</class-id> <category>writing</category><body package="RSS-Core">closeOn: aDocument	self writeFootOn: aDocument.	super closeOn: aDocument</body><body package="RSS-Core">openOn: aDocument	super openOn: aDocument.	self writeHeadOn: aDocument</body><body package="RSS-Core">writeFootOn: aDocument	aDocument closeTag: 'channel'.	aDocument closeTag: 'rss'</body><body package="RSS-Core">writeHeadOn: aDocument	self writeStylesOn: aDocument.		aDocument openTag: 'rss' attributes: rssAttributes.	aDocument openTag: 'channel' attributes: channelAttributes</body><body package="RSS-Core">writeStylesOn: aDocument	styles isNil		ifTrue: [ ^ self ].	styles do: [ :each | aDocument print: each ]</body></methods><methods><class-id>RSS.RRRssRoot</class-id> <category>elements</category><body package="RSS-Core">stylesheet	"http://interglacial.com/~sburke/stuff/pretty_rss.html"	^ self styles add: (RRXmlStyleSheet root: self)</body></methods><methods><class-id>RSS.RRComponent</class-id> <category>rendering</category><body package="RSS-Core">rendererClass	^ RRRssRenderCanvas</body></methods><methods><class-id>RSS.RRComponent</class-id> <category>accessing</category><body package="RSS-Core">session	self shouldNotImplement</body></methods><methods><class-id>RSS.RRComponent class</class-id> <category>testing</category><body package="RSS-Core">canBeRoot	^ self name ~= #RRComponent</body></methods><methods><class-id>Seaside.WAHtmlRoot</class-id> <category>*rss-core</category><body package="RSS-Core">rss	^ self link		beAlternate;		beRss;		yourself</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*rss-core</category><body package="RSS-Core">rssCore	^ self new		name: 'RSS-Core';		description: 'RSS integration for Seaside. Helps to create RSS 2.0 feeds.';		addDependency: 'Seaside-Canvas';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAPainter</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Rendering</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAHtmlRoot</name><environment>Seaside</environment><super>Seaside.WARoot</super><private>false</private><indexed-type>none</indexed-type><inst-vars>docType htmlAttrs headAttrs bodyAttrs headElements title styles scripts </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Document</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WASystemConfiguration</name><environment>Seaside</environment><super>Seaside.WAConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Seaside-Core-Configuration</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAContentElement</name><environment>Seaside</environment><super>Seaside.WAHtmlElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Document-Elements</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARequestHandler</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter parent configuration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-RequestHandling</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAXmlCanvas</name><environment>Seaside</environment><super>Seaside.WATagCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WATagBrush</name><environment>Seaside</environment><super>Seaside.WABrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WAXmlRoot</name><environment>Seaside</environment><super>Seaside.WARoot</super><private>false</private><indexed-type>none</indexed-type><inst-vars>charSet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Document</category><attributes><package>Seaside-Core</package></attributes></class></st-source>