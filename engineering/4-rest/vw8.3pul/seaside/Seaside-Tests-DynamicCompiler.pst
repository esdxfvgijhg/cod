<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-DynamicCompilerNotice: MIT LicenseCopyright (c) Cincom Systems, Inc.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: Tests for Seaside-DynamicCompiler.DbIdentifier: bear73DbTrace: 492664DbUsername: jkottDbVersion: 3.2.0 - 1DevelopmentPrerequisites: #(#(#any 'SUnitToo' '') #(#any 'Seaside-Namespace' '') #(#any 'Seaside-DynamicCompiler' ''))PackageName: Seaside-Tests-DynamicCompilerParcel: #('Seaside-Tests-DynamicCompiler')PrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package) #(#name 'Seaside-Namespace' #componentType #package) #(#name 'Seaside-DynamicCompiler' #componentType #package))PrerequisiteParcels: #(#('SUnitToo' '') #('Seaside-Namespace' '') #('Seaside-DynamicCompiler' ''))PrintStringCache: (3.2.0 - 1,jkott)Version: 3.2.0 - 1Date: 12:17:56 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>JavascriptParserTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Seaside-Tests-DynamicCompiler</package></attributes></class><class><name>CSSParserTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Seaside-Tests-DynamicCompiler</package></attributes></class><methods><class-id>Seaside.JavascriptParserTest</class-id> <category>testing</category><body package="Seaside-Tests-DynamicCompiler">testBracketsArgs	self assertParse: 'test(x, y, z) {}'</body><body package="Seaside-Tests-DynamicCompiler">testBracketsMultiline	self assertParse: 'test(){}'</body><body package="Seaside-Tests-DynamicCompiler">testBracketsNoArgs	self assertParse: 'test() {}'</body><body package="Seaside-Tests-DynamicCompiler">testBracketsNoArgsNoWhitespace	self assertParse: 'test(){}'</body><body package="Seaside-Tests-DynamicCompiler">testCSS_bracket	self denyParse: 'tag:lang("en") {}'</body><body package="Seaside-Tests-DynamicCompiler">testCSS_pseudoClass	self denyParse: ':hover {}'</body><body package="Seaside-Tests-DynamicCompiler">testCSS_tagPseudoClass	self denyParse: 'test:hover {}'</body><body package="Seaside-Tests-DynamicCompiler">testCSS_tagPseudoClassNoWhitespace	self denyParse: 'test:hover{}'</body><body package="Seaside-Tests-DynamicCompiler">testCSS_tagPseudoClassNoWhitespaceTricky	self denyParse: 'test:function{}'</body><body package="Seaside-Tests-DynamicCompiler">testCSS_tagSelector	self denyParse: 'test {}'</body><body package="Seaside-Tests-DynamicCompiler">testCSS_tagSelectorMultiline	self denyParse: 'test{}'</body><body package="Seaside-Tests-DynamicCompiler">testColonArgs	self assertParse: 'test: function(x, y, z) {}'</body><body package="Seaside-Tests-DynamicCompiler">testColonMultiline	self assertParse: 'test: function(){}'</body><body package="Seaside-Tests-DynamicCompiler">testColonNoArgs	self assertParse: 'test: function() {}'</body><body package="Seaside-Tests-DynamicCompiler">testColonNoArgsNoWhitespace	self assertParse: 'test:function(){}'</body><body package="Seaside-Tests-DynamicCompiler">testColonNonFunction	self assertParse: 'test: {}'</body><body package="Seaside-Tests-DynamicCompiler">testColonNonFunctionMultiline	self assertParse: 'test:{}'</body><body package="Seaside-Tests-DynamicCompiler">testSmalltalk	self denyParse: 'method"{"'</body></methods><methods><class-id>Seaside.JavascriptParserTest</class-id> <category>private</category><body package="Seaside-Tests-DynamicCompiler">assertParse: source	self assert: (JavascriptParser canParse: source).	self assert: (DynamicParser new on: source readStream) class = JavascriptParser</body><body package="Seaside-Tests-DynamicCompiler">denyParse: source	self deny: (JavascriptParser canParse: source).	self deny: (DynamicParser new on: source readStream) class = JavascriptParser</body></methods><methods><class-id>Seaside.CSSParserTest</class-id> <category>testing</category><body package="Seaside-Tests-DynamicCompiler">testBrackets	self assertParse: 'tag:lang("en") {}'</body><body package="Seaside-Tests-DynamicCompiler">testClass	self assertParse: '.class {}'</body><body package="Seaside-Tests-DynamicCompiler">testComma	self assertParse: '.class, #id, tag:hover:lang("en") {}'</body><body package="Seaside-Tests-DynamicCompiler">testCommaWithColons	self assertParse: 'mixed:hover, :active.and:not("things") {}'</body><body package="Seaside-Tests-DynamicCompiler">testId	self assertParse: '#id {}'</body><body package="Seaside-Tests-DynamicCompiler">testJavascriptBracketsNoArgs	self denyParse: 'test() {}'</body><body package="Seaside-Tests-DynamicCompiler">testJavascriptColonNonFunction	self denyParse: 'test: {}'</body><body package="Seaside-Tests-DynamicCompiler">testPseudoClass	self assertParse: ':hover {}'</body><body package="Seaside-Tests-DynamicCompiler">testSmalltalk	self denyParse: 'before	^self'</body><body package="Seaside-Tests-DynamicCompiler">testSmalltalkBracket	self denyParse: 'method"{"'</body><body package="Seaside-Tests-DynamicCompiler">testTagPseudoClass	self assertParse: 'test:hover {}'</body><body package="Seaside-Tests-DynamicCompiler">testTagPseudoClassNoWhitespace	self assertParse: 'test:hover{}'</body><body package="Seaside-Tests-DynamicCompiler">testTagPseudoClassNoWhitespaceTricky	self assertParse: 'test:first-child{}'</body><body package="Seaside-Tests-DynamicCompiler">testTagSelector	self assertParse: 'test {}'</body><body package="Seaside-Tests-DynamicCompiler">testTagSelectorMultiline	self assertParse: 'test{}'</body></methods><methods><class-id>Seaside.CSSParserTest</class-id> <category>private</category><body package="Seaside-Tests-DynamicCompiler">assertParse: source	self assert: (CSSParser canParse: source).	self assert: (DynamicParser new on: source readStream) class = CSSParser</body><body package="Seaside-Tests-DynamicCompiler">denyParse: source	self deny: (CSSParser canParse: source).	self deny: (DynamicParser new on: source readStream) class = CSSParser</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>