<?xml version="1.0"?><st-source><!-- Name: Seaside-VisualWorks-Adaptors-DevelopmentNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: The package contains definition of pages and settings controlling the Seaside server and the server menu options.DbIdentifier: bear73DbTrace: 492588DbUsername: jkottDbVersion: 3.2.0 - 1DevelopmentPrerequisites: #(#(#any 'Tools-Settings' '') #(#any 'Seaside-VisualWorks-Adaptors' '') #(#any 'SiouX-Tools' ''))DisregardedPrerequisites: #()PackageName: Seaside-VisualWorks-Adaptors-DevelopmentParcel: #('Seaside-VisualWorks-Adaptors-Development')PrerequisiteDescriptions: #(#(#name 'Tools-Settings' #componentType #package) #(#name 'Seaside-VisualWorks-Adaptors' #componentType #package) #(#name 'SiouX-Tools' #componentType #package))PrerequisiteParcels: #(#('Tools-Settings' '') #('Seaside-VisualWorks-Adaptors' '') #('SiouX-Tools' ''))PrintStringCache: (3.2.0 - 1,jkott)Version: 3.2.0 - 1Date: 3:31:28 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:28 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SeasideSettingsDomain</name><environment>SiouX</environment><super>Tools.SettingsDomain</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private SiouX.*			private Tools.*			</imports><category></category><attributes><package>Seaside-VisualWorks-Adaptors-Development</package></attributes></class><comment><class-id>SiouX.SeasideSettingsDomain</class-id><body>The class contains definition of pages and settings controlling the Seaside server.</body></comment><shared-variable><name>AutoOpenWebBrowser</name><environment>SiouX.SeasideSettingsDomain</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>true</initializer><attributes><package>Seaside-VisualWorks-Adaptors-Development</package></attributes></shared-variable><methods><class-id>SiouX.SeasideSettingsDomain</class-id> <category>accessing</category><body package="Seaside-VisualWorks-Adaptors-Development">label	^'Seaside Server Settings'</body></methods><methods><class-id>SiouX.SeasideSettingsDomain class</class-id> <category>defaults</category><body package="Seaside-VisualWorks-Adaptors-Development">defaultAutoOpenWebBrowserValue	^true</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>seaside server</category><body package="Seaside-VisualWorks-Adaptors-Development">seasideIsInDebugMode	^SiouX.SeasideServer isInDebugMode</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideIsLogging	^SiouX.SeasideServer isLogging</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideIsNotRunning	^self seasideIsRunning not</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideIsRunning	^SiouX.SeasideServer isRunning</body></methods><methods><class-id>SiouX.SeasideSettingsDomain class</class-id> <category>pages</category><body package="Seaside-VisualWorks-Adaptors-Development">seasideListenersPage	&lt;settingsPage: #(#seaside #listeners)&gt;	^(SiouX.ServerListeners on: SeasideServer current)		label: #Listeners &lt;&lt; #seaside &gt;&gt; 'Listeners';		icon: (Seaside.SeasideIcons visualFor: #seasidestar15x16);		yourself</body><body package="Seaside-VisualWorks-Adaptors-Development">seasidePage	&lt;settingsPage: #(#seaside)&gt;	^(Tools.ModularSettingsPage new)		label: #SeasideServer &lt;&lt; #labels &gt;&gt; 'Seaside Server';		icon: (Seaside.SeasideIcons visualFor: #seasidestar15x16);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(#seaside));		yourself</body><body package="Seaside-VisualWorks-Adaptors-Development">transportPage	&lt;settingsPage: #(#seaside #transport)&gt;	^(Tools.ModularSettingsPage new)		label: #TransportOptions &lt;&lt; #seaside &gt;&gt; 'Transport Options';		icon: (Seaside.SeasideIcons visualFor: #seasidestar15x16);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(#seaside #transport));		yourself</body></methods><methods><class-id>SiouX.SeasideSettingsDomain class</class-id> <category>settings-transport</category><body package="Seaside-VisualWorks-Adaptors-Development">chunkSize	&lt;setting: #(#seaside #transport #chunkSize) position: 16&gt;	^(Tools.NumberSetting on: SeasideHttpWritingOptions aspect: #chunkSize)		label: #HttpChunkSize &lt;&lt; #seaside &gt;&gt; 'Chunk Size (HTTP)';		default: SeasideHttpWritingOptions defaultChunkSize;		helpText: #HttpChunkSizeHelpText &lt;&lt; #seaside &gt;&gt; 'This setting specifies the default chunk size (HTTP transports only).';		yourself</body><body package="Seaside-VisualWorks-Adaptors-Development">saveAttachmentAsFile	&lt;setting: #(seaside transport saveAttachmentAsFile) position: 10&gt;	^(Tools.BooleanSetting on: SeasideHttpReadingOptions  aspect: #saveAttachmentsAsFiles )		label: #SaveAttachmentAsFiles &lt;&lt; #seaside &gt;&gt; 'Save attachments as files';		default: SeasideHttpReadingOptions saveAttachmentsAsFilesValue;		helpText: #SaveAttachmentAsFilesHelpText &lt;&lt; #seaside &gt;&gt; 'This setting specifies whether to save incoming attachments directly into external files. Saving into files allows to process large attachments more efficiently. If not saved into files, file attachments will be reconstructed entirely in memory.';		yourself</body><body package="Seaside-VisualWorks-Adaptors-Development">shouldChunk	&lt;setting: #(#seaside #transport #defaultShouldChunk) position: 15&gt;	^(Tools.BooleanSetting on: SeasideHttpWritingOptions aspect: #shouldChunk)		label: #HttpShouldChunkMessages &lt;&lt; #seaside &gt;&gt; 'Use chunked format for large responses (HTTP)';		default: SeasideHttpWritingOptions shouldChunkValue;		helpText: #HttpShouldChunkHelpText &lt;&lt; #seaside &gt;&gt; 'This setting specifies whether to use chunked format for large messages (HTTP transports only).';		yourself</body><body package="Seaside-VisualWorks-Adaptors-Development">uploadDirectory	&lt;setting: #(seaside transport uploadDirectory) position: 11&gt;	^(Tools.StringSetting on: SeasideHttpReadingOptions aspect: #defaultAttachmentDirectoryString )		label: #SaveAttachmentsIn &lt;&lt; #seaside &gt;&gt; 'Save attachments in';		default: SeasideHttpReadingOptions defaultAttachmentDirectoryValue;		helpText: #SaveAttachmentsInHelpText &lt;&lt; #seaside &gt;&gt; 'This setting specifies the directory that will be used to save file attachments from incoming requests.';		yourself</body></methods><methods><class-id>SiouX.SeasideSettingsDomain class</class-id> <category>settings-seaside</category><body package="Seaside-VisualWorks-Adaptors-Development">startServerOnStartup	&lt;setting: #(seaside autoRestart) position: 550&gt;	^(Tools.BooleanSetting on: ServerSystem aspect: #autoRestart)		label: (#AutoRestart &lt;&lt; #seaside &gt;&gt; 'Start server on Startup');		default: ServerSystem autoRestart;		helpText: #AutoRestartHelpText &lt;&lt; #seaside &gt;&gt; 'This setting controls how the server reacts to image startup, whether it should automatically start or not.';		yourself</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>seaside server</category><body package="Seaside-VisualWorks-Adaptors-Development">seasideMenu	&lt;submenu: 'S&amp;easide'		nameKey: #seaside		menu: #(#menuBar  )		position: 10.05&gt;</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideServerBrowserURL	&lt;menuItem: 'Open Browser on Server'		nameKey: #openBrowserOnServer		enablement: nil		indication:  nil		menu: #(#menuBar #seaside)		position: 15.20&gt;	ExternalWebBrowser open: SiouX.SeasideServer siteURL asString</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideServerInspect	&lt;menuItem: 'Inspect Server'		nameKey: #seasideServerInspect		enablement: nil		indication:  nil		menu: #(#menuBar #seaside)		position: 15.22&gt;	SiouX.SeasideServer current inspect.</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideServerSettings		&lt;menuItem: 'Settings' nameKey: #seasideServerSettings enablement: nil		indication: nil menu: #(#menuBar #seaside) position: 20.20&gt;	SiouX.SeasideSettingsDomain openManager</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideServerStart	&lt;menuItem: 'Start Server'		nameKey: #seasideServerStart		enablement: #seasideIsNotRunning		indication: nil		menu: #(#menuBar  #seaside)		position: 10.10&gt;	SiouX.SeasideServer start</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideServerStop	&lt;menuItem: 'Stop Server'		nameKey: #seasideServerStop		enablement: #seasideIsRunning		indication:  nil		menu: #(#menuBar  #seaside)		position: 10.20&gt;	SiouX.SeasideServer stop</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideToggleDebugMode	&lt;menuItem: 'Debug Mode'		nameKey: #seasideToggleDebugMode		enablement: nil		indication: #seasideIsInDebugMode		menu: #(#menuBar #seaside)		position: 15.26&gt;	self seasideIsInDebugMode		ifTrue: [ SiouX.SeasideServer stopDebugMode ]		ifFalse: [ SiouX.SeasideServer startDebugMode ]</body><body package="Seaside-VisualWorks-Adaptors-Development">seasideToggleLogging	&lt;menuItem: 'Log to Seaside.log'		nameKey: #seasideToggleLogging		enablement: nil		indication: #seasideIsLogging		menu: #(#menuBar #seaside)		position: 15.25&gt;	self seasideIsLogging		ifTrue: [ SiouX.SeasideServer stopLog ]		ifFalse: [ SiouX.SeasideServer startLog ]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>SettingsDomain</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cachedSettings cachedPages unappliedSnapshots </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>Tools-Settings</package></attributes></class></st-source>