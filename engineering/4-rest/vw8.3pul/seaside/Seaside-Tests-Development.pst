<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-DevelopmentComment: Unit tests for the package Seaside-Development.DbIdentifier: bear73DbTrace: 492657DbUsername: jkottDbVersion: 3.2.0 - pmm.45 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Development' '') #(#any 'Seaside-VisualWorks-Development' '') #(#any 'Seaside-Tests-Tools-Web' ''))Id: b08b3d36-66ea-4884-9355-28bc7307c1aeNamespace: SeasidePackageName: Seaside-Tests-DevelopmentParcel: #('Seaside-Tests-Development')ParcelName: Seaside-Tests-DevelopmentPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Development' '') #('Seaside-VisualWorks-Development' '') #('Seaside-Tests-Tools-Web' ''))PrintStringCache: (3.2.0 - pmm.45 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Development-pmm.45.mczVersion: 3.2.0 - pmm.45 1Date: 12:17:56 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAPrettyPrintedDocumentTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Development</category><attributes><package>Seaside-Tests-Development</package></attributes></class><class><name>WAPrettyPrintedDocumentTestComponent</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Development</category><attributes><package>Seaside-Tests-Development</package></attributes></class><class><name>WAWalkbackTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Development</category><attributes><package>Seaside-Tests-Development</package></attributes></class><class><name>WADebugErrorHandlerTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Development</category><attributes><package>Seaside-Tests-Development</package></attributes></class><comment><class-id>Seaside.WADebugErrorHandlerTest</class-id><body>This isn't really a unit test of WADebugErrorHandler but rather a test that tries to replicate a simple version of the same error handling behaviour upon which the error handler depends. The error handler itself would be hard to test because it opens a debugger as its first action.This should at least help confirm that the assumptions that were in place when writing the handler on Squeak hold true on other platforms.</body></comment><class><name>WADevelopmentPlatformTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Development</category><attributes><package>Seaside-Tests-Development</package></attributes></class><methods><class-id>Seaside.WAPrettyPrintedDocumentTest</class-id> <category>testing</category><body package="Seaside-Tests-Development">assert: anObject rendersAs: aString	| oldContext document newContext stream |	stream := WriteStream on: String new.	oldContext := WARenderContext new		actionUrl: WAUrl new;		document: (WAHtmlDocument on: stream);		yourself.	oldContext visitor: (WARenderingGuide client: (WARenderVisitor context: oldContext)).	newContext := oldContext copy.	newContext disableHalos.	document := WAPrettyPrintedDocument context: oldContext.	newContext document: document.	(WARenderVisitor context: newContext) start: anObject. "from tools-web should be in dependency list"	newContext document close.	self assert: aString equals: stream contents</body><body package="Seaside-Tests-Development">testEventsInKnownEvents	"Test that any event on WATagBrush is in WAPrettyPrintedDocument &gt;&gt; #knownEvents"	| selectors eventNames knownEvents |	selectors :=  WATagBrush selectors select: [ :each |		(each beginsWithSubCollection: #on)			and: [ each ~= #onEnter: ] ].	eventNames := selectors collect: [ :each |		each = #onDoubleClick:			ifTrue: [ 'ondblclick' ]			ifFalse: [ each allButLast asLowercase ] ].	knownEvents := WAPrettyPrintedDocument basicNew knownEvents.	eventNames do: [ :each |		self assert: (knownEvents includes: each) ]</body><body package="Seaside-Tests-Development">testKnownEventsInTagBrush	"Test that any event in WAPrettyPrintedDocument &gt;&gt; #knownEvents is on WATagBrush"	| knownEvents |	knownEvents := WAPrettyPrintedDocument basicNew knownEvents.	knownEvents do: [ :each |		| selector |		selector := each = 'ondblclick'			ifTrue: [ #onDoubleClick: ]			ifFalse: [				WATagBrush selectors detect: [ :eachSelector |				eachSelector allButLast asLowercase greaseString = each ] ].		self assert: selector notNil ]</body><body package="Seaside-Tests-Development">testRendering	self		assert: WAPrettyPrintedDocumentTestComponent new		rendersAs: '&amp;lt;&lt;span class="wa-tag"&gt;h1&lt;/span&gt;&amp;nbsp;&lt;span class="wa-attribute-key"&gt;title&lt;/span&gt;=&lt;span class="wa-attribute-value"&gt;&amp;quot;&amp;amp;amp;foo;&amp;quot;&lt;/span&gt;&amp;gt;&amp;amp;amp;foo;&amp;lt;/&lt;span class="wa-tag"&gt;h1&lt;/span&gt;&amp;gt;&amp;amp;nbsp;&lt;br/&gt;&amp;lt;&lt;span class="wa-tag"&gt;a&lt;/span&gt;&amp;nbsp;&lt;span class="wa-attribute-key"&gt;onclick&lt;/span&gt;=&lt;span class="wa-attribute-value"&gt;&amp;quot;&lt;a onclick="$(&amp;amp;quot;#seastar&amp;amp;quot;).animate({&amp;amp;quot;left&amp;amp;quot;:&amp;amp;quot;-=100px&amp;amp;quot;},{})"&gt;$(&amp;amp;amp;quot;#seastar&amp;amp;amp;quot;).animate({&amp;amp;amp;quot;left&amp;amp;amp;quot;:&amp;amp;amp;quot;-=100px&amp;amp;amp;quot;},{})&lt;/a&gt;&amp;quot;&lt;/span&gt;&amp;gt;Move Left&amp;lt;/&lt;span class="wa-tag"&gt;a&lt;/span&gt;&amp;gt;'</body></methods><methods><class-id>Seaside.WAPrettyPrintedDocumentTestComponent</class-id> <category>rendering</category><body package="Seaside-Tests-Development">renderContentOn: html	html heading		title: '&amp;foo;';		with: '&amp;foo;'.	html space.	html anchor		onClick: '$(&amp;quot;#seastar&amp;quot;).animate({&amp;quot;left&amp;quot;:&amp;quot;-=100px&amp;quot;},{})';		with: 'Move Left'</body></methods><methods><class-id>Seaside.WAWalkbackTest</class-id> <category>tests</category><body package="Seaside-Tests-Development">testFrameCount	| walkback |	walkback := nil.	[ WATestError signal: 'foo' ]		on: WATestError		do: [ :e | walkback := WAWalkback current exception: e ].	self assert: walkback notNil.	self assert: walkback frameCount &gt; 0</body></methods><methods><class-id>Seaside.WADebugErrorHandlerTest</class-id> <category>private</category><body package="Seaside-Tests-Development">handleException: anException debuggerSimulation: debugBlock	debugBlock value.	anException resume</body><body package="Seaside-Tests-Development">simulateWithDebugBlock: debugBlock progress: desiredProgress result: desiredResult 	"Set up a known working mechanism similar to the error handler so we can	test whether the underlying system works the same way as on Squeak	where WADebugErrorHandler was originally developed."	| progress semaphore result |	progress := OrderedCollection new.	semaphore := GRPlatform current semaphoreClass new.		[ 	[ result := 	[ progress add: #a.	1 / 0.	progress add: #b.	#resumed ] 		on: Error		do: 			[ :e | 			progress add: #c.			self 				handleException: e				debuggerSimulation: 					[ progress add: #d.					debugBlock value.					progress add: #e ] ] ] ensure: [ semaphore signal ] ] fork.	semaphore wait.	self assert: progress asArray = desiredProgress asArray.	self assert: result = desiredResult</body></methods><methods><class-id>Seaside.WADebugErrorHandlerTest</class-id> <category>tests</category><body package="Seaside-Tests-Development">testMechanismAbort	"Test if things behave as expected when simulating a Debugger being closed	(in other words, the process being terminated)."	self		simulateWithDebugBlock: [ Processor activeProcess terminate ]		progress: #(#a #c #d)		result: nil</body><body package="Seaside-Tests-Development">testMechanismProceed	"Test if things behave as expected when simulating a Debugger being proceeded	(in other words, the process being terminated)."	self		simulateWithDebugBlock: [ nil ]		progress: #(#a #c #d #e #b)		result: #resumed</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-development</category><body package="Seaside-Tests-Development">seasideTestsDevelopment	^ self new		name: 'Seaside-Tests-Development';		description: 'Unit tests for the package Seaside-Development.';		addDependency: 'Seaside-Development';		addDependency: 'Seaside-Tests-Tools-Web';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>WAContextTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class></st-source>