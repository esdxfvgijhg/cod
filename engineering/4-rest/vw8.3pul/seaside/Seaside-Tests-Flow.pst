<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-FlowComment: Functional tests for Seaside-Flow.DbIdentifier: bear73DbTrace: 492653DbUsername: jkottDbVersion: 3.2.0 - pmm.37 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Flow' '') #(#any 'Seaside-VisualWorks-Flow' '') #(#any 'Seaside-Tests-Functional' ''))Id: 4a9f5e32-7d15-496a-b2d8-28942a5eaa33Namespace: SeasidePackageName: Seaside-Tests-FlowParcel: #('Seaside-Tests-Flow')ParcelName: Seaside-Tests-FlowPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Flow' '') #('Seaside-VisualWorks-Flow' '') #('Seaside-Tests-Functional' ''))PrintStringCache: (3.2.0 - pmm.37 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Flow-pmm.37.mczVersion: 3.2.0 - pmm.37 1Date: 12:17:56 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAFlowPlatformTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Unit</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAFlowFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAFlowConvenienceFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTaskTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cheese </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAComponentCallTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Unit</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAFlowRenderingCallFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WACallDuringRenderTestComponent</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAFlowErrorFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAExceptionFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAFlowDelegationTask</name><environment>Seaside</environment><super>Seaside.WADelegationTask</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAFlowDelegationFunctionalTest</name><environment>Seaside</environment><super>Seaside.WADelegationFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><class><name>WAFlowClosureFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Flow-Functional</category><attributes><package>Seaside-Tests-Flow</package></attributes></class><methods><class-id>Seaside.WAFlowPlatformTest</class-id> <category>private</category><body package="Seaside-Tests-Flow">evaluateCallbackContinuation: aContinuation with: anObject	| callback |	callback := WAActionCallback new.	callback block: [ aContinuation value: anObject ].	[ callback evaluateWithArgument: nil ]		on: WARenderNotification do: [ :n | ]</body><body package="Seaside-Tests-Flow">withCallbackContinuationDo: ccBlock resultBlock: resultBlock 	| callback |	callback := WAActionCallback new.	callback block: [ resultBlock value: (GRPlatform current seasideSuspendFlowDo: ccBlock) ].	[ callback evaluateWithArgument: nil ] 		on: WARenderNotification		do: [ :n |  ]</body></methods><methods><class-id>Seaside.WAFlowPlatformTest</class-id> <category>tests</category><body package="Seaside-Tests-Flow">testSuspendCallbackDo	| continuation result |	continuation := nil.	self withCallbackContinuationDo: [ :cc | continuation := cc ] resultBlock: [ :r | result := r ].	self assert: continuation notNil.	self evaluateCallbackContinuation: continuation with: 123.	self assert: result = 123</body></methods><methods><class-id>Seaside.WAFlowFunctionalTest</class-id> <category>private</category><body package="Seaside-Tests-Flow">stackDepth	^ GRPlatform current stackDepth</body></methods><methods><class-id>Seaside.WAFlowFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Flow">goAnchors		1 to: 5 do: [ :each | 		| component |		component := WAComponent new.		component addMessage: [ :html | 			html anchor				callback: [ component answer ];				with: each greaseString, ': ', self stackDepth greaseString ] fixCallbackTemps.		self call: component ]</body><body package="Seaside-Tests-Flow">goButtons	1 to: 5 do: [ :each |		self inform: each greaseString, ': ', self stackDepth greaseString ]</body></methods><methods><class-id>Seaside.WAFlowFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Flow">renderContentOn: html	html paragraph: 'The following two anchors should trigger flows with 5 steps each. The stack should neither grow nor shrink (in GemStone the stack for go buttons will grow and that is expected behavior). Backtracking and spawning of windows should properly work.'.	html paragraph: [		html anchor			callback: [ self goAnchors ];			with: 'go anchors'.		html break.		html anchor			callback: [ self goButtons ];			with: 'go buttons' ]</body></methods><methods><class-id>Seaside.WAFlowConvenienceFunctionalTest</class-id> <category>controlling</category><body package="Seaside-Tests-Flow">chooseCheese	cheese := self		chooseFrom: #('Greyerzer' 'Tilsiter' 'Sbrinz')		caption: 'What''s your favorite Cheese?'.	cheese isNil ifTrue: [ self chooseCheese ]</body><body package="Seaside-Tests-Flow">confirmCheese	^ self confirm: 'Is ' , cheese , ' your favorite cheese?'</body><body package="Seaside-Tests-Flow">informCheese	self inform: 'Your favorite cheese is ', cheese, '.'</body></methods><methods><class-id>Seaside.WAFlowConvenienceFunctionalTest</class-id> <category>running</category><body package="Seaside-Tests-Flow">go	[ self chooseCheese.	  self confirmCheese ] whileFalse.	self informCheese</body></methods><methods><class-id>Seaside.WAFlowConvenienceFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Flow">states	^ Array with: self</body></methods><methods><class-id>Seaside.WAComponentCallTest</class-id> <category>tests</category><body package="Seaside-Tests-Flow">testCallSelf	| component callback |	component := WAComponent new.	callback :=  WAActionCallback new block: [ component call: component ]; yourself.	self		should: [ 			[ callback evaluateWithArgument: nil ] on: WARenderNotification do: [ :e | nil ] ]		raise: WAError</body></methods><methods><class-id>Seaside.WAFlowRenderingCallFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Flow">renderContentOn: html	html paragraph: [		html anchor			callback: [ self call: WACallDuringRenderTestComponent new ];			with: 'This link'.		html text: ' will call a Component which attempts to do a #call: in its #renderContentOn: method. This is not allowed and should trigger a descriptive error. With WAWalkbackErrorHandler enabled, the output should explain to the user the likely cause of the problem.' ]</body></methods><methods><class-id>Seaside.WACallDuringRenderTestComponent</class-id> <category>rendering</category><body package="Seaside-Tests-Flow">renderContentOn: html	self call: WAMiniCalendar new</body></methods><methods><class-id>Seaside.WAFlowErrorFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Flow">renderErrorWithCallOn: html 	html heading: 'Error in a called component'.	html paragraph: 'A message should be displayed. Once you click the button, behaviour should be identical to the Error case above without a call. If not, we may have a problem with continuations holding onto the request context.'.	html anchor		callback: [ self inform: 'Once you close this, an error will be raised.'. self raiseError ];		with: 'Raise error'</body><body package="Seaside-Tests-Flow">renderPartsOn: html	self renderErrorOn: html.	self renderErrorWithCallOn: html</body></methods><methods><class-id>Seaside.WAFlowDelegationTask</class-id> <category>running</category><body package="Seaside-Tests-Flow">go	self call: component1.	self call: component2</body></methods><methods><class-id>Seaside.WAFlowDelegationFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Flow">initialize	super initialize.	task := WAFlowDelegationTask new</body></methods><methods><class-id>Seaside.WAFlowDelegationFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Flow">renderContentOn: html	html paragraph: 'This test is just like WADelegationFunctionalTest, but it uses Flow/Continuations.'.	super renderContentOn: html</body></methods><methods><class-id>Seaside.WAFlowClosureFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Flow">ensure	[ self go ] ensure: [ self inform: 'ensure' ]</body><body package="Seaside-Tests-Flow">go	(1 to: 3) do: [ :index | self inform: index ]</body></methods><methods><class-id>Seaside.WAFlowClosureFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Flow">renderContentOn: html	html paragraph: 'The following two anchors should trigger a 3 step flow. Backtracking and spawning of windows should properly work.'.	html paragraph: [		html anchor			callback: [ self go ];			with: 'Go' ].	html paragraph 		style: 'color: red; font-weight: bold';		with: 'WARNING: FOLLOWING SECTION IS FOR DEVELOPERS ONLY'.	html paragraph: [		html text: 'The "Go with ensure" test is '.		html span style: 'color:red; font-weight:bold'; with: 'expected to fail'.		html text: ' right now, as the ensure fires during rendering. The ensure does not survive across continuations at the present time.' ].	html paragraph: [		html anchor			callback: [ self ensure ];			with: 'Go with ensure' ]</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-flow</category><body package="Seaside-Tests-Flow">seasideTestsFlow	^ self new		name: 'Seaside-Tests-Flow';		description: 'Functional tests for Seaside-Flow.';		addDependency: 'Seaside-Flow';		addDependency: 'Seaside-Tests-Functional';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WAFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WADelegationFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>task </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WADelegationTask</name><environment>Seaside</environment><super>Seaside.WATask</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component1 component2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAExceptionFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>renderError </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAFunctionalTaskTest</name><environment>Seaside</environment><super>Seaside.WATask</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class></st-source>