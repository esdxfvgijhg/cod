<?xml version="1.0"?><st-source><!-- Name: Comet-ExamplesComment: Examples for server push technology.DbIdentifier: bear73DbTrace: 492632DbUsername: jkottDbVersion: 3.2.0 - pmm.26 1DevelopmentPrerequisites: #(#(#any 'Comet-Namespace' '') #(#any 'JQuery-UI' '') #(#any 'Comet-Core' '') #(#any 'Comet-VisualWorks-Core' ''))Id: 89abc292-9ded-46d0-8b49-68d7c2acebe8Namespace: CometPackageName: Comet-ExamplesParcel: #('Comet-Examples')ParcelName: Comet-ExamplesPrerequisiteParcels: #(#('Comet-Namespace' '') #('JQuery-UI' '') #('Comet-Core' '') #('Comet-VisualWorks-Core' ''))PrintStringCache: (3.2.0 - pmm.26 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Comet-Examples-pmm.26.mczVersion: 3.2.0 - pmm.26 1Date: 12:33:47 PM September 9, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.2) of September 9, 2016 on September 9, 2016 at 12:33:47 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CTChat</name><environment>Comet</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>pusher </class-inst-vars><imports></imports><category>Comet-Examples</category><attributes><package>Comet-Examples</package></attributes></class><class><name>CTChatSession</name><environment>Comet</environment><super>Seaside.WASession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>username </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Examples</category><attributes><package>Comet-Examples</package></attributes></class><class><name>CTCounter</name><environment>Comet</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>model pusher </class-inst-vars><imports></imports><category>Comet-Examples</category><attributes><package>Comet-Examples</package></attributes></class><class><name>CTCounterModel</name><environment>Comet</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>count </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Examples</category><attributes><package>Comet-Examples</package></attributes></class><class><name>CTReport</name><environment>Comet</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>items pusher </class-inst-vars><imports></imports><category>Comet-Examples</category><attributes><package>Comet-Examples</package></attributes></class><class><name>CTReportItem</name><environment>Comet</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name phone </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Comet-Examples</category><attributes><package>Comet-Examples</package></attributes></class><class><name>CTSlider</name><environment>Comet</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>value pusher </class-inst-vars><imports></imports><category>Comet-Examples</category><attributes><package>Comet-Examples</package></attributes></class><methods><class-id>Comet.CTChat</class-id> <category>accessing</category><body package="Comet-Examples">pusher	^ self class pusher</body><body package="Comet-Examples">username	^ self session username</body><body package="Comet-Examples">users	^ (self pusher handlers		reject: [ :each | self session == each session or: [ each session username isNil ] ])		collect: [ :each | each session username ]</body></methods><methods><class-id>Comet.CTChat</class-id> <category>actions</category><body package="Comet-Examples">login: aString	"Join the chat-room with the given username aString."		aString isEmptyOrNil ifTrue: [ ^ self ].	self session username: aString.	self push: 'event' with: 'joined'</body><body package="Comet-Examples">logout	"Leave the chat-room."	self push: 'event' with: 'left'.	self session username: nil</body><body package="Comet-Examples">message: aString	"Send the message aString to the chat-room."		self push: 'message' with: aString</body></methods><methods><class-id>Comet.CTChat</class-id> <category>rendering-chat</category><body package="Comet-Examples">renderChatInputOn: html	html form		onSubmit: (html jQuery ajax			onSuccess: ((html jQuery: #input) 				value: String new;				triggerFocus);			serializeForm;			return: false);		with: [			html textInput				id: #input;				callback: [ :value | self message: value ] ]</body><body package="Comet-Examples">renderChatMessagesOn: html	html div id: 'messages'; with: [		self 			renderMessage: [				self users isEmpty					ifTrue: [ html text: 'You are the only one here!' ]					ifFalse: [						html text: 'Also there: '.						self users							do: [ :each | html text: each ]							separatedBy: [ html text: ', ' ] ] ]			class: 'event' on: html ]</body><body package="Comet-Examples">renderChatPusherOn: html	html document 		addLoadScript: (html comet			pusher: self pusher;			connect)</body><body package="Comet-Examples">renderChatStatusOn: html	html div id: 'status'; with: [		html text: 'Currently logged in as ' , self username , '. '.		html anchor			callback: [ self logout ];			with: 'Logout' ]</body></methods><methods><class-id>Comet.CTChat</class-id> <category>rendering</category><body package="Comet-Examples">renderChatOn: html	self renderChatStatusOn: html.	self renderChatMessagesOn: html.	self renderChatInputOn: html.	self renderChatPusherOn: html</body><body package="Comet-Examples">renderContentOn: html	html heading: 'Seaside Chat'.	self isLoggedIn		ifTrue: [ self renderChatOn: html ]		ifFalse: [ self renderLoginOn: html ]</body><body package="Comet-Examples">renderLoginOn: html	html form: [		html textInput			value: self username;			callback: [ :value | self login: value ].		html submitButton			text: 'Login' ]</body><body package="Comet-Examples">renderMessage: aBlock class: aString on: html	html div class: 'message'; with: [		html span class: 'user'; with: self username.		html span class: aString; with: aBlock ]</body></methods><methods><class-id>Comet.CTChat</class-id> <category>testing</category><body package="Comet-Examples">isLoggedIn	^ self username notNil</body></methods><methods><class-id>Comet.CTChat</class-id> <category>private</category><body package="Comet-Examples">push: aString with: aBlock	"This code pushes the new message to all its clients. With the exception of part 2 adding the message itself, all other parts are optional."		self pusher javascript: [ :script |		script add: ((script jQuery: #messages)		"1. limit listing to 20 messages"			children;			sliceFrom: 0 to: -19;			remove;			end;		"2. append message to bottom"			append: [ :html | self renderMessage: aBlock class: aString on: html ];			end;		"3. scroll to bottom"			scrollTop: 65536) ]</body></methods><methods><class-id>Comet.CTChat</class-id> <category>hooks</category><body package="Comet-Examples">style	^ 'a {	color: #00f;	cursor: pointer;	text-decoration: underline;	}#status {	background-color: #eee;}#messages {	height: 10em;	overflow: auto;}#messages .message {	margin-top: 0.25em;	margin-bottom: 0.25em;}#messages .message .user {	font-weight: bold;	margin-right: 1em;}#messages .message .event {	font-style: italic;}#input {	width: 100%;	background-color: #eee;}'</body></methods><methods><class-id>Comet.CTChat class</class-id> <category>accessing</category><body package="Comet-Examples">pusher	^ pusher ifNil: [ pusher := CTPusher new ]</body></methods><methods><class-id>Comet.CTChat class</class-id> <category>initialization</category><body package="Comet-Examples">initialize	| application |	application := WAAdmin register: self asApplicationAt: 'comet/chat'.	application preferenceAt: #sessionClass put: CTChatSession.	application		addLibrary: JQDeploymentLibrary;		addLibrary: CTLibrary</body></methods><methods><class-id>Comet.CTChatSession</class-id> <category>accessing</category><body package="Comet-Examples">username	^ username</body><body package="Comet-Examples">username: aString	username := aString</body></methods><methods><class-id>Comet.CTCounter</class-id> <category>rendering</category><body package="Comet-Examples">renderContentOn: html	html heading		id: #count;		with: self model count.	html paragraph: [		html anchor			onClick: (html jQuery ajax				callback: [ self decrease ]);			with: 'dec'.		html space; space; space.		html anchor			onClick: (html jQuery ajax				callback: [ self increase ]);			with: 'inc' ].	html document 		addLoadScript: (html comet			pusher: self pusher;			connect)</body></methods><methods><class-id>Comet.CTCounter</class-id> <category>accessing</category><body package="Comet-Examples">model	^ self class model</body><body package="Comet-Examples">pusher	^ self class pusher</body></methods><methods><class-id>Comet.CTCounter</class-id> <category>actions</category><body package="Comet-Examples">decrease	self model decrease.	self update: #decrease</body><body package="Comet-Examples">increase	self model increase.	self update: #increase</body></methods><methods><class-id>Comet.CTCounter</class-id> <category>private</category><body package="Comet-Examples">update: anAspect	"Update the number in all connected web browser. Only the first 3 lines are really needed, the rest adds some eye-candy and can simply be removed if not needed."	self pusher javascript: [ :script |		script &lt;&lt; (script jQuery: #count) 			text: self model count;			append: [ :html |				html span: [					html html: (anAspect = #increase						ifTrue: [ '&amp;uarr;' ]						ifFalse: [ '&amp;darr;' ]) ] ];			find: 'span'; fadeOut: 'slow' ]</body></methods><methods><class-id>Comet.CTCounter</class-id> <category>hooks</category><body package="Comet-Examples">style	^ 'body {	color: #222;	font-size: 4em;	line-height: 1.5;	text-align: center;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}h1 { font-weight: bold; }a {	color: #555;	cursor: pointer;	text-decoration: none;	}'</body></methods><methods><class-id>Comet.CTCounter class</class-id> <category>accessing</category><body package="Comet-Examples">model	^ model ifNil: [ model := CTCounterModel new ]</body><body package="Comet-Examples">pusher	^ pusher ifNil: [ pusher := CTPusher new ]</body></methods><methods><class-id>Comet.CTCounter class</class-id> <category>initialization</category><body package="Comet-Examples">initialize	| application |	application := WAAdmin register: self asApplicationAt: 'comet/counter'.	application addLibrary: JQDeploymentLibrary; addLibrary: CTLibrary</body></methods><methods><class-id>Comet.CTCounterModel</class-id> <category>accessing</category><body package="Comet-Examples">count	^ count</body><body package="Comet-Examples">count: anInteger	count := anInteger</body></methods><methods><class-id>Comet.CTCounterModel</class-id> <category>actions</category><body package="Comet-Examples">decrease	count := count - 1</body><body package="Comet-Examples">increase	count := count + 1</body></methods><methods><class-id>Comet.CTCounterModel</class-id> <category>initialization</category><body package="Comet-Examples">initialize	super initialize.	count := 0</body></methods><methods><class-id>Comet.CTReport</class-id> <category>rendering</category><body package="Comet-Examples">renderAddOn: html	html anchor		url: '#';		" append a new row to the table "		onClick: (html jQuery ajax script: [ :script |			script add: ((script jQuery: 'table') append: [ :renderer |				renderer tableRow: [					self						renderRowEdit: CTReportItem new						action: [ :item | self items add: item ]						on: renderer ] ]) ]);		with: 'Add Item'</body><body package="Comet-Examples">renderContentOn: html	html table		script: (html jQuery this			bind: 'refresh' do: (html jQuery this load				html: [ :h | self renderTableOn: h ]));		with: [ self renderTableOn: html ].	html paragraph: [		self renderAddOn: html ].	html document 		addLoadScript: (html comet			pusher: self pusher;			connect)</body><body package="Comet-Examples">renderRowEdit: anItem action: aBlock on: html	html tableData: [ 		html textInput			" focus the first input field "			script: (html jQuery this triggerFocus);			on: #name of: anItem ].	html tableData: [ 		html textInput 			on: #phone of: anItem ].	html tableData: [		html anchor			url: '#';			onClick: (html jQuery ajax				" serialize all form elements in the table "				serialize: ((html jQuery this closest: 'table') find: ':input');				" trigger a refresh on all connected tables "				html: [ :r |					aBlock value: anItem.					self pusher javascript: [ :s |						s add: ((s jQuery: 'table') 							trigger: 'refresh') ] ]);			with: 'save' ]</body><body package="Comet-Examples">renderRowEdit: anItem on: html	self renderRowEdit: anItem action: [ :item | ] on: html</body><body package="Comet-Examples">renderRowView: anItem on: html	html tableData: anItem name.	html tableData: anItem phone.	html tableData: [		html anchor			url: '#';			" replace the owning row with an editable row "			onClick: ((html jQuery this closest: 'tr') load				html: [ :r | self renderRowEdit: anItem on: r ]);			with: 'edit' ]</body><body package="Comet-Examples">renderTableOn: html	html tableRow: [		html tableHeading: 'Name'.		html tableHeading: 'Phone'.		html tableHeading ].	self items do: [ :each |		html tableRow: [			self renderRowView: each on: html ] ]</body></methods><methods><class-id>Comet.CTReport</class-id> <category>accessing</category><body package="Comet-Examples">items	^ self class items</body><body package="Comet-Examples">pusher	^ self class pusher</body></methods><methods><class-id>Comet.CTReport class</class-id> <category>accessing</category><body package="Comet-Examples">items	^ items ifNil: [ items := self defaultModel ]</body><body package="Comet-Examples">pusher	^ pusher ifNil: [ pusher := CTPusher new ]</body></methods><methods><class-id>Comet.CTReport class</class-id> <category>private</category><body package="Comet-Examples">defaultModel	^ OrderedCollection new		add: (CTReportItem new			name: 'Peter Parker';			phone: '183 045 2037';			yourself);		add: (CTReportItem new			name: 'John Hood';			phone: '602 979 3001';			yourself);		add: (CTReportItem new			name: 'Clark Kent';			phone: '497 776 2568';			yourself);		add: (CTReportItem new			name: 'Bruce Evans';			phone: '167 604 1282';			yourself);		yourself</body></methods><methods><class-id>Comet.CTReport class</class-id> <category>initialization</category><body package="Comet-Examples">initialize	| application |	application := WAAdmin register: self asApplicationAt: 'comet/report'.	application		addLibrary: JQDevelopmentLibrary;		addLibrary: CTLibrary</body></methods><methods><class-id>Comet.CTReportItem</class-id> <category>accessing</category><body package="Comet-Examples">name	^ name</body><body package="Comet-Examples">name: aString	name := aString</body><body package="Comet-Examples">phone	^ phone</body><body package="Comet-Examples">phone: aString	phone := aString</body></methods><methods><class-id>Comet.CTSlider</class-id> <category>rendering</category><body package="Comet-Examples">renderContentOn: html	html div		id: #slider;		script: (html jQuery new slider			value: self class value;			onStop: (html jQuery ajax				callback: [ :value | self class value: value asNumber ]				value: (html jQuery this slider getValue))).	html document		addLoadScript: (html comet			pusher: self class pusher;			connect)</body></methods><methods><class-id>Comet.CTSlider class</class-id> <category>accessing</category><body package="Comet-Examples">pusher	^ pusher ifNil: [ pusher := CTPusher new ]</body><body package="Comet-Examples">value	^ value ifNil: [ value := 50 ]</body><body package="Comet-Examples">value: aNumber	value := aNumber.	self pusher javascript: [ :script |		script &lt;&lt; (script jQuery: #slider) slider			action: 'value'			arguments: (Array with: value) ]</body></methods><methods><class-id>Comet.CTSlider class</class-id> <category>initialization</category><body package="Comet-Examples">initialize	| application |	application := WAAdmin register: self asApplicationAt: 'comet/slider'.	application 		addLibrary: JQDevelopmentLibrary;		addLibrary: JQUiDevelopmentLibrary;		addLibrary: JQSmoothnessTheme;		addLibrary: CTLibrary</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*comet-examples</category><body package="Comet-Examples">cometExamples	^ self new		name: 'Comet-Examples';		description: 'Examples for server push technology.';		addDependency: 'JQuery-UI';		addDependency: 'Comet-Core';		url: #seasideUrl;		yourself</body></methods><initialize><class-id>Comet.CTChat</class-id></initialize><initialize><class-id>Comet.CTCounter</class-id></initialize><initialize><class-id>Comet.CTReport</class-id></initialize><initialize><class-id>Comet.CTSlider</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>GRObject</name><environment>Grease</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grease-Core</category><attributes><package>Grease-Core</package></attributes></class><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WASession</name><environment>Seaside</environment><super>Seaside.WARequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>continuations properties documentHandlers key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Session</category><attributes><package>Seaside-Session</package></attributes></class></st-source>