<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-FunctionalComment: Functional Seaside test suite.DbIdentifier: bear73DbTrace: 492652DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.168 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Environment' '') #(#any 'Seaside-Widgets' '') #(#any 'Seaside-Tests-Core' ''))Id: 9f3d948f-4670-4187-bfef-dc6f3e14294bNamespace: SeasidePackageName: Seaside-Tests-FunctionalParcel: #('Seaside-Tests-Functional')ParcelName: Seaside-Tests-FunctionalPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Environment' '') #('Seaside-Widgets' '') #('Seaside-Tests-Core' ''))PrintStringCache: (3.2.0 - JohanBrichau.168 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Functional-JohanBrichau.168.mczVersion: 3.2.0 - JohanBrichau.168 1Date: 12:17:56 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAHtml5OrderedListTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reversed start type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAHtml5ElementsTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>output </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WATrailFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component trail </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAInputPostMultipartFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputElements hasBody ran </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAContextFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAExpirySession</name><environment>Seaside</environment><super>Seaside.WASession</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WASourceSetTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAIframeFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>batchFunctionalTest </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAPerformanceFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>duration referenceDict builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAModelFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state user pass test </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WADelegationTask</name><environment>Seaside</environment><super>Seaside.WATask</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component1 component2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAInputGetFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WACallbackSecurityFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>letter number </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAPopupFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAButtonFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>input </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAPathFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>string </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAHtml5MultipleTextInputTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emails </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WASelectionDateTableFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>table </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAFunctionalTaskTest</name><environment>Seaside</environment><super>Seaside.WATask</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WATaskErrorFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTaskTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WALotsaLinksFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WADateSelectorFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>beginDate endDate beginTime endTime beginDAT endDAT </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAHtml5MultipleFileUploadTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>files </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAAllFunctionalTests</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes current </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><comment><class-id>Seaside.WAAllFunctionalTests</class-id><body>If you want to see these examples:/config app:- add a new application named "tests"- choose WAAllFunctionalTests as the root component</body></comment><class><name>WAUrlEncodingFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>input </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAHtml5InputTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>required autofocus pattern search range email url number datetimelocal datetime date time month week color telephone </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAExpiryFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAInputElementContainer</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textInput textArea singleSelection singleSelectionOptional singleSelectionCustom multiSelection nestedSelection nestedMultiSelection checkbox radio upload hiddenInput radioCustom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WARubyFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><comment><class-id>Seaside.WARubyFunctionalTest</class-id><body>Examples taken directly from spec:http://www.w3.org/TR/2001/REC-ruby-20010531/</body></comment><class><name>WAUploadFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>file </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAManyTasksFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tasks selection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WATableReportFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>report </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WACookieFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstKey firstValue firstPath secondKey secondValue secondPath </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAPhraseElementsFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WADelayFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WADateTimeFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>date time message </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WACanvasTagTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WATreeFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selected tree </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAParentFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAPopupCloseTestComponent</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WATestsFunctionalPlatformTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WATrailTestComponent</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>count </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAImageMapFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAParameterFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wasExecuted values </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><comment><class-id>Seaside.WAParameterFunctionalTest</class-id><body>A WAParameterFunctionalTest tests whether GET and POST fields are merged in WARequest &gt;&gt; #fields.</body></comment><class><name>WAInputPostFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputElements hasBody ran </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAExceptionFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>renderError </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WACanvasTableFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAHtml5ContentTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAHtml5MediaElementsTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAMiniCalendarFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>calendar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAKeyGeneratorFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WACallbackFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transcript </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAValidationTestComponent</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAValidationDecorationFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WATrailingSlashFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WASvgFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAEncodingFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>urlencoded multipart get </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><comment><class-id>Seaside.WAEncodingFunctionalTest</class-id><body>A WAEncodingFunctionalTest test whether Seaside correctly handles non-ASCII strings. Unfortunately due to differences in server setup and source code encodings this test requires manual interaction.</body></comment><class><name>WARequestFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAEmptyTestTask</name><environment>Seaside</environment><super>Seaside.WATask</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WADelegationFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>task </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><comment><class-id>Seaside.WADelegationFunctionalTest</class-id><body>http://code.google.com/p/seaside/issues/detail?id=71</body></comment><class><name>WAHomeFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>main </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WABatchFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>batcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><class><name>WAFilterFunctionalTest</name><environment>Seaside</environment><super>Seaside.WAFunctionalTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>child </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Functional</category><attributes><package>Seaside-Tests-Functional</package></attributes></class><shared-variable><name>Unregistered</name><environment>Seaside.WAExpirySession</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Seaside-Tests-Functional</package></attributes></shared-variable><shared-variable><name>Created</name><environment>Seaside.WAExpirySession</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Seaside-Tests-Functional</package></attributes></shared-variable><methods><class-id>Seaside.WAFunctionalTest</class-id> <category>updating</category><body package="Seaside-Tests-Functional">updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: self class name greaseString</body></methods><methods><class-id>Seaside.WAFunctionalTest class</class-id> <category>testing</category><body package="Seaside-Tests-Functional">isFunctionalTest	^ self name ~= #WAFunctionalTest</body></methods><methods><class-id>Seaside.WAHtml5OrderedListTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderConfigurationOn: html	html form: [ 		html paragraph: [						self renderTypeOn: html.			html space.			self renderStartOn: html.			html space.			self renderReversedOn: html.			html space.			html submitButton ] ]</body><body package="Seaside-Tests-Functional">renderContentOn: html	self renderConfigurationOn: html.	self renderListOn: html</body><body package="Seaside-Tests-Functional">renderListOn: html	html orderedList		reversed: reversed;		start: start;		type: type;		with: [			self items do: [ :each |				html listItem: each ] ]</body><body package="Seaside-Tests-Functional">renderReversedOn: html				html checkbox		id: html nextId;		value: reversed;		callback: [ :value | reversed := value ].	html space.	html label		for: html lastId;		with: 'reversed'</body><body package="Seaside-Tests-Functional">renderStartOn: html	html label		for: html nextId;		with: 'start:'.	html space.	html numberInput		value: start;		callback: [ :value |  [ start := value greaseInteger ] on: Error do: [ :e | "ignore" nil ] ]</body><body package="Seaside-Tests-Functional">renderTypeOn: html	html label		for: html nextId;		with: 'type:'.	html space.	html select		id: html lastId;		list: self types;		selected: type;		labels: [ :s | self typesDictionary at: s ];		callback: [ :value | type:= value ]</body></methods><methods><class-id>Seaside.WAHtml5OrderedListTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">items	^ #(		'If Request-URI is an absoluteURI, the host is part of the Request-URI. Any Host header field value in the request MUST be ignored.'		'If the Request-URI is not an absoluteURI, and the request includes a Host header field, the host is determined by the Host header field value.'		'If the host as determined by rule 1 or 2 is not a valid host on the server, the response MUST be a 400 (Bad Request) error message.'	)</body><body package="Seaside-Tests-Functional">types	^ '1aAiI'</body><body package="Seaside-Tests-Functional">typesDictionary	^ Dictionary new		add: $1 -&gt; 'decimal';		add: $a -&gt; 'lower-alpha';		add: $A -&gt; 'upper-alpha';		add: $i -&gt; 'lower-roman';		add: $I -&gt; 'upper-roman';		yourself</body></methods><methods><class-id>Seaside.WAHtml5OrderedListTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	reversed := true.	start := 2.	type := $I</body></methods><methods><class-id>Seaside.WAHtml5ElementsTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderBidirectionalOn: html	html heading level2; with: '&lt;bdi&gt;'.		html unorderedList: [		html listItem: [			html text: 'User '.			html bidirectional: 'jcranmer'.			html text: ' 12 posts.' ].		html listItem: [			html text: 'User '.			html bidirectional: 'hober'.			html text: ' 5 posts.' ] ]</body><body package="Seaside-Tests-Functional">renderBidirectionalOverrideOn: html	html heading level2; with: '&lt;bdo&gt;'.		html unorderedList: [		html listItem: [			html text: 'User '.			html bidirectionalOverride				direction: 'rtl';				with: 'jcranmer'.			html text: ' 12 posts.' ].		html listItem: [			html text: 'User '.			html				bidirectionalOverride				direction: 'ltr';				with: 'hober'.			html text: ' 5 posts.' ] ]</body><body package="Seaside-Tests-Functional">renderContentOn: html	self renderFigureOn: html.	self renderMarkedOn: html.	self renderMeterOn: html.	self renderProgressOn: html.	self renderTimeOn: html.	self renderDetailsOn: html.	self renderMenuOn: html.	self renderHeadingGroupOn: html.	self renderBidirectionalOn: html.	self renderBidirectionalOverrideOn: html.	self renderOutputOn: html.	self renderTrackOn: html</body><body package="Seaside-Tests-Functional">renderDetailsOn: html	html heading level2; with: '&lt;details&gt;'.		html details: [		html summary: '[Sibley, 2000]'.		html paragraph: 'Sibley, David Allen, The Sibley Guide to Birds, (New York: Chanticleer Press, 2000) p. 247' ]</body><body package="Seaside-Tests-Functional">renderFigureOn: html	html heading level2; with: '&lt;figure&gt;'.	html figure: [		html image url: WATestingFiles / #samplePng; altText: 'sample'.		html figureCaption: 'A Sample Icon' ]</body><body package="Seaside-Tests-Functional">renderHeaderOn: html	html heading level2; with: '&lt;header&gt;'.		html header: [		html paragraph: 'Welcome to...'.		html heading level1; with: 'Voidwars!' ]</body><body package="Seaside-Tests-Functional">renderHeadingGroupOn: html	html heading level2; with: '&lt;hgroup&gt;'.		html headingGroup: [		html heading level3; with: 'Dr. Strangelove'.		html heading level4; with: 'Or: How I Learned to Stop Worrying and Love the Bomb' ]</body><body package="Seaside-Tests-Functional">renderMarkedOn: html	html heading level2; with: '&lt;mark&gt; (kitten)'.		html paragraph: [		html text: 'I also have some '.		html marked: 'kitten'.		html text: 's who are visiting me these days. They''re really cute. I think they like my garden!' ]</body><body package="Seaside-Tests-Functional">renderMenuOn: html	html heading level2; with: '&lt;menu&gt;'.	html menu: [		html command beRadio; label: 'Do 1st Command'.		html command beRadio; label: 'Do 2nd Command'.		html command beRadio; label: 'Do 3rd Command' ]</body><body package="Seaside-Tests-Functional">renderMeterOn: html	html heading level2; with: '&lt;meter&gt;'.		html meter		min: 1;		max: 100;		value: 75;		title: 'test pass rate';		with: '75%'.	html break.	html meter		min: 1;		max: 100;		low: 20;		high: 80;		optimum: 70;		value: 66;		title: 'humidity';		with: '66%'</body><body package="Seaside-Tests-Functional">renderOutputOn: html	html heading level2; with: '&lt;output&gt;'.		html form: [		html output: output.		html space.		html submitButton			callback: [ output := output + 1 ] ]</body><body package="Seaside-Tests-Functional">renderProgressOn: html	html heading level2; with: '&lt;progress&gt;'.		html progress: 'Loading'.	html break.	html progress		value: 2;		max: 3;		with: '66 %'</body><body package="Seaside-Tests-Functional">renderTimeOn: html	html heading level2; with: '&lt;time&gt;'.		html paragraph: [		html text: 'Our first date was '.		html time			datetime: '2006-09-23';			with: 'a saturday'.		html text: '.' ].		html paragraph: [		html text: 'We stopped talking at '.		html time			datetime: '2006-09-24 05:00 -7';			with: '5am the next morning'.		html text: '.' ].		html paragraph: [		html text: 'Many people get up at '.		html time: '08:00'.		html text: '.' ]</body><body package="Seaside-Tests-Functional">renderTrackOn: html	html heading level2; with: '&lt;track&gt;'.		html video		url: 'brave.webm';		with: [			html track				beSubtitles;				url: 'brave.en.vtt';				sourceLanguage: 'en';				label: 'English'.			html track				beCaptions;				url: 'brave.en.vtt';				sourceLanguage: 'en';				label: 'English for the Hard of Hearing'.			html track				beSubtitles;				url: 'brave.fr.vtt';				sourceLanguage: 'fr';				language: 'fr';				label: 'Francais'.			html track				beSubtitles;				url: 'brave.de.vtt';				sourceLanguage: 'de';				language: 'de';				label: 'Deutsch' ]</body></methods><methods><class-id>Seaside.WAHtml5ElementsTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">label	^ 'Html 5 Elements'</body></methods><methods><class-id>Seaside.WAHtml5ElementsTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	output := 0</body></methods><methods><class-id>Seaside.WATrailFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	component := WATrailTestComponent new.	trail := WATrail on: component</body></methods><methods><class-id>Seaside.WATrailFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html render: trail.	html div: component</body></methods><methods><class-id>Seaside.WATrailFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: trail with: component</body></methods><methods><class-id>Seaside.WAInputPostMultipartFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	html form		multipart;		with: [			html table: inputElements.			html div: [				self renderRequestBodyOn: html.				"div for validation"				html submitButton ] ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This form uses a multipart POST request. The upload is supposed to accept a file.'</body><body package="Seaside-Tests-Functional">renderRequestBodyOn: html	html hiddenInput		callback: [ self readRequestBody ].	html strong: 'Request Body:'.	ran		ifTrue: [ html text: (hasBody ifTrue: [ 'Success' ] ifFalse: [ 'Fail' ]) ]		ifFalse: [ html text: 'Not Run' ].	html break</body></methods><methods><class-id>Seaside.WAInputPostMultipartFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	inputElements := WAInputElementContainer new.	ran := false</body></methods><methods><class-id>Seaside.WAInputPostMultipartFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">readRequestBody	ran := true.	hasBody := self requestContext request rawBody notNil</body></methods><methods><class-id>Seaside.WAInputPostMultipartFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: inputElements</body></methods><methods><class-id>Seaside.WAContextFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	html table: [		self renderLabel: 'Codec:' value:  self requestContext codec on: html.		self renderLabel: 'Session:' value:  self requestContext session on: html.		self renderLabel: 'Application:' value:  self requestContext application on: html.		self renderLabel: 'Request:' value:  self requestContext request on: html.		self renderLabel: 'Response:' value:  self requestContext response on: html.		self renderRequestHandlersOn: html.		self renderPropertiesOn: html ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'The purpose of this test is to make sure WAContext and WACurrentContext work correctly. For each label you should see the print string of one or several matching objects. For the ''Request Handlers'' the first object should be a WASession or subclass, the second a WAApplication and then one or several WADispatchers matching the path.'</body><body package="Seaside-Tests-Functional">renderLabel: aString value: anObject on: html	html tableRow: [		html tableHeading: aString.		html tableData: anObject ]</body><body package="Seaside-Tests-Functional">renderPropertiesOn: html	html tableRow: [		html tableHeading: 'Properties:'.		html tableData: [			| properties |			properties := self requestContext properties.			properties isEmpty ifFalse: [				html definitionList: [					properties keysAndValuesDo: [ :key :value |						html definitionTerm: key.						html definitionData: value ] ] ] ] ]</body><body package="Seaside-Tests-Functional">renderRequestHandlersOn: html 	html tableRow: [		html tableHeading: 'Request Handlers:'.		html tableData: [ 			html orderedList list: self requestContext handlers ] ]</body></methods><methods><class-id>Seaside.WAExpirySession</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	Created := Created + 1</body></methods><methods><class-id>Seaside.WAExpirySession</class-id> <category>parent/child</category><body package="Seaside-Tests-Functional">unregistered	super unregistered.	Unregistered := Unregistered + 1</body></methods><methods><class-id>Seaside.WAExpirySession class</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">created	^ Created</body><body package="Seaside-Tests-Functional">unregistered	^ Unregistered</body></methods><methods><class-id>Seaside.WAExpirySession class</class-id> <category>class initialization</category><body package="Seaside-Tests-Functional">initialize	self resetCounters</body></methods><methods><class-id>Seaside.WAExpirySession class</class-id> <category>actions</category><body package="Seaside-Tests-Functional">resetCounters	Unregistered := 0.	Created := 0</body></methods><methods><class-id>Seaside.WASourceSetTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	"https://www.webkit.org/blog/2910/improved-support-for-high-resolution-displays-with-the-srcset-image-attribute/"	html paragraph: 'Example of the srcset attribute. The image contains a coloured striped pattern with some inline text that indicates which of the candidate images were selected.'.	html paragraph: 'Requires a high-resolution display and browser support. Currently only Retina and Safari/Chrome'.	html image		altText: 'Example of the srcset attribute. The image contains a coloured striped pattern with some inline text that indicates which of the candidate images were selected.';		sourceSet: 'http://webkit.org/demos/srcset/image-1x.png 1x, http://webkit.org/demos/srcset/image-2x.png 2x';		url: 'http://webkit.org/demos/srcset/image-src.png';		style: 'width: 400px; height: 400px;'</body></methods><methods><class-id>Seaside.WAIframeFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html paragraph: 'With #contents:'.	html iframe		contents: batchFunctionalTest.	html paragraph: 'With #url:'.	html iframe		url: (WATestingFiles / #samplePng).	html paragraph: 'With #document:'.	html iframe		document: WATestingFiles default samplePng		mimeType: 'image/png'.	html paragraph: 'With #document:'.	html iframe		document: WATestingFiles default samplePng		mimeType: 'image/png'.		html paragraph: 'With #callback:'.	html iframe		callback: [ self batchFunctionalTestLoop ]</body></methods><methods><class-id>Seaside.WAIframeFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	batchFunctionalTest := WABatchFunctionalTest new</body></methods><methods><class-id>Seaside.WAIframeFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">batchFunctionalTestLoop	self session presenter		show: WABatchFunctionalTest new</body></methods><methods><class-id>Seaside.WAIframeFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: batchFunctionalTest</body><body package="Seaside-Tests-Functional">style	^ 'iframe {	border: 1px solid gray;	width: 100%;}'</body></methods><methods><class-id>Seaside.WAPerformanceFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderAnchorsOn: canvas	self renderInline: [ :html | 		html unorderedList: [			html listItem: [					html anchor						name: 'name';						callback: [ ];						with: 'Anchor' ] ] ]		factor: 1		key: #anchor		on: canvas</body><body package="Seaside-Tests-Functional">renderBreakOn: canvas	self		renderInline: [ :html | html break ]		factor: 1 / 50		key: #seasideBR		on: canvas</body><body package="Seaside-Tests-Functional">renderCallbackOn: canvas	self		renderInline: [ :html | 			html button				callback: [  ];				with: '' ]		key: #callback		on: canvas</body><body package="Seaside-Tests-Functional">renderContentOn: html 	duration := 0.	referenceDict ifNil: [ referenceDict := self class referenceDict ].	self renderExplanationOn: html.	self renderAnchorsOn: html.	self renderScriptOn: html.	self renderTableOn: html.	self renderLineBreaksOn: html.	self renderCallbackOn: html.	self renderFormOn: html.	self renderIdTestOn: html.	self renderTextOn: html.	self renderHtmlTextOn: html.	self renderBreakOn: html.	self renderNativeBreakOn: html.	html div		class: 'result';		with: 'Seaside Performance Index: ' , duration greaseString</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'Test rendering speed (Reference: Intel Core I5-2500K @ 3.3GHz Seaside 3.0; Cog VM,  Pharo 1.3, ~ 9400 SPI)'</body><body package="Seaside-Tests-Functional">renderFormOn: canvas 	self 		renderInline: [ :html | 			html form: [				html button value: 'OK'.				html fileUpload.				html select					list: #('a' 'b' );					labels: [ :v | v greaseString ].				html radioButton.				html textInput					size: 20;					value: ''.				html textArea					rows: 3;					columns: 17;					value: ''.				html checkbox value: true.				html passwordInput value: 'pw' ] ]		key: #form		on: canvas</body><body package="Seaside-Tests-Functional">renderHtmlTextOn: canvas	self		renderInline: [ :html | html html: 'abcdefghijklmnopqrstuvwxyz&amp;amp;0123456789' ]		factor: 1 / 50		key: #nativeText		on: canvas</body><body package="Seaside-Tests-Functional">renderIdTestOn: canvas	self		renderInline: [ :html | 			| id1 |			id1 := html nextId.			html span				id: id1;				with: id1.			html break ]		key: #id		on: canvas</body><body package="Seaside-Tests-Functional">renderInline: aBlock factor: factor key: key on: html 	| startTime endTime count backColor anAssociation title referenceValue spi context document renderer stream runTime scale |	scale := self class scale.	count := 0.	runTime := 200.	anAssociation := referenceDict 		at: key		ifAbsent: [ 'Undefined' -&gt; 100000 ].	title := anAssociation key.	referenceValue := anAssociation value.	stream := WriteStream on: String new.	document := builder documentClass 		on: stream		codec: builder codec.	context := WARenderContext new.	context document: document.	context		actionUrl: builder actionUrl;		resourceUrl: builder resourceUrl.	renderer := builder rendererClass context: context.	builder 		openDocument: document		context: context.	html div		class: 'bench';		with: [			html heading: title.			startTime := Time millisecondClockValue.			endTime := startTime + runTime.			[ Time millisecondClockValue &lt; endTime ] whileTrue: [				count := count + 1.				renderer					render: aBlock;					flush ] ].	builder closeDocument: document.	spi := (count / referenceValue * (10000 / runTime)) rounded.	backColor := self colorFor: spi.	duration := duration + spi.	html div		class: 'spi';		with: [			html big: spi greaseString , ' SPI'.			html span				class: 'iteration';				with: '(' , count greaseString , ' iterations)'.			html break.			html div				class: 'rect';				style: 'background:' , backColor , ';width:' , (spi * scale) greaseString , 'px' ].	html div style: 'clear:both'</body><body package="Seaside-Tests-Functional">renderInline: aBlock key: key on: html	self renderInline: aBlock factor: 1 key: key on: html</body><body package="Seaside-Tests-Functional">renderLineBreaksOn: canvas	self		renderInline: [ :html |			html withLineBreaks: 'a			b			c' ]		key: #lineBreak		on: canvas</body><body package="Seaside-Tests-Functional">renderNativeBreakOn: canvas	self		renderInline: [ :html | html html: '&lt;br/&gt;' ]		factor: 1 / 50		key: #nativeBR		on: canvas</body><body package="Seaside-Tests-Functional">renderScriptOn: canvas	self renderInline: [ :html | html script: 'self.close()' ] key: #script on: canvas</body><body package="Seaside-Tests-Functional">renderTableOn: canvas	self		renderInline: [ :html | html table: [ html tableRow: [ html tableData: 'data' ] ] ] 		key: #table		on: canvas</body><body package="Seaside-Tests-Functional">renderTextOn: canvas	self		renderInline: [ :html | html text: 'abcdefghijklmnopqrstuvwxyz&amp;0123456789' ]		factor: 1 / 50		key: #seasideText		on: canvas</body></methods><methods><class-id>Seaside.WAPerformanceFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	builder := WAHtmlCanvas builder</body></methods><methods><class-id>Seaside.WAPerformanceFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">style	^ 'h1 {margin:0;padding:0;font-size:1.5em}	div.bench {padding-left:4px;position:relative;line-height:36px;width:320px;border: 1px solid #ccc;overflow:hidden;float:left;margin-bottom:2px}	div.result {margin:6px;color:#008aff;font-size:200%;font-weight:bold}	span.iteration {margin-left:6px}	div.rect {position:relative;border: 1px solid #ccc;;height:12px}	.spi{float:left;padding-left:4px;padding-top:2px}	'</body></methods><methods><class-id>Seaside.WAPerformanceFunctionalTest</class-id> <category>private</category><body package="Seaside-Tests-Functional">colorFor: spi	| colors max |	colors := self class colors.	max := 800.	spi &gt;= max ifTrue: [ ^ colors first ].	spi = 0 ifTrue: [ ^ colors last ].	^ colors at: (colors size - (spi / max * colors size) greaseInteger)</body></methods><methods><class-id>Seaside.WAPerformanceFunctionalTest class</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">colors	"(120 to: 0 by: -1) collect: [ :hue |		(Color h: hue s: 67 v: 100) asHTMLColor ]"	^ #('#00FF00' '#04FF00' '#08FF00' '#0CFF00' '#11FF00' '#15FF00' '#19FF00' '#1DFF00' '#22FF00' '#26FF00' '#2AFF00' '#2FFF00' '#33FF00' '#37FF00' '#3BFF00' '#40FF00' '#44FF00' '#48FF00' '#4CFF00' '#51FF00' '#55FF00' '#59FF00' '#5DFF00' '#62FF00' '#66FF00' '#6AFF00' '#6EFF00' '#73FF00' '#77FF00' '#7BFF00' '#80FF00' '#84FF00' '#88FF00' '#8CFF00' '#91FF00' '#95FF00' '#99FF00' '#9DFF00' '#A2FF00' '#A6FF00' '#AAFF00' '#AEFF00' '#B3FF00' '#B7FF00' '#BBFF00' '#BFFF00' '#C4FF00' '#C8FF00' '#CCFF00' '#D0FF00' '#D5FF00' '#D9FF00' '#DDFF00' '#E2FF00' '#E6FF00' '#EAFF00' '#EEFF00' '#F3FF00' '#F7FF00' '#FBFF00' '#FFFF00' '#FFFB00' '#FFF700' '#FFF300' '#FFEE00' '#FFEA00' '#FFE600' '#FFE200' '#FFDD00' '#FFD900' '#FFD500' '#FFD000' '#FFCC00' '#FFC800' '#FFC400' '#FFBF00' '#FFBB00' '#FFB700' '#FFB300' '#FFAE00' '#FFAA00' '#FFA600' '#FFA200' '#FF9D00' '#FF9900' '#FF9500' '#FF9100' '#FF8C00' '#FF8800' '#FF8400' '#FF8000' '#FF7B00' '#FF7700' '#FF7300' '#FF6E00' '#FF6A00' '#FF6600' '#FF6200' '#FF5D00' '#FF5900' '#FF5500' '#FF5100' '#FF4C00' '#FF4800' '#FF4400' '#FF4000' '#FF3B00' '#FF3700' '#FF3300' '#FF2F00' '#FF2A00' '#FF2600' '#FF2200' '#FF1D00' '#FF1900' '#FF1500' '#FF1100' '#FF0C00' '#FF0800' '#FF0400' '#FF0000')</body><body package="Seaside-Tests-Functional">referenceDict	| dict |	dict := Dictionary new.	dict at: #anchor put: 'Anchor Test' -&gt; 1800.	dict at: #script put: 'Script Test' -&gt; 5300.	dict at: #table put: 'Table Test' -&gt; 5280.	dict at: #lineBreak put: 'Line Break Test' -&gt; 4550.	dict at: #callback put: 'Callback Test' -&gt; 2130.	dict at: #form put: 'Form Test' -&gt; 270.	dict at: #id put: 'Generate ID''s Test' -&gt; 4300.	dict at: #seasideText put: 'Seaside Text Rendering Test' -&gt; 6500.	dict at: #nativeText put: 'Native Text Rendering Test' -&gt; 26000.	dict at: #seasideBR put: 'Seaside (br) Rendering Test' -&gt; 23000.	dict at: #nativeBR put: 'Native (br) Rendering Test' -&gt; 78000.	^ dict</body><body package="Seaside-Tests-Functional">scale	^ 0.8</body></methods><methods><class-id>Seaside.WAModelFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">pass	"Answer the value of pass"	^ pass</body><body package="Seaside-Tests-Functional">pass: anObject	"Set the value of pass"	pass := anObject</body><body package="Seaside-Tests-Functional">test	"Answer the value of test"	^ test</body><body package="Seaside-Tests-Functional">test: anObject	"Set the value of test"	test := anObject</body><body package="Seaside-Tests-Functional">user	"Answer the value of user"	^ user</body><body package="Seaside-Tests-Functional">user: anObject	"Set the value of user"	user := anObject</body></methods><methods><class-id>Seaside.WAModelFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderButtonOn: html	| action |	action := state == #ON ifTrue: [ #logoff ] ifFalse: [ #logon ].	html div: [		"div for validation"		html submitButton			on: action of: self ]</body><body package="Seaside-Tests-Functional">renderContentOn: html	html form		id: 'myform';		with: [			html table: [				self renderUsernameOn: html.				self renderPasswordOn: html.				self renderFeedbackOn: html ].			html div: [				self renderButtonOn: html ] ]</body><body package="Seaside-Tests-Functional">renderFeedbackOn: html	html tableRow: [		html tableData: [			html label				for: #withFeedback;				with: 'With Feedback:' ].		html tableData: [			html checkbox				id: #withFeedback;				on: #test of: self ] ]</body><body package="Seaside-Tests-Functional">renderPasswordOn: html	html tableRow: [		html tableData: [			html label				for: #pass;				with: 'Password:' ].		html tableData: [			html passwordInput				id: #pass;				on: #pass of: self ] ]</body><body package="Seaside-Tests-Functional">renderUsernameOn: html	html tableRow: [		html tableData: [			html label				for: #userid;				with: 'Username:' ].		html tableData: [			html textInput				id: #userid;				on: #user of: self ] ]</body></methods><methods><class-id>Seaside.WAModelFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">logoff	state := #OFF.	test ifTrue: [ self inform: 'Logged off' onAnswer: [ ] ]</body><body package="Seaside-Tests-Functional">logon	user isEmptyOrNil		ifTrue:			[ self inform: 'Nope !' onAnswer: [ ] ]		ifFalse:			[ state := #ON.			test ifTrue: [ self inform: 'Logged on' onAnswer: [ ] ] ]</body></methods><methods><class-id>Seaside.WADelegationTask</class-id> <category>running</category><body package="Seaside-Tests-Functional">go	self call: component1 onAnswer: [ :a1 |		self call: component2 onAnswer: [ ] ]</body></methods><methods><class-id>Seaside.WADelegationTask</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	component1 := WAFormDialog new		addMessage: 'Step 1';		yourself.	component2 := WAFormDialog new		addMessage: 'Step 2';		yourself</body></methods><methods><class-id>Seaside.WADelegationTask</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	"Even if we component1 and component2, we have to return them as children as otherwise their decorations are not properly backtracked. See WADecorationTest."		^ Array with: component1 with: component2</body></methods><methods><class-id>Seaside.WAInputGetFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	html form		get;		with: [			html table: inputElements.			html div: [				"div for validation"				html submitButton ] ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This form uses a HTTP GET request. The upload is not supposed to work.'</body></methods><methods><class-id>Seaside.WAInputGetFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	inputElements := WAInputElementContainer new</body></methods><methods><class-id>Seaside.WAInputGetFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: inputElements</body></methods><methods><class-id>Seaside.WACallbackSecurityFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html 	self renderInstructionsOn: html.	html form: [		html div: [			self renderNumberListOn: html.			self renderLetterListOn: html.			html submitButton ] ].	html paragraph: 'This should always be a NUMBER: ' , number greaseString.	html paragraph: 'This should always be a LETTER: ' , letter greaseString.	html paragraph: [		| url |		url := html actionUrl greaseString.		html anchor			url: '#';			onClick: 'swapCallbacks("' , url , '","letter-list", "number-list")';			with: 'Try to break it' ]</body><body package="Seaside-Tests-Functional">renderInstructionsOn: html	html paragraph: 'This test requires JavaScript. The list boxes should behave normally when used with the submit button. The link will try to submit the value C to the number listbox and the value 3 to the letter list box.'.	html paragraph: 'Current behaviour results in C and 3 being selected in the appropriate lists. What is essential, however, is only that the values are not selected in the wrong list because this might allow an attacker to trick seaside into running methods on the wrong objects.'</body><body package="Seaside-Tests-Functional">renderLetterListOn: html	html select		id: 'letter-list';		size: 3;		selected: letter;		list: (Array with: $A with: $B with: $C);		callback: [ :value | letter := value ]</body><body package="Seaside-Tests-Functional">renderNumberListOn: html	html select		id: 'number-list';		size: 3;		selected: number;		list: (Array with: 1 with: 2 with: 3);		callback: [ :value | number := value ]</body></methods><methods><class-id>Seaside.WACallbackSecurityFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	number := 1.	letter := $A</body></methods><methods><class-id>Seaside.WACallbackSecurityFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">script^ 'function swapCallbacks(url, list1id, list2id) {	list1 = document.getElementById(list1id);	list2 = document.getElementById(list2id);		document.location = url		+ "&amp;" + list1.name + "=" + list2.options[2].value		+ "&amp;" + list2.name + "=" + list1.options[2].value;}		'</body><body package="Seaside-Tests-Functional">states	^ Array with: self</body></methods><methods><class-id>Seaside.WAPopupFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">batchFunctionalTestLoop	self session presenter		show: WABatchFunctionalTest new</body><body package="Seaside-Tests-Functional">popupCloseTest	self session presenter show: WAPopupCloseTestComponent new</body></methods><methods><class-id>Seaside.WAPopupFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html paragraph: [ 		html popupAnchor			callback: [ self batchFunctionalTestLoop ];			with: 'popup'.		html break.		html popupAnchor			extent: 300 @ 300;			callback: [ self batchFunctionalTestLoop ];			with: 'popup with extent'.		html break.		html popupAnchor			position: 100 @ 100;			callback: [ self batchFunctionalTestLoop ];			with: 'popup with position'.		html break.		html popupAnchor			location: true;			callback: [ self batchFunctionalTestLoop ];			with: 'popup with location'.		html break.		html popupAnchor			resizable: false;			callback: [ self batchFunctionalTestLoop ];			with: 'popup not resizable'.		html break.		html popupAnchor			resizable: false;			extent: 300 @ 300;			position: 50 @ 50;			callback: [ self popupCloseTest ];			with: 'popup with close button' ]</body></methods><methods><class-id>Seaside.WAButtonFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html form: [		html div: [			self renderInputOn: html.			self renderSubmitOn: html.			self renderResetOn: html.			self renderPushOn: html ] ]</body><body package="Seaside-Tests-Functional">renderInputOn: html	html table: [		html tableRow: [			html tableHeading: 'Value:'.			html tableData: self input ].		html tableRow: [			html tableHeading: 'Input:'.			html tableData: [				html textInput					on: #input of: self ] ] ]</body><body package="Seaside-Tests-Functional">renderPushOn: html	html heading level2 with: 'Push'.	html paragraph: 'Clicking the button should not do anything.'.	html button bePush; with: 'Push'</body><body package="Seaside-Tests-Functional">renderResetOn: html	html heading level2 with: 'Reset'.	html paragraph: 'Clicking the button should not submit the form and reset the value in "Input"'.	html button beReset; with: 'Reset'</body><body package="Seaside-Tests-Functional">renderSubmitOn: html	html heading level2 with: 'Submit'.	html paragraph: 'Clicking the button should submit the form and update the value in "Value:" with the value in "Input"'.	html button with: 'Submit'</body></methods><methods><class-id>Seaside.WAButtonFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">input	^ input</body><body package="Seaside-Tests-Functional">input: aString	input := aString</body></methods><methods><class-id>Seaside.WAButtonFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	self input: 'a text'</body></methods><methods><class-id>Seaside.WAPathFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">string	^ string</body><body package="Seaside-Tests-Functional">string: anObject	string := anObject</body></methods><methods><class-id>Seaside.WAPathFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	string notNil ifTrue: [ html anchor name: string ].		html paragraph: 'Whatever you submit below should be added to the URL both as a path element and a fragment (the part after #).'.	html form: [		html div: [			html textInput on: #string of: self.			html submitButton ] ]</body></methods><methods><class-id>Seaside.WAPathFunctionalTest</class-id> <category>updating</category><body package="Seaside-Tests-Functional">updateUrl: aUrl	super updateUrl: aUrl.	string isNil ifTrue: [ ^ self ].	aUrl addToPath: string.	aUrl fragment: string</body></methods><methods><class-id>Seaside.WAHtml5MultipleTextInputTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderEmailsOn: html.	self renderFormOn: html</body><body package="Seaside-Tests-Functional">renderEmailsOn: html	emails isNil ifTrue: [ ^ self ].	html unorderedList		list: emails</body><body package="Seaside-Tests-Functional">renderFormOn: html	html form: [		html label: [			html text: 'CC: '.			html emailInput				listId: 'contacts';				multipleValuesCallback: [ :values |					emails := values ] ].		html datalist id: 'contacts'; with:  [			html option: 'hedral@damowmow.com'.			html option: 'pillar@example.com'.			html option: 'astrophy@cute.example'.			html option: 'astronomy@science.example.org' ].		html submitButton ]</body></methods><methods><class-id>Seaside.WASelectionDateTableFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: table</body></methods><methods><class-id>Seaside.WASelectionDateTableFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	table := WASelectionDateTable new		startDate: (Date year: 2012 month: 1 day: 1);		endDate: (Date year: 2012 month: 1 day: 6);		rowsAndDatesDisplay: [ :row :date |			(GRPrinter isoDate print: date), ' (', row greaseString, ')' ];		rows: (1 to: 10)		yourself</body></methods><methods><class-id>Seaside.WAFunctionalTaskTest class</class-id> <category>testing</category><body package="Seaside-Tests-Functional">isFunctionalTest	^ self name ~= #WAFunctionalTaskTest</body></methods><methods><class-id>Seaside.WATaskErrorFunctionalTest</class-id> <category>running</category><body package="Seaside-Tests-Functional">go	self confirm: 'Raise an exception?' onAnswer: [ :answer |		[ answer ifTrue: [ self error: 'foo' ] ]			on: Error			do: [ :error | self inform: 'Caught: ', error description onAnswer: [ ] ] ]</body></methods><methods><class-id>Seaside.WALotsaLinksFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html 	self renderExplanationOn: html.	html unorderedList: [		1 to: 5000 do: [ :each | 			html listItem: [				html anchor					name: each greaseString;					callback: [						self 							inform: each							onAnswer: [ self session jumpToAnchor: each greaseString ] ];					with: each ] ] ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: [		html text: 'This test serves three purposes:'.		html orderedList: [			html listItem: 'First it is a regression test, earlier versions of Seaside could only handle a limited number of callbacks per page. The oldest links (low numbers) would use their callback. Clicking on any link should display this number with a button.'.			html listItem: 'Second it serves as a raw rendering speed benchmark.'.			html listItem: 'Third it tests WASession &gt;&gt; #jumpToAnchor:. After confirming the number you should return to the page and be automatically at the place where the link is.' ] ]</body></methods><methods><class-id>Seaside.WADateSelectorFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderDateSelectorsOn: html.	html horizontalRule.	self renderTimeSelectorsOn: html.	html horizontalRule.	self renderDateTimeSelectorsOn: html</body><body package="Seaside-Tests-Functional">renderDateSelectorsOn: html 	html heading		level3;		with: 'Dates'.	html form: [		html table: [			html tableRow: [				html					tableData: 'From';					tableData: beginDate ].			html tableRow: [				html					tableData: 'To';					tableData: endDate ] ].		html div: [			html submitButton				callback: [					self 						inform: (endDate date - beginDate date) days greaseString , ' day(s)'						onAnswer: [ ] ];				text: 'Compute duration' ] ]</body><body package="Seaside-Tests-Functional">renderDateTimeSelectorsOn: html	html heading level3; with: 'Dates and Times'.	html form: [		html table: [			html tableRow: [				html tableData: 'From'; tableData: beginDAT ].			html tableRow: [				html tableData: 'To'; tableData: endDAT ] ].		html div: [			html submitButton				callback: [ self computeDuration ];				text: 'Compute duration' ] ]</body><body package="Seaside-Tests-Functional">renderTimeSelectorsOn: html 	html heading		level3;		with: 'Times'.	html form: [		html table: [			html tableRow: [				html					tableData: 'From';					tableData: beginTime ].			html tableRow: [				html					tableData: 'To';					tableData: endTime ] ].		html div: [			html submitButton				callback: [					self 						inform: (endTime time subtractTime: beginTime time) asSeconds greaseString , ' seconds(s)'						onAnswer: [ ] ];				text: 'Compute duration' ] ]</body></methods><methods><class-id>Seaside.WADateSelectorFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	beginDate := WADateSelector new.	endDate := WADateSelector new.	endDate date: (Date today addDays: 1).	beginTime := WATimeSelector new.	beginTime time: Time now.	endTime := WATimeSelector new.	endTime time: (beginTime time addSeconds: 3600).	beginDAT := WADateTimeSelector new.	endDAT := WADateTimeSelector new.	endDAT dateAndTime: beginDAT dateAndTime + 1 days + 1 hours</body></methods><methods><class-id>Seaside.WADateSelectorFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">computeDuration	| dateDiff |	dateDiff := (endDAT dateAndTime asDate - beginDAT dateAndTime asDate) days.	dateDiff isZero 		ifFalse: [			self 				inform: dateDiff greaseString , ' day(s)'				onAnswer: [ ] ]		ifTrue: [			self 				inform: (endDAT dateAndTime asTime subtractTime: beginDAT dateAndTime asTime) asSeconds greaseString , ' second(s)'				onAnswer: [ ] ]</body></methods><methods><class-id>Seaside.WADateSelectorFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ OrderedCollection new		add: beginDate;		add: endDate;		add: beginTime;		add: endTime;		add: beginDAT;		add: endDAT;		yourself</body></methods><methods><class-id>Seaside.WAHtml5MultipleFileUploadTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderUploadOn: html.	self renderFilesOn: html</body><body package="Seaside-Tests-Functional">renderFilesOn: html	files isNil ifTrue: [ ^ self ].	html unorderedList: [		files do: [ :each |			html listItem: each fileName ] ]</body><body package="Seaside-Tests-Functional">renderUploadOn: html	html form		multipart;		with: [			html div: [				"div for HTML validation"				html fileUpload					multipleValuesCallback: [ :f | files := f ].				html submitButton ] ]</body></methods><methods><class-id>Seaside.WAAllFunctionalTests</class-id> <category>actions</category><body package="Seaside-Tests-Functional">next	| nextIndex |	nextIndex := self selectionIndex \\ classes size + 1.	self selected: (classes at: nextIndex)</body><body package="Seaside-Tests-Functional">previous	| nextIndex |	nextIndex := (self selectionIndex + classes size - 2 \\ classes size) + 1.	self selected: (classes at: nextIndex)</body></methods><methods><class-id>Seaside.WAAllFunctionalTests</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	self initializeTests</body><body package="Seaside-Tests-Functional">initializeTests	classes := (WAPresenter allSubclasses select: [ :each | each isFunctionalTest ])				asSortedCollection: [ :a :b | a name &lt; b name ].	current := WAValueHolder with: classes first new</body></methods><methods><class-id>Seaside.WAAllFunctionalTests</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html heading: self class description.	html form: [		html paragraph: [			html anchor				callback: [ self previous ];				with: [ html html: '&amp;larr;' ].			html select				list: classes;				onChange: 'submit()';				selected: self selected;				labels: [ :value | value name ];				callback: [ :value | self selected: value ].			html anchor				callback: [ self next ];				with: [ html html: '&amp;rarr;' ].			html text: ' '; submitButton: 'Restart' ] ].	html horizontalRule.	html render: current contents</body></methods><methods><class-id>Seaside.WAAllFunctionalTests</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">selected	^ current contents class</body><body package="Seaside-Tests-Functional">selected: aClass	current contents: aClass new.	(current contents respondsTo: #parent:)		ifTrue: [ current contents parent: self ]</body></methods><methods><class-id>Seaside.WAAllFunctionalTests</class-id> <category>updating</category><body package="Seaside-Tests-Functional">updateUrl: aUrl	super updateUrl: aUrl.	aUrl addToPath: self selected name</body></methods><methods><class-id>Seaside.WAAllFunctionalTests</class-id> <category>private</category><body package="Seaside-Tests-Functional">selectionIndex	^ classes indexOf: self selected</body></methods><methods><class-id>Seaside.WAAllFunctionalTests</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: current contents</body><body package="Seaside-Tests-Functional">initialRequest: aRequest 	super initialRequest: aRequest.	self requestContext consumer nextIfPresentDo: [ :className | 		classes do: [ :each | 			"#greaseString is required because of Symbol &lt;-&gt; String comparison"			each name greaseString = className ifTrue: [ self selected: each ] ] ]</body><body package="Seaside-Tests-Functional">states	^ Array with: current</body></methods><methods><class-id>Seaside.WAAllFunctionalTests class</class-id> <category>testing</category><body package="Seaside-Tests-Functional">canBeRoot	^ true</body></methods><methods><class-id>Seaside.WAAllFunctionalTests class</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">description	^ 'Seaside Functional Test Suite'</body></methods><methods><class-id>Seaside.WAAllFunctionalTests class</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	(WAAdmin register: self asApplicationAt: 'tests/functional')		sessionClass: WAExpirySession</body></methods><methods><class-id>Seaside.WAUrlEncodingFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	input := 'input'</body></methods><methods><class-id>Seaside.WAUrlEncodingFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">input	^ input</body><body package="Seaside-Tests-Functional">input: aString	input := aString</body><body package="Seaside-Tests-Functional">parameter	| fieldValue request urlValue |	request := self requestContext request.	fieldValue := request at: 'input' ifAbsent: [ nil ].	urlValue := request url queryFields at: 'input' ifAbsent: [ nil ].	^ (urlValue = input and: [ fieldValue = input ])		ifTrue: [ fieldValue ]		ifFalse: [ 'fail!' ]</body><body package="Seaside-Tests-Functional">path	| path |	path := self requestContext request url path last.	^ path = input		ifTrue: [ path ]		ifFalse: [ 'fail!' ]</body></methods><methods><class-id>Seaside.WAUrlEncodingFunctionalTest</class-id> <category>updating</category><body package="Seaside-Tests-Functional">updateUrl: aUrl	super updateUrl: aUrl.	input isEmptyOrNil ifTrue: [ ^ self ].	aUrl addToPath: input.	aUrl addField: 'input' value: input</body></methods><methods><class-id>Seaside.WAUrlEncodingFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	html form		get;		with: [			html div: [				html textInput					on: #input of: self.				html submitButton ] ].			html definitionList: [		html definitionTerm: 'Input'.		html definitionData: self input.				html definitionTerm: 'Parameter'.		html definitionData: self parameter.				html definitionTerm: 'Path'.		html definitionData: self path ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This tests whether url encoding works.'.	html unorderedList: [		html listItem: [			html text: 'Go to the '.			html anchor				url: 'http://www.columbia.edu/kermit/utf8.html';				with: 'UTF-8 Sampler'.			html text: ' and select some "foreign" text.' ].		html listItem: 'Copy and paste it into the urlencoded text field below and click the submit button.'.		html listItem: 'The text should be displayed below "Input", "Parameter" and "Path" without any error.'.		html listItem: 'The text may appear in the address bar of the browser.'.		html listItem: 'Repeat this process. Make sure to pick at least every of these languages: German, Czech, Korean.' ]</body></methods><methods><class-id>Seaside.WAHtml5InputTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">autofocus	^ autofocus</body><body package="Seaside-Tests-Functional">autofocus: aString	autofocus := aString</body><body package="Seaside-Tests-Functional">color	^ color</body><body package="Seaside-Tests-Functional">color: aString	color := aString</body><body package="Seaside-Tests-Functional">date	^ date</body><body package="Seaside-Tests-Functional">date: anObject	date := anObject</body><body package="Seaside-Tests-Functional">datetime	^ datetime</body><body package="Seaside-Tests-Functional">datetime: anObject	datetime := anObject</body><body package="Seaside-Tests-Functional">datetimelocal	^ datetimelocal</body><body package="Seaside-Tests-Functional">datetimelocal: anObject	datetimelocal := anObject</body><body package="Seaside-Tests-Functional">email	^ email</body><body package="Seaside-Tests-Functional">email: anObject	email := anObject</body><body package="Seaside-Tests-Functional">label	^ 'Html 5 Input'</body><body package="Seaside-Tests-Functional">month	^ month</body><body package="Seaside-Tests-Functional">month: anObject	month := anObject</body><body package="Seaside-Tests-Functional">number	^ number</body><body package="Seaside-Tests-Functional">number: anObject	number := anObject</body><body package="Seaside-Tests-Functional">pattern	^ pattern</body><body package="Seaside-Tests-Functional">pattern: aString	pattern := aString</body><body package="Seaside-Tests-Functional">range	^ range</body><body package="Seaside-Tests-Functional">range: anObject	range := anObject</body><body package="Seaside-Tests-Functional">required	^ required</body><body package="Seaside-Tests-Functional">required: aString	required := aString</body><body package="Seaside-Tests-Functional">search	^ search</body><body package="Seaside-Tests-Functional">search: anObject	search := anObject</body><body package="Seaside-Tests-Functional">telephone	^ telephone</body><body package="Seaside-Tests-Functional">telephone: anObject	telephone := anObject</body><body package="Seaside-Tests-Functional">time	^ time</body><body package="Seaside-Tests-Functional">time: anObject	time := anObject</body><body package="Seaside-Tests-Functional">url	^ url</body><body package="Seaside-Tests-Functional">url: anObject	url := anObject</body><body package="Seaside-Tests-Functional">week	^ week</body><body package="Seaside-Tests-Functional">week: anObject	week := anObject</body></methods><methods><class-id>Seaside.WAHtml5InputTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html form: [		html table: [			html tableRow: [				html tableHeading: [ html label: 'required' ].				html tableData: [					html textInput						required;						on: #required of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'autofocus' ].				html tableData: [					html textInput						autofocus;						on: #autofocus of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'pattern ([0-9][A-Z]{3})' ].				html tableData: [					html textInput						pattern: '[0-9][A-Z]{3}';						on: #pattern of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'search' ].				html tableData: [					html searchInput						autosave: 'Seaside';						placeholder: 'placeholder ...';						results: 5;						incremental: false;						on: #search of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'range (6..12) by 2' ].				html tableData: [ html rangeInput					min: 6;					max: 12;					step: 2;					on: #range of: self.				html space.				html render: self range ] ].			html tableRow: [				html tableHeading: [ html label: 'email' ].				html tableData: [					html emailInput						on: #email of: self ].				html tableData: self email class name ].			html tableRow: [				html tableHeading: [ html label: 'url' ].				html tableData: [					html urlInput					on: #url of: self ].				html tableData: self url class name ].			html tableRow: [				html tableHeading: [ html label: 'number' ].				html tableData: [					html numberInput						on: #number of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'datetimelocal' ].				html tableData: [					html dateTimeLocalInput						on: #datetimelocal of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'datetime' ].				html tableData: [					html dateTimeInput						on: #datetime of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'date' ].				html tableData: [					html dateInput5						on: #date of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'time' ].				html tableData: [					html timeInput5						on: #time of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'month' ].				html tableData: [					html monthInput						step: 3;						on: #month of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'week' ].				html tableData: [					html weekInput						on: #week of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'color' ].				html tableData: [					html colorInput						on: #color of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'telephone' ].				html tableData: [					html telephoneInput						on: #telephone of: self ] ].			html tableRow: [				html tableHeading: [ html label: 'datalist' ].				html tableData: [ 					html textInput listId: #datalist.					html datalist id: #datalist; with: [						html option value: 'HTML 2'.						html option value: 'HTML 3.2'.						html option value: 'HTML 4.0'.						html option value: 'HTML 4.0.1'.						html option value: 'HTML 5'.						html option disabled: true; value: 'XHTML' ] ] ] ].		html submitButton ]</body></methods><methods><class-id>Seaside.WAExpiryFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">redirect	"we need to build the url we redirect to because we just expired the session in this test"	| url |	url := self application url.	url addAllToPath: self requestContext consumer upToEnd.	^ self requestContext responseGenerator		redirectTo: url;		respond</body><body package="Seaside-Tests-Functional">renderActionsOn: html	html		paragraph: [ 			html anchor				url: (self application url with: self class name);				with: 'New Session'.			html break.			html anchor				callback: [ self session unregister. self redirect ];				with: 'Expire'.			html break.			html anchor				callback: [ WAExpirySession resetCounters ];				with: 'Reset Counters'.			html break.			html anchor				callback: [ GRPlatform current seasideGarbageCollect ];				with: 'Garbage Collect'.			html break.			html anchor				callback: [ 					self application clear.					GRPlatform current seasideGarbageCollect.					self redirect ];				with: 'Clear Cache'.			html break.			html anchor				callback: [ 					self application clear.					WAExpirySession resetCounters.					GRPlatform current seasideGarbageCollect.					self redirect ];				with: 'Reset All' ]</body><body package="Seaside-Tests-Functional">renderContentOn: html	self renderStatsOn: html.	self renderActionsOn: html</body><body package="Seaside-Tests-Functional">renderStatsOn: html	html table: [		html tableRow: [			html tableHeading: 'Total session instances'.			html tableData: WAExpirySession allInstances size ].		html tableRow: [			html tableHeading: 'Cached session instances for this Application'.			html tableData: self application cache size ].		html tableRow: [			html tableHeading: 'Total component instances'.			html tableData: self class allInstances size ].		html tableRow: [			html tableHeading: 'Sessions created'.			html tableData: WAExpirySession created ].		html tableRow: [			html tableHeading: 'Sessions unregistered'.			html tableData: WAExpirySession unregistered ] ]</body></methods><methods><class-id>Seaside.WAInputElementContainer</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderHeadingOn: html.	self renderTextInputOn: html.	self renderTextAreaOn: html.	self renderHiddenInputOn: html.	self renderCheckboxOn: html.	self renderRadioButtonsOn: html.	self renderRadioButtonsCustomOn: html.	self renderSingleSelectionOn: html.	self renderSingleSelectionCustomOn: html.	self renderSingleSelectionOptionalOn: html.	self renderMultiSelectionOn: html.	self renderNestedSelectionOn: html.	self renderNestedMultiSelectionOn: html.	self renderUploadOn: html</body><body package="Seaside-Tests-Functional">renderHeadingOn: html	html tableRow: [		html tableHeading.		html tableHeading: 'Control'.		html tableHeading: 'Print String' ]</body><body package="Seaside-Tests-Functional">renderLabel: aString input: anInputBlock output: anOutputBlock on: html	html tableRow: [		html tableHeading: aString.		html tableData: anInputBlock.		html tableData: anOutputBlock ]</body></methods><methods><class-id>Seaside.WAInputElementContainer</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">elements	^ #( Quito Dakar Sydney Bamako )</body><body package="Seaside-Tests-Functional">nestedElements	^ #(('Functional' ('Haskell ' 'Lisp' 'ML')) ('Dataflow' ('Hartmann pipelines' 'G' 'Max' 'Prograph')) ('Fourth-generation' ('Today' 'Ubercode' 'Uniface')))</body></methods><methods><class-id>Seaside.WAInputElementContainer</class-id> <category>rendering-elements</category><body package="Seaside-Tests-Functional">renderCheckboxOn: html	self		renderLabel: 'Checkbox'		input: [			html label: [				html checkbox					value: checkbox;					callback: [ :value | checkbox := value ].				html text: 'Checked' ] ]		output: checkbox printString		on: html</body><body package="Seaside-Tests-Functional">renderHiddenInputOn: html	| string |	string := hiddenInput ifNil: [ 'Seaside' ].	self		renderLabel: 'Hidden Input'		input: [			html render: string.						html hiddenInput				value: string;				callback: [ :value | hiddenInput := value ] ]		output: hiddenInput printString		on: html</body><body package="Seaside-Tests-Functional">renderMultiSelectionOn: html 	self 		renderLabel: 'Multi Selection'		input: [			html multiSelect				list: self elements;				titles: [ :each | 'Title: ' , each greaseString ];				selected: multiSelection;				callback: [ :value | multiSelection := value ] ]		output: [			multiSelection isEmptyOrNil ifFalse: [				"empty lists are invalid HTML"				html unorderedList list: multiSelection ] ]		on: html</body><body package="Seaside-Tests-Functional">renderNestedMultiSelectionOn: html	| selectTag |	self		renderLabel: 'Nested Multi Selection'		input: [			selectTag := html multiSelect.			selectTag				size: 6;				callback: [ :value | nestedMultiSelection := value ];				selected: nestedMultiSelection;				with: [					self nestedElements do: [ :list |						html optionGroup							label: list first;							with: [								list second do: [ :each |									html option										value: each with: selectTag ;										with: each ] ] ] ] ]		output: [ nestedMultiSelection isNil ifFalse: [ html unorderedList list: nestedMultiSelection ] ]		on: html</body><body package="Seaside-Tests-Functional">renderNestedSelectionOn: html	| selectTag |	self		renderLabel: 'Nested Selection'		input: [			selectTag := html select.			selectTag				callback: [ :value | nestedSelection := value ];				selected: nestedSelection;				with: [					self nestedElements do: [ :list |						html optionGroup							label: list first;							with: [								list second do: [ :each |									html option										value: each with: selectTag;										with: each ] ] ] ] ]		output: nestedSelection printString		on: html</body><body package="Seaside-Tests-Functional">renderRadioButtonsCustomOn: html	self		renderLabel: 'Radiogroup (Custom)'		input: [			html radioGroup: [ :group |					self elements do: [ :each |						html label: [ 							html radioButton								group: group;								selected: radioCustom = each;								callback: [ radioCustom := each ].							html text: each ].						html break ] ] ]		output: radioCustom printString		on: html</body><body package="Seaside-Tests-Functional">renderRadioButtonsOn: html	self		renderLabel: 'Radiogroup'		input: [			html radioGroup				callback: [ :value | radio := value ];				selected: radio;				with: [ :group |					self elements do: [ :each |						html label: [ 							group radioButton value: each.							html text: each ].						html break ] ] ]		output: radio printString		on: html</body><body package="Seaside-Tests-Functional">renderSingleSelectionCustomOn: html 	self 		renderLabel: 'Single Selection (Custom)'		input: [			html select				dispatchCallback;				with: [					self elements do: [ :each |						html option							label: 'Short: ', (each copyFrom: 1 to: 3);							callback: [ singleSelectionCustom := each ];							selected: (singleSelectionCustom = each);							with: 'Custom:', each greaseString  ] ] ]		output: singleSelectionCustom printString		on: html</body><body package="Seaside-Tests-Functional">renderSingleSelectionOn: html 	self 		renderLabel: 'Single Selection'		input: [			html select				list: self elements;				titles: [ :each | 'Title: ' , each greaseString ];				selected: singleSelection;				callback: [ :value | singleSelection := value ] ]		output: singleSelection printString		on: html</body><body package="Seaside-Tests-Functional">renderSingleSelectionOptionalOn: html	self		renderLabel: 'Single Selection (Optional)'		input: [			html select				beOptional;				list: self elements;				optionalLabel: '(none)';				selected: singleSelectionOptional;				callback: [ :value | singleSelectionOptional := value ] ]		output: singleSelectionOptional printString		on: html</body><body package="Seaside-Tests-Functional">renderTextAreaOn: html	self		renderLabel: 'Text Area'		input: [			html textArea				rows: 3;				columns: 17;				value: textArea;				callback: [ :value | textArea := value ] ]		output: textArea printString		on: html</body><body package="Seaside-Tests-Functional">renderTextInputOn: html	self		renderLabel: 'Text Input'		input: [			html textInput				value: textInput;				callback: [ :value | textInput := value ] ]		output: textInput printString		on: html</body><body package="Seaside-Tests-Functional">renderUploadOn: html	self		renderLabel: 'Upload'		input: [ html fileUpload callback: [ :file | upload := file ] ]		output: upload printString		on: html</body></methods><methods><class-id>Seaside.WARubyFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderSimpleOn: html.	self renderSimpleParenthesesOn: html</body><body package="Seaside-Tests-Functional">renderSimpleOn: html	html heading level2; with: 'Simple ruby markup'.	html ruby: [		html text: 'WWW'.		html rubyText: 'World Wide Web' ]</body><body package="Seaside-Tests-Functional">renderSimpleParenthesesOn: html	html heading level2; with: 'Simple ruby markup with parentheses'.	html ruby: [		html text: 'WWW'.		html rubyParentheses: '('.		html rubyText: 'World Wide Web'.		html rubyParentheses: ')' ]</body></methods><methods><class-id>Seaside.WAUploadFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html heading: 'Upload File'.	self renderExplanationOn: html.	self renderUploadOn: html.	file isNil ifTrue: [ ^ self ].	self renderDownloadLinksOn: html.	self renderFileContentsOn: html</body><body package="Seaside-Tests-Functional">renderDownloadLinksOn: html	html paragraph: [		| contents contentType |		self renderIsByteArray: file rawContents on: html.		html break.		contentType := file contentType.		contents := (contentType isNil or: [ contentType isBinary ])			ifTrue: [ file rawContents ]			ifFalse: [				"we don't use #contentsDecoded because no browser sends them because operating systems suck at files"				file contentsDecodedUsing: 'ISO-8859-1' ].		html anchor			document: contents				mimeType: file contentType				fileName: file fileName;			with: file fileName , ' (' , file contentType greaseString , ')'.		html break.		html anchor			document: file rawContents;			with: file fileName ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'If "fail: wrong contents of WAFile" shows up then that means the contents of the WAFile are a String but should be a ByteArray.'</body><body package="Seaside-Tests-Functional">renderFileContentsOn: html 	file size &lt;= 16r10000		ifTrue: [ html preformatted: (file contentsDecodedUsing: 'ISO-8859-1') ]		ifFalse: [			html break.			html text: 'file size is: ', file size greaseString, ' bytes' ]</body><body package="Seaside-Tests-Functional">renderIsByteArray: aCollection on: html	aCollection isString ifTrue: [		html strong: 'fail: raw contents of WAFile should be a ByteArray not a String' ]</body><body package="Seaside-Tests-Functional">renderUploadOn: html	html form		multipart;		with: [			html div: [				"div for HTML validation"				html fileUpload callback: [ :f | file := f ].				html submitButton text: 'Load' ] ]</body></methods><methods><class-id>Seaside.WAManyTasksFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ tasks</body><body package="Seaside-Tests-Functional">states	^ Array with: tasks</body></methods><methods><class-id>Seaside.WAManyTasksFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html form: [ 		html div: [			html paragraph: 'Adding WAEmptyTestTask is expected to cause an infinite recursion and should raise an exception.'.			html select				list: (self taskClasses asSortedCollection: [ :a :b | a name &lt;= b name ]);				on: #contents of: selection.			html submitButton				callback: [ self addTask ];				with: 'Add'.			html submitButton				callback: [ self showTask ];				with: 'Show' ] ].	self renderTasksOn: html</body><body package="Seaside-Tests-Functional">renderTasksOn: html	tasks do: [ :each |		html div: [			html div: each.			html anchor				callback: [ tasks remove: each ];				with: '(remove task)' ] ]</body></methods><methods><class-id>Seaside.WAManyTasksFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">addTask	selection contents notNil ifTrue: [ tasks add: selection contents new ]</body><body package="Seaside-Tests-Functional">showTask	selection contents notNil ifTrue: [ self show: selection contents new ]</body></methods><methods><class-id>Seaside.WAManyTasksFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	tasks := OrderedCollection new.	selection := WAValueHolder new.	tasks add: WADelegationTask new</body></methods><methods><class-id>Seaside.WAManyTasksFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">taskClasses	^ WATask allSubclasses select: [ :each | each subclasses isEmpty ]</body></methods><methods><class-id>Seaside.WATableReportFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	report := WATableReport new		rows: WAComponent allSubclasses asArray;		columns: (OrderedCollection new			add: (WAReportColumn				selector: #fullName title: 'Name'				onClick: [ :each | self inform: each description onAnswer: [ ] ]);			add: ((WAReportColumn				selector: #canBeRoot title: 'Can Be Root')				sortBlock: [ :a :b | a ]);			add: (WAReportColumn				renderBlock: [ :each :html | html emphasis: each description ]				title: 'Description');			yourself);		rowColors: #(lightblue lightyellow);		rowPeriod: 1;		yourself</body></methods><methods><class-id>Seaside.WATableReportFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: report</body></methods><methods><class-id>Seaside.WACookieFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">cookies	^ self requestContext request cookies</body><body package="Seaside-Tests-Functional">firstCookie	^ self requestContext newCookie		key: self firstKey;		value: self firstValue;		path: self firstPath;		yourself</body><body package="Seaside-Tests-Functional">firstKey	^ firstKey</body><body package="Seaside-Tests-Functional">firstKey: aString	firstKey := aString</body><body package="Seaside-Tests-Functional">firstPath	^ firstPath</body><body package="Seaside-Tests-Functional">firstPath: aString	firstPath := aString</body><body package="Seaside-Tests-Functional">firstValue	^ firstValue</body><body package="Seaside-Tests-Functional">firstValue: aString	firstValue := aString</body><body package="Seaside-Tests-Functional">secondCookie	^ self requestContext newCookie		key: self secondKey;		value: self secondValue;		path: self secondPath;		yourself</body><body package="Seaside-Tests-Functional">secondKey	^ secondKey</body><body package="Seaside-Tests-Functional">secondKey: aString	secondKey := aString</body><body package="Seaside-Tests-Functional">secondPath	^ secondPath</body><body package="Seaside-Tests-Functional">secondPath: aString	secondPath := aString</body><body package="Seaside-Tests-Functional">secondValue	^ secondValue</body><body package="Seaside-Tests-Functional">secondValue: aString	secondValue := aString</body></methods><methods><class-id>Seaside.WACookieFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	html form: [		html table: [			self renderHeadingsOn: html.			self renderCookiesOn: html.			self renderInputOn: html ] ]</body><body package="Seaside-Tests-Functional">renderCookiesOn: html	self cookies do: [ :each |		html tableRow: [			html tableData: each key.			html tableData: each value.			html tableData: each path.			html tableData: each domain.			html tableData: each ports.			html tableData: [				html submitButton					callback: [ self remove: each ];					text: 'remove' ] ] ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html unorderedList: [		self renderFirefoxOn: html.		self renderSafariOn: html.		self renderOperaOn: html.		self renderRemoveOn: html ]</body><body package="Seaside-Tests-Functional">renderHeadingsOn: html	html tableRow: [		html tableHeading: 'Key'.		html tableHeading: 'Value'.		html tableHeading: 'Path'.		html tableHeading: 'Domain'.		html tableHeading: 'Ports'.		html tableHeading ]</body><body package="Seaside-Tests-Functional">renderInputFirstOn: html	html tableRow: [		self renderInputForCookie: #first on: html.		html tableData: [			html submitButton				on: #addFirst of: self ] ]</body><body package="Seaside-Tests-Functional">renderInputForCookie: aSymbol on: html	html tableData: [		html textInput			on: (aSymbol, #Key) asSymbol of: self ].	html tableData: [		html textInput			on: (aSymbol, #Value) asSymbol of: self ].	html tableData: [		html textInput			on: (aSymbol, #Path) asSymbol of: self ].	html tableData.	html tableData</body><body package="Seaside-Tests-Functional">renderInputOn: html	self renderInputFirstOn: html.	self renderInputSecondOn: html</body><body package="Seaside-Tests-Functional">renderInputSecondOn: html	html tableRow: [		self renderInputForCookie: #second on: html.		html tableData: [			html submitButton				on: #addBoth of: self ] ]</body></methods><methods><class-id>Seaside.WACookieFunctionalTest</class-id> <category>rendering-explanation</category><body package="Seaside-Tests-Functional">renderCombiningOn: html	html listItem: 'Setting both cookies should work in Kom and is broken in Swazoo.'</body><body package="Seaside-Tests-Functional">renderFirefoxOn: html	html listItem: 'On Firefox the path is not supposed to work. But if you look under Settings -&gt; Cookies the cookie should be saved with the correct path.'</body><body package="Seaside-Tests-Functional">renderOperaOn: html	html listItem: 'Opera is supposed to work perfectly.'</body><body package="Seaside-Tests-Functional">renderRemoveOn: html	html listItem: 'Removing should work on Firefox and Safari but only if the path is unchanged. On Opera it should delete the value and the path.'</body><body package="Seaside-Tests-Functional">renderSafariOn: html	html listItem: 'On Safari the path is not supposed to work. But if you look under Preferences -&gt; Security -&gt; Show Cookies the cookie should be saved with the correct path.'</body></methods><methods><class-id>Seaside.WACookieFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">addBoth	self requestContext response addCookie: self firstCookie.	self requestContext response addCookie: self secondCookie.		self resetFirst.	self resetSecond</body><body package="Seaside-Tests-Functional">addFirst	self requestContext response addCookie: self firstCookie.		self resetFirst</body><body package="Seaside-Tests-Functional">remove: aCookie	self requestContext response deleteCookie: aCookie</body></methods><methods><class-id>Seaside.WACookieFunctionalTest</class-id> <category>private</category><body package="Seaside-Tests-Functional">resetFirst	self firstKey: nil.	self firstValue: nil.	self firstPath: self application url pathStringUnencoded</body><body package="Seaside-Tests-Functional">resetSecond	self secondKey: nil.	self secondValue: nil.	self secondPath: self application url pathStringUnencoded</body></methods><methods><class-id>Seaside.WACookieFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	self firstPath: self application url pathStringUnencoded.	self secondPath: self application url pathStringUnencoded</body></methods><methods><class-id>Seaside.WAPhraseElementsFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderAbbreviatedOn: html	html heading level2; with: '&lt;abbr&gt;'.	html paragraph: [		html abbreviated			title: 'World Wide Web';			with: 'WWW' ]</body><body package="Seaside-Tests-Functional">renderAcronymOn: html	html heading level2; with: '&lt;acronym&gt;'.	html paragraph: [		html acronym			title: 'Federal Bureau of Investigation';			with: 'F.B.I.' ]</body><body package="Seaside-Tests-Functional">renderAddressOn: html	html heading level2; with: '&lt;address&gt;'.	html address: [		#(			'Newsletter editor'			'J.R. Brown'			'JimquickPost News, Jimquick, CT 01234'			'Tel (123) 456 7890')			do: [ :each | html text: each ]			separatedBy: [ html break ] ]</body><body package="Seaside-Tests-Functional">renderCodeOn: html	html heading level2; with: '&lt;code&gt;'.	html paragraph: [		html text: 'Expressions like '.		html code: 'a[i++] + b[i++]'.		html text: ' should not be used, since they cause undefined behavior' ]</body><body package="Seaside-Tests-Functional">renderContentOn: html	self renderHarryOn: html.	self renderAbbreviatedOn: html.	self renderAcronymOn: html.	self renderKeyboardInputOn: html.	self renderVariableOn: html.	self renderCodeOn: html.	self renderDefinitionOn: html.	self renderSampleOn: html.	self renderAddressOn: html.	self renderModificationOn: html</body><body package="Seaside-Tests-Functional">renderDefinitionOn: html	html heading level2; with: '&lt;dfn&gt;'.	html paragraph: [		html definition: 'Ichthyology'.		html text: ' is the branch of natural science which studies fish.' ]</body><body package="Seaside-Tests-Functional">renderHarryOn: html	html heading level2; with: '&lt;cite&gt;, &lt;q&gt;, &lt;strong&gt;'.	html paragraph: [		html text: 'As '.		html citation: 'Harry S. Truman'.		html text: ' said, '.		html quote: 'The buck stops here.'.		html break.		html text: 'More information can be found in '.		html citation: '[ISO-0000]'.		html text: '.'.		html break.		html text: 'Please refer to the following reference number in future correspondence: '.		html strong: '1-234-55' ]</body><body package="Seaside-Tests-Functional">renderKeyboardInputOn: html	html heading level2; with: '&lt;kbd&gt;'.	html paragraph: [		html text: 'Finally, type '.		html keyboard: 'logout'.		html text: ' and press the return key.' ]</body><body package="Seaside-Tests-Functional">renderModificationOn: html	html heading level2; with: '&lt;ins&gt;, &lt;del&gt;'.	html paragraph: [		html text: 'A Sheriff can employ '.		html deleted			title: 'Changed as a result of the SECURE bill.';			cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';			datetime: '1994-11-05T08:15:30-05:00';			with: 3.		html inserted			title: 'Changed as a result of the SECURE bill.';			cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';			datetime: '1994-11-05T08:15:30-05:00';			with: 5.		html text: ' deputies.' ]</body><body package="Seaside-Tests-Functional">renderSampleOn: html	html heading level2; with: '&lt;samp&gt;'.	html paragraph: [		html text: 'If you select the ''champion'' option, you will receive the message '.		html sample: 'The monkey is not a caterpillar'.		html text: '.' ]</body><body package="Seaside-Tests-Functional">renderVariableOn: html	html heading level2; with: '&lt;var&gt;'.	html paragraph: [		html text: 'In the simplest case, the command for deleting a file in Unix is'.		html break.		html keyboard: 'rm'.		html space.		html variable: 'filename' ]</body></methods><methods><class-id>Seaside.WADelayFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">go	self show: (WAComponent new		addMessage: '3 seconds';		addDecoration: (WADelayedAnswerDecoration new delay: 3);		yourself)</body></methods><methods><class-id>Seaside.WADelayFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html paragraph: 'Clicking the following anchor should replace it with the message "3 seconds" for 3 seconds and then restore it.'.	html paragraph: [		html anchor			callback: [ self go ];			with: 'Start' ]</body></methods><methods><class-id>Seaside.WADateTimeFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderDateTimeOn: html.	self renderDeadDateTimeOn: html</body><body package="Seaside-Tests-Functional">renderDateTimeOn: html 	html heading		level3;		with: 'Form with #dateInput and #timeInput'.	html form		defaultAction: [ message := 'Default action: ' , date greaseString , ' ' , time greaseString ];		with: [			html div: [				" use #callback: and #with: "				html dateInput					callback: [ :value | self date: value ];					with: self date.				html space: 10.				" use #on:of: "				html timeInput					withSeconds;					on: #time of: self.				html break.				html text: message.				html break.				html submitButton 					callback: [ message := 'Button action: ' , date greaseString , ' ' , time greaseString ] ] ]</body><body package="Seaside-Tests-Functional">renderDeadDateTimeOn: html	html heading		level: 3;		with: 'Div with #dateInput and #timeInput, no callback'.	html form: [		html div: [			html dateInput value: Date today.			html space: 10.			html timeInput withSeconds; with: Time now.			html break.			html withLineBreaks: 'The year portion of the date should be visible.				The seconds portion of the time should be visible.				Exactly one date and one time selector should be visible.' ] ]</body></methods><methods><class-id>Seaside.WADateTimeFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">date	^ date</body><body package="Seaside-Tests-Functional">date: aDate	date := aDate</body><body package="Seaside-Tests-Functional">time	^ time</body><body package="Seaside-Tests-Functional">time: aTime	time := aTime</body></methods><methods><class-id>Seaside.WACanvasTagTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">label	^ '&lt;canvas&gt;'</body></methods><methods><class-id>Seaside.WACanvasTagTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html script: self drawFunction.	html canvas id: 'tutorial'; width: 150; height: 150.	html script: 'drawShape()'</body></methods><methods><class-id>Seaside.WACanvasTagTest</class-id> <category>private</category><body package="Seaside-Tests-Functional">drawFunction	"http://developer.mozilla.org/samples/canvas-tutorial/2_7_canvas_combined.html"	^'function drawShape(){  // get the canvas element using the DOM  var canvas = document.getElementById(''tutorial'');  // Make sure we don''t execute when canvas isn''t supported  if (canvas.getContext){    // use getContext to use the canvas for drawing    var ctx = canvas.getContext(''2d'');    // Draw shapes    roundedRect(ctx,12,12,150,150,15);    roundedRect(ctx,19,19,150,150,9);    roundedRect(ctx,53,53,49,33,10);    roundedRect(ctx,53,119,49,16,6);    roundedRect(ctx,135,53,49,33,10);    roundedRect(ctx,135,119,25,49,10);    // Character 1    ctx.beginPath();    ctx.arc(37,37,13,Math.PI/7,-Math.PI/7,false);    ctx.lineTo(34,37);    ctx.fill();    // blocks    for(i=0;i&lt;8;i++){      ctx.fillRect(51+i*16,35,4,4);    }    for(i=0;i&lt;6;i++){      ctx.fillRect(115,51+i*16,4,4);    }    for(i=0;i&lt;8;i++){      ctx.fillRect(51+i*16,99,4,4);    }    // character 2    ctx.beginPath();    ctx.moveTo(83,116);    ctx.lineTo(83,102);    ctx.bezierCurveTo(83,94,89,88,97,88);    ctx.bezierCurveTo(105,88,111,94,111,102);    ctx.lineTo(111,116);    ctx.lineTo(106.333,111.333);    ctx.lineTo(101.666,116);    ctx.lineTo(97,111.333);    ctx.lineTo(92.333,116);    ctx.lineTo(87.666,111.333);    ctx.lineTo(83,116);    ctx.fill();    ctx.fillStyle = "white";    ctx.beginPath();    ctx.moveTo(91,96);    ctx.bezierCurveTo(88,96,87,99,87,101);    ctx.bezierCurveTo(87,103,88,106,91,106);    ctx.bezierCurveTo(94,106,95,103,95,101);    ctx.bezierCurveTo(95,99,94,96,91,96);    ctx.moveTo(103,96);    ctx.bezierCurveTo(100,96,99,99,99,101);    ctx.bezierCurveTo(99,103,100,106,103,106);    ctx.bezierCurveTo(106,106,107,103,107,101);    ctx.bezierCurveTo(107,99,106,96,103,96);    ctx.fill();    ctx.fillStyle = "black";    ctx.beginPath();    ctx.arc(101,102,2,0,Math.PI*2,true);    ctx.fill();    ctx.beginPath();    ctx.arc(89,102,2,0,Math.PI*2,true);    ctx.fill();  } else {    alert(''You need Safari or Firefox 1.5+ to see this demo.'');  }}function roundedRect(ctx,x,y,width,height,radius){  ctx.beginPath();  ctx.moveTo(x,y+radius);  ctx.lineTo(x,y+height-radius);  ctx.quadraticCurveTo(x,y+height,x+radius,y+height);  ctx.lineTo(x+width-radius,y+height);  ctx.quadraticCurveTo(x+width,y+height,x+width,y+height-radius);  ctx.lineTo(x+width,y+radius);  ctx.quadraticCurveTo(x+width,y,x+width-radius,y);  ctx.lineTo(x+radius,y);  ctx.quadraticCurveTo(x,y,x,y+radius);  ctx.stroke();}'</body></methods><methods><class-id>Seaside.WATreeFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	self renderTreeOn: html</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: [		html text: 'This is a functional test for WATree.'.		html orderedList: [			html listItem: 'Clicking on ''+'' should expand a node'.			html listItem: 'Clicking on ''-'' should collapse a node'.			html listItem: 'Clicking on a node should display its name after ''Selected:'''.			html listItem: 'Leaf nodes should not be clickable' ] ]</body><body package="Seaside-Tests-Functional">renderTreeOn: html	html strong: 'Selected:'.	html render: selected.		html render: tree</body></methods><methods><class-id>Seaside.WATreeFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	tree := WATree new		root: Collection;		labelBlock: [ :class | class name ];		childrenBlock: [ :class | class subclasses ];		selectBlock: [ :class | selected := class name ];		canSelectBlock: [ :class | class subclasses notEmpty ];		yourself</body></methods><methods><class-id>Seaside.WATreeFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: tree</body><body package="Seaside-Tests-Functional">states	^ Array with: self</body></methods><methods><class-id>Seaside.WAParentFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	self renderSwapParentOn: html</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This regression tests checks if #call:onAnswer: on the parent component works. If you click "swap parent" "Test passes!" should appear without a tab panel.'</body><body package="Seaside-Tests-Functional">renderSwapParentOn: html	html paragraph: [		html anchor			callback: [ self swap ];			with: 'swap parent' ]</body></methods><methods><class-id>Seaside.WAParentFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">parent: aComponent	parent := aComponent</body></methods><methods><class-id>Seaside.WAParentFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">swap	parent inform: 'Test passes!' onAnswer: [ ]</body></methods><methods><class-id>Seaside.WAPopupCloseTestComponent</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html anchor		callback: [ self requestContext closeThisPopup ];		with: 'Close me'.	html break.	html anchor		callback: [ self requestContext closeThisPopupAndReloadOpener ];		with: 'Close me and reload opener'</body></methods><methods><class-id>Seaside.WATestsFunctionalPlatformTest</class-id> <category>tests</category><body package="Seaside-Tests-Functional">testGarbageCollect	self 		shouldnt: [ GRPlatform current seasideGarbageCollect ]		raise: MessageNotUnderstood</body></methods><methods><class-id>Seaside.WATrailTestComponent</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	count := 1</body></methods><methods><class-id>Seaside.WATrailTestComponent</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">count: aNumber	count := aNumber</body><body package="Seaside-Tests-Functional">trailName	^ 'Item ' , count greaseString , ' (' , self identityHash greaseString , ')'</body></methods><methods><class-id>Seaside.WATrailTestComponent</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html heading		level: 1;		with: self trailName.	html anchor		callback: [ self show: (self class new count: count+1; yourself) ];		with: 'Call'.			html space.			html anchor		callback: [ self answer ];		with: 'Answer'</body></methods><methods><class-id>Seaside.WAImageMapFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html 	html heading		level: 3;		with: 'A byte array with server side map (ismap)'.	html paragraph: 'Click anywhere on the Style Editor icon and you should get informed about the position where you clicked.'.	html paragraph: [		html map			title: 'Click anywhere on the style editor icon';			callback: [ :aPoint | 				self 					inform: 'Clicked at ' , aPoint greaseString , ' on the Style Editor Icon'					onAnswer: [ ] ];			with: [				html image					altText: 'Style Editor Icon';					width: '40%';					url: WATestingFiles / #samplePng ] ]</body></methods><methods><class-id>Seaside.WAParameterFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	wasExecuted		ifTrue: [ self renderExecutedOn: html ]		ifFalse: [ self renderNotExecutedOn: html ]</body><body package="Seaside-Tests-Functional">renderExecutedOn: html	html strong: (self wasSuccessful ifTrue: [ 'success' ] ifFalse: [ 'fail' ])</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This test makes sure the server passes both GET and POST paramters to Seaside. Simply hit ''run test'' and ''success'' should be displayed. If ''fail'' is displayed or ''run test'' is displayed again then the test has failed.'</body><body package="Seaside-Tests-Functional">renderNotExecutedOn: html	html form		action: (self actionUrlFor: html);		with: [		 	html div: [				html hiddenInput					name: self parameterName;					value: self secondParameterValue.				html submitButton					callback: [ self runTest ];					text: 'run test' ] ]</body></methods><methods><class-id>Seaside.WAParameterFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	wasExecuted := false</body></methods><methods><class-id>Seaside.WAParameterFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">runTest	values := self requestContext request fields allAt: self parameterName.	wasExecuted := true</body></methods><methods><class-id>Seaside.WAParameterFunctionalTest</class-id> <category>testing</category><body package="Seaside-Tests-Functional">wasSuccessful	^ values notNil		and: [ values isCollection		and: [ values isString not		and: [ values size = 2		and: [ (values includes: self firstParameterValue)		and: [ (values includes: self secondParameterValue) ] ] ] ] ]</body></methods><methods><class-id>Seaside.WAParameterFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">actionUrlFor: html	| url |	url := html actionUrl copy.	url		addField: self parameterName		value: self firstParameterValue.	^ url</body><body package="Seaside-Tests-Functional">firstParameterValue	^ 'firstValue'</body><body package="Seaside-Tests-Functional">parameterName	^ 'parameter'</body><body package="Seaside-Tests-Functional">secondParameterValue	^ 'secondValue'</body></methods><methods><class-id>Seaside.WAInputPostFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	html form: [		html table: inputElements.		html div: [			self renderRequestBodyOn: html.			"div for validation"			html submitButton ] ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This form uses an URL-encoded POST request. The upload is not supposed to work.'</body><body package="Seaside-Tests-Functional">renderRequestBodyOn: html	html hiddenInput		callback: [ self readRequestBody ].	html strong: 'Request Body:'.	ran		ifTrue: [ html text: (hasBody ifTrue: [ 'Success' ] ifFalse: [ 'Fail' ]) ]		ifFalse: [ html text: 'Not Run' ].	html break</body></methods><methods><class-id>Seaside.WAInputPostFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	inputElements := WAInputElementContainer new.	ran := false</body></methods><methods><class-id>Seaside.WAInputPostFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">readRequestBody	ran := true.	hasBody := self requestContext request rawBody notNil</body></methods><methods><class-id>Seaside.WAInputPostFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: inputElements</body></methods><methods><class-id>Seaside.WAExceptionFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">raiseDeprecated	self 		greaseDeprecatedApi: 'WAExceptionFunctionalTest&gt;&gt;#raiseDeprecated'		details: 'Test action phase deprecation.'.	self 		inform: [ :html | 			self 				greaseDeprecatedApi: 'WAExceptionFunctionalTest&gt;&gt;#raiseDeprecated'				details: 'Test render phase deprecation.'.			html paragraph: 'To be displayed' ]		onAnswer: [ ]</body><body package="Seaside-Tests-Functional">raiseError	| result |	result := self error: 'Test Error'.	self 		inform: 'Signalling the error returned: ' , result greaseString		onAnswer: [ ]</body><body package="Seaside-Tests-Functional">raiseHalt	| context |	self halt.	"You should be able to step over the following line and have the current request context	successfully stored in the variable.	You should also (ideally anyway, it works on Squeak) be able to Inspect the value of	'self requestContext' in the Debugger and get a result.	Finally, you should be able to restart this method in the Debugger and do the above	again successfully."	context := self requestContext.	self inform: 'To be displayed' onAnswer: [ ]</body><body package="Seaside-Tests-Functional">raiseResumable	1 / 0.	self inform: 'To be displayed' onAnswer: [ ]</body><body package="Seaside-Tests-Functional">raiseWarning	self notify: 'Test Warning'.	self inform: 'To be displayed' onAnswer: [ ]</body></methods><methods><class-id>Seaside.WAExceptionFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html div class: 'errorTest'; with: [		self renderHandlerConfigurationOn: html.		self renderPartsOn: html ]</body><body package="Seaside-Tests-Functional">renderDeprecatedOn: html 	html heading: 'Deprecated'.	html paragraph: 'The link should cause a deprecated warning to appear in the toolbar. Clicking on the link should display a single action and a single render deprecation.'.	html anchor		callback: [ self raiseDeprecated ];		with: 'Raise deprecated'</body><body package="Seaside-Tests-Functional">renderErrorOn: html 	html heading: 'Error'.	html paragraph: 'Behaviour is exception-handler-dependent. If a Debugger is opened, closing the debugger window should at least result in the socket being closed and should not lock the session. Proceeding from the Debugger should be handled gracefully but behaviour is platform-dependent. On Pharo and GemStone, you should see an error page in the browser. On VW, you should see a message indicating that nil was returned.'.	html anchor		callback: [ self raiseError ];		with: 'Raise error'</body><body package="Seaside-Tests-Functional">renderHaltOn: html 	html heading: 'Halt'.	html paragraph: 'Behaviour is handler-dependent. In most cases, a Debugger should open in in the image. There are comments in the #raiseHalt method suggesting other things that should be tested from within the Debugger. Clicking on proceed should display the information message "To be displayed".'.	html anchor		callback: [ self raiseHalt ];		with: 'Halt execution'</body><body package="Seaside-Tests-Functional">renderHandlerConfigurationOn: html	| attribute filter |	filter := self exceptionFilter.	filter isNil ifTrue: [		html paragraph: 'Exception handler configuration attribute not found!'.		^ self ].	attribute := filter configuration attributeAt: #exceptionHandler.	html form: [		html div: [			html select				beOptional;				optionalLabel: '(inherited default)';				list: attribute options asArray;				selected: (filter configuration at: attribute key);				callback: [ :value | 					value isNil						ifTrue: [ filter configuration removeExpressionAt: attribute key ifAbsent: [ ] ]						ifFalse: [ filter configuration takeValue: value forAttribute: attribute ] ].			html submitButton with: 'Set Handler' ] ]</body><body package="Seaside-Tests-Functional">renderPartsOn: html	self renderHaltOn: html.	self renderErrorOn: html.	self renderPostErrorOn: html.	self renderRenderErrorOn: html.	self renderResumableErrorOn: html.	self renderWarningOn: html.	self renderDeprecatedOn: html</body><body package="Seaside-Tests-Functional">renderPostErrorOn: html 	html heading: 'POST Error'.	html paragraph: 'Behaviour should be like ''Error''.'.	html form		post;		with: [			html button				callback: [ self raiseError ];			with: 'Raise error' ]</body><body package="Seaside-Tests-Functional">renderRenderErrorOn: html	"This is really hacky. We're trying to avoid depending on Flow here. Don't try this	at home kids."	renderError ifTrue: [		"To fix the 'bug' evaluate the line below		renderError := false. "		self error: 'Error during rendering.' ].		html heading: 'Error During Rendering'.	html paragraph: 'This will trigger an error during the next render phase.'.	html anchor		callback: [ renderError := true ];		with: 'Raise error'</body><body package="Seaside-Tests-Functional">renderResumableErrorOn: html 	html heading: 'Resumable error'.	html paragraph: 'Behaviour is handler-dependent. If a Debugger is opened, clicking on proceed should display the message "To be displayed".'.	html anchor		callback: [ self raiseResumable ];		with: 'Raise zero divide'</body><body package="Seaside-Tests-Functional">renderWarningOn: html 	html heading: 'Warning'.	html paragraph: 'In Pharo and GemStone the warning test works the same as the resumable error test.'.	html paragraph: 'In VisualWorks the warning test works the same as the halt test.'.	html anchor		callback: [ self raiseWarning ];		with: 'Raise warning'</body></methods><methods><class-id>Seaside.WAExceptionFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">exceptionFilter	^ self application filters detect: [ :each | each isExceptionFilter ] ifNone: [ nil ]</body></methods><methods><class-id>Seaside.WAExceptionFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	renderError := false</body></methods><methods><class-id>Seaside.WACanvasTableFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html div		class: 'wacanvastabletest';		with: [			self renderEntityTableOn: html.			self renderCurrencyTableOn: html ]</body><body package="Seaside-Tests-Functional">renderCurrencyTableBodyOn: html	html tableBody 		title: 'Table body';		with: [			self exchangeRates do: [ :each |				html tableRow: [					html tableHeading: each first.					"https://bugzilla.mozilla.org/show_bug.cgi?id=2212					https://bugzilla.mozilla.org/show_bug.cgi?id=915"					html tableData						align: 'char';						character: $.;						with: each second ] ] ]</body><body package="Seaside-Tests-Functional">renderCurrencyTableHeadOn: html	html tableHead		title: 'Table header';		with: [			html tableRow: [				html tableHeading: 'Currency'.				html tableHeading: 'Rate' ] ]</body><body package="Seaside-Tests-Functional">renderCurrencyTableOn: html	html table 		summary: 'This table shows exchange rates against the Swiss Franc';		with: [			html tableCaption: 'Currencies against Swiss Franc (CHF)'.			html tableColumnGroup.			html tableColumnGroup width: '100px'; align: 'char'; character: $..			self renderCurrencyTableHeadOn: html.			self renderCurrencyTableBodyOn: html ]</body><body package="Seaside-Tests-Functional">renderEntityTableBodyOn: html	html tableBody: [		self entities do: [ :eachEntity |			html tableRow: [				html tableData scope: 'row';					with: eachEntity first.				eachEntity second do: [ :each |					html tableData: each ].				eachEntity second do: [ :each |					html tableData align: 'center';						with: [ html html: each ] ] ] ] ]</body><body package="Seaside-Tests-Functional">renderEntityTableColumnGroupsOn: html	html tableColumnGroup.	html tableColumnGroup span: 3.	html tableColumnGroup span: 3; align: 'center'</body><body package="Seaside-Tests-Functional">renderEntityTableFootOn: html	html tableFoot: [		html tableRow: [			html tableData align: 'center'; colSpan: 7;				with: '5 entities shown' ] ]</body><body package="Seaside-Tests-Functional">renderEntityTableHeadOn: html	html tableHead: [		html tableRow: [			#('Character' 'Entity' 'Decimal' 'Hex') do: [ :each |				html tableHeading					scope: 'col'; rowSpan: 2;					with: each ].			html tableHeading				scope: 'colgroup'; colSpan: 3;				with: 'Rendering in Your Browser' ].		html tableRow: [			#('Entity' 'Decimal' 'Hex') do: [ :each |				html tableHeading scope: 'col'; with: each ] ] ]</body><body package="Seaside-Tests-Functional">renderEntityTableOn: html	html table 		summary: 'This table gives the character entity reference, ',                'decimal character reference, and hexadecimal character ',                'reference for 8-bit Latin-1 characters, as well as the ',                'rendering of each in your browser.';		with: [			html tableCaption: 'HTML 4.0 entities'.			self renderEntityTableColumnGroupsOn: html.			self renderEntityTableHeadOn: html.			self renderEntityTableFootOn: html.			self renderEntityTableBodyOn: html ]</body></methods><methods><class-id>Seaside.WACanvasTableFunctionalTest</class-id> <category>samples</category><body package="Seaside-Tests-Functional">entities	^ #(		('non-breaking space' ('&amp;nbsp;' '&amp;#160;' '&amp;#xA0;'))		('ampersand' ('&amp;amp;' '&amp;#38;' '&amp;#x26;'))		('less than sign' ('&amp;lt;' '&amp;#60;' '&amp;#x3C;'))		('greater than sign' ('&amp;gt;' '&amp;#62;' '&amp;#x3E;'))		('euro sign' ('&amp;euro;' '&amp;#8364;' '&amp;#x20AC;'))	)</body><body package="Seaside-Tests-Functional">exchangeRates	^ #(		('EUR' 1.70)		('USD' 1.30)		('DKK' 23.36)		('SEK' 19.32)	)</body></methods><methods><class-id>Seaside.WACanvasTableFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">style	^ '.wacanvastabletest table {	border-collapse: collapse;	border:1px solid black;	margin:0px auto; /* center */}.wacanvastabletest caption {	margin:0px auto; /* center */}.wacanvastabletest caption {	font-weight: bold;	padding: 0.5em 0 1em 0;}.wacanvastabletest td, .wacanvastabletest th {	padding: 3px;	border:1px solid black;}'</body></methods><methods><class-id>Seaside.WAHtml5ContentTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html header: [		html heading level1;			with: [				html anchor					url: 'http://www.elharo.com/blog';					with: 'Mokka mit Schlag' ] ].	html section: [		html article: [			html heading level2;				with: [					html anchor						url: '/blog/birding/2007/04/23/spring-comes-and-goes-in-sussex-county/';						with: 'Spring Comes (and Goes) in Sussex County' ].				html paragraph: 'Yesterday I joined the Brooklyn Bird Club for our annual trip to Western New Jersey, specifically Hyper Humus, a relatively recently discovered hot spot. It started out as a nice winter morning when we arrived at the site at 7:30 A.M., progressed to Spring around 10:00 A.M., and reached early summer by 10:15.' ].		html article: [			html heading level2;				with: [					html anchor						url: '/blog/birding/2007/04/23/but-does-it-count-for-your-life-list/';						with: 'But does it count for your life list?' ].			html paragraph: [				html text: 'Seems you can now go '.				html anchor					url: 'http://www.wired.com/science/discoveries/news/ 2007/04/cone_sf';					with: 'bird watching via the Internet'.				html text: '. I haven''t been able to test it out yet (20 user limit apparently) but this is certainly cool. Personally, I can''t imagine it replacing actually being out in the field by any small amount. On the other hand, I''ve always found it quite sad to meet senior birders who are no longer able to hold binoculars steady or get to the park. I can imagine this might be of some interest to them. At least one elderly birder did a big year on TV, after he could no longer get out so much. This certainly tops that.' ] ] ].		html navigation: [		html anchor			url: '/blog/page/2/';			with: '&lt;&lt; Previous Entries' ].			html navigation: [		html unorderedList: [			html listItem: [				html heading level2;					with: 'Info'.				html unorderedList: [					html listItem: [						html anchor							url: '/blog/comment-policy/';							with: 'Comment Policy' ].					html listItem: [						html anchor							url: '/blog/todo-list/';							with: 'Todo List' ] ] ].			html listItem: [				html heading level2;					with: 'Archives'.				html unorderedList: [					html listItem: [						html anchor							url: '/blog/2007/04/';							with: 'April 2007' ].					html listItem: [						html anchor							url: '/blog/2007/02/';							with: 'February 2007' ] ] ].					html listItem: [						html anchor							url: '/blog/2007/01/';							with: 'January 2007' ] ] ].					html aside: [		html heading level3			with: '.xf-value'.		html paragraph: [			html text: 'The '.			html code: '.xf-value'.			html text: ' selector used here styles the input field value but not its label. This is actually inconsistent with the current CSS3 draft. The example really should use the '.			html code: '::value'.			html text: 'pseudo-class instead like so:' ].		html preformatted: 'input::value { width: 20em; }#ccnumber::value { width: 18em }#zip::value { width: 12em }#state::value { width: 3em  }'. 		html paragraph: 'However, Firefox doesn''t yet support this syntax' ].					html footer: [		html paragraph: 'Copyright 2007 Elliotte Rusty Harold' ]</body></methods><methods><class-id>Seaside.WAHtml5ContentTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">label	^ 'Html 5 Content Model'</body></methods><methods><class-id>Seaside.WAHtml5MediaElementsTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderAudioOn: html	html heading level2; with: '&lt;audio&gt;'.	html audio		url: 'http://upload.wikimedia.org/wikipedia/commons/9/94/Mix.ogg';		autoplay: true;		controls: true;		loop: true;		preload: true</body><body package="Seaside-Tests-Functional">renderContentOn: html	self renderVideoOn: html.	self renderAudioOn: html</body><body package="Seaside-Tests-Functional">renderVideoOn: html	html heading level2; with: '&lt;video&gt;'.	html video 		url: 'http://people.opera.com/howcome/2007/video/A_New_Computer--small.ogg';		autoplay: true;		controls: true;		loop: true;		preload: true;		poster: 'http://seaside.st/styles/logo-plain.png';		width: 360; height: 240;		with: 'Theora decoder not found'</body></methods><methods><class-id>Seaside.WAMiniCalendarFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html render: calendar.	html div: [		html strong: 'selected:'.		html space.		html render: calendar date ]</body></methods><methods><class-id>Seaside.WAMiniCalendarFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	calendar := WAMiniCalendar new</body></methods><methods><class-id>Seaside.WAMiniCalendarFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: calendar</body></methods><methods><class-id>Seaside.WAKeyGeneratorFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	key isNil		ifTrue: [ self renderKeyGeneratorOn: html ]		ifFalse: [ self renderKeyOn: html ]</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This test should display a dialog for creating a secret key. After submitting the form the public key should be displayed.'.	html paragraph: 'This test does not work on IE'</body><body package="Seaside-Tests-Functional">renderKeyGeneratorOn: html	html form: [		html keyGenerator			callback: [ :k | key := k ].		html submitButton ]</body><body package="Seaside-Tests-Functional">renderKeyOn: html	html render: key</body></methods><methods><class-id>Seaside.WACallbackFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">append: aString	transcript nextPutAll: aString; nextPut: Character cr</body></methods><methods><class-id>Seaside.WACallbackFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html 	html paragraph: 'Depending on the way the form is submitted the following actions should be triggered and logged:'.	html orderedList list: #( 		'Default: Text, Default'		'Before: Text'		'Before Submit: Text, Before Submit'		'Before Cancel: Before Cancel'		'After: Text'		'After Submit: Text, After Submit'		'After Cancel: After Cancel'	).	html form		defaultAction: [ self append: 'Default' ] ;		with: [			html div: [				"div for validation"				html submitButton					text: 'Before'.				html submitButton					callback:  [ self append: 'Before Submit' ];					text: 'Before Submit'.				html cancelButton					callback:  [ self append: 'Before Cancel' ];					text: 'Before Cancel'.				html break.				html textInput					value: 'Some Text';					callback: [ :value | self append: 'Text: ' , value ].				html break.				html submitButton					text: 'After'.				html submitButton					callback:  [ self append: 'After Submit' ];					text: 'After Submit'.				html cancelButton					callback:  [ self append: 'After Cancel' ];					text: 'After Cancel' ] ].	html preformatted: transcript contents.	transcript reset</body></methods><methods><class-id>Seaside.WACallbackFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	transcript := WriteStream on: String new</body></methods><methods><class-id>Seaside.WAValidationTestComponent</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html anchor		callback: [			self answer: false ];		with: 'Fail validation'.	html break.	html anchor		callback: [			self answer: true ];		with: 'Suceed validation'</body></methods><methods><class-id>Seaside.WAValidationDecorationFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	self renderValidationOn: html</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: [		html text: 'This is a functional test for WAValidationDecoration.'.		html orderedList: [			html listItem: 'Clicking on ''Start'' should take you to a new page with two links, "Fail validation" and "Suceed validation"'.			html listItem: 'Clicking on "Fail validation" should display "Validation Failed!" above the two links'.			html listItem: 'Clicking on "Suceed validation" should just display "Validation Suceeded!" and then take you back to this page' ] ]</body><body package="Seaside-Tests-Functional">renderValidationOn: html	html anchor		callback: [ self startValidation ];		with: 'Start'</body></methods><methods><class-id>Seaside.WAValidationDecorationFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">startValidation	self call: (WAValidationTestComponent new		validateWith: [ :value |			value ifFalse: [				WAValidationNotification signal: 'Validation Failed!' ] ];		yourself).	self inform: 'Validation Suceeded!'</body></methods><methods><class-id>Seaside.WATrailingSlashFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	self renderLinksOn: html</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html paragraph: 'This tests whether the sever adapter correctly passes the tailing slash of the request URL to the request context.'.	html paragraph: 'Click each of the links below, and the status should change from "not run" to "success".'</body><body package="Seaside-Tests-Functional">renderLinksOn: html	html table: [		html tableRow: [			html tableData: [				self renderSlashSuccess: true on: html ].			html tableData: [				html anchor				url: (self baseUrlWithSlash: true);				with: 'With Slash' ] ].				html tableRow: [			html tableData: [				self renderSlashSuccess: false on: html ].			html tableData: [				html anchor				url: (self baseUrlWithSlash: false);				with: 'Without Slash' ] ] ]</body></methods><methods><class-id>Seaside.WATrailingSlashFunctionalTest</class-id> <category>private</category><body package="Seaside-Tests-Functional">baseUrlWithSlash: aBoolean 	^ self application url		addToPath: self class name greaseString;		addField: 'slash'			value: aBoolean greaseString;		slash: aBoolean;		yourself</body><body package="Seaside-Tests-Functional">renderSlashSuccess: aBoolean on: html 	| request hasTrailingSlash expectedSlash |	request := self requestContext request.	hasTrailingSlash := request url slash.	expectedSlash := request fields 		at: 'slash'		ifAbsent: [ nil ].	expectedSlash isNil 		ifTrue: [ html strong: 'not run' ]		ifFalse: [			aBoolean greaseString = expectedSlash 				ifTrue: [					hasTrailingSlash greaseString = expectedSlash 						ifTrue: [ html strong: 'success' ]						ifFalse: [ html strong: 'fail' ] ]				ifFalse: [ html strong: 'not run' ] ]</body></methods><methods><class-id>Seaside.WASvgFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html object		type: 'image/svg+xml' seasideMimeType;		width: 512;		height: 512;		standby: 'loading tiger';		url: 'http://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg';		with: 'Your browser doesn''t support SVG'</body></methods><methods><class-id>Seaside.WAEncodingFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderCharacterByCharacter: aString on: html	"Display aString character by character, but wrap each character into a span so it ends up individually in the output stream. If the codec does not convert to the internal encoding of Smalltalk the result is broken. Either choose an appropriate codec or be aware of the concequences."		self requestContext codec name = '(none)'	"Character by character rendering will fail for the NullCoded in case of multi byte characters. Don't test it."		ifTrue: [ ^ self ].	aString 	do: [ :each | html span: each ]</body><body package="Seaside-Tests-Functional">renderClassName: aString on: html 	aString isNil ifTrue: [ ^ self ].	html paragraph: [		html strong: 'Class: '.		html text: aString class name ]</body><body package="Seaside-Tests-Functional">renderContentOn: html	self renderExplanationOn: html.	self renderUrlencodedOn: html.	self renderMultipartOn: html.	self renderGetOn: html</body><body package="Seaside-Tests-Functional">renderExplanationOn: html	html unorderedList: [		html listItem: [			html text: 'Go to the '.			html anchor				url: 'http://www.columbia.edu/kermit/utf8.html';				with: 'UTF-8 Sampler'.			html text: ' and select some "foreign" text.' ].		html listItem: 'Copy and paste it into the urlencoded text field below and click the submit button.'.		html listItem: 'The heading, textfield, character field and submitt button should all display the text without any error.'.		html listItem: 'Submit again without changing anything, again everything should display normally.'.		html listItem: 'Repeat this process for the multipart field. Make sure to pick at least every of these languages: German, Czech, Korean.' ]</body><body package="Seaside-Tests-Functional">renderGetOn: html	html heading level2;		with: 'GET'.	html heading level3;		with: self get.	self renderCharacterByCharacter: self get on: html.	html form		get;		with: [			html div: [				html textInput					on: #get of: self.				html submitButton					text: self get ] ].	self renderClassName: self get on: html</body><body package="Seaside-Tests-Functional">renderMultipartOn: html	html heading level2;		with: 'Multipart'.	html heading level3;		with: self multipart.	self renderCharacterByCharacter: self multipart on: html.	html form		multipart;		with: [			html div: [				html textInput					on: #multipart of: self.				html submitButton					text: self multipart ] ].	self renderClassName: self multipart on: html</body><body package="Seaside-Tests-Functional">renderUrlencodedOn: html	html heading level2;		with: 'Urlencoded'.	html heading level3;		with: self urlencoded.	self renderCharacterByCharacter: self urlencoded on: html.	html form: [		html div: [			html textInput				on: #urlencoded of: self.			html submitButton				text: self urlencoded ] ].	self renderClassName: self urlencoded on: html</body></methods><methods><class-id>Seaside.WAEncodingFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">get	^ get</body><body package="Seaside-Tests-Functional">get: aString	get := aString</body><body package="Seaside-Tests-Functional">multipart	^ multipart</body><body package="Seaside-Tests-Functional">multipart: aString	multipart := aString</body><body package="Seaside-Tests-Functional">urlencoded	^ urlencoded</body><body package="Seaside-Tests-Functional">urlencoded: aString	urlencoded := aString</body></methods><methods><class-id>Seaside.WAEncodingFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	self urlencoded: 'urlencoded'.	self multipart: 'multipart'.	self get: 'get'</body></methods><methods><class-id>Seaside.WARequestFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderAcceptCharsetFor: aRequest on: html	html definitionTerm: 'Accept-Charset:'.	self renderQualifiedValues: aRequest acceptCharset on: html</body><body package="Seaside-Tests-Functional">renderAcceptEncodingFor: aRequest on: html	html definitionTerm: 'Accept-Encoding:'.	self renderQualifiedValues: aRequest acceptEncoding on: html</body><body package="Seaside-Tests-Functional">renderAcceptFor: aRequest on: html	html definitionTerm: 'Accept:'.	self renderQualifiedValues: aRequest accept on: html</body><body package="Seaside-Tests-Functional">renderAcceptLanguageFor: aRequest on: html	html definitionTerm: 'Accept-Language:'.	self renderQualifiedValues: aRequest acceptLanguage on: html</body><body package="Seaside-Tests-Functional">renderContentOn: html	| request |	html paragraph: 'This tests whether the server delivers the remote address correctly and headers can be parsed correctly.'.	request := self requestContext request.	html definitionList: [		self renderRemoteAddressFor: request on: html.		self renderSslSessionIdFor: request on: html.		self renderAcceptFor: request on: html.		self renderAcceptCharsetFor: request on: html.		self renderAcceptEncodingFor: request on: html.		self renderAcceptLanguageFor: request on: html.		self renderOtherHeadersFor: request on: html ]</body><body package="Seaside-Tests-Functional">renderOtherHeadersFor: aRequest on: html	aRequest headers keys sorted do: [ :each |		(#('accept-charset' 'accept-encoding' 'accept' 'accept-language' 'cookie' '') includes: each) ifFalse: [			html definitionTerm: each, ':'.			html definitionData: (aRequest headerAt: each) ] ]</body><body package="Seaside-Tests-Functional">renderQualifiedValue: aQualifiedValue on: html	html listItem: [		| quality |		html render: aQualifiedValue value.		quality := aQualifiedValue quality.		quality = Float infinity			ifTrue: [ html superscript: [ html html: '&amp;infin;' ] ]			ifFalse: [ html superscript: quality ] ]</body><body package="Seaside-Tests-Functional">renderQualifiedValues: aCollection on: html	html definitionData: [		aCollection isNil			ifTrue: [ html text: 'N/A' ]			ifFalse: [				html orderedList: [					aCollection do: [ :each |						self renderQualifiedValue: each on: html ] ] ] ]</body><body package="Seaside-Tests-Functional">renderRemoteAddressFor: aRequest on: html	html definitionTerm: 'Remote Address:'.	html definitionData: aRequest remoteAddress</body><body package="Seaside-Tests-Functional">renderSslSessionIdFor: aRequest on: html	aRequest isSsl ifTrue: [		html definitionTerm: 'SSL Session Id:'.		html definitionData: aRequest sslSessionId ]</body></methods><methods><class-id>Seaside.WAEmptyTestTask</class-id> <category>running</category><body package="Seaside-Tests-Functional">go	"do nothing. I wonder what happens?"</body></methods><methods><class-id>Seaside.WADelegationFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	task := WADelegationTask new</body></methods><methods><class-id>Seaside.WADelegationFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html orderedList: [		html listItem: 'Click button of Step 1'.		html listItem: 'Click back-button'.		html listItem: 'Click button of Step 1'.		html listItem: 'Click button of Step 2' ].	html paragraph: 'Step 1 and Step 2 should have consistent number of visible presenters. Especially there should never be two WAAnswerDecorations.'.		html heading level: 2; with: 'Application'.	html render: task.		html heading level: 2; with: 'Visible Presenters'.	html table: [		html tableRow: [			html tableHeading: 'Presenter'.			html tableHeading.			html tableHeading: 'Next'.			html tableHeading ].		self visiblePresentersDo: [ :each |			html tableRow: [				html tableData: each printString.				html tableData: each identityHash.				html tableData: (each isDecoration					ifTrue: [ each next printString ]					ifFalse: [ each decoration printString ]).				html tableData: (each isDecoration					ifTrue: [ each next identityHash ]					ifFalse: [ each decoration identityHash ]) ] ] ]</body></methods><methods><class-id>Seaside.WADelegationFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: task</body></methods><methods><class-id>Seaside.WAHomeFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html paragraph: 'Clicking home should always bring back the root component.'.	html paragraph: [		html anchor			callback: [ main show: (self message: 'Called Component') ];			with: 'call'.		html space.		html anchor			callback: [ main home ];			with: 'home' ].	html render: main</body></methods><methods><class-id>Seaside.WAHomeFunctionalTest</class-id> <category>accessing</category><body package="Seaside-Tests-Functional">message: aString	^ WAComponent new		addMessage: aString;		yourself</body></methods><methods><class-id>Seaside.WAHomeFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	main := self message: 'Root Component'</body></methods><methods><class-id>Seaside.WAHomeFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: main</body></methods><methods><class-id>Seaside.WABatchFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderContentOn: html	html render: batcher.	html unorderedList		list: batcher batch</body></methods><methods><class-id>Seaside.WABatchFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	batcher := WAAlphabeticBatchedList new items: Collection allSubclasses</body></methods><methods><class-id>Seaside.WABatchFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: batcher</body></methods><methods><class-id>Seaside.WAFilterFunctionalTest</class-id> <category>rendering</category><body package="Seaside-Tests-Functional">renderActionsOn: html	html paragraph: [		html anchor			callback: [ self authentication ];			with: 'Basic Authentication'.		html text: ' (admin/seaside)'.		html break.		html anchor			callback: [ self protector ];			with: 'Session Protector' ].	html horizontalRule.	html paragraph: self children</body><body package="Seaside-Tests-Functional">renderContentOn: html	self renderFiltersOn: html.	self renderActionsOn: html</body><body package="Seaside-Tests-Functional">renderFiltersOn: html	html paragraph: 'Below a list of filters wrapping the current session:'.	html orderedList list: self session filters</body></methods><methods><class-id>Seaside.WAFilterFunctionalTest</class-id> <category>actions</category><body package="Seaside-Tests-Functional">authentication	| filter |	"We could use #filterWith:during: but that requires Flow."	filter := WAAuthenticationFilter new			authenticator: self;			yourself.	self session addFilter: filter.	child inform: 'Congratulations, you have been authenticated. The new filter should be visible in the list above. Clicking on "ok" should remove the filter. Using the back button and hitting refresh should show the filter again.' onAnswer: [ self session removeFilter: filter ]</body><body package="Seaside-Tests-Functional">protector	| filter |	"We could use #filterWith:during: but that requires Flow."	filter := WAProtectionFilter new.	self session addFilter: filter.	child inform: 'Open this page on a different computer by copying the complete URL to a machine with a different IP address. Seaside should reply with a forbidden message. Closing this dialog should remove the filter.' onAnswer: [ self session removeFilter: filter ]</body></methods><methods><class-id>Seaside.WAFilterFunctionalTest</class-id> <category>initialization</category><body package="Seaside-Tests-Functional">initialize	super initialize.	child := WAComponent new</body></methods><methods><class-id>Seaside.WAFilterFunctionalTest</class-id> <category>private</category><body package="Seaside-Tests-Functional">verifyPassword: aPasswordString forUser: aUserString	^ aUserString = 'admin' and: [ aPasswordString = 'seaside' ]</body></methods><methods><class-id>Seaside.WAFilterFunctionalTest</class-id> <category>hooks</category><body package="Seaside-Tests-Functional">children	^ Array with: child</body></methods><methods><class-id>Seaside.WAPresenter class</class-id> <category>*seaside-tests-functional</category><body package="Seaside-Tests-Functional">isFunctionalTest	^ false</body></methods><methods><class-id>Grease.GRPlatform</class-id> <category>*seaside-tests-functional</category><body package="Seaside-Tests-Functional">seasideGarbageCollect	"this is only needed by the functional tests"	self subclassResponsibility</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-functional</category><body package="Seaside-Tests-Functional">seasideTestsFunctional	^ self new		name: 'Seaside-Tests-Functional';		description: 'Functional Seaside test suite.';		addDependency: 'Seaside-Environment';		addDependency: 'Seaside-Widgets';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself</body></methods><initialize><class-id>Seaside.WAExpirySession</class-id></initialize><initialize><class-id>Seaside.WAAllFunctionalTests</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>GRPlatform</name><environment>Grease</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grease-Core</category><attributes><package>Grease-Core</package></attributes></class><class><name>WATask</name><environment>Seaside</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component-Tasks</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WASession</name><environment>Seaside</environment><super>Seaside.WARequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>continuations properties documentHandlers key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Session</category><attributes><package>Seaside-Session</package></attributes></class></st-source>