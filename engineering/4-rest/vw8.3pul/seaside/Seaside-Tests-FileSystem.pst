<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-FileSystemComment: Tests for the "Seaside-FileSystem" package.DbIdentifier: bear73DbTrace: 494126DbUsername: jkottDbVersion: 3.2.0 - JohanBrichau.16 2DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-FileSystem' '') #(#any 'SUnitToo' ''))Id: 69d015b1-84f0-4ae9-8baa-9ee58f0886cfNamespace: SeasidePackageName: Seaside-Tests-FileSystemParcel: #('Seaside-Tests-FileSystem')ParcelName: Seaside-Tests-FileSystemPrerequisiteDescriptions: #(#(#name 'Seaside-Namespace') #(#name 'Seaside-FileSystem') #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-FileSystem' '') #('SUnitToo' ''))PrintStringCache: (3.2.0 - JohanBrichau.16 2,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-FileSystem-JohanBrichau.16.mczVersion: 3.2.0 - JohanBrichau.16 2Date: 12:17:58 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:58 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAExternalFileLibraryTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileSystem </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-FileSystem</category><attributes><package>Seaside-Tests-FileSystem</package></attributes></class><methods><class-id>Seaside.WAExternalFileLibraryTest</class-id> <category>testing</category><body package="Seaside-Tests-FileSystem">crossPlatformPathFromArray: pathArray finalSlash: finalSlash	| separator path|	separator := GRPlatform current pathSeparator.		path := String new.	pathArray do: [:pathElement | 		path := path, separator, pathElement ].	finalSlash ifTrue: [ path:= path, separator]. 		^ path</body><body package="Seaside-Tests-FileSystem">testAsAbsoluteUrlRelativeTo	| request |	fileSystem configuration 		at: #directory		put: '/home/philppe/pr0n'.	request := self requestWithUrl: '/culture/pictures'.	self assert: (fileSystem 			asAbsoluteUrl: 'cleopatra.jpeg'			relativeTo: request) greaseString = '/culture/pictures/cleopatra.jpeg'.	request := self requestWithUrl: '/culture/pictures/'.	self assert: (fileSystem 			asAbsoluteUrl: 'cleopatra.jpeg'			relativeTo: request) greaseString = '/culture/pictures/cleopatra.jpeg'</body><body package="Seaside-Tests-FileSystem">testDefaultDirectoryPathString	self assert: GRPlatform current defaultDirectoryPathString isString.</body><body package="Seaside-Tests-FileSystem">testFileNameFor	self assert: (GRPlatform current fileNameFor: (GRPlatform current defaultDirectoryPathString)) = (GRPlatform current defaultDirectoryPathString).	self assert: (GRPlatform current fileNameFor: (GRPlatform current defaultDirectoryPathString),(GRPlatform current pathSeparator)) = (GRPlatform current defaultDirectoryPathString).</body><body package="Seaside-Tests-FileSystem">testIsDirectory	self assert: (GRPlatform current isDirectory: (GRPlatform current defaultDirectoryPathString)).</body><body package="Seaside-Tests-FileSystem">testMimetypeForRequest	| request |	request := self requestWithUrl: '/culture/pictures/cleopatra.jpeg'.	self assert: (fileSystem mimetypeForRequest: request) = 'image/jpeg' seasideMimeType.		request := self requestWithUrl: '/culture/pictures/cleopatra'.	self assert: (fileSystem mimetypeForRequest: request) = 'application/octet-stream' seasideMimeType.		request := self requestWithUrl: '/culture/pictures/cleopatra.'.	self assert: (fileSystem mimetypeForRequest: request) = 'application/octet-stream' seasideMimeType.		request := self requestWithUrl: '/'.	self assert: (fileSystem mimetypeForRequest: request) = 'application/octet-stream' seasideMimeType.		request := self requestWithUrl: '/culture/pictures/cleopatra.js'.	self assert: (fileSystem mimetypeForRequest: request) = 'application/x-javascript' seasideMimeType.</body><body package="Seaside-Tests-FileSystem">testPathForRequest	"self debug: #testPathForRequest"	| consumer requestPath resultPath filename |	"/home/philppe/files"	requestPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files') finalSlash: false.	fileSystem configuration at: #directory put: requestPath.	"/culture is mapped to /home/philppe/files"		"If you're looking this test and it doesn't seem to make sense, keep in mind that a file name is this context is an SpFilename, which is a path."	consumer := WAPathConsumer path: #('cleopatra.jpeg') asOrderedCollection.	"/home/philppe/files/cleopatra.jpeg"	resultPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files' 'cleopatra.jpeg') finalSlash: false.	filename := fileSystem filenameForConsumer: consumer.	self assert: filename = resultPath.		consumer := WAPathConsumer path: #('culture' 'cleopatra.jpeg') asOrderedCollection.	"/home/philppe/files/"	requestPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files') finalSlash: true.	fileSystem configuration at: #directory put: requestPath.		consumer := WAPathConsumer path: #('cleopatra.jpeg') asOrderedCollection.	"/home/philppe/files/cleopatra.jpeg"	resultPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files' 'cleopatra.jpeg') finalSlash: false.	filename := fileSystem filenameForConsumer: consumer.	self assert: filename = resultPath.			consumer := WAPathConsumer path: #('cleopatra.jpeg') asOrderedCollection.	"/home/philppe/files"	requestPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files') finalSlash: false.	fileSystem configuration at: #directory put: requestPath.		"/home/philppe/files/cleopatra.jpeg"	resultPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files' 'cleopatra.jpeg') finalSlash: false.	self assert: (fileSystem filenameForConsumer: consumer) = resultPath.			consumer := WAPathConsumer path: #('cleopatra.jpeg') asOrderedCollection.	"/home/philppe/files/"	requestPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files') finalSlash: true.	fileSystem configuration at: #directory put: requestPath.		consumer := WAPathConsumer path: #('cleopatra.jpeg') asOrderedCollection.	"/home/philppe/files/cleopatra.jpeg"	resultPath := self crossPlatformPathFromArray: #('home' 'philppe' 'files' 'cleopatra.jpeg') finalSlash: false.	self assert: (fileSystem filenameForConsumer: consumer) = resultPath.</body></methods><methods><class-id>Seaside.WAExternalFileLibraryTest</class-id> <category>running</category><body package="Seaside-Tests-FileSystem">setUp	super setUp.	fileSystem := WAExternalFileLibrary new.	WADispatcher new register: fileSystem at: 'culture'</body></methods><methods><class-id>Seaside.WAExternalFileLibraryTest</class-id> <category>private</category><body package="Seaside-Tests-FileSystem">requestWithUrl: aString	^ WARequest method: 'POST' uri: aString</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-filesystem</category><body package="Seaside-Tests-FileSystem">seasideTestsFileSystem	^ self new		name: 'Seaside-Tests-FileSystem';		description: 'Tests for the "Seaside-FileSystem" package.';		addDependency: 'Seaside-FileSystem';		url: #seasideLGPLUrl;		license: #LGPL;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>