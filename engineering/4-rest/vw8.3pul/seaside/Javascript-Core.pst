<?xml version="1.0"?><st-source><!-- Name: Javascript-CoreComment: Javascript integration in Seaside. Provides a basic functionality to generate Javascript from Smalltalk.DbIdentifier: bear73DbTrace: 492609DbUsername: jkottDbVersion: 3.2.0 - pmm.99 1DevelopmentPrerequisites: #(#(#any 'Javascript-Namespace' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-VisualWorks-Core' '') #(#any 'Seaside-Canvas' ''))Id: c83c5239-deae-4242-8bfa-7e01a73d0bcaNamespace: JavascriptPackageName: Javascript-CoreParcel: #('Javascript-Core')ParcelName: Javascript-CorePrerequisiteParcels: #(#('Javascript-Namespace' '') #('Seaside-Core' '') #('Seaside-VisualWorks-Core' '') #('Seaside-Canvas' ''))PrintStringCache: (3.2.0 - pmm.99 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Javascript-Core-pmm.99.mczVersion: 3.2.0 - pmm.99 1Date: 3:31:29 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:29 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>JSDecoration</name><environment>Javascript</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSDecoration</class-id><body>I decorate JavaScript objects.</body></comment><class><name>JSStatement</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><class><name>JSCondition</name><environment>Javascript</environment><super>Javascript.JSStatement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSCondition</class-id><body>I wrap the decorated object into a conditional statement.</body></comment><class><name>JSPassenger</name><environment>Javascript</environment><super>Seaside.WACallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><class><name>JSConditionElse</name><environment>Javascript</environment><super>Javascript.JSCondition</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elseStatement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><class><name>JSObject</name><environment>Javascript</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration renderContext rendererClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSObject</class-id><body>I represent the abstract root of all JavaScript objects in the Smalltalk world. My subclasses provide accessors and action methods to configure instances of myself and implement the method #javascriptContentOn: to emit valid JavaScript code for my presentation.Instance Variables	decoration:			&lt;JSObject|JSDecoration&gt;	renderContext:		&lt;WARenderContext&gt;	rendererClass:		&lt;WARenderer&gt;</body></comment><class><name>JSJoin</name><environment>Javascript</environment><super>Javascript.JSObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>collection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSJoin</class-id><body>I join a collection of JavaScript statements with the given string.</body></comment><class><name>JSMember</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><class><name>JSAssign</name><environment>Javascript</environment><super>Javascript.JSMember</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSAssign</class-id><body>I assign the decorated object to a global variable.</body></comment><class><name>JSAlias</name><environment>Javascript</environment><super>Javascript.JSMember</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSAlias</class-id><body>I alias the decorated object with a name.</body></comment><class><name>JSApply</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arguments </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSApply</class-id><body>I apply a JavaScript function and provide arguments.</body></comment><class><name>JSScript</name><environment>Javascript</environment><super>Javascript.JSObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSScript</class-id><body>I represent a sequence of JavaScript statements.</body></comment><class><name>JSFunction</name><environment>Javascript</environment><super>Javascript.JSScript</super><private>false</private><indexed-type>none</indexed-type><inst-vars>return arguments </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSFunction</class-id><body>I represent an anonymous JavaScript function.</body></comment><class><name>JSAjaxCallback</name><environment>Javascript</environment><super>Seaside.WACallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><class><name>JSNegation</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSNegation</class-id><body>I negate the decorated object and yield a boolean value.</body></comment><class><name>JSAssignLocal</name><environment>Javascript</environment><super>Javascript.JSAssign</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSAssignLocal</class-id><body>I assign the decorated object to a local variable.</body></comment><class><name>JSTimed</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><class><name>JSAssignment</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSAssignment</class-id><body>I represent an assignment ot the decorated object.</body></comment><class><name>JSInterval</name><environment>Javascript</environment><super>Javascript.JSTimed</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSInterval</class-id><body>I periodically execute the decorated object.</body></comment><class><name>JSLogger</name><environment>Javascript</environment><super>Javascript.JSObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSLogger</class-id><body>I am a logger class to be used together with FireBug. I have nothing to do with Scriptaculous directly, but I nicely fit in here as everybody should be using FireBug for Script debugging anyway.</body></comment><class><name>JSIfThenElse</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>trueStatement falseStatement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSIfThenElse</class-id><body>I execute different code snippets depending if the receiver is true (defined) or false (null).</body></comment><class><name>JSStream</name><environment>Javascript</environment><super>Javascript.JSObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSStream</class-id><body>I represent a verbatim JavaScript string. I support streaming facilities to efficiently encode JavaScript input.</body></comment><class><name>JSCreate</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSCreate</class-id><body>I instantiate the decorated object.</body></comment><class><name>JSTimeout</name><environment>Javascript</environment><super>Javascript.JSTimed</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSTimeout</class-id><body>I evaluate the decorated object after a timeout.</body></comment><class><name>JSBinary</name><environment>Javascript</environment><super>Javascript.JSStatement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>operator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSBinary</class-id><body>I join the decorated object with a binary operator.</body></comment><class><name>JSAccess</name><environment>Javascript</environment><super>Javascript.JSMember</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSAccess</class-id><body>I access a member of the decorated object.</body></comment><class><name>JSJson</name><environment>Javascript</environment><super>Javascript.JSObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSJson</class-id><body>I represent the JSON object (www.json.org) that is supported by most modern web browsers. For older browsers I require WAJsonDeploymentLibrary or WAJsonDevelopmentLibrary to be included.</body></comment><class><name>JSCall</name><environment>Javascript</environment><super>Javascript.JSDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name arguments </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSCall</class-id><body>I represent a function call or method invocation to the decorated object.</body></comment><class><name>JSProperty</name><environment>Javascript</environment><super>Javascript.JSMember</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSProperty</class-id><body>I access a property of the decorated object.</body></comment><class><name>JSConcatenation</name><environment>Javascript</environment><super>Javascript.JSStatement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Javascript-Core-Decorations</category><attributes><package>Javascript-Core</package></attributes></class><comment><class-id>Javascript.JSConcatenation</class-id><body>I represent a sequence (or concatenation) of a decorated object and another object.</body></comment><shared-variable><name>Arguments</name><environment>Javascript.JSStream</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Javascript-Core</package></attributes></shared-variable><shared-variable><name>This</name><environment>Javascript.JSStream</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Javascript-Core</package></attributes></shared-variable><shared-variable><name>JavascriptCharacters</name><environment>Javascript.JSStream</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Javascript-Core</package></attributes></shared-variable><methods><class-id>Javascript.JSDecoration</class-id> <category>initialization</category><body package="Javascript-Core">setOwner: anObject	owner := anObject</body></methods><methods><class-id>Javascript.JSDecoration</class-id> <category>accessing</category><body package="Javascript-Core">owner	^ owner</body><body package="Javascript-Core">renderContext	^ owner renderContext</body></methods><methods><class-id>Javascript.JSDecoration</class-id> <category>testing</category><body package="Javascript-Core">isJavascript	^ true</body></methods><methods><class-id>Javascript.JSDecoration</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	self owner javascriptContentOn: aStream</body></methods><methods><class-id>Javascript.JSStatement</class-id> <category>accessing</category><body package="Javascript-Core">statement	^ statement</body><body package="Javascript-Core">statement: anObject	statement := anObject</body></methods><methods><class-id>Javascript.JSStatement class</class-id> <category>instance creation</category><body package="Javascript-Core">on: anObject	^ self new statement: anObject</body></methods><methods><class-id>Javascript.JSCondition</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream		nextPutAll: 'if(';		javascript: self statement;		nextPutAll: '){'.	super javascriptContentOn: aStream.	aStream nextPut: $}</body></methods><methods><class-id>Javascript.JSPassenger</class-id> <category>accessing</category><body package="Javascript-Core">object	^ object</body></methods><methods><class-id>Javascript.JSPassenger</class-id> <category>evaluation</category><body package="Javascript-Core">evaluateWithArgument: anObject	self shouldNotImplement</body></methods><methods><class-id>Javascript.JSPassenger</class-id> <category>testing</category><body package="Javascript-Core">isEnabledFor: aRequestContext	^ false</body><body package="Javascript-Core">isPassenger	^ true</body></methods><methods><class-id>Javascript.JSPassenger</class-id> <category>initialization</category><body package="Javascript-Core">setObject: anObject	object := anObject</body></methods><methods><class-id>Javascript.JSConditionElse</class-id> <category>accessing</category><body package="Javascript-Core">elseStatement	^ elseStatement</body><body package="Javascript-Core">elseStatement: anObject	elseStatement := anObject</body><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	aStream 		nextPutAll: 'else{';		javascript: self elseStatement.	aStream nextPut: $}</body></methods><methods><class-id>Javascript.JSConditionElse class</class-id> <category>instance creation</category><body package="Javascript-Core">on: statement else: elseStatement	^ (super on: statement)		elseStatement: elseStatement;		yourself</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>decorations</category><body package="Javascript-Core">&amp; anObject 	"Combine the receiver and anObject with a logical AND."		self addDecoration: (JSBinary new operator: '&amp;&amp;'; statement: anObject)</body><body package="Javascript-Core">access: aString 	"Access the member aString."		self addDecoration: (JSAccess named: aString)</body><body package="Javascript-Core">alias: aString 	"Uses aString as an alias for the receiver."		self addDecoration: (JSAlias named: aString)</body><body package="Javascript-Core">apply: aCollection 	"Apply aCollection of arguments."		self addDecoration: (JSApply new arguments: aCollection)</body><body package="Javascript-Core">assign: anObject 	"Assign anObject to the receiver."		self addDecoration: (JSAssignment new object: anObject)</body><body package="Javascript-Core">assignLocalTo: aString 	"Assign the receiver to a local variable aString."		self addDecoration: (JSAssignLocal named: aString)</body><body package="Javascript-Core">assignTo: aString 	"Assign the receiver to a global variable aString."		self addDecoration: (JSAssign named: aString)</body><body package="Javascript-Core">call: aString	"Call the method named aString."	self call: aString withArguments: #()</body><body package="Javascript-Core">call: aString with: anObject	"Call the method named aString with anObject as its argument."	self call: aString withArguments: (Array with: anObject)</body><body package="Javascript-Core">call: aString with: anObject1 with: anObject2	"Call the method named aString with anObject1 and anObject2 as its arguments."	self call: aString withArguments: (Array with: anObject1 with: anObject2)</body><body package="Javascript-Core">call: aString with: anObject1 with: anObject2 with: anObject3	"Call the method named aString with anObject1 and anObject2 and anObject3 as its arguments."	self call: aString withArguments: (Array with: anObject1 with: anObject2 with: anObject3)</body><body package="Javascript-Core">call: aString withArguments: anArray	"Call the method named aString with anArray as arguments."	self addDecoration: (JSCall new 		name: aString;		arguments: anArray;		yourself)</body><body package="Javascript-Core">condition: anObject 	"Treat anObject as a condition to the execution of the receiver."		self addDecoration: (JSCondition on: anObject)</body><body package="Javascript-Core">condition: anObject  else: otherObject	"Treat anObject as a condition to the execution of the receiver."		self addDecoration: (JSConditionElse on: anObject else: otherObject)</body><body package="Javascript-Core">create	"Instantiate the receiver."		self addDecoration: JSCreate new</body><body package="Javascript-Core">interval: aDuration	"Execute the receiver every aDuration."	self addDecoration: (JSInterval duration: aDuration)</body><body package="Javascript-Core">not	"Negate the receiver logically."		self addDecoration: JSNegation new</body><body package="Javascript-Core">property: aString 	"Treat anObject as a condition to the execution of the receiver."		self addDecoration: (JSProperty named: aString)</body><body package="Javascript-Core">then: anObject	"Evaluates anObject if the receiver treated as a boolean evaluates to true."	self then: anObject else: nil</body><body package="Javascript-Core">then: anObject else: anotherObject 	"Evaluates anObject if the receiver treated as a boolean evaluates to true, otherwise evaluate anotherObject."		self addDecoration: (JSIfThenElse new		trueStatement: anObject;		falseStatement: anotherObject)</body><body package="Javascript-Core">timeout: aDuration 	"Evaluates the receiver after aDuration."		self addDecoration: (JSTimeout duration: aDuration)</body><body package="Javascript-Core">| anObject 	"Combine the receiver and anObject with a logical OR."		self addDecoration: (JSBinary new operator: '||'; statement: anObject)</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>adding</category><body package="Javascript-Core">addDecoration: aDecoration	"Add a new decoration to the receiver."	aDecoration setOwner: decoration.	decoration := aDecoration</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>convenience</category><body package="Javascript-Core">, anObject 	"Concatenate the receiver with anObject."	self addDecoration: (JSConcatenation on: anObject)</body><body package="Javascript-Core">confirm: anObject 	"Show a confirmation with the message anObject before evaluating the receiver."		self condition: (JSStream new		nextPutAll: 'confirm';		argument: anObject)</body><body package="Javascript-Core">return: anObject 	"Return anObject after evaluating the receiver."		self , (JSStream new		nextPutAll: 'return ';		javascript: anObject)</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>utilities</category><body package="Javascript-Core">render: aRenderable	"Render aRenderable and answer the resulting string."		^ String streamContents: [ :stream | self render: aRenderable on: stream ]</body><body package="Javascript-Core">render: aRenderable on: aStream	"Render aRenderable on aStream."		| document |	document := WAHtmlDocument		on: aStream		codec: self requestContext codec.	self renderContext document: document during: [		(self rendererClass context: self renderContext)			render: aRenderable; flush ].	document scriptGenerator closeOn: document</body><body package="Javascript-Core">script: aBlock	"Evaluate aBlock and answer the string of the generated script."		^ String streamContents: [ :stream | self script: aBlock on: stream ]</body><body package="Javascript-Core">script: aBlock on: aStream	"Evaluate aBlock and pass in a script object that is subsequently written to aStream."	| script document |	document := WAHtmlDocument		on: aStream		codec: self requestContext codec.	self renderContext document: document during: [ 		script := (JSScript context: self renderContext)			rendererClass: self rendererClass;			yourself.		aBlock value: script.		script addAll: document loadScripts ].	script javascriptOn: aStream</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>testing</category><body package="Javascript-Core">isJavascript	^ true</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>initialization</category><body package="Javascript-Core">initialize	super initialize.	decoration := self</body><body package="Javascript-Core">setContext: aRenderContext	renderContext := aRenderContext</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>accessing</category><body package="Javascript-Core">decoration	"Answer the top-level decoration in the receivers decoration stack."	^ decoration</body><body package="Javascript-Core">renderContext	"Answer the current WARenderContext."	^ renderContext</body><body package="Javascript-Core">rendererClass	"Answer the class that should be used when rendering objects."	^ rendererClass ifNil: [ rendererClass := WARenderer default ]</body><body package="Javascript-Core">rendererClass: aRendererClass	"Specify the class that should be used when rendering objects."	rendererClass := aRendererClass</body></methods><methods><class-id>Javascript.JSObject</class-id> <category>printing</category><body package="Javascript-Core">greaseString	^ String streamContents: [ :stream | stream javascript: self ]</body><body package="Javascript-Core">javascriptContentOn: aStream	"Generate the JavaScript string of the receiver. Override this method in subclasses to define custom JavaScript code. Note, if you run into this method, you likely use old Seaside code need to rename #printContentOn: to #javascriptContentOn:."		self subclassResponsibility</body><body package="Javascript-Core">javascriptOn: aStream	"Generate the JavaScript code from the receiver by dispatching to the outermost surrounding decoration. Do not override this method, instead override #javascriptContentOn:."	self decoration javascriptContentOn: aStream</body><body package="Javascript-Core">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' ('; javascript: self; nextPut: $)</body></methods><methods><class-id>Javascript.JSObject class</class-id> <category>instance creation</category><body package="Javascript-Core">context: aRenderContext	^ self new setContext: aRenderContext; yourself</body></methods><methods><class-id>Javascript.JSJoin</class-id> <category>accessing</category><body package="Javascript-Core">collection	^ collection</body></methods><methods><class-id>Javascript.JSJoin</class-id> <category>initialization</category><body package="Javascript-Core">initializeOn: aCollection	self initialize.	collection := aCollection</body></methods><methods><class-id>Javascript.JSJoin</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	| document codec |	codec := [ self requestContext codec ] 		on: WARequestContextNotFound		do: [ :e | GRNullCodec new ].	document := WAUnescapedDocument 		on: aStream		codec: codec.	self encodeOn: document</body></methods><methods><class-id>Javascript.JSJoin</class-id> <category>encoding</category><body package="Javascript-Core">encodeElement: anObject on: aDocument	"We assume that the element is already URL encoded if this is not an association."	(anObject isKindOf: Association)		ifTrue: [			aDocument nextPut: $".			aDocument urlEncoder				nextPutAll: anObject key greaseString.			anObject value isNil 				ifTrue: [ aDocument nextPut: $" ]				ifFalse: [					aDocument nextPut: $=.					(anObject value isString or: [ anObject value isCharacter ])						ifTrue: [							aDocument urlEncoder 								nextPutAll: anObject value greaseString.							aDocument nextPut: $" ]						ifFalse: [							aDocument nextPutAll: '"+encodeURIComponent('.							aDocument stream javascript: anObject value.							aDocument nextPut: $) ] ] ]		ifFalse: [ aDocument stream javascript: anObject ]</body><body package="Javascript-Core">encodeEmptyOn: aDocument	aDocument nextPutAll: '""'</body><body package="Javascript-Core">encodeOn: aDocument	self collection isEmpty		ifTrue: [ ^ self encodeEmptyOn: aDocument ].	self collection size = 1		ifTrue: [ ^ self encodeElement: self collection first on: aDocument ].	aDocument nextPut: $[.	self collection		do: [ :each | self encodeElement: each on: aDocument ]		separatedBy: [ aDocument nextPut: $, ].	aDocument nextPutAll: '].join("&amp;")'</body></methods><methods><class-id>Javascript.JSJoin class</class-id> <category>instance creation</category><body package="Javascript-Core">new	^ self on: OrderedCollection new</body><body package="Javascript-Core">on: aCollection	^ self basicNew initializeOn: aCollection</body></methods><methods><class-id>Javascript.JSMember</class-id> <category>accessing</category><body package="Javascript-Core">name	^ name</body><body package="Javascript-Core">name: aString	name := aString</body></methods><methods><class-id>Javascript.JSMember class</class-id> <category>instance creation</category><body package="Javascript-Core">named: anObject	^ self new name: anObject</body></methods><methods><class-id>Javascript.JSAssign</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream		nextPutAll: self name;		nextPut: $=.	super javascriptContentOn: aStream</body></methods><methods><class-id>Javascript.JSAlias</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: self name</body></methods><methods><class-id>Javascript.JSApply</class-id> <category>accessing</category><body package="Javascript-Core">arguments	^ arguments</body><body package="Javascript-Core">arguments: aCollection	arguments := aCollection</body></methods><methods><class-id>Javascript.JSApply</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	JSStream encodeArguments: self arguments on: aStream</body></methods><methods><class-id>Javascript.JSScript</class-id> <category>convenience</category><body package="Javascript-Core">alert: anObject 	self add: (JSStream new		nextPutAll: 'alert';		argument: anObject;		yourself)</body><body package="Javascript-Core">callback: aBlock	self goto: (self renderContext actionUrl		withField: (self renderContext callbacks store: (WAActionCallback on: aBlock)))</body><body package="Javascript-Core">goto: aUrl 	self add: (JSStream new		nextPutAll: 'window.location=';		javascript: aUrl)</body><body package="Javascript-Core">javascript	^ (JSScript context: self renderContext)		rendererClass: self rendererClass;		yourself</body><body package="Javascript-Core">logger	^ self add: ((JSLogger context: self renderContext)		rendererClass: self rendererClass;		yourself)</body><body package="Javascript-Core">refresh	self goto: self renderContext actionUrl</body></methods><methods><class-id>Javascript.JSScript</class-id> <category>adding</category><body package="Javascript-Core">, anObject	self add: anObject</body><body package="Javascript-Core">&lt;&lt; anObject	^ self add: anObject</body><body package="Javascript-Core">add: anObject	^ statements add: anObject</body><body package="Javascript-Core">addAll: aCollection	^ statements addAll: aCollection</body></methods><methods><class-id>Javascript.JSScript</class-id> <category>initialization</category><body package="Javascript-Core">initialize	super initialize.	statements := OrderedCollection new</body></methods><methods><class-id>Javascript.JSScript</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	statements do: [ :each | aStream javascript: each ] separatedBy: [ aStream nextPut: $; ]</body></methods><methods><class-id>Javascript.JSFunction</class-id> <category>converting</category><body package="Javascript-Core">asFunction	^ self</body><body package="Javascript-Core">asFunction: aCollection	self arguments: aCollection</body></methods><methods><class-id>Javascript.JSFunction</class-id> <category>initialization</category><body package="Javascript-Core">initialize	super initialize.	arguments := #()</body></methods><methods><class-id>Javascript.JSFunction</class-id> <category>accessing</category><body package="Javascript-Core">argument	^ arguments</body><body package="Javascript-Core">arguments	^ arguments</body><body package="Javascript-Core">arguments: aCollection	arguments := aCollection</body><body package="Javascript-Core">return	^ return ifNil: [ false ]</body><body package="Javascript-Core">return: aBoolean	return := aBoolean</body></methods><methods><class-id>Javascript.JSFunction</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: 'function('.	self arguments do: [ :each | aStream nextPutAll: each ] separatedBy: [ aStream nextPut: $, ].	aStream nextPutAll: '){'.	statements isEmpty ifFalse:			[ statements allButLast do:					[ :each | 					aStream						javascript: each;						nextPut: $; ].			self return ifTrue: [ aStream nextPutAll: 'return ' ].			aStream javascript: statements last ].	aStream nextPut: $}</body></methods><methods><class-id>Javascript.JSAjaxCallback</class-id> <category>accessing</category><body package="Javascript-Core">block: aZeroOrOneArgBlock	block := aZeroOrOneArgBlock isNil		ifFalse: [ aZeroOrOneArgBlock fixCallbackTemps ]</body><body package="Javascript-Core">priority	^ 5</body></methods><methods><class-id>Javascript.JSAjaxCallback</class-id> <category>evaluation</category><body package="Javascript-Core">evaluateWithArgument: anObject	block isNil		ifFalse: [ block valueWithPossibleArguments: (Array with: anObject) ].	self requestContext		respond: [ :response | response doNotCache ]</body></methods><methods><class-id>Javascript.JSNegation</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPut: $!.	super javascriptContentOn: aStream</body></methods><methods><class-id>Javascript.JSAssignLocal</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: 'var '.	super javascriptContentOn: aStream</body></methods><methods><class-id>Javascript.JSTimed</class-id> <category>accessing</category><body package="Javascript-Core">duration	^ duration</body><body package="Javascript-Core">duration: aDuration	duration := aDuration</body></methods><methods><class-id>Javascript.JSTimed class</class-id> <category>instance creation</category><body package="Javascript-Core">duration: aDuration	^ self new duration: aDuration</body></methods><methods><class-id>Javascript.JSAssignment</class-id> <category>accessing</category><body package="Javascript-Core">object	^ object</body><body package="Javascript-Core">object: anObject	object := anObject</body></methods><methods><class-id>Javascript.JSAssignment</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	aStream		nextPutAll: '=';		javascript: self object</body></methods><methods><class-id>Javascript.JSInterval</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: 'setInterval(function(){'.	super javascriptContentOn: aStream.	aStream		nextPutAll: '},';		javascript: self duration;		nextPut: $)</body></methods><methods><class-id>Javascript.JSLogger</class-id> <category>assertions</category><body package="Javascript-Core">assert: anObject 	self 		call: 'assert'		with: anObject</body><body package="Javascript-Core">assert: anObject equals: anotherObject 	self 		call: 'assertEquals'		with: anObject		with: anotherObject</body><body package="Javascript-Core">assert: anObject greater: anotherObject 	self 		call: 'assertGreater'		with: anObject		with: anotherObject</body><body package="Javascript-Core">assert: anObject less: anotherObject 	self 		call: 'assertLess'		with: anObject		with: anotherObject</body><body package="Javascript-Core">assert: anObject notEquals: anotherObject 	self 		call: 'assertNotEquals'		with: anObject		with: anotherObject</body><body package="Javascript-Core">assert: anObject notGreater: anotherObject 	self 		call: 'assertNotGreater'		with: anObject		with: anotherObject</body><body package="Javascript-Core">assert: anObject notLess: anotherObject 	self 		call: 'assertNotLess'		with: anObject		with: anotherObject</body><body package="Javascript-Core">assertFalse: anObject 	self 		call: 'assertFalse'		with: anObject</body><body package="Javascript-Core">assertNotNull: anObject 	self 		call: 'assertNotNull'		with: anObject</body><body package="Javascript-Core">assertNotUndefined: anObject 	self 		call: 'assertNotUndefined'		with: anObject</body><body package="Javascript-Core">assertNull: anObject 	self 		call: 'assertNull'		with: anObject</body><body package="Javascript-Core">assertTrue: anObject 	self 		call: 'assertTrue'		with: anObject</body><body package="Javascript-Core">assertUndefined: anObject 	self 		call: 'assertUndefined'		with: anObject</body></methods><methods><class-id>Javascript.JSLogger</class-id> <category>messages</category><body package="Javascript-Core">debug: anObject 	self 		call: 'debug'		with: anObject</body><body package="Javascript-Core">error: anObject 	self 		call: 'error'		with: anObject</body><body package="Javascript-Core">info: anObject 	self 		call: 'info'		with: anObject</body><body package="Javascript-Core">warn: anObject 	self 		call: 'warn'		with: anObject</body></methods><methods><class-id>Javascript.JSLogger</class-id> <category>logging</category><body package="Javascript-Core">log: anObject 	self 		call: 'log'		with: anObject</body><body package="Javascript-Core">log: anObject format: anArray 	self 		call: 'log'		withArguments: (Array with: anObject) , anArray</body></methods><methods><class-id>Javascript.JSLogger</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: 'console'</body></methods><methods><class-id>Javascript.JSIfThenElse</class-id> <category>accessing</category><body package="Javascript-Core">falseStatement	^ falseStatement</body><body package="Javascript-Core">falseStatement: anObject	falseStatement := anObject</body><body package="Javascript-Core">trueStatement	^ trueStatement</body><body package="Javascript-Core">trueStatement: anObject	trueStatement := anObject</body></methods><methods><class-id>Javascript.JSIfThenElse</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPut: $(.	super javascriptContentOn: aStream.	aStream nextPut: $?.	aStream javascript: self trueStatement.	aStream nextPut: $:.	aStream javascript: self falseStatement.	aStream nextPut: $)</body></methods><methods><class-id>Javascript.JSStream</class-id> <category>streaming</category><body package="Javascript-Core">javascript: anObject	self stream javascript: anObject</body><body package="Javascript-Core">json: anObject	self stream json: anObject</body><body package="Javascript-Core">nextPut: aCharacter	self stream nextPut: aCharacter</body><body package="Javascript-Core">nextPutAll: aString	self stream nextPutAll: aString</body></methods><methods><class-id>Javascript.JSStream</class-id> <category>copying</category><body package="Javascript-Core">copy	^ self class on: self contents</body></methods><methods><class-id>Javascript.JSStream</class-id> <category>initialization</category><body package="Javascript-Core">initialize	super initialize.	stream := WriteStream on: String new</body></methods><methods><class-id>Javascript.JSStream</class-id> <category>convenience</category><body package="Javascript-Core">argument: anObject	"Write a single argument anObject onto the receiving stream."	self arguments: (Array with: anObject)</body><body package="Javascript-Core">arguments: aCollection	"Write aCollection of arguments onto the stream."	self class encodeArguments: aCollection on: self</body></methods><methods><class-id>Javascript.JSStream</class-id> <category>accessing</category><body package="Javascript-Core">contents	^ self stream contents</body><body package="Javascript-Core">stream	^ stream</body></methods><methods><class-id>Javascript.JSStream</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: self contents</body></methods><methods><class-id>Javascript.JSStream class</class-id> <category>encoding</category><body package="Javascript-Core">encodeArguments: aCollection on: aStream 	"Writes aCollection of elements to aStream enclosed in round brakes and separated by a comma."		aStream nextPut: $(.	aCollection		do: [ :each | aStream javascript: each ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $)</body><body package="Javascript-Core">encodeCollection: aCollection on: aStream	"Writes aCollection of elements to aStream enclosed in square brackets."		aStream nextPut: $[.	aCollection		do: [ :each | aStream javascript: each ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $]</body><body package="Javascript-Core">encodeDictionary: aDictionary on: aStream 	"Dictionary or hash-maps common structures in JavaScript, try to optimize their serialization."		| first |	first := true.	aStream nextPut: ${.	aDictionary keysAndValuesDo: [ :key :value |		first			ifTrue: [ first := false ]			ifFalse: [ aStream nextPut: $, ].		self encodeKey: key value: value on: aStream ].	aStream nextPut: $}</body><body package="Javascript-Core">encodeKey: aKey value: aValue on: aStream 	"Key-value pairs are common structures in JavaScript."		aStream javascript: aKey greaseString; nextPut: $:; javascript: aValue</body><body package="Javascript-Core">encodeString: aString on: aStream 	"Strings have a complicated encoding in Javascript, try to optimize their serialization."			aStream nextPut: $".	1 to: aString size do: [ :index | 		| char value encoded |		char := aString at: index.		value := char greaseInteger.		value &lt; JavascriptCharacters size 			ifFalse: [				"U+2028 and U+2029 have to be treaded as new lines"				value = 16r2028 "Line separator"					ifTrue: [ aStream nextPutAll: '\u2028' ]					ifFalse: [						value = 16r2029 "Paragraph separator"							ifTrue: [ aStream nextPutAll: '\u2029' ]							ifFalse: [ aStream nextPut: char ] ] ]			ifTrue: [				encoded := JavascriptCharacters at: value + 1.				"we use nil markers becausee #isNil is faster than #isString because it's not				actually sent"				encoded isNil 					ifTrue: [ aStream nextPut: char ]					ifFalse: [ aStream nextPutAll: encoded ] ] ].	aStream nextPut: $"</body></methods><methods><class-id>Javascript.JSStream class</class-id> <category>instance creation</category><body package="Javascript-Core">argument: anInteger	^ (Arguments at: anInteger + 1) copy</body><body package="Javascript-Core">argumentAt: anInteger	^ (Arguments at: anInteger) copy</body><body package="Javascript-Core">on: aString	^ self new nextPutAll: aString</body><body package="Javascript-Core">this	^ This copy</body></methods><methods><class-id>Javascript.JSStream class</class-id> <category>initialization</category><body package="Javascript-Core">initialize	self initializeEncoding.	self initializeSnippets</body><body package="Javascript-Core">initializeEncoding	| printer escapes |	printer := GRNumberPrinter new.	printer base: 16; padding: $0; digits: 2.	JavascriptCharacters := Array new: 128.	0 to: 31 do: [ :index | 		JavascriptCharacters 			at: index + 1			put: '\x' , (printer print: index) ].	escapes := #( 0 '\0' 7 '\a' 8 '\b' 9 '\t' 10 '\n' 12 '\f' 13 '\r' 34 '\"' 92 '\\' ).	1 to: escapes size - 1 by: 2 do: [ :index | 		JavascriptCharacters 			at: (escapes at: index) + 1			put: (escapes at: index + 1) ]</body><body package="Javascript-Core">initializeSnippets	This := self on: 'this'.	Arguments := (0 to: 25)		collect: [ :each | self on: 'arguments[' , each printString , ']' ]</body></methods><methods><class-id>Javascript.JSCreate</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: 'new '.	super javascriptContentOn: aStream</body></methods><methods><class-id>Javascript.JSTimeout</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: 'setTimeout(function(){'.	super javascriptContentOn: aStream.	aStream		nextPutAll: '},';		javascript: self duration;		nextPut: $)</body></methods><methods><class-id>Javascript.JSBinary</class-id> <category>accessing</category><body package="Javascript-Core">operator	^ operator</body><body package="Javascript-Core">operator: aString	operator := aString</body></methods><methods><class-id>Javascript.JSBinary</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	aStream		nextPutAll: self operator;		javascript: self statement</body></methods><methods><class-id>Javascript.JSAccess</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	aStream		nextPut: $.;		nextPutAll: self name</body></methods><methods><class-id>Javascript.JSJson</class-id> <category>accessing</category><body package="Javascript-Core">parse: aString	"This method parses a JSON text to produce an object or array."	self call: 'parse' with: aString</body><body package="Javascript-Core">parse: aString reviver: aFunction 	"This method parses a JSON text to produce an object or array. The optional reviver parameter is a function that can filter and transform the results. It receives each of the keys and values, and its return value is used instead of the original value. If it returns what it received, then the structure is not modified. If it returns undefined then the member is deleted."	self call: 'parse' with: aString with: aFunction asFunction</body><body package="Javascript-Core">stringify: anObject	"Serialize anObject as a JSON string."	self call: 'stringify' with: anObject</body><body package="Javascript-Core">stringify: anObject replacer: aReplacer	"Serialize anObject as a JSON string. aReplacer is an optional parameter that determines how object values are stringified for objects. It can be a function or an array of strings."	self call: 'stringify' with: anObject with: aReplacer</body><body package="Javascript-Core">stringify: anObject replacer: aReplacer space: aSpace	"Serialize anObject as a JSON string. aReplacer is an optional parameter that determines how object values are stringified for objects. It can be a function or an array of strings. aSpace is an optional parameter that specifies the indentation of nested structures. If it is omitted, the text will be packed without extra whitespace."	self call: 'stringify' with: anObject with: aReplacer with: aSpace</body><body package="Javascript-Core">stringify: anObject space: aSpace	"Serialize anObject as a JSON string. aSpace is an optional parameter that specifies the indentation of nested structures. If it is omitted, the text will be packed without extra whitespace."	self call: 'stringify' with: anObject with: aSpace</body></methods><methods><class-id>Javascript.JSJson</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	aStream nextPutAll: 'JSON'</body></methods><methods><class-id>Javascript.JSCall</class-id> <category>accessing</category><body package="Javascript-Core">arguments	^ arguments</body><body package="Javascript-Core">arguments: anArray 	arguments := anArray</body><body package="Javascript-Core">name	^ name</body><body package="Javascript-Core">name: aString 	name := aString</body></methods><methods><class-id>Javascript.JSCall</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	(self name isNil or: [ self name isEmpty ]) ifFalse:			[ aStream				nextPut: $.;				nextPutAll: self name ].	JSStream encodeArguments: self arguments on: aStream</body></methods><methods><class-id>Javascript.JSProperty</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	aStream		nextPut: $[;		javascript: self name;		nextPut: $]</body></methods><methods><class-id>Javascript.JSConcatenation</class-id> <category>printing</category><body package="Javascript-Core">javascriptContentOn: aStream	super javascriptContentOn: aStream.	aStream		nextPut: $;;		javascript: self statement</body></methods><methods><class-id>Core.Object</class-id> <category>*javascript-core</category><body package="Javascript-Core">asFunction	^ self asFunction: #()</body><body package="Javascript-Core">asFunction: aCollection	^ JSFunction new add: self; arguments: aCollection</body><body package="Javascript-Core">asJavascript	^ String streamContents: [ :stream | self javascriptOn: stream ]</body><body package="Javascript-Core">isJavascript	^ false</body><body package="Javascript-Core">javascriptOn: aStream	self printOn: aStream</body></methods><methods><class-id>Core.String</class-id> <category>*javascript-core</category><body package="Javascript-Core">asFunction: aCollection	^ (JSStream on: self) asFunction: aCollection</body><body package="Javascript-Core">javascriptOn: aStream	JSStream encodeString: self on: aStream</body></methods><methods><class-id>Core.Collection</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptOn: aStream	JSStream encodeCollection: self on: aStream</body></methods><methods><class-id>Core.Duration</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptOn: aStream	aStream javascript: self asMilliseconds</body></methods><methods><class-id>Core.Character</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptOn: aStream	(String with: self) javascriptOn: aStream</body></methods><methods><class-id>Seaside.WACallback</class-id> <category>*javascript-core</category><body package="Javascript-Core">isPassenger	^ false</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptCore	^ self new		name: 'Javascript-Core';		description: 'Javascript integration in Seaside. Provides a basic functionality to generate Javascript from Smalltalk.';		addDependency: 'Seaside-Core';		addDependency: 'Seaside-Canvas';		url: #seasideUrl;		yourself</body></methods><methods><class-id>Core.Dictionary</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptOn: aStream	JSStream encodeDictionary: self on: aStream</body></methods><methods><class-id>Core.UndefinedObject</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptOn: aStream	aStream nextPutAll: 'null'</body></methods><methods><class-id>Grease.GRSmallDictionary</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptOn: aStream	JSStream encodeDictionary: self on: aStream</body></methods><methods><class-id>Grease.DateAndTime</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptMonthIndex	^ self monthIndex - 1</body><body package="Javascript-Core">javascriptOn: aStream	aStream nextPutAll: 'new Date('.	#( year javascriptMonthIndex dayOfMonth hour minute second )		do: [ :each | aStream javascript: (self perform: each) ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $)</body></methods><methods><class-id>Seaside.WACallbackRegistry</class-id> <category>*javascript-core</category><body package="Javascript-Core">passengerAt: aString	^ self passengerAt: aString ifAbsent: [ nil ]</body><body package="Javascript-Core">passengerAt: aString ifAbsent: aBlock	| passenger |	passenger := callbacks at: aString ifAbsent: [ ^ aBlock value ].	passenger isPassenger ifFalse: [ ^ aBlock value ].	^ passenger object</body><body package="Javascript-Core">registerPassenger: anObject named: aString	| callback |	callback := JSPassenger new.	callback setKey: aString callbacks: callbacks; setObject: anObject.	callbacks at: (callback convertKey: aString) put: callback.	^ aString</body></methods><methods><class-id>Core.Stream</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascript: anObject	anObject javascriptOn: self</body></methods><methods><class-id>Core.Date</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptMonthIndex	^ self monthIndex - 1</body><body package="Javascript-Core">javascriptOn: aStream	aStream nextPutAll: 'new Date('.	#( year javascriptMonthIndex dayOfMonth )		do: [ :each | aStream javascript: (self perform: each) ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $)</body></methods><methods><class-id>Seaside.WATagBrush</class-id> <category>*javascript-core</category><body package="Javascript-Core">passenger: anObject	"Assign a passenger object to the receiver. This is used to keep a mapping between DOM elements and Smalltalk objects. Note, that to we are required to assign a numeric id to the reciever in order to keep the mapping between DOM element and Smalltalk object."	canvas callbacks registerPassenger: anObject named: self ensureId</body><body package="Javascript-Core">script: anObject	"Attach a JavaScript object to the receiver. The argument automatically knows the ID of the DOM element it should operate on and will be evaluated when the page complete loading."	(anObject isNil) 		ifTrue: [ ^ self ].	(anObject respondsTo: #id:)		ifTrue: [ anObject id: self ensureId ].	canvas document addLoadScript: anObject</body></methods><methods><class-id>Seaside.WARenderer</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascript	^ (JSScript context: self context)		rendererClass: self species;		yourself</body><body package="Javascript-Core">logger	^ (JSLogger context: self context)		rendererClass: self species;		yourself</body></methods><methods><class-id>Seaside.WAUrl</class-id> <category>*javascript-core</category><body package="Javascript-Core">javascriptOn: aStream 	aStream javascript: self printString</body></methods><initialize><class-id>Javascript.JSStream</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>WAObject</name><environment>Seaside</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core</category><attributes><package>Seaside-Core</package></attributes></class><class><name>Collection</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>DateAndTime</name><environment>Grease</environment><super>Core.Timestamp</super><private>false</private><indexed-type>none</indexed-type><inst-vars>offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Grease-VisualWorks-Core</package></attributes></class><class><name>WACallback</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Callbacks</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WATagBrush</name><environment>Seaside</environment><super>Seaside.WABrush</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Canvas</category><attributes><package>Seaside-Canvas</package></attributes></class><class><name>WACallbackRegistry</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>callbacks nextKey </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Callbacks</category><attributes><package>Seaside-Core</package></attributes></class><class><name>Stream</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private IOConstants.*			</imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>WAUrl</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scheme user password host port path slash queryFields fragment pathParameters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-HTTP</category><attributes><package>Seaside-Core</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>WARenderer</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>context lastId </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Seaside-Core-Rendering</category><attributes><package>Seaside-Core</package></attributes></class><class><name>Duration</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>period scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Core</category><attributes><package>Magnitude-General</package></attributes></class><class><name>GRSmallDictionary</name><environment>Grease</environment><super>Grease.GRObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>size keys values </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Grease-Core-Collections</category><attributes><package>Grease-Core</package></attributes></class><class><name>UndefinedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Date</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>day year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class></st-source>