<?xml version="1.0"?><st-source><!-- Name: Seaside-Tests-CanvasComment: Unit tests for the package Seaside-Canvas.DbIdentifier: bear73DbTrace: 494120DbUsername: jkottDbVersion: 3.2.0 - pmm.69 2DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Canvas' '') #(#any 'Grease-Tests-VisualWorks-Core' '') #(#any 'Seaside-Tests-Core' ''))Id: e76c113d-3332-4780-a0a4-6570627f9db4Namespace: SeasidePackageName: Seaside-Tests-CanvasParcel: #('Seaside-Tests-Canvas')ParcelName: Seaside-Tests-CanvasPrerequisiteDescriptions: #(#(#name 'Seaside-Namespace') #(#name 'Seaside-Canvas') #(#name 'Grease-Tests-VisualWorks-Core' #componentType #package) #(#name 'Seaside-Tests-Core'))PrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Canvas' '') #('Grease-Tests-VisualWorks-Core' '') #('Seaside-Tests-Core' ''))PrintStringCache: (3.2.0 - pmm.69 2,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Tests-Canvas-pmm.69.mczVersion: 3.2.0 - pmm.69 2Date: 12:17:55 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAAbstractCanvasBrushTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WABuilderCanvasTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WAEmailAddressTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WARenderingTest</name><environment>Seaside</environment><super>Seaside.WAContextTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WAPredictableCache</name><environment>Seaside</environment><super>Seaside.WABidirectionalCache</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nextKey </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><comment><class-id>Seaside.WAPredictableCache</class-id><body>A WAPredictableCache is a WACache that uses incrementing numbers as cache keys. This way the keys are predictable. This is useful for tests.</body></comment><class><name>WACanvasBrushTest</name><environment>Seaside</environment><super>Seaside.WAAbstractCanvasBrushTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WAResourceBaseUrlTest</name><environment>Seaside</environment><super>Seaside.WAAbstractCanvasBrushTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WAFormCharEncodingFromHandlerTest</name><environment>Seaside</environment><super>Seaside.WAAbstractCanvasBrushTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><comment><class-id>Seaside.WAFormCharEncodingFromHandlerTest</class-id><body>I test that the encoding from the handler is taken if a handler is present but a codec is missing.</body></comment><class><name>WAFormTagTest</name><environment>Seaside</environment><super>Seaside.WACanvasBrushTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><class><name>WAFormCharEncodingFromCodecTest</name><environment>Seaside</environment><super>Seaside.WAAbstractCanvasBrushTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Canvas</category><attributes><package>Seaside-Tests-Canvas</package></attributes></class><comment><class-id>Seaside.WAFormCharEncodingFromCodecTest</class-id><body>I test that the encoding of the codec on the request context overwrites the encoding on the application.</body></comment><methods><class-id>Seaside.WAAbstractCanvasBrushTest</class-id> <category>private</category><body package="Seaside-Tests-Canvas">assert: aBlock gives: aString	| html |	html := self builder		render: aBlock.	self		assert: html = aString		description:	 'Expected: ', aString printString, ', Actual: ', html printString		resumable: true</body><body package="Seaside-Tests-Canvas">builder	^ WAHtmlCanvas builder</body></methods><methods><class-id>Seaside.WAAbstractCanvasBrushTest class</class-id> <category>testing</category><body package="Seaside-Tests-Canvas">isAbstract	^ self name = #WAAbstractCanvasBrushTest</body></methods><methods><class-id>Seaside.WAAbstractCanvasBrushTest class</class-id> <category>accessing</category><body package="Seaside-Tests-Canvas">packageNamesUnderTest	^ #('Seaside-Canvas')</body></methods><methods><class-id>Seaside.WABuilderCanvasTest</class-id> <category>tests</category><body package="Seaside-Tests-Canvas">testBody	| actual |	actual := WAHtmlCanvas builder render: [ :html |		html unorderedList: [			html listItem: 'an item' ] ].	self assert: actual = '&lt;ul&gt;&lt;li&gt;an item&lt;/li&gt;&lt;/ul&gt;'</body><body package="Seaside-Tests-Canvas">testFullDocument	| actual |	actual := WAHtmlCanvas builder fullDocument: true; render: [ :html |		html unorderedList: [			html listItem: 'an item' ] ].	self assert: actual = '&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body onload="onLoad()"&gt;&lt;ul&gt;&lt;li&gt;an item&lt;/li&gt;&lt;/ul&gt;&lt;script type="text/javascript"&gt;function onLoad(){};&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;'</body><body package="Seaside-Tests-Canvas">testFullDocumentWithBlock	| actual |	actual := WAHtmlCanvas builder fullDocument: true;		rootBlock: [ :root |			root title: 'title'.			root stylesheet add: 'body{font-size:12px;}'.			root javascript add: 'alert("loaded")' ];		render: [ :html |			html unorderedList: [				html listItem: 'an item' ] ].	self assert: actual =  '&lt;html&gt;&lt;head&gt;&lt;title&gt;title&lt;/title&gt;&lt;style type="text/css"&gt;body{font-size:12px;}&lt;/style&gt;&lt;script type="text/javascript"&gt;alert("loaded")&lt;/script&gt;&lt;/head&gt;&lt;body onload="onLoad()"&gt;&lt;ul&gt;&lt;li&gt;an item&lt;/li&gt;&lt;/ul&gt;&lt;script type="text/javascript"&gt;function onLoad(){};&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;'</body></methods><methods><class-id>Seaside.WAEmailAddressTest</class-id> <category>private</category><body package="Seaside-Tests-Canvas">render: anObject	^ WARenderer builder		documentClass: WAHtmlDocument;		render: anObject</body></methods><methods><class-id>Seaside.WAEmailAddressTest</class-id> <category>tests</category><body package="Seaside-Tests-Canvas">testAddress	| address |	address := WAEmailAddress address: 'philippe.marschall@gmail.com'.	self assert: address address = 'philippe.marschall@gmail.com'.	self assert: address username isNil.	self assert: address greaseString = 'philippe.marschall@gmail.com'</body><body package="Seaside-Tests-Canvas">testAddressUsername	| address |	address := WAEmailAddress 		address: 'philippe.marschall@gmail.com'		username: 'Philippe Marschall'.	self assert: address address = 'philippe.marschall@gmail.com'.	self assert: address username = 'Philippe Marschall'.	self assert: address greaseString = '"Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;'</body><body package="Seaside-Tests-Canvas">testEmpty	| address |	address := WAEmailAddress address: (String 			with: Character cr			with: Character lf) , 'philippe.marschall@gmail.com'.	self assert: address address = ''.	self assert: address username isNil.	self assert: address greaseString = ''</body><body package="Seaside-Tests-Canvas">testGreaseString	| address |	address := WAEmailAddress 		address: 'philippe.marschall@gmail.com'		username: 'Philippe Marschall'.	self assert: address greaseString = '"Philippe Marschall" &lt;philippe.marschall@gmail.com&gt;'</body><body package="Seaside-Tests-Canvas">testInjection	| address |	address := WAEmailAddress address: 'philippe.marschall@gmail.com' , (String 				with: Character cr				with: Character lf) , 'Evil-Header: evil-value'.	self assert: address address = 'philippe.marschall@gmail.com'.	self assert: address username isNil.	self assert: address greaseString = 'philippe.marschall@gmail.com'</body><body package="Seaside-Tests-Canvas">testRendering	| address |	address := WAEmailAddress		address: 'philippe.marschall@gmail.com'		username: 'Philippe Marschall'.	self assert: address address = 'philippe.marschall@gmail.com'.	self assert: address username = 'Philippe Marschall'.	self assert: (self render: address) = 'Philippe Marschall &amp;lt;philippe.marschall@gmail.com&amp;gt;'</body></methods><methods><class-id>Seaside.WARenderingTest</class-id> <category>tests</category><body package="Seaside-Tests-Canvas">testConditionalComment	self		assert: [ :html |			html if greaterThan; orEqual; ie55; do: [				html script					defer;					url: 'http://www.example.com/bugs.js' ] ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;!--[if gte IE 5.5]&gt;&lt;script defer="defer" src="http://www.example.com/bugs.js"&gt;&lt;/script&gt;&lt;![endif]--&gt;'.			self		assert: [ :html |			html if not; ie; do: [				html script					url: 'http://www.example.com/bugs.js' ] ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;!--[if ! IE]&gt;&lt;script src="http://www.example.com/bugs.js"&gt;&lt;/script&gt;&lt;![endif]--&gt;'</body><body package="Seaside-Tests-Canvas">testContentType	self		assert: [ :html |			html meta contentType: 'application/xhtml+xml' seasideMimeType  ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;meta http-equiv="Content-Type" content="application/xhtml+xml"/&gt;'.	self		assert: [ :html |			html meta contentType: 'application/xhtml+xml'  ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;meta http-equiv="Content-Type" content="application/xhtml+xml"/&gt;'</body><body package="Seaside-Tests-Canvas">testJavascript	self		assert: [ :html |			html javascript				add: 'true &amp; false'  ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;script type="text/javascript"&gt;true &amp; false&lt;/script&gt;'</body><body package="Seaside-Tests-Canvas">testLinkElement	self		assert: [ :html |			html stylesheet				addAural;				addTeletype;				title: 'aTilte';				url: 'http://example.com/style.css'  ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;link rel="stylesheet" type="text/css" media="aural, tty" title="aTilte" href="http://example.com/style.css"/&gt;'</body><body package="Seaside-Tests-Canvas">testLinkElementWithContent	self		assert: [ :html |			html stylesheet				add: 'div &gt; em { color: blue; }'  ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;style type="text/css"&gt;div &gt; em { color: blue; }&lt;/style&gt;'.	self		assert: [ :html |			html stylesheet				add: 'E[foo$="bar"]'  ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;style type="text/css"&gt;E[foo$="bar"]&lt;/style&gt;'</body><body package="Seaside-Tests-Canvas">testRevealedConditionalComment		self assert: [ :html |			html revealedIf ie7; do: [				html script					defer;					url: 'http://www.example.com/bugs.js' ] ]		gives: '&lt;title&gt;&lt;/title&gt;&lt;!--[if IE 7]&gt;&lt;!--&gt;&lt;script defer="defer" src="http://www.example.com/bugs.js"&gt;&lt;/script&gt;&lt;!--&lt;![endif]--&gt;'</body></methods><methods><class-id>Seaside.WARenderingTest</class-id> <category>private</category><body package="Seaside-Tests-Canvas">assert: aBlock gives: aString	| html |	html := WAHtmlCanvas builder		fullDocument: true;		rootBlock: aBlock;		render: [ :canvas | ].	self assert: '&lt;html&gt;&lt;head&gt;' , aString , '&lt;/head&gt;&lt;body onload="onLoad()"&gt;&lt;script type="text/javascript"&gt;function onLoad(){};&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;' = html</body></methods><methods><class-id>Seaside.WAPredictableCache</class-id> <category>initialization</category><body package="Seaside-Tests-Canvas">initialize	super initialize.	nextKey := 1</body></methods><methods><class-id>Seaside.WAPredictableCache</class-id> <category>public</category><body package="Seaside-Tests-Canvas">store: anObject	"Store anObject in the cache, generating a new random key. Return the key."		| key |	key := nextKey greaseString.	nextKey := nextKey + 1.	self at: key put: anObject.		^ key</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests-tags-tables</category><body package="Seaside-Tests-Canvas">testTable	self		assert: [ :html | html table ]		gives: '&lt;table&gt;&lt;/table&gt;'.	self		assert: [ :html | html table cellpadding: 0; cellspacing: 1 ]		gives: '&lt;table cellpadding="0" cellspacing="1"&gt;&lt;/table&gt;'.	self		assert: [ :html | html table frame: 'box'; rules: 'groups' ]		gives: '&lt;table frame="box" rules="groups"&gt;&lt;/table&gt;'.	self		assert: [ :html | html table summary: 'a short summary' ]		gives: '&lt;table summary="a short summary"&gt;&lt;/table&gt;'</body><body package="Seaside-Tests-Canvas">testTableColumn	self		assert: [ :html | html tableColumn ]		gives: '&lt;col/&gt;'.	self		assert: [ :html | html tableColumn character: '.'; characterOffset: 2 ]		gives: '&lt;col char="." charoff="2"/&gt;'.	self		assert: [ :html | html tableColumn align: 'right'; verticalAlign: 'top' ]		gives: '&lt;col align="right" valign="top"/&gt;'.	self		assert: [ :html | html tableColumn span: 3; width: '20' ]		gives: '&lt;col span="3" width="20"/&gt;'</body><body package="Seaside-Tests-Canvas">testTableColumnGroup	self		assert: [ :html | html tableColumnGroup ]		gives: '&lt;colgroup&gt;&lt;/colgroup&gt;'.	self		assert: [ :html | html tableColumnGroup character: '.'; characterOffset: 2 ]		gives: '&lt;colgroup char="." charoff="2"&gt;&lt;/colgroup&gt;'.	self		assert: [ :html | html tableColumnGroup align: 'right'; verticalAlign: 'top' ]		gives: '&lt;colgroup align="right" valign="top"&gt;&lt;/colgroup&gt;'.	self		assert: [ :html | html tableColumnGroup span: 3; width: '20' ]		gives: '&lt;colgroup span="3" width="20"&gt;&lt;/colgroup&gt;'</body><body package="Seaside-Tests-Canvas">testTableData	self		assert: [ :html | html tableData ]		gives: '&lt;td&gt;&lt;/td&gt;'.	self		assert: [ :html | html tableData character: '.'; characterOffset: 2 ]		gives: '&lt;td char="." charoff="2"&gt;&lt;/td&gt;'.	self		assert: [ :html | html tableData align: 'right'; verticalAlign: 'top' ]		gives: '&lt;td align="right" valign="top"&gt;&lt;/td&gt;'.	self		assert: [ :html | html tableData abbreviation: 'short'; with: 'longer' ]		gives: '&lt;td abbr="short"&gt;longer&lt;/td&gt;'.	self		assert: [ :html | html tableData axis: 'time' ]		gives: '&lt;td axis="time"&gt;&lt;/td&gt;'.	self		assert: [ :html | html tableData colSpan: 2; rowSpan: 3 ]		gives: '&lt;td colspan="2" rowspan="3"&gt;&lt;/td&gt;'.	self		assert: [ :html | html tableData headers: 'zork' ]		gives: '&lt;td headers="zork"&gt;&lt;/td&gt;'.	self		assert: [ :html | html tableData scope: 'colgroup' ]		gives: '&lt;td scope="colgroup"&gt;&lt;/td&gt;'</body><body package="Seaside-Tests-Canvas">testTableFull	self		assert: [ :html | 			html table: [				html tableCaption: 'title'.				html tableColumnGroup: [					html tableColumn.					html tableColumn ].				html tableHead: [					html tableRow: [ 						html tableHeading: 'a1'.						html tableHeading: 'a2' ] ].				html tableFoot: [					html tableRow: [ 						html tableData: 'b1'.						html tableData: 'b2' ] ].				html tableBody: [					html tableRow: [ 						html tableData: 'c1'.						html tableData: 'c2' ].					html tableRow: [ 						html tableData: 'd1'.						html tableData: 'd2' ] ] ] ]		gives: '&lt;table&gt;&lt;caption&gt;title&lt;/caption&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;a1&lt;/th&gt;&lt;th&gt;a2&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tfoot&gt;&lt;tr&gt;&lt;td&gt;b1&lt;/td&gt;&lt;td&gt;b2&lt;/td&gt;&lt;/tr&gt;&lt;/tfoot&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;c2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;d1&lt;/td&gt;&lt;td&gt;d2&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</body><body package="Seaside-Tests-Canvas">testTableHeading	self		assert: [ :html | html tableHeading ]		gives: '&lt;th&gt;&lt;/th&gt;'.	self		assert: [ :html | html tableHeading character: '.'; characterOffset: 2 ]		gives: '&lt;th char="." charoff="2"&gt;&lt;/th&gt;'.	self		assert: [ :html | html tableHeading align: 'right'; verticalAlign: 'top' ]		gives: '&lt;th align="right" valign="top"&gt;&lt;/th&gt;'.	self		assert: [ :html | html tableHeading abbreviation: 'short'; with: 'longer' ]		gives: '&lt;th abbr="short"&gt;longer&lt;/th&gt;'.	self		assert: [ :html | html tableHeading axis: 'time' ]		gives: '&lt;th axis="time"&gt;&lt;/th&gt;'.	self		assert: [ :html | html tableHeading colSpan: 2; rowSpan: 3 ]		gives: '&lt;th colspan="2" rowspan="3"&gt;&lt;/th&gt;'.	self		assert: [ :html | html tableHeading headers: 'zork' ]		gives: '&lt;th headers="zork"&gt;&lt;/th&gt;'.	self		assert: [ :html | html tableHeading scope: 'colgroup' ]		gives: '&lt;th scope="colgroup"&gt;&lt;/th&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests-tags</category><body package="Seaside-Tests-Canvas">testBlock	self		assert: [ :html | html strong: [ html text: 'nes'; text: 'sie' ] ]		gives: '&lt;strong&gt;nessie&lt;/strong&gt;'.	self		assert: [ :html | html strong: [ :html2 | html2 text: 'nes'; text: 'sie' ] ]		gives: '&lt;strong&gt;nessie&lt;/strong&gt;'</body><body package="Seaside-Tests-Canvas">testBreakTag	self		assert: [ :html | html break ]		gives: '&lt;br/&gt;'</body><body package="Seaside-Tests-Canvas">testEditTag	self		assert: [ :html | html inserted: 'foo' ]		gives: '&lt;ins&gt;foo&lt;/ins&gt;'.	self		assert: [ :html | html deleted: 'bar' ]		gives: '&lt;del&gt;bar&lt;/del&gt;'</body><body package="Seaside-Tests-Canvas">testFieldSetTag	self		assert: [ :html | html fieldSet: 'foo' ]		gives: '&lt;fieldset&gt;foo&lt;/fieldset&gt;'.	self		assert: [ :html | html fieldSet legend: 'bar'; with: 'zork' ]		gives: '&lt;fieldset&gt;&lt;legend&gt;bar&lt;/legend&gt;zork&lt;/fieldset&gt;'</body><body package="Seaside-Tests-Canvas">testHeadingTag	self		assert: [ :html | html heading ]		gives: '&lt;h1&gt;&lt;/h1&gt;'.	self		assert: [ :html | html heading level: 2; with: 'foo' ]		gives: '&lt;h2&gt;foo&lt;/h2&gt;'.	self		assert: [ :html | html heading level: 0; with: 'foo' ]		gives: '&lt;h1&gt;foo&lt;/h1&gt;'.	self		assert: [ :html | html heading level: 7; with: 'foo' ]		gives: '&lt;h6&gt;foo&lt;/h6&gt;'</body><body package="Seaside-Tests-Canvas">testHorizontalRuleTag	self		assert: [ :html | html horizontalRule ]		gives: '&lt;hr/&gt;'</body><body package="Seaside-Tests-Canvas">testImageTag	self		assert: [ :html | html image url: 'http://www.seaside.st/logo.jpeg' ]		gives: '&lt;img alt="" src="http://www.seaside.st/logo.jpeg"/&gt;'.			self		assert: [ :html |			html image				title: 'Seaside';				altText: 'the Seaside logo';				url: 'http://www.seaside.st/logo.jpeg' ]		gives: '&lt;img alt="the Seaside logo" title="Seaside" src="http://www.seaside.st/logo.jpeg"/&gt;'</body><body package="Seaside-Tests-Canvas">testLabelTag	self		assert: [ :html | html label: 'foo' ]		gives: '&lt;label&gt;foo&lt;/label&gt;'.	self		assert: [ :html | html label for: 'bar'; with: 'zork' ]		gives: '&lt;label for="bar"&gt;zork&lt;/label&gt;'</body><body package="Seaside-Tests-Canvas">testOrderedListTag	self		assert: [ :html | html orderedList ]		gives: '&lt;ol&gt;&lt;/ol&gt;'.	self		assert: [ :html | html orderedList add: 1 ]		gives: '&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ol&gt;'.	self		assert: [ :html | html orderedList addAll: #( 1 2 ) ]		gives: '&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ol&gt;'.	self		assert: [ :html | html orderedList list: #( 1 2 ) ]		gives: '&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ol&gt;'.	self		assert: [ :html | html orderedList list: #( 1 2 ); with: [ html listItem: 3 ] ]		gives: '&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ol&gt;'.	self		assert: [ :html | html orderedList add: 2; labels: [ :e | 2 * e ] ]		gives: '&lt;ol&gt;&lt;li&gt;4&lt;/li&gt;&lt;/ol&gt;'.	self		assert: [ :html | html orderedList add: 2; labels: [ :e | 2 * e ]; with: [ html listItem: 5 ] ]		gives: '&lt;ol&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;/ol&gt;'</body><body package="Seaside-Tests-Canvas">testParagraphTag	self		assert: [ :html | html paragraph ]		gives: '&lt;p&gt;&lt;/p&gt;'.	self		assert: [ :html | html paragraph: 'foo' ]		gives: '&lt;p&gt;foo&lt;/p&gt;'</body><body package="Seaside-Tests-Canvas">testScriptTag	self		assert: [ :html | html script: 'alert("&lt;foo&gt;")' ]		gives: '&lt;script type="text/javascript"&gt;alert("&lt;foo&gt;")&lt;/script&gt;'.	self		assert: [ :html | html script: 'true &amp; false' ]		gives: '&lt;script type="text/javascript"&gt;true &amp; false&lt;/script&gt;'.	self		assert: [ :html | html script defer; with: 'alert("&lt;foo&gt;")' ]		gives: '&lt;script defer="defer" type="text/javascript"&gt;alert("&lt;foo&gt;")&lt;/script&gt;'</body><body package="Seaside-Tests-Canvas">testUnorderedListTag	self		assert: [ :html | html unorderedList ]		gives: '&lt;ul&gt;&lt;/ul&gt;'.	self		assert: [ :html | html unorderedList add: 1 ]		gives: '&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ul&gt;'.	self		assert: [ :html | html unorderedList addAll: #( 1 2 ) ]		gives: '&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;'.	self		assert: [ :html | html unorderedList list: #( 1 2 ) ]		gives: '&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;'.	self		assert: [ :html | html unorderedList list: #( 1 2 ); with: [ html listItem: 3 ] ]		gives: '&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;'.	self		assert: [ :html | html unorderedList add: 2; labels: [ :e | 2 * e ] ]		gives: '&lt;ul&gt;&lt;li&gt;4&lt;/li&gt;&lt;/ul&gt;'.	self		assert: [ :html | html unorderedList add: 2; labels: [ :e | 2 * e ]; with: [ html listItem: 5 ] ]		gives: '&lt;ul&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;/ul&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests-attributes</category><body package="Seaside-Tests-Canvas">testCoreAttributesClass	self		assert: [ :html | html div class: 'foo' ]		gives: '&lt;div class="foo"&gt;&lt;/div&gt;'.	self		assert: [ :html | html div class: 'foo'; class: 'bar' ]		gives: '&lt;div class="foo bar"&gt;&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testCoreAttributesId	self		assert: [ :html | html div id: 'foo' ]		gives: '&lt;div id="foo"&gt;&lt;/div&gt;'.	self		assert: [ :html | html div id: 'foo'; id: 'bar' ]		gives: '&lt;div id="bar"&gt;&lt;/div&gt;'.	self		assert: [ :html | self assert: (html div id: 'foo'; id) = 'foo' ]		gives: '&lt;div id="foo"&gt;&lt;/div&gt;'.	self		assert: [ :html | self assert: (html div id) isNil ]		gives: '&lt;div&gt;&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testCoreAttributesStyle	self		assert: [ :html | html div style: 'left: 0' ]		gives: '&lt;div style="left: 0"&gt;&lt;/div&gt;'.	self		assert: [ :html | html div style: 'left: 0'; style: 'top: 2' ]		gives: '&lt;div style="left: 0;top: 2"&gt;&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testCoreAttributesTitle	self		assert: [ :html | html div title: 'Seaside' ]		gives: '&lt;div title="Seaside"&gt;&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testEventAttributes	self		assert: [ :html | html div onBlur: 1; onBlur: 2 ]		gives: '&lt;div onblur="1;2"&gt;&lt;/div&gt;'.	self		assert: [ :html | html div onChange: 1; onChange: 2 ]		gives: '&lt;div onchange="1;2"&gt;&lt;/div&gt;'.	self		assert: [ :html | html div onClick: 1; onClick: 2 ]		gives: '&lt;div onclick="1;2"&gt;&lt;/div&gt;'.	self		assert: [ :html | html div onDoubleClick: 1; onDoubleClick: 2 ]		gives: '&lt;div ondblclick="1;2"&gt;&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testKeyboardAttributes	self		assert: [ :html | html anchor accessKey: $a ]		gives: '&lt;a accesskey="a"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor tabIndex: 3 ]		gives: '&lt;a tabindex="3"&gt;&lt;/a&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests-tags-anchors</category><body package="Seaside-Tests-Canvas">testAnchor	self		assert: [ :html | html anchor ]		gives: '&lt;a&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor callback: [ ]; with: 'foo' ]		gives: '&lt;a href="/?1"&gt;foo&lt;/a&gt;'.	self		assert: [ :html |			html anchor callback: [ ]; with: 'foo'.			html anchor callback: [ ]; with: 'bar' ]		gives: '&lt;a href="/?1"&gt;foo&lt;/a&gt;&lt;a href="/?2"&gt;bar&lt;/a&gt;'.	self		assert: [ :html |			html anchor				extraPath: 'zork';				callback: [ ];				with: 'foo' ]		gives: '&lt;a href="/zork?1"&gt;foo&lt;/a&gt;'.	self		assert: [ :html |			html anchor				extraParameters: 'zork';				callback: [ ];				with: 'foo' ]		gives: '&lt;a href="/?zork&amp;amp;1"&gt;foo&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testAnchorAttributes	self		assert: [ :html | html anchor charset: 'utf-8' ]		gives: '&lt;a charset="utf-8"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor name: 'foo' ]		gives: '&lt;a name="foo"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor relationship: 'home' ]		gives: '&lt;a rel="home"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor relationship: 'home'; relationship: 'parent' ]		gives: '&lt;a rel="home parent"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor reverse: 'home' ]		gives: '&lt;a rev="home"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor reverse: 'home'; reverse: 'parent' ]		gives: '&lt;a rev="home parent"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor target: '_new' ]		gives: '&lt;a target="_new"&gt;&lt;/a&gt;'.	self		assert: [ :html | html anchor type: 'text/plain' ]		gives: '&lt;a type="text/plain"&gt;&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testAnchorCallback	self		assert: [ :html | html anchor callback: [ ] ]		gives: '&lt;a href="/?1"&gt;&lt;/a&gt;'.			self		assert: [ :html | 			self 				should: [ html anchor callback: [ :value | ] ]				raise: Error ]		gives: '&lt;a&gt;&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testAnchorUrl	| url string |	url := WAUrl new.	url		host: 'www.seaside.st';		addToPath: 'foo bar&amp;zork&lt;blah';		addField: '1' value: nil;		addField: '2' value: 123;		addField: '3' value: 'foo bar&amp;zork'.	string := 'http://www.seaside.st/foo%20bar%26zork%3Cblah?1&amp;amp;2=123&amp;amp;3=foo%20bar%26zork'.	self		assert: [ :html | html anchor url: url; with: url ]		gives: '&lt;a href="' , string , '"&gt;' , string , '&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testMapTag	self		assert: [ :html | html map callback: [ :point | ]; with: [ html image url: 'seaside.jpg' ] ]		gives: '&lt;a href="/?1="&gt;&lt;img alt="" ismap="ismap" src="seaside.jpg"/&gt;&lt;/a&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests-tags-forms</category><body package="Seaside-Tests-Canvas">testButton	self		assert: [ :html | html button ]		gives: '&lt;button type="submit"&gt;&lt;/button&gt;'.	self		assert: [ :html | html button text: 'foo' ]		gives: '&lt;button type="submit"&gt;foo&lt;/button&gt;'.	self		assert: [ :html | html button with: 'foo' ]		gives: '&lt;button type="submit"&gt;foo&lt;/button&gt;'.	self		assert: [ :html | html button beSubmit ]		gives: '&lt;button type="submit"&gt;&lt;/button&gt;'.	self		assert: [ :html | html button bePush ]		gives: '&lt;button type="button"&gt;&lt;/button&gt;'.	self		assert: [ :html | html button beReset ]		gives: '&lt;button type="reset"&gt;&lt;/button&gt;'</body><body package="Seaside-Tests-Canvas">testCancelButton	self		assert: [ :html | html cancelButton ]		gives: '&lt;input type="submit"/&gt;'.	self		assert: [ :html | html cancelButton callback: [ ] ]		gives: '&lt;input name="1" type="submit"/&gt;'.	self		assert: [ :html | html cancelButton on: #value of: self ]		gives: '&lt;input value="Value" name="1" type="submit"/&gt;'.	self		assert: [ :html | html cancelButton: 'foo' ]		gives: '&lt;input value="foo" type="submit"/&gt;'.	self		assert: [ :html | html cancelButton text: 'bar' ]		gives: '&lt;input value="bar" type="submit"/&gt;'.	self		assert: [ :html | html cancelButton with: 'zork' ]		gives: '&lt;input value="zork" type="submit"/&gt;'</body><body package="Seaside-Tests-Canvas">testCheckboxTag	self		assert: [ :html | html checkbox ]		gives: '&lt;input type="checkbox"/&gt;'.	self		assert: [ :html | html checkbox value: true ]		gives: '&lt;input checked="checked" type="checkbox"/&gt;'.	self		assert: [ :html | html checkbox value: false; callback: [ :value | ] ]		gives: '&lt;input name="1" type="checkbox"/&gt;&lt;input name="2" type="hidden"/&gt;'.	self		assert: [ :html | html checkbox value: true; callback: [ :value | ] ]		gives: '&lt;input checked="checked" name="1" type="checkbox"/&gt;&lt;input name="2" type="hidden"/&gt;'</body><body package="Seaside-Tests-Canvas">testImageButton	self		assert: [ :html | html imageButton ]		gives: '&lt;input type="image"/&gt;'</body><body package="Seaside-Tests-Canvas">testMultiSelectTag	self		assert: [ :html | html multiSelect ]		gives: '&lt;select multiple="multiple"&gt;&lt;/select&gt;'.	self		assert: [ :html | html multiSelect list: #(1 2) ]		gives: '&lt;select multiple="multiple"&gt;&lt;option&gt;1&lt;/option&gt;&lt;option&gt;2&lt;/option&gt;&lt;/select&gt;'.	self		assert: [ :html | html multiSelect list: #(1 2); labels: [ :v | 2 * v ] ]		gives: '&lt;select multiple="multiple"&gt;&lt;option&gt;2&lt;/option&gt;&lt;option&gt;4&lt;/option&gt;&lt;/select&gt;'.	self		assert: [ :html | html multiSelect list: #(1 2); enabled: [ :v | v even ] ]		gives: '&lt;select multiple="multiple"&gt;&lt;option disabled="disabled"&gt;1&lt;/option&gt;&lt;option&gt;2&lt;/option&gt;&lt;/select&gt;'.	self		assert: [ :html | html multiSelect list: #(3 4); callback: [ :v | ] ]		gives: '&lt;select name="1" multiple="multiple"&gt;&lt;option value="1"&gt;3&lt;/option&gt;&lt;option value="2"&gt;4&lt;/option&gt;&lt;/select&gt;&lt;input name="2" type="hidden"/&gt;'</body><body package="Seaside-Tests-Canvas">testPasswordInput	self		assert: [ :html | html passwordInput ]		gives: '&lt;input type="password"/&gt;'.	self		assert: [ :html | html passwordInput callback: [ :value | ] ]		gives: '&lt;input name="1" type="password"/&gt;'.	self		assert: [ :html | html passwordInput: 'foo' ]		gives: '&lt;input value="foo" type="password"/&gt;'.	self		assert: [ :html | html passwordInput value: 'bar' ]		gives: '&lt;input value="bar" type="password"/&gt;'.	self		assert: [ :html | html passwordInput text: 'zork' ]		gives: '&lt;input value="zork" type="password"/&gt;'.	self		assert: [ :html | html passwordInput callback: [ :value | ]; value: 'foo bar&amp;zork' ]		gives: '&lt;input name="1" value="foo bar&amp;amp;zork" type="password"/&gt;'</body><body package="Seaside-Tests-Canvas">testSelectTag	self		assert: [ :html | html select ]		gives: '&lt;select&gt;&lt;/select&gt;'.	self		assert: [ :html | html select list: #(1 2) ]		gives: '&lt;select&gt;&lt;option&gt;1&lt;/option&gt;&lt;option&gt;2&lt;/option&gt;&lt;/select&gt;'.	self		assert: [ :html | html select list: #(1 2); labels: [ :v | 2 * v ] ]		gives: '&lt;select&gt;&lt;option&gt;2&lt;/option&gt;&lt;option&gt;4&lt;/option&gt;&lt;/select&gt;'.	self		assert: [ :html | html select list: #(1 2); enabled: [ :v | v even ] ]		gives: '&lt;select&gt;&lt;option disabled="disabled"&gt;1&lt;/option&gt;&lt;option&gt;2&lt;/option&gt;&lt;/select&gt;'.	self		assert: [ :html | html select list: #(1 2); callback: [ :v | ] ]		gives: '&lt;select name="1"&gt;&lt;option value="1"&gt;1&lt;/option&gt;&lt;option value="2"&gt;2&lt;/option&gt;&lt;/select&gt;'</body><body package="Seaside-Tests-Canvas">testSubmitButton	self		assert: [ :html | html submitButton ]		gives: '&lt;input type="submit"/&gt;'.	self		assert: [ :html | html submitButton callback: [ ] ]		gives: '&lt;input name="1" type="submit"/&gt;'.	self		assert: [ :html | 			self 				should: [ html submitButton callback: [ :value | ] ]				raise: Error ]		gives: '&lt;input type="submit"/&gt;'.	self		assert: [ :html | html submitButton on: #value of: self ]		gives: '&lt;input value="Value" name="1" type="submit"/&gt;'.	self		assert: [ :html | html submitButton: 'foo' ]		gives: '&lt;input value="foo" type="submit"/&gt;'.	self		assert: [ :html | html submitButton text: 'bar' ]		gives: '&lt;input value="bar" type="submit"/&gt;'.	self		assert: [ :html | html submitButton with: 'zork' ]		gives: '&lt;input value="zork" type="submit"/&gt;'</body><body package="Seaside-Tests-Canvas">testTextArea	self		assert: [ :html | html textArea ]		gives: '&lt;textarea rows="auto" cols="auto"&gt;&lt;/textarea&gt;'.	self		assert: [ :html | html textArea columns: 4 ]		gives: '&lt;textarea rows="auto" cols="4"&gt;&lt;/textarea&gt;'.	self		assert: [ :html | html textArea rows: 40 ]		gives: '&lt;textarea rows="40" cols="auto"&gt;&lt;/textarea&gt;'.	self		assert: [ :html | html textArea callback: [ :value | ] ]		gives: '&lt;textarea rows="auto" cols="auto" name="1"&gt;&lt;/textarea&gt;'.	self		assert: [ :html | html textArea: 'foo bar&amp;zork' ]		gives: '&lt;textarea rows="auto" cols="auto"&gt;foo bar&amp;amp;zork&lt;/textarea&gt;'.	self		assert: [ :html | html textArea text: 'foo bar&amp;zork' ]		gives: '&lt;textarea rows="auto" cols="auto"&gt;foo bar&amp;amp;zork&lt;/textarea&gt;'.	self		assert: [ :html | html textArea value: 'foo bar&amp;zork' ]		gives: '&lt;textarea rows="auto" cols="auto"&gt;foo bar&amp;amp;zork&lt;/textarea&gt;'.	self		assert: [ :html | html textArea with: 'foo bar&amp;zork' ]		gives: '&lt;textarea rows="auto" cols="auto"&gt;foo bar&amp;amp;zork&lt;/textarea&gt;'.	self		assert: [ :html | html textArea callback: [ :value | ]; with: 'foo bar&amp;zork' ]		gives: '&lt;textarea rows="auto" cols="auto" name="1"&gt;foo bar&amp;amp;zork&lt;/textarea&gt;'</body><body package="Seaside-Tests-Canvas">testTextInput	self		assert: [ :html | html textInput ]		gives: '&lt;input type="text"/&gt;'.	self		assert: [ :html | html textInput callback: [ :value | ] ]		gives: '&lt;input name="1" type="text"/&gt;'.	self		assert: [ :html | html textInput: 'foo' ]		gives: '&lt;input value="foo" type="text"/&gt;'.	self		assert: [ :html | html textInput value: 'bar' ]		gives: '&lt;input value="bar" type="text"/&gt;'.	self		assert: [ :html | html textInput text: 'zork' ]		gives: '&lt;input value="zork" type="text"/&gt;'.	self		assert: [ :html | html textInput callback: [ :value | ]; value: 'foo bar&amp;zork' ]		gives: '&lt;input name="1" value="foo bar&amp;amp;zork" type="text"/&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests</category><body package="Seaside-Tests-Canvas">testBasicNesting	self assert: [ :html | html div ] gives: '&lt;div&gt;&lt;/div&gt;'.	self assert: [ :html | html div: 1 ] gives: '&lt;div&gt;1&lt;/div&gt;'.	self assert: [ :html | html div: 'foo' ] gives: '&lt;div&gt;foo&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testClosingTimes	self assert: [ :html | html div; div ] gives: '&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;'.	self assert: [ :html | html break; div ] gives: '&lt;br/&gt;&lt;div&gt;&lt;/div&gt;'.	self assert: [ :html | html div; break ] gives: '&lt;div&gt;&lt;/div&gt;&lt;br/&gt;'.	self assert: [ :html | html break; break ] gives: '&lt;br/&gt;&lt;br/&gt;'.	self assert: [ :html | html div: [ html div ]; div ] gives: '&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;'.	self assert: [ :html | html div: [ html break ]; div ] gives: '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;'.	self assert: [ :html | html div: [ html div ]; break ] gives: '&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br/&gt;'.	self assert: [ :html | html div: [ html break ]; break ] gives: '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;br/&gt;'</body><body package="Seaside-Tests-Canvas">testEnsureId	self		assert: [ :html | self assert: (html div ensureId = 'id1') ]		gives: '&lt;div id="id1"&gt;&lt;/div&gt;'.	self		assert: [ :html | self assert: (html div id: 'foo'; ensureId) = 'foo' ]		gives: '&lt;div id="foo"&gt;&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testExtendedNesting	self assert: [ :html | html div: nil ] gives: '&lt;div&gt;&lt;/div&gt;'.	self assert: [ :html | html div: #( 1 $a ) ] gives: '&lt;div&gt;1a&lt;/div&gt;'.	self assert: [ :html | html div: [ html span ] ] gives: '&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;'</body><body package="Seaside-Tests-Canvas">testLastId	self		assert: [ :html | self assert: html lastId isNil ]		gives: ''.	self		assert: [ :html | html nextId. html text: html lastId; text: html lastId ]		gives: 'id1id1'.	self		assert: [ :html | html anchor ensureId; callback: [ ]. self assert: html lastId = 'id1' ]		gives: '&lt;a id="id1" href="/?2"&gt;&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testNextId	self		assert: [ :html | html div id: html nextId ]		gives: '&lt;div id="id1"&gt;&lt;/div&gt;'.	self		assert: [ :html | html div id: 'foo'; id: html nextId ]		gives: '&lt;div id="id1"&gt;&lt;/div&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests-encoding</category><body package="Seaside-Tests-Canvas">testCanvasHtml	self assert: [ :html | html html: '&lt;' ] gives: '&lt;'.	self assert: [ :html | html html: '&gt;' ] gives: '&gt;'.	self assert: [ :html | html html: '"' ] gives: '"'.	self assert: [ :html | html html: '&amp;' ] gives: '&amp;'.	self		assert: [ :html | html html: '&lt;div title="&amp;amp;"&gt;' ]		gives: '&lt;div title="&amp;amp;"&gt;'</body><body package="Seaside-Tests-Canvas">testCanvasNil	self assert: [ :html | html text: nil ] gives: ''.	self assert: [ :html | html render: nil ] gives: ''</body><body package="Seaside-Tests-Canvas">testCanvasText	self assert: [ :html | html text: '&lt;' ] gives: '&amp;lt;'.	self assert: [ :html | html text: '&gt;' ] gives: '&amp;gt;'.	self assert: [ :html | html text: '"' ] gives: '&amp;quot;'.	self assert: [ :html | html text: '&amp;' ] gives: '&amp;amp;'.	self		assert: [ :html | html text: '&lt;div title="&amp;amp;"&gt;' ]		gives: '&amp;lt;div title=&amp;quot;&amp;amp;amp;&amp;quot;&amp;gt;'</body><body package="Seaside-Tests-Canvas">testCanvasWithLineBreaks	self		assert: [ :html | html withLineBreaks: 'abc' ] gives: 'a&lt;br/&gt;b&lt;br/&gt;c'</body><body package="Seaside-Tests-Canvas">testCanvasWithLineBreaksAndUrls	self		assert: [ :html | html withLineBreaksAndUrls: '1. This is http://www.seaside.st online.2. This is http://www.squeak.org online.' ]		gives: '1. This is &lt;a href="http://www.seaside.st"&gt;http://www.seaside.st&lt;/a&gt; online.&lt;br/&gt;2. This is &lt;a href="http://www.squeak.org"&gt;http://www.squeak.org&lt;/a&gt; online.'</body><body package="Seaside-Tests-Canvas">testCanvasWithUrls	self		assert: [ :html | html withUrls: 'This is http://www.seaside.st online.' ]		gives: 'This is &lt;a href="http://www.seaside.st"&gt;http://www.seaside.st&lt;/a&gt; online.'</body><body package="Seaside-Tests-Canvas">testSymbolRendering	self		assert: [ :html | html div id: #aSymbol; with: #aSecondSymbol ]		gives: '&lt;div id="aSymbol"&gt;aSecondSymbol&lt;/div&gt;'.	self		assert: [ :html | html div: [ html text: #aSecondSymbol ] ]		gives: '&lt;div&gt;aSecondSymbol&lt;/div&gt;'.	self		assert: [ :html | html div: [ html render: #aSecondSymbol ] ]		gives: '&lt;div&gt;aSecondSymbol&lt;/div&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>configuration</category><body package="Seaside-Tests-Canvas">createHandlers	^ Array with: (WARegistry new		 cache: WAPredictableCache new;		yourself)</body></methods><methods><class-id>Seaside.WAResourceBaseUrlTest</class-id> <category>private</category><body package="Seaside-Tests-Canvas">assertRoot: aBlock gives: aString	| html |	html := self builder		fullDocument: true;		rootBlock: aBlock;		render: [ :canvas | ].	self assert: html = ('&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;', aString, '&lt;/head&gt;&lt;body onload="onLoad()"&gt;&lt;script type="text/javascript"&gt;function onLoad(){};&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;')</body><body package="Seaside-Tests-Canvas">builder	^ super builder		resourceUrl: (WAUrl absolute: self resourceBaseUrl);		yourself</body><body package="Seaside-Tests-Canvas">resourceBaseUrl	^ 'https://www.seaside.st/resources/'</body></methods><methods><class-id>Seaside.WAResourceBaseUrlTest</class-id> <category>tests-attributes</category><body package="Seaside-Tests-Canvas">testAbsoluteFtpUrl	self		assert: [ :html | html anchor resourceUrl: 'ftp://www.google.com/track.js' ]		gives: '&lt;a href="ftp://www.google.com/track.js"&gt;&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testAbsoluteHttpUrl	self		assert: [ :html | html anchor resourceUrl: 'http://www.google.com/track.js' ]		gives: '&lt;a href="http://www.google.com/track.js"&gt;&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testAbsoluteHttpsUrl	self		assert: [ :html | html anchor resourceUrl: 'https://www.google.com/track.js' ]		gives: '&lt;a href="https://www.google.com/track.js"&gt;&lt;/a&gt;'</body><body package="Seaside-Tests-Canvas">testFileNameWithHttp	self		assert: [ :html | html image resourceUrl: 'http.gif' ]		gives: '&lt;img alt="" src="',self resourceBaseUrl,'http.gif"/&gt;'</body><body package="Seaside-Tests-Canvas">testImageTag	self		assert: [ :html | html image resourceUrl: 'logo.jpeg' ]		gives: '&lt;img alt="" src="',self resourceBaseUrl,'logo.jpeg"/&gt;'</body><body package="Seaside-Tests-Canvas">testRootScript	self		assertRoot: [ :html | html javascript resourceUrl: 'main.js' ]		gives: '&lt;script type="text/javascript" src="',self resourceBaseUrl,'main.js"&gt;&lt;/script&gt;'</body><body package="Seaside-Tests-Canvas">testSylesheet	self		assertRoot: [ :html | html stylesheet resourceUrl: 'main.css' ]		gives: '&lt;link rel="stylesheet" type="text/css" href="',self resourceBaseUrl,'main.css"/&gt;'</body></methods><methods><class-id>Seaside.WAResourceBaseUrlTest</class-id> <category>tests-tags</category><body package="Seaside-Tests-Canvas">testScriptTag	self		assert: [ :html | html script resourceUrl: 'track.js' ]		gives: '&lt;script src="',self resourceBaseUrl,'track.js" type="text/javascript"&gt;&lt;/script&gt;'</body></methods><methods><class-id>Seaside.WAFormCharEncodingFromHandlerTest</class-id> <category>configuration</category><body package="Seaside-Tests-Canvas">createHandlers	| handler |	handler := WARequestHandler new.	handler preferenceAt: #charSet put: 'utf-16'.	^ Array with: handler</body></methods><methods><class-id>Seaside.WAFormCharEncodingFromHandlerTest</class-id> <category>tests</category><body package="Seaside-Tests-Canvas">testCharCodingWithHandler	"445:WABasicFormTag does not honour character encoding setting"	self		assert: [ :html |			html basicForm ]		gives: '&lt;form accept-charset="utf-16" method="post" action="/"&gt;&lt;/form&gt;'</body></methods><methods><class-id>Seaside.WAFormTagTest</class-id> <category>private</category><body package="Seaside-Tests-Canvas">assertUserAgent: aString isInternetExplorer: aBoolean	self userAgent: aString.	WAHtmlCanvas builder		render: [ :html |			self assert: html form isInternetExplorer = aBoolean ]</body><body package="Seaside-Tests-Canvas">userAgent: aString	self requestContext request headers at: 'user-agent' put: aString</body></methods><methods><class-id>Seaside.WAFormTagTest</class-id> <category>tests</category><body package="Seaside-Tests-Canvas">testBasicForm	self		assert: [ :html |			html basicForm ]		gives: '&lt;form accept-charset="utf-8" method="post" action="/"&gt;&lt;/form&gt;'</body><body package="Seaside-Tests-Canvas">testDefaultAction	self userAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3'.	self		assert: [ :html |			html form defaultAction: [  ] ]		gives: '&lt;form accept-charset="utf-8" method="post" action="/"&gt;&lt;div&gt;&lt;input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/&gt;&lt;/div&gt;&lt;/form&gt;'.		self userAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)'.	self		assert: [ :html |			html form				defaultAction: [  ] ]		gives: '&lt;form accept-charset="utf-8" method="post" action="/"&gt;&lt;div&gt;&lt;input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/&gt;&lt;input tabindex="-1" name="2" style="position: absolute; top: -100em" type="text"/&gt;&lt;/div&gt;&lt;/form&gt;'</body><body package="Seaside-Tests-Canvas">testDefaultActionGet	self userAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3'.	self		assert: [ :html |			html form get; defaultAction: [  ] ]		gives: '&lt;form accept-charset="utf-8" method="get" action="/"&gt;&lt;div&gt;&lt;input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/form&gt;'.		self userAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)'.	self		assert: [ :html |			html form get; defaultAction: [  ] ]		gives: '&lt;form accept-charset="utf-8" method="get" action="/"&gt;&lt;div&gt;&lt;input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/&gt;&lt;input tabindex="-1" name="2" style="position: absolute; top: -100em" type="text"/&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/form&gt;'</body><body package="Seaside-Tests-Canvas">testIsGet	self userAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3'.	self		assert: [ :html | self assert: html form get isGet ]		gives: '&lt;form accept-charset="utf-8" method="get" action="/"&gt;&lt;div&gt;&lt;/div&gt;&lt;/form&gt;'</body><body package="Seaside-Tests-Canvas">testIsInternetExplorer	self assertUserAgent: 'Mozilla/5.0 (compatible; Konqueror/3.2; Linux 2.6.2) (KHTML, like Gecko)' isInternetExplorer: false.	self assertUserAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; MSIE 5.5; Windows NT 5.1) Opera 7.04 [de]' isInternetExplorer: false.	self assertUserAgent: 'Opera/9.10 (Windows NT 5.0; U; de)' isInternetExplorer: false.	self assertUserAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.0; de-DE; rv:1.6) Gecko/20040206 Firefox/1.0.1' isInternetExplorer: false.	self assertUserAgent: 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.04506)' isInternetExplorer: true.	self assertUserAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)' isInternetExplorer: true.	self assertUserAgent: 'Lynx/2.8.4rel.1 libwww-FM/2.14 SSL-MM/1.4.1 OpenSSL/0.9.6c' isInternetExplorer: false.	self assertUserAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de-AT; rv:1.8.1.2) Gecko/20070222 SeaMonkey/1.1.1' isInternetExplorer: false.	self assertUserAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3' isInternetExplorer: false</body></methods><methods><class-id>Seaside.WAFormCharEncodingFromCodecTest</class-id> <category>configuration</category><body package="Seaside-Tests-Canvas">createCodec	^ GRCodec forEncoding: 'iso-8859-1'</body><body package="Seaside-Tests-Canvas">createHandlers	| handler |	handler := WARequestHandler new.	handler preferenceAt: #charSet put: 'utf-16'.	^ Array with: handler</body></methods><methods><class-id>Seaside.WAFormCharEncodingFromCodecTest</class-id> <category>tests</category><body package="Seaside-Tests-Canvas">testCharCodingWithHandler	"569: Encoding information doesn't get included in the response"	self		assert: [ :html |			html basicForm ]		gives: '&lt;form accept-charset="iso-8859-1" method="post" action="/"&gt;&lt;/form&gt;'</body></methods><methods><class-id>Seaside.WACanvasBrushTest</class-id> <category>tests-encoding</category><body package="Seaside-Tests-Canvas">testCanvasWithLineBreaksGemStoneIssue289	"http://code.google.com/p/glassdb/issues/detail?id=289"	&lt;SeasideOverride&gt;	KnownTestFailure seasideTestIgnore: self running: [	| testBlock |	testBlock := [ :breakString |		| stream |		stream := WriteStream on: String new.		stream 			nextPut: $a;			nextPutAll: breakString;			nextPut: $b;			nextPutAll: breakString;			nextPut: $c.		self			assert: [ :html | html withLineBreaks: stream contents ] gives: 'a&lt;br/&gt;b&lt;br/&gt;c' ].	testBlock value: (String with: Character cr).	testBlock value: (String with: Character cr with: Character lf).	testBlock value: (String with: Character lf)	]	because: 'The test is GemStone specific. '</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-tests-canvas</category><body package="Seaside-Tests-Canvas">seasideTestsCanvas	^ self new		name: 'Seaside-Tests-Canvas';		description: 'Unit tests for the package Seaside-Canvas.';		addDependency: 'Seaside-Canvas';		addDependency: 'Seaside-Tests-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>WAContextTest</name><environment>Seaside</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Tests-Core-RequestHandling</category><attributes><package>Seaside-Tests-Core</package></attributes></class><class><name>WABidirectionalCache</name><environment>Seaside</environment><super>Seaside.WACache</super><private>false</private><indexed-type>none</indexed-type><inst-vars>byKey byValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Cache</category><attributes><package>Seaside-Core</package></attributes></class></st-source>