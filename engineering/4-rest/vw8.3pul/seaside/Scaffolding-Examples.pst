<?xml version="1.0"?><st-source><!-- Name: Scaffolding-ExamplesNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: Scaffolding-Examples contains classes that demonstrate how subclassing the scaffolding classes (GenericListUI, GenericEditUI, GenericViewUI) can be used to dynamically generate web pages with data accessed from a database with GlorpActiveRecrod.The examples contained herein can be configured in the Seaside configuration page (http://localhost:7777/seaside/config/Scaffolding-Examples). In order to make the examples work, Glorp database configuration has to be entered.After configuring Glorp, the examples can be accessed from Seaside dispatcher 'Scaffolding-Examples/' (http://localhost:7777/seaside/Scaffolding-Examples). DbIdentifier: bear73DbTrace: 492640DbUsername: jkottDbVersion: 3.2.0 - 1DevelopmentPrerequisites: #(#(#any 'Glorp' '') #(#any 'GlorpActiveRecord' '') #(#any 'Seaside-Component' '') #(#any 'Scaffolding-Namespace' '') #(#any 'Scaffolding-Core' ''))PackageName: Scaffolding-ExamplesParcel: #('Scaffolding-Examples')PrerequisiteDescriptions: #(#(#name 'Glorp' #componentType #bundle) #(#name 'GlorpActiveRecord' #componentType #package) #(#name 'Seaside-Component' #componentType #package) #(#name 'Scaffolding-Namespace' #componentType #package) #(#name 'Scaffolding-Core' #componentType #package))PrerequisiteParcels: #(#('Glorp' '') #('GlorpActiveRecord' '') #('Seaside-Component' '') #('Scaffolding-Namespace' '') #('Scaffolding-Core' ''))PrintStringCache: (3.2.0 - 1,jkott)Version: 3.2.0 - 1Date: 12:33:47 PM September 9, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.2) of September 9, 2016 on September 9, 2016 at 12:33:47 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>HobbyViewUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericViewUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>PersonListUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericListUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>MainForm</name><environment>Scaffolding</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>child child1 child2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>PersonViewUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericViewUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>Person</name><environment>Scaffolding</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name description alive death picture height birthdate birthtime address gender hobbies </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><comment><class-id>Scaffolding.Person</class-id><body>Instance Variables:	name &lt;Type&gt; description	description &lt;Object&gt; undocumented	alive &lt;Boolean&gt; Maps to database field public.people.alive	death &lt;Timestamp&gt; Maps to database field public.people.death	picture &lt;ByteArray&gt; Maps to database field public.people.picture	height &lt;Integer&gt; Maps to database field public.people.height	birthdate &lt;Date&gt; Maps to database field public.people.birthdate	birthtime &lt;Integer&gt; Maps to database field public.people.birthtime	address &lt;Type&gt; description	gender &lt;Integer&gt; Maps to database field public.people.gender_id	hobbies &lt;Type&gt; description</body></comment><class><name>GenderViewUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericViewUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>GenderEditUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericEditUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>HobbyListUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericListUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>Gender</name><environment>Scaffolding</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name people </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><comment><class-id>Scaffolding.Gender</class-id><body>Instance Variables:	name &lt;String&gt; Maps to database field public.genders.name	people &lt;Person&gt; Maps to database field public.people.gender_id</body></comment><class><name>AddressEditUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericEditUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>DefaultAddressEditUI</name><environment>Scaffolding</environment><super>Scaffolding.AddressEditUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>GenderListUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericListUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><comment><class-id>Scaffolding.GenderListUI</class-id><body>kjhkjhkonExplain any noteworthy implementation details.LimitationsNote any important limitations or implementation peculiarities.</body></comment><class><name>AddressViewUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericViewUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>MainPersonListUI</name><environment>Scaffolding</environment><super>Scaffolding.PersonListUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>child child1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>Hobby</name><environment>Scaffolding</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name person </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><comment><class-id>Scaffolding.Hobby</class-id><body>Instance Variables:	name &lt;String&gt; Maps to database field public.hobbies.name	person &lt;Integer&gt; Maps to database field public.hobbies.person_id</body></comment><class><name>Thig</name><environment>Scaffolding</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>Address</name><environment>Scaffolding</environment><super>Glorp.ActiveRecords.ActiveRecord</super><private>false</private><indexed-type>none</indexed-type><inst-vars>street people </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><comment><class-id>Scaffolding.Address</class-id><body>Instance Variables:	street &lt;String&gt; Maps to database field ADDRESSES.street	people &lt;Person&gt; Maps to database field public.people.address_id</body></comment><class><name>AddressListUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericListUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>PersonEditUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericEditUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>HobbyEditUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericEditUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><class><name>Schema1</name><environment>Scaffolding</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WebVelocity</category><attributes><package>Scaffolding-Examples</package></attributes></class><methods><class-id>Scaffolding.HobbyViewUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Hobby</body></methods><methods><class-id>Scaffolding.PersonListUI</class-id> <category>testing</category><body package="Scaffolding-Examples">shouldRenderPicture	^false</body></methods><methods><class-id>Scaffolding.MainForm</class-id> <category>accessing</category><body package="Scaffolding-Examples">children	"This method has to return a collection of all subcomponents (children) of the current component that will be rendered in #renderContentOn:.	If the contents returned by this method change over time make sure to return them in #states as well, otherwise the back button will fail."		^ Array with: child with: child1</body></methods><methods><class-id>Scaffolding.MainForm</class-id> <category>initialize-release</category><body package="Scaffolding-Examples">initialize	super initialize.	"The subcomponents are usually instance variables of the component that is 'embedding' them. 	Create instances of child components here"	child := DefaultAddressEditUI new.	child1 := HobbyListUI new.</body></methods><methods><class-id>Scaffolding.MainForm</class-id> <category>rendering</category><body package="Scaffolding-Examples">renderContentOn: html 	html div style:  'font-size: 70%'; with: 		[ html heading level: 3; with: 'Rendering child: ', child class name.		html render: child.		html heading level: 3; with: 'Rendering child1: ', child1 class name.		html render: child1.		]</body></methods><methods><class-id>Scaffolding.PersonViewUI</class-id> <category>testing</category><body package="Scaffolding-Examples">shouldRenderPicture	^false</body></methods><methods><class-id>Scaffolding.Person</class-id> <category>accessing</category><body package="Scaffolding-Examples">address	^address</body><body package="Scaffolding-Examples">address: anObject	address := anObject</body><body package="Scaffolding-Examples">alive	^alive</body><body package="Scaffolding-Examples">alive:  aBoolean	alive := aBoolean</body><body package="Scaffolding-Examples">birthdate	^birthdate</body><body package="Scaffolding-Examples">birthdate:  aDate	birthdate := aDate</body><body package="Scaffolding-Examples">birthtime	^birthtime</body><body package="Scaffolding-Examples">birthtime:  aInteger	birthtime := aInteger</body><body package="Scaffolding-Examples">death	^death</body><body package="Scaffolding-Examples">death:  aTimestamp	death := aTimestamp</body><body package="Scaffolding-Examples">height	^height</body><body package="Scaffolding-Examples">height:  aInteger	height := aInteger</body><body package="Scaffolding-Examples">name	^name</body><body package="Scaffolding-Examples">name:  aType	name := aType</body><body package="Scaffolding-Examples">picture	^picture</body><body package="Scaffolding-Examples">picture:  aByteArray	picture := aByteArray</body></methods><methods><class-id>Scaffolding.Person</class-id> <category>printing</category><body package="Scaffolding-Examples">printOn: aStream	name 		ifNotNil: [ aStream nextPutAll: name]		ifNil: [super printOn: aStream]</body></methods><methods><class-id>Scaffolding.GenderViewUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Gender</body></methods><methods><class-id>Scaffolding.GenderEditUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Gender</body></methods><methods><class-id>Scaffolding.HobbyListUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Hobby</body></methods><methods><class-id>Scaffolding.Gender</class-id> <category>accessing</category><body package="Scaffolding-Examples">people	^people</body><body package="Scaffolding-Examples">people: aPerson	people := aPerson</body></methods><methods><class-id>Scaffolding.Gender</class-id> <category>printing</category><body package="Scaffolding-Examples">printOn: stream	name ifNil: [ ^ super printOn: stream ].	stream nextPutAll: name</body></methods><methods><class-id>Scaffolding.AddressEditUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Address</body></methods><methods><class-id>Scaffolding.DefaultAddressEditUI</class-id> <category>rendering html editors</category><body package="Scaffolding-Examples">renderObjectsEditor: variableName type: type id: id on: html	| values |	values := (object instVarNamed: variableName) ifNil: [#()].	html div		class: variableName;		with: [values do: [:each |html text: each displayString]]</body></methods><methods><class-id>Scaffolding.DefaultAddressEditUI</class-id> <category>request processing</category><body package="Scaffolding-Examples">initialRequest: aRequest	" Extract our object from the url. If we can't, create a new object instead. "	| all |	self setRenderFormatFrom: aRequest.	all := self objectClass findAll.	all isEmpty ifTrue: [^object := Address new bePersistent].	object := all first</body></methods><methods><class-id>Scaffolding.GenderListUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Gender</body></methods><methods><class-id>Scaffolding.AddressViewUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Address</body></methods><methods><class-id>Scaffolding.MainPersonListUI</class-id> <category>initialize-release</category><body package="Scaffolding-Examples">initialize	super initialize.	"The subcomponents are usually instance variables of the component that is 'embedding' them. 	Create instances of child components here"	child := MainForm new.</body></methods><methods><class-id>Scaffolding.MainPersonListUI</class-id> <category>rendering</category><body package="Scaffolding-Examples">renderContentOn: html 	"The method implements the component appearance"	 html heading level: 3; with: self class name.	super renderContentOn: html. 	html div with: [self objects do: [ :each | html render: (AddressViewUI on: each address)  ]].	html heading level: 3; with: 'Rendering child: ', child class name.	html form with: [ html render: child.	]</body></methods><methods><class-id>Scaffolding.MainPersonListUI</class-id> <category>accessing</category><body package="Scaffolding-Examples">children	"This method has to return a collection of all subcomponents (children) of the current component that will be rendered in #renderContentOn:.	If the contents returned by this method change over time make sure to return them in #states as well, otherwise the back button will fail."		^ Array with: child</body></methods><methods><class-id>Scaffolding.MainPersonListUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Person</body></methods><methods><class-id>Scaffolding.Hobby</class-id> <category>printing</category><body package="Scaffolding-Examples">printOn: aStream	name ifNil: [ ^ super printOn: aStream ].	aStream nextPutAll: name</body></methods><methods><class-id>Scaffolding.Hobby</class-id> <category>accessing</category><body package="Scaffolding-Examples">person	^person</body><body package="Scaffolding-Examples">person: aInteger	person := aInteger</body></methods><methods><class-id>Scaffolding.Address</class-id> <category>printing</category><body package="Scaffolding-Examples">printOn: aStream	street ifNil: [ ^ super printOn: aStream ].	aStream nextPutAll: street</body></methods><methods><class-id>Scaffolding.Address</class-id> <category>accessing</category><body package="Scaffolding-Examples">people	^people</body><body package="Scaffolding-Examples">people: aPerson	people := aPerson</body></methods><methods><class-id>Scaffolding.AddressListUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Address</body></methods><methods><class-id>Scaffolding.HobbyEditUI class</class-id> <category>accessing</category><body package="Scaffolding-Examples">objectClass	^Hobby</body></methods><methods><class-id>Scaffolding.Schema1</class-id> <category>tables</category><body package="Scaffolding-Examples">tableForADDRESSES: aTable	(aTable createFieldNamed: 'id' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'street' type: (platform varchar: 200)</body><body package="Scaffolding-Examples">tableForGENDERS: aTable	(aTable createFieldNamed: 'id' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'name' type: (platform varchar: 200)</body><body package="Scaffolding-Examples">tableForHOBBIES: aTable	| person_id |	(aTable createFieldNamed: 'id' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'name' type: (platform varchar: 200).	person_id := aTable createFieldNamed: 'person_id' type: platform integer.	aTable		addForeignKeyFrom: person_id		to: ((self tableNamed: 'PEOPLE') fieldNamed: 'id')</body><body package="Scaffolding-Examples">tableForPEOPLE: aTable	| address_id gender_id |	(aTable createFieldNamed: 'id' type: platform serial) bePrimaryKey.	(aTable createFieldNamed: 'name' type: (platform varchar: 200)) beNullable: false.	aTable createFieldNamed: 'description' type: platform text.	aTable createFieldNamed: 'alive' type: platform boolean.	aTable createFieldNamed: 'birthdate' type: platform date.	aTable createFieldNamed: 'birthtime' type: platform time.	aTable createFieldNamed: 'death' type: platform timestamp.	aTable createFieldNamed: 'picture' type: platform blob.	aTable createFieldNamed: 'height' type: platform integer.	address_id := aTable createFieldNamed: 'address_id' type: platform integer.	aTable		addForeignKeyFrom: address_id		to: ((self tableNamed: 'ADDRESSES') fieldNamed: 'id').	gender_id := aTable createFieldNamed: 'gender_id' type: platform integer.	aTable		addForeignKeyFrom: gender_id		to: ((self tableNamed: 'GENDERS') fieldNamed: 'id')</body></methods><methods><class-id>Scaffolding.Schema1</class-id> <category>descriptors</category><body package="Scaffolding-Examples">descriptorForPerson: aDescriptor	aDescriptor mappingNamed: #address do: [:mapping | mapping beExclusive]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>GenericEditUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object editors showActions errors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Scaffolding-Core</package></attributes></class><class><name>ActiveRecord</name><environment>Glorp.ActiveRecords</environment><super>Glorp.PersistentObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpActiveRecord</package></attributes></class><class><name>GenericListUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericCollectionUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Scaffolding-Core</package></attributes></class><class><name>ActiveRecordDescriptorSystem</name><environment>Glorp.ActiveRecords</environment><super>Glorp.DescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metadataSession inflector currentDescriptor deferredDescriptorOperations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpActiveRecord</package></attributes></class><class><name>GenericViewUI</name><environment>Scaffolding</environment><super>Scaffolding.GenericUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Scaffolding-Core</package></attributes></class></st-source>