<?xml version="1.0"?><st-source><!-- Name: Seaside-SecurityDbIdentifier: bear73DbTrace: 492631DbUsername: jkottDbVersion: 3.2.0 - pmm.4 1DevelopmentPrerequisites: #(#(#any 'Seaside-Namespace' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-VisualWorks-Core' ''))Id: fdeb04cc-170d-4e49-b670-f74fc7d4a722Namespace: SeasidePackageName: Seaside-SecurityParcel: #('Seaside-Security')ParcelName: Seaside-SecurityPrerequisiteParcels: #(#('Seaside-Namespace' '') #('Seaside-Core' '') #('Seaside-VisualWorks-Core' ''))PrintStringCache: (3.2.0 - pmm.4 1,jkott)Url: http://smalltalkhub.com/mc/Seaside/Seaside32/main/Seaside-Security-pmm.4.mczVersion: 3.2.0 - pmm.4 1Date: 3:31:32 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:31:32 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WAFrameOptionsAllowFromFilterConfiguration</name><environment>Seaside</environment><super>Seaside.WASystemConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WAFrameOptionsAllowFromFilterConfiguration</class-id><body>I am the configuration for WAFrameOptionsAllowFromFilter.</body></comment><class><name>WAContentSecurityPolicyFilter</name><environment>Seaside</environment><super>Seaside.WARequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WAContentSecurityPolicyFilter</class-id><body>I disable inline JavaScript and CSS and allow content only from the current origin.http://www.html5rocks.com/en/tutorials/security/content-security-policy/</body></comment><class><name>WAFrameOptionsFilter</name><environment>Seaside</environment><super>Seaside.WAConfiguredRequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WAFrameOptionsFilter</class-id><body>I disable a web application to be framed into other web pages. This helps preventing clickjacking attacks.I only implement DENY and SAMEORIGIN. If you want ALLOW FROM you have to use WAFrameOptionsAllowFromFilter.https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Optionshttp://www.codinghorror.com/blog/2009/06/we-done-been-framed.html</body></comment><class><name>WAStrictTransportSecurityFilterConfiguration</name><environment>Seaside</environment><super>Seaside.WASystemConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WAStrictTransportSecurityFilterConfiguration</class-id><body>I am the configuration for WAStrictTransportSecurityFilter.</body></comment><class><name>WANoSniffFilter</name><environment>Seaside</environment><super>Seaside.WARequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WANoSniffFilter</class-id><body>I disable content type sniffing in some browsers.http://blog.fox-it.com/2012/05/08/mime-sniffing-feature-or-vulnerability/http://security.stackexchange.com/questions/12896/does-x-content-type-options-really-prevent-content-sniffing-attacks</body></comment><class><name>WAStrictTransportSecurityFilter</name><environment>Seaside</environment><super>Seaside.WAConfiguredRequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WAStrictTransportSecurityFilter</class-id><body>I implement strict transport security (STS) for Seaside. STS tries to prevent users from accidentially using non SSL versions of your application.  http://www.imperialviolet.org/2010/01/26/sts.htmlhttp://lists.w3.org/Archives/Public/www-archive/2009Sep/att-0051/draft-hodges-strict-transport-sec-05.plain.htmlhttps://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security</body></comment><class><name>WAFrameOptionsAllowFromFilter</name><environment>Seaside</environment><super>Seaside.WAConfiguredRequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WAFrameOptionsAllowFromFilter</class-id><body>I disable a web application to be framed into other web pages. This helps preventing clickjacking attacks.I only implement ALLOW FROM. If you want DENY or SAMEORIGIN you have to use WAFrameOptionsFilter.https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Optionshttp://www.codinghorror.com/blog/2009/06/we-done-been-framed.html</body></comment><class><name>WAFrameOptionsFilterConfiguration</name><environment>Seaside</environment><super>Seaside.WASystemConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Security</category><attributes><package>Seaside-Security</package></attributes></class><comment><class-id>Seaside.WAFrameOptionsFilterConfiguration</class-id><body>I am the configuration for WAFrameOptionsFilter.</body></comment><methods><class-id>Seaside.WAFrameOptionsAllowFromFilterConfiguration</class-id> <category>description</category><body package="Seaside-Security">describeOn: config	(config string: #origin)		comment: 'The origin from where framing should be allowed (unsupported by IE).'</body></methods><methods><class-id>Seaside.WAContentSecurityPolicyFilter</class-id> <category>processing</category><body package="Seaside-Security">handleFiltered: aRequestContext	aRequestContext response headerAt: 'Content-Security-Policy' put: 'default-src ''self'''.	super handleFiltered: aRequestContext</body></methods><methods><class-id>Seaside.WAFrameOptionsFilter</class-id> <category>configuration</category><body package="Seaside-Security">defaultConfiguration	^ WAUserConfiguration new		addParent: WAFrameOptionsFilterConfiguration instance;		yourself</body><body package="Seaside-Security">frameOptions	^ self configuration at: #frameOptions</body></methods><methods><class-id>Seaside.WAFrameOptionsFilter</class-id> <category>processing</category><body package="Seaside-Security">handleFiltered: aRequestContext	aRequestContext response frameOptions: self frameOptions.	super handleFiltered: aRequestContext</body></methods><methods><class-id>Seaside.WAStrictTransportSecurityFilterConfiguration</class-id> <category>description</category><body package="Seaside-Security">describeOn: config	(config integer: #maxAge)		comment: 'The number of seconds the user agent should remember receipt of this header field from this server.';		default: 3600 * 24 * 14. "two weeks"	(config boolean: #includeSubDomains)		comment: 'If true signals to the user agent that the STS Policy applies to this STS Server as well as any subdomains of the server''s fully qualified domain name.';		default: false</body></methods><methods><class-id>Seaside.WANoSniffFilter</class-id> <category>processing</category><body package="Seaside-Security">handleFiltered: aRequestContext	aRequestContext response noSniff.	super handleFiltered: aRequestContext</body></methods><methods><class-id>Seaside.WAStrictTransportSecurityFilter</class-id> <category>configuration</category><body package="Seaside-Security">defaultConfiguration	^ WAUserConfiguration new		addParent: WAStrictTransportSecurityFilterConfiguration instance;		yourself</body><body package="Seaside-Security">includeSubDomains	^ self configuration at: #includeSubDomains</body><body package="Seaside-Security">maxAge	^ self configuration at: #maxAge</body></methods><methods><class-id>Seaside.WAStrictTransportSecurityFilter</class-id> <category>processing</category><body package="Seaside-Security">handleFiltered: aRequestContext	"Adds a Secure-Transport-Security header in case the application is transmitted over HTTPS."		| request |	request := aRequestContext request.	request isSsl		ifTrue: [			aRequestContext response strictTransportSecurity: self maxAge includeSubDomains: self includeSubDomains.			super handleFiltered: aRequestContext ]		ifFalse: [			| safeUrl |			safeUrl := request url copy.			safeUrl host: request host.			safeUrl scheme: 'https'.			aRequestContext redirectTo: safeUrl ]</body></methods><methods><class-id>Seaside.WAFrameOptionsAllowFromFilter</class-id> <category>configuration</category><body package="Seaside-Security">defaultConfiguration	^ WAUserConfiguration new		addParent: WAFrameOptionsAllowFromFilterConfiguration instance;		yourself</body><body package="Seaside-Security">origin	^ self configuration at: #origin</body></methods><methods><class-id>Seaside.WAFrameOptionsAllowFromFilter</class-id> <category>processing</category><body package="Seaside-Security">handleFiltered: aRequestContext	| origin |	origin := self origin.	origin isEmptyOrNil ifFalse: [		aRequestContext response frameOptions: 'ALLOW FROM ', origin ].	super handleFiltered: aRequestContext</body></methods><methods><class-id>Seaside.WAFrameOptionsFilterConfiguration</class-id> <category>description</category><body package="Seaside-Security">describeOn: config	(config list: #frameOptions)		comment: 'The places where framing should be allowed.';		options: [ #('DENY' 'SAMEORIGIN') ];		default: 'DENY'</body></methods><methods><class-id>Seaside.WAKeyGenerator class</class-id> <category>*Seaside-Security</category><body package="Seaside-Security">current: aKeyGenerator	current := aKeyGenerator</body></methods><methods><class-id>Seaside.WAResponse</class-id> <category>*seaside-security</category><body package="Seaside-Security">noSniff	"trun off content sniffing	http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx		Sending the new X-Content-Type-Options response header with the value nosniff will prevent Internet Explorer from MIME-sniffing a response away from the declared content-type."	self headerAt: 'X-Content-Type-Options' put: 'nosniff'</body></methods><methods><class-id>Grease.GRPackage class</class-id> <category>*seaside-security</category><body package="Seaside-Security">seasideSecurity	^ self new		name: 'Seaside-Security';		addDependency: 'Seaside-Core';		url: #seasideUrl;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAResponse</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>headers cookies status message </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-HTTP</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WARequestFilter</name><environment>Seaside</environment><super>Seaside.WAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Filter</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WAConfiguredRequestFilter</name><environment>Seaside</environment><super>Seaside.WARequestFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>configuration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Core-Filter</category><attributes><package>Seaside-Core</package></attributes></class><class><name>WASystemConfiguration</name><environment>Seaside</environment><super>Seaside.WAConfiguration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Seaside-Core-Configuration</category><attributes><package>Seaside-Core</package></attributes></class></st-source>