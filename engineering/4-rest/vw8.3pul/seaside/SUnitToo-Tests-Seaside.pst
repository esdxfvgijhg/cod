<?xml version="1.0"?><st-source><!-- Name: SUnitToo-Tests-SeasideNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Application: trueComment: All the implementation tests to make sure Seaside is functioning correctly in Cincom SmalltalkHTML <span> tag- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Definition and UsageThe <span> tag is used to group inline-elements in a document.DbIdentifier: bear73DbTrace: 492665DbUsername: jkottDbVersion: 3.2.0 - 1DevelopmentPrerequisites: #(#(#any 'WebSupport' '') #(#any 'HTTP' '') #(#any 'SUnitToo' '') #(#any 'SUnitToo-Seaside' '') #(#any 'MIME' '') #(#any 'Seaside-Canvas' '') #(#any 'Seaside-Component' '') #(#any 'Seaside-Core' '') #(#any 'Seaside-Development' '') #(#any 'Seaside-Examples' '') #(#any 'Seaside-Widgets' '') #(#any 'Seaside-Flow' '') #(#any 'Seaside-Session' '') #(#any 'Seaside-Tools-Core' '') #(#any 'Seaside-VisualWorks-Adaptors' ''))ExplicitPrerequisites: #()IgnoredPrerequisites: #()Namespace: Smalltalk.SeasideTestingPackageName: SUnitToo-Tests-SeasideParcel: #('SUnitToo-Tests-Seaside')PrerequisiteDescriptions: #(#(#name 'WebSupport') #(#name 'HTTP') #(#name 'SUnitToo') #(#name 'SUnitToo-Seaside' #componentType #package) #(#name 'MIME' #componentType #package) #(#name 'Seaside-Canvas' #componentType #package) #(#name 'Seaside-Component' #componentType #package) #(#name 'Seaside-Core' #componentType #package) #(#name 'Seaside-Development' #componentType #package) #(#name 'Seaside-Examples' #componentType #package) #(#name 'Seaside-Widgets' #componentType #package) #(#name 'Seaside-Flow' #componentType #package) #(#name 'Seaside-Session' #componentType #package) #(#name 'Seaside-Tools-Core' #componentType #package) #(#name 'Seaside-VisualWorks-Adaptors' #componentType #package))PrerequisiteParcels: #(#('WebSupport' '') #('HTTP' '') #('SUnitToo' '') #('SUnitToo-Seaside' '') #('MIME' '') #('Seaside-Canvas' '') #('Seaside-Component' '') #('Seaside-Core' '') #('Seaside-Development' '') #('Seaside-Examples' '') #('Seaside-Widgets' '') #('Seaside-Flow' '') #('Seaside-Session' '') #('Seaside-Tools-Core' '') #('Seaside-VisualWorks-Adaptors' ''))PrintStringCache: (3.2.0 - 1,jkott)Version: 3.2.0 - 1Date: 12:17:56 PM September 16, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.3) of September 16, 2016 on September 16, 2016 at 12:17:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>SeasideTesting</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private Seaside.*			private SeasideSUnitToo.*			private SUnit.*			</imports><category>Seaside-Tests</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></name-space><class><name>AnchorComponent2Test</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>UploadFileTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private SiouX.*			</imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>TestComponent</name><environment>SeasideTesting</environment><super>Seaside.WAComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.TestComponent</class-id><body>TestComponent superclass for all test components</body></comment><class><name>RadioButtonComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>booleanList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.RadioButtonComponent</class-id><body>RadioButtonComponent Instance Variables:	booleanList	&lt;OrderedCollection of Associations&gt;	 of booleanList&lt;form accept-charset="utf-8" action="http://localhost:7777/seaside/currently-being-tested/RadioButtonComponent" method="post"&gt;			&lt;input class="radio" id="id1_a" name="1" type="radio" value="2"&gt;&lt;/input&gt;			&lt;input checked="checked" class="radio" id="id2_a" name="1" type="radio" value="3"&gt;&lt;/input&gt;			&lt;br&gt;&lt;/br&gt;			&lt;input class="radio" id="id1_b" name="4" type="radio" value="5"&gt;&lt;/input&gt;			&lt;input checked="checked" class="radio" id="id2_b" name="4" type="radio" value="6"&gt;&lt;/input&gt;			&lt;br&gt;&lt;/br&gt;			&lt;input class="radio" id="id1_c" name="7" type="radio" value="8"&gt;&lt;/input&gt;			&lt;input checked="checked" class="radio" id="id2_c" name="7" type="radio" value="9"&gt;&lt;/input&gt;			&lt;br&gt;&lt;/br&gt;			&lt;input class="submit" type="submit" value="Submit"&gt;&lt;/input&gt;POST /seaside/currently-being-tested/RadioButtonComponent HTTP/1.1Host: localhost:7777Referer: http://localhost:7777/seaside/currently-being-tested/RadioButtonComponentContent-type: application/x-www-form-urlencodedContent-length: 431=3&amp;4=5&amp;7=9&amp;_s=PPKpngLwgVXWuUpg&amp;_k=YxXyjCQeDictionary ('4'-&gt;'5' '_k'-&gt;'YxXyjCQe' '7'-&gt;'9' '1'-&gt;'3' '_s'-&gt;'PPKpngLwgVXWuUpg' )</body></comment><class><name>SubmitButton</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>field1 field2 button1WasPressed button2WasPressed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.SubmitButton</class-id><body>SubmitButton has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	button1WasPressed	&lt;Boolean&gt;	button1 was pressed	button2WasPressed	&lt;Boolean&gt;	button2 was pressed	field1	&lt;String&gt;	field1	field2	&lt;String&gt;	 field2HTML &lt;button&gt; tagDefines a push button. Inside a button element you can put content, like text or images. This is the difference between this element and buttons created with the input element.	&lt;body onkeydown="onKeyDown(event)" onload="onLoad()"&gt;		&lt;form accept-charset="utf-8" action="http://localhost:7777/seaside/currently-being-tested/SubmitButton" method="post"&gt;			field1: 			&lt;input class="text" id="field1" name="1" type="text"&gt;&lt;/input&gt;			&lt;br&gt;&lt;/br&gt;			field2: 			&lt;input class="text" id="field2" name="2" type="text"&gt;&lt;/input&gt;			&lt;br&gt;&lt;/br&gt;			&lt;input class="submit" id="button1" name="3" type="submit" value="button1"&gt;&lt;/input&gt;			&lt;input class="submit" id="button2" name="4" type="submit" value="button2"&gt;&lt;/input&gt;			&lt;div&gt;				&lt;input class="hidden" name="_s" type="hidden" value="oimiUuFvxlWdonAV"&gt;&lt;/input&gt;				&lt;input class="hidden" name="_k" type="hidden" value="CZOJtQYn"&gt;&lt;/input&gt;			&lt;/div&gt;		&lt;/form&gt;		&lt;input class="submit" name="5" type="submit"&gt;&lt;/input&gt;1=Bob+Smith&amp;2=Jane+X&amp;3=button1&amp;_s=GtNhdmBdnlFXDxOb&amp;_k=giSdlCJy1=Bob+Smith&amp;2=Jane+X&amp;4=button2&amp;_s=GtNhdmBdnlFXDxOb&amp;_k=xEIZPPjZ1=&amp;2=&amp;3=button1&amp;_s=EMrvbcyZicnMPSdi&amp;_k=eTtqJhSl</body></comment><class><name>AnchorComponent3Test</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>Upload2FilesTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private SiouX.*			</imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>BacktrackingTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>AnchorComponent3</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstSent secondSent thirdSent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.AnchorComponent3</class-id><body>AnchorComponent3 has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	firstSent	&lt;Boolean&gt;	 firstSent	secondSent	&lt;Boolean&gt;	 secondSent	thirdSent	&lt;Boolean&gt;	 thirdSentClick on third link:&lt;body onkeydown="onKeyDown(event)" onload="onLoad()"&gt;		&lt;a href="http://localhost:7777/seaside/currently-being-tested/AnchorComponent3?_s=kRNJYEThYmezZATb&amp;amp;_k=keFanSrE&amp;amp;1"&gt;first link&lt;/a&gt;		&lt;a href="http://localhost:7777/seaside/currently-being-tested/AnchorComponent3?_s=kRNJYEThYmezZATb&amp;amp;_k=keFanSrE&amp;amp;2" id="second"&gt;second link&lt;/a&gt;		&lt;div id="toolbar"&gt;Click on first link:&lt;body onkeydown="onKeyDown(event)" onload="onLoad()"&gt;		&lt;a href="http://localhost:7777/seaside/currently-being-tested/AnchorComponent3?_s=rlxjjhZLqZRKZkuw&amp;amp;_k=OUuVZtfq&amp;amp;1" id="second"&gt;second link&lt;/a&gt;		&lt;a href="http://localhost:7777/seaside/currently-being-tested/AnchorComponent3?_s=rlxjjhZLqZRKZkuw&amp;amp;_k=OUuVZtfq&amp;amp;2" id="third"&gt;third link&lt;/a&gt;		&lt;div id="toolbar"&gt;</body></comment><class><name>CookieComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cookieKey cookieValue deletedCookies addedCookies </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.CookieComponent</class-id><body>CookieComponent Instance Variables:	addedCookies	&lt;WACookie&gt;	 addedCookies	cookieKey	&lt;String&gt;	added cookieKey	cookieValue	&lt;String&gt;	added description of cookieValue	currentRequestCookies	&lt;Dictionary&gt;	current request cookies	deletedCookies	&lt;WACookie&gt;	deletedCookies</body></comment><class><name>FormComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name age </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.FormComponent</class-id><body>FormComponent has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.HTML &lt;form&gt; tagThe form element creates a form for user input. A form can contain textfields, checkboxes, radio-buttons and more. Forms are used to pass user-data to a specified URL.&lt;body onload="onLoad()" onkeydown="onKeyDown(event)"&gt;&lt;form accept-charset="utf-8" method="post" action="http://localhost:7777/seaside/currently-being-tested/FormComponent"&gt;Name: &lt;input id="name" name="1" type="text" class="text"/&gt;&lt;br/&gt;Age: &lt;input id="age" name="2" type="text" class="text"/&gt;&lt;br/&gt;&lt;input name="3" value="Display" type="submit" class="submit"/&gt;&lt;div&gt;Request:POST /seaside/currently-being-tested/FormComponent?_s=hBCIZkYDqPInRsDv&amp;amp;_k=IKQucmtj&amp;amp;4 HTTP/1.1Host: localhost:7777Content-type: application/x-www-form-urlencoded'%5Fk=IKQucmtj&amp;amp;%5Fs=hBCIZkYDqPInRsDv&amp;amp;1=Bob%2BSmith&amp;amp;2=16&amp;amp;3=Display'Instance Variables:	name &lt;String&gt; name	age &lt;String&gt; age</body></comment><class><name>TestDecoration</name><environment>SeasideTesting</environment><super>Seaside.WADecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hasAnswer answerValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.TestDecoration</class-id><body>TestDecoration will return an answer from a dialogInstance Variables:	answerValue	&lt;Object&gt;	 answerValue	hasAnswer	&lt;Boolean&gt;	 hasAnswer</body></comment><class><name>FormComponentTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>HiddenInputTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>MultiSelectionComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>multiSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.MultiSelectionComponent</class-id><body>MultiSelectionComponent Instance Variables:	multiSelection	&lt;OrderedCollection&gt;	&lt;form accept-charset="utf-8" action="http://localhost:7777/seaside/currently-being-tested/MultiSelectionComponent" method="post"&gt;			&lt;input class="hidden" name="1" type="hidden"&gt;&lt;/input&gt;			&lt;select id="multiSelectionList" multiple="multiple" name="2"&gt;				&lt;option value="3"&gt;Quito&lt;/option&gt;				&lt;option value="4"&gt;Dakar&lt;/option&gt;				&lt;option value="5"&gt;Sydney&lt;/option&gt;				&lt;option value="6"&gt;Bamako&lt;/option&gt;			&lt;/select&gt;			&lt;input class="hidden" name="7" type="hidden"&gt;&lt;/input&gt;			&lt;input class="submit" name="8" type="submit" value="Submit"&gt;&lt;/input&gt;POST /seaside/currently-being-tested/MultiSelectionComponent HTTP/1.1Host: localhost:7777Content-type: application/x-www-form-urlencoded'2=4&amp;1=&amp;7=&amp;8=Submit&amp;_s=fDUQCnOUjYWMofwl&amp;_k=bfGpgqYY'</body></comment><class><name>ListComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedItem </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.ListComponent</class-id><body>ListComponent has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	selectedItem	&lt;Symbol&gt;	description of selectedItemHTML &lt;select&gt; tagThe select element creates a drop-down list.&lt;form accept-charset="utf-8" action="http://localhost:7777/seaside/currently-being-tested/ListComponent" method="post"&gt;			&lt;select id="theList" name="1"&gt;				&lt;option selected="selected" value="2"&gt;a&lt;/option&gt;				&lt;option value="3"&gt;b&lt;/option&gt;				&lt;option value="4"&gt;c&lt;/option&gt;			&lt;/select&gt;			&lt;input class="submit" type="submit" value="submit"&gt;&lt;/input&gt;Request to select "b":POST /seaside/currently-being-tested/ListComponent HTTP/1.1Host: localhost:7777Content-type: application/x-www-form-urlencoded%5Fk=tVFozicq&amp;%5Fs=qfJdGenhuDaGaGLm&amp;1=3</body></comment><class><name>TextInputComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textInput textInputExample textArea textAreaExample </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.TextInputComponent</class-id><body>TextInputComponent Instance Variables:	textArea	&lt;String&gt;	 textArea	textAreaExample	&lt;String&gt;	 textAreaExample	textInput	&lt;String&gt;	textInput	textInputExample	&lt;String&gt;	textInputExample</body></comment><class><name>CheckBoxTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>AnchorComponent1Test</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>SubmitButtonTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>ImageMapComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>point </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.ImageMapComponent</class-id><body>ImageMapComponent has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><class><name>SpanComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.SpanComponent</class-id><body>SpanComponent HTML &lt;span&gt; tagThe &lt;span&gt; tag is used to group inline-elements in a document.Tip: Use the &lt;span&gt; tag to group inline-elements to format them with styles&lt;body onkeydown="onKeyDown(event)" onload="onLoad()"&gt;		&lt;span id="main" style="margin-left: 10em; margin-right: 20em; color:#00DD45"&gt;hello&lt;/span&gt;		&lt;div id="toolbar"&gt;</body></comment><class><name>DialogComponentTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>SingleSelectionTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>TextInputTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>CheckBoxComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>booleanList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.CheckBoxComponent</class-id><body>CheckBoxComponent Instance Variables:	booleanList	&lt;Collection&gt; collection of booleans</body></comment><class><name>AnchorComponent2</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstSent secondSent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.AnchorComponent2</class-id><body>The target is opened in the same windowInstance Variables:	firstSent	&lt;Boolean&gt;	 firstSent	secondSent	&lt;Boolean&gt;	 secondSent&lt;body onkeydown="onKeyDown(event)" onload="onLoad()"&gt;		&lt;a href="http://localhost:7777/seaside/currently-being-tested/AnchorComponent2?_s=VTipkmkukzlGIacd&amp;amp;_k=xzreomVB&amp;amp;1" id="first"&gt;first link&lt;/a&gt;		hello		&lt;a href="http://localhost:7777/seaside/currently-being-tested/AnchorComponent2?_s=VTipkmkukzlGIacd&amp;amp;_k=xzreomVB&amp;amp;2" id="second"&gt;second link&lt;/a&gt;		&lt;div id="toolbar"&gt;</body></comment><class><name>WACounterTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>ListComponentTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>SingleSelectionComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>singleSelection singleSelectionOptional </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.SingleSelectionComponent</class-id><body>SingleSelectionComponent Instance Variables:	singleSelection	&lt;String&gt;	 singleSelection	singleSelectionOptional	String&gt;	singleSelectionOptional</body></comment><class><name>TextMultipartInputTest</name><environment>SeasideTesting</environment><super>SeasideTesting.TextInputTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>ImageMapTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>CookieTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>client </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>DialogComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.DialogComponent</class-id><body>DialogComponent tests dialogs</body></comment><class><name>RadioButtonTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>HiddenInputComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>called </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.HiddenInputComponent</class-id><body>HiddenInputComponent Instance Variables:	called	&lt;Boolean&gt;	 called</body></comment><class><name>UploadFileComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>file </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.UploadFileComponent</class-id><body>UploadFileComponent tests a file uploadInstance Variables:	file	&lt;Seaside.WAFileStream&gt;	file</body></comment><class><name>Upload2FilesComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.UploadFileComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>file1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.Upload2FilesComponent</class-id><body>Upload2FilesComponent tests two files upload</body></comment><class><name>MultiSelectionTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>TextMultipartInputComponent</name><environment>SeasideTesting</environment><super>SeasideTesting.TextInputComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.TextMultipartInputComponent</class-id><body>TextMultipartInputComponent tests submitting POST as multipart message</body></comment><class><name>SpanComponentTest</name><environment>SeasideTesting</environment><super>SUnit.WebTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><class><name>AnchorComponent1</name><environment>SeasideTesting</environment><super>SeasideTesting.TestComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SeasideTesting-Examples</category><attributes><package>SUnitToo-Tests-Seaside</package></attributes></class><comment><class-id>SeasideTesting.AnchorComponent1</class-id><body>After the link is pressed the dialog will be displayed.HTML &lt;a&gt; tagDefinition and UsageThe &lt;a&gt; tag defines an anchor. An anchor can be used in two ways:	- To create a link to another document by using the href attribute 	- To create a bookmark inside a document, by using the name or id attribute target attribute: Where to open the target URL._blank - the target URL will open in a new window _self - the target URL will open in the same frame as it was clicked _parent - the target URL will open in the parent frameset _top - the target URL will open in the full body of the window &lt;body onkeydown="onKeyDown(event)" onload="onLoad()"&gt;		&lt;h3&gt;pressed&lt;/h3&gt;		&lt;form accept-charset="utf-8" action="http://localhost:7777/seaside/currently-being-tested/AnchorComponent1" method="post"&gt; </body></comment><methods><class-id>SeasideTesting.AnchorComponent2Test</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testPressed	self clickLinkWithText: 'first link'.	self assert: self component firstSent.	self deny: self component secondSent.	self clickLinkWithText: 'second link'.	self assert: self component firstSent.	self assert: self component secondSent.</body></methods><methods><class-id>SeasideTesting.AnchorComponent2Test</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^AnchorComponent2</body></methods><methods><class-id>SeasideTesting.UploadFileTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testUploadASCIIFilename	self upload:  'textFile.txt'  contents:  'some text'.</body><body package="SUnitToo-Tests-Seaside">testUploadBinaryFile	| zip |	zip := 'PK    LÃ¨.ÃHhÂ  e  	   atext.txteQÃnÃ0Â¼Ã?,ÂÃÃÂDÃzXÂFÃ "E$Â¨ÂÃ´PÃ´ÃHkÂEÂ²"Â8Ã¹ÃºÃve$ÃÂ3CÃ®Ã¬Ã¬Ã²Ã¶f]AhpxhÃ5Ã¯ÂµÃÂ¯\Ã ÂÂ5Ã«Â£ÂUuÃÂÃºÃÂ{JÂ-J[ÃÂµzÃ¥BÂ°pDÃ°Â¹VÂ½fÂ?ÂÃÃµÃºÃÃÂÃO.ÃµlÂÂ¢Ã¨ÃhdAÂ Ã¼BÃ¹ÃÃ·.ÂqFBÃLt{XDQÃ¡{ÃÂºFÃ­tÂ;vÂ¶Ã =k1ÃÂ²Ã¡Â''ÃÃ²ÃwdÃ·ÃmÃÃ´ÃÃÃ³ÃÂ|gÂ²ÃÂºÃ»PÂÃÂÂ]ÂÃ§cJBÃ£4ÂÃ¿]ÃÂÃÃnHÃ±ÂÃldÂ¾ÃÂ"EÂÃuZdÂ®ÃÃÂÃ·JÃÂªÃ¡Â²-Â¡ÃÂ`''ÃÂ¾rÂjGÂ''oÃÂ¹}Ã¹_Ãª{?pÂ%tÃÃª2Ã/%4Ã¬Ã½ÃÃhÃÂ»PÃªÂÂ»Â©ÃÂÂ¼ÃÂEÂÃ¤y:Mb:ÃÂÂÃ¹eÃÂ¬ÃÂ³t:VÃ%|ÂºÃa_Â³8Â£g{YJÂ¬Â­Ã£%\!jÂ²Ã¼ÃÂÂ®VÃÃªÃuÂ·ÂÂÃÂ¼ÃÃEÃÃÃ:ÂÂÂ­Ã­JÃÂÃ?PK     LÃ¨.ÃHhÂ  e  	          Â¶Â    atext.txtPK      7   Â·    ' asByteArray.	self upload:  'zipFile.zip'  contents:  zip.</body><body package="SUnitToo-Tests-Seaside">testUploadNotASCIIFilename	| filename contents fileContents form id1 response |	filename :=  'textFile.txt'.	contents :=  'ÐÑÐ´ÑÑÐµ Ð·Ð´Ð¾ÑÐ¾Ð²Ñ!'.	self assert: self component file isNil.	form := self newForm.	form clickNamed: (form submitNameForValue: 'Submit').	id1 := form nameForId: 'fileUpload'.	response := agent post: form url 		requestDo: [ :requestx |  						requestx 							beMultipart; 							formData: form formData;							addFormKey: id1 filename: filename source: contents readStream ].					(agent newPageFor:  form url )		parseContentsFrom: response		application: agent application.	self assert: (self component file isKindOf: Seaside.WAFile).	self assert: (self component file fileName = filename ).	fileContents := self component file contentsDecodedUsing: 'utf-8'.	self assert: fileContents = contents.	self assert:  (self find: '//h3/text()') first text = contents.</body><body package="SUnitToo-Tests-Seaside">upload: filename contents: contents	self assert: self component file isNil.	self newForm		upload: filename in: 'fileUpload' source: contents readStream.	self assert: (self component file isKindOf: Seaside.WAFile).	self assert: (self component file fileName = filename ).	self assert: (self component file contents asString = contents asString ).	self assert: ( self fileExists: filename)</body></methods><methods><class-id>SeasideTesting.UploadFileTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^UploadFileComponent</body><body package="SUnitToo-Tests-Seaside">file: fileName	^(SeasideHttpReadingOptions defaultAttachmentDirectory asFilename construct: fileName )</body><body package="SUnitToo-Tests-Seaside">fileExists: filename	^(self file: filename) exists</body><body package="SUnitToo-Tests-Seaside">tearDown	| dir |	(dir := self uploadDirectory) directoryContents do: [:fx | [ (dir construct: fx) delete] on: Error do: [:ex |]]</body><body package="SUnitToo-Tests-Seaside">uploadDirectory	^SeasideHttpReadingOptions defaultAttachmentDirectory asFilename</body></methods><methods><class-id>SeasideTesting.TestComponent</class-id> <category>private</category><body package="SUnitToo-Tests-Seaside">states	^ Array with: self</body></methods><methods><class-id>SeasideTesting.RadioButtonComponent</class-id> <category>initialize-release</category><body package="SUnitToo-Tests-Seaside">initialize	super initialize.	booleanList := #(a b c ) collect: [:key | key -&gt; false].</body></methods><methods><class-id>SeasideTesting.RadioButtonComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">booleanList	^booleanList</body></methods><methods><class-id>SeasideTesting.RadioButtonComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form: [		booleanList do: [ :association |			| group |			group := html radioGroup.			group radioButton				id: 'id1_',association key;				selected: association value;				callback: [ association value: true ].				group radioButton				id: 'id2_',association key;				selected: association value not;				callback: [ association value: false ].			html break  ].		html submitButton				value: 'Submit';				callback: [ self inform: 'selection: ' , booleanList  printString  ]]</body></methods><methods><class-id>SeasideTesting.SubmitButton</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">button1Pressed	button1WasPressed := true</body><body package="SUnitToo-Tests-Seaside">button1WasPressed	^button1WasPressed</body><body package="SUnitToo-Tests-Seaside">button2Pressed	button2WasPressed := true</body><body package="SUnitToo-Tests-Seaside">button2WasPressed	^ button2WasPressed</body><body package="SUnitToo-Tests-Seaside">field1	^field1</body><body package="SUnitToo-Tests-Seaside">field1: anObject	field1 := anObject</body><body package="SUnitToo-Tests-Seaside">field2	^field2</body><body package="SUnitToo-Tests-Seaside">field2: anObject	field2 := anObject</body><body package="SUnitToo-Tests-Seaside">states	self decoration = self ifTrue: [ self addDecoration: TestDecoration new].	^ Array with: self</body></methods><methods><class-id>SeasideTesting.SubmitButton</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html 	html form		with: [html text: 'field1: '.			html textInput				id: 'field1';				on: #field1 of: self.			html break.			html text: 'field2: '.			html textInput				id: 'field2';				on: #field2 of: self.			html break.			html submitButton				id: 'button1';				callback: [self button1Pressed];				value: 'button1'.			html submitButton				id: 'button2';				callback: [self button2Pressed];				value: 'button2'.		html submitButton				id: 'button3';				callback: [self answer: 1234 ];				value: 'button3']."I am not sure what to test here  "		html submitButton				callback: [self answer: true].</body></methods><methods><class-id>SeasideTesting.AnchorComponent3Test</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^AnchorComponent3</body></methods><methods><class-id>SeasideTesting.AnchorComponent3Test</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testAnswer	self clickLinkWithText: 'third link'.	self assert: self component thirdSent.	self deny: self component secondSent.	self deny: self component firstSent.</body><body package="SUnitToo-Tests-Seaside">testBack	self clickLinkWithText: 'first link'.	self assert: self component firstSent.	self deny: self component secondSent.	self clickLinkWithText: 'second link'.	self back.	self assert: self component firstSent.	self deny: self component secondSent</body></methods><methods><class-id>SeasideTesting.Upload2FilesTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^Upload2FilesComponent</body><body package="SUnitToo-Tests-Seaside">file: fielName	^(SeasideHttpReadingOptions defaultAttachmentDirectory asFilename construct: fielName )</body><body package="SUnitToo-Tests-Seaside">tearDown	| dir |	(dir := SeasideHttpReadingOptions defaultAttachmentDirectory asFilename) directoryContents 		do: [:fx | [ (dir construct: fx) delete ] on:Error do: [ :ex | ]]</body></methods><methods><class-id>SeasideTesting.Upload2FilesTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testUpload2Files	| filename contents filename1 contents1 id1 id2 form response |	filename := 'textFile.txt'.	contents :=  'some text'.	filename1 := 'textFile2.txt'.	contents1 :=  '222'.	self assert: self component file isNil.	self assert: self component file1 isNil.	form := self newForm.	form clickNamed: (form submitNameForValue: 'Submit').	id1 := form nameForId: 'firstFile'.	id2 := form nameForId: 'secondFile'.	response := agent post: form url 		requestDo: [ :requestx |  						requestx 							beMultipart; 							formData: form formData;							addFormKey: id1 filename: filename  source: contents readStream;							addFormKey: id2 filename: filename1 source: contents1 readStream ].	(agent newPageFor:  form url )		parseContentsFrom: response		application: agent application.	self assert: (self component file isKindOf: Seaside.WAFile).	self assert: (self component file fileName = filename ).	self assert: (self component file contents asString = contents asString ).	self assert: (self component file1 isKindOf: Seaside.WAFile).	self assert: (self component file1 fileName = filename1 ).	self assert: (self component file1 contents asString = contents1 asString ).	self assert: (self find: '//h3/text()') first text = 'first file: some text     second file: 222'</body><body package="SUnitToo-Tests-Seaside">testUploadEmptyFile	| filename contents id1 id2 form response |	filename := 'textFile.txt'.	contents :=  'some text'.	self assert: self component file isNil.	self assert: self component file1 isNil.	form := self newForm.	form clickNamed: (form submitNameForValue: 'Submit').	id1 := form nameForId: 'firstFile'.	id2 := form nameForId: 'secondFile'.	response := agent post: form url 		requestDo: [ :requestx |  						requestx 							beMultipart; 							formData: form formData;							addFormKey: id1 filename: filename source: contents readStream;							addFormKey: id2 filename: String new source: String new readStream	].					(agent newPageFor:  form url )		parseContentsFrom: response		application: agent application.	self assert: (self component file isKindOf: Seaside.WAFile).	self assert: (self component file fileName = filename ).	self assert: (self component file contents asString = contents asString ).	self assert: self component file1 isNil</body></methods><methods><class-id>SeasideTesting.BacktrackingTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^WACounter</body></methods><methods><class-id>SeasideTesting.BacktrackingTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testClickBackClick	self assert: self component count = 0.	self clickLinkWithText: '++'.	self assert: self component count = 1.	self back.	self assert: (self find: '//h1/text()') first text = '0'.	self assert: self component count = 0.	self clickLinkWithText: '++'.	self assert: self component count = 1.</body><body package="SUnitToo-Tests-Seaside">testClickClick	self assert: self component count isZero.	self clickLinkWithText: '++'.	self clickLinkWithText: '++'.	self assert: self component count = 2.	self assert: (self find: '//h1/text()') first text = '2'.	self assert: self component count = 2</body><body package="SUnitToo-Tests-Seaside">testClickClickBack	| otherComponent |	self assert: self component count isZero.	self clickLinkWithText: '++'.	self clickLinkWithText: '++'.	otherComponent := self component.	self back.	self assert: self component count = 1.	self assert: (self find: '//h1/text()') first text = '1'.	self assert: otherComponent count = 2</body><body package="SUnitToo-Tests-Seaside">testClickClickBackClick	self assert: self component count isZero.	self clickLinkWithText: '++'.	self clickLinkWithText: '++'.	self back.	self clickLinkWithText: '++'.	self assert: self component count = 2.	self assert: (self find: '//h1/text()') first text = '2'.	self assert: self component count = 2</body></methods><methods><class-id>SeasideTesting.AnchorComponent3</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">firstSent	^firstSent</body><body package="SUnitToo-Tests-Seaside">secondSent	^secondSent</body><body package="SUnitToo-Tests-Seaside">states	self decoration = self ifTrue: [ self addDecoration: TestDecoration new].	^ Array with: self</body><body package="SUnitToo-Tests-Seaside">thirdSent	^thirdSent</body></methods><methods><class-id>SeasideTesting.AnchorComponent3</class-id> <category>initialization</category><body package="SUnitToo-Tests-Seaside">initialize	super initialize."	self session registerObjectForBacktracking: self."	firstSent := false.	secondSent := false.	thirdSent := false</body></methods><methods><class-id>SeasideTesting.AnchorComponent3</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html 	self firstSent		ifFalse: [html anchor				callback: [firstSent := true];				with: 'first link'].	self secondSent		ifFalse: [			html anchor				id: 'second';				callback: [secondSent := true];				with: 'second link'].	self thirdSent		ifFalse: [			html anchor				id: 'third';				callback: [thirdSent := true. self answer: 1234];				with: 'third link']</body></methods><methods><class-id>SeasideTesting.CookieComponent</class-id> <category>actions</category><body package="SUnitToo-Tests-Seaside">add	| cookie |	cookie := self requestContext newCookie		key: cookieKey;		value: cookieValue;		yourself.	self requestContext response addCookie: cookie.	addedCookies := cookie.	cookieKey := nil.	cookieValue := nil.</body><body package="SUnitToo-Tests-Seaside">remove: aCookie	self requestContext response deleteCookie: aCookie.	deletedCookies := self requestContext response cookies asOrderedCollection</body></methods><methods><class-id>SeasideTesting.CookieComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form: [		self requestCookies do: [ :cookie |			html break.			cookie key ifNotNil: [ html text: 'cookie key:  ', cookie key. html break.].			cookie value ifNotNil: [html text: 'cookie value:  ', cookie value. html break.].			html submitButton				value: 'Remove ', cookie key;				callback: [ self remove: cookie ]].			html break.			html textInput 				id: 'cookieKey';				value: cookieKey; 				callback: [ :v | cookieKey := v ] .			html textInput 				id: 'cookieValue';				value: cookieValue; 				callback: [ :v | cookieValue := v  ].				html submitButton				value: 'Add';				on: #add of: self ]</body></methods><methods><class-id>SeasideTesting.CookieComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">addedCookies	^addedCookies</body><body package="SUnitToo-Tests-Seaside">cookieKey	^cookieKey</body><body package="SUnitToo-Tests-Seaside">cookieValue	^cookieValue</body><body package="SUnitToo-Tests-Seaside">deletedCookies	^deletedCookies</body><body package="SUnitToo-Tests-Seaside">requestCookies	^self requestContext request cookies select: [:each | each value ~= '']</body></methods><methods><class-id>SeasideTesting.FormComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">age	^age</body><body package="SUnitToo-Tests-Seaside">age: anObject	age := anObject</body><body package="SUnitToo-Tests-Seaside">name	^name</body><body package="SUnitToo-Tests-Seaside">name: anObject	name := anObject</body></methods><methods><class-id>SeasideTesting.FormComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">displayInfo	self inform: 'Hello ' , name , '.  You are ' , age , ' years old.'</body><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form with: [		html text: 'Name: '.		html textInput			id: 'name';			on: #name of: self.		html break.		html text: 'Age: '.		html textInput			id: 'age';			on: #age of: self.		html break.		html submitButton			callback: [self displayInfo]; 			value: 'Display'].</body></methods><methods><class-id>SeasideTesting.FormComponent class</class-id> <category>seaside</category><body package="SUnitToo-Tests-Seaside">canBeRoot	^true</body></methods><methods><class-id>SeasideTesting.TestDecoration</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">answerValue	^answerValue</body><body package="SUnitToo-Tests-Seaside">answerValue: anObject	answerValue := anObject</body><body package="SUnitToo-Tests-Seaside">hasAnswer	^hasAnswer</body><body package="SUnitToo-Tests-Seaside">hasAnswer: anObject	hasAnswer := anObject</body></methods><methods><class-id>SeasideTesting.TestDecoration</class-id> <category>call/answer</category><body package="SUnitToo-Tests-Seaside">handleAnswer: anObject 	(super handleAnswer: anObject)		ifFalse: [hasAnswer := true.			answerValue := anObject]		ifTrue: [^true].	^ false</body></methods><methods><class-id>SeasideTesting.FormComponentTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^FormComponent</body></methods><methods><class-id>SeasideTesting.FormComponentTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testDisplay		self assert: self component name isNil.	self assert: self component age isNil.	(self newForm)		fill: 'Bob Smith' in: 'name';		fill: '16' in: 'age';		click: 'Display'.	self assert: self component name = 'Bob Smith'.	self assert: self component age = '16'.	self		assert:			(self find: '//h3/text()') first text =					'Hello Bob Smith.  You are 16 years old.'</body></methods><methods><class-id>SeasideTesting.HiddenInputTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^HiddenInputComponent</body></methods><methods><class-id>SeasideTesting.HiddenInputTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testHiddenInput	self deny: self component called.	self newForm post.	self assert: self component called</body></methods><methods><class-id>SeasideTesting.MultiSelectionComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">elements	^ #( Quito Dakar Sydney Bamako )</body><body package="SUnitToo-Tests-Seaside">multiSelection	^multiSelection</body></methods><methods><class-id>SeasideTesting.MultiSelectionComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html		html form		with: [html multiSelect				id: 'multiSelectionList';				list: self elements;				selected: multiSelection;				callback: [ :value | multiSelection := value ].			html submitButton				value: 'Submit';				callback: [ self inform: 'multi selection: ' , multiSelection  printString  ]].</body></methods><methods><class-id>SeasideTesting.ListComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form:		[html select			id: 'theList';			list: #(a b c);			selected: #a;			callback: [:item | self itemSelected: item].			html submitButton			value: 'submit']</body></methods><methods><class-id>SeasideTesting.ListComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">itemSelected: item	selectedItem := item.	self inform: item printString</body><body package="SUnitToo-Tests-Seaside">selectedItem	^selectedItem</body></methods><methods><class-id>SeasideTesting.TextInputComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">textArea	^textArea</body><body package="SUnitToo-Tests-Seaside">textAreaExample	^textAreaExample</body><body package="SUnitToo-Tests-Seaside">textInput	^textInput</body><body package="SUnitToo-Tests-Seaside">textInputExample	^textInputExample</body></methods><methods><class-id>SeasideTesting.TextInputComponent</class-id> <category>initialization</category><body package="SUnitToo-Tests-Seaside">initialize	super initialize.	textInput := textArea := 'Some Text'</body></methods><methods><class-id>SeasideTesting.TextInputComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form		with: [ self renderTextOn: html ].</body><body package="SUnitToo-Tests-Seaside">renderTextOn: html	html textInput		id: 'textInput';		value: textInput;		callback: [ :value | textInput := value ].	html break.	html textInput		id: 'textInputExample';		value: textAreaExample;		callback: [ :value | textInputExample := value ].	html break.	html textArea		id: 'textArea';		value: textArea;		callback: [ :value | textArea := value ].	html break.	html textArea		id: 'textAreaExample';		value: textAreaExample;		callback: [ :value | textAreaExample := value ].	html break.	html submitButton		value: 'Submit';		callback: [ self inform: 'textInput: ' , textInput printString , '  textInputExample: ' , textInputExample printString, '  textArea: ', textArea printString, '  textAreaExample: ', textAreaExample printString ]</body></methods><methods><class-id>SeasideTesting.CheckBoxTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^CheckBoxComponent</body></methods><methods><class-id>SeasideTesting.CheckBoxTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testCheckBox	self component  booleanList do: [ :each | self assert: each value not ].	self assert: ( agent currentPage find:  '//input[@type="checkbox"]' ) size = 3.	self newForm		check: 'id_a';		check: 'id_c';		click: 'Submit'.	self component  booleanList 		do: [ :each | 			(each key = 'a' or: [each key = 'c' ]) ifTrue: [ self assert: each value ].			each key = 'b'  ifTrue: [ self assert: each value not ]].	self assert: (self find: '//h3/text()') first text = 'selection: #(#a -&gt; true #b -&gt; false #c -&gt; true)'</body></methods><methods><class-id>SeasideTesting.AnchorComponent1Test</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testPressed	self clickLinkWithText: 'first link'.	self assert: (self find: '//h3/text()') first text = 'pressed'</body></methods><methods><class-id>SeasideTesting.AnchorComponent1Test</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^AnchorComponent1</body></methods><methods><class-id>SeasideTesting.SubmitButtonTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^SubmitButton</body></methods><methods><class-id>SeasideTesting.SubmitButtonTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testButton3	self assert: self component field1 isNil.	self assert: self component field2 isNil.	self newForm		fill: '' in: 'field1';		fill: '' in: 'field2';		click: 'button3'.	self assert: self component field1 isEmpty.	self assert: self component field2 isEmpty.</body><body package="SUnitToo-Tests-Seaside">testButtons	self assert: self component field1 isNil.	self assert: self component field2 isNil.	(self newForm)		fill: '' in: 'field1';		fill: '' in: 'field2';		click: 'button1'.	self assert: self component field1 isEmpty.	self assert: self component field2 isEmpty.	self assert: self component button1WasPressed.	(self newForm)		fill: 'Bob Smith' in: 'field1';		fill: 'Jane X' in: 'field2';		click: 'button1'.	self assert: self component field1 = 'Bob Smith'.	self assert: self component field2 = 'Jane X'.	(self newForm)		fill: 'James Bond' in: 'field1';		fill: 'Jane X' in: 'field2';		click: 'button2'.	self assert: self component field1 = 'James Bond'.	self assert: self component field2 = 'Jane X'.	self assert: self component button2WasPressed</body></methods><methods><class-id>SeasideTesting.ImageMapComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">point	^point</body><body package="SUnitToo-Tests-Seaside">point: anObject	^point := anObject</body></methods><methods><class-id>SeasideTesting.ImageMapComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html map		id: 'map';		callback: [:aPoint | point := aPoint];		style: 'width: 100; height: 100'</body></methods><methods><class-id>SeasideTesting.SpanComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html 	html span		id: 'main';		style: 'margin-left: 10em; margin-right: 20em; color:#00DD45';		with: 'hello'</body></methods><methods><class-id>SeasideTesting.DialogComponentTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testFrontMost	self assert: (self frontMostComponent isKindOf: DialogComponent).	self clickLinkWithText: 'Show AnchorComponent3'.	self assert: (self frontMostComponent isKindOf: AnchorComponent3).	self clickLinkWithText: 'third link'.	self assert: (self frontMostComponent isKindOf: DialogComponent).</body><body package="SUnitToo-Tests-Seaside">testFrontMostIsDialog	self clickLinkWithText: 'dialog'.	self assert: (self find: '//h3/text()') first text = 'this is a dialog'.	self assert: (self frontMostComponent isKindOf: Seaside.WAFormDialog).</body></methods><methods><class-id>SeasideTesting.DialogComponentTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^DialogComponent</body></methods><methods><class-id>SeasideTesting.SingleSelectionTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^SingleSelectionComponent</body></methods><methods><class-id>SeasideTesting.SingleSelectionTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testSelection	| els |	self assert: self component singleSelection   isNil.	self assert: self component  singleSelectionOptional  isNil.	els := agent currentPage find:  '///select'.	self assert: (els  first elements size = 4).	self assert: (els  first elements first valueOfAttribute: 'value' ifAbsent: [nil]) notNil.	self assert: els  first elements first characterData = 'Quito'.	self assert: ((els  at: 2) elements first valueOfAttribute: 'selected' ifAbsent: [nil])  notNil.	self assert: (els  at: 2) elements first characterData = '(none)'.	self assert: (els  last elements size = 4).	self assert: els  last elements first characterData = 'Quito'.	self assert: (els  last elements first valueOfAttribute: 'value' ifAbsent: [nil]) isNil.	self newForm		select: #('Dakar') in: 'singleSelectionList';		select: #('Sydney') in: 'singleSelectionListOptional';		click: 'Submit'.	self assert: self component singleSelection = #Dakar.	self assert: self component  singleSelectionOptional = #Sydney.	self assert: (self find: '//h3/text()') first text = 'selection: #Dakar  optional selection: #Sydney'</body></methods><methods><class-id>SeasideTesting.TextInputTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^TextInputComponent</body></methods><methods><class-id>SeasideTesting.TextInputTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testTextInput	self assert: self component textInput = 'Some Text'.	self assert: self component textArea = 'Some Text'.	self assert: self component textInputExample isNil.	self assert: self component textAreaExample isNil.	self newForm		fill: 'Text Input' in: 'textInput';		click: 'Submit'.	self assert: self component textInput =  'Text Input'.	self assert: self component textArea = 'Some Text'.	self assert: self component textInputExample isNil.	self assert: self component textAreaExample isNil.	self assert: (self find: '//h3/text()') first text = 'textInput: ''Text Input''  textInputExample: nil  textArea: ''Some Text''  textAreaExample: nil'.</body><body package="SUnitToo-Tests-Seaside">testTextInputAll	self assert: self component textInput = 'Some Text'.	self assert: self component textArea = 'Some Text'.	self assert: self component textInputExample isNil.	self assert: self component textAreaExample isNil.	(self newForm)		fill: 'Text Input' in: 'textInput';		fill: 'Text Area' in: 'textArea';		fill: 'Text Input Example' in: 'textInputExample';		fill: 'Text Area Example' in: 'textAreaExample';		click: 'Submit'.	self assert: self component textInput = 'Text Input'.	self assert: self component textArea = 'Text Area'.	self assert: self component textInputExample = 'Text Input Example'.	self assert: self component textAreaExample = 'Text Area Example'.	self		assert:			(self find: '//h3/text()') first text =					'textInput: ''Text Input''  textInputExample: ''Text Input Example''  textArea: ''Text Area''  textAreaExample: ''Text Area Example'''</body><body package="SUnitToo-Tests-Seaside">testTextInputExample	self assert: self component textInput = 'Some Text'.	self assert: self component textArea = 'Some Text'.	self assert: self component textInputExample isNil.	self assert: self component textAreaExample isNil.	(self newForm)		fill: 'Text Input Example' in: 'textInputExample';		click: 'Submit'.	self assert: self component textInput = 'Some Text'.	self assert: self component textArea = 'Some Text'.	self assert: self component textInputExample = 'Text Input Example'.	self assert: self component textAreaExample isNil.	self		assert:			(self find: '//h3/text()') first text =					'textInput: ''Some Text''  textInputExample: ''Text Input Example''  textArea: ''Some Text''  textAreaExample: nil'</body><body package="SUnitToo-Tests-Seaside">testTextInputUTF8	self assert: self component textInput = 'Some Text'.	self assert: self component textArea = 'Some Text'.	self assert: self component textInputExample isNil.	self assert: self component textAreaExample isNil.		self newForm		fill: 'ÐÐ°Ð½Ñ ÐÐ²Ð°Ð½Ð¾Ð²' in: 'textInput' ;		click: 'Submit'.	self assert: self component textInput =  'ÐÐ°Ð½Ñ ÐÐ²Ð°Ð½Ð¾Ð²'.	self assert: self component textArea = 'Some Text'.	self assert: self component textInputExample isNil.	self assert: self component textAreaExample isNil.	self assert: (self find: '//h3/text()') first text = 'textInput: ''ÐÐ°Ð½Ñ ÐÐ²Ð°Ð½Ð¾Ð²''  textInputExample: nil  textArea: ''Some Text''  textAreaExample: nil'</body></methods><methods><class-id>SeasideTesting.TextInputTest class</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">isAbstract	^false</body></methods><methods><class-id>SeasideTesting.CheckBoxComponent</class-id> <category>initialize-release</category><body package="SUnitToo-Tests-Seaside">initialize	super initialize.	booleanList := #(a b c ) collect: [:key | key -&gt; false].</body></methods><methods><class-id>SeasideTesting.CheckBoxComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">booleanList	^booleanList</body></methods><methods><class-id>SeasideTesting.CheckBoxComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn:  html	html form: [		booleanList do: [:association |			html text: association key; space.			html checkbox				id: 'id_', association key;				on: #value of: association ].			html submitButton				value: 'Submit';				callback: [ self inform: 'selection: ' , booleanList  printString  ]]</body></methods><methods><class-id>SeasideTesting.AnchorComponent2</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">firstSent	^firstSent</body><body package="SUnitToo-Tests-Seaside">secondSent	^secondSent</body></methods><methods><class-id>SeasideTesting.AnchorComponent2</class-id> <category>initialization</category><body package="SUnitToo-Tests-Seaside">initialize	super initialize.	firstSent := false.	secondSent := false.</body></methods><methods><class-id>SeasideTesting.AnchorComponent2</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html 	html anchor		id: 'first';		callback: [firstSent := true ];		with: 'first link'.	html text: 'hello'.	html anchor		id: 'second';		callback: [secondSent := true];		with: 'second link'</body></methods><methods><class-id>SeasideTesting.WACounterTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^WACounter</body></methods><methods><class-id>SeasideTesting.WACounterTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testDecrease	self assert: self component count isZero.	self clickLinkWithText: '--'.	self assert: self component count = -1.	self assert: (self find: '//h1/text()') first text = '-1'</body><body package="SUnitToo-Tests-Seaside">testIncrease	self assert: self component count isZero.	self clickLinkWithText: '++'.	self assert: self component count = 1.	self assert: (self find: '//h1/text()') first text = '1'</body></methods><methods><class-id>SeasideTesting.ListComponentTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^ListComponent</body></methods><methods><class-id>SeasideTesting.ListComponentTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testList	| el |	self assert: self component selectedItem isNil.	el := (agent currentPage find:  '//option' ) detect: [ :elx | elx characterData = 'a' ].	self assert: (el valueOfAttribute: 'selected' ifAbsent: [nil]) notNil.	self newForm		select: #('b') in: 'theList';		post.			self assert: self component  selectedItem = #b.</body></methods><methods><class-id>SeasideTesting.SingleSelectionComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">elements	^ #( Quito Dakar Sydney Bamako )</body><body package="SUnitToo-Tests-Seaside">singleSelection	^singleSelection</body><body package="SUnitToo-Tests-Seaside">singleSelection: anObject	^singleSelection := anObject</body><body package="SUnitToo-Tests-Seaside">singleSelectionOptional	^singleSelectionOptional</body><body package="SUnitToo-Tests-Seaside">singleSelectionOptional: anObject	^singleSelectionOptional := anObject</body></methods><methods><class-id>SeasideTesting.SingleSelectionComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html		html form		with: [self renderSingleSelectionOn: html.			self renderSingleSelectionOptionalOn: html.			self renderSingleSelectionWithoutCallbackOn: html.			html submitButton				value: 'Submit';				callback: [ self inform: 'selection: ' , singleSelection  printString , '  optional selection: ' , singleSelectionOptional printString ]].</body><body package="SUnitToo-Tests-Seaside">renderSingleSelectionOn: html	html select		id: 'singleSelectionList';		list: self elements;		selected: singleSelection;		callback: [ :value | singleSelection := value ]</body><body package="SUnitToo-Tests-Seaside">renderSingleSelectionOptionalOn: html	html select			beOptional;			id: 'singleSelectionListOptional';			list: self elements;			optionalLabel: '(none)';			selected: singleSelectionOptional;			callback: [ :value | singleSelectionOptional := value ]</body><body package="SUnitToo-Tests-Seaside">renderSingleSelectionWithoutCallbackOn: html	html select			id: 'singleSelectionListNoCallback';			list: self elements</body></methods><methods><class-id>SeasideTesting.TextMultipartInputTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^TextMultipartInputComponent</body></methods><methods><class-id>SeasideTesting.ImageMapTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^ImageMapComponent</body></methods><methods><class-id>SeasideTesting.ImageMapTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testClickOnImageMap	self assert: self component point isNil.	self clickMapWithId: 'map' at: 30@20.	self assert: self component point = (30@20)</body></methods><methods><class-id>SeasideTesting.CookieTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^CookieComponent</body><body package="SUnitToo-Tests-Seaside">setupComponent	super setupComponent.	"	The way to set up cookie preferences have changed substantially. This will have to be reworked.	agent application preferenceAt: #useCookies put: true."</body></methods><methods><class-id>SeasideTesting.CookieTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testCookie	self newForm 		fill: 'NewCookieKey' in: 'cookieKey';		fill: 'NewCookieValue' in: 'cookieValue'; 		click: 'Add'.	self assert: ( self component addedCookies isKindOf: Seaside.WACookie ).	self assert: ( self component addedCookies key = 'NewCookieKey' ).	self assert: ( self component addedCookies value = 'NewCookieValue' ).	self newForm click: 'Remove ',  'NewCookieKey' .	self assert: (self component deletedCookies first isKindOf: Seaside.WACookie ).	self assert:  self component deletedCookies first key = 'NewCookieKey' .	self assert:  self component deletedCookies first value isEmpty</body></methods><methods><class-id>SeasideTesting.DialogComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html 	html anchor		callback: [self call: AnchorComponent3 new];		with: 'Show AnchorComponent3'.	html anchor		callback: [self inform: 'this is a dialog'];		with: 'dialog'</body></methods><methods><class-id>SeasideTesting.RadioButtonTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^RadioButtonComponent</body></methods><methods><class-id>SeasideTesting.RadioButtonTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testRadioButton	self component  booleanList do: [ :each | self assert: each value not ].	self assert: ( agent currentPage find:  '///input[@type="radio"]' ) size = 6.	self newForm		radioCheck: 'id1_a';		radioCheck: 'id1_b';		radioCheck: 'id1_c';		click: 'Submit'.	self component  booleanList do: [ :each | self assert: each value ].	self assert: (self find: '//h3/text()') first text =  'selection: #(#a -&gt; true #b -&gt; true #c -&gt; true)'</body></methods><methods><class-id>SeasideTesting.HiddenInputComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form: [html hiddenInput id: 'hidden'; callback: [called := true]]</body></methods><methods><class-id>SeasideTesting.HiddenInputComponent</class-id> <category>initialize-release</category><body package="SUnitToo-Tests-Seaside">initialize	super initialize.	called := false</body></methods><methods><class-id>SeasideTesting.HiddenInputComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">called	^called</body><body package="SUnitToo-Tests-Seaside">called: anObject	^called := anObject</body></methods><methods><class-id>SeasideTesting.UploadFileComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">file	^file</body></methods><methods><class-id>SeasideTesting.UploadFileComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form		multipart;		with: [ self renderFileOn: html]</body><body package="SUnitToo-Tests-Seaside">renderFileOn: html	html fileUpload		id: 'fileUpload';		callback: [ :f | file := f].	html submitButton			value: 'Submit';			callback: [ self inform: (file contentsDecodedUsing: 'utf-8') ]</body></methods><methods><class-id>SeasideTesting.Upload2FilesComponent</class-id> <category>accessing</category><body package="SUnitToo-Tests-Seaside">file1	^file1</body></methods><methods><class-id>SeasideTesting.Upload2FilesComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderFileOn: html	| string |	html fileUpload		id: 'firstFile';		callback: [ :f | file := f].	html fileUpload		id: 'secondFile';		callback: [ :f | file1 := f].	html submitButton			value: 'Submit';			callback: [string := 'first file: '.						file ifNotNil: [string := string, file contents asString ].						file1 ifNotNil: [string := string, '     second file: ', file1 contents asString ].						self inform: string ]</body></methods><methods><class-id>SeasideTesting.MultiSelectionTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^MultiSelectionComponent</body></methods><methods><class-id>SeasideTesting.MultiSelectionTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">testSelected1	| els |	self assert: self component multiSelection   isNil.	els := agent currentPage find:  '///select'.	self assert: (els  size = 1).	self assert: (els  first valueOfAttribute: 'multiple' ifAbsent: [nil])  notNil.	self assert: (els  first elements first valueOfAttribute: 'value' ifAbsent: [nil]) notNil.	self assert: els  first elements first characterData = 'Quito'.	self newForm		select: #('Dakar') in: 'multiSelectionList';		click: 'Submit'.	self assert: self component multiSelection size = 1.	self assert: self component  multiSelection first = #Dakar.	self assert: (self find: '//h3/text()') first text = 'multi selection: OrderedCollection (#Dakar)'</body><body package="SUnitToo-Tests-Seaside">testSelection	| els |	self assert: self component multiSelection   isNil.	els := agent currentPage find:  '///select'.	self assert: (els  size = 1).	self assert: (els  first valueOfAttribute: 'multiple' ifAbsent: [nil])  notNil.	self assert: (els  first elements first valueOfAttribute: 'value' ifAbsent: [nil]) notNil.	self assert: els  first elements first characterData = 'Quito'.	self newForm		select: #( 'Dakar' 'Sydney' ) in: 'multiSelectionList';		click: 'Submit'.	self assert: self component multiSelection size = 2.	self assert: self component  multiSelection first = #Dakar.	self assert: self component  multiSelection last = #Sydney.	self assert: (self find: '//h3/text()') first text = 'multi selection: OrderedCollection (#Dakar #Sydney)'</body></methods><methods><class-id>SeasideTesting.TextMultipartInputComponent</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html	html form		multipart;		with: [ self renderTextOn: html ].</body></methods><methods><class-id>SeasideTesting.SpanComponentTest</class-id> <category>running</category><body package="SUnitToo-Tests-Seaside">componentClass	^SpanComponent</body></methods><methods><class-id>SeasideTesting.SpanComponentTest</class-id> <category>testing</category><body package="SUnitToo-Tests-Seaside">test	| el |	el := (agent currentPage find:  '//span' ) first.	 self assert:  el characterData = 'hello'.	self assert: (el valueOfAttribute: 'id' ifAbsent: [nil]) = 'main'.	self assert: (el valueOfAttribute: 'style' ifAbsent: [nil]) = 'margin-left: 10em; margin-right: 20em; color:#00DD45'.</body></methods><methods><class-id>SeasideTesting.AnchorComponent1</class-id> <category>rendering</category><body package="SUnitToo-Tests-Seaside">renderContentOn: html 	html anchor		id: 'first';		callback: [ self inform: 'pressed' ];		with: 'first link'</body></methods><methods><class-id>SeasideTesting.AnchorComponent1 class</class-id> <category>seaside</category><body package="SUnitToo-Tests-Seaside">canBeRoot	^true</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WAComponent</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decoration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class><class><name>WebTestCase</name><environment>SUnit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>agent </inst-vars><class-inst-vars></class-inst-vars><imports>			private SiouX.SeasideServer			</imports><category>Seaside-Testing</category><attributes><package>SUnitToo-Seaside</package></attributes></class><class><name>WADecoration</name><environment>Seaside</environment><super>Seaside.WAPresenter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Seaside-Component</category><attributes><package>Seaside-Component</package></attributes></class></st-source>