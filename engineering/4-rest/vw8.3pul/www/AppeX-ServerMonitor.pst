<?xml version="1.0"?><st-source><!-- Name: AppeX-ServerMonitorNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: This package contains code for a web-based SiouX server monitor / configuration tool.Once loaded, a server named 'ServerMonitor' will be available from the Web Servers tool. The default configuration will start the server on port 8001 (see Server class>>#serverMonitor: for configuration).You can also start it programmatically:(Server id: 'ServerMonitor') start.When running, the ServerMonitor can be accessed at http://localhost:8001. Substitute 'localhost' with the name of another host if you'd like to monitor servers from a remote machine.See ServerMonitor class comments for more details.DbIdentifier: bear73DbTrace: 497129DbUsername: vdegenDbVersion: 8.3 - 4DevelopmentPrerequisites: #(#(#any 'SiouX-Http' '') #(#any 'AppeX-ThirdPartyLibraries' '') #(#any 'AppeX-Internationalization' '') #(#any 'AppeX-Client' '') #(#any 'AppeX-Server' ''))DisregardedPrerequisites: #()PackageName: AppeX-ServerMonitorParcel: #('AppeX-ServerMonitor')PrerequisiteDescriptions: #(#(#name 'SiouX-Http' #componentType #bundle) #(#name 'AppeX-ThirdPartyLibraries' #componentType #package) #(#name 'AppeX-Internationalization' #componentType #package) #(#name 'AppeX-Client' #componentType #package) #(#name 'AppeX-Server' #componentType #package))PrerequisiteParcels: #(#('SiouX-Http' '') #('AppeX-ThirdPartyLibraries' '') #('AppeX-Internationalization' '') #('AppeX-Client' '') #('AppeX-Server' ''))PrintStringCache: (8.3 - 4,vdegen)Version: 8.3 - 4Date: 3:30:54 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:30:54 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ServerMonitor</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serverName </inst-vars><class-inst-vars>data </class-inst-vars><imports>			private SiouX.*			</imports><category></category><attributes><package>AppeX-ServerMonitor</package></attributes></class><comment><class-id>AppeX.ServerMonitor</class-id><body>ServerMonitor is a web application used to monitor the servers running in a Smalltalk image.Instance Variables	serverName	&lt;String&gt;	the name of the server currently being monitored in a session represented by my instance.Usage"Evaluate the following to start an HTTP server with a bunch of example web applications."(SiouX.Server id: 'Examples') start."Start the server monitor."(SiouX.Server id: 'ServerMonitor') start."On the machine running the ServerMonitor, evaluate:"ExternalWebBrowser open: 'http://localhost:8001'." Destroy the example server and the monitor: "SiouX.Server destroyServer: 'Examples'.SiouX.Server destroyServer: 'ServerMonitor'.</body></comment><class><name>ServerStatsChanged</name><environment>AppeX</environment><super>Core.Announcement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stats </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-ServerMonitor</package></attributes></class><comment><class-id>AppeX.ServerStatsChanged</class-id><body>ServerStatsChanged is an announcement about a ServerStats change.Instance Variables	stats	&lt;ServerStats&gt;	description of stats</body></comment><class><name>ServerMonitorClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>examples</category><attributes><package>AppeX-ServerMonitor</package></attributes></class><comment><class-id>AppeX.ServerMonitorClient</class-id><body>ServerMonitorClient is the Javascrpt client side code for the ServerMonitor application. It does all the work in the web browser.</body></comment><class><name>ServerStats</name><environment>AppeX</environment><super>Core.Announcer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>server requests responses lastUpdate totalRequests totalResponses pending rate responseIncrement logger dataLock </inst-vars><class-inst-vars></class-inst-vars><imports>			private SiouX.*			</imports><category></category><attributes><package>AppeX-ServerMonitor</package></attributes></class><comment><class-id>AppeX.ServerStats</class-id><body>A utility class to monitor and collect an instance of Server.Instance Variables	lastUpdate	&lt;Time&gt; lastUpdate	pending	&lt;Number&gt;	 pending	requests	&lt;Semaphore&gt; requests	responses	&lt;Semaphore&gt;	 responses	server	&lt;Server&gt;	 server	totalRequests	&lt;Number&gt;	 totalRequests	totalResponses	&lt;Number&gt;	 totalResponses	rate &lt;Number&gt; rate	responseIncrement &lt;Number&gt;	logger &lt;CommonLog&gt;	connectionCounts &lt;Number&gt;	dataLock &lt;Semaphore&gt;</body></comment><methods><class-id>AppeX.ServerMonitor</class-id> <category>private</category><body package="AppeX-ServerMonitor">announceListenersChanged: anAnnouncement"	To avoid multiple refresh in multiple instances of web browers, process an event directly."	self postServerEvent: (ServerEvent		sessionId: self sessionId		eventName: anAnnouncement class name		data: #listener -&gt; anAnnouncement listener hostAndPortString).	self announceServersChanged: #ServerChanged -&gt; anAnnouncement listener server id</body><body package="AppeX-ServerMonitor">announceRespondersChanged: anAnnouncement"	To avoid multiple refresh in multiple instances of web browers, process an event directly."	self postServerEvent: (ServerEvent		sessionId: self sessionId		eventName: anAnnouncement class name		data: #responder -&gt; anAnnouncement responder path).	self announceServersChanged: #ServerChanged -&gt; anAnnouncement responder server id</body><body package="AppeX-ServerMonitor">announceServersChanged: association	"	To avoid multiple refresh in multiple instances of web browers, process an event directly."	| eventData |	eventData := (#(ServerCreated #ServerAdded #ServerChanged) includes: association key)		ifTrue: [self serverStatusDataFor: association]		ifFalse: [Dictionary with: association].	self announceServerEvent: (ServerEvent				sessionId: self sessionId				eventName: association key				data: eventData).	^eventData</body><body package="AppeX-ServerMonitor">getAvailableResponderPragmas	| paths available |	paths := self selectedServer responders collect: [ :each | each path ].	available := OrderedCollection new.	Responder withAllSubclasses do: [ :eachClass |		(eachClass configurationPragmasForServer: self selectedServer) do: [ :eachPragma |			(paths includes: eachPragma arguments last) ifFalse: [				available add: eachPragma ]]].	^ available</body><body package="AppeX-ServerMonitor">getAvailableServerPragmas	| ids available |	ids := Server registry keys.	available := OrderedCollection new.	Server withAllSubclasses do: [ :eachClass |		(Pragma allNamed: #server: in: eachClass class) do: [ :eachPragma |			(ids includes: eachPragma arguments last) ifFalse: [			available add: eachPragma ]]].	^ available sorted: [ :a :b | a arguments last &lt;= b arguments last ]</body><body package="AppeX-ServerMonitor">listenerSettingsFor: listener	"a somewhat convoluted way of returning listener settings to the client. In a real-world example,	we would probably want to abstract settings to a separate class.	"	^Dictionary new		at: 'name' put: listener hostAndPortString;		at: 'running' put: listener isRunning;		at: 'settings' put: (OrderedCollection new			add: (Dictionary new				at: 'name' put: 'Connection Priority';				at: 'value' put: listener connectionPriority;				at: 'idPrefix' put: 'listener-connection-priority';				at: 'type' put: 'slider';				at: 'min' put: 30;				at: 'max' put: 70;				yourself);			add: (Dictionary new				at: 'name' put: 'Listener Priority';				at: 'value' put: listener listenerPriority;				at: 'idPrefix' put: 'listener-process-priority';				at: 'type' put: 'slider';				at: 'min' put: 30;				at: 'max' put: 70;				yourself);			add: (Dictionary new				at: 'name' put: 'Connection Timeout(ms)';				at: 'value' put: listener connectionTimeout asMilliseconds;				at: 'idPrefix' put: 'listener-connection-timeout';				at: 'type' put: 'text';				yourself);			add: (Dictionary new				at: 'name' put: 'Backlog Size';				at: 'value' put: listener backlogSize;				at: 'idPrefix' put: 'listener-backlog-size';				at: 'type' put: 'number';				at: 'description' put: 'Size of the TCP listening backlog';				yourself);			add: (Dictionary new				at: 'name' put: 'Maximum Acceptance Delay(ms)';				at: 'value' put: listener maxAcceptDelay asMilliseconds;				at: 'idPrefix' put: 'listener-max-accept-delay';				at: 'type' put: 'number';				yourself);			add: (Dictionary new				at: 'name' put: 'Upper Connection Limit';				at: 'value' put: listener upperConnectionLimit;				at: 'idPrefix' put: 'listener-upper-conn-limit';				at: 'type' put: 'number';				yourself);			add: (Dictionary new				at: 'name' put: 'Lower Connection Limit';				at: 'value' put: listener lowerConnectionLimit;				at: 'idPrefix' put: 'listener-lower-conn-limit';				at: 'type' put: 'number';				yourself);			yourself);		yourself</body><body package="AppeX-ServerMonitor">responderDataFor: aResponder	| aDictionary |	aDictionary := Dictionary new		at: #path put: aResponder path;		at: #class put: aResponder class name;		at: #description put: aResponder description asString;		at: #siteURL put: (self siteURLForResponder: aResponder);		yourself.	^aDictionary</body><body package="AppeX-ServerMonitor">selectedServer	^self class serverWithName: serverName</body><body package="AppeX-ServerMonitor">serverStatusDataFor: association"	Answer the server status data to be used by the client.	If association has no value, there is no server selected."	| theServer data logsInfo|	data := Dictionary with: association.	association value ifNil: [ ^ data ].	theServer := Server id: association value.	logsInfo := self logsInfoForServer: theServer.	^data		at: #running put: theServer isRunning;		at: #debugging put: theServer debugging;		at: #logging put: theServer isLogging;		at: #logsInfo put: logsInfo;		yourself</body><body package="AppeX-ServerMonitor">setListener: aListener option: aString to: aValue	aString = 'Connection Priority'		ifTrue: [aListener connectionPriority: aValue].	aString = 'Listener Priority' ifTrue: [aListener listenerPriority: aValue].	aString = 'Connection Timeout(ms)'		ifTrue: [aListener connectionTimeout: (Duration fromMilliseconds: aValue)].	aString = 'Backlog Size' ifTrue: [aListener backlogSize: aValue].	aString = 'Maximum Acceptance Delay(ms)'		ifTrue: [aListener maxAcceptDelay: (Duration fromMilliseconds: aValue)].	aString = 'Lower Connection Limit'		ifTrue: [aListener lowerConnectionLimit: aValue].	aString = 'Upper Connection Limit'		ifTrue: [aListener upperConnectionLimit: aValue]</body><body package="AppeX-ServerMonitor">siteURLForResponder: aResponder	| listener |	listener := self selectedServer listeners detect: [:e | e isRunning] ifNone: [^nil].	^aResponder siteURLForAddress: listener address protocol:  listener connectionClass protocol</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>accessing</category><body package="AppeX-ServerMonitor">selectedStats	^self class serverStats		at: serverName		ifAbsentPut: [self class newServerStatsFor: (Server id: serverName)]</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services - server</category><body package="AppeX-ServerMonitor">registerInterestInListenersAndRespondersForServer: aServer	aServer		when: ListenerAdded, ListenerRemoved, ListenerStarted, ListenerStopped		do: [ :announcement | self announceListenersChanged: announcement ]		for: self;		when: ResponderAdded, ResponderRemoved		do: [ :announcement | self announceRespondersChanged: announcement ]		for: self.</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>initialize-release</category><body package="AppeX-ServerMonitor">initializeSession: sessionClass"I am a session instance. I need to know about servers being added to and removed from the registry,so that I can announce it to my clients."	super initializeSession: sessionClass.	Server		when: ServerAdded		do: [ :ann |self announceServersChanged: #ServerAdded -&gt; ann server id ]		for: self.	Server		when: ServerRemoved		do: [ :ann |			ann server unsubscribe: self.			self announceServersChanged: #ServerRemoved -&gt; ann server id ]		for: self.	^ session</body><body package="AppeX-ServerMonitor">release	Server unsubscribe: self.	super release.</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services</category><body package="AppeX-ServerMonitor">allLogNames			^self class allLogNames</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services - logging</category><body package="AppeX-ServerMonitor">logsInfoForServer: aServer	| logsInfo |	logsInfo := Dictionary new.	aServer logs do: [:eLog| |eLogInfo eLogName|		eLogName := eLog class name.		eLogInfo := Dictionary new.		eLogInfo at: 'logName' put: eLogName.		eLogInfo at: 'fileName' put: eLog file tail asString.		eLogInfo at: 'isLogging' put: eLog isLogging.		eLogName = #StatusLog ifTrue: [			eLogInfo at: 'frequency' put: eLog frequency minutes].		logsInfo at: eLogName put: eLogInfo.	].	^logsInfo</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>utility</category><body package="AppeX-ServerMonitor">logWithName: aString	^self selectedServer logs detect: [:eLog | eLog class name = aString asSymbol] ifNone: [nil]</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>accessing</category><body package="AppeX-ServerMonitor">applicationClientClass	^ServerMonitorClient</body><body package="AppeX-ServerMonitor">data	^ data</body><body package="AppeX-ServerMonitor">data: aDictionary	data := aDictionary</body><body package="AppeX-ServerMonitor">serverStats	^ self data</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>services</category><body package="AppeX-ServerMonitor">serverWithName: aServerName	^ SiouX.Server registry at: aServerName ifAbsent: [nil]</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>dispatching</category><body package="AppeX-ServerMonitor">dispatchRequest: aRequestContext	"Before dispatching request, I need to make sure that all servers are being monitored.	If there are any missing, add ServerStats to my responder."	self updateServerStats.	^ super dispatchRequest: aRequestContext</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>private</category><body package="AppeX-ServerMonitor">newServerStatsFor: aServer	^(ServerStats on: aServer)		when: ServerStatsChanged		send: #handleServerStatsChanged:		to: self;		yourself</body><body package="AppeX-ServerMonitor">removeStats: toBeRemoved	data ifNil: [ ^self ].	toBeRemoved do: [:eachStats |		data removeKey: eachStats server id ifAbsent: [].		eachStats release ]</body><body package="AppeX-ServerMonitor">settingParameterHelpFor: aString	aString = 'Connection Priority' ifTrue: [^Listener connectionPriorityHelp].	aString = 'Listener Priority' ifTrue: [^Listener listenerPriorityHelp].	aString = 'Connection Timeout(ms)' ifTrue: [^Listener connectionTimeoutHelp].	aString = 'Backlog Size' ifTrue: [ ^Listener listenerBacklogHelp ].	aString = 'Maximum Acceptance Delay(ms)' ifTrue: [^Listener maximumAcceptanceDelayHelp].	aString = 'Lower Connection Limit' ifTrue: [^Listener lowerConnectionLimitHelp ].	aString = 'Upper Connection Limit' ifTrue: [^Listener upperConnectionLimitHelp]</body><body package="AppeX-ServerMonitor">subclassNamesOf: aClass matching: patternString	"answer a collection of Dictionaries "	| partialName classes aCollectionOfDictionaries |	partialName := patternString.	(patternString includes: $*) ifFalse: [ partialName := partialName, '*' ].	classes := aClass allSubclasses select: [ :eachClass | partialName match: eachClass name ].	aCollectionOfDictionaries :=  (classes sort: [ :a :b | a fullName &lt;= b fullName ]) collect: [ :eachClass | 		| ePragmas ePath |		ePragmas := Pragma allNamed: #server:path: in: eachClass class.		ePath := ePragmas notEmpty			ifTrue: [  ePragmas first arguments last ]			ifFalse: [ String new].		Dictionary new			at: #label put: eachClass fullName;			at: #value put: eachClass fullName;			at: #path put: ePath;			yourself ].	^ aCollectionOfDictionaries</body><body package="AppeX-ServerMonitor">updateServerStats	| toBeRemoved |	self data: (self data ifNil: [Dictionary new]).	Server registry do: [:eachServer |		eachServer id ~= 'ServerMonitor' ifTrue: [			self data at: eachServer id ifAbsentPut: [self newServerStatsFor: eachServer]]].	"Ensure that any servers that are no longer in registry are not monitored:"	toBeRemoved := self data select: [:eachStats | (Server registry includesKey: eachStats server id) not].	self removeStats: toBeRemoved</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>events</category><body package="AppeX-ServerMonitor">handleServerStatsChanged: aServerStatsChanged"	Create a server event and let the sessions whose selectedServer is the same as the server in stats handle the event."	| server event |	event := ServerEvent eventName: #ServerStatsChanged data: aServerStatsChanged stats getData.	server := aServerStatsChanged stats server.	self sessionInstancesDo: [ :each |		each selectedServer == server ifTrue: [ each postServerEvent: event ] ]</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>initialize-release</category><body package="AppeX-ServerMonitor">obsolete	Server unsubscribe: self.	data ifNil: [ ^self ].	self removeStats: data copy.	data := nil</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>class initialization</category><body package="AppeX-ServerMonitor">initialize"	self initialize"	Server unsubscribe: self.	Server		when: ServerAdded, ServerRemoved		do: [ :ann | self updateServerStats]		for: self.</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>logs</category><body package="AppeX-ServerMonitor">allLogNames			^StreamLogger loggers collect: [:eLoggerClass | eLoggerClass name].</body><body package="AppeX-ServerMonitor">logForServerName: aServerName andLogName: aLogName	| aServer aLog  |		aServer := self serverWithName: aServerName.	aLog :=  aServer logs detect: [:eLog | eLog className = aLogName asSymbol] ifNone: [nil].	^aLog</body></methods><methods><class-id>AppeX.ServerStatsChanged</class-id> <category>accessing</category><body package="AppeX-ServerMonitor">stats	^stats</body><body package="AppeX-ServerMonitor">stats: aServerStats	stats := aServerStats</body></methods><methods><class-id>AppeX.ServerStatsChanged class</class-id> <category>instance creation</category><body package="AppeX-ServerMonitor">on: aServerStats	^ self new		stats: aServerStats;		yourself</body></methods><methods><class-id>AppeX.ServerStats</class-id> <category>private</category><body package="AppeX-ServerMonitor">currentClockValue	^Time millisecondClockValue</body><body package="AppeX-ServerMonitor">frequency	^3 seconds</body><body package="AppeX-ServerMonitor">monitorConnections	"	Register interest in server connections. If responses have been initialized, it is safe to also update data.	"	server		when: ConnectionOpened , ConnectionClosed		do: [:ann |			responses ifNotNil: [ self updateData ]]		for: self</body><body package="AppeX-ServerMonitor">monitorRequests	"	Register interest in RequestReceived.	Since there may be pending requests when this method is executed, register interest in ResponseSent only	after the next RequestReceived is announced.	"	requests := Semaphore new.	server		when: RequestReceived		do: [:req |			requests signal.			self monitorResponses; updateData ]		for: self.</body><body package="AppeX-ServerMonitor">monitorResponses	"If this is the first time, responses will be nil and I will set up an announcement handler for ResponseSent."	responses ifNotNil: [ ^ self ].	responses := Semaphore new.	server		when: ResponseSent		do: [:rsp | responses signal. self updateData]		for: self</body><body package="AppeX-ServerMonitor">monitorServer	"	Register interest in server announcements.	"	self		monitorConnections;		monitorRequests</body><body package="AppeX-ServerMonitor">startLogging	logger start</body><body package="AppeX-ServerMonitor">stopLogging	logger stop</body><body package="AppeX-ServerMonitor">updateData	self updateDataCheckingElapsedTime: true</body><body package="AppeX-ServerMonitor">updateDataCheckingElapsedTime: checkTimeElapsed	| requestIncrement currentTime elapsedTime |	currentTime := self currentClockValue.	elapsedTime := currentTime - lastUpdate.	checkTimeElapsed ifTrue: [elapsedTime &lt; self frequency asMilliseconds ifTrue: [^self]].	elapsedTime = 0 ifTrue: [^self]. "bail in any case to avoid divide by zero below"	dataLock critical: [		requestIncrement := requests excessSignals.		requests initSignals.		responseIncrement := responses excessSignals.		responses initSignals.		pending := pending + requestIncrement - responseIncrement.		rate := (responseIncrement * 1000 / elapsedTime) rounded.		totalRequests := totalRequests + requestIncrement.		totalResponses := totalResponses + responseIncrement.		lastUpdate := currentTime ].	^self announce: (ServerStatsChanged on: self)</body></methods><methods><class-id>AppeX.ServerStats</class-id> <category>accessing</category><body package="AppeX-ServerMonitor">getData	^ dataLock critical: [ | data |	data := Dictionary new.	data		at: 'completed' put: responseIncrement;		at: 'pending' put: pending;		at: 'rate' put: rate;		at: 'totalRequests' put: totalRequests;		at: 'totalResponses' put: totalResponses;		at: 'listenerConnectionCount'			put: (server listeners				collect: [:listener | listener connectionCount printString]).		data ]</body><body package="AppeX-ServerMonitor">isLogging	^logger isLogging</body><body package="AppeX-ServerMonitor">logContents	logger isLogging ifTrue: [ logger flush ].	logger file exists ifFalse: [ ^ '' ].	^logger file contentsOfEntireFile</body><body package="AppeX-ServerMonitor">server	^server</body></methods><methods><class-id>AppeX.ServerStats</class-id> <category>initialize-release</category><body package="AppeX-ServerMonitor">initialize: aServer	server := aServer.	logger := CommonLog announcers: aServer.	logger file: aServer id , '.log'.	dataLock := Semaphore forMutualExclusion.	lastUpdate := self currentClockValue.	totalRequests := totalResponses := pending := 0.	self monitorServer</body><body package="AppeX-ServerMonitor">release	server ifNotNil: [		server unsubscribe: self.		server := nil ].	^ super release</body></methods><methods><class-id>AppeX.ServerStats class</class-id> <category>instance creation</category><body package="AppeX-ServerMonitor">on: aServer	^(self new)		initialize: aServer;		yourself</body></methods><methods><class-id>SiouX.Server</class-id> <category>tools</category><body package="AppeX-ServerMonitor">updateResponderList: anArray	responders := anArray		inject: OrderedCollection new		into: [ :newOrder :eachIndex | newOrder add: (responders at: eachIndex); yourself ].</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services - server</category><body package="AppeX-ServerMonitor">getAvailableServers	&lt;jsonStream: 'get-available-servers'&gt;	^ self getAvailableServerPragmas collect: [ :eachPragma |		Dictionary new			at: #className put: eachPragma methodClass instanceBehavior fullName;			at: #id put: eachPragma arguments last;			yourself]</body><body package="AppeX-ServerMonitor">getDebugMode	&lt;json: 'getDebugMode'&gt;	^'debugging' -&gt; self selectedServer debugging</body><body package="AppeX-ServerMonitor">getSelectedServer	&lt;json: 'get-selected-server'&gt;	^ #selectedServer -&gt; serverName</body><body package="AppeX-ServerMonitor">handleAddServer	&lt;jsonStream: 'handle-add-server'&gt;	| newServer options serverClass id |	options := self currentRequestArguments.	serverClass := (options at: #className) asQualifiedReference valueOrDo: [ Server ].	id := options at: #id.	newServer := serverClass id: id.	serverName := newServer id.	"Line below is needed because serverName in handleSelectServer will already be requestedServer, so register will not happen there"	self registerInterestInListenersAndRespondersForServer: newServer.	^ self announceServersChanged: #ServerAdded -&gt; serverName.</body><body package="AppeX-ServerMonitor">handleCreateServer	&lt;jsonStream: 'handle-create-server'&gt;	| newServer options |		options := self currentRequestArguments.	newServer := Server id: (options at: #serverName).	"register interest here because handleSelectServer guard clause will prevent registering interest for a newly created server."	self registerInterestInListenersAndRespondersForServer: newServer.  	serverName := newServer id.	^self announceServersChanged: #ServerCreated -&gt; serverName</body><body package="AppeX-ServerMonitor">handleRemoveServer	&lt;jsonStream: 'handle-remove-server'&gt;	| oldServer options secondsDelay serverToStop duration|	options := self currentRequestArguments.	serverToStop := self selectedServer. "this will be the same as options at: #serverToRemove."	secondsDelay := (options at: #secondsDelay ifAbsent: [0]) asNumber.	secondsDelay &gt; 0 		ifTrue: [			duration :=  Duration fromSeconds: secondsDelay.			]		ifFalse:[duration := nil.  "hard stop"].			serverToStop stop: duration. 	serverToStop	release. "is this redundant?"	oldServer := serverName.	serverName := nil.	^self announceServersChanged: #ServerRemoved -&gt; oldServer</body><body package="AppeX-ServerMonitor">handleSelectServer	&lt;jsonStream: 'handle-select-server'&gt;	| requestedServer |	requestedServer := self currentRequestArguments.	requestedServer isEmpty ifTrue: [ requestedServer := nil ].	"method can be called when not selecting a new server, and still must return the correct server status"	serverName = requestedServer ifTrue: [ ^self serverStatusDataFor: #ServerSelected -&gt; serverName ].	self selectedServer ifNotNil: [ :oldServer | oldServer unsubscribe: self ].	(serverName := requestedServer) ifNil: [ ^Dictionary new ].	self registerInterestInListenersAndRespondersForServer: self selectedServer.	^self handleUpdateStats</body><body package="AppeX-ServerMonitor">handleUpdateStats	&lt;jsonStream: 'handle-update-stats'&gt;	self selectedServer ifNil: [ ^ Dictionary new ].	self selectedStats ifNotNil: [ :stats |		stats			monitorResponses;			updateDataCheckingElapsedTime: false].		^self serverStatusDataFor: #ServerSelected -&gt; serverName</body><body package="AppeX-ServerMonitor">toggleServerDebugging	&lt;json: 'toggleServerDebugging'&gt;	| selected |	(selected := self selectedServer) debug: (selected debugging not).	self announceServersChanged: #ServerChanged -&gt; selected id.	^ #debugging -&gt; selected debugging</body><body package="AppeX-ServerMonitor">toggleServerRunning	&lt;json: 'toggleServerRunning'&gt;	| selected |	selected := self selectedServer.	selected isRunning ifTrue: [ selected stop ] ifFalse: [ selected start ].	^ #running -&gt; selected isRunning</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services - responder</category><body package="AppeX-ServerMonitor">getAvailableResponders	&lt;jsonStream: 'get-available-responders'&gt;	^ self getAvailableResponderPragmas collect: [ :eachPragma |		Dictionary new			at: #className put: eachPragma methodClass instanceBehavior fullName;			at: #path put: eachPragma arguments last;			yourself]</body><body package="AppeX-ServerMonitor">getServerResponders	&lt;jsonStream: 'get-server-responders'&gt;	self selectedServer ifNil: [ ^#() ].	^self selectedServer responders		collect: [:eachResponder | self responderDataFor: eachResponder ]</body><body package="AppeX-ServerMonitor">handleAddResponder	&lt;jsonStream: 'handle-add-responder'&gt;	| data pragma responder |	data := self currentRequestArguments.	pragma := self getAvailableResponderPragmas		detect: [ :eachPragma | eachPragma arguments last = (data at: #path) ]		ifNone: [ ^ nil ].	responder := pragma methodClass instanceBehavior		addResponderTo: self selectedServer		from: pragma.	^ self responderDataFor: responder</body><body package="AppeX-ServerMonitor">handleCreateResponder	&lt;jsonStream: 'handle-create-responder'&gt;	| arguments newPath responder selectedServer responderClass |	arguments := self currentRequestArguments.	newPath := arguments at: #path.	selectedServer := self selectedServer.	responderClass := (arguments at: #class) asQualifiedReference valueOrDo: [ HttpResponder ].	responder := responderClass server: selectedServer path: newPath.	selectedServer addResponder: responder.	^ self responderDataFor: responder.</body><body package="AppeX-ServerMonitor">handleRemoveResponder	&lt;json: 'handle-remove-responder'&gt;	| oldPath  selectedServer |	oldPath := self currentRequestArguments at: #path.	selectedServer := self selectedServer.	selectedServer responders		detect: [ :responder | responder path = oldPath ]		ifFound: [ :responder |			responder release.			^ #responderRemoved -&gt; responder ].	^ #error -&gt; ('Responder ', oldPath, ' not found')</body><body package="AppeX-ServerMonitor">handleUpdateResponderList	&lt;json: 'handle-update-responder-list'&gt;	self selectedServer updateResponderList: self currentRequestArguments.	self announceServersChanged: #ServerChanged -&gt; self selectedServer id.	^ 'OK'</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services - listener</category><body package="AppeX-ServerMonitor">getListenerConnections	&lt;jsonStream: 'get/listenerConnections'&gt;	^self selectedServer listeners		collect: [:listener | listener connectionCount printString]</body><body package="AppeX-ServerMonitor">getListenerSettings	" Update static settings"	&lt;jsonStream: 'get-listener-settings'&gt;	| listeners |	self selectedServer ifNil: [ ^ #() ].	listeners := self selectedServer listeners ifNil: [ ^ #() ].	^ listeners collect: [:listener | self listenerSettingsFor: listener]</body><body package="AppeX-ServerMonitor">handleAddListener	&lt;json: 'handle-add-listener'&gt;	| arguments selectedServer listener |	arguments := self currentRequestArguments.	selectedServer := self selectedServer. 	listener := selectedServer		addListener: (arguments at: #address)		port: (arguments at: #port)		connection: HttpConnection		onError: [ ^ #error -&gt; true ].	listener reuseAddress: (arguments at: #reuseAddress).	^ #listenerAdded -&gt; listener hostAndPortString</body><body package="AppeX-ServerMonitor">handleListenerStartStop	&lt;json: 'handle-listener-start-stop'&gt;	| index listener |	index := self currentRequestArguments first asNumber + 1.	[listener := self selectedServer listeners at: index] on: Error		do: [:ex | ^'not found'].	listener isRunning ifTrue: [ listener stop ] ifFalse: [ listener start ].	^index printString -&gt; listener isRunning</body><body package="AppeX-ServerMonitor">handleRemoveListener	&lt;json: 'handle-remove-listener'&gt;	| index |	index := self currentRequestArguments first + 1.	( self selectedServer listeners at: index ) release.	^ #removedListener -&gt; (index - 1)</body><body package="AppeX-ServerMonitor">updateServerListenerSettings	&lt;plainText: 'updateServerListenerSettings'&gt;	| args listener |	args := self currentRequestArguments.	[listener := self selectedServer listeners at: args first asNumber + 1]		on: Error		do: [:ex | ^'Error:', ex description].	args last keysAndValuesDo: 			[:key :value |			self				setListener: listener				option: key asString				to: value asNumber].	^ 'OK'</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services</category><body package="AppeX-ServerMonitor">ping	&lt;plainText: 'ping'&gt;	^'pong'</body></methods><methods><class-id>AppeX.ServerMonitor</class-id> <category>services - logging</category><body package="AppeX-ServerMonitor">applyLogOptions	&lt;jsonStream: 'applyLogOptions'&gt;	|   aLoggerClass aLogger aDictionary aServer options  logName  actionSymbol aDuration  |	aServer := self selectedServer.	options := self currentRequestArguments.	logName :=  options at: #logName ifPresent: [ :lg | lg asSymbol ].	options at: #frequency ifPresent: [ :frequency | aDuration := Duration minutes: frequency asNumber ].	options at: #action ifPresent: [:action | actionSymbol := action asSymbol].	aDictionary := Dictionary new.	aDictionary at: #action put: actionSymbol.	"strip off any directory information"	aDictionary at: #filename put: (options at: #fileName ifPresent: [ :fn | fn asFilename tail asFilename]).	aDictionary at: #shouldStop put: (options at: #shouldStop ifAbsent: [false]).	aDictionary at: #frequency put: aDuration.	aLoggerClass :=  StreamLogger loggers		detect: [ :eLoggerClass | eLoggerClass name = logName asSymbol] 		ifNone: [ nil ]. "should not happen"	"refer to LogDialog initializeAspects: aServer"	aLogger :=  aServer logs 		detect: [ :eLogger | eLogger class name = logName ] 		ifNone: [ aLoggerClass log: aServer ]. 	aLoggerClass updateLogger: aLogger from: aDictionary for: aServer.    	^self announceServersChanged: #ServerChanged -&gt; aServer id.</body><body package="AppeX-ServerMonitor">getLogsInfo	&lt;jsonStream: 'get-logs-info'&gt;	^ self logsInfoForServer: self selectedServer</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>configuration</category><body package="AppeX-ServerMonitor">configureResponder: aResponder server: aServer	"	When @aResponder has been removed from its server, all monitoring should stop and the stats flushed.	"	&lt;server: 'ServerMonitor' path: '/'&gt;	aServer		when: ResponderAdded		do: [ :announcement |			announcement responder == aResponder ifTrue: [				self updateServerStats ]].	aServer		when: ResponderRemoved		do: [ :announcement |			announcement responder == aResponder ifTrue: [				aResponder release ] ]</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>services</category><body package="AppeX-ServerMonitor">getHelpFile	&lt;file: 'getHelpFile'&gt;		| resp aFileName|	aFileName := (('$(VISUALWORKS)' asLogicalFileSpecification) / 'doc' / 'WebAppDevGuide.pdf') asAbsoluteFilename.	resp := self currentResponse.	(resp contentDisposition: 'inline')  fileName: aFileName tail.		^aFileName</body><body package="AppeX-ServerMonitor">getMatchingApplicationServerClasses	"	This request handler is somewhat different than others.	In ServerMonitor, we use jQuery and jQueryUI to build the content on the client.	For finding responder classes, a jQueryUI autocomplete widget is used.	It formats the request data in a certain way (use 'term' key in the query),	and it expects certain format (an array of strings, or an array of objects with 'label' and 'value' properties.	See http://api.jqueryui.com/autocomplete/	"	&lt;GET&gt;	&lt;jsonStream: 'get/matchingApplicationServerClasses'&gt;	^ self		subclassNamesOf: Application		matching: ( self currentRequestDataAt: 'term' ifAbsent: [ '*' ])</body><body package="AppeX-ServerMonitor">getMatchingResponderClasses	"	This request handler is somewhat different than others.	In ServerMonitor, we use jQuery and jQueryUI to build the content on the client.	For finding responder classes, a jQueryUI autocomplete widget is used.	It formats the request data in a certain way (use 'term' key in the query),	and it expects certain format (an array of strings, or an array of objects with 'label' and 'value' properties.	See http://api.jqueryui.com/autocomplete/	"	&lt;GET&gt;	&lt;jsonStream: 'get/matchingResponderClasses'&gt;	^ self		subclassNamesOf: Responder		matching: ( self currentRequestDataAt: 'term' ifAbsent: [ '*' ])</body><body package="AppeX-ServerMonitor">getServerNames	&lt;jsonStream: 'get-server-names'&gt;	^(SiouX.Server registry keys sorted) copyWithout: self name asString</body><body package="AppeX-ServerMonitor">getSettingHelp	&lt;plainText: 'get/settingHelp'&gt;	^(self settingParameterHelpFor: self currentRequestArguments first) asString</body><body package="AppeX-ServerMonitor">quitImage	&lt;plainText: 'quitImage'&gt;		|quitImageHTML|	"RuntimeSystem current isRuntime ifFalse:  [^'Quit Image received but not quitting because system is not Runtime']."	[(Delay forSeconds: 1) wait. ObjectMemory quit] fork.		quitImageHTML := '&lt;html&gt;&lt;style&gt;body { 	background: #FFFFCC;	font-family: Arial, Helvetica, MS Sans Serif;	font-size: 85%;	margin: 1em 1em 1em 1em;	border: none 0;	padding: 0 1em 0 1em;}.error {	font-size: 120%;	font-weight: bold;	color: #FF0000;	margin: 0;	border: none 0;	padding: 0 0 0 1em;}h2 {	padding-left: .5em;	font-weight: bold; 	font-size: 160%;  	margin-top: 1em;	margin-bottom: .3em;}&lt;/style&gt;&lt;title&gt;Terminating Web Server&lt;/title&gt;&lt;h2&gt;&lt;br&gt;The Web Server has TERMINATED.&lt;/h2&gt;&lt;br&gt;&lt;div class="error"&gt;&lt;center&gt;Goodbye.&lt;/center&gt;&lt;/div&gt;&lt;/html&gt;'.	^quitImageHTML</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>html</category><body package="AppeX-ServerMonitor">bodyDialog	&lt;body: 51&gt;	^'	&lt;div id="dialog-modal" class="hidden"&gt;&lt;/div&gt;'</body><body package="AppeX-ServerMonitor">bodyError	&lt;body: 52&gt;	^'	&lt;ul id="error-div"&gt;&lt;/ul&gt;'</body><body package="AppeX-ServerMonitor">bodyServers	&lt;body: 50&gt;	^'	&lt;ul id="servers"&gt;&lt;/ul&gt;'</body><body package="AppeX-ServerMonitor">bodyToolbar	&lt;body: 45&gt;	^'	&lt;div id="tools" class="ui-corner-all"&gt;	&lt;/div&gt;'</body><body package="AppeX-ServerMonitor">headExternalLibraries	&lt;head: 200&gt;		^self jqueryMinTags,	D3Lib</body><body package="AppeX-ServerMonitor">headJQueryCss	&lt;head: 50&gt;	^JQueryHumanityCSS</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>css</category><body package="AppeX-ServerMonitor">defaultStyle	"	The default style sheet has been split into sections, each in its separate method.	The individual methods could be linked separately from &lt;link&gt; elements because	they include the #css: pragma, but here we choose to just link them together	in a single CSS response.	"	&lt;css: 'defaultStyle.css'&gt;	^ self jqueryOverridesCss,		self stylesCommonCss,		self stylesServerCss,		self stylesListenerCss,		self stylesResponderCss,		self stylesGraphCss,		self stylesLogDialogCss</body><body package="AppeX-ServerMonitor">jqueryOverridesCss	&lt;css: 'css/jquery-overrides.css'&gt;	^ '.ui-accordion-content {	font-size: 12px;}.ui-dialog-title {	font-size: 16px;	text-align: center;}.ui-dialog-content {	font-size: 12px;}.ui-accordion-header-active {	font-weight: bold;	text-shadow: 0px 0px 7px goldenrod;}label.ui-state-active {	font-weight: bold 	!important;	box-shadow: inset 0px 0px 10px gold;}.ui-autocomplete {    max-height: 304px;    overflow-y: auto;    /* prevent horizontal scrollbar */    overflow-x: hidden;    /* add padding to account for vertical scrollbar */    padding-right: 20px;}'</body><body package="AppeX-ServerMonitor">stylesCommonCss	&lt;css: 'css/styles-common.css'&gt;	^'body {	background-color: darkgray;}button {//	color: darkblue;	cursor: pointer;	margin: 2px;	padding: 0.2em 1em;	background-color: rgba(127,127,127,0.15);	border: dotted thin transparent;	border-radius: 4px;}button:hover {	border-color: darkgrey;	background-color: rgba(127,127,127,0.25);	text-decoration: underline;}button.default {	background-color: rgba(127,127,127,0.4);	font-weight: bold;	}#dialog-modal-content button {	margin-left: 1.5em;	margin-right: 1.5em;}.table {	display: table;}.table-row, .table-header-row {	display: table-row;}.table-header-row {	font-weight: bold;}.table-cell {	display: table-cell;	padding: 0.3em;}.inset {	padding: 20px;}.float-left {	float: left;}.float-right {	float: right;}.clear-float {	clear: both;}.slider-labels .min {	float: left;}.slider-labels .max {	float: right;}.help-button {	padding: 0.2em;}.highlight {	color: #990000;	background-color: #FFCC00 !important;}.hidden {	display: none;}.centered {	text-align: center;}.error {	background-color: lightpink;	font-weight: bold;	color: red;	border: solid thin red;	padding: 1em;}.ghost {	position: absolute;}.filler-row {	height: 1.5em;}#tools {	background-color: darkgrey;	font-size: 0.8em;}#ping-indicator {//	display: inline;}.server-monitor-tooltip {	//border: 1px solid white;    	//background: rgba(20, 20, 20, 1);    	//color: white;	font-size:0.7em }'</body><body package="AppeX-ServerMonitor">stylesGraphCss	&lt;css: 'css/styles-graph.css'&gt;	^ '..line {	fill: none;	stroke: blue;	stroke-width: 3px;}.graph .bar {	fill: steelBlue;}.graph .alert {	fill: yellow;}.graph .critical {	fill: red;}svg {font: 10px sans-serif; }.axis path, .axis line {	fill: none;	stroke: #000;	shape-rendering: crispEdges;	stroke-width: 2px;}'</body><body package="AppeX-ServerMonitor">stylesListenerCss	&lt;css: 'css/styles-listener.css'&gt;	^ '#listeners {	margin-top: 1em;//	display: table;	background-color: #f7f7f7;	padding: 0.5em;}.settingsButton {	min-width: 6em;}.listener-box {	position: relative;	background-color: white;//	border: solid lightGrey;	margin-top: 0.5em;}.listener-box .remove {	opacity: 0.5;}.listener-box .remove:hover {	opacity: 0.8;}.listener-setting-list {	width: 50%;	max-width: 35em;	float: left;	background-color: oldLace;}.listener-chart-container {	float: left;	margin-left: 1em;	width: 500px;	height: 300px;	border: dotted thin darkgrey;}.listener-setting {	position: relative;	padding: 0.3em;	margin-top: 0.25em;	min-height: 2em;}.listener-setting .label-with-input {	min-height: 2em;}.listener-setting input {	position: absolute;	right: 0.3em;}.listener-setting .setting-slider {	border: dotted thin gold;	padding: 5px 5px 2px;}.listener-setting .slider-label {	font-size: smaller;}.setting-slider .ui-slider-handle {	font-size: smaller;	font-weight: bold;	text-decoration: none;	padding-left: 0.5em;	padding-right: 0.5em;	background-image: none;	background-color: #f7f7f7;}.listeners-narrow {	width: 60em;}.listeners-wide {	width: 100%;}'</body><body package="AppeX-ServerMonitor">stylesLogDialogCss	&lt;css: 'css/styles-log-dialog.css'&gt;	^ '.log-dialog-row {	width:70%;	float:left;	border:0px solid red}.log-file-name-row {	width:93%;	border:0px solid red}.log-file-name-input {	width:60%; 	border:1px solid grey; }.log-select {	min-width:80%;	float:right;}.log-frequency-input {	width:50%; 	border:1px solid grey; 	float:right;} '</body><body package="AppeX-ServerMonitor">stylesResponderCss	&lt;css: 'css/styles-responder.css'&gt;	^ '#responders {	margin-top: 1em;	display: table;	background-color: #f7f7f7;	padding: 0.5em;}.responders-header {	font-weight: bold;}.responder-path, .responder-class, .responder-description, .responder-action {	display: table-cell;}.responder-row {	background-color: white;	border: solid lightGrey;	margin-top: 0.2em;}.responder-move {	cursor: move;}.responder-select {	text-decoration: underline;	cursor: pointer;}.responder-select:hover {	background-color: rgba(127,127,127,0.25);}.responder-row .ui-icon {	opacity: 0.5;}.responder-row .ui-icon:hover {	opacity: 0.8;}.responders-header div, .responder-row div {	padding: 0.2em 0.5em;}.responder-path {	width: 15em;}.responder-class {	width: 15em;}.responder-description {	width: 25em;}.responder-row .responder-action {	padding-left: 2px;	padding-right: 2px;}.responder-action {	color: blue;}.responder-action:hover {	cursor: pointer;	color: orange;}'</body><body package="AppeX-ServerMonitor">stylesServerCss	&lt;css: 'css/styles-server.css'&gt;	^ '#server-header {	position: relative;}#button-remove-server {	position: absolute;	right: 0px;}.server-row {	background-color: white;	border: solid lightGrey;	margin-top: 0.2em;}.server-select {	text-decoration: underline;	cursor: pointer;}.server-select:hover {	background-color: rgba(127,127,127,0.25);}'</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>logs</category><body package="AppeX-ServerMonitor">getLogForServerNameAndLogName	&lt;file: 'getLogForServerNameAndLogName'&gt;	| logName serverName aLog  aFormData aResponse aFilename |		aFormData := self currentRequestData.	serverName := (aFormData at: 'serverName') first.	logName :=  (aFormData at: 'logName') first.		aLog := self logForServerName: serverName andLogName: logName.	aLog isNil ifTrue: [^''].	aFilename := aLog file.	aFilename exists ifFalse: [ ^'' ].	aResponse := self currentResponse.	(aResponse contentDisposition: 'attachment') fileName: aFilename tail.	^aFilename</body><body package="AppeX-ServerMonitor">getStaticLogsInfo	&lt;jsonStream: 'get-static-logs-info'&gt;		| staticLogsInfo |	staticLogsInfo := Dictionary new.	staticLogsInfo at: 'allLogNames' put: self allLogNames.	StreamLogger loggers do: [:eLoggerClass | staticLogsInfo at: eLoggerClass name put: eLoggerClass helpText].	^staticLogsInfo</body></methods><methods><class-id>AppeX.ServerMonitor class</class-id> <category>user messages</category><body package="AppeX-ServerMonitor">userMessageCatalog	"self userMessageCatalog"	&lt;head: 9999.25&gt;		^ super userMessageCatalog</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - listener</category><body package="AppeX-ServerMonitor">addAcceptSettingsButton(container, listener, index) {	var self = this;	//Build update settings button	var button = $("&lt;button&gt;" + this._translate("AcceptSettings", "Accept Settings") + "&lt;/button&gt;")		.attr("id", "update-listener-a-" + index)		.addClass("float-right highlight hidden")		.appendTo(container);	button.click(function () {		var settings = self.listenersUpdatedSettings[index],			each;		if (settings) {			self.asyncMessageToServer("updateServerListenerSettings", [ index, settings ])				.onSuccess(function () {					for (each in settings) {						// ASSUMPTIONS:						// the updated settings are strings but the actual values may be numbers or other objects.						// the values' constructor know how to return a real object from a string.						// If this changes, we will have to factor this differently.						var constructor = listener[each]							? listener[each].constructor							: Number;						listener[each] = constructor(settings[each]);					}					self.listenersUpdatedSettings[index] = {};					button.hide();					$("input[listenerIndex=" + index + "]").removeClass("highlight");					$(".ui-slider-handle[listenerindex='" + index + "']").removeClass("highlight");				});		}	});}</body><body package="AppeX-ServerMonitor">addHelpDialog(container, setting ){	var self = this,		helpButton;	helpButton = $("&lt;button class='help-button'&gt;?&lt;/button&gt;");	container.append(helpButton);	helpButton.click(function () {		self.asyncMessageToServer("get/settingHelp", [ setting.name ])			.onSuccess(function (helpText) {				var div,					paragraphs;				div = $("&lt;div&gt;");				div.attr("id", "dialog");				paragraphs = helpText.split("\n");				paragraphs.forEach(function(substring) {					div.append($("&lt;p&gt;" + substring + "&lt;/p&gt;"));				});				div.dialog({					title: setting.name,					height: 400,					width:  500,					close: function(event, ui) {							div.dialog("destroy");							$(div).detach();						   }			});		});	});}</body><body package="AppeX-ServerMonitor">addInputSettings(container, setting, listenerIndex ){	var div = $("&lt;div class='listener-setting'&gt;");	var input = this.addSettingsInput(div, setting, listenerIndex );	container.append(div);}</body><body package="AppeX-ServerMonitor">addSettingsInput(container, setting, listenerIndex) {	var self = this,		inputId,		label,		input;	self.addHelpDialog(container, setting );	inputId = setting.idPrefix + "-" + listenerIndex;	// Build the label	label = $("&lt;label&gt;" + setting.name + ":&lt;/label&gt;");	label.attr("for", inputId);	container.append(label);	// Build the setting input	input = $("&lt;input&gt;");	input.attr("type", setting.type);	input.attr("id", inputId);	input.attr("listenerIndex", listenerIndex);	input.attr("setting-name", setting.name);	input.val(setting.value);	input.change( function () {		self.recordListenerChange(input, setting.name, listenerIndex);	});	container.append(input);	return input;}</body><body package="AppeX-ServerMonitor">addSliderSettings(container, setting, listenerIndex ){	var self = this;	var sliderId = setting.idPrefix + "-slider-" + listenerIndex;	var div = $("&lt;div class='listener-setting'&gt;");	var labelWithInput = $("&lt;div class='label-with-input'&gt;");	// To create the slider input, we need to replace 'slider' in the setting.type with 'text'.	// The setting may be used later, so we need to pass in a copy of the original.	var sliderSetting = {};	$t.replace(sliderSetting, setting);	sliderSetting.type = "text";	var input = this.addSettingsInput(labelWithInput, sliderSetting, listenerIndex );	input.attr("readonly", "readonly");	input.attr("hidden", "hidden");	input.val(setting.value);	div.append(labelWithInput);	var sliderWrapper = $("&lt;div&gt;");	sliderWrapper.attr("id", sliderId).addClass("setting-slider");	// Build the setting slider	var slider = $("&lt;div&gt;");	var handle;	slider.slider({		value: setting.value,		min: setting.min,		max: setting.max,		slide: function(event, ui) {				var value = slider.slider("value");				input.val(value);				handle.text(value);				handle.addClass("highlight");				self.recordListenerChange(input, setting.name, listenerIndex);		}	});	handle = slider.find(".ui-slider-handle");	handle.attr("listenerindex", listenerIndex);	handle.text(setting.value);	sliderWrapper.append(slider);	var labels = $("&lt;div&gt;").addClass("slider-labels");	// Build the min label	var minLabel = $("&lt;span&gt;" + setting.min + "&lt;/span&gt;").addClass("slider-label").addClass("min");	labels.append(minLabel);	// Build the max label	var maxLabel = $("&lt;span&gt;" + setting.max + "&lt;/span&gt;").addClass("slider-label").addClass("max");	labels.append(maxLabel);	labels.append("&lt;div class='clear-float'&gt;");	sliderWrapper.append(labels);	div.append(sliderWrapper);	container.append(div);	return div;}</body><body package="AppeX-ServerMonitor">buildListenerBox(container, listener, index) {	var self = this,		box,		header,		updateListenerStatus,		runningButton,		settingsButton,		settingsWrapper,		settings,		graphWrapper;	listener.expanded = false;	box = $("&lt;div&gt;")		.addClass("listener-box listeners-narrow")		.addClass("ui-corner-all")		.attr("id",  "listener-box-" + index)		.appendTo(container);	header = $("&lt;div&gt;")		.addClass("listener-box-header")		.appendTo(box);					updateListenerStatus = function (button) {		if (listener.running) {			button				.button("option", "icons", {primary: "ui-icon-pause"})				.button("option", "label", self._translate("Running", "Running"));		} else {			button				.button("option", "icons", {primary: "ui-icon-play"})				.button("option", "label", self._translate("Paused", "Paused"));		}	};	runningButton = $("&lt;input&gt;")		.attr("id", "listener-running-checkbox-" + index)		.attr("type", "checkbox")		.prop("checked", listener.running)			.click(function () {				self.handleListenerStartStop(index)				.onSuccess(function () {					//referring directly to runningButton inside this function will not work.					var aButton = $("#listener-running-checkbox-" + index);					listener.running = !listener.running;					updateListenerStatus(aButton);				});			})		.appendTo(header);			$("&lt;label&gt;")		.attr("for", "listener-running-checkbox-" + index)		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.appendTo(header);	$("&lt;span&gt;(" + listener.name + ")&lt;/span&gt;")		.appendTo(header);	runningButton.button({text: false, label: "...", icons: {primary: "ui-icon-play"}});	updateListenerStatus(runningButton);		//Add connection count statistics Streamed in #updateStats	$("&lt;label&gt;Connections:&lt;/label&gt; ")		.css("margin-left", "2em")		.attr("for", "listener-connection-count-" + index)		.appendTo(header);	$("&lt;input&gt;")		.attr("id",  "listener-connection-count-" + index)		.attr("readonly", "readonly")		.appendTo(header);	$("&lt;span&gt;")		.addClass("float-right")		.addClass("ui-icon ui-icon-circle-close")		.addClass("listener-action remove")		.attr("title", this._translate("RemoveListener", "Remove this Listener."))		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.click(function() {			self.openRemoveListenerDialog(listener, box, index);		})		.appendTo(header);	settingsButton = $("&lt;button&gt;")		.button({text: false, icons: { primary: "ui-icon-gear", secondary: "ui-icon-triangle-1-s" }})		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", this._translate("ShowHideListenerSettingsPanel","Show/Hide the Listener Settings panel."))		.addClass("float-right")		.appendTo(header);	settingsWrapper = $("&lt;div&gt;")		.addClass("clear-float")		.css("display", "none")		.appendTo(box);	settings = self.buildListenerSettings(listener, index)		.appendTo(settingsWrapper);	graphWrapper = $("&lt;div&gt;")		.addClass("listener-chart-container")		.appendTo(settingsWrapper);	self.buildListenerChart(graphWrapper[0], listener, index);	settingsButton.click(function () {		listener.expanded = !listener.expanded;		window.setTimeout(function() {settingsButton.tooltip("close")}, 500); //have to close tooltip after the slide effect has completed		if (listener.expanded) {			box.switchClass( "listeners-narrow", "listeners-wide", 500 );			settingsWrapper.show("slide", {}, 500);			settingsButton.button( "option", "icons", { primary: "ui-icon-gear", secondary: "ui-icon-triangle-1-n" } );		} else {			settingsWrapper.hide("slide", {}, 500);			settingsButton.button( "option", "icons", { primary: "ui-icon-gear", secondary: "ui-icon-triangle-1-s" } );			box.switchClass( "listeners-wide", "listeners-narrow" );		}	});	$("&lt;div class='clear-float'&gt;")		.appendTo(box);	return box;}</body><body package="AppeX-ServerMonitor">buildListenerChart(container, listener, index) {	var self = this,		graph = listener.graph = {},		scale = graph.scale = {},		axis = graph.axis = {};	graph.listenerIndex = index;	graph.id = "connection-graph-" + index;	graph.clipId = "connection-graph-clip-" + index;	graph.pathId = "connection-graph-path-" + index;	graph.barsId = "connection-graph-bars-" + index;	graph.limitsId = "connection-graph-limits-" + index;	graph.samples = 120;	graph.sampleDelay = 1000;	// milliseconds	// Start with empty data. This may change if we cache previously retrieved data.	graph.data = [ /* 5, 4, 6, 3, 7, 2, 8, 1, 9 */ ];	var margin = graph.margin = {top: 10, right: 20, bottom: 20, left: 40};	graph.width = $(container).width() - margin.left - margin.right;	graph.height = $(container).height() - margin.top - margin.bottom;	graph.barWidth = graph.width / graph.samples - 1;	graph.getUpperConnectionLimit = function getUpperConnectionLimit() {		return $("#listener-upper-conn-limit-" + index).val();	};	scale.x = d3.scale.linear()		.domain([0, graph.samples])		.range([0, graph.width]);	scale.y = d3.scale.linear()//		.domain([ 0, 10]) // it should be settable from the server monitor		.range([graph.height, 0]);	var svg = d3.select(container).append("svg")		.attr("id", graph.id)		.attr("class", "graph")		.attr("width", graph.width + margin.left + margin.right)		.attr("height", graph.height + margin.top + margin.bottom);	svg.append("defs").append("clipPath")		.attr("id", graph.clipId)		.append("rect")		.attr("width", graph.width - 1)		.attr("height", graph.height - 1);	axis.x = svg.append("g")		.attr("class", "x axis")		.attr("transform", "translate(" + (margin.left - 1) + "," + (graph.height + margin.top) + ")")		.call(scale.x.axis = d3.svg			.axis()			.scale(scale.x)			.ticks(12)			.orient("bottom"));	axis.y = svg.append("g")		.attr("class", "y axis")		.attr("transform", "translate(" + (margin.left - 1) + "," + margin.top + ")")		.call(scale.y.axis = d3.svg			.axis()			.scale(scale.y)			.ticks(5)			.orient("left"));	graph.connectionLimits = svg.append("g")		.attr("clip-path", "url(#" + graph.clipId + ")")		.attr("transform", "translate(" + margin.left + "," + margin.top + ")")		.attr("id", graph.limitsId);	graph.bars = svg.append("g")		.attr("clip-path", "url(#" + graph.clipId + ")")		.attr("transform", "translate(" + margin.left + "," + margin.top + ")")		.attr("id", graph.barsId);	//console.log("Listener:", listener);	this.runRedraw(listener);	return svg;}</body><body package="AppeX-ServerMonitor">buildListenerSettings(listener, index) {	var self = this,		div;	div = $("&lt;div class='listener-setting-list'&gt;");	//Build input for each setting	listener.settings.forEach(function(setting) {		if(setting.type === "slider") {			self.addSliderSettings(div, setting, index );		} else {			self.addInputSettings(div, setting, index );		}		listener[setting.name] = setting.value;	});	self.addAcceptSettingsButton(div, listener, index);	div.append("&lt;div class='clear-float'&gt;");	return div;}</body><body package="AppeX-ServerMonitor">buildListeners() {	var self = this,		container,		buttons;			container = $("#listeners");	container.html("");	self.clearListeners();	self.listenersUpdatedSettings = [];	container.addClass("ui-corner-all");	$("&lt;h3&gt;" + this._translate("Listeners", "Listeners") + "&lt;/h3&gt;").appendTo(container);	buttons = $("&lt;div&gt;")		.attr("id", "listener-buttons")		.appendTo(container);	$("&lt;button&gt;")		.button({ label: this._translate("AddHTTP", "Add HTTP"), icons: { primary: "ui-icon-signal-diag" } })		.tooltip({ tooltipClass: 'server-monitor-tooltip' })		.attr("title", this._translate("addHTTPTitle", "Open a Dialog to specify an Address and Port for a new HTTP Listener."))		.click(function () {			self.openAddListenerDialog();		})		.appendTo(buttons);	this.asyncMessageToServer("get-listener-settings")		.onSuccess(function (data) {			self.listeners = data;			self.listeners.forEach(function (listener, index) {				self.buildListenerBox(container, listener, index);			});			if (self.responders) {				self.buildResponders();			}		});}</body><body package="AppeX-ServerMonitor">clearListeners() {	var self = this;	if (!this.listeners) { return; }	this.listeners.forEach(function(listener) {		self.stopRedraw(listener);	});	this.listeners = null;	return this;}</body><body package="AppeX-ServerMonitor">handleAddListener(options) {	options.reuseAddress = (options.reuseAddress === "checked");	this.handleMessageToServer("handle-add-listener", options);}</body><body package="AppeX-ServerMonitor">handleListenerStartStop(index) {	return this.asyncMessageToServer("handle-listener-start-stop", [ index ]);}</body><body package="AppeX-ServerMonitor">handleListenersChanged() {	this.buildListeners();	return this;}</body><body package="AppeX-ServerMonitor">handleRemoveListener(listener, box, index) {	this.handleMessageToServer("handle-remove-listener", [ index ]);}</body><body package="AppeX-ServerMonitor">openAddListenerDialog() {	var self = this;	this.resetModalDialog();	var table = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.attr("id", "add-listener-table")		.appendTo("#dialog-modal-content");	var row = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo(table);	$("&lt;label&gt;")		.text(this._translate("ReuseAddress", "Reuse address?"))		.attr("for", "add-listener-reuse-address")		.addClass("table-cell")		.appendTo(row);	var reuseAddress = $("&lt;input&gt;")		.attr("type", "checkbox")		.attr("checked", "checked")		.attr("id", "add-listener-reuse-address")		.addClass("table-cell")		.appendTo(row);	row = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo(table);	$("&lt;label&gt;")		.text(this._translate("address", "Address"))		.attr("for", "add-listener-address")		.addClass("table-cell")		.appendTo(row);	var address = $("&lt;input&gt;")		.attr("id", "add-listener-address")		.val("0.0.0.0")		.addClass("table-cell")		.appendTo(row);			row = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo(table);	$("&lt;label&gt;")		.text("Port")		.attr("for", "add-listener-port")		.addClass("table-cell")		.appendTo(row);	var port = $("&lt;input&gt;")		.attr("id", "add-listener-port")		.val("0000")		.addClass("table-cell")		.appendTo(row);			var buttons = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.attr("id", "add-listener-buttons")		.appendTo("#dialog-modal-content");	$("&lt;div&gt;")		.addClass("label table-cell centered")		.append($("&lt;button&gt;")			.text(this._translate("Cancel", "Cancel"))			.click(function() {				self.closeModalDialog();			})		)		.append($("&lt;button&gt;")			.text(this._translate("OK", "OK"))			.addClass("default")			.click(function  () {				var options = {					reuseAddress: reuseAddress.attr("checked"),					address: address.val(),					port: Number(port.val())				};				self.handleAddListener(options);			})		)		.appendTo(buttons);	this.openModalDialog({		title: this._translate("AddListener", "Add a listener")	});}</body><body package="AppeX-ServerMonitor">openRemoveListenerDialog(listener, box, index) {	var self = this;	this.resetModalDialog();	var widget = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.attr("id", "remove-listener-buttons")		.appendTo("#dialog-modal-content");	$("&lt;div&gt;")		.addClass("label table-cell centered")		.append($("&lt;button&gt;")			.text(this._translate("Yes", "Yes"))			.click(function () {				self.handleRemoveListener(listener, box, index);			})		)		.append($("&lt;button&gt;")			.text(this._translate("No", "No"))			.addClass("default")			.click(function () { 				self.closeModalDialog();			})		)		.appendTo(widget);	this.openModalDialog({		title: this._translate("Remove", "Remove") + " "+ listener.name + " "  + this._translate("listener", "listener") + this._translate("questionMark", "?"),		height: 100,		width: 250	});}</body><body package="AppeX-ServerMonitor">recordListenerChange(input, name, listenerIndex ){	var object = this.listenersUpdatedSettings[ listenerIndex ] || {};	object[name] = input.val();	this.listenersUpdatedSettings[ listenerIndex ] = object;	$(input).addClass("highlight");	$("#update-listener-a-" + listenerIndex).show();}</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - graphing</category><body package="AppeX-ServerMonitor">computeBarColor(low, high, value) {	var hue, 		lightness, 		range,		scaleValue;	if (value &lt; low) {		hue = [210 , 60 ]; // blue-cyan to yellow		lightness = [0.4, 0.6];		range = [ 0, low ];	} else {		hue = [ 60, 0 ]; // yellow to red 		lightness = [ 0.6, 0.5 ];		range = [ low, high ];	}	scaleValue = function(domain) {		return domain[0] + (domain[1] - domain[0]) * (value - range[0]) / (range[1] - range[0]);	};	return d3.hsl(		scaleValue(hue),		0.8,		scaleValue(lightness)	).toString();}</body><body package="AppeX-ServerMonitor">redraw(listener, scaling, counter) {	var self = this,		graph = listener.graph,		rescale,		currentHigh;	graph.data.push({		count: counter,		value: listener.connectionCount || 0	});	rescale = false,	currentHigh = d3.max(graph.data.map(function(d) { return d.value; }));	graph.lowerConnectionLimit = listener["Lower Connection Limit"];	graph.upperConnectionLimit = listener["Upper Connection Limit"];	if (graph.lowerLimits === undefined) {		graph.lowerLimits = graph.connectionLimits.append("rect")			.attr("x", 0)			.attr("y", scaling.y({value: graph.upperConnectionLimit}))			.attr("height", scaling.lowerHeight)			.attr("width", graph.width)			.style("fill", "yellow")			.style("fill-opacity", 0.25);	}	if (graph.upperLimits === undefined) {		graph.upperLimits = graph.connectionLimits.append("rect")			.attr("x", 0)			.attr("y", graph.margin.top)			.attr("height", scaling.upperHeight)			.attr("width", graph.width)			.style("fill", "red")			.style("fill-opacity", 0.25);	}	if (graph.domainHigh === undefined) { rescale = true; }	if (graph.domainHigh != currentHigh) { rescale = true; }	graph.domainHigh = currentHigh;	// Update all bars data	var bars = graph.bars.selectAll("rect")		.data(graph.data, function(d) { return d.count; });	if (rescale)  {		self.rescale(graph, bars, scaling);	}	// Add new elements	bars.enter()		.append("rect")		.attr("x", scaling.x)		.attr("y", scaling.y)		.attr("width", graph.barWidth)		.attr("height", scaling.height)		.attr("clip-path", "url(#" + graph.clipId + ")")		.attr("fill", function (d) {			return self.computeBarColor(graph.lowerConnectionLimit, graph.upperConnectionLimit, d.value);		});			if (counter &gt; graph.samples + 1) {		bars.transition()			.duration(graph.sampleDelay)			.attr("x", function(d, i) { return scaling.x(d,i - 1); })			.attr("y", scaling.y)			.attr("height", scaling.height);		graph.data.shift();	}	// Remove old bars	bars.exit().remove();}</body><body package="AppeX-ServerMonitor">rescale(graph, bars, scaling) {	var self = this;	// Update the Y-scale the domain 	// if we redraw the scale we have a part of bars with old height and the new bars start with new height	graph.scale.y.domain([		0,		Math.ceil(1.2 * graph.domainHigh)	]);	// redraw the Y axis;	graph.axis.y.transition()		.duration(graph.sampleDelay)		.ease("linear")		.call(graph.scale.y.axis);	graph.lowerLimits.transition()		.duration(graph.sampleDelay / 2)		.attr("y", scaling.y({value: graph.upperConnectionLimit}))		.attr("height", scaling.lowerHeight);	graph.upperLimits.transition()		.duration(graph.sampleDelay / 2)		.attr("y", graph.margin.top)		.attr("height", scaling.upperHeight);	bars.transition()		.duration(graph.sampleDelay / 2)		.attr("y", scaling.y)		.attr("height", scaling.height);}</body><body package="AppeX-ServerMonitor">runRedraw(listener) {	var self = this,		counter = 0,		graph = listener.graph,		scaling = {};	scaling.x = function(d, i) { return graph.scale.x(i) - graph.barWidth - 1;};	scaling.y = function(d) { return graph.scale.y(d.value); };	scaling.height = function(d, i) { return graph.height - graph.scale.y(d.value); };	scaling.lowerHeight = function() {		return Math.max(0, scaling.height({ value: graph.upperConnectionLimit - graph.lowerConnectionLimit }));	};	scaling.upperHeight = function(low, high) {		 return Math.max(0, scaling.y({value: graph.upperConnectionLimit}) - graph.margin.top);	};	graph.timer = setInterval(		function() { self.redraw(listener, scaling, ++counter); },		graph.sampleDelay	);}</body><body package="AppeX-ServerMonitor">stopRedraw(listener) {	// Stop redrawing by clearing the tick function and the interval set up in runRedraw.	var graph = listener.graph;	if (graph) {		graph.tick = function () {};		clearInterval(graph.timer);		delete graph.timer;		delete listener.graph;	}	return this;}</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - events</category><body package="AppeX-ServerMonitor">handleSessionExpired(session) {	// this is a default 'session expired' handler.	this		.clearListeners()		.closeEventChannel()		.closeServerStats()		.stopPing();	this.showSessionExpired(this.session);	return this;}</body><body package="AppeX-ServerMonitor">receivePong(data) {	if (data == "pong") {		$("#ping-indicator").addClass("ui-state-disabled", 1500);	} else {		$("#ping-indicator")			.addClass("error")			.text(this._translate("PingFailed", "Ping failed!"));	}}</body><body package="AppeX-ServerMonitor">registerInterestInListeners() {	var self = this;	this.onServerEvent(		'ListenerAdded',		function(data) {			self.handleListenersChanged(data);	});	this.onServerEvent(		'ListenerRemoved',		function(data) {			self.handleListenersChanged(data);	});	this.onServerEvent(		'ListenerStarted',		function(data) {			self.handleListenersChanged(data);	});	this.onServerEvent(		'ListenerStopped',		function(data) {			self.handleListenersChanged(data);	});	return this;}</body><body package="AppeX-ServerMonitor">registerInterestInResponderList() {	var self = this;	this.onServerEvent(		'ResponderAdded',		function(data) {			self.handleResponderAdded(data);	});	this.onServerEvent(		'ResponderRemoved',		function(data) {			self.handleResponderRemoved(data);	});	return this;}</body><body package="AppeX-ServerMonitor">registerInterestInServerStats() {	var self = this;	this.onServerEvent(		'ServerStatsChanged',		function(data) {			self.handleServerStatsChanged(data);	});	return this;}</body><body package="AppeX-ServerMonitor">registerInterestInServers() {	var self = this;	this.onServerEvent(		'ServerCreated',		function(data) {			self.buildServers(data);		}	);	this.onServerEvent(		'ServerAdded',		function(data) {			self.buildServers(data);		}	);	this.onServerEvent(		'ServerChanged',		function(data) {			self.buildServers(data);		}	);	this.onServerEvent(		'ServerRemoved',		function(data) {			self.buildServers(data);		}	);	return this;}</body><body package="AppeX-ServerMonitor">sendPing() {	var self = this;	$("#ping-indicator").removeClass(		"ui-state-disabled",		200,		function () {			self.handleMessageToServer("ping", null, null, false)  //using default callbacks would close modal dialog on success				.onSuccess(function (data) { 					self.receivePong(data); 				})				.onError(function (error) {				 	self.resetModalDialog();					self.openModalDialog({ title: self._translate("pingFailed", "ping failed") });					self.displayError (error);				});		});}</body><body package="AppeX-ServerMonitor">startPing(interval) {	if (!interval) { return null; }	var self = this;	this.pingInterval = setInterval(		function() { self.sendPing(); },		interval	);	return this.pingInterval;}</body><body package="AppeX-ServerMonitor">stopPing() {	// Cancel the pinger interval previously set in startPing().	clearInterval(this.pingInterval);	return this;}</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - responder</category><body package="AppeX-ServerMonitor">buildAddResponderDialogWithResponders(responders) {	var self = this;	this.resetModalDialog();	responders.forEach(function (responder) {		$("&lt;div&gt;")			.addClass("table-row responder-row responder-select")			.addClass("ui-corner-all")			.append($("&lt;div&gt;")				.addClass("table-cell")				.text(responder.path))			.append($("&lt;div&gt;")				.addClass("table-cell")				.text(responder.className))			.click(function () {				self.handleAddResponder(responder);			})			.appendTo("#dialog-modal-content");	});	if (responders.length === 0) {		$("&lt;div&gt;")			.text(this._translate("AllRespondersPresent", "All configured responders are present. No more preconfigured responders can be added."))			.appendTo("#dialog-modal-content");	}	this.openModalDialog({		"title": this._translate("AddResponder", "Add a responder")	});}</body><body package="AppeX-ServerMonitor">buildCreateResponderButtons() {	var self = this;	var widget = $("&lt;div&gt;")		.addClass("ui-widget table-row hidden")		.attr("id", "create-responder-buttons")		.appendTo("#dialog-modal-content");	var id = "create-responder-buttons";	// create a filler cell:	$("&lt;div&gt;")		.addClass("label table-cell")		.appendTo(widget);	$("&lt;div&gt;")		.addClass("label table-cell")		.append($("&lt;button&gt;")			.text(this._translate("Cancel", "Cancel"))			.click(function () {				self.closeModalDialog();			})		)		.append($("&lt;button&gt;")			.text(this._translate("Submit", "Submit"))			.addClass("default")			.click(function () {				self.newResponder.path = $("#responder-path-entry").val();				self.handleCreateResponder(self.newResponder);			})		)		.appendTo(widget);	return this;}</body><body package="AppeX-ServerMonitor">buildCreateResponderPath() {	var widget,		id,		input;			widget = $("&lt;div&gt;")		.addClass("ui-widget table-row hidden")		.attr("id", "responder-path-entry-row")		.css("width", "100%")		.appendTo("#dialog-modal-content");	id = "responder-path-entry";	$("&lt;label&gt;")		.attr("for", id)		.addClass("label table-cell")		.text("Responder path")		.appendTo(widget);	input = $("&lt;input&gt;")		.attr("id", id)		.addClass("table-cell")		.css("width", "20em")		.val("/")		.appendTo(widget);	return this;}</body><body package="AppeX-ServerMonitor">buildCreateResponderSearch() {	var self = this,		widget,		id,		input;	widget = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.css("width", "100%")		.appendTo("#dialog-modal-content");	id = "responder-search";	$("&lt;label&gt;")		.attr("for", id)		.addClass("label table-cell")		.text(this._translate("FindResponderClass", "Find responder class"))		.appendTo(widget);	input = $("&lt;input&gt;")		.attr("id", id)		.addClass("table-cell")		.css("width", "20em")		.val("*")		.appendTo(widget);	$("#" + id)		// don't navigate away from the field on tab when selecting an item		.bind("keydown", function (event) {			if (event.keyCode === $.ui.keyCode.TAB &amp;&amp; $(this).data("ui-autocomplete").menu.active) {				event.preventDefault();			}		})		.autocomplete({			source: "get/matchingResponderClasses",			search: function () {				// custom minLength				if (this.value.length &lt; 1) {					return false;				}			},			select: function (event, ui) {				$("#responder-path-entry-row").removeClass("hidden");				var responder = self.newResponder;				$("#responder-applicationServer-entry-row").addClass("hidden");				$("#create-responder-buttons").removeClass("hidden");				responder['class'] = ui.item.value; //class is a reserved javascript word				$("#responder-path-entry").val(ui.item.path);			},			open: function(event, ui) {				var maxListHeight = $("#dialog-modal").height() - 96;            			$(this).autocomplete("widget").css({ 					 "max-height": maxListHeight                 		});        		}		})		.autocomplete("option", "appendTo", "#dialog-modal")		.focus(function () {         			$(this).autocomplete('search')		});	return this;}</body><body package="AppeX-ServerMonitor">buildResponderPathCell(responder) {	var listener,		pathCell;	listener = this.listeners &amp;&amp; this.listeners.length &gt; 0 &amp;&amp; this.listeners[0],	pathCell = $("&lt;div&gt;").addClass("responder-path");	if (listener) {		$("&lt;a&gt;")			.text(responder.path)			.attr("href", responder.siteURL)			.attr("target", "_blank")			.appendTo(pathCell);	} else {		pathCell.text(responder.path);	}	return pathCell;}</body><body package="AppeX-ServerMonitor">buildResponderRow(responder, index) {	var self = this,		row;	row = $("&lt;div&gt;")		.addClass("responder-row responder-move")		.addClass("ui-corner-all")		.attr("id", "responder-" + index);	this.buildResponderPathCell(responder)		.appendTo(row);	$("&lt;div&gt;")		.text(responder["class"])		.addClass("responder-class")		.appendTo(row);	$("&lt;div&gt;")		.html(responder.description)		.addClass("responder-description")		.appendTo(row);	$("&lt;div&gt;")		.append($("&lt;span&gt;").addClass("ui-icon ui-icon-circle-close"))		.attr("title", this._translate("RemoveResponder", "Remove the Responder."))		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.addClass("responder-action remove")		.click(function() {			self.handleRemoveResponder(responder);		})		.appendTo(row);	// Store the responder index for resorting.	row.data("responder", responder);	row.data("responder-index", index);	return row;}</body><body package="AppeX-ServerMonitor">buildResponderRows() {	var self = this,		responderDiv = $("#responder-list");			responderDiv.empty();	this.responders.forEach(function(responder, index) {		self.buildResponderRow(responder, index).appendTo(responderDiv);	});}</body><body package="AppeX-ServerMonitor">buildResponders() {	var self = this,		container,		buttons;	container = $("#responders");	this.clearResponders();	container.addClass("ui-corner-all");	$("&lt;h3&gt;Responders&lt;/h3&gt;").appendTo(container);	buttons = $("&lt;div&gt;")		.addClass("responder-buttons")		.appendTo(container);	$("&lt;button&gt;")		.button({label: this._translate("CreateResponderButtonLabel", "Create..."), icons: {primary: "ui-icon-star"}})		.attr("id", "responders-create-button")		.tooltip({tooltipClass: 'server-monitor-tooltip'})	//need to assign specifically to this button in order to programattically close later		.attr("title", this._translate("createResponderButtonTitle", "Add a Responder from a List of Responders that can be configured for this Server."))		.click(function () {			var dialog;			self.openCreateResponderDialog();			dialog = $(self.modalDialog);			dialog.on("dialogclose", function () {					 dialog.unbind("dialogclose");					})			}		)		.appendTo(buttons);	$("&lt;button&gt;")		.button({label: this._translate("AddResponderButtonLabel", "Add..."), icons: {primary: "ui-icon-tag"}})		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", this._translate("addResponderButtonTitle", "Add a Responder that has already been configured for this Server."))		.attr("id", "responders-add-button")		.click(function () {			var dialog;			self.openAddResponderDialog();			dialog = $(self.modalDialog);			dialog.on("dialogclose", function () {					 dialog.unbind("dialogclose");					})			})		.appendTo(buttons);	$("&lt;button&gt;Update&lt;/button&gt;")		.attr("id", "responders-update-button")		.addClass("float-right highlight hidden")		.click(function() { self.handleUpdateResponderList(); })		.appendTo(buttons);	$("&lt;div&gt;")		.addClass("responders-header")		.append($("&lt;div&gt;")			.addClass("responder-path")			.text(this._translate("Path","Path")))		.append($("&lt;div&gt;")			.addClass("responder-class")			.text(this._translate("Class", "Class")))		.append($("&lt;div&gt;")			.addClass("responder-description")			.text(this._translate("Description", "Description")))		.appendTo(container);	$("&lt;div&gt;")		.attr("id", "responder-list")		.addClass("table")		.sortable({			update: function(event, ui) {				$("#responders-update-button").show(500);			}		})		.appendTo(container);	this.handleMessageToServer("get-server-responders", null, null, false)		.onSuccess(function (responders) {			self.responders = responders;			self.buildResponderRows();		});}</body><body package="AppeX-ServerMonitor">clearResponders() {	if (!this.responders) { return; }	$("#responders").children().remove();	this.responders = null;}</body><body package="AppeX-ServerMonitor">getAvailableReponders(){	return this.asyncMessageToServer("get-available-responders");}</body><body package="AppeX-ServerMonitor">handleAddResponder(responder){	this.handleMessageToServer("handle-add-responder", responder);}</body><body package="AppeX-ServerMonitor">handleCreateResponder(responder) {	this.handleMessageToServer("handle-create-responder", responder)}</body><body package="AppeX-ServerMonitor">handleRemoveResponder(responder){	var self = this;	this.handleMessageToServer("handle-remove-responder", responder);}</body><body package="AppeX-ServerMonitor">handleResponderAdded(data) {	this.buildResponders();	return this;}</body><body package="AppeX-ServerMonitor">handleResponderRemoved(data) {	this.buildResponders();	return this;}</body><body package="AppeX-ServerMonitor">handleUpdateResponderList(){	var responders = [];	$("#responder-list").children().each(function (index, element) {		var row = $(element);		responders.push(row.data("responder-index") + 1);		row.data("responder-index", index);	});	$("#responders-update-button").hide();	this.handleMessageToServer("handle-update-responder-list", responders, null, false);}</body><body package="AppeX-ServerMonitor">openAddResponderDialog(){	var self = this;	this.getAvailableReponders()		.onSuccess(function (available) {					self.buildAddResponderDialogWithResponders(available);		});}</body><body package="AppeX-ServerMonitor">openCreateResponderDialog(){	this		.resetModalDialog()		.buildCreateResponderSearch()		.buildCreateResponderPath()		.buildCreateResponderButtons();	this.newResponder = {};	this.openModalDialog({		"title": this._translate("CreateResponder", "Create a new responder")	});	return this;}</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - server</category><body package="AppeX-ServerMonitor">activateServerPanel(event, ui) {	// The @ui server panel is about to be activated.	if (ui.oldPanel.length) {		$(ui.oldPanel[0]).html("");	}	if (ui.newPanel.length) {		var panel = ui.newPanel[0];		this.selectedServer = $(panel).attr("serverName");		this.updateServerPanel($(panel));	}}</body><body package="AppeX-ServerMonitor">addRemoveServerButton(container) {	var self = this,		button,		toolTipText = this._translate("removeServerToolTip", "Destroy this Server and remove it from the ServerMonitor.");	button = $("&lt;button&gt;" + this._translate("RemoveServer", "Remove this server...") + "&lt;/button&gt;")		.attr("id", "button-remove-server")		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", toolTipText)		.appendTo(container);	button.button({"icons": {"primary": "ui-icon-trash"}});	button.click(function () {		if (self.serverStatus.running) {			var dialog;			self.openRemoveServerDialog();			dialog = $(self.modalDialog);			dialog.on("dialogclose", function () {					 button.tooltip("close");  //separate out function?					 dialog.unbind("dialogclose");					});		} else {			self.handleRemoveServer();		}	});}</body><body package="AppeX-ServerMonitor">addServerDebuggingButton(container) {	var self = this,		isStarted,		labelText,		toolTipText;	isStarted = self.serverStatus.debugging;		if (isStarted) {		labelText = this._translate("StopDebugging", "Stop Debugging");		toolTipText = this._translate("stopDebuggingToolTip", "Debugging is on.  Press button to turn off.");	} else {		labelText = this._translate("StartDebugging", "Start Debugging");		toolTipText =  this._translate("startDebuggingToolTip", "Debugging is off.  Press button to turn on.");	}	var button = $("&lt;input&gt;")		.attr("type", "checkbox")		.attr("id", "server-option-debugging")		.prop("checked", isStarted)		.appendTo(container);	$("&lt;label&gt;" + labelText + "&lt;/label&gt;")		.attr("for", "server-option-debugging")		.attr("title", toolTipText)		.appendTo(container);	button.button({"icons": {"primary": "ui-icon-wrench"}});	button.click(function () {		self.asyncMessageToServer("toggleServerDebugging")			.onSuccess(function (data) {				self.serverStatus.debugging = data.debugging;			});				});}</body><body package="AppeX-ServerMonitor">addServerOptions(div) {		var options, 		header;	div.append(header = $("&lt;div id='server-header'&gt;&lt;/div&gt;"));	header.append(options = $("&lt;span id='server-options'&gt;&lt;/span&gt;"));	this.addServerRunningButton(options);	this.addServerDebuggingButton(options);	this.addLogButton(options);	options.buttonset();	options.tooltip({tooltipClass: 'server-monitor-tooltip'});	this.addRemoveServerButton(header);}</body><body package="AppeX-ServerMonitor">addServerRunningButton(container) {	var self = this,		isStarted,		labelText,		toolTipText,		iconName,		button,		buttonLabel;		isStarted = self.serverStatus.running;		if (isStarted) {		labelText = this._translate("StopServer", "Stop Server");		toolTipText = this._translate("stopServerToolTip", "Server is started.  Press button to Stop.");		iconName = "ui-icon-pause";	} else {		labelText = this._translate("StartServer", "Start Server");		toolTipText =  this._translate("startServerToolTip", "Server is stopped.  Press button to Start.");		iconName = "ui-icon-play";	}					button = $("&lt;input&gt;")		.attr("type", "checkbox")		.attr("id", "server-option-running")		.prop("checked", isStarted)		.appendTo(container);	buttonLabel = $("&lt;label&gt;" + labelText + "&lt;/label&gt;")		.attr("for", "server-option-running")		.attr("title", toolTipText)		.appendTo(container);	button.button({"icons": {"primary": iconName}});			button.click(function () {		if (self.listeners.length === 0) {			buttonLabel.removeClass('ui-state-active');				self.openAddListenerDialog(); 			self.modalDialog.dialog('option', 'title', this._translate('MustAddListener', 'You must first Add an HTTP Listener before Starting the Server: Add Listener'));			return;		}		self.asyncMessageToServer("toggleServerRunning")			.onSuccess(function (data) {				self.serverStatus.running = data.running;				if (!self.serverStatus.running) { //start failed.  Undo the toggled class.					buttonLabel.removeClass('ui-state-active');					}			});	});}</body><body package="AppeX-ServerMonitor">buildServerAccordianWithNames(serverNames) {	var self = this,		selectedIndex,		serversDiv;	serversDiv = $("#servers");	selectedIndex = serverNames.indexOf(this.selectedServer);	if (selectedIndex === -1) {		selectedIndex = 0; //select the first server		this.selectedServer = serverNames[selectedIndex]; //update	}	serverNames.forEach(function (eServerName) {		var header,			panel;		header = $("&lt;h3&gt;" + eServerName + "&lt;/h3&gt;");		serversDiv.append(header);		panel = $("&lt;div&gt;");		panel.attr("serverName", eServerName);		serversDiv.append(panel);	});	serversDiv.accordion({		collapsible:true,		heightStyle: "content",		active: selectedIndex,		beforeActivate: function(event, ui) {			self.activateServerPanel(event, ui);		},		create: function(event, ui) {			self.updateServerPanel($(ui.panel[0]));		}	});}</body><body package="AppeX-ServerMonitor">buildServerAccordianWithNames_eventData(serverNames, eventData) {	var self = this,		serversDiv,		eventDataIsForSelf;		if (eventData) {		//rebuilding, so destroy existing accordian		serversDiv = $("#servers");		serversDiv.accordion("destroy");		serversDiv.html("");		eventDataIsForSelf = eventData[this.sessionKey] === this[this.sessionKey];		if (eventDataIsForSelf) {			if (eventData.ServerAdded) {				//if this server monitor client just added a preconfigured server, then select it				this.selectedServer = eventData.ServerAdded			} else if (eventData.ServerCreated) { 				//if this server monitor client just created a new server, then select it				this.selectedServer = eventData.ServerCreated			}		}	}	if (this.selectedServer) {		this.buildServerAccordianWithNames(serverNames);	} else {		this.getSelectedServer()			.onSuccess(function (data) {				self.selectedServer = data;				self.buildServerAccordianWithNames(serverNames);			});						}}</body><body package="AppeX-ServerMonitor">buildServers(eventData) {// Build the 'servers' accordion with all its panels.// If @eventData is not null, I am refreshing the previously built accordion.// In that case, destroy the existing accordion so it can be rebuilt from scratch.	var self = this;	this.getServerNames()		.onSuccess(function (serverNames) {			self.buildServerAccordianWithNames_eventData(serverNames, eventData)	});	return this;}</body><body package="AppeX-ServerMonitor">closeServerStats() {	if (this.serverStatsSource) {		this.serverStatsSource.close();	}	this.serverStatsSource = null;	return this;}</body><body package="AppeX-ServerMonitor">getSelectedServer() {	 return this.asyncMessageToServer("get-selected-server");}</body><body package="AppeX-ServerMonitor">getServerNames() {	//return the response	 return this.asyncMessageToServer("get-server-names");}</body><body package="AppeX-ServerMonitor">handleAddServer(server){	//for adding a preconfigured server as opposed to creating a new server	this.handleMessageToServer("handle-add-server", server);}</body><body package="AppeX-ServerMonitor">handleCreateServer(options) {	//for creating a new server as opposed to adding a preconfigured server.	//return a ServerResponse	return this.handleMessageToServer("handle-create-server", options);}</body><body package="AppeX-ServerMonitor">handleRemoveServer(serverName) {	var self = this,		aServerResponse,		options = {};	options.serverToRemove = this.selectedServer;	options.secondsDelay = $('#secondsDelayInput').val();	aServerResponse = self.handleMessageToServer("handle-remove-server", options);	aServerResponse.onSuccess(		function () {			self.openServerRemovedDialog(aServerResponse.object.ServerRemoved)		}	)}</body><body package="AppeX-ServerMonitor">handleSelectServer(serverName) {	//return a ServerResponse	return this.handleMessageToServer("handle-select-server", this.selectedServer, null, false);}</body><body package="AppeX-ServerMonitor">handleServerStatsChanged(data) {	$t.debug(data);	this.updateStats(data);}</body><body package="AppeX-ServerMonitor">handleUpdateStats(){	//return "this" for chaining purposes	this.handleMessageToServer("handle-update-stats", null, null, false);	return this;}</body><body package="AppeX-ServerMonitor">openRemoveServerDialog() {	var self = this;	this.resetModalDialog();		// Filler row: 	$("&lt;div&gt;")		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	$("&lt;div&gt;")		.addClass("ui-widget table-row")		.text("Shutdown the server "  + self.selectedServer)		.appendTo("#dialog-modal-content");	// Filler row: 	$("&lt;div&gt;")		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	var secondsDiv = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.text("in ")		.appendTo("#dialog-modal-content");			$("&lt;input type='number' id='secondsDelayInput' value=0 min=0&gt;")		.appendTo(secondsDiv);			$("&lt;text&gt;")		.text(" " + this._translate("seconds" + "seconds"))		.appendTo(secondsDiv);	// Filler row: 	$("&lt;div&gt;")		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	var widget = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.attr("id", "remove-server-buttons")		.appendTo("#dialog-modal-content");	$("&lt;div&gt;")		.addClass("label table-cell float-left")		.append($("&lt;button&gt;")			.text(this._translate("Help", "Help"))			.click(function () {				self.openRemoveServerHelpDialog(); 			})		)		.append($("&lt;button&gt;")			.text(this._translate("Shutdown", "Shutdown"))			.click(function () {				self.handleRemoveServer();				self.closeModalDialog(); 			})		)		.append($("&lt;button&gt;")			.text(this._translate("Cancel", "Cancel"))			.addClass("default")			.click(function () {				self.closeModalDialog(); 			})		)		.appendTo(widget);	this.openModalDialog({		"title": this._translate("ShutdownServer", "Shutdown Server")	});}</body><body package="AppeX-ServerMonitor">openRemoveServerHelpDialog() {	var dialog,		dialogText;			dialogText = this.removeServerHelpDialogText();		dialog = this.openHelpDialogWithText(dialogText);	return dialog;}</body><body package="AppeX-ServerMonitor">openServerRemovedDialog(serverName) {	var div;	div = $("&lt;div&gt;")		.html("&lt;h3&gt;" + this._translate("ServerNamed", "Server named") + " " + serverName + " " + this._translate("hasBeenRemoved", "has been removed from system.") + "&lt;/h3&gt;")		.attr("id", "dialog");	div.dialog({		title: this._translate("ServerRemoved", "Server Removed"),		height: 200,		width:  500,		buttons: [{			text: this._translate("OK", "OK"),			click: function () { 				$(div).dialog("close"); 			}		}],		close: function (event, ui) {			div.dialog("destroy");			$(div).detach();		}	});}</body><body package="AppeX-ServerMonitor">removeServerHelpDialogText() {return this._translate("removeServerHelpDialogText", 'The dialog allows specifying graceful and hard shutdown. &lt;br /&gt; ' +'If you set the shutdown duration to 0 seconds it will initiate immediate stop. &lt;br /&gt;' +'Graceful shutdown may provide time to broadcast the server shutdown notification to the server clients ');}</body><body package="AppeX-ServerMonitor">updateServerPanel(div, eventData) {	var self = this;	if (!this.selectedServer) {		this.selectedServer = $(div).attr("serverName");	}	this.handleSelectServer(this.selectedServer)		.onSuccess(function (response) {			self.serverStatus = response;			//cannot addServerOptions or build info about server until serverStatus has been sent back from server			self.addServerOptions(div);			div				.append("&lt;h3&gt;" + self._translate("Statistics", "Statistics") + "&lt;/h3&gt;")				.append("&lt;div id='stats'&gt;&lt;/div&gt;")				.append("&lt;div id='listeners'&gt;&lt;/div&gt;")				.append("&lt;div id='responders'&gt;&lt;/div&gt;");			self.buildListeners();			self.buildResponders();			self.handleUpdateStats();		});}</body><body package="AppeX-ServerMonitor">updateStats(data) {	var html = "";	html += ("&lt;li&gt;" + this._translate("CompletedRequests", "Completed Requests:") + " &lt;b&gt;" + data.completed + "&lt;/b&gt;&amp;nbsp;&amp;nbsp;");	html += (this._translate("PendingRequests", "Pending Requests:") + " &lt;b&gt;" + data.pending + "&lt;/b&gt;&amp;nbsp;&amp;nbsp;");	html += (this._translate("ResponseRate", "Response Rate:") + " &lt;b&gt;" + data.rate + "&lt;/b&gt; " + this._translate("perSecond", "per second") + "&lt;br/&gt;");	html += (this._translate("TotalRequests", "Total Requests:") + " &lt;b&gt;" + data.totalRequests + "&lt;/b&gt;&amp;nbsp;&amp;nbsp;");	html += (this._translate("TotalResponses", "Total Responses:") + " &lt;b&gt;" + data.totalResponses + "&lt;/b&gt;&lt;/li&gt;");	$("#stats").html(html);	//Update all listeners connection count	var connections = $('input[ id|="listener-connection-count" ]');	var i, eachCount;	for(i = 0; i &lt; data.listenerConnectionCount.length; i++ ) {		eachCount = data.listenerConnectionCount[i];			if (connections[i]) { //connections does not always match data.listenerConnectionCount.length						connections[i].value = eachCount;				this.listeners[i].connectionCount = Number(eachCount);			}	}}</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - html</category><body package="AppeX-ServerMonitor">buildHtml() {	//body tooltip leads to some odd tooltip effects in the dialog, so don't use it'	this		.buildToolbar()		.buildServers()		.buildModalDialog()		.buildErrorDiv()		.registerInterestInServers()		.registerInterestInServerStats()		.registerInterestInListeners()		.registerInterestInResponderList()		.handleUpdateStats()		.startPing(60000 /* 60 seconds */);	return this;}</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - logging</category><body package="AppeX-ServerMonitor">addLogButton(container) {	var self = this,		isStarted,		labelText,		toolTipText;		isStarted = self.serverStatus.logging;	labelText = this._translate("Logs", "Logs");	toolTipText = this._translate("ConfigureLogging", "Configure logging.");	var button = $("&lt;input&gt;")		.attr("type", "checkbox")		.attr("id", "log-button")		.prop("checked", isStarted)		.appendTo(container);	$("&lt;label&gt;" + labelText + "&lt;/label&gt;")		.attr("for", "log-button")		.attr("title", toolTipText)		.appendTo(container);	button.button({"icons": {"primary": "ui-icon-note"}});	button.click(function () {		self.openLogDialog();	});}</body><body package="AppeX-ServerMonitor">allLogNames() {	return this.staticLogsInfo.allLogNames	}</body><body package="AppeX-ServerMonitor">buildAndUpdateLogDialog() {		this.buildLogDialog();		this.getLogsInfoFromServer();}</body><body package="AppeX-ServerMonitor">buildLogDialog() {	//this requires only static logs info for this.allLogNames)	var self = this, 		logSelectRow, 		logSelectValues, 		fileNameRow, 		buttonsRow, 		contentsButton, 		applyButton, 		logsInfo, 		logDialog;	logDialog = this.modalDialog;	this.resetModalDialog();	this.currentLogName = this.currentLogName || "CommonLog"; 		$("&lt;div&gt;")		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	// Combobox of Log Names row	logSelectRow = $("&lt;div&gt;")		.addClass("ui-widget table-row log-dialog-row")		.text("Log Type")		.appendTo("#dialog-modal-content");					logDialog.logSelect = $("&lt;select id='logSelect'&gt;")		.addClass("log-select")		.change(function () {			self.currentLogName = logDialog.logSelect.val(); //for reopening this dialog on the same log			self.getLogsInfoFromServer();			applyButton.prop("disabled", true);		})		.appendTo(logSelectRow);					//logSelectValues = ["ErrorLog", "StatusLog", "CommonLog" ];	logSelectValues = this.allLogNames();		$.each(logSelectValues, function(index, value) {        	logDialog.logSelect          .append($('&lt;option&gt;', { value : value })          .text(value)); 	});			logDialog.logSelect.val(self.currentLogName);			$("&lt;div&gt;")		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	// "Add to the Server" checkbox row	logDialog.addToServerRow = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo("#dialog-modal-content");	logDialog.addToServerInput = $("&lt;input&gt;")		.attr("type", "checkbox")		.attr("checked", false)		.attr("id", "add-to-server-input")		.change(function() {			applyButton.prop("disabled", false)		})		.appendTo(logDialog.addToServerRow);	$("&lt;label&gt;")		.text(this._translate("AddToServer", "Add to the Server"))		.attr("for", "add-to-server-input")		.appendTo(logDialog.addToServerRow);			// "Remove from the Server" checkbox row	logDialog.removeFromServerRow = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo("#dialog-modal-content");	logDialog.removeFromServerInput = $("&lt;input&gt;")		.attr("type", "checkbox")		.attr("checked", false)		.attr("id", "remove-from-server-input")		.change(function() {			applyButton.prop("disabled", false)		})		.appendTo(logDialog.removeFromServerRow);	$("&lt;label&gt;")		.text(this._translate("removeFromServer", "Remove from the Server"))		.attr("for", "remove-from-server-input")		.appendTo(logDialog.removeFromServerRow);			// "Start/stop logging" checkbox row	logDialog.startStopLoggingRow = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo("#dialog-modal-content");	logDialog.startStopLoggingInput = $("&lt;input&gt;")		.attr("type", "checkbox")		.attr("checked", false)		.attr("id", "start-stop-logging-input")		.change(function() {			applyButton.prop("disabled", false)		})		.appendTo(logDialog.startStopLoggingRow);	logDialog.startStopLoggingLabel = $("&lt;label&gt;")		.attr("for", "start-stop-logging-input")		.appendTo(logDialog.startStopLoggingRow);			// File name text entry  and Contents button row	$("&lt;div&gt;") 		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	fileNameRow = $("&lt;div&gt;")		.addClass("ui-widget log-file-name-row")		.appendTo("#dialog-modal-content");	$("&lt;label&gt;")		.text(this._translate("FileName", "File name"))		.attr("for", "file-name-input")		.appendTo(fileNameRow);		contentsButton = $("&lt;button&gt;")		.text("Contents")		.attr("id", "log-contents-button")		.attr("title", this._translate("Download File"))		.addClass("float-right")		.click(function () {			event.preventDefault();    			window.location.href = self.url + "getLogForServerNameAndLogName?serverName=" + self.selectedServer + "&amp;logName=" + self.currentLogName;		})		.appendTo(fileNameRow); 	logDialog.fileNameInput = $("&lt;input&gt;")		.attr("id", "file-name-input")		.addClass("log-file-name-input float-right")		.change(function() {			applyButton.prop("disabled", false)		})		.appendTo(fileNameRow);		// Frequency numeric entry row	$("&lt;div&gt;") 		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	logDialog.frequencyRow = $("&lt;div&gt;")		.addClass("ui-widget table-row log-dialog-row")		.appendTo("#dialog-modal-content");	$("&lt;label&gt;")		.text(this._translate("frequency", "Frequency (minutes)"))		.attr("for", "frequency-input")		.appendTo(logDialog.frequencyRow);		logDialog.frequencyInput = $("&lt;input type='number'&gt;")		.attr("id", "frequency-input")		.addClass("log-frequency-input")		.change(function () {			applyButton.prop("disabled", false)		})		.appendTo(logDialog.frequencyRow);	// Help, Apply, Cancel buttons row	$("&lt;div&gt;") 		.addClass("ui-widget table-row filler-row")		.appendTo("#dialog-modal-content");	buttonsRow = $("&lt;div&gt;")		.attr("id", "log-buttons")		.appendTo("#dialog-modal-content");				applyButton = $("&lt;button&gt;")		.text(this._translate("Apply", "Apply"))		.prop("disabled", true)		.click(function () {			self.logApplyButtonClicked();		});	$("&lt;div&gt;")		.append($("&lt;button&gt;")			.text(this._translate("Help"))			.click(function () {				self.openLogHelpDialog(); 			})		)		.append(applyButton)		.append($("&lt;button&gt;")			.text(this._translate("Close"))			.addClass("default")			.click(function () {				self.deleteLogDialogPropertiesFromModalDialog();				self.closeModalDialog(); 			})		)		.appendTo(buttonsRow);				//Open Log Dialog with Title	this.openModalDialog({		"title": this._translate("loggingFor", "Logging for ") + this.selectedServer,		"width": 500,		"height": 310	});	applyButton.prop("disabled", true);}</body><body package="AppeX-ServerMonitor">commonLogHelpDialogText() {/*return this.userMessage("commonLogHelpDialogText", 'This logger implements the "Common Log Format", also known as the &lt;br /&gt;  ' +'"NCSA Common log format", which is a popular text file log format used &lt;br /&gt;  ' +'by a number of web servers. The common log file format logs one line &lt;br /&gt;  ' +'for each completed request, where the line has following structure: &lt;br /&gt;  ' +  '&amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp	 &amp;nbsp &amp;nbsp	 remotehost ident authuser [date] "request"" status bytes')*/return 'This logger implements the "Common Log Format", also known as the &lt;br /&gt;  ' +'"NCSA Common log format", which is a popular text file log format used &lt;br /&gt;  ' +'by a number of web servers. The common log file format logs one line &lt;br /&gt;  ' +'for each completed request, where the line has following structure: &lt;br /&gt;  ' +  '&amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp	 &amp;nbsp &amp;nbsp	 remotehost ident authuser [date] "request"" status bytes'}</body><body package="AppeX-ServerMonitor">deleteLogDialogPropertiesFromModalDialog() {	var logDialog = this.modalDialog;		delete logDialog.startStopLoggingLabel;	delete logDialog.addToServerRow;	delete logDialog.removeFromServerRow;	delete logDialog.startStopLoggingRow;	delete logDialog.fileNameInput;	delete logDialog.frequencyRow;	delete logDialog.frequencyInput;	delete logDialog.addToServerInput;	delete logDialog.removeFromServerInput;	delete logDialog.startStopLoggingInput;	delete logDialog.logSelect;}</body><body package="AppeX-ServerMonitor">errorLogHelpDialogText() {	return this._translate("errorLogHelpDialogText", 'ErrorLog logs server errors. The error log includes error description and the error stack. ');}</body><body package="AppeX-ServerMonitor">frequencyForLogName(logName) {	//return a string representing the frequency of updating the log in minutes	var logsInfo;		logsInfo = this.serverStatus.logsInfo;	if (!this.isLogAddedForLogName(logName) ) {		return 5; //default	} 	return logsInfo[logName].frequency;}</body><body package="AppeX-ServerMonitor">getLogsInfoFromServer() {	var self = this;	this.asyncMessageToServer("get-logs-info")		.onSuccess(function (data) {			self.serverStatus.logsInfo = data;			self.updateLogDialog();		});	}</body><body package="AppeX-ServerMonitor">getStaticLogsInfoFromServer() {		return this.asyncMessageToServer("get-static-logs-info")}</body><body package="AppeX-ServerMonitor">isLogAddedForLogName(logName) {	var logsInfo;		logsInfo = this.serverStatus.logsInfo; 	return logsInfo[logName] !== undefined;}</body><body package="AppeX-ServerMonitor">isLogRunningForLogName(logName) {	var logsInfo;		logsInfo = this.serverStatus.logsInfo; 	return this.isLogAddedForLogName(logName) &amp;&amp; (logsInfo[logName].isLogging === true);}</body><body package="AppeX-ServerMonitor">logApplyButtonClicked() {	var self = this,		aServerResponse,		options = {},		aFrequency,		addToServer,		removeFromServer,		logDialog = this.modalDialog;	options.logName = logDialog.logSelect.val();	if (logDialog.frequencyInput.is(":visible")){		aFrequency= logDialog.frequencyInput.val();	}	addToServer = logDialog.addToServerInput.is(":visible") &amp;&amp; logDialog.addToServerInput.is(':checked');	removeFromServer = logDialog.removeFromServerInput.is(":visible") &amp;&amp; logDialog.removeFromServerInput.is(':checked');	if  (addToServer) {		options.action = 'add';	} else if (removeFromServer) {		options.action = 'remove';	}	if (logDialog.startStopLoggingInput.is(":visible")  &amp;&amp; logDialog.startStopLoggingInput.is(':checked') &amp;&amp; (logDialog.startStopLoggingLabel.text() === 'Stop')) {		options.shouldStop = true;	}	options.fileName = logDialog.fileNameInput.val();	if (aFrequency) {		options.frequency = aFrequency;	}	aServerResponse = self.handleMessageToServer("applyLogOptions", options, null, false);	aServerResponse		.onSuccess(function (logsInfo) {			self.serverStatus.logsInfo = logsInfo;			self.refreshLogDialog();		})		.onError(function (error) {			self.displayError (error);		});}</body><body package="AppeX-ServerMonitor">logFileNameForLogName(logName) {	if (this.isLogAddedForLogName(logName)) {		return this.serverStatus.logsInfo[logName].fileName;	} 	return logName.toLowerCase().substring(0, logName.length - 3) + "-" + this.selectedServer + ".log"; //default}</body><body package="AppeX-ServerMonitor">logHelpDialogText() {	var logTypeSpecificTextInfo,		logTypeSpecificText;		logTypeSpecificTextInfo = this.staticLogsInfo[this.currentLogName];	logTypeSpecificText = logTypeSpecificTextInfo.defaultString;	return logTypeSpecificText + '&lt;br /&gt;' + this.sharedLogHelpDialogText();}</body><body package="AppeX-ServerMonitor">openLogDialog() {	var self = this;	if (this.staticLogsInfo) {		this.buildAndUpdateLogDialog();	} else {		this.getStaticLogsInfoFromServer()			.onSuccess(function (data) { 				self.staticLogsInfo = data;				self.buildAndUpdateLogDialog();			});					}}</body><body package="AppeX-ServerMonitor">openLogHelpDialog() {	var dialog,		dialogText;			dialogText = this.logHelpDialogText();		dialog = this.openHelpDialogWithText(dialogText);	return dialog;}</body><body package="AppeX-ServerMonitor">refreshLogDialog() {	//just reopen on currentLog for now	this.openLogDialog();}</body><body package="AppeX-ServerMonitor">sharedLogHelpDialogText() {return this._translate("sharedLogHelpDialogText", 'Add to the Server - will create a log, adds it to the selected server and starts it. &lt;br /&gt; ' +'Remove from the Server - will stop the log and removes it from the selected server logs &lt;br /&gt; ' +'Start - starts the log  &lt;br /&gt; ' +'Stop - Stops the log  &lt;br /&gt; ' +'File name - allows changing the log file name, but NOT the directory  &lt;br /&gt; ');}</body><body package="AppeX-ServerMonitor">statusLogHelpDialogText() {	return this._translate("statusLogHelpDialogText", 'ServerStatusLog provides information on server activity and &lt;br /&gt;  ' +	'performance. It allows a server administrator to find out how well their &lt;br /&gt;  ' +	'server is performing. The log uses ServerStatusCollector to monitor a &lt;br /&gt;  ' +	'server for a specified time period and collect statistics and then prints &lt;br /&gt;  ' +	'the collected data as a table.&lt;br /&gt;  ' +	'Frequency - entry field allows to set the number of munites to collect &lt;br /&gt;  ' +	'the server data')}</body><body package="AppeX-ServerMonitor">updateAddRemoveServerRows() {	var isLogAdded,		logDialog;	  	logDialog = this.modalDialog;	isLogAdded = this.isLogAddedForLogName(this.currentLogName); 	if (isLogAdded) {		logDialog.addToServerRow.hide();		logDialog.removeFromServerRow.show();		logDialog.startStopLoggingRow.show();	} else {		logDialog.addToServerRow.show();		logDialog.removeFromServerRow.hide();		logDialog.startStopLoggingRow.hide();	} }</body><body package="AppeX-ServerMonitor">updateFrequency() {	var shouldShowFrequency,		frequency,		logDialog;	logDialog = this.modalDialog;	shouldShowFrequency = (this.currentLogName === 'StatusLog');	if (shouldShowFrequency) {  		frequency = this.frequencyForLogName(this.currentLogName);  		logDialog.frequencyInput.val(frequency);		logDialog.frequencyRow.show();	} else {		logDialog.frequencyRow.hide();	} }</body><body package="AppeX-ServerMonitor">updateLogContentsButton() {	var aButton,		isLogAdded;		aButton = $("#log-contents-button"); 	isLogAdded = this.isLogAddedForLogName(this.currentLogName); 	aButton.prop("disabled", !isLogAdded); }</body><body package="AppeX-ServerMonitor">updateLogDialog() {	var logDialog = this.modalDialog;	this.updateAddRemoveServerRows();	this.updateStartStopLoggingLabel();	this.updateLogFileName();	//must updateLogFileName before updateLogContentsButton	this.updateLogContentsButton();	this.updateFrequency();	logDialog.addToServerInput.attr('checked', false);	logDialog.removeFromServerInput.attr('checked', false);	logDialog.startStopLoggingInput.attr('checked', false);}</body><body package="AppeX-ServerMonitor">updateLogFileName() {	var logFileName;	 	logFileName = this.logFileNameForLogName(this.currentLogName);  	this.modalDialog.fileNameInput.val(logFileName); }</body><body package="AppeX-ServerMonitor">updateStartStopLoggingLabel() {	var isLogRunning;		 	isLogRunning = this.isLogRunningForLogName(this.currentLogName); 	if (isLogRunning) {		startStopLoggingText = this._translate("Stop", "Stop");	} else {		startStopLoggingText = this._translate("Start", "Start");	}	this.modalDialog.startStopLoggingLabel.text(startStopLoggingText); }</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - dialog</category><body package="AppeX-ServerMonitor">buildErrorDiv() {	// save reference to the jQuery wrapper.  return this for chaining.	this.errorDiv = $("#error-div");	this.errorDiv.addClass("hidden ghost error");	return this;}</body><body package="AppeX-ServerMonitor">buildModalDialog() {	// I could have built the dialog here but since it's just a simple &lt;div&gt; I included it in my HTML.	// here, simply save the jQuery wrapper for it.	this.modalDialog = $("#dialog-modal");	return this;}</body><body package="AppeX-ServerMonitor">closeModalDialog() {	$(this.modalDialog)		.dialog("close")		.dialog("destroy");	return this;}</body><body package="AppeX-ServerMonitor">displayError(error) {	//if the error occured after pressing OK in a modalDialog, display the error in the dialog.	//if not, display the error in a new div at the top of the page.	var errorDisplayDiv;	if (!this.modalDialog.hasClass('ui-dialog-content')) {		errorDisplayDiv = this.errorDiv;		errorDisplayDiv.text("");		errorDisplayDiv.css({top: '-30%', left: '30%'}); //reset position		errorDisplayDiv.show();  //might be faded out		errorDisplayDiv.animate({top: '0%'}, 1000); //move onto screen		errorDisplayDiv.fadeOut(20000); //two second fade	} else {		errorDisplayDiv = $("#dialog-modal-error");	}	errorDisplayDiv		.append($("&lt;h3&gt;")		.text(this._translate("SubmitError", "An error occurred while submitting the request:")))		.append($("&lt;p&gt;")		.text(error.status + " - " + error.statusText))		.append($("&lt;p&gt;")		.text(error.response))		.removeClass("hidden");}</body><body package="AppeX-ServerMonitor">handleMessageToServer(path, messageArguments, messageOptions, useDefaultCallbacks) {	//by default provide typical onSuccess and onError action for the modal dialog	var self = this,		response,		addCallbacks;			/* example of overriding the default callbacks	return this.dialogMessageToServer("handle-create-server", options, null, false).onSuccess(function (error) {alert('bye');}).onError(function (error) {alert('hi');}); */		//add default callbacks if not instructed otherwise	addCallbacks = (useDefaultCallbacks === undefined) || useDefaultCallbacks;	response =  this.asyncMessageToServer(path, messageArguments, messageOptions);	if (addCallbacks) {		response.onError(function (error) {			self.displayError (error);		});		response.onSuccess(function () {			//might be making the request without opening ServerMonitorClient modalDialog			if (self.modalDialog.hasClass('ui-dialog-content')) {				self.closeModalDialog();			}		});	}	return response;}</body><body package="AppeX-ServerMonitor">openHelpDialogWithText(dialogText) {	var aWidth = 500,		aHeight = 300,		dialog,		dialogContent,		dialogOptions,		widgetRow;			dialogOptions = {			modal: true,			draggable: true,			closeOnEscape: true,			minWidth: aWidth,			minHeight: aHeight,			width: Math.max(aWidth, $(window).width() / 2),			height: Math.max(aHeight, $(window).height() / 2),			title: this._translate("Help", "Help")		};	dialog = $("&lt;div&gt;")		.dialog(dialogOptions)		.html(dialogText) 		.dialog("open");			dialogContent = $("&lt;div&gt;")		.addClass("table")		.css("width", "100%")		.appendTo(dialog);		// Filler row: 	$("&lt;div&gt;")		.addClass("ui-widget table-row filler-row")		.appendTo(dialogContent);	 widgetRow = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.attr("id", "remove-server-buttons")		.appendTo(dialogContent);			$("&lt;div&gt;")		.addClass("label table-cell float-left")		.append($("&lt;button&gt;")			.text(this._translate("Close", "Close"))			.addClass("default")			.click(function () {				dialog					.dialog("close")					.dialog("destroy");						})		)		.appendTo(widgetRow);	return dialog;}</body><body package="AppeX-ServerMonitor">openModalDialog(options) {	var minWidth = options.minWidth || 500,		minHeight = options.minHeight || 300,		dialogOptions;		dialogOptions = {		"modal": true,		"draggable": true,		"closeOnEscape": true,		"minWidth": minWidth,		"minHeight": minHeight,		"width" : Math.max(minWidth, $(window).width() / 2),		"height" : Math.max(minHeight, $(window).height() / 2),		"title" : "This is a modal dialog"	};	$t.replace(dialogOptions, options);	return $(this.modalDialog)		.dialog(dialogOptions)		.dialog("open");}</body><body package="AppeX-ServerMonitor">resetModalDialog() {	$(this.modalDialog).children().remove();	$("&lt;div&gt;")		.attr("id", "dialog-modal-content")		.addClass("table")		.css("width", "100%")		.appendTo(this.modalDialog);	$("&lt;div&gt;")		.attr("id", "dialog-modal-error")		.addClass("hidden error ui-corner-all")		.appendTo(this.modalDialog);	return this;}</body></methods><methods><class-id>AppeX.ServerMonitorClient</class-id> <category>js - toolbar</category><body package="AppeX-ServerMonitor">buildToolbar() {	var self = this,		toolbar,		createServerButton,		addServerButton,		quitImageButton,		helpButton,		left,		right;	toolbar = $("#tools");	left = $("&lt;div&gt;")		.addClass("float-left")		.appendTo(toolbar);	createServerButton = $("&lt;button&gt;")		.button({label: this._translate("CreateServerLabel", "Create a Server"), icons: {primary: "ui-icon-star"}})		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", this._translate("CreateServer", "Create a Server"))		.click(function () {			var dialog;			self.openCreateServerDialog();			dialog = $(self.modalDialog);			dialog.on("dialogclose", function () {					 createServerButton.tooltip("close");  					 dialog.unbind("dialogclose");					});			})		.appendTo(left);	addServerButton = $("&lt;button&gt;")		.button({label: this._translate("AddServerLabel", "Add a preconfigured Server"), icons: {primary: "ui-icon-tag"}})		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", this._translate("AddServerTitle", "Open a Dialog listing preconfigured Servers to add to the Smalltalk Image."))		.click(function () {			self.getAvailableServers()				.onSuccess(function (available) {					var dialog;					self.openAddServerDialog(available);					dialog = $(self.modalDialog);					dialog.on("dialogclose", function () {						 addServerButton.tooltip("close"); 						 dialog.unbind("dialogclose");					});				})			})		.appendTo(left);	right = $("&lt;div&gt;")		.addClass("float-right")		.appendTo(toolbar);			quitImageButton = $("&lt;button&gt;")		.button({label: this._translate("quitImageLabel", "Quit Image"), icons: {primary: "ui-icon-signal"}, disabled: false})		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", this._translate("quitImageTitle", "Shut Down the Smalltalk Image Running The Servers"))		.click(function () {			var dialog;			self.openQuitImageDialog();			dialog = $(self.modalDialog);			dialog.on("dialogclose", function () {					 quitImageButton.tooltip("close");  //separate out function?					 dialog.unbind("dialogclose");				});		})		.appendTo(right);	$("&lt;button&gt;")		.button({label: this._translate("pingButtonLabel", "Ping"), icons: {primary: "ui-icon-signal"}, disabled: true})		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", this._translate("pingButtonTitle", "Send a Ping Request to the Server."))		.attr("id", "ping-indicator")		.appendTo(right);	helpButton = $("&lt;button&gt;")		.button({label: this._translate("Help", "Help"), icons: {primary: "ui-icon-help"}})		//.hide()		.tooltip({tooltipClass: 'server-monitor-tooltip'})		.attr("title", this._translate("helpButtonTitle", "Open the Help File in a new Browser or Tab."))		.click(function () {				//e.g in example below HTTP is bookmark in the pdf document, but E7.http is the 'nameddest'"				//var helpFileURL = self.url + "getHelpFile#E7.http"; 				var helpFileURL = self.url + "getHelpFile#E9.appexserverMonitor"; 				window.open(helpFileURL, '_blank');				helpButton.blur();  				helpButton.tooltip("close");  		})		.appendTo(right);	$("&lt;div&gt;")		.addClass("clear-float")		.appendTo(toolbar);	return this;}</body><body package="AppeX-ServerMonitor">getAvailableServers() {	return this.asyncMessageToServer("get-available-servers");}</body><body package="AppeX-ServerMonitor">openAddServerDialog(available) {	var self = this;	this.resetModalDialog();	available.forEach(function (server) {		$("&lt;div&gt;")			.addClass("table-row server-row server-select")			.addClass("ui-corner-all")			.append($("&lt;div&gt;")				.addClass("table-cell")				.text(server.id))			.click(function () {				self.handleAddServer(server); 			})			.appendTo("#dialog-modal-content");	});	if (available.length === 0) {		$("&lt;div&gt;")			.text(this._translate("AllServersPresent", "All configured servers are present.  No more preconfigured servers can be added."))			.appendTo("#dialog-modal-content");	}	this.openModalDialog({		title: this._translate("AddServer", "Add a Server"),		height: 250,		width: 250	});}</body><body package="AppeX-ServerMonitor">openCreateServerDialog() {	var self = this,		table,		row,		serverName,		buttons;	this.resetModalDialog();	table = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.attr("id", "create-server-table")		.appendTo("#dialog-modal-content");	row = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo(table);	row = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo(table);	$("&lt;label&gt;")		.text(this._translate("ServerName", "Server Name"))		.attr("for", "create-server-name")		.addClass("table-cell inset")		.appendTo(row);	serverName = $("&lt;input&gt;")		.attr("id", "create-server-name")		.addClass("table-cell")		.on('keyup input', function() {     			$("#create-server-ok-button").prop("disabled", this.value.trim().length === 0);		})			.appendTo(row);			row = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo(table);	buttons = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.attr("id", "create-server-buttons")		.appendTo("#dialog-modal-content");	$("&lt;div&gt;")		.addClass("label table-cell centered")		.append($("&lt;button&gt;")			.text(this._translate("Cancel", "Cancel"))			.click(function() {				self.closeModalDialog();			})		)		.append($("&lt;button&gt;")			.attr("id", "create-server-ok-button")			.text(this._translate("OK", "OK"))			.prop("disabled", true)				.addClass("default")			.click(function () {				var options = {					serverName: serverName.val()				};				self.handleCreateServer(options)					.onSuccess(function (response) {						self.serverStatus = response;						//select the server that has been created						self.selectedServer = response.ServerCreated;						self.closeModalDialog();					});			})		)		.appendTo(buttons);	this.openModalDialog({		title: this._translate("createServer", "Create a Server"),		height: 300,		width: 250	});}</body><body package="AppeX-ServerMonitor">openQuitImageDialog() {	var self = this,		cancelButton,		table,		row,		buttons;	this.resetModalDialog();	table = $("&lt;div&gt;")		.attr("id", "quit-image-table")		.appendTo("#dialog-modal-content");	row = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo(table);	$("&lt;div&gt;")		.attr("style", "padding: 20px")		.text(this._translate("quitImageText", "Are you sure that you want to shut down the Smalltalk Image on the server?"))		.appendTo(row);	buttons = $("&lt;div&gt;")		.addClass("ui-widget table-row")		.appendTo("#dialog-modal-content");	cancelButton = $("&lt;button&gt;")			.text(this._translate("Cancel", "Cancel"))			.addClass("default")			.click(function () {				self.closeModalDialog();			});	$("&lt;div&gt;")		.addClass("label table-cell centered")		.append($("&lt;button&gt;")			.text(this._translate("OK", "OK"))			.click(function () {				 self.handleMessageToServer("quitImage")						.onSuccess(function (response) {							//replace the server monitor client page wiith the goodbye message from the server monitor							var myWindow = window.open("", "_self");							myWindow.document.write(response);													myWindow.document.close();												});			})		)		.append(cancelButton)		.appendTo(buttons);			this.openModalDialog({		title: this._translate("QuitImage", "Quit Image"),		height: 250,		width: 250,		open: function () {  			cancelButton.focus();     		}	});}</body></methods><methods><class-id>SiouX.Server class</class-id> <category>configuration</category><body package="AppeX-ServerMonitor">serverMonitor: aServer	&lt;server: 'ServerMonitor'&gt;	aServer listenOn: 8001 for: HttpConnection</body></methods><methods><class-id>AppeX.UserMessageCatalog class</class-id> <category>configuration</category><body package="AppeX-ServerMonitor">serverMonitor_catalogsScript	&lt;library: 'AppeX.ServerMonitor_catalogsScript.js'&gt;		^self new		applicationClass: ServerMonitor;		yourself</body></methods><initialize><class-id>AppeX.ServerMonitor</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationClient</name><environment>AppeX</environment><super>AppeX.JavascriptObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>javascriptLibrary </class-inst-vars><imports></imports><category>bootstrap</category><attributes><package>AppeX-Client</package></attributes></class><class><name>Announcement</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Announcements</category><attributes><package>System-Announcements</package></attributes></class><class><name>Announcer</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subscriptionRegistry </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Model-Observables</category><attributes><package>System-Announcements</package></attributes></class><class><name>Application</name><environment>AppeX</environment><super>SiouX.HttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientSubscriptions session eventStream </inst-vars><class-inst-vars>settings requestActions subscriptionRegistry codeComposer combinedJavascriptLibrary </class-inst-vars><imports>			private Tools.Pragma			private Xtreams.*			private SiouX.*			private Protocols.*			</imports><category></category><attributes><package>AppeX-Server</package></attributes></class><class><name>Server</name><environment>SiouX</environment><super>Core.Announcer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listeners connections responders debugging id logs noResponderReply </inst-vars><class-inst-vars>logFactory noResponderReply configurationFileName importErrorsFilename </class-inst-vars><imports>			private Protocols.*			private OS.*			private XML.*			</imports><category></category><attributes><package>SiouX-Server</package></attributes></class></st-source>