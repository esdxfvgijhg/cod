<?xml version="1.0"?><st-source><!-- Name: SiouX-Net-HttpNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: HTTP server implementation using the Net framework. To employ this implementation use a subclass of NetHttpResponder. These responders will get instances of Net.HttpRequest to work with and have to create instances of Net.HttpResponse when executing them. Full capabilities of the Net framework can be exploited.Example: (uses a sample responder from the SiouX-Net-Examples package)	server := SiouX.Server id: 'Experiments'.	server addResponder: SiouX.NetHello new.	server listenOn: 8000 for: SiouX.HttpConnection.	server startOnce started the server is ready to respond to client requests.	'http://localhost:8000/hello' asURI get		server stop.	server releaseDbIdentifier: bear73DbTrace: 499631DbUsername: tkoganDbVersion: 8.3 - 2DevelopmentPrerequisites: #(#(#any 'SiouX-Server' '') #(#any 'HTTP' ''))DisregardedPrerequisites: #(#(#name 'MIME' #componentType #package) #(#name 'NetClientBase' #componentType #package) #(#name 'Xtreams-Core' #componentType #package))PackageName: SiouX-Net-HttpParcel: #('SiouX-Net-Http')PrerequisiteDescriptions: #(#(#name 'SiouX-Server' #componentType #bundle) #(#name 'HTTP' #componentType #package))PrerequisiteParcels: #(#('SiouX-Server' '') #('HTTP' ''))PrintStringCache: (8.3 - 2,tkogan)Version: 8.3 - 2Date: 1:19:07 PM July 14, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jul17.2) of July 14, 2017 on July 14, 2017 at 1:19:07 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>NetHttpResponder</name><environment>SiouX</environment><super>SiouX.Responder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>readingOptions writingOptions </inst-vars><class-inst-vars>defaultReadingOptions defaultWritingOptions </class-inst-vars><imports>			private OS.IOConstants.*			private Net.*			</imports><category></category><attributes><package>SiouX-Net-Http</package></attributes></class><comment><class-id>SiouX.NetHttpResponder</class-id><body>This class further extends the abstract responder with implementation bits that rely on Net HTTP framework. Subclasses will receive Net.HttpRequests and have to create Net.HttpResponses when executing them.Subclasses are expected to implement following methods:	acceptRequest: path method: method version: version connection: connection	executeRequest: httpRequest connection: connectionInstance Variables	readingOptions	&lt;HttpReadingOptions&gt; 	writingOptions	&lt;HttpWritingOptions&gt; Class Instance Variables	defaultReadingOptions	&lt;HttpReadingOptions&gt; 	defaultWritingOptions	&lt;HttpReadingOptions&gt; </body></comment><class><name>NetBadRequest</name><environment>SiouX</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SiouX-Net-Http</package></attributes></class><comment><class-id>SiouX.NetBadRequest</class-id><body>NetBadRequest error should be raised in case of any client error. By default the responder exception printer will return the response with 400 code (Client error).For example the error is raised when the request header exceeds the header size limit. The header size limit is defined by a listener.</body></comment><methods><class-id>SiouX.NetHttpResponder</class-id> <category>accessing</category><body package="SiouX-Net-Http">attachmentDirectory		^self readingOptions attachmentDirectory asString</body><body package="SiouX-Net-Http">attachmentDirectory: aString		self readingOptions attachmentDirectory:  aString</body><body package="SiouX-Net-Http">chunkSize		^self writingOptions chunkSize</body><body package="SiouX-Net-Http">chunkSize: aNumber		self writingOptions chunkSize: aNumber</body><body package="SiouX-Net-Http">messageBuilder	^self readingOptions newBuilder</body><body package="SiouX-Net-Http">newResponse	^HttpResponse code: '200'</body><body package="SiouX-Net-Http">readingOptions	^readingOptions ifNil: [ readingOptions := self class defaultReadingOptions ]</body><body package="SiouX-Net-Http">readingOptions: anObject	readingOptions := anObject</body><body package="SiouX-Net-Http">saveAttachmentsAsFiles		^self readingOptions saveAttachmentsAsFiles</body><body package="SiouX-Net-Http">saveAttachmentsAsFiles: aBoolean		self readingOptions saveAttachmentsAsFiles: aBoolean</body><body package="SiouX-Net-Http">shouldChunk		^self writingOptions shouldChunk</body><body package="SiouX-Net-Http">shouldChunk: aBoolean		self writingOptions shouldChunk: aBoolean</body><body package="SiouX-Net-Http">writingOptions	^writingOptions  ifNil: [ writingOptions := self class defaultWritingOptions ]</body><body package="SiouX-Net-Http">writingOptions: anObject	writingOptions := anObject</body></methods><methods><class-id>SiouX.NetHttpResponder</class-id> <category>persistence</category><body package="SiouX-Net-Http">asXmlNode	| root |	root := super asXmlNode.	self saveAttachmentsAsFiles ~= self readingOptions class saveAttachmentsAsFilesValue ifTrue: [ 		root addNode: ((XML.Element tag: 'saveAttachmentsAsFiles' ) 							addNode: ( XML.Text text: self saveAttachmentsAsFiles printString))].	self attachmentDirectory asString ~= self readingOptions class defaultAttachmentDirectoryValue ifTrue: [ 		root addNode: ((XML.Element tag: 'attachmentDirectory' ) 						addNode: ( XML.Text text: self attachmentDirectory asString))].	self shouldChunk ~= self writingOptions class shouldChunkValue ifTrue: [		root addNode: ((XML.Element tag: 'shouldChunk' ) 						addNode: ( XML.Text text: self shouldChunk printString))].	(self chunkSize ~= self writingOptions class defaultChunkSize 		and: [self chunkSize notNil ]) ifTrue: [ 		root addNode: ((XML.Element tag: 'chunkSize' ) 						addNode: ( XML.Text text: self chunkSize printString)) ].	^root</body><body package="SiouX-Net-Http">importResponderOptions:  node	| value |	(#( 'saveAttachmentsAsFiles'  'shouldChunk' ) includes: node tag type)			ifTrue: [ value := Boolean readFrom: node characterData readStream ].			'attachmentDirectory' = node tag type ifTrue: [ value := node characterData.].	'chunkSize' = node tag type ifTrue: [ value := node characterData asNumber ].	value ifNotNil: [ self perform: (node tag type, ':') asSymbol with: value ].</body></methods><methods><class-id>SiouX.NetHttpResponder</class-id> <category>services</category><body package="SiouX-Net-Http">createRequestFrom: aRequestLine	|  statusLine method version request stream |	method := aRequestLine method.	version := aRequestLine version.	request := HttpRequest new.	request body: UnparsedBody new.	statusLine := HttpRequestLine new.	statusLine 		path: aRequestLine path;		method: method;		version: version.		stream := (aRequestLine connection readStream positioning					asEncodedStreamWithEncoding: #ISO8859_1 					lineEndConvention: LineEndCRLF )				lineEndCRLF.	request 		messageLine: statusLine;		readingOptions: self readingOptions;		source: stream.	^request</body><body package="SiouX-Net-Http">sendResponse: aRequestContext	aRequestContext response writingOptions: self writingOptions.	^aRequestContext protocolVersion sendResponseFor: aRequestContext.</body></methods><methods><class-id>SiouX.NetHttpResponder class</class-id> <category>defaults</category><body package="SiouX-Net-Http">defaultExceptionPrinterValue	^[ :exception | | code |		code := (NetBadRequest handles: exception) ifTrue: [ '400' ] ifFalse: [ '500' ].			(HttpResponse code: code)			contentType: 'text/plain' charset: 'utf-8';			contents: [ :stream |				stream text.				stream nextPutAll: exception description; cr; cr.				code = '500' ifTrue: [exception initialContext reading do: [ :frame | stream print: frame; cr ]] ];			yourself ]</body><body package="SiouX-Net-Http">defaultReadingOptions	^defaultReadingOptions ifNil: [ self  defaultReadingOptionsValue ]</body><body package="SiouX-Net-Http">defaultReadingOptions: anHttpReadingOptions	defaultReadingOptions := anHttpReadingOptions</body><body package="SiouX-Net-Http">defaultReadingOptionsValue	^HttpReadingOptions new</body><body package="SiouX-Net-Http">defaultWritingOptions	^defaultWritingOptions ifNil: [self defaultWritingOptionsValue]</body><body package="SiouX-Net-Http">defaultWritingOptions: anHttpWritingOptions	defaultWritingOptions := anHttpWritingOptions</body><body package="SiouX-Net-Http">defaultWritingOptionsValue	^HttpWritingOptions new</body></methods><methods><class-id>Net.HttpBuildHandler</class-id> <category>accessing</category><body package="SiouX-Net-Http">setLineEndConvention		lineEndConvention :=  LineEndCRLF</body></methods><methods><class-id>Xtreams.ReadStream</class-id> <category>accessing</category><body package="SiouX-Net-Http">asEncodedStreamWithEncoding: aSymbol lineEndConvention: aNumber	| stream |	stream := EncodedStream on: self encodedBy: (StreamEncoder new: aSymbol).	stream lineEndConvention: aNumber.	stream encoder errorPolicy: Net.ReplaceUnsupportedCharacters new.	^stream</body></methods><methods><class-id>Xtreams.ReadStream</class-id> <category>private</category><body package="SiouX-Net-Http">binary</body></methods><methods><class-id>Xtreams.ReadStream</class-id> <category>accessing</category><body package="SiouX-Net-Http">needsFileLineEndConversion	"Test whether a wrapper stream on the receiver	may wish to do line end conversion."	^true</body></methods><methods><class-id>Xtreams.ReadStream</class-id> <category>private</category><body package="SiouX-Net-Http">next: anInteger into: aSequenceableCollection startingAt: startIndex 	[self read: anInteger into: aSequenceableCollection at: startIndex 	] on: Incomplete do: [ :ex |		IncompleteNextCountError new			parameter: ex count;			raiseSignal ].	^aSequenceableCollection</body></methods><methods><class-id>Net.HttpRequestLine</class-id> <category>accessing</category><body package="SiouX-Net-Http">path: aString	path := aString</body></methods><methods><class-id>Net.HttpRequest</class-id> <category>private</category><body package="SiouX-Net-Http">headers 	^self header fields</body><body package="SiouX-Net-Http">parseHeaders: aByteString	| builder stream |	builder := self readingOptions newBuilder.	builder setLineEndConvention.	stream := (aByteString readStream					asEncodedStreamWithEncoding: #ISO8859_1 					lineEndConvention: LineEndCRLF )				lineEndCRLF.	builder  		addHeader: (builder parser parseHeaderFrom: stream) 		toEntity: self.</body><body package="SiouX-Net-Http">prepareRequestToProcess	"Protocol version calls the method before dispatching"	self readingOptions newBuilder parser parseMessageBody: self from: source.</body><body package="SiouX-Net-Http">printStatusLineOn: aStream	requestLine printOn: aStream</body></methods><methods><class-id>Net.HttpResponse</class-id> <category>private</category><body package="SiouX-Net-Http">printStatusLineOn: aStream	statusLine printOn: aStream</body><body package="SiouX-Net-Http">signalReady	SiouX.ResponseReady signalWith: self</body><body package="SiouX-Net-Http">writeOnConnection: anHttpConnection	| stream writer |	writer := self writingOptions newWriter.	anHttpConnection continueProcessing ifFalse: [ self connection: 'close' ].	self isSuccess ifTrue: [ self date: Timestamp nowUTC ].	anHttpConnection serverHeader ifNotNil: [ :name | (self getFieldAt: 'Server') value: name ].	stream := anHttpConnection writeStream 					asEncodedStreamWithEncoding:  #ISO8859_1 					lineEndConvention: OS.IOConstants.LineEndCRLF.	writer writeMessage: self on: stream.	stream commit.	stream lineEndCRLF.	^writer bodySize</body></methods><methods><class-id>Xtreams.WriteStream</class-id> <category>accessing</category><body package="SiouX-Net-Http">asEncodedStreamWithEncoding: aSymbol lineEndConvention: aNumber	| stream |	stream := EncodedStream on: self encodedBy: (StreamEncoder new: aSymbol).	stream lineEndConvention: aNumber.	stream encoder errorPolicy: Net.ReplaceUnsupportedCharacters new.	^stream</body><body package="SiouX-Net-Http">commit	self flush</body><body package="SiouX-Net-Http">finish</body></methods><methods><class-id>Xtreams.WriteStream</class-id> <category>testing</category><body package="SiouX-Net-Http">isInternal	^false</body><body package="SiouX-Net-Http">needsFileLineEndConversion	^true</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>HttpRequestLine</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method url version prefix path useProxy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>WriteStream</name><environment>Xtreams</environment><super>Core.Object</super><private>true</private><indexed-type>none</indexed-type><inst-vars>destination </inst-vars><class-inst-vars></class-inst-vars><imports>			private Tools.BehaviorIcons			</imports><category>My Classes</category><attributes><package>Xtreams-Core</package></attributes></class><class><name>Error</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>Responder</name><environment>SiouX</environment><super>Core.Announcer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>server exceptionPrinter path requestFilters url decodedPath </inst-vars><class-inst-vars>exceptionPrinter </class-inst-vars><imports>			private OS.*			</imports><category></category><attributes><package>SiouX-Server</package></attributes></class><class><name>ReadStream</name><environment>Xtreams</environment><super>Core.Object</super><private>true</private><indexed-type>none</indexed-type><inst-vars>source </inst-vars><class-inst-vars></class-inst-vars><imports>			private Tools.BehaviorIcons			</imports><category>My Classes</category><attributes><package>Xtreams-Core</package></attributes></class><class><name>HttpRequest</name><environment>Net</environment><super>Net.HttpEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>requestLine </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>HttpBuildHandler</name><environment>Net</environment><super>Net.MimeParserHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>decompressContents decodeContents </class-inst-vars><imports>			OS.ZLib.*			</imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>HttpResponse</name><environment>Net</environment><super>Net.HttpEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statusLine </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class></st-source>