<?xml version="1.0"?><st-source><!-- Name: AppeX-GenericJavascriptComment: This package provides a framework for easily using generic JavaScript code that does not fall within the AppeX "class hierarchy" of JavaScript code (i.e. JavaScriptCode that does not subclass from JavaScriptObject).DbIdentifier: bear73DbTrace: 497252DbUsername: vdegenDbVersion: 8.3 - 3DevelopmentPrerequisites: #(#(#any 'AppeX-Support' ''))PackageName: AppeX-GenericJavascriptParcel: #('AppeX-GenericJavascript')PrerequisiteDescriptions: #(#(#name 'AppeX-Support' #componentType #package))PrerequisiteParcels: #(#('AppeX-Support' ''))PrintStringCache: (8.3 - 3,vdegen)Version: 8.3 - 3Date: 3:30:53 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:30:53 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GenericJavascript</name><environment>AppeX</environment><super>AppeX.JavascriptCode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-GenericJavascript</package></attributes></class><comment><class-id>AppeX.GenericJavascript</class-id><body>GenericJavascript can be used without AppeX Core javascript.  It is not yet supported by JSFile.</body></comment><class><name>JavascriptClosure</name><environment>AppeX</environment><super>AppeX.GenericJavascript</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-GenericJavascript</package></attributes></class><comment><class-id>AppeX.JavascriptClosure</class-id><body>JavascriptClosure subclasses are used to generate Javascript code that create closures with bound functions, or methods, but that nevertheless do not fall within the JavascriptObject hierarchy.  In order order to achieve this, and also to be JSFile compatible, these subclasses require AppeX javascript bindMethod and namespace support, and hence require the core AppeX javascript.</body></comment><methods><class-id>AppeX.GenericJavascript class</class-id> <category>javascript generating</category><body package="AppeX-GenericJavascript">writeJsCodeWith: aWriter	"Write the javascript with no enclosing function.  Comment 'markers' written to the javascript indicate where the code is coming from."		aWriter writeStartContentsOfScriptWith: self.	aWriter writeLooseJsFunctionsWith: self.	aWriter cr.	aWriter writeStartInitializeOfScriptWith: self.	aWriter writeInitializationCodeWith: self.	aWriter writeEndContentsOfScriptWith: self.</body><body package="AppeX-GenericJavascript">writeJsNamespaces: visited with: aWriter	"no-op"</body><body package="AppeX-GenericJavascript">writeJsNamespacesWith: aWriter	"no-op"</body></methods><methods><class-id>AppeX.GenericJavascript class</class-id> <category>testing</category><body package="AppeX-GenericJavascript">canMinifyFunctionName	"GenericJavascript classes are not meant to be accessed on the browser"	^false</body><body package="AppeX-GenericJavascript">isCoreClass	"	Answer a boolean indicating whether I belong to the AppeX core library.	"	^false</body></methods><methods><class-id>AppeX.JavascriptClosure class</class-id> <category>javascript generating</category><body package="AppeX-GenericJavascript">jsFunctionPattern: aSelector writer: aWriter	^'Object.defineProperty(', (aWriter javascriptNameForClass: self), '.prototype,''',	aSelector, ''',	{value: function &lt;1s&gt;,	enumerable: false, writable: true});'</body><body package="AppeX-GenericJavascript">writeJsCodeWith: aWriter	"change this to aFunctionName = function () {, so that the function can be referenced"	aWriter cr.	aWriter write: self javascriptName,' = function '.	aWriter write: self javascriptConstructorName.	aWriter write: '() {'.	aWriter writeInitializationCodeWith: self.	aWriter write: '};'.	aWriter cr.	aWriter writeJsFunctionsWith: self.</body><body package="AppeX-GenericJavascript">writeJsNamespaces: visited with: aWriter	^self writeJsNamespacesWith: aWriter</body><body package="AppeX-GenericJavascript">writeJsNamespacesWith: aWriter	| path  |	path := self environment fullyQualifiedReferenceFrom: Smalltalk.	aWriter		write: 'currentNS = window;';		cr;		write: 'aPath = "', path asString, '".split(".");';		cr;		write: 'while (aPath.length &gt; 0) {		var eachName = aPath.shift();  		if (!currentNS[eachName]) {			currentNS[eachName] = {}		} 		currentNS = currentNS[eachName];}'.</body></methods><methods><class-id>AppeX.JavascriptClosure class</class-id> <category>testing</category><body package="AppeX-GenericJavascript">canMinifyFunctionName	^true</body></methods><methods><class-id>AppeX.GenericJavascript</class-id> <category>javascript</category><body package="AppeX-GenericJavascript">initialize(){		// Javascript code included in initialize of subclasses will be executed on script load	//consider renaming this _onScriptLoad.	}</body></methods><methods><class-id>AppeX.JavascriptClosure</class-id> <category>javascript</category><body package="AppeX-GenericJavascript">initialize(){		// Javascript code that will be executed upon the creation of a new javascript object from the closure, 	//e.g. upon execution of "new MyJavascriptClosure()"  on the web client.		}</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>JavascriptCode</name><environment>AppeX</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>codeCache </class-inst-vars><imports></imports><category>bootstrap</category><attributes><package>AppeX-Support</package></attributes></class></st-source>