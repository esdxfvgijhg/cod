<?xml version="1.0"?><st-source><!-- Name: PostgreSQLEXDINotice: Copyright 2014-2016 Cincom Systems, Inc.  All rights reserved.Comment: I allow code that refers to the Postgres protocol 2.0 socket-API drivers (of VisualWorks 7.10.1 and earlier) to use the Postgres protocol 3.0 socket-API driver (of VisualWorks 8.0 and later) without needing to rewrite any connection class reference, Glorp Login or PostgreSQLEXDI prerequisite.The PostgreSQL protocol 2.0 component is available from the Cincom website:	http://www.cincomsmalltalk.com/main/services-and-support/contributed/legacypostgresIf you wish to defer driver upgrade, download the archive and expand it in your installation's /contributed directory.  It includes a parcel		/contributed/PostgreSQL/PostgreSQLEXDIwhich provides the EXDI API for calling the protocol 2.0 driver.  After you install that component, that parcel (which has the same name as me) will be found before me in your path, so will be loaded instead of me to satisfy any prerequisite:  code that prereqs PostgreSQL3EXDI and references PostgresSocketConnection or PostgresLibpqConnection will go on using the protocol 3.0 driver, but if you load code that prereqs PostgreSQLEXDI and references PostgreSQLEXDIConnection then it will use the protocol 2.0 driver.(To load me while the protocol 2.0 driver is installed, you must select me explicitly in the ParcelManager or a FileBrowser at		/obsolete/database//PostgreSQLEXDIIf you wish to make me the default load but keep the protocol 2.0 component installed, move me from /obsolete/database to /database, after which load the protocol 2.0 parcel explicitly whenever preparing an image to use protocol 2.0.)DbIdentifier: bear73DbTrace: 483777DbUsername: nrossDbVersion: 8.2 - 1DevelopmentPrerequisites: #(#(#any 'PostgreSQL3EXDI' '') #(#any 'Glorp' ''))PackageName: PostgreSQLEXDIParcel: #('PostgreSQLEXDI')ParcelName: PostgreSQLEXDIPrerequisiteDescriptions: #(#(#name 'PostgreSQL3EXDI' #componentType #package) #(#name 'Glorp' #componentType #bundle #applicability #store))PrerequisiteParcels: #(#('PostgreSQL3EXDI' ''))PrintStringCache: (8.2 - 1,nross)Version: 8.2 - 1Post-Load Block: 	[:package |Transcript cr; cr; show: '*** Mapping Postgres protocol 2.0 references to protocol 3.0. ***';	crtab; show: 'Update ''PostgreSQLEXDIConnection'' to ''PostgresSocketConnection'' in';	crtab; tab; show: '- Store repository settings';	crtab; tab; show: '- Glorp login definitions';	crtab; tab; show: '- PostgreSQL EXDI login definitions';	crtab; show: '(See the comment of the PostgreSQLEXDI parcel that just loaded).'; cr]Date: 1:09:38 PM January 29, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (jan16.4) of January 29, 2016 on January 29, 2016 at 1:09:38 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PostgreSQLEXDIConnection</name><environment>Smalltalk</environment><super>Database.PostgresSocketConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PostgreSQLEXDI</package></attributes></class><comment><class-id>PostgreSQLEXDIConnection</class-id><body>I allow code that used the Postgres protocol 2.0 socket-API driver (of VisualWorks 7.10.1 and earlier) to use the Postgres protocol 3.0 socket-API driver (of VisualWorks 8.0 and later) without needing to rewrite its connection class references.</body></comment><methods><class-id>Glorp.PostgreSQLPlatform</class-id> <category>testing</category><body package="PostgreSQLEXDI">supportsGroupWritingFor: aCommand	"The protocol 2.0 driver never supported binding but only pretended that it did to the upper-level EXDI API, reinserting the bound values as strings into an SQL stream that it then sent unbound to the server.  Thus it will bind whenever the super call allows.  If we are loaded, the 2.0 driver is not loaded and PostgreSQLEXDIConnection is being silently mapped to PostgreSocketConnection, which does handle binding.  Since this indicates a legacy, unupdated connection spec, we ignore the possibility of #supportsGroupWritingValues and simply demand no binding, which is the default)"	^(super supportsGroupWritingFor: aCommand) and: [self useBinding not]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>PostgresSocketConnection</name><environment>Database</environment><super>Database.PostgresConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>socketConnection iostream activeParameters timeout isUsingBase64 portNumber executingSession </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PostgreSQL3EXDI</package></attributes></class><class><name>PostgreSQLPlatform</name><environment>Glorp</environment><super>Glorp.PostgresPlatform</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpDatabase</package></attributes></class></st-source>