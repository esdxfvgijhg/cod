<?xml version="1.0"?><st-source><!-- Name: Xtreams-Compression-TestsNotice: The MIT LicenseCopyright 2010-2013 Cincom Systems, Martin Kobetic and Michael Lucas-SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.DbIdentifier: bear73DbTrace: 468780DbUsername: tkoganDbVersion: 8.2 - 0DevelopmentPrerequisites: #(#(#any 'Xtreams-Core' '') #(#any 'Xtreams-Compression' '') #(#any 'Xtreams-Substreams' '') #(#any 'SUnitToo' '') #(#any 'Xtreams-Core-Tests' ''))DisregardedPrerequisites: #(#(#name 'Xtreams-Support' #componentType #package))PackageName: Xtreams-Compression-TestsParcel: #('Xtreams-Compression-Tests')PrerequisiteDescriptions: #(#(#name 'Xtreams-Core' #componentType #package) #(#name 'Xtreams-Compression' #componentType #package) #(#name 'Xtreams-Substreams' #componentType #package) #(#name 'SUnitToo' #componentType #package) #(#name 'Xtreams-Core-Tests' #componentType #package))PrerequisiteParcels: #(#('Xtreams-Core' '') #('Xtreams-Compression' '') #('Xtreams-Substreams' '') #('SUnitToo' '') #('Xtreams-Core-Tests' ''))PrintStringCache: (8.2 - 0,tkogan)Version: 8.2 - 0Date: 11:27:50 AM June 16, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.3) of June 16, 2017 on June 16, 2017 at 11:27:50 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GZIPStreamTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Compression-Tests</package></attributes></class><class><name>CompressStreamTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Compression-Tests</package></attributes></class><methods><class-id>Xtreams.GZIPStreamTest</class-id> <category>tests</category><body package="Xtreams-Compression-Tests">runTestWith: largeString	| xtream  osGzip osResult xtResult |	xtream := (ByteArray new writing gzipBestCompressing encoding: #ascii) write: largeString; conclusion.	osGzip := ZLib.GZipReadStream on: xtream readStream.		[osResult := osGzip contents	] ensure: [ osGzip close ].	xtResult := xtream reading gzipCompressing rest.	self assert: osResult size = largeString size.	self assert: xtResult size = largeString size.</body><body package="Xtreams-Compression-Tests">testGZIPWriteWithOSGZipWrite	| stream |	stream := String new writeStream.	5000 timesRepeat: [ stream nextPutAll: 'abcdefghlmnoqwertyuiopasdfghjklzxcvbnm,.'].	self runTestWith: stream contents.		500000 timesRepeat: [ stream nextPutAll: 'abcdefghlmnoqwertyuiopasdfghjklzxcvbnm,.'].	self runTestWith: stream contents.		50000 timesRepeat: [ stream nextPutAll: 'abcdefghlmnoqwertyuiopasdfghjklzxcvbnm,.'].	self runTestWith: stream contents.</body><body package="Xtreams-Compression-Tests">testWriteDefalteReadInflateStitched	| data result out in buffer |	data := ByteArray new: 500.	1 to: data size do: [ :i | data at: i put: i \\ 5 ].	buffer := ElasticBuffer on: ByteArray new.	out := [ buffer writing limiting: 10 ] reading stitching gzipBestCompressing.	[	out write: data; flush.	] ensure: [ out close ].	in := [ buffer readSize &gt; 0 ifFalse: [ Incomplete zero raise]. buffer reading limiting: 10 ] reading stitching gzipCompressing.	[	result := in rest.	] ensure: [ in close ].	self assert: data = result.</body></methods><methods><class-id>Xtreams.CompressStreamTest</class-id> <category>tests</category><body package="Xtreams-Compression-Tests">testReadPastEndOfCompressedData	| data compressed decompressing overconsumed decompressed |	data := ByteArray new: 50 withAll: 42.	compressed := ByteArray new writing compressing write: data; close; terminal.	compressed := compressed, (ByteArray new: 20 withAll: 0).	decompressing := compressed reading compressing.	[	overconsumed := false.		decompressed := decompressing rest.		self assert: decompressed = data	] ensure: [ decompressing close ].</body><body package="Xtreams-Compression-Tests">testReadToTheEndOfCompressedData	| data compressed decompressing overconsumed decompressed |	data := ByteArray new: 50 withAll: 42.	compressed := ByteArray new writing compressing write: data; close; terminal.	compressed := compressed, (ByteArray new: 20 withAll: 0).	decompressing := compressed reading compressing.	[	overconsumed := false.		decompressed := decompressing read: data size.		self assert: decompressed = data	] ensure: [ decompressing close ].</body><body package="Xtreams-Compression-Tests">testWriteDefalteReadInflate	| data result out in buffer |	data := ByteArray new: 500.	1 to: data size do: [ :i | data at: i put: i \\ 5 ].	buffer := ElasticBuffer on: ByteArray new.	out := buffer writing compressing.	in := buffer reading compressing.	[	out write: data; flush.		result := in rest.		self assert: data = result.	] ensure: [ out close. in close ].</body><body package="Xtreams-Compression-Tests">testWriteDefalteReadInflateStitched	| data result out in buffer |	data := ByteArray new: 500.	1 to: data size do: [ :i | data at: i put: i \\ 5 ].	buffer := ElasticBuffer on: ByteArray new.	out := [ buffer writing limiting: 10 ] reading stitching compressing.	[	out write: data; flush.	] ensure: [ out close ].	in := [ buffer readSize &gt; 0 ifFalse: [ Incomplete zero raise]. buffer reading limiting: 10 ] reading stitching compressing.	[	result := in rest.	] ensure: [ in close ].	self assert: data = result.</body></methods><methods><class-id>Xtreams.FiniteReadingWritingTests</class-id> <category>tests - compression</category><body package="Xtreams-Compression-Tests">testWriteDeflateReadInflate	| content result |	content := 'Hello World!'.	(self output compressing encoding: #ascii)		write: content;		close.	result := (self input compressing encoding: #ascii) read: content size.	self assert: content = result.</body><body package="Xtreams-Compression-Tests">testWriteDeflateReadInflateLarge	| content result |	content := ByteArray new: 32769.	1 to: content size do: [:index | content at: index put: index \\ 256].	self output compressing write: content; close.	result := self input compressing read: content size.	self assert: content = result.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>FiniteReadingWritingTests</name><environment>Xtreams</environment><super>Xtreams.ReadingWritingTest</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class></st-source>