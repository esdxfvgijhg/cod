<?xml version="1.0"?><st-source><!-- Name: Xtreams-Core-TestsNotice: The MIT LicenseCopyright 2010-2013 Cincom Systems, Martin Kobetic and Michael Lucas-SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.DbIdentifier: bear73DbTrace: 490990DbUsername: jkottDbVersion: 8.2 - 1DevelopmentPrerequisites: #(#(#any 'SUnitToo' '') #(#any 'Xtreams-Core' '') #(#any 'Xtreams-Substreams' '') #(#any 'Xtreams-Terminals' ''))DialectVersion: VisualWorks 7.9MonticelloPrefix: XTPackageName: Xtreams-Core-TestsParcel: #('Xtreams-Core-Tests')ParcelName: Xtreams-Core-TestsPrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package) #(#name 'Xtreams-Core' #componentType #package) #(#name 'Xtreams-Substreams' #componentType #package) #(#name 'Xtreams-Terminals' #componentType #package))PrerequisiteParcels: #(#('SUnitToo' '') #('Xtreams-Core' '') #('Xtreams-Substreams' '') #('Xtreams-Terminals' ''))PrintStringCache: (8.2 - 1,jkott)Url: http://www.squeaksource.com/Xtreams/Xtreams-CoreTests-nice.5.mczVersion: 8.2 - 1Date: 11:27:50 AM June 16, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.3) of June 16, 2017 on June 16, 2017 at 11:27:50 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PositionWriteStreamTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><class><name>BufferTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>output buffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><class><name>RingBufferTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>output buffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><class><name>ReadingWritingTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>output input </inst-vars><class-inst-vars></class-inst-vars><imports>			private OS.*			SUnit.*			</imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><comment><class-id>Xtreams.ReadingWritingTest</class-id><body>Tests in this hierarchy have to be written so that they run with all kinds of terminals. Consequently they generally need to do all their writing first and then reading, so that we can run against collection streams without the assumption that the collection preserves identity as it's being grown by the write stream. Also the streams should be accessed via accessors for the same reasons.Instance Variables	output	&lt;Object&gt; undocumented	input	&lt;Object&gt; undocumented</body></comment><class><name>FiniteReadingWritingTests</name><environment>Xtreams</environment><super>Xtreams.ReadingWritingTest</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><comment><class-id>Xtreams.FiniteReadingWritingTests</class-id><body>These are tests that require a stream that can be effectively closed, i.e. not pointer or shared queue stream.</body></comment><class><name>PositionReadStreamTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><class><name>InfiniteReadingWritingTests</name><environment>Xtreams</environment><super>Xtreams.ReadingWritingTest</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.*			</imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><comment><class-id>Xtreams.InfiniteReadingWritingTests</class-id><body>These are tests specifically for those streams that cannot be effectively closed, i.e. pointer and shared queue streams.</body></comment><class><name>BufferedWriteStreamTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><class><name>ElasticBufferTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>output buffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Core-Tests</package></attributes></class><methods><class-id>Xtreams.PositionWriteStreamTest</class-id> <category>tests</category><body package="Xtreams-Core-Tests">testIncompleteCounts	self assert: ([ ([ :x | ] writing limiting: 10) positioning write: (1 to: 5); -- 8 ] on: Incomplete do: [:ex | ex count]) = 5.	self assert: ([ ([ :x | ] writing limiting: 10) positioning write: (1 to: 5); ++ 8 ] on: Incomplete do: [:ex | ex count]) = 0.	self assert: ([ ([ :x | ] writing limiting: 10) positioning write: (1 to: 5); -= 12 ] on: Incomplete do: [:ex | ex count]) = 5.	self assert: ([ ([ :x | ] writing limiting: 10) positioning write: (1 to: 5); += 12 ] on: Incomplete do: [:ex | ex count]) = 5</body></methods><methods><class-id>Xtreams.BufferTest</class-id> <category>tests</category><body package="Xtreams-Core-Tests">testClear	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer clear.	buffer write: 4 from: 'ABCD' at: 1.	buffer read: 4 into: output at: 1.	self assert: output = 'ABCD'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 8</body><body package="Xtreams-Core-Tests">testInsertInTheMiddle	| chunk |	chunk := 'hello'.	buffer write: chunk; write: chunk.	buffer writePosition: chunk size.	buffer insert: chunk.	self assert: buffer writePosition = (chunk size * 2).	self assert: buffer activeSize = (chunk size * 3)</body><body package="Xtreams-Core-Tests">testRead	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 1 into: output at: 1.	self assert: output = '1www'.	self assert: buffer readPosition = 1.	self assert: buffer readSize = 3.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 5.	buffer read: 3 into: output at: 2.	self assert: output = '1234'.	self assert: buffer readPosition = 4.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 8</body><body package="Xtreams-Core-Tests">testReadOverflow	output := 'wwwwww' copy.	buffer write: 4 from: '1234' at: 1.	self should: [buffer read: 6 into: output at: 1] raise: Incomplete.	self assert: output = '1234ww'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 8</body><body package="Xtreams-Core-Tests">testTrim	output := 'wwww' copy.	buffer write: 8 from: '12345678' at: 1.	buffer read: 2 into: output at: 1.	buffer writeSkip: -2.	buffer trim.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 4.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 0.	buffer read: 4 into: output at: 1.	self assert: output = '3456'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testWrite	buffer := Buffer on: 'xxxx' copy.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4.	buffer write: 1 from: '1234' at: 1.	self assert: buffer cache = '1xxx'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 3.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 3.	buffer write: 3 from: '1234' at: 2.	self assert: buffer cache = '1234'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteFromStream	| stream |	stream := '1234567' reading.	buffer := Buffer on: 'xxxx' copy.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4.	buffer write: 1 from: stream.	self assert: buffer cache = '1xxx'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 3.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 3.	buffer write: 3 from: stream.	self assert: buffer cache = '1234'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteFromStreamGrow	self assert: buffer cacheSize = 0.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 0.	buffer write: 4 from: '12345678' reading.	self assert: (buffer cache first: 4) = '1234'.	self assert: buffer cacheSize = 8.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testWriteGrow	self assert: buffer cacheSize = 0.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 0.	buffer write: 4 from: '1234' at: 1.	self assert: (buffer cache first: 4) = '1234'.	self assert: buffer cacheSize = 8.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testWriteObject		buffer := Buffer on: 'xxxx' copy.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4.	buffer put: $1.	self assert: buffer cache = '1xxx'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 3.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 3.	buffer put: $2; put: $3; put: $4.	self assert: buffer cache = '1234'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0.	buffer put: $5.	self assert: (buffer cache first: 5) = '12345'.	self assert: buffer cacheSize &gt;= 5.	self assert: buffer activeSize = 5.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 5.	self assert: buffer readSize = 5.</body><body package="Xtreams-Core-Tests">testWriteStream	buffer := Buffer on: 'xxxx' copy.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4.	buffer write: '1' reading.	self assert: buffer cache = '1xxx'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 3.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 3.	buffer write: '234' reading.	self assert: buffer cache = '1234'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteStreamGrow	self assert: buffer cacheSize = 0.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 0.	buffer write: '1234' reading.	self assert: (buffer cache first: 4) = '1234'.	self assert: buffer cacheSize = 8.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 4</body></methods><methods><class-id>Xtreams.BufferTest</class-id> <category>initialize-release</category><body package="Xtreams-Core-Tests">setUp		buffer := Buffer on: String new</body></methods><methods><class-id>Xtreams.RingBufferTest</class-id> <category>tests</category><body package="Xtreams-Core-Tests">testClear	| cacheSize |	buffer write: 4 from: '1234' at: 1.	cacheSize := buffer cacheSize.	buffer clear.	self assert: buffer cacheSize = cacheSize.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 0.	self assert: buffer writeSize = cacheSize</body><body package="Xtreams-Core-Tests">testInsertInTheMiddle	| chunk |	chunk := 'hello'.	buffer := RingBuffer on: (String new: chunk size * 5).	buffer write: chunk; write: chunk.	buffer writePosition: chunk size.	buffer insert: chunk.	self assert: buffer writePosition = (chunk size * 2).	self assert: buffer activeSize = (chunk size * 3)</body><body package="Xtreams-Core-Tests">testRead	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 1 into: output at: 1.	self assert: output = '1www'.	self assert: buffer readPosition = 1.	self assert: buffer readSize = 3.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 1.	buffer read: 3 into: output at: 2.	self assert: output = '1234'.	self assert: buffer readPosition = 4.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testReadOverflow	output := 'wwwwww' copy.	buffer write: 4 from: '1234' at: 1.	self should: [buffer read: 6 into: output at: 1] raise: Incomplete.	self assert: output = '1234ww'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testReadWrap	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 3 into: output at: 1.	buffer write: 3 from: 'ABC' at: 1.	output := 'wwww' copy.	buffer read: 4 into: output at: 1.	self assert: output = '4ABC'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testReadWriteFirstHalf	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 2 into: output at: 1.	self assert: output = '12ww'.	self assert: buffer cache = '1234'.	self assert: buffer readPosition = 2.	self assert: buffer readSize = 2.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 2.	buffer write: 2 from: 'AB' at: 1.	self assert: buffer cache = 'AB34'.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 4.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 0.	output := 'wwww' copy.	buffer read: 2 into: output at: 1.	self assert: output = '34ww'.	self assert: buffer readPosition = 2.	self assert: buffer readSize = 2.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 2</body><body package="Xtreams-Core-Tests">testReadWriteSecondHalf	" &lt;--- SomeData ... ReadAt ... WriteAt/DataEnd DataStart ... SomeData ---&gt; "	output := 'wwww' copy.	buffer write: 3 from: '123' at: 1.	buffer read: 3 into: output at: 1.	buffer write: 3 from: 'ABC' at: 1.	buffer read: 2 into: output at: 1.	output := 'wwww' copy.	buffer read: 1 into: output at: 1.	self assert: output = 'Cwww'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testReadWriteWrap	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 3 into: output at: 1.	self assert: output = '123w'.	self assert: buffer cache = '1234'.	self assert: buffer readPosition = 3.	self assert: buffer readSize = 1.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 3.	buffer write: 1 from: 'A' at: 1.	self assert: buffer cache = 'A234'.	self assert: buffer readPosition = 2.	self assert: buffer readSize = 2.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 2.	buffer write: 2 from: 'BC' at: 1.	self assert: buffer cache = 'ABC4'.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 4.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 0.	output := 'wwww' copy.	buffer read: 4 into: output at: 1.	self assert: output = '4ABC'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testTrim	output := 'wwww' copy.	buffer write: 3 from: '1234' at: 1.	buffer read: 1 into: output at: 1.	buffer writeSkip: -1.	buffer trim.	self assert: buffer cacheSize = 2.	self assert: buffer cache = '23'.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 2.	self assert: buffer writePosition = 2.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testTrimInsideOut	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 3 into: output at: 1.	buffer write: 2 from: 'AB' at: 1.	buffer writeSkip: -1.	buffer trim.	self assert: buffer cacheSize = 2.	self assert: buffer cache = '4B'.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 2.	self assert: buffer writePosition = 2.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWrite	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4.	buffer write: 1 from: '1234' at: 1.	self assert: buffer cache = '1xxx'.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 3.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 3.	buffer write: 3 from: '1234' at: 2.	self assert: buffer cache = '1234'.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteFromStream	buffer write: 3 from: '1234' reading.	buffer write: 2 from: 'ABCDE' reading.	self assert: buffer cache = 'B23A'.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0.	buffer write: 'abcdefghijklmnopqr' reading.	self assert: buffer cache = 'opqr'.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0.</body><body package="Xtreams-Core-Tests">testWriteObject	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4.		buffer put: $1.	self assert: buffer cache first = $1.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 3.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 3.	buffer put: $2; put: $3; put: $4.	self assert: buffer cache = '1234'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0.	buffer put: $5.	self assert: buffer cache = '5234'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.</body><body package="Xtreams-Core-Tests">testWriteOverflow0	buffer write: 1 from: '1234' at: 1.	buffer write: 4 from: 'ABCD' at: 1.	self assert: buffer cache = 'ABCD'.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteOverflow1	buffer write: 1 from: '1234' at: 1.	buffer write: 5 from: 'ABCDE' at: 1.	self assert: buffer cache = 'BCDE'.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteWrap	buffer write: 3 from: '1234' at: 1.	buffer write: 2 from: 'AB' at: 1.	self assert: buffer cache = 'B23A'.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body></methods><methods><class-id>Xtreams.RingBufferTest</class-id> <category>initialize-release</category><body package="Xtreams-Core-Tests">setUp		buffer := RingBuffer on: 'xxxx' copy</body></methods><methods><class-id>Xtreams.ReadingWritingTest</class-id> <category>accessing</category><body package="Xtreams-Core-Tests">input	^input</body><body package="Xtreams-Core-Tests">output	^output</body></methods><methods><class-id>Xtreams.ReadingWritingTest</class-id> <category>tests - core</category><body package="Xtreams-Core-Tests">testInsert	self output write: #[ 1 2 3 4 7 8 9 0 ].	[self output -- 4] on: Error do: [self deny: self output isPositionable].	self assert: (self output insert: #[ 5 6 ]) = 2.	self input isPositionable		ifTrue:	[self assert: (self input read: 10) = #[ 1 2 3 4 5 6 7 8 9 0 ]]		ifFalse:	[self assert: (self input read: 10) = #[ 1 2 3 4 7 8 9 0 5 6 ]]</body><body package="Xtreams-Core-Tests">testPut		self output put: 1.	self assert: self input get = 1</body><body package="Xtreams-Core-Tests">testPutUint16		self output putUint16: 0.	self assert: self input getUint16 = 0.	self output putUint16: 16r01.	self assert: self input getUint16 = 16r01.	self output putUint16: 16rFF.	self assert: self input getUint16 = 16rFF.	self output putUint16: 16r100.	self assert: self input getUint16 = 16r100.	self output putUint16: 16rFFFF.	self assert: self input getUint16 = 16rFFFF.		"The following should be invalid"	self should: [self output putUint16: 16r10000] raise: ImproperStoreError.</body><body package="Xtreams-Core-Tests">testPutUint24		self output putUint24: 0.	self assert: self input getUint24 = 0.	self output putUint24: 16r01.	self assert: self input getUint24 = 16r01.	self output putUint24: 16rFF.	self assert: self input getUint24 = 16rFF.	self output putUint24: 16r0100.	self assert: self input getUint24 = 16r0100.	self output putUint24: 16rFFFF.	self assert: self input getUint24 = 16rFFFF.	self output putUint24: 16r010000.	self assert: self input getUint24 = 16r010000.	self output putUint24: 16rFFFFFF.	self assert: self input getUint24 = 16rFFFFFF.		"The following should be invalid"	self should: [self output putUint24: 16r1000000] raise: ImproperStoreError.</body><body package="Xtreams-Core-Tests">testPutUint32		self output putUint32: 0.	self assert: self input getUint32 = 0.	self output putUint32: 16r01.	self assert: self input getUint32 = 16r01.	self output putUint32: 16rFF.	self assert: self input getUint32 = 16rFF.	self output putUint32: 16r0100.	self assert: self input getUint32 = 16r0100.	self output putUint32: 16rFFFF.	self assert: self input getUint32 = 16rFFFF.	self output putUint32: 16r010000.	self assert: self input getUint32 = 16r010000.	self output putUint32: 16rFFFFFF.	self assert: self input getUint32 = 16rFFFFFF.	self output putUint32: 16r01000000.	self assert: self input getUint32 = 16r01000000.	self output putUint32: 16rFFFFFFFF.	self assert: self input getUint32 = 16rFFFFFFFF.		"The following should be invalid"	self should: [self output putUint32: 16r100000000] raise: ImproperStoreError.</body><body package="Xtreams-Core-Tests">testReadIntoCollection		| data out |	data := #[1 2 3 4 5 6 7].	self output write: data; close.	out := ByteArray new: data size.	self assert: (self input read: 4 into: out) = 4.	self assert: (self input read: 3 into: out at: 5)  = 3.	self assert: out = data</body><body package="Xtreams-Core-Tests">testReadWriteLargeAmount	| data |	1 to: 10 do: [:each | self output put: 1. self assert: self input get = 1].	#( 64 1024 2048 4096 8192 ) do: [:dataSize |		data := ByteArray new: dataSize.		1 to: data size do: [:i | data at: i put: (i - 1) \\ 256].		self	timeout:	1000 milliseconds			server:	[1 to: 10 do: [:each | self output write: data]. true]			client: 	[(1 to: 10) inject: true into: [:pass :each | pass and: [(self input read: data size) = data]]]]</body><body package="Xtreams-Core-Tests">testWriteCollection		| data |	data := #[1 2 3 4 5 6 7].	self assert: (self output write: data) = data size.	self assert: (self input read: data size) = data</body><body package="Xtreams-Core-Tests">testWriteFromCollectionAt	| data |	data := #[1 2 3 4 5 6 7].	self assert: (self output write: 4 from: data at: 1) = 4.	self assert: (self input read: 4) = (data first: 4).	self assert: (self output write: 3 from: data at: 5) = 3.	self assert: (self input read: 3) = (data last: 3)</body><body package="Xtreams-Core-Tests">testWriteFromStream	| data |	data := #[ 1 2 3 4 ] reading.	self assert: (self output write: 3 from: data) = 3.	self assert: (self input read: 3) = #[ 1 2 3 ].	self assert: (self output write: 1 from: data) = 1.	self assert: self input get = 4.	self assert: (		[	self output write: 2 from: data. false		] on: Incomplete do: [ :eos |			eos count = 0 ])</body></methods><methods><class-id>Xtreams.ReadingWritingTest</class-id> <category>tests - core - positioning</category><body package="Xtreams-Core-Tests">testReadPositioningSeek	| record in |	record := #[ 1 2 3 4 5 6 7 8 9 0 ].	self output write: record; close.	in := self input positioning.	self assert: (in ++ 7) = 7.	self assert: in position = 7.	self assert: (in -- 3) = 3.	self assert: in position = 4.</body><body package="Xtreams-Core-Tests">testWriteExplore	| record mark out |	record := #[ 1 2 3 4 5 6 7 8 9 0 ].	out := self output positioning.	mark := out position.	out		write: 0;		write: record;		explore: [out += mark; write: record size];		close.	self assert: (self input read: record size + 1) = ((ByteArray with: record size), record)</body><body package="Xtreams-Core-Tests">testWritePositioningSeek	| record out |	record := #[ 1 2 3 4 5 6 7 8 9 0 ].	out := self output positioning.	out	write: record.	self assert: (out -- 7) = 7.	self assert: out position = 3.	self assert: (out ++ 3) = 3.	self assert: out position = 6.	self assert: (out ++ 4) = 4.	out close.	self assert: (self input read: record size) = record</body></methods><methods><class-id>Xtreams.ReadingWritingTest</class-id> <category>utilities</category><body package="Xtreams-Core-Tests">timeout: timeoutDuration server: serverBlock client: clientBlock	"For tests that must be able to write and read at the same time, where they may block on each.	 Sockets, Pipes have an operating system buffer which dictates its bandwidth."	self assert: serverBlock value.	self assert: clientBlock value.</body></methods><methods><class-id>Xtreams.FiniteReadingWritingTests</class-id> <category>tests - core - positioning</category><body package="Xtreams-Core-Tests">testReadPositioningSeek	| record in |	record := #[ 1 2 3 4 5 6 7 8 9 0 ].	self output write: record; close.	in := self input positioning.	self assert: (in ++ 7) = 7.	self assert: in position = 7.	self assert: (in -- 3) = 3.	self assert: in position = 4.	self assert: ([ in ++ record size ] on: Incomplete do: [:ex | ex count]) = (record size - 4).</body><body package="Xtreams-Core-Tests">testReadPositioningSeekFrom	| record in |	record := #[ 1 2 3 4 5 6 7 8 9 0 ].	self output write: record; close.	in := self input positioning. 	self assert: (in += 3) = 3.	self assert: in position = 3.	self assert: (in -= 4) = 4.	self assert: in position = 6.	self assert: ([ in -= (record size + 6) ] on: Incomplete do: [:ex | ex count]) = record size.	self assert: in position = 0.	self assert: ([ in += (record size + 6) ] on: Incomplete do: [:ex | ex count]) = record size.	self assert: in position = record size.</body><body package="Xtreams-Core-Tests">testWritePositioningSeek	| record out |	record := #[ 1 2 3 4 5 6 7 8 9 0 ].	out := self output positioning.	out	write: record.	self assert: (out -- 7) = 7.	self assert: out position = 3.	self assert: (out ++ 3) = 3.	self assert: out position = 6.	self assert: ([ out ++ record size ] on: Incomplete do: [:ex | ex count]) = (record size - 6).	out close.	self assert: (self input read: record size) = record</body><body package="Xtreams-Core-Tests">testWritePositioningSeekFrom	| record out |	record := #[ 1 2 3 4 5 6 7 8 9 0 ].	out := self output positioning.	out	write: record.	self assert: (out += 3) = 3.	self assert: out position = 3.	self assert: (out -= 4) = 4.	self assert: out position = 6.	self assert: ([ out -= (record size + 6) ] on: Incomplete do: [:ex | ex count]) = record size.	self assert: out position = 0.	self assert: ([ out += (record size + 6) ] on: Incomplete do: [:ex | ex count]) = record size.	self assert: out position = record size.	out close.	self assert: (self input read: record size) = record</body></methods><methods><class-id>Xtreams.FiniteReadingWritingTests</class-id> <category>tests - seeking</category><body package="Xtreams-Core-Tests">testExploreInsideExplore	| in |	self output write: #[ 1 2 3 4 ]; close.	in := self input positioning.	self assert: (in explore: [(in explore: [in rest = #[1 2 3 4]]) &amp; (in rest = #[1 2 3 4])]).	self assert: in rest = #[1 2 3 4].	self should: [in get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testExploreRead	| in |	self output write: #[ 1 2 3 4 ]; close.	in := self input positioning.	self assert: (in explore: [in rest = #[1 2 3 4]]).	self assert: in rest = #[1 2 3 4].	self should: [in get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testExploreSeekBackward	| in |	self output write: #[ 1 2 3 4 ]; close.	in := self input positioning.	self assert: (in explore: [in read: 3; -- 1. in rest = #[3 4]]).	self assert: in rest = #[1 2 3 4].	self should: [in get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testExploreSeekBackwardPastBeginning	| in |	self output write: #[ 1 2 3 4 ]; close.	in := self input positioning.	self should: [ in explore: [in read: 2; -- 4 ] ] raise: Incomplete.	self should: [ in explore: [in read: 2; -= 6 ] ] raise: Incomplete.	self assert: in rest = #[1 2 3 4].	self should: [in get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testExploreSeekForward	| in |	self output write: #[ 1 2 3 4 ]; close.	in := self input positioning.	self assert: (in explore: [in ++ 2. in rest = #[3 4]]).	self assert: in rest = #[1 2 3 4].	self should: [in get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testExploreSeekForwardPastEnd	| in |	self output write: #[ 1 2 3 4 ]; close.	in := self input positioning.	self should: [ in explore: [in ++ 8] ] raise: Incomplete.	self should: [ in explore: [in += 8] ] raise: Incomplete.	self assert: in rest = #[1 2 3 4].	self should: [in get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testSeekBackward	self output write: #[ 1 2 3 4 ]; close.	self input read: 2.	[self input -- 2] on: Error do: [:error |		self deny: self input isPositionable].	self input isPositionable		ifTrue:	[self assert: self input rest = #[1 2 3 4]]		ifFalse:	[self assert: self input rest = #[3 4]].</body><body package="Xtreams-Core-Tests">testSeekBackwardPastBeginning	self output write: #[ 1 2 3 4 ]; close.	[[self input -- 1]		on: Incomplete do: [:incomplete | ^self assert: incomplete count = 0]]		on: Error do: [:error | ^self deny: self input isPositionable].	"If neither exception was raised, that is a problem."	self deny: true</body><body package="Xtreams-Core-Tests">testSeekForward	self output write: #[ 1 2 3 4 ]; close.	self assert: (self input ++ 2) = 2.	self assert: self input rest = #[3 4].</body><body package="Xtreams-Core-Tests">testSeekForwardPastEnd	self output write: #[ 1 2 3 4 ]; close.	self input ++ 2.	self assert: (		[	self input ++ 4. false		] on: Incomplete do: [ :eos |			eos count = 2 ]).	self should: [ self input get ] raise: Incomplete.	self assert: (		[	self input ++ 4. false		] on: Incomplete do: [ :eos |			eos count = 0 ]).</body><body package="Xtreams-Core-Tests">testWritePositioningInsert	| message result |	message := ByteArray withAll: (1 to: 20).	(PositionWriteStream on: self output)		write: message; write: message;		+= message size;		insert: message;		-= 0;		close.	result := self input rest.	self assert: result = (message, message, message)</body><body package="Xtreams-Core-Tests">testWritePositioningWithRingBuffer	| message result |	message := ByteArray withAll: (1 to: 20).	(PositionWriteStream on: self output)		buffer: (RingBuffer on: (ByteArray new: 5));		write: message;		close.	result := self input rest.	self assert: result = message</body></methods><methods><class-id>Xtreams.FiniteReadingWritingTests</class-id> <category>tests - enumeration</category><body package="Xtreams-Core-Tests">testCollect	| data result |	data := ByteArray withAll: (0 to: 15).	self output write: data; close.	result := self input collect: [ :e | e * e ].	self assert: result size = data size.	data with: result do: [ :in :out | self assert: in * in = out ]</body><body package="Xtreams-Core-Tests">testDetect	| data result |	data := ByteArray withAll: (1 to: 15).	self output write: data; close.	result := self input detect: [ :e | e \\ 4 = 0 ].	self assert: result = 4.	result := self input detect: [ :e | e \\ 4 = 0 ].	self assert: result = 8.	result := self input detect: [ :e | e \\ 4 = 0 ].	self assert: result = 12.	result := self input detect: [ :e | e \\ 4 = 0 ] ifNone: [ nil ].	self assert: result = nil</body><body package="Xtreams-Core-Tests">testDo	| data result i |	data := ByteArray withAll: (0 to: 15).	self output write: data; close.	result := ByteArray new: data size.	i := 1.	self input do: [ :e | result at: i put: e * e. i := i + 1 ].	data with: result do: [ :in :out | self assert: in * in = out ]</body><body package="Xtreams-Core-Tests">testSelect	| data result |	data := ByteArray withAll: (0 to: 15).	self output write: data; close.	result := self input select: [ :e | e odd ].	self assert: result = (data select: [ :e | e odd ]).</body></methods><methods><class-id>Xtreams.FiniteReadingWritingTests</class-id> <category>tests - core</category><body package="Xtreams-Core-Tests">testGet	self output write: #[ 1 2 3 4 ]; close.	self assert: self input get = 1.	self assert: self input get = 2.	self assert: self input get = 3.	self assert: self input get = 4.	self should: [self input get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testGetPastEnd	self output put: 120.	self output close.	self assert: self input get = 120.	self should: [self input get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testRead	self output write: #[ 1 2 3 4 ]; close.	self assert: (self input read: 3) = #[1 2 3].	self assert: ([self input read: 2. false] on: Incomplete do: [:exception |		exception collection first = 4.		exception collection size = 2.		exception count = 1.		true])</body><body package="Xtreams-Core-Tests">testReadIntoAt	| result |	self output write: #[ 1 2 3 4 ]; close.	result := ByteArray new: 8 withAll: 255.	self input read: 3 into: result at: 3.	self assert: result = #[255 255 1 2 3 255 255 255].	self input read: 1 into: result at: 6.	self assert: result = #[255 255 1 2 3 4 255 255].	self should: [self input get] raise: Incomplete.	self should: [self input read: 3 into: result at: 5] raise: Incomplete.	self assert: result = #[255 255 1 2 3 4 255 255].</body><body package="Xtreams-Core-Tests">testReadIntoAtPastEnd	| result |	self output write: #[ 1 2 3 4 ]; close.	self input read: 1.	result := ByteArray new: 4 withAll: 255.	self assert: ([self input read: 4 into: result at: 1. false] on: Incomplete do: [ :eos | eos count = 3 ]).	self assert: result = #[2 3 4 255]</body><body package="Xtreams-Core-Tests">testRest	self output write: #[ 1 2 3 4 ]; close.	self assert: self input rest = #[1 2 3 4].	self assert: self input rest = #[]</body><body package="Xtreams-Core-Tests">testWriteStream	| data |	data := #[ 1 2 3 4 ] reading.	self assert: (self output write: data) = 4.	self shouldnt: [ self output write: data ] raise: Incomplete.	self output close.	self assert: (self input read: 4) = #[ 1 2 3 4 ].	self should: [self input get] raise: Incomplete</body><body package="Xtreams-Core-Tests">testWriteTruncating	self output positioning		write: #[1 2 3 4 5 6];		-- 3;		write: #[1 2];		close.	self assert: self input rest = #[1 2 3 1 2].</body></methods><methods><class-id>Xtreams.FiniteReadingWritingTests class</class-id> <category>testing</category><body package="Xtreams-Core-Tests">isAbstract	^self == FiniteReadingWritingTests or: [ super isAbstract ]</body></methods><methods><class-id>Xtreams.PositionReadStreamTest</class-id> <category>tests</category><body package="Xtreams-Core-Tests">testIncompleteCounts	| x oneToTen |	oneToTen := [ (x := x + 1) &gt; 10 ifTrue: [ Incomplete zero raise ]. x ].	x := 0.	self assert: ([ oneToTen reading positioning read: 5; -- 8 ] on: Incomplete do: [:ex | ex count]) = 5.	x := 0.	self assert: ([ oneToTen reading positioning read: 5; ++ 8 ] on: Incomplete do: [:ex | ex count]) = 5.	x := 0.	self assert: ([ oneToTen reading positioning -= 12 ] on: Incomplete do: [:ex | ex count]) = 10.	x := 0.	self assert: ([ oneToTen reading positioning += 12 ] on: Incomplete do: [:ex | ex count]) = 10.	self assert: ([ (1 to: 10) reading positioning read: 5; -- 8 ] on: Incomplete do: [:ex | ex count]) = 5.	self assert: ([ (1 to: 10) reading positioning read: 5; ++ 8 ] on: Incomplete do: [:ex | ex count]) = 5.	self assert: ([ (1 to: 10) reading positioning -= 12 ] on: Incomplete do: [:ex | ex count]) = 10.	self assert: ([ (1 to: 10) reading positioning += 12 ] on: Incomplete do: [:ex | ex count]) = 10.</body></methods><methods><class-id>Xtreams.InfiniteReadingWritingTests</class-id> <category>tests - core</category><body package="Xtreams-Core-Tests">testGet	self output write: #[ 1 2 3 4 ].	self assert: self input get = 1.	self assert: self input get = 2.	self assert: self input get = 3.	self assert: self input get = 4</body><body package="Xtreams-Core-Tests">testRead	self output write: #[ 1 2 3 4 ].	self assert: (self input read: 3) = #[1 2 3].	self assert: self input get = 4</body></methods><methods><class-id>Xtreams.InfiniteReadingWritingTests class</class-id> <category>testing</category><body package="Xtreams-Core-Tests">isAbstract	^self == InfiniteReadingWritingTests or: [ super isAbstract ]</body></methods><methods><class-id>Xtreams.BufferedWriteStreamTest</class-id> <category>tests</category><body package="Xtreams-Core-Tests">testBuffered	| writing count |	count := 0.	writing := [:o | count := count + 1] writing buffering: 10.	writing write: #[1 2 3 4 5].	self assert: count = 0.	writing write: #[6 7 8 9].	self assert: count = 0.	writing put: 10.	self assert: count = 0.	writing write: #[11 12].	self assert: count = 10.	writing flush.	self assert: count = 12.	writing write: #[13 14].	self assert: count = 12.	writing close.	self assert: count = 14</body></methods><methods><class-id>Xtreams.ElasticBufferTest</class-id> <category>tests</category><body package="Xtreams-Core-Tests">testClear	buffer write: 4 from: '1234' at: 1.	buffer clear.	self assert: buffer cacheSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 0.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testRead	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 1 into: output at: 1.	self assert: output = '1www'.	self assert: buffer readPosition = 1.	self assert: buffer readSize = 3.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 5.	buffer read: 3 into: output at: 2.	self assert: output = '1234'.	self assert: buffer readPosition = 4.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 8</body><body package="Xtreams-Core-Tests">testReadOverflow	output := 'wwwwww' copy.	buffer write: 4 from: '1234' at: 1.	self should: [buffer read: 6 into: output at: 1] raise: Incomplete.	self assert: output = '1234ww'.	self assert: buffer readPosition = 4.	self assert: buffer readSize = 0.	self assert: buffer writePosition = 4.	self assert: buffer writeSize = 8</body><body package="Xtreams-Core-Tests">testReadWrap	output := 'wwwwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 3 into: output at: 1.	buffer write: 6 from: 'ABCDEF' at: 1.	output := 'wwwwww' copy.	buffer read: 6 into: output at: 1.	self assert: output = '4ABCDE'.	self assert: buffer readPosition = 7.	self assert: buffer readSize = 1.	self assert: buffer writePosition = 8.	self assert: buffer writeSize = 7</body><body package="Xtreams-Core-Tests">testTrim	output := 'wwww' copy.	buffer write: 3 from: '1234' at: 1.	buffer read: 1 into: output at: 1.	buffer writeSkip: -1.	buffer trim.	self assert: buffer cacheSize = 2.	self assert: buffer cache = '23'.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 2.	self assert: buffer writePosition = 2.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testTrimInsideOut	buffer := ElasticBuffer on: 'xxxx' copy.	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 3 into: output at: 1.	buffer write: 2 from: 'AB' at: 1.	buffer writeSkip: -1.	buffer trim.	self assert: buffer cacheSize = 2.	self assert: buffer cache = '4B'.	self assert: buffer readPosition = 0.	self assert: buffer readSize = 2.	self assert: buffer writePosition = 2.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWrite	buffer := ElasticBuffer on: 'xxxx' copy.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 4.	buffer write: 1 from: '1234' at: 1.	self assert: buffer cache = '1xxx'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 3.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 3.	buffer write: 3 from: '1234' at: 2.	self assert: buffer cache = '1234'.	self assert: buffer cacheSize = 4.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteGrow	self assert: buffer cacheSize = 0.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 0.	buffer write: 4 from: '1234' at: 1.	self assert: (buffer cache first: 4) = '1234'.	self assert: buffer cacheSize = 8.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 4.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 4</body><body package="Xtreams-Core-Tests">testWriteObject		self assert: buffer cacheSize = 0.	self assert: buffer activeSize = 0.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 0.	self assert: buffer readSize = 0.	self assert: buffer writeSize = 0.	buffer put: $1.	self assert: buffer cache first = $1.	self assert: buffer cacheSize = 2.	self assert: buffer activeSize = 1.	self assert: buffer inactiveSize = 1.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 1.	self assert: buffer readSize = 1.	self assert: buffer writeSize = 1.	buffer put: $2; put: $3; put: $4.	self assert: (buffer cache first: 4) = '1234'.	self assert: buffer cacheSize = 6.	self assert: buffer activeSize = 4.	self assert: buffer inactiveSize = 2.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 4.	self assert: buffer readSize = 4.	self assert: buffer writeSize = 2.	buffer put: $5.	self assert: (buffer cache first: 5) = '12345'.	self assert: buffer cacheSize &gt;= 5.	self assert: buffer activeSize = 5.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 5.	self assert: buffer readSize = 5.</body><body package="Xtreams-Core-Tests">testWriteWrap	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 2 into: output at: 1.	buffer write: 6 from: 'ABCDEF' at: 1.	self assert: buffer cache = 'EF34ABCD'.	self assert: buffer cacheSize = 8.	self assert: buffer activeSize = 8.	self assert: buffer inactiveSize = 0.	self assert: buffer readPosition = 0.	self assert: buffer writePosition = 8.	self assert: buffer readSize = 8.	self assert: buffer writeSize = 0</body><body package="Xtreams-Core-Tests">testWriteWrapOverflow	output := 'wwww' copy.	buffer write: 4 from: '1234' at: 1.	buffer read: 2 into: output at: 1.	buffer write: 5 from: 'ABCDE' at: 1.	buffer write: 3 from: 'XYZ' at: 1.	self assert: (buffer cache first: 4) = 'EXYZ'.	self assert: (buffer cache last: 4) = 'ABCD'.	self assert: buffer cacheSize = 20.	self assert: buffer activeSize = 11.	self assert: buffer inactiveSize = 9.	self assert: buffer readPosition = 1.	self assert: buffer writePosition = 11.	self assert: buffer readSize = 10.	self assert: buffer writeSize = 10</body></methods><methods><class-id>Xtreams.ElasticBufferTest</class-id> <category>initialize-release</category><body package="Xtreams-Core-Tests">setUp		buffer := ElasticBuffer on: String new</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>