<?xml version="1.0"?><st-source><!-- Name: DLLCC Vector Math ExampleNotice: Copyright © 2000,1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This parcel contains the Smalltalk code for the vector arithmetic example.DbIdentifier: bear73DbTrace: 7896DevelopmentPrerequisites: #(#(#any 'DLLCC' ''))PackageName: DLLCC Vector Math ExamplePackageName:: DLLCC Vector Math ExampleParcel: #($e "16r0065")ParcelName: DLLCC Vector Math ExamplePrintStringCache: (5i 1.4,bobw)Version: 5i 1.4Date: 6:05:55 AM August 5, 2009 --><time-stamp>From VisualWorks®, Pre-Release 7.7 (aug09.0) of August 5, 2009 on August 5, 2009 at 6:05:55 AM </time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Vector</name><environment>Examples</environment><super>Core.UninterpretedBytes</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Numeric-Vectors</category><attributes><package>DLLCC Vector Math Example</package></attributes></class><comment><class-id>Examples.Vector</class-id><body>Instances of Vector are n-element vectors of floating-point numbers, each stored as 4 bytes in the vecotrs sequence of bytes.  By convention x is floatAt: 1, y floatAt: 5, z floatAt: 9, and an extra value (for example, alpha) floatAt: 13.Instance Variables: *Indexed*Class Variables:VectorLibrary	&lt;VectorMath | FastVectorMath&gt;	object that provides the implementation of the math operations</body></comment><class><name>VectorMathInternal</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Numeric-Vectors</category><attributes><package>DLLCC Vector Math Example</package></attributes></class><class><name>VectorMathExternal</name><environment>Examples</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Examples.VectorMathExternalDictionary.*			</imports><category>Numeric-Vectors</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>vector.dll</item> <item>vector.sl</item> <item>vector.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DLLCC Vector Math Example</package></attributes></class><shared-variable><name>VectorLibrary</name><environment>Examples.Vector</environment><private>false</private><constant>false</constant><category>Defaults</category><attributes><package>DLLCC Vector Math Example</package></attributes></shared-variable><shared-variable><name>VectorMathExternalDictionary</name><environment>Examples</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DLLCC Vector Math Example</package></attributes></shared-variable><methods><class-id>Examples.Vector</class-id> <category>accessing</category><body package="DLLCC Vector Math Example" selector="a">a	^self floatAt: 13</body><body package="DLLCC Vector Math Example" selector="a:">a: aNumber	self floatAt: 13 put: aNumber asFloat</body><body package="DLLCC Vector Math Example" selector="at:">at: anIndex	^self slotAt:  ((anIndex - 1) * 4) +1</body><body package="DLLCC Vector Math Example" selector="at:put:">at: anIndex put: aNumber	self slotAt: ((anIndex - 1) * 4) +1 put: aNumber asFloat</body><body package="DLLCC Vector Math Example" selector="h">h	^self floatAt: 13</body><body package="DLLCC Vector Math Example" selector="h:">h: aNumber	self floatAt: 13 put: aNumber asFloat</body><body package="DLLCC Vector Math Example" selector="isZeroVector">isZeroVector	1 to: self sizeInBytes by: 4 do:		[:i |		(self slotAt: i) = 0 ifFalse: [^false]].	^true</body><body package="DLLCC Vector Math Example" selector="size">size	^self sizeInBytes // 4</body><body package="DLLCC Vector Math Example" selector="w">w	^self floatAt: 13</body><body package="DLLCC Vector Math Example" selector="w:">w: aNumber	self floatAt: 13 put: aNumber asFloat</body><body package="DLLCC Vector Math Example" selector="x">x	^self floatAt: 1</body><body package="DLLCC Vector Math Example" selector="x:">x: aNumber	self floatAt: 1 put: aNumber asFloat</body><body package="DLLCC Vector Math Example" selector="x:y:z:">x: ax y: ay z: az	self floatAt: 1 put: ax .	self floatAt: 5 put: ay.	self floatAt: 9 put: az</body><body package="DLLCC Vector Math Example" selector="x:y:z:a:">x: ax y: ay z: az a: a	self floatAt: 1 put: ax .	self floatAt: 5 put: ay.	self floatAt: 9 put: az.	self floatAt: 13 put: a</body><body package="DLLCC Vector Math Example" selector="x:y:z:w:">x: ax y: ay z: az w: aw	self floatAt: 1 put: ax .	self floatAt: 5 put: ay.	self floatAt: 9 put: az.	self floatAt: 13 put: aw</body><body package="DLLCC Vector Math Example" selector="y">y	^self floatAt: 5</body><body package="DLLCC Vector Math Example" selector="y:">y: aNumber	self floatAt: 5 put: aNumber asFloat</body><body package="DLLCC Vector Math Example" selector="z">z	^self floatAt: 9</body><body package="DLLCC Vector Math Example" selector="z:">z: aNumber	self floatAt: 9 put: aNumber asFloat</body></methods><methods><class-id>Examples.Vector</class-id> <category>arithmetic</category><body package="DLLCC Vector Math Example" selector="*">* aNumber	^VectorLibrary vector: self multiplyByScalar: aNumber result: self shallowCopy</body><body package="DLLCC Vector Math Example" selector="+">+ aVector	^VectorLibrary vectorAdd: self and: aVector result: self shallowCopy</body><body package="DLLCC Vector Math Example" selector="-">- aVector	^VectorLibrary vectorSubtract: self and: aVector result: self shallowCopy</body><body package="DLLCC Vector Math Example" selector="/">/ aNumber	^VectorLibrary vector: self divideByScalar: aNumber result: self shallowCopy</body></methods><methods><class-id>Examples.Vector</class-id> <category>functions</category><body package="DLLCC Vector Math Example" selector="angleBetween:">angleBetween: v	^((self dotProduct: v) / (self magnitude * v magnitude)) arcCos radiansToDegrees</body><body package="DLLCC Vector Math Example" selector="crossProduct:">crossProduct: aVector	^VectorLibrary vectorCrossProduct: self with: aVector result: self shallowCopy</body><body package="DLLCC Vector Math Example" selector="crossProductNormal:">crossProductNormal: aVector	^VectorLibrary vectorCrossProduct: self with: aVector resultNormalized: self shallowCopy</body><body package="DLLCC Vector Math Example" selector="distanceFrom:">distanceFrom: aVector	^(self - aVector) magnitude</body><body package="DLLCC Vector Math Example" selector="dotProduct:">dotProduct: aVector	^VectorLibrary vectorDotProduct: self and: aVector</body><body package="DLLCC Vector Math Example" selector="magnitude">magnitude	^VectorLibrary vectorMagnitude: self</body><body package="DLLCC Vector Math Example" selector="negated">negated	^VectorLibrary vectorNegate: self result: self shallowCopy</body><body package="DLLCC Vector Math Example" selector="normal">normal	^VectorLibrary vectorNormal: self result: self shallowCopy</body><body package="DLLCC Vector Math Example" selector="rounded">rounded	^VectorLibrary vectorRound: self result: self shallowCopy</body></methods><methods><class-id>Examples.Vector</class-id> <category>dispatching</category><body package="DLLCC Vector Math Example" selector="productFromDouble:">productFromDouble: num	^self * num</body><body package="DLLCC Vector Math Example" selector="productFromFixedPoint:">productFromFixedPoint: num	^self * num</body><body package="DLLCC Vector Math Example" selector="productFromFloat:">productFromFloat: num	^self * num</body><body package="DLLCC Vector Math Example" selector="productFromFraction:">productFromFraction: num	^self * num</body><body package="DLLCC Vector Math Example" selector="productFromInfinitesimal:">productFromInfinitesimal: num	^self * num</body><body package="DLLCC Vector Math Example" selector="productFromInfinity:">productFromInfinity: num	^self * num</body><body package="DLLCC Vector Math Example" selector="productFromInteger:">productFromInteger: num	^self * num</body><body package="DLLCC Vector Math Example" selector="quotientFromDouble:">quotientFromDouble: num	^self / num</body><body package="DLLCC Vector Math Example" selector="quotientFromFixedPoint:">quotientFromFixedPoint: num	^self / num</body><body package="DLLCC Vector Math Example" selector="quotientFromFloat:">quotientFromFloat: num	^self / num</body><body package="DLLCC Vector Math Example" selector="quotientFromFraction:">quotientFromFraction: num	^self / num</body><body package="DLLCC Vector Math Example" selector="quotientFromInfinitesimal:">quotientFromInfinitesimal: num	^self / num</body><body package="DLLCC Vector Math Example" selector="quotientFromInfinity:">quotientFromInfinity: num	^self / num</body><body package="DLLCC Vector Math Example" selector="quotientFromInteger:">quotientFromInteger: num	^self / num</body></methods><methods><class-id>Examples.Vector</class-id> <category>printing</category><body package="DLLCC Vector Math Example" selector="printOn:">printOn: aStream	aStream nextPut: $(.	(1 to: self sizeInBytes by: self elementSize)		do: [:i | (self slotAt: i) printOn: aStream]		separatedBy: [ aStream nextPut: $,; space].	aStream nextPut: $).</body></methods><methods><class-id>Examples.Vector</class-id> <category>converting</category><body package="DLLCC Vector Math Example" selector=",">, aNumber	| bs new |	bs := self sizeInBytes.	new := self class new: self size+1.	new replaceBytesFrom: 1 to: bs with: self startingAt: 1.	new slotAt: bs+1 put: (self convert: aNumber).	^new</body><body package="DLLCC Vector Math Example" selector="asPoint">asPoint	^self x @ self y</body></methods><methods><class-id>Examples.Vector</class-id> <category>private</category><body package="DLLCC Vector Math Example" selector="convert:">convert: aNumber	^aNumber asFloat</body><body package="DLLCC Vector Math Example" selector="elementSize">elementSize	^4</body><body package="DLLCC Vector Math Example" selector="slotAt:">slotAt: byteIndex	"Answer a single-precision (32 bit) floating point quantity	starting at the given byteIndex."	&lt;primitive: 548&gt;	byteIndex isInteger ifTrue:		[^(byteIndex &lt; 1 or: [byteIndex + Float zero basicSize - 1 &gt; self sizeInBytes])			ifTrue: [self subscriptBoundsError: byteIndex]			ifFalse: [Float domainErrorSignal						raiseRequestWith: byteIndex						errorString: 'Invalid float at this index']].	^byteIndex respondsToArithmetic		ifTrue: [self slotAt: byteIndex asSmallInteger]		ifFalse: [self nonIntegerIndexError: byteIndex]</body><body package="DLLCC Vector Math Example" selector="slotAt:put:">slotAt: byteIndex put: aFloat	"Store a single-precision (32 bit)	floating point quantity	starting at the given byteIndex."	&lt;primitive: 549&gt;	"The only way we can do this is by	storing the Float byte-by-byte."	| float |	float := aFloat asFloat.	self byteAt: byteIndex put: (float basicAt: 1).	self byteAt: byteIndex + 1 put: (float basicAt: 2).	self byteAt: byteIndex + 2 put: (float basicAt: 3).	self byteAt: byteIndex + 3 put: (float basicAt: 4).	^float</body></methods><methods><class-id>Examples.Vector class</class-id> <category>class initialization</category><body package="DLLCC Vector Math Example" selector="vectorLibrary:">vectorLibrary: aVectorMath	VectorLibrary := aVectorMath</body></methods><methods><class-id>Examples.Vector class</class-id> <category>instance creation</category><body package="DLLCC Vector Math Example" selector="new:">new: aSize	^self basicNew: aSize*4</body><body package="DLLCC Vector Math Example" selector="r3BasisX">r3BasisX	^self x: 1 y: 0 z: 0</body><body package="DLLCC Vector Math Example" selector="r3BasisY">r3BasisY	^self x: 0.0 y: 1.0 z: 0.0</body><body package="DLLCC Vector Math Example" selector="r3BasisZ">r3BasisZ	^self x: 0 y: 0 z: 1</body><body package="DLLCC Vector Math Example" selector="r3Zero">r3Zero	^self zeroRN: 3</body><body package="DLLCC Vector Math Example" selector="red:green:blue:alpha:">red: xNum green: yNum blue: zNum alpha: wNum	^(self new: 4) x: xNum y: yNum z: zNum w: wNum</body><body package="DLLCC Vector Math Example" selector="x:">x: aNumber	^(self new: 1) x: aNumber</body><body package="DLLCC Vector Math Example" selector="x:y:">x: xNum y: yNum	^(self new: 2) x: xNum; y: yNum</body><body package="DLLCC Vector Math Example" selector="x:y:z:">x: xNum y: yNum z: zNum	^(self new: 3) x: xNum y: yNum z: zNum</body><body package="DLLCC Vector Math Example" selector="x:y:z:a:">x: xNum y: yNum z: zNum a: wNum	^(self new: 4) x: xNum y: yNum z: zNum a: wNum</body><body package="DLLCC Vector Math Example" selector="x:y:z:w:">x: xNum y: yNum z: zNum w: wNum	^(self new: 4) x: xNum y: yNum z: zNum w: wNum</body><body package="DLLCC Vector Math Example" selector="zeroRN:">zeroRN: size	^self new: size</body></methods><methods><class-id>Examples.Vector class</class-id> <category>examples</category><body package="DLLCC Vector Math Example" selector="example1">example1	"self example1"	^self r3BasisX + self r3BasisY + self r3BasisZ * 2.0</body><body package="DLLCC Vector Math Example" selector="example2">example2	"self example2"	^self r3BasisX - self r3BasisY + self r3BasisZ / 2.0</body><body package="DLLCC Vector Math Example" selector="example3">example3	"self example3"	^(1, 1, 1) dotProduct: (1, -2, 3)</body><body package="DLLCC Vector Math Example" selector="example4">example4	"self example4"	^(1, -1, 1) magnitude</body><body package="DLLCC Vector Math Example" selector="example5">example5	"self example5"	"self example5 magnitude"	^(1, 1, 1) normal</body><body package="DLLCC Vector Math Example" selector="example6">example6	"self example6"	^(1, 1, 1) negated</body><body package="DLLCC Vector Math Example" selector="example7">example7	"self example7"	^(1, 2, 3) crossProduct: (1, 1, 1)</body><body package="DLLCC Vector Math Example" selector="example8">example8	"self example8"	^(3, 0, 0) crossProductNormal: (0, 3, 0)</body><body package="DLLCC Vector Math Example" selector="example9">example9	"self example9"	^((1, -1, 1) normal * 3) rounded</body></methods><methods><class-id>Examples.Vector class</class-id> <category>testing</category><body package="DLLCC Vector Math Example" selector="test1">test1	"Copmpare the Smalltalk code against the external code."	"Vector test1"	| tests internalResults externalResults |	tests := self class organization listAtCategoryNamed: #examples.	internalResults := Dictionary new.	VectorMathInternal initialize.	tests do:		[:sel|		internalResults			at: sel			put: ([self perform: sel]					on: Error					do: [:ex| ex errorString])].	externalResults := Dictionary new.	VectorMathExternal initialize.	tests do:		[:sel|		externalResults			at: sel			put: ([self perform: sel]					on: Error					do: [:ex| ex errorString])].	^Dictionary		withAll: ((tests reject: [:sel| (internalResults at: sel) = (externalResults at: sel)])						collect: [:sel| sel -&gt; (Array												with: (internalResults at: sel)												with: (externalResults at: sel))])</body><body package="DLLCC Vector Math Example" selector="test2">test2	"Compare performance"	"self test2"	| u v w n t1 t2 il el |	u := 1 , 1 , 1.	v := u copy.	w := u copy.	n := 100000.	il := VectorMathInternal new.	el := VectorMathExternal new.	t1 := Time millisecondsToRun:			[n / 5 timesRepeat: 				[il vectorAdd: u and: v result: w.				il vectorAdd: u and: v result: w.				il vectorAdd: u and: v result: w.				il vectorAdd: u and: v result: w.				il vectorAdd: u and: v result: w]].	t2 := Time millisecondsToRun:			[n / 5 timesRepeat: 				[el vectorAdd: u and: v result: w.				el vectorAdd: u and: v result: w.				el vectorAdd: u and: v result: w.				el vectorAdd: u and: v result: w.				el vectorAdd: u and: v result: w]].	^#internal -&gt; t1 -&gt; #external -&gt; t2 -&gt; (t2 - t1 / t2 * 100.0)</body></methods><methods><class-id>Examples.VectorMathInternal</class-id> <category>vector api</category><body package="DLLCC Vector Math Example" selector="vector:divideByScalar:result:">vector: v1 divideByScalar: aNumber result: result 	| n |	n := aNumber asFloat.	1 to: v1 sizeInBytes by: 4 do:		[:i |		result slotAt: i put: (v1 slotAt: i) / n].	^result</body><body package="DLLCC Vector Math Example" selector="vector:multiplyByScalar:result:">vector: v1 multiplyByScalar: aNumber result: result	| n |	n := aNumber asFloat.	1 to: v1 sizeInBytes by: 4 do:		[:i |		result slotAt: i put: (v1 slotAt: i)*n].	^result</body><body package="DLLCC Vector Math Example" selector="vectorAdd:and:result:">vectorAdd: v1 and: v2 result: result	1 to: v1 sizeInBytes by: 4 do:		[:i |		result slotAt: i put: (v1 slotAt: i)+(v2 slotAt: i)].	^result</body><body package="DLLCC Vector Math Example" selector="vectorCrossProduct:with:result:">vectorCrossProduct: v1 with: v2 result: result	result x: (v1 y*v2 z) - (v1 z*v2 y).	result y: (v1 z*v2 x) - (v1 x*v2 z).	result z: (v1 x*v2 y) - (v1 y*v2 x).	^result</body><body package="DLLCC Vector Math Example" selector="vectorCrossProduct:with:resultNormalized:">vectorCrossProduct: v1 with: v2 resultNormalized: result	self vectorCrossProduct: v1 with: v2 result: result.	self vectorNormal: result result: result.	^result</body><body package="DLLCC Vector Math Example" selector="vectorDotProduct:and:">vectorDotProduct: v1 and: v2	|  sum |	sum := 0.0.	1 to: v1 sizeInBytes by: 4 do:		[:i |		sum :=  sum + ((v1 slotAt: i)*(v2 slotAt: i))].	^sum</body><body package="DLLCC Vector Math Example" selector="vectorMagnitude:">vectorMagnitude: v	|  sum |	sum := 0.0.	1 to: v sizeInBytes by: 4 do:		[:i | | num |		num := v slotAt: i.		sum :=  sum + (num*num)].	^sum sqrt</body><body package="DLLCC Vector Math Example" selector="vectorNegate:result:">vectorNegate: v1 result: v2	1 to: v1 sizeInBytes by: 4 do:		[:i |		v2 slotAt: i put: (v1 slotAt: i) negated].	^v2</body><body package="DLLCC Vector Math Example" selector="vectorNormal:result:">vectorNormal: v1 result: result	|  mag |	mag := 0.0.	1 to: v1 sizeInBytes by: 4 do:		[:i | | num |		num := v1 slotAt: i.		mag :=  mag + (num*num)].	mag  := mag sqrt.	mag = 0.0		ifTrue:			[1 to: v1 sizeInBytes by: 4 do:				[:i |				result slotAt: i put: 0.0]]		ifFalse:			[1 to: v1 sizeInBytes by: 4 do:				[:i |				result slotAt: i put: (v1 slotAt: i) / mag]].	^result</body><body package="DLLCC Vector Math Example" selector="vectorRound:result:">vectorRound: v1 result: v2	1 to: v1 sizeInBytes by: 4 do:		[:i |		v2 slotAt: i put: (v1 slotAt: i) rounded].	^v2</body><body package="DLLCC Vector Math Example" selector="vectorSubtract:and:result:">vectorSubtract: v1 and: v2 result: result	1 to: v1 sizeInBytes by: 4 do:		[:i |		result slotAt: i put: (v1 slotAt: i)-(v2 slotAt: i)].	^result</body></methods><methods><class-id>Examples.VectorMathInternal class</class-id> <category>class initialization</category><body package="DLLCC Vector Math Example" selector="initialize">initialize	Vector vectorLibrary: self new</body></methods><methods><class-id>Examples.VectorMathInternal class</class-id> <category>fileIn/Out</category><body package="DLLCC Vector Math Example" selector="prerequisitesForLoading">prerequisitesForLoading	^super prerequisitesForLoading		addLast: Vector;		yourself</body></methods><methods><class-id>Examples.VectorMathExternal class</class-id> <category>class initialization</category><body package="DLLCC Vector Math Example" selector="initialize">initialize	Vector vectorLibrary: self new</body></methods><methods><class-id>Examples.VectorMathExternal class</class-id> <category>fileIn/Out</category><body package="DLLCC Vector Math Example" selector="prerequisitesForLoading">prerequisitesForLoading	"Ensure Vector is defined. Also define VectorMathInternal so that	 VectorMathApi is the default api."	^super prerequisitesForLoading		addLast: Vector;		addLast: VectorMathInternal;		yourself</body></methods><methods><class-id>Examples.VectorMathExternal class</class-id> <category>private</category><body package="DLLCC Vector Math Example" selector="libraryFilesSearchSignals">libraryFilesSearchSignals	"Answer a SignalCollection used to handle exceptions raised when scanning for library files. The signals answered by this method will result in those signals being ignored by the library search machinery. Clients should not answer signals they wish to receive."	^ExternalLibraryHolder libraryNotFoundSignal</body></methods><methods><class-id>Core.Number</class-id> <category>converting</category><body package="DLLCC Vector Math Example" selector=",">, aNumber	^aNumber appendWith: self</body><body package="DLLCC Vector Math Example" selector="appendWith:">appendWith: aNumber    ^Examples.Vector  x: aNumber y: self</body></methods><methods><class-id>Examples.VectorMathExternal</class-id> <category>vector api</category><body package="DLLCC Vector Math Example" selector="vector:divideByScalar:result:">vector: v1 divideByScalar: s result: result	&lt;C: _oop vectorDivideByScalar(_oop v1, float s, _oop result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vector:multiplyByScalar:result:">vector: v1 multiplyByScalar: s result: result	&lt;C: _oop vectorMultiplyByScalar(_oop v1, float s, _oop result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorAdd:and:result:">vectorAdd: v1 and: v2 result: result	&lt;C: _oop vectorAdd(_oop v1, _oop v2  ,  _oop result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorCrossProduct:with:result:">vectorCrossProduct: v1 with: v2 result: result	&lt;C: _oop vectorCrossProduct(_oop v1, _oop v2, _oop result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorCrossProduct:with:resultNormalized:">vectorCrossProduct: v1 with: v2 resultNormalized: result	&lt;C: _oop vectorCrossProductNormal(_oop v1, _oop v2, _oop result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorDotProduct:and:">vectorDotProduct: v1 and: v2	&lt;C: float vectorDotProduct(_oop v1, _oop v2 )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorMagnitude:">vectorMagnitude: v1	&lt;C: float vectorMagnitude(_oop v1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorNegate:result:">vectorNegate: v1 result: v2	&lt;C: _oop vectorNegate(_oop v1, _oop v2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorNormal:result:">vectorNormal: v1 result: result	&lt;C: _oop vectorNormal(_oop v1,   _oop result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorRound:result:">vectorRound: v1 result: v2	&lt;C: _oop vectorRound(_oop v1, _oop v2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Vector Math Example" selector="vectorSubtract:and:result:">vectorSubtract: v1 and: v2 result: result	&lt;C: _oop vectorMinus(_oop v1, _oop v2  ,  _oop result)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><initialize><class-id>Examples.VectorMathInternal</class-id></initialize><initialize><class-id>Examples.VectorMathExternal</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>UninterpretedBytes</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class></st-source>