<?xml version="1.0"?><st-source><!-- Name: DLLCC Test Suite-GeneratorNotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Comment: This package was used to auto-generate the DLLCC Test suite.DbIdentifier: bear73DbTrace: 487203DbUsername: traabeDbVersion: 8.2 - 1DevelopmentPrerequisites: #(#(#any 'DLLCC Test Suite' ''))PackageName: DLLCC Test Suite-GeneratorParcel: #('DLLCC Test Suite-Generator')ParcelName: DLLCC Test Suite-GeneratorPrerequisiteDescriptions: #(#(#name 'DLLCC Test Suite' #componentType #package))PrerequisiteParcels: #(#('DLLCC Test Suite' ''))PrintStringCache: (8.2 - 1,traabe)Version: 8.2 - 1Date: 12:32:35 PM September 9, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.2) of September 9, 2016 on September 9, 2016 at 12:32:35 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>DLLCCTestSuite</name><environment>External</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></name-space><comment><name-space-id>External.DLLCCTestSuite</name-space-id><body>This name space contains a generator for the DLLCC test suite.  DLLCCCAPITestSuiteGenerator is the top-level class here.</body></comment><class><name>TestGeneratingObject</name><environment>External.DLLCCTestSuite</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></class><comment><class-id>External.DLLCCTestSuite.TestGeneratingObject</class-id><body>TestGeneratingObject s an abstract superclass for the various classes in DLLCCTestSuite namespace that shares some utility methods between them.</body></comment><class><name>TestProcedureParameter</name><environment>External.DLLCCTestSuite</environment><super>External.DLLCCTestSuite.TestGeneratingObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type value fieldCounter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></class><comment><class-id>External.DLLCCTestSuite.TestProcedureParameter</class-id><body>TestProcedureParameter defines a parameter for one of the test suite routines.Instance Variables:	name	&lt;String&gt; the name of the parameter	type	&lt;CScalarType&gt; the CType of the parameter	value	&lt;Number | nil&gt; the actual parameter value to be used on invocation of a routine with this parameter</body></comment><class><name>TestProcedure</name><environment>External.DLLCCTestSuite</environment><super>External.DLLCCTestSuite.TestProcedureParameter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parameters actualParameters body </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></class><comment><class-id>External.DLLCCTestSuite.TestProcedure</class-id><body>TestProcedure represents a single C test procedure and is used to generate the declaration, the definition, the external interface and the test call for that procedure..Instance Variables:	body					&lt;String&gt;	 the body of the C code test prodecure to be called, an expression preceding a C return statement.	expectedReturnValue	&lt;Number |Boolean | UndefinedObject&gt;	the procdure's expected return value if its invocation functions correctly	name					&lt;String&gt; the name of the C test procedure	parameters				&lt;(Array of: (TestProcedureParameter))&gt; the C procedure's parameters	actualParameters		&lt;(Array of: (TestProcedureParameter))&gt; the parameters used to invoke the procedure when testing, which may differ	returnType				&lt;CType&gt; the C procedure's return type</body></comment><class><name>CallbackTestProcedure</name><environment>External.DLLCCTestSuite</environment><super>External.DLLCCTestSuite.TestProcedure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></class><class><name>DLLCCCAPITestSuiteGenerator</name><environment>External.DLLCCTestSuite</environment><super>External.DLLCCTestSuite.TestGeneratingObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parameters structs procs callbackTestIndex signedCharType testIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></class><comment><class-id>External.DLLCCTestSuite.DLLCCCAPITestSuiteGenerator</class-id><body>DLLCCCAPITestSuiteGenerator generates a C ABI test suite for DLLCC and the Smalltalk code to interface to it and invoke it.Instance Variables:	parameters	&lt;(SequenceableCollection of: (TestProcedureParameter))&gt; the set of parameters used to test the API.  Each parameter is a tuple fo a name, a type and a value.	structs		&lt;Array of: (TestProcedureParameter)&gt;	a large, a small and a tiny structure for checking structure-passing.	procs		&lt;(SequenceableCollection of: TestProcedure)&gt; the entire test suite this class builds.  Each TestProcedure describes a test routine, its parameters and expected return type, from which all relevant code can be generated.	callbackTestIndex	&lt;Integer&gt; a counter used to create callback test routine names.	signedCharType	&lt;CIntegerType&gt;	modified signedChar which prints as signed char to allow compilation on platforms where the unqualified type might be read as unsigned.	testIndex	&lt;Integer&gt; a counter used to create test routine names (test001 on up).</body></comment><class><name>BooleanTestProcedure</name><environment>External.DLLCCTestSuite</environment><super>External.DLLCCTestSuite.TestProcedure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></class><comment><class-id>External.DLLCCTestSuite.BooleanTestProcedure</class-id><body>BooleanTestProcedure is a refinement of TestProcedure that tests both for the expected return value (true) and its converse (false).</body></comment><class><name>CallbackTestProcedureParameter</name><environment>External.DLLCCTestSuite</environment><super>External.DLLCCTestSuite.TestProcedureParameter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parameters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing-Support</category><attributes><package>DLLCC Test Suite-Generator</package></attributes></class><methods><class-id>External.DLLCCTestSuite.TestGeneratingObject</class-id> <category>suite building</category><body package="DLLCC Test Suite-Generator">cPrintStringFor: numBoolOrSym type: aCType	numBoolOrSym isCharacters ifTrue: [^numBoolOrSym].	numBoolOrSym == true ifTrue: [^'1'].	numBoolOrSym == false ifTrue: [^'0'].	numBoolOrSym respondsToArithmetic ifFalse:		[^'?'].	numBoolOrSym isInteger ifTrue:		[aCType dataSize &gt; 4 ifTrue:			[^'C64(', numBoolOrSym printString, (aCType isSigned ifTrue: [')'] ifFalse: ['U)'])].		^numBoolOrSym printString, ((aCType dataSize &lt; 4								   or: [self isIntegerType: aCType])										ifTrue: ['']										ifFalse: [aCType isSigned ifTrue: ['L'] ifFalse: ['U']])].	numBoolOrSym class instanceByteSize = 4 ifTrue:		[^numBoolOrSym printString, 'f'].	^numBoolOrSym printString copyReplaceAll: 'd' with: 'e'</body><body package="DLLCC Test Suite-Generator">compareSettingFlags: argVector	^self streamContents:		[:stream|		 stream			nextPutAll: (argVector size &gt;= 31							ifTrue: ['unsigned long long ok = C64(0);']							ifFalse: ['unsigned long ok = 0;']);			cr.		 argVector			with: (0 to: argVector size - 1)			do: [:param :flag|				stream crtab; nextPutAll: 'if ('.				param type == CLimitedPrecisionRealType double					ifTrue:						[stream							nextPutAll: 'fabs(';							nextPutAll: param name;							nextPutAll: ' - ', (self cPrintStringFor: param value type: param type);							nextPutAll: ') &lt;= ';							nextPutAll: (self cPrintStringFor:  (self mostSignificantDigitOf: param value) / 1d15 type: param type)]					ifFalse:						[stream							nextPutAll: (param type isComposite											ifTrue: [self structCompareForParam: param]											ifFalse: [param name, ' == ', (self cPrintStringFor: param value type: param type)])].				stream					nextPut: $);					crtab: 2;					nextPutAll: (argVector size &gt;= 31									ifTrue: ['ok |= C64(1U) &lt;&lt; ']									ifFalse: ['ok |= 1 &lt;&lt; ']);					print: flag;					nextPut: $;].		 stream cr]</body><body package="DLLCC Test Suite-Generator">compositeTypeFrom: aCType	^aCType type isPointer		ifTrue: [aCType type referentType resultType type] "callback types"		ifFalse: [aCType type] "everything else"</body><body package="DLLCC Test Suite-Generator">defaultDoubleIncrement	"Answer a value to increment the defaultValueFor: double by in long arg vectors."	| doubleIncrement defaultDouble |	doubleIncrement := 1d.	defaultDouble := self defaultValueForType: CLimitedPrecisionRealType double.	[doubleIncrement * 10d &lt;= defaultDouble] whileTrue:		[doubleIncrement := doubleIncrement * 10d].	^doubleIncrement</body><body package="DLLCC Test Suite-Generator">defaultLargeValueForType: aCScalarType	"Answer a value with more-or-less every other bit set that is negative if the value is signed."	| bits |	^aCScalarType isIntegral		ifTrue:			[aCScalarType isBoolean ifTrue:				[^1].			 aCScalarType isSigned				ifTrue:					[(16r5555555555555555 bitShift: aCScalarType numBits - ((self isIntegerType: aCScalarType)																			ifTrue: [72]																			ifFalse: [64])) negated]				ifFalse:					[16rAAAAAAAAAAAAAAAA bitAnd: ((self isIntegerType: aCScalarType)															ifTrue: [aCScalarType maxVal bitShift: -8]															ifFalse: [aCScalarType maxVal])]]		ifFalse:			["for floating-point leave some zeros in the mantissa to			  avoid rounding issues, and bump up the exponent a little."			 bits := UninterpretedBytes new: 8.			 bits unsignedLongLongAt: 1 put: 16rCAAAAA00CAAAAA00.			 aCScalarType dataSize = 4				ifTrue: [bits floatAt: 1]				ifFalse: [bits doubleAt: 1]]</body><body package="DLLCC Test Suite-Generator">defaultValueForType: aCType 	aCType isVoid ifTrue:		[^nil].	aCType isIntegral ifTrue:		[| v i |		 aCType isBoolean ifTrue:			[^true].		 aCType dataSize = 1 ifTrue:			[^aCType isSigned ifTrue: [-94 "$Â¢"] ifFalse: [$c asInteger]].		"for larger values use 123456789012....."		v := 0. i := 1.		[v * 10 &gt;= aCType maxVal] whileFalse:			[v := v * 10 + (i \\ 10).			 i := i + 1].		^aCType isSigned ifTrue: [v negated] ifFalse: [v]].	^aCType dataSize = 4		ifTrue: [123.456]		ifFalse: [1.2345678901235d8]</body><body package="DLLCC Test Suite-Generator">defaultValueForType: aCType incremented: incrementBool	| value |	value := self defaultValueForType: aCType.	incrementBool ifTrue:		[value := aCType == CLimitedPrecisionRealType double					ifTrue: [value + self defaultDoubleIncrement]					ifFalse: [value + 1]].	^value</body><body package="DLLCC Test Suite-Generator">isIntegerType: aCScalarType 	^aCScalarType == CIntegerType int 	 or: [aCScalarType == CIntegerType unsignedInt]</body><body package="DLLCC Test Suite-Generator">mostSignificantDigitOf: aDouble	"Answer the value of aDoible with all digits other than the most significant replaced with zero."	| doubleIncrement |	doubleIncrement := aDouble printString first digitValue asDouble.	[doubleIncrement * 10d &lt;= aDouble] whileTrue:		[doubleIncrement := doubleIncrement * 10d].	^doubleIncrement</body><body package="DLLCC Test Suite-Generator">shouldIncrementStructParam: structParam	| last |	last := structParam name last.	^(last isUppercase and: [structParam name last asInteger odd])	 or: [last isDigit and: [last digitValue even]] "for XYZ012...($Z asInteger odd ~~ $0 digitValue even)"</body><body package="DLLCC Test Suite-Generator">smalltalkStructCompareFor: aVariable type: aCType usingLocalFieldVariableName: aLocalVariableName on: stream	^self		smalltalkStructCompareFor: aVariable		type: aCType		increment: false		usingLocalFieldVariableName: aLocalVariableName		on: stream</body><body package="DLLCC Test Suite-Generator">smalltalkStructCompareForParam: aParam usingLocalFieldVariableName: aLocalVariableName on: stream	^self		smalltalkStructCompareFor: aParam name		type: aParam type		increment: (self shouldIncrementStructParam: aParam)		usingLocalFieldVariableName: aLocalVariableName		on: stream</body><body package="DLLCC Test Suite-Generator">streamContents: aBlock	| stream |	stream := (String new: 64) writeStream.	aBlock value: stream.	^stream contents</body><body package="DLLCC Test Suite-Generator">structCompareFor: aCTypedefType named: aString	| stream |	stream := String new writeStream.	self cStructOperation: #compare for: aCTypedefType named: aString increment: false on: stream.	^stream contents</body><body package="DLLCC Test Suite-Generator">structCompareForParam: aParam	| stream |	stream := String new writeStream.	self cStructOperation: #compare		for: aParam type		named: aParam name		increment: (self shouldIncrementStructParam: aParam)		on: stream.	^stream contents</body><body package="DLLCC Test Suite-Generator">structDeclFor: aCTypedefType named: aString	^self structDeclFor: aCTypedefType named: aString increment: false</body><body package="DLLCC Test Suite-Generator">structDeclFor: aCTypedefType named: aString increment: aBoolean	| stream |	stream := String new writeStream.	stream nextPutAll: aCTypedefType name; space; nextPutAll: aString; nextPut: $;.	self cStructOperation: #assign for: aCTypedefType named: aString increment: aBoolean on: stream.	^stream contents</body></methods><methods><class-id>External.DLLCCTestSuite.TestGeneratingObject</class-id> <category>private-suite building</category><body package="DLLCC Test Suite-Generator">cStructOperation: aSymbol for: aCTypedefType named: aString increment: incrementBool on: stream	| lastPosition |	aCTypedefType type keysAndValuesDo:		[:memberName :member| | type |		type := member value.		aSymbol == #assign ifTrue: [stream crtab].		stream			nextPutAll: aString;			nextPut: $.;			nextPutAll: memberName.		type isComposite ifTrue:			[stream nextPut: $.; nextPutAll: (type type memberNameAt: 1).			 type := type type memberTypeAt: 1].		stream			nextPutAll: (aSymbol == #assign ifTrue: [' = '] ifFalse: [' == ']);			nextPutAll: (self cPrintStringFor: (self defaultValueForType: type incremented: incrementBool) type: type).		aSymbol == #assign			ifTrue: [stream nextPut: $;]			ifFalse: [lastPosition := stream position. stream crtab; nextPutAll: ' &amp;&amp; ']].	aSymbol == #compare ifTrue: [stream position: lastPosition]</body><body package="DLLCC Test Suite-Generator">smalltalkStructCompareFor: aVariableName type: aCType increment: incrementBool usingLocalFieldVariableName: localVariableName on: stream	| count |	count := 0.	(self compositeTypeFrom: aCType) keysAndValuesDo:		[:memberName :member| | memberType fieldTag |		 (count := count + 1) &gt; 1 ifTrue:			[stream crtab; nextPutAll: 'and: ['].		 stream			nextPutAll: localVariableName; nextPutAll: ' := #(';			print: (fieldTag := self nextFieldCount);			space;			store: memberName;			nextPutAll: ') -&gt; (';			nextPutAll: aVariableName;			nextPutAll: ' memberAt: ';			store: memberName;			nextPutAll: ').';			crtab.		 (memberType := member value) isComposite ifTrue:			[stream				tab;				nextPutAll: localVariableName; nextPutAll: ' := #(';				print: fieldTag;				space;				store: (memberType type memberNameAt: 1);				nextPutAll: ') -&gt; ('; nextPutAll: localVariableName; nextPutAll: ' value memberAt: ';				store: (memberType type memberNameAt: 1);				nextPutAll: ').';				crtab.			 memberType := memberType type memberTypeAt: 1].		 stream tab.		 count = 1 ifTrue: [stream nextPut: $(].		 stream			nextPutAll: localVariableName; nextPutAll: ' value = ';			print: (self defaultValueForType: memberType incremented: incrementBool)].	count - 1 timesRepeat: [stream nextPut: $]].	stream nextPut: $)</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedureParameter</class-id> <category>code generation</category><body package="DLLCC Test Suite-Generator">generateDefaultInstanceMethodOn: stream 	stream nextPutAll: name; crtab; nextPutAll: '| '; nextPutAll: name; nextPutAll: ' |'; crtab.	stream nextPutAll: name; nextPutAll: ' := self '; print: type; nextPutAll: ' new.'; crtab.	type type keysAndValuesDo:		[:memberName :member| | memberType |		 stream nextPutAll: name; nextPutAll: ' memberAt: '; store: memberName; nextPutAll: ' put: '.		 (memberType := member value) isComposite			ifTrue:				[stream nextPutAll: 'self '; nextPutAll: memberName.				 (self shouldIncrementStructParam: self) ifTrue: [stream nextPut: $A]]			ifFalse:				[stream print: (self defaultValueForType: memberType incremented: (self shouldIncrementStructParam: self))].		stream nextPut: $.; crtab].	stream nextPut: $^; nextPutAll: name</body><body package="DLLCC Test Suite-Generator">printAsStActualParameterOn: stream	type isComposite		ifTrue: [stream nextPutAll: 'self interface '; nextPutAll: name]		ifFalse: [value printOn: stream]</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedureParameter</class-id> <category>accessing</category><body package="DLLCC Test Suite-Generator">name	^name</body><body package="DLLCC Test Suite-Generator">name: anObject	name := anObject</body><body package="DLLCC Test Suite-Generator">type	^type</body><body package="DLLCC Test Suite-Generator">type: anObject	type := anObject</body><body package="DLLCC Test Suite-Generator">value	^value</body><body package="DLLCC Test Suite-Generator">value: anObject	value := anObject</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedureParameter</class-id> <category>private-accessing</category><body package="DLLCC Test Suite-Generator">nextFieldCount	fieldCounter isNil ifTrue:		[fieldCounter := 0].	^(fieldCounter := fieldCounter + 1)</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedureParameter</class-id> <category>printing</category><body package="DLLCC Test Suite-Generator">printOn: aStream	super printOn: aStream.	name isString ifTrue: [aStream space; nextPutAll: name].	type notNil ifTrue: [aStream space; print: type].	value notNil ifTrue: [aStream space; print: value]</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedure</class-id> <category>accessing</category><body package="DLLCC Test Suite-Generator">actualParameters	^actualParameters</body><body package="DLLCC Test Suite-Generator">actualParameters: anObject	actualParameters := anObject isNil ifTrue: [#()] ifFalse: [anObject asArray]</body><body package="DLLCC Test Suite-Generator">body	^body</body><body package="DLLCC Test Suite-Generator">body: anObject	body := anObject</body><body package="DLLCC Test Suite-Generator">expectedReturnValue	^value</body><body package="DLLCC Test Suite-Generator">expectedReturnValue: anObject	value := anObject</body><body package="DLLCC Test Suite-Generator">parameters: anObject	parameters := anObject isNil ifTrue: [#()] ifFalse: [anObject asArray]</body><body package="DLLCC Test Suite-Generator">returnType: anObject	type := anObject</body><body package="DLLCC Test Suite-Generator">testRunMethodName	^'run', (name copy at: 1 put: name first asUppercase; yourself)</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedure</class-id> <category>code generation</category><body package="DLLCC Test Suite-Generator">asExternalProcedure	^ExternalProcedure new		name: name;		type: (CProcedureType				resultType: type				argumentTypes: (parameters collect: [:tpp| tpp type])				argumentNames: (parameters collect: [:tpp| tpp name]));		yourself</body><body package="DLLCC Test Suite-Generator">asExternalThreadedProcedure	| ep |	ep := self asExternalProcedure.	ep type beThreaded.	^ep</body><body package="DLLCC Test Suite-Generator">generateAdditionalPostCallCodeOn: stream	"This is a hook for the CallbackTestProcedure subclass."</body><body package="DLLCC Test Suite-Generator">generateAdditionalPreCallCodeOn: stream	"This is a hook for the CallbackTestProcedure subclass."</body><body package="DLLCC Test Suite-Generator">generateAdditionalTemporaryNamesOn: stream	"This is a hook for the CallbackTestProcedure subclass."</body><body package="DLLCC Test Suite-Generator">generateCBodyOn: stream	| decl |	decl := self streamContents: [:s| self asExternalProcedure printDeclOn: s].	"I _like_ the procedure name at the start of the line!"	decl at: (decl indexOfSubCollection: ' ', name, '(' startingAt: 1) put: Character cr.	stream nextPutAll: decl.	stream cr; nextPut: ${; crtab; nextPutAll: body; cr; nextPut: $}; cr; cr</body><body package="DLLCC Test Suite-Generator">generateCHeaderOn: stream 	stream nextPutAll: 'extern '.	self asExternalProcedure printDeclOn: stream.	stream nextPut: $;; cr</body><body package="DLLCC Test Suite-Generator">generateCTestCallOn: stream	stream tab; nextPut: ${.	type isVoid ifFalse:		[stream space; print: type; space; nextPutAll: 'result;'; cr; crtab: 2.		 stream nextPutAll: 'result = '].	stream nextPutAll: name; nextPut: $(.	actualParameters		do: [:param|			stream nextPutAll: (param type isComposite								ifTrue: [param name]								ifFalse: [self cPrintStringFor: param value type: param type])]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ');'.	(type isVoid not	 or: [self isCallbackTest]) ifTrue:		[| erv |		 erv := self expectedReturnValue.		 stream crtab: 2; nextPutAll: 'if ('.		 type isVoid			ifTrue: [stream nextPutAll: '!invoked)']			ifFalse:				[type isComposite					ifTrue:						[stream							nextPutAll: '!(';							nextPutAll: (self structCompareFor: type named: 'result');							nextPutAll: '))']					ifFalse:						[(type isIntegral and: [type isBoolean])							ifTrue: [value ifTrue: [stream nextPut: $!]]							ifFalse:								[stream									nextPutAll: (self cPrintStringFor: erv type: type);									nextPutAll: ' != '].						stream nextPutAll: 'result)']].		stream			crtab: 3;			nextPutAll: ('{ failed = 1; printf("&lt;1s&gt; failed' expandMacrosWith: name);			nextPutAll: ((type isVoid or: [type isComposite])						ifTrue: [' (&lt;1s&gt;)\n"); }' expandMacrosWith: (type isVoid ifTrue: ['not invoked'] ifFalse: [type name])]						ifFalse:							[' result is &lt;1s&gt; expected &lt;2s&gt;)\n", &lt;3s&gt;result); }'								expandMacrosWith: (type isIntegral													ifTrue: [type dataSize &gt; 4 ifTrue: ['" LLFS "x'] ifFalse: ['%lx']]													ifFalse: ['%g'])								with: (type isIntegral										ifTrue:											[(type isBoolean											 or: [erv + 1 ~= (1 bitShift: erv abs highBit)])												ifTrue: [self cPrintStringFor: erv type: type]												ifFalse: [((erv bitAnd: (1 bitShift: erv abs highBit) - 1) printStringRadix: 16) asLowercase]]										ifFalse: [erv printString])								with: ((type isIntegral and: [type dataSize &lt;= 4]) ifTrue: ['(unsigned long)'] ifFalse: [''])])].	stream crtab; nextPut: $}; cr; cr</body><body package="DLLCC Test Suite-Generator">generateStExternalInterfaceOn: stream 	stream nextPutAll: (self asExternalProcedure methodWithKeyword: self defaultKeyword)</body><body package="DLLCC Test Suite-Generator">generateStTestCallOn: stream 	| useParamCopy copyParams keyword |	keyword := self defaultKeyword copyWithout: $:.	stream nextPutAll: self testRunMethodName; crtab.	stream nextPutAll: '&lt;test&gt;'; crtab.	stream nextPutAll: '| result'.	type isComposite ifTrue:		[stream nextPutAll: ' field'].	(useParamCopy := actualParameters size &gt; 2					 and: [(copyParams := actualParameters copyFrom: 2 to: 3) first type isComposite					 and: [(3 to: actualParameters size) allSatisfy:							[:i| (actualParameters at: i) type = copyParams first type]]]) ifTrue:		[copyParams do: [:copyParam| stream space; nextPutAll: copyParam name]].	self generateAdditionalTemporaryNamesOn: stream.	stream nextPutAll: ' |'; crtab.	useParamCopy ifTrue:		[copyParams do:			[:copyParam|			 stream nextPutAll: copyParam name; nextPutAll: ' := '.			 copyParam printAsStActualParameterOn: stream.			 stream nextPut: $.; crtab]].	self generateAdditionalPreCallCodeOn: stream.	stream		nextPutAll: 'result := self interface ';		nextPutAll: name.	actualParameters		do: [:param |			stream nextPut: $:; space.			(useParamCopy and: [param type isComposite])				ifTrue: [stream nextPutAll: param name]				ifFalse: [param printAsStActualParameterOn: stream]]		separatedBy: [stream space; nextPutAll: keyword].	stream nextPut: $.; crtab.	self generateAdditionalPostCallCodeOn: stream.	type isComposite		ifTrue: [self smalltalkStructCompareFor: 'result' type: type usingLocalFieldVariableName: 'field' on: stream]		ifFalse: [stream print: self expectedReturnValue; nextPutAll: ' = result'].	stream		nextPutAll: ' ifFalse:';		crtab: 2;		nextPutAll: '[self message: ''';		nextPutAll: name;		nextPutAll: ' failed'']';		cr;		cr.	stream		nextPut: $";		nextPutAll: ((self streamContents: [:subStream| self generateCBodyOn: subStream]) copyReplaceAll: '!' with: '!!');		nextPut: $"</body><body package="DLLCC Test Suite-Generator">generateStThreadedExternalInterfaceOn: stream 	stream nextPutAll: (self asExternalThreadedProcedure methodWithKeyword: self defaultKeyword)</body><body package="DLLCC Test Suite-Generator">hasAssociatedTypedef	^false</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedure</class-id> <category>testing</category><body package="DLLCC Test Suite-Generator">isCallbackTest	^false</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedure</class-id> <category>private</category><body package="DLLCC Test Suite-Generator">defaultKeyword	^parameters size &gt; 30		ifTrue: [self class alternateKeyword]		ifFalse: [#with:]</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedure class</class-id> <category>instance creation</category><body package="DLLCC Test Suite-Generator">name: nameString returnType: aCType expectedReturnValue: anObject parameters: aSequenceOrNil actualParameters: bSequenceOrNil body: bodyString	^self new		name: nameString;		returnType: aCType;		expectedReturnValue: anObject;		parameters: aSequenceOrNil;		actualParameters: bSequenceOrNil;		body: bodyString;		yourself</body><body package="DLLCC Test Suite-Generator">name: nameString returnType: aCType expectedReturnValue: anObject parameters: aSequenceOrNil body: bodyString	^self new		name: nameString;		returnType: aCType;		expectedReturnValue: anObject;		parameters: aSequenceOrNil;		actualParameters: aSequenceOrNil;		body: bodyString;		yourself</body></methods><methods><class-id>External.DLLCCTestSuite.TestProcedure class</class-id> <category>accessing</category><body package="DLLCC Test Suite-Generator">alternateKeyword	^#w:</body></methods><methods><class-id>External.DLLCCTestSuite.CallbackTestProcedure</class-id> <category>private-accessing</category><body package="DLLCC Test Suite-Generator">callback	^parameters detect: [:param| param type type isProcedurePointer]</body></methods><methods><class-id>External.DLLCCTestSuite.CallbackTestProcedure</class-id> <category>code generation</category><body package="DLLCC Test Suite-Generator">generateAdditionalPostCallCodeOn: stream	stream nextPutAll: 'invoked ifFalse: [self message: '; print: name, ' failed to callback'; nextPutAll: '].'; crtab</body><body package="DLLCC Test Suite-Generator">generateAdditionalPreCallCodeOn: stream	stream crtab; nextPutAll: 'invoked := false.'.	stream crtab; nextPutAll: self callback name; nextPutAll: ' := CCallback'; crtab: 2; nextPutAll: 'do:'.	self callback generateStCallbackBlockOn: stream withReturnValue: value.	stream crtab: 2; nextPutAll: 'ofType: self interface '; print: self callback type; nextPut: $.; crtab.</body><body package="DLLCC Test Suite-Generator">generateAdditionalTemporaryNamesOn: stream	stream nextPutAll: ' invoked '; nextPutAll: self callback name</body><body package="DLLCC Test Suite-Generator">generateCCallbackBodyOn: stream 	self callback generateCCallbackBlockOn: stream withReturnValue: value</body><body package="DLLCC Test Suite-Generator">generateCHeaderOn: stream 	self callback type printDeclOn: stream.	stream nextPut: $;; cr.	super generateCHeaderOn: stream.</body><body package="DLLCC Test Suite-Generator">generateRequiredFarTypedefOn: stream	self callback generateRequiredFarTypedefOn: stream</body><body package="DLLCC Test Suite-Generator">generateRequiredTypedefOn: stream	self callback generateRequiredTypedefOn: stream</body><body package="DLLCC Test Suite-Generator">hasAssociatedTypedef	^true</body></methods><methods><class-id>External.DLLCCTestSuite.CallbackTestProcedure</class-id> <category>testing</category><body package="DLLCC Test Suite-Generator">isCallbackTest	^true</body></methods><methods><class-id>External.DLLCCTestSuite.DLLCCCAPITestSuiteGenerator</class-id> <category>file output</category><body package="DLLCC Test Suite-Generator">addAlternateStructs	structs := structs, (structs collect: [:param| param copy name: param name, 'A'; yourself])</body><body package="DLLCC Test Suite-Generator">cCopyright	^self copyright copyReplaceAll: 'Â©' with: '(c)'</body><body package="DLLCC Test Suite-Generator">copyright	^SystemUtils copyright copyUpTo: Character cr</body><body package="DLLCC Test Suite-Generator">generateCode	"self new generateCode"	self buildCallTests.	self buildCallbackTests.	self outputCode</body><body package="DLLCC Test Suite-Generator">generateStructInfoOn: stream	| putSpecifiers putSizesAndOffsets |	stream nextPutAll: '#define sizeAndOffset(b,f) sizeof(f), (char *)&amp;(f) - (char *)&amp;(b), (char *)&amp;(f) + sizeof(f) - (char *)&amp;(b)'; cr; cr.	putSpecifiers := [:structType :prefix|					structType type keysAndValuesDo:						[:memberName :member| | type |						(type := member value type) isComposite							ifTrue:								[putSpecifiers value: type value: prefix, memberName, '.']							ifFalse:								[stream nextPutAll: '\t %ld %2ld -&gt; %2ld '; nextPutAll: prefix;  nextPutAll: memberName; nextPutAll: '\n']]].	putSizesAndOffsets := [:basename :structType :prefix|						structType type keysAndValuesDo:							[:memberName :member| | type |							(type := member value) isComposite								ifTrue:									[putSizesAndOffsets value: basename value: type value: prefix, memberName, '.']								ifFalse:									[stream nextPutAll: ', sizeAndOffset('; nextPutAll: basename; nextPutAll: ', '; nextPutAll: prefix;  nextPutAll: memberName; nextPut: $)]]].	(structs copyFrom: 1 to: structs size / 2) do:		[:struct|		stream cr; crtab; nextPutAll: 'printf("\n'; nextPutAll: struct name; nextPutAll: ' %d\n'.		putSpecifiers value: struct type value: ''.		stream nextPutAll: '",'; crtab: 2; nextPutAll: 'sizeof('; nextPutAll: struct name; nextPut: $).		putSizesAndOffsets value: struct name value: struct type value: struct name, '.'.		stream nextPutAll: ');'; cr].</body><body package="DLLCC Test Suite-Generator">outputCTestRuns	| decls |	decls := structs collect: [:param| self structDeclFor: param type named: param name increment: param name last == $A].	self		withStreamFrom: 'testcabi.c'		do: [:stream|			self writeCHeaderOn: stream.			stream nextPutAll: '#include &lt;stdio.h&gt;'; cr.			stream nextPutAll: '#include "cptstcabi.h"'; cr; cr.			stream nextPutAll: 'int invoked = 0, failed = 0;'; cr.			(procs select: [:proc| proc isCallbackTest])				do: [:proc| proc generateCCallbackBodyOn: stream].			stream nextPutAll: '&lt;n&gt;int&lt;n&gt;main()&lt;n&gt;{&lt;n&gt;' expandMacros.			decls do:				[:decl| stream nextPutAll: (decl copyUpTo: Character cr); cr].			stream cr.			decls do:				[:decl|				stream nextPutAll: (decl copyFrom: (decl indexOf: Character cr) + 1 to: decl size); cr; cr].			procs				do: [:proc| stream cr. proc generateCTestCallOn: stream].			stream tab; nextPutAll: 'if (!failed) printf("all tests pass\n");'; cr.			self generateStructInfoOn: stream.			stream tab; nextPutAll: 'return 0;'; cr; nextPut: $}; cr].</body><body package="DLLCC Test Suite-Generator">outputCTestSuite	self		withStreamFrom: 'cptstcabi.c'		do: [:stream|			self writeCHeaderOn: stream.			stream nextPutAll: '#include &lt;math.h&gt; /* for fabs */'; cr.			stream nextPutAll: '#include "cptstcabi.h"'; cr.			procs do: [:proc| proc generateCBodyOn: stream]]</body><body package="DLLCC Test Suite-Generator">outputCTestSuiteHeader	self		withStreamFrom: 'cptstcabi.h'		do: [:stream|			self writeCHeaderOn: stream.			stream nextPutAll: 'extern double fabs(double);&lt;n&gt;#define __bool /**/&lt;n&gt;#if defined(_WIN32)&lt;n&gt;# define C64(n) n ## i64&lt;n&gt;# define LLFS "%%I64"&lt;n&gt;#else&lt;n&gt;# define C64(n) n ## LL&lt;n&gt;# define LLFS "%%ll"&lt;n&gt;#endif&lt;n&gt;'								expandMacros.			structs do:				[:structParam| structParam type printDeclOn: stream. stream nextPut: $;; cr; cr. ].			procs do: [:proc| proc generateCHeaderOn: stream]].</body><body package="DLLCC Test Suite-Generator">outputCode	"self new buildSimpleReturns outputCode"	self outputCTestSuiteHeader.	self outputCTestSuite.	self outputStTestSuiteInterface.	self outputStTestRuns.	self outputCTestRuns.</body><body package="DLLCC Test Suite-Generator">outputStTestRuns	self		withStreamFrom: 'testcabi.st'		do: [:stream| | tests |			self writeStHeaderOn: stream.			tests := self streamContents:				[:testsStream|				stream nextPutAll: '!DLLANDCTest methodsFor: ''individual C api tests''!'; cr.				procs					do:						[:proc|						 testsStream nextPutAll: proc testRunMethodName; space.						 proc generateStTestCallOn: stream]					separatedBy: [stream nextPut: $!; cr; cr].				stream nextPutAll: '! !'; cr; cr].			stream nextPutAll: '!DLLANDCTest methodsFor: ''top level''!'; cr.			stream nextPutAll: 'nonUPTests'; crtab; nextPutAll: '^#('; nextPutAll: tests; nextPutAll: ')!'; cr]</body><body package="DLLCC Test Suite-Generator">outputStTestSuiteInterface	self		withStreamFrom: 'cptstcabi.st'		do: [:stream|			self writeStHeaderOn: stream.			#('Blocking' 'Threaded')			 with: #(	generateStExternalInterfaceOn: generateStThreadedExternalInterfaceOn:)				do: [:subName :method|					stream nextPutAll: '!DLLANDCTest'; nextPutAll: subName; nextPutAll: 'Interface methodsFor: ''C api test procedures''!'; cr.					procs						do: [:proc| proc perform: method with: stream]						separatedBy: [stream nextPut: $!; cr; cr].					stream nextPutAll: '! !'; cr; cr].			stream nextPutAll: '!DLLANDCTestInterface methodsFor: ''default values''!'; cr.			self addAlternateStructs.			structs				do: [:structParam| structParam generateDefaultInstanceMethodOn: stream]				separatedBy: [stream nextPut: $!; cr; cr].			stream nextPut: $!; cr]</body><body package="DLLCC Test Suite-Generator">packageName	^(Store.Registry containingPackageForClass: self class) name</body><body package="DLLCC Test Suite-Generator">writeCHeaderOn: anExternalStream	anExternalStream nextPut: $/; next: 70 put: $*; cr.	anExternalStream space; nextPut: $*; cr.	anExternalStream space; nextPutAll: '* File: '; nextPutAll: anExternalStream name; cr.	anExternalStream space; nextPut: $*; cr.	anExternalStream space; nextPutAll: '* Generated by '; nextPutAll: self class name; cr.	anExternalStream nextPutAll: ' * in package '; nextPutAll: self packageName; cr.	anExternalStream space; nextPutAll: '* on '; print: Date today; cr.	anExternalStream space; nextPut: $*; cr.	anExternalStream space; nextPut: $*; tab; nextPutAll: self cCopyright; cr.	anExternalStream space; nextPut: $*; cr.	anExternalStream space; next: 69 put: $*; nextPut: $/; cr.</body><body package="DLLCC Test Suite-Generator">writeStHeaderOn: anExternalStream 	anExternalStream		print: (self streamContents:				[:stream|				 stream nextPutAll: 'File '; nextPutAll: anExternalStream name; crtab.				 stream nextPutAll: 'Generated by '; nextPutAll: self class name; crtab.				 stream nextPutAll: 'in package '; nextPutAll: self packageName; crtab.				 stream nextPutAll: 'on '; print: Date today; cr.				 stream nextPutAll: self copyright]);		nextPut: $!; cr; cr</body></methods><methods><class-id>External.DLLCCTestSuite.DLLCCCAPITestSuiteGenerator</class-id> <category>suite building</category><body package="DLLCC Test Suite-Generator">baseNameForHomogeneousArgListFor: param	| baseName |	param name first ~~ $a ifTrue:		[^param name].	baseName := param name					copyFrom: ((param name at: 2) = $n ifTrue: [3] ifFalse: [2])					to: param name size.	baseName at: 1 put: baseName first asLowercase.	^baseName</body><body package="DLLCC Test Suite-Generator">booleanParameters	| params |	params := #(booleanChar booleanShort booleanInt booleanLong booleanLongLong) collect:				[:boolSel| self parameterNamed: boolSel].	^params</body><body package="DLLCC Test Suite-Generator">buildBooleanCallbacks	| bpt bpf |	bpt := self booleanParameters.	bpf := self booleanParameters collect: [:param| param copy value: param value not].	bpt, bpf do:		[:param |		 self nextTestCallbackNames:			[:callbackName :testName| | argVector type callback |			type := param type.			callback := self callbackNamed: callbackName							returnType: type							parameters: (argVector := param value ifTrue: [bpt] ifFalse: [bpf]).			procs add: (CallbackTestProcedure							name: testName							returnType: type							expectedReturnValue: param value							parameters: (Array with: callback), argVector							body: callback callbackCBody)]]</body><body package="DLLCC Test Suite-Generator">buildCallTests	self buildSimpleReturns.	self buildSingleParameterCalls.	self buildLongHomogeneousArgListCalls.	self buildLongHeterogeneousArgListCalls.	self buildLongFPArgListCalls</body><body package="DLLCC Test Suite-Generator">buildCallbackTests	self buildSimpleCallbacks.	self buildBooleanCallbacks.	self buildLongHomogeneousArgListCallbacks.	self buildLongHeterogeneousArgListCallbacks.	self buildLongFPArgListCallbacks</body><body package="DLLCC Test Suite-Generator">buildFPCallbackTest: argVector	self nextTestCallbackNames:		[:callbackName :testName| | callback returnType |		callback := self callbackNamed: callbackName						returnType: (returnType := argVector first type)						parameters: argVector.		procs add:			(CallbackTestProcedure				name: testName				returnType: returnType				expectedReturnValue: (self defaultValueForType: returnType)				parameters: (Array with: callback), argVector				body: callback callbackCBody)]</body><body package="DLLCC Test Suite-Generator">buildFPTest: argVector	procs add:		(TestProcedure			name: self nextTestName			returnType: CIntegerType unsignedLongLong			expectedReturnValue: ((2 raisedTo: argVector size) - 1)			parameters: argVector			actualParameters: argVector			body: (self longArgListBodyFor: argVector))</body><body package="DLLCC Test Suite-Generator">buildLongFPArgListCallbacks	self longFPArgLists do: [:argList| self buildFPCallbackTest: argList]</body><body package="DLLCC Test Suite-Generator">buildLongFPArgListCalls	self longFPArgLists do: [:argList| self buildFPTest: argList]</body><body package="DLLCC Test Suite-Generator">buildLongHeterogeneousArgListCallbacks	| argVector |	argVector := parameters copy.	argVector removeFirst. "first is void"	argVector addAllLast: (argVector collect:							[:param|							param copy								name: (param type isComposite										ifTrue: [param name, 'A']										ifFalse: [param name copy asString at: 1 put: $b; yourself]);								value: (param value isNil ifFalse:											[param value + (param type == CLimitedPrecisionRealType double															ifTrue: [self defaultDoubleIncrement]															ifFalse: [1])]);								yourself]).	argVector size timesRepeat:		[self nextTestCallbackNames:			[:callbackName :testName|  | callback returnType |			callback := self callbackNamed: callbackName							returnType: (returnType := argVector first type)							parameters: argVector.			 procs add:				(CallbackTestProcedure					name: testName					returnType: returnType					expectedReturnValue: (self defaultValueForType: returnType)					parameters: (Array with: callback), argVector					body: callback callbackCBody)].		 argVector addLast: argVector removeFirst]</body><body package="DLLCC Test Suite-Generator">buildLongHeterogeneousArgListCalls	| argVector |	argVector := parameters copy.	argVector removeFirst. "first is void"	argVector addAllLast: (argVector collect:							[:param|							param copy								name: (param type isComposite										ifTrue: [param name, 'A']										ifFalse: [param name copy asString at: 1 put: $b; yourself]);								value: (param value isNil ifFalse:											[param value + (param type == CLimitedPrecisionRealType double															ifTrue: [self defaultDoubleIncrement]															ifFalse: [1])]);								yourself]).	argVector size timesRepeat:		[procs add:			(TestProcedure				name: self nextTestName				returnType: (argVector size &lt;= 32 ifTrue: [CIntegerType unsignedLong] ifFalse: [CIntegerType unsignedLongLong])				expectedReturnValue: ((2 raisedTo: argVector size) - 1)				parameters: argVector				actualParameters: argVector				body: (self longArgListBodyFor: argVector)).		 argVector addLast: argVector removeFirst]</body><body package="DLLCC Test Suite-Generator">buildLongHomogeneousArgListCallbacks	| paramList |	paramList := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123' asArray.	parameters do:		[:param|		param type isVoid ifFalse:			[self nextTestCallbackNames:				[:callbackName :testName| | declVector argVector baseName returnType callback |				 baseName := self baseNameForHomogeneousArgListFor: param.				 declVector := paramList collect: [:ch| param copy name: 'block_', baseName, (String with: ch); yourself].				 argVector := declVector collect: [:arg| arg copy].			 	 param type isComposite					ifTrue:						[argVector do:							[:arg|							 arg name: ((self shouldIncrementStructParam: arg)											ifTrue: [baseName, (String with: $A)]											ifFalse: [baseName])]]					ifFalse:						[argVector							with: (0 to: argVector size - 1)							do: [:arg :index|								arg value: arg value + (arg type == CLimitedPrecisionRealType double													ifTrue: [self defaultDoubleIncrement * index]													ifFalse: [index])]].				callback := self callbackNamed: callbackName								returnType: (returnType := param type)								parameters: (param type isComposite ifTrue: [declVector] ifFalse: [argVector]).				 procs add:					(CallbackTestProcedure						name: testName						returnType: returnType						expectedReturnValue: (self defaultValueForType: returnType)						parameters: (Array with: callback), declVector						actualParameters: (Array with: callback), argVector						body: callback callbackCBody)]]]</body><body package="DLLCC Test Suite-Generator">buildLongHomogeneousArgListCalls	| paramList |	paramList := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123' asArray.	parameters do:		[:param| | declVector argVector baseName |		param type isVoid ifFalse:			[baseName := self baseNameForHomogeneousArgListFor: param.			 declVector := paramList collect: [:ch| param copy name: baseName, (String with: ch); yourself].			 argVector := declVector collect: [:arg| arg copy].			 param type isComposite				ifTrue:					[argVector do:						[:arg|						 arg name: ((self shouldIncrementStructParam: arg)										ifTrue: [baseName, (String with: $A)]										ifFalse: [baseName])]]				ifFalse:					[argVector						with: (0 to: argVector size - 1)						do: [:arg :index| arg value: arg value + (arg type == CLimitedPrecisionRealType double																ifTrue: [self defaultDoubleIncrement * index]																ifFalse: [index])]].			 procs add:				(TestProcedure					name: self nextTestName					returnType: CIntegerType unsignedLong					expectedReturnValue: ((2 raisedTo: paramList size) - 1)					parameters: declVector					actualParameters: argVector					body: (self longArgListBodyFor: (param type isComposite													ifTrue: [declVector]													ifFalse: [argVector])))]]</body><body package="DLLCC Test Suite-Generator">buildSimpleCallbacks	parameters do:		[:param|		self nextTestCallbackNames:			[:callbackName :testName| | type callback expectedReturnValue |			type := param type.			expectedReturnValue := type isVoid ifFalse: [self defaultLargeValueForType: type].			callback := self callbackNamed: callbackName						returnType: type						parameters: (type isVoid ifFalse: [Array with: param]).			procs add: (CallbackTestProcedure							name: testName							returnType: type							expectedReturnValue: expectedReturnValue							parameters: (type isVoid											ifTrue: [Array with: callback]											ifFalse: [Array with: callback with: param])							body: callback callbackCBody)]]</body><body package="DLLCC Test Suite-Generator">buildSimpleReturns	parameters do:		[:bt| | type returnValue |		type := bt type.		returnValue := type isVoid ifFalse: [self defaultLargeValueForType: type].		procs add: (TestProcedure						name: self nextTestName						returnType: type						expectedReturnValue: returnValue						parameters: nil						body: (type isComposite								ifTrue:									[(self structDeclFor: type named: 's'), (String with: Character cr with: Character tab), 'return s;']								ifFalse:									['return ', (type isVoid										ifTrue: ['']										ifFalse:											[self cPrintStringFor: returnValue type: type]), ';']))]	"self new initialize buildSimpleReturns procedures"</body><body package="DLLCC Test Suite-Generator">buildSingleParameterCalls	(parameters collect:		[:param|		param copy			value: (param type ~= CVoidType void ifTrue:				[param type isComposite					ifTrue: [param name]					ifFalse: [self defaultLargeValueForType: param type]]);			yourself]),	self booleanParameters do:		[:param| | type |		(type := param type) ~= CVoidType void ifTrue:			[procs add: ((param type isComposite								ifTrue: [TestProcedure]								ifFalse: [BooleanTestProcedure])							name: self nextTestName							returnType: ((type isIntegral and: [type isBoolean not])											ifTrue: [type copy beBoolean]											ifFalse: [CIntegerType booleanInt])							expectedReturnValue: true							parameters: (Array with: param)							body: 'return ',								   (param type isComposite										ifTrue: [self structCompareForParam: param]										ifFalse: [param name, ' == ', (self cPrintStringFor: param value type: type)]),									';')]].	self booleanParameters do:		[:param|		#(true false) do:			[:erv|			procs add: (BooleanTestProcedure						name: self nextTestName						returnType: param type						expectedReturnValue: erv						parameters: (Array with: (param copy value: erv; yourself))						body: 'return ', param name, ' != 0;')]]	"self new initialize buildSingleParameterChecks procedures"</body><body package="DLLCC Test Suite-Generator">callbackNamed: aSymbol returnType: aCType parameters: parameterSequenceOrNil	| params |	params := parameterSequenceOrNil isNil ifTrue: [#()] ifFalse: [parameterSequenceOrNil].	^CallbackTestProcedureParameter new		name: 'a', aSymbol;		type: (CTypedefType new				name: aSymbol;				type: (CPointerType new						referentType: (CProcedureType										resultType: aCType										argumentTypes: (params collect: [:tpp| tpp type])										argumentNames: (params collect: [:tpp| tpp name])));				yourself);		value: 'a', aSymbol;		parameters: params;		yourself</body><body package="DLLCC Test Suite-Generator">longArgListBodyFor: argVector	^(self compareSettingFlags: argVector),	  (('' copy writeStream) crtab; nextPutAll: 'return ok;'; contents)</body><body package="DLLCC Test Suite-Generator">longFPArgLists	| argLists floats doubles longs |	argLists := Array new writeStream.	argLists nextPut:		(floats := (0 to: 63) collect:						[:i|						(TestProcedureParameter new)							name: 'f', i printString;							type: CLimitedPrecisionRealType float;							value: (self defaultValueForType: CLimitedPrecisionRealType float) + i;							yourself]).	argLists nextPut:		(doubles := (0 to: 63) collect:						[:i|						(TestProcedureParameter new)							name: 'd', i printString;							type: CLimitedPrecisionRealType double;							value: (self defaultValueForType: CLimitedPrecisionRealType double)								 + (i * self defaultDoubleIncrement);							yourself]).	longs := (0 to: 63) collect:						[:i|						(TestProcedureParameter new)							name: 'l', i printString;							type: CIntegerType long;							value: (self defaultValueForType: CIntegerType long) + i;							yourself].	argLists		nextPut: ((0 to: 63) collect: [:i| (i odd ifTrue: [floats] ifFalse: [doubles]) at: i + 1]);		nextPut: ((0 to: 63) collect: [:i| (i even ifTrue: [floats] ifFalse: [doubles]) at: i + 1]).	1 to: 5 do:		[:stride|		#(#(0 0 1) #(1 1 0) #(0 1 2) #(1 2 0) #(2 0 1)) do:			[:tuple|			[:floatCode :doubleCode :longCode|			argLists nextPut:				((0 to: 63) collect:					[:i|					(i // stride \\ 3 = floatCode ifTrue: [floats] ifFalse:					[i // stride \\ 3 = doubleCode ifTrue: [doubles] ifFalse:					[longs]]) at: i + 1])]				valueWithArguments: tuple]].	^argLists contents</body><body package="DLLCC Test Suite-Generator">nextTestCallbackNames: aDiadicBlock 	| numberString |	callbackTestIndex isNil ifTrue: [callbackTestIndex := 0].	numberString := (callbackTestIndex := callbackTestIndex + 1) printString.	numberString := ('000' copyFrom: 1 to: (3 - numberString size max: 0)), numberString.	^aDiadicBlock		value: ('Callback', numberString) asSymbol		value: ('testCallback', numberString)</body><body package="DLLCC Test Suite-Generator">nextTestName	"pad with leading zeros so the tests sort correctly in the Smalltalk browser..."	| string |	testIndex isNil ifTrue: [testIndex := 0].	string := (testIndex := testIndex + 1) printString.	^'test', ('000' copyFrom: 1 to: (3 - string size max: 0)), string</body><body package="DLLCC Test Suite-Generator">parameter: aSymbol type: aCType	^TestProcedureParameter new		name: aSymbol;		type: aCType;		yourself</body><body package="DLLCC Test Suite-Generator">parameterNamed: aCTypeSelector 	| name type |	name := aCTypeSelector asString copyReplaceAll: 'unsigned' with: 'U'.	name := name copyReplaceAll: 'boolean' with: 'Bool'.	name := name copyReplaceAll: 'signed' with: ''.	name at: 1 put: name first asUppercase.	name := (name first = $I ifTrue: ['an'] ifFalse: ['a']), name.	type := [CIntegerType perform: aCTypeSelector]				on: MessageNotUnderstood				do: [:ex| CLimitedPrecisionRealType perform: aCTypeSelector].	^(TestProcedureParameter new)		name: name;		type: type;		value: (self defaultValueForType: type);		yourself</body></methods><methods><class-id>External.DLLCCTestSuite.DLLCCCAPITestSuiteGenerator</class-id> <category>utilities</category><body package="DLLCC Test Suite-Generator">withStreamFrom: aString do: aBlock	| stream |	stream := aString asFilename writeStream.	[aBlock value: stream] ensure: [stream close]	"| dir stream |	dir := 'dts' asFilename.	(dir exists and: [dir isDirectory]) ifFalse: [dir makeDirectory].	stream := (dir construct: aString) writeStream.	[aBlock value: stream] ensure: [stream close]"</body></methods><methods><class-id>External.DLLCCTestSuite.DLLCCCAPITestSuiteGenerator</class-id> <category>initialize-release</category><body package="DLLCC Test Suite-Generator">initialize	"self new initialize"	| param charStruct smallStruct bigStruct structStream |	parameters :=  #(char unsignedChar short unsignedShort						signedInt unsignedInt signedLong unsignedLong						signedLongLong unsignedLongLong float double) asOrderedCollection collect:							[:selector| self parameterNamed: selector].	param := parameters first.	param type: (signedCharType := param type copy									printName: 'signed char'; "%$#@!&amp;^%$ SGI!"									yourself).	charStruct := self parameter: #charStruct					type: (CTypedefType new							name: #CharStruct;							type: (CCompositeType new at: #aChar put: #aChar -&gt; signedCharType; yourself)).	smallStruct := self parameter: #smallStruct					type: (CTypedefType new							name: #SmallStruct;							type: (CCompositeType new									at: #aShort put: #aShort -&gt; CIntegerType short;									at: #aUChar put: #aUChar -&gt; CIntegerType unsignedChar;									at: #aUShort put: #aShort -&gt; CIntegerType unsignedShort;									yourself)).	bigStruct := self parameter: #bigStruct					type: (CTypedefType new							name: #BigStruct;							type: CCompositeType new).	(parameters, (Array with: charStruct with: smallStruct)) do:		[:t|		bigStruct type type at: t name asSymbol put: t name asSymbol -&gt; t type].	(structStream := Array new writeStream)		nextPut: charStruct;		nextPut: smallStruct;		nextPut: (self parameter: #mediumStruct					type: (CTypedefType new								name: #MediumStruct;								type: (CCompositeType new										at: #anInt put: #anInt -&gt; CIntegerType int;										at: #aFloat put: #aFloat -&gt; CLimitedPrecisionRealType float;										yourself)));		nextPut: (self parameter: #largeStruct					type: (CTypedefType new								name: #LargeStruct;								type: (CCompositeType new										at: #aLong put: #aLong -&gt; CIntegerType long;										at: #aDouble put: #aDouble -&gt; CLimitedPrecisionRealType double;										at: #aULong put: #aULong -&gt; CIntegerType unsignedLong;										at: #aFloat put: #aFloat -&gt; CLimitedPrecisionRealType float;										yourself)));		nextPut: bigStruct.	parameters		addFirst: (self parameter: #void type: CVoidType void);		addAllLast: (structs := structStream contents).	procs := OrderedCollection new</body></methods><methods><class-id>External.DLLCCTestSuite.DLLCCCAPITestSuiteGenerator class</class-id> <category>instance creation</category><body package="DLLCC Test Suite-Generator">new	^super new initialize</body></methods><methods><class-id>External.DLLCCTestSuite.BooleanTestProcedure</class-id> <category>code generation</category><body package="DLLCC Test Suite-Generator">generateStTestCallOn: stream 	| keyword |	super generateStTestCallOn: stream.	stream nextPut: $.; crtab.	keyword := self defaultKeyword copyWithout: $:.	stream		nextPutAll: 'result := self interface ';		nextPutAll: name.	parameters		do: [ :param |			stream nextPut: $:; space; print: (param value respondsToArithmetic											ifTrue: [param value negated]											ifFalse: [param value not])]		separatedBy: [stream space; nextPutAll: keyword].	stream nextPut: $.; crtab.	stream		print: self expectedReturnValue not;		nextPutAll: ' ~= result ifTrue:';		crtab: 2;		nextPutAll: '[self message: ''';		nextPutAll: name;		nextPutAll: ' failed'']'.</body></methods><methods><class-id>External.DLLCCTestSuite.CallbackTestProcedureParameter</class-id> <category>code generation</category><body package="DLLCC Test Suite-Generator">callbackCBody	^self streamContents:		[:s|		type referentType resultType isVoid ifFalse: [s nextPutAll: 'return '].		s nextPutAll: name; nextPut: $(.		parameters do: [:param| s nextPutAll: param name] separatedBy: [s nextPutAll: ', '].		s nextPutAll: ');'.		type referentType resultType  isVoid ifTrue: [s crtab; nextPutAll: 'return;']]</body><body package="DLLCC Test Suite-Generator">generateCCallbackBlockOn: stream withReturnValue: returnValue	| returnType structDecl |	(ExternalProcedure new			name: name;			type: type type referentType;			yourself)		printDeclOn: stream.	stream cr; nextPut: ${.	(returnType := type type referentType resultType) isComposite ifTrue:		[structDecl := self structDeclFor: returnType named: 'a', returnType name increment: false.		 stream crtab; nextPutAll: (structDecl copyUpTo: Character cr); cr].	parameters isEmpty		ifTrue:			[stream crtab; nextPutAll: 'invoked = 1;']		ifFalse:			[| expectedFlags |			 stream				crtab;				nextPutAll: (self compareSettingFlags: parameters);				crtab;				nextPutAll: 'if (ok != '.			 expectedFlags := self streamContents:								[:efs|								parameters size &gt;= 31 ifTrue: [efs nextPutAll: 'C64('].			 					efs print: (2 raisedTo: parameters size) - 1.							 	efs nextPut: $U.								 parameters size &gt;= 31 ifTrue: [efs nextPut: $)]].			 stream				nextPutAll: expectedFlags;				nextPutAll: ') {';				crtab: 2;				nextPutAll: 'failed = 1;';				crtab: 2;				nextPutAll: ('printf("&lt;1s&gt; failed in callback (bad param(s) are &lt;2s&gt;x)\n", ok ^ &lt;3s&gt;);'								expandMacrosWith: value								with: (parameters size &gt;= 31 ifTrue: ['" LLFS "'] ifFalse: ['%l'])								with: expectedFlags);				crtab; nextPut: $}].	stream cr.	returnType isComposite ifTrue:		[stream nextPutAll: (structDecl copyFrom: (structDecl indexOf: Character cr) + 1 to: structDecl size); cr].	stream crtab; nextPutAll: 'return'.	returnType isVoid ifFalse:		[stream			space;			nextPutAll: (returnType isComposite						ifTrue: ['a', returnType name]						ifFalse: [self cPrintStringFor: returnValue type: returnType])].	stream nextPut: $;; cr; nextPut: $}; cr; cr.</body><body package="DLLCC Test Suite-Generator">generateRequiredFarTypedefOn: stream 	stream nextPutAll: self farType methods first</body><body package="DLLCC Test Suite-Generator">generateRequiredTypedefOn: stream 	stream nextPutAll: self type methods first</body><body package="DLLCC Test Suite-Generator">generateStCallbackBlockOn: stream withReturnValue: returnValue	| returnType |	stream crtab: 2; nextPut: $[.	parameters isEmpty		ifTrue:			[stream nextPutAll: ' invoked := true.']		ifFalse:			[ | hasCompositeArg |			 hasCompositeArg :=  false.			 parameters				do:					[:param|					 param type isComposite ifTrue: [hasCompositeArg := true].					 stream nextPut: $:; nextPutAll: param name]				separatedBy: [stream space].			stream				nextPutAll: (hasCompositeArg ifTrue: ['| | ok localField |'] ifFalse: ['| | ok |']); crtab: 2;				nextPutAll: ' invoked := true.'; crtab: 2;				nextPutAll: ' ok := 0.'; cr.			parameters with: (0 to: parameters size - 1) do:				[:param :index|				stream crtab: 2.				 param type isComposite					ifTrue: [self smalltalkStructCompareForParam: param usingLocalFieldVariableName: 'localField' on: stream]					ifFalse: [stream nextPutAll: param name; nextPutAll: ' = '; print: param value].				 stream nextPutAll: ' ifTrue:'; crtab: 3; nextPutAll: '[ok := ok bitOr: (1 bitShift: '; print: index; nextPutAll: ')].'].			stream				crtab: 2;				print: (1 bitShift: parameters size) - 1;				nextPutAll: ' ~= ok ifTrue:'; crtab: 3.			stream nextPutAll: '[self message: '; print: value, ' failed in callback (bad parameter)'; nextPutAll: '].'].	stream crtab: 2; space.	returnType := type type referentType resultType.	returnType isVoid		ifTrue: [stream nextPutAll: 'nil']		ifFalse:			[returnType isComposite				ifTrue: [stream nextPutAll: 'self interface '; nextPutAll: (returnType name asString at: 1 put: returnType name first asLowercase; yourself)]				ifFalse: [stream print: returnValue]].	stream nextPut: $]</body><body package="DLLCC Test Suite-Generator">printAsStActualParameterOn: stream	stream nextPutAll: value</body></methods><methods><class-id>External.DLLCCTestSuite.CallbackTestProcedureParameter</class-id> <category>accessing</category><body package="DLLCC Test Suite-Generator">farPascalType	^type copy beFar; bePascal; yourself</body><body package="DLLCC Test Suite-Generator">farType	^type copy beFar; yourself</body><body package="DLLCC Test Suite-Generator">parameters: anObject	parameters := anObject isNil ifTrue: [#()] ifFalse: [anObject asArray]</body></methods><methods><class-id>External.ExternalProcedure</class-id> <category>code generating</category><body package="DLLCC Test Suite-Generator">methodWithKeyword: defaultKeyword	"Answer a String that represents the receiver as a Smalltalk method.  The string will contain the message selector and the &lt;C: ...&gt; wrapper for the receiver's C type declaration plus additional default failure code."	| declarationStream method nArgs |	declarationStream := (String new: 40) writeStream.	method := (String new: 128) writeStream.	type printOn: declarationStream forName: name.	self printInlineCodeOn: declarationStream.	method nextPutAll: name.	type isVarArg		ifTrue: [method nextPutAll: ': argArray']		ifFalse:			[nArgs := type argumentTypes size.			nArgs &gt; 0				ifTrue:					[ | argNames | argNames := type argumentNames.					nArgs = argNames size						ifTrue:							["Declaration provides argument names"							method nextPutAll: ': '; nextPutAll: (argNames at: 1).							2 to: nArgs do: [:i |								method nextPutAll: (' &lt;1s&gt; &lt;2s&gt;'										expandMacrosWith: defaultKeyword										with: (argNames at: i))]]						ifFalse:							["Generate argument names"							method nextPutAll: (nArgs=1 ifTrue:  [': arg'] ifFalse: [': arg1']).							2 to: nArgs do: [:i |								method nextPutAll: (' &lt;1s&gt; arg&lt;2p&gt;'										expandMacrosWith: defaultKeyword										with: i)]]]].	method		crtab;		nextPutAll: '&lt;C: ';		nextPutAll: declarationStream contents;		nextPutAll: '&gt;';		crtab;		nextPutAll: '^self externalAccessFailedWith: ';		nextPutAll: ExternalInterface errorCodeVariableName.	^method contents</body></methods><methods><class-id>External.CScalarType</class-id> <category>accessing</category><body package="DLLCC Test Suite-Generator">numBits	^numBits</body></methods><methods><class-id>External.CLimitedPrecisionRealType</class-id> <category>testing</category><body package="DLLCC Test Suite-Generator">isBoolean	^false</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CScalarType</name><environment>External</environment><super>External.CType</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kind numBits printName storeSelector atSelector atPutSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Types</category><attributes><package>External-Types</package></attributes></class><class><name>CLimitedPrecisionRealType</name><environment>External</environment><super>External.CScalarType</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Types</category><attributes><package>External-Types</package></attributes></class><class><name>ExternalProcedure</name><environment>External</environment><super>External.ExternalObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class></st-source>