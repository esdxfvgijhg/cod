<?xml version="1.0"?><st-source><!-- Name: DLLCC Test SuiteNotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Comment: This parcel contains the Smalltalk part of the DLLCC test suite.  Browse the 'run tests' protocol in DLLANDCTest class for code to run the tests. DbIdentifier: bear73DbTrace: 494051DbUsername: traabeDbVersion: 8.3 - 1DevelopmentPrerequisites: #(#(#any 'DLLCC' '') #(#any 'SUnit' ''))HideSource: falsePackageName: DLLCC Test SuiteParcel: #('DLLCC Test Suite')ParcelName: DLLCC Test SuitePrerequisiteDescriptions: #(#(#name 'DLLCC' #applicability #store) #(#name 'SUnit' #componentType #package))PrerequisiteParcels: #(#('SUnit' ''))PrintStringCache: (8.3 - 1,traabe)SaveSource: trueVersion: 8.3 - 1Date: 9:36:35 AM September 2, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.1) of September 2, 2016 on September 2, 2016 at 9:36:35 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DLLANDCTestInterface</name><environment>External</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private External.DLLANDCTestInterfaceDictionary.*			</imports><category>External-Testing</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>cptst.dll</item> <item>cptst.sl</item> <item>cptst.so</item></libraryFiles><libraryDirectories><item>[ibm_rs6000*aix]$(VISUALWORKS)/dllcc/aix</item> <item>[ibm_*64*aix]$(VISUALWORKS)/dllcc/aix64</item> <item>[ARM_linux]$(VISUALWORKS)/dllcc/linuxARM</item> <item>[86_linux]$(VISUALWORKS)/dllcc/linux86</item> <item>[x86#64_linux]$(VISUALWORKS)/dllcc/linuxx86_64</item> <item>[PowerPC_linux]$(VISUALWORKS)/dllcc/linuxPPC</item> <item>[PowerPC64_linux]$(VISUALWORKS)/dllcc/linuxPPC64</item> <item>[unix*86_MacOSX]$(VISUALWORKS)/dllcc/macx86</item> <item>[unix*86#64_MacOSX]$(VISUALWORKS)/dllcc/macxx86_64</item> <item>[solaris64]$(VISUALWORKS)/dllcc/solaris64</item> <item>[solaris]$(VISUALWORKS)/dllcc/solaris</item> <item>[win32*i386]$(VISUALWORKS)\dllcc\win</item> <item>[win32*x64]$(VISUALWORKS)\dllcc\win64</item></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DLLCC Test Suite</package></attributes></class><comment><class-id>External.DLLANDCTestInterface</class-id><body>The class DLLANDCTestInterface declares the C language interface to the DLL and C Connect test suite. This file appears in the DLL and C Connect kit in two forms. The first is a simple file-out. The second is in Binary Object Storage (BOSS) format so that the test suite can be executed on platforms that do not have the DLL and C Connect kit.To BOSS this package, do the following:	DLLANDCTestInterface fillDefineCachesWithValues.	DLLANDCTestInterface bossOut: 'dllandc.bos' sourceMode: #keep.</body></comment><class><name>DLLANDCTestThreadedInterface</name><environment>External</environment><super>External.DLLANDCTestInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private External.DLLANDCTestThreadedInterfaceDictionary.*			</imports><category>External-Testing</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DLLCC Test Suite</package></attributes></class><comment><class-id>External.DLLANDCTestThreadedInterface</class-id><body>The class DLLANDCTestThreadedInterface declares the threaded C language interface to the DLL and C Connect test suite.  This interface tests the use of the threaded OE API to call and call-back from external C routines.</body></comment><class><name>DLLANDCTest</name><environment>External</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing</category><attributes><package>DLLCC Test Suite</package></attributes></class><comment><class-id>External.DLLANDCTest</class-id><body>WARNING!!!  This parcel is generated with the help of "DLLCC Test Suite-Generator".The class DLLANDCTest tests the External Language Interface to C.  The external C functions can be statically linked within the ObjectEngine (OE).  This new OE must be used when running this test suite.  For platforms that support dynamic loading of code modules, the dynamic load module must be created first and its full name and path added to the class definition template of DLLANDCTestInterface before running this test suite.  Place the full library path name in the #libraryFiles: keyword argument string.To run my tests, do:	"DLLANDCTest new run"and watch the Transcript.  If an error occurs a Notifier will appear.VisualWorks 3.0February 11, 1998</body></comment><class><name>DLLANDCBlockingTest</name><environment>External</environment><super>External.DLLANDCTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing</category><attributes><package>DLLCC Test Suite</package></attributes></class><class><name>DLLANDCThreadedTest</name><environment>External</environment><super>External.DLLANDCTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>External-Testing</category><attributes><package>DLLCC Test Suite</package></attributes></class><class><name>DLLANDCTestBlockingInterface</name><environment>External</environment><super>External.DLLANDCTestInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private External.DLLANDCTestBlockingInterfaceDictionary.*			</imports><category>External-Testing</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DLLCC Test Suite</package></attributes></class><comment><class-id>External.DLLANDCTestBlockingInterface</class-id><body>The class DLLANDCTestBlockingInterface declares the normal blocking C language interface to the DLL and C Connect test suite.  This interface tests the use of the normal OE API to call and call-back from external C routines.VisualWorks 3.0February 11, 1998</body></comment><shared-variable><name>DLLANDCTestThreadedInterfaceDictionary</name><environment>External</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DLLCC Test Suite</package></attributes></shared-variable><shared-variable><name>DLLANDCTestInterfaceDictionary</name><environment>External</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DLLCC Test Suite</package></attributes></shared-variable><shared-variable><name>DLLANDCTestBlockingInterfaceDictionary</name><environment>External</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DLLCC Test Suite</package></attributes></shared-variable><shared-variable><name>FailCodes</name><environment>External.DLLANDCTest</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DLLCC Test Suite</package></attributes></shared-variable><methods><class-id>External.DLLANDCTestThreadedInterface</class-id> <category>procedures oe &amp; up</category><body package="DLLCC Test Suite">oeTstExternalAllocFs: rcvr with: cls	&lt;C: _oop _threaded oeTstExternalAllocFs(_oop rcvr, _oop cls)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalAllocRegSlot: rcvr	&lt;C: _oop _threaded oeTstExternalAllocRegSlot(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalAllocVs: rcvr with: cls with: szOop	&lt;C: _oop _threaded oeTstExternalAllocVs(_oop rcvr, _oop cls, _oop szOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalBasicAt: rcvr with: arrayOEoop with: indexOop	&lt;C: _oop _threaded oeTstExternalBasicAt(_oop rcvr, _oop arrayOEoop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalBasicAtPut: rcvr with: arrayOEoop with: indexOop with: OEoopToBePut	&lt;C: _oop _threaded oeTstExternalBasicAtPut(_oop rcvr, _oop arrayOEoop, _oop indexOop, _oop OEoopToBePut)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalByteAt: rcvr with: argOop with: indexOop	&lt;C: _oop _threaded oeTstExternalByteAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalByteAtPut: rcvr with: argOop with: indexOop with: byteOop	&lt;C: _oop _threaded oeTstExternalByteAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop byteOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalClass: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalClass(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalClassType: rcvr with: cls	&lt;C: _oop _threaded oeTstExternalClassType(_oop rcvr, _oop cls)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEbytes: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyCtoOEbytes(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEfloatArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyCtoOEfloatArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEintArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyCtoOEintArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEstring: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyCtoOEstring(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCbytes: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyOEtoCbytes(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCfloatArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyOEtoCfloatArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCintArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyOEtoCintArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCstring: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop _threaded oeTstExternalCopyOEtoCstring(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEbool: rcvr	&lt;C: _oop _threaded oeTstExternalCtoOEbool(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEchar: rcvr	&lt;C: _oop _threaded oeTstExternalCtoOEchar(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEdouble: rcvr	&lt;C: _oop _threaded oeTstExternalCtoOEdouble(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEfloat: rcvr	&lt;C: _oop _threaded oeTstExternalCtoOEfloat(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEint: rcvr	&lt;C: _oop _threaded oeTstExternalCtoOEint(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalDoubleAt: oeArray with: indexOop	&lt;C: _oop _threaded oeTstExternalDoubleAt(_oop oeArray, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalFloatAt: rcvr with: argOop with: indexOop	&lt;C: _oop _threaded oeTstExternalFloatAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalFloatAtPut: rcvr with: argOop with: indexOop with: aFloatOop	&lt;C: _oop _threaded oeTstExternalFloatAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop aFloatOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIndexVarSize: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIndexVarSize(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalInstVarAt: rcvr with: argOop with: indexOop	&lt;C: _oop _threaded oeTstExternalInstVarAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalInstVarAtPut: rcvr with: argOop with: indexOop with: OEoopToBePut	&lt;C: _oop _threaded oeTstExternalInstVarAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop OEoopToBePut)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalInstVarSize: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalInstVarSize(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIntegerAt: rcvr with: argOop with: indexOop	&lt;C: _oop _threaded oeTstExternalIntegerAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIntegerAtPut: rcvr with: argOop with: indexOop with: anIntOop	&lt;C: _oop _threaded oeTstExternalIntegerAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop anIntOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsArrayOfFloat: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsArrayOfFloat(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsArrayOfInteger: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsArrayOfInteger(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsBoolean: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsBoolean(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsByteArray: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsByteArray(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsByteLike: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsByteLike(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsCharacter: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsCharacter(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsDouble: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsDouble(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsFloat: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsFloat(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsImmediate: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsImmediate(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsInteger: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsInteger(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsKindOf: rcvr with: inst with: cls	&lt;C: _oop _threaded oeTstExternalIsKindOf(_oop rcvr, _oop inst, _oop cls)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsString: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalIsString(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalLongRun: oeObject	&lt;C: _oop _threaded oeTstExternalLongRun(_oop oeObject)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalMyPollHandler	&lt;C: void _threaded oeTstExternalMyPollHandler(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalNestedReturn: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalNestedReturn(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalNil: rcvr	&lt;C: _oop _threaded oeTstExternalNil(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCbool: rcvr with: aBoolOop	&lt;C: _oop _threaded oeTstExternalOEtoCbool(_oop rcvr, _oop aBoolOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCchar: rcvr with: aCharOop	&lt;C: _oop _threaded oeTstExternalOEtoCchar(_oop rcvr, _oop aCharOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCdouble: rcvr with: aDoubleOop	&lt;C: _oop _threaded oeTstExternalOEtoCdouble(_oop rcvr, _oop aDoubleOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCfloat: rcvr with: aFloatOop	&lt;C: _oop _threaded oeTstExternalOEtoCfloat(_oop rcvr, _oop aFloatOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCint: rcvr with: anIntOop	&lt;C: _oop _threaded oeTstExternalOEtoCint(_oop rcvr, _oop anIntOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalPostInt: rcvr with: sem	&lt;C: _oop _threaded oeTstExternalPostInt(_oop rcvr, _oop sem)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalRegHandleAt: rcvr with: indexOop	&lt;C: _oop _threaded oeTstExternalRegHandleAt(_oop rcvr, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalRegHandleAtPut: rcvr with: indexOop with: valOop	&lt;C: _oop _threaded oeTstExternalRegHandleAtPut(_oop rcvr, _oop indexOop, _oop valOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnFalse: rcvr	&lt;C: _oop _threaded oeTstExternalReturnFalse(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnHandle: rcvr with: argOop	&lt;C: _oop _threaded oeTstExternalReturnHandle(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnNil: rcvr	&lt;C: _oop _threaded oeTstExternalReturnNil(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnTrue: rcvr	&lt;C: _oop _threaded oeTstExternalReturnTrue(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalSignalSem: rcvr with: sem	&lt;C: _oop _threaded oeTstExternalSignalSem(_oop rcvr, _oop sem)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalSumByteArray: rcvr with: baOop	&lt;C: _oop _threaded oeTstExternalSumByteArray(_oop rcvr, _oop baOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalZeroArray: rcvr with: aOop	&lt;C: _oop _threaded oeTstExternalZeroArray(_oop rcvr, _oop aOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0: oReceiver with: oSelector	&lt;C: _oop _threaded oeTstSendBack0(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0IfFailNoReturn: oReceiver with: oSelector	&lt;C: _oop _threaded oeTstSendBack0IfFailNoReturn(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0IfFailReturnFalse: oReceiver with: oSelector	&lt;C: _oop _threaded oeTstSendBack0IfFailReturnFalse(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0ReturnKeptReceiver: oReceiver with: oSelector	&lt;C: _oop _threaded oeTstSendBack0ReturnKeptReceiver(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack1: oReceiver with: oSelector with: oArg1	&lt;C: _oop _threaded oeTstSendBack1(_oop oReceiver, _oop oSelector, _oop oArg1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack2: oReceiver with: oSelector with: oArg1 with: oArg2	&lt;C: _oop _threaded oeTstSendBack2(_oop oReceiver, _oop oSelector, _oop oArg1, _oop oArg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack3: oReceiver with: oSelector with: oArg1 with: oArg2 with: oArg3	&lt;C: _oop _threaded oeTstSendBack3(_oop oReceiver, _oop oSelector, _oop oArg1, _oop oArg2, _oop oArg3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBackKeepFailure: oReceiver with: oSelector with: oArgs with: oKeep with: oFailure	&lt;C: _oop _threaded oeTstSendBackKeepFailure(_oop oReceiver, _oop oSelector, _oop oArgs, _oop oKeep, _oop oFailure)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBackMany: oReceiver with: oSelector with: oArgs	&lt;C: _oop _threaded oeTstSendBackMany(_oop oReceiver, _oop oSelector, _oop oArgs)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack0: oReceiver with: selector	&lt;C: _oop _threaded oeTstSendcBack0(_oop oReceiver, char * selector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack1: oReceiver with: selector with: oArg1	&lt;C: _oop _threaded oeTstSendcBack1(_oop oReceiver, char * selector, _oop oArg1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack2: oReceiver with: selector with: oArg1 with: oArg2	&lt;C: _oop _threaded oeTstSendcBack2(_oop oReceiver, char * selector, _oop oArg1, _oop oArg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack3: oReceiver with: selector with: oArg1 with: oArg2 with: oArg3	&lt;C: _oop _threaded oeTstSendcBack3(_oop oReceiver, char * selector, _oop oArg1, _oop oArg2, _oop oArg3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBackMany: oReceiver with: szSelector with: oArg1 with: oArg2	&lt;C: _oop _threaded oeTstSendcBackMany(_oop oReceiver, char * szSelector, _oop oArg1, _oop oArg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstreturn: rcvr with: argOop	&lt;C: _oop _threaded oeTstreturn(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.DLLANDCTestThreadedInterface</class-id> <category>C api test procedures</category><body package="DLLCC Test Suite">test001	&lt;C: void _threaded  test001(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test002	&lt;C: signed char _threaded  test002(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test003	&lt;C: unsigned char _threaded  test003(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test004	&lt;C: short _threaded  test004(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test005	&lt;C: unsigned short _threaded  test005(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test006	&lt;C: int _threaded  test006(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test007	&lt;C: unsigned int _threaded  test007(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test008	&lt;C: long _threaded  test008(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test009	&lt;C: unsigned long _threaded  test009(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test010	&lt;C: long long _threaded  test010(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test011	&lt;C: unsigned long long _threaded  test011(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test012	&lt;C: float _threaded  test012(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test013	&lt;C: double _threaded  test013(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test014	&lt;C: CharStruct _threaded  test014(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test015	&lt;C: SmallStruct _threaded  test015(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test016	&lt;C: MediumStruct _threaded  test016(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test017	&lt;C: LargeStruct _threaded  test017(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test018	&lt;C: BigStruct _threaded  test018(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test019: aChar	&lt;C: __bool char _threaded  test019(signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test020: aUChar	&lt;C: __bool char _threaded  test020(unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test021: aShort	&lt;C: __bool short _threaded  test021(short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test022: aUShort	&lt;C: __bool short _threaded  test022(unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test023: anInt	&lt;C: __bool int _threaded  test023(int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test024: aUInt	&lt;C: __bool int _threaded  test024(unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test025: aLong	&lt;C: __bool long _threaded  test025(long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test026: aULong	&lt;C: __bool long _threaded  test026(unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test027: aLongLong	&lt;C: __bool long long _threaded  test027(long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test028: aULongLong	&lt;C: __bool long long _threaded  test028(unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test029: aFloat	&lt;C: __bool int _threaded  test029(float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test030: aDouble	&lt;C: __bool int _threaded  test030(double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test031: charStruct	&lt;C: __bool int _threaded  test031(CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test032: smallStruct	&lt;C: __bool int _threaded  test032(SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test033: mediumStruct	&lt;C: __bool int _threaded  test033(MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test034: largeStruct	&lt;C: __bool int _threaded  test034(LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test035: bigStruct	&lt;C: __bool int _threaded  test035(BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test036: aBoolChar	&lt;C: __bool int _threaded  test036(__bool char aBoolChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test037: aBoolShort	&lt;C: __bool int _threaded  test037(__bool short aBoolShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test038: aBoolInt	&lt;C: __bool int _threaded  test038(__bool int aBoolInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test039: aBoolLong	&lt;C: __bool int _threaded  test039(__bool long aBoolLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test040: aBoolLongLong	&lt;C: __bool int _threaded  test040(__bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test041: aBoolChar	&lt;C: __bool char _threaded  test041(__bool char aBoolChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test042: aBoolChar	&lt;C: __bool char _threaded  test042(__bool char aBoolChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test043: aBoolShort	&lt;C: __bool short _threaded  test043(__bool short aBoolShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test044: aBoolShort	&lt;C: __bool short _threaded  test044(__bool short aBoolShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test045: aBoolInt	&lt;C: __bool int _threaded  test045(__bool int aBoolInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test046: aBoolInt	&lt;C: __bool int _threaded  test046(__bool int aBoolInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test047: aBoolLong	&lt;C: __bool long _threaded  test047(__bool long aBoolLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test048: aBoolLong	&lt;C: __bool long _threaded  test048(__bool long aBoolLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test049: aBoolLongLong	&lt;C: __bool long long _threaded  test049(__bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test050: aBoolLongLong	&lt;C: __bool long long _threaded  test050(__bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test051: charA with: charB with: charC with: charD with: charE with: charF with: charG with: charH with: charI with: charJ with: charK with: charL with: charM with: charN with: charO with: charP with: charQ with: charR with: charS with: charT with: charU with: charV with: charW with: charX with: charY with: charZ with: char0 with: char1 with: char2 with: char3	&lt;C: unsigned long _threaded  test051(signed char charA, signed char charB, signed char charC, signed char charD, signed char charE, signed char charF, signed char charG, signed char charH, signed char charI, signed char charJ, signed char charK, signed char charL, signed char charM, signed char charN, signed char charO, signed char charP, signed char charQ, signed char charR, signed char charS, signed char charT, signed char charU, signed char charV, signed char charW, signed char charX, signed char charY, signed char charZ, signed char char0, signed char char1, signed char char2, signed char char3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test052: uCharA with: uCharB with: uCharC with: uCharD with: uCharE with: uCharF with: uCharG with: uCharH with: uCharI with: uCharJ with: uCharK with: uCharL with: uCharM with: uCharN with: uCharO with: uCharP with: uCharQ with: uCharR with: uCharS with: uCharT with: uCharU with: uCharV with: uCharW with: uCharX with: uCharY with: uCharZ with: uChar0 with: uChar1 with: uChar2 with: uChar3	&lt;C: unsigned long _threaded  test052(unsigned char uCharA, unsigned char uCharB, unsigned char uCharC, unsigned char uCharD, unsigned char uCharE, unsigned char uCharF, unsigned char uCharG, unsigned char uCharH, unsigned char uCharI, unsigned char uCharJ, unsigned char uCharK, unsigned char uCharL, unsigned char uCharM, unsigned char uCharN, unsigned char uCharO, unsigned char uCharP, unsigned char uCharQ, unsigned char uCharR, unsigned char uCharS, unsigned char uCharT, unsigned char uCharU, unsigned char uCharV, unsigned char uCharW, unsigned char uCharX, unsigned char uCharY, unsigned char uCharZ, unsigned char uChar0, unsigned char uChar1, unsigned char uChar2, unsigned char uChar3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test053: shortA with: shortB with: shortC with: shortD with: shortE with: shortF with: shortG with: shortH with: shortI with: shortJ with: shortK with: shortL with: shortM with: shortN with: shortO with: shortP with: shortQ with: shortR with: shortS with: shortT with: shortU with: shortV with: shortW with: shortX with: shortY with: shortZ with: short0 with: short1 with: short2 with: short3	&lt;C: unsigned long _threaded  test053(short shortA, short shortB, short shortC, short shortD, short shortE, short shortF, short shortG, short shortH, short shortI, short shortJ, short shortK, short shortL, short shortM, short shortN, short shortO, short shortP, short shortQ, short shortR, short shortS, short shortT, short shortU, short shortV, short shortW, short shortX, short shortY, short shortZ, short short0, short short1, short short2, short short3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test054: uShortA with: uShortB with: uShortC with: uShortD with: uShortE with: uShortF with: uShortG with: uShortH with: uShortI with: uShortJ with: uShortK with: uShortL with: uShortM with: uShortN with: uShortO with: uShortP with: uShortQ with: uShortR with: uShortS with: uShortT with: uShortU with: uShortV with: uShortW with: uShortX with: uShortY with: uShortZ with: uShort0 with: uShort1 with: uShort2 with: uShort3	&lt;C: unsigned long _threaded  test054(unsigned short uShortA, unsigned short uShortB, unsigned short uShortC, unsigned short uShortD, unsigned short uShortE, unsigned short uShortF, unsigned short uShortG, unsigned short uShortH, unsigned short uShortI, unsigned short uShortJ, unsigned short uShortK, unsigned short uShortL, unsigned short uShortM, unsigned short uShortN, unsigned short uShortO, unsigned short uShortP, unsigned short uShortQ, unsigned short uShortR, unsigned short uShortS, unsigned short uShortT, unsigned short uShortU, unsigned short uShortV, unsigned short uShortW, unsigned short uShortX, unsigned short uShortY, unsigned short uShortZ, unsigned short uShort0, unsigned short uShort1, unsigned short uShort2, unsigned short uShort3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test055: intA with: intB with: intC with: intD with: intE with: intF with: intG with: intH with: intI with: intJ with: intK with: intL with: intM with: intN with: intO with: intP with: intQ with: intR with: intS with: intT with: intU with: intV with: intW with: intX with: intY with: intZ with: int0 with: int1 with: int2 with: int3	&lt;C: unsigned long _threaded  test055(int intA, int intB, int intC, int intD, int intE, int intF, int intG, int intH, int intI, int intJ, int intK, int intL, int intM, int intN, int intO, int intP, int intQ, int intR, int intS, int intT, int intU, int intV, int intW, int intX, int intY, int intZ, int int0, int int1, int int2, int int3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test056: uIntA with: uIntB with: uIntC with: uIntD with: uIntE with: uIntF with: uIntG with: uIntH with: uIntI with: uIntJ with: uIntK with: uIntL with: uIntM with: uIntN with: uIntO with: uIntP with: uIntQ with: uIntR with: uIntS with: uIntT with: uIntU with: uIntV with: uIntW with: uIntX with: uIntY with: uIntZ with: uInt0 with: uInt1 with: uInt2 with: uInt3	&lt;C: unsigned long _threaded  test056(unsigned int uIntA, unsigned int uIntB, unsigned int uIntC, unsigned int uIntD, unsigned int uIntE, unsigned int uIntF, unsigned int uIntG, unsigned int uIntH, unsigned int uIntI, unsigned int uIntJ, unsigned int uIntK, unsigned int uIntL, unsigned int uIntM, unsigned int uIntN, unsigned int uIntO, unsigned int uIntP, unsigned int uIntQ, unsigned int uIntR, unsigned int uIntS, unsigned int uIntT, unsigned int uIntU, unsigned int uIntV, unsigned int uIntW, unsigned int uIntX, unsigned int uIntY, unsigned int uIntZ, unsigned int uInt0, unsigned int uInt1, unsigned int uInt2, unsigned int uInt3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test057: longA with: longB with: longC with: longD with: longE with: longF with: longG with: longH with: longI with: longJ with: longK with: longL with: longM with: longN with: longO with: longP with: longQ with: longR with: longS with: longT with: longU with: longV with: longW with: longX with: longY with: longZ with: long0 with: long1 with: long2 with: long3	&lt;C: unsigned long _threaded  test057(long longA, long longB, long longC, long longD, long longE, long longF, long longG, long longH, long longI, long longJ, long longK, long longL, long longM, long longN, long longO, long longP, long longQ, long longR, long longS, long longT, long longU, long longV, long longW, long longX, long longY, long longZ, long long0, long long1, long long2, long long3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test058: uLongA with: uLongB with: uLongC with: uLongD with: uLongE with: uLongF with: uLongG with: uLongH with: uLongI with: uLongJ with: uLongK with: uLongL with: uLongM with: uLongN with: uLongO with: uLongP with: uLongQ with: uLongR with: uLongS with: uLongT with: uLongU with: uLongV with: uLongW with: uLongX with: uLongY with: uLongZ with: uLong0 with: uLong1 with: uLong2 with: uLong3	&lt;C: unsigned long _threaded  test058(unsigned long uLongA, unsigned long uLongB, unsigned long uLongC, unsigned long uLongD, unsigned long uLongE, unsigned long uLongF, unsigned long uLongG, unsigned long uLongH, unsigned long uLongI, unsigned long uLongJ, unsigned long uLongK, unsigned long uLongL, unsigned long uLongM, unsigned long uLongN, unsigned long uLongO, unsigned long uLongP, unsigned long uLongQ, unsigned long uLongR, unsigned long uLongS, unsigned long uLongT, unsigned long uLongU, unsigned long uLongV, unsigned long uLongW, unsigned long uLongX, unsigned long uLongY, unsigned long uLongZ, unsigned long uLong0, unsigned long uLong1, unsigned long uLong2, unsigned long uLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test059: longLongA with: longLongB with: longLongC with: longLongD with: longLongE with: longLongF with: longLongG with: longLongH with: longLongI with: longLongJ with: longLongK with: longLongL with: longLongM with: longLongN with: longLongO with: longLongP with: longLongQ with: longLongR with: longLongS with: longLongT with: longLongU with: longLongV with: longLongW with: longLongX with: longLongY with: longLongZ with: longLong0 with: longLong1 with: longLong2 with: longLong3	&lt;C: unsigned long _threaded  test059(long long longLongA, long long longLongB, long long longLongC, long long longLongD, long long longLongE, long long longLongF, long long longLongG, long long longLongH, long long longLongI, long long longLongJ, long long longLongK, long long longLongL, long long longLongM, long long longLongN, long long longLongO, long long longLongP, long long longLongQ, long long longLongR, long long longLongS, long long longLongT, long long longLongU, long long longLongV, long long longLongW, long long longLongX, long long longLongY, long long longLongZ, long long longLong0, long long longLong1, long long longLong2, long long longLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test060: uLongLongA with: uLongLongB with: uLongLongC with: uLongLongD with: uLongLongE with: uLongLongF with: uLongLongG with: uLongLongH with: uLongLongI with: uLongLongJ with: uLongLongK with: uLongLongL with: uLongLongM with: uLongLongN with: uLongLongO with: uLongLongP with: uLongLongQ with: uLongLongR with: uLongLongS with: uLongLongT with: uLongLongU with: uLongLongV with: uLongLongW with: uLongLongX with: uLongLongY with: uLongLongZ with: uLongLong0 with: uLongLong1 with: uLongLong2 with: uLongLong3	&lt;C: unsigned long _threaded  test060(unsigned long long uLongLongA, unsigned long long uLongLongB, unsigned long long uLongLongC, unsigned long long uLongLongD, unsigned long long uLongLongE, unsigned long long uLongLongF, unsigned long long uLongLongG, unsigned long long uLongLongH, unsigned long long uLongLongI, unsigned long long uLongLongJ, unsigned long long uLongLongK, unsigned long long uLongLongL, unsigned long long uLongLongM, unsigned long long uLongLongN, unsigned long long uLongLongO, unsigned long long uLongLongP, unsigned long long uLongLongQ, unsigned long long uLongLongR, unsigned long long uLongLongS, unsigned long long uLongLongT, unsigned long long uLongLongU, unsigned long long uLongLongV, unsigned long long uLongLongW, unsigned long long uLongLongX, unsigned long long uLongLongY, unsigned long long uLongLongZ, unsigned long long uLongLong0, unsigned long long uLongLong1, unsigned long long uLongLong2, unsigned long long uLongLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test061: floatA with: floatB with: floatC with: floatD with: floatE with: floatF with: floatG with: floatH with: floatI with: floatJ with: floatK with: floatL with: floatM with: floatN with: floatO with: floatP with: floatQ with: floatR with: floatS with: floatT with: floatU with: floatV with: floatW with: floatX with: floatY with: floatZ with: float0 with: float1 with: float2 with: float3	&lt;C: unsigned long _threaded  test061(float floatA, float floatB, float floatC, float floatD, float floatE, float floatF, float floatG, float floatH, float floatI, float floatJ, float floatK, float floatL, float floatM, float floatN, float floatO, float floatP, float floatQ, float floatR, float floatS, float floatT, float floatU, float floatV, float floatW, float floatX, float floatY, float floatZ, float float0, float float1, float float2, float float3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test062: doubleA with: doubleB with: doubleC with: doubleD with: doubleE with: doubleF with: doubleG with: doubleH with: doubleI with: doubleJ with: doubleK with: doubleL with: doubleM with: doubleN with: doubleO with: doubleP with: doubleQ with: doubleR with: doubleS with: doubleT with: doubleU with: doubleV with: doubleW with: doubleX with: doubleY with: doubleZ with: double0 with: double1 with: double2 with: double3	&lt;C: unsigned long _threaded  test062(double doubleA, double doubleB, double doubleC, double doubleD, double doubleE, double doubleF, double doubleG, double doubleH, double doubleI, double doubleJ, double doubleK, double doubleL, double doubleM, double doubleN, double doubleO, double doubleP, double doubleQ, double doubleR, double doubleS, double doubleT, double doubleU, double doubleV, double doubleW, double doubleX, double doubleY, double doubleZ, double double0, double double1, double double2, double double3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test063: charStructA with: charStructB with: charStructC with: charStructD with: charStructE with: charStructF with: charStructG with: charStructH with: charStructI with: charStructJ with: charStructK with: charStructL with: charStructM with: charStructN with: charStructO with: charStructP with: charStructQ with: charStructR with: charStructS with: charStructT with: charStructU with: charStructV with: charStructW with: charStructX with: charStructY with: charStructZ with: charStruct0 with: charStruct1 with: charStruct2 with: charStruct3	&lt;C: unsigned long _threaded  test063(CharStruct charStructA, CharStruct charStructB, CharStruct charStructC, CharStruct charStructD, CharStruct charStructE, CharStruct charStructF, CharStruct charStructG, CharStruct charStructH, CharStruct charStructI, CharStruct charStructJ, CharStruct charStructK, CharStruct charStructL, CharStruct charStructM, CharStruct charStructN, CharStruct charStructO, CharStruct charStructP, CharStruct charStructQ, CharStruct charStructR, CharStruct charStructS, CharStruct charStructT, CharStruct charStructU, CharStruct charStructV, CharStruct charStructW, CharStruct charStructX, CharStruct charStructY, CharStruct charStructZ, CharStruct charStruct0, CharStruct charStruct1, CharStruct charStruct2, CharStruct charStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test064: smallStructA with: smallStructB with: smallStructC with: smallStructD with: smallStructE with: smallStructF with: smallStructG with: smallStructH with: smallStructI with: smallStructJ with: smallStructK with: smallStructL with: smallStructM with: smallStructN with: smallStructO with: smallStructP with: smallStructQ with: smallStructR with: smallStructS with: smallStructT with: smallStructU with: smallStructV with: smallStructW with: smallStructX with: smallStructY with: smallStructZ with: smallStruct0 with: smallStruct1 with: smallStruct2 with: smallStruct3	&lt;C: unsigned long _threaded  test064(SmallStruct smallStructA, SmallStruct smallStructB, SmallStruct smallStructC, SmallStruct smallStructD, SmallStruct smallStructE, SmallStruct smallStructF, SmallStruct smallStructG, SmallStruct smallStructH, SmallStruct smallStructI, SmallStruct smallStructJ, SmallStruct smallStructK, SmallStruct smallStructL, SmallStruct smallStructM, SmallStruct smallStructN, SmallStruct smallStructO, SmallStruct smallStructP, SmallStruct smallStructQ, SmallStruct smallStructR, SmallStruct smallStructS, SmallStruct smallStructT, SmallStruct smallStructU, SmallStruct smallStructV, SmallStruct smallStructW, SmallStruct smallStructX, SmallStruct smallStructY, SmallStruct smallStructZ, SmallStruct smallStruct0, SmallStruct smallStruct1, SmallStruct smallStruct2, SmallStruct smallStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test065: mediumStructA with: mediumStructB with: mediumStructC with: mediumStructD with: mediumStructE with: mediumStructF with: mediumStructG with: mediumStructH with: mediumStructI with: mediumStructJ with: mediumStructK with: mediumStructL with: mediumStructM with: mediumStructN with: mediumStructO with: mediumStructP with: mediumStructQ with: mediumStructR with: mediumStructS with: mediumStructT with: mediumStructU with: mediumStructV with: mediumStructW with: mediumStructX with: mediumStructY with: mediumStructZ with: mediumStruct0 with: mediumStruct1 with: mediumStruct2 with: mediumStruct3	&lt;C: unsigned long _threaded  test065(MediumStruct mediumStructA, MediumStruct mediumStructB, MediumStruct mediumStructC, MediumStruct mediumStructD, MediumStruct mediumStructE, MediumStruct mediumStructF, MediumStruct mediumStructG, MediumStruct mediumStructH, MediumStruct mediumStructI, MediumStruct mediumStructJ, MediumStruct mediumStructK, MediumStruct mediumStructL, MediumStruct mediumStructM, MediumStruct mediumStructN, MediumStruct mediumStructO, MediumStruct mediumStructP, MediumStruct mediumStructQ, MediumStruct mediumStructR, MediumStruct mediumStructS, MediumStruct mediumStructT, MediumStruct mediumStructU, MediumStruct mediumStructV, MediumStruct mediumStructW, MediumStruct mediumStructX, MediumStruct mediumStructY, MediumStruct mediumStructZ, MediumStruct mediumStruct0, MediumStruct mediumStruct1, MediumStruct mediumStruct2, MediumStruct mediumStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test066: largeStructA with: largeStructB with: largeStructC with: largeStructD with: largeStructE with: largeStructF with: largeStructG with: largeStructH with: largeStructI with: largeStructJ with: largeStructK with: largeStructL with: largeStructM with: largeStructN with: largeStructO with: largeStructP with: largeStructQ with: largeStructR with: largeStructS with: largeStructT with: largeStructU with: largeStructV with: largeStructW with: largeStructX with: largeStructY with: largeStructZ with: largeStruct0 with: largeStruct1 with: largeStruct2 with: largeStruct3	&lt;C: unsigned long _threaded  test066(LargeStruct largeStructA, LargeStruct largeStructB, LargeStruct largeStructC, LargeStruct largeStructD, LargeStruct largeStructE, LargeStruct largeStructF, LargeStruct largeStructG, LargeStruct largeStructH, LargeStruct largeStructI, LargeStruct largeStructJ, LargeStruct largeStructK, LargeStruct largeStructL, LargeStruct largeStructM, LargeStruct largeStructN, LargeStruct largeStructO, LargeStruct largeStructP, LargeStruct largeStructQ, LargeStruct largeStructR, LargeStruct largeStructS, LargeStruct largeStructT, LargeStruct largeStructU, LargeStruct largeStructV, LargeStruct largeStructW, LargeStruct largeStructX, LargeStruct largeStructY, LargeStruct largeStructZ, LargeStruct largeStruct0, LargeStruct largeStruct1, LargeStruct largeStruct2, LargeStruct largeStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test067: bigStructA with: bigStructB with: bigStructC with: bigStructD with: bigStructE with: bigStructF with: bigStructG with: bigStructH with: bigStructI with: bigStructJ with: bigStructK with: bigStructL with: bigStructM with: bigStructN with: bigStructO with: bigStructP with: bigStructQ with: bigStructR with: bigStructS with: bigStructT with: bigStructU with: bigStructV with: bigStructW with: bigStructX with: bigStructY with: bigStructZ with: bigStruct0 with: bigStruct1 with: bigStruct2 with: bigStruct3	&lt;C: unsigned long _threaded  test067(BigStruct bigStructA, BigStruct bigStructB, BigStruct bigStructC, BigStruct bigStructD, BigStruct bigStructE, BigStruct bigStructF, BigStruct bigStructG, BigStruct bigStructH, BigStruct bigStructI, BigStruct bigStructJ, BigStruct bigStructK, BigStruct bigStructL, BigStruct bigStructM, BigStruct bigStructN, BigStruct bigStructO, BigStruct bigStructP, BigStruct bigStructQ, BigStruct bigStructR, BigStruct bigStructS, BigStruct bigStructT, BigStruct bigStructU, BigStruct bigStructV, BigStruct bigStructW, BigStruct bigStructX, BigStruct bigStructY, BigStruct bigStructZ, BigStruct bigStruct0, BigStruct bigStruct1, BigStruct bigStruct2, BigStruct bigStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test068: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA	&lt;C: unsigned long long _threaded  test068(signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test069: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar	&lt;C: unsigned long long _threaded  test069(unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test070: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar	&lt;C: unsigned long long _threaded  test070(short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test071: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort	&lt;C: unsigned long long _threaded  test071(unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test072: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort	&lt;C: unsigned long long _threaded  test072(int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test073: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt	&lt;C: unsigned long long _threaded  test073(unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test074: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt	&lt;C: unsigned long long _threaded  test074(long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test075: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong	&lt;C: unsigned long long _threaded  test075(unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test076: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong	&lt;C: unsigned long long _threaded  test076(long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test077: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong	&lt;C: unsigned long long _threaded  test077(unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test078: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong	&lt;C: unsigned long long _threaded  test078(float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test079: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat	&lt;C: unsigned long long _threaded  test079(double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test080: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble	&lt;C: unsigned long long _threaded  test080(CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test081: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct	&lt;C: unsigned long long _threaded  test081(SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test082: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct	&lt;C: unsigned long long _threaded  test082(MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test083: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct	&lt;C: unsigned long long _threaded  test083(LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test084: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct	&lt;C: unsigned long long _threaded  test084(BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test085: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct	&lt;C: unsigned long long _threaded  test085(signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test086: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar	&lt;C: unsigned long long _threaded  test086(unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test087: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar	&lt;C: unsigned long long _threaded  test087(short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test088: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort	&lt;C: unsigned long long _threaded  test088(unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test089: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort	&lt;C: unsigned long long _threaded  test089(int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test090: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt	&lt;C: unsigned long long _threaded  test090(unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test091: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt	&lt;C: unsigned long long _threaded  test091(long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test092: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong	&lt;C: unsigned long long _threaded  test092(unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test093: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong	&lt;C: unsigned long long _threaded  test093(long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test094: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong	&lt;C: unsigned long long _threaded  test094(unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test095: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong	&lt;C: unsigned long long _threaded  test095(float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test096: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat	&lt;C: unsigned long long _threaded  test096(double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test097: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble	&lt;C: unsigned long long _threaded  test097(CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test098: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA	&lt;C: unsigned long long _threaded  test098(SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test099: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA	&lt;C: unsigned long long _threaded  test099(MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test100: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA	&lt;C: unsigned long long _threaded  test100(LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test101: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA	&lt;C: unsigned long long _threaded  test101(BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test102: f0 w: f1 w: f2 w: f3 w: f4 w: f5 w: f6 w: f7 w: f8 w: f9 w: f10 w: f11 w: f12 w: f13 w: f14 w: f15 w: f16 w: f17 w: f18 w: f19 w: f20 w: f21 w: f22 w: f23 w: f24 w: f25 w: f26 w: f27 w: f28 w: f29 w: f30 w: f31 w: f32 w: f33 w: f34 w: f35 w: f36 w: f37 w: f38 w: f39 w: f40 w: f41 w: f42 w: f43 w: f44 w: f45 w: f46 w: f47 w: f48 w: f49 w: f50 w: f51 w: f52 w: f53 w: f54 w: f55 w: f56 w: f57 w: f58 w: f59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long _threaded  test102(float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13, float f14, float f15, float f16, float f17, float f18, float f19, float f20, float f21, float f22, float f23, float f24, float f25, float f26, float f27, float f28, float f29, float f30, float f31, float f32, float f33, float f34, float f35, float f36, float f37, float f38, float f39, float f40, float f41, float f42, float f43, float f44, float f45, float f46, float f47, float f48, float f49, float f50, float f51, float f52, float f53, float f54, float f55, float f56, float f57, float f58, float f59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test103: d0 w: d1 w: d2 w: d3 w: d4 w: d5 w: d6 w: d7 w: d8 w: d9 w: d10 w: d11 w: d12 w: d13 w: d14 w: d15 w: d16 w: d17 w: d18 w: d19 w: d20 w: d21 w: d22 w: d23 w: d24 w: d25 w: d26 w: d27 w: d28 w: d29 w: d30 w: d31 w: d32 w: d33 w: d34 w: d35 w: d36 w: d37 w: d38 w: d39 w: d40 w: d41 w: d42 w: d43 w: d44 w: d45 w: d46 w: d47 w: d48 w: d49 w: d50 w: d51 w: d52 w: d53 w: d54 w: d55 w: d56 w: d57 w: d58 w: d59 w: d60 w: d61 w: d62 w: d63	&lt;C: unsigned long long _threaded  test103(double d0, double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11, double d12, double d13, double d14, double d15, double d16, double d17, double d18, double d19, double d20, double d21, double d22, double d23, double d24, double d25, double d26, double d27, double d28, double d29, double d30, double d31, double d32, double d33, double d34, double d35, double d36, double d37, double d38, double d39, double d40, double d41, double d42, double d43, double d44, double d45, double d46, double d47, double d48, double d49, double d50, double d51, double d52, double d53, double d54, double d55, double d56, double d57, double d58, double d59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test104: d0 w: f1 w: d2 w: f3 w: d4 w: f5 w: d6 w: f7 w: d8 w: f9 w: d10 w: f11 w: d12 w: f13 w: d14 w: f15 w: d16 w: f17 w: d18 w: f19 w: d20 w: f21 w: d22 w: f23 w: d24 w: f25 w: d26 w: f27 w: d28 w: f29 w: d30 w: f31 w: d32 w: f33 w: d34 w: f35 w: d36 w: f37 w: d38 w: f39 w: d40 w: f41 w: d42 w: f43 w: d44 w: f45 w: d46 w: f47 w: d48 w: f49 w: d50 w: f51 w: d52 w: f53 w: d54 w: f55 w: d56 w: f57 w: d58 w: f59 w: d60 w: f61 w: d62 w: f63	&lt;C: unsigned long long _threaded  test104(double d0, float f1, double d2, float f3, double d4, float f5, double d6, float f7, double d8, float f9, double d10, float f11, double d12, float f13, double d14, float f15, double d16, float f17, double d18, float f19, double d20, float f21, double d22, float f23, double d24, float f25, double d26, float f27, double d28, float f29, double d30, float f31, double d32, float f33, double d34, float f35, double d36, float f37, double d38, float f39, double d40, float f41, double d42, float f43, double d44, float f45, double d46, float f47, double d48, float f49, double d50, float f51, double d52, float f53, double d54, float f55, double d56, float f57, double d58, float f59, double d60, float f61, double d62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test105: f0 w: d1 w: f2 w: d3 w: f4 w: d5 w: f6 w: d7 w: f8 w: d9 w: f10 w: d11 w: f12 w: d13 w: f14 w: d15 w: f16 w: d17 w: f18 w: d19 w: f20 w: d21 w: f22 w: d23 w: f24 w: d25 w: f26 w: d27 w: f28 w: d29 w: f30 w: d31 w: f32 w: d33 w: f34 w: d35 w: f36 w: d37 w: f38 w: d39 w: f40 w: d41 w: f42 w: d43 w: f44 w: d45 w: f46 w: d47 w: f48 w: d49 w: f50 w: d51 w: f52 w: d53 w: f54 w: d55 w: f56 w: d57 w: f58 w: d59 w: f60 w: d61 w: f62 w: d63	&lt;C: unsigned long long _threaded  test105(float f0, double d1, float f2, double d3, float f4, double d5, float f6, double d7, float f8, double d9, float f10, double d11, float f12, double d13, float f14, double d15, float f16, double d17, float f18, double d19, float f20, double d21, float f22, double d23, float f24, double d25, float f26, double d27, float f28, double d29, float f30, double d31, float f32, double d33, float f34, double d35, float f36, double d37, float f38, double d39, float f40, double d41, float f42, double d43, float f44, double d45, float f46, double d47, float f48, double d49, float f50, double d51, float f52, double d53, float f54, double d55, float f56, double d57, float f58, double d59, float f60, double d61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test106: f0 w: l1 w: l2 w: f3 w: l4 w: l5 w: f6 w: l7 w: l8 w: f9 w: l10 w: l11 w: f12 w: l13 w: l14 w: f15 w: l16 w: l17 w: f18 w: l19 w: l20 w: f21 w: l22 w: l23 w: f24 w: l25 w: l26 w: f27 w: l28 w: l29 w: f30 w: l31 w: l32 w: f33 w: l34 w: l35 w: f36 w: l37 w: l38 w: f39 w: l40 w: l41 w: f42 w: l43 w: l44 w: f45 w: l46 w: l47 w: f48 w: l49 w: l50 w: f51 w: l52 w: l53 w: f54 w: l55 w: l56 w: f57 w: l58 w: l59 w: f60 w: l61 w: l62 w: f63	&lt;C: unsigned long long _threaded  test106(float f0, long l1, long l2, float f3, long l4, long l5, float f6, long l7, long l8, float f9, long l10, long l11, float f12, long l13, long l14, float f15, long l16, long l17, float f18, long l19, long l20, float f21, long l22, long l23, float f24, long l25, long l26, float f27, long l28, long l29, float f30, long l31, long l32, float f33, long l34, long l35, float f36, long l37, long l38, float f39, long l40, long l41, float f42, long l43, long l44, float f45, long l46, long l47, float f48, long l49, long l50, float f51, long l52, long l53, float f54, long l55, long l56, float f57, long l58, long l59, float f60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test107: l0 w: f1 w: l2 w: l3 w: f4 w: l5 w: l6 w: f7 w: l8 w: l9 w: f10 w: l11 w: l12 w: f13 w: l14 w: l15 w: f16 w: l17 w: l18 w: f19 w: l20 w: l21 w: f22 w: l23 w: l24 w: f25 w: l26 w: l27 w: f28 w: l29 w: l30 w: f31 w: l32 w: l33 w: f34 w: l35 w: l36 w: f37 w: l38 w: l39 w: f40 w: l41 w: l42 w: f43 w: l44 w: l45 w: f46 w: l47 w: l48 w: f49 w: l50 w: l51 w: f52 w: l53 w: l54 w: f55 w: l56 w: l57 w: f58 w: l59 w: l60 w: f61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test107(long l0, float f1, long l2, long l3, float f4, long l5, long l6, float f7, long l8, long l9, float f10, long l11, long l12, float f13, long l14, long l15, float f16, long l17, long l18, float f19, long l20, long l21, float f22, long l23, long l24, float f25, long l26, long l27, float f28, long l29, long l30, float f31, long l32, long l33, float f34, long l35, long l36, float f37, long l38, long l39, float f40, long l41, long l42, float f43, long l44, long l45, float f46, long l47, long l48, float f49, long l50, long l51, float f52, long l53, long l54, float f55, long l56, long l57, float f58, long l59, long l60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test108: f0 w: d1 w: l2 w: f3 w: d4 w: l5 w: f6 w: d7 w: l8 w: f9 w: d10 w: l11 w: f12 w: d13 w: l14 w: f15 w: d16 w: l17 w: f18 w: d19 w: l20 w: f21 w: d22 w: l23 w: f24 w: d25 w: l26 w: f27 w: d28 w: l29 w: f30 w: d31 w: l32 w: f33 w: d34 w: l35 w: f36 w: d37 w: l38 w: f39 w: d40 w: l41 w: f42 w: d43 w: l44 w: f45 w: d46 w: l47 w: f48 w: d49 w: l50 w: f51 w: d52 w: l53 w: f54 w: d55 w: l56 w: f57 w: d58 w: l59 w: f60 w: d61 w: l62 w: f63	&lt;C: unsigned long long _threaded  test108(float f0, double d1, long l2, float f3, double d4, long l5, float f6, double d7, long l8, float f9, double d10, long l11, float f12, double d13, long l14, float f15, double d16, long l17, float f18, double d19, long l20, float f21, double d22, long l23, float f24, double d25, long l26, float f27, double d28, long l29, float f30, double d31, long l32, float f33, double d34, long l35, float f36, double d37, long l38, float f39, double d40, long l41, float f42, double d43, long l44, float f45, double d46, long l47, float f48, double d49, long l50, float f51, double d52, long l53, float f54, double d55, long l56, float f57, double d58, long l59, float f60, double d61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test109: l0 w: f1 w: d2 w: l3 w: f4 w: d5 w: l6 w: f7 w: d8 w: l9 w: f10 w: d11 w: l12 w: f13 w: d14 w: l15 w: f16 w: d17 w: l18 w: f19 w: d20 w: l21 w: f22 w: d23 w: l24 w: f25 w: d26 w: l27 w: f28 w: d29 w: l30 w: f31 w: d32 w: l33 w: f34 w: d35 w: l36 w: f37 w: d38 w: l39 w: f40 w: d41 w: l42 w: f43 w: d44 w: l45 w: f46 w: d47 w: l48 w: f49 w: d50 w: l51 w: f52 w: d53 w: l54 w: f55 w: d56 w: l57 w: f58 w: d59 w: l60 w: f61 w: d62 w: l63	&lt;C: unsigned long long _threaded  test109(long l0, float f1, double d2, long l3, float f4, double d5, long l6, float f7, double d8, long l9, float f10, double d11, long l12, float f13, double d14, long l15, float f16, double d17, long l18, float f19, double d20, long l21, float f22, double d23, long l24, float f25, double d26, long l27, float f28, double d29, long l30, float f31, double d32, long l33, float f34, double d35, long l36, float f37, double d38, long l39, float f40, double d41, long l42, float f43, double d44, long l45, float f46, double d47, long l48, float f49, double d50, long l51, float f52, double d53, long l54, float f55, double d56, long l57, float f58, double d59, long l60, float f61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test110: d0 w: l1 w: f2 w: d3 w: l4 w: f5 w: d6 w: l7 w: f8 w: d9 w: l10 w: f11 w: d12 w: l13 w: f14 w: d15 w: l16 w: f17 w: d18 w: l19 w: f20 w: d21 w: l22 w: f23 w: d24 w: l25 w: f26 w: d27 w: l28 w: f29 w: d30 w: l31 w: f32 w: d33 w: l34 w: f35 w: d36 w: l37 w: f38 w: d39 w: l40 w: f41 w: d42 w: l43 w: f44 w: d45 w: l46 w: f47 w: d48 w: l49 w: f50 w: d51 w: l52 w: f53 w: d54 w: l55 w: f56 w: d57 w: l58 w: f59 w: d60 w: l61 w: f62 w: d63	&lt;C: unsigned long long _threaded  test110(double d0, long l1, float f2, double d3, long l4, float f5, double d6, long l7, float f8, double d9, long l10, float f11, double d12, long l13, float f14, double d15, long l16, float f17, double d18, long l19, float f20, double d21, long l22, float f23, double d24, long l25, float f26, double d27, long l28, float f29, double d30, long l31, float f32, double d33, long l34, float f35, double d36, long l37, float f38, double d39, long l40, float f41, double d42, long l43, float f44, double d45, long l46, float f47, double d48, long l49, float f50, double d51, long l52, float f53, double d54, long l55, float f56, double d57, long l58, float f59, double d60, long l61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test111: f0 w: f1 w: l2 w: l3 w: l4 w: l5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: l38 w: l39 w: l40 w: l41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test111(float f0, float f1, long l2, long l3, long l4, long l5, float f6, float f7, long l8, long l9, long l10, long l11, float f12, float f13, long l14, long l15, long l16, long l17, float f18, float f19, long l20, long l21, long l22, long l23, float f24, float f25, long l26, long l27, long l28, long l29, float f30, float f31, long l32, long l33, long l34, long l35, float f36, float f37, long l38, long l39, long l40, long l41, float f42, float f43, long l44, long l45, long l46, long l47, float f48, float f49, long l50, long l51, long l52, long l53, float f54, float f55, long l56, long l57, long l58, long l59, float f60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test112: l0 w: l1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: l22 w: l23 w: l24 w: l25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: l34 w: l35 w: l36 w: l37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: l58 w: l59 w: l60 w: l61 w: f62 w: f63	&lt;C: unsigned long long _threaded  test112(long l0, long l1, float f2, float f3, long l4, long l5, long l6, long l7, float f8, float f9, long l10, long l11, long l12, long l13, float f14, float f15, long l16, long l17, long l18, long l19, float f20, float f21, long l22, long l23, long l24, long l25, float f26, float f27, long l28, long l29, long l30, long l31, float f32, float f33, long l34, long l35, long l36, long l37, float f38, float f39, long l40, long l41, long l42, long l43, float f44, float f45, long l46, long l47, long l48, long l49, float f50, float f51, long l52, long l53, long l54, long l55, float f56, float f57, long l58, long l59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test113: f0 w: f1 w: d2 w: d3 w: l4 w: l5 w: f6 w: f7 w: d8 w: d9 w: l10 w: l11 w: f12 w: f13 w: d14 w: d15 w: l16 w: l17 w: f18 w: f19 w: d20 w: d21 w: l22 w: l23 w: f24 w: f25 w: d26 w: d27 w: l28 w: l29 w: f30 w: f31 w: d32 w: d33 w: l34 w: l35 w: f36 w: f37 w: d38 w: d39 w: l40 w: l41 w: f42 w: f43 w: d44 w: d45 w: l46 w: l47 w: f48 w: f49 w: d50 w: d51 w: l52 w: l53 w: f54 w: f55 w: d56 w: d57 w: l58 w: l59 w: f60 w: f61 w: d62 w: d63	&lt;C: unsigned long long _threaded  test113(float f0, float f1, double d2, double d3, long l4, long l5, float f6, float f7, double d8, double d9, long l10, long l11, float f12, float f13, double d14, double d15, long l16, long l17, float f18, float f19, double d20, double d21, long l22, long l23, float f24, float f25, double d26, double d27, long l28, long l29, float f30, float f31, double d32, double d33, long l34, long l35, float f36, float f37, double d38, double d39, long l40, long l41, float f42, float f43, double d44, double d45, long l46, long l47, float f48, float f49, double d50, double d51, long l52, long l53, float f54, float f55, double d56, double d57, long l58, long l59, float f60, float f61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test114: l0 w: l1 w: f2 w: f3 w: d4 w: d5 w: l6 w: l7 w: f8 w: f9 w: d10 w: d11 w: l12 w: l13 w: f14 w: f15 w: d16 w: d17 w: l18 w: l19 w: f20 w: f21 w: d22 w: d23 w: l24 w: l25 w: f26 w: f27 w: d28 w: d29 w: l30 w: l31 w: f32 w: f33 w: d34 w: d35 w: l36 w: l37 w: f38 w: f39 w: d40 w: d41 w: l42 w: l43 w: f44 w: f45 w: d46 w: d47 w: l48 w: l49 w: f50 w: f51 w: d52 w: d53 w: l54 w: l55 w: f56 w: f57 w: d58 w: d59 w: l60 w: l61 w: f62 w: f63	&lt;C: unsigned long long _threaded  test114(long l0, long l1, float f2, float f3, double d4, double d5, long l6, long l7, float f8, float f9, double d10, double d11, long l12, long l13, float f14, float f15, double d16, double d17, long l18, long l19, float f20, float f21, double d22, double d23, long l24, long l25, float f26, float f27, double d28, double d29, long l30, long l31, float f32, float f33, double d34, double d35, long l36, long l37, float f38, float f39, double d40, double d41, long l42, long l43, float f44, float f45, double d46, double d47, long l48, long l49, float f50, float f51, double d52, double d53, long l54, long l55, float f56, float f57, double d58, double d59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test115: d0 w: d1 w: l2 w: l3 w: f4 w: f5 w: d6 w: d7 w: l8 w: l9 w: f10 w: f11 w: d12 w: d13 w: l14 w: l15 w: f16 w: f17 w: d18 w: d19 w: l20 w: l21 w: f22 w: f23 w: d24 w: d25 w: l26 w: l27 w: f28 w: f29 w: d30 w: d31 w: l32 w: l33 w: f34 w: f35 w: d36 w: d37 w: l38 w: l39 w: f40 w: f41 w: d42 w: d43 w: l44 w: l45 w: f46 w: f47 w: d48 w: d49 w: l50 w: l51 w: f52 w: f53 w: d54 w: d55 w: l56 w: l57 w: f58 w: f59 w: d60 w: d61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test115(double d0, double d1, long l2, long l3, float f4, float f5, double d6, double d7, long l8, long l9, float f10, float f11, double d12, double d13, long l14, long l15, float f16, float f17, double d18, double d19, long l20, long l21, float f22, float f23, double d24, double d25, long l26, long l27, float f28, float f29, double d30, double d31, long l32, long l33, float f34, float f35, double d36, double d37, long l38, long l39, float f40, float f41, double d42, double d43, long l44, long l45, float f46, float f47, double d48, double d49, long l50, long l51, float f52, float f53, double d54, double d55, long l56, long l57, float f58, float f59, double d60, double d61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test116: f0 w: f1 w: f2 w: l3 w: l4 w: l5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: l48 w: l49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: f63	&lt;C: unsigned long long _threaded  test116(float f0, float f1, float f2, long l3, long l4, long l5, long l6, long l7, long l8, float f9, float f10, float f11, long l12, long l13, long l14, long l15, long l16, long l17, float f18, float f19, float f20, long l21, long l22, long l23, long l24, long l25, long l26, float f27, float f28, float f29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, long l48, long l49, long l50, long l51, long l52, long l53, float f54, float f55, float f56, long l57, long l58, long l59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test117: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: l15 w: l16 w: l17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test117(long l0, long l1, long l2, float f3, float f4, float f5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, long l15, long l16, long l17, long l18, long l19, long l20, float f21, float f22, float f23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, long l33, long l34, long l35, long l36, long l37, long l38, float f39, float f40, float f41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, long l51, long l52, long l53, long l54, long l55, long l56, float f57, float f58, float f59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test118: f0 w: f1 w: f2 w: d3 w: d4 w: d5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: d39 w: d40 w: d41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: f63	&lt;C: unsigned long long _threaded  test118(float f0, float f1, float f2, double d3, double d4, double d5, long l6, long l7, long l8, float f9, float f10, float f11, double d12, double d13, double d14, long l15, long l16, long l17, float f18, float f19, float f20, double d21, double d22, double d23, long l24, long l25, long l26, float f27, float f28, float f29, double d30, double d31, double d32, long l33, long l34, long l35, float f36, float f37, float f38, double d39, double d40, double d41, long l42, long l43, long l44, float f45, float f46, float f47, double d48, double d49, double d50, long l51, long l52, long l53, float f54, float f55, float f56, double d57, double d58, double d59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test119: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: d6 w: d7 w: d8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: d51 w: d52 w: d53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: l63	&lt;C: unsigned long long _threaded  test119(long l0, long l1, long l2, float f3, float f4, float f5, double d6, double d7, double d8, long l9, long l10, long l11, float f12, float f13, float f14, double d15, double d16, double d17, long l18, long l19, long l20, float f21, float f22, float f23, double d24, double d25, double d26, long l27, long l28, long l29, float f30, float f31, float f32, double d33, double d34, double d35, long l36, long l37, long l38, float f39, float f40, float f41, double d42, double d43, double d44, long l45, long l46, long l47, float f48, float f49, float f50, double d51, double d52, double d53, long l54, long l55, long l56, float f57, float f58, float f59, double d60, double d61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test120: d0 w: d1 w: d2 w: l3 w: l4 w: l5 w: f6 w: f7 w: f8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: d18 w: d19 w: d20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: l39 w: l40 w: l41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: f51 w: f52 w: f53 w: d54 w: d55 w: d56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: d63	&lt;C: unsigned long long _threaded  test120(double d0, double d1, double d2, long l3, long l4, long l5, float f6, float f7, float f8, double d9, double d10, double d11, long l12, long l13, long l14, float f15, float f16, float f17, double d18, double d19, double d20, long l21, long l22, long l23, float f24, float f25, float f26, double d27, double d28, double d29, long l30, long l31, long l32, float f33, float f34, float f35, double d36, double d37, double d38, long l39, long l40, long l41, float f42, float f43, float f44, double d45, double d46, double d47, long l48, long l49, long l50, float f51, float f52, float f53, double d54, double d55, double d56, long l57, long l58, long l59, float f60, float f61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test121: f0 w: f1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long _threaded  test121(float f0, float f1, float f2, float f3, long l4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, long l16, long l17, long l18, long l19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test122: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test122(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, long l32, long l33, long l34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, long l44, long l45, long l46, long l47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test123: f0 w: f1 w: f2 w: f3 w: d4 w: d5 w: d6 w: d7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: d28 w: d29 w: d30 w: d31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: d52 w: d53 w: d54 w: d55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long _threaded  test123(float f0, float f1, float f2, float f3, double d4, double d5, double d6, double d7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, double d28, double d29, double d30, double d31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, double d52, double d53, double d54, double d55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test124: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: d8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: d32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: d44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test124(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, double d8, double d9, double d10, double d11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, double d32, double d33, double d34, double d35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, double d44, double d45, double d46, double d47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test125: d0 w: d1 w: d2 w: d3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: d15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: d27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: d51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: unsigned long long _threaded  test125(double d0, double d1, double d2, double d3, long l4, long l5, long l6, long l7, float f8, float f9, float f10, float f11, double d12, double d13, double d14, double d15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, double d24, double d25, double d26, double d27, long l28, long l29, long l30, long l31, float f32, float f33, float f34, float f35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, float f44, float f45, float f46, float f47, double d48, double d49, double d50, double d51, long l52, long l53, long l54, long l55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test126: f0 w: f1 w: f2 w: f3 w: f4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: l35 w: l36 w: l37 w: l38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long _threaded  test126(float f0, float f1, float f2, float f3, float f4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, long l35, long l36, long l37, long l38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, long l50, long l51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test127: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: l25 w: l26 w: l27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: l55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test127(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, long l10, long l11, long l12, long l13, long l14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, long l25, long l26, long l27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, long l55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test128: f0 w: f1 w: f2 w: f3 w: f4 w: d5 w: d6 w: d7 w: d8 w: d9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: d24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: d35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: d50 w: d51 w: d52 w: d53 w: d54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long _threaded  test128(float f0, float f1, float f2, float f3, float f4, double d5, double d6, double d7, double d8, double d9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, double d24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, double d35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, double d50, double d51, double d52, double d53, double d54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test129: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: d10 w: d11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: d25 w: d26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: d55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long _threaded  test129(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, double d10, double d11, double d12, double d13, double d14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, double d25, double d26, double d27, double d28, double d29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, double d44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, double d55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test130: d0 w: d1 w: d2 w: d3 w: d4 w: l5 w: l6 w: l7 w: l8 w: l9 w: f10 w: f11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: l24 w: f25 w: f26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: d33 w: d34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: d48 w: d49 w: l50 w: l51 w: l52 w: l53 w: l54 w: f55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: unsigned long long _threaded  test130(double d0, double d1, double d2, double d3, double d4, long l5, long l6, long l7, long l8, long l9, float f10, float f11, float f12, float f13, float f14, double d15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, long l24, float f25, float f26, float f27, float f28, float f29, double d30, double d31, double d32, double d33, double d34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, float f44, double d45, double d46, double d47, double d48, double d49, long l50, long l51, long l52, long l53, long l54, float f55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback001: aCallback001	&lt;C: void _threaded  testCallback001(Callback001 aCallback001)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback002: aCallback002 with: aChar	&lt;C: signed char _threaded  testCallback002(Callback002 aCallback002, signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback003: aCallback003 with: aUChar	&lt;C: unsigned char _threaded  testCallback003(Callback003 aCallback003, unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback004: aCallback004 with: aShort	&lt;C: short _threaded  testCallback004(Callback004 aCallback004, short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback005: aCallback005 with: aUShort	&lt;C: unsigned short _threaded  testCallback005(Callback005 aCallback005, unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback006: aCallback006 with: anInt	&lt;C: int _threaded  testCallback006(Callback006 aCallback006, int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback007: aCallback007 with: aUInt	&lt;C: unsigned int _threaded  testCallback007(Callback007 aCallback007, unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback008: aCallback008 with: aLong	&lt;C: long _threaded  testCallback008(Callback008 aCallback008, long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback009: aCallback009 with: aULong	&lt;C: unsigned long _threaded  testCallback009(Callback009 aCallback009, unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback010: aCallback010 with: aLongLong	&lt;C: long long _threaded  testCallback010(Callback010 aCallback010, long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback011: aCallback011 with: aULongLong	&lt;C: unsigned long long _threaded  testCallback011(Callback011 aCallback011, unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback012: aCallback012 with: aFloat	&lt;C: float _threaded  testCallback012(Callback012 aCallback012, float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback013: aCallback013 with: aDouble	&lt;C: double _threaded  testCallback013(Callback013 aCallback013, double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback014: aCallback014 with: charStruct	&lt;C: CharStruct _threaded  testCallback014(Callback014 aCallback014, CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback015: aCallback015 with: smallStruct	&lt;C: SmallStruct _threaded  testCallback015(Callback015 aCallback015, SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback016: aCallback016 with: mediumStruct	&lt;C: MediumStruct _threaded  testCallback016(Callback016 aCallback016, MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback017: aCallback017 with: largeStruct	&lt;C: LargeStruct _threaded  testCallback017(Callback017 aCallback017, LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback018: aCallback018 with: bigStruct	&lt;C: BigStruct _threaded  testCallback018(Callback018 aCallback018, BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback019: aCallback019 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool char _threaded  testCallback019(Callback019 aCallback019, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback020: aCallback020 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool short _threaded  testCallback020(Callback020 aCallback020, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback021: aCallback021 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool int _threaded  testCallback021(Callback021 aCallback021, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback022: aCallback022 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long _threaded  testCallback022(Callback022 aCallback022, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback023: aCallback023 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long long _threaded  testCallback023(Callback023 aCallback023, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback024: aCallback024 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool char _threaded  testCallback024(Callback024 aCallback024, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback025: aCallback025 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool short _threaded  testCallback025(Callback025 aCallback025, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback026: aCallback026 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool int _threaded  testCallback026(Callback026 aCallback026, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback027: aCallback027 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long _threaded  testCallback027(Callback027 aCallback027, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback028: aCallback028 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long long _threaded  testCallback028(Callback028 aCallback028, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback029: aCallback029 w: block_charA w: block_charB w: block_charC w: block_charD w: block_charE w: block_charF w: block_charG w: block_charH w: block_charI w: block_charJ w: block_charK w: block_charL w: block_charM w: block_charN w: block_charO w: block_charP w: block_charQ w: block_charR w: block_charS w: block_charT w: block_charU w: block_charV w: block_charW w: block_charX w: block_charY w: block_charZ w: block_char0 w: block_char1 w: block_char2 w: block_char3	&lt;C: signed char _threaded  testCallback029(Callback029 aCallback029, signed char block_charA, signed char block_charB, signed char block_charC, signed char block_charD, signed char block_charE, signed char block_charF, signed char block_charG, signed char block_charH, signed char block_charI, signed char block_charJ, signed char block_charK, signed char block_charL, signed char block_charM, signed char block_charN, signed char block_charO, signed char block_charP, signed char block_charQ, signed char block_charR, signed char block_charS, signed char block_charT, signed char block_charU, signed char block_charV, signed char block_charW, signed char block_charX, signed char block_charY, signed char block_charZ, signed char block_char0, signed char block_char1, signed char block_char2, signed char block_char3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback030: aCallback030 w: block_uCharA w: block_uCharB w: block_uCharC w: block_uCharD w: block_uCharE w: block_uCharF w: block_uCharG w: block_uCharH w: block_uCharI w: block_uCharJ w: block_uCharK w: block_uCharL w: block_uCharM w: block_uCharN w: block_uCharO w: block_uCharP w: block_uCharQ w: block_uCharR w: block_uCharS w: block_uCharT w: block_uCharU w: block_uCharV w: block_uCharW w: block_uCharX w: block_uCharY w: block_uCharZ w: block_uChar0 w: block_uChar1 w: block_uChar2 w: block_uChar3	&lt;C: unsigned char _threaded  testCallback030(Callback030 aCallback030, unsigned char block_uCharA, unsigned char block_uCharB, unsigned char block_uCharC, unsigned char block_uCharD, unsigned char block_uCharE, unsigned char block_uCharF, unsigned char block_uCharG, unsigned char block_uCharH, unsigned char block_uCharI, unsigned char block_uCharJ, unsigned char block_uCharK, unsigned char block_uCharL, unsigned char block_uCharM, unsigned char block_uCharN, unsigned char block_uCharO, unsigned char block_uCharP, unsigned char block_uCharQ, unsigned char block_uCharR, unsigned char block_uCharS, unsigned char block_uCharT, unsigned char block_uCharU, unsigned char block_uCharV, unsigned char block_uCharW, unsigned char block_uCharX, unsigned char block_uCharY, unsigned char block_uCharZ, unsigned char block_uChar0, unsigned char block_uChar1, unsigned char block_uChar2, unsigned char block_uChar3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback031: aCallback031 w: block_shortA w: block_shortB w: block_shortC w: block_shortD w: block_shortE w: block_shortF w: block_shortG w: block_shortH w: block_shortI w: block_shortJ w: block_shortK w: block_shortL w: block_shortM w: block_shortN w: block_shortO w: block_shortP w: block_shortQ w: block_shortR w: block_shortS w: block_shortT w: block_shortU w: block_shortV w: block_shortW w: block_shortX w: block_shortY w: block_shortZ w: block_short0 w: block_short1 w: block_short2 w: block_short3	&lt;C: short _threaded  testCallback031(Callback031 aCallback031, short block_shortA, short block_shortB, short block_shortC, short block_shortD, short block_shortE, short block_shortF, short block_shortG, short block_shortH, short block_shortI, short block_shortJ, short block_shortK, short block_shortL, short block_shortM, short block_shortN, short block_shortO, short block_shortP, short block_shortQ, short block_shortR, short block_shortS, short block_shortT, short block_shortU, short block_shortV, short block_shortW, short block_shortX, short block_shortY, short block_shortZ, short block_short0, short block_short1, short block_short2, short block_short3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback032: aCallback032 w: block_uShortA w: block_uShortB w: block_uShortC w: block_uShortD w: block_uShortE w: block_uShortF w: block_uShortG w: block_uShortH w: block_uShortI w: block_uShortJ w: block_uShortK w: block_uShortL w: block_uShortM w: block_uShortN w: block_uShortO w: block_uShortP w: block_uShortQ w: block_uShortR w: block_uShortS w: block_uShortT w: block_uShortU w: block_uShortV w: block_uShortW w: block_uShortX w: block_uShortY w: block_uShortZ w: block_uShort0 w: block_uShort1 w: block_uShort2 w: block_uShort3	&lt;C: unsigned short _threaded  testCallback032(Callback032 aCallback032, unsigned short block_uShortA, unsigned short block_uShortB, unsigned short block_uShortC, unsigned short block_uShortD, unsigned short block_uShortE, unsigned short block_uShortF, unsigned short block_uShortG, unsigned short block_uShortH, unsigned short block_uShortI, unsigned short block_uShortJ, unsigned short block_uShortK, unsigned short block_uShortL, unsigned short block_uShortM, unsigned short block_uShortN, unsigned short block_uShortO, unsigned short block_uShortP, unsigned short block_uShortQ, unsigned short block_uShortR, unsigned short block_uShortS, unsigned short block_uShortT, unsigned short block_uShortU, unsigned short block_uShortV, unsigned short block_uShortW, unsigned short block_uShortX, unsigned short block_uShortY, unsigned short block_uShortZ, unsigned short block_uShort0, unsigned short block_uShort1, unsigned short block_uShort2, unsigned short block_uShort3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback033: aCallback033 w: block_intA w: block_intB w: block_intC w: block_intD w: block_intE w: block_intF w: block_intG w: block_intH w: block_intI w: block_intJ w: block_intK w: block_intL w: block_intM w: block_intN w: block_intO w: block_intP w: block_intQ w: block_intR w: block_intS w: block_intT w: block_intU w: block_intV w: block_intW w: block_intX w: block_intY w: block_intZ w: block_int0 w: block_int1 w: block_int2 w: block_int3	&lt;C: int _threaded  testCallback033(Callback033 aCallback033, int block_intA, int block_intB, int block_intC, int block_intD, int block_intE, int block_intF, int block_intG, int block_intH, int block_intI, int block_intJ, int block_intK, int block_intL, int block_intM, int block_intN, int block_intO, int block_intP, int block_intQ, int block_intR, int block_intS, int block_intT, int block_intU, int block_intV, int block_intW, int block_intX, int block_intY, int block_intZ, int block_int0, int block_int1, int block_int2, int block_int3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback034: aCallback034 w: block_uIntA w: block_uIntB w: block_uIntC w: block_uIntD w: block_uIntE w: block_uIntF w: block_uIntG w: block_uIntH w: block_uIntI w: block_uIntJ w: block_uIntK w: block_uIntL w: block_uIntM w: block_uIntN w: block_uIntO w: block_uIntP w: block_uIntQ w: block_uIntR w: block_uIntS w: block_uIntT w: block_uIntU w: block_uIntV w: block_uIntW w: block_uIntX w: block_uIntY w: block_uIntZ w: block_uInt0 w: block_uInt1 w: block_uInt2 w: block_uInt3	&lt;C: unsigned int _threaded  testCallback034(Callback034 aCallback034, unsigned int block_uIntA, unsigned int block_uIntB, unsigned int block_uIntC, unsigned int block_uIntD, unsigned int block_uIntE, unsigned int block_uIntF, unsigned int block_uIntG, unsigned int block_uIntH, unsigned int block_uIntI, unsigned int block_uIntJ, unsigned int block_uIntK, unsigned int block_uIntL, unsigned int block_uIntM, unsigned int block_uIntN, unsigned int block_uIntO, unsigned int block_uIntP, unsigned int block_uIntQ, unsigned int block_uIntR, unsigned int block_uIntS, unsigned int block_uIntT, unsigned int block_uIntU, unsigned int block_uIntV, unsigned int block_uIntW, unsigned int block_uIntX, unsigned int block_uIntY, unsigned int block_uIntZ, unsigned int block_uInt0, unsigned int block_uInt1, unsigned int block_uInt2, unsigned int block_uInt3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback035: aCallback035 w: block_longA w: block_longB w: block_longC w: block_longD w: block_longE w: block_longF w: block_longG w: block_longH w: block_longI w: block_longJ w: block_longK w: block_longL w: block_longM w: block_longN w: block_longO w: block_longP w: block_longQ w: block_longR w: block_longS w: block_longT w: block_longU w: block_longV w: block_longW w: block_longX w: block_longY w: block_longZ w: block_long0 w: block_long1 w: block_long2 w: block_long3	&lt;C: long _threaded  testCallback035(Callback035 aCallback035, long block_longA, long block_longB, long block_longC, long block_longD, long block_longE, long block_longF, long block_longG, long block_longH, long block_longI, long block_longJ, long block_longK, long block_longL, long block_longM, long block_longN, long block_longO, long block_longP, long block_longQ, long block_longR, long block_longS, long block_longT, long block_longU, long block_longV, long block_longW, long block_longX, long block_longY, long block_longZ, long block_long0, long block_long1, long block_long2, long block_long3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback036: aCallback036 w: block_uLongA w: block_uLongB w: block_uLongC w: block_uLongD w: block_uLongE w: block_uLongF w: block_uLongG w: block_uLongH w: block_uLongI w: block_uLongJ w: block_uLongK w: block_uLongL w: block_uLongM w: block_uLongN w: block_uLongO w: block_uLongP w: block_uLongQ w: block_uLongR w: block_uLongS w: block_uLongT w: block_uLongU w: block_uLongV w: block_uLongW w: block_uLongX w: block_uLongY w: block_uLongZ w: block_uLong0 w: block_uLong1 w: block_uLong2 w: block_uLong3	&lt;C: unsigned long _threaded  testCallback036(Callback036 aCallback036, unsigned long block_uLongA, unsigned long block_uLongB, unsigned long block_uLongC, unsigned long block_uLongD, unsigned long block_uLongE, unsigned long block_uLongF, unsigned long block_uLongG, unsigned long block_uLongH, unsigned long block_uLongI, unsigned long block_uLongJ, unsigned long block_uLongK, unsigned long block_uLongL, unsigned long block_uLongM, unsigned long block_uLongN, unsigned long block_uLongO, unsigned long block_uLongP, unsigned long block_uLongQ, unsigned long block_uLongR, unsigned long block_uLongS, unsigned long block_uLongT, unsigned long block_uLongU, unsigned long block_uLongV, unsigned long block_uLongW, unsigned long block_uLongX, unsigned long block_uLongY, unsigned long block_uLongZ, unsigned long block_uLong0, unsigned long block_uLong1, unsigned long block_uLong2, unsigned long block_uLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback037: aCallback037 w: block_longLongA w: block_longLongB w: block_longLongC w: block_longLongD w: block_longLongE w: block_longLongF w: block_longLongG w: block_longLongH w: block_longLongI w: block_longLongJ w: block_longLongK w: block_longLongL w: block_longLongM w: block_longLongN w: block_longLongO w: block_longLongP w: block_longLongQ w: block_longLongR w: block_longLongS w: block_longLongT w: block_longLongU w: block_longLongV w: block_longLongW w: block_longLongX w: block_longLongY w: block_longLongZ w: block_longLong0 w: block_longLong1 w: block_longLong2 w: block_longLong3	&lt;C: long long _threaded  testCallback037(Callback037 aCallback037, long long block_longLongA, long long block_longLongB, long long block_longLongC, long long block_longLongD, long long block_longLongE, long long block_longLongF, long long block_longLongG, long long block_longLongH, long long block_longLongI, long long block_longLongJ, long long block_longLongK, long long block_longLongL, long long block_longLongM, long long block_longLongN, long long block_longLongO, long long block_longLongP, long long block_longLongQ, long long block_longLongR, long long block_longLongS, long long block_longLongT, long long block_longLongU, long long block_longLongV, long long block_longLongW, long long block_longLongX, long long block_longLongY, long long block_longLongZ, long long block_longLong0, long long block_longLong1, long long block_longLong2, long long block_longLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback038: aCallback038 w: block_uLongLongA w: block_uLongLongB w: block_uLongLongC w: block_uLongLongD w: block_uLongLongE w: block_uLongLongF w: block_uLongLongG w: block_uLongLongH w: block_uLongLongI w: block_uLongLongJ w: block_uLongLongK w: block_uLongLongL w: block_uLongLongM w: block_uLongLongN w: block_uLongLongO w: block_uLongLongP w: block_uLongLongQ w: block_uLongLongR w: block_uLongLongS w: block_uLongLongT w: block_uLongLongU w: block_uLongLongV w: block_uLongLongW w: block_uLongLongX w: block_uLongLongY w: block_uLongLongZ w: block_uLongLong0 w: block_uLongLong1 w: block_uLongLong2 w: block_uLongLong3	&lt;C: unsigned long long _threaded  testCallback038(Callback038 aCallback038, unsigned long long block_uLongLongA, unsigned long long block_uLongLongB, unsigned long long block_uLongLongC, unsigned long long block_uLongLongD, unsigned long long block_uLongLongE, unsigned long long block_uLongLongF, unsigned long long block_uLongLongG, unsigned long long block_uLongLongH, unsigned long long block_uLongLongI, unsigned long long block_uLongLongJ, unsigned long long block_uLongLongK, unsigned long long block_uLongLongL, unsigned long long block_uLongLongM, unsigned long long block_uLongLongN, unsigned long long block_uLongLongO, unsigned long long block_uLongLongP, unsigned long long block_uLongLongQ, unsigned long long block_uLongLongR, unsigned long long block_uLongLongS, unsigned long long block_uLongLongT, unsigned long long block_uLongLongU, unsigned long long block_uLongLongV, unsigned long long block_uLongLongW, unsigned long long block_uLongLongX, unsigned long long block_uLongLongY, unsigned long long block_uLongLongZ, unsigned long long block_uLongLong0, unsigned long long block_uLongLong1, unsigned long long block_uLongLong2, unsigned long long block_uLongLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback039: aCallback039 w: block_floatA w: block_floatB w: block_floatC w: block_floatD w: block_floatE w: block_floatF w: block_floatG w: block_floatH w: block_floatI w: block_floatJ w: block_floatK w: block_floatL w: block_floatM w: block_floatN w: block_floatO w: block_floatP w: block_floatQ w: block_floatR w: block_floatS w: block_floatT w: block_floatU w: block_floatV w: block_floatW w: block_floatX w: block_floatY w: block_floatZ w: block_float0 w: block_float1 w: block_float2 w: block_float3	&lt;C: float _threaded  testCallback039(Callback039 aCallback039, float block_floatA, float block_floatB, float block_floatC, float block_floatD, float block_floatE, float block_floatF, float block_floatG, float block_floatH, float block_floatI, float block_floatJ, float block_floatK, float block_floatL, float block_floatM, float block_floatN, float block_floatO, float block_floatP, float block_floatQ, float block_floatR, float block_floatS, float block_floatT, float block_floatU, float block_floatV, float block_floatW, float block_floatX, float block_floatY, float block_floatZ, float block_float0, float block_float1, float block_float2, float block_float3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback040: aCallback040 w: block_doubleA w: block_doubleB w: block_doubleC w: block_doubleD w: block_doubleE w: block_doubleF w: block_doubleG w: block_doubleH w: block_doubleI w: block_doubleJ w: block_doubleK w: block_doubleL w: block_doubleM w: block_doubleN w: block_doubleO w: block_doubleP w: block_doubleQ w: block_doubleR w: block_doubleS w: block_doubleT w: block_doubleU w: block_doubleV w: block_doubleW w: block_doubleX w: block_doubleY w: block_doubleZ w: block_double0 w: block_double1 w: block_double2 w: block_double3	&lt;C: double _threaded  testCallback040(Callback040 aCallback040, double block_doubleA, double block_doubleB, double block_doubleC, double block_doubleD, double block_doubleE, double block_doubleF, double block_doubleG, double block_doubleH, double block_doubleI, double block_doubleJ, double block_doubleK, double block_doubleL, double block_doubleM, double block_doubleN, double block_doubleO, double block_doubleP, double block_doubleQ, double block_doubleR, double block_doubleS, double block_doubleT, double block_doubleU, double block_doubleV, double block_doubleW, double block_doubleX, double block_doubleY, double block_doubleZ, double block_double0, double block_double1, double block_double2, double block_double3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback041: aCallback041 w: block_charStructA w: block_charStructB w: block_charStructC w: block_charStructD w: block_charStructE w: block_charStructF w: block_charStructG w: block_charStructH w: block_charStructI w: block_charStructJ w: block_charStructK w: block_charStructL w: block_charStructM w: block_charStructN w: block_charStructO w: block_charStructP w: block_charStructQ w: block_charStructR w: block_charStructS w: block_charStructT w: block_charStructU w: block_charStructV w: block_charStructW w: block_charStructX w: block_charStructY w: block_charStructZ w: block_charStruct0 w: block_charStruct1 w: block_charStruct2 w: block_charStruct3	&lt;C: CharStruct _threaded  testCallback041(Callback041 aCallback041, CharStruct block_charStructA, CharStruct block_charStructB, CharStruct block_charStructC, CharStruct block_charStructD, CharStruct block_charStructE, CharStruct block_charStructF, CharStruct block_charStructG, CharStruct block_charStructH, CharStruct block_charStructI, CharStruct block_charStructJ, CharStruct block_charStructK, CharStruct block_charStructL, CharStruct block_charStructM, CharStruct block_charStructN, CharStruct block_charStructO, CharStruct block_charStructP, CharStruct block_charStructQ, CharStruct block_charStructR, CharStruct block_charStructS, CharStruct block_charStructT, CharStruct block_charStructU, CharStruct block_charStructV, CharStruct block_charStructW, CharStruct block_charStructX, CharStruct block_charStructY, CharStruct block_charStructZ, CharStruct block_charStruct0, CharStruct block_charStruct1, CharStruct block_charStruct2, CharStruct block_charStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback042: aCallback042 w: block_smallStructA w: block_smallStructB w: block_smallStructC w: block_smallStructD w: block_smallStructE w: block_smallStructF w: block_smallStructG w: block_smallStructH w: block_smallStructI w: block_smallStructJ w: block_smallStructK w: block_smallStructL w: block_smallStructM w: block_smallStructN w: block_smallStructO w: block_smallStructP w: block_smallStructQ w: block_smallStructR w: block_smallStructS w: block_smallStructT w: block_smallStructU w: block_smallStructV w: block_smallStructW w: block_smallStructX w: block_smallStructY w: block_smallStructZ w: block_smallStruct0 w: block_smallStruct1 w: block_smallStruct2 w: block_smallStruct3	&lt;C: SmallStruct _threaded  testCallback042(Callback042 aCallback042, SmallStruct block_smallStructA, SmallStruct block_smallStructB, SmallStruct block_smallStructC, SmallStruct block_smallStructD, SmallStruct block_smallStructE, SmallStruct block_smallStructF, SmallStruct block_smallStructG, SmallStruct block_smallStructH, SmallStruct block_smallStructI, SmallStruct block_smallStructJ, SmallStruct block_smallStructK, SmallStruct block_smallStructL, SmallStruct block_smallStructM, SmallStruct block_smallStructN, SmallStruct block_smallStructO, SmallStruct block_smallStructP, SmallStruct block_smallStructQ, SmallStruct block_smallStructR, SmallStruct block_smallStructS, SmallStruct block_smallStructT, SmallStruct block_smallStructU, SmallStruct block_smallStructV, SmallStruct block_smallStructW, SmallStruct block_smallStructX, SmallStruct block_smallStructY, SmallStruct block_smallStructZ, SmallStruct block_smallStruct0, SmallStruct block_smallStruct1, SmallStruct block_smallStruct2, SmallStruct block_smallStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback043: aCallback043 w: block_mediumStructA w: block_mediumStructB w: block_mediumStructC w: block_mediumStructD w: block_mediumStructE w: block_mediumStructF w: block_mediumStructG w: block_mediumStructH w: block_mediumStructI w: block_mediumStructJ w: block_mediumStructK w: block_mediumStructL w: block_mediumStructM w: block_mediumStructN w: block_mediumStructO w: block_mediumStructP w: block_mediumStructQ w: block_mediumStructR w: block_mediumStructS w: block_mediumStructT w: block_mediumStructU w: block_mediumStructV w: block_mediumStructW w: block_mediumStructX w: block_mediumStructY w: block_mediumStructZ w: block_mediumStruct0 w: block_mediumStruct1 w: block_mediumStruct2 w: block_mediumStruct3	&lt;C: MediumStruct _threaded  testCallback043(Callback043 aCallback043, MediumStruct block_mediumStructA, MediumStruct block_mediumStructB, MediumStruct block_mediumStructC, MediumStruct block_mediumStructD, MediumStruct block_mediumStructE, MediumStruct block_mediumStructF, MediumStruct block_mediumStructG, MediumStruct block_mediumStructH, MediumStruct block_mediumStructI, MediumStruct block_mediumStructJ, MediumStruct block_mediumStructK, MediumStruct block_mediumStructL, MediumStruct block_mediumStructM, MediumStruct block_mediumStructN, MediumStruct block_mediumStructO, MediumStruct block_mediumStructP, MediumStruct block_mediumStructQ, MediumStruct block_mediumStructR, MediumStruct block_mediumStructS, MediumStruct block_mediumStructT, MediumStruct block_mediumStructU, MediumStruct block_mediumStructV, MediumStruct block_mediumStructW, MediumStruct block_mediumStructX, MediumStruct block_mediumStructY, MediumStruct block_mediumStructZ, MediumStruct block_mediumStruct0, MediumStruct block_mediumStruct1, MediumStruct block_mediumStruct2, MediumStruct block_mediumStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback044: aCallback044 w: block_largeStructA w: block_largeStructB w: block_largeStructC w: block_largeStructD w: block_largeStructE w: block_largeStructF w: block_largeStructG w: block_largeStructH w: block_largeStructI w: block_largeStructJ w: block_largeStructK w: block_largeStructL w: block_largeStructM w: block_largeStructN w: block_largeStructO w: block_largeStructP w: block_largeStructQ w: block_largeStructR w: block_largeStructS w: block_largeStructT w: block_largeStructU w: block_largeStructV w: block_largeStructW w: block_largeStructX w: block_largeStructY w: block_largeStructZ w: block_largeStruct0 w: block_largeStruct1 w: block_largeStruct2 w: block_largeStruct3	&lt;C: LargeStruct _threaded  testCallback044(Callback044 aCallback044, LargeStruct block_largeStructA, LargeStruct block_largeStructB, LargeStruct block_largeStructC, LargeStruct block_largeStructD, LargeStruct block_largeStructE, LargeStruct block_largeStructF, LargeStruct block_largeStructG, LargeStruct block_largeStructH, LargeStruct block_largeStructI, LargeStruct block_largeStructJ, LargeStruct block_largeStructK, LargeStruct block_largeStructL, LargeStruct block_largeStructM, LargeStruct block_largeStructN, LargeStruct block_largeStructO, LargeStruct block_largeStructP, LargeStruct block_largeStructQ, LargeStruct block_largeStructR, LargeStruct block_largeStructS, LargeStruct block_largeStructT, LargeStruct block_largeStructU, LargeStruct block_largeStructV, LargeStruct block_largeStructW, LargeStruct block_largeStructX, LargeStruct block_largeStructY, LargeStruct block_largeStructZ, LargeStruct block_largeStruct0, LargeStruct block_largeStruct1, LargeStruct block_largeStruct2, LargeStruct block_largeStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback045: aCallback045 w: block_bigStructA w: block_bigStructB w: block_bigStructC w: block_bigStructD w: block_bigStructE w: block_bigStructF w: block_bigStructG w: block_bigStructH w: block_bigStructI w: block_bigStructJ w: block_bigStructK w: block_bigStructL w: block_bigStructM w: block_bigStructN w: block_bigStructO w: block_bigStructP w: block_bigStructQ w: block_bigStructR w: block_bigStructS w: block_bigStructT w: block_bigStructU w: block_bigStructV w: block_bigStructW w: block_bigStructX w: block_bigStructY w: block_bigStructZ w: block_bigStruct0 w: block_bigStruct1 w: block_bigStruct2 w: block_bigStruct3	&lt;C: BigStruct _threaded  testCallback045(Callback045 aCallback045, BigStruct block_bigStructA, BigStruct block_bigStructB, BigStruct block_bigStructC, BigStruct block_bigStructD, BigStruct block_bigStructE, BigStruct block_bigStructF, BigStruct block_bigStructG, BigStruct block_bigStructH, BigStruct block_bigStructI, BigStruct block_bigStructJ, BigStruct block_bigStructK, BigStruct block_bigStructL, BigStruct block_bigStructM, BigStruct block_bigStructN, BigStruct block_bigStructO, BigStruct block_bigStructP, BigStruct block_bigStructQ, BigStruct block_bigStructR, BigStruct block_bigStructS, BigStruct block_bigStructT, BigStruct block_bigStructU, BigStruct block_bigStructV, BigStruct block_bigStructW, BigStruct block_bigStructX, BigStruct block_bigStructY, BigStruct block_bigStructZ, BigStruct block_bigStruct0, BigStruct block_bigStruct1, BigStruct block_bigStruct2, BigStruct block_bigStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback046: aCallback046 w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA	&lt;C: signed char _threaded  testCallback046(Callback046 aCallback046, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback047: aCallback047 w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar	&lt;C: unsigned char _threaded  testCallback047(Callback047 aCallback047, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback048: aCallback048 w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar	&lt;C: short _threaded  testCallback048(Callback048 aCallback048, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback049: aCallback049 w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort	&lt;C: unsigned short _threaded  testCallback049(Callback049 aCallback049, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback050: aCallback050 w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort	&lt;C: int _threaded  testCallback050(Callback050 aCallback050, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback051: aCallback051 w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt	&lt;C: unsigned int _threaded  testCallback051(Callback051 aCallback051, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback052: aCallback052 w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt	&lt;C: long _threaded  testCallback052(Callback052 aCallback052, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback053: aCallback053 w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong	&lt;C: unsigned long _threaded  testCallback053(Callback053 aCallback053, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback054: aCallback054 w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong	&lt;C: long long _threaded  testCallback054(Callback054 aCallback054, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback055: aCallback055 w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong	&lt;C: unsigned long long _threaded  testCallback055(Callback055 aCallback055, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback056: aCallback056 w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong	&lt;C: float _threaded  testCallback056(Callback056 aCallback056, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback057: aCallback057 w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat	&lt;C: double _threaded  testCallback057(Callback057 aCallback057, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback058: aCallback058 w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble	&lt;C: CharStruct _threaded  testCallback058(Callback058 aCallback058, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback059: aCallback059 w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct	&lt;C: SmallStruct _threaded  testCallback059(Callback059 aCallback059, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback060: aCallback060 w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct	&lt;C: MediumStruct _threaded  testCallback060(Callback060 aCallback060, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback061: aCallback061 w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct	&lt;C: LargeStruct _threaded  testCallback061(Callback061 aCallback061, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback062: aCallback062 w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct	&lt;C: BigStruct _threaded  testCallback062(Callback062 aCallback062, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback063: aCallback063 w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct	&lt;C: signed char _threaded  testCallback063(Callback063 aCallback063, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback064: aCallback064 w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar	&lt;C: unsigned char _threaded  testCallback064(Callback064 aCallback064, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback065: aCallback065 w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar	&lt;C: short _threaded  testCallback065(Callback065 aCallback065, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback066: aCallback066 w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort	&lt;C: unsigned short _threaded  testCallback066(Callback066 aCallback066, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback067: aCallback067 w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort	&lt;C: int _threaded  testCallback067(Callback067 aCallback067, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback068: aCallback068 w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt	&lt;C: unsigned int _threaded  testCallback068(Callback068 aCallback068, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback069: aCallback069 w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt	&lt;C: long _threaded  testCallback069(Callback069 aCallback069, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback070: aCallback070 w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong	&lt;C: unsigned long _threaded  testCallback070(Callback070 aCallback070, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback071: aCallback071 w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong	&lt;C: long long _threaded  testCallback071(Callback071 aCallback071, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback072: aCallback072 w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong	&lt;C: unsigned long long _threaded  testCallback072(Callback072 aCallback072, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback073: aCallback073 w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong	&lt;C: float _threaded  testCallback073(Callback073 aCallback073, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback074: aCallback074 w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat	&lt;C: double _threaded  testCallback074(Callback074 aCallback074, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback075: aCallback075 w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble	&lt;C: CharStruct _threaded  testCallback075(Callback075 aCallback075, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback076: aCallback076 w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA	&lt;C: SmallStruct _threaded  testCallback076(Callback076 aCallback076, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback077: aCallback077 w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA	&lt;C: MediumStruct _threaded  testCallback077(Callback077 aCallback077, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback078: aCallback078 w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA	&lt;C: LargeStruct _threaded  testCallback078(Callback078 aCallback078, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback079: aCallback079 w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA	&lt;C: BigStruct _threaded  testCallback079(Callback079 aCallback079, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback080: aCallback080 w: f0 w: f1 w: f2 w: f3 w: f4 w: f5 w: f6 w: f7 w: f8 w: f9 w: f10 w: f11 w: f12 w: f13 w: f14 w: f15 w: f16 w: f17 w: f18 w: f19 w: f20 w: f21 w: f22 w: f23 w: f24 w: f25 w: f26 w: f27 w: f28 w: f29 w: f30 w: f31 w: f32 w: f33 w: f34 w: f35 w: f36 w: f37 w: f38 w: f39 w: f40 w: f41 w: f42 w: f43 w: f44 w: f45 w: f46 w: f47 w: f48 w: f49 w: f50 w: f51 w: f52 w: f53 w: f54 w: f55 w: f56 w: f57 w: f58 w: f59 w: f60 w: f61 w: f62 w: f63	&lt;C: float _threaded  testCallback080(Callback080 aCallback080, float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13, float f14, float f15, float f16, float f17, float f18, float f19, float f20, float f21, float f22, float f23, float f24, float f25, float f26, float f27, float f28, float f29, float f30, float f31, float f32, float f33, float f34, float f35, float f36, float f37, float f38, float f39, float f40, float f41, float f42, float f43, float f44, float f45, float f46, float f47, float f48, float f49, float f50, float f51, float f52, float f53, float f54, float f55, float f56, float f57, float f58, float f59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback081: aCallback081 w: d0 w: d1 w: d2 w: d3 w: d4 w: d5 w: d6 w: d7 w: d8 w: d9 w: d10 w: d11 w: d12 w: d13 w: d14 w: d15 w: d16 w: d17 w: d18 w: d19 w: d20 w: d21 w: d22 w: d23 w: d24 w: d25 w: d26 w: d27 w: d28 w: d29 w: d30 w: d31 w: d32 w: d33 w: d34 w: d35 w: d36 w: d37 w: d38 w: d39 w: d40 w: d41 w: d42 w: d43 w: d44 w: d45 w: d46 w: d47 w: d48 w: d49 w: d50 w: d51 w: d52 w: d53 w: d54 w: d55 w: d56 w: d57 w: d58 w: d59 w: d60 w: d61 w: d62 w: d63	&lt;C: double _threaded  testCallback081(Callback081 aCallback081, double d0, double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11, double d12, double d13, double d14, double d15, double d16, double d17, double d18, double d19, double d20, double d21, double d22, double d23, double d24, double d25, double d26, double d27, double d28, double d29, double d30, double d31, double d32, double d33, double d34, double d35, double d36, double d37, double d38, double d39, double d40, double d41, double d42, double d43, double d44, double d45, double d46, double d47, double d48, double d49, double d50, double d51, double d52, double d53, double d54, double d55, double d56, double d57, double d58, double d59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback082: aCallback082 w: d0 w: f1 w: d2 w: f3 w: d4 w: f5 w: d6 w: f7 w: d8 w: f9 w: d10 w: f11 w: d12 w: f13 w: d14 w: f15 w: d16 w: f17 w: d18 w: f19 w: d20 w: f21 w: d22 w: f23 w: d24 w: f25 w: d26 w: f27 w: d28 w: f29 w: d30 w: f31 w: d32 w: f33 w: d34 w: f35 w: d36 w: f37 w: d38 w: f39 w: d40 w: f41 w: d42 w: f43 w: d44 w: f45 w: d46 w: f47 w: d48 w: f49 w: d50 w: f51 w: d52 w: f53 w: d54 w: f55 w: d56 w: f57 w: d58 w: f59 w: d60 w: f61 w: d62 w: f63	&lt;C: double _threaded  testCallback082(Callback082 aCallback082, double d0, float f1, double d2, float f3, double d4, float f5, double d6, float f7, double d8, float f9, double d10, float f11, double d12, float f13, double d14, float f15, double d16, float f17, double d18, float f19, double d20, float f21, double d22, float f23, double d24, float f25, double d26, float f27, double d28, float f29, double d30, float f31, double d32, float f33, double d34, float f35, double d36, float f37, double d38, float f39, double d40, float f41, double d42, float f43, double d44, float f45, double d46, float f47, double d48, float f49, double d50, float f51, double d52, float f53, double d54, float f55, double d56, float f57, double d58, float f59, double d60, float f61, double d62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback083: aCallback083 w: f0 w: d1 w: f2 w: d3 w: f4 w: d5 w: f6 w: d7 w: f8 w: d9 w: f10 w: d11 w: f12 w: d13 w: f14 w: d15 w: f16 w: d17 w: f18 w: d19 w: f20 w: d21 w: f22 w: d23 w: f24 w: d25 w: f26 w: d27 w: f28 w: d29 w: f30 w: d31 w: f32 w: d33 w: f34 w: d35 w: f36 w: d37 w: f38 w: d39 w: f40 w: d41 w: f42 w: d43 w: f44 w: d45 w: f46 w: d47 w: f48 w: d49 w: f50 w: d51 w: f52 w: d53 w: f54 w: d55 w: f56 w: d57 w: f58 w: d59 w: f60 w: d61 w: f62 w: d63	&lt;C: float _threaded  testCallback083(Callback083 aCallback083, float f0, double d1, float f2, double d3, float f4, double d5, float f6, double d7, float f8, double d9, float f10, double d11, float f12, double d13, float f14, double d15, float f16, double d17, float f18, double d19, float f20, double d21, float f22, double d23, float f24, double d25, float f26, double d27, float f28, double d29, float f30, double d31, float f32, double d33, float f34, double d35, float f36, double d37, float f38, double d39, float f40, double d41, float f42, double d43, float f44, double d45, float f46, double d47, float f48, double d49, float f50, double d51, float f52, double d53, float f54, double d55, float f56, double d57, float f58, double d59, float f60, double d61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback084: aCallback084 w: f0 w: l1 w: l2 w: f3 w: l4 w: l5 w: f6 w: l7 w: l8 w: f9 w: l10 w: l11 w: f12 w: l13 w: l14 w: f15 w: l16 w: l17 w: f18 w: l19 w: l20 w: f21 w: l22 w: l23 w: f24 w: l25 w: l26 w: f27 w: l28 w: l29 w: f30 w: l31 w: l32 w: f33 w: l34 w: l35 w: f36 w: l37 w: l38 w: f39 w: l40 w: l41 w: f42 w: l43 w: l44 w: f45 w: l46 w: l47 w: f48 w: l49 w: l50 w: f51 w: l52 w: l53 w: f54 w: l55 w: l56 w: f57 w: l58 w: l59 w: f60 w: l61 w: l62 w: f63	&lt;C: float _threaded  testCallback084(Callback084 aCallback084, float f0, long l1, long l2, float f3, long l4, long l5, float f6, long l7, long l8, float f9, long l10, long l11, float f12, long l13, long l14, float f15, long l16, long l17, float f18, long l19, long l20, float f21, long l22, long l23, float f24, long l25, long l26, float f27, long l28, long l29, float f30, long l31, long l32, float f33, long l34, long l35, float f36, long l37, long l38, float f39, long l40, long l41, float f42, long l43, long l44, float f45, long l46, long l47, float f48, long l49, long l50, float f51, long l52, long l53, float f54, long l55, long l56, float f57, long l58, long l59, float f60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback085: aCallback085 w: l0 w: f1 w: l2 w: l3 w: f4 w: l5 w: l6 w: f7 w: l8 w: l9 w: f10 w: l11 w: l12 w: f13 w: l14 w: l15 w: f16 w: l17 w: l18 w: f19 w: l20 w: l21 w: f22 w: l23 w: l24 w: f25 w: l26 w: l27 w: f28 w: l29 w: l30 w: f31 w: l32 w: l33 w: f34 w: l35 w: l36 w: f37 w: l38 w: l39 w: f40 w: l41 w: l42 w: f43 w: l44 w: l45 w: f46 w: l47 w: l48 w: f49 w: l50 w: l51 w: f52 w: l53 w: l54 w: f55 w: l56 w: l57 w: f58 w: l59 w: l60 w: f61 w: l62 w: l63	&lt;C: long _threaded  testCallback085(Callback085 aCallback085, long l0, float f1, long l2, long l3, float f4, long l5, long l6, float f7, long l8, long l9, float f10, long l11, long l12, float f13, long l14, long l15, float f16, long l17, long l18, float f19, long l20, long l21, float f22, long l23, long l24, float f25, long l26, long l27, float f28, long l29, long l30, float f31, long l32, long l33, float f34, long l35, long l36, float f37, long l38, long l39, float f40, long l41, long l42, float f43, long l44, long l45, float f46, long l47, long l48, float f49, long l50, long l51, float f52, long l53, long l54, float f55, long l56, long l57, float f58, long l59, long l60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback086: aCallback086 w: f0 w: d1 w: l2 w: f3 w: d4 w: l5 w: f6 w: d7 w: l8 w: f9 w: d10 w: l11 w: f12 w: d13 w: l14 w: f15 w: d16 w: l17 w: f18 w: d19 w: l20 w: f21 w: d22 w: l23 w: f24 w: d25 w: l26 w: f27 w: d28 w: l29 w: f30 w: d31 w: l32 w: f33 w: d34 w: l35 w: f36 w: d37 w: l38 w: f39 w: d40 w: l41 w: f42 w: d43 w: l44 w: f45 w: d46 w: l47 w: f48 w: d49 w: l50 w: f51 w: d52 w: l53 w: f54 w: d55 w: l56 w: f57 w: d58 w: l59 w: f60 w: d61 w: l62 w: f63	&lt;C: float _threaded  testCallback086(Callback086 aCallback086, float f0, double d1, long l2, float f3, double d4, long l5, float f6, double d7, long l8, float f9, double d10, long l11, float f12, double d13, long l14, float f15, double d16, long l17, float f18, double d19, long l20, float f21, double d22, long l23, float f24, double d25, long l26, float f27, double d28, long l29, float f30, double d31, long l32, float f33, double d34, long l35, float f36, double d37, long l38, float f39, double d40, long l41, float f42, double d43, long l44, float f45, double d46, long l47, float f48, double d49, long l50, float f51, double d52, long l53, float f54, double d55, long l56, float f57, double d58, long l59, float f60, double d61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback087: aCallback087 w: l0 w: f1 w: d2 w: l3 w: f4 w: d5 w: l6 w: f7 w: d8 w: l9 w: f10 w: d11 w: l12 w: f13 w: d14 w: l15 w: f16 w: d17 w: l18 w: f19 w: d20 w: l21 w: f22 w: d23 w: l24 w: f25 w: d26 w: l27 w: f28 w: d29 w: l30 w: f31 w: d32 w: l33 w: f34 w: d35 w: l36 w: f37 w: d38 w: l39 w: f40 w: d41 w: l42 w: f43 w: d44 w: l45 w: f46 w: d47 w: l48 w: f49 w: d50 w: l51 w: f52 w: d53 w: l54 w: f55 w: d56 w: l57 w: f58 w: d59 w: l60 w: f61 w: d62 w: l63	&lt;C: long _threaded  testCallback087(Callback087 aCallback087, long l0, float f1, double d2, long l3, float f4, double d5, long l6, float f7, double d8, long l9, float f10, double d11, long l12, float f13, double d14, long l15, float f16, double d17, long l18, float f19, double d20, long l21, float f22, double d23, long l24, float f25, double d26, long l27, float f28, double d29, long l30, float f31, double d32, long l33, float f34, double d35, long l36, float f37, double d38, long l39, float f40, double d41, long l42, float f43, double d44, long l45, float f46, double d47, long l48, float f49, double d50, long l51, float f52, double d53, long l54, float f55, double d56, long l57, float f58, double d59, long l60, float f61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback088: aCallback088 w: d0 w: l1 w: f2 w: d3 w: l4 w: f5 w: d6 w: l7 w: f8 w: d9 w: l10 w: f11 w: d12 w: l13 w: f14 w: d15 w: l16 w: f17 w: d18 w: l19 w: f20 w: d21 w: l22 w: f23 w: d24 w: l25 w: f26 w: d27 w: l28 w: f29 w: d30 w: l31 w: f32 w: d33 w: l34 w: f35 w: d36 w: l37 w: f38 w: d39 w: l40 w: f41 w: d42 w: l43 w: f44 w: d45 w: l46 w: f47 w: d48 w: l49 w: f50 w: d51 w: l52 w: f53 w: d54 w: l55 w: f56 w: d57 w: l58 w: f59 w: d60 w: l61 w: f62 w: d63	&lt;C: double _threaded  testCallback088(Callback088 aCallback088, double d0, long l1, float f2, double d3, long l4, float f5, double d6, long l7, float f8, double d9, long l10, float f11, double d12, long l13, float f14, double d15, long l16, float f17, double d18, long l19, float f20, double d21, long l22, float f23, double d24, long l25, float f26, double d27, long l28, float f29, double d30, long l31, float f32, double d33, long l34, float f35, double d36, long l37, float f38, double d39, long l40, float f41, double d42, long l43, float f44, double d45, long l46, float f47, double d48, long l49, float f50, double d51, long l52, float f53, double d54, long l55, float f56, double d57, long l58, float f59, double d60, long l61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback089: aCallback089 w: f0 w: f1 w: l2 w: l3 w: l4 w: l5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: l38 w: l39 w: l40 w: l41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: l62 w: l63	&lt;C: float _threaded  testCallback089(Callback089 aCallback089, float f0, float f1, long l2, long l3, long l4, long l5, float f6, float f7, long l8, long l9, long l10, long l11, float f12, float f13, long l14, long l15, long l16, long l17, float f18, float f19, long l20, long l21, long l22, long l23, float f24, float f25, long l26, long l27, long l28, long l29, float f30, float f31, long l32, long l33, long l34, long l35, float f36, float f37, long l38, long l39, long l40, long l41, float f42, float f43, long l44, long l45, long l46, long l47, float f48, float f49, long l50, long l51, long l52, long l53, float f54, float f55, long l56, long l57, long l58, long l59, float f60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback090: aCallback090 w: l0 w: l1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: l22 w: l23 w: l24 w: l25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: l34 w: l35 w: l36 w: l37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: l58 w: l59 w: l60 w: l61 w: f62 w: f63	&lt;C: long _threaded  testCallback090(Callback090 aCallback090, long l0, long l1, float f2, float f3, long l4, long l5, long l6, long l7, float f8, float f9, long l10, long l11, long l12, long l13, float f14, float f15, long l16, long l17, long l18, long l19, float f20, float f21, long l22, long l23, long l24, long l25, float f26, float f27, long l28, long l29, long l30, long l31, float f32, float f33, long l34, long l35, long l36, long l37, float f38, float f39, long l40, long l41, long l42, long l43, float f44, float f45, long l46, long l47, long l48, long l49, float f50, float f51, long l52, long l53, long l54, long l55, float f56, float f57, long l58, long l59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback091: aCallback091 w: f0 w: f1 w: d2 w: d3 w: l4 w: l5 w: f6 w: f7 w: d8 w: d9 w: l10 w: l11 w: f12 w: f13 w: d14 w: d15 w: l16 w: l17 w: f18 w: f19 w: d20 w: d21 w: l22 w: l23 w: f24 w: f25 w: d26 w: d27 w: l28 w: l29 w: f30 w: f31 w: d32 w: d33 w: l34 w: l35 w: f36 w: f37 w: d38 w: d39 w: l40 w: l41 w: f42 w: f43 w: d44 w: d45 w: l46 w: l47 w: f48 w: f49 w: d50 w: d51 w: l52 w: l53 w: f54 w: f55 w: d56 w: d57 w: l58 w: l59 w: f60 w: f61 w: d62 w: d63	&lt;C: float _threaded  testCallback091(Callback091 aCallback091, float f0, float f1, double d2, double d3, long l4, long l5, float f6, float f7, double d8, double d9, long l10, long l11, float f12, float f13, double d14, double d15, long l16, long l17, float f18, float f19, double d20, double d21, long l22, long l23, float f24, float f25, double d26, double d27, long l28, long l29, float f30, float f31, double d32, double d33, long l34, long l35, float f36, float f37, double d38, double d39, long l40, long l41, float f42, float f43, double d44, double d45, long l46, long l47, float f48, float f49, double d50, double d51, long l52, long l53, float f54, float f55, double d56, double d57, long l58, long l59, float f60, float f61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback092: aCallback092 w: l0 w: l1 w: f2 w: f3 w: d4 w: d5 w: l6 w: l7 w: f8 w: f9 w: d10 w: d11 w: l12 w: l13 w: f14 w: f15 w: d16 w: d17 w: l18 w: l19 w: f20 w: f21 w: d22 w: d23 w: l24 w: l25 w: f26 w: f27 w: d28 w: d29 w: l30 w: l31 w: f32 w: f33 w: d34 w: d35 w: l36 w: l37 w: f38 w: f39 w: d40 w: d41 w: l42 w: l43 w: f44 w: f45 w: d46 w: d47 w: l48 w: l49 w: f50 w: f51 w: d52 w: d53 w: l54 w: l55 w: f56 w: f57 w: d58 w: d59 w: l60 w: l61 w: f62 w: f63	&lt;C: long _threaded  testCallback092(Callback092 aCallback092, long l0, long l1, float f2, float f3, double d4, double d5, long l6, long l7, float f8, float f9, double d10, double d11, long l12, long l13, float f14, float f15, double d16, double d17, long l18, long l19, float f20, float f21, double d22, double d23, long l24, long l25, float f26, float f27, double d28, double d29, long l30, long l31, float f32, float f33, double d34, double d35, long l36, long l37, float f38, float f39, double d40, double d41, long l42, long l43, float f44, float f45, double d46, double d47, long l48, long l49, float f50, float f51, double d52, double d53, long l54, long l55, float f56, float f57, double d58, double d59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback093: aCallback093 w: d0 w: d1 w: l2 w: l3 w: f4 w: f5 w: d6 w: d7 w: l8 w: l9 w: f10 w: f11 w: d12 w: d13 w: l14 w: l15 w: f16 w: f17 w: d18 w: d19 w: l20 w: l21 w: f22 w: f23 w: d24 w: d25 w: l26 w: l27 w: f28 w: f29 w: d30 w: d31 w: l32 w: l33 w: f34 w: f35 w: d36 w: d37 w: l38 w: l39 w: f40 w: f41 w: d42 w: d43 w: l44 w: l45 w: f46 w: f47 w: d48 w: d49 w: l50 w: l51 w: f52 w: f53 w: d54 w: d55 w: l56 w: l57 w: f58 w: f59 w: d60 w: d61 w: l62 w: l63	&lt;C: double _threaded  testCallback093(Callback093 aCallback093, double d0, double d1, long l2, long l3, float f4, float f5, double d6, double d7, long l8, long l9, float f10, float f11, double d12, double d13, long l14, long l15, float f16, float f17, double d18, double d19, long l20, long l21, float f22, float f23, double d24, double d25, long l26, long l27, float f28, float f29, double d30, double d31, long l32, long l33, float f34, float f35, double d36, double d37, long l38, long l39, float f40, float f41, double d42, double d43, long l44, long l45, float f46, float f47, double d48, double d49, long l50, long l51, float f52, float f53, double d54, double d55, long l56, long l57, float f58, float f59, double d60, double d61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback094: aCallback094 w: f0 w: f1 w: f2 w: l3 w: l4 w: l5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: l48 w: l49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: f63	&lt;C: float _threaded  testCallback094(Callback094 aCallback094, float f0, float f1, float f2, long l3, long l4, long l5, long l6, long l7, long l8, float f9, float f10, float f11, long l12, long l13, long l14, long l15, long l16, long l17, float f18, float f19, float f20, long l21, long l22, long l23, long l24, long l25, long l26, float f27, float f28, float f29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, long l48, long l49, long l50, long l51, long l52, long l53, float f54, float f55, float f56, long l57, long l58, long l59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback095: aCallback095 w: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: l15 w: l16 w: l17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: l60 w: l61 w: l62 w: l63	&lt;C: long _threaded  testCallback095(Callback095 aCallback095, long l0, long l1, long l2, float f3, float f4, float f5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, long l15, long l16, long l17, long l18, long l19, long l20, float f21, float f22, float f23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, long l33, long l34, long l35, long l36, long l37, long l38, float f39, float f40, float f41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, long l51, long l52, long l53, long l54, long l55, long l56, float f57, float f58, float f59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback096: aCallback096 w: f0 w: f1 w: f2 w: d3 w: d4 w: d5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: d39 w: d40 w: d41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: f63	&lt;C: float _threaded  testCallback096(Callback096 aCallback096, float f0, float f1, float f2, double d3, double d4, double d5, long l6, long l7, long l8, float f9, float f10, float f11, double d12, double d13, double d14, long l15, long l16, long l17, float f18, float f19, float f20, double d21, double d22, double d23, long l24, long l25, long l26, float f27, float f28, float f29, double d30, double d31, double d32, long l33, long l34, long l35, float f36, float f37, float f38, double d39, double d40, double d41, long l42, long l43, long l44, float f45, float f46, float f47, double d48, double d49, double d50, long l51, long l52, long l53, float f54, float f55, float f56, double d57, double d58, double d59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback097: aCallback097 w: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: d6 w: d7 w: d8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: d51 w: d52 w: d53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: l63	&lt;C: long _threaded  testCallback097(Callback097 aCallback097, long l0, long l1, long l2, float f3, float f4, float f5, double d6, double d7, double d8, long l9, long l10, long l11, float f12, float f13, float f14, double d15, double d16, double d17, long l18, long l19, long l20, float f21, float f22, float f23, double d24, double d25, double d26, long l27, long l28, long l29, float f30, float f31, float f32, double d33, double d34, double d35, long l36, long l37, long l38, float f39, float f40, float f41, double d42, double d43, double d44, long l45, long l46, long l47, float f48, float f49, float f50, double d51, double d52, double d53, long l54, long l55, long l56, float f57, float f58, float f59, double d60, double d61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback098: aCallback098 w: d0 w: d1 w: d2 w: l3 w: l4 w: l5 w: f6 w: f7 w: f8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: d18 w: d19 w: d20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: l39 w: l40 w: l41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: f51 w: f52 w: f53 w: d54 w: d55 w: d56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: d63	&lt;C: double _threaded  testCallback098(Callback098 aCallback098, double d0, double d1, double d2, long l3, long l4, long l5, float f6, float f7, float f8, double d9, double d10, double d11, long l12, long l13, long l14, float f15, float f16, float f17, double d18, double d19, double d20, long l21, long l22, long l23, float f24, float f25, float f26, double d27, double d28, double d29, long l30, long l31, long l32, float f33, float f34, float f35, double d36, double d37, double d38, long l39, long l40, long l41, float f42, float f43, float f44, double d45, double d46, double d47, long l48, long l49, long l50, float f51, float f52, float f53, double d54, double d55, double d56, long l57, long l58, long l59, float f60, float f61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback099: aCallback099 w: f0 w: f1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float _threaded  testCallback099(Callback099 aCallback099, float f0, float f1, float f2, float f3, long l4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, long l16, long l17, long l18, long l19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback100: aCallback100 w: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: long _threaded  testCallback100(Callback100 aCallback100, long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, long l32, long l33, long l34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, long l44, long l45, long l46, long l47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback101: aCallback101 w: f0 w: f1 w: f2 w: f3 w: d4 w: d5 w: d6 w: d7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: d28 w: d29 w: d30 w: d31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: d52 w: d53 w: d54 w: d55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float _threaded  testCallback101(Callback101 aCallback101, float f0, float f1, float f2, float f3, double d4, double d5, double d6, double d7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, double d28, double d29, double d30, double d31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, double d52, double d53, double d54, double d55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback102: aCallback102 w: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: d8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: d32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: d44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: long _threaded  testCallback102(Callback102 aCallback102, long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, double d8, double d9, double d10, double d11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, double d32, double d33, double d34, double d35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, double d44, double d45, double d46, double d47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback103: aCallback103 w: d0 w: d1 w: d2 w: d3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: d15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: d27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: d51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: double _threaded  testCallback103(Callback103 aCallback103, double d0, double d1, double d2, double d3, long l4, long l5, long l6, long l7, float f8, float f9, float f10, float f11, double d12, double d13, double d14, double d15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, double d24, double d25, double d26, double d27, long l28, long l29, long l30, long l31, float f32, float f33, float f34, float f35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, float f44, float f45, float f46, float f47, double d48, double d49, double d50, double d51, long l52, long l53, long l54, long l55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback104: aCallback104 w: f0 w: f1 w: f2 w: f3 w: f4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: l35 w: l36 w: l37 w: l38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float _threaded  testCallback104(Callback104 aCallback104, float f0, float f1, float f2, float f3, float f4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, long l35, long l36, long l37, long l38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, long l50, long l51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback105: aCallback105 w: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: l25 w: l26 w: l27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: l55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: long _threaded  testCallback105(Callback105 aCallback105, long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, long l10, long l11, long l12, long l13, long l14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, long l25, long l26, long l27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, long l55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback106: aCallback106 w: f0 w: f1 w: f2 w: f3 w: f4 w: d5 w: d6 w: d7 w: d8 w: d9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: d24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: d35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: d50 w: d51 w: d52 w: d53 w: d54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float _threaded  testCallback106(Callback106 aCallback106, float f0, float f1, float f2, float f3, float f4, double d5, double d6, double d7, double d8, double d9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, double d24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, double d35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, double d50, double d51, double d52, double d53, double d54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback107: aCallback107 w: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: d10 w: d11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: d25 w: d26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: d55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: long _threaded  testCallback107(Callback107 aCallback107, long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, double d10, double d11, double d12, double d13, double d14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, double d25, double d26, double d27, double d28, double d29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, double d44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, double d55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback108: aCallback108 w: d0 w: d1 w: d2 w: d3 w: d4 w: l5 w: l6 w: l7 w: l8 w: l9 w: f10 w: f11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: l24 w: f25 w: f26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: d33 w: d34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: d48 w: d49 w: l50 w: l51 w: l52 w: l53 w: l54 w: f55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: double _threaded  testCallback108(Callback108 aCallback108, double d0, double d1, double d2, double d3, double d4, long l5, long l6, long l7, long l8, long l9, float f10, float f11, float f12, float f13, float f14, double d15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, long l24, float f25, float f26, float f27, float f28, float f29, double d30, double d31, double d32, double d33, double d34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, float f44, double d45, double d46, double d47, double d48, double d49, long l50, long l51, long l52, long l53, long l54, float f55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.DLLANDCTestBlockingInterface</class-id> <category>procedures oe &amp; up</category><body package="DLLCC Test Suite">TstExternalSumByteArray: arg1 with: arg2	&lt;C: _oop TstExternalSumByteArray(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalTstExternalUPlongRun: arg	&lt;C: _oop TstExternalTstExternalUPlongRun(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPCtoSTbool: arg	&lt;C: _oop TstExternalUPCtoSTbool(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPCtoSTchar: arg	&lt;C: _oop TstExternalUPCtoSTchar(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPCtoSTdouble: arg	&lt;C: _oop TstExternalUPCtoSTdouble(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPCtoSTfloat: arg	&lt;C: _oop TstExternalUPCtoSTfloat(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPCtoSTint: arg	&lt;C: _oop TstExternalUPCtoSTint(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPMyPollHandler	&lt;C: _oop TstExternalUPMyPollHandler(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPSTtoCbool: arg1 with: arg2	&lt;C: _oop TstExternalUPSTtoCbool(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPSTtoCchar: arg1 with: arg2	&lt;C: _oop TstExternalUPSTtoCchar(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPSTtoCdouble: arg1 with: arg2	&lt;C: _oop TstExternalUPSTtoCdouble(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPSTtoCfloat: arg1 with: arg2	&lt;C: _oop TstExternalUPSTtoCfloat(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPSTtoCint: arg1 with: arg2	&lt;C: _oop TstExternalUPSTtoCint(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPallocFs: arg1 with: arg2	&lt;C: _oop TstExternalUPallocFs(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPallocRegSlot: arg	&lt;C: _oop TstExternalUPallocRegSlot(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPallocVs: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPallocVs(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPbasicAt: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPbasicAt(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPbasicAtPut: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPbasicAtPut(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPbyteAt: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPbyteAt(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPbyteAtPut: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPbyteAtPut(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPclass: arg1 with: arg2	&lt;C: _oop TstExternalUPclass(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPclassType: arg1 with: arg2	&lt;C: _oop TstExternalUPclassType(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopyCtoSTbytes: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopyCtoSTbytes(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopyCtoSTfloatArray: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopyCtoSTfloatArray(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopyCtoSTintArray: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopyCtoSTintArray(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopyCtoSTstring: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopyCtoSTstring(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopySTtoCbytes: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopySTtoCbytes(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopySTtoCfloatArray: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopySTtoCfloatArray(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopySTtoCintArray: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopySTtoCintArray(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPcopySTtoCstring: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPcopySTtoCstring(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPdoubleAt: arg1 with: arg2	&lt;C: _oop TstExternalUPdoubleAt(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPerrorHandler: arg	&lt;C: _oop TstExternalUPerrorHandler(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPfloatAt: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPfloatAt(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPfloatAtPut: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPfloatAtPut(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPindexVarSize: arg1 with: arg2	&lt;C: _oop TstExternalUPindexVarSize(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPinstVarAt: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPinstVarAt(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPinstVarAtPut: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPinstVarAtPut(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPinstVarSize: arg1 with: arg2	&lt;C: _oop TstExternalUPinstVarSize(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPintegerAt: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPintegerAt(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPintegerAtPut: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstExternalUPintegerAtPut(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisArrayOfFloat: arg1 with: arg2	&lt;C: _oop TstExternalUPisArrayOfFloat(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisArrayOfInteger: arg1 with: arg2	&lt;C: _oop TstExternalUPisArrayOfInteger(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisBoolean: arg1 with: arg2	&lt;C: _oop TstExternalUPisBoolean(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisByteArray: arg1 with: arg2	&lt;C: _oop TstExternalUPisByteArray(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisByteLike: arg1 with: arg2	&lt;C: _oop TstExternalUPisByteLike(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisCharacter: arg1 with: arg2	&lt;C: _oop TstExternalUPisCharacter(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisDouble: arg1 with: arg2	&lt;C: _oop TstExternalUPisDouble(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisFloat: arg1 with: arg2	&lt;C: _oop TstExternalUPisFloat(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisImmediate: arg1 with: arg2	&lt;C: _oop TstExternalUPisImmediate(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisInteger: arg1 with: arg2	&lt;C: _oop TstExternalUPisInteger(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisKindOf: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPisKindOf(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPisString: arg1 with: arg2	&lt;C: _oop TstExternalUPisString(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPmustBeArrayOfFloat: arg	&lt;C: _oop TstExternalUPmustBeArrayOfFloat(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPmustBeArrayOfInteger: arg	&lt;C: _oop TstExternalUPmustBeArrayOfInteger(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPmustBeBoolean: arg	&lt;C: _oop TstExternalUPmustBeBoolean(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPmustBeByteArray: arg	&lt;C: _oop TstExternalUPmustBeByteArray(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPmustBeByteLike: arg	&lt;C: _oop TstExternalUPmustBeByteLike(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPmustBeCharacter: arg	&lt;C: _oop TstExternalUPmustBeCharacter(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPmustBeInteger: arg	&lt;C: _oop TstExternalUPmustBeInteger(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPmustBeString: arg	&lt;C: _oop TstExternalUPmustBeString(_oop)&gt;	^#failed</body><body package="DLLCC Test Suite">TstExternalUPnestedReturn: arg1 with: arg2	&lt;C: _oop TstExternalUPnestedReturn(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPnil: arg	&lt;C: _oop TstExternalUPnil(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPpostInt: arg1 with: arg2	&lt;C: _oop TstExternalUPpostInt(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPregHandleAt: arg1 with: arg2	&lt;C: _oop TstExternalUPregHandleAt(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPregHandleAtPut: arg1 with: arg2 with: arg3	&lt;C: _oop TstExternalUPregHandleAtPut(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPreturnFalse: arg	&lt;C: _oop TstExternalUPreturnFalse(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPreturnHandle: arg1 with: arg2	&lt;C: _oop TstExternalUPreturnHandle(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPreturnNil: arg	&lt;C: _oop TstExternalUPreturnNil(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPreturnTrue: arg	&lt;C: _oop TstExternalUPreturnTrue(_oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalUPsignalSem: arg1 with: arg2	&lt;C: _oop TstExternalUPsignalSem(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstExternalZeroArray: arg1 with: arg2	&lt;C: _oop TstExternalZeroArray(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBack0: arg1 with: arg2	&lt;C: _oop TstSendBack0(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBack0IfFailNoReturn: arg1 with: arg2	&lt;C: _oop TstSendBack0IfFailNoReturn(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBack0IfFailReturnFalse: arg1 with: arg2	&lt;C: _oop TstSendBack0IfFailReturnFalse(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBack0ReturnKeptReceiver: arg1 with: arg2	&lt;C: _oop TstSendBack0ReturnKeptReceiver(_oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBack1: arg1 with: arg2 with: arg3	&lt;C: _oop TstSendBack1(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBack2: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstSendBack2(_oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBack3: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: _oop TstSendBack3(_oop, _oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBackKeepFailure: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: _oop TstSendBackKeepFailure(_oop, _oop, _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendBackMany: arg1 with: arg2 with: arg3	&lt;C: _oop TstSendBackMany(_oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendcBack0: arg1 with: arg2	&lt;C: _oop TstSendcBack0(_oop, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendcBack1: arg1 with: arg2 with: arg3	&lt;C: _oop TstSendcBack1(_oop, char * , _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendcBack2: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstSendcBack2(_oop, char * , _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendcBack3: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: _oop TstSendcBack3(_oop, char * , _oop, _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">TstSendcBackMany: arg1 with: arg2 with: arg3 with: arg4	&lt;C: _oop TstSendcBackMany(_oop, char * , _oop, _oop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalAllocFs: rcvr with: cls	&lt;C: _oop oeTstExternalAllocFs(_oop rcvr, _oop cls)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalAllocRegSlot: rcvr	&lt;C: _oop oeTstExternalAllocRegSlot(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalAllocVs: rcvr with: cls with: szOop	&lt;C: _oop oeTstExternalAllocVs(_oop rcvr, _oop cls, _oop szOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalBasicAt: rcvr with: arrayOEoop with: indexOop	&lt;C: _oop oeTstExternalBasicAt(_oop rcvr, _oop arrayOEoop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalBasicAtPut: rcvr with: arrayOEoop with: indexOop with: OEoopToBePut	&lt;C: _oop oeTstExternalBasicAtPut(_oop rcvr, _oop arrayOEoop, _oop indexOop, _oop OEoopToBePut)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalByteAt: rcvr with: argOop with: indexOop	&lt;C: _oop oeTstExternalByteAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalByteAtPut: rcvr with: argOop with: indexOop with: byteOop	&lt;C: _oop oeTstExternalByteAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop byteOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalClass: rcvr with: argOop	&lt;C: _oop oeTstExternalClass(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalClassType: rcvr with: cls	&lt;C: _oop oeTstExternalClassType(_oop rcvr, _oop cls)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEbytes: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyCtoOEbytes(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEfloatArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyCtoOEfloatArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEintArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyCtoOEintArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyCtoOEstring: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyCtoOEstring(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCbytes: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyOEtoCbytes(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCfloatArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyOEtoCfloatArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCintArray: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyOEtoCintArray(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCopyOEtoCstring: rcvr with: argOop with: aCountOop with: startingAtOop	&lt;C: _oop oeTstExternalCopyOEtoCstring(_oop rcvr, _oop argOop, _oop aCountOop, _oop startingAtOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEbool: rcvr	&lt;C: _oop oeTstExternalCtoOEbool(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEchar: rcvr	&lt;C: _oop oeTstExternalCtoOEchar(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEdouble: rcvr	&lt;C: _oop oeTstExternalCtoOEdouble(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEfloat: rcvr	&lt;C: _oop oeTstExternalCtoOEfloat(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalCtoOEint: rcvr	&lt;C: _oop oeTstExternalCtoOEint(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalDoubleAt: oeArray with: indexOop	&lt;C: _oop oeTstExternalDoubleAt(_oop oeArray, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalFloatAt: rcvr with: argOop with: indexOop	&lt;C: _oop oeTstExternalFloatAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalFloatAtPut: rcvr with: argOop with: indexOop with: aFloatOop	&lt;C: _oop oeTstExternalFloatAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop aFloatOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIndexVarSize: rcvr with: argOop	&lt;C: _oop oeTstExternalIndexVarSize(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalInstVarAt: rcvr with: argOop with: indexOop	&lt;C: _oop oeTstExternalInstVarAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalInstVarAtPut: rcvr with: argOop with: indexOop with: OEoopToBePut	&lt;C: _oop oeTstExternalInstVarAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop OEoopToBePut)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalInstVarSize: rcvr with: argOop	&lt;C: _oop oeTstExternalInstVarSize(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIntegerAt: rcvr with: argOop with: indexOop	&lt;C: _oop oeTstExternalIntegerAt(_oop rcvr, _oop argOop, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIntegerAtPut: rcvr with: argOop with: indexOop with: anIntOop	&lt;C: _oop oeTstExternalIntegerAtPut(_oop rcvr, _oop argOop, _oop indexOop, _oop anIntOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsArrayOfFloat: rcvr with: argOop	&lt;C: _oop oeTstExternalIsArrayOfFloat(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsArrayOfInteger: rcvr with: argOop	&lt;C: _oop oeTstExternalIsArrayOfInteger(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsBoolean: rcvr with: argOop	&lt;C: _oop oeTstExternalIsBoolean(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsByteArray: rcvr with: argOop	&lt;C: _oop oeTstExternalIsByteArray(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsByteLike: rcvr with: argOop	&lt;C: _oop oeTstExternalIsByteLike(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsCharacter: rcvr with: argOop	&lt;C: _oop oeTstExternalIsCharacter(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsDouble: rcvr with: argOop	&lt;C: _oop oeTstExternalIsDouble(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsFloat: rcvr with: argOop	&lt;C: _oop oeTstExternalIsFloat(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsImmediate: rcvr with: argOop	&lt;C: _oop oeTstExternalIsImmediate(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsInteger: rcvr with: argOop	&lt;C: _oop oeTstExternalIsInteger(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsKindOf: rcvr with: inst with: cls	&lt;C: _oop oeTstExternalIsKindOf(_oop rcvr, _oop inst, _oop cls)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalIsString: rcvr with: argOop	&lt;C: _oop oeTstExternalIsString(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalLongRun: oeObject	&lt;C: _oop oeTstExternalLongRun(_oop oeObject)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalMyPollHandler	&lt;C: void oeTstExternalMyPollHandler(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalNestedReturn: rcvr with: argOop	&lt;C: _oop oeTstExternalNestedReturn(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalNil: rcvr	&lt;C: _oop oeTstExternalNil(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCbool: rcvr with: aBoolOop	&lt;C: _oop oeTstExternalOEtoCbool(_oop rcvr, _oop aBoolOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCchar: rcvr with: aCharOop	&lt;C: _oop oeTstExternalOEtoCchar(_oop rcvr, _oop aCharOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCdouble: rcvr with: aDoubleOop	&lt;C: _oop oeTstExternalOEtoCdouble(_oop rcvr, _oop aDoubleOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCfloat: rcvr with: aFloatOop	&lt;C: _oop oeTstExternalOEtoCfloat(_oop rcvr, _oop aFloatOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalOEtoCint: rcvr with: anIntOop	&lt;C: _oop oeTstExternalOEtoCint(_oop rcvr, _oop anIntOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalPostInt: rcvr with: sem	&lt;C: _oop oeTstExternalPostInt(_oop rcvr, _oop sem)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalRegHandleAt: rcvr with: indexOop	&lt;C: _oop oeTstExternalRegHandleAt(_oop rcvr, _oop indexOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalRegHandleAtPut: rcvr with: indexOop with: valOop	&lt;C: _oop oeTstExternalRegHandleAtPut(_oop rcvr, _oop indexOop, _oop valOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnFalse: rcvr	&lt;C: _oop oeTstExternalReturnFalse(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnHandle: rcvr with: argOop	&lt;C: _oop oeTstExternalReturnHandle(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnNil: rcvr	&lt;C: _oop oeTstExternalReturnNil(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalReturnTrue: rcvr	&lt;C: _oop oeTstExternalReturnTrue(_oop rcvr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalSignalSem: rcvr with: sem	&lt;C: _oop oeTstExternalSignalSem(_oop rcvr, _oop sem)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalSumByteArray: rcvr with: baOop	&lt;C: _oop oeTstExternalSumByteArray(_oop rcvr, _oop baOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstExternalZeroArray: rcvr with: aOop	&lt;C: _oop oeTstExternalZeroArray(_oop rcvr, _oop aOop)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0: oReceiver with: oSelector	&lt;C: _oop oeTstSendBack0(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0IfFailNoReturn: oReceiver with: oSelector	&lt;C: _oop oeTstSendBack0IfFailNoReturn(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0IfFailReturnFalse: oReceiver with: oSelector	&lt;C: _oop oeTstSendBack0IfFailReturnFalse(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack0ReturnKeptReceiver: oReceiver with: oSelector	&lt;C: _oop oeTstSendBack0ReturnKeptReceiver(_oop oReceiver, _oop oSelector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack1: oReceiver with: oSelector with: oArg1	&lt;C: _oop oeTstSendBack1(_oop oReceiver, _oop oSelector, _oop oArg1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack2: oReceiver with: oSelector with: oArg1 with: oArg2	&lt;C: _oop oeTstSendBack2(_oop oReceiver, _oop oSelector, _oop oArg1, _oop oArg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBack3: oReceiver with: oSelector with: oArg1 with: oArg2 with: oArg3	&lt;C: _oop oeTstSendBack3(_oop oReceiver, _oop oSelector, _oop oArg1, _oop oArg2, _oop oArg3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBackKeepFailure: oReceiver with: oSelector with: oArgs with: oKeep with: oFailure	&lt;C: _oop oeTstSendBackKeepFailure(_oop oReceiver, _oop oSelector, _oop oArgs, _oop oKeep, _oop oFailure)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendBackMany: oReceiver with: oSelector with: oArgs	&lt;C: _oop oeTstSendBackMany(_oop oReceiver, _oop oSelector, _oop oArgs)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack0: oReceiver with: selector	&lt;C: _oop oeTstSendcBack0(_oop oReceiver, char * selector)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack1: oReceiver with: selector with: oArg1	&lt;C: _oop oeTstSendcBack1(_oop oReceiver, char * selector, _oop oArg1)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack2: oReceiver with: selector with: oArg1 with: oArg2	&lt;C: _oop oeTstSendcBack2(_oop oReceiver, char * selector, _oop oArg1, _oop oArg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBack3: oReceiver with: selector with: oArg1 with: oArg2 with: oArg3	&lt;C: _oop oeTstSendcBack3(_oop oReceiver, char * selector, _oop oArg1, _oop oArg2, _oop oArg3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstSendcBackMany: oReceiver with: szSelector with: oArg1 with: oArg2	&lt;C: _oop oeTstSendcBackMany(_oop oReceiver, char * szSelector, _oop oArg1, _oop oArg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">oeTstreturn: rcvr with: argOop	&lt;C: _oop oeTstreturn(_oop rcvr, _oop argOop)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.DLLANDCTestBlockingInterface</class-id> <category>C api test procedures</category><body package="DLLCC Test Suite">test001	&lt;C: void test001(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test002	&lt;C: signed char test002(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test003	&lt;C: unsigned char test003(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test004	&lt;C: short test004(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test005	&lt;C: unsigned short test005(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test006	&lt;C: int test006(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test007	&lt;C: unsigned int test007(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test008	&lt;C: long test008(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test009	&lt;C: unsigned long test009(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test010	&lt;C: long long test010(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test011	&lt;C: unsigned long long test011(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test012	&lt;C: float test012(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test013	&lt;C: double test013(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test014	&lt;C: CharStruct test014(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test015	&lt;C: SmallStruct test015(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test016	&lt;C: MediumStruct test016(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test017	&lt;C: LargeStruct test017(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test018	&lt;C: BigStruct test018(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test019: aChar	&lt;C: __bool char test019(signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test020: aUChar	&lt;C: __bool char test020(unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test021: aShort	&lt;C: __bool short test021(short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test022: aUShort	&lt;C: __bool short test022(unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test023: anInt	&lt;C: __bool int test023(int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test024: aUInt	&lt;C: __bool int test024(unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test025: aLong	&lt;C: __bool long test025(long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test026: aULong	&lt;C: __bool long test026(unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test027: aLongLong	&lt;C: __bool long long test027(long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test028: aULongLong	&lt;C: __bool long long test028(unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test029: aFloat	&lt;C: __bool int test029(float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test030: aDouble	&lt;C: __bool int test030(double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test031: charStruct	&lt;C: __bool int test031(CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test032: smallStruct	&lt;C: __bool int test032(SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test033: mediumStruct	&lt;C: __bool int test033(MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test034: largeStruct	&lt;C: __bool int test034(LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test035: bigStruct	&lt;C: __bool int test035(BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test036: aBoolChar	&lt;C: __bool int test036(__bool char aBoolChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test037: aBoolShort	&lt;C: __bool int test037(__bool short aBoolShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test038: aBoolInt	&lt;C: __bool int test038(__bool int aBoolInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test039: aBoolLong	&lt;C: __bool int test039(__bool long aBoolLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test040: aBoolLongLong	&lt;C: __bool int test040(__bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test041: aBoolChar	&lt;C: __bool char test041(__bool char aBoolChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test042: aBoolChar	&lt;C: __bool char test042(__bool char aBoolChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test043: aBoolShort	&lt;C: __bool short test043(__bool short aBoolShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test044: aBoolShort	&lt;C: __bool short test044(__bool short aBoolShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test045: aBoolInt	&lt;C: __bool int test045(__bool int aBoolInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test046: aBoolInt	&lt;C: __bool int test046(__bool int aBoolInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test047: aBoolLong	&lt;C: __bool long test047(__bool long aBoolLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test048: aBoolLong	&lt;C: __bool long test048(__bool long aBoolLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test049: aBoolLongLong	&lt;C: __bool long long test049(__bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test050: aBoolLongLong	&lt;C: __bool long long test050(__bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test051: charA with: charB with: charC with: charD with: charE with: charF with: charG with: charH with: charI with: charJ with: charK with: charL with: charM with: charN with: charO with: charP with: charQ with: charR with: charS with: charT with: charU with: charV with: charW with: charX with: charY with: charZ with: char0 with: char1 with: char2 with: char3	&lt;C: unsigned long test051(signed char charA, signed char charB, signed char charC, signed char charD, signed char charE, signed char charF, signed char charG, signed char charH, signed char charI, signed char charJ, signed char charK, signed char charL, signed char charM, signed char charN, signed char charO, signed char charP, signed char charQ, signed char charR, signed char charS, signed char charT, signed char charU, signed char charV, signed char charW, signed char charX, signed char charY, signed char charZ, signed char char0, signed char char1, signed char char2, signed char char3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test052: uCharA with: uCharB with: uCharC with: uCharD with: uCharE with: uCharF with: uCharG with: uCharH with: uCharI with: uCharJ with: uCharK with: uCharL with: uCharM with: uCharN with: uCharO with: uCharP with: uCharQ with: uCharR with: uCharS with: uCharT with: uCharU with: uCharV with: uCharW with: uCharX with: uCharY with: uCharZ with: uChar0 with: uChar1 with: uChar2 with: uChar3	&lt;C: unsigned long test052(unsigned char uCharA, unsigned char uCharB, unsigned char uCharC, unsigned char uCharD, unsigned char uCharE, unsigned char uCharF, unsigned char uCharG, unsigned char uCharH, unsigned char uCharI, unsigned char uCharJ, unsigned char uCharK, unsigned char uCharL, unsigned char uCharM, unsigned char uCharN, unsigned char uCharO, unsigned char uCharP, unsigned char uCharQ, unsigned char uCharR, unsigned char uCharS, unsigned char uCharT, unsigned char uCharU, unsigned char uCharV, unsigned char uCharW, unsigned char uCharX, unsigned char uCharY, unsigned char uCharZ, unsigned char uChar0, unsigned char uChar1, unsigned char uChar2, unsigned char uChar3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test053: shortA with: shortB with: shortC with: shortD with: shortE with: shortF with: shortG with: shortH with: shortI with: shortJ with: shortK with: shortL with: shortM with: shortN with: shortO with: shortP with: shortQ with: shortR with: shortS with: shortT with: shortU with: shortV with: shortW with: shortX with: shortY with: shortZ with: short0 with: short1 with: short2 with: short3	&lt;C: unsigned long test053(short shortA, short shortB, short shortC, short shortD, short shortE, short shortF, short shortG, short shortH, short shortI, short shortJ, short shortK, short shortL, short shortM, short shortN, short shortO, short shortP, short shortQ, short shortR, short shortS, short shortT, short shortU, short shortV, short shortW, short shortX, short shortY, short shortZ, short short0, short short1, short short2, short short3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test054: uShortA with: uShortB with: uShortC with: uShortD with: uShortE with: uShortF with: uShortG with: uShortH with: uShortI with: uShortJ with: uShortK with: uShortL with: uShortM with: uShortN with: uShortO with: uShortP with: uShortQ with: uShortR with: uShortS with: uShortT with: uShortU with: uShortV with: uShortW with: uShortX with: uShortY with: uShortZ with: uShort0 with: uShort1 with: uShort2 with: uShort3	&lt;C: unsigned long test054(unsigned short uShortA, unsigned short uShortB, unsigned short uShortC, unsigned short uShortD, unsigned short uShortE, unsigned short uShortF, unsigned short uShortG, unsigned short uShortH, unsigned short uShortI, unsigned short uShortJ, unsigned short uShortK, unsigned short uShortL, unsigned short uShortM, unsigned short uShortN, unsigned short uShortO, unsigned short uShortP, unsigned short uShortQ, unsigned short uShortR, unsigned short uShortS, unsigned short uShortT, unsigned short uShortU, unsigned short uShortV, unsigned short uShortW, unsigned short uShortX, unsigned short uShortY, unsigned short uShortZ, unsigned short uShort0, unsigned short uShort1, unsigned short uShort2, unsigned short uShort3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test055: intA with: intB with: intC with: intD with: intE with: intF with: intG with: intH with: intI with: intJ with: intK with: intL with: intM with: intN with: intO with: intP with: intQ with: intR with: intS with: intT with: intU with: intV with: intW with: intX with: intY with: intZ with: int0 with: int1 with: int2 with: int3	&lt;C: unsigned long test055(int intA, int intB, int intC, int intD, int intE, int intF, int intG, int intH, int intI, int intJ, int intK, int intL, int intM, int intN, int intO, int intP, int intQ, int intR, int intS, int intT, int intU, int intV, int intW, int intX, int intY, int intZ, int int0, int int1, int int2, int int3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test056: uIntA with: uIntB with: uIntC with: uIntD with: uIntE with: uIntF with: uIntG with: uIntH with: uIntI with: uIntJ with: uIntK with: uIntL with: uIntM with: uIntN with: uIntO with: uIntP with: uIntQ with: uIntR with: uIntS with: uIntT with: uIntU with: uIntV with: uIntW with: uIntX with: uIntY with: uIntZ with: uInt0 with: uInt1 with: uInt2 with: uInt3	&lt;C: unsigned long test056(unsigned int uIntA, unsigned int uIntB, unsigned int uIntC, unsigned int uIntD, unsigned int uIntE, unsigned int uIntF, unsigned int uIntG, unsigned int uIntH, unsigned int uIntI, unsigned int uIntJ, unsigned int uIntK, unsigned int uIntL, unsigned int uIntM, unsigned int uIntN, unsigned int uIntO, unsigned int uIntP, unsigned int uIntQ, unsigned int uIntR, unsigned int uIntS, unsigned int uIntT, unsigned int uIntU, unsigned int uIntV, unsigned int uIntW, unsigned int uIntX, unsigned int uIntY, unsigned int uIntZ, unsigned int uInt0, unsigned int uInt1, unsigned int uInt2, unsigned int uInt3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test057: longA with: longB with: longC with: longD with: longE with: longF with: longG with: longH with: longI with: longJ with: longK with: longL with: longM with: longN with: longO with: longP with: longQ with: longR with: longS with: longT with: longU with: longV with: longW with: longX with: longY with: longZ with: long0 with: long1 with: long2 with: long3	&lt;C: unsigned long test057(long longA, long longB, long longC, long longD, long longE, long longF, long longG, long longH, long longI, long longJ, long longK, long longL, long longM, long longN, long longO, long longP, long longQ, long longR, long longS, long longT, long longU, long longV, long longW, long longX, long longY, long longZ, long long0, long long1, long long2, long long3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test058: uLongA with: uLongB with: uLongC with: uLongD with: uLongE with: uLongF with: uLongG with: uLongH with: uLongI with: uLongJ with: uLongK with: uLongL with: uLongM with: uLongN with: uLongO with: uLongP with: uLongQ with: uLongR with: uLongS with: uLongT with: uLongU with: uLongV with: uLongW with: uLongX with: uLongY with: uLongZ with: uLong0 with: uLong1 with: uLong2 with: uLong3	&lt;C: unsigned long test058(unsigned long uLongA, unsigned long uLongB, unsigned long uLongC, unsigned long uLongD, unsigned long uLongE, unsigned long uLongF, unsigned long uLongG, unsigned long uLongH, unsigned long uLongI, unsigned long uLongJ, unsigned long uLongK, unsigned long uLongL, unsigned long uLongM, unsigned long uLongN, unsigned long uLongO, unsigned long uLongP, unsigned long uLongQ, unsigned long uLongR, unsigned long uLongS, unsigned long uLongT, unsigned long uLongU, unsigned long uLongV, unsigned long uLongW, unsigned long uLongX, unsigned long uLongY, unsigned long uLongZ, unsigned long uLong0, unsigned long uLong1, unsigned long uLong2, unsigned long uLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test059: longLongA with: longLongB with: longLongC with: longLongD with: longLongE with: longLongF with: longLongG with: longLongH with: longLongI with: longLongJ with: longLongK with: longLongL with: longLongM with: longLongN with: longLongO with: longLongP with: longLongQ with: longLongR with: longLongS with: longLongT with: longLongU with: longLongV with: longLongW with: longLongX with: longLongY with: longLongZ with: longLong0 with: longLong1 with: longLong2 with: longLong3	&lt;C: unsigned long test059(long long longLongA, long long longLongB, long long longLongC, long long longLongD, long long longLongE, long long longLongF, long long longLongG, long long longLongH, long long longLongI, long long longLongJ, long long longLongK, long long longLongL, long long longLongM, long long longLongN, long long longLongO, long long longLongP, long long longLongQ, long long longLongR, long long longLongS, long long longLongT, long long longLongU, long long longLongV, long long longLongW, long long longLongX, long long longLongY, long long longLongZ, long long longLong0, long long longLong1, long long longLong2, long long longLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test060: uLongLongA with: uLongLongB with: uLongLongC with: uLongLongD with: uLongLongE with: uLongLongF with: uLongLongG with: uLongLongH with: uLongLongI with: uLongLongJ with: uLongLongK with: uLongLongL with: uLongLongM with: uLongLongN with: uLongLongO with: uLongLongP with: uLongLongQ with: uLongLongR with: uLongLongS with: uLongLongT with: uLongLongU with: uLongLongV with: uLongLongW with: uLongLongX with: uLongLongY with: uLongLongZ with: uLongLong0 with: uLongLong1 with: uLongLong2 with: uLongLong3	&lt;C: unsigned long test060(unsigned long long uLongLongA, unsigned long long uLongLongB, unsigned long long uLongLongC, unsigned long long uLongLongD, unsigned long long uLongLongE, unsigned long long uLongLongF, unsigned long long uLongLongG, unsigned long long uLongLongH, unsigned long long uLongLongI, unsigned long long uLongLongJ, unsigned long long uLongLongK, unsigned long long uLongLongL, unsigned long long uLongLongM, unsigned long long uLongLongN, unsigned long long uLongLongO, unsigned long long uLongLongP, unsigned long long uLongLongQ, unsigned long long uLongLongR, unsigned long long uLongLongS, unsigned long long uLongLongT, unsigned long long uLongLongU, unsigned long long uLongLongV, unsigned long long uLongLongW, unsigned long long uLongLongX, unsigned long long uLongLongY, unsigned long long uLongLongZ, unsigned long long uLongLong0, unsigned long long uLongLong1, unsigned long long uLongLong2, unsigned long long uLongLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test061: floatA with: floatB with: floatC with: floatD with: floatE with: floatF with: floatG with: floatH with: floatI with: floatJ with: floatK with: floatL with: floatM with: floatN with: floatO with: floatP with: floatQ with: floatR with: floatS with: floatT with: floatU with: floatV with: floatW with: floatX with: floatY with: floatZ with: float0 with: float1 with: float2 with: float3	&lt;C: unsigned long test061(float floatA, float floatB, float floatC, float floatD, float floatE, float floatF, float floatG, float floatH, float floatI, float floatJ, float floatK, float floatL, float floatM, float floatN, float floatO, float floatP, float floatQ, float floatR, float floatS, float floatT, float floatU, float floatV, float floatW, float floatX, float floatY, float floatZ, float float0, float float1, float float2, float float3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test062: doubleA with: doubleB with: doubleC with: doubleD with: doubleE with: doubleF with: doubleG with: doubleH with: doubleI with: doubleJ with: doubleK with: doubleL with: doubleM with: doubleN with: doubleO with: doubleP with: doubleQ with: doubleR with: doubleS with: doubleT with: doubleU with: doubleV with: doubleW with: doubleX with: doubleY with: doubleZ with: double0 with: double1 with: double2 with: double3	&lt;C: unsigned long test062(double doubleA, double doubleB, double doubleC, double doubleD, double doubleE, double doubleF, double doubleG, double doubleH, double doubleI, double doubleJ, double doubleK, double doubleL, double doubleM, double doubleN, double doubleO, double doubleP, double doubleQ, double doubleR, double doubleS, double doubleT, double doubleU, double doubleV, double doubleW, double doubleX, double doubleY, double doubleZ, double double0, double double1, double double2, double double3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test063: charStructA with: charStructB with: charStructC with: charStructD with: charStructE with: charStructF with: charStructG with: charStructH with: charStructI with: charStructJ with: charStructK with: charStructL with: charStructM with: charStructN with: charStructO with: charStructP with: charStructQ with: charStructR with: charStructS with: charStructT with: charStructU with: charStructV with: charStructW with: charStructX with: charStructY with: charStructZ with: charStruct0 with: charStruct1 with: charStruct2 with: charStruct3	&lt;C: unsigned long test063(CharStruct charStructA, CharStruct charStructB, CharStruct charStructC, CharStruct charStructD, CharStruct charStructE, CharStruct charStructF, CharStruct charStructG, CharStruct charStructH, CharStruct charStructI, CharStruct charStructJ, CharStruct charStructK, CharStruct charStructL, CharStruct charStructM, CharStruct charStructN, CharStruct charStructO, CharStruct charStructP, CharStruct charStructQ, CharStruct charStructR, CharStruct charStructS, CharStruct charStructT, CharStruct charStructU, CharStruct charStructV, CharStruct charStructW, CharStruct charStructX, CharStruct charStructY, CharStruct charStructZ, CharStruct charStruct0, CharStruct charStruct1, CharStruct charStruct2, CharStruct charStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test064: smallStructA with: smallStructB with: smallStructC with: smallStructD with: smallStructE with: smallStructF with: smallStructG with: smallStructH with: smallStructI with: smallStructJ with: smallStructK with: smallStructL with: smallStructM with: smallStructN with: smallStructO with: smallStructP with: smallStructQ with: smallStructR with: smallStructS with: smallStructT with: smallStructU with: smallStructV with: smallStructW with: smallStructX with: smallStructY with: smallStructZ with: smallStruct0 with: smallStruct1 with: smallStruct2 with: smallStruct3	&lt;C: unsigned long test064(SmallStruct smallStructA, SmallStruct smallStructB, SmallStruct smallStructC, SmallStruct smallStructD, SmallStruct smallStructE, SmallStruct smallStructF, SmallStruct smallStructG, SmallStruct smallStructH, SmallStruct smallStructI, SmallStruct smallStructJ, SmallStruct smallStructK, SmallStruct smallStructL, SmallStruct smallStructM, SmallStruct smallStructN, SmallStruct smallStructO, SmallStruct smallStructP, SmallStruct smallStructQ, SmallStruct smallStructR, SmallStruct smallStructS, SmallStruct smallStructT, SmallStruct smallStructU, SmallStruct smallStructV, SmallStruct smallStructW, SmallStruct smallStructX, SmallStruct smallStructY, SmallStruct smallStructZ, SmallStruct smallStruct0, SmallStruct smallStruct1, SmallStruct smallStruct2, SmallStruct smallStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test065: mediumStructA with: mediumStructB with: mediumStructC with: mediumStructD with: mediumStructE with: mediumStructF with: mediumStructG with: mediumStructH with: mediumStructI with: mediumStructJ with: mediumStructK with: mediumStructL with: mediumStructM with: mediumStructN with: mediumStructO with: mediumStructP with: mediumStructQ with: mediumStructR with: mediumStructS with: mediumStructT with: mediumStructU with: mediumStructV with: mediumStructW with: mediumStructX with: mediumStructY with: mediumStructZ with: mediumStruct0 with: mediumStruct1 with: mediumStruct2 with: mediumStruct3	&lt;C: unsigned long test065(MediumStruct mediumStructA, MediumStruct mediumStructB, MediumStruct mediumStructC, MediumStruct mediumStructD, MediumStruct mediumStructE, MediumStruct mediumStructF, MediumStruct mediumStructG, MediumStruct mediumStructH, MediumStruct mediumStructI, MediumStruct mediumStructJ, MediumStruct mediumStructK, MediumStruct mediumStructL, MediumStruct mediumStructM, MediumStruct mediumStructN, MediumStruct mediumStructO, MediumStruct mediumStructP, MediumStruct mediumStructQ, MediumStruct mediumStructR, MediumStruct mediumStructS, MediumStruct mediumStructT, MediumStruct mediumStructU, MediumStruct mediumStructV, MediumStruct mediumStructW, MediumStruct mediumStructX, MediumStruct mediumStructY, MediumStruct mediumStructZ, MediumStruct mediumStruct0, MediumStruct mediumStruct1, MediumStruct mediumStruct2, MediumStruct mediumStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test066: largeStructA with: largeStructB with: largeStructC with: largeStructD with: largeStructE with: largeStructF with: largeStructG with: largeStructH with: largeStructI with: largeStructJ with: largeStructK with: largeStructL with: largeStructM with: largeStructN with: largeStructO with: largeStructP with: largeStructQ with: largeStructR with: largeStructS with: largeStructT with: largeStructU with: largeStructV with: largeStructW with: largeStructX with: largeStructY with: largeStructZ with: largeStruct0 with: largeStruct1 with: largeStruct2 with: largeStruct3	&lt;C: unsigned long test066(LargeStruct largeStructA, LargeStruct largeStructB, LargeStruct largeStructC, LargeStruct largeStructD, LargeStruct largeStructE, LargeStruct largeStructF, LargeStruct largeStructG, LargeStruct largeStructH, LargeStruct largeStructI, LargeStruct largeStructJ, LargeStruct largeStructK, LargeStruct largeStructL, LargeStruct largeStructM, LargeStruct largeStructN, LargeStruct largeStructO, LargeStruct largeStructP, LargeStruct largeStructQ, LargeStruct largeStructR, LargeStruct largeStructS, LargeStruct largeStructT, LargeStruct largeStructU, LargeStruct largeStructV, LargeStruct largeStructW, LargeStruct largeStructX, LargeStruct largeStructY, LargeStruct largeStructZ, LargeStruct largeStruct0, LargeStruct largeStruct1, LargeStruct largeStruct2, LargeStruct largeStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test067: bigStructA with: bigStructB with: bigStructC with: bigStructD with: bigStructE with: bigStructF with: bigStructG with: bigStructH with: bigStructI with: bigStructJ with: bigStructK with: bigStructL with: bigStructM with: bigStructN with: bigStructO with: bigStructP with: bigStructQ with: bigStructR with: bigStructS with: bigStructT with: bigStructU with: bigStructV with: bigStructW with: bigStructX with: bigStructY with: bigStructZ with: bigStruct0 with: bigStruct1 with: bigStruct2 with: bigStruct3	&lt;C: unsigned long test067(BigStruct bigStructA, BigStruct bigStructB, BigStruct bigStructC, BigStruct bigStructD, BigStruct bigStructE, BigStruct bigStructF, BigStruct bigStructG, BigStruct bigStructH, BigStruct bigStructI, BigStruct bigStructJ, BigStruct bigStructK, BigStruct bigStructL, BigStruct bigStructM, BigStruct bigStructN, BigStruct bigStructO, BigStruct bigStructP, BigStruct bigStructQ, BigStruct bigStructR, BigStruct bigStructS, BigStruct bigStructT, BigStruct bigStructU, BigStruct bigStructV, BigStruct bigStructW, BigStruct bigStructX, BigStruct bigStructY, BigStruct bigStructZ, BigStruct bigStruct0, BigStruct bigStruct1, BigStruct bigStruct2, BigStruct bigStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test068: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA	&lt;C: unsigned long long test068(signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test069: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar	&lt;C: unsigned long long test069(unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test070: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar	&lt;C: unsigned long long test070(short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test071: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort	&lt;C: unsigned long long test071(unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test072: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort	&lt;C: unsigned long long test072(int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test073: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt	&lt;C: unsigned long long test073(unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test074: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt	&lt;C: unsigned long long test074(long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test075: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong	&lt;C: unsigned long long test075(unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test076: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong	&lt;C: unsigned long long test076(long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test077: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong	&lt;C: unsigned long long test077(unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test078: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong	&lt;C: unsigned long long test078(float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test079: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat	&lt;C: unsigned long long test079(double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test080: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble	&lt;C: unsigned long long test080(CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test081: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct	&lt;C: unsigned long long test081(SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test082: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct	&lt;C: unsigned long long test082(MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test083: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct	&lt;C: unsigned long long test083(LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test084: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct	&lt;C: unsigned long long test084(BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test085: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct	&lt;C: unsigned long long test085(signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test086: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar	&lt;C: unsigned long long test086(unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test087: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar	&lt;C: unsigned long long test087(short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test088: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort	&lt;C: unsigned long long test088(unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test089: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort	&lt;C: unsigned long long test089(int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test090: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt	&lt;C: unsigned long long test090(unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test091: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt	&lt;C: unsigned long long test091(long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test092: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong	&lt;C: unsigned long long test092(unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test093: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong	&lt;C: unsigned long long test093(long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test094: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong	&lt;C: unsigned long long test094(unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test095: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong	&lt;C: unsigned long long test095(float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test096: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat	&lt;C: unsigned long long test096(double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test097: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble	&lt;C: unsigned long long test097(CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test098: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA	&lt;C: unsigned long long test098(SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test099: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA	&lt;C: unsigned long long test099(MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test100: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA	&lt;C: unsigned long long test100(LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test101: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA	&lt;C: unsigned long long test101(BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test102: f0 w: f1 w: f2 w: f3 w: f4 w: f5 w: f6 w: f7 w: f8 w: f9 w: f10 w: f11 w: f12 w: f13 w: f14 w: f15 w: f16 w: f17 w: f18 w: f19 w: f20 w: f21 w: f22 w: f23 w: f24 w: f25 w: f26 w: f27 w: f28 w: f29 w: f30 w: f31 w: f32 w: f33 w: f34 w: f35 w: f36 w: f37 w: f38 w: f39 w: f40 w: f41 w: f42 w: f43 w: f44 w: f45 w: f46 w: f47 w: f48 w: f49 w: f50 w: f51 w: f52 w: f53 w: f54 w: f55 w: f56 w: f57 w: f58 w: f59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long test102(float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13, float f14, float f15, float f16, float f17, float f18, float f19, float f20, float f21, float f22, float f23, float f24, float f25, float f26, float f27, float f28, float f29, float f30, float f31, float f32, float f33, float f34, float f35, float f36, float f37, float f38, float f39, float f40, float f41, float f42, float f43, float f44, float f45, float f46, float f47, float f48, float f49, float f50, float f51, float f52, float f53, float f54, float f55, float f56, float f57, float f58, float f59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test103: d0 w: d1 w: d2 w: d3 w: d4 w: d5 w: d6 w: d7 w: d8 w: d9 w: d10 w: d11 w: d12 w: d13 w: d14 w: d15 w: d16 w: d17 w: d18 w: d19 w: d20 w: d21 w: d22 w: d23 w: d24 w: d25 w: d26 w: d27 w: d28 w: d29 w: d30 w: d31 w: d32 w: d33 w: d34 w: d35 w: d36 w: d37 w: d38 w: d39 w: d40 w: d41 w: d42 w: d43 w: d44 w: d45 w: d46 w: d47 w: d48 w: d49 w: d50 w: d51 w: d52 w: d53 w: d54 w: d55 w: d56 w: d57 w: d58 w: d59 w: d60 w: d61 w: d62 w: d63	&lt;C: unsigned long long test103(double d0, double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11, double d12, double d13, double d14, double d15, double d16, double d17, double d18, double d19, double d20, double d21, double d22, double d23, double d24, double d25, double d26, double d27, double d28, double d29, double d30, double d31, double d32, double d33, double d34, double d35, double d36, double d37, double d38, double d39, double d40, double d41, double d42, double d43, double d44, double d45, double d46, double d47, double d48, double d49, double d50, double d51, double d52, double d53, double d54, double d55, double d56, double d57, double d58, double d59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test104: d0 w: f1 w: d2 w: f3 w: d4 w: f5 w: d6 w: f7 w: d8 w: f9 w: d10 w: f11 w: d12 w: f13 w: d14 w: f15 w: d16 w: f17 w: d18 w: f19 w: d20 w: f21 w: d22 w: f23 w: d24 w: f25 w: d26 w: f27 w: d28 w: f29 w: d30 w: f31 w: d32 w: f33 w: d34 w: f35 w: d36 w: f37 w: d38 w: f39 w: d40 w: f41 w: d42 w: f43 w: d44 w: f45 w: d46 w: f47 w: d48 w: f49 w: d50 w: f51 w: d52 w: f53 w: d54 w: f55 w: d56 w: f57 w: d58 w: f59 w: d60 w: f61 w: d62 w: f63	&lt;C: unsigned long long test104(double d0, float f1, double d2, float f3, double d4, float f5, double d6, float f7, double d8, float f9, double d10, float f11, double d12, float f13, double d14, float f15, double d16, float f17, double d18, float f19, double d20, float f21, double d22, float f23, double d24, float f25, double d26, float f27, double d28, float f29, double d30, float f31, double d32, float f33, double d34, float f35, double d36, float f37, double d38, float f39, double d40, float f41, double d42, float f43, double d44, float f45, double d46, float f47, double d48, float f49, double d50, float f51, double d52, float f53, double d54, float f55, double d56, float f57, double d58, float f59, double d60, float f61, double d62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test105: f0 w: d1 w: f2 w: d3 w: f4 w: d5 w: f6 w: d7 w: f8 w: d9 w: f10 w: d11 w: f12 w: d13 w: f14 w: d15 w: f16 w: d17 w: f18 w: d19 w: f20 w: d21 w: f22 w: d23 w: f24 w: d25 w: f26 w: d27 w: f28 w: d29 w: f30 w: d31 w: f32 w: d33 w: f34 w: d35 w: f36 w: d37 w: f38 w: d39 w: f40 w: d41 w: f42 w: d43 w: f44 w: d45 w: f46 w: d47 w: f48 w: d49 w: f50 w: d51 w: f52 w: d53 w: f54 w: d55 w: f56 w: d57 w: f58 w: d59 w: f60 w: d61 w: f62 w: d63	&lt;C: unsigned long long test105(float f0, double d1, float f2, double d3, float f4, double d5, float f6, double d7, float f8, double d9, float f10, double d11, float f12, double d13, float f14, double d15, float f16, double d17, float f18, double d19, float f20, double d21, float f22, double d23, float f24, double d25, float f26, double d27, float f28, double d29, float f30, double d31, float f32, double d33, float f34, double d35, float f36, double d37, float f38, double d39, float f40, double d41, float f42, double d43, float f44, double d45, float f46, double d47, float f48, double d49, float f50, double d51, float f52, double d53, float f54, double d55, float f56, double d57, float f58, double d59, float f60, double d61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test106: f0 w: l1 w: l2 w: f3 w: l4 w: l5 w: f6 w: l7 w: l8 w: f9 w: l10 w: l11 w: f12 w: l13 w: l14 w: f15 w: l16 w: l17 w: f18 w: l19 w: l20 w: f21 w: l22 w: l23 w: f24 w: l25 w: l26 w: f27 w: l28 w: l29 w: f30 w: l31 w: l32 w: f33 w: l34 w: l35 w: f36 w: l37 w: l38 w: f39 w: l40 w: l41 w: f42 w: l43 w: l44 w: f45 w: l46 w: l47 w: f48 w: l49 w: l50 w: f51 w: l52 w: l53 w: f54 w: l55 w: l56 w: f57 w: l58 w: l59 w: f60 w: l61 w: l62 w: f63	&lt;C: unsigned long long test106(float f0, long l1, long l2, float f3, long l4, long l5, float f6, long l7, long l8, float f9, long l10, long l11, float f12, long l13, long l14, float f15, long l16, long l17, float f18, long l19, long l20, float f21, long l22, long l23, float f24, long l25, long l26, float f27, long l28, long l29, float f30, long l31, long l32, float f33, long l34, long l35, float f36, long l37, long l38, float f39, long l40, long l41, float f42, long l43, long l44, float f45, long l46, long l47, float f48, long l49, long l50, float f51, long l52, long l53, float f54, long l55, long l56, float f57, long l58, long l59, float f60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test107: l0 w: f1 w: l2 w: l3 w: f4 w: l5 w: l6 w: f7 w: l8 w: l9 w: f10 w: l11 w: l12 w: f13 w: l14 w: l15 w: f16 w: l17 w: l18 w: f19 w: l20 w: l21 w: f22 w: l23 w: l24 w: f25 w: l26 w: l27 w: f28 w: l29 w: l30 w: f31 w: l32 w: l33 w: f34 w: l35 w: l36 w: f37 w: l38 w: l39 w: f40 w: l41 w: l42 w: f43 w: l44 w: l45 w: f46 w: l47 w: l48 w: f49 w: l50 w: l51 w: f52 w: l53 w: l54 w: f55 w: l56 w: l57 w: f58 w: l59 w: l60 w: f61 w: l62 w: l63	&lt;C: unsigned long long test107(long l0, float f1, long l2, long l3, float f4, long l5, long l6, float f7, long l8, long l9, float f10, long l11, long l12, float f13, long l14, long l15, float f16, long l17, long l18, float f19, long l20, long l21, float f22, long l23, long l24, float f25, long l26, long l27, float f28, long l29, long l30, float f31, long l32, long l33, float f34, long l35, long l36, float f37, long l38, long l39, float f40, long l41, long l42, float f43, long l44, long l45, float f46, long l47, long l48, float f49, long l50, long l51, float f52, long l53, long l54, float f55, long l56, long l57, float f58, long l59, long l60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test108: f0 w: d1 w: l2 w: f3 w: d4 w: l5 w: f6 w: d7 w: l8 w: f9 w: d10 w: l11 w: f12 w: d13 w: l14 w: f15 w: d16 w: l17 w: f18 w: d19 w: l20 w: f21 w: d22 w: l23 w: f24 w: d25 w: l26 w: f27 w: d28 w: l29 w: f30 w: d31 w: l32 w: f33 w: d34 w: l35 w: f36 w: d37 w: l38 w: f39 w: d40 w: l41 w: f42 w: d43 w: l44 w: f45 w: d46 w: l47 w: f48 w: d49 w: l50 w: f51 w: d52 w: l53 w: f54 w: d55 w: l56 w: f57 w: d58 w: l59 w: f60 w: d61 w: l62 w: f63	&lt;C: unsigned long long test108(float f0, double d1, long l2, float f3, double d4, long l5, float f6, double d7, long l8, float f9, double d10, long l11, float f12, double d13, long l14, float f15, double d16, long l17, float f18, double d19, long l20, float f21, double d22, long l23, float f24, double d25, long l26, float f27, double d28, long l29, float f30, double d31, long l32, float f33, double d34, long l35, float f36, double d37, long l38, float f39, double d40, long l41, float f42, double d43, long l44, float f45, double d46, long l47, float f48, double d49, long l50, float f51, double d52, long l53, float f54, double d55, long l56, float f57, double d58, long l59, float f60, double d61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test109: l0 w: f1 w: d2 w: l3 w: f4 w: d5 w: l6 w: f7 w: d8 w: l9 w: f10 w: d11 w: l12 w: f13 w: d14 w: l15 w: f16 w: d17 w: l18 w: f19 w: d20 w: l21 w: f22 w: d23 w: l24 w: f25 w: d26 w: l27 w: f28 w: d29 w: l30 w: f31 w: d32 w: l33 w: f34 w: d35 w: l36 w: f37 w: d38 w: l39 w: f40 w: d41 w: l42 w: f43 w: d44 w: l45 w: f46 w: d47 w: l48 w: f49 w: d50 w: l51 w: f52 w: d53 w: l54 w: f55 w: d56 w: l57 w: f58 w: d59 w: l60 w: f61 w: d62 w: l63	&lt;C: unsigned long long test109(long l0, float f1, double d2, long l3, float f4, double d5, long l6, float f7, double d8, long l9, float f10, double d11, long l12, float f13, double d14, long l15, float f16, double d17, long l18, float f19, double d20, long l21, float f22, double d23, long l24, float f25, double d26, long l27, float f28, double d29, long l30, float f31, double d32, long l33, float f34, double d35, long l36, float f37, double d38, long l39, float f40, double d41, long l42, float f43, double d44, long l45, float f46, double d47, long l48, float f49, double d50, long l51, float f52, double d53, long l54, float f55, double d56, long l57, float f58, double d59, long l60, float f61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test110: d0 w: l1 w: f2 w: d3 w: l4 w: f5 w: d6 w: l7 w: f8 w: d9 w: l10 w: f11 w: d12 w: l13 w: f14 w: d15 w: l16 w: f17 w: d18 w: l19 w: f20 w: d21 w: l22 w: f23 w: d24 w: l25 w: f26 w: d27 w: l28 w: f29 w: d30 w: l31 w: f32 w: d33 w: l34 w: f35 w: d36 w: l37 w: f38 w: d39 w: l40 w: f41 w: d42 w: l43 w: f44 w: d45 w: l46 w: f47 w: d48 w: l49 w: f50 w: d51 w: l52 w: f53 w: d54 w: l55 w: f56 w: d57 w: l58 w: f59 w: d60 w: l61 w: f62 w: d63	&lt;C: unsigned long long test110(double d0, long l1, float f2, double d3, long l4, float f5, double d6, long l7, float f8, double d9, long l10, float f11, double d12, long l13, float f14, double d15, long l16, float f17, double d18, long l19, float f20, double d21, long l22, float f23, double d24, long l25, float f26, double d27, long l28, float f29, double d30, long l31, float f32, double d33, long l34, float f35, double d36, long l37, float f38, double d39, long l40, float f41, double d42, long l43, float f44, double d45, long l46, float f47, double d48, long l49, float f50, double d51, long l52, float f53, double d54, long l55, float f56, double d57, long l58, float f59, double d60, long l61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test111: f0 w: f1 w: l2 w: l3 w: l4 w: l5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: l38 w: l39 w: l40 w: l41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: l62 w: l63	&lt;C: unsigned long long test111(float f0, float f1, long l2, long l3, long l4, long l5, float f6, float f7, long l8, long l9, long l10, long l11, float f12, float f13, long l14, long l15, long l16, long l17, float f18, float f19, long l20, long l21, long l22, long l23, float f24, float f25, long l26, long l27, long l28, long l29, float f30, float f31, long l32, long l33, long l34, long l35, float f36, float f37, long l38, long l39, long l40, long l41, float f42, float f43, long l44, long l45, long l46, long l47, float f48, float f49, long l50, long l51, long l52, long l53, float f54, float f55, long l56, long l57, long l58, long l59, float f60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test112: l0 w: l1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: l22 w: l23 w: l24 w: l25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: l34 w: l35 w: l36 w: l37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: l58 w: l59 w: l60 w: l61 w: f62 w: f63	&lt;C: unsigned long long test112(long l0, long l1, float f2, float f3, long l4, long l5, long l6, long l7, float f8, float f9, long l10, long l11, long l12, long l13, float f14, float f15, long l16, long l17, long l18, long l19, float f20, float f21, long l22, long l23, long l24, long l25, float f26, float f27, long l28, long l29, long l30, long l31, float f32, float f33, long l34, long l35, long l36, long l37, float f38, float f39, long l40, long l41, long l42, long l43, float f44, float f45, long l46, long l47, long l48, long l49, float f50, float f51, long l52, long l53, long l54, long l55, float f56, float f57, long l58, long l59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test113: f0 w: f1 w: d2 w: d3 w: l4 w: l5 w: f6 w: f7 w: d8 w: d9 w: l10 w: l11 w: f12 w: f13 w: d14 w: d15 w: l16 w: l17 w: f18 w: f19 w: d20 w: d21 w: l22 w: l23 w: f24 w: f25 w: d26 w: d27 w: l28 w: l29 w: f30 w: f31 w: d32 w: d33 w: l34 w: l35 w: f36 w: f37 w: d38 w: d39 w: l40 w: l41 w: f42 w: f43 w: d44 w: d45 w: l46 w: l47 w: f48 w: f49 w: d50 w: d51 w: l52 w: l53 w: f54 w: f55 w: d56 w: d57 w: l58 w: l59 w: f60 w: f61 w: d62 w: d63	&lt;C: unsigned long long test113(float f0, float f1, double d2, double d3, long l4, long l5, float f6, float f7, double d8, double d9, long l10, long l11, float f12, float f13, double d14, double d15, long l16, long l17, float f18, float f19, double d20, double d21, long l22, long l23, float f24, float f25, double d26, double d27, long l28, long l29, float f30, float f31, double d32, double d33, long l34, long l35, float f36, float f37, double d38, double d39, long l40, long l41, float f42, float f43, double d44, double d45, long l46, long l47, float f48, float f49, double d50, double d51, long l52, long l53, float f54, float f55, double d56, double d57, long l58, long l59, float f60, float f61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test114: l0 w: l1 w: f2 w: f3 w: d4 w: d5 w: l6 w: l7 w: f8 w: f9 w: d10 w: d11 w: l12 w: l13 w: f14 w: f15 w: d16 w: d17 w: l18 w: l19 w: f20 w: f21 w: d22 w: d23 w: l24 w: l25 w: f26 w: f27 w: d28 w: d29 w: l30 w: l31 w: f32 w: f33 w: d34 w: d35 w: l36 w: l37 w: f38 w: f39 w: d40 w: d41 w: l42 w: l43 w: f44 w: f45 w: d46 w: d47 w: l48 w: l49 w: f50 w: f51 w: d52 w: d53 w: l54 w: l55 w: f56 w: f57 w: d58 w: d59 w: l60 w: l61 w: f62 w: f63	&lt;C: unsigned long long test114(long l0, long l1, float f2, float f3, double d4, double d5, long l6, long l7, float f8, float f9, double d10, double d11, long l12, long l13, float f14, float f15, double d16, double d17, long l18, long l19, float f20, float f21, double d22, double d23, long l24, long l25, float f26, float f27, double d28, double d29, long l30, long l31, float f32, float f33, double d34, double d35, long l36, long l37, float f38, float f39, double d40, double d41, long l42, long l43, float f44, float f45, double d46, double d47, long l48, long l49, float f50, float f51, double d52, double d53, long l54, long l55, float f56, float f57, double d58, double d59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test115: d0 w: d1 w: l2 w: l3 w: f4 w: f5 w: d6 w: d7 w: l8 w: l9 w: f10 w: f11 w: d12 w: d13 w: l14 w: l15 w: f16 w: f17 w: d18 w: d19 w: l20 w: l21 w: f22 w: f23 w: d24 w: d25 w: l26 w: l27 w: f28 w: f29 w: d30 w: d31 w: l32 w: l33 w: f34 w: f35 w: d36 w: d37 w: l38 w: l39 w: f40 w: f41 w: d42 w: d43 w: l44 w: l45 w: f46 w: f47 w: d48 w: d49 w: l50 w: l51 w: f52 w: f53 w: d54 w: d55 w: l56 w: l57 w: f58 w: f59 w: d60 w: d61 w: l62 w: l63	&lt;C: unsigned long long test115(double d0, double d1, long l2, long l3, float f4, float f5, double d6, double d7, long l8, long l9, float f10, float f11, double d12, double d13, long l14, long l15, float f16, float f17, double d18, double d19, long l20, long l21, float f22, float f23, double d24, double d25, long l26, long l27, float f28, float f29, double d30, double d31, long l32, long l33, float f34, float f35, double d36, double d37, long l38, long l39, float f40, float f41, double d42, double d43, long l44, long l45, float f46, float f47, double d48, double d49, long l50, long l51, float f52, float f53, double d54, double d55, long l56, long l57, float f58, float f59, double d60, double d61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test116: f0 w: f1 w: f2 w: l3 w: l4 w: l5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: l48 w: l49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: f63	&lt;C: unsigned long long test116(float f0, float f1, float f2, long l3, long l4, long l5, long l6, long l7, long l8, float f9, float f10, float f11, long l12, long l13, long l14, long l15, long l16, long l17, float f18, float f19, float f20, long l21, long l22, long l23, long l24, long l25, long l26, float f27, float f28, float f29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, long l48, long l49, long l50, long l51, long l52, long l53, float f54, float f55, float f56, long l57, long l58, long l59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test117: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: l15 w: l16 w: l17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long test117(long l0, long l1, long l2, float f3, float f4, float f5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, long l15, long l16, long l17, long l18, long l19, long l20, float f21, float f22, float f23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, long l33, long l34, long l35, long l36, long l37, long l38, float f39, float f40, float f41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, long l51, long l52, long l53, long l54, long l55, long l56, float f57, float f58, float f59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test118: f0 w: f1 w: f2 w: d3 w: d4 w: d5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: d39 w: d40 w: d41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: f63	&lt;C: unsigned long long test118(float f0, float f1, float f2, double d3, double d4, double d5, long l6, long l7, long l8, float f9, float f10, float f11, double d12, double d13, double d14, long l15, long l16, long l17, float f18, float f19, float f20, double d21, double d22, double d23, long l24, long l25, long l26, float f27, float f28, float f29, double d30, double d31, double d32, long l33, long l34, long l35, float f36, float f37, float f38, double d39, double d40, double d41, long l42, long l43, long l44, float f45, float f46, float f47, double d48, double d49, double d50, long l51, long l52, long l53, float f54, float f55, float f56, double d57, double d58, double d59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test119: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: d6 w: d7 w: d8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: d51 w: d52 w: d53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: l63	&lt;C: unsigned long long test119(long l0, long l1, long l2, float f3, float f4, float f5, double d6, double d7, double d8, long l9, long l10, long l11, float f12, float f13, float f14, double d15, double d16, double d17, long l18, long l19, long l20, float f21, float f22, float f23, double d24, double d25, double d26, long l27, long l28, long l29, float f30, float f31, float f32, double d33, double d34, double d35, long l36, long l37, long l38, float f39, float f40, float f41, double d42, double d43, double d44, long l45, long l46, long l47, float f48, float f49, float f50, double d51, double d52, double d53, long l54, long l55, long l56, float f57, float f58, float f59, double d60, double d61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test120: d0 w: d1 w: d2 w: l3 w: l4 w: l5 w: f6 w: f7 w: f8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: d18 w: d19 w: d20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: l39 w: l40 w: l41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: f51 w: f52 w: f53 w: d54 w: d55 w: d56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: d63	&lt;C: unsigned long long test120(double d0, double d1, double d2, long l3, long l4, long l5, float f6, float f7, float f8, double d9, double d10, double d11, long l12, long l13, long l14, float f15, float f16, float f17, double d18, double d19, double d20, long l21, long l22, long l23, float f24, float f25, float f26, double d27, double d28, double d29, long l30, long l31, long l32, float f33, float f34, float f35, double d36, double d37, double d38, long l39, long l40, long l41, float f42, float f43, float f44, double d45, double d46, double d47, long l48, long l49, long l50, float f51, float f52, float f53, double d54, double d55, double d56, long l57, long l58, long l59, float f60, float f61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test121: f0 w: f1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long test121(float f0, float f1, float f2, float f3, long l4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, long l16, long l17, long l18, long l19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test122: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long test122(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, long l32, long l33, long l34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, long l44, long l45, long l46, long l47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test123: f0 w: f1 w: f2 w: f3 w: d4 w: d5 w: d6 w: d7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: d28 w: d29 w: d30 w: d31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: d52 w: d53 w: d54 w: d55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long test123(float f0, float f1, float f2, float f3, double d4, double d5, double d6, double d7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, double d28, double d29, double d30, double d31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, double d52, double d53, double d54, double d55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test124: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: d8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: d32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: d44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long test124(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, double d8, double d9, double d10, double d11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, double d32, double d33, double d34, double d35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, double d44, double d45, double d46, double d47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test125: d0 w: d1 w: d2 w: d3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: d15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: d27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: d51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: unsigned long long test125(double d0, double d1, double d2, double d3, long l4, long l5, long l6, long l7, float f8, float f9, float f10, float f11, double d12, double d13, double d14, double d15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, double d24, double d25, double d26, double d27, long l28, long l29, long l30, long l31, float f32, float f33, float f34, float f35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, float f44, float f45, float f46, float f47, double d48, double d49, double d50, double d51, long l52, long l53, long l54, long l55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test126: f0 w: f1 w: f2 w: f3 w: f4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: l35 w: l36 w: l37 w: l38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long test126(float f0, float f1, float f2, float f3, float f4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, long l35, long l36, long l37, long l38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, long l50, long l51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test127: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: l25 w: l26 w: l27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: l55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long test127(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, long l10, long l11, long l12, long l13, long l14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, long l25, long l26, long l27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, long l55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test128: f0 w: f1 w: f2 w: f3 w: f4 w: d5 w: d6 w: d7 w: d8 w: d9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: d24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: d35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: d50 w: d51 w: d52 w: d53 w: d54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: unsigned long long test128(float f0, float f1, float f2, float f3, float f4, double d5, double d6, double d7, double d8, double d9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, double d24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, double d35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, double d50, double d51, double d52, double d53, double d54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test129: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: d10 w: d11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: d25 w: d26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: d55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: unsigned long long test129(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, double d10, double d11, double d12, double d13, double d14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, double d25, double d26, double d27, double d28, double d29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, double d44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, double d55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">test130: d0 w: d1 w: d2 w: d3 w: d4 w: l5 w: l6 w: l7 w: l8 w: l9 w: f10 w: f11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: l24 w: f25 w: f26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: d33 w: d34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: d48 w: d49 w: l50 w: l51 w: l52 w: l53 w: l54 w: f55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: unsigned long long test130(double d0, double d1, double d2, double d3, double d4, long l5, long l6, long l7, long l8, long l9, float f10, float f11, float f12, float f13, float f14, double d15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, long l24, float f25, float f26, float f27, float f28, float f29, double d30, double d31, double d32, double d33, double d34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, float f44, double d45, double d46, double d47, double d48, double d49, long l50, long l51, long l52, long l53, long l54, float f55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback001: aCallback001	&lt;C: void testCallback001(Callback001 aCallback001)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback002: aCallback002 with: aChar	&lt;C: signed char testCallback002(Callback002 aCallback002, signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback003: aCallback003 with: aUChar	&lt;C: unsigned char testCallback003(Callback003 aCallback003, unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback004: aCallback004 with: aShort	&lt;C: short testCallback004(Callback004 aCallback004, short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback005: aCallback005 with: aUShort	&lt;C: unsigned short testCallback005(Callback005 aCallback005, unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback006: aCallback006 with: anInt	&lt;C: int testCallback006(Callback006 aCallback006, int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback007: aCallback007 with: aUInt	&lt;C: unsigned int testCallback007(Callback007 aCallback007, unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback008: aCallback008 with: aLong	&lt;C: long testCallback008(Callback008 aCallback008, long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback009: aCallback009 with: aULong	&lt;C: unsigned long testCallback009(Callback009 aCallback009, unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback010: aCallback010 with: aLongLong	&lt;C: long long testCallback010(Callback010 aCallback010, long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback011: aCallback011 with: aULongLong	&lt;C: unsigned long long testCallback011(Callback011 aCallback011, unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback012: aCallback012 with: aFloat	&lt;C: float testCallback012(Callback012 aCallback012, float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback013: aCallback013 with: aDouble	&lt;C: double testCallback013(Callback013 aCallback013, double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback014: aCallback014 with: charStruct	&lt;C: CharStruct testCallback014(Callback014 aCallback014, CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback015: aCallback015 with: smallStruct	&lt;C: SmallStruct testCallback015(Callback015 aCallback015, SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback016: aCallback016 with: mediumStruct	&lt;C: MediumStruct testCallback016(Callback016 aCallback016, MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback017: aCallback017 with: largeStruct	&lt;C: LargeStruct testCallback017(Callback017 aCallback017, LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback018: aCallback018 with: bigStruct	&lt;C: BigStruct testCallback018(Callback018 aCallback018, BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback019: aCallback019 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool char testCallback019(Callback019 aCallback019, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback020: aCallback020 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool short testCallback020(Callback020 aCallback020, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback021: aCallback021 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool int testCallback021(Callback021 aCallback021, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback022: aCallback022 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long testCallback022(Callback022 aCallback022, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback023: aCallback023 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long long testCallback023(Callback023 aCallback023, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback024: aCallback024 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool char testCallback024(Callback024 aCallback024, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback025: aCallback025 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool short testCallback025(Callback025 aCallback025, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback026: aCallback026 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool int testCallback026(Callback026 aCallback026, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback027: aCallback027 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long testCallback027(Callback027 aCallback027, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback028: aCallback028 with: aBoolChar with: aBoolShort with: aBoolInt with: aBoolLong with: aBoolLongLong	&lt;C: __bool long long testCallback028(Callback028 aCallback028, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback029: aCallback029 w: block_charA w: block_charB w: block_charC w: block_charD w: block_charE w: block_charF w: block_charG w: block_charH w: block_charI w: block_charJ w: block_charK w: block_charL w: block_charM w: block_charN w: block_charO w: block_charP w: block_charQ w: block_charR w: block_charS w: block_charT w: block_charU w: block_charV w: block_charW w: block_charX w: block_charY w: block_charZ w: block_char0 w: block_char1 w: block_char2 w: block_char3	&lt;C: signed char testCallback029(Callback029 aCallback029, signed char block_charA, signed char block_charB, signed char block_charC, signed char block_charD, signed char block_charE, signed char block_charF, signed char block_charG, signed char block_charH, signed char block_charI, signed char block_charJ, signed char block_charK, signed char block_charL, signed char block_charM, signed char block_charN, signed char block_charO, signed char block_charP, signed char block_charQ, signed char block_charR, signed char block_charS, signed char block_charT, signed char block_charU, signed char block_charV, signed char block_charW, signed char block_charX, signed char block_charY, signed char block_charZ, signed char block_char0, signed char block_char1, signed char block_char2, signed char block_char3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback030: aCallback030 w: block_uCharA w: block_uCharB w: block_uCharC w: block_uCharD w: block_uCharE w: block_uCharF w: block_uCharG w: block_uCharH w: block_uCharI w: block_uCharJ w: block_uCharK w: block_uCharL w: block_uCharM w: block_uCharN w: block_uCharO w: block_uCharP w: block_uCharQ w: block_uCharR w: block_uCharS w: block_uCharT w: block_uCharU w: block_uCharV w: block_uCharW w: block_uCharX w: block_uCharY w: block_uCharZ w: block_uChar0 w: block_uChar1 w: block_uChar2 w: block_uChar3	&lt;C: unsigned char testCallback030(Callback030 aCallback030, unsigned char block_uCharA, unsigned char block_uCharB, unsigned char block_uCharC, unsigned char block_uCharD, unsigned char block_uCharE, unsigned char block_uCharF, unsigned char block_uCharG, unsigned char block_uCharH, unsigned char block_uCharI, unsigned char block_uCharJ, unsigned char block_uCharK, unsigned char block_uCharL, unsigned char block_uCharM, unsigned char block_uCharN, unsigned char block_uCharO, unsigned char block_uCharP, unsigned char block_uCharQ, unsigned char block_uCharR, unsigned char block_uCharS, unsigned char block_uCharT, unsigned char block_uCharU, unsigned char block_uCharV, unsigned char block_uCharW, unsigned char block_uCharX, unsigned char block_uCharY, unsigned char block_uCharZ, unsigned char block_uChar0, unsigned char block_uChar1, unsigned char block_uChar2, unsigned char block_uChar3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback031: aCallback031 w: block_shortA w: block_shortB w: block_shortC w: block_shortD w: block_shortE w: block_shortF w: block_shortG w: block_shortH w: block_shortI w: block_shortJ w: block_shortK w: block_shortL w: block_shortM w: block_shortN w: block_shortO w: block_shortP w: block_shortQ w: block_shortR w: block_shortS w: block_shortT w: block_shortU w: block_shortV w: block_shortW w: block_shortX w: block_shortY w: block_shortZ w: block_short0 w: block_short1 w: block_short2 w: block_short3	&lt;C: short testCallback031(Callback031 aCallback031, short block_shortA, short block_shortB, short block_shortC, short block_shortD, short block_shortE, short block_shortF, short block_shortG, short block_shortH, short block_shortI, short block_shortJ, short block_shortK, short block_shortL, short block_shortM, short block_shortN, short block_shortO, short block_shortP, short block_shortQ, short block_shortR, short block_shortS, short block_shortT, short block_shortU, short block_shortV, short block_shortW, short block_shortX, short block_shortY, short block_shortZ, short block_short0, short block_short1, short block_short2, short block_short3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback032: aCallback032 w: block_uShortA w: block_uShortB w: block_uShortC w: block_uShortD w: block_uShortE w: block_uShortF w: block_uShortG w: block_uShortH w: block_uShortI w: block_uShortJ w: block_uShortK w: block_uShortL w: block_uShortM w: block_uShortN w: block_uShortO w: block_uShortP w: block_uShortQ w: block_uShortR w: block_uShortS w: block_uShortT w: block_uShortU w: block_uShortV w: block_uShortW w: block_uShortX w: block_uShortY w: block_uShortZ w: block_uShort0 w: block_uShort1 w: block_uShort2 w: block_uShort3	&lt;C: unsigned short testCallback032(Callback032 aCallback032, unsigned short block_uShortA, unsigned short block_uShortB, unsigned short block_uShortC, unsigned short block_uShortD, unsigned short block_uShortE, unsigned short block_uShortF, unsigned short block_uShortG, unsigned short block_uShortH, unsigned short block_uShortI, unsigned short block_uShortJ, unsigned short block_uShortK, unsigned short block_uShortL, unsigned short block_uShortM, unsigned short block_uShortN, unsigned short block_uShortO, unsigned short block_uShortP, unsigned short block_uShortQ, unsigned short block_uShortR, unsigned short block_uShortS, unsigned short block_uShortT, unsigned short block_uShortU, unsigned short block_uShortV, unsigned short block_uShortW, unsigned short block_uShortX, unsigned short block_uShortY, unsigned short block_uShortZ, unsigned short block_uShort0, unsigned short block_uShort1, unsigned short block_uShort2, unsigned short block_uShort3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback033: aCallback033 w: block_intA w: block_intB w: block_intC w: block_intD w: block_intE w: block_intF w: block_intG w: block_intH w: block_intI w: block_intJ w: block_intK w: block_intL w: block_intM w: block_intN w: block_intO w: block_intP w: block_intQ w: block_intR w: block_intS w: block_intT w: block_intU w: block_intV w: block_intW w: block_intX w: block_intY w: block_intZ w: block_int0 w: block_int1 w: block_int2 w: block_int3	&lt;C: int testCallback033(Callback033 aCallback033, int block_intA, int block_intB, int block_intC, int block_intD, int block_intE, int block_intF, int block_intG, int block_intH, int block_intI, int block_intJ, int block_intK, int block_intL, int block_intM, int block_intN, int block_intO, int block_intP, int block_intQ, int block_intR, int block_intS, int block_intT, int block_intU, int block_intV, int block_intW, int block_intX, int block_intY, int block_intZ, int block_int0, int block_int1, int block_int2, int block_int3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback034: aCallback034 w: block_uIntA w: block_uIntB w: block_uIntC w: block_uIntD w: block_uIntE w: block_uIntF w: block_uIntG w: block_uIntH w: block_uIntI w: block_uIntJ w: block_uIntK w: block_uIntL w: block_uIntM w: block_uIntN w: block_uIntO w: block_uIntP w: block_uIntQ w: block_uIntR w: block_uIntS w: block_uIntT w: block_uIntU w: block_uIntV w: block_uIntW w: block_uIntX w: block_uIntY w: block_uIntZ w: block_uInt0 w: block_uInt1 w: block_uInt2 w: block_uInt3	&lt;C: unsigned int testCallback034(Callback034 aCallback034, unsigned int block_uIntA, unsigned int block_uIntB, unsigned int block_uIntC, unsigned int block_uIntD, unsigned int block_uIntE, unsigned int block_uIntF, unsigned int block_uIntG, unsigned int block_uIntH, unsigned int block_uIntI, unsigned int block_uIntJ, unsigned int block_uIntK, unsigned int block_uIntL, unsigned int block_uIntM, unsigned int block_uIntN, unsigned int block_uIntO, unsigned int block_uIntP, unsigned int block_uIntQ, unsigned int block_uIntR, unsigned int block_uIntS, unsigned int block_uIntT, unsigned int block_uIntU, unsigned int block_uIntV, unsigned int block_uIntW, unsigned int block_uIntX, unsigned int block_uIntY, unsigned int block_uIntZ, unsigned int block_uInt0, unsigned int block_uInt1, unsigned int block_uInt2, unsigned int block_uInt3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback035: aCallback035 w: block_longA w: block_longB w: block_longC w: block_longD w: block_longE w: block_longF w: block_longG w: block_longH w: block_longI w: block_longJ w: block_longK w: block_longL w: block_longM w: block_longN w: block_longO w: block_longP w: block_longQ w: block_longR w: block_longS w: block_longT w: block_longU w: block_longV w: block_longW w: block_longX w: block_longY w: block_longZ w: block_long0 w: block_long1 w: block_long2 w: block_long3	&lt;C: long testCallback035(Callback035 aCallback035, long block_longA, long block_longB, long block_longC, long block_longD, long block_longE, long block_longF, long block_longG, long block_longH, long block_longI, long block_longJ, long block_longK, long block_longL, long block_longM, long block_longN, long block_longO, long block_longP, long block_longQ, long block_longR, long block_longS, long block_longT, long block_longU, long block_longV, long block_longW, long block_longX, long block_longY, long block_longZ, long block_long0, long block_long1, long block_long2, long block_long3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback036: aCallback036 w: block_uLongA w: block_uLongB w: block_uLongC w: block_uLongD w: block_uLongE w: block_uLongF w: block_uLongG w: block_uLongH w: block_uLongI w: block_uLongJ w: block_uLongK w: block_uLongL w: block_uLongM w: block_uLongN w: block_uLongO w: block_uLongP w: block_uLongQ w: block_uLongR w: block_uLongS w: block_uLongT w: block_uLongU w: block_uLongV w: block_uLongW w: block_uLongX w: block_uLongY w: block_uLongZ w: block_uLong0 w: block_uLong1 w: block_uLong2 w: block_uLong3	&lt;C: unsigned long testCallback036(Callback036 aCallback036, unsigned long block_uLongA, unsigned long block_uLongB, unsigned long block_uLongC, unsigned long block_uLongD, unsigned long block_uLongE, unsigned long block_uLongF, unsigned long block_uLongG, unsigned long block_uLongH, unsigned long block_uLongI, unsigned long block_uLongJ, unsigned long block_uLongK, unsigned long block_uLongL, unsigned long block_uLongM, unsigned long block_uLongN, unsigned long block_uLongO, unsigned long block_uLongP, unsigned long block_uLongQ, unsigned long block_uLongR, unsigned long block_uLongS, unsigned long block_uLongT, unsigned long block_uLongU, unsigned long block_uLongV, unsigned long block_uLongW, unsigned long block_uLongX, unsigned long block_uLongY, unsigned long block_uLongZ, unsigned long block_uLong0, unsigned long block_uLong1, unsigned long block_uLong2, unsigned long block_uLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback037: aCallback037 w: block_longLongA w: block_longLongB w: block_longLongC w: block_longLongD w: block_longLongE w: block_longLongF w: block_longLongG w: block_longLongH w: block_longLongI w: block_longLongJ w: block_longLongK w: block_longLongL w: block_longLongM w: block_longLongN w: block_longLongO w: block_longLongP w: block_longLongQ w: block_longLongR w: block_longLongS w: block_longLongT w: block_longLongU w: block_longLongV w: block_longLongW w: block_longLongX w: block_longLongY w: block_longLongZ w: block_longLong0 w: block_longLong1 w: block_longLong2 w: block_longLong3	&lt;C: long long testCallback037(Callback037 aCallback037, long long block_longLongA, long long block_longLongB, long long block_longLongC, long long block_longLongD, long long block_longLongE, long long block_longLongF, long long block_longLongG, long long block_longLongH, long long block_longLongI, long long block_longLongJ, long long block_longLongK, long long block_longLongL, long long block_longLongM, long long block_longLongN, long long block_longLongO, long long block_longLongP, long long block_longLongQ, long long block_longLongR, long long block_longLongS, long long block_longLongT, long long block_longLongU, long long block_longLongV, long long block_longLongW, long long block_longLongX, long long block_longLongY, long long block_longLongZ, long long block_longLong0, long long block_longLong1, long long block_longLong2, long long block_longLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback038: aCallback038 w: block_uLongLongA w: block_uLongLongB w: block_uLongLongC w: block_uLongLongD w: block_uLongLongE w: block_uLongLongF w: block_uLongLongG w: block_uLongLongH w: block_uLongLongI w: block_uLongLongJ w: block_uLongLongK w: block_uLongLongL w: block_uLongLongM w: block_uLongLongN w: block_uLongLongO w: block_uLongLongP w: block_uLongLongQ w: block_uLongLongR w: block_uLongLongS w: block_uLongLongT w: block_uLongLongU w: block_uLongLongV w: block_uLongLongW w: block_uLongLongX w: block_uLongLongY w: block_uLongLongZ w: block_uLongLong0 w: block_uLongLong1 w: block_uLongLong2 w: block_uLongLong3	&lt;C: unsigned long long testCallback038(Callback038 aCallback038, unsigned long long block_uLongLongA, unsigned long long block_uLongLongB, unsigned long long block_uLongLongC, unsigned long long block_uLongLongD, unsigned long long block_uLongLongE, unsigned long long block_uLongLongF, unsigned long long block_uLongLongG, unsigned long long block_uLongLongH, unsigned long long block_uLongLongI, unsigned long long block_uLongLongJ, unsigned long long block_uLongLongK, unsigned long long block_uLongLongL, unsigned long long block_uLongLongM, unsigned long long block_uLongLongN, unsigned long long block_uLongLongO, unsigned long long block_uLongLongP, unsigned long long block_uLongLongQ, unsigned long long block_uLongLongR, unsigned long long block_uLongLongS, unsigned long long block_uLongLongT, unsigned long long block_uLongLongU, unsigned long long block_uLongLongV, unsigned long long block_uLongLongW, unsigned long long block_uLongLongX, unsigned long long block_uLongLongY, unsigned long long block_uLongLongZ, unsigned long long block_uLongLong0, unsigned long long block_uLongLong1, unsigned long long block_uLongLong2, unsigned long long block_uLongLong3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback039: aCallback039 w: block_floatA w: block_floatB w: block_floatC w: block_floatD w: block_floatE w: block_floatF w: block_floatG w: block_floatH w: block_floatI w: block_floatJ w: block_floatK w: block_floatL w: block_floatM w: block_floatN w: block_floatO w: block_floatP w: block_floatQ w: block_floatR w: block_floatS w: block_floatT w: block_floatU w: block_floatV w: block_floatW w: block_floatX w: block_floatY w: block_floatZ w: block_float0 w: block_float1 w: block_float2 w: block_float3	&lt;C: float testCallback039(Callback039 aCallback039, float block_floatA, float block_floatB, float block_floatC, float block_floatD, float block_floatE, float block_floatF, float block_floatG, float block_floatH, float block_floatI, float block_floatJ, float block_floatK, float block_floatL, float block_floatM, float block_floatN, float block_floatO, float block_floatP, float block_floatQ, float block_floatR, float block_floatS, float block_floatT, float block_floatU, float block_floatV, float block_floatW, float block_floatX, float block_floatY, float block_floatZ, float block_float0, float block_float1, float block_float2, float block_float3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback040: aCallback040 w: block_doubleA w: block_doubleB w: block_doubleC w: block_doubleD w: block_doubleE w: block_doubleF w: block_doubleG w: block_doubleH w: block_doubleI w: block_doubleJ w: block_doubleK w: block_doubleL w: block_doubleM w: block_doubleN w: block_doubleO w: block_doubleP w: block_doubleQ w: block_doubleR w: block_doubleS w: block_doubleT w: block_doubleU w: block_doubleV w: block_doubleW w: block_doubleX w: block_doubleY w: block_doubleZ w: block_double0 w: block_double1 w: block_double2 w: block_double3	&lt;C: double testCallback040(Callback040 aCallback040, double block_doubleA, double block_doubleB, double block_doubleC, double block_doubleD, double block_doubleE, double block_doubleF, double block_doubleG, double block_doubleH, double block_doubleI, double block_doubleJ, double block_doubleK, double block_doubleL, double block_doubleM, double block_doubleN, double block_doubleO, double block_doubleP, double block_doubleQ, double block_doubleR, double block_doubleS, double block_doubleT, double block_doubleU, double block_doubleV, double block_doubleW, double block_doubleX, double block_doubleY, double block_doubleZ, double block_double0, double block_double1, double block_double2, double block_double3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback041: aCallback041 w: block_charStructA w: block_charStructB w: block_charStructC w: block_charStructD w: block_charStructE w: block_charStructF w: block_charStructG w: block_charStructH w: block_charStructI w: block_charStructJ w: block_charStructK w: block_charStructL w: block_charStructM w: block_charStructN w: block_charStructO w: block_charStructP w: block_charStructQ w: block_charStructR w: block_charStructS w: block_charStructT w: block_charStructU w: block_charStructV w: block_charStructW w: block_charStructX w: block_charStructY w: block_charStructZ w: block_charStruct0 w: block_charStruct1 w: block_charStruct2 w: block_charStruct3	&lt;C: CharStruct testCallback041(Callback041 aCallback041, CharStruct block_charStructA, CharStruct block_charStructB, CharStruct block_charStructC, CharStruct block_charStructD, CharStruct block_charStructE, CharStruct block_charStructF, CharStruct block_charStructG, CharStruct block_charStructH, CharStruct block_charStructI, CharStruct block_charStructJ, CharStruct block_charStructK, CharStruct block_charStructL, CharStruct block_charStructM, CharStruct block_charStructN, CharStruct block_charStructO, CharStruct block_charStructP, CharStruct block_charStructQ, CharStruct block_charStructR, CharStruct block_charStructS, CharStruct block_charStructT, CharStruct block_charStructU, CharStruct block_charStructV, CharStruct block_charStructW, CharStruct block_charStructX, CharStruct block_charStructY, CharStruct block_charStructZ, CharStruct block_charStruct0, CharStruct block_charStruct1, CharStruct block_charStruct2, CharStruct block_charStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback042: aCallback042 w: block_smallStructA w: block_smallStructB w: block_smallStructC w: block_smallStructD w: block_smallStructE w: block_smallStructF w: block_smallStructG w: block_smallStructH w: block_smallStructI w: block_smallStructJ w: block_smallStructK w: block_smallStructL w: block_smallStructM w: block_smallStructN w: block_smallStructO w: block_smallStructP w: block_smallStructQ w: block_smallStructR w: block_smallStructS w: block_smallStructT w: block_smallStructU w: block_smallStructV w: block_smallStructW w: block_smallStructX w: block_smallStructY w: block_smallStructZ w: block_smallStruct0 w: block_smallStruct1 w: block_smallStruct2 w: block_smallStruct3	&lt;C: SmallStruct testCallback042(Callback042 aCallback042, SmallStruct block_smallStructA, SmallStruct block_smallStructB, SmallStruct block_smallStructC, SmallStruct block_smallStructD, SmallStruct block_smallStructE, SmallStruct block_smallStructF, SmallStruct block_smallStructG, SmallStruct block_smallStructH, SmallStruct block_smallStructI, SmallStruct block_smallStructJ, SmallStruct block_smallStructK, SmallStruct block_smallStructL, SmallStruct block_smallStructM, SmallStruct block_smallStructN, SmallStruct block_smallStructO, SmallStruct block_smallStructP, SmallStruct block_smallStructQ, SmallStruct block_smallStructR, SmallStruct block_smallStructS, SmallStruct block_smallStructT, SmallStruct block_smallStructU, SmallStruct block_smallStructV, SmallStruct block_smallStructW, SmallStruct block_smallStructX, SmallStruct block_smallStructY, SmallStruct block_smallStructZ, SmallStruct block_smallStruct0, SmallStruct block_smallStruct1, SmallStruct block_smallStruct2, SmallStruct block_smallStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback043: aCallback043 w: block_mediumStructA w: block_mediumStructB w: block_mediumStructC w: block_mediumStructD w: block_mediumStructE w: block_mediumStructF w: block_mediumStructG w: block_mediumStructH w: block_mediumStructI w: block_mediumStructJ w: block_mediumStructK w: block_mediumStructL w: block_mediumStructM w: block_mediumStructN w: block_mediumStructO w: block_mediumStructP w: block_mediumStructQ w: block_mediumStructR w: block_mediumStructS w: block_mediumStructT w: block_mediumStructU w: block_mediumStructV w: block_mediumStructW w: block_mediumStructX w: block_mediumStructY w: block_mediumStructZ w: block_mediumStruct0 w: block_mediumStruct1 w: block_mediumStruct2 w: block_mediumStruct3	&lt;C: MediumStruct testCallback043(Callback043 aCallback043, MediumStruct block_mediumStructA, MediumStruct block_mediumStructB, MediumStruct block_mediumStructC, MediumStruct block_mediumStructD, MediumStruct block_mediumStructE, MediumStruct block_mediumStructF, MediumStruct block_mediumStructG, MediumStruct block_mediumStructH, MediumStruct block_mediumStructI, MediumStruct block_mediumStructJ, MediumStruct block_mediumStructK, MediumStruct block_mediumStructL, MediumStruct block_mediumStructM, MediumStruct block_mediumStructN, MediumStruct block_mediumStructO, MediumStruct block_mediumStructP, MediumStruct block_mediumStructQ, MediumStruct block_mediumStructR, MediumStruct block_mediumStructS, MediumStruct block_mediumStructT, MediumStruct block_mediumStructU, MediumStruct block_mediumStructV, MediumStruct block_mediumStructW, MediumStruct block_mediumStructX, MediumStruct block_mediumStructY, MediumStruct block_mediumStructZ, MediumStruct block_mediumStruct0, MediumStruct block_mediumStruct1, MediumStruct block_mediumStruct2, MediumStruct block_mediumStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback044: aCallback044 w: block_largeStructA w: block_largeStructB w: block_largeStructC w: block_largeStructD w: block_largeStructE w: block_largeStructF w: block_largeStructG w: block_largeStructH w: block_largeStructI w: block_largeStructJ w: block_largeStructK w: block_largeStructL w: block_largeStructM w: block_largeStructN w: block_largeStructO w: block_largeStructP w: block_largeStructQ w: block_largeStructR w: block_largeStructS w: block_largeStructT w: block_largeStructU w: block_largeStructV w: block_largeStructW w: block_largeStructX w: block_largeStructY w: block_largeStructZ w: block_largeStruct0 w: block_largeStruct1 w: block_largeStruct2 w: block_largeStruct3	&lt;C: LargeStruct testCallback044(Callback044 aCallback044, LargeStruct block_largeStructA, LargeStruct block_largeStructB, LargeStruct block_largeStructC, LargeStruct block_largeStructD, LargeStruct block_largeStructE, LargeStruct block_largeStructF, LargeStruct block_largeStructG, LargeStruct block_largeStructH, LargeStruct block_largeStructI, LargeStruct block_largeStructJ, LargeStruct block_largeStructK, LargeStruct block_largeStructL, LargeStruct block_largeStructM, LargeStruct block_largeStructN, LargeStruct block_largeStructO, LargeStruct block_largeStructP, LargeStruct block_largeStructQ, LargeStruct block_largeStructR, LargeStruct block_largeStructS, LargeStruct block_largeStructT, LargeStruct block_largeStructU, LargeStruct block_largeStructV, LargeStruct block_largeStructW, LargeStruct block_largeStructX, LargeStruct block_largeStructY, LargeStruct block_largeStructZ, LargeStruct block_largeStruct0, LargeStruct block_largeStruct1, LargeStruct block_largeStruct2, LargeStruct block_largeStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback045: aCallback045 w: block_bigStructA w: block_bigStructB w: block_bigStructC w: block_bigStructD w: block_bigStructE w: block_bigStructF w: block_bigStructG w: block_bigStructH w: block_bigStructI w: block_bigStructJ w: block_bigStructK w: block_bigStructL w: block_bigStructM w: block_bigStructN w: block_bigStructO w: block_bigStructP w: block_bigStructQ w: block_bigStructR w: block_bigStructS w: block_bigStructT w: block_bigStructU w: block_bigStructV w: block_bigStructW w: block_bigStructX w: block_bigStructY w: block_bigStructZ w: block_bigStruct0 w: block_bigStruct1 w: block_bigStruct2 w: block_bigStruct3	&lt;C: BigStruct testCallback045(Callback045 aCallback045, BigStruct block_bigStructA, BigStruct block_bigStructB, BigStruct block_bigStructC, BigStruct block_bigStructD, BigStruct block_bigStructE, BigStruct block_bigStructF, BigStruct block_bigStructG, BigStruct block_bigStructH, BigStruct block_bigStructI, BigStruct block_bigStructJ, BigStruct block_bigStructK, BigStruct block_bigStructL, BigStruct block_bigStructM, BigStruct block_bigStructN, BigStruct block_bigStructO, BigStruct block_bigStructP, BigStruct block_bigStructQ, BigStruct block_bigStructR, BigStruct block_bigStructS, BigStruct block_bigStructT, BigStruct block_bigStructU, BigStruct block_bigStructV, BigStruct block_bigStructW, BigStruct block_bigStructX, BigStruct block_bigStructY, BigStruct block_bigStructZ, BigStruct block_bigStruct0, BigStruct block_bigStruct1, BigStruct block_bigStruct2, BigStruct block_bigStruct3)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback046: aCallback046 w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA	&lt;C: signed char testCallback046(Callback046 aCallback046, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback047: aCallback047 w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar	&lt;C: unsigned char testCallback047(Callback047 aCallback047, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback048: aCallback048 w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar	&lt;C: short testCallback048(Callback048 aCallback048, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback049: aCallback049 w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort	&lt;C: unsigned short testCallback049(Callback049 aCallback049, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback050: aCallback050 w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort	&lt;C: int testCallback050(Callback050 aCallback050, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback051: aCallback051 w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt	&lt;C: unsigned int testCallback051(Callback051 aCallback051, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback052: aCallback052 w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt	&lt;C: long testCallback052(Callback052 aCallback052, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback053: aCallback053 w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong	&lt;C: unsigned long testCallback053(Callback053 aCallback053, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback054: aCallback054 w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong	&lt;C: long long testCallback054(Callback054 aCallback054, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback055: aCallback055 w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong	&lt;C: unsigned long long testCallback055(Callback055 aCallback055, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback056: aCallback056 w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong	&lt;C: float testCallback056(Callback056 aCallback056, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback057: aCallback057 w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat	&lt;C: double testCallback057(Callback057 aCallback057, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback058: aCallback058 w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble	&lt;C: CharStruct testCallback058(Callback058 aCallback058, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback059: aCallback059 w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct	&lt;C: SmallStruct testCallback059(Callback059 aCallback059, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback060: aCallback060 w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct	&lt;C: MediumStruct testCallback060(Callback060 aCallback060, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback061: aCallback061 w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct	&lt;C: LargeStruct testCallback061(Callback061 aCallback061, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback062: aCallback062 w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct	&lt;C: BigStruct testCallback062(Callback062 aCallback062, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback063: aCallback063 w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct	&lt;C: signed char testCallback063(Callback063 aCallback063, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback064: aCallback064 w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar	&lt;C: unsigned char testCallback064(Callback064 aCallback064, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback065: aCallback065 w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar	&lt;C: short testCallback065(Callback065 aCallback065, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback066: aCallback066 w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort	&lt;C: unsigned short testCallback066(Callback066 aCallback066, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback067: aCallback067 w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort	&lt;C: int testCallback067(Callback067 aCallback067, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback068: aCallback068 w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt	&lt;C: unsigned int testCallback068(Callback068 aCallback068, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback069: aCallback069 w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt	&lt;C: long testCallback069(Callback069 aCallback069, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback070: aCallback070 w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong	&lt;C: unsigned long testCallback070(Callback070 aCallback070, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback071: aCallback071 w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong	&lt;C: long long testCallback071(Callback071 aCallback071, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback072: aCallback072 w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong	&lt;C: unsigned long long testCallback072(Callback072 aCallback072, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback073: aCallback073 w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong	&lt;C: float testCallback073(Callback073 aCallback073, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback074: aCallback074 w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat	&lt;C: double testCallback074(Callback074 aCallback074, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback075: aCallback075 w: charStructA w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble	&lt;C: CharStruct testCallback075(Callback075 aCallback075, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback076: aCallback076 w: smallStructA w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA	&lt;C: SmallStruct testCallback076(Callback076 aCallback076, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback077: aCallback077 w: mediumStructA w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA	&lt;C: MediumStruct testCallback077(Callback077 aCallback077, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback078: aCallback078 w: largeStructA w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA	&lt;C: LargeStruct testCallback078(Callback078 aCallback078, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback079: aCallback079 w: bigStructA w: aChar w: aUChar w: aShort w: aUShort w: anInt w: aUInt w: aLong w: aULong w: aLongLong w: aULongLong w: aFloat w: aDouble w: charStruct w: smallStruct w: mediumStruct w: largeStruct w: bigStruct w: bChar w: bUChar w: bShort w: bUShort w: bnInt w: bUInt w: bLong w: bULong w: bLongLong w: bULongLong w: bFloat w: bDouble w: charStructA w: smallStructA w: mediumStructA w: largeStructA	&lt;C: BigStruct testCallback079(Callback079 aCallback079, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback080: aCallback080 w: f0 w: f1 w: f2 w: f3 w: f4 w: f5 w: f6 w: f7 w: f8 w: f9 w: f10 w: f11 w: f12 w: f13 w: f14 w: f15 w: f16 w: f17 w: f18 w: f19 w: f20 w: f21 w: f22 w: f23 w: f24 w: f25 w: f26 w: f27 w: f28 w: f29 w: f30 w: f31 w: f32 w: f33 w: f34 w: f35 w: f36 w: f37 w: f38 w: f39 w: f40 w: f41 w: f42 w: f43 w: f44 w: f45 w: f46 w: f47 w: f48 w: f49 w: f50 w: f51 w: f52 w: f53 w: f54 w: f55 w: f56 w: f57 w: f58 w: f59 w: f60 w: f61 w: f62 w: f63	&lt;C: float testCallback080(Callback080 aCallback080, float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13, float f14, float f15, float f16, float f17, float f18, float f19, float f20, float f21, float f22, float f23, float f24, float f25, float f26, float f27, float f28, float f29, float f30, float f31, float f32, float f33, float f34, float f35, float f36, float f37, float f38, float f39, float f40, float f41, float f42, float f43, float f44, float f45, float f46, float f47, float f48, float f49, float f50, float f51, float f52, float f53, float f54, float f55, float f56, float f57, float f58, float f59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback081: aCallback081 w: d0 w: d1 w: d2 w: d3 w: d4 w: d5 w: d6 w: d7 w: d8 w: d9 w: d10 w: d11 w: d12 w: d13 w: d14 w: d15 w: d16 w: d17 w: d18 w: d19 w: d20 w: d21 w: d22 w: d23 w: d24 w: d25 w: d26 w: d27 w: d28 w: d29 w: d30 w: d31 w: d32 w: d33 w: d34 w: d35 w: d36 w: d37 w: d38 w: d39 w: d40 w: d41 w: d42 w: d43 w: d44 w: d45 w: d46 w: d47 w: d48 w: d49 w: d50 w: d51 w: d52 w: d53 w: d54 w: d55 w: d56 w: d57 w: d58 w: d59 w: d60 w: d61 w: d62 w: d63	&lt;C: double testCallback081(Callback081 aCallback081, double d0, double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11, double d12, double d13, double d14, double d15, double d16, double d17, double d18, double d19, double d20, double d21, double d22, double d23, double d24, double d25, double d26, double d27, double d28, double d29, double d30, double d31, double d32, double d33, double d34, double d35, double d36, double d37, double d38, double d39, double d40, double d41, double d42, double d43, double d44, double d45, double d46, double d47, double d48, double d49, double d50, double d51, double d52, double d53, double d54, double d55, double d56, double d57, double d58, double d59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback082: aCallback082 w: d0 w: f1 w: d2 w: f3 w: d4 w: f5 w: d6 w: f7 w: d8 w: f9 w: d10 w: f11 w: d12 w: f13 w: d14 w: f15 w: d16 w: f17 w: d18 w: f19 w: d20 w: f21 w: d22 w: f23 w: d24 w: f25 w: d26 w: f27 w: d28 w: f29 w: d30 w: f31 w: d32 w: f33 w: d34 w: f35 w: d36 w: f37 w: d38 w: f39 w: d40 w: f41 w: d42 w: f43 w: d44 w: f45 w: d46 w: f47 w: d48 w: f49 w: d50 w: f51 w: d52 w: f53 w: d54 w: f55 w: d56 w: f57 w: d58 w: f59 w: d60 w: f61 w: d62 w: f63	&lt;C: double testCallback082(Callback082 aCallback082, double d0, float f1, double d2, float f3, double d4, float f5, double d6, float f7, double d8, float f9, double d10, float f11, double d12, float f13, double d14, float f15, double d16, float f17, double d18, float f19, double d20, float f21, double d22, float f23, double d24, float f25, double d26, float f27, double d28, float f29, double d30, float f31, double d32, float f33, double d34, float f35, double d36, float f37, double d38, float f39, double d40, float f41, double d42, float f43, double d44, float f45, double d46, float f47, double d48, float f49, double d50, float f51, double d52, float f53, double d54, float f55, double d56, float f57, double d58, float f59, double d60, float f61, double d62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback083: aCallback083 w: f0 w: d1 w: f2 w: d3 w: f4 w: d5 w: f6 w: d7 w: f8 w: d9 w: f10 w: d11 w: f12 w: d13 w: f14 w: d15 w: f16 w: d17 w: f18 w: d19 w: f20 w: d21 w: f22 w: d23 w: f24 w: d25 w: f26 w: d27 w: f28 w: d29 w: f30 w: d31 w: f32 w: d33 w: f34 w: d35 w: f36 w: d37 w: f38 w: d39 w: f40 w: d41 w: f42 w: d43 w: f44 w: d45 w: f46 w: d47 w: f48 w: d49 w: f50 w: d51 w: f52 w: d53 w: f54 w: d55 w: f56 w: d57 w: f58 w: d59 w: f60 w: d61 w: f62 w: d63	&lt;C: float testCallback083(Callback083 aCallback083, float f0, double d1, float f2, double d3, float f4, double d5, float f6, double d7, float f8, double d9, float f10, double d11, float f12, double d13, float f14, double d15, float f16, double d17, float f18, double d19, float f20, double d21, float f22, double d23, float f24, double d25, float f26, double d27, float f28, double d29, float f30, double d31, float f32, double d33, float f34, double d35, float f36, double d37, float f38, double d39, float f40, double d41, float f42, double d43, float f44, double d45, float f46, double d47, float f48, double d49, float f50, double d51, float f52, double d53, float f54, double d55, float f56, double d57, float f58, double d59, float f60, double d61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback084: aCallback084 w: f0 w: l1 w: l2 w: f3 w: l4 w: l5 w: f6 w: l7 w: l8 w: f9 w: l10 w: l11 w: f12 w: l13 w: l14 w: f15 w: l16 w: l17 w: f18 w: l19 w: l20 w: f21 w: l22 w: l23 w: f24 w: l25 w: l26 w: f27 w: l28 w: l29 w: f30 w: l31 w: l32 w: f33 w: l34 w: l35 w: f36 w: l37 w: l38 w: f39 w: l40 w: l41 w: f42 w: l43 w: l44 w: f45 w: l46 w: l47 w: f48 w: l49 w: l50 w: f51 w: l52 w: l53 w: f54 w: l55 w: l56 w: f57 w: l58 w: l59 w: f60 w: l61 w: l62 w: f63	&lt;C: float testCallback084(Callback084 aCallback084, float f0, long l1, long l2, float f3, long l4, long l5, float f6, long l7, long l8, float f9, long l10, long l11, float f12, long l13, long l14, float f15, long l16, long l17, float f18, long l19, long l20, float f21, long l22, long l23, float f24, long l25, long l26, float f27, long l28, long l29, float f30, long l31, long l32, float f33, long l34, long l35, float f36, long l37, long l38, float f39, long l40, long l41, float f42, long l43, long l44, float f45, long l46, long l47, float f48, long l49, long l50, float f51, long l52, long l53, float f54, long l55, long l56, float f57, long l58, long l59, float f60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback085: aCallback085 w: l0 w: f1 w: l2 w: l3 w: f4 w: l5 w: l6 w: f7 w: l8 w: l9 w: f10 w: l11 w: l12 w: f13 w: l14 w: l15 w: f16 w: l17 w: l18 w: f19 w: l20 w: l21 w: f22 w: l23 w: l24 w: f25 w: l26 w: l27 w: f28 w: l29 w: l30 w: f31 w: l32 w: l33 w: f34 w: l35 w: l36 w: f37 w: l38 w: l39 w: f40 w: l41 w: l42 w: f43 w: l44 w: l45 w: f46 w: l47 w: l48 w: f49 w: l50 w: l51 w: f52 w: l53 w: l54 w: f55 w: l56 w: l57 w: f58 w: l59 w: l60 w: f61 w: l62 w: l63	&lt;C: long testCallback085(Callback085 aCallback085, long l0, float f1, long l2, long l3, float f4, long l5, long l6, float f7, long l8, long l9, float f10, long l11, long l12, float f13, long l14, long l15, float f16, long l17, long l18, float f19, long l20, long l21, float f22, long l23, long l24, float f25, long l26, long l27, float f28, long l29, long l30, float f31, long l32, long l33, float f34, long l35, long l36, float f37, long l38, long l39, float f40, long l41, long l42, float f43, long l44, long l45, float f46, long l47, long l48, float f49, long l50, long l51, float f52, long l53, long l54, float f55, long l56, long l57, float f58, long l59, long l60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback086: aCallback086 w: f0 w: d1 w: l2 w: f3 w: d4 w: l5 w: f6 w: d7 w: l8 w: f9 w: d10 w: l11 w: f12 w: d13 w: l14 w: f15 w: d16 w: l17 w: f18 w: d19 w: l20 w: f21 w: d22 w: l23 w: f24 w: d25 w: l26 w: f27 w: d28 w: l29 w: f30 w: d31 w: l32 w: f33 w: d34 w: l35 w: f36 w: d37 w: l38 w: f39 w: d40 w: l41 w: f42 w: d43 w: l44 w: f45 w: d46 w: l47 w: f48 w: d49 w: l50 w: f51 w: d52 w: l53 w: f54 w: d55 w: l56 w: f57 w: d58 w: l59 w: f60 w: d61 w: l62 w: f63	&lt;C: float testCallback086(Callback086 aCallback086, float f0, double d1, long l2, float f3, double d4, long l5, float f6, double d7, long l8, float f9, double d10, long l11, float f12, double d13, long l14, float f15, double d16, long l17, float f18, double d19, long l20, float f21, double d22, long l23, float f24, double d25, long l26, float f27, double d28, long l29, float f30, double d31, long l32, float f33, double d34, long l35, float f36, double d37, long l38, float f39, double d40, long l41, float f42, double d43, long l44, float f45, double d46, long l47, float f48, double d49, long l50, float f51, double d52, long l53, float f54, double d55, long l56, float f57, double d58, long l59, float f60, double d61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback087: aCallback087 w: l0 w: f1 w: d2 w: l3 w: f4 w: d5 w: l6 w: f7 w: d8 w: l9 w: f10 w: d11 w: l12 w: f13 w: d14 w: l15 w: f16 w: d17 w: l18 w: f19 w: d20 w: l21 w: f22 w: d23 w: l24 w: f25 w: d26 w: l27 w: f28 w: d29 w: l30 w: f31 w: d32 w: l33 w: f34 w: d35 w: l36 w: f37 w: d38 w: l39 w: f40 w: d41 w: l42 w: f43 w: d44 w: l45 w: f46 w: d47 w: l48 w: f49 w: d50 w: l51 w: f52 w: d53 w: l54 w: f55 w: d56 w: l57 w: f58 w: d59 w: l60 w: f61 w: d62 w: l63	&lt;C: long testCallback087(Callback087 aCallback087, long l0, float f1, double d2, long l3, float f4, double d5, long l6, float f7, double d8, long l9, float f10, double d11, long l12, float f13, double d14, long l15, float f16, double d17, long l18, float f19, double d20, long l21, float f22, double d23, long l24, float f25, double d26, long l27, float f28, double d29, long l30, float f31, double d32, long l33, float f34, double d35, long l36, float f37, double d38, long l39, float f40, double d41, long l42, float f43, double d44, long l45, float f46, double d47, long l48, float f49, double d50, long l51, float f52, double d53, long l54, float f55, double d56, long l57, float f58, double d59, long l60, float f61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback088: aCallback088 w: d0 w: l1 w: f2 w: d3 w: l4 w: f5 w: d6 w: l7 w: f8 w: d9 w: l10 w: f11 w: d12 w: l13 w: f14 w: d15 w: l16 w: f17 w: d18 w: l19 w: f20 w: d21 w: l22 w: f23 w: d24 w: l25 w: f26 w: d27 w: l28 w: f29 w: d30 w: l31 w: f32 w: d33 w: l34 w: f35 w: d36 w: l37 w: f38 w: d39 w: l40 w: f41 w: d42 w: l43 w: f44 w: d45 w: l46 w: f47 w: d48 w: l49 w: f50 w: d51 w: l52 w: f53 w: d54 w: l55 w: f56 w: d57 w: l58 w: f59 w: d60 w: l61 w: f62 w: d63	&lt;C: double testCallback088(Callback088 aCallback088, double d0, long l1, float f2, double d3, long l4, float f5, double d6, long l7, float f8, double d9, long l10, float f11, double d12, long l13, float f14, double d15, long l16, float f17, double d18, long l19, float f20, double d21, long l22, float f23, double d24, long l25, float f26, double d27, long l28, float f29, double d30, long l31, float f32, double d33, long l34, float f35, double d36, long l37, float f38, double d39, long l40, float f41, double d42, long l43, float f44, double d45, long l46, float f47, double d48, long l49, float f50, double d51, long l52, float f53, double d54, long l55, float f56, double d57, long l58, float f59, double d60, long l61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback089: aCallback089 w: f0 w: f1 w: l2 w: l3 w: l4 w: l5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: l38 w: l39 w: l40 w: l41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: l62 w: l63	&lt;C: float testCallback089(Callback089 aCallback089, float f0, float f1, long l2, long l3, long l4, long l5, float f6, float f7, long l8, long l9, long l10, long l11, float f12, float f13, long l14, long l15, long l16, long l17, float f18, float f19, long l20, long l21, long l22, long l23, float f24, float f25, long l26, long l27, long l28, long l29, float f30, float f31, long l32, long l33, long l34, long l35, float f36, float f37, long l38, long l39, long l40, long l41, float f42, float f43, long l44, long l45, long l46, long l47, float f48, float f49, long l50, long l51, long l52, long l53, float f54, float f55, long l56, long l57, long l58, long l59, float f60, float f61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback090: aCallback090 w: l0 w: l1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: l22 w: l23 w: l24 w: l25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: l34 w: l35 w: l36 w: l37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: l58 w: l59 w: l60 w: l61 w: f62 w: f63	&lt;C: long testCallback090(Callback090 aCallback090, long l0, long l1, float f2, float f3, long l4, long l5, long l6, long l7, float f8, float f9, long l10, long l11, long l12, long l13, float f14, float f15, long l16, long l17, long l18, long l19, float f20, float f21, long l22, long l23, long l24, long l25, float f26, float f27, long l28, long l29, long l30, long l31, float f32, float f33, long l34, long l35, long l36, long l37, float f38, float f39, long l40, long l41, long l42, long l43, float f44, float f45, long l46, long l47, long l48, long l49, float f50, float f51, long l52, long l53, long l54, long l55, float f56, float f57, long l58, long l59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback091: aCallback091 w: f0 w: f1 w: d2 w: d3 w: l4 w: l5 w: f6 w: f7 w: d8 w: d9 w: l10 w: l11 w: f12 w: f13 w: d14 w: d15 w: l16 w: l17 w: f18 w: f19 w: d20 w: d21 w: l22 w: l23 w: f24 w: f25 w: d26 w: d27 w: l28 w: l29 w: f30 w: f31 w: d32 w: d33 w: l34 w: l35 w: f36 w: f37 w: d38 w: d39 w: l40 w: l41 w: f42 w: f43 w: d44 w: d45 w: l46 w: l47 w: f48 w: f49 w: d50 w: d51 w: l52 w: l53 w: f54 w: f55 w: d56 w: d57 w: l58 w: l59 w: f60 w: f61 w: d62 w: d63	&lt;C: float testCallback091(Callback091 aCallback091, float f0, float f1, double d2, double d3, long l4, long l5, float f6, float f7, double d8, double d9, long l10, long l11, float f12, float f13, double d14, double d15, long l16, long l17, float f18, float f19, double d20, double d21, long l22, long l23, float f24, float f25, double d26, double d27, long l28, long l29, float f30, float f31, double d32, double d33, long l34, long l35, float f36, float f37, double d38, double d39, long l40, long l41, float f42, float f43, double d44, double d45, long l46, long l47, float f48, float f49, double d50, double d51, long l52, long l53, float f54, float f55, double d56, double d57, long l58, long l59, float f60, float f61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback092: aCallback092 w: l0 w: l1 w: f2 w: f3 w: d4 w: d5 w: l6 w: l7 w: f8 w: f9 w: d10 w: d11 w: l12 w: l13 w: f14 w: f15 w: d16 w: d17 w: l18 w: l19 w: f20 w: f21 w: d22 w: d23 w: l24 w: l25 w: f26 w: f27 w: d28 w: d29 w: l30 w: l31 w: f32 w: f33 w: d34 w: d35 w: l36 w: l37 w: f38 w: f39 w: d40 w: d41 w: l42 w: l43 w: f44 w: f45 w: d46 w: d47 w: l48 w: l49 w: f50 w: f51 w: d52 w: d53 w: l54 w: l55 w: f56 w: f57 w: d58 w: d59 w: l60 w: l61 w: f62 w: f63	&lt;C: long testCallback092(Callback092 aCallback092, long l0, long l1, float f2, float f3, double d4, double d5, long l6, long l7, float f8, float f9, double d10, double d11, long l12, long l13, float f14, float f15, double d16, double d17, long l18, long l19, float f20, float f21, double d22, double d23, long l24, long l25, float f26, float f27, double d28, double d29, long l30, long l31, float f32, float f33, double d34, double d35, long l36, long l37, float f38, float f39, double d40, double d41, long l42, long l43, float f44, float f45, double d46, double d47, long l48, long l49, float f50, float f51, double d52, double d53, long l54, long l55, float f56, float f57, double d58, double d59, long l60, long l61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback093: aCallback093 w: d0 w: d1 w: l2 w: l3 w: f4 w: f5 w: d6 w: d7 w: l8 w: l9 w: f10 w: f11 w: d12 w: d13 w: l14 w: l15 w: f16 w: f17 w: d18 w: d19 w: l20 w: l21 w: f22 w: f23 w: d24 w: d25 w: l26 w: l27 w: f28 w: f29 w: d30 w: d31 w: l32 w: l33 w: f34 w: f35 w: d36 w: d37 w: l38 w: l39 w: f40 w: f41 w: d42 w: d43 w: l44 w: l45 w: f46 w: f47 w: d48 w: d49 w: l50 w: l51 w: f52 w: f53 w: d54 w: d55 w: l56 w: l57 w: f58 w: f59 w: d60 w: d61 w: l62 w: l63	&lt;C: double testCallback093(Callback093 aCallback093, double d0, double d1, long l2, long l3, float f4, float f5, double d6, double d7, long l8, long l9, float f10, float f11, double d12, double d13, long l14, long l15, float f16, float f17, double d18, double d19, long l20, long l21, float f22, float f23, double d24, double d25, long l26, long l27, float f28, float f29, double d30, double d31, long l32, long l33, float f34, float f35, double d36, double d37, long l38, long l39, float f40, float f41, double d42, double d43, long l44, long l45, float f46, float f47, double d48, double d49, long l50, long l51, float f52, float f53, double d54, double d55, long l56, long l57, float f58, float f59, double d60, double d61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback094: aCallback094 w: f0 w: f1 w: f2 w: l3 w: l4 w: l5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: l48 w: l49 w: l50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: f63	&lt;C: float testCallback094(Callback094 aCallback094, float f0, float f1, float f2, long l3, long l4, long l5, long l6, long l7, long l8, float f9, float f10, float f11, long l12, long l13, long l14, long l15, long l16, long l17, float f18, float f19, float f20, long l21, long l22, long l23, long l24, long l25, long l26, float f27, float f28, float f29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, long l48, long l49, long l50, long l51, long l52, long l53, float f54, float f55, float f56, long l57, long l58, long l59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback095: aCallback095 w: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: l15 w: l16 w: l17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: l60 w: l61 w: l62 w: l63	&lt;C: long testCallback095(Callback095 aCallback095, long l0, long l1, long l2, float f3, float f4, float f5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, long l15, long l16, long l17, long l18, long l19, long l20, float f21, float f22, float f23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, long l33, long l34, long l35, long l36, long l37, long l38, float f39, float f40, float f41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, long l51, long l52, long l53, long l54, long l55, long l56, float f57, float f58, float f59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback096: aCallback096 w: f0 w: f1 w: f2 w: d3 w: d4 w: d5 w: l6 w: l7 w: l8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: f18 w: f19 w: f20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: d39 w: d40 w: d41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: l51 w: l52 w: l53 w: f54 w: f55 w: f56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: f63	&lt;C: float testCallback096(Callback096 aCallback096, float f0, float f1, float f2, double d3, double d4, double d5, long l6, long l7, long l8, float f9, float f10, float f11, double d12, double d13, double d14, long l15, long l16, long l17, float f18, float f19, float f20, double d21, double d22, double d23, long l24, long l25, long l26, float f27, float f28, float f29, double d30, double d31, double d32, long l33, long l34, long l35, float f36, float f37, float f38, double d39, double d40, double d41, long l42, long l43, long l44, float f45, float f46, float f47, double d48, double d49, double d50, long l51, long l52, long l53, float f54, float f55, float f56, double d57, double d58, double d59, long l60, long l61, long l62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback097: aCallback097 w: l0 w: l1 w: l2 w: f3 w: f4 w: f5 w: d6 w: d7 w: d8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: l18 w: l19 w: l20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: f39 w: f40 w: f41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: d51 w: d52 w: d53 w: l54 w: l55 w: l56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: l63	&lt;C: long testCallback097(Callback097 aCallback097, long l0, long l1, long l2, float f3, float f4, float f5, double d6, double d7, double d8, long l9, long l10, long l11, float f12, float f13, float f14, double d15, double d16, double d17, long l18, long l19, long l20, float f21, float f22, float f23, double d24, double d25, double d26, long l27, long l28, long l29, float f30, float f31, float f32, double d33, double d34, double d35, long l36, long l37, long l38, float f39, float f40, float f41, double d42, double d43, double d44, long l45, long l46, long l47, float f48, float f49, float f50, double d51, double d52, double d53, long l54, long l55, long l56, float f57, float f58, float f59, double d60, double d61, double d62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback098: aCallback098 w: d0 w: d1 w: d2 w: l3 w: l4 w: l5 w: f6 w: f7 w: f8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: d18 w: d19 w: d20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: l39 w: l40 w: l41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: f51 w: f52 w: f53 w: d54 w: d55 w: d56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: d63	&lt;C: double testCallback098(Callback098 aCallback098, double d0, double d1, double d2, long l3, long l4, long l5, float f6, float f7, float f8, double d9, double d10, double d11, long l12, long l13, long l14, float f15, float f16, float f17, double d18, double d19, double d20, long l21, long l22, long l23, float f24, float f25, float f26, double d27, double d28, double d29, long l30, long l31, long l32, float f33, float f34, float f35, double d36, double d37, double d38, long l39, long l40, long l41, float f42, float f43, float f44, double d45, double d46, double d47, long l48, long l49, long l50, float f51, float f52, float f53, double d54, double d55, double d56, long l57, long l58, long l59, float f60, float f61, float f62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback099: aCallback099 w: f0 w: f1 w: f2 w: f3 w: l4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: l16 w: l17 w: l18 w: l19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float testCallback099(Callback099 aCallback099, float f0, float f1, float f2, float f3, long l4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, long l16, long l17, long l18, long l19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback100: aCallback100 w: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: l32 w: l33 w: l34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: long testCallback100(Callback100 aCallback100, long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, long l32, long l33, long l34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, long l44, long l45, long l46, long l47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback101: aCallback101 w: f0 w: f1 w: f2 w: f3 w: d4 w: d5 w: d6 w: d7 w: l8 w: l9 w: l10 w: l11 w: f12 w: f13 w: f14 w: f15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: f24 w: f25 w: f26 w: f27 w: d28 w: d29 w: d30 w: d31 w: l32 w: l33 w: l34 w: l35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: l44 w: l45 w: l46 w: l47 w: f48 w: f49 w: f50 w: f51 w: d52 w: d53 w: d54 w: d55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float testCallback101(Callback101 aCallback101, float f0, float f1, float f2, float f3, double d4, double d5, double d6, double d7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, double d28, double d29, double d30, double d31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, double d52, double d53, double d54, double d55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback102: aCallback102 w: l0 w: l1 w: l2 w: l3 w: f4 w: f5 w: f6 w: f7 w: d8 w: d9 w: d10 w: d11 w: l12 w: l13 w: l14 w: l15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: l24 w: l25 w: l26 w: l27 w: f28 w: f29 w: f30 w: f31 w: d32 w: d33 w: d34 w: d35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: d44 w: d45 w: d46 w: d47 w: l48 w: l49 w: l50 w: l51 w: f52 w: f53 w: f54 w: f55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: long testCallback102(Callback102 aCallback102, long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, double d8, double d9, double d10, double d11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, double d32, double d33, double d34, double d35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, double d44, double d45, double d46, double d47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback103: aCallback103 w: d0 w: d1 w: d2 w: d3 w: l4 w: l5 w: l6 w: l7 w: f8 w: f9 w: f10 w: f11 w: d12 w: d13 w: d14 w: d15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: d24 w: d25 w: d26 w: d27 w: l28 w: l29 w: l30 w: l31 w: f32 w: f33 w: f34 w: f35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: f44 w: f45 w: f46 w: f47 w: d48 w: d49 w: d50 w: d51 w: l52 w: l53 w: l54 w: l55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: double testCallback103(Callback103 aCallback103, double d0, double d1, double d2, double d3, long l4, long l5, long l6, long l7, float f8, float f9, float f10, float f11, double d12, double d13, double d14, double d15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, double d24, double d25, double d26, double d27, long l28, long l29, long l30, long l31, float f32, float f33, float f34, float f35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, float f44, float f45, float f46, float f47, double d48, double d49, double d50, double d51, long l52, long l53, long l54, long l55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback104: aCallback104 w: f0 w: f1 w: f2 w: f3 w: f4 w: l5 w: l6 w: l7 w: l8 w: l9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: l20 w: l21 w: l22 w: l23 w: l24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: l35 w: l36 w: l37 w: l38 w: l39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: l50 w: l51 w: l52 w: l53 w: l54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float testCallback104(Callback104 aCallback104, float f0, float f1, float f2, float f3, float f4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, long l35, long l36, long l37, long l38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, long l50, long l51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback105: aCallback105 w: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: l10 w: l11 w: l12 w: l13 w: l14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: l25 w: l26 w: l27 w: l28 w: l29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: l40 w: l41 w: l42 w: l43 w: l44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: l55 w: l56 w: l57 w: l58 w: l59 w: l60 w: l61 w: l62 w: l63	&lt;C: long testCallback105(Callback105 aCallback105, long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, long l10, long l11, long l12, long l13, long l14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, long l25, long l26, long l27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, long l55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback106: aCallback106 w: f0 w: f1 w: f2 w: f3 w: f4 w: d5 w: d6 w: d7 w: d8 w: d9 w: l10 w: l11 w: l12 w: l13 w: l14 w: f15 w: f16 w: f17 w: f18 w: f19 w: d20 w: d21 w: d22 w: d23 w: d24 w: l25 w: l26 w: l27 w: l28 w: l29 w: f30 w: f31 w: f32 w: f33 w: f34 w: d35 w: d36 w: d37 w: d38 w: d39 w: l40 w: l41 w: l42 w: l43 w: l44 w: f45 w: f46 w: f47 w: f48 w: f49 w: d50 w: d51 w: d52 w: d53 w: d54 w: l55 w: l56 w: l57 w: l58 w: l59 w: f60 w: f61 w: f62 w: f63	&lt;C: float testCallback106(Callback106 aCallback106, float f0, float f1, float f2, float f3, float f4, double d5, double d6, double d7, double d8, double d9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, double d24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, double d35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, double d50, double d51, double d52, double d53, double d54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback107: aCallback107 w: l0 w: l1 w: l2 w: l3 w: l4 w: f5 w: f6 w: f7 w: f8 w: f9 w: d10 w: d11 w: d12 w: d13 w: d14 w: l15 w: l16 w: l17 w: l18 w: l19 w: f20 w: f21 w: f22 w: f23 w: f24 w: d25 w: d26 w: d27 w: d28 w: d29 w: l30 w: l31 w: l32 w: l33 w: l34 w: f35 w: f36 w: f37 w: f38 w: f39 w: d40 w: d41 w: d42 w: d43 w: d44 w: l45 w: l46 w: l47 w: l48 w: l49 w: f50 w: f51 w: f52 w: f53 w: f54 w: d55 w: d56 w: d57 w: d58 w: d59 w: l60 w: l61 w: l62 w: l63	&lt;C: long testCallback107(Callback107 aCallback107, long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, double d10, double d11, double d12, double d13, double d14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, double d25, double d26, double d27, double d28, double d29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, double d44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, double d55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DLLCC Test Suite">testCallback108: aCallback108 w: d0 w: d1 w: d2 w: d3 w: d4 w: l5 w: l6 w: l7 w: l8 w: l9 w: f10 w: f11 w: f12 w: f13 w: f14 w: d15 w: d16 w: d17 w: d18 w: d19 w: l20 w: l21 w: l22 w: l23 w: l24 w: f25 w: f26 w: f27 w: f28 w: f29 w: d30 w: d31 w: d32 w: d33 w: d34 w: l35 w: l36 w: l37 w: l38 w: l39 w: f40 w: f41 w: f42 w: f43 w: f44 w: d45 w: d46 w: d47 w: d48 w: d49 w: l50 w: l51 w: l52 w: l53 w: l54 w: f55 w: f56 w: f57 w: f58 w: f59 w: d60 w: d61 w: d62 w: d63	&lt;C: double testCallback108(Callback108 aCallback108, double d0, double d1, double d2, double d3, double d4, long l5, long l6, long l7, long l8, long l9, float f10, float f11, float f12, float f13, float f14, double d15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, long l24, float f25, float f26, float f27, float f28, float f29, double d30, double d31, double d32, double d33, double d34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, float f44, double d45, double d46, double d47, double d48, double d49, long l50, long l51, long l52, long l53, long l54, float f55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>External.DLLANDCTest</class-id> <category>individual tests</category><body package="DLLCC Test Suite">runOEPerformance	"DLLANDCTest new runOEPerformance"	&lt;test&gt;	| ba a time1 time2 rpt limit |	ba := ByteArray new: 2000 withAll: 99.	a := Array new: 2000 withAll: 100.	time1 := time2 := 0.	rpt := 0.	limit := 5000000. "5 seconds"	[time1 + time2 &lt; limit] whileTrue:		[time1 := time1 + (Time microsecondsToRun: [self interface oeTstExternalSumByteArray: self with: ba]).		time2 := time2 + (Time microsecondsToRun: [self interface oeTstExternalZeroArray: self with: a]).		rpt := rpt + 1].	Transcript cr; print: (time1 / rpt roundTo: 0.1); nextPutAll: ' ms for summing a '.	Transcript print: ba size; nextPutAll: '-element ByteArray.'.	Transcript cr; print: (time2 / rpt roundTo: 0.1); nextPutAll: ' ms for zeroing a '.	Transcript print: a size; nextPutAll: '-element Array.'.	Transcript endEntry</body><body package="DLLCC Test Suite">runUPPerformance	"DLLANDCTest new runUPPerformance"	&lt;test&gt;	| ba a time1 time2 rpt |	rpt := 25.	ba := ByteArray new: 2000 withAll: 99.	a := Array new: 2000 withAll: 100.	time1 := time2 := 0.	rpt timesRepeat: [		time1 := time1 + (Time millisecondsToRun: [self interface TstExternalSumByteArray: self with: ba])].	rpt timesRepeat: [		time2 := time2 + (Time millisecondsToRun: [self interface TstExternalZeroArray: self with: a])].	Transcript cr; print: (time1 / rpt roundTo: 0.1); nextPutAll: ' ms for summing a '.	Transcript print: ba size; nextPutAll: '-element ByteArray.'.	Transcript cr; print: (time2 / rpt roundTo: 0.1); nextPutAll: ' ms for zeroing a '.	Transcript print: a size; nextPutAll: '-element Array.'.	Transcript endEntry</body><body package="DLLCC Test Suite">runtstOECSendMessage0	"self new runtstOECSendMessage0"	&lt;test&gt;	(self interface oeTstSendcBack0: 'Hello world!' with: 'size') = 12		ifFalse: [self message: 'runtstOECSendMessage0 failed']</body><body package="DLLCC Test Suite">runtstOECSendMessage1	"self new runtstOECSendMessage1"	&lt;test&gt;	(self interface oeTstSendcBack1: 'Hello ' with: ',' with: 'world!') = 'Hello world!'		ifFalse: [self message: 'tstOECSendMessage1 failed']</body><body package="DLLCC Test Suite">runtstOECSendMessage2	"self new runtstOECSendMessage2"	&lt;test&gt;	(self interface oeTstSendcBack2: Array with: 'with:with:' with: 1 with: 2) = #(1 2)		ifFalse: [self message: 'tstOECSendMessage2 failed']</body><body package="DLLCC Test Suite">runtstOECSendMessage3	"self new runtstOECSendMessage3"	&lt;test&gt;	(self interface oeTstSendcBack3: Array with: 'with:with:with:' with: 1 with: 2 with: 3) = #(1 2 3)		ifFalse: [self message: 'tstOECSendMessage3 failed']</body><body package="DLLCC Test Suite">runtstOECSendMessageMany	&lt;test&gt;	| aCollection |	aCollection :=		self interface			oeTstSendcBackMany: OrderedCollection			with: 'with:with:'			with: 'Hello'			with: 'World'.	((aCollection at: 1) = 'Hello' and: [(aCollection at: 2) = 'World'])		ifFalse: [self error: 'runtstOECSendMessageMany failed.']</body><body package="DLLCC Test Suite">runtstOECtoSTbool	&lt;test&gt;	| result |	result := self interface oeTstExternalCtoOEbool: self.	result ifFalse: [self message: 'runtstOECtoSTbool failed']</body><body package="DLLCC Test Suite">runtstOECtoSTchar	&lt;test&gt;	| result |	result := self interface oeTstExternalCtoOEchar: self.	result == $c ifFalse: [self message: 'tstOECtoSTchar  failed']</body><body package="DLLCC Test Suite">runtstOECtoSTdouble	&lt;test&gt;	| result |	result := self interface oeTstExternalCtoOEdouble: self.	(result class = 3.14d class and: [result = 3.14d]) ifFalse:		[self message: 'runtstOECtoSTdouble failed']</body><body package="DLLCC Test Suite">runtstOECtoSTfloat	&lt;test&gt;	| result |	result := self interface oeTstExternalCtoOEfloat: self.	result = 3.14 ifFalse: [self message: 'runtstOECtoSTfloat  failed']</body><body package="DLLCC Test Suite">runtstOECtoSTint	&lt;test&gt;	| result |	result := self interface oeTstExternalCtoOEint: self.	result == 42 ifFalse: [self message: 'runtstOECtoSTint  failed']</body><body package="DLLCC Test Suite">runtstOESTtoCbool	&lt;test&gt;	| result |	result := self interface oeTstExternalOEtoCbool: self with: true.	result ifFalse: [self message: 'runtstOESTtoCbool 1 failed'].	result := self interface oeTstExternalOEtoCbool: self with: false.	result ifTrue: [self message: 'runtstOESTtoCbool 2 failed']</body><body package="DLLCC Test Suite">runtstOESTtoCchar	&lt;test&gt;	| result |	result := self interface oeTstExternalOEtoCchar: self with: $h.	result == $h ifFalse: [self message: 'runtstOESTtoCchar: aChar failed']</body><body package="DLLCC Test Suite">runtstOESTtoCdouble	&lt;test&gt;	| result |	result := self interface oeTstExternalOEtoCdouble: self with: 99.0d.	(result class = 99.0d class and: [result = 99.0d]) ifFalse:		[self message: 'runtstOESTtoCdouble failed']</body><body package="DLLCC Test Suite">runtstOESTtoCfloat	&lt;test&gt;	| result |	result := self interface oeTstExternalOEtoCfloat: self with: 3.14.	result = 3.14 ifFalse: [self message: 'runtstOESTtoCfloat: aFloat failed']</body><body package="DLLCC Test Suite">runtstOESTtoCint	"Note that all call outs must succeed"	&lt;test&gt;	| specialValues |	specialValues := OrderedCollection new		addAll: (-128 to: 128);		addAll: (SmallInteger minVal to: SmallInteger maxVal by: SmallInteger maxVal // 512);		add: SmallInteger maxVal;		yourself.	specialValues do:		[:expectedResult |			| actualResult |			actualResult := self interface oeTstExternalOEtoCint: self with: expectedResult.			actualResult == expectedResult ifFalse: [self message: 'runtstOESTtoCint: aInt failed']		]</body><body package="DLLCC Test Suite">runtstOESendMessage0	"self new runtstOESendMessage0"	&lt;test&gt;	(self interface oeTstSendBack0: 'Hello world!' with: #size) = 12		ifFalse: [self message: 'runtstOESendMessage0 failed']</body><body package="DLLCC Test Suite">runtstOESendMessage0IfFailNoReturn	"self new runtstOESendMessage0IfFailNoReturn"	&lt;test&gt;	Object errorSignal		handle: [:ex | ^self]		do: [self interface oeTstSendBack0IfFailNoReturn: 'Hello world!' with: #bogus].		self message: 'runtstOESendMessage0IfFailNoReturn failed'</body><body package="DLLCC Test Suite">runtstOESendMessage0IfFailReturnFalse	"self new runtstOESendMessage0IfFailReturnFalse"		&lt;test&gt;	(Object messageNotUnderstoodSignal		handle: [:ex | ex return]		do: [self interface oeTstSendBack0IfFailReturnFalse: 'Hello world!' with: #bogus]) == false			ifFalse: [self message: 'runtstOESendMessage0IfFailReturnFalse failed']</body><body package="DLLCC Test Suite">runtstOESendMessage0ReturnKeptReceiver	"self new runtstOESendMessage0ReturnKeptReceiver"		&lt;test&gt;	(self interface oeTstSendBack0ReturnKeptReceiver: ObjectMemory with: #garbageCollect) == ObjectMemory		ifFalse: [self message: 'runtstOESendMessage0ReturnKeptReceiver failed']</body><body package="DLLCC Test Suite">runtstOESendMessage1	"self new runtstOESendMessage1"	&lt;test&gt;	(self interface oeTstSendBack1: 'Hello ' with: #, with: 'world!') = 'Hello world!'		ifFalse: [self message: 'runtstOESendMessage1 failed']</body><body package="DLLCC Test Suite">runtstOESendMessage2	"self new runtstOESendMessage2"	&lt;test&gt;	(self interface oeTstSendBack2: Array with: #with:with: with: 1 with: 2) = #(1 2)		ifFalse: [self message: 'runtstOESendMessage2 failed']</body><body package="DLLCC Test Suite">runtstOESendMessage3	"self new runtstOESendMessage3"	&lt;test&gt;	(self interface oeTstSendBack3: Array with: #with:with:with: with: 1 with: 2 with: 3) = #(1 2 3)		ifFalse: [self message: 'runtstOESendMessage3 failed']</body><body package="DLLCC Test Suite">runtstOESendMessageMany	"self new runtstOESendMessageMany"	&lt;test&gt;	(self interface oeTstSendBackMany: 'Hello ' with: #, with: #('world!')) = 'Hello world!'		ifFalse: [self message: 'runtstOESendMessageMany failed']</body><body package="DLLCC Test Suite">runtstOEallocFs	&lt;test&gt;	| result |	result := self interface oeTstExternalAllocFs: self with: Point.	(result class == Point)		ifFalse: [self message: 'runtstOEallocFs failed']</body><body package="DLLCC Test Suite">runtstOEallocVs	&lt;test&gt;	| result |	result := self interface oeTstExternalAllocVs: self with: Array with: 10.	(result class == Array and: [result size = 10])		ifFalse: [self message: 'runtstOEallocVs failed']</body><body package="DLLCC Test Suite">runtstOEbasicAt	&lt;test&gt;	| result |	result := self interface oeTstExternalBasicAt: self with: #(1 20 3 ) with: 2.	result == 20 ifFalse: [self message: 'runtstOEbasicAt: anArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstOEbasicAtPut	&lt;test&gt;	| result anArray |	anArray := Array with: #foo with: #bar with: #who.	result := self interface				oeTstExternalBasicAtPut: self with: anArray				with: 2				with: #who.	(result = #bar and: [anArray = #(foo who who )])		ifFalse: [self message: 'runtstOEbasicAtPut: anArray with: anIndex with: toBePut failed']</body><body package="DLLCC Test Suite">runtstOEbyteAt	&lt;test&gt;	| result aByteArray |	aByteArray := ByteArray new: 3.	aByteArray at: 1 put: 8.	aByteArray at: 2 put: 16.	aByteArray at: 3 put: 24.	result := self interface oeTstExternalByteAt: self with: aByteArray with: 2.	result == 16 ifFalse: [self message: 'runtstOEbyteAt: aByteArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstOEbyteAtPut	&lt;test&gt;	| result aByteArray |	aByteArray := ByteArray new: 3.	aByteArray at: 1 put: 8.	aByteArray at: 2 put: 16.	aByteArray at: 3 put: 24.	result := self interface				oeTstExternalByteAtPut: self with: aByteArray				with: 2				with: 20.	(result = 16 and: [(aByteArray at: 1)			== 8 and: [(aByteArray at: 2)				== 20 and: [(aByteArray at: 3)					== 24]]])		ifFalse: [self message: 'runtstOEbyteAt: aByteArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstOEclass	&lt;test&gt;	| result |	result := self interface oeTstExternalClass: self with: 0@0.	(result == Point)		ifFalse: [self message: 'runtstOEclass failed']</body><body package="DLLCC Test Suite">runtstOEclassType	&lt;test&gt;	| result1 result2 result3 |	result1 := self interface oeTstExternalClassType: self with: 1.	(result1 = 0)		ifFalse: [self message: 'runtstOEclassType 1 failed'].	result2 := self interface oeTstExternalClassType: self with: Object.	(result2 = 1)		ifFalse: [self message: 'runtstOEclassType 2 failed'].	result3 := self interface oeTstExternalClassType: self with: Array.	(result3 = 2)		ifFalse: [self message: 'runtstOEclassType 3 failed']</body><body package="DLLCC Test Suite">runtstOEcopyCtoSTIntArray	"Test new runtstOEcopyCtoSTIntArray"	&lt;test&gt;	| result anArray |	anArray := #(2 2 2 2 2 2 ) copy.	result := self interface oeTstExternalCopyCtoOEintArray: self with: anArray with: 3 with: 4.	(result = 3 and: [anArray = #(2 2 2 1 2 3 )])		 ifFalse: [self message: 'runtstOEcopyCtoSTIntArray 1 failed'].	anArray := #(2 2 2 2 2 2 ) copy.	result := self interface oeTstExternalCopyCtoOEintArray: self with: anArray with: 3 with: 1.	(result = 3 and: [anArray = #(1 2 3 2 2 2)])		 ifFalse: [self message: 'runtstOEcopyCtoSTIntArray 2 failed'].	anArray := #(2 2 2 2 2 2 ) copy.	result := self interface oeTstExternalCopyCtoOEintArray: self with: anArray with: 1 with: 6.	(result = 1 and: [anArray = #(2 2 2 2 2 1)])		 ifFalse: [self message: 'runtstOEcopyCtoSTIntArray 3 failed'].</body><body package="DLLCC Test Suite">runtstOEcopyCtoSTfloatArray	"Test new runtstOEcopyCtoSTfloatArray"	&lt;test&gt;	| result anArray |	anArray := #(2.0 2.0 2.0 2.0 2.0 2.0 ) copy.	result := self interface				oeTstExternalCopyCtoOEfloatArray: self with: anArray				with: 3				with: 4.	(result = 3 and: [anArray = #(2.0 2.0 2.0 -1.0 2.0 -3.0 )])		ifFalse: [self message: 'runtstOEcopyCtoOEfloatArray 1 failed'].	anArray := #(2.0 2.0 2.0 2.0 2.0 2.0 ) copy.	result := self interface				oeTstExternalCopyCtoOEfloatArray: self with: anArray				with: 3				with: 1.	(result = 3 and: [anArray = #(-1.0 2.0 -3.0 2.0 2.0 2.0 )])		ifFalse: [self message: 'runtstOEcopyCtoSTfloatArray 2 failed'].	anArray := #(2.0 2.0 2.0 2.0 2.0 2.0 ) copy.	result := self interface				oeTstExternalCopyCtoOEfloatArray: self with: anArray				with: 1				with: 6.	(result = 1 and: [anArray = #(2.0 2.0 2.0 2.0 2.0 -1.0 )])		ifFalse: [self message: 'runtstOEcopyCtoSTfloatArray 3 failed']</body><body package="DLLCC Test Suite">runtstOEcopyCtoSTstring	&lt;test&gt;	| result anArray |	anArray := 'bbbbbb' copy.	result := self interface oeTstExternalCopyCtoOEstring: self with: anArray with: 3 with: 4.	(result = 3 and: [anArray = 'bbbabc'])		 ifFalse: [self message: 'runtstOEcopyCtoSTstring 1 failed'].	anArray := 'bbbbbb' copy.	result := self interface oeTstExternalCopyCtoOEstring: self with: anArray with: 3 with: 1.	(result = 3 and: [anArray = 'abcbbb'])		 ifFalse: [self message: 'runtstOEcopyCtoSTstring 2 failed'].	anArray := 'bbbbbb' copy.	result := self interface oeTstExternalCopyCtoOEstring: self with: anArray with: 1 with: 6.	(result = 1 and: [anArray = 'bbbbba'])		 ifFalse: [self message: 'runtstOEcopyCtoSTstring 3 failed']</body><body package="DLLCC Test Suite">runtstOEcopySTtoCbytes	&lt;test&gt;	| result proto |	proto := ByteArray with: 1 with: 2 with: 3.	result := self interface oeTstExternalCopyOEtoCbytes: self with: proto with: 3 with: 4.	result = #[2 2 2 1 2 3]		 ifFalse: [self message: 'runtstOEcopySTtoCbytes 1 failed'].	result := self interface oeTstExternalCopyOEtoCbytes: self with: proto with: 3 with: 1.	result = #[1 2 3 2 2 2]		 ifFalse: [self message: 'runtstOEcopySTtoCbytes 2 failed'].	result := self interface oeTstExternalCopyOEtoCbytes: self with: proto with: 1 with: 6.	result = #[2 2 2 2 2 1]		 ifFalse: [self message: 'runtstOEcopySTtoCbytes 3 failed']</body><body package="DLLCC Test Suite">runtstOEcopySTtoCfloatArray	"Test new runtstOEcopySTtoCfloatArray"	&lt;test&gt;	| result proto |	proto := Array with: 1.0 with: 2.0 with: 3.0.	result := self interface oeTstExternalCopyOEtoCfloatArray: self with: proto with: 3 with: 4.	result asArray = #(2.0 2.0 2.0 1.0 2.0 3.0 )		 ifFalse: [self message: 'runtstOEcopySTtoCfloatArray 1 failed'].	result := self interface oeTstExternalCopyOEtoCfloatArray: self with: proto with: 3 with: 1.	result asArray = #(1.0 2.0 3.0 2.0 2.0 2.0 )		 ifFalse: [self message: 'runtstOEcopySTtoCfloatArray 2 failed'].	result := self interface oeTstExternalCopyOEtoCfloatArray: self with: proto with: 1 with: 6.	result asArray = #(2.0 2.0 2.0 2.0 2.0 1.0 )		 ifFalse: [self message: 'runtstOEcopySTtoCfloatArray 3 failed']</body><body package="DLLCC Test Suite">runtstOEcopySTtoCintArray	&lt;test&gt;	| result proto |	proto := Array with: 1 with: 2 with: 3.	result := self interface oeTstExternalCopyOEtoCintArray: self with: proto with: 3 with: 4.	result asArray = #(2 2 2 1 2 3 )		 ifFalse: [self message: 'runtstOEcopySTtoCintArray 1 failed'].	result := self interface oeTstExternalCopyOEtoCintArray: self with: proto with: 3 with: 1.	result asArray = #(1 2 3 2 2 2 )		 ifFalse: [self message: 'runtstOEcopySTtoCintArray 2 failed'].	result := self interface oeTstExternalCopyOEtoCintArray: self with: proto with: 1 with: 6.	result asArray = #(2 2 2 2 2 1 )		 ifFalse: [self message: 'runtstOEcopySTtoCintArray 3 failed']</body><body package="DLLCC Test Suite">runtstOEcopySTtoCstring	&lt;test&gt;	| result | 	result := self interface oeTstExternalCopyOEtoCstring: self with: 'abc' with: 3 with: 4.	result = 'bbbabc'		 ifFalse: [self message: 'runtstOEcopySTtoCstring 1 failed'].	result := self interface oeTstExternalCopyOEtoCstring: self with: 'abc' with: 3 with: 1.	result = 'abcbbb'		 ifFalse: [self message: 'runtstOEcopySTtoCstring 2 failed'].	result := self interface oeTstExternalCopyOEtoCstring: self with: 'abc' with: 1 with: 6.	result = 'bbbbba'		 ifFalse: [self message: 'runtstOEcopySTtoCstring 3 failed']</body><body package="DLLCC Test Suite">runtstOEdoubleAt	&lt;test&gt;	| anArray |	anArray := #(1.234d 2.345d 3.1415d).	(self interface oeTstExternalDoubleAt: anArray with: 3) = 3.1415d		ifFalse: [self message: 'runtstOEisInteger: aInteger failed']</body><body package="DLLCC Test Suite">runtstOEfloatAt	&lt;test&gt;	| result |	result := self interface oeTstExternalFloatAt: self with: #(1.0 2.0 3.0 ) with: 3.	result = 3.0		 ifFalse: [self message: 'runtstOEfloatAt: anArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstOEfloatAtPut	&lt;test&gt;	| result aFloatArray |	aFloatArray := Array with: 8.0 with: 16.0 with: 24.0 .	result := self interface oeTstExternalFloatAtPut: self with: aFloatArray with: 2 with: 20.0 .	(result = 16.0		 and: [(aFloatArray at: 1) = 8.0		 and: [(aFloatArray at: 2) = 20.0		 and: [(aFloatArray at: 3) = 24.0]]])			ifFalse: [self message: 'runtstOEfloatAtPut: aFloatArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstOEindexVarSize	&lt;test&gt;	| result |	result := self interface oeTstExternalIndexVarSize: self with: self.	result == self size		 ifFalse: [self message: 'runtstOEindexVarSize: anyObjectWithIndexVars failed 0'].	result := self interface oeTstExternalIndexVarSize: self with: #(enie meenie meenie moe ).	result == 4		 ifFalse: [self message: 'runtstOEindexVarSize: anyObjectWithIndexVars failed 1'].	result := self interface oeTstExternalIndexVarSize: self with: (Array new: 5000).	result == 5000		 ifFalse: [self message: 'runtstOEindexVarSize: anyObjectWithIndexVars failed 2']</body><body package="DLLCC Test Suite">runtstOEinstVarAt	&lt;test&gt;	| result anAssoc |	anAssoc := Association key: #foo value: #bar.	result := self interface oeTstExternalInstVarAt: self with: anAssoc with: 1.	result == #foo		 ifFalse: [self message: 'runtstOEinstVarAt: anArray with: anIndex 1 failed'].	result := self interface oeTstExternalInstVarAt: self with: anAssoc with: 2.	result == #bar		 ifFalse: [self message: 'runtstOEinstVarAt: anArray with: anIndex 2 failed']</body><body package="DLLCC Test Suite">runtstOEinstVarAtPut	&lt;test&gt;	| result anAssoc |	anAssoc := Association key: #foo value: #bar.	result := self interface oeTstExternalInstVarAtPut: self with: anAssoc with: 2 with: #foo.	(result == #bar		 and: [anAssoc key == #foo		 and: [anAssoc value == #foo]])			ifFalse: [self message: 'runtstOEinstVarAtPut: anArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstOEinstVarSize	&lt;test&gt;	| result |	result := self interface oeTstExternalInstVarSize: self with: self.	result == self class instSize		 ifFalse: [self message: 'runtstOEinstVarSize: anyObjectWithInstVars 1 failed'].	result := self interface oeTstExternalInstVarSize: self with: (Array new: 3).	result == 0		 ifFalse: [self message: 'runtstOEinstVarSize: anyObjectWithInstVars 2 failed'].	result := self interface oeTstExternalInstVarSize: self with: Association new.	result == 2		 ifFalse: [self message: 'runtstOEinstVarSize: anyObjectWithInstVars 3 failed']</body><body package="DLLCC Test Suite">runtstOEintegerAt	&lt;test&gt;	| result |	result := self interface oeTstExternalIntegerAt: self with: #(1 2 3) with: 3.	result = 3		 ifFalse: [self message: 'runtstOEintegerAt failed']</body><body package="DLLCC Test Suite">runtstOEintegerAtPut	&lt;test&gt;	| result anArray |	anArray := Array new: 3.	result := self interface oeTstExternalIntegerAtPut: self with: anArray with: 2 with: 8.	(result = nil and: [anArray = (Array with: nil with: 8 with: nil)])		 ifFalse: [self message: 'runtstOEintegerAtPut: anArray with: anIndex with: toBePut failed']</body><body package="DLLCC Test Suite">runtstOEisArrayOfFloat	&lt;test&gt;	| result |	result := self interface oeTstExternalIsArrayOfFloat: self with: (Array with: 1.0 with: 2.0 with: 3.0).	result		 ifFalse: [self message: 'runtstOEisArrayOfFloat: anArrayOfFloat failed 1'].	result := self interface oeTstExternalIsArrayOfFloat: self with:  (Array with: 1  with: 2  with: 3).	result		 ifTrue: [self message: 'runtstOEisArrayOfFloat: anArrayOfFloat failed 2'].	result := self interface oeTstExternalIsArrayOfFloat: self with: (Array with: 1.0 with: 2.0 with: 3).	result		 ifTrue: [self message: 'runtstOEisArrayOfFloat: anArrayOfFloat failed 3']</body><body package="DLLCC Test Suite">runtstOEisArrayOfInteger	&lt;test&gt;	| result |	result := self interface oeTstExternalIsArrayOfInteger: self with: #(1 2 3 4 5 ).	result		 ifFalse: [self message: 'runtstOEisArrayOfInteger: anArrayOfInteger 1 failed'].	result := self interface oeTstExternalIsArrayOfInteger: self with: #(1 f2 f3 f4 f5 ).	result		 ifTrue: [self message: 'runtstOEisArrayOfInteger: anArrayOfInteger 2 failed']</body><body package="DLLCC Test Suite">runtstOEisBoolean	&lt;test&gt;	| result |	result := self interface oeTstExternalIsBoolean: self with: true.	result		 ifFalse: [self message: 'runtstOEisBoolean: aBoolean failed 1'].	result := self interface oeTstExternalIsBoolean: self with: false.	result		 ifFalse: [self message: 'runtstOEisBoolean: aBoolean failed 2'].	result := self interface oeTstExternalIsBoolean: self with: 7.	result		 ifTrue: [self message: 'runtstOEisBoolean: aBoolean failed 3']</body><body package="DLLCC Test Suite">runtstOEisByteArray	&lt;test&gt;	| result |	result := self interface oeTstExternalIsByteArray: self with:		 (ByteArray with: 2 with: 3).	result ifFalse: [self message: 'runtstOEisByteArray: aByteArray failed']</body><body package="DLLCC Test Suite">runtstOEisByteLike	&lt;test&gt;	| result |	result := self interface oeTstExternalIsByteLike: self with: (ByteArray new: 2).	result ifFalse: [self message: 'runtstOEisByteLike 1 failed'].	result := self interface oeTstExternalIsByteLike: self with: (UninterpretedBytes new: 2).	result ifFalse: [self message: 'runtstOEisByteLike 2 failed'].	result := self interface oeTstExternalIsByteLike: self with: (Array new: 2).	result ifTrue: [self message: 'runtstOEisByteLike 3 failed']</body><body package="DLLCC Test Suite">runtstOEisCharacter	&lt;test&gt;	| result |	result := self interface oeTstExternalIsCharacter: self with: $h.	result ifFalse: [self message: 'runtstOEisCharacter: aCharacter failed']</body><body package="DLLCC Test Suite">runtstOEisDouble	&lt;test&gt;	| result1 result2 |	result1 := self interface oeTstExternalIsDouble: self with: 0.0 asDouble.	(result1) ifFalse: [self message: 'runtstOEisDouble 1 failed'].	result2 := self interface oeTstExternalIsDouble: self with: 0.0.	(result2) ifTrue: [self message: 'runtstOEisDouble 2 failed']</body><body package="DLLCC Test Suite">runtstOEisFloat	&lt;test&gt;	| result |	result := self interface oeTstExternalIsFloat: self with: 3.14.	result		 ifFalse: [self message: 'runtstOEisFloat: aFloat failed 1'].	result := self interface oeTstExternalIsFloat: self with: 3.	result		 ifTrue: [self message: 'runtstOEisFloat: aFloat failed 2']</body><body package="DLLCC Test Suite">runtstOEisImmediate	&lt;test&gt;	| result |	result := self interface oeTstExternalIsImmediate: self with: 1.	result		 ifFalse: [self message: 'runtstOEisImmediate failed 1'].	result := self interface oeTstExternalIsImmediate: self with: $a.	result		 ifFalse: [self message: 'runtstOEisImmediate failed 2'].	result := self interface oeTstExternalIsImmediate: self with: Object new.	result		 ifTrue: [self message: 'runtstOEisImmediate failed 3']</body><body package="DLLCC Test Suite">runtstOEisInteger	&lt;test&gt;	| result |	result := self interface oeTstExternalIsInteger: self with: 2.	result ifFalse: [self message: 'runtstOEisInteger: aInteger failed']</body><body package="DLLCC Test Suite">runtstOEisKindOf	&lt;test&gt;	| result |	result := self interface oeTstExternalIsKindOf: self with: 0@0 with: Point.	(result) ifFalse: [self message: 'runtstOEisKindOf failed']</body><body package="DLLCC Test Suite">runtstOEisString	&lt;test&gt;	| result |	result := self interface oeTstExternalIsString: self with: 'aString'.	result ifFalse: [self message: 'runtstOEisString: aString failed']</body><body package="DLLCC Test Suite">runtstOEnestedReturn	&lt;test&gt;	| aCollection |	aCollection := OrderedCollection new.	(self interface oeTstExternalNestedReturn: self with: aCollection) == aCollection		ifFalse: [self error: 'runtstOEnestedReturn failed.']</body><body package="DLLCC Test Suite">runtstOEnil	&lt;test&gt;	| result |	result := self interface oeTstExternalNil: self.	result == nil ifFalse: [self message: 'runtstOEnil  failed']</body><body package="DLLCC Test Suite">runtstOEpostInt	&lt;test&gt;	| sem |	sem := Semaphore new.	self interface oeTstExternalPostInt: self with: sem.	Processor yield.	"let break-out occur"	(sem instVarAt: 3) = 1		ifFalse: [self message: 'runtstOEpostInt failed']</body><body package="DLLCC Test Suite">runtstOEregHandleAt	&lt;test&gt;	| result |	result := self interface oeTstExternalRegHandleAt: self with: 1.	result ifFalse: [self message: 'runtstOEregHandleAt failed']</body><body package="DLLCC Test Suite">runtstOEregHandleAtPut	&lt;test&gt;	| result slot thing |	thing := Object new.	slot := self interface oeTstExternalAllocRegSlot: self.	slot &lt; 30 ifTrue: [self message: 'runtstOEallocRegSlot failed'].	result := self interface oeTstExternalRegHandleAtPut: self with: slot with: thing.	(result == thing)		ifFalse: [self message: 'runtstOEregHandleAt failed']</body><body package="DLLCC Test Suite">runtstOEreturnFalse	&lt;test&gt;	| result |	result := self interface oeTstExternalReturnFalse: self.	result ifTrue: [self message: 'runtstOEreturnFalse  failed']</body><body package="DLLCC Test Suite">runtstOEreturnHandle	&lt;test&gt;	| result |	result := self interface oeTstExternalReturnHandle: self with: self.	result == self ifFalse: [self message: 'runtstOEreturnHandle  failed']</body><body package="DLLCC Test Suite">runtstOEreturnNil	&lt;test&gt;	| result |	result := self interface oeTstExternalReturnNil: self.	result == nil ifFalse: [self message: 'runtstOEreturnNil  failed']</body><body package="DLLCC Test Suite">runtstOEreturnTrue	&lt;test&gt;	| result |	result := self interface oeTstExternalReturnTrue: self.	result ifFalse: [self message: 'runtstOEreturnTrue  failed']</body><body package="DLLCC Test Suite">runtstOEsignalSem	&lt;test&gt;	| sem |	sem := Semaphore new.	self interface oeTstExternalSignalSem: self with: sem.	(sem instVarAt: 3) = 1		ifFalse: [self message: 'runtstOEsignalSem failed']</body><body package="DLLCC Test Suite">runtstUPCSendMessage0	"self new runtstUPCSendMessage0"	&lt;test&gt;	(self interface TstSendcBack0: 'Hello world!' with: 'size') = 12		ifFalse: [self message: 'tstUPCSendMessage0 failed']</body><body package="DLLCC Test Suite">runtstUPCSendMessage1	"self new runtstUPCSendMessage1"	&lt;test&gt;	(self interface TstSendcBack1: 'Hello ' with: ',' with: 'world!') = 'Hello world!'		ifFalse: [self message: 'tstUPCSendMessage1 failed']</body><body package="DLLCC Test Suite">runtstUPCSendMessage2	"self new runtstUPCSendMessage2"	&lt;test&gt;	(self interface TstSendcBack2: Array with: 'with:with:' with: 1 with: 2) = #(1 2)		ifFalse: [self message: 'tstUPCSendMessage2 failed']</body><body package="DLLCC Test Suite">runtstUPCSendMessage3	"self new runtstUPCSendMessage3"	&lt;test&gt;	(self interface TstSendcBack3: Array with: 'with:with:with:' with: 1 with: 2 with: 3) = #(1 2 3)		ifFalse: [self message: 'tstUPCSendMessage3 failed']</body><body package="DLLCC Test Suite">runtstUPCSendMessageMany	&lt;test&gt;	| aCollection |	aCollection :=		self interface			TstSendcBackMany: OrderedCollection			with: 'with:with:'			with: 'Hello'			with: 'World'.	((aCollection at: 1) = 'Hello' and: [(aCollection at: 2) = 'World'])		ifFalse: [self error: 'runtstUPCSendMessageMany failed.']</body><body package="DLLCC Test Suite">runtstUPCtoSTbool	&lt;test&gt;	| result |	result := self interface TstExternalUPCtoSTbool: self.	result ifFalse: [self message: 'tstUPCtoSTbool failed']</body><body package="DLLCC Test Suite">runtstUPCtoSTchar	&lt;test&gt;	| result |	result := self interface TstExternalUPCtoSTchar: self.	result == $c ifFalse: [self message: 'tstUPCtoSTchar  failed']</body><body package="DLLCC Test Suite">runtstUPCtoSTdouble	&lt;test&gt;	| result |	result := self interface TstExternalUPCtoSTdouble: self.	(result class = 3.14d class and: [result = 3.14d]) ifFalse:		[self message: 'runtstUPCtoSTdouble failed']</body><body package="DLLCC Test Suite">runtstUPCtoSTfloat	&lt;test&gt;	| result |	result := self interface TstExternalUPCtoSTfloat: self.	result = 3.14 ifFalse: [self message: 'tstUPCtoSTfloat  failed']</body><body package="DLLCC Test Suite">runtstUPCtoSTint	&lt;test&gt;	| result |	result := self interface TstExternalUPCtoSTint: self.	result == 42 ifFalse: [self message: 'tstUPCtoSTint  failed']</body><body package="DLLCC Test Suite">runtstUPSTtoCbool	&lt;test&gt;	| result |	result := self interface TstExternalUPSTtoCbool: self with: true.	result ifFalse: [self message: 'tstUPSTtoCbool 1 failed'].	result := self interface TstExternalUPSTtoCbool: self with: false.	result ifTrue: [self message: 'tstUPSTtoCbool 2 failed']</body><body package="DLLCC Test Suite">runtstUPSTtoCchar	&lt;test&gt;	| result |	result := self interface TstExternalUPSTtoCchar: self with: $h.	result == $h ifFalse: [self message: 'tstUPSTtoCchar: aChar failed']</body><body package="DLLCC Test Suite">runtstUPSTtoCdouble	&lt;test&gt;	| result |	result := self interface TstExternalUPSTtoCdouble: self with: 99.0d.	(result class = 99.0d class and: [result = 99.0d]) ifFalse:		[self message: 'runtstUPSTtoCdouble failed']</body><body package="DLLCC Test Suite">runtstUPSTtoCfloat	&lt;test&gt;	| result |	result := self interface TstExternalUPSTtoCfloat: self with: 3.14.	result = 3.14 ifFalse: [self message: 'tstUPSTtoCfloat: aFloat failed']</body><body package="DLLCC Test Suite">runtstUPSTtoCint	&lt;test&gt;	| result |	result := self interface TstExternalUPSTtoCint: self with: 2.	result == 2 ifFalse: [self message: 'tstUPSTtoCint: aInt failed']</body><body package="DLLCC Test Suite">runtstUPSendMessage0	"self new runtstUPSendMessage0"	&lt;test&gt;	(self interface TstSendBack0: 'Hello world!' with: #size) = 12		ifFalse: [self message: 'tstUPSendMessage0 failed']</body><body package="DLLCC Test Suite">runtstUPSendMessage0IfFailNoReturn	"self new runtstUPSendMessage0IfFailNoReturn"	&lt;test&gt;	Object errorSignal		handle: [:ex | ^self]		do: [self interface TstSendBack0IfFailNoReturn: 'Hello world!' with: #bogus].		self message: 'tstUPSendMessage0IfFailNoReturn failed'</body><body package="DLLCC Test Suite">runtstUPSendMessage0IfFailReturnFalse	"self new runtstUPSendMessage0IfFailReturnFalse"		&lt;test&gt;	(Object messageNotUnderstoodSignal		handle: [:ex | ex return]		do: [self interface TstSendBack0IfFailReturnFalse: 'Hello world!' with: #bogus]) == false			ifFalse: [self message: 'tstUPSendMessage0IfFailReturnFalse failed']</body><body package="DLLCC Test Suite">runtstUPSendMessage0ReturnKeptReceiver	"self new runtstUPSendMessage0ReturnKeptReceiver"		&lt;test&gt;	(self interface TstSendBack0ReturnKeptReceiver: ObjectMemory with: #garbageCollect) == ObjectMemory		ifFalse: [self message: 'tstUPSendMessage0ReturnKeptReceiver failed']</body><body package="DLLCC Test Suite">runtstUPSendMessage1	"self new runtstUPSendMessage1"	&lt;test&gt;	(self interface TstSendBack1: 'Hello ' with: #, with: 'world!') = 'Hello world!'		ifFalse: [self message: 'tstUPSendMessage1 failed']</body><body package="DLLCC Test Suite">runtstUPSendMessage2	"self new runtstUPSendMessage2"	&lt;test&gt;	(self interface TstSendBack2: Array with: #with:with: with: 1 with: 2) = #(1 2)		ifFalse: [self message: 'tstUPSendMessage2 failed']</body><body package="DLLCC Test Suite">runtstUPSendMessage3	"self new runtstUPSendMessage3"	&lt;test&gt;	(self interface TstSendBack3: Array with: #with:with:with: with: 1 with: 2 with: 3) = #(1 2 3)		ifFalse: [self message: 'tstUPSendMessage3 failed']</body><body package="DLLCC Test Suite">runtstUPSendMessageMany	"self new runtstUPSendMessageMany"	&lt;test&gt;	(self interface TstSendBackMany: 'Hello ' with: #, with: #('world!')) = 'Hello world!'		ifFalse: [self message: 'tstUPSendMessageMany failed']</body><body package="DLLCC Test Suite">runtstUPallocFs	&lt;test&gt;	| result |	result := self interface TstExternalUPallocFs: self with: Point.	(result class == Point)		ifFalse: [self message: 'runtstUPallocFs failed']</body><body package="DLLCC Test Suite">runtstUPallocVs	&lt;test&gt;	| result |	result := self interface TstExternalUPallocVs: self with: Array with: 10.	(result class == Array and: [result size = 10])		ifFalse: [self message: 'runtstUPallocVs failed']</body><body package="DLLCC Test Suite">runtstUPbasicAt	&lt;test&gt;	| result |	result := self interface TstExternalUPbasicAt: self with: #(1 20 3 ) with: 2.	result == 20 ifFalse: [self message: 'tstUPbasicAt: anArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstUPbasicAtPut	&lt;test&gt;	| result anArray |	anArray := Array with: #foo with: #bar with: #who.	result := self interface				TstExternalUPbasicAtPut: self with: anArray				with: 2				with: #who.	(result = #bar and: [anArray = #(foo who who )])		ifFalse: [self message: 'tstUPbasicAtPut: anArray with: anIndex with: toBePut failed']</body><body package="DLLCC Test Suite">runtstUPbyteAt	&lt;test&gt;	| result aByteArray |	aByteArray := ByteArray new: 3.	aByteArray at: 1 put: 8.	aByteArray at: 2 put: 16.	aByteArray at: 3 put: 24.	result := self interface TstExternalUPbyteAt: self with: aByteArray with: 2.	result == 16 ifFalse: [self message: 'tstUPbyteAt: aByteArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstUPbyteAtPut	&lt;test&gt;	| result aByteArray |	aByteArray := ByteArray new: 3.	aByteArray at: 1 put: 8.	aByteArray at: 2 put: 16.	aByteArray at: 3 put: 24.	result := self interface				TstExternalUPbyteAtPut: self with: aByteArray				with: 2				with: 20.	(result = 16 and: [(aByteArray at: 1)			== 8 and: [(aByteArray at: 2)				== 20 and: [(aByteArray at: 3)					== 24]]])		ifFalse: [self message: 'tstUPbyteAt: aByteArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstUPclass	&lt;test&gt;	| result |	result := self interface TstExternalUPclass: self with: 0@0.	(result == Point)		ifFalse: [self message: 'runtstUPclass failed']</body><body package="DLLCC Test Suite">runtstUPclassType	&lt;test&gt;	| result1 result2 result3 |	result1 := self interface TstExternalUPclassType: self with: 1.	(result1 = 0)		ifFalse: [self message: 'runtstUPclassType 1 failed'].	result2 := self interface TstExternalUPclassType: self with: Object.	(result2 = 1)		ifFalse: [self message: 'runtstUPclassType 2 failed'].	result3 := self interface TstExternalUPclassType: self with: Array.	(result3 = 2)		ifFalse: [self message: 'runtstUPclassType 3 failed']</body><body package="DLLCC Test Suite">runtstUPcopyCtoSTIntArray	"Test new runtstUPcopyCtoSTIntArray"	&lt;test&gt;	| result anArray |	anArray := #(2 2 2 2 2 2 ) copy.	result := self interface TstExternalUPcopyCtoSTintArray: self with: anArray with: 3 with: 4.	(result = 3 and: [anArray = #(2 2 2 1 2 3 )])		 ifFalse: [self message: 'tstUPcopyCtoSTIntArray 1 failed'].	anArray := #(2 2 2 2 2 2 ) copy.	result := self interface TstExternalUPcopyCtoSTintArray: self with: anArray with: 3 with: 1.	(result = 3 and: [anArray = #(1 2 3 2 2 2)])		 ifFalse: [self message: 'tstUPcopyCtoSTIntArray 2 failed'].	anArray := #(2 2 2 2 2 2 ) copy.	result := self interface TstExternalUPcopyCtoSTintArray: self with: anArray with: 1 with: 6.	(result = 1 and: [anArray = #(2 2 2 2 2 1)])		 ifFalse: [self message: 'tstUPcopyCtoSTIntArray 3 failed'].</body><body package="DLLCC Test Suite">runtstUPcopyCtoSTfloatArray	&lt;test&gt;	"Test new runtstUPcopyCtoSTfloatArray"	| result anArray |	anArray := #(2.0 2.0 2.0 2.0 2.0 2.0 ) copy.	result := self interface				TstExternalUPcopyCtoSTfloatArray: self with: anArray				with: 3				with: 4.	(result = 3 and: [anArray = #(2.0 2.0 2.0 -1.0 2.0 -3.0 )])		ifFalse: [self message: 'tstUPcopyCtoSTfloatArray 1 failed'].	anArray := #(2.0 2.0 2.0 2.0 2.0 2.0 ) copy.	result := self interface				TstExternalUPcopyCtoSTfloatArray: self with: anArray				with: 3				with: 1.	(result = 3 and: [anArray = #(-1.0 2.0 -3.0 2.0 2.0 2.0 )])		ifFalse: [self message: 'tstUPcopyCtoSTfloatArray 2 failed'].	anArray := #(2.0 2.0 2.0 2.0 2.0 2.0 ) copy.	result := self interface				TstExternalUPcopyCtoSTfloatArray: self with: anArray				with: 1				with: 6.	(result = 1 and: [anArray = #(2.0 2.0 2.0 2.0 2.0 -1.0 )])		ifFalse: [self message: 'tstUPcopyCtoSTfloatArray 3 failed']</body><body package="DLLCC Test Suite">runtstUPcopyCtoSTstring	&lt;test&gt;	| result anArray |	anArray := 'bbbbbb' copy.	result := self interface TstExternalUPcopyCtoSTstring: self with: anArray with: 3 with: 4.	(result = 3 and: [anArray = 'bbbabc'])		 ifFalse: [self message: 'tstUPcopyCtoSTstring 1 failed'].	anArray := 'bbbbbb' copy.	result := self interface TstExternalUPcopyCtoSTstring: self with: anArray with: 3 with: 1.	(result = 3 and: [anArray = 'abcbbb'])		 ifFalse: [self message: 'tstUPcopyCtoSTstring 2 failed'].	anArray := 'bbbbbb' copy.	result := self interface TstExternalUPcopyCtoSTstring: self with: anArray with: 1 with: 6.	(result = 1 and: [anArray = 'bbbbba'])		 ifFalse: [self message: 'tstUPcopyCtoSTstring 3 failed']</body><body package="DLLCC Test Suite">runtstUPcopySTtoCbytes	&lt;test&gt;	| result proto |	proto := ByteArray with: 1 with: 2 with: 3.	result := self interface TstExternalUPcopySTtoCbytes: self with: proto with: 3 with: 4.	result = #[2 2 2 1 2 3]		 ifFalse: [self message: 'tstUPcopySTtoCbytes 1 failed'].	result := self interface TstExternalUPcopySTtoCbytes: self with: proto with: 3 with: 1.	result = #[1 2 3 2 2 2]		 ifFalse: [self message: 'tstUPcopySTtoCbytes 2 failed'].	result := self interface TstExternalUPcopySTtoCbytes: self with: proto with: 1 with: 6.	result = #[2 2 2 2 2 1]		 ifFalse: [self message: 'tstUPcopySTtoCbytes 3 failed']</body><body package="DLLCC Test Suite">runtstUPcopySTtoCfloatArray	"Test new runtstUPcopySTtoCfloatArray"	&lt;test&gt;	| result proto |	proto := Array with: 1.0 with: 2.0 with: 3.0.	result := self interface TstExternalUPcopySTtoCfloatArray: self with: proto with: 3 with: 4.	result asArray = #(2.0 2.0 2.0 1.0 2.0 3.0 )		 ifFalse: [self message: 'tstUPcopySTtoCfloatArray 1 failed'].	result := self interface TstExternalUPcopySTtoCfloatArray: self with: proto with: 3 with: 1.	result asArray = #(1.0 2.0 3.0 2.0 2.0 2.0 )		 ifFalse: [self message: 'tstUPcopySTtoCfloatArray 2 failed'].	result := self interface TstExternalUPcopySTtoCfloatArray: self with: proto with: 1 with: 6.	result asArray = #(2.0 2.0 2.0 2.0 2.0 1.0 )		 ifFalse: [self message: 'tstUPcopySTtoCfloatArray 3 failed']</body><body package="DLLCC Test Suite">runtstUPcopySTtoCintArray	&lt;test&gt;	| result proto |	proto := Array with: 1 with: 2 with: 3.	result := self interface TstExternalUPcopySTtoCintArray: self with: proto with: 3 with: 4.	result asArray = #(2 2 2 1 2 3 )		 ifFalse: [self message: 'tstUPcopySTtoCintArray 1 failed'].	result := self interface TstExternalUPcopySTtoCintArray: self with: proto with: 3 with: 1.	result asArray = #(1 2 3 2 2 2 )		 ifFalse: [self message: 'tstUPcopySTtoCintArray 2 failed'].	result := self interface TstExternalUPcopySTtoCintArray: self with: proto with: 1 with: 6.	result asArray = #(2 2 2 2 2 1 )		 ifFalse: [self message: 'tstUPcopySTtoCintArray 3 failed']</body><body package="DLLCC Test Suite">runtstUPcopySTtoCstring	&lt;test&gt;	| result | 	result := self interface TstExternalUPcopySTtoCstring: self with: 'abc' with: 3 with: 4.	result = 'bbbabc'		 ifFalse: [self message: 'tstUPcopySTtoCstring 1 failed'].	result := self interface TstExternalUPcopySTtoCstring: self with: 'abc' with: 3 with: 1.	result = 'abcbbb'		 ifFalse: [self message: 'tstUPcopySTtoCstring 2 failed'].	result := self interface TstExternalUPcopySTtoCstring: self with: 'abc' with: 1 with: 6.	result = 'bbbbba'		 ifFalse: [self message: 'tstUPcopySTtoCstring 3 failed']</body><body package="DLLCC Test Suite">runtstUPdoubleAt	&lt;test&gt;	| anArray |	anArray := #(1.234d 2.345d 3.1415d).	(self interface TstExternalUPdoubleAt: anArray with: 3) = 3.1415d		ifFalse: [self message: 'tstUPisInteger: aInteger failed']</body><body package="DLLCC Test Suite">runtstUPerrorHandler	&lt;test&gt;	| result |	result := self interface TstExternalUPerrorHandler: self.	result ~= 100 ifTrue: [self message: 'tstUPerrorHandler failed']</body><body package="DLLCC Test Suite">runtstUPfloatAt	&lt;test&gt;	| result |	result := self interface TstExternalUPfloatAt: self with: #(1.0 2.0 3.0 ) with: 3.	result = 3.0		 ifFalse: [self message: 'tstUPfloatAt: anArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstUPfloatAtPut	&lt;test&gt;	| result aFloatArray |	aFloatArray := Array with: 8.0 with: 16.0 with: 24.0 .	result := self interface TstExternalUPfloatAtPut: self with: aFloatArray with: 2 with: 20.0 .	(result = 16.0		 and: [(aFloatArray at: 1) = 8.0		 and: [(aFloatArray at: 2) = 20.0		 and: [(aFloatArray at: 3) = 24.0]]])			ifFalse: [self message: 'tstUPfloatAtPut: aFloatArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstUPindexVarSize	&lt;test&gt;	| result |	result := self interface TstExternalUPindexVarSize: self with: self.	result == self size		 ifFalse: [self message: 'tstUPindexVarSize: anyObjectWithIndexVars failed 0'].	result := self interface TstExternalUPindexVarSize: self with: #(enie meenie meenie moe ).	result == 4		 ifFalse: [self message: 'tstUPindexVarSize: anyObjectWithIndexVars failed 1'].	result := self interface TstExternalUPindexVarSize: self with: (Array new: 5000).	result == 5000		 ifFalse: [self message: 'tstUPindexVarSize: anyObjectWithIndexVars failed 2']</body><body package="DLLCC Test Suite">runtstUPinstVarAt	&lt;test&gt;	| result anAssoc |	anAssoc := Association key: #foo value: #bar.	result := self interface TstExternalUPinstVarAt: self with: anAssoc with: 1.	result == #foo		 ifFalse: [self message: 'tstUPinstVarAt: anArray with: anIndex 1 failed'].	result := self interface TstExternalUPinstVarAt: self with: anAssoc with: 2.	result == #bar		 ifFalse: [self message: 'tstUPinstVarAt: anArray with: anIndex 2 failed']</body><body package="DLLCC Test Suite">runtstUPinstVarAtPut	&lt;test&gt;	| result anAssoc |	anAssoc := Association key: #foo value: #bar.	result := self interface TstExternalUPinstVarAtPut: self with: anAssoc with: 2 with: #foo.	(result == #bar		 and: [anAssoc key == #foo		 and: [anAssoc value == #foo]])			ifFalse: [self message: 'tstUPinstVarAtPut: anArray with: anIndex failed']</body><body package="DLLCC Test Suite">runtstUPinstVarSize	&lt;test&gt;	| result |	result := self interface TstExternalUPinstVarSize: self with: self.	result == self class instSize		 ifFalse: [self message: 'tstUPinstVarSize: anyObjectWithInstVars 1 failed'].	result := self interface TstExternalUPinstVarSize: self with: (Array new: 3).	result == 0		 ifFalse: [self message: 'tstUPinstVarSize: anyObjectWithInstVars 2 failed'].	result := self interface TstExternalUPinstVarSize: self with: Association new.	result == 2		 ifFalse: [self message: 'tstUPinstVarSize: anyObjectWithInstVars 3 failed']</body><body package="DLLCC Test Suite">runtstUPintegerAt	&lt;test&gt;	| result |	result := self interface TstExternalUPintegerAt: self with: #(1 2 3) with: 3.	result = 3		 ifFalse: [self message: 'tstUPintegerAt failed']</body><body package="DLLCC Test Suite">runtstUPintegerAtPut	&lt;test&gt;	| result anArray |	anArray := Array new: 3.	result := self interface TstExternalUPintegerAtPut: self with: anArray with: 2 with: 8.	(result = nil and: [anArray = (Array with: nil with: 8 with: nil)])		 ifFalse: [self message: 'tstUPintegerAtPut: anArray with: anIndex with: toBePut failed']</body><body package="DLLCC Test Suite">runtstUPisArrayOfFloat	&lt;test&gt;	| result |	result := self interface TstExternalUPisArrayOfFloat: self with: (Array with: 1.0 with: 2.0 with: 3.0).	result		 ifFalse: [self message: 'tstUPisArrayOfFloat: anArrayOfFloat failed 1'].	result := self interface TstExternalUPisArrayOfFloat: self with:  (Array with: 1  with: 2  with: 3).	result		 ifTrue: [self message: 'tstUPisArrayOfFloat: anArrayOfFloat failed 2'].	result := self interface TstExternalUPisArrayOfFloat: self with: (Array with: 1.0 with: 2.0 with: 3).	result		 ifTrue: [self message: 'tstUPisArrayOfFloat: anArrayOfFloat failed 3']</body><body package="DLLCC Test Suite">runtstUPisArrayOfInteger	&lt;test&gt;	| result |	result := self interface TstExternalUPisArrayOfInteger: self with: #(1 2 3 4 5 ).	result		 ifFalse: [self message: 'tstUPisArrayOfInteger: anArrayOfInteger 1 failed'].	result := self interface TstExternalUPisArrayOfInteger: self with: #(1 f2 f3 f4 f5 ).	result		 ifTrue: [self message: 'tstUPisArrayOfInteger: anArrayOfInteger 2 failed']</body><body package="DLLCC Test Suite">runtstUPisBoolean	&lt;test&gt;	| result |	result := self interface TstExternalUPisBoolean: self with: true.	result		 ifFalse: [self message: 'tstUPisBoolean: aBoolean failed 1'].	result := self interface TstExternalUPisBoolean: self with: false.	result		 ifFalse: [self message: 'tstUPisBoolean: aBoolean failed 2'].	result := self interface TstExternalUPisBoolean: self with: 7.	result		 ifTrue: [self message: 'tstUPisBoolean: aBoolean failed 3']</body><body package="DLLCC Test Suite">runtstUPisByteArray	&lt;test&gt;	| result |	result := self interface TstExternalUPisByteArray: self with:		 (ByteArray with: 2 with: 3).	result ifFalse: [self message: 'tstUPisByteArray: aByteArray failed']</body><body package="DLLCC Test Suite">runtstUPisByteLike	&lt;test&gt;	| result |	result := self interface TstExternalUPisByteLike: self with: (ByteArray new: 2).	result ifFalse: [self message: 'tstUPisByteLike 1 failed'].	result := self interface TstExternalUPisByteLike: self with: (UninterpretedBytes new: 2).	result ifFalse: [self message: 'tstUPisByteLike 2 failed'].	result := self interface TstExternalUPisByteLike: self with: (Array new: 2).	result ifTrue: [self message: 'tstUPisByteLike 3 failed']</body><body package="DLLCC Test Suite">runtstUPisCharacter	&lt;test&gt;	| result |	result := self interface TstExternalUPisCharacter: self with: $h.	result ifFalse: [self message: 'tstUPisCharacter: aCharacter failed']</body><body package="DLLCC Test Suite">runtstUPisDouble	&lt;test&gt;	| result1 result2 |	result1 := self interface TstExternalUPisDouble: self with: 0.0 asDouble.	(result1) ifFalse: [self message: 'runtstUPisDouble 1 failed'].	result2 := self interface TstExternalUPisDouble: self with: 0.0.	(result2) ifTrue: [self message: 'runtstUPisDouble 2 failed']</body><body package="DLLCC Test Suite">runtstUPisFloat	&lt;test&gt;	| result |	result := self interface TstExternalUPisFloat: self with: 3.14.	result		 ifFalse: [self message: 'tstUPisFloat: aFloat failed 1'].	result := self interface TstExternalUPisFloat: self with: 3.	result		 ifTrue: [self message: 'tstUPisFloat: aFloat failed 2']</body><body package="DLLCC Test Suite">runtstUPisImmediate	&lt;test&gt;	| result |	result := self interface TstExternalUPisImmediate: self with: 1.	result		 ifFalse: [self message: 'tstUPisImmediate failed 1'].	result := self interface TstExternalUPisImmediate: self with: $a.	result		 ifFalse: [self message: 'tstUPisImmediate failed 2'].	result := self interface TstExternalUPisImmediate: self with: Object new.	result		 ifTrue: [self message: 'tstUPisImmediate failed 3']</body><body package="DLLCC Test Suite">runtstUPisInteger	&lt;test&gt;	| result |	result := self interface TstExternalUPisInteger: self with: 2.	result ifFalse: [self message: 'tstUPisInteger: aInteger failed']</body><body package="DLLCC Test Suite">runtstUPisKindOf	&lt;test&gt;	| result |	result := self interface TstExternalUPisKindOf: self with: 0@0 with: Point.	(result) ifFalse: [self message: 'runtstUPisKindOf failed']</body><body package="DLLCC Test Suite">runtstUPisString	&lt;test&gt;	| result |	result := self interface TstExternalUPisString: self with: 'aString'.	result ifFalse: [self message: 'tstUPisString: aString failed']</body><body package="DLLCC Test Suite">runtstUPmustBeArrayOfFloat	&lt;test&gt;	| result anArray |	anArray := #(1.0 2.0 3.0).	result := self interface TstExternalUPmustBeArrayOfFloat: anArray.	result == anArray ifFalse: [self message: 'tstUPmustBeArrayOfFloat  failed'].	result := self interface TstExternalUPmustBeArrayOfFloat: #(1.0 2.0d dummy).	result == #failed ifFalse: [self message: 'tstUPmustBeArrayOfFloat failed']</body><body package="DLLCC Test Suite">runtstUPmustBeArrayOfInteger	&lt;test&gt;	| result anArray |	anArray := #(1 2 3).	result := self interface TstExternalUPmustBeArrayOfInteger: anArray.	result == anArray ifFalse: [self message: 'tstUPmustBeArrayOfInteger  failed'].	result := self interface TstExternalUPmustBeArrayOfInteger: #(1 2 dummy).	result == #failed ifFalse: [self message: 'tstUPmustBeArrayOfInteger failed']</body><body package="DLLCC Test Suite">runtstUPmustBeBoolean	&lt;test&gt;	| result |	result := self interface TstExternalUPmustBeBoolean: true.	result == true ifFalse: [self message: 'tstUPmustBeBoolean  failed'].	result := self interface TstExternalUPmustBeBoolean: 1.	result == #failed ifFalse: [self message: 'tstUPmustBeBoolean failed']</body><body package="DLLCC Test Suite">runtstUPmustBeByteArray	&lt;test&gt;	| result anArray |	anArray := #[1 2 3].	result := self interface TstExternalUPmustBeByteArray: anArray.	result == anArray ifFalse: [self message: 'tstUPmustBeByteArray  failed'].	result := self interface TstExternalUPmustBeByteArray: self.	result == #failed ifFalse: [self message: 'tstUPmustBeByteArray failed']</body><body package="DLLCC Test Suite">runtstUPmustBeByteLike	&lt;test&gt;	| result anArray |	anArray := UninterpretedBytes new: 3.	result := self interface TstExternalUPmustBeByteLike: anArray.	result == anArray ifFalse: [self message: 'tstUPmustBeByteLike  failed'].	result := self interface TstExternalUPmustBeByteLike: self.	result == #failed ifFalse: [self message: 'tstUPmustBeByteLike failed']</body><body package="DLLCC Test Suite">runtstUPmustBeCharacter	&lt;test&gt;	| result |	result := self interface TstExternalUPmustBeCharacter: $a.	result == $a ifFalse: [self message: 'tstUPmustBeCharacter  failed'].	result := self interface TstExternalUPmustBeCharacter: self.	result == #failed ifFalse: [self message: 'tstUPmustBeCharacter failed']</body><body package="DLLCC Test Suite">runtstUPmustBeInteger	&lt;test&gt;	| result |	result := self interface TstExternalUPmustBeInteger: 1.	result == 1 ifFalse: [self message: 'tstUPmustBeInteger  failed'].	result := self interface TstExternalUPmustBeInteger: self.	result == #failed ifFalse: [self message: 'tstUPmustBeInteger failed']</body><body package="DLLCC Test Suite">runtstUPmustBeString	&lt;test&gt;	| result aString |	aString := 'Hello'.	result := self interface TstExternalUPmustBeString: aString.	result == aString ifFalse: [self message: 'tstUPmustBeString  failed'].	result := self interface TstExternalUPmustBeString: self.	result == #failed ifFalse: [self message: 'tstUPmustBeString failed']</body><body package="DLLCC Test Suite">runtstUPnestedReturn	&lt;test&gt;	| aCollection |	aCollection := OrderedCollection new.	(self interface TstExternalUPnestedReturn: self with: aCollection) == aCollection		ifFalse: [self error: 'runtstUPnestedReturn failed.']</body><body package="DLLCC Test Suite">runtstUPnil	&lt;test&gt;	| result |	result := self interface TstExternalUPnil: self.	result == nil ifFalse: [self message: 'tstUPnil  failed']</body><body package="DLLCC Test Suite">runtstUPpostInt	&lt;test&gt;	| sem |	sem := Semaphore new.	self interface TstExternalUPpostInt: self with: sem.	Processor yield.	"let break-out occur"	(sem instVarAt: 3) = 1		ifFalse: [self message: 'runtstUPpostInt failed']</body><body package="DLLCC Test Suite">runtstUPregHandleAt	&lt;test&gt;	| result |	result := self interface TstExternalUPregHandleAt: self with: 1.	result ifFalse: [self message: 'runtstUPregHandleAt failed']</body><body package="DLLCC Test Suite">runtstUPregHandleAtPut	&lt;test&gt;	| result slot thing |	thing := Object new.	slot := self interface TstExternalUPallocRegSlot: self.	slot &lt; 30 ifTrue: [self message: 'tstUPallocRegSlot failed'].	result := self interface TstExternalUPregHandleAtPut: self with: slot with: thing.	(result == thing)		ifFalse: [self message: 'runtstUPregHandleAt failed']</body><body package="DLLCC Test Suite">runtstUPreturnFalse	&lt;test&gt;	| result |	result := self interface TstExternalUPreturnFalse: self.	result ifTrue: [self message: 'tstUPreturnFalse  failed']</body><body package="DLLCC Test Suite">runtstUPreturnHandle	&lt;test&gt;	| result |	result := self interface TstExternalUPreturnHandle: self with: self.	result == self ifFalse: [self message: 'runtstUPreturnHandle  failed']</body><body package="DLLCC Test Suite">runtstUPreturnNil	&lt;test&gt;	| result |	result := self interface TstExternalUPreturnNil: self.	result == nil ifFalse: [self message: 'tstUPreturnNil  failed']</body><body package="DLLCC Test Suite">runtstUPreturnTrue	&lt;test&gt;	| result |	result := self interface TstExternalUPreturnTrue: self.	result ifFalse: [self message: 'tstUPreturnTrue  failed']</body><body package="DLLCC Test Suite">runtstUPsignalSem	&lt;test&gt;	| sem |	sem := Semaphore new.	self interface TstExternalUPsignalSem: self with: sem.	(sem instVarAt: 3) = 1		ifFalse: [self message: 'runtstUPsignalSem failed']</body></methods><methods><class-id>External.DLLANDCTest</class-id> <category>individual C api tests</category><body package="DLLCC Test Suite">runTest001	&lt;test&gt;	| result |	result := self interface test001.	nil = result ifFalse:		[self message: 'test001 failed']"voidtest001(void){	return ;}"</body><body package="DLLCC Test Suite">runTest002	&lt;test&gt;	| result |	result := self interface test002.	-85 = result ifFalse:		[self message: 'test002 failed']"signed chartest002(void){	return -85;}"</body><body package="DLLCC Test Suite">runTest003	&lt;test&gt;	| result |	result := self interface test003.	170 = result ifFalse:		[self message: 'test003 failed']"unsigned chartest003(void){	return 170;}"</body><body package="DLLCC Test Suite">runTest004	&lt;test&gt;	| result |	result := self interface test004.	-21845 = result ifFalse:		[self message: 'test004 failed']"shorttest004(void){	return -21845;}"</body><body package="DLLCC Test Suite">runTest005	&lt;test&gt;	| result |	result := self interface test005.	43690 = result ifFalse:		[self message: 'test005 failed']"unsigned shorttest005(void){	return 43690;}"</body><body package="DLLCC Test Suite">runTest006	&lt;test&gt;	| result |	result := self interface test006.	-5592405 = result ifFalse:		[self message: 'test006 failed']"inttest006(void){	return -5592405;}"</body><body package="DLLCC Test Suite">runTest007	&lt;test&gt;	| result |	result := self interface test007.	11184810 = result ifFalse:		[self message: 'test007 failed']"unsigned inttest007(void){	return 11184810;}"</body><body package="DLLCC Test Suite">runTest008	&lt;test&gt;	| result |	result := self interface test008.	-1431655765 = result ifFalse:		[self message: 'test008 failed']"longtest008(void){	return -1431655765L;}"</body><body package="DLLCC Test Suite">runTest009	&lt;test&gt;	| result |	result := self interface test009.	2863311530 = result ifFalse:		[self message: 'test009 failed']"unsigned longtest009(void){	return 2863311530U;}"</body><body package="DLLCC Test Suite">runTest010	&lt;test&gt;	| result |	result := self interface test010.	-6148914691236517205 = result ifFalse:		[self message: 'test010 failed']"long longtest010(void){	return C64(-6148914691236517205);}"</body><body package="DLLCC Test Suite">runTest011	&lt;test&gt;	| result |	result := self interface test011.	12297829382473034410 = result ifFalse:		[self message: 'test011 failed']"unsigned long longtest011(void){	return C64(12297829382473034410U);}"</body><body package="DLLCC Test Suite">runTest012	&lt;test&gt;	| result |	result := self interface test012.	-5.59232e6 = result ifFalse:		[self message: 'test012 failed']"floattest012(void){	return -5.59232e6f;}"</body><body package="DLLCC Test Suite">runTest013	&lt;test&gt;	| result |	result := self interface test013.	-4.9881073480191d51 = result ifFalse:		[self message: 'test013 failed']"doubletest013(void){	return -4.9881073480191e51;}"</body><body package="DLLCC Test Suite">runTest014	&lt;test&gt;	| result field |	result := self interface test014.	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94) ifFalse:		[self message: 'test014 failed']"CharStructtest014(void){	CharStruct s;	s.aChar = -94;	return s;}"</body><body package="DLLCC Test Suite">runTest015	&lt;test&gt;	| result field |	result := self interface test015.	field := #(1 #aShort) -&gt; (result memberAt: #aShort).		(field value = -12345	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345]]) ifFalse:		[self message: 'test015 failed']"SmallStructtest015(void){	SmallStruct s;	s.aShort = -12345;	s.aUChar = 99;	s.aUShort = 12345;	return s;}"</body><body package="DLLCC Test Suite">runTest016	&lt;test&gt;	| result field |	result := self interface test016.	field := #(1 #anInt) -&gt; (result memberAt: #anInt).		(field value = -1234567890	and: [field := #(2 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]) ifFalse:		[self message: 'test016 failed']"MediumStructtest016(void){	MediumStruct s;	s.anInt = -1234567890;	s.aFloat = 123.456f;	return s;}"</body><body package="DLLCC Test Suite">runTest017	&lt;test&gt;	| result field |	result := self interface test017.	field := #(1 #aLong) -&gt; (result memberAt: #aLong).		(field value = -1234567890	and: [field := #(2 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(3 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(4 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]]]) ifFalse:		[self message: 'test017 failed']"LargeStructtest017(void){	LargeStruct s;	s.aLong = -1234567890L;	s.aDouble = 1.2345678901235e8;	s.aULong = 1234567890U;	s.aFloat = 123.456f;	return s;}"</body><body package="DLLCC Test Suite">runTest018	&lt;test&gt;	| result field |	result := self interface test018.	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aShort) -&gt; (result memberAt: #aShort).		field value = -12345	and: [field := #(4 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345	and: [field := #(5 #anInt) -&gt; (result memberAt: #anInt).		field value = -1234567890	and: [field := #(6 #aUInt) -&gt; (result memberAt: #aUInt).		field value = 1234567890	and: [field := #(7 #aLong) -&gt; (result memberAt: #aLong).		field value = -1234567890	and: [field := #(8 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(9 #aLongLong) -&gt; (result memberAt: #aLongLong).		field value = -1234567890123456789	and: [field := #(10 #aULongLong) -&gt; (result memberAt: #aULongLong).		field value = 12345678901234567890	and: [field := #(11 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456	and: [field := #(12 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(13 #charStruct) -&gt; (result memberAt: #charStruct).		field := #(13 #aChar) -&gt; (field value memberAt: #aChar).		field value = -94	and: [field := #(14 #smallStruct) -&gt; (result memberAt: #smallStruct).		field := #(14 #aShort) -&gt; (field value memberAt: #aShort).		field value = -12345]]]]]]]]]]]]]) ifFalse:		[self message: 'test018 failed']"BigStructtest018(void){	BigStruct s;	s.aChar = -94;	s.aUChar = 99;	s.aShort = -12345;	s.aUShort = 12345;	s.anInt = -1234567890;	s.aUInt = 1234567890;	s.aLong = -1234567890L;	s.aULong = 1234567890U;	s.aLongLong = C64(-1234567890123456789);	s.aULongLong = C64(12345678901234567890U);	s.aFloat = 123.456f;	s.aDouble = 1.2345678901235e8;	s.charStruct.aChar = -94;	s.smallStruct.aShort = -12345;	return s;}"</body><body package="DLLCC Test Suite">runTest019	&lt;test&gt;	| result |	result := self interface test019: -85.	true = result ifFalse:		[self message: 'test019 failed']"__bool chartest019(signed char aChar){	return aChar == -85;}".	result := self interface test019: 85.	false ~= result ifTrue:		[self message: 'test019 failed']</body><body package="DLLCC Test Suite">runTest020	&lt;test&gt;	| result |	result := self interface test020: 170.	true = result ifFalse:		[self message: 'test020 failed']"__bool chartest020(unsigned char aUChar){	return aUChar == 170;}".	result := self interface test020: -170.	false ~= result ifTrue:		[self message: 'test020 failed']</body><body package="DLLCC Test Suite">runTest021	&lt;test&gt;	| result |	result := self interface test021: -21845.	true = result ifFalse:		[self message: 'test021 failed']"__bool shorttest021(short aShort){	return aShort == -21845;}".	result := self interface test021: 21845.	false ~= result ifTrue:		[self message: 'test021 failed']</body><body package="DLLCC Test Suite">runTest022	&lt;test&gt;	| result |	result := self interface test022: 43690.	true = result ifFalse:		[self message: 'test022 failed']"__bool shorttest022(unsigned short aUShort){	return aUShort == 43690;}".	result := self interface test022: -43690.	false ~= result ifTrue:		[self message: 'test022 failed']</body><body package="DLLCC Test Suite">runTest023	&lt;test&gt;	| result |	result := self interface test023: -5592405.	true = result ifFalse:		[self message: 'test023 failed']"__bool inttest023(int anInt){	return anInt == -5592405;}".	result := self interface test023: 5592405.	false ~= result ifTrue:		[self message: 'test023 failed']</body><body package="DLLCC Test Suite">runTest024	&lt;test&gt;	| result |	result := self interface test024: 11184810.	true = result ifFalse:		[self message: 'test024 failed']"__bool inttest024(unsigned int aUInt){	return aUInt == 11184810;}".	result := self interface test024: -11184810.	false ~= result ifTrue:		[self message: 'test024 failed']</body><body package="DLLCC Test Suite">runTest025	&lt;test&gt;	| result |	result := self interface test025: -1431655765.	true = result ifFalse:		[self message: 'test025 failed']"__bool longtest025(long aLong){	return aLong == -1431655765L;}".	result := self interface test025: 1431655765.	false ~= result ifTrue:		[self message: 'test025 failed']</body><body package="DLLCC Test Suite">runTest026	&lt;test&gt;	| result |	result := self interface test026: 2863311530.	true = result ifFalse:		[self message: 'test026 failed']"__bool longtest026(unsigned long aULong){	return aULong == 2863311530U;}".	result := self interface test026: -2863311530.	false ~= result ifTrue:		[self message: 'test026 failed']</body><body package="DLLCC Test Suite">runTest027	&lt;test&gt;	| result |	result := self interface test027: -6148914691236517205.	true = result ifFalse:		[self message: 'test027 failed']"__bool long longtest027(long long aLongLong){	return aLongLong == C64(-6148914691236517205);}".	result := self interface test027: 6148914691236517205.	false ~= result ifTrue:		[self message: 'test027 failed']</body><body package="DLLCC Test Suite">runTest028	&lt;test&gt;	| result |	result := self interface test028: 12297829382473034410.	true = result ifFalse:		[self message: 'test028 failed']"__bool long longtest028(unsigned long long aULongLong){	return aULongLong == C64(12297829382473034410U);}".	result := self interface test028: -12297829382473034410.	false ~= result ifTrue:		[self message: 'test028 failed']</body><body package="DLLCC Test Suite">runTest029	&lt;test&gt;	| result |	result := self interface test029: -5.59232e6.	true = result ifFalse:		[self message: 'test029 failed']"__bool inttest029(float aFloat){	return aFloat == -5.59232e6f;}".	result := self interface test029: 5.59232e6.	false ~= result ifTrue:		[self message: 'test029 failed']</body><body package="DLLCC Test Suite">runTest030	&lt;test&gt;	| result |	result := self interface test030: -4.9881073480191d51.	true = result ifFalse:		[self message: 'test030 failed']"__bool inttest030(double aDouble){	return aDouble == -4.9881073480191e51;}".	result := self interface test030: 4.9881073480191d51.	false ~= result ifTrue:		[self message: 'test030 failed']</body><body package="DLLCC Test Suite">runTest031	&lt;test&gt;	| result |	result := self interface test031: self interface charStruct.	true = result ifFalse:		[self message: 'test031 failed']"__bool inttest031(CharStruct charStruct){	return charStruct.aChar == -94;}"</body><body package="DLLCC Test Suite">runTest032	&lt;test&gt;	| result |	result := self interface test032: self interface smallStruct.	true = result ifFalse:		[self message: 'test032 failed']"__bool inttest032(SmallStruct smallStruct){	return smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345;}"</body><body package="DLLCC Test Suite">runTest033	&lt;test&gt;	| result |	result := self interface test033: self interface mediumStruct.	true = result ifFalse:		[self message: 'test033 failed']"__bool inttest033(MediumStruct mediumStruct){	return mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f;}"</body><body package="DLLCC Test Suite">runTest034	&lt;test&gt;	| result |	result := self interface test034: self interface largeStruct.	true = result ifFalse:		[self message: 'test034 failed']"__bool inttest034(LargeStruct largeStruct){	return largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f;}"</body><body package="DLLCC Test Suite">runTest035	&lt;test&gt;	| result |	result := self interface test035: self interface bigStruct.	true = result ifFalse:		[self message: 'test035 failed']"__bool inttest035(BigStruct bigStruct){	return bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345;}"</body><body package="DLLCC Test Suite">runTest036	&lt;test&gt;	| result |	result := self interface test036: true.	true = result ifFalse:		[self message: 'test036 failed']"__bool inttest036(__bool char aBoolChar){	return aBoolChar == 1;}".	result := self interface test036: false.	false ~= result ifTrue:		[self message: 'test036 failed']</body><body package="DLLCC Test Suite">runTest037	&lt;test&gt;	| result |	result := self interface test037: true.	true = result ifFalse:		[self message: 'test037 failed']"__bool inttest037(__bool short aBoolShort){	return aBoolShort == 1;}".	result := self interface test037: false.	false ~= result ifTrue:		[self message: 'test037 failed']</body><body package="DLLCC Test Suite">runTest038	&lt;test&gt;	| result |	result := self interface test038: true.	true = result ifFalse:		[self message: 'test038 failed']"__bool inttest038(__bool int aBoolInt){	return aBoolInt == 1;}".	result := self interface test038: false.	false ~= result ifTrue:		[self message: 'test038 failed']</body><body package="DLLCC Test Suite">runTest039	&lt;test&gt;	| result |	result := self interface test039: true.	true = result ifFalse:		[self message: 'test039 failed']"__bool inttest039(__bool long aBoolLong){	return aBoolLong == 1;}".	result := self interface test039: false.	false ~= result ifTrue:		[self message: 'test039 failed']</body><body package="DLLCC Test Suite">runTest040	&lt;test&gt;	| result |	result := self interface test040: true.	true = result ifFalse:		[self message: 'test040 failed']"__bool inttest040(__bool long long aBoolLongLong){	return aBoolLongLong == 1;}".	result := self interface test040: false.	false ~= result ifTrue:		[self message: 'test040 failed']</body><body package="DLLCC Test Suite">runTest041	&lt;test&gt;	| result |	result := self interface test041: true.	true = result ifFalse:		[self message: 'test041 failed']"__bool chartest041(__bool char aBoolChar){	return aBoolChar != 0;}".	result := self interface test041: false.	false ~= result ifTrue:		[self message: 'test041 failed']</body><body package="DLLCC Test Suite">runTest042	&lt;test&gt;	| result |	result := self interface test042: false.	false = result ifFalse:		[self message: 'test042 failed']"__bool chartest042(__bool char aBoolChar){	return aBoolChar != 0;}".	result := self interface test042: true.	true ~= result ifTrue:		[self message: 'test042 failed']</body><body package="DLLCC Test Suite">runTest043	&lt;test&gt;	| result |	result := self interface test043: true.	true = result ifFalse:		[self message: 'test043 failed']"__bool shorttest043(__bool short aBoolShort){	return aBoolShort != 0;}".	result := self interface test043: false.	false ~= result ifTrue:		[self message: 'test043 failed']</body><body package="DLLCC Test Suite">runTest044	&lt;test&gt;	| result |	result := self interface test044: false.	false = result ifFalse:		[self message: 'test044 failed']"__bool shorttest044(__bool short aBoolShort){	return aBoolShort != 0;}".	result := self interface test044: true.	true ~= result ifTrue:		[self message: 'test044 failed']</body><body package="DLLCC Test Suite">runTest045	&lt;test&gt;	| result |	result := self interface test045: true.	true = result ifFalse:		[self message: 'test045 failed']"__bool inttest045(__bool int aBoolInt){	return aBoolInt != 0;}".	result := self interface test045: false.	false ~= result ifTrue:		[self message: 'test045 failed']</body><body package="DLLCC Test Suite">runTest046	&lt;test&gt;	| result |	result := self interface test046: false.	false = result ifFalse:		[self message: 'test046 failed']"__bool inttest046(__bool int aBoolInt){	return aBoolInt != 0;}".	result := self interface test046: true.	true ~= result ifTrue:		[self message: 'test046 failed']</body><body package="DLLCC Test Suite">runTest047	&lt;test&gt;	| result |	result := self interface test047: true.	true = result ifFalse:		[self message: 'test047 failed']"__bool longtest047(__bool long aBoolLong){	return aBoolLong != 0;}".	result := self interface test047: false.	false ~= result ifTrue:		[self message: 'test047 failed']</body><body package="DLLCC Test Suite">runTest048	&lt;test&gt;	| result |	result := self interface test048: false.	false = result ifFalse:		[self message: 'test048 failed']"__bool longtest048(__bool long aBoolLong){	return aBoolLong != 0;}".	result := self interface test048: true.	true ~= result ifTrue:		[self message: 'test048 failed']</body><body package="DLLCC Test Suite">runTest049	&lt;test&gt;	| result |	result := self interface test049: true.	true = result ifFalse:		[self message: 'test049 failed']"__bool long longtest049(__bool long long aBoolLongLong){	return aBoolLongLong != 0;}".	result := self interface test049: false.	false ~= result ifTrue:		[self message: 'test049 failed']</body><body package="DLLCC Test Suite">runTest050	&lt;test&gt;	| result |	result := self interface test050: false.	false = result ifFalse:		[self message: 'test050 failed']"__bool long longtest050(__bool long long aBoolLongLong){	return aBoolLongLong != 0;}".	result := self interface test050: true.	true ~= result ifTrue:		[self message: 'test050 failed']</body><body package="DLLCC Test Suite">runTest051	&lt;test&gt;	| result |	result := self interface test051: -94 with: -93 with: -92 with: -91 with: -90 with: -89 with: -88 with: -87 with: -86 with: -85 with: -84 with: -83 with: -82 with: -81 with: -80 with: -79 with: -78 with: -77 with: -76 with: -75 with: -74 with: -73 with: -72 with: -71 with: -70 with: -69 with: -68 with: -67 with: -66 with: -65.	1073741823 = result ifFalse:		[self message: 'test051 failed']"unsigned longtest051(signed char charA, signed char charB, signed char charC, signed char charD, signed char charE, signed char charF, signed char charG, signed char charH, signed char charI, signed char charJ, signed char charK, signed char charL, signed char charM, signed char charN, signed char charO, signed char charP, signed char charQ, signed char charR, signed char charS, signed char charT, signed char charU, signed char charV, signed char charW, signed char charX, signed char charY, signed char charZ, signed char char0, signed char char1, signed char char2, signed char char3){	unsigned long ok = 0;	if (charA == -94)		ok |= 1 &lt;&lt; 0;	if (charB == -93)		ok |= 1 &lt;&lt; 1;	if (charC == -92)		ok |= 1 &lt;&lt; 2;	if (charD == -91)		ok |= 1 &lt;&lt; 3;	if (charE == -90)		ok |= 1 &lt;&lt; 4;	if (charF == -89)		ok |= 1 &lt;&lt; 5;	if (charG == -88)		ok |= 1 &lt;&lt; 6;	if (charH == -87)		ok |= 1 &lt;&lt; 7;	if (charI == -86)		ok |= 1 &lt;&lt; 8;	if (charJ == -85)		ok |= 1 &lt;&lt; 9;	if (charK == -84)		ok |= 1 &lt;&lt; 10;	if (charL == -83)		ok |= 1 &lt;&lt; 11;	if (charM == -82)		ok |= 1 &lt;&lt; 12;	if (charN == -81)		ok |= 1 &lt;&lt; 13;	if (charO == -80)		ok |= 1 &lt;&lt; 14;	if (charP == -79)		ok |= 1 &lt;&lt; 15;	if (charQ == -78)		ok |= 1 &lt;&lt; 16;	if (charR == -77)		ok |= 1 &lt;&lt; 17;	if (charS == -76)		ok |= 1 &lt;&lt; 18;	if (charT == -75)		ok |= 1 &lt;&lt; 19;	if (charU == -74)		ok |= 1 &lt;&lt; 20;	if (charV == -73)		ok |= 1 &lt;&lt; 21;	if (charW == -72)		ok |= 1 &lt;&lt; 22;	if (charX == -71)		ok |= 1 &lt;&lt; 23;	if (charY == -70)		ok |= 1 &lt;&lt; 24;	if (charZ == -69)		ok |= 1 &lt;&lt; 25;	if (char0 == -68)		ok |= 1 &lt;&lt; 26;	if (char1 == -67)		ok |= 1 &lt;&lt; 27;	if (char2 == -66)		ok |= 1 &lt;&lt; 28;	if (char3 == -65)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest052	&lt;test&gt;	| result |	result := self interface test052: 99 with: 100 with: 101 with: 102 with: 103 with: 104 with: 105 with: 106 with: 107 with: 108 with: 109 with: 110 with: 111 with: 112 with: 113 with: 114 with: 115 with: 116 with: 117 with: 118 with: 119 with: 120 with: 121 with: 122 with: 123 with: 124 with: 125 with: 126 with: 127 with: 128.	1073741823 = result ifFalse:		[self message: 'test052 failed']"unsigned longtest052(unsigned char uCharA, unsigned char uCharB, unsigned char uCharC, unsigned char uCharD, unsigned char uCharE, unsigned char uCharF, unsigned char uCharG, unsigned char uCharH, unsigned char uCharI, unsigned char uCharJ, unsigned char uCharK, unsigned char uCharL, unsigned char uCharM, unsigned char uCharN, unsigned char uCharO, unsigned char uCharP, unsigned char uCharQ, unsigned char uCharR, unsigned char uCharS, unsigned char uCharT, unsigned char uCharU, unsigned char uCharV, unsigned char uCharW, unsigned char uCharX, unsigned char uCharY, unsigned char uCharZ, unsigned char uChar0, unsigned char uChar1, unsigned char uChar2, unsigned char uChar3){	unsigned long ok = 0;	if (uCharA == 99)		ok |= 1 &lt;&lt; 0;	if (uCharB == 100)		ok |= 1 &lt;&lt; 1;	if (uCharC == 101)		ok |= 1 &lt;&lt; 2;	if (uCharD == 102)		ok |= 1 &lt;&lt; 3;	if (uCharE == 103)		ok |= 1 &lt;&lt; 4;	if (uCharF == 104)		ok |= 1 &lt;&lt; 5;	if (uCharG == 105)		ok |= 1 &lt;&lt; 6;	if (uCharH == 106)		ok |= 1 &lt;&lt; 7;	if (uCharI == 107)		ok |= 1 &lt;&lt; 8;	if (uCharJ == 108)		ok |= 1 &lt;&lt; 9;	if (uCharK == 109)		ok |= 1 &lt;&lt; 10;	if (uCharL == 110)		ok |= 1 &lt;&lt; 11;	if (uCharM == 111)		ok |= 1 &lt;&lt; 12;	if (uCharN == 112)		ok |= 1 &lt;&lt; 13;	if (uCharO == 113)		ok |= 1 &lt;&lt; 14;	if (uCharP == 114)		ok |= 1 &lt;&lt; 15;	if (uCharQ == 115)		ok |= 1 &lt;&lt; 16;	if (uCharR == 116)		ok |= 1 &lt;&lt; 17;	if (uCharS == 117)		ok |= 1 &lt;&lt; 18;	if (uCharT == 118)		ok |= 1 &lt;&lt; 19;	if (uCharU == 119)		ok |= 1 &lt;&lt; 20;	if (uCharV == 120)		ok |= 1 &lt;&lt; 21;	if (uCharW == 121)		ok |= 1 &lt;&lt; 22;	if (uCharX == 122)		ok |= 1 &lt;&lt; 23;	if (uCharY == 123)		ok |= 1 &lt;&lt; 24;	if (uCharZ == 124)		ok |= 1 &lt;&lt; 25;	if (uChar0 == 125)		ok |= 1 &lt;&lt; 26;	if (uChar1 == 126)		ok |= 1 &lt;&lt; 27;	if (uChar2 == 127)		ok |= 1 &lt;&lt; 28;	if (uChar3 == 128)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest053	&lt;test&gt;	| result |	result := self interface test053: -12345 with: -12344 with: -12343 with: -12342 with: -12341 with: -12340 with: -12339 with: -12338 with: -12337 with: -12336 with: -12335 with: -12334 with: -12333 with: -12332 with: -12331 with: -12330 with: -12329 with: -12328 with: -12327 with: -12326 with: -12325 with: -12324 with: -12323 with: -12322 with: -12321 with: -12320 with: -12319 with: -12318 with: -12317 with: -12316.	1073741823 = result ifFalse:		[self message: 'test053 failed']"unsigned longtest053(short shortA, short shortB, short shortC, short shortD, short shortE, short shortF, short shortG, short shortH, short shortI, short shortJ, short shortK, short shortL, short shortM, short shortN, short shortO, short shortP, short shortQ, short shortR, short shortS, short shortT, short shortU, short shortV, short shortW, short shortX, short shortY, short shortZ, short short0, short short1, short short2, short short3){	unsigned long ok = 0;	if (shortA == -12345)		ok |= 1 &lt;&lt; 0;	if (shortB == -12344)		ok |= 1 &lt;&lt; 1;	if (shortC == -12343)		ok |= 1 &lt;&lt; 2;	if (shortD == -12342)		ok |= 1 &lt;&lt; 3;	if (shortE == -12341)		ok |= 1 &lt;&lt; 4;	if (shortF == -12340)		ok |= 1 &lt;&lt; 5;	if (shortG == -12339)		ok |= 1 &lt;&lt; 6;	if (shortH == -12338)		ok |= 1 &lt;&lt; 7;	if (shortI == -12337)		ok |= 1 &lt;&lt; 8;	if (shortJ == -12336)		ok |= 1 &lt;&lt; 9;	if (shortK == -12335)		ok |= 1 &lt;&lt; 10;	if (shortL == -12334)		ok |= 1 &lt;&lt; 11;	if (shortM == -12333)		ok |= 1 &lt;&lt; 12;	if (shortN == -12332)		ok |= 1 &lt;&lt; 13;	if (shortO == -12331)		ok |= 1 &lt;&lt; 14;	if (shortP == -12330)		ok |= 1 &lt;&lt; 15;	if (shortQ == -12329)		ok |= 1 &lt;&lt; 16;	if (shortR == -12328)		ok |= 1 &lt;&lt; 17;	if (shortS == -12327)		ok |= 1 &lt;&lt; 18;	if (shortT == -12326)		ok |= 1 &lt;&lt; 19;	if (shortU == -12325)		ok |= 1 &lt;&lt; 20;	if (shortV == -12324)		ok |= 1 &lt;&lt; 21;	if (shortW == -12323)		ok |= 1 &lt;&lt; 22;	if (shortX == -12322)		ok |= 1 &lt;&lt; 23;	if (shortY == -12321)		ok |= 1 &lt;&lt; 24;	if (shortZ == -12320)		ok |= 1 &lt;&lt; 25;	if (short0 == -12319)		ok |= 1 &lt;&lt; 26;	if (short1 == -12318)		ok |= 1 &lt;&lt; 27;	if (short2 == -12317)		ok |= 1 &lt;&lt; 28;	if (short3 == -12316)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest054	&lt;test&gt;	| result |	result := self interface test054: 12345 with: 12346 with: 12347 with: 12348 with: 12349 with: 12350 with: 12351 with: 12352 with: 12353 with: 12354 with: 12355 with: 12356 with: 12357 with: 12358 with: 12359 with: 12360 with: 12361 with: 12362 with: 12363 with: 12364 with: 12365 with: 12366 with: 12367 with: 12368 with: 12369 with: 12370 with: 12371 with: 12372 with: 12373 with: 12374.	1073741823 = result ifFalse:		[self message: 'test054 failed']"unsigned longtest054(unsigned short uShortA, unsigned short uShortB, unsigned short uShortC, unsigned short uShortD, unsigned short uShortE, unsigned short uShortF, unsigned short uShortG, unsigned short uShortH, unsigned short uShortI, unsigned short uShortJ, unsigned short uShortK, unsigned short uShortL, unsigned short uShortM, unsigned short uShortN, unsigned short uShortO, unsigned short uShortP, unsigned short uShortQ, unsigned short uShortR, unsigned short uShortS, unsigned short uShortT, unsigned short uShortU, unsigned short uShortV, unsigned short uShortW, unsigned short uShortX, unsigned short uShortY, unsigned short uShortZ, unsigned short uShort0, unsigned short uShort1, unsigned short uShort2, unsigned short uShort3){	unsigned long ok = 0;	if (uShortA == 12345)		ok |= 1 &lt;&lt; 0;	if (uShortB == 12346)		ok |= 1 &lt;&lt; 1;	if (uShortC == 12347)		ok |= 1 &lt;&lt; 2;	if (uShortD == 12348)		ok |= 1 &lt;&lt; 3;	if (uShortE == 12349)		ok |= 1 &lt;&lt; 4;	if (uShortF == 12350)		ok |= 1 &lt;&lt; 5;	if (uShortG == 12351)		ok |= 1 &lt;&lt; 6;	if (uShortH == 12352)		ok |= 1 &lt;&lt; 7;	if (uShortI == 12353)		ok |= 1 &lt;&lt; 8;	if (uShortJ == 12354)		ok |= 1 &lt;&lt; 9;	if (uShortK == 12355)		ok |= 1 &lt;&lt; 10;	if (uShortL == 12356)		ok |= 1 &lt;&lt; 11;	if (uShortM == 12357)		ok |= 1 &lt;&lt; 12;	if (uShortN == 12358)		ok |= 1 &lt;&lt; 13;	if (uShortO == 12359)		ok |= 1 &lt;&lt; 14;	if (uShortP == 12360)		ok |= 1 &lt;&lt; 15;	if (uShortQ == 12361)		ok |= 1 &lt;&lt; 16;	if (uShortR == 12362)		ok |= 1 &lt;&lt; 17;	if (uShortS == 12363)		ok |= 1 &lt;&lt; 18;	if (uShortT == 12364)		ok |= 1 &lt;&lt; 19;	if (uShortU == 12365)		ok |= 1 &lt;&lt; 20;	if (uShortV == 12366)		ok |= 1 &lt;&lt; 21;	if (uShortW == 12367)		ok |= 1 &lt;&lt; 22;	if (uShortX == 12368)		ok |= 1 &lt;&lt; 23;	if (uShortY == 12369)		ok |= 1 &lt;&lt; 24;	if (uShortZ == 12370)		ok |= 1 &lt;&lt; 25;	if (uShort0 == 12371)		ok |= 1 &lt;&lt; 26;	if (uShort1 == 12372)		ok |= 1 &lt;&lt; 27;	if (uShort2 == 12373)		ok |= 1 &lt;&lt; 28;	if (uShort3 == 12374)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest055	&lt;test&gt;	| result |	result := self interface test055: -1234567890 with: -1234567889 with: -1234567888 with: -1234567887 with: -1234567886 with: -1234567885 with: -1234567884 with: -1234567883 with: -1234567882 with: -1234567881 with: -1234567880 with: -1234567879 with: -1234567878 with: -1234567877 with: -1234567876 with: -1234567875 with: -1234567874 with: -1234567873 with: -1234567872 with: -1234567871 with: -1234567870 with: -1234567869 with: -1234567868 with: -1234567867 with: -1234567866 with: -1234567865 with: -1234567864 with: -1234567863 with: -1234567862 with: -1234567861.	1073741823 = result ifFalse:		[self message: 'test055 failed']"unsigned longtest055(int intA, int intB, int intC, int intD, int intE, int intF, int intG, int intH, int intI, int intJ, int intK, int intL, int intM, int intN, int intO, int intP, int intQ, int intR, int intS, int intT, int intU, int intV, int intW, int intX, int intY, int intZ, int int0, int int1, int int2, int int3){	unsigned long ok = 0;	if (intA == -1234567890)		ok |= 1 &lt;&lt; 0;	if (intB == -1234567889)		ok |= 1 &lt;&lt; 1;	if (intC == -1234567888)		ok |= 1 &lt;&lt; 2;	if (intD == -1234567887)		ok |= 1 &lt;&lt; 3;	if (intE == -1234567886)		ok |= 1 &lt;&lt; 4;	if (intF == -1234567885)		ok |= 1 &lt;&lt; 5;	if (intG == -1234567884)		ok |= 1 &lt;&lt; 6;	if (intH == -1234567883)		ok |= 1 &lt;&lt; 7;	if (intI == -1234567882)		ok |= 1 &lt;&lt; 8;	if (intJ == -1234567881)		ok |= 1 &lt;&lt; 9;	if (intK == -1234567880)		ok |= 1 &lt;&lt; 10;	if (intL == -1234567879)		ok |= 1 &lt;&lt; 11;	if (intM == -1234567878)		ok |= 1 &lt;&lt; 12;	if (intN == -1234567877)		ok |= 1 &lt;&lt; 13;	if (intO == -1234567876)		ok |= 1 &lt;&lt; 14;	if (intP == -1234567875)		ok |= 1 &lt;&lt; 15;	if (intQ == -1234567874)		ok |= 1 &lt;&lt; 16;	if (intR == -1234567873)		ok |= 1 &lt;&lt; 17;	if (intS == -1234567872)		ok |= 1 &lt;&lt; 18;	if (intT == -1234567871)		ok |= 1 &lt;&lt; 19;	if (intU == -1234567870)		ok |= 1 &lt;&lt; 20;	if (intV == -1234567869)		ok |= 1 &lt;&lt; 21;	if (intW == -1234567868)		ok |= 1 &lt;&lt; 22;	if (intX == -1234567867)		ok |= 1 &lt;&lt; 23;	if (intY == -1234567866)		ok |= 1 &lt;&lt; 24;	if (intZ == -1234567865)		ok |= 1 &lt;&lt; 25;	if (int0 == -1234567864)		ok |= 1 &lt;&lt; 26;	if (int1 == -1234567863)		ok |= 1 &lt;&lt; 27;	if (int2 == -1234567862)		ok |= 1 &lt;&lt; 28;	if (int3 == -1234567861)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest056	&lt;test&gt;	| result |	result := self interface test056: 1234567890 with: 1234567891 with: 1234567892 with: 1234567893 with: 1234567894 with: 1234567895 with: 1234567896 with: 1234567897 with: 1234567898 with: 1234567899 with: 1234567900 with: 1234567901 with: 1234567902 with: 1234567903 with: 1234567904 with: 1234567905 with: 1234567906 with: 1234567907 with: 1234567908 with: 1234567909 with: 1234567910 with: 1234567911 with: 1234567912 with: 1234567913 with: 1234567914 with: 1234567915 with: 1234567916 with: 1234567917 with: 1234567918 with: 1234567919.	1073741823 = result ifFalse:		[self message: 'test056 failed']"unsigned longtest056(unsigned int uIntA, unsigned int uIntB, unsigned int uIntC, unsigned int uIntD, unsigned int uIntE, unsigned int uIntF, unsigned int uIntG, unsigned int uIntH, unsigned int uIntI, unsigned int uIntJ, unsigned int uIntK, unsigned int uIntL, unsigned int uIntM, unsigned int uIntN, unsigned int uIntO, unsigned int uIntP, unsigned int uIntQ, unsigned int uIntR, unsigned int uIntS, unsigned int uIntT, unsigned int uIntU, unsigned int uIntV, unsigned int uIntW, unsigned int uIntX, unsigned int uIntY, unsigned int uIntZ, unsigned int uInt0, unsigned int uInt1, unsigned int uInt2, unsigned int uInt3){	unsigned long ok = 0;	if (uIntA == 1234567890)		ok |= 1 &lt;&lt; 0;	if (uIntB == 1234567891)		ok |= 1 &lt;&lt; 1;	if (uIntC == 1234567892)		ok |= 1 &lt;&lt; 2;	if (uIntD == 1234567893)		ok |= 1 &lt;&lt; 3;	if (uIntE == 1234567894)		ok |= 1 &lt;&lt; 4;	if (uIntF == 1234567895)		ok |= 1 &lt;&lt; 5;	if (uIntG == 1234567896)		ok |= 1 &lt;&lt; 6;	if (uIntH == 1234567897)		ok |= 1 &lt;&lt; 7;	if (uIntI == 1234567898)		ok |= 1 &lt;&lt; 8;	if (uIntJ == 1234567899)		ok |= 1 &lt;&lt; 9;	if (uIntK == 1234567900)		ok |= 1 &lt;&lt; 10;	if (uIntL == 1234567901)		ok |= 1 &lt;&lt; 11;	if (uIntM == 1234567902)		ok |= 1 &lt;&lt; 12;	if (uIntN == 1234567903)		ok |= 1 &lt;&lt; 13;	if (uIntO == 1234567904)		ok |= 1 &lt;&lt; 14;	if (uIntP == 1234567905)		ok |= 1 &lt;&lt; 15;	if (uIntQ == 1234567906)		ok |= 1 &lt;&lt; 16;	if (uIntR == 1234567907)		ok |= 1 &lt;&lt; 17;	if (uIntS == 1234567908)		ok |= 1 &lt;&lt; 18;	if (uIntT == 1234567909)		ok |= 1 &lt;&lt; 19;	if (uIntU == 1234567910)		ok |= 1 &lt;&lt; 20;	if (uIntV == 1234567911)		ok |= 1 &lt;&lt; 21;	if (uIntW == 1234567912)		ok |= 1 &lt;&lt; 22;	if (uIntX == 1234567913)		ok |= 1 &lt;&lt; 23;	if (uIntY == 1234567914)		ok |= 1 &lt;&lt; 24;	if (uIntZ == 1234567915)		ok |= 1 &lt;&lt; 25;	if (uInt0 == 1234567916)		ok |= 1 &lt;&lt; 26;	if (uInt1 == 1234567917)		ok |= 1 &lt;&lt; 27;	if (uInt2 == 1234567918)		ok |= 1 &lt;&lt; 28;	if (uInt3 == 1234567919)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest057	&lt;test&gt;	| result |	result := self interface test057: -1234567890 with: -1234567889 with: -1234567888 with: -1234567887 with: -1234567886 with: -1234567885 with: -1234567884 with: -1234567883 with: -1234567882 with: -1234567881 with: -1234567880 with: -1234567879 with: -1234567878 with: -1234567877 with: -1234567876 with: -1234567875 with: -1234567874 with: -1234567873 with: -1234567872 with: -1234567871 with: -1234567870 with: -1234567869 with: -1234567868 with: -1234567867 with: -1234567866 with: -1234567865 with: -1234567864 with: -1234567863 with: -1234567862 with: -1234567861.	1073741823 = result ifFalse:		[self message: 'test057 failed']"unsigned longtest057(long longA, long longB, long longC, long longD, long longE, long longF, long longG, long longH, long longI, long longJ, long longK, long longL, long longM, long longN, long longO, long longP, long longQ, long longR, long longS, long longT, long longU, long longV, long longW, long longX, long longY, long longZ, long long0, long long1, long long2, long long3){	unsigned long ok = 0;	if (longA == -1234567890L)		ok |= 1 &lt;&lt; 0;	if (longB == -1234567889L)		ok |= 1 &lt;&lt; 1;	if (longC == -1234567888L)		ok |= 1 &lt;&lt; 2;	if (longD == -1234567887L)		ok |= 1 &lt;&lt; 3;	if (longE == -1234567886L)		ok |= 1 &lt;&lt; 4;	if (longF == -1234567885L)		ok |= 1 &lt;&lt; 5;	if (longG == -1234567884L)		ok |= 1 &lt;&lt; 6;	if (longH == -1234567883L)		ok |= 1 &lt;&lt; 7;	if (longI == -1234567882L)		ok |= 1 &lt;&lt; 8;	if (longJ == -1234567881L)		ok |= 1 &lt;&lt; 9;	if (longK == -1234567880L)		ok |= 1 &lt;&lt; 10;	if (longL == -1234567879L)		ok |= 1 &lt;&lt; 11;	if (longM == -1234567878L)		ok |= 1 &lt;&lt; 12;	if (longN == -1234567877L)		ok |= 1 &lt;&lt; 13;	if (longO == -1234567876L)		ok |= 1 &lt;&lt; 14;	if (longP == -1234567875L)		ok |= 1 &lt;&lt; 15;	if (longQ == -1234567874L)		ok |= 1 &lt;&lt; 16;	if (longR == -1234567873L)		ok |= 1 &lt;&lt; 17;	if (longS == -1234567872L)		ok |= 1 &lt;&lt; 18;	if (longT == -1234567871L)		ok |= 1 &lt;&lt; 19;	if (longU == -1234567870L)		ok |= 1 &lt;&lt; 20;	if (longV == -1234567869L)		ok |= 1 &lt;&lt; 21;	if (longW == -1234567868L)		ok |= 1 &lt;&lt; 22;	if (longX == -1234567867L)		ok |= 1 &lt;&lt; 23;	if (longY == -1234567866L)		ok |= 1 &lt;&lt; 24;	if (longZ == -1234567865L)		ok |= 1 &lt;&lt; 25;	if (long0 == -1234567864L)		ok |= 1 &lt;&lt; 26;	if (long1 == -1234567863L)		ok |= 1 &lt;&lt; 27;	if (long2 == -1234567862L)		ok |= 1 &lt;&lt; 28;	if (long3 == -1234567861L)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest058	&lt;test&gt;	| result |	result := self interface test058: 1234567890 with: 1234567891 with: 1234567892 with: 1234567893 with: 1234567894 with: 1234567895 with: 1234567896 with: 1234567897 with: 1234567898 with: 1234567899 with: 1234567900 with: 1234567901 with: 1234567902 with: 1234567903 with: 1234567904 with: 1234567905 with: 1234567906 with: 1234567907 with: 1234567908 with: 1234567909 with: 1234567910 with: 1234567911 with: 1234567912 with: 1234567913 with: 1234567914 with: 1234567915 with: 1234567916 with: 1234567917 with: 1234567918 with: 1234567919.	1073741823 = result ifFalse:		[self message: 'test058 failed']"unsigned longtest058(unsigned long uLongA, unsigned long uLongB, unsigned long uLongC, unsigned long uLongD, unsigned long uLongE, unsigned long uLongF, unsigned long uLongG, unsigned long uLongH, unsigned long uLongI, unsigned long uLongJ, unsigned long uLongK, unsigned long uLongL, unsigned long uLongM, unsigned long uLongN, unsigned long uLongO, unsigned long uLongP, unsigned long uLongQ, unsigned long uLongR, unsigned long uLongS, unsigned long uLongT, unsigned long uLongU, unsigned long uLongV, unsigned long uLongW, unsigned long uLongX, unsigned long uLongY, unsigned long uLongZ, unsigned long uLong0, unsigned long uLong1, unsigned long uLong2, unsigned long uLong3){	unsigned long ok = 0;	if (uLongA == 1234567890U)		ok |= 1 &lt;&lt; 0;	if (uLongB == 1234567891U)		ok |= 1 &lt;&lt; 1;	if (uLongC == 1234567892U)		ok |= 1 &lt;&lt; 2;	if (uLongD == 1234567893U)		ok |= 1 &lt;&lt; 3;	if (uLongE == 1234567894U)		ok |= 1 &lt;&lt; 4;	if (uLongF == 1234567895U)		ok |= 1 &lt;&lt; 5;	if (uLongG == 1234567896U)		ok |= 1 &lt;&lt; 6;	if (uLongH == 1234567897U)		ok |= 1 &lt;&lt; 7;	if (uLongI == 1234567898U)		ok |= 1 &lt;&lt; 8;	if (uLongJ == 1234567899U)		ok |= 1 &lt;&lt; 9;	if (uLongK == 1234567900U)		ok |= 1 &lt;&lt; 10;	if (uLongL == 1234567901U)		ok |= 1 &lt;&lt; 11;	if (uLongM == 1234567902U)		ok |= 1 &lt;&lt; 12;	if (uLongN == 1234567903U)		ok |= 1 &lt;&lt; 13;	if (uLongO == 1234567904U)		ok |= 1 &lt;&lt; 14;	if (uLongP == 1234567905U)		ok |= 1 &lt;&lt; 15;	if (uLongQ == 1234567906U)		ok |= 1 &lt;&lt; 16;	if (uLongR == 1234567907U)		ok |= 1 &lt;&lt; 17;	if (uLongS == 1234567908U)		ok |= 1 &lt;&lt; 18;	if (uLongT == 1234567909U)		ok |= 1 &lt;&lt; 19;	if (uLongU == 1234567910U)		ok |= 1 &lt;&lt; 20;	if (uLongV == 1234567911U)		ok |= 1 &lt;&lt; 21;	if (uLongW == 1234567912U)		ok |= 1 &lt;&lt; 22;	if (uLongX == 1234567913U)		ok |= 1 &lt;&lt; 23;	if (uLongY == 1234567914U)		ok |= 1 &lt;&lt; 24;	if (uLongZ == 1234567915U)		ok |= 1 &lt;&lt; 25;	if (uLong0 == 1234567916U)		ok |= 1 &lt;&lt; 26;	if (uLong1 == 1234567917U)		ok |= 1 &lt;&lt; 27;	if (uLong2 == 1234567918U)		ok |= 1 &lt;&lt; 28;	if (uLong3 == 1234567919U)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest059	&lt;test&gt;	| result |	result := self interface test059: -1234567890123456789 with: -1234567890123456788 with: -1234567890123456787 with: -1234567890123456786 with: -1234567890123456785 with: -1234567890123456784 with: -1234567890123456783 with: -1234567890123456782 with: -1234567890123456781 with: -1234567890123456780 with: -1234567890123456779 with: -1234567890123456778 with: -1234567890123456777 with: -1234567890123456776 with: -1234567890123456775 with: -1234567890123456774 with: -1234567890123456773 with: -1234567890123456772 with: -1234567890123456771 with: -1234567890123456770 with: -1234567890123456769 with: -1234567890123456768 with: -1234567890123456767 with: -1234567890123456766 with: -1234567890123456765 with: -1234567890123456764 with: -1234567890123456763 with: -1234567890123456762 with: -1234567890123456761 with: -1234567890123456760.	1073741823 = result ifFalse:		[self message: 'test059 failed']"unsigned longtest059(long long longLongA, long long longLongB, long long longLongC, long long longLongD, long long longLongE, long long longLongF, long long longLongG, long long longLongH, long long longLongI, long long longLongJ, long long longLongK, long long longLongL, long long longLongM, long long longLongN, long long longLongO, long long longLongP, long long longLongQ, long long longLongR, long long longLongS, long long longLongT, long long longLongU, long long longLongV, long long longLongW, long long longLongX, long long longLongY, long long longLongZ, long long longLong0, long long longLong1, long long longLong2, long long longLong3){	unsigned long ok = 0;	if (longLongA == C64(-1234567890123456789))		ok |= 1 &lt;&lt; 0;	if (longLongB == C64(-1234567890123456788))		ok |= 1 &lt;&lt; 1;	if (longLongC == C64(-1234567890123456787))		ok |= 1 &lt;&lt; 2;	if (longLongD == C64(-1234567890123456786))		ok |= 1 &lt;&lt; 3;	if (longLongE == C64(-1234567890123456785))		ok |= 1 &lt;&lt; 4;	if (longLongF == C64(-1234567890123456784))		ok |= 1 &lt;&lt; 5;	if (longLongG == C64(-1234567890123456783))		ok |= 1 &lt;&lt; 6;	if (longLongH == C64(-1234567890123456782))		ok |= 1 &lt;&lt; 7;	if (longLongI == C64(-1234567890123456781))		ok |= 1 &lt;&lt; 8;	if (longLongJ == C64(-1234567890123456780))		ok |= 1 &lt;&lt; 9;	if (longLongK == C64(-1234567890123456779))		ok |= 1 &lt;&lt; 10;	if (longLongL == C64(-1234567890123456778))		ok |= 1 &lt;&lt; 11;	if (longLongM == C64(-1234567890123456777))		ok |= 1 &lt;&lt; 12;	if (longLongN == C64(-1234567890123456776))		ok |= 1 &lt;&lt; 13;	if (longLongO == C64(-1234567890123456775))		ok |= 1 &lt;&lt; 14;	if (longLongP == C64(-1234567890123456774))		ok |= 1 &lt;&lt; 15;	if (longLongQ == C64(-1234567890123456773))		ok |= 1 &lt;&lt; 16;	if (longLongR == C64(-1234567890123456772))		ok |= 1 &lt;&lt; 17;	if (longLongS == C64(-1234567890123456771))		ok |= 1 &lt;&lt; 18;	if (longLongT == C64(-1234567890123456770))		ok |= 1 &lt;&lt; 19;	if (longLongU == C64(-1234567890123456769))		ok |= 1 &lt;&lt; 20;	if (longLongV == C64(-1234567890123456768))		ok |= 1 &lt;&lt; 21;	if (longLongW == C64(-1234567890123456767))		ok |= 1 &lt;&lt; 22;	if (longLongX == C64(-1234567890123456766))		ok |= 1 &lt;&lt; 23;	if (longLongY == C64(-1234567890123456765))		ok |= 1 &lt;&lt; 24;	if (longLongZ == C64(-1234567890123456764))		ok |= 1 &lt;&lt; 25;	if (longLong0 == C64(-1234567890123456763))		ok |= 1 &lt;&lt; 26;	if (longLong1 == C64(-1234567890123456762))		ok |= 1 &lt;&lt; 27;	if (longLong2 == C64(-1234567890123456761))		ok |= 1 &lt;&lt; 28;	if (longLong3 == C64(-1234567890123456760))		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest060	&lt;test&gt;	| result |	result := self interface test060: 12345678901234567890 with: 12345678901234567891 with: 12345678901234567892 with: 12345678901234567893 with: 12345678901234567894 with: 12345678901234567895 with: 12345678901234567896 with: 12345678901234567897 with: 12345678901234567898 with: 12345678901234567899 with: 12345678901234567900 with: 12345678901234567901 with: 12345678901234567902 with: 12345678901234567903 with: 12345678901234567904 with: 12345678901234567905 with: 12345678901234567906 with: 12345678901234567907 with: 12345678901234567908 with: 12345678901234567909 with: 12345678901234567910 with: 12345678901234567911 with: 12345678901234567912 with: 12345678901234567913 with: 12345678901234567914 with: 12345678901234567915 with: 12345678901234567916 with: 12345678901234567917 with: 12345678901234567918 with: 12345678901234567919.	1073741823 = result ifFalse:		[self message: 'test060 failed']"unsigned longtest060(unsigned long long uLongLongA, unsigned long long uLongLongB, unsigned long long uLongLongC, unsigned long long uLongLongD, unsigned long long uLongLongE, unsigned long long uLongLongF, unsigned long long uLongLongG, unsigned long long uLongLongH, unsigned long long uLongLongI, unsigned long long uLongLongJ, unsigned long long uLongLongK, unsigned long long uLongLongL, unsigned long long uLongLongM, unsigned long long uLongLongN, unsigned long long uLongLongO, unsigned long long uLongLongP, unsigned long long uLongLongQ, unsigned long long uLongLongR, unsigned long long uLongLongS, unsigned long long uLongLongT, unsigned long long uLongLongU, unsigned long long uLongLongV, unsigned long long uLongLongW, unsigned long long uLongLongX, unsigned long long uLongLongY, unsigned long long uLongLongZ, unsigned long long uLongLong0, unsigned long long uLongLong1, unsigned long long uLongLong2, unsigned long long uLongLong3){	unsigned long ok = 0;	if (uLongLongA == C64(12345678901234567890U))		ok |= 1 &lt;&lt; 0;	if (uLongLongB == C64(12345678901234567891U))		ok |= 1 &lt;&lt; 1;	if (uLongLongC == C64(12345678901234567892U))		ok |= 1 &lt;&lt; 2;	if (uLongLongD == C64(12345678901234567893U))		ok |= 1 &lt;&lt; 3;	if (uLongLongE == C64(12345678901234567894U))		ok |= 1 &lt;&lt; 4;	if (uLongLongF == C64(12345678901234567895U))		ok |= 1 &lt;&lt; 5;	if (uLongLongG == C64(12345678901234567896U))		ok |= 1 &lt;&lt; 6;	if (uLongLongH == C64(12345678901234567897U))		ok |= 1 &lt;&lt; 7;	if (uLongLongI == C64(12345678901234567898U))		ok |= 1 &lt;&lt; 8;	if (uLongLongJ == C64(12345678901234567899U))		ok |= 1 &lt;&lt; 9;	if (uLongLongK == C64(12345678901234567900U))		ok |= 1 &lt;&lt; 10;	if (uLongLongL == C64(12345678901234567901U))		ok |= 1 &lt;&lt; 11;	if (uLongLongM == C64(12345678901234567902U))		ok |= 1 &lt;&lt; 12;	if (uLongLongN == C64(12345678901234567903U))		ok |= 1 &lt;&lt; 13;	if (uLongLongO == C64(12345678901234567904U))		ok |= 1 &lt;&lt; 14;	if (uLongLongP == C64(12345678901234567905U))		ok |= 1 &lt;&lt; 15;	if (uLongLongQ == C64(12345678901234567906U))		ok |= 1 &lt;&lt; 16;	if (uLongLongR == C64(12345678901234567907U))		ok |= 1 &lt;&lt; 17;	if (uLongLongS == C64(12345678901234567908U))		ok |= 1 &lt;&lt; 18;	if (uLongLongT == C64(12345678901234567909U))		ok |= 1 &lt;&lt; 19;	if (uLongLongU == C64(12345678901234567910U))		ok |= 1 &lt;&lt; 20;	if (uLongLongV == C64(12345678901234567911U))		ok |= 1 &lt;&lt; 21;	if (uLongLongW == C64(12345678901234567912U))		ok |= 1 &lt;&lt; 22;	if (uLongLongX == C64(12345678901234567913U))		ok |= 1 &lt;&lt; 23;	if (uLongLongY == C64(12345678901234567914U))		ok |= 1 &lt;&lt; 24;	if (uLongLongZ == C64(12345678901234567915U))		ok |= 1 &lt;&lt; 25;	if (uLongLong0 == C64(12345678901234567916U))		ok |= 1 &lt;&lt; 26;	if (uLongLong1 == C64(12345678901234567917U))		ok |= 1 &lt;&lt; 27;	if (uLongLong2 == C64(12345678901234567918U))		ok |= 1 &lt;&lt; 28;	if (uLongLong3 == C64(12345678901234567919U))		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest061	&lt;test&gt;	| result |	result := self interface test061: 123.456 with: 124.456 with: 125.456 with: 126.456 with: 127.456 with: 128.456 with: 129.456 with: 130.456 with: 131.456 with: 132.456 with: 133.456 with: 134.456 with: 135.456 with: 136.456 with: 137.456 with: 138.456 with: 139.456 with: 140.456 with: 141.456 with: 142.456 with: 143.456 with: 144.456 with: 145.456 with: 146.456 with: 147.456 with: 148.456 with: 149.456 with: 150.456 with: 151.456 with: 152.456.	1073741823 = result ifFalse:		[self message: 'test061 failed']"unsigned longtest061(float floatA, float floatB, float floatC, float floatD, float floatE, float floatF, float floatG, float floatH, float floatI, float floatJ, float floatK, float floatL, float floatM, float floatN, float floatO, float floatP, float floatQ, float floatR, float floatS, float floatT, float floatU, float floatV, float floatW, float floatX, float floatY, float floatZ, float float0, float float1, float float2, float float3){	unsigned long ok = 0;	if (floatA == 123.456f)		ok |= 1 &lt;&lt; 0;	if (floatB == 124.456f)		ok |= 1 &lt;&lt; 1;	if (floatC == 125.456f)		ok |= 1 &lt;&lt; 2;	if (floatD == 126.456f)		ok |= 1 &lt;&lt; 3;	if (floatE == 127.456f)		ok |= 1 &lt;&lt; 4;	if (floatF == 128.456f)		ok |= 1 &lt;&lt; 5;	if (floatG == 129.456f)		ok |= 1 &lt;&lt; 6;	if (floatH == 130.456f)		ok |= 1 &lt;&lt; 7;	if (floatI == 131.456f)		ok |= 1 &lt;&lt; 8;	if (floatJ == 132.456f)		ok |= 1 &lt;&lt; 9;	if (floatK == 133.456f)		ok |= 1 &lt;&lt; 10;	if (floatL == 134.456f)		ok |= 1 &lt;&lt; 11;	if (floatM == 135.456f)		ok |= 1 &lt;&lt; 12;	if (floatN == 136.456f)		ok |= 1 &lt;&lt; 13;	if (floatO == 137.456f)		ok |= 1 &lt;&lt; 14;	if (floatP == 138.456f)		ok |= 1 &lt;&lt; 15;	if (floatQ == 139.456f)		ok |= 1 &lt;&lt; 16;	if (floatR == 140.456f)		ok |= 1 &lt;&lt; 17;	if (floatS == 141.456f)		ok |= 1 &lt;&lt; 18;	if (floatT == 142.456f)		ok |= 1 &lt;&lt; 19;	if (floatU == 143.456f)		ok |= 1 &lt;&lt; 20;	if (floatV == 144.456f)		ok |= 1 &lt;&lt; 21;	if (floatW == 145.456f)		ok |= 1 &lt;&lt; 22;	if (floatX == 146.456f)		ok |= 1 &lt;&lt; 23;	if (floatY == 147.456f)		ok |= 1 &lt;&lt; 24;	if (floatZ == 148.456f)		ok |= 1 &lt;&lt; 25;	if (float0 == 149.456f)		ok |= 1 &lt;&lt; 26;	if (float1 == 150.456f)		ok |= 1 &lt;&lt; 27;	if (float2 == 151.456f)		ok |= 1 &lt;&lt; 28;	if (float3 == 152.456f)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest062	&lt;test&gt;	| result |	result := self interface test062: 1.2345678901235d8 with: 2.2345678901235d8 with: 3.2345678901235d8 with: 4.2345678901235d8 with: 5.2345678901235d8 with: 6.2345678901235d8 with: 7.2345678901235d8 with: 8.2345678901235d8 with: 9.2345678901235d8 with: 1.0234567890124d9 with: 1.1234567890124d9 with: 1.2234567890123d9 with: 1.3234567890124d9 with: 1.4234567890124d9 with: 1.5234567890123d9 with: 1.6234567890124d9 with: 1.7234567890123d9 with: 1.8234567890124d9 with: 1.9234567890124d9 with: 2.0234567890124d9 with: 2.1234567890124d9 with: 2.2234567890124d9 with: 2.3234567890124d9 with: 2.4234567890124d9 with: 2.5234567890124d9 with: 2.6234567890124d9 with: 2.7234567890124d9 with: 2.8234567890124d9 with: 2.9234567890124d9 with: 3.0234567890124d9.	1073741823 = result ifFalse:		[self message: 'test062 failed']"unsigned longtest062(double doubleA, double doubleB, double doubleC, double doubleD, double doubleE, double doubleF, double doubleG, double doubleH, double doubleI, double doubleJ, double doubleK, double doubleL, double doubleM, double doubleN, double doubleO, double doubleP, double doubleQ, double doubleR, double doubleS, double doubleT, double doubleU, double doubleV, double doubleW, double doubleX, double doubleY, double doubleZ, double double0, double double1, double double2, double double3){	unsigned long ok = 0;	if (fabs(doubleA - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= 1 &lt;&lt; 0;	if (fabs(doubleB - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= 1 &lt;&lt; 1;	if (fabs(doubleC - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= 1 &lt;&lt; 2;	if (fabs(doubleD - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= 1 &lt;&lt; 3;	if (fabs(doubleE - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= 1 &lt;&lt; 4;	if (fabs(doubleF - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= 1 &lt;&lt; 5;	if (fabs(doubleG - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= 1 &lt;&lt; 6;	if (fabs(doubleH - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= 1 &lt;&lt; 7;	if (fabs(doubleI - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= 1 &lt;&lt; 8;	if (fabs(doubleJ - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 9;	if (fabs(doubleK - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 10;	if (fabs(doubleL - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 11;	if (fabs(doubleM - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 12;	if (fabs(doubleN - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 13;	if (fabs(doubleO - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 14;	if (fabs(doubleP - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 15;	if (fabs(doubleQ - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 16;	if (fabs(doubleR - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 17;	if (fabs(doubleS - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= 1 &lt;&lt; 18;	if (fabs(doubleT - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 19;	if (fabs(doubleU - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 20;	if (fabs(doubleV - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 21;	if (fabs(doubleW - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 22;	if (fabs(doubleX - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 23;	if (fabs(doubleY - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 24;	if (fabs(doubleZ - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 25;	if (fabs(double0 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 26;	if (fabs(double1 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 27;	if (fabs(double2 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= 1 &lt;&lt; 28;	if (fabs(double3 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest063	&lt;test&gt;	| result charStruct charStructA |	charStruct := self interface charStruct.	charStructA := self interface charStructA.	result := self interface test063: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct with: charStructA with: charStruct.	1073741823 = result ifFalse:		[self message: 'test063 failed']"unsigned longtest063(CharStruct charStructA, CharStruct charStructB, CharStruct charStructC, CharStruct charStructD, CharStruct charStructE, CharStruct charStructF, CharStruct charStructG, CharStruct charStructH, CharStruct charStructI, CharStruct charStructJ, CharStruct charStructK, CharStruct charStructL, CharStruct charStructM, CharStruct charStructN, CharStruct charStructO, CharStruct charStructP, CharStruct charStructQ, CharStruct charStructR, CharStruct charStructS, CharStruct charStructT, CharStruct charStructU, CharStruct charStructV, CharStruct charStructW, CharStruct charStructX, CharStruct charStructY, CharStruct charStructZ, CharStruct charStruct0, CharStruct charStruct1, CharStruct charStruct2, CharStruct charStruct3){	unsigned long ok = 0;	if (charStructA.aChar == -93)		ok |= 1 &lt;&lt; 0;	if (charStructB.aChar == -94)		ok |= 1 &lt;&lt; 1;	if (charStructC.aChar == -93)		ok |= 1 &lt;&lt; 2;	if (charStructD.aChar == -94)		ok |= 1 &lt;&lt; 3;	if (charStructE.aChar == -93)		ok |= 1 &lt;&lt; 4;	if (charStructF.aChar == -94)		ok |= 1 &lt;&lt; 5;	if (charStructG.aChar == -93)		ok |= 1 &lt;&lt; 6;	if (charStructH.aChar == -94)		ok |= 1 &lt;&lt; 7;	if (charStructI.aChar == -93)		ok |= 1 &lt;&lt; 8;	if (charStructJ.aChar == -94)		ok |= 1 &lt;&lt; 9;	if (charStructK.aChar == -93)		ok |= 1 &lt;&lt; 10;	if (charStructL.aChar == -94)		ok |= 1 &lt;&lt; 11;	if (charStructM.aChar == -93)		ok |= 1 &lt;&lt; 12;	if (charStructN.aChar == -94)		ok |= 1 &lt;&lt; 13;	if (charStructO.aChar == -93)		ok |= 1 &lt;&lt; 14;	if (charStructP.aChar == -94)		ok |= 1 &lt;&lt; 15;	if (charStructQ.aChar == -93)		ok |= 1 &lt;&lt; 16;	if (charStructR.aChar == -94)		ok |= 1 &lt;&lt; 17;	if (charStructS.aChar == -93)		ok |= 1 &lt;&lt; 18;	if (charStructT.aChar == -94)		ok |= 1 &lt;&lt; 19;	if (charStructU.aChar == -93)		ok |= 1 &lt;&lt; 20;	if (charStructV.aChar == -94)		ok |= 1 &lt;&lt; 21;	if (charStructW.aChar == -93)		ok |= 1 &lt;&lt; 22;	if (charStructX.aChar == -94)		ok |= 1 &lt;&lt; 23;	if (charStructY.aChar == -93)		ok |= 1 &lt;&lt; 24;	if (charStructZ.aChar == -94)		ok |= 1 &lt;&lt; 25;	if (charStruct0.aChar == -93)		ok |= 1 &lt;&lt; 26;	if (charStruct1.aChar == -94)		ok |= 1 &lt;&lt; 27;	if (charStruct2.aChar == -93)		ok |= 1 &lt;&lt; 28;	if (charStruct3.aChar == -94)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest064	&lt;test&gt;	| result smallStruct smallStructA |	smallStruct := self interface smallStruct.	smallStructA := self interface smallStructA.	result := self interface test064: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct with: smallStructA with: smallStruct.	1073741823 = result ifFalse:		[self message: 'test064 failed']"unsigned longtest064(SmallStruct smallStructA, SmallStruct smallStructB, SmallStruct smallStructC, SmallStruct smallStructD, SmallStruct smallStructE, SmallStruct smallStructF, SmallStruct smallStructG, SmallStruct smallStructH, SmallStruct smallStructI, SmallStruct smallStructJ, SmallStruct smallStructK, SmallStruct smallStructL, SmallStruct smallStructM, SmallStruct smallStructN, SmallStruct smallStructO, SmallStruct smallStructP, SmallStruct smallStructQ, SmallStruct smallStructR, SmallStruct smallStructS, SmallStruct smallStructT, SmallStruct smallStructU, SmallStruct smallStructV, SmallStruct smallStructW, SmallStruct smallStructX, SmallStruct smallStructY, SmallStruct smallStructZ, SmallStruct smallStruct0, SmallStruct smallStruct1, SmallStruct smallStruct2, SmallStruct smallStruct3){	unsigned long ok = 0;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= 1 &lt;&lt; 0;	if (smallStructB.aShort == -12345	 &amp;&amp; smallStructB.aUChar == 99	 &amp;&amp; smallStructB.aUShort == 12345)		ok |= 1 &lt;&lt; 1;	if (smallStructC.aShort == -12344	 &amp;&amp; smallStructC.aUChar == 100	 &amp;&amp; smallStructC.aUShort == 12346)		ok |= 1 &lt;&lt; 2;	if (smallStructD.aShort == -12345	 &amp;&amp; smallStructD.aUChar == 99	 &amp;&amp; smallStructD.aUShort == 12345)		ok |= 1 &lt;&lt; 3;	if (smallStructE.aShort == -12344	 &amp;&amp; smallStructE.aUChar == 100	 &amp;&amp; smallStructE.aUShort == 12346)		ok |= 1 &lt;&lt; 4;	if (smallStructF.aShort == -12345	 &amp;&amp; smallStructF.aUChar == 99	 &amp;&amp; smallStructF.aUShort == 12345)		ok |= 1 &lt;&lt; 5;	if (smallStructG.aShort == -12344	 &amp;&amp; smallStructG.aUChar == 100	 &amp;&amp; smallStructG.aUShort == 12346)		ok |= 1 &lt;&lt; 6;	if (smallStructH.aShort == -12345	 &amp;&amp; smallStructH.aUChar == 99	 &amp;&amp; smallStructH.aUShort == 12345)		ok |= 1 &lt;&lt; 7;	if (smallStructI.aShort == -12344	 &amp;&amp; smallStructI.aUChar == 100	 &amp;&amp; smallStructI.aUShort == 12346)		ok |= 1 &lt;&lt; 8;	if (smallStructJ.aShort == -12345	 &amp;&amp; smallStructJ.aUChar == 99	 &amp;&amp; smallStructJ.aUShort == 12345)		ok |= 1 &lt;&lt; 9;	if (smallStructK.aShort == -12344	 &amp;&amp; smallStructK.aUChar == 100	 &amp;&amp; smallStructK.aUShort == 12346)		ok |= 1 &lt;&lt; 10;	if (smallStructL.aShort == -12345	 &amp;&amp; smallStructL.aUChar == 99	 &amp;&amp; smallStructL.aUShort == 12345)		ok |= 1 &lt;&lt; 11;	if (smallStructM.aShort == -12344	 &amp;&amp; smallStructM.aUChar == 100	 &amp;&amp; smallStructM.aUShort == 12346)		ok |= 1 &lt;&lt; 12;	if (smallStructN.aShort == -12345	 &amp;&amp; smallStructN.aUChar == 99	 &amp;&amp; smallStructN.aUShort == 12345)		ok |= 1 &lt;&lt; 13;	if (smallStructO.aShort == -12344	 &amp;&amp; smallStructO.aUChar == 100	 &amp;&amp; smallStructO.aUShort == 12346)		ok |= 1 &lt;&lt; 14;	if (smallStructP.aShort == -12345	 &amp;&amp; smallStructP.aUChar == 99	 &amp;&amp; smallStructP.aUShort == 12345)		ok |= 1 &lt;&lt; 15;	if (smallStructQ.aShort == -12344	 &amp;&amp; smallStructQ.aUChar == 100	 &amp;&amp; smallStructQ.aUShort == 12346)		ok |= 1 &lt;&lt; 16;	if (smallStructR.aShort == -12345	 &amp;&amp; smallStructR.aUChar == 99	 &amp;&amp; smallStructR.aUShort == 12345)		ok |= 1 &lt;&lt; 17;	if (smallStructS.aShort == -12344	 &amp;&amp; smallStructS.aUChar == 100	 &amp;&amp; smallStructS.aUShort == 12346)		ok |= 1 &lt;&lt; 18;	if (smallStructT.aShort == -12345	 &amp;&amp; smallStructT.aUChar == 99	 &amp;&amp; smallStructT.aUShort == 12345)		ok |= 1 &lt;&lt; 19;	if (smallStructU.aShort == -12344	 &amp;&amp; smallStructU.aUChar == 100	 &amp;&amp; smallStructU.aUShort == 12346)		ok |= 1 &lt;&lt; 20;	if (smallStructV.aShort == -12345	 &amp;&amp; smallStructV.aUChar == 99	 &amp;&amp; smallStructV.aUShort == 12345)		ok |= 1 &lt;&lt; 21;	if (smallStructW.aShort == -12344	 &amp;&amp; smallStructW.aUChar == 100	 &amp;&amp; smallStructW.aUShort == 12346)		ok |= 1 &lt;&lt; 22;	if (smallStructX.aShort == -12345	 &amp;&amp; smallStructX.aUChar == 99	 &amp;&amp; smallStructX.aUShort == 12345)		ok |= 1 &lt;&lt; 23;	if (smallStructY.aShort == -12344	 &amp;&amp; smallStructY.aUChar == 100	 &amp;&amp; smallStructY.aUShort == 12346)		ok |= 1 &lt;&lt; 24;	if (smallStructZ.aShort == -12345	 &amp;&amp; smallStructZ.aUChar == 99	 &amp;&amp; smallStructZ.aUShort == 12345)		ok |= 1 &lt;&lt; 25;	if (smallStruct0.aShort == -12344	 &amp;&amp; smallStruct0.aUChar == 100	 &amp;&amp; smallStruct0.aUShort == 12346)		ok |= 1 &lt;&lt; 26;	if (smallStruct1.aShort == -12345	 &amp;&amp; smallStruct1.aUChar == 99	 &amp;&amp; smallStruct1.aUShort == 12345)		ok |= 1 &lt;&lt; 27;	if (smallStruct2.aShort == -12344	 &amp;&amp; smallStruct2.aUChar == 100	 &amp;&amp; smallStruct2.aUShort == 12346)		ok |= 1 &lt;&lt; 28;	if (smallStruct3.aShort == -12345	 &amp;&amp; smallStruct3.aUChar == 99	 &amp;&amp; smallStruct3.aUShort == 12345)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest065	&lt;test&gt;	| result mediumStruct mediumStructA |	mediumStruct := self interface mediumStruct.	mediumStructA := self interface mediumStructA.	result := self interface test065: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct with: mediumStructA with: mediumStruct.	1073741823 = result ifFalse:		[self message: 'test065 failed']"unsigned longtest065(MediumStruct mediumStructA, MediumStruct mediumStructB, MediumStruct mediumStructC, MediumStruct mediumStructD, MediumStruct mediumStructE, MediumStruct mediumStructF, MediumStruct mediumStructG, MediumStruct mediumStructH, MediumStruct mediumStructI, MediumStruct mediumStructJ, MediumStruct mediumStructK, MediumStruct mediumStructL, MediumStruct mediumStructM, MediumStruct mediumStructN, MediumStruct mediumStructO, MediumStruct mediumStructP, MediumStruct mediumStructQ, MediumStruct mediumStructR, MediumStruct mediumStructS, MediumStruct mediumStructT, MediumStruct mediumStructU, MediumStruct mediumStructV, MediumStruct mediumStructW, MediumStruct mediumStructX, MediumStruct mediumStructY, MediumStruct mediumStructZ, MediumStruct mediumStruct0, MediumStruct mediumStruct1, MediumStruct mediumStruct2, MediumStruct mediumStruct3){	unsigned long ok = 0;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= 1 &lt;&lt; 0;	if (mediumStructB.anInt == -1234567890	 &amp;&amp; mediumStructB.aFloat == 123.456f)		ok |= 1 &lt;&lt; 1;	if (mediumStructC.anInt == -1234567889	 &amp;&amp; mediumStructC.aFloat == 124.456f)		ok |= 1 &lt;&lt; 2;	if (mediumStructD.anInt == -1234567890	 &amp;&amp; mediumStructD.aFloat == 123.456f)		ok |= 1 &lt;&lt; 3;	if (mediumStructE.anInt == -1234567889	 &amp;&amp; mediumStructE.aFloat == 124.456f)		ok |= 1 &lt;&lt; 4;	if (mediumStructF.anInt == -1234567890	 &amp;&amp; mediumStructF.aFloat == 123.456f)		ok |= 1 &lt;&lt; 5;	if (mediumStructG.anInt == -1234567889	 &amp;&amp; mediumStructG.aFloat == 124.456f)		ok |= 1 &lt;&lt; 6;	if (mediumStructH.anInt == -1234567890	 &amp;&amp; mediumStructH.aFloat == 123.456f)		ok |= 1 &lt;&lt; 7;	if (mediumStructI.anInt == -1234567889	 &amp;&amp; mediumStructI.aFloat == 124.456f)		ok |= 1 &lt;&lt; 8;	if (mediumStructJ.anInt == -1234567890	 &amp;&amp; mediumStructJ.aFloat == 123.456f)		ok |= 1 &lt;&lt; 9;	if (mediumStructK.anInt == -1234567889	 &amp;&amp; mediumStructK.aFloat == 124.456f)		ok |= 1 &lt;&lt; 10;	if (mediumStructL.anInt == -1234567890	 &amp;&amp; mediumStructL.aFloat == 123.456f)		ok |= 1 &lt;&lt; 11;	if (mediumStructM.anInt == -1234567889	 &amp;&amp; mediumStructM.aFloat == 124.456f)		ok |= 1 &lt;&lt; 12;	if (mediumStructN.anInt == -1234567890	 &amp;&amp; mediumStructN.aFloat == 123.456f)		ok |= 1 &lt;&lt; 13;	if (mediumStructO.anInt == -1234567889	 &amp;&amp; mediumStructO.aFloat == 124.456f)		ok |= 1 &lt;&lt; 14;	if (mediumStructP.anInt == -1234567890	 &amp;&amp; mediumStructP.aFloat == 123.456f)		ok |= 1 &lt;&lt; 15;	if (mediumStructQ.anInt == -1234567889	 &amp;&amp; mediumStructQ.aFloat == 124.456f)		ok |= 1 &lt;&lt; 16;	if (mediumStructR.anInt == -1234567890	 &amp;&amp; mediumStructR.aFloat == 123.456f)		ok |= 1 &lt;&lt; 17;	if (mediumStructS.anInt == -1234567889	 &amp;&amp; mediumStructS.aFloat == 124.456f)		ok |= 1 &lt;&lt; 18;	if (mediumStructT.anInt == -1234567890	 &amp;&amp; mediumStructT.aFloat == 123.456f)		ok |= 1 &lt;&lt; 19;	if (mediumStructU.anInt == -1234567889	 &amp;&amp; mediumStructU.aFloat == 124.456f)		ok |= 1 &lt;&lt; 20;	if (mediumStructV.anInt == -1234567890	 &amp;&amp; mediumStructV.aFloat == 123.456f)		ok |= 1 &lt;&lt; 21;	if (mediumStructW.anInt == -1234567889	 &amp;&amp; mediumStructW.aFloat == 124.456f)		ok |= 1 &lt;&lt; 22;	if (mediumStructX.anInt == -1234567890	 &amp;&amp; mediumStructX.aFloat == 123.456f)		ok |= 1 &lt;&lt; 23;	if (mediumStructY.anInt == -1234567889	 &amp;&amp; mediumStructY.aFloat == 124.456f)		ok |= 1 &lt;&lt; 24;	if (mediumStructZ.anInt == -1234567890	 &amp;&amp; mediumStructZ.aFloat == 123.456f)		ok |= 1 &lt;&lt; 25;	if (mediumStruct0.anInt == -1234567889	 &amp;&amp; mediumStruct0.aFloat == 124.456f)		ok |= 1 &lt;&lt; 26;	if (mediumStruct1.anInt == -1234567890	 &amp;&amp; mediumStruct1.aFloat == 123.456f)		ok |= 1 &lt;&lt; 27;	if (mediumStruct2.anInt == -1234567889	 &amp;&amp; mediumStruct2.aFloat == 124.456f)		ok |= 1 &lt;&lt; 28;	if (mediumStruct3.anInt == -1234567890	 &amp;&amp; mediumStruct3.aFloat == 123.456f)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest066	&lt;test&gt;	| result largeStruct largeStructA |	largeStruct := self interface largeStruct.	largeStructA := self interface largeStructA.	result := self interface test066: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct with: largeStructA with: largeStruct.	1073741823 = result ifFalse:		[self message: 'test066 failed']"unsigned longtest066(LargeStruct largeStructA, LargeStruct largeStructB, LargeStruct largeStructC, LargeStruct largeStructD, LargeStruct largeStructE, LargeStruct largeStructF, LargeStruct largeStructG, LargeStruct largeStructH, LargeStruct largeStructI, LargeStruct largeStructJ, LargeStruct largeStructK, LargeStruct largeStructL, LargeStruct largeStructM, LargeStruct largeStructN, LargeStruct largeStructO, LargeStruct largeStructP, LargeStruct largeStructQ, LargeStruct largeStructR, LargeStruct largeStructS, LargeStruct largeStructT, LargeStruct largeStructU, LargeStruct largeStructV, LargeStruct largeStructW, LargeStruct largeStructX, LargeStruct largeStructY, LargeStruct largeStructZ, LargeStruct largeStruct0, LargeStruct largeStruct1, LargeStruct largeStruct2, LargeStruct largeStruct3){	unsigned long ok = 0;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= 1 &lt;&lt; 0;	if (largeStructB.aLong == -1234567890L	 &amp;&amp; largeStructB.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructB.aULong == 1234567890U	 &amp;&amp; largeStructB.aFloat == 123.456f)		ok |= 1 &lt;&lt; 1;	if (largeStructC.aLong == -1234567889L	 &amp;&amp; largeStructC.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructC.aULong == 1234567891U	 &amp;&amp; largeStructC.aFloat == 124.456f)		ok |= 1 &lt;&lt; 2;	if (largeStructD.aLong == -1234567890L	 &amp;&amp; largeStructD.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructD.aULong == 1234567890U	 &amp;&amp; largeStructD.aFloat == 123.456f)		ok |= 1 &lt;&lt; 3;	if (largeStructE.aLong == -1234567889L	 &amp;&amp; largeStructE.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructE.aULong == 1234567891U	 &amp;&amp; largeStructE.aFloat == 124.456f)		ok |= 1 &lt;&lt; 4;	if (largeStructF.aLong == -1234567890L	 &amp;&amp; largeStructF.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructF.aULong == 1234567890U	 &amp;&amp; largeStructF.aFloat == 123.456f)		ok |= 1 &lt;&lt; 5;	if (largeStructG.aLong == -1234567889L	 &amp;&amp; largeStructG.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructG.aULong == 1234567891U	 &amp;&amp; largeStructG.aFloat == 124.456f)		ok |= 1 &lt;&lt; 6;	if (largeStructH.aLong == -1234567890L	 &amp;&amp; largeStructH.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructH.aULong == 1234567890U	 &amp;&amp; largeStructH.aFloat == 123.456f)		ok |= 1 &lt;&lt; 7;	if (largeStructI.aLong == -1234567889L	 &amp;&amp; largeStructI.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructI.aULong == 1234567891U	 &amp;&amp; largeStructI.aFloat == 124.456f)		ok |= 1 &lt;&lt; 8;	if (largeStructJ.aLong == -1234567890L	 &amp;&amp; largeStructJ.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructJ.aULong == 1234567890U	 &amp;&amp; largeStructJ.aFloat == 123.456f)		ok |= 1 &lt;&lt; 9;	if (largeStructK.aLong == -1234567889L	 &amp;&amp; largeStructK.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructK.aULong == 1234567891U	 &amp;&amp; largeStructK.aFloat == 124.456f)		ok |= 1 &lt;&lt; 10;	if (largeStructL.aLong == -1234567890L	 &amp;&amp; largeStructL.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructL.aULong == 1234567890U	 &amp;&amp; largeStructL.aFloat == 123.456f)		ok |= 1 &lt;&lt; 11;	if (largeStructM.aLong == -1234567889L	 &amp;&amp; largeStructM.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructM.aULong == 1234567891U	 &amp;&amp; largeStructM.aFloat == 124.456f)		ok |= 1 &lt;&lt; 12;	if (largeStructN.aLong == -1234567890L	 &amp;&amp; largeStructN.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructN.aULong == 1234567890U	 &amp;&amp; largeStructN.aFloat == 123.456f)		ok |= 1 &lt;&lt; 13;	if (largeStructO.aLong == -1234567889L	 &amp;&amp; largeStructO.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructO.aULong == 1234567891U	 &amp;&amp; largeStructO.aFloat == 124.456f)		ok |= 1 &lt;&lt; 14;	if (largeStructP.aLong == -1234567890L	 &amp;&amp; largeStructP.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructP.aULong == 1234567890U	 &amp;&amp; largeStructP.aFloat == 123.456f)		ok |= 1 &lt;&lt; 15;	if (largeStructQ.aLong == -1234567889L	 &amp;&amp; largeStructQ.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructQ.aULong == 1234567891U	 &amp;&amp; largeStructQ.aFloat == 124.456f)		ok |= 1 &lt;&lt; 16;	if (largeStructR.aLong == -1234567890L	 &amp;&amp; largeStructR.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructR.aULong == 1234567890U	 &amp;&amp; largeStructR.aFloat == 123.456f)		ok |= 1 &lt;&lt; 17;	if (largeStructS.aLong == -1234567889L	 &amp;&amp; largeStructS.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructS.aULong == 1234567891U	 &amp;&amp; largeStructS.aFloat == 124.456f)		ok |= 1 &lt;&lt; 18;	if (largeStructT.aLong == -1234567890L	 &amp;&amp; largeStructT.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructT.aULong == 1234567890U	 &amp;&amp; largeStructT.aFloat == 123.456f)		ok |= 1 &lt;&lt; 19;	if (largeStructU.aLong == -1234567889L	 &amp;&amp; largeStructU.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructU.aULong == 1234567891U	 &amp;&amp; largeStructU.aFloat == 124.456f)		ok |= 1 &lt;&lt; 20;	if (largeStructV.aLong == -1234567890L	 &amp;&amp; largeStructV.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructV.aULong == 1234567890U	 &amp;&amp; largeStructV.aFloat == 123.456f)		ok |= 1 &lt;&lt; 21;	if (largeStructW.aLong == -1234567889L	 &amp;&amp; largeStructW.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructW.aULong == 1234567891U	 &amp;&amp; largeStructW.aFloat == 124.456f)		ok |= 1 &lt;&lt; 22;	if (largeStructX.aLong == -1234567890L	 &amp;&amp; largeStructX.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructX.aULong == 1234567890U	 &amp;&amp; largeStructX.aFloat == 123.456f)		ok |= 1 &lt;&lt; 23;	if (largeStructY.aLong == -1234567889L	 &amp;&amp; largeStructY.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructY.aULong == 1234567891U	 &amp;&amp; largeStructY.aFloat == 124.456f)		ok |= 1 &lt;&lt; 24;	if (largeStructZ.aLong == -1234567890L	 &amp;&amp; largeStructZ.aDouble == 1.2345678901235e8	 &amp;&amp; largeStructZ.aULong == 1234567890U	 &amp;&amp; largeStructZ.aFloat == 123.456f)		ok |= 1 &lt;&lt; 25;	if (largeStruct0.aLong == -1234567889L	 &amp;&amp; largeStruct0.aDouble == 2.2345678901235e8	 &amp;&amp; largeStruct0.aULong == 1234567891U	 &amp;&amp; largeStruct0.aFloat == 124.456f)		ok |= 1 &lt;&lt; 26;	if (largeStruct1.aLong == -1234567890L	 &amp;&amp; largeStruct1.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct1.aULong == 1234567890U	 &amp;&amp; largeStruct1.aFloat == 123.456f)		ok |= 1 &lt;&lt; 27;	if (largeStruct2.aLong == -1234567889L	 &amp;&amp; largeStruct2.aDouble == 2.2345678901235e8	 &amp;&amp; largeStruct2.aULong == 1234567891U	 &amp;&amp; largeStruct2.aFloat == 124.456f)		ok |= 1 &lt;&lt; 28;	if (largeStruct3.aLong == -1234567890L	 &amp;&amp; largeStruct3.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct3.aULong == 1234567890U	 &amp;&amp; largeStruct3.aFloat == 123.456f)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest067	&lt;test&gt;	| result bigStruct bigStructA |	bigStruct := self interface bigStruct.	bigStructA := self interface bigStructA.	result := self interface test067: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct with: bigStructA with: bigStruct.	1073741823 = result ifFalse:		[self message: 'test067 failed']"unsigned longtest067(BigStruct bigStructA, BigStruct bigStructB, BigStruct bigStructC, BigStruct bigStructD, BigStruct bigStructE, BigStruct bigStructF, BigStruct bigStructG, BigStruct bigStructH, BigStruct bigStructI, BigStruct bigStructJ, BigStruct bigStructK, BigStruct bigStructL, BigStruct bigStructM, BigStruct bigStructN, BigStruct bigStructO, BigStruct bigStructP, BigStruct bigStructQ, BigStruct bigStructR, BigStruct bigStructS, BigStruct bigStructT, BigStruct bigStructU, BigStruct bigStructV, BigStruct bigStructW, BigStruct bigStructX, BigStruct bigStructY, BigStruct bigStructZ, BigStruct bigStruct0, BigStruct bigStruct1, BigStruct bigStruct2, BigStruct bigStruct3){	unsigned long ok = 0;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 0;	if (bigStructB.aChar == -94	 &amp;&amp; bigStructB.aUChar == 99	 &amp;&amp; bigStructB.aShort == -12345	 &amp;&amp; bigStructB.aUShort == 12345	 &amp;&amp; bigStructB.anInt == -1234567890	 &amp;&amp; bigStructB.aUInt == 1234567890	 &amp;&amp; bigStructB.aLong == -1234567890L	 &amp;&amp; bigStructB.aULong == 1234567890U	 &amp;&amp; bigStructB.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructB.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructB.aFloat == 123.456f	 &amp;&amp; bigStructB.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructB.charStruct.aChar == -94	 &amp;&amp; bigStructB.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 1;	if (bigStructC.aChar == -93	 &amp;&amp; bigStructC.aUChar == 100	 &amp;&amp; bigStructC.aShort == -12344	 &amp;&amp; bigStructC.aUShort == 12346	 &amp;&amp; bigStructC.anInt == -1234567889	 &amp;&amp; bigStructC.aUInt == 1234567891	 &amp;&amp; bigStructC.aLong == -1234567889L	 &amp;&amp; bigStructC.aULong == 1234567891U	 &amp;&amp; bigStructC.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructC.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructC.aFloat == 124.456f	 &amp;&amp; bigStructC.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructC.charStruct.aChar == -93	 &amp;&amp; bigStructC.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 2;	if (bigStructD.aChar == -94	 &amp;&amp; bigStructD.aUChar == 99	 &amp;&amp; bigStructD.aShort == -12345	 &amp;&amp; bigStructD.aUShort == 12345	 &amp;&amp; bigStructD.anInt == -1234567890	 &amp;&amp; bigStructD.aUInt == 1234567890	 &amp;&amp; bigStructD.aLong == -1234567890L	 &amp;&amp; bigStructD.aULong == 1234567890U	 &amp;&amp; bigStructD.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructD.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructD.aFloat == 123.456f	 &amp;&amp; bigStructD.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructD.charStruct.aChar == -94	 &amp;&amp; bigStructD.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 3;	if (bigStructE.aChar == -93	 &amp;&amp; bigStructE.aUChar == 100	 &amp;&amp; bigStructE.aShort == -12344	 &amp;&amp; bigStructE.aUShort == 12346	 &amp;&amp; bigStructE.anInt == -1234567889	 &amp;&amp; bigStructE.aUInt == 1234567891	 &amp;&amp; bigStructE.aLong == -1234567889L	 &amp;&amp; bigStructE.aULong == 1234567891U	 &amp;&amp; bigStructE.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructE.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructE.aFloat == 124.456f	 &amp;&amp; bigStructE.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructE.charStruct.aChar == -93	 &amp;&amp; bigStructE.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 4;	if (bigStructF.aChar == -94	 &amp;&amp; bigStructF.aUChar == 99	 &amp;&amp; bigStructF.aShort == -12345	 &amp;&amp; bigStructF.aUShort == 12345	 &amp;&amp; bigStructF.anInt == -1234567890	 &amp;&amp; bigStructF.aUInt == 1234567890	 &amp;&amp; bigStructF.aLong == -1234567890L	 &amp;&amp; bigStructF.aULong == 1234567890U	 &amp;&amp; bigStructF.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructF.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructF.aFloat == 123.456f	 &amp;&amp; bigStructF.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructF.charStruct.aChar == -94	 &amp;&amp; bigStructF.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 5;	if (bigStructG.aChar == -93	 &amp;&amp; bigStructG.aUChar == 100	 &amp;&amp; bigStructG.aShort == -12344	 &amp;&amp; bigStructG.aUShort == 12346	 &amp;&amp; bigStructG.anInt == -1234567889	 &amp;&amp; bigStructG.aUInt == 1234567891	 &amp;&amp; bigStructG.aLong == -1234567889L	 &amp;&amp; bigStructG.aULong == 1234567891U	 &amp;&amp; bigStructG.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructG.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructG.aFloat == 124.456f	 &amp;&amp; bigStructG.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructG.charStruct.aChar == -93	 &amp;&amp; bigStructG.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 6;	if (bigStructH.aChar == -94	 &amp;&amp; bigStructH.aUChar == 99	 &amp;&amp; bigStructH.aShort == -12345	 &amp;&amp; bigStructH.aUShort == 12345	 &amp;&amp; bigStructH.anInt == -1234567890	 &amp;&amp; bigStructH.aUInt == 1234567890	 &amp;&amp; bigStructH.aLong == -1234567890L	 &amp;&amp; bigStructH.aULong == 1234567890U	 &amp;&amp; bigStructH.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructH.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructH.aFloat == 123.456f	 &amp;&amp; bigStructH.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructH.charStruct.aChar == -94	 &amp;&amp; bigStructH.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 7;	if (bigStructI.aChar == -93	 &amp;&amp; bigStructI.aUChar == 100	 &amp;&amp; bigStructI.aShort == -12344	 &amp;&amp; bigStructI.aUShort == 12346	 &amp;&amp; bigStructI.anInt == -1234567889	 &amp;&amp; bigStructI.aUInt == 1234567891	 &amp;&amp; bigStructI.aLong == -1234567889L	 &amp;&amp; bigStructI.aULong == 1234567891U	 &amp;&amp; bigStructI.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructI.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructI.aFloat == 124.456f	 &amp;&amp; bigStructI.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructI.charStruct.aChar == -93	 &amp;&amp; bigStructI.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 8;	if (bigStructJ.aChar == -94	 &amp;&amp; bigStructJ.aUChar == 99	 &amp;&amp; bigStructJ.aShort == -12345	 &amp;&amp; bigStructJ.aUShort == 12345	 &amp;&amp; bigStructJ.anInt == -1234567890	 &amp;&amp; bigStructJ.aUInt == 1234567890	 &amp;&amp; bigStructJ.aLong == -1234567890L	 &amp;&amp; bigStructJ.aULong == 1234567890U	 &amp;&amp; bigStructJ.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructJ.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructJ.aFloat == 123.456f	 &amp;&amp; bigStructJ.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructJ.charStruct.aChar == -94	 &amp;&amp; bigStructJ.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 9;	if (bigStructK.aChar == -93	 &amp;&amp; bigStructK.aUChar == 100	 &amp;&amp; bigStructK.aShort == -12344	 &amp;&amp; bigStructK.aUShort == 12346	 &amp;&amp; bigStructK.anInt == -1234567889	 &amp;&amp; bigStructK.aUInt == 1234567891	 &amp;&amp; bigStructK.aLong == -1234567889L	 &amp;&amp; bigStructK.aULong == 1234567891U	 &amp;&amp; bigStructK.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructK.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructK.aFloat == 124.456f	 &amp;&amp; bigStructK.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructK.charStruct.aChar == -93	 &amp;&amp; bigStructK.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 10;	if (bigStructL.aChar == -94	 &amp;&amp; bigStructL.aUChar == 99	 &amp;&amp; bigStructL.aShort == -12345	 &amp;&amp; bigStructL.aUShort == 12345	 &amp;&amp; bigStructL.anInt == -1234567890	 &amp;&amp; bigStructL.aUInt == 1234567890	 &amp;&amp; bigStructL.aLong == -1234567890L	 &amp;&amp; bigStructL.aULong == 1234567890U	 &amp;&amp; bigStructL.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructL.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructL.aFloat == 123.456f	 &amp;&amp; bigStructL.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructL.charStruct.aChar == -94	 &amp;&amp; bigStructL.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 11;	if (bigStructM.aChar == -93	 &amp;&amp; bigStructM.aUChar == 100	 &amp;&amp; bigStructM.aShort == -12344	 &amp;&amp; bigStructM.aUShort == 12346	 &amp;&amp; bigStructM.anInt == -1234567889	 &amp;&amp; bigStructM.aUInt == 1234567891	 &amp;&amp; bigStructM.aLong == -1234567889L	 &amp;&amp; bigStructM.aULong == 1234567891U	 &amp;&amp; bigStructM.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructM.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructM.aFloat == 124.456f	 &amp;&amp; bigStructM.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructM.charStruct.aChar == -93	 &amp;&amp; bigStructM.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 12;	if (bigStructN.aChar == -94	 &amp;&amp; bigStructN.aUChar == 99	 &amp;&amp; bigStructN.aShort == -12345	 &amp;&amp; bigStructN.aUShort == 12345	 &amp;&amp; bigStructN.anInt == -1234567890	 &amp;&amp; bigStructN.aUInt == 1234567890	 &amp;&amp; bigStructN.aLong == -1234567890L	 &amp;&amp; bigStructN.aULong == 1234567890U	 &amp;&amp; bigStructN.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructN.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructN.aFloat == 123.456f	 &amp;&amp; bigStructN.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructN.charStruct.aChar == -94	 &amp;&amp; bigStructN.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 13;	if (bigStructO.aChar == -93	 &amp;&amp; bigStructO.aUChar == 100	 &amp;&amp; bigStructO.aShort == -12344	 &amp;&amp; bigStructO.aUShort == 12346	 &amp;&amp; bigStructO.anInt == -1234567889	 &amp;&amp; bigStructO.aUInt == 1234567891	 &amp;&amp; bigStructO.aLong == -1234567889L	 &amp;&amp; bigStructO.aULong == 1234567891U	 &amp;&amp; bigStructO.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructO.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructO.aFloat == 124.456f	 &amp;&amp; bigStructO.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructO.charStruct.aChar == -93	 &amp;&amp; bigStructO.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 14;	if (bigStructP.aChar == -94	 &amp;&amp; bigStructP.aUChar == 99	 &amp;&amp; bigStructP.aShort == -12345	 &amp;&amp; bigStructP.aUShort == 12345	 &amp;&amp; bigStructP.anInt == -1234567890	 &amp;&amp; bigStructP.aUInt == 1234567890	 &amp;&amp; bigStructP.aLong == -1234567890L	 &amp;&amp; bigStructP.aULong == 1234567890U	 &amp;&amp; bigStructP.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructP.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructP.aFloat == 123.456f	 &amp;&amp; bigStructP.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructP.charStruct.aChar == -94	 &amp;&amp; bigStructP.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 15;	if (bigStructQ.aChar == -93	 &amp;&amp; bigStructQ.aUChar == 100	 &amp;&amp; bigStructQ.aShort == -12344	 &amp;&amp; bigStructQ.aUShort == 12346	 &amp;&amp; bigStructQ.anInt == -1234567889	 &amp;&amp; bigStructQ.aUInt == 1234567891	 &amp;&amp; bigStructQ.aLong == -1234567889L	 &amp;&amp; bigStructQ.aULong == 1234567891U	 &amp;&amp; bigStructQ.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructQ.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructQ.aFloat == 124.456f	 &amp;&amp; bigStructQ.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructQ.charStruct.aChar == -93	 &amp;&amp; bigStructQ.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 16;	if (bigStructR.aChar == -94	 &amp;&amp; bigStructR.aUChar == 99	 &amp;&amp; bigStructR.aShort == -12345	 &amp;&amp; bigStructR.aUShort == 12345	 &amp;&amp; bigStructR.anInt == -1234567890	 &amp;&amp; bigStructR.aUInt == 1234567890	 &amp;&amp; bigStructR.aLong == -1234567890L	 &amp;&amp; bigStructR.aULong == 1234567890U	 &amp;&amp; bigStructR.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructR.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructR.aFloat == 123.456f	 &amp;&amp; bigStructR.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructR.charStruct.aChar == -94	 &amp;&amp; bigStructR.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 17;	if (bigStructS.aChar == -93	 &amp;&amp; bigStructS.aUChar == 100	 &amp;&amp; bigStructS.aShort == -12344	 &amp;&amp; bigStructS.aUShort == 12346	 &amp;&amp; bigStructS.anInt == -1234567889	 &amp;&amp; bigStructS.aUInt == 1234567891	 &amp;&amp; bigStructS.aLong == -1234567889L	 &amp;&amp; bigStructS.aULong == 1234567891U	 &amp;&amp; bigStructS.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructS.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructS.aFloat == 124.456f	 &amp;&amp; bigStructS.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructS.charStruct.aChar == -93	 &amp;&amp; bigStructS.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 18;	if (bigStructT.aChar == -94	 &amp;&amp; bigStructT.aUChar == 99	 &amp;&amp; bigStructT.aShort == -12345	 &amp;&amp; bigStructT.aUShort == 12345	 &amp;&amp; bigStructT.anInt == -1234567890	 &amp;&amp; bigStructT.aUInt == 1234567890	 &amp;&amp; bigStructT.aLong == -1234567890L	 &amp;&amp; bigStructT.aULong == 1234567890U	 &amp;&amp; bigStructT.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructT.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructT.aFloat == 123.456f	 &amp;&amp; bigStructT.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructT.charStruct.aChar == -94	 &amp;&amp; bigStructT.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 19;	if (bigStructU.aChar == -93	 &amp;&amp; bigStructU.aUChar == 100	 &amp;&amp; bigStructU.aShort == -12344	 &amp;&amp; bigStructU.aUShort == 12346	 &amp;&amp; bigStructU.anInt == -1234567889	 &amp;&amp; bigStructU.aUInt == 1234567891	 &amp;&amp; bigStructU.aLong == -1234567889L	 &amp;&amp; bigStructU.aULong == 1234567891U	 &amp;&amp; bigStructU.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructU.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructU.aFloat == 124.456f	 &amp;&amp; bigStructU.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructU.charStruct.aChar == -93	 &amp;&amp; bigStructU.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 20;	if (bigStructV.aChar == -94	 &amp;&amp; bigStructV.aUChar == 99	 &amp;&amp; bigStructV.aShort == -12345	 &amp;&amp; bigStructV.aUShort == 12345	 &amp;&amp; bigStructV.anInt == -1234567890	 &amp;&amp; bigStructV.aUInt == 1234567890	 &amp;&amp; bigStructV.aLong == -1234567890L	 &amp;&amp; bigStructV.aULong == 1234567890U	 &amp;&amp; bigStructV.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructV.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructV.aFloat == 123.456f	 &amp;&amp; bigStructV.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructV.charStruct.aChar == -94	 &amp;&amp; bigStructV.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 21;	if (bigStructW.aChar == -93	 &amp;&amp; bigStructW.aUChar == 100	 &amp;&amp; bigStructW.aShort == -12344	 &amp;&amp; bigStructW.aUShort == 12346	 &amp;&amp; bigStructW.anInt == -1234567889	 &amp;&amp; bigStructW.aUInt == 1234567891	 &amp;&amp; bigStructW.aLong == -1234567889L	 &amp;&amp; bigStructW.aULong == 1234567891U	 &amp;&amp; bigStructW.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructW.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructW.aFloat == 124.456f	 &amp;&amp; bigStructW.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructW.charStruct.aChar == -93	 &amp;&amp; bigStructW.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 22;	if (bigStructX.aChar == -94	 &amp;&amp; bigStructX.aUChar == 99	 &amp;&amp; bigStructX.aShort == -12345	 &amp;&amp; bigStructX.aUShort == 12345	 &amp;&amp; bigStructX.anInt == -1234567890	 &amp;&amp; bigStructX.aUInt == 1234567890	 &amp;&amp; bigStructX.aLong == -1234567890L	 &amp;&amp; bigStructX.aULong == 1234567890U	 &amp;&amp; bigStructX.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructX.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructX.aFloat == 123.456f	 &amp;&amp; bigStructX.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructX.charStruct.aChar == -94	 &amp;&amp; bigStructX.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 23;	if (bigStructY.aChar == -93	 &amp;&amp; bigStructY.aUChar == 100	 &amp;&amp; bigStructY.aShort == -12344	 &amp;&amp; bigStructY.aUShort == 12346	 &amp;&amp; bigStructY.anInt == -1234567889	 &amp;&amp; bigStructY.aUInt == 1234567891	 &amp;&amp; bigStructY.aLong == -1234567889L	 &amp;&amp; bigStructY.aULong == 1234567891U	 &amp;&amp; bigStructY.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructY.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructY.aFloat == 124.456f	 &amp;&amp; bigStructY.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructY.charStruct.aChar == -93	 &amp;&amp; bigStructY.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 24;	if (bigStructZ.aChar == -94	 &amp;&amp; bigStructZ.aUChar == 99	 &amp;&amp; bigStructZ.aShort == -12345	 &amp;&amp; bigStructZ.aUShort == 12345	 &amp;&amp; bigStructZ.anInt == -1234567890	 &amp;&amp; bigStructZ.aUInt == 1234567890	 &amp;&amp; bigStructZ.aLong == -1234567890L	 &amp;&amp; bigStructZ.aULong == 1234567890U	 &amp;&amp; bigStructZ.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStructZ.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStructZ.aFloat == 123.456f	 &amp;&amp; bigStructZ.aDouble == 1.2345678901235e8	 &amp;&amp; bigStructZ.charStruct.aChar == -94	 &amp;&amp; bigStructZ.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 25;	if (bigStruct0.aChar == -93	 &amp;&amp; bigStruct0.aUChar == 100	 &amp;&amp; bigStruct0.aShort == -12344	 &amp;&amp; bigStruct0.aUShort == 12346	 &amp;&amp; bigStruct0.anInt == -1234567889	 &amp;&amp; bigStruct0.aUInt == 1234567891	 &amp;&amp; bigStruct0.aLong == -1234567889L	 &amp;&amp; bigStruct0.aULong == 1234567891U	 &amp;&amp; bigStruct0.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStruct0.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStruct0.aFloat == 124.456f	 &amp;&amp; bigStruct0.aDouble == 2.2345678901235e8	 &amp;&amp; bigStruct0.charStruct.aChar == -93	 &amp;&amp; bigStruct0.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 26;	if (bigStruct1.aChar == -94	 &amp;&amp; bigStruct1.aUChar == 99	 &amp;&amp; bigStruct1.aShort == -12345	 &amp;&amp; bigStruct1.aUShort == 12345	 &amp;&amp; bigStruct1.anInt == -1234567890	 &amp;&amp; bigStruct1.aUInt == 1234567890	 &amp;&amp; bigStruct1.aLong == -1234567890L	 &amp;&amp; bigStruct1.aULong == 1234567890U	 &amp;&amp; bigStruct1.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct1.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct1.aFloat == 123.456f	 &amp;&amp; bigStruct1.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct1.charStruct.aChar == -94	 &amp;&amp; bigStruct1.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 27;	if (bigStruct2.aChar == -93	 &amp;&amp; bigStruct2.aUChar == 100	 &amp;&amp; bigStruct2.aShort == -12344	 &amp;&amp; bigStruct2.aUShort == 12346	 &amp;&amp; bigStruct2.anInt == -1234567889	 &amp;&amp; bigStruct2.aUInt == 1234567891	 &amp;&amp; bigStruct2.aLong == -1234567889L	 &amp;&amp; bigStruct2.aULong == 1234567891U	 &amp;&amp; bigStruct2.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStruct2.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStruct2.aFloat == 124.456f	 &amp;&amp; bigStruct2.aDouble == 2.2345678901235e8	 &amp;&amp; bigStruct2.charStruct.aChar == -93	 &amp;&amp; bigStruct2.smallStruct.aShort == -12344)		ok |= 1 &lt;&lt; 28;	if (bigStruct3.aChar == -94	 &amp;&amp; bigStruct3.aUChar == 99	 &amp;&amp; bigStruct3.aShort == -12345	 &amp;&amp; bigStruct3.aUShort == 12345	 &amp;&amp; bigStruct3.anInt == -1234567890	 &amp;&amp; bigStruct3.aUInt == 1234567890	 &amp;&amp; bigStruct3.aLong == -1234567890L	 &amp;&amp; bigStruct3.aULong == 1234567890U	 &amp;&amp; bigStruct3.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct3.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct3.aFloat == 123.456f	 &amp;&amp; bigStruct3.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct3.charStruct.aChar == -94	 &amp;&amp; bigStruct3.smallStruct.aShort == -12345)		ok |= 1 &lt;&lt; 29;	return ok;}"</body><body package="DLLCC Test Suite">runTest068	&lt;test&gt;	| result |	result := self interface test068: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA.	17179869183 = result ifFalse:		[self message: 'test068 failed']"unsigned long longtest068(signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA){	unsigned long long ok = C64(0);	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 0;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 1;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 2;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 3;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 4;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 5;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 6;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 7;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 8;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 9;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 11;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 12;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 13;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 14;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 15;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 16;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 17;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 18;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 19;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 20;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 21;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 22;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 23;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 24;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 25;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 26;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 28;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 29;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 30;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 31;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 32;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest069	&lt;test&gt;	| result |	result := self interface test069: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94.	17179869183 = result ifFalse:		[self message: 'test069 failed']"unsigned long longtest069(unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar){	unsigned long long ok = C64(0);	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 0;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 1;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 2;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 3;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 4;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 5;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 6;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 7;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 8;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 10;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 11;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 12;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 13;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 14;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 15;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 16;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 17;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 18;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 19;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 20;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 21;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 22;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 23;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 24;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 25;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 27;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 28;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 29;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 30;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 31;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 32;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest070	&lt;test&gt;	| result |	result := self interface test070: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99.	17179869183 = result ifFalse:		[self message: 'test070 failed']"unsigned long longtest070(short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar){	unsigned long long ok = C64(0);	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 0;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 1;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 2;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 3;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 4;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 5;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 6;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 7;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 9;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 10;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 11;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 12;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 13;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 14;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 15;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 16;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 17;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 18;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 19;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 20;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 21;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 22;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 23;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 24;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 26;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 27;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 28;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 29;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 30;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 31;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 32;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest071	&lt;test&gt;	| result |	result := self interface test071: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345.	17179869183 = result ifFalse:		[self message: 'test071 failed']"unsigned long longtest071(unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort){	unsigned long long ok = C64(0);	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 0;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 1;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 2;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 3;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 4;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 5;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 6;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 9;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 10;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 11;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 12;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 13;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 14;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 15;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 16;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 17;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 18;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 19;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 20;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 21;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 22;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 23;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 25;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 26;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 27;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 28;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 29;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 30;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 31;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 32;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest072	&lt;test&gt;	| result |	result := self interface test072: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345.	17179869183 = result ifFalse:		[self message: 'test072 failed']"unsigned long longtest072(int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort){	unsigned long long ok = C64(0);	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 0;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 1;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 2;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 3;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 4;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 5;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 8;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 9;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 10;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 11;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 12;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 13;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 14;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 15;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 16;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 17;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 18;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 19;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 20;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 21;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 22;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 24;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 25;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 26;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 27;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 28;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 29;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 30;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 31;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 32;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest073	&lt;test&gt;	| result |	result := self interface test073: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890.	17179869183 = result ifFalse:		[self message: 'test073 failed']"unsigned long longtest073(unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt){	unsigned long long ok = C64(0);	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 0;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 1;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 2;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 3;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 4;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 7;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 8;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 9;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 10;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 11;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 12;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 13;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 14;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 15;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 16;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 17;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 18;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 19;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 20;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 21;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 23;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 24;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 25;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 26;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 27;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 28;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 29;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 30;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 31;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 32;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest074	&lt;test&gt;	| result |	result := self interface test074: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890.	17179869183 = result ifFalse:		[self message: 'test074 failed']"unsigned long longtest074(long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt){	unsigned long long ok = C64(0);	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 1;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 2;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 3;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 6;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 7;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 8;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 9;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 10;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 11;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 12;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 13;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 14;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 15;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 16;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 17;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 18;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 19;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 20;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 22;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 23;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 24;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 25;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 26;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 27;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 28;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 29;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 30;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 31;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 32;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest075	&lt;test&gt;	| result |	result := self interface test075: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890.	17179869183 = result ifFalse:		[self message: 'test075 failed']"unsigned long longtest075(unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong){	unsigned long long ok = C64(0);	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 0;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 1;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 2;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 5;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 6;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 7;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 8;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 9;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 10;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 11;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 12;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 13;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 14;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 15;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 16;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 17;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 18;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 19;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 21;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 22;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 23;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 24;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 25;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 26;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 27;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 28;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 29;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 30;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 31;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 32;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest076	&lt;test&gt;	| result |	result := self interface test076: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890.	17179869183 = result ifFalse:		[self message: 'test076 failed']"unsigned long longtest076(long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong){	unsigned long long ok = C64(0);	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 0;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 1;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 4;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 5;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 6;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 7;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 8;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 9;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 10;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 11;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 12;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 13;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 14;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 15;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 16;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 17;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 18;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 20;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 21;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 22;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 23;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 24;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 25;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 26;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 27;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 28;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 29;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 30;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 31;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 32;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest077	&lt;test&gt;	| result |	result := self interface test077: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789.	17179869183 = result ifFalse:		[self message: 'test077 failed']"unsigned long longtest077(unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong){	unsigned long long ok = C64(0);	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 0;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 3;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 4;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 5;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 6;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 7;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 8;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 9;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 10;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 11;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 12;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 13;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 14;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 15;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 16;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 17;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 19;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 20;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 21;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 22;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 23;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 24;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 25;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 26;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 27;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 28;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 29;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 30;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 31;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 32;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest078	&lt;test&gt;	| result |	result := self interface test078: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890.	17179869183 = result ifFalse:		[self message: 'test078 failed']"unsigned long longtest078(float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong){	unsigned long long ok = C64(0);	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 2;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 3;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 4;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 5;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 6;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 7;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 8;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 9;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 10;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 11;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 12;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 13;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 14;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 15;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 16;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 18;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 19;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 20;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 21;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 22;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 23;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 24;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 25;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 26;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 27;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 28;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 29;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 30;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 31;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 32;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest079	&lt;test&gt;	| result |	result := self interface test079: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456.	17179869183 = result ifFalse:		[self message: 'test079 failed']"unsigned long longtest079(double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat){	unsigned long long ok = C64(0);	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 1;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 2;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 3;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 4;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 5;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 6;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 7;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 8;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 9;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 10;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 11;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 12;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 13;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 14;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 15;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 17;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 18;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 19;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 20;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 21;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 22;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 23;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 24;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 25;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 26;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 27;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 28;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 29;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 30;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 31;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 32;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest080	&lt;test&gt;	| result |	result := self interface test080: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8.	17179869183 = result ifFalse:		[self message: 'test080 failed']"unsigned long longtest080(CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble){	unsigned long long ok = C64(0);	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 0;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 1;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 2;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 3;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 4;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 5;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 6;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 7;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 8;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 9;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 10;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 11;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 12;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 13;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 14;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 16;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 17;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 18;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 19;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 20;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 21;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 22;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 23;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 24;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 25;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 26;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 27;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 28;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 29;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 30;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 31;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest081	&lt;test&gt;	| result |	result := self interface test081: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct.	17179869183 = result ifFalse:		[self message: 'test081 failed']"unsigned long longtest081(SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct){	unsigned long long ok = C64(0);	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 0;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 1;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 2;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 3;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 4;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 5;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 6;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 7;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 8;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 9;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 10;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 11;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 12;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 13;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 15;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 16;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 17;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 18;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 19;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 20;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 21;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 22;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 23;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 24;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 25;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 26;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 27;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 28;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 29;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 30;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 32;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest082	&lt;test&gt;	| result |	result := self interface test082: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct.	17179869183 = result ifFalse:		[self message: 'test082 failed']"unsigned long longtest082(MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct){	unsigned long long ok = C64(0);	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 1;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 2;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 3;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 4;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 5;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 6;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 7;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 8;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 9;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 10;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 11;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 12;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 14;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 15;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 16;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 17;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 18;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 19;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 20;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 21;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 22;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 23;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 24;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 25;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 26;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 27;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 28;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 29;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 31;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 32;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest083	&lt;test&gt;	| result |	result := self interface test083: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct.	17179869183 = result ifFalse:		[self message: 'test083 failed']"unsigned long longtest083(LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct){	unsigned long long ok = C64(0);	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 1;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 2;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 3;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 4;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 5;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 6;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 7;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 8;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 9;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 10;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 11;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 13;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 14;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 15;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 16;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 17;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 18;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 19;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 20;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 21;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 22;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 23;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 24;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 25;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 26;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 27;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 28;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 30;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 31;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 32;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest084	&lt;test&gt;	| result |	result := self interface test084: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct.	17179869183 = result ifFalse:		[self message: 'test084 failed']"unsigned long longtest084(BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct){	unsigned long long ok = C64(0);	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 0;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 1;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 2;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 3;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 4;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 5;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 6;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 7;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 8;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 9;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 10;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 12;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 13;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 14;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 15;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 16;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 17;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 18;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 19;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 20;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 21;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 22;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 23;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 24;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 25;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 26;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 27;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 29;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 30;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 31;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 32;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest085	&lt;test&gt;	| result |	result := self interface test085: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct.	17179869183 = result ifFalse:		[self message: 'test085 failed']"unsigned long longtest085(signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct){	unsigned long long ok = C64(0);	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 0;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 1;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 2;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 3;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 4;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 5;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 6;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 7;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 8;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 9;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 11;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 12;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 13;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 14;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 15;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 16;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 17;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 18;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 19;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 20;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 21;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 22;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 23;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 24;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 25;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 26;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 28;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 29;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 30;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 31;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 32;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest086	&lt;test&gt;	| result |	result := self interface test086: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93.	17179869183 = result ifFalse:		[self message: 'test086 failed']"unsigned long longtest086(unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar){	unsigned long long ok = C64(0);	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 0;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 1;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 2;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 3;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 4;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 5;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 6;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 7;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 8;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 10;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 11;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 12;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 13;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 14;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 15;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 16;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 17;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 18;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 19;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 20;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 21;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 22;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 23;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 24;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 25;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 27;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 28;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 29;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 30;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 31;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 32;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest087	&lt;test&gt;	| result |	result := self interface test087: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100.	17179869183 = result ifFalse:		[self message: 'test087 failed']"unsigned long longtest087(short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar){	unsigned long long ok = C64(0);	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 0;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 1;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 2;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 3;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 4;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 5;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 6;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 7;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 9;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 10;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 11;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 12;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 13;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 14;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 15;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 16;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 17;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 18;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 19;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 20;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 21;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 22;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 23;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 24;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 26;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 27;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 28;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 29;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 30;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 31;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 32;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest088	&lt;test&gt;	| result |	result := self interface test088: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344.	17179869183 = result ifFalse:		[self message: 'test088 failed']"unsigned long longtest088(unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort){	unsigned long long ok = C64(0);	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 0;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 1;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 2;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 3;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 4;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 5;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 6;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 9;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 10;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 11;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 12;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 13;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 14;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 15;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 16;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 17;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 18;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 19;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 20;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 21;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 22;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 23;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 25;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 26;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 27;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 28;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 29;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 30;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 31;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 32;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest089	&lt;test&gt;	| result |	result := self interface test089: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346.	17179869183 = result ifFalse:		[self message: 'test089 failed']"unsigned long longtest089(int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort){	unsigned long long ok = C64(0);	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 0;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 1;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 2;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 3;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 4;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 5;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 8;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 9;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 10;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 11;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 12;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 13;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 14;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 15;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 16;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 17;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 18;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 19;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 20;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 21;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 22;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 24;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 25;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 26;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 27;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 28;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 29;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 30;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 31;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 32;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest090	&lt;test&gt;	| result |	result := self interface test090: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889.	17179869183 = result ifFalse:		[self message: 'test090 failed']"unsigned long longtest090(unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt){	unsigned long long ok = C64(0);	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 0;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 2;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 3;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 4;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 7;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 8;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 9;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 10;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 11;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 12;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 13;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 14;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 15;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 16;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 17;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 18;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 19;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 20;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 21;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 23;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 24;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 25;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 26;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 27;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 28;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 29;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 30;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 31;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 32;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest091	&lt;test&gt;	| result |	result := self interface test091: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891.	17179869183 = result ifFalse:		[self message: 'test091 failed']"unsigned long longtest091(long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt){	unsigned long long ok = C64(0);	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 0;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 1;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 2;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 3;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 6;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 7;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 8;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 9;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 10;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 11;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 12;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 13;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 14;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 15;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 16;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 17;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 18;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 19;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 20;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 22;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 23;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 24;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 25;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 26;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 27;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 28;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 29;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 30;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 31;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 32;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest092	&lt;test&gt;	| result |	result := self interface test092: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889.	17179869183 = result ifFalse:		[self message: 'test092 failed']"unsigned long longtest092(unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong){	unsigned long long ok = C64(0);	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 0;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 1;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 2;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 5;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 6;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 7;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 8;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 9;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 10;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 11;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 12;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 13;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 14;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 15;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 16;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 17;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 18;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 19;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 21;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 22;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 23;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 24;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 25;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 26;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 27;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 28;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 29;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 30;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 31;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 32;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest093	&lt;test&gt;	| result |	result := self interface test093: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891.	17179869183 = result ifFalse:		[self message: 'test093 failed']"unsigned long longtest093(long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong){	unsigned long long ok = C64(0);	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 0;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 1;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 4;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 5;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 6;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 7;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 8;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 9;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 10;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 11;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 12;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 13;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 14;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 15;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 16;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 17;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 18;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 20;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 21;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 22;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 23;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 24;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 25;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 26;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 27;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 28;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 29;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 30;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 31;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 32;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest094	&lt;test&gt;	| result |	result := self interface test094: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788.	17179869183 = result ifFalse:		[self message: 'test094 failed']"unsigned long longtest094(unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong){	unsigned long long ok = C64(0);	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 0;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 3;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 4;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 5;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 6;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 7;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 8;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 9;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 10;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 11;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 12;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 13;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 14;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 15;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 16;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 17;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 19;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 20;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 21;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 22;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 23;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 24;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 25;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 26;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 27;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 28;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 29;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 30;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 31;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 32;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest095	&lt;test&gt;	| result |	result := self interface test095: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891.	17179869183 = result ifFalse:		[self message: 'test095 failed']"unsigned long longtest095(float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong){	unsigned long long ok = C64(0);	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 2;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 3;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 4;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 5;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 6;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 7;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 8;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 9;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 10;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 11;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 12;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 13;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 14;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 15;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 16;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 18;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 19;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 20;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 21;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 22;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 23;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 24;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 25;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 26;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 27;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 28;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 29;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 30;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 31;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 32;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest096	&lt;test&gt;	| result |	result := self interface test096: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456.	17179869183 = result ifFalse:		[self message: 'test096 failed']"unsigned long longtest096(double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat){	unsigned long long ok = C64(0);	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 1;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 2;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 3;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 4;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 5;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 6;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 7;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 8;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 9;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 10;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 11;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 12;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 13;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 14;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 15;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 17;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 18;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 19;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 20;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 21;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 22;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 23;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 24;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 25;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 26;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 27;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 28;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 29;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 30;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 31;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 32;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest097	&lt;test&gt;	| result |	result := self interface test097: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8.	17179869183 = result ifFalse:		[self message: 'test097 failed']"unsigned long longtest097(CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble){	unsigned long long ok = C64(0);	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 0;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 1;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 2;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 3;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 4;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 5;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 6;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 7;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 8;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 9;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 10;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 11;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 12;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 13;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 14;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 16;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 17;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 18;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 19;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 20;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 21;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 22;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 23;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 24;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 25;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 26;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 27;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 28;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 29;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 30;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 31;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest098	&lt;test&gt;	| result |	result := self interface test098: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA.	17179869183 = result ifFalse:		[self message: 'test098 failed']"unsigned long longtest098(SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA){	unsigned long long ok = C64(0);	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 0;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 2;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 3;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 4;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 5;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 6;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 7;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 8;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 9;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 10;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 11;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 12;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 13;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 15;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 16;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 17;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 18;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 19;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 20;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 21;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 22;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 23;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 24;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 25;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 26;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 27;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 28;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 29;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 30;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 32;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest099	&lt;test&gt;	| result |	result := self interface test099: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA.	17179869183 = result ifFalse:		[self message: 'test099 failed']"unsigned long longtest099(MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA){	unsigned long long ok = C64(0);	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 0;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 2;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 3;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 4;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 5;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 6;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 7;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 8;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 9;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 10;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 11;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 12;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 14;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 15;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 16;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 17;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 18;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 19;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 20;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 21;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 22;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 23;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 24;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 25;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 26;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 27;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 28;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 29;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 31;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 32;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest100	&lt;test&gt;	| result |	result := self interface test100: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA.	17179869183 = result ifFalse:		[self message: 'test100 failed']"unsigned long longtest100(LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA){	unsigned long long ok = C64(0);	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 0;	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 1;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 2;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 3;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 4;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 5;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 6;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 7;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 8;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 9;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 10;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 11;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 13;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 14;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 15;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 16;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 17;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 18;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 19;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 20;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 21;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 22;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 23;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 24;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 25;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 26;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 27;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 28;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 30;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 31;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 32;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest101	&lt;test&gt;	| result |	result := self interface test101: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA.	17179869183 = result ifFalse:		[self message: 'test101 failed']"unsigned long longtest101(BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA){	unsigned long long ok = C64(0);	if (bigStructA.aChar == -93	 &amp;&amp; bigStructA.aUChar == 100	 &amp;&amp; bigStructA.aShort == -12344	 &amp;&amp; bigStructA.aUShort == 12346	 &amp;&amp; bigStructA.anInt == -1234567889	 &amp;&amp; bigStructA.aUInt == 1234567891	 &amp;&amp; bigStructA.aLong == -1234567889L	 &amp;&amp; bigStructA.aULong == 1234567891U	 &amp;&amp; bigStructA.aLongLong == C64(-1234567890123456788)	 &amp;&amp; bigStructA.aULongLong == C64(12345678901234567891U)	 &amp;&amp; bigStructA.aFloat == 124.456f	 &amp;&amp; bigStructA.aDouble == 2.2345678901235e8	 &amp;&amp; bigStructA.charStruct.aChar == -93	 &amp;&amp; bigStructA.smallStruct.aShort == -12344)		ok |= C64(1U) &lt;&lt; 0;	if (aChar == -94)		ok |= C64(1U) &lt;&lt; 1;	if (aUChar == 99)		ok |= C64(1U) &lt;&lt; 2;	if (aShort == -12345)		ok |= C64(1U) &lt;&lt; 3;	if (aUShort == 12345)		ok |= C64(1U) &lt;&lt; 4;	if (anInt == -1234567890)		ok |= C64(1U) &lt;&lt; 5;	if (aUInt == 1234567890)		ok |= C64(1U) &lt;&lt; 6;	if (aLong == -1234567890L)		ok |= C64(1U) &lt;&lt; 7;	if (aULong == 1234567890U)		ok |= C64(1U) &lt;&lt; 8;	if (aLongLong == C64(-1234567890123456789))		ok |= C64(1U) &lt;&lt; 9;	if (aULongLong == C64(12345678901234567890U))		ok |= C64(1U) &lt;&lt; 10;	if (aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(aDouble - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 12;	if (charStruct.aChar == -94)		ok |= C64(1U) &lt;&lt; 13;	if (smallStruct.aShort == -12345	 &amp;&amp; smallStruct.aUChar == 99	 &amp;&amp; smallStruct.aUShort == 12345)		ok |= C64(1U) &lt;&lt; 14;	if (mediumStruct.anInt == -1234567890	 &amp;&amp; mediumStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 15;	if (largeStruct.aLong == -1234567890L	 &amp;&amp; largeStruct.aDouble == 1.2345678901235e8	 &amp;&amp; largeStruct.aULong == 1234567890U	 &amp;&amp; largeStruct.aFloat == 123.456f)		ok |= C64(1U) &lt;&lt; 16;	if (bigStruct.aChar == -94	 &amp;&amp; bigStruct.aUChar == 99	 &amp;&amp; bigStruct.aShort == -12345	 &amp;&amp; bigStruct.aUShort == 12345	 &amp;&amp; bigStruct.anInt == -1234567890	 &amp;&amp; bigStruct.aUInt == 1234567890	 &amp;&amp; bigStruct.aLong == -1234567890L	 &amp;&amp; bigStruct.aULong == 1234567890U	 &amp;&amp; bigStruct.aLongLong == C64(-1234567890123456789)	 &amp;&amp; bigStruct.aULongLong == C64(12345678901234567890U)	 &amp;&amp; bigStruct.aFloat == 123.456f	 &amp;&amp; bigStruct.aDouble == 1.2345678901235e8	 &amp;&amp; bigStruct.charStruct.aChar == -94	 &amp;&amp; bigStruct.smallStruct.aShort == -12345)		ok |= C64(1U) &lt;&lt; 17;	if (bChar == -93)		ok |= C64(1U) &lt;&lt; 18;	if (bUChar == 100)		ok |= C64(1U) &lt;&lt; 19;	if (bShort == -12344)		ok |= C64(1U) &lt;&lt; 20;	if (bUShort == 12346)		ok |= C64(1U) &lt;&lt; 21;	if (bnInt == -1234567889)		ok |= C64(1U) &lt;&lt; 22;	if (bUInt == 1234567891)		ok |= C64(1U) &lt;&lt; 23;	if (bLong == -1234567889L)		ok |= C64(1U) &lt;&lt; 24;	if (bULong == 1234567891U)		ok |= C64(1U) &lt;&lt; 25;	if (bLongLong == C64(-1234567890123456788))		ok |= C64(1U) &lt;&lt; 26;	if (bULongLong == C64(12345678901234567891U))		ok |= C64(1U) &lt;&lt; 27;	if (bFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(bDouble - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 29;	if (charStructA.aChar == -93)		ok |= C64(1U) &lt;&lt; 30;	if (smallStructA.aShort == -12344	 &amp;&amp; smallStructA.aUChar == 100	 &amp;&amp; smallStructA.aUShort == 12346)		ok |= C64(1U) &lt;&lt; 31;	if (mediumStructA.anInt == -1234567889	 &amp;&amp; mediumStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 32;	if (largeStructA.aLong == -1234567889L	 &amp;&amp; largeStructA.aDouble == 2.2345678901235e8	 &amp;&amp; largeStructA.aULong == 1234567891U	 &amp;&amp; largeStructA.aFloat == 124.456f)		ok |= C64(1U) &lt;&lt; 33;	return ok;}"</body><body package="DLLCC Test Suite">runTest102	&lt;test&gt;	| result |	result := self interface test102: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 127.456 w: 128.456 w: 129.456 w: 130.456 w: 131.456 w: 132.456 w: 133.456 w: 134.456 w: 135.456 w: 136.456 w: 137.456 w: 138.456 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 147.456 w: 148.456 w: 149.456 w: 150.456 w: 151.456 w: 152.456 w: 153.456 w: 154.456 w: 155.456 w: 156.456 w: 157.456 w: 158.456 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: 167.456 w: 168.456 w: 169.456 w: 170.456 w: 171.456 w: 172.456 w: 173.456 w: 174.456 w: 175.456 w: 176.456 w: 177.456 w: 178.456 w: 179.456 w: 180.456 w: 181.456 w: 182.456 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test102 failed']"unsigned long longtest102(float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13, float f14, float f15, float f16, float f17, float f18, float f19, float f20, float f21, float f22, float f23, float f24, float f25, float f26, float f27, float f28, float f29, float f30, float f31, float f32, float f33, float f34, float f35, float f36, float f37, float f38, float f39, float f40, float f41, float f42, float f43, float f44, float f45, float f46, float f47, float f48, float f49, float f50, float f51, float f52, float f53, float f54, float f55, float f56, float f57, float f58, float f59, float f60, float f61, float f62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest103	&lt;test&gt;	| result |	result := self interface test103: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: 4.2345678901235d8 w: 5.2345678901235d8 w: 6.2345678901235d8 w: 7.2345678901235d8 w: 8.2345678901235d8 w: 9.2345678901235d8 w: 1.0234567890124d9 w: 1.1234567890124d9 w: 1.2234567890123d9 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: 1.6234567890124d9 w: 1.7234567890123d9 w: 1.8234567890124d9 w: 1.9234567890124d9 w: 2.0234567890124d9 w: 2.1234567890124d9 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: 2.5234567890124d9 w: 2.6234567890124d9 w: 2.7234567890124d9 w: 2.8234567890124d9 w: 2.9234567890124d9 w: 3.0234567890124d9 w: 3.1234567890124d9 w: 3.2234567890124d9 w: 3.3234567890124d9 w: 3.4234567890124d9 w: 3.5234567890124d9 w: 3.6234567890124d9 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: 4.0234567890123d9 w: 4.1234567890123d9 w: 4.2234567890123d9 w: 4.3234567890123d9 w: 4.4234567890124d9 w: 4.5234567890123d9 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: 4.9234567890124d9 w: 5.0234567890123d9 w: 5.1234567890123d9 w: 5.2234567890123d9 w: 5.3234567890123d9 w: 5.4234567890124d9 w: 5.5234567890123d9 w: 5.6234567890123d9 w: 5.7234567890123d9 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: 6.4234567890124d9.	18446744073709551615 = result ifFalse:		[self message: 'test103 failed']"unsigned long longtest103(double d0, double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11, double d12, double d13, double d14, double d15, double d16, double d17, double d18, double d19, double d20, double d21, double d22, double d23, double d24, double d25, double d26, double d27, double d28, double d29, double d30, double d31, double d32, double d33, double d34, double d35, double d36, double d37, double d38, double d39, double d40, double d41, double d42, double d43, double d44, double d45, double d46, double d47, double d48, double d49, double d50, double d51, double d52, double d53, double d54, double d55, double d56, double d57, double d58, double d59, double d60, double d61, double d62, double d63){	unsigned long long ok = C64(0);	if (fabs(d0 - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(d1 - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(d2 - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(d3 - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(d4 - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(d5 - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(d6 - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(d7 - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(d8 - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(d9 - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(d10 - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(d11 - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(d12 - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(d13 - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(d14 - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(d15 - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(d16 - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(d17 - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(d18 - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(d19 - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(d20 - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(d21 - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(d22 - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(d23 - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(d24 - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(d25 - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(d26 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(d27 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(d28 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(d29 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(d30 - 3.1234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(d31 - 3.2234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(d32 - 3.3234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(d33 - 3.4234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 33;	if (fabs(d34 - 3.5234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 34;	if (fabs(d35 - 3.6234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 35;	if (fabs(d36 - 3.7234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 36;	if (fabs(d37 - 3.8234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 37;	if (fabs(d38 - 3.9234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 38;	if (fabs(d39 - 4.0234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 39;	if (fabs(d40 - 4.1234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 40;	if (fabs(d41 - 4.2234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 41;	if (fabs(d42 - 4.3234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 42;	if (fabs(d43 - 4.4234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 43;	if (fabs(d44 - 4.5234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 44;	if (fabs(d45 - 4.6234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 45;	if (fabs(d46 - 4.7234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 46;	if (fabs(d47 - 4.8234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 47;	if (fabs(d48 - 4.9234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 48;	if (fabs(d49 - 5.0234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 49;	if (fabs(d50 - 5.1234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 50;	if (fabs(d51 - 5.2234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 51;	if (fabs(d52 - 5.3234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 52;	if (fabs(d53 - 5.4234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 53;	if (fabs(d54 - 5.5234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 54;	if (fabs(d55 - 5.6234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 55;	if (fabs(d56 - 5.7234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 56;	if (fabs(d57 - 5.8234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 57;	if (fabs(d58 - 5.9234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 58;	if (fabs(d59 - 6.0234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 59;	if (fabs(d60 - 6.1234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 60;	if (fabs(d61 - 6.2234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 61;	if (fabs(d62 - 6.3234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 62;	if (fabs(d63 - 6.4234567890124e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest104	&lt;test&gt;	| result |	result := self interface test104: 1.2345678901235d8 w: 124.456 w: 3.2345678901235d8 w: 126.456 w: 5.2345678901235d8 w: 128.456 w: 7.2345678901235d8 w: 130.456 w: 9.2345678901235d8 w: 132.456 w: 1.1234567890124d9 w: 134.456 w: 1.3234567890124d9 w: 136.456 w: 1.5234567890123d9 w: 138.456 w: 1.7234567890123d9 w: 140.456 w: 1.9234567890124d9 w: 142.456 w: 2.1234567890124d9 w: 144.456 w: 2.3234567890124d9 w: 146.456 w: 2.5234567890124d9 w: 148.456 w: 2.7234567890124d9 w: 150.456 w: 2.9234567890124d9 w: 152.456 w: 3.1234567890124d9 w: 154.456 w: 3.3234567890124d9 w: 156.456 w: 3.5234567890124d9 w: 158.456 w: 3.7234567890124d9 w: 160.456 w: 3.9234567890124d9 w: 162.456 w: 4.1234567890123d9 w: 164.456 w: 4.3234567890123d9 w: 166.456 w: 4.5234567890123d9 w: 168.456 w: 4.7234567890123d9 w: 170.456 w: 4.9234567890124d9 w: 172.456 w: 5.1234567890123d9 w: 174.456 w: 5.3234567890123d9 w: 176.456 w: 5.5234567890123d9 w: 178.456 w: 5.7234567890123d9 w: 180.456 w: 5.9234567890124d9 w: 182.456 w: 6.1234567890123d9 w: 184.456 w: 6.3234567890123d9 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test104 failed']"unsigned long longtest104(double d0, float f1, double d2, float f3, double d4, float f5, double d6, float f7, double d8, float f9, double d10, float f11, double d12, float f13, double d14, float f15, double d16, float f17, double d18, float f19, double d20, float f21, double d22, float f23, double d24, float f25, double d26, float f27, double d28, float f29, double d30, float f31, double d32, float f33, double d34, float f35, double d36, float f37, double d38, float f39, double d40, float f41, double d42, float f43, double d44, float f45, double d46, float f47, double d48, float f49, double d50, float f51, double d52, float f53, double d54, float f55, double d56, float f57, double d58, float f59, double d60, float f61, double d62, float f63){	unsigned long long ok = C64(0);	if (fabs(d0 - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(d2 - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(d4 - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(d6 - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(d8 - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(d10 - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(d12 - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(d14 - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(d16 - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(d18 - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(d20 - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(d22 - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(d24 - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(d26 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(d28 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(d30 - 3.1234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(d32 - 3.3234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (fabs(d34 - 3.5234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (fabs(d36 - 3.7234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (fabs(d38 - 3.9234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (fabs(d40 - 4.1234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (fabs(d42 - 4.3234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (fabs(d44 - 4.5234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (fabs(d46 - 4.7234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (fabs(d48 - 4.9234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (fabs(d50 - 5.1234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (fabs(d52 - 5.3234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (fabs(d54 - 5.5234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (fabs(d56 - 5.7234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (fabs(d58 - 5.9234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (fabs(d60 - 6.1234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (fabs(d62 - 6.3234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest105	&lt;test&gt;	| result |	result := self interface test105: 123.456 w: 2.2345678901235d8 w: 125.456 w: 4.2345678901235d8 w: 127.456 w: 6.2345678901235d8 w: 129.456 w: 8.2345678901235d8 w: 131.456 w: 1.0234567890124d9 w: 133.456 w: 1.2234567890123d9 w: 135.456 w: 1.4234567890124d9 w: 137.456 w: 1.6234567890124d9 w: 139.456 w: 1.8234567890124d9 w: 141.456 w: 2.0234567890124d9 w: 143.456 w: 2.2234567890124d9 w: 145.456 w: 2.4234567890124d9 w: 147.456 w: 2.6234567890124d9 w: 149.456 w: 2.8234567890124d9 w: 151.456 w: 3.0234567890124d9 w: 153.456 w: 3.2234567890124d9 w: 155.456 w: 3.4234567890124d9 w: 157.456 w: 3.6234567890124d9 w: 159.456 w: 3.8234567890124d9 w: 161.456 w: 4.0234567890123d9 w: 163.456 w: 4.2234567890123d9 w: 165.456 w: 4.4234567890124d9 w: 167.456 w: 4.6234567890123d9 w: 169.456 w: 4.8234567890123d9 w: 171.456 w: 5.0234567890123d9 w: 173.456 w: 5.2234567890123d9 w: 175.456 w: 5.4234567890124d9 w: 177.456 w: 5.6234567890123d9 w: 179.456 w: 5.8234567890123d9 w: 181.456 w: 6.0234567890123d9 w: 183.456 w: 6.2234567890123d9 w: 185.456 w: 6.4234567890124d9.	18446744073709551615 = result ifFalse:		[self message: 'test105 failed']"unsigned long longtest105(float f0, double d1, float f2, double d3, float f4, double d5, float f6, double d7, float f8, double d9, float f10, double d11, float f12, double d13, float f14, double d15, float f16, double d17, float f18, double d19, float f20, double d21, float f22, double d23, float f24, double d25, float f26, double d27, float f28, double d29, float f30, double d31, float f32, double d33, float f34, double d35, float f36, double d37, float f38, double d39, float f40, double d41, float f42, double d43, float f44, double d45, float f46, double d47, float f48, double d49, float f50, double d51, float f52, double d53, float f54, double d55, float f56, double d57, float f58, double d59, float f60, double d61, float f62, double d63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(d1 - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(d3 - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(d5 - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(d7 - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(d9 - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(d11 - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(d13 - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(d15 - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(d17 - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(d19 - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(d21 - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(d23 - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(d25 - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(d27 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(d29 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(d31 - 3.2234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(d33 - 3.4234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (fabs(d35 - 3.6234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (fabs(d37 - 3.8234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (fabs(d39 - 4.0234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (fabs(d41 - 4.2234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (fabs(d43 - 4.4234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (fabs(d45 - 4.6234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (fabs(d47 - 4.8234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (fabs(d49 - 5.0234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (fabs(d51 - 5.2234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (fabs(d53 - 5.4234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (fabs(d55 - 5.6234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (fabs(d57 - 5.8234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (fabs(d59 - 6.0234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (fabs(d61 - 6.2234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (fabs(d63 - 6.4234567890124e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest106	&lt;test&gt;	| result |	result := self interface test106: 123.456 w: -1234567889 w: -1234567888 w: 126.456 w: -1234567886 w: -1234567885 w: 129.456 w: -1234567883 w: -1234567882 w: 132.456 w: -1234567880 w: -1234567879 w: 135.456 w: -1234567877 w: -1234567876 w: 138.456 w: -1234567874 w: -1234567873 w: 141.456 w: -1234567871 w: -1234567870 w: 144.456 w: -1234567868 w: -1234567867 w: 147.456 w: -1234567865 w: -1234567864 w: 150.456 w: -1234567862 w: -1234567861 w: 153.456 w: -1234567859 w: -1234567858 w: 156.456 w: -1234567856 w: -1234567855 w: 159.456 w: -1234567853 w: -1234567852 w: 162.456 w: -1234567850 w: -1234567849 w: 165.456 w: -1234567847 w: -1234567846 w: 168.456 w: -1234567844 w: -1234567843 w: 171.456 w: -1234567841 w: -1234567840 w: 174.456 w: -1234567838 w: -1234567837 w: 177.456 w: -1234567835 w: -1234567834 w: 180.456 w: -1234567832 w: -1234567831 w: 183.456 w: -1234567829 w: -1234567828 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test106 failed']"unsigned long longtest106(float f0, long l1, long l2, float f3, long l4, long l5, float f6, long l7, long l8, float f9, long l10, long l11, float f12, long l13, long l14, float f15, long l16, long l17, float f18, long l19, long l20, float f21, long l22, long l23, float f24, long l25, long l26, float f27, long l28, long l29, float f30, long l31, long l32, float f33, long l34, long l35, float f36, long l37, long l38, float f39, long l40, long l41, float f42, long l43, long l44, float f45, long l46, long l47, float f48, long l49, long l50, float f51, long l52, long l53, float f54, long l55, long l56, float f57, long l58, long l59, float f60, long l61, long l62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest107	&lt;test&gt;	| result |	result := self interface test107: -1234567890 w: 124.456 w: -1234567888 w: -1234567887 w: 127.456 w: -1234567885 w: -1234567884 w: 130.456 w: -1234567882 w: -1234567881 w: 133.456 w: -1234567879 w: -1234567878 w: 136.456 w: -1234567876 w: -1234567875 w: 139.456 w: -1234567873 w: -1234567872 w: 142.456 w: -1234567870 w: -1234567869 w: 145.456 w: -1234567867 w: -1234567866 w: 148.456 w: -1234567864 w: -1234567863 w: 151.456 w: -1234567861 w: -1234567860 w: 154.456 w: -1234567858 w: -1234567857 w: 157.456 w: -1234567855 w: -1234567854 w: 160.456 w: -1234567852 w: -1234567851 w: 163.456 w: -1234567849 w: -1234567848 w: 166.456 w: -1234567846 w: -1234567845 w: 169.456 w: -1234567843 w: -1234567842 w: 172.456 w: -1234567840 w: -1234567839 w: 175.456 w: -1234567837 w: -1234567836 w: 178.456 w: -1234567834 w: -1234567833 w: 181.456 w: -1234567831 w: -1234567830 w: 184.456 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test107 failed']"unsigned long longtest107(long l0, float f1, long l2, long l3, float f4, long l5, long l6, float f7, long l8, long l9, float f10, long l11, long l12, float f13, long l14, long l15, float f16, long l17, long l18, float f19, long l20, long l21, float f22, long l23, long l24, float f25, long l26, long l27, float f28, long l29, long l30, float f31, long l32, long l33, float f34, long l35, long l36, float f37, long l38, long l39, float f40, long l41, long l42, float f43, long l44, long l45, float f46, long l47, long l48, float f49, long l50, long l51, float f52, long l53, long l54, float f55, long l56, long l57, float f58, long l59, long l60, float f61, long l62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest108	&lt;test&gt;	| result |	result := self interface test108: 123.456 w: 2.2345678901235d8 w: -1234567888 w: 126.456 w: 5.2345678901235d8 w: -1234567885 w: 129.456 w: 8.2345678901235d8 w: -1234567882 w: 132.456 w: 1.1234567890124d9 w: -1234567879 w: 135.456 w: 1.4234567890124d9 w: -1234567876 w: 138.456 w: 1.7234567890123d9 w: -1234567873 w: 141.456 w: 2.0234567890124d9 w: -1234567870 w: 144.456 w: 2.3234567890124d9 w: -1234567867 w: 147.456 w: 2.6234567890124d9 w: -1234567864 w: 150.456 w: 2.9234567890124d9 w: -1234567861 w: 153.456 w: 3.2234567890124d9 w: -1234567858 w: 156.456 w: 3.5234567890124d9 w: -1234567855 w: 159.456 w: 3.8234567890124d9 w: -1234567852 w: 162.456 w: 4.1234567890123d9 w: -1234567849 w: 165.456 w: 4.4234567890124d9 w: -1234567846 w: 168.456 w: 4.7234567890123d9 w: -1234567843 w: 171.456 w: 5.0234567890123d9 w: -1234567840 w: 174.456 w: 5.3234567890123d9 w: -1234567837 w: 177.456 w: 5.6234567890123d9 w: -1234567834 w: 180.456 w: 5.9234567890124d9 w: -1234567831 w: 183.456 w: 6.2234567890123d9 w: -1234567828 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test108 failed']"unsigned long longtest108(float f0, double d1, long l2, float f3, double d4, long l5, float f6, double d7, long l8, float f9, double d10, long l11, float f12, double d13, long l14, float f15, double d16, long l17, float f18, double d19, long l20, float f21, double d22, long l23, float f24, double d25, long l26, float f27, double d28, long l29, float f30, double d31, long l32, float f33, double d34, long l35, float f36, double d37, long l38, float f39, double d40, long l41, float f42, double d43, long l44, float f45, double d46, long l47, float f48, double d49, long l50, float f51, double d52, long l53, float f54, double d55, long l56, float f57, double d58, long l59, float f60, double d61, long l62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(d1 - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(d4 - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(d7 - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(d10 - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(d13 - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(d16 - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(d19 - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(d22 - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(d25 - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(d28 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(d31 - 3.2234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (fabs(d34 - 3.5234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (fabs(d37 - 3.8234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (fabs(d40 - 4.1234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (fabs(d43 - 4.4234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (fabs(d46 - 4.7234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (fabs(d49 - 5.0234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (fabs(d52 - 5.3234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (fabs(d55 - 5.6234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (fabs(d58 - 5.9234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (fabs(d61 - 6.2234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest109	&lt;test&gt;	| result |	result := self interface test109: -1234567890 w: 124.456 w: 3.2345678901235d8 w: -1234567887 w: 127.456 w: 6.2345678901235d8 w: -1234567884 w: 130.456 w: 9.2345678901235d8 w: -1234567881 w: 133.456 w: 1.2234567890123d9 w: -1234567878 w: 136.456 w: 1.5234567890123d9 w: -1234567875 w: 139.456 w: 1.8234567890124d9 w: -1234567872 w: 142.456 w: 2.1234567890124d9 w: -1234567869 w: 145.456 w: 2.4234567890124d9 w: -1234567866 w: 148.456 w: 2.7234567890124d9 w: -1234567863 w: 151.456 w: 3.0234567890124d9 w: -1234567860 w: 154.456 w: 3.3234567890124d9 w: -1234567857 w: 157.456 w: 3.6234567890124d9 w: -1234567854 w: 160.456 w: 3.9234567890124d9 w: -1234567851 w: 163.456 w: 4.2234567890123d9 w: -1234567848 w: 166.456 w: 4.5234567890123d9 w: -1234567845 w: 169.456 w: 4.8234567890123d9 w: -1234567842 w: 172.456 w: 5.1234567890123d9 w: -1234567839 w: 175.456 w: 5.4234567890124d9 w: -1234567836 w: 178.456 w: 5.7234567890123d9 w: -1234567833 w: 181.456 w: 6.0234567890123d9 w: -1234567830 w: 184.456 w: 6.3234567890123d9 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test109 failed']"unsigned long longtest109(long l0, float f1, double d2, long l3, float f4, double d5, long l6, float f7, double d8, long l9, float f10, double d11, long l12, float f13, double d14, long l15, float f16, double d17, long l18, float f19, double d20, long l21, float f22, double d23, long l24, float f25, double d26, long l27, float f28, double d29, long l30, float f31, double d32, long l33, float f34, double d35, long l36, float f37, double d38, long l39, float f40, double d41, long l42, float f43, double d44, long l45, float f46, double d47, long l48, float f49, double d50, long l51, float f52, double d53, long l54, float f55, double d56, long l57, float f58, double d59, long l60, float f61, double d62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(d2 - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(d5 - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(d8 - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(d11 - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(d14 - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(d17 - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(d20 - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(d23 - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(d26 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(d29 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(d32 - 3.3234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (fabs(d35 - 3.6234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (fabs(d38 - 3.9234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (fabs(d41 - 4.2234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (fabs(d44 - 4.5234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (fabs(d47 - 4.8234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (fabs(d50 - 5.1234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (fabs(d53 - 5.4234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (fabs(d56 - 5.7234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (fabs(d59 - 6.0234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (fabs(d62 - 6.3234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest110	&lt;test&gt;	| result |	result := self interface test110: 1.2345678901235d8 w: -1234567889 w: 125.456 w: 4.2345678901235d8 w: -1234567886 w: 128.456 w: 7.2345678901235d8 w: -1234567883 w: 131.456 w: 1.0234567890124d9 w: -1234567880 w: 134.456 w: 1.3234567890124d9 w: -1234567877 w: 137.456 w: 1.6234567890124d9 w: -1234567874 w: 140.456 w: 1.9234567890124d9 w: -1234567871 w: 143.456 w: 2.2234567890124d9 w: -1234567868 w: 146.456 w: 2.5234567890124d9 w: -1234567865 w: 149.456 w: 2.8234567890124d9 w: -1234567862 w: 152.456 w: 3.1234567890124d9 w: -1234567859 w: 155.456 w: 3.4234567890124d9 w: -1234567856 w: 158.456 w: 3.7234567890124d9 w: -1234567853 w: 161.456 w: 4.0234567890123d9 w: -1234567850 w: 164.456 w: 4.3234567890123d9 w: -1234567847 w: 167.456 w: 4.6234567890123d9 w: -1234567844 w: 170.456 w: 4.9234567890124d9 w: -1234567841 w: 173.456 w: 5.2234567890123d9 w: -1234567838 w: 176.456 w: 5.5234567890123d9 w: -1234567835 w: 179.456 w: 5.8234567890123d9 w: -1234567832 w: 182.456 w: 6.1234567890123d9 w: -1234567829 w: 185.456 w: 6.4234567890124d9.	18446744073709551615 = result ifFalse:		[self message: 'test110 failed']"unsigned long longtest110(double d0, long l1, float f2, double d3, long l4, float f5, double d6, long l7, float f8, double d9, long l10, float f11, double d12, long l13, float f14, double d15, long l16, float f17, double d18, long l19, float f20, double d21, long l22, float f23, double d24, long l25, float f26, double d27, long l28, float f29, double d30, long l31, float f32, double d33, long l34, float f35, double d36, long l37, float f38, double d39, long l40, float f41, double d42, long l43, float f44, double d45, long l46, float f47, double d48, long l49, float f50, double d51, long l52, float f53, double d54, long l55, float f56, double d57, long l58, float f59, double d60, long l61, float f62, double d63){	unsigned long long ok = C64(0);	if (fabs(d0 - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(d3 - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(d6 - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(d9 - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(d12 - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(d15 - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(d18 - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(d21 - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(d24 - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(d27 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(d30 - 3.1234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(d33 - 3.4234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (fabs(d36 - 3.7234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (fabs(d39 - 4.0234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (fabs(d42 - 4.3234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (fabs(d45 - 4.6234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (fabs(d48 - 4.9234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (fabs(d51 - 5.2234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (fabs(d54 - 5.5234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (fabs(d57 - 5.8234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (fabs(d60 - 6.1234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (fabs(d63 - 6.4234567890124e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest111	&lt;test&gt;	| result |	result := self interface test111: 123.456 w: 124.456 w: -1234567888 w: -1234567887 w: -1234567886 w: -1234567885 w: 129.456 w: 130.456 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: -1234567852 w: -1234567851 w: -1234567850 w: -1234567849 w: 165.456 w: 166.456 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test111 failed']"unsigned long longtest111(float f0, float f1, long l2, long l3, long l4, long l5, float f6, float f7, long l8, long l9, long l10, long l11, float f12, float f13, long l14, long l15, long l16, long l17, float f18, float f19, long l20, long l21, long l22, long l23, float f24, float f25, long l26, long l27, long l28, long l29, float f30, float f31, long l32, long l33, long l34, long l35, float f36, float f37, long l38, long l39, long l40, long l41, float f42, float f43, long l44, long l45, long l46, long l47, float f48, float f49, long l50, long l51, long l52, long l53, float f54, float f55, long l56, long l57, long l58, long l59, float f60, float f61, long l62, long l63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest112	&lt;test&gt;	| result |	result := self interface test112: -1234567890 w: -1234567889 w: 125.456 w: 126.456 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: 131.456 w: 132.456 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: 137.456 w: 138.456 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: 149.456 w: 150.456 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: 155.456 w: 156.456 w: -1234567856 w: -1234567855 w: -1234567854 w: -1234567853 w: 161.456 w: 162.456 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: 167.456 w: 168.456 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: 179.456 w: 180.456 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: 185.456 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test112 failed']"unsigned long longtest112(long l0, long l1, float f2, float f3, long l4, long l5, long l6, long l7, float f8, float f9, long l10, long l11, long l12, long l13, float f14, float f15, long l16, long l17, long l18, long l19, float f20, float f21, long l22, long l23, long l24, long l25, float f26, float f27, long l28, long l29, long l30, long l31, float f32, float f33, long l34, long l35, long l36, long l37, float f38, float f39, long l40, long l41, long l42, long l43, float f44, float f45, long l46, long l47, long l48, long l49, float f50, float f51, long l52, long l53, long l54, long l55, float f56, float f57, long l58, long l59, long l60, long l61, float f62, float f63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest113	&lt;test&gt;	| result |	result := self interface test113: 123.456 w: 124.456 w: 3.2345678901235d8 w: 4.2345678901235d8 w: -1234567886 w: -1234567885 w: 129.456 w: 130.456 w: 9.2345678901235d8 w: 1.0234567890124d9 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 1.5234567890123d9 w: 1.6234567890124d9 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: 2.1234567890124d9 w: 2.2234567890124d9 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 2.7234567890124d9 w: 2.8234567890124d9 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 3.3234567890124d9 w: 3.4234567890124d9 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 3.9234567890124d9 w: 4.0234567890123d9 w: -1234567850 w: -1234567849 w: 165.456 w: 166.456 w: 4.5234567890123d9 w: 4.6234567890123d9 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 5.1234567890123d9 w: 5.2234567890123d9 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: 5.7234567890123d9 w: 5.8234567890123d9 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 6.3234567890123d9 w: 6.4234567890124d9.	18446744073709551615 = result ifFalse:		[self message: 'test113 failed']"unsigned long longtest113(float f0, float f1, double d2, double d3, long l4, long l5, float f6, float f7, double d8, double d9, long l10, long l11, float f12, float f13, double d14, double d15, long l16, long l17, float f18, float f19, double d20, double d21, long l22, long l23, float f24, float f25, double d26, double d27, long l28, long l29, float f30, float f31, double d32, double d33, long l34, long l35, float f36, float f37, double d38, double d39, long l40, long l41, float f42, float f43, double d44, double d45, long l46, long l47, float f48, float f49, double d50, double d51, long l52, long l53, float f54, float f55, double d56, double d57, long l58, long l59, float f60, float f61, double d62, double d63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(d2 - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(d3 - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(d8 - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(d9 - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(d14 - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(d15 - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(d20 - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(d21 - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(d26 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(d27 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(d32 - 3.3234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(d33 - 3.4234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (fabs(d38 - 3.9234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 38;	if (fabs(d39 - 4.0234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (fabs(d44 - 4.5234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 44;	if (fabs(d45 - 4.6234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (fabs(d50 - 5.1234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 50;	if (fabs(d51 - 5.2234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (fabs(d56 - 5.7234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 56;	if (fabs(d57 - 5.8234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (fabs(d62 - 6.3234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 62;	if (fabs(d63 - 6.4234567890124e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest114	&lt;test&gt;	| result |	result := self interface test114: -1234567890 w: -1234567889 w: 125.456 w: 126.456 w: 5.2345678901235d8 w: 6.2345678901235d8 w: -1234567884 w: -1234567883 w: 131.456 w: 132.456 w: 1.1234567890124d9 w: 1.2234567890123d9 w: -1234567878 w: -1234567877 w: 137.456 w: 138.456 w: 1.7234567890123d9 w: 1.8234567890124d9 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 2.3234567890124d9 w: 2.4234567890124d9 w: -1234567866 w: -1234567865 w: 149.456 w: 150.456 w: 2.9234567890124d9 w: 3.0234567890124d9 w: -1234567860 w: -1234567859 w: 155.456 w: 156.456 w: 3.5234567890124d9 w: 3.6234567890124d9 w: -1234567854 w: -1234567853 w: 161.456 w: 162.456 w: 4.1234567890123d9 w: 4.2234567890123d9 w: -1234567848 w: -1234567847 w: 167.456 w: 168.456 w: 4.7234567890123d9 w: 4.8234567890123d9 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: 5.3234567890123d9 w: 5.4234567890124d9 w: -1234567836 w: -1234567835 w: 179.456 w: 180.456 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: 185.456 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test114 failed']"unsigned long longtest114(long l0, long l1, float f2, float f3, double d4, double d5, long l6, long l7, float f8, float f9, double d10, double d11, long l12, long l13, float f14, float f15, double d16, double d17, long l18, long l19, float f20, float f21, double d22, double d23, long l24, long l25, float f26, float f27, double d28, double d29, long l30, long l31, float f32, float f33, double d34, double d35, long l36, long l37, float f38, float f39, double d40, double d41, long l42, long l43, float f44, float f45, double d46, double d47, long l48, long l49, float f50, float f51, double d52, double d53, long l54, long l55, float f56, float f57, double d58, double d59, long l60, long l61, float f62, float f63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(d4 - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(d5 - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(d10 - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(d11 - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(d16 - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(d17 - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(d22 - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(d23 - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(d28 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(d29 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (fabs(d34 - 3.5234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 34;	if (fabs(d35 - 3.6234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (fabs(d40 - 4.1234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 40;	if (fabs(d41 - 4.2234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (fabs(d46 - 4.7234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 46;	if (fabs(d47 - 4.8234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (fabs(d52 - 5.3234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 52;	if (fabs(d53 - 5.4234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (fabs(d58 - 5.9234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 58;	if (fabs(d59 - 6.0234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest115	&lt;test&gt;	| result |	result := self interface test115: 1.2345678901235d8 w: 2.2345678901235d8 w: -1234567888 w: -1234567887 w: 127.456 w: 128.456 w: 7.2345678901235d8 w: 8.2345678901235d8 w: -1234567882 w: -1234567881 w: 133.456 w: 134.456 w: 1.3234567890124d9 w: 1.4234567890124d9 w: -1234567876 w: -1234567875 w: 139.456 w: 140.456 w: 1.9234567890124d9 w: 2.0234567890124d9 w: -1234567870 w: -1234567869 w: 145.456 w: 146.456 w: 2.5234567890124d9 w: 2.6234567890124d9 w: -1234567864 w: -1234567863 w: 151.456 w: 152.456 w: 3.1234567890124d9 w: 3.2234567890124d9 w: -1234567858 w: -1234567857 w: 157.456 w: 158.456 w: 3.7234567890124d9 w: 3.8234567890124d9 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 4.3234567890123d9 w: 4.4234567890124d9 w: -1234567846 w: -1234567845 w: 169.456 w: 170.456 w: 4.9234567890124d9 w: 5.0234567890123d9 w: -1234567840 w: -1234567839 w: 175.456 w: 176.456 w: 5.5234567890123d9 w: 5.6234567890123d9 w: -1234567834 w: -1234567833 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test115 failed']"unsigned long longtest115(double d0, double d1, long l2, long l3, float f4, float f5, double d6, double d7, long l8, long l9, float f10, float f11, double d12, double d13, long l14, long l15, float f16, float f17, double d18, double d19, long l20, long l21, float f22, float f23, double d24, double d25, long l26, long l27, float f28, float f29, double d30, double d31, long l32, long l33, float f34, float f35, double d36, double d37, long l38, long l39, float f40, float f41, double d42, double d43, long l44, long l45, float f46, float f47, double d48, double d49, long l50, long l51, float f52, float f53, double d54, double d55, long l56, long l57, float f58, float f59, double d60, double d61, long l62, long l63){	unsigned long long ok = C64(0);	if (fabs(d0 - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(d1 - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(d6 - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(d7 - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(d12 - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(d13 - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(d18 - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(d19 - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(d24 - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(d25 - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(d30 - 3.1234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(d31 - 3.2234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (fabs(d36 - 3.7234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 36;	if (fabs(d37 - 3.8234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (fabs(d42 - 4.3234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 42;	if (fabs(d43 - 4.4234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (fabs(d48 - 4.9234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 48;	if (fabs(d49 - 5.0234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (fabs(d54 - 5.5234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 54;	if (fabs(d55 - 5.6234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (fabs(d60 - 6.1234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 60;	if (fabs(d61 - 6.2234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest116	&lt;test&gt;	| result |	result := self interface test116: 123.456 w: 124.456 w: 125.456 w: -1234567887 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: 132.456 w: 133.456 w: 134.456 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: 143.456 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: 150.456 w: 151.456 w: 152.456 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: -1234567851 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: -1234567842 w: -1234567841 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: 179.456 w: -1234567833 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: -1234567828 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test116 failed']"unsigned long longtest116(float f0, float f1, float f2, long l3, long l4, long l5, long l6, long l7, long l8, float f9, float f10, float f11, long l12, long l13, long l14, long l15, long l16, long l17, float f18, float f19, float f20, long l21, long l22, long l23, long l24, long l25, long l26, float f27, float f28, float f29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, long l48, long l49, long l50, long l51, long l52, long l53, float f54, float f55, float f56, long l57, long l58, long l59, long l60, long l61, long l62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest117	&lt;test&gt;	| result |	result := self interface test117: -1234567890 w: -1234567889 w: -1234567888 w: 126.456 w: 127.456 w: 128.456 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: -1234567870 w: 144.456 w: 145.456 w: 146.456 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: -1234567857 w: -1234567856 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: 162.456 w: 163.456 w: 164.456 w: -1234567848 w: -1234567847 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: -1234567839 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: -1234567834 w: 180.456 w: 181.456 w: 182.456 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test117 failed']"unsigned long longtest117(long l0, long l1, long l2, float f3, float f4, float f5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, long l15, long l16, long l17, long l18, long l19, long l20, float f21, float f22, float f23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, long l33, long l34, long l35, long l36, long l37, long l38, float f39, float f40, float f41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, long l51, long l52, long l53, long l54, long l55, long l56, float f57, float f58, float f59, long l60, long l61, long l62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest118	&lt;test&gt;	| result |	result := self interface test118: 123.456 w: 124.456 w: 125.456 w: 4.2345678901235d8 w: 5.2345678901235d8 w: 6.2345678901235d8 w: -1234567884 w: -1234567883 w: -1234567882 w: 132.456 w: 133.456 w: 134.456 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: -1234567875 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: 143.456 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: -1234567866 w: -1234567865 w: -1234567864 w: 150.456 w: 151.456 w: 152.456 w: 3.1234567890124d9 w: 3.2234567890124d9 w: 3.3234567890124d9 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: 4.0234567890123d9 w: 4.1234567890123d9 w: 4.2234567890123d9 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: 4.9234567890124d9 w: 5.0234567890123d9 w: 5.1234567890123d9 w: -1234567839 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: 179.456 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: -1234567828 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test118 failed']"unsigned long longtest118(float f0, float f1, float f2, double d3, double d4, double d5, long l6, long l7, long l8, float f9, float f10, float f11, double d12, double d13, double d14, long l15, long l16, long l17, float f18, float f19, float f20, double d21, double d22, double d23, long l24, long l25, long l26, float f27, float f28, float f29, double d30, double d31, double d32, long l33, long l34, long l35, float f36, float f37, float f38, double d39, double d40, double d41, long l42, long l43, long l44, float f45, float f46, float f47, double d48, double d49, double d50, long l51, long l52, long l53, float f54, float f55, float f56, double d57, double d58, double d59, long l60, long l61, long l62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(d3 - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(d4 - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(d5 - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(d12 - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(d13 - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(d14 - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(d21 - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(d22 - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(d23 - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(d30 - 3.1234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(d31 - 3.2234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(d32 - 3.3234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (fabs(d39 - 4.0234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 39;	if (fabs(d40 - 4.1234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 40;	if (fabs(d41 - 4.2234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (fabs(d48 - 4.9234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 48;	if (fabs(d49 - 5.0234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 49;	if (fabs(d50 - 5.1234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (fabs(d57 - 5.8234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 57;	if (fabs(d58 - 5.9234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 58;	if (fabs(d59 - 6.0234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest119	&lt;test&gt;	| result |	result := self interface test119: -1234567890 w: -1234567889 w: -1234567888 w: 126.456 w: 127.456 w: 128.456 w: 7.2345678901235d8 w: 8.2345678901235d8 w: 9.2345678901235d8 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: 1.6234567890124d9 w: 1.7234567890123d9 w: 1.8234567890124d9 w: -1234567872 w: -1234567871 w: -1234567870 w: 144.456 w: 145.456 w: 146.456 w: 2.5234567890124d9 w: 2.6234567890124d9 w: 2.7234567890124d9 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: 3.4234567890124d9 w: 3.5234567890124d9 w: 3.6234567890124d9 w: -1234567854 w: -1234567853 w: -1234567852 w: 162.456 w: 163.456 w: 164.456 w: 4.3234567890123d9 w: 4.4234567890124d9 w: 4.5234567890123d9 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: 5.2234567890123d9 w: 5.3234567890123d9 w: 5.4234567890124d9 w: -1234567836 w: -1234567835 w: -1234567834 w: 180.456 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test119 failed']"unsigned long longtest119(long l0, long l1, long l2, float f3, float f4, float f5, double d6, double d7, double d8, long l9, long l10, long l11, float f12, float f13, float f14, double d15, double d16, double d17, long l18, long l19, long l20, float f21, float f22, float f23, double d24, double d25, double d26, long l27, long l28, long l29, float f30, float f31, float f32, double d33, double d34, double d35, long l36, long l37, long l38, float f39, float f40, float f41, double d42, double d43, double d44, long l45, long l46, long l47, float f48, float f49, float f50, double d51, double d52, double d53, long l54, long l55, long l56, float f57, float f58, float f59, double d60, double d61, double d62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(d6 - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(d7 - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(d8 - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(d15 - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(d16 - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(d17 - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(d24 - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(d25 - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(d26 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(d33 - 3.4234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 33;	if (fabs(d34 - 3.5234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 34;	if (fabs(d35 - 3.6234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (fabs(d42 - 4.3234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 42;	if (fabs(d43 - 4.4234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 43;	if (fabs(d44 - 4.5234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (fabs(d51 - 5.2234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 51;	if (fabs(d52 - 5.3234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 52;	if (fabs(d53 - 5.4234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (fabs(d60 - 6.1234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 60;	if (fabs(d61 - 6.2234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 61;	if (fabs(d62 - 6.3234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest120	&lt;test&gt;	| result |	result := self interface test120: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: -1234567887 w: -1234567886 w: -1234567885 w: 129.456 w: 130.456 w: 131.456 w: 1.0234567890124d9 w: 1.1234567890124d9 w: 1.2234567890123d9 w: -1234567878 w: -1234567877 w: -1234567876 w: 138.456 w: 139.456 w: 140.456 w: 1.9234567890124d9 w: 2.0234567890124d9 w: 2.1234567890124d9 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 149.456 w: 2.8234567890124d9 w: 2.9234567890124d9 w: 3.0234567890124d9 w: -1234567860 w: -1234567859 w: -1234567858 w: 156.456 w: 157.456 w: 158.456 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: -1234567851 w: -1234567850 w: -1234567849 w: 165.456 w: 166.456 w: 167.456 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: -1234567842 w: -1234567841 w: -1234567840 w: 174.456 w: 175.456 w: 176.456 w: 5.5234567890123d9 w: 5.6234567890123d9 w: 5.7234567890123d9 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 6.4234567890124d9.	18446744073709551615 = result ifFalse:		[self message: 'test120 failed']"unsigned long longtest120(double d0, double d1, double d2, long l3, long l4, long l5, float f6, float f7, float f8, double d9, double d10, double d11, long l12, long l13, long l14, float f15, float f16, float f17, double d18, double d19, double d20, long l21, long l22, long l23, float f24, float f25, float f26, double d27, double d28, double d29, long l30, long l31, long l32, float f33, float f34, float f35, double d36, double d37, double d38, long l39, long l40, long l41, float f42, float f43, float f44, double d45, double d46, double d47, long l48, long l49, long l50, float f51, float f52, float f53, double d54, double d55, double d56, long l57, long l58, long l59, float f60, float f61, float f62, double d63){	unsigned long long ok = C64(0);	if (fabs(d0 - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(d1 - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(d2 - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(d9 - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(d10 - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(d11 - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(d18 - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(d19 - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(d20 - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(d27 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(d28 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(d29 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (fabs(d36 - 3.7234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 36;	if (fabs(d37 - 3.8234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 37;	if (fabs(d38 - 3.9234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (fabs(d45 - 4.6234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 45;	if (fabs(d46 - 4.7234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 46;	if (fabs(d47 - 4.8234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (fabs(d54 - 5.5234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 54;	if (fabs(d55 - 5.6234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 55;	if (fabs(d56 - 5.7234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (fabs(d63 - 6.4234567890124e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest121	&lt;test&gt;	| result |	result := self interface test121: 123.456 w: 124.456 w: 125.456 w: 126.456 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: 138.456 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 149.456 w: 150.456 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: 174.456 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test121 failed']"unsigned long longtest121(float f0, float f1, float f2, float f3, long l4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, long l16, long l17, long l18, long l19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest122	&lt;test&gt;	| result |	result := self interface test122: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: 127.456 w: 128.456 w: 129.456 w: 130.456 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: 151.456 w: 152.456 w: 153.456 w: 154.456 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: -1234567840 w: -1234567839 w: 175.456 w: 176.456 w: 177.456 w: 178.456 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test122 failed']"unsigned long longtest122(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, long l32, long l33, long l34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, long l44, long l45, long l46, long l47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest123	&lt;test&gt;	| result |	result := self interface test123: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 5.2345678901235d8 w: 6.2345678901235d8 w: 7.2345678901235d8 w: 8.2345678901235d8 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: 138.456 w: 1.7234567890123d9 w: 1.8234567890124d9 w: 1.9234567890124d9 w: 2.0234567890124d9 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 149.456 w: 150.456 w: 2.9234567890124d9 w: 3.0234567890124d9 w: 3.1234567890124d9 w: 3.2234567890124d9 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: 4.1234567890123d9 w: 4.2234567890123d9 w: 4.3234567890123d9 w: 4.4234567890124d9 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: 174.456 w: 5.3234567890123d9 w: 5.4234567890124d9 w: 5.5234567890123d9 w: 5.6234567890123d9 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test123 failed']"unsigned long longtest123(float f0, float f1, float f2, float f3, double d4, double d5, double d6, double d7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, double d28, double d29, double d30, double d31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, double d52, double d53, double d54, double d55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(d4 - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(d5 - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(d6 - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(d7 - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(d16 - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(d17 - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(d18 - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(d19 - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(d28 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(d29 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(d30 - 3.1234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(d31 - 3.2234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (fabs(d40 - 4.1234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 40;	if (fabs(d41 - 4.2234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 41;	if (fabs(d42 - 4.3234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 42;	if (fabs(d43 - 4.4234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (fabs(d52 - 5.3234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 52;	if (fabs(d53 - 5.4234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 53;	if (fabs(d54 - 5.5234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 54;	if (fabs(d55 - 5.6234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest124	&lt;test&gt;	| result |	result := self interface test124: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: 127.456 w: 128.456 w: 129.456 w: 130.456 w: 9.2345678901235d8 w: 1.0234567890124d9 w: 1.1234567890124d9 w: 1.2234567890123d9 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: 2.1234567890124d9 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: 151.456 w: 152.456 w: 153.456 w: 154.456 w: 3.3234567890124d9 w: 3.4234567890124d9 w: 3.5234567890124d9 w: 3.6234567890124d9 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: 4.5234567890123d9 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: -1234567842 w: -1234567841 w: -1234567840 w: -1234567839 w: 175.456 w: 176.456 w: 177.456 w: 178.456 w: 5.7234567890123d9 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test124 failed']"unsigned long longtest124(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, double d8, double d9, double d10, double d11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, double d32, double d33, double d34, double d35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, double d44, double d45, double d46, double d47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(d8 - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(d9 - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(d10 - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(d11 - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(d20 - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(d21 - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(d22 - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(d23 - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(d32 - 3.3234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(d33 - 3.4234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 33;	if (fabs(d34 - 3.5234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 34;	if (fabs(d35 - 3.6234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (fabs(d44 - 4.5234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 44;	if (fabs(d45 - 4.6234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 45;	if (fabs(d46 - 4.7234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 46;	if (fabs(d47 - 4.8234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (fabs(d56 - 5.7234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 56;	if (fabs(d57 - 5.8234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 57;	if (fabs(d58 - 5.9234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 58;	if (fabs(d59 - 6.0234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest125	&lt;test&gt;	| result |	result := self interface test125: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: 4.2345678901235d8 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: 131.456 w: 132.456 w: 133.456 w: 134.456 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: 1.6234567890124d9 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 2.5234567890124d9 w: 2.6234567890124d9 w: 2.7234567890124d9 w: 2.8234567890124d9 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: 155.456 w: 156.456 w: 157.456 w: 158.456 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: 4.0234567890123d9 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: 167.456 w: 168.456 w: 169.456 w: 170.456 w: 4.9234567890124d9 w: 5.0234567890123d9 w: 5.1234567890123d9 w: 5.2234567890123d9 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: 179.456 w: 180.456 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: 6.4234567890124d9.	18446744073709551615 = result ifFalse:		[self message: 'test125 failed']"unsigned long longtest125(double d0, double d1, double d2, double d3, long l4, long l5, long l6, long l7, float f8, float f9, float f10, float f11, double d12, double d13, double d14, double d15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, double d24, double d25, double d26, double d27, long l28, long l29, long l30, long l31, float f32, float f33, float f34, float f35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, float f44, float f45, float f46, float f47, double d48, double d49, double d50, double d51, long l52, long l53, long l54, long l55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63){	unsigned long long ok = C64(0);	if (fabs(d0 - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(d1 - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(d2 - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(d3 - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(d12 - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(d13 - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(d14 - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(d15 - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(d24 - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(d25 - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(d26 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(d27 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (fabs(d36 - 3.7234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 36;	if (fabs(d37 - 3.8234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 37;	if (fabs(d38 - 3.9234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 38;	if (fabs(d39 - 4.0234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (fabs(d48 - 4.9234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 48;	if (fabs(d49 - 5.0234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 49;	if (fabs(d50 - 5.1234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 50;	if (fabs(d51 - 5.2234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (fabs(d60 - 6.1234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 60;	if (fabs(d61 - 6.2234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 61;	if (fabs(d62 - 6.3234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 62;	if (fabs(d63 - 6.4234567890124e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest126	&lt;test&gt;	| result |	result := self interface test126: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 127.456 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: 138.456 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: 156.456 w: 157.456 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: 171.456 w: 172.456 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test126 failed']"unsigned long longtest126(float f0, float f1, float f2, float f3, float f4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, long l35, long l36, long l37, long l38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, long l50, long l51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest127	&lt;test&gt;	| result |	result := self interface test127: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: -1234567886 w: 128.456 w: 129.456 w: 130.456 w: 131.456 w: 132.456 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 147.456 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: 158.456 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: 175.456 w: 176.456 w: 177.456 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test127 failed']"unsigned long longtest127(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, long l10, long l11, long l12, long l13, long l14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, long l25, long l26, long l27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, long l55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest128	&lt;test&gt;	| result |	result := self interface test128: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 127.456 w: 6.2345678901235d8 w: 7.2345678901235d8 w: 8.2345678901235d8 w: 9.2345678901235d8 w: 1.0234567890124d9 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: 138.456 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: 2.1234567890124d9 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: 2.5234567890124d9 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: 156.456 w: 157.456 w: 3.6234567890124d9 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: 4.0234567890123d9 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: 171.456 w: 172.456 w: 5.1234567890123d9 w: 5.2234567890123d9 w: 5.3234567890123d9 w: 5.4234567890124d9 w: 5.5234567890123d9 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	18446744073709551615 = result ifFalse:		[self message: 'test128 failed']"unsigned long longtest128(float f0, float f1, float f2, float f3, float f4, double d5, double d6, double d7, double d8, double d9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, double d24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, double d35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, double d50, double d51, double d52, double d53, double d54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	unsigned long long ok = C64(0);	if (f0 == 123.456f)		ok |= C64(1U) &lt;&lt; 0;	if (f1 == 124.456f)		ok |= C64(1U) &lt;&lt; 1;	if (f2 == 125.456f)		ok |= C64(1U) &lt;&lt; 2;	if (f3 == 126.456f)		ok |= C64(1U) &lt;&lt; 3;	if (f4 == 127.456f)		ok |= C64(1U) &lt;&lt; 4;	if (fabs(d5 - 6.2345678901235e8) &lt;= 6.0e-7)		ok |= C64(1U) &lt;&lt; 5;	if (fabs(d6 - 7.2345678901235e8) &lt;= 7.0e-7)		ok |= C64(1U) &lt;&lt; 6;	if (fabs(d7 - 8.2345678901235e8) &lt;= 8.0e-7)		ok |= C64(1U) &lt;&lt; 7;	if (fabs(d8 - 9.2345678901235e8) &lt;= 9.0e-7)		ok |= C64(1U) &lt;&lt; 8;	if (fabs(d9 - 1.0234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 9;	if (l10 == -1234567880L)		ok |= C64(1U) &lt;&lt; 10;	if (l11 == -1234567879L)		ok |= C64(1U) &lt;&lt; 11;	if (l12 == -1234567878L)		ok |= C64(1U) &lt;&lt; 12;	if (l13 == -1234567877L)		ok |= C64(1U) &lt;&lt; 13;	if (l14 == -1234567876L)		ok |= C64(1U) &lt;&lt; 14;	if (f15 == 138.456f)		ok |= C64(1U) &lt;&lt; 15;	if (f16 == 139.456f)		ok |= C64(1U) &lt;&lt; 16;	if (f17 == 140.456f)		ok |= C64(1U) &lt;&lt; 17;	if (f18 == 141.456f)		ok |= C64(1U) &lt;&lt; 18;	if (f19 == 142.456f)		ok |= C64(1U) &lt;&lt; 19;	if (fabs(d20 - 2.1234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 20;	if (fabs(d21 - 2.2234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 21;	if (fabs(d22 - 2.3234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 22;	if (fabs(d23 - 2.4234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 23;	if (fabs(d24 - 2.5234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 24;	if (l25 == -1234567865L)		ok |= C64(1U) &lt;&lt; 25;	if (l26 == -1234567864L)		ok |= C64(1U) &lt;&lt; 26;	if (l27 == -1234567863L)		ok |= C64(1U) &lt;&lt; 27;	if (l28 == -1234567862L)		ok |= C64(1U) &lt;&lt; 28;	if (l29 == -1234567861L)		ok |= C64(1U) &lt;&lt; 29;	if (f30 == 153.456f)		ok |= C64(1U) &lt;&lt; 30;	if (f31 == 154.456f)		ok |= C64(1U) &lt;&lt; 31;	if (f32 == 155.456f)		ok |= C64(1U) &lt;&lt; 32;	if (f33 == 156.456f)		ok |= C64(1U) &lt;&lt; 33;	if (f34 == 157.456f)		ok |= C64(1U) &lt;&lt; 34;	if (fabs(d35 - 3.6234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 35;	if (fabs(d36 - 3.7234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 36;	if (fabs(d37 - 3.8234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 37;	if (fabs(d38 - 3.9234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 38;	if (fabs(d39 - 4.0234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 39;	if (l40 == -1234567850L)		ok |= C64(1U) &lt;&lt; 40;	if (l41 == -1234567849L)		ok |= C64(1U) &lt;&lt; 41;	if (l42 == -1234567848L)		ok |= C64(1U) &lt;&lt; 42;	if (l43 == -1234567847L)		ok |= C64(1U) &lt;&lt; 43;	if (l44 == -1234567846L)		ok |= C64(1U) &lt;&lt; 44;	if (f45 == 168.456f)		ok |= C64(1U) &lt;&lt; 45;	if (f46 == 169.456f)		ok |= C64(1U) &lt;&lt; 46;	if (f47 == 170.456f)		ok |= C64(1U) &lt;&lt; 47;	if (f48 == 171.456f)		ok |= C64(1U) &lt;&lt; 48;	if (f49 == 172.456f)		ok |= C64(1U) &lt;&lt; 49;	if (fabs(d50 - 5.1234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 50;	if (fabs(d51 - 5.2234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 51;	if (fabs(d52 - 5.3234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 52;	if (fabs(d53 - 5.4234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 53;	if (fabs(d54 - 5.5234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 54;	if (l55 == -1234567835L)		ok |= C64(1U) &lt;&lt; 55;	if (l56 == -1234567834L)		ok |= C64(1U) &lt;&lt; 56;	if (l57 == -1234567833L)		ok |= C64(1U) &lt;&lt; 57;	if (l58 == -1234567832L)		ok |= C64(1U) &lt;&lt; 58;	if (l59 == -1234567831L)		ok |= C64(1U) &lt;&lt; 59;	if (f60 == 183.456f)		ok |= C64(1U) &lt;&lt; 60;	if (f61 == 184.456f)		ok |= C64(1U) &lt;&lt; 61;	if (f62 == 185.456f)		ok |= C64(1U) &lt;&lt; 62;	if (f63 == 186.456f)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest129	&lt;test&gt;	| result |	result := self interface test129: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: -1234567886 w: 128.456 w: 129.456 w: 130.456 w: 131.456 w: 132.456 w: 1.1234567890124d9 w: 1.2234567890123d9 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 147.456 w: 2.6234567890124d9 w: 2.7234567890124d9 w: 2.8234567890124d9 w: 2.9234567890124d9 w: 3.0234567890124d9 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: 158.456 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: 4.1234567890123d9 w: 4.2234567890123d9 w: 4.3234567890123d9 w: 4.4234567890124d9 w: 4.5234567890123d9 w: -1234567845 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: 175.456 w: 176.456 w: 177.456 w: 5.6234567890123d9 w: 5.7234567890123d9 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	18446744073709551615 = result ifFalse:		[self message: 'test129 failed']"unsigned long longtest129(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, double d10, double d11, double d12, double d13, double d14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, double d25, double d26, double d27, double d28, double d29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, double d44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, double d55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63){	unsigned long long ok = C64(0);	if (l0 == -1234567890L)		ok |= C64(1U) &lt;&lt; 0;	if (l1 == -1234567889L)		ok |= C64(1U) &lt;&lt; 1;	if (l2 == -1234567888L)		ok |= C64(1U) &lt;&lt; 2;	if (l3 == -1234567887L)		ok |= C64(1U) &lt;&lt; 3;	if (l4 == -1234567886L)		ok |= C64(1U) &lt;&lt; 4;	if (f5 == 128.456f)		ok |= C64(1U) &lt;&lt; 5;	if (f6 == 129.456f)		ok |= C64(1U) &lt;&lt; 6;	if (f7 == 130.456f)		ok |= C64(1U) &lt;&lt; 7;	if (f8 == 131.456f)		ok |= C64(1U) &lt;&lt; 8;	if (f9 == 132.456f)		ok |= C64(1U) &lt;&lt; 9;	if (fabs(d10 - 1.1234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 10;	if (fabs(d11 - 1.2234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 11;	if (fabs(d12 - 1.3234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 12;	if (fabs(d13 - 1.4234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 13;	if (fabs(d14 - 1.5234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 14;	if (l15 == -1234567875L)		ok |= C64(1U) &lt;&lt; 15;	if (l16 == -1234567874L)		ok |= C64(1U) &lt;&lt; 16;	if (l17 == -1234567873L)		ok |= C64(1U) &lt;&lt; 17;	if (l18 == -1234567872L)		ok |= C64(1U) &lt;&lt; 18;	if (l19 == -1234567871L)		ok |= C64(1U) &lt;&lt; 19;	if (f20 == 143.456f)		ok |= C64(1U) &lt;&lt; 20;	if (f21 == 144.456f)		ok |= C64(1U) &lt;&lt; 21;	if (f22 == 145.456f)		ok |= C64(1U) &lt;&lt; 22;	if (f23 == 146.456f)		ok |= C64(1U) &lt;&lt; 23;	if (f24 == 147.456f)		ok |= C64(1U) &lt;&lt; 24;	if (fabs(d25 - 2.6234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 25;	if (fabs(d26 - 2.7234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 26;	if (fabs(d27 - 2.8234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 27;	if (fabs(d28 - 2.9234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 28;	if (fabs(d29 - 3.0234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 29;	if (l30 == -1234567860L)		ok |= C64(1U) &lt;&lt; 30;	if (l31 == -1234567859L)		ok |= C64(1U) &lt;&lt; 31;	if (l32 == -1234567858L)		ok |= C64(1U) &lt;&lt; 32;	if (l33 == -1234567857L)		ok |= C64(1U) &lt;&lt; 33;	if (l34 == -1234567856L)		ok |= C64(1U) &lt;&lt; 34;	if (f35 == 158.456f)		ok |= C64(1U) &lt;&lt; 35;	if (f36 == 159.456f)		ok |= C64(1U) &lt;&lt; 36;	if (f37 == 160.456f)		ok |= C64(1U) &lt;&lt; 37;	if (f38 == 161.456f)		ok |= C64(1U) &lt;&lt; 38;	if (f39 == 162.456f)		ok |= C64(1U) &lt;&lt; 39;	if (fabs(d40 - 4.1234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 40;	if (fabs(d41 - 4.2234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 41;	if (fabs(d42 - 4.3234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 42;	if (fabs(d43 - 4.4234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 43;	if (fabs(d44 - 4.5234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 44;	if (l45 == -1234567845L)		ok |= C64(1U) &lt;&lt; 45;	if (l46 == -1234567844L)		ok |= C64(1U) &lt;&lt; 46;	if (l47 == -1234567843L)		ok |= C64(1U) &lt;&lt; 47;	if (l48 == -1234567842L)		ok |= C64(1U) &lt;&lt; 48;	if (l49 == -1234567841L)		ok |= C64(1U) &lt;&lt; 49;	if (f50 == 173.456f)		ok |= C64(1U) &lt;&lt; 50;	if (f51 == 174.456f)		ok |= C64(1U) &lt;&lt; 51;	if (f52 == 175.456f)		ok |= C64(1U) &lt;&lt; 52;	if (f53 == 176.456f)		ok |= C64(1U) &lt;&lt; 53;	if (f54 == 177.456f)		ok |= C64(1U) &lt;&lt; 54;	if (fabs(d55 - 5.6234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 55;	if (fabs(d56 - 5.7234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 56;	if (fabs(d57 - 5.8234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 57;	if (fabs(d58 - 5.9234567890124e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 58;	if (fabs(d59 - 6.0234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 59;	if (l60 == -1234567830L)		ok |= C64(1U) &lt;&lt; 60;	if (l61 == -1234567829L)		ok |= C64(1U) &lt;&lt; 61;	if (l62 == -1234567828L)		ok |= C64(1U) &lt;&lt; 62;	if (l63 == -1234567827L)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTest130	&lt;test&gt;	| result |	result := self interface test130: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: 4.2345678901235d8 w: 5.2345678901235d8 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: 133.456 w: 134.456 w: 135.456 w: 136.456 w: 137.456 w: 1.6234567890124d9 w: 1.7234567890123d9 w: 1.8234567890124d9 w: 1.9234567890124d9 w: 2.0234567890124d9 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: 148.456 w: 149.456 w: 150.456 w: 151.456 w: 152.456 w: 3.1234567890124d9 w: 3.2234567890124d9 w: 3.3234567890124d9 w: 3.4234567890124d9 w: 3.5234567890124d9 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: 167.456 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: 4.9234567890124d9 w: 5.0234567890123d9 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: -1234567836 w: 178.456 w: 179.456 w: 180.456 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: 6.4234567890124d9.	18446744073709551615 = result ifFalse:		[self message: 'test130 failed']"unsigned long longtest130(double d0, double d1, double d2, double d3, double d4, long l5, long l6, long l7, long l8, long l9, float f10, float f11, float f12, float f13, float f14, double d15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, long l24, float f25, float f26, float f27, float f28, float f29, double d30, double d31, double d32, double d33, double d34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, float f44, double d45, double d46, double d47, double d48, double d49, long l50, long l51, long l52, long l53, long l54, float f55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63){	unsigned long long ok = C64(0);	if (fabs(d0 - 1.2345678901235e8) &lt;= 1.0e-7)		ok |= C64(1U) &lt;&lt; 0;	if (fabs(d1 - 2.2345678901235e8) &lt;= 2.0e-7)		ok |= C64(1U) &lt;&lt; 1;	if (fabs(d2 - 3.2345678901235e8) &lt;= 3.0e-7)		ok |= C64(1U) &lt;&lt; 2;	if (fabs(d3 - 4.2345678901235e8) &lt;= 4.0e-7)		ok |= C64(1U) &lt;&lt; 3;	if (fabs(d4 - 5.2345678901235e8) &lt;= 5.0e-7)		ok |= C64(1U) &lt;&lt; 4;	if (l5 == -1234567885L)		ok |= C64(1U) &lt;&lt; 5;	if (l6 == -1234567884L)		ok |= C64(1U) &lt;&lt; 6;	if (l7 == -1234567883L)		ok |= C64(1U) &lt;&lt; 7;	if (l8 == -1234567882L)		ok |= C64(1U) &lt;&lt; 8;	if (l9 == -1234567881L)		ok |= C64(1U) &lt;&lt; 9;	if (f10 == 133.456f)		ok |= C64(1U) &lt;&lt; 10;	if (f11 == 134.456f)		ok |= C64(1U) &lt;&lt; 11;	if (f12 == 135.456f)		ok |= C64(1U) &lt;&lt; 12;	if (f13 == 136.456f)		ok |= C64(1U) &lt;&lt; 13;	if (f14 == 137.456f)		ok |= C64(1U) &lt;&lt; 14;	if (fabs(d15 - 1.6234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 15;	if (fabs(d16 - 1.7234567890123e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 16;	if (fabs(d17 - 1.8234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 17;	if (fabs(d18 - 1.9234567890124e9) &lt;= 1.0e-6)		ok |= C64(1U) &lt;&lt; 18;	if (fabs(d19 - 2.0234567890124e9) &lt;= 2.0e-6)		ok |= C64(1U) &lt;&lt; 19;	if (l20 == -1234567870L)		ok |= C64(1U) &lt;&lt; 20;	if (l21 == -1234567869L)		ok |= C64(1U) &lt;&lt; 21;	if (l22 == -1234567868L)		ok |= C64(1U) &lt;&lt; 22;	if (l23 == -1234567867L)		ok |= C64(1U) &lt;&lt; 23;	if (l24 == -1234567866L)		ok |= C64(1U) &lt;&lt; 24;	if (f25 == 148.456f)		ok |= C64(1U) &lt;&lt; 25;	if (f26 == 149.456f)		ok |= C64(1U) &lt;&lt; 26;	if (f27 == 150.456f)		ok |= C64(1U) &lt;&lt; 27;	if (f28 == 151.456f)		ok |= C64(1U) &lt;&lt; 28;	if (f29 == 152.456f)		ok |= C64(1U) &lt;&lt; 29;	if (fabs(d30 - 3.1234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 30;	if (fabs(d31 - 3.2234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 31;	if (fabs(d32 - 3.3234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 32;	if (fabs(d33 - 3.4234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 33;	if (fabs(d34 - 3.5234567890124e9) &lt;= 3.0e-6)		ok |= C64(1U) &lt;&lt; 34;	if (l35 == -1234567855L)		ok |= C64(1U) &lt;&lt; 35;	if (l36 == -1234567854L)		ok |= C64(1U) &lt;&lt; 36;	if (l37 == -1234567853L)		ok |= C64(1U) &lt;&lt; 37;	if (l38 == -1234567852L)		ok |= C64(1U) &lt;&lt; 38;	if (l39 == -1234567851L)		ok |= C64(1U) &lt;&lt; 39;	if (f40 == 163.456f)		ok |= C64(1U) &lt;&lt; 40;	if (f41 == 164.456f)		ok |= C64(1U) &lt;&lt; 41;	if (f42 == 165.456f)		ok |= C64(1U) &lt;&lt; 42;	if (f43 == 166.456f)		ok |= C64(1U) &lt;&lt; 43;	if (f44 == 167.456f)		ok |= C64(1U) &lt;&lt; 44;	if (fabs(d45 - 4.6234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 45;	if (fabs(d46 - 4.7234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 46;	if (fabs(d47 - 4.8234567890123e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 47;	if (fabs(d48 - 4.9234567890124e9) &lt;= 4.0e-6)		ok |= C64(1U) &lt;&lt; 48;	if (fabs(d49 - 5.0234567890123e9) &lt;= 5.0e-6)		ok |= C64(1U) &lt;&lt; 49;	if (l50 == -1234567840L)		ok |= C64(1U) &lt;&lt; 50;	if (l51 == -1234567839L)		ok |= C64(1U) &lt;&lt; 51;	if (l52 == -1234567838L)		ok |= C64(1U) &lt;&lt; 52;	if (l53 == -1234567837L)		ok |= C64(1U) &lt;&lt; 53;	if (l54 == -1234567836L)		ok |= C64(1U) &lt;&lt; 54;	if (f55 == 178.456f)		ok |= C64(1U) &lt;&lt; 55;	if (f56 == 179.456f)		ok |= C64(1U) &lt;&lt; 56;	if (f57 == 180.456f)		ok |= C64(1U) &lt;&lt; 57;	if (f58 == 181.456f)		ok |= C64(1U) &lt;&lt; 58;	if (f59 == 182.456f)		ok |= C64(1U) &lt;&lt; 59;	if (fabs(d60 - 6.1234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 60;	if (fabs(d61 - 6.2234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 61;	if (fabs(d62 - 6.3234567890123e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 62;	if (fabs(d63 - 6.4234567890124e9) &lt;= 6.0e-6)		ok |= C64(1U) &lt;&lt; 63;	return ok;}"</body><body package="DLLCC Test Suite">runTestCallback001	&lt;test&gt;	| result invoked aCallback001 |		invoked := false.	aCallback001 := CCallback		do:		[ invoked := true.		 nil]		ofType: self interface Callback001.	result := self interface testCallback001: aCallback001.	invoked ifFalse: [self message: 'testCallback001 failed to callback'].	nil = result ifFalse:		[self message: 'testCallback001 failed']"voidtestCallback001(Callback001 aCallback001){	aCallback001();	return;}"</body><body package="DLLCC Test Suite">runTestCallback002	&lt;test&gt;	| result invoked aCallback002 |		invoked := false.	aCallback002 := CCallback		do:		[:aChar| | ok |		 invoked := true.		 ok := 0.		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback002 failed in callback (bad parameter)'].		 -85]		ofType: self interface Callback002.	result := self interface testCallback002: aCallback002 with: -94.	invoked ifFalse: [self message: 'testCallback002 failed to callback'].	-85 = result ifFalse:		[self message: 'testCallback002 failed']"signed chartestCallback002(Callback002 aCallback002, signed char aChar){	return aCallback002(aChar);}"</body><body package="DLLCC Test Suite">runTestCallback003	&lt;test&gt;	| result invoked aCallback003 |		invoked := false.	aCallback003 := CCallback		do:		[:aUChar| | ok |		 invoked := true.		 ok := 0.		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback003 failed in callback (bad parameter)'].		 170]		ofType: self interface Callback003.	result := self interface testCallback003: aCallback003 with: 99.	invoked ifFalse: [self message: 'testCallback003 failed to callback'].	170 = result ifFalse:		[self message: 'testCallback003 failed']"unsigned chartestCallback003(Callback003 aCallback003, unsigned char aUChar){	return aCallback003(aUChar);}"</body><body package="DLLCC Test Suite">runTestCallback004	&lt;test&gt;	| result invoked aCallback004 |		invoked := false.	aCallback004 := CCallback		do:		[:aShort| | ok |		 invoked := true.		 ok := 0.		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback004 failed in callback (bad parameter)'].		 -21845]		ofType: self interface Callback004.	result := self interface testCallback004: aCallback004 with: -12345.	invoked ifFalse: [self message: 'testCallback004 failed to callback'].	-21845 = result ifFalse:		[self message: 'testCallback004 failed']"shorttestCallback004(Callback004 aCallback004, short aShort){	return aCallback004(aShort);}"</body><body package="DLLCC Test Suite">runTestCallback005	&lt;test&gt;	| result invoked aCallback005 |		invoked := false.	aCallback005 := CCallback		do:		[:aUShort| | ok |		 invoked := true.		 ok := 0.		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback005 failed in callback (bad parameter)'].		 43690]		ofType: self interface Callback005.	result := self interface testCallback005: aCallback005 with: 12345.	invoked ifFalse: [self message: 'testCallback005 failed to callback'].	43690 = result ifFalse:		[self message: 'testCallback005 failed']"unsigned shorttestCallback005(Callback005 aCallback005, unsigned short aUShort){	return aCallback005(aUShort);}"</body><body package="DLLCC Test Suite">runTestCallback006	&lt;test&gt;	| result invoked aCallback006 |		invoked := false.	aCallback006 := CCallback		do:		[:anInt| | ok |		 invoked := true.		 ok := 0.		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback006 failed in callback (bad parameter)'].		 -5592405]		ofType: self interface Callback006.	result := self interface testCallback006: aCallback006 with: -1234567890.	invoked ifFalse: [self message: 'testCallback006 failed to callback'].	-5592405 = result ifFalse:		[self message: 'testCallback006 failed']"inttestCallback006(Callback006 aCallback006, int anInt){	return aCallback006(anInt);}"</body><body package="DLLCC Test Suite">runTestCallback007	&lt;test&gt;	| result invoked aCallback007 |		invoked := false.	aCallback007 := CCallback		do:		[:aUInt| | ok |		 invoked := true.		 ok := 0.		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback007 failed in callback (bad parameter)'].		 11184810]		ofType: self interface Callback007.	result := self interface testCallback007: aCallback007 with: 1234567890.	invoked ifFalse: [self message: 'testCallback007 failed to callback'].	11184810 = result ifFalse:		[self message: 'testCallback007 failed']"unsigned inttestCallback007(Callback007 aCallback007, unsigned int aUInt){	return aCallback007(aUInt);}"</body><body package="DLLCC Test Suite">runTestCallback008	&lt;test&gt;	| result invoked aCallback008 |		invoked := false.	aCallback008 := CCallback		do:		[:aLong| | ok |		 invoked := true.		 ok := 0.		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback008 failed in callback (bad parameter)'].		 -1431655765]		ofType: self interface Callback008.	result := self interface testCallback008: aCallback008 with: -1234567890.	invoked ifFalse: [self message: 'testCallback008 failed to callback'].	-1431655765 = result ifFalse:		[self message: 'testCallback008 failed']"longtestCallback008(Callback008 aCallback008, long aLong){	return aCallback008(aLong);}"</body><body package="DLLCC Test Suite">runTestCallback009	&lt;test&gt;	| result invoked aCallback009 |		invoked := false.	aCallback009 := CCallback		do:		[:aULong| | ok |		 invoked := true.		 ok := 0.		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback009 failed in callback (bad parameter)'].		 2863311530]		ofType: self interface Callback009.	result := self interface testCallback009: aCallback009 with: 1234567890.	invoked ifFalse: [self message: 'testCallback009 failed to callback'].	2863311530 = result ifFalse:		[self message: 'testCallback009 failed']"unsigned longtestCallback009(Callback009 aCallback009, unsigned long aULong){	return aCallback009(aULong);}"</body><body package="DLLCC Test Suite">runTestCallback010	&lt;test&gt;	| result invoked aCallback010 |		invoked := false.	aCallback010 := CCallback		do:		[:aLongLong| | ok |		 invoked := true.		 ok := 0.		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback010 failed in callback (bad parameter)'].		 -6148914691236517205]		ofType: self interface Callback010.	result := self interface testCallback010: aCallback010 with: -1234567890123456789.	invoked ifFalse: [self message: 'testCallback010 failed to callback'].	-6148914691236517205 = result ifFalse:		[self message: 'testCallback010 failed']"long longtestCallback010(Callback010 aCallback010, long long aLongLong){	return aCallback010(aLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback011	&lt;test&gt;	| result invoked aCallback011 |		invoked := false.	aCallback011 := CCallback		do:		[:aULongLong| | ok |		 invoked := true.		 ok := 0.		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback011 failed in callback (bad parameter)'].		 12297829382473034410]		ofType: self interface Callback011.	result := self interface testCallback011: aCallback011 with: 12345678901234567890.	invoked ifFalse: [self message: 'testCallback011 failed to callback'].	12297829382473034410 = result ifFalse:		[self message: 'testCallback011 failed']"unsigned long longtestCallback011(Callback011 aCallback011, unsigned long long aULongLong){	return aCallback011(aULongLong);}"</body><body package="DLLCC Test Suite">runTestCallback012	&lt;test&gt;	| result invoked aCallback012 |		invoked := false.	aCallback012 := CCallback		do:		[:aFloat| | ok |		 invoked := true.		 ok := 0.		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback012 failed in callback (bad parameter)'].		 -5.59232e6]		ofType: self interface Callback012.	result := self interface testCallback012: aCallback012 with: 123.456.	invoked ifFalse: [self message: 'testCallback012 failed to callback'].	-5.59232e6 = result ifFalse:		[self message: 'testCallback012 failed']"floattestCallback012(Callback012 aCallback012, float aFloat){	return aCallback012(aFloat);}"</body><body package="DLLCC Test Suite">runTestCallback013	&lt;test&gt;	| result invoked aCallback013 |		invoked := false.	aCallback013 := CCallback		do:		[:aDouble| | ok |		 invoked := true.		 ok := 0.		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback013 failed in callback (bad parameter)'].		 -4.9881073480191d51]		ofType: self interface Callback013.	result := self interface testCallback013: aCallback013 with: 1.2345678901235d8.	invoked ifFalse: [self message: 'testCallback013 failed to callback'].	-4.9881073480191d51 = result ifFalse:		[self message: 'testCallback013 failed']"doubletestCallback013(Callback013 aCallback013, double aDouble){	return aCallback013(aDouble);}"</body><body package="DLLCC Test Suite">runTestCallback014	&lt;test&gt;	| result field invoked aCallback014 |		invoked := false.	aCallback014 := CCallback		do:		[:charStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback014 failed in callback (bad parameter)'].		 self interface charStruct]		ofType: self interface Callback014.	result := self interface testCallback014: aCallback014 with: self interface charStruct.	invoked ifFalse: [self message: 'testCallback014 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94) ifFalse:		[self message: 'testCallback014 failed']"CharStructtestCallback014(Callback014 aCallback014, CharStruct charStruct){	return aCallback014(charStruct);}"</body><body package="DLLCC Test Suite">runTestCallback015	&lt;test&gt;	| result field invoked aCallback015 |		invoked := false.	aCallback015 := CCallback		do:		[:smallStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(2 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(3 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback015 failed in callback (bad parameter)'].		 self interface smallStruct]		ofType: self interface Callback015.	result := self interface testCallback015: aCallback015 with: self interface smallStruct.	invoked ifFalse: [self message: 'testCallback015 failed to callback'].	field := #(1 #aShort) -&gt; (result memberAt: #aShort).		(field value = -12345	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345]]) ifFalse:		[self message: 'testCallback015 failed']"SmallStructtestCallback015(Callback015 aCallback015, SmallStruct smallStruct){	return aCallback015(smallStruct);}"</body><body package="DLLCC Test Suite">runTestCallback016	&lt;test&gt;	| result field invoked aCallback016 |		invoked := false.	aCallback016 := CCallback		do:		[:mediumStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(2 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback016 failed in callback (bad parameter)'].		 self interface mediumStruct]		ofType: self interface Callback016.	result := self interface testCallback016: aCallback016 with: self interface mediumStruct.	invoked ifFalse: [self message: 'testCallback016 failed to callback'].	field := #(1 #anInt) -&gt; (result memberAt: #anInt).		(field value = -1234567890	and: [field := #(2 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]) ifFalse:		[self message: 'testCallback016 failed']"MediumStructtestCallback016(Callback016 aCallback016, MediumStruct mediumStruct){	return aCallback016(mediumStruct);}"</body><body package="DLLCC Test Suite">runTestCallback017	&lt;test&gt;	| result field invoked aCallback017 |		invoked := false.	aCallback017 := CCallback		do:		[:largeStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(2 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(3 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(4 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback017 failed in callback (bad parameter)'].		 self interface largeStruct]		ofType: self interface Callback017.	result := self interface testCallback017: aCallback017 with: self interface largeStruct.	invoked ifFalse: [self message: 'testCallback017 failed to callback'].	field := #(1 #aLong) -&gt; (result memberAt: #aLong).		(field value = -1234567890	and: [field := #(2 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(3 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(4 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]]]) ifFalse:		[self message: 'testCallback017 failed']"LargeStructtestCallback017(Callback017 aCallback017, LargeStruct largeStruct){	return aCallback017(largeStruct);}"</body><body package="DLLCC Test Suite">runTestCallback018	&lt;test&gt;	| result field invoked aCallback018 |		invoked := false.	aCallback018 := CCallback		do:		[:bigStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(2 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(3 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(4 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(5 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(6 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(7 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(8 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(9 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(10 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(11 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(12 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(13 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(13 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(14 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(14 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		1 ~= ok ifTrue:			[self message: 'aCallback018 failed in callback (bad parameter)'].		 self interface bigStruct]		ofType: self interface Callback018.	result := self interface testCallback018: aCallback018 with: self interface bigStruct.	invoked ifFalse: [self message: 'testCallback018 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aShort) -&gt; (result memberAt: #aShort).		field value = -12345	and: [field := #(4 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345	and: [field := #(5 #anInt) -&gt; (result memberAt: #anInt).		field value = -1234567890	and: [field := #(6 #aUInt) -&gt; (result memberAt: #aUInt).		field value = 1234567890	and: [field := #(7 #aLong) -&gt; (result memberAt: #aLong).		field value = -1234567890	and: [field := #(8 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(9 #aLongLong) -&gt; (result memberAt: #aLongLong).		field value = -1234567890123456789	and: [field := #(10 #aULongLong) -&gt; (result memberAt: #aULongLong).		field value = 12345678901234567890	and: [field := #(11 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456	and: [field := #(12 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(13 #charStruct) -&gt; (result memberAt: #charStruct).		field := #(13 #aChar) -&gt; (field value memberAt: #aChar).		field value = -94	and: [field := #(14 #smallStruct) -&gt; (result memberAt: #smallStruct).		field := #(14 #aShort) -&gt; (field value memberAt: #aShort).		field value = -12345]]]]]]]]]]]]]) ifFalse:		[self message: 'testCallback018 failed']"BigStructtestCallback018(Callback018 aCallback018, BigStruct bigStruct){	return aCallback018(bigStruct);}"</body><body package="DLLCC Test Suite">runTestCallback019	&lt;test&gt;	| result invoked aCallback019 |		invoked := false.	aCallback019 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = true ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = true ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = true ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback019 failed in callback (bad parameter)'].		 true]		ofType: self interface Callback019.	result := self interface testCallback019: aCallback019 with: true with: true with: true with: true with: true.	invoked ifFalse: [self message: 'testCallback019 failed to callback'].	true = result ifFalse:		[self message: 'testCallback019 failed']"__bool chartestCallback019(Callback019 aCallback019, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback019(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback020	&lt;test&gt;	| result invoked aCallback020 |		invoked := false.	aCallback020 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = true ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = true ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = true ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback020 failed in callback (bad parameter)'].		 true]		ofType: self interface Callback020.	result := self interface testCallback020: aCallback020 with: true with: true with: true with: true with: true.	invoked ifFalse: [self message: 'testCallback020 failed to callback'].	true = result ifFalse:		[self message: 'testCallback020 failed']"__bool shorttestCallback020(Callback020 aCallback020, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback020(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback021	&lt;test&gt;	| result invoked aCallback021 |		invoked := false.	aCallback021 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = true ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = true ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = true ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback021 failed in callback (bad parameter)'].		 true]		ofType: self interface Callback021.	result := self interface testCallback021: aCallback021 with: true with: true with: true with: true with: true.	invoked ifFalse: [self message: 'testCallback021 failed to callback'].	true = result ifFalse:		[self message: 'testCallback021 failed']"__bool inttestCallback021(Callback021 aCallback021, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback021(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback022	&lt;test&gt;	| result invoked aCallback022 |		invoked := false.	aCallback022 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = true ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = true ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = true ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback022 failed in callback (bad parameter)'].		 true]		ofType: self interface Callback022.	result := self interface testCallback022: aCallback022 with: true with: true with: true with: true with: true.	invoked ifFalse: [self message: 'testCallback022 failed to callback'].	true = result ifFalse:		[self message: 'testCallback022 failed']"__bool longtestCallback022(Callback022 aCallback022, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback022(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback023	&lt;test&gt;	| result invoked aCallback023 |		invoked := false.	aCallback023 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = true ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = true ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = true ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = true ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback023 failed in callback (bad parameter)'].		 true]		ofType: self interface Callback023.	result := self interface testCallback023: aCallback023 with: true with: true with: true with: true with: true.	invoked ifFalse: [self message: 'testCallback023 failed to callback'].	true = result ifFalse:		[self message: 'testCallback023 failed']"__bool long longtestCallback023(Callback023 aCallback023, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback023(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback024	&lt;test&gt;	| result invoked aCallback024 |		invoked := false.	aCallback024 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = false ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = false ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = false ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback024 failed in callback (bad parameter)'].		 false]		ofType: self interface Callback024.	result := self interface testCallback024: aCallback024 with: false with: false with: false with: false with: false.	invoked ifFalse: [self message: 'testCallback024 failed to callback'].	false = result ifFalse:		[self message: 'testCallback024 failed']"__bool chartestCallback024(Callback024 aCallback024, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback024(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback025	&lt;test&gt;	| result invoked aCallback025 |		invoked := false.	aCallback025 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = false ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = false ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = false ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback025 failed in callback (bad parameter)'].		 false]		ofType: self interface Callback025.	result := self interface testCallback025: aCallback025 with: false with: false with: false with: false with: false.	invoked ifFalse: [self message: 'testCallback025 failed to callback'].	false = result ifFalse:		[self message: 'testCallback025 failed']"__bool shorttestCallback025(Callback025 aCallback025, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback025(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback026	&lt;test&gt;	| result invoked aCallback026 |		invoked := false.	aCallback026 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = false ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = false ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = false ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback026 failed in callback (bad parameter)'].		 false]		ofType: self interface Callback026.	result := self interface testCallback026: aCallback026 with: false with: false with: false with: false with: false.	invoked ifFalse: [self message: 'testCallback026 failed to callback'].	false = result ifFalse:		[self message: 'testCallback026 failed']"__bool inttestCallback026(Callback026 aCallback026, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback026(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback027	&lt;test&gt;	| result invoked aCallback027 |		invoked := false.	aCallback027 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = false ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = false ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = false ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback027 failed in callback (bad parameter)'].		 false]		ofType: self interface Callback027.	result := self interface testCallback027: aCallback027 with: false with: false with: false with: false with: false.	invoked ifFalse: [self message: 'testCallback027 failed to callback'].	false = result ifFalse:		[self message: 'testCallback027 failed']"__bool longtestCallback027(Callback027 aCallback027, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback027(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback028	&lt;test&gt;	| result invoked aCallback028 |		invoked := false.	aCallback028 := CCallback		do:		[:aBoolChar :aBoolShort :aBoolInt :aBoolLong :aBoolLongLong| | ok |		 invoked := true.		 ok := 0.		aBoolChar = false ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aBoolShort = false ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aBoolInt = false ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aBoolLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aBoolLongLong = false ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		31 ~= ok ifTrue:			[self message: 'aCallback028 failed in callback (bad parameter)'].		 false]		ofType: self interface Callback028.	result := self interface testCallback028: aCallback028 with: false with: false with: false with: false with: false.	invoked ifFalse: [self message: 'testCallback028 failed to callback'].	false = result ifFalse:		[self message: 'testCallback028 failed']"__bool long longtestCallback028(Callback028 aCallback028, __bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool long long aBoolLongLong){	return aCallback028(aBoolChar, aBoolShort, aBoolInt, aBoolLong, aBoolLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback029	&lt;test&gt;	| result invoked aCallback029 |		invoked := false.	aCallback029 := CCallback		do:		[:block_charA :block_charB :block_charC :block_charD :block_charE :block_charF :block_charG :block_charH :block_charI :block_charJ :block_charK :block_charL :block_charM :block_charN :block_charO :block_charP :block_charQ :block_charR :block_charS :block_charT :block_charU :block_charV :block_charW :block_charX :block_charY :block_charZ :block_char0 :block_char1 :block_char2 :block_char3| | ok |		 invoked := true.		 ok := 0.		block_charA = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_charB = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_charC = -92 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_charD = -91 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_charE = -90 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_charF = -89 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_charG = -88 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_charH = -87 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_charI = -86 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_charJ = -85 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_charK = -84 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_charL = -83 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_charM = -82 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_charN = -81 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_charO = -80 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_charP = -79 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_charQ = -78 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_charR = -77 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_charS = -76 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_charT = -75 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_charU = -74 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_charV = -73 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_charW = -72 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_charX = -71 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_charY = -70 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_charZ = -69 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_char0 = -68 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_char1 = -67 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_char2 = -66 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_char3 = -65 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback029 failed in callback (bad parameter)'].		 -94]		ofType: self interface Callback029.	result := self interface testCallback029: aCallback029 w: -94 w: -93 w: -92 w: -91 w: -90 w: -89 w: -88 w: -87 w: -86 w: -85 w: -84 w: -83 w: -82 w: -81 w: -80 w: -79 w: -78 w: -77 w: -76 w: -75 w: -74 w: -73 w: -72 w: -71 w: -70 w: -69 w: -68 w: -67 w: -66 w: -65.	invoked ifFalse: [self message: 'testCallback029 failed to callback'].	-94 = result ifFalse:		[self message: 'testCallback029 failed']"signed chartestCallback029(Callback029 aCallback029, signed char block_charA, signed char block_charB, signed char block_charC, signed char block_charD, signed char block_charE, signed char block_charF, signed char block_charG, signed char block_charH, signed char block_charI, signed char block_charJ, signed char block_charK, signed char block_charL, signed char block_charM, signed char block_charN, signed char block_charO, signed char block_charP, signed char block_charQ, signed char block_charR, signed char block_charS, signed char block_charT, signed char block_charU, signed char block_charV, signed char block_charW, signed char block_charX, signed char block_charY, signed char block_charZ, signed char block_char0, signed char block_char1, signed char block_char2, signed char block_char3){	return aCallback029(block_charA, block_charB, block_charC, block_charD, block_charE, block_charF, block_charG, block_charH, block_charI, block_charJ, block_charK, block_charL, block_charM, block_charN, block_charO, block_charP, block_charQ, block_charR, block_charS, block_charT, block_charU, block_charV, block_charW, block_charX, block_charY, block_charZ, block_char0, block_char1, block_char2, block_char3);}"</body><body package="DLLCC Test Suite">runTestCallback030	&lt;test&gt;	| result invoked aCallback030 |		invoked := false.	aCallback030 := CCallback		do:		[:block_uCharA :block_uCharB :block_uCharC :block_uCharD :block_uCharE :block_uCharF :block_uCharG :block_uCharH :block_uCharI :block_uCharJ :block_uCharK :block_uCharL :block_uCharM :block_uCharN :block_uCharO :block_uCharP :block_uCharQ :block_uCharR :block_uCharS :block_uCharT :block_uCharU :block_uCharV :block_uCharW :block_uCharX :block_uCharY :block_uCharZ :block_uChar0 :block_uChar1 :block_uChar2 :block_uChar3| | ok |		 invoked := true.		 ok := 0.		block_uCharA = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_uCharB = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_uCharC = 101 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_uCharD = 102 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_uCharE = 103 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_uCharF = 104 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_uCharG = 105 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_uCharH = 106 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_uCharI = 107 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_uCharJ = 108 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_uCharK = 109 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_uCharL = 110 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_uCharM = 111 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_uCharN = 112 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_uCharO = 113 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_uCharP = 114 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_uCharQ = 115 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_uCharR = 116 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_uCharS = 117 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_uCharT = 118 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_uCharU = 119 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_uCharV = 120 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_uCharW = 121 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_uCharX = 122 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_uCharY = 123 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_uCharZ = 124 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_uChar0 = 125 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_uChar1 = 126 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_uChar2 = 127 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_uChar3 = 128 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback030 failed in callback (bad parameter)'].		 99]		ofType: self interface Callback030.	result := self interface testCallback030: aCallback030 w: 99 w: 100 w: 101 w: 102 w: 103 w: 104 w: 105 w: 106 w: 107 w: 108 w: 109 w: 110 w: 111 w: 112 w: 113 w: 114 w: 115 w: 116 w: 117 w: 118 w: 119 w: 120 w: 121 w: 122 w: 123 w: 124 w: 125 w: 126 w: 127 w: 128.	invoked ifFalse: [self message: 'testCallback030 failed to callback'].	99 = result ifFalse:		[self message: 'testCallback030 failed']"unsigned chartestCallback030(Callback030 aCallback030, unsigned char block_uCharA, unsigned char block_uCharB, unsigned char block_uCharC, unsigned char block_uCharD, unsigned char block_uCharE, unsigned char block_uCharF, unsigned char block_uCharG, unsigned char block_uCharH, unsigned char block_uCharI, unsigned char block_uCharJ, unsigned char block_uCharK, unsigned char block_uCharL, unsigned char block_uCharM, unsigned char block_uCharN, unsigned char block_uCharO, unsigned char block_uCharP, unsigned char block_uCharQ, unsigned char block_uCharR, unsigned char block_uCharS, unsigned char block_uCharT, unsigned char block_uCharU, unsigned char block_uCharV, unsigned char block_uCharW, unsigned char block_uCharX, unsigned char block_uCharY, unsigned char block_uCharZ, unsigned char block_uChar0, unsigned char block_uChar1, unsigned char block_uChar2, unsigned char block_uChar3){	return aCallback030(block_uCharA, block_uCharB, block_uCharC, block_uCharD, block_uCharE, block_uCharF, block_uCharG, block_uCharH, block_uCharI, block_uCharJ, block_uCharK, block_uCharL, block_uCharM, block_uCharN, block_uCharO, block_uCharP, block_uCharQ, block_uCharR, block_uCharS, block_uCharT, block_uCharU, block_uCharV, block_uCharW, block_uCharX, block_uCharY, block_uCharZ, block_uChar0, block_uChar1, block_uChar2, block_uChar3);}"</body><body package="DLLCC Test Suite">runTestCallback031	&lt;test&gt;	| result invoked aCallback031 |		invoked := false.	aCallback031 := CCallback		do:		[:block_shortA :block_shortB :block_shortC :block_shortD :block_shortE :block_shortF :block_shortG :block_shortH :block_shortI :block_shortJ :block_shortK :block_shortL :block_shortM :block_shortN :block_shortO :block_shortP :block_shortQ :block_shortR :block_shortS :block_shortT :block_shortU :block_shortV :block_shortW :block_shortX :block_shortY :block_shortZ :block_short0 :block_short1 :block_short2 :block_short3| | ok |		 invoked := true.		 ok := 0.		block_shortA = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_shortB = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_shortC = -12343 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_shortD = -12342 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_shortE = -12341 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_shortF = -12340 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_shortG = -12339 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_shortH = -12338 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_shortI = -12337 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_shortJ = -12336 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_shortK = -12335 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_shortL = -12334 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_shortM = -12333 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_shortN = -12332 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_shortO = -12331 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_shortP = -12330 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_shortQ = -12329 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_shortR = -12328 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_shortS = -12327 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_shortT = -12326 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_shortU = -12325 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_shortV = -12324 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_shortW = -12323 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_shortX = -12322 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_shortY = -12321 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_shortZ = -12320 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_short0 = -12319 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_short1 = -12318 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_short2 = -12317 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_short3 = -12316 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback031 failed in callback (bad parameter)'].		 -12345]		ofType: self interface Callback031.	result := self interface testCallback031: aCallback031 w: -12345 w: -12344 w: -12343 w: -12342 w: -12341 w: -12340 w: -12339 w: -12338 w: -12337 w: -12336 w: -12335 w: -12334 w: -12333 w: -12332 w: -12331 w: -12330 w: -12329 w: -12328 w: -12327 w: -12326 w: -12325 w: -12324 w: -12323 w: -12322 w: -12321 w: -12320 w: -12319 w: -12318 w: -12317 w: -12316.	invoked ifFalse: [self message: 'testCallback031 failed to callback'].	-12345 = result ifFalse:		[self message: 'testCallback031 failed']"shorttestCallback031(Callback031 aCallback031, short block_shortA, short block_shortB, short block_shortC, short block_shortD, short block_shortE, short block_shortF, short block_shortG, short block_shortH, short block_shortI, short block_shortJ, short block_shortK, short block_shortL, short block_shortM, short block_shortN, short block_shortO, short block_shortP, short block_shortQ, short block_shortR, short block_shortS, short block_shortT, short block_shortU, short block_shortV, short block_shortW, short block_shortX, short block_shortY, short block_shortZ, short block_short0, short block_short1, short block_short2, short block_short3){	return aCallback031(block_shortA, block_shortB, block_shortC, block_shortD, block_shortE, block_shortF, block_shortG, block_shortH, block_shortI, block_shortJ, block_shortK, block_shortL, block_shortM, block_shortN, block_shortO, block_shortP, block_shortQ, block_shortR, block_shortS, block_shortT, block_shortU, block_shortV, block_shortW, block_shortX, block_shortY, block_shortZ, block_short0, block_short1, block_short2, block_short3);}"</body><body package="DLLCC Test Suite">runTestCallback032	&lt;test&gt;	| result invoked aCallback032 |		invoked := false.	aCallback032 := CCallback		do:		[:block_uShortA :block_uShortB :block_uShortC :block_uShortD :block_uShortE :block_uShortF :block_uShortG :block_uShortH :block_uShortI :block_uShortJ :block_uShortK :block_uShortL :block_uShortM :block_uShortN :block_uShortO :block_uShortP :block_uShortQ :block_uShortR :block_uShortS :block_uShortT :block_uShortU :block_uShortV :block_uShortW :block_uShortX :block_uShortY :block_uShortZ :block_uShort0 :block_uShort1 :block_uShort2 :block_uShort3| | ok |		 invoked := true.		 ok := 0.		block_uShortA = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_uShortB = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_uShortC = 12347 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_uShortD = 12348 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_uShortE = 12349 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_uShortF = 12350 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_uShortG = 12351 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_uShortH = 12352 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_uShortI = 12353 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_uShortJ = 12354 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_uShortK = 12355 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_uShortL = 12356 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_uShortM = 12357 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_uShortN = 12358 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_uShortO = 12359 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_uShortP = 12360 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_uShortQ = 12361 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_uShortR = 12362 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_uShortS = 12363 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_uShortT = 12364 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_uShortU = 12365 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_uShortV = 12366 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_uShortW = 12367 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_uShortX = 12368 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_uShortY = 12369 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_uShortZ = 12370 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_uShort0 = 12371 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_uShort1 = 12372 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_uShort2 = 12373 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_uShort3 = 12374 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback032 failed in callback (bad parameter)'].		 12345]		ofType: self interface Callback032.	result := self interface testCallback032: aCallback032 w: 12345 w: 12346 w: 12347 w: 12348 w: 12349 w: 12350 w: 12351 w: 12352 w: 12353 w: 12354 w: 12355 w: 12356 w: 12357 w: 12358 w: 12359 w: 12360 w: 12361 w: 12362 w: 12363 w: 12364 w: 12365 w: 12366 w: 12367 w: 12368 w: 12369 w: 12370 w: 12371 w: 12372 w: 12373 w: 12374.	invoked ifFalse: [self message: 'testCallback032 failed to callback'].	12345 = result ifFalse:		[self message: 'testCallback032 failed']"unsigned shorttestCallback032(Callback032 aCallback032, unsigned short block_uShortA, unsigned short block_uShortB, unsigned short block_uShortC, unsigned short block_uShortD, unsigned short block_uShortE, unsigned short block_uShortF, unsigned short block_uShortG, unsigned short block_uShortH, unsigned short block_uShortI, unsigned short block_uShortJ, unsigned short block_uShortK, unsigned short block_uShortL, unsigned short block_uShortM, unsigned short block_uShortN, unsigned short block_uShortO, unsigned short block_uShortP, unsigned short block_uShortQ, unsigned short block_uShortR, unsigned short block_uShortS, unsigned short block_uShortT, unsigned short block_uShortU, unsigned short block_uShortV, unsigned short block_uShortW, unsigned short block_uShortX, unsigned short block_uShortY, unsigned short block_uShortZ, unsigned short block_uShort0, unsigned short block_uShort1, unsigned short block_uShort2, unsigned short block_uShort3){	return aCallback032(block_uShortA, block_uShortB, block_uShortC, block_uShortD, block_uShortE, block_uShortF, block_uShortG, block_uShortH, block_uShortI, block_uShortJ, block_uShortK, block_uShortL, block_uShortM, block_uShortN, block_uShortO, block_uShortP, block_uShortQ, block_uShortR, block_uShortS, block_uShortT, block_uShortU, block_uShortV, block_uShortW, block_uShortX, block_uShortY, block_uShortZ, block_uShort0, block_uShort1, block_uShort2, block_uShort3);}"</body><body package="DLLCC Test Suite">runTestCallback033	&lt;test&gt;	| result invoked aCallback033 |		invoked := false.	aCallback033 := CCallback		do:		[:block_intA :block_intB :block_intC :block_intD :block_intE :block_intF :block_intG :block_intH :block_intI :block_intJ :block_intK :block_intL :block_intM :block_intN :block_intO :block_intP :block_intQ :block_intR :block_intS :block_intT :block_intU :block_intV :block_intW :block_intX :block_intY :block_intZ :block_int0 :block_int1 :block_int2 :block_int3| | ok |		 invoked := true.		 ok := 0.		block_intA = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_intB = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_intC = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_intD = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_intE = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_intF = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_intG = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_intH = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_intI = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_intJ = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_intK = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_intL = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_intM = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_intN = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_intO = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_intP = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_intQ = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_intR = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_intS = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_intT = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_intU = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_intV = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_intW = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_intX = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_intY = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_intZ = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_int0 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_int1 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_int2 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_int3 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback033 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback033.	result := self interface testCallback033: aCallback033 w: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861.	invoked ifFalse: [self message: 'testCallback033 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback033 failed']"inttestCallback033(Callback033 aCallback033, int block_intA, int block_intB, int block_intC, int block_intD, int block_intE, int block_intF, int block_intG, int block_intH, int block_intI, int block_intJ, int block_intK, int block_intL, int block_intM, int block_intN, int block_intO, int block_intP, int block_intQ, int block_intR, int block_intS, int block_intT, int block_intU, int block_intV, int block_intW, int block_intX, int block_intY, int block_intZ, int block_int0, int block_int1, int block_int2, int block_int3){	return aCallback033(block_intA, block_intB, block_intC, block_intD, block_intE, block_intF, block_intG, block_intH, block_intI, block_intJ, block_intK, block_intL, block_intM, block_intN, block_intO, block_intP, block_intQ, block_intR, block_intS, block_intT, block_intU, block_intV, block_intW, block_intX, block_intY, block_intZ, block_int0, block_int1, block_int2, block_int3);}"</body><body package="DLLCC Test Suite">runTestCallback034	&lt;test&gt;	| result invoked aCallback034 |		invoked := false.	aCallback034 := CCallback		do:		[:block_uIntA :block_uIntB :block_uIntC :block_uIntD :block_uIntE :block_uIntF :block_uIntG :block_uIntH :block_uIntI :block_uIntJ :block_uIntK :block_uIntL :block_uIntM :block_uIntN :block_uIntO :block_uIntP :block_uIntQ :block_uIntR :block_uIntS :block_uIntT :block_uIntU :block_uIntV :block_uIntW :block_uIntX :block_uIntY :block_uIntZ :block_uInt0 :block_uInt1 :block_uInt2 :block_uInt3| | ok |		 invoked := true.		 ok := 0.		block_uIntA = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_uIntB = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_uIntC = 1234567892 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_uIntD = 1234567893 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_uIntE = 1234567894 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_uIntF = 1234567895 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_uIntG = 1234567896 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_uIntH = 1234567897 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_uIntI = 1234567898 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_uIntJ = 1234567899 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_uIntK = 1234567900 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_uIntL = 1234567901 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_uIntM = 1234567902 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_uIntN = 1234567903 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_uIntO = 1234567904 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_uIntP = 1234567905 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_uIntQ = 1234567906 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_uIntR = 1234567907 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_uIntS = 1234567908 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_uIntT = 1234567909 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_uIntU = 1234567910 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_uIntV = 1234567911 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_uIntW = 1234567912 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_uIntX = 1234567913 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_uIntY = 1234567914 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_uIntZ = 1234567915 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_uInt0 = 1234567916 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_uInt1 = 1234567917 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_uInt2 = 1234567918 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_uInt3 = 1234567919 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback034 failed in callback (bad parameter)'].		 1234567890]		ofType: self interface Callback034.	result := self interface testCallback034: aCallback034 w: 1234567890 w: 1234567891 w: 1234567892 w: 1234567893 w: 1234567894 w: 1234567895 w: 1234567896 w: 1234567897 w: 1234567898 w: 1234567899 w: 1234567900 w: 1234567901 w: 1234567902 w: 1234567903 w: 1234567904 w: 1234567905 w: 1234567906 w: 1234567907 w: 1234567908 w: 1234567909 w: 1234567910 w: 1234567911 w: 1234567912 w: 1234567913 w: 1234567914 w: 1234567915 w: 1234567916 w: 1234567917 w: 1234567918 w: 1234567919.	invoked ifFalse: [self message: 'testCallback034 failed to callback'].	1234567890 = result ifFalse:		[self message: 'testCallback034 failed']"unsigned inttestCallback034(Callback034 aCallback034, unsigned int block_uIntA, unsigned int block_uIntB, unsigned int block_uIntC, unsigned int block_uIntD, unsigned int block_uIntE, unsigned int block_uIntF, unsigned int block_uIntG, unsigned int block_uIntH, unsigned int block_uIntI, unsigned int block_uIntJ, unsigned int block_uIntK, unsigned int block_uIntL, unsigned int block_uIntM, unsigned int block_uIntN, unsigned int block_uIntO, unsigned int block_uIntP, unsigned int block_uIntQ, unsigned int block_uIntR, unsigned int block_uIntS, unsigned int block_uIntT, unsigned int block_uIntU, unsigned int block_uIntV, unsigned int block_uIntW, unsigned int block_uIntX, unsigned int block_uIntY, unsigned int block_uIntZ, unsigned int block_uInt0, unsigned int block_uInt1, unsigned int block_uInt2, unsigned int block_uInt3){	return aCallback034(block_uIntA, block_uIntB, block_uIntC, block_uIntD, block_uIntE, block_uIntF, block_uIntG, block_uIntH, block_uIntI, block_uIntJ, block_uIntK, block_uIntL, block_uIntM, block_uIntN, block_uIntO, block_uIntP, block_uIntQ, block_uIntR, block_uIntS, block_uIntT, block_uIntU, block_uIntV, block_uIntW, block_uIntX, block_uIntY, block_uIntZ, block_uInt0, block_uInt1, block_uInt2, block_uInt3);}"</body><body package="DLLCC Test Suite">runTestCallback035	&lt;test&gt;	| result invoked aCallback035 |		invoked := false.	aCallback035 := CCallback		do:		[:block_longA :block_longB :block_longC :block_longD :block_longE :block_longF :block_longG :block_longH :block_longI :block_longJ :block_longK :block_longL :block_longM :block_longN :block_longO :block_longP :block_longQ :block_longR :block_longS :block_longT :block_longU :block_longV :block_longW :block_longX :block_longY :block_longZ :block_long0 :block_long1 :block_long2 :block_long3| | ok |		 invoked := true.		 ok := 0.		block_longA = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_longB = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_longC = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_longD = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_longE = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_longF = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_longG = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_longH = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_longI = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_longJ = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_longK = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_longL = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_longM = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_longN = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_longO = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_longP = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_longQ = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_longR = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_longS = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_longT = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_longU = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_longV = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_longW = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_longX = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_longY = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_longZ = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_long0 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_long1 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_long2 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_long3 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback035 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback035.	result := self interface testCallback035: aCallback035 w: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861.	invoked ifFalse: [self message: 'testCallback035 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback035 failed']"longtestCallback035(Callback035 aCallback035, long block_longA, long block_longB, long block_longC, long block_longD, long block_longE, long block_longF, long block_longG, long block_longH, long block_longI, long block_longJ, long block_longK, long block_longL, long block_longM, long block_longN, long block_longO, long block_longP, long block_longQ, long block_longR, long block_longS, long block_longT, long block_longU, long block_longV, long block_longW, long block_longX, long block_longY, long block_longZ, long block_long0, long block_long1, long block_long2, long block_long3){	return aCallback035(block_longA, block_longB, block_longC, block_longD, block_longE, block_longF, block_longG, block_longH, block_longI, block_longJ, block_longK, block_longL, block_longM, block_longN, block_longO, block_longP, block_longQ, block_longR, block_longS, block_longT, block_longU, block_longV, block_longW, block_longX, block_longY, block_longZ, block_long0, block_long1, block_long2, block_long3);}"</body><body package="DLLCC Test Suite">runTestCallback036	&lt;test&gt;	| result invoked aCallback036 |		invoked := false.	aCallback036 := CCallback		do:		[:block_uLongA :block_uLongB :block_uLongC :block_uLongD :block_uLongE :block_uLongF :block_uLongG :block_uLongH :block_uLongI :block_uLongJ :block_uLongK :block_uLongL :block_uLongM :block_uLongN :block_uLongO :block_uLongP :block_uLongQ :block_uLongR :block_uLongS :block_uLongT :block_uLongU :block_uLongV :block_uLongW :block_uLongX :block_uLongY :block_uLongZ :block_uLong0 :block_uLong1 :block_uLong2 :block_uLong3| | ok |		 invoked := true.		 ok := 0.		block_uLongA = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_uLongB = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_uLongC = 1234567892 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_uLongD = 1234567893 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_uLongE = 1234567894 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_uLongF = 1234567895 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_uLongG = 1234567896 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_uLongH = 1234567897 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_uLongI = 1234567898 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_uLongJ = 1234567899 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_uLongK = 1234567900 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_uLongL = 1234567901 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_uLongM = 1234567902 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_uLongN = 1234567903 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_uLongO = 1234567904 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_uLongP = 1234567905 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_uLongQ = 1234567906 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_uLongR = 1234567907 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_uLongS = 1234567908 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_uLongT = 1234567909 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_uLongU = 1234567910 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_uLongV = 1234567911 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_uLongW = 1234567912 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_uLongX = 1234567913 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_uLongY = 1234567914 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_uLongZ = 1234567915 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_uLong0 = 1234567916 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_uLong1 = 1234567917 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_uLong2 = 1234567918 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_uLong3 = 1234567919 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback036 failed in callback (bad parameter)'].		 1234567890]		ofType: self interface Callback036.	result := self interface testCallback036: aCallback036 w: 1234567890 w: 1234567891 w: 1234567892 w: 1234567893 w: 1234567894 w: 1234567895 w: 1234567896 w: 1234567897 w: 1234567898 w: 1234567899 w: 1234567900 w: 1234567901 w: 1234567902 w: 1234567903 w: 1234567904 w: 1234567905 w: 1234567906 w: 1234567907 w: 1234567908 w: 1234567909 w: 1234567910 w: 1234567911 w: 1234567912 w: 1234567913 w: 1234567914 w: 1234567915 w: 1234567916 w: 1234567917 w: 1234567918 w: 1234567919.	invoked ifFalse: [self message: 'testCallback036 failed to callback'].	1234567890 = result ifFalse:		[self message: 'testCallback036 failed']"unsigned longtestCallback036(Callback036 aCallback036, unsigned long block_uLongA, unsigned long block_uLongB, unsigned long block_uLongC, unsigned long block_uLongD, unsigned long block_uLongE, unsigned long block_uLongF, unsigned long block_uLongG, unsigned long block_uLongH, unsigned long block_uLongI, unsigned long block_uLongJ, unsigned long block_uLongK, unsigned long block_uLongL, unsigned long block_uLongM, unsigned long block_uLongN, unsigned long block_uLongO, unsigned long block_uLongP, unsigned long block_uLongQ, unsigned long block_uLongR, unsigned long block_uLongS, unsigned long block_uLongT, unsigned long block_uLongU, unsigned long block_uLongV, unsigned long block_uLongW, unsigned long block_uLongX, unsigned long block_uLongY, unsigned long block_uLongZ, unsigned long block_uLong0, unsigned long block_uLong1, unsigned long block_uLong2, unsigned long block_uLong3){	return aCallback036(block_uLongA, block_uLongB, block_uLongC, block_uLongD, block_uLongE, block_uLongF, block_uLongG, block_uLongH, block_uLongI, block_uLongJ, block_uLongK, block_uLongL, block_uLongM, block_uLongN, block_uLongO, block_uLongP, block_uLongQ, block_uLongR, block_uLongS, block_uLongT, block_uLongU, block_uLongV, block_uLongW, block_uLongX, block_uLongY, block_uLongZ, block_uLong0, block_uLong1, block_uLong2, block_uLong3);}"</body><body package="DLLCC Test Suite">runTestCallback037	&lt;test&gt;	| result invoked aCallback037 |		invoked := false.	aCallback037 := CCallback		do:		[:block_longLongA :block_longLongB :block_longLongC :block_longLongD :block_longLongE :block_longLongF :block_longLongG :block_longLongH :block_longLongI :block_longLongJ :block_longLongK :block_longLongL :block_longLongM :block_longLongN :block_longLongO :block_longLongP :block_longLongQ :block_longLongR :block_longLongS :block_longLongT :block_longLongU :block_longLongV :block_longLongW :block_longLongX :block_longLongY :block_longLongZ :block_longLong0 :block_longLong1 :block_longLong2 :block_longLong3| | ok |		 invoked := true.		 ok := 0.		block_longLongA = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_longLongB = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_longLongC = -1234567890123456787 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_longLongD = -1234567890123456786 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_longLongE = -1234567890123456785 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_longLongF = -1234567890123456784 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_longLongG = -1234567890123456783 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_longLongH = -1234567890123456782 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_longLongI = -1234567890123456781 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_longLongJ = -1234567890123456780 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_longLongK = -1234567890123456779 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_longLongL = -1234567890123456778 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_longLongM = -1234567890123456777 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_longLongN = -1234567890123456776 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_longLongO = -1234567890123456775 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_longLongP = -1234567890123456774 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_longLongQ = -1234567890123456773 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_longLongR = -1234567890123456772 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_longLongS = -1234567890123456771 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_longLongT = -1234567890123456770 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_longLongU = -1234567890123456769 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_longLongV = -1234567890123456768 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_longLongW = -1234567890123456767 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_longLongX = -1234567890123456766 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_longLongY = -1234567890123456765 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_longLongZ = -1234567890123456764 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_longLong0 = -1234567890123456763 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_longLong1 = -1234567890123456762 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_longLong2 = -1234567890123456761 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_longLong3 = -1234567890123456760 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback037 failed in callback (bad parameter)'].		 -1234567890123456789]		ofType: self interface Callback037.	result := self interface testCallback037: aCallback037 w: -1234567890123456789 w: -1234567890123456788 w: -1234567890123456787 w: -1234567890123456786 w: -1234567890123456785 w: -1234567890123456784 w: -1234567890123456783 w: -1234567890123456782 w: -1234567890123456781 w: -1234567890123456780 w: -1234567890123456779 w: -1234567890123456778 w: -1234567890123456777 w: -1234567890123456776 w: -1234567890123456775 w: -1234567890123456774 w: -1234567890123456773 w: -1234567890123456772 w: -1234567890123456771 w: -1234567890123456770 w: -1234567890123456769 w: -1234567890123456768 w: -1234567890123456767 w: -1234567890123456766 w: -1234567890123456765 w: -1234567890123456764 w: -1234567890123456763 w: -1234567890123456762 w: -1234567890123456761 w: -1234567890123456760.	invoked ifFalse: [self message: 'testCallback037 failed to callback'].	-1234567890123456789 = result ifFalse:		[self message: 'testCallback037 failed']"long longtestCallback037(Callback037 aCallback037, long long block_longLongA, long long block_longLongB, long long block_longLongC, long long block_longLongD, long long block_longLongE, long long block_longLongF, long long block_longLongG, long long block_longLongH, long long block_longLongI, long long block_longLongJ, long long block_longLongK, long long block_longLongL, long long block_longLongM, long long block_longLongN, long long block_longLongO, long long block_longLongP, long long block_longLongQ, long long block_longLongR, long long block_longLongS, long long block_longLongT, long long block_longLongU, long long block_longLongV, long long block_longLongW, long long block_longLongX, long long block_longLongY, long long block_longLongZ, long long block_longLong0, long long block_longLong1, long long block_longLong2, long long block_longLong3){	return aCallback037(block_longLongA, block_longLongB, block_longLongC, block_longLongD, block_longLongE, block_longLongF, block_longLongG, block_longLongH, block_longLongI, block_longLongJ, block_longLongK, block_longLongL, block_longLongM, block_longLongN, block_longLongO, block_longLongP, block_longLongQ, block_longLongR, block_longLongS, block_longLongT, block_longLongU, block_longLongV, block_longLongW, block_longLongX, block_longLongY, block_longLongZ, block_longLong0, block_longLong1, block_longLong2, block_longLong3);}"</body><body package="DLLCC Test Suite">runTestCallback038	&lt;test&gt;	| result invoked aCallback038 |		invoked := false.	aCallback038 := CCallback		do:		[:block_uLongLongA :block_uLongLongB :block_uLongLongC :block_uLongLongD :block_uLongLongE :block_uLongLongF :block_uLongLongG :block_uLongLongH :block_uLongLongI :block_uLongLongJ :block_uLongLongK :block_uLongLongL :block_uLongLongM :block_uLongLongN :block_uLongLongO :block_uLongLongP :block_uLongLongQ :block_uLongLongR :block_uLongLongS :block_uLongLongT :block_uLongLongU :block_uLongLongV :block_uLongLongW :block_uLongLongX :block_uLongLongY :block_uLongLongZ :block_uLongLong0 :block_uLongLong1 :block_uLongLong2 :block_uLongLong3| | ok |		 invoked := true.		 ok := 0.		block_uLongLongA = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_uLongLongB = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_uLongLongC = 12345678901234567892 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_uLongLongD = 12345678901234567893 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_uLongLongE = 12345678901234567894 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_uLongLongF = 12345678901234567895 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_uLongLongG = 12345678901234567896 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_uLongLongH = 12345678901234567897 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_uLongLongI = 12345678901234567898 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_uLongLongJ = 12345678901234567899 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_uLongLongK = 12345678901234567900 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_uLongLongL = 12345678901234567901 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_uLongLongM = 12345678901234567902 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_uLongLongN = 12345678901234567903 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_uLongLongO = 12345678901234567904 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_uLongLongP = 12345678901234567905 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_uLongLongQ = 12345678901234567906 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_uLongLongR = 12345678901234567907 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_uLongLongS = 12345678901234567908 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_uLongLongT = 12345678901234567909 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_uLongLongU = 12345678901234567910 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_uLongLongV = 12345678901234567911 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_uLongLongW = 12345678901234567912 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_uLongLongX = 12345678901234567913 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_uLongLongY = 12345678901234567914 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_uLongLongZ = 12345678901234567915 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_uLongLong0 = 12345678901234567916 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_uLongLong1 = 12345678901234567917 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_uLongLong2 = 12345678901234567918 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_uLongLong3 = 12345678901234567919 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback038 failed in callback (bad parameter)'].		 12345678901234567890]		ofType: self interface Callback038.	result := self interface testCallback038: aCallback038 w: 12345678901234567890 w: 12345678901234567891 w: 12345678901234567892 w: 12345678901234567893 w: 12345678901234567894 w: 12345678901234567895 w: 12345678901234567896 w: 12345678901234567897 w: 12345678901234567898 w: 12345678901234567899 w: 12345678901234567900 w: 12345678901234567901 w: 12345678901234567902 w: 12345678901234567903 w: 12345678901234567904 w: 12345678901234567905 w: 12345678901234567906 w: 12345678901234567907 w: 12345678901234567908 w: 12345678901234567909 w: 12345678901234567910 w: 12345678901234567911 w: 12345678901234567912 w: 12345678901234567913 w: 12345678901234567914 w: 12345678901234567915 w: 12345678901234567916 w: 12345678901234567917 w: 12345678901234567918 w: 12345678901234567919.	invoked ifFalse: [self message: 'testCallback038 failed to callback'].	12345678901234567890 = result ifFalse:		[self message: 'testCallback038 failed']"unsigned long longtestCallback038(Callback038 aCallback038, unsigned long long block_uLongLongA, unsigned long long block_uLongLongB, unsigned long long block_uLongLongC, unsigned long long block_uLongLongD, unsigned long long block_uLongLongE, unsigned long long block_uLongLongF, unsigned long long block_uLongLongG, unsigned long long block_uLongLongH, unsigned long long block_uLongLongI, unsigned long long block_uLongLongJ, unsigned long long block_uLongLongK, unsigned long long block_uLongLongL, unsigned long long block_uLongLongM, unsigned long long block_uLongLongN, unsigned long long block_uLongLongO, unsigned long long block_uLongLongP, unsigned long long block_uLongLongQ, unsigned long long block_uLongLongR, unsigned long long block_uLongLongS, unsigned long long block_uLongLongT, unsigned long long block_uLongLongU, unsigned long long block_uLongLongV, unsigned long long block_uLongLongW, unsigned long long block_uLongLongX, unsigned long long block_uLongLongY, unsigned long long block_uLongLongZ, unsigned long long block_uLongLong0, unsigned long long block_uLongLong1, unsigned long long block_uLongLong2, unsigned long long block_uLongLong3){	return aCallback038(block_uLongLongA, block_uLongLongB, block_uLongLongC, block_uLongLongD, block_uLongLongE, block_uLongLongF, block_uLongLongG, block_uLongLongH, block_uLongLongI, block_uLongLongJ, block_uLongLongK, block_uLongLongL, block_uLongLongM, block_uLongLongN, block_uLongLongO, block_uLongLongP, block_uLongLongQ, block_uLongLongR, block_uLongLongS, block_uLongLongT, block_uLongLongU, block_uLongLongV, block_uLongLongW, block_uLongLongX, block_uLongLongY, block_uLongLongZ, block_uLongLong0, block_uLongLong1, block_uLongLong2, block_uLongLong3);}"</body><body package="DLLCC Test Suite">runTestCallback039	&lt;test&gt;	| result invoked aCallback039 |		invoked := false.	aCallback039 := CCallback		do:		[:block_floatA :block_floatB :block_floatC :block_floatD :block_floatE :block_floatF :block_floatG :block_floatH :block_floatI :block_floatJ :block_floatK :block_floatL :block_floatM :block_floatN :block_floatO :block_floatP :block_floatQ :block_floatR :block_floatS :block_floatT :block_floatU :block_floatV :block_floatW :block_floatX :block_floatY :block_floatZ :block_float0 :block_float1 :block_float2 :block_float3| | ok |		 invoked := true.		 ok := 0.		block_floatA = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_floatB = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_floatC = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_floatD = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_floatE = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_floatF = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_floatG = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_floatH = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_floatI = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_floatJ = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_floatK = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_floatL = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_floatM = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_floatN = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_floatO = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_floatP = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_floatQ = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_floatR = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_floatS = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_floatT = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_floatU = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_floatV = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_floatW = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_floatX = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_floatY = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_floatZ = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_float0 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_float1 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_float2 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_float3 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback039 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback039.	result := self interface testCallback039: aCallback039 w: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 127.456 w: 128.456 w: 129.456 w: 130.456 w: 131.456 w: 132.456 w: 133.456 w: 134.456 w: 135.456 w: 136.456 w: 137.456 w: 138.456 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 147.456 w: 148.456 w: 149.456 w: 150.456 w: 151.456 w: 152.456.	invoked ifFalse: [self message: 'testCallback039 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback039 failed']"floattestCallback039(Callback039 aCallback039, float block_floatA, float block_floatB, float block_floatC, float block_floatD, float block_floatE, float block_floatF, float block_floatG, float block_floatH, float block_floatI, float block_floatJ, float block_floatK, float block_floatL, float block_floatM, float block_floatN, float block_floatO, float block_floatP, float block_floatQ, float block_floatR, float block_floatS, float block_floatT, float block_floatU, float block_floatV, float block_floatW, float block_floatX, float block_floatY, float block_floatZ, float block_float0, float block_float1, float block_float2, float block_float3){	return aCallback039(block_floatA, block_floatB, block_floatC, block_floatD, block_floatE, block_floatF, block_floatG, block_floatH, block_floatI, block_floatJ, block_floatK, block_floatL, block_floatM, block_floatN, block_floatO, block_floatP, block_floatQ, block_floatR, block_floatS, block_floatT, block_floatU, block_floatV, block_floatW, block_floatX, block_floatY, block_floatZ, block_float0, block_float1, block_float2, block_float3);}"</body><body package="DLLCC Test Suite">runTestCallback040	&lt;test&gt;	| result invoked aCallback040 |		invoked := false.	aCallback040 := CCallback		do:		[:block_doubleA :block_doubleB :block_doubleC :block_doubleD :block_doubleE :block_doubleF :block_doubleG :block_doubleH :block_doubleI :block_doubleJ :block_doubleK :block_doubleL :block_doubleM :block_doubleN :block_doubleO :block_doubleP :block_doubleQ :block_doubleR :block_doubleS :block_doubleT :block_doubleU :block_doubleV :block_doubleW :block_doubleX :block_doubleY :block_doubleZ :block_double0 :block_double1 :block_double2 :block_double3| | ok |		 invoked := true.		 ok := 0.		block_doubleA = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		block_doubleB = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		block_doubleC = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		block_doubleD = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		block_doubleE = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		block_doubleF = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		block_doubleG = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		block_doubleH = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		block_doubleI = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		block_doubleJ = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		block_doubleK = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		block_doubleL = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		block_doubleM = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		block_doubleN = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		block_doubleO = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		block_doubleP = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		block_doubleQ = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		block_doubleR = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		block_doubleS = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		block_doubleT = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		block_doubleU = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		block_doubleV = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		block_doubleW = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		block_doubleX = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		block_doubleY = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		block_doubleZ = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		block_double0 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		block_double1 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		block_double2 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		block_double3 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback040 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback040.	result := self interface testCallback040: aCallback040 w: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: 4.2345678901235d8 w: 5.2345678901235d8 w: 6.2345678901235d8 w: 7.2345678901235d8 w: 8.2345678901235d8 w: 9.2345678901235d8 w: 1.0234567890124d9 w: 1.1234567890124d9 w: 1.2234567890123d9 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: 1.6234567890124d9 w: 1.7234567890123d9 w: 1.8234567890124d9 w: 1.9234567890124d9 w: 2.0234567890124d9 w: 2.1234567890124d9 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: 2.5234567890124d9 w: 2.6234567890124d9 w: 2.7234567890124d9 w: 2.8234567890124d9 w: 2.9234567890124d9 w: 3.0234567890124d9.	invoked ifFalse: [self message: 'testCallback040 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback040 failed']"doubletestCallback040(Callback040 aCallback040, double block_doubleA, double block_doubleB, double block_doubleC, double block_doubleD, double block_doubleE, double block_doubleF, double block_doubleG, double block_doubleH, double block_doubleI, double block_doubleJ, double block_doubleK, double block_doubleL, double block_doubleM, double block_doubleN, double block_doubleO, double block_doubleP, double block_doubleQ, double block_doubleR, double block_doubleS, double block_doubleT, double block_doubleU, double block_doubleV, double block_doubleW, double block_doubleX, double block_doubleY, double block_doubleZ, double block_double0, double block_double1, double block_double2, double block_double3){	return aCallback040(block_doubleA, block_doubleB, block_doubleC, block_doubleD, block_doubleE, block_doubleF, block_doubleG, block_doubleH, block_doubleI, block_doubleJ, block_doubleK, block_doubleL, block_doubleM, block_doubleN, block_doubleO, block_doubleP, block_doubleQ, block_doubleR, block_doubleS, block_doubleT, block_doubleU, block_doubleV, block_doubleW, block_doubleX, block_doubleY, block_doubleZ, block_double0, block_double1, block_double2, block_double3);}"</body><body package="DLLCC Test Suite">runTestCallback041	&lt;test&gt;	| result field charStructA charStruct invoked aCallback041 |	charStructA := self interface charStructA.	charStruct := self interface charStruct.		invoked := false.	aCallback041 := CCallback		do:		[:block_charStructA :block_charStructB :block_charStructC :block_charStructD :block_charStructE :block_charStructF :block_charStructG :block_charStructH :block_charStructI :block_charStructJ :block_charStructK :block_charStructL :block_charStructM :block_charStructN :block_charStructO :block_charStructP :block_charStructQ :block_charStructR :block_charStructS :block_charStructT :block_charStructU :block_charStructV :block_charStructW :block_charStructX :block_charStructY :block_charStructZ :block_charStruct0 :block_charStruct1 :block_charStruct2 :block_charStruct3| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (block_charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(2 #aChar) -&gt; (block_charStructB memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(3 #aChar) -&gt; (block_charStructC memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(4 #aChar) -&gt; (block_charStructD memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(5 #aChar) -&gt; (block_charStructE memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(6 #aChar) -&gt; (block_charStructF memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(7 #aChar) -&gt; (block_charStructG memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(8 #aChar) -&gt; (block_charStructH memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(9 #aChar) -&gt; (block_charStructI memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(10 #aChar) -&gt; (block_charStructJ memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(11 #aChar) -&gt; (block_charStructK memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(12 #aChar) -&gt; (block_charStructL memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(13 #aChar) -&gt; (block_charStructM memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(14 #aChar) -&gt; (block_charStructN memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(15 #aChar) -&gt; (block_charStructO memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(16 #aChar) -&gt; (block_charStructP memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(17 #aChar) -&gt; (block_charStructQ memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(18 #aChar) -&gt; (block_charStructR memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(19 #aChar) -&gt; (block_charStructS memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(20 #aChar) -&gt; (block_charStructT memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(21 #aChar) -&gt; (block_charStructU memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(22 #aChar) -&gt; (block_charStructV memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(23 #aChar) -&gt; (block_charStructW memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(24 #aChar) -&gt; (block_charStructX memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(25 #aChar) -&gt; (block_charStructY memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(26 #aChar) -&gt; (block_charStructZ memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(27 #aChar) -&gt; (block_charStruct0 memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(28 #aChar) -&gt; (block_charStruct1 memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(29 #aChar) -&gt; (block_charStruct2 memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(30 #aChar) -&gt; (block_charStruct3 memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback041 failed in callback (bad parameter)'].		 self interface charStruct]		ofType: self interface Callback041.	result := self interface testCallback041: aCallback041 w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct w: charStructA w: charStruct.	invoked ifFalse: [self message: 'testCallback041 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94) ifFalse:		[self message: 'testCallback041 failed']"CharStructtestCallback041(Callback041 aCallback041, CharStruct block_charStructA, CharStruct block_charStructB, CharStruct block_charStructC, CharStruct block_charStructD, CharStruct block_charStructE, CharStruct block_charStructF, CharStruct block_charStructG, CharStruct block_charStructH, CharStruct block_charStructI, CharStruct block_charStructJ, CharStruct block_charStructK, CharStruct block_charStructL, CharStruct block_charStructM, CharStruct block_charStructN, CharStruct block_charStructO, CharStruct block_charStructP, CharStruct block_charStructQ, CharStruct block_charStructR, CharStruct block_charStructS, CharStruct block_charStructT, CharStruct block_charStructU, CharStruct block_charStructV, CharStruct block_charStructW, CharStruct block_charStructX, CharStruct block_charStructY, CharStruct block_charStructZ, CharStruct block_charStruct0, CharStruct block_charStruct1, CharStruct block_charStruct2, CharStruct block_charStruct3){	return aCallback041(block_charStructA, block_charStructB, block_charStructC, block_charStructD, block_charStructE, block_charStructF, block_charStructG, block_charStructH, block_charStructI, block_charStructJ, block_charStructK, block_charStructL, block_charStructM, block_charStructN, block_charStructO, block_charStructP, block_charStructQ, block_charStructR, block_charStructS, block_charStructT, block_charStructU, block_charStructV, block_charStructW, block_charStructX, block_charStructY, block_charStructZ, block_charStruct0, block_charStruct1, block_charStruct2, block_charStruct3);}"</body><body package="DLLCC Test Suite">runTestCallback042	&lt;test&gt;	| result field smallStructA smallStruct invoked aCallback042 |	smallStructA := self interface smallStructA.	smallStruct := self interface smallStruct.		invoked := false.	aCallback042 := CCallback		do:		[:block_smallStructA :block_smallStructB :block_smallStructC :block_smallStructD :block_smallStructE :block_smallStructF :block_smallStructG :block_smallStructH :block_smallStructI :block_smallStructJ :block_smallStructK :block_smallStructL :block_smallStructM :block_smallStructN :block_smallStructO :block_smallStructP :block_smallStructQ :block_smallStructR :block_smallStructS :block_smallStructT :block_smallStructU :block_smallStructV :block_smallStructW :block_smallStructX :block_smallStructY :block_smallStructZ :block_smallStruct0 :block_smallStruct1 :block_smallStruct2 :block_smallStruct3| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aShort) -&gt; (block_smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(2 #aUChar) -&gt; (block_smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(3 #aUShort) -&gt; (block_smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(4 #aShort) -&gt; (block_smallStructB memberAt: #aShort).		(localField value = -12345	and: [localField := #(5 #aUChar) -&gt; (block_smallStructB memberAt: #aUChar).		localField value = 99	and: [localField := #(6 #aUShort) -&gt; (block_smallStructB memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(7 #aShort) -&gt; (block_smallStructC memberAt: #aShort).		(localField value = -12344	and: [localField := #(8 #aUChar) -&gt; (block_smallStructC memberAt: #aUChar).		localField value = 100	and: [localField := #(9 #aUShort) -&gt; (block_smallStructC memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(10 #aShort) -&gt; (block_smallStructD memberAt: #aShort).		(localField value = -12345	and: [localField := #(11 #aUChar) -&gt; (block_smallStructD memberAt: #aUChar).		localField value = 99	and: [localField := #(12 #aUShort) -&gt; (block_smallStructD memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(13 #aShort) -&gt; (block_smallStructE memberAt: #aShort).		(localField value = -12344	and: [localField := #(14 #aUChar) -&gt; (block_smallStructE memberAt: #aUChar).		localField value = 100	and: [localField := #(15 #aUShort) -&gt; (block_smallStructE memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(16 #aShort) -&gt; (block_smallStructF memberAt: #aShort).		(localField value = -12345	and: [localField := #(17 #aUChar) -&gt; (block_smallStructF memberAt: #aUChar).		localField value = 99	and: [localField := #(18 #aUShort) -&gt; (block_smallStructF memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(19 #aShort) -&gt; (block_smallStructG memberAt: #aShort).		(localField value = -12344	and: [localField := #(20 #aUChar) -&gt; (block_smallStructG memberAt: #aUChar).		localField value = 100	and: [localField := #(21 #aUShort) -&gt; (block_smallStructG memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(22 #aShort) -&gt; (block_smallStructH memberAt: #aShort).		(localField value = -12345	and: [localField := #(23 #aUChar) -&gt; (block_smallStructH memberAt: #aUChar).		localField value = 99	and: [localField := #(24 #aUShort) -&gt; (block_smallStructH memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(25 #aShort) -&gt; (block_smallStructI memberAt: #aShort).		(localField value = -12344	and: [localField := #(26 #aUChar) -&gt; (block_smallStructI memberAt: #aUChar).		localField value = 100	and: [localField := #(27 #aUShort) -&gt; (block_smallStructI memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(28 #aShort) -&gt; (block_smallStructJ memberAt: #aShort).		(localField value = -12345	and: [localField := #(29 #aUChar) -&gt; (block_smallStructJ memberAt: #aUChar).		localField value = 99	and: [localField := #(30 #aUShort) -&gt; (block_smallStructJ memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(31 #aShort) -&gt; (block_smallStructK memberAt: #aShort).		(localField value = -12344	and: [localField := #(32 #aUChar) -&gt; (block_smallStructK memberAt: #aUChar).		localField value = 100	and: [localField := #(33 #aUShort) -&gt; (block_smallStructK memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(34 #aShort) -&gt; (block_smallStructL memberAt: #aShort).		(localField value = -12345	and: [localField := #(35 #aUChar) -&gt; (block_smallStructL memberAt: #aUChar).		localField value = 99	and: [localField := #(36 #aUShort) -&gt; (block_smallStructL memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(37 #aShort) -&gt; (block_smallStructM memberAt: #aShort).		(localField value = -12344	and: [localField := #(38 #aUChar) -&gt; (block_smallStructM memberAt: #aUChar).		localField value = 100	and: [localField := #(39 #aUShort) -&gt; (block_smallStructM memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(40 #aShort) -&gt; (block_smallStructN memberAt: #aShort).		(localField value = -12345	and: [localField := #(41 #aUChar) -&gt; (block_smallStructN memberAt: #aUChar).		localField value = 99	and: [localField := #(42 #aUShort) -&gt; (block_smallStructN memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(43 #aShort) -&gt; (block_smallStructO memberAt: #aShort).		(localField value = -12344	and: [localField := #(44 #aUChar) -&gt; (block_smallStructO memberAt: #aUChar).		localField value = 100	and: [localField := #(45 #aUShort) -&gt; (block_smallStructO memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(46 #aShort) -&gt; (block_smallStructP memberAt: #aShort).		(localField value = -12345	and: [localField := #(47 #aUChar) -&gt; (block_smallStructP memberAt: #aUChar).		localField value = 99	and: [localField := #(48 #aUShort) -&gt; (block_smallStructP memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(49 #aShort) -&gt; (block_smallStructQ memberAt: #aShort).		(localField value = -12344	and: [localField := #(50 #aUChar) -&gt; (block_smallStructQ memberAt: #aUChar).		localField value = 100	and: [localField := #(51 #aUShort) -&gt; (block_smallStructQ memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(52 #aShort) -&gt; (block_smallStructR memberAt: #aShort).		(localField value = -12345	and: [localField := #(53 #aUChar) -&gt; (block_smallStructR memberAt: #aUChar).		localField value = 99	and: [localField := #(54 #aUShort) -&gt; (block_smallStructR memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(55 #aShort) -&gt; (block_smallStructS memberAt: #aShort).		(localField value = -12344	and: [localField := #(56 #aUChar) -&gt; (block_smallStructS memberAt: #aUChar).		localField value = 100	and: [localField := #(57 #aUShort) -&gt; (block_smallStructS memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(58 #aShort) -&gt; (block_smallStructT memberAt: #aShort).		(localField value = -12345	and: [localField := #(59 #aUChar) -&gt; (block_smallStructT memberAt: #aUChar).		localField value = 99	and: [localField := #(60 #aUShort) -&gt; (block_smallStructT memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(61 #aShort) -&gt; (block_smallStructU memberAt: #aShort).		(localField value = -12344	and: [localField := #(62 #aUChar) -&gt; (block_smallStructU memberAt: #aUChar).		localField value = 100	and: [localField := #(63 #aUShort) -&gt; (block_smallStructU memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(64 #aShort) -&gt; (block_smallStructV memberAt: #aShort).		(localField value = -12345	and: [localField := #(65 #aUChar) -&gt; (block_smallStructV memberAt: #aUChar).		localField value = 99	and: [localField := #(66 #aUShort) -&gt; (block_smallStructV memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(67 #aShort) -&gt; (block_smallStructW memberAt: #aShort).		(localField value = -12344	and: [localField := #(68 #aUChar) -&gt; (block_smallStructW memberAt: #aUChar).		localField value = 100	and: [localField := #(69 #aUShort) -&gt; (block_smallStructW memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(70 #aShort) -&gt; (block_smallStructX memberAt: #aShort).		(localField value = -12345	and: [localField := #(71 #aUChar) -&gt; (block_smallStructX memberAt: #aUChar).		localField value = 99	and: [localField := #(72 #aUShort) -&gt; (block_smallStructX memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(73 #aShort) -&gt; (block_smallStructY memberAt: #aShort).		(localField value = -12344	and: [localField := #(74 #aUChar) -&gt; (block_smallStructY memberAt: #aUChar).		localField value = 100	and: [localField := #(75 #aUShort) -&gt; (block_smallStructY memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(76 #aShort) -&gt; (block_smallStructZ memberAt: #aShort).		(localField value = -12345	and: [localField := #(77 #aUChar) -&gt; (block_smallStructZ memberAt: #aUChar).		localField value = 99	and: [localField := #(78 #aUShort) -&gt; (block_smallStructZ memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(79 #aShort) -&gt; (block_smallStruct0 memberAt: #aShort).		(localField value = -12344	and: [localField := #(80 #aUChar) -&gt; (block_smallStruct0 memberAt: #aUChar).		localField value = 100	and: [localField := #(81 #aUShort) -&gt; (block_smallStruct0 memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(82 #aShort) -&gt; (block_smallStruct1 memberAt: #aShort).		(localField value = -12345	and: [localField := #(83 #aUChar) -&gt; (block_smallStruct1 memberAt: #aUChar).		localField value = 99	and: [localField := #(84 #aUShort) -&gt; (block_smallStruct1 memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(85 #aShort) -&gt; (block_smallStruct2 memberAt: #aShort).		(localField value = -12344	and: [localField := #(86 #aUChar) -&gt; (block_smallStruct2 memberAt: #aUChar).		localField value = 100	and: [localField := #(87 #aUShort) -&gt; (block_smallStruct2 memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(88 #aShort) -&gt; (block_smallStruct3 memberAt: #aShort).		(localField value = -12345	and: [localField := #(89 #aUChar) -&gt; (block_smallStruct3 memberAt: #aUChar).		localField value = 99	and: [localField := #(90 #aUShort) -&gt; (block_smallStruct3 memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback042 failed in callback (bad parameter)'].		 self interface smallStruct]		ofType: self interface Callback042.	result := self interface testCallback042: aCallback042 w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct w: smallStructA w: smallStruct.	invoked ifFalse: [self message: 'testCallback042 failed to callback'].	field := #(1 #aShort) -&gt; (result memberAt: #aShort).		(field value = -12345	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345]]) ifFalse:		[self message: 'testCallback042 failed']"SmallStructtestCallback042(Callback042 aCallback042, SmallStruct block_smallStructA, SmallStruct block_smallStructB, SmallStruct block_smallStructC, SmallStruct block_smallStructD, SmallStruct block_smallStructE, SmallStruct block_smallStructF, SmallStruct block_smallStructG, SmallStruct block_smallStructH, SmallStruct block_smallStructI, SmallStruct block_smallStructJ, SmallStruct block_smallStructK, SmallStruct block_smallStructL, SmallStruct block_smallStructM, SmallStruct block_smallStructN, SmallStruct block_smallStructO, SmallStruct block_smallStructP, SmallStruct block_smallStructQ, SmallStruct block_smallStructR, SmallStruct block_smallStructS, SmallStruct block_smallStructT, SmallStruct block_smallStructU, SmallStruct block_smallStructV, SmallStruct block_smallStructW, SmallStruct block_smallStructX, SmallStruct block_smallStructY, SmallStruct block_smallStructZ, SmallStruct block_smallStruct0, SmallStruct block_smallStruct1, SmallStruct block_smallStruct2, SmallStruct block_smallStruct3){	return aCallback042(block_smallStructA, block_smallStructB, block_smallStructC, block_smallStructD, block_smallStructE, block_smallStructF, block_smallStructG, block_smallStructH, block_smallStructI, block_smallStructJ, block_smallStructK, block_smallStructL, block_smallStructM, block_smallStructN, block_smallStructO, block_smallStructP, block_smallStructQ, block_smallStructR, block_smallStructS, block_smallStructT, block_smallStructU, block_smallStructV, block_smallStructW, block_smallStructX, block_smallStructY, block_smallStructZ, block_smallStruct0, block_smallStruct1, block_smallStruct2, block_smallStruct3);}"</body><body package="DLLCC Test Suite">runTestCallback043	&lt;test&gt;	| result field mediumStructA mediumStruct invoked aCallback043 |	mediumStructA := self interface mediumStructA.	mediumStruct := self interface mediumStruct.		invoked := false.	aCallback043 := CCallback		do:		[:block_mediumStructA :block_mediumStructB :block_mediumStructC :block_mediumStructD :block_mediumStructE :block_mediumStructF :block_mediumStructG :block_mediumStructH :block_mediumStructI :block_mediumStructJ :block_mediumStructK :block_mediumStructL :block_mediumStructM :block_mediumStructN :block_mediumStructO :block_mediumStructP :block_mediumStructQ :block_mediumStructR :block_mediumStructS :block_mediumStructT :block_mediumStructU :block_mediumStructV :block_mediumStructW :block_mediumStructX :block_mediumStructY :block_mediumStructZ :block_mediumStruct0 :block_mediumStruct1 :block_mediumStruct2 :block_mediumStruct3| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #anInt) -&gt; (block_mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(2 #aFloat) -&gt; (block_mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(3 #anInt) -&gt; (block_mediumStructB memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(4 #aFloat) -&gt; (block_mediumStructB memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(5 #anInt) -&gt; (block_mediumStructC memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (block_mediumStructC memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(7 #anInt) -&gt; (block_mediumStructD memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(8 #aFloat) -&gt; (block_mediumStructD memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(9 #anInt) -&gt; (block_mediumStructE memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(10 #aFloat) -&gt; (block_mediumStructE memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(11 #anInt) -&gt; (block_mediumStructF memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(12 #aFloat) -&gt; (block_mediumStructF memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(13 #anInt) -&gt; (block_mediumStructG memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(14 #aFloat) -&gt; (block_mediumStructG memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(15 #anInt) -&gt; (block_mediumStructH memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(16 #aFloat) -&gt; (block_mediumStructH memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(17 #anInt) -&gt; (block_mediumStructI memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(18 #aFloat) -&gt; (block_mediumStructI memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(19 #anInt) -&gt; (block_mediumStructJ memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(20 #aFloat) -&gt; (block_mediumStructJ memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(21 #anInt) -&gt; (block_mediumStructK memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(22 #aFloat) -&gt; (block_mediumStructK memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(23 #anInt) -&gt; (block_mediumStructL memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(24 #aFloat) -&gt; (block_mediumStructL memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(25 #anInt) -&gt; (block_mediumStructM memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(26 #aFloat) -&gt; (block_mediumStructM memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(27 #anInt) -&gt; (block_mediumStructN memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(28 #aFloat) -&gt; (block_mediumStructN memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(29 #anInt) -&gt; (block_mediumStructO memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (block_mediumStructO memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(31 #anInt) -&gt; (block_mediumStructP memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(32 #aFloat) -&gt; (block_mediumStructP memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(33 #anInt) -&gt; (block_mediumStructQ memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(34 #aFloat) -&gt; (block_mediumStructQ memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(35 #anInt) -&gt; (block_mediumStructR memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(36 #aFloat) -&gt; (block_mediumStructR memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(37 #anInt) -&gt; (block_mediumStructS memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(38 #aFloat) -&gt; (block_mediumStructS memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(39 #anInt) -&gt; (block_mediumStructT memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(40 #aFloat) -&gt; (block_mediumStructT memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(41 #anInt) -&gt; (block_mediumStructU memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(42 #aFloat) -&gt; (block_mediumStructU memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(43 #anInt) -&gt; (block_mediumStructV memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(44 #aFloat) -&gt; (block_mediumStructV memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(45 #anInt) -&gt; (block_mediumStructW memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(46 #aFloat) -&gt; (block_mediumStructW memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(47 #anInt) -&gt; (block_mediumStructX memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(48 #aFloat) -&gt; (block_mediumStructX memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(49 #anInt) -&gt; (block_mediumStructY memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(50 #aFloat) -&gt; (block_mediumStructY memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(51 #anInt) -&gt; (block_mediumStructZ memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(52 #aFloat) -&gt; (block_mediumStructZ memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(53 #anInt) -&gt; (block_mediumStruct0 memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(54 #aFloat) -&gt; (block_mediumStruct0 memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(55 #anInt) -&gt; (block_mediumStruct1 memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(56 #aFloat) -&gt; (block_mediumStruct1 memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(57 #anInt) -&gt; (block_mediumStruct2 memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(58 #aFloat) -&gt; (block_mediumStruct2 memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(59 #anInt) -&gt; (block_mediumStruct3 memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(60 #aFloat) -&gt; (block_mediumStruct3 memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback043 failed in callback (bad parameter)'].		 self interface mediumStruct]		ofType: self interface Callback043.	result := self interface testCallback043: aCallback043 w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct w: mediumStructA w: mediumStruct.	invoked ifFalse: [self message: 'testCallback043 failed to callback'].	field := #(1 #anInt) -&gt; (result memberAt: #anInt).		(field value = -1234567890	and: [field := #(2 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]) ifFalse:		[self message: 'testCallback043 failed']"MediumStructtestCallback043(Callback043 aCallback043, MediumStruct block_mediumStructA, MediumStruct block_mediumStructB, MediumStruct block_mediumStructC, MediumStruct block_mediumStructD, MediumStruct block_mediumStructE, MediumStruct block_mediumStructF, MediumStruct block_mediumStructG, MediumStruct block_mediumStructH, MediumStruct block_mediumStructI, MediumStruct block_mediumStructJ, MediumStruct block_mediumStructK, MediumStruct block_mediumStructL, MediumStruct block_mediumStructM, MediumStruct block_mediumStructN, MediumStruct block_mediumStructO, MediumStruct block_mediumStructP, MediumStruct block_mediumStructQ, MediumStruct block_mediumStructR, MediumStruct block_mediumStructS, MediumStruct block_mediumStructT, MediumStruct block_mediumStructU, MediumStruct block_mediumStructV, MediumStruct block_mediumStructW, MediumStruct block_mediumStructX, MediumStruct block_mediumStructY, MediumStruct block_mediumStructZ, MediumStruct block_mediumStruct0, MediumStruct block_mediumStruct1, MediumStruct block_mediumStruct2, MediumStruct block_mediumStruct3){	return aCallback043(block_mediumStructA, block_mediumStructB, block_mediumStructC, block_mediumStructD, block_mediumStructE, block_mediumStructF, block_mediumStructG, block_mediumStructH, block_mediumStructI, block_mediumStructJ, block_mediumStructK, block_mediumStructL, block_mediumStructM, block_mediumStructN, block_mediumStructO, block_mediumStructP, block_mediumStructQ, block_mediumStructR, block_mediumStructS, block_mediumStructT, block_mediumStructU, block_mediumStructV, block_mediumStructW, block_mediumStructX, block_mediumStructY, block_mediumStructZ, block_mediumStruct0, block_mediumStruct1, block_mediumStruct2, block_mediumStruct3);}"</body><body package="DLLCC Test Suite">runTestCallback044	&lt;test&gt;	| result field largeStructA largeStruct invoked aCallback044 |	largeStructA := self interface largeStructA.	largeStruct := self interface largeStruct.		invoked := false.	aCallback044 := CCallback		do:		[:block_largeStructA :block_largeStructB :block_largeStructC :block_largeStructD :block_largeStructE :block_largeStructF :block_largeStructG :block_largeStructH :block_largeStructI :block_largeStructJ :block_largeStructK :block_largeStructL :block_largeStructM :block_largeStructN :block_largeStructO :block_largeStructP :block_largeStructQ :block_largeStructR :block_largeStructS :block_largeStructT :block_largeStructU :block_largeStructV :block_largeStructW :block_largeStructX :block_largeStructY :block_largeStructZ :block_largeStruct0 :block_largeStruct1 :block_largeStruct2 :block_largeStruct3| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aLong) -&gt; (block_largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(2 #aDouble) -&gt; (block_largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(3 #aULong) -&gt; (block_largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(4 #aFloat) -&gt; (block_largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(5 #aLong) -&gt; (block_largeStructB memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(6 #aDouble) -&gt; (block_largeStructB memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(7 #aULong) -&gt; (block_largeStructB memberAt: #aULong).		localField value = 1234567890	and: [localField := #(8 #aFloat) -&gt; (block_largeStructB memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(9 #aLong) -&gt; (block_largeStructC memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(10 #aDouble) -&gt; (block_largeStructC memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(11 #aULong) -&gt; (block_largeStructC memberAt: #aULong).		localField value = 1234567891	and: [localField := #(12 #aFloat) -&gt; (block_largeStructC memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(13 #aLong) -&gt; (block_largeStructD memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(14 #aDouble) -&gt; (block_largeStructD memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(15 #aULong) -&gt; (block_largeStructD memberAt: #aULong).		localField value = 1234567890	and: [localField := #(16 #aFloat) -&gt; (block_largeStructD memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(17 #aLong) -&gt; (block_largeStructE memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(18 #aDouble) -&gt; (block_largeStructE memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(19 #aULong) -&gt; (block_largeStructE memberAt: #aULong).		localField value = 1234567891	and: [localField := #(20 #aFloat) -&gt; (block_largeStructE memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(21 #aLong) -&gt; (block_largeStructF memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(22 #aDouble) -&gt; (block_largeStructF memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #aULong) -&gt; (block_largeStructF memberAt: #aULong).		localField value = 1234567890	and: [localField := #(24 #aFloat) -&gt; (block_largeStructF memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(25 #aLong) -&gt; (block_largeStructG memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(26 #aDouble) -&gt; (block_largeStructG memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(27 #aULong) -&gt; (block_largeStructG memberAt: #aULong).		localField value = 1234567891	and: [localField := #(28 #aFloat) -&gt; (block_largeStructG memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(29 #aLong) -&gt; (block_largeStructH memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(30 #aDouble) -&gt; (block_largeStructH memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(31 #aULong) -&gt; (block_largeStructH memberAt: #aULong).		localField value = 1234567890	and: [localField := #(32 #aFloat) -&gt; (block_largeStructH memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(33 #aLong) -&gt; (block_largeStructI memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(34 #aDouble) -&gt; (block_largeStructI memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(35 #aULong) -&gt; (block_largeStructI memberAt: #aULong).		localField value = 1234567891	and: [localField := #(36 #aFloat) -&gt; (block_largeStructI memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(37 #aLong) -&gt; (block_largeStructJ memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(38 #aDouble) -&gt; (block_largeStructJ memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(39 #aULong) -&gt; (block_largeStructJ memberAt: #aULong).		localField value = 1234567890	and: [localField := #(40 #aFloat) -&gt; (block_largeStructJ memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(41 #aLong) -&gt; (block_largeStructK memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(42 #aDouble) -&gt; (block_largeStructK memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(43 #aULong) -&gt; (block_largeStructK memberAt: #aULong).		localField value = 1234567891	and: [localField := #(44 #aFloat) -&gt; (block_largeStructK memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(45 #aLong) -&gt; (block_largeStructL memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(46 #aDouble) -&gt; (block_largeStructL memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #aULong) -&gt; (block_largeStructL memberAt: #aULong).		localField value = 1234567890	and: [localField := #(48 #aFloat) -&gt; (block_largeStructL memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(49 #aLong) -&gt; (block_largeStructM memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(50 #aDouble) -&gt; (block_largeStructM memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(51 #aULong) -&gt; (block_largeStructM memberAt: #aULong).		localField value = 1234567891	and: [localField := #(52 #aFloat) -&gt; (block_largeStructM memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(53 #aLong) -&gt; (block_largeStructN memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(54 #aDouble) -&gt; (block_largeStructN memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(55 #aULong) -&gt; (block_largeStructN memberAt: #aULong).		localField value = 1234567890	and: [localField := #(56 #aFloat) -&gt; (block_largeStructN memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(57 #aLong) -&gt; (block_largeStructO memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(58 #aDouble) -&gt; (block_largeStructO memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(59 #aULong) -&gt; (block_largeStructO memberAt: #aULong).		localField value = 1234567891	and: [localField := #(60 #aFloat) -&gt; (block_largeStructO memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(61 #aLong) -&gt; (block_largeStructP memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(62 #aDouble) -&gt; (block_largeStructP memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(63 #aULong) -&gt; (block_largeStructP memberAt: #aULong).		localField value = 1234567890	and: [localField := #(64 #aFloat) -&gt; (block_largeStructP memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(65 #aLong) -&gt; (block_largeStructQ memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(66 #aDouble) -&gt; (block_largeStructQ memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(67 #aULong) -&gt; (block_largeStructQ memberAt: #aULong).		localField value = 1234567891	and: [localField := #(68 #aFloat) -&gt; (block_largeStructQ memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(69 #aLong) -&gt; (block_largeStructR memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(70 #aDouble) -&gt; (block_largeStructR memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(71 #aULong) -&gt; (block_largeStructR memberAt: #aULong).		localField value = 1234567890	and: [localField := #(72 #aFloat) -&gt; (block_largeStructR memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(73 #aLong) -&gt; (block_largeStructS memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(74 #aDouble) -&gt; (block_largeStructS memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(75 #aULong) -&gt; (block_largeStructS memberAt: #aULong).		localField value = 1234567891	and: [localField := #(76 #aFloat) -&gt; (block_largeStructS memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(77 #aLong) -&gt; (block_largeStructT memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(78 #aDouble) -&gt; (block_largeStructT memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(79 #aULong) -&gt; (block_largeStructT memberAt: #aULong).		localField value = 1234567890	and: [localField := #(80 #aFloat) -&gt; (block_largeStructT memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(81 #aLong) -&gt; (block_largeStructU memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(82 #aDouble) -&gt; (block_largeStructU memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(83 #aULong) -&gt; (block_largeStructU memberAt: #aULong).		localField value = 1234567891	and: [localField := #(84 #aFloat) -&gt; (block_largeStructU memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(85 #aLong) -&gt; (block_largeStructV memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(86 #aDouble) -&gt; (block_largeStructV memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(87 #aULong) -&gt; (block_largeStructV memberAt: #aULong).		localField value = 1234567890	and: [localField := #(88 #aFloat) -&gt; (block_largeStructV memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(89 #aLong) -&gt; (block_largeStructW memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(90 #aDouble) -&gt; (block_largeStructW memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(91 #aULong) -&gt; (block_largeStructW memberAt: #aULong).		localField value = 1234567891	and: [localField := #(92 #aFloat) -&gt; (block_largeStructW memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(93 #aLong) -&gt; (block_largeStructX memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(94 #aDouble) -&gt; (block_largeStructX memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(95 #aULong) -&gt; (block_largeStructX memberAt: #aULong).		localField value = 1234567890	and: [localField := #(96 #aFloat) -&gt; (block_largeStructX memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(97 #aLong) -&gt; (block_largeStructY memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(98 #aDouble) -&gt; (block_largeStructY memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(99 #aULong) -&gt; (block_largeStructY memberAt: #aULong).		localField value = 1234567891	and: [localField := #(100 #aFloat) -&gt; (block_largeStructY memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(101 #aLong) -&gt; (block_largeStructZ memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(102 #aDouble) -&gt; (block_largeStructZ memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(103 #aULong) -&gt; (block_largeStructZ memberAt: #aULong).		localField value = 1234567890	and: [localField := #(104 #aFloat) -&gt; (block_largeStructZ memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(105 #aLong) -&gt; (block_largeStruct0 memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(106 #aDouble) -&gt; (block_largeStruct0 memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(107 #aULong) -&gt; (block_largeStruct0 memberAt: #aULong).		localField value = 1234567891	and: [localField := #(108 #aFloat) -&gt; (block_largeStruct0 memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(109 #aLong) -&gt; (block_largeStruct1 memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(110 #aDouble) -&gt; (block_largeStruct1 memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(111 #aULong) -&gt; (block_largeStruct1 memberAt: #aULong).		localField value = 1234567890	and: [localField := #(112 #aFloat) -&gt; (block_largeStruct1 memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(113 #aLong) -&gt; (block_largeStruct2 memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(114 #aDouble) -&gt; (block_largeStruct2 memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(115 #aULong) -&gt; (block_largeStruct2 memberAt: #aULong).		localField value = 1234567891	and: [localField := #(116 #aFloat) -&gt; (block_largeStruct2 memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(117 #aLong) -&gt; (block_largeStruct3 memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(118 #aDouble) -&gt; (block_largeStruct3 memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(119 #aULong) -&gt; (block_largeStruct3 memberAt: #aULong).		localField value = 1234567890	and: [localField := #(120 #aFloat) -&gt; (block_largeStruct3 memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback044 failed in callback (bad parameter)'].		 self interface largeStruct]		ofType: self interface Callback044.	result := self interface testCallback044: aCallback044 w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct w: largeStructA w: largeStruct.	invoked ifFalse: [self message: 'testCallback044 failed to callback'].	field := #(1 #aLong) -&gt; (result memberAt: #aLong).		(field value = -1234567890	and: [field := #(2 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(3 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(4 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]]]) ifFalse:		[self message: 'testCallback044 failed']"LargeStructtestCallback044(Callback044 aCallback044, LargeStruct block_largeStructA, LargeStruct block_largeStructB, LargeStruct block_largeStructC, LargeStruct block_largeStructD, LargeStruct block_largeStructE, LargeStruct block_largeStructF, LargeStruct block_largeStructG, LargeStruct block_largeStructH, LargeStruct block_largeStructI, LargeStruct block_largeStructJ, LargeStruct block_largeStructK, LargeStruct block_largeStructL, LargeStruct block_largeStructM, LargeStruct block_largeStructN, LargeStruct block_largeStructO, LargeStruct block_largeStructP, LargeStruct block_largeStructQ, LargeStruct block_largeStructR, LargeStruct block_largeStructS, LargeStruct block_largeStructT, LargeStruct block_largeStructU, LargeStruct block_largeStructV, LargeStruct block_largeStructW, LargeStruct block_largeStructX, LargeStruct block_largeStructY, LargeStruct block_largeStructZ, LargeStruct block_largeStruct0, LargeStruct block_largeStruct1, LargeStruct block_largeStruct2, LargeStruct block_largeStruct3){	return aCallback044(block_largeStructA, block_largeStructB, block_largeStructC, block_largeStructD, block_largeStructE, block_largeStructF, block_largeStructG, block_largeStructH, block_largeStructI, block_largeStructJ, block_largeStructK, block_largeStructL, block_largeStructM, block_largeStructN, block_largeStructO, block_largeStructP, block_largeStructQ, block_largeStructR, block_largeStructS, block_largeStructT, block_largeStructU, block_largeStructV, block_largeStructW, block_largeStructX, block_largeStructY, block_largeStructZ, block_largeStruct0, block_largeStruct1, block_largeStruct2, block_largeStruct3);}"</body><body package="DLLCC Test Suite">runTestCallback045	&lt;test&gt;	| result field bigStructA bigStruct invoked aCallback045 |	bigStructA := self interface bigStructA.	bigStruct := self interface bigStruct.		invoked := false.	aCallback045 := CCallback		do:		[:block_bigStructA :block_bigStructB :block_bigStructC :block_bigStructD :block_bigStructE :block_bigStructF :block_bigStructG :block_bigStructH :block_bigStructI :block_bigStructJ :block_bigStructK :block_bigStructL :block_bigStructM :block_bigStructN :block_bigStructO :block_bigStructP :block_bigStructQ :block_bigStructR :block_bigStructS :block_bigStructT :block_bigStructU :block_bigStructV :block_bigStructW :block_bigStructX :block_bigStructY :block_bigStructZ :block_bigStruct0 :block_bigStruct1 :block_bigStruct2 :block_bigStruct3| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (block_bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(2 #aUChar) -&gt; (block_bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(3 #aShort) -&gt; (block_bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(4 #aUShort) -&gt; (block_bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(5 #anInt) -&gt; (block_bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(6 #aUInt) -&gt; (block_bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(7 #aLong) -&gt; (block_bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(8 #aULong) -&gt; (block_bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(9 #aLongLong) -&gt; (block_bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(10 #aULongLong) -&gt; (block_bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(11 #aFloat) -&gt; (block_bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(12 #aDouble) -&gt; (block_bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(13 #charStruct) -&gt; (block_bigStructA memberAt: #charStruct).		localField := #(13 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(14 #smallStruct) -&gt; (block_bigStructA memberAt: #smallStruct).		localField := #(14 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(15 #aChar) -&gt; (block_bigStructB memberAt: #aChar).		(localField value = -94	and: [localField := #(16 #aUChar) -&gt; (block_bigStructB memberAt: #aUChar).		localField value = 99	and: [localField := #(17 #aShort) -&gt; (block_bigStructB memberAt: #aShort).		localField value = -12345	and: [localField := #(18 #aUShort) -&gt; (block_bigStructB memberAt: #aUShort).		localField value = 12345	and: [localField := #(19 #anInt) -&gt; (block_bigStructB memberAt: #anInt).		localField value = -1234567890	and: [localField := #(20 #aUInt) -&gt; (block_bigStructB memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(21 #aLong) -&gt; (block_bigStructB memberAt: #aLong).		localField value = -1234567890	and: [localField := #(22 #aULong) -&gt; (block_bigStructB memberAt: #aULong).		localField value = 1234567890	and: [localField := #(23 #aLongLong) -&gt; (block_bigStructB memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(24 #aULongLong) -&gt; (block_bigStructB memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(25 #aFloat) -&gt; (block_bigStructB memberAt: #aFloat).		localField value = 123.456	and: [localField := #(26 #aDouble) -&gt; (block_bigStructB memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(27 #charStruct) -&gt; (block_bigStructB memberAt: #charStruct).		localField := #(27 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(28 #smallStruct) -&gt; (block_bigStructB memberAt: #smallStruct).		localField := #(28 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(29 #aChar) -&gt; (block_bigStructC memberAt: #aChar).		(localField value = -93	and: [localField := #(30 #aUChar) -&gt; (block_bigStructC memberAt: #aUChar).		localField value = 100	and: [localField := #(31 #aShort) -&gt; (block_bigStructC memberAt: #aShort).		localField value = -12344	and: [localField := #(32 #aUShort) -&gt; (block_bigStructC memberAt: #aUShort).		localField value = 12346	and: [localField := #(33 #anInt) -&gt; (block_bigStructC memberAt: #anInt).		localField value = -1234567889	and: [localField := #(34 #aUInt) -&gt; (block_bigStructC memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(35 #aLong) -&gt; (block_bigStructC memberAt: #aLong).		localField value = -1234567889	and: [localField := #(36 #aULong) -&gt; (block_bigStructC memberAt: #aULong).		localField value = 1234567891	and: [localField := #(37 #aLongLong) -&gt; (block_bigStructC memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(38 #aULongLong) -&gt; (block_bigStructC memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(39 #aFloat) -&gt; (block_bigStructC memberAt: #aFloat).		localField value = 124.456	and: [localField := #(40 #aDouble) -&gt; (block_bigStructC memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(41 #charStruct) -&gt; (block_bigStructC memberAt: #charStruct).		localField := #(41 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(42 #smallStruct) -&gt; (block_bigStructC memberAt: #smallStruct).		localField := #(42 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(43 #aChar) -&gt; (block_bigStructD memberAt: #aChar).		(localField value = -94	and: [localField := #(44 #aUChar) -&gt; (block_bigStructD memberAt: #aUChar).		localField value = 99	and: [localField := #(45 #aShort) -&gt; (block_bigStructD memberAt: #aShort).		localField value = -12345	and: [localField := #(46 #aUShort) -&gt; (block_bigStructD memberAt: #aUShort).		localField value = 12345	and: [localField := #(47 #anInt) -&gt; (block_bigStructD memberAt: #anInt).		localField value = -1234567890	and: [localField := #(48 #aUInt) -&gt; (block_bigStructD memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(49 #aLong) -&gt; (block_bigStructD memberAt: #aLong).		localField value = -1234567890	and: [localField := #(50 #aULong) -&gt; (block_bigStructD memberAt: #aULong).		localField value = 1234567890	and: [localField := #(51 #aLongLong) -&gt; (block_bigStructD memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(52 #aULongLong) -&gt; (block_bigStructD memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(53 #aFloat) -&gt; (block_bigStructD memberAt: #aFloat).		localField value = 123.456	and: [localField := #(54 #aDouble) -&gt; (block_bigStructD memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(55 #charStruct) -&gt; (block_bigStructD memberAt: #charStruct).		localField := #(55 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(56 #smallStruct) -&gt; (block_bigStructD memberAt: #smallStruct).		localField := #(56 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(57 #aChar) -&gt; (block_bigStructE memberAt: #aChar).		(localField value = -93	and: [localField := #(58 #aUChar) -&gt; (block_bigStructE memberAt: #aUChar).		localField value = 100	and: [localField := #(59 #aShort) -&gt; (block_bigStructE memberAt: #aShort).		localField value = -12344	and: [localField := #(60 #aUShort) -&gt; (block_bigStructE memberAt: #aUShort).		localField value = 12346	and: [localField := #(61 #anInt) -&gt; (block_bigStructE memberAt: #anInt).		localField value = -1234567889	and: [localField := #(62 #aUInt) -&gt; (block_bigStructE memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(63 #aLong) -&gt; (block_bigStructE memberAt: #aLong).		localField value = -1234567889	and: [localField := #(64 #aULong) -&gt; (block_bigStructE memberAt: #aULong).		localField value = 1234567891	and: [localField := #(65 #aLongLong) -&gt; (block_bigStructE memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(66 #aULongLong) -&gt; (block_bigStructE memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(67 #aFloat) -&gt; (block_bigStructE memberAt: #aFloat).		localField value = 124.456	and: [localField := #(68 #aDouble) -&gt; (block_bigStructE memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(69 #charStruct) -&gt; (block_bigStructE memberAt: #charStruct).		localField := #(69 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(70 #smallStruct) -&gt; (block_bigStructE memberAt: #smallStruct).		localField := #(70 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(71 #aChar) -&gt; (block_bigStructF memberAt: #aChar).		(localField value = -94	and: [localField := #(72 #aUChar) -&gt; (block_bigStructF memberAt: #aUChar).		localField value = 99	and: [localField := #(73 #aShort) -&gt; (block_bigStructF memberAt: #aShort).		localField value = -12345	and: [localField := #(74 #aUShort) -&gt; (block_bigStructF memberAt: #aUShort).		localField value = 12345	and: [localField := #(75 #anInt) -&gt; (block_bigStructF memberAt: #anInt).		localField value = -1234567890	and: [localField := #(76 #aUInt) -&gt; (block_bigStructF memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(77 #aLong) -&gt; (block_bigStructF memberAt: #aLong).		localField value = -1234567890	and: [localField := #(78 #aULong) -&gt; (block_bigStructF memberAt: #aULong).		localField value = 1234567890	and: [localField := #(79 #aLongLong) -&gt; (block_bigStructF memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(80 #aULongLong) -&gt; (block_bigStructF memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(81 #aFloat) -&gt; (block_bigStructF memberAt: #aFloat).		localField value = 123.456	and: [localField := #(82 #aDouble) -&gt; (block_bigStructF memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(83 #charStruct) -&gt; (block_bigStructF memberAt: #charStruct).		localField := #(83 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(84 #smallStruct) -&gt; (block_bigStructF memberAt: #smallStruct).		localField := #(84 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(85 #aChar) -&gt; (block_bigStructG memberAt: #aChar).		(localField value = -93	and: [localField := #(86 #aUChar) -&gt; (block_bigStructG memberAt: #aUChar).		localField value = 100	and: [localField := #(87 #aShort) -&gt; (block_bigStructG memberAt: #aShort).		localField value = -12344	and: [localField := #(88 #aUShort) -&gt; (block_bigStructG memberAt: #aUShort).		localField value = 12346	and: [localField := #(89 #anInt) -&gt; (block_bigStructG memberAt: #anInt).		localField value = -1234567889	and: [localField := #(90 #aUInt) -&gt; (block_bigStructG memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(91 #aLong) -&gt; (block_bigStructG memberAt: #aLong).		localField value = -1234567889	and: [localField := #(92 #aULong) -&gt; (block_bigStructG memberAt: #aULong).		localField value = 1234567891	and: [localField := #(93 #aLongLong) -&gt; (block_bigStructG memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(94 #aULongLong) -&gt; (block_bigStructG memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(95 #aFloat) -&gt; (block_bigStructG memberAt: #aFloat).		localField value = 124.456	and: [localField := #(96 #aDouble) -&gt; (block_bigStructG memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(97 #charStruct) -&gt; (block_bigStructG memberAt: #charStruct).		localField := #(97 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(98 #smallStruct) -&gt; (block_bigStructG memberAt: #smallStruct).		localField := #(98 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(99 #aChar) -&gt; (block_bigStructH memberAt: #aChar).		(localField value = -94	and: [localField := #(100 #aUChar) -&gt; (block_bigStructH memberAt: #aUChar).		localField value = 99	and: [localField := #(101 #aShort) -&gt; (block_bigStructH memberAt: #aShort).		localField value = -12345	and: [localField := #(102 #aUShort) -&gt; (block_bigStructH memberAt: #aUShort).		localField value = 12345	and: [localField := #(103 #anInt) -&gt; (block_bigStructH memberAt: #anInt).		localField value = -1234567890	and: [localField := #(104 #aUInt) -&gt; (block_bigStructH memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(105 #aLong) -&gt; (block_bigStructH memberAt: #aLong).		localField value = -1234567890	and: [localField := #(106 #aULong) -&gt; (block_bigStructH memberAt: #aULong).		localField value = 1234567890	and: [localField := #(107 #aLongLong) -&gt; (block_bigStructH memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(108 #aULongLong) -&gt; (block_bigStructH memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(109 #aFloat) -&gt; (block_bigStructH memberAt: #aFloat).		localField value = 123.456	and: [localField := #(110 #aDouble) -&gt; (block_bigStructH memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(111 #charStruct) -&gt; (block_bigStructH memberAt: #charStruct).		localField := #(111 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(112 #smallStruct) -&gt; (block_bigStructH memberAt: #smallStruct).		localField := #(112 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(113 #aChar) -&gt; (block_bigStructI memberAt: #aChar).		(localField value = -93	and: [localField := #(114 #aUChar) -&gt; (block_bigStructI memberAt: #aUChar).		localField value = 100	and: [localField := #(115 #aShort) -&gt; (block_bigStructI memberAt: #aShort).		localField value = -12344	and: [localField := #(116 #aUShort) -&gt; (block_bigStructI memberAt: #aUShort).		localField value = 12346	and: [localField := #(117 #anInt) -&gt; (block_bigStructI memberAt: #anInt).		localField value = -1234567889	and: [localField := #(118 #aUInt) -&gt; (block_bigStructI memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(119 #aLong) -&gt; (block_bigStructI memberAt: #aLong).		localField value = -1234567889	and: [localField := #(120 #aULong) -&gt; (block_bigStructI memberAt: #aULong).		localField value = 1234567891	and: [localField := #(121 #aLongLong) -&gt; (block_bigStructI memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(122 #aULongLong) -&gt; (block_bigStructI memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(123 #aFloat) -&gt; (block_bigStructI memberAt: #aFloat).		localField value = 124.456	and: [localField := #(124 #aDouble) -&gt; (block_bigStructI memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(125 #charStruct) -&gt; (block_bigStructI memberAt: #charStruct).		localField := #(125 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(126 #smallStruct) -&gt; (block_bigStructI memberAt: #smallStruct).		localField := #(126 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(127 #aChar) -&gt; (block_bigStructJ memberAt: #aChar).		(localField value = -94	and: [localField := #(128 #aUChar) -&gt; (block_bigStructJ memberAt: #aUChar).		localField value = 99	and: [localField := #(129 #aShort) -&gt; (block_bigStructJ memberAt: #aShort).		localField value = -12345	and: [localField := #(130 #aUShort) -&gt; (block_bigStructJ memberAt: #aUShort).		localField value = 12345	and: [localField := #(131 #anInt) -&gt; (block_bigStructJ memberAt: #anInt).		localField value = -1234567890	and: [localField := #(132 #aUInt) -&gt; (block_bigStructJ memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(133 #aLong) -&gt; (block_bigStructJ memberAt: #aLong).		localField value = -1234567890	and: [localField := #(134 #aULong) -&gt; (block_bigStructJ memberAt: #aULong).		localField value = 1234567890	and: [localField := #(135 #aLongLong) -&gt; (block_bigStructJ memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(136 #aULongLong) -&gt; (block_bigStructJ memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(137 #aFloat) -&gt; (block_bigStructJ memberAt: #aFloat).		localField value = 123.456	and: [localField := #(138 #aDouble) -&gt; (block_bigStructJ memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(139 #charStruct) -&gt; (block_bigStructJ memberAt: #charStruct).		localField := #(139 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(140 #smallStruct) -&gt; (block_bigStructJ memberAt: #smallStruct).		localField := #(140 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(141 #aChar) -&gt; (block_bigStructK memberAt: #aChar).		(localField value = -93	and: [localField := #(142 #aUChar) -&gt; (block_bigStructK memberAt: #aUChar).		localField value = 100	and: [localField := #(143 #aShort) -&gt; (block_bigStructK memberAt: #aShort).		localField value = -12344	and: [localField := #(144 #aUShort) -&gt; (block_bigStructK memberAt: #aUShort).		localField value = 12346	and: [localField := #(145 #anInt) -&gt; (block_bigStructK memberAt: #anInt).		localField value = -1234567889	and: [localField := #(146 #aUInt) -&gt; (block_bigStructK memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(147 #aLong) -&gt; (block_bigStructK memberAt: #aLong).		localField value = -1234567889	and: [localField := #(148 #aULong) -&gt; (block_bigStructK memberAt: #aULong).		localField value = 1234567891	and: [localField := #(149 #aLongLong) -&gt; (block_bigStructK memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(150 #aULongLong) -&gt; (block_bigStructK memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(151 #aFloat) -&gt; (block_bigStructK memberAt: #aFloat).		localField value = 124.456	and: [localField := #(152 #aDouble) -&gt; (block_bigStructK memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(153 #charStruct) -&gt; (block_bigStructK memberAt: #charStruct).		localField := #(153 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(154 #smallStruct) -&gt; (block_bigStructK memberAt: #smallStruct).		localField := #(154 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(155 #aChar) -&gt; (block_bigStructL memberAt: #aChar).		(localField value = -94	and: [localField := #(156 #aUChar) -&gt; (block_bigStructL memberAt: #aUChar).		localField value = 99	and: [localField := #(157 #aShort) -&gt; (block_bigStructL memberAt: #aShort).		localField value = -12345	and: [localField := #(158 #aUShort) -&gt; (block_bigStructL memberAt: #aUShort).		localField value = 12345	and: [localField := #(159 #anInt) -&gt; (block_bigStructL memberAt: #anInt).		localField value = -1234567890	and: [localField := #(160 #aUInt) -&gt; (block_bigStructL memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(161 #aLong) -&gt; (block_bigStructL memberAt: #aLong).		localField value = -1234567890	and: [localField := #(162 #aULong) -&gt; (block_bigStructL memberAt: #aULong).		localField value = 1234567890	and: [localField := #(163 #aLongLong) -&gt; (block_bigStructL memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(164 #aULongLong) -&gt; (block_bigStructL memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(165 #aFloat) -&gt; (block_bigStructL memberAt: #aFloat).		localField value = 123.456	and: [localField := #(166 #aDouble) -&gt; (block_bigStructL memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(167 #charStruct) -&gt; (block_bigStructL memberAt: #charStruct).		localField := #(167 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(168 #smallStruct) -&gt; (block_bigStructL memberAt: #smallStruct).		localField := #(168 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(169 #aChar) -&gt; (block_bigStructM memberAt: #aChar).		(localField value = -93	and: [localField := #(170 #aUChar) -&gt; (block_bigStructM memberAt: #aUChar).		localField value = 100	and: [localField := #(171 #aShort) -&gt; (block_bigStructM memberAt: #aShort).		localField value = -12344	and: [localField := #(172 #aUShort) -&gt; (block_bigStructM memberAt: #aUShort).		localField value = 12346	and: [localField := #(173 #anInt) -&gt; (block_bigStructM memberAt: #anInt).		localField value = -1234567889	and: [localField := #(174 #aUInt) -&gt; (block_bigStructM memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(175 #aLong) -&gt; (block_bigStructM memberAt: #aLong).		localField value = -1234567889	and: [localField := #(176 #aULong) -&gt; (block_bigStructM memberAt: #aULong).		localField value = 1234567891	and: [localField := #(177 #aLongLong) -&gt; (block_bigStructM memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(178 #aULongLong) -&gt; (block_bigStructM memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(179 #aFloat) -&gt; (block_bigStructM memberAt: #aFloat).		localField value = 124.456	and: [localField := #(180 #aDouble) -&gt; (block_bigStructM memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(181 #charStruct) -&gt; (block_bigStructM memberAt: #charStruct).		localField := #(181 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(182 #smallStruct) -&gt; (block_bigStructM memberAt: #smallStruct).		localField := #(182 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(183 #aChar) -&gt; (block_bigStructN memberAt: #aChar).		(localField value = -94	and: [localField := #(184 #aUChar) -&gt; (block_bigStructN memberAt: #aUChar).		localField value = 99	and: [localField := #(185 #aShort) -&gt; (block_bigStructN memberAt: #aShort).		localField value = -12345	and: [localField := #(186 #aUShort) -&gt; (block_bigStructN memberAt: #aUShort).		localField value = 12345	and: [localField := #(187 #anInt) -&gt; (block_bigStructN memberAt: #anInt).		localField value = -1234567890	and: [localField := #(188 #aUInt) -&gt; (block_bigStructN memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(189 #aLong) -&gt; (block_bigStructN memberAt: #aLong).		localField value = -1234567890	and: [localField := #(190 #aULong) -&gt; (block_bigStructN memberAt: #aULong).		localField value = 1234567890	and: [localField := #(191 #aLongLong) -&gt; (block_bigStructN memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(192 #aULongLong) -&gt; (block_bigStructN memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(193 #aFloat) -&gt; (block_bigStructN memberAt: #aFloat).		localField value = 123.456	and: [localField := #(194 #aDouble) -&gt; (block_bigStructN memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(195 #charStruct) -&gt; (block_bigStructN memberAt: #charStruct).		localField := #(195 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(196 #smallStruct) -&gt; (block_bigStructN memberAt: #smallStruct).		localField := #(196 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(197 #aChar) -&gt; (block_bigStructO memberAt: #aChar).		(localField value = -93	and: [localField := #(198 #aUChar) -&gt; (block_bigStructO memberAt: #aUChar).		localField value = 100	and: [localField := #(199 #aShort) -&gt; (block_bigStructO memberAt: #aShort).		localField value = -12344	and: [localField := #(200 #aUShort) -&gt; (block_bigStructO memberAt: #aUShort).		localField value = 12346	and: [localField := #(201 #anInt) -&gt; (block_bigStructO memberAt: #anInt).		localField value = -1234567889	and: [localField := #(202 #aUInt) -&gt; (block_bigStructO memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(203 #aLong) -&gt; (block_bigStructO memberAt: #aLong).		localField value = -1234567889	and: [localField := #(204 #aULong) -&gt; (block_bigStructO memberAt: #aULong).		localField value = 1234567891	and: [localField := #(205 #aLongLong) -&gt; (block_bigStructO memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(206 #aULongLong) -&gt; (block_bigStructO memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(207 #aFloat) -&gt; (block_bigStructO memberAt: #aFloat).		localField value = 124.456	and: [localField := #(208 #aDouble) -&gt; (block_bigStructO memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(209 #charStruct) -&gt; (block_bigStructO memberAt: #charStruct).		localField := #(209 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(210 #smallStruct) -&gt; (block_bigStructO memberAt: #smallStruct).		localField := #(210 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(211 #aChar) -&gt; (block_bigStructP memberAt: #aChar).		(localField value = -94	and: [localField := #(212 #aUChar) -&gt; (block_bigStructP memberAt: #aUChar).		localField value = 99	and: [localField := #(213 #aShort) -&gt; (block_bigStructP memberAt: #aShort).		localField value = -12345	and: [localField := #(214 #aUShort) -&gt; (block_bigStructP memberAt: #aUShort).		localField value = 12345	and: [localField := #(215 #anInt) -&gt; (block_bigStructP memberAt: #anInt).		localField value = -1234567890	and: [localField := #(216 #aUInt) -&gt; (block_bigStructP memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(217 #aLong) -&gt; (block_bigStructP memberAt: #aLong).		localField value = -1234567890	and: [localField := #(218 #aULong) -&gt; (block_bigStructP memberAt: #aULong).		localField value = 1234567890	and: [localField := #(219 #aLongLong) -&gt; (block_bigStructP memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(220 #aULongLong) -&gt; (block_bigStructP memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(221 #aFloat) -&gt; (block_bigStructP memberAt: #aFloat).		localField value = 123.456	and: [localField := #(222 #aDouble) -&gt; (block_bigStructP memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(223 #charStruct) -&gt; (block_bigStructP memberAt: #charStruct).		localField := #(223 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(224 #smallStruct) -&gt; (block_bigStructP memberAt: #smallStruct).		localField := #(224 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(225 #aChar) -&gt; (block_bigStructQ memberAt: #aChar).		(localField value = -93	and: [localField := #(226 #aUChar) -&gt; (block_bigStructQ memberAt: #aUChar).		localField value = 100	and: [localField := #(227 #aShort) -&gt; (block_bigStructQ memberAt: #aShort).		localField value = -12344	and: [localField := #(228 #aUShort) -&gt; (block_bigStructQ memberAt: #aUShort).		localField value = 12346	and: [localField := #(229 #anInt) -&gt; (block_bigStructQ memberAt: #anInt).		localField value = -1234567889	and: [localField := #(230 #aUInt) -&gt; (block_bigStructQ memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(231 #aLong) -&gt; (block_bigStructQ memberAt: #aLong).		localField value = -1234567889	and: [localField := #(232 #aULong) -&gt; (block_bigStructQ memberAt: #aULong).		localField value = 1234567891	and: [localField := #(233 #aLongLong) -&gt; (block_bigStructQ memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(234 #aULongLong) -&gt; (block_bigStructQ memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(235 #aFloat) -&gt; (block_bigStructQ memberAt: #aFloat).		localField value = 124.456	and: [localField := #(236 #aDouble) -&gt; (block_bigStructQ memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(237 #charStruct) -&gt; (block_bigStructQ memberAt: #charStruct).		localField := #(237 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(238 #smallStruct) -&gt; (block_bigStructQ memberAt: #smallStruct).		localField := #(238 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(239 #aChar) -&gt; (block_bigStructR memberAt: #aChar).		(localField value = -94	and: [localField := #(240 #aUChar) -&gt; (block_bigStructR memberAt: #aUChar).		localField value = 99	and: [localField := #(241 #aShort) -&gt; (block_bigStructR memberAt: #aShort).		localField value = -12345	and: [localField := #(242 #aUShort) -&gt; (block_bigStructR memberAt: #aUShort).		localField value = 12345	and: [localField := #(243 #anInt) -&gt; (block_bigStructR memberAt: #anInt).		localField value = -1234567890	and: [localField := #(244 #aUInt) -&gt; (block_bigStructR memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(245 #aLong) -&gt; (block_bigStructR memberAt: #aLong).		localField value = -1234567890	and: [localField := #(246 #aULong) -&gt; (block_bigStructR memberAt: #aULong).		localField value = 1234567890	and: [localField := #(247 #aLongLong) -&gt; (block_bigStructR memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(248 #aULongLong) -&gt; (block_bigStructR memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(249 #aFloat) -&gt; (block_bigStructR memberAt: #aFloat).		localField value = 123.456	and: [localField := #(250 #aDouble) -&gt; (block_bigStructR memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(251 #charStruct) -&gt; (block_bigStructR memberAt: #charStruct).		localField := #(251 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(252 #smallStruct) -&gt; (block_bigStructR memberAt: #smallStruct).		localField := #(252 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(253 #aChar) -&gt; (block_bigStructS memberAt: #aChar).		(localField value = -93	and: [localField := #(254 #aUChar) -&gt; (block_bigStructS memberAt: #aUChar).		localField value = 100	and: [localField := #(255 #aShort) -&gt; (block_bigStructS memberAt: #aShort).		localField value = -12344	and: [localField := #(256 #aUShort) -&gt; (block_bigStructS memberAt: #aUShort).		localField value = 12346	and: [localField := #(257 #anInt) -&gt; (block_bigStructS memberAt: #anInt).		localField value = -1234567889	and: [localField := #(258 #aUInt) -&gt; (block_bigStructS memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(259 #aLong) -&gt; (block_bigStructS memberAt: #aLong).		localField value = -1234567889	and: [localField := #(260 #aULong) -&gt; (block_bigStructS memberAt: #aULong).		localField value = 1234567891	and: [localField := #(261 #aLongLong) -&gt; (block_bigStructS memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(262 #aULongLong) -&gt; (block_bigStructS memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(263 #aFloat) -&gt; (block_bigStructS memberAt: #aFloat).		localField value = 124.456	and: [localField := #(264 #aDouble) -&gt; (block_bigStructS memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(265 #charStruct) -&gt; (block_bigStructS memberAt: #charStruct).		localField := #(265 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(266 #smallStruct) -&gt; (block_bigStructS memberAt: #smallStruct).		localField := #(266 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(267 #aChar) -&gt; (block_bigStructT memberAt: #aChar).		(localField value = -94	and: [localField := #(268 #aUChar) -&gt; (block_bigStructT memberAt: #aUChar).		localField value = 99	and: [localField := #(269 #aShort) -&gt; (block_bigStructT memberAt: #aShort).		localField value = -12345	and: [localField := #(270 #aUShort) -&gt; (block_bigStructT memberAt: #aUShort).		localField value = 12345	and: [localField := #(271 #anInt) -&gt; (block_bigStructT memberAt: #anInt).		localField value = -1234567890	and: [localField := #(272 #aUInt) -&gt; (block_bigStructT memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(273 #aLong) -&gt; (block_bigStructT memberAt: #aLong).		localField value = -1234567890	and: [localField := #(274 #aULong) -&gt; (block_bigStructT memberAt: #aULong).		localField value = 1234567890	and: [localField := #(275 #aLongLong) -&gt; (block_bigStructT memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(276 #aULongLong) -&gt; (block_bigStructT memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(277 #aFloat) -&gt; (block_bigStructT memberAt: #aFloat).		localField value = 123.456	and: [localField := #(278 #aDouble) -&gt; (block_bigStructT memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(279 #charStruct) -&gt; (block_bigStructT memberAt: #charStruct).		localField := #(279 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(280 #smallStruct) -&gt; (block_bigStructT memberAt: #smallStruct).		localField := #(280 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(281 #aChar) -&gt; (block_bigStructU memberAt: #aChar).		(localField value = -93	and: [localField := #(282 #aUChar) -&gt; (block_bigStructU memberAt: #aUChar).		localField value = 100	and: [localField := #(283 #aShort) -&gt; (block_bigStructU memberAt: #aShort).		localField value = -12344	and: [localField := #(284 #aUShort) -&gt; (block_bigStructU memberAt: #aUShort).		localField value = 12346	and: [localField := #(285 #anInt) -&gt; (block_bigStructU memberAt: #anInt).		localField value = -1234567889	and: [localField := #(286 #aUInt) -&gt; (block_bigStructU memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(287 #aLong) -&gt; (block_bigStructU memberAt: #aLong).		localField value = -1234567889	and: [localField := #(288 #aULong) -&gt; (block_bigStructU memberAt: #aULong).		localField value = 1234567891	and: [localField := #(289 #aLongLong) -&gt; (block_bigStructU memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(290 #aULongLong) -&gt; (block_bigStructU memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(291 #aFloat) -&gt; (block_bigStructU memberAt: #aFloat).		localField value = 124.456	and: [localField := #(292 #aDouble) -&gt; (block_bigStructU memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(293 #charStruct) -&gt; (block_bigStructU memberAt: #charStruct).		localField := #(293 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(294 #smallStruct) -&gt; (block_bigStructU memberAt: #smallStruct).		localField := #(294 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(295 #aChar) -&gt; (block_bigStructV memberAt: #aChar).		(localField value = -94	and: [localField := #(296 #aUChar) -&gt; (block_bigStructV memberAt: #aUChar).		localField value = 99	and: [localField := #(297 #aShort) -&gt; (block_bigStructV memberAt: #aShort).		localField value = -12345	and: [localField := #(298 #aUShort) -&gt; (block_bigStructV memberAt: #aUShort).		localField value = 12345	and: [localField := #(299 #anInt) -&gt; (block_bigStructV memberAt: #anInt).		localField value = -1234567890	and: [localField := #(300 #aUInt) -&gt; (block_bigStructV memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(301 #aLong) -&gt; (block_bigStructV memberAt: #aLong).		localField value = -1234567890	and: [localField := #(302 #aULong) -&gt; (block_bigStructV memberAt: #aULong).		localField value = 1234567890	and: [localField := #(303 #aLongLong) -&gt; (block_bigStructV memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(304 #aULongLong) -&gt; (block_bigStructV memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(305 #aFloat) -&gt; (block_bigStructV memberAt: #aFloat).		localField value = 123.456	and: [localField := #(306 #aDouble) -&gt; (block_bigStructV memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(307 #charStruct) -&gt; (block_bigStructV memberAt: #charStruct).		localField := #(307 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(308 #smallStruct) -&gt; (block_bigStructV memberAt: #smallStruct).		localField := #(308 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(309 #aChar) -&gt; (block_bigStructW memberAt: #aChar).		(localField value = -93	and: [localField := #(310 #aUChar) -&gt; (block_bigStructW memberAt: #aUChar).		localField value = 100	and: [localField := #(311 #aShort) -&gt; (block_bigStructW memberAt: #aShort).		localField value = -12344	and: [localField := #(312 #aUShort) -&gt; (block_bigStructW memberAt: #aUShort).		localField value = 12346	and: [localField := #(313 #anInt) -&gt; (block_bigStructW memberAt: #anInt).		localField value = -1234567889	and: [localField := #(314 #aUInt) -&gt; (block_bigStructW memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(315 #aLong) -&gt; (block_bigStructW memberAt: #aLong).		localField value = -1234567889	and: [localField := #(316 #aULong) -&gt; (block_bigStructW memberAt: #aULong).		localField value = 1234567891	and: [localField := #(317 #aLongLong) -&gt; (block_bigStructW memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(318 #aULongLong) -&gt; (block_bigStructW memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(319 #aFloat) -&gt; (block_bigStructW memberAt: #aFloat).		localField value = 124.456	and: [localField := #(320 #aDouble) -&gt; (block_bigStructW memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(321 #charStruct) -&gt; (block_bigStructW memberAt: #charStruct).		localField := #(321 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(322 #smallStruct) -&gt; (block_bigStructW memberAt: #smallStruct).		localField := #(322 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(323 #aChar) -&gt; (block_bigStructX memberAt: #aChar).		(localField value = -94	and: [localField := #(324 #aUChar) -&gt; (block_bigStructX memberAt: #aUChar).		localField value = 99	and: [localField := #(325 #aShort) -&gt; (block_bigStructX memberAt: #aShort).		localField value = -12345	and: [localField := #(326 #aUShort) -&gt; (block_bigStructX memberAt: #aUShort).		localField value = 12345	and: [localField := #(327 #anInt) -&gt; (block_bigStructX memberAt: #anInt).		localField value = -1234567890	and: [localField := #(328 #aUInt) -&gt; (block_bigStructX memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(329 #aLong) -&gt; (block_bigStructX memberAt: #aLong).		localField value = -1234567890	and: [localField := #(330 #aULong) -&gt; (block_bigStructX memberAt: #aULong).		localField value = 1234567890	and: [localField := #(331 #aLongLong) -&gt; (block_bigStructX memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(332 #aULongLong) -&gt; (block_bigStructX memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(333 #aFloat) -&gt; (block_bigStructX memberAt: #aFloat).		localField value = 123.456	and: [localField := #(334 #aDouble) -&gt; (block_bigStructX memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(335 #charStruct) -&gt; (block_bigStructX memberAt: #charStruct).		localField := #(335 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(336 #smallStruct) -&gt; (block_bigStructX memberAt: #smallStruct).		localField := #(336 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(337 #aChar) -&gt; (block_bigStructY memberAt: #aChar).		(localField value = -93	and: [localField := #(338 #aUChar) -&gt; (block_bigStructY memberAt: #aUChar).		localField value = 100	and: [localField := #(339 #aShort) -&gt; (block_bigStructY memberAt: #aShort).		localField value = -12344	and: [localField := #(340 #aUShort) -&gt; (block_bigStructY memberAt: #aUShort).		localField value = 12346	and: [localField := #(341 #anInt) -&gt; (block_bigStructY memberAt: #anInt).		localField value = -1234567889	and: [localField := #(342 #aUInt) -&gt; (block_bigStructY memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(343 #aLong) -&gt; (block_bigStructY memberAt: #aLong).		localField value = -1234567889	and: [localField := #(344 #aULong) -&gt; (block_bigStructY memberAt: #aULong).		localField value = 1234567891	and: [localField := #(345 #aLongLong) -&gt; (block_bigStructY memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(346 #aULongLong) -&gt; (block_bigStructY memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(347 #aFloat) -&gt; (block_bigStructY memberAt: #aFloat).		localField value = 124.456	and: [localField := #(348 #aDouble) -&gt; (block_bigStructY memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(349 #charStruct) -&gt; (block_bigStructY memberAt: #charStruct).		localField := #(349 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(350 #smallStruct) -&gt; (block_bigStructY memberAt: #smallStruct).		localField := #(350 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(351 #aChar) -&gt; (block_bigStructZ memberAt: #aChar).		(localField value = -94	and: [localField := #(352 #aUChar) -&gt; (block_bigStructZ memberAt: #aUChar).		localField value = 99	and: [localField := #(353 #aShort) -&gt; (block_bigStructZ memberAt: #aShort).		localField value = -12345	and: [localField := #(354 #aUShort) -&gt; (block_bigStructZ memberAt: #aUShort).		localField value = 12345	and: [localField := #(355 #anInt) -&gt; (block_bigStructZ memberAt: #anInt).		localField value = -1234567890	and: [localField := #(356 #aUInt) -&gt; (block_bigStructZ memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(357 #aLong) -&gt; (block_bigStructZ memberAt: #aLong).		localField value = -1234567890	and: [localField := #(358 #aULong) -&gt; (block_bigStructZ memberAt: #aULong).		localField value = 1234567890	and: [localField := #(359 #aLongLong) -&gt; (block_bigStructZ memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(360 #aULongLong) -&gt; (block_bigStructZ memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(361 #aFloat) -&gt; (block_bigStructZ memberAt: #aFloat).		localField value = 123.456	and: [localField := #(362 #aDouble) -&gt; (block_bigStructZ memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(363 #charStruct) -&gt; (block_bigStructZ memberAt: #charStruct).		localField := #(363 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(364 #smallStruct) -&gt; (block_bigStructZ memberAt: #smallStruct).		localField := #(364 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(365 #aChar) -&gt; (block_bigStruct0 memberAt: #aChar).		(localField value = -93	and: [localField := #(366 #aUChar) -&gt; (block_bigStruct0 memberAt: #aUChar).		localField value = 100	and: [localField := #(367 #aShort) -&gt; (block_bigStruct0 memberAt: #aShort).		localField value = -12344	and: [localField := #(368 #aUShort) -&gt; (block_bigStruct0 memberAt: #aUShort).		localField value = 12346	and: [localField := #(369 #anInt) -&gt; (block_bigStruct0 memberAt: #anInt).		localField value = -1234567889	and: [localField := #(370 #aUInt) -&gt; (block_bigStruct0 memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(371 #aLong) -&gt; (block_bigStruct0 memberAt: #aLong).		localField value = -1234567889	and: [localField := #(372 #aULong) -&gt; (block_bigStruct0 memberAt: #aULong).		localField value = 1234567891	and: [localField := #(373 #aLongLong) -&gt; (block_bigStruct0 memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(374 #aULongLong) -&gt; (block_bigStruct0 memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(375 #aFloat) -&gt; (block_bigStruct0 memberAt: #aFloat).		localField value = 124.456	and: [localField := #(376 #aDouble) -&gt; (block_bigStruct0 memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(377 #charStruct) -&gt; (block_bigStruct0 memberAt: #charStruct).		localField := #(377 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(378 #smallStruct) -&gt; (block_bigStruct0 memberAt: #smallStruct).		localField := #(378 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(379 #aChar) -&gt; (block_bigStruct1 memberAt: #aChar).		(localField value = -94	and: [localField := #(380 #aUChar) -&gt; (block_bigStruct1 memberAt: #aUChar).		localField value = 99	and: [localField := #(381 #aShort) -&gt; (block_bigStruct1 memberAt: #aShort).		localField value = -12345	and: [localField := #(382 #aUShort) -&gt; (block_bigStruct1 memberAt: #aUShort).		localField value = 12345	and: [localField := #(383 #anInt) -&gt; (block_bigStruct1 memberAt: #anInt).		localField value = -1234567890	and: [localField := #(384 #aUInt) -&gt; (block_bigStruct1 memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(385 #aLong) -&gt; (block_bigStruct1 memberAt: #aLong).		localField value = -1234567890	and: [localField := #(386 #aULong) -&gt; (block_bigStruct1 memberAt: #aULong).		localField value = 1234567890	and: [localField := #(387 #aLongLong) -&gt; (block_bigStruct1 memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(388 #aULongLong) -&gt; (block_bigStruct1 memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(389 #aFloat) -&gt; (block_bigStruct1 memberAt: #aFloat).		localField value = 123.456	and: [localField := #(390 #aDouble) -&gt; (block_bigStruct1 memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(391 #charStruct) -&gt; (block_bigStruct1 memberAt: #charStruct).		localField := #(391 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(392 #smallStruct) -&gt; (block_bigStruct1 memberAt: #smallStruct).		localField := #(392 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(393 #aChar) -&gt; (block_bigStruct2 memberAt: #aChar).		(localField value = -93	and: [localField := #(394 #aUChar) -&gt; (block_bigStruct2 memberAt: #aUChar).		localField value = 100	and: [localField := #(395 #aShort) -&gt; (block_bigStruct2 memberAt: #aShort).		localField value = -12344	and: [localField := #(396 #aUShort) -&gt; (block_bigStruct2 memberAt: #aUShort).		localField value = 12346	and: [localField := #(397 #anInt) -&gt; (block_bigStruct2 memberAt: #anInt).		localField value = -1234567889	and: [localField := #(398 #aUInt) -&gt; (block_bigStruct2 memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(399 #aLong) -&gt; (block_bigStruct2 memberAt: #aLong).		localField value = -1234567889	and: [localField := #(400 #aULong) -&gt; (block_bigStruct2 memberAt: #aULong).		localField value = 1234567891	and: [localField := #(401 #aLongLong) -&gt; (block_bigStruct2 memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(402 #aULongLong) -&gt; (block_bigStruct2 memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(403 #aFloat) -&gt; (block_bigStruct2 memberAt: #aFloat).		localField value = 124.456	and: [localField := #(404 #aDouble) -&gt; (block_bigStruct2 memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(405 #charStruct) -&gt; (block_bigStruct2 memberAt: #charStruct).		localField := #(405 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(406 #smallStruct) -&gt; (block_bigStruct2 memberAt: #smallStruct).		localField := #(406 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(407 #aChar) -&gt; (block_bigStruct3 memberAt: #aChar).		(localField value = -94	and: [localField := #(408 #aUChar) -&gt; (block_bigStruct3 memberAt: #aUChar).		localField value = 99	and: [localField := #(409 #aShort) -&gt; (block_bigStruct3 memberAt: #aShort).		localField value = -12345	and: [localField := #(410 #aUShort) -&gt; (block_bigStruct3 memberAt: #aUShort).		localField value = 12345	and: [localField := #(411 #anInt) -&gt; (block_bigStruct3 memberAt: #anInt).		localField value = -1234567890	and: [localField := #(412 #aUInt) -&gt; (block_bigStruct3 memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(413 #aLong) -&gt; (block_bigStruct3 memberAt: #aLong).		localField value = -1234567890	and: [localField := #(414 #aULong) -&gt; (block_bigStruct3 memberAt: #aULong).		localField value = 1234567890	and: [localField := #(415 #aLongLong) -&gt; (block_bigStruct3 memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(416 #aULongLong) -&gt; (block_bigStruct3 memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(417 #aFloat) -&gt; (block_bigStruct3 memberAt: #aFloat).		localField value = 123.456	and: [localField := #(418 #aDouble) -&gt; (block_bigStruct3 memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(419 #charStruct) -&gt; (block_bigStruct3 memberAt: #charStruct).		localField := #(419 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(420 #smallStruct) -&gt; (block_bigStruct3 memberAt: #smallStruct).		localField := #(420 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		1073741823 ~= ok ifTrue:			[self message: 'aCallback045 failed in callback (bad parameter)'].		 self interface bigStruct]		ofType: self interface Callback045.	result := self interface testCallback045: aCallback045 w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct w: bigStructA w: bigStruct.	invoked ifFalse: [self message: 'testCallback045 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aShort) -&gt; (result memberAt: #aShort).		field value = -12345	and: [field := #(4 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345	and: [field := #(5 #anInt) -&gt; (result memberAt: #anInt).		field value = -1234567890	and: [field := #(6 #aUInt) -&gt; (result memberAt: #aUInt).		field value = 1234567890	and: [field := #(7 #aLong) -&gt; (result memberAt: #aLong).		field value = -1234567890	and: [field := #(8 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(9 #aLongLong) -&gt; (result memberAt: #aLongLong).		field value = -1234567890123456789	and: [field := #(10 #aULongLong) -&gt; (result memberAt: #aULongLong).		field value = 12345678901234567890	and: [field := #(11 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456	and: [field := #(12 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(13 #charStruct) -&gt; (result memberAt: #charStruct).		field := #(13 #aChar) -&gt; (field value memberAt: #aChar).		field value = -94	and: [field := #(14 #smallStruct) -&gt; (result memberAt: #smallStruct).		field := #(14 #aShort) -&gt; (field value memberAt: #aShort).		field value = -12345]]]]]]]]]]]]]) ifFalse:		[self message: 'testCallback045 failed']"BigStructtestCallback045(Callback045 aCallback045, BigStruct block_bigStructA, BigStruct block_bigStructB, BigStruct block_bigStructC, BigStruct block_bigStructD, BigStruct block_bigStructE, BigStruct block_bigStructF, BigStruct block_bigStructG, BigStruct block_bigStructH, BigStruct block_bigStructI, BigStruct block_bigStructJ, BigStruct block_bigStructK, BigStruct block_bigStructL, BigStruct block_bigStructM, BigStruct block_bigStructN, BigStruct block_bigStructO, BigStruct block_bigStructP, BigStruct block_bigStructQ, BigStruct block_bigStructR, BigStruct block_bigStructS, BigStruct block_bigStructT, BigStruct block_bigStructU, BigStruct block_bigStructV, BigStruct block_bigStructW, BigStruct block_bigStructX, BigStruct block_bigStructY, BigStruct block_bigStructZ, BigStruct block_bigStruct0, BigStruct block_bigStruct1, BigStruct block_bigStruct2, BigStruct block_bigStruct3){	return aCallback045(block_bigStructA, block_bigStructB, block_bigStructC, block_bigStructD, block_bigStructE, block_bigStructF, block_bigStructG, block_bigStructH, block_bigStructI, block_bigStructJ, block_bigStructK, block_bigStructL, block_bigStructM, block_bigStructN, block_bigStructO, block_bigStructP, block_bigStructQ, block_bigStructR, block_bigStructS, block_bigStructT, block_bigStructU, block_bigStructV, block_bigStructW, block_bigStructX, block_bigStructY, block_bigStructZ, block_bigStruct0, block_bigStruct1, block_bigStruct2, block_bigStruct3);}"</body><body package="DLLCC Test Suite">runTestCallback046	&lt;test&gt;	| result invoked aCallback046 |		invoked := false.	aCallback046 := CCallback		do:		[:aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA| | ok localField |		 invoked := true.		 ok := 0.		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback046 failed in callback (bad parameter)'].		 -94]		ofType: self interface Callback046.	result := self interface testCallback046: aCallback046 w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA.	invoked ifFalse: [self message: 'testCallback046 failed to callback'].	-94 = result ifFalse:		[self message: 'testCallback046 failed']"signed chartestCallback046(Callback046 aCallback046, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA){	return aCallback046(aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA);}"</body><body package="DLLCC Test Suite">runTestCallback047	&lt;test&gt;	| result invoked aCallback047 |		invoked := false.	aCallback047 := CCallback		do:		[:aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar| | ok localField |		 invoked := true.		 ok := 0.		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback047 failed in callback (bad parameter)'].		 99]		ofType: self interface Callback047.	result := self interface testCallback047: aCallback047 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94.	invoked ifFalse: [self message: 'testCallback047 failed to callback'].	99 = result ifFalse:		[self message: 'testCallback047 failed']"unsigned chartestCallback047(Callback047 aCallback047, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar){	return aCallback047(aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar);}"</body><body package="DLLCC Test Suite">runTestCallback048	&lt;test&gt;	| result invoked aCallback048 |		invoked := false.	aCallback048 := CCallback		do:		[:aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar| | ok localField |		 invoked := true.		 ok := 0.		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback048 failed in callback (bad parameter)'].		 -12345]		ofType: self interface Callback048.	result := self interface testCallback048: aCallback048 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99.	invoked ifFalse: [self message: 'testCallback048 failed to callback'].	-12345 = result ifFalse:		[self message: 'testCallback048 failed']"shorttestCallback048(Callback048 aCallback048, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar){	return aCallback048(aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar);}"</body><body package="DLLCC Test Suite">runTestCallback049	&lt;test&gt;	| result invoked aCallback049 |		invoked := false.	aCallback049 := CCallback		do:		[:aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort| | ok localField |		 invoked := true.		 ok := 0.		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback049 failed in callback (bad parameter)'].		 12345]		ofType: self interface Callback049.	result := self interface testCallback049: aCallback049 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345.	invoked ifFalse: [self message: 'testCallback049 failed to callback'].	12345 = result ifFalse:		[self message: 'testCallback049 failed']"unsigned shorttestCallback049(Callback049 aCallback049, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort){	return aCallback049(aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort);}"</body><body package="DLLCC Test Suite">runTestCallback050	&lt;test&gt;	| result invoked aCallback050 |		invoked := false.	aCallback050 := CCallback		do:		[:anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort| | ok localField |		 invoked := true.		 ok := 0.		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback050 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback050.	result := self interface testCallback050: aCallback050 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345.	invoked ifFalse: [self message: 'testCallback050 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback050 failed']"inttestCallback050(Callback050 aCallback050, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort){	return aCallback050(anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort);}"</body><body package="DLLCC Test Suite">runTestCallback051	&lt;test&gt;	| result invoked aCallback051 |		invoked := false.	aCallback051 := CCallback		do:		[:aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt| | ok localField |		 invoked := true.		 ok := 0.		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback051 failed in callback (bad parameter)'].		 1234567890]		ofType: self interface Callback051.	result := self interface testCallback051: aCallback051 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890.	invoked ifFalse: [self message: 'testCallback051 failed to callback'].	1234567890 = result ifFalse:		[self message: 'testCallback051 failed']"unsigned inttestCallback051(Callback051 aCallback051, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt){	return aCallback051(aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt);}"</body><body package="DLLCC Test Suite">runTestCallback052	&lt;test&gt;	| result invoked aCallback052 |		invoked := false.	aCallback052 := CCallback		do:		[:aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt| | ok localField |		 invoked := true.		 ok := 0.		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback052 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback052.	result := self interface testCallback052: aCallback052 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890.	invoked ifFalse: [self message: 'testCallback052 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback052 failed']"longtestCallback052(Callback052 aCallback052, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt){	return aCallback052(aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt);}"</body><body package="DLLCC Test Suite">runTestCallback053	&lt;test&gt;	| result invoked aCallback053 |		invoked := false.	aCallback053 := CCallback		do:		[:aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong| | ok localField |		 invoked := true.		 ok := 0.		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback053 failed in callback (bad parameter)'].		 1234567890]		ofType: self interface Callback053.	result := self interface testCallback053: aCallback053 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890.	invoked ifFalse: [self message: 'testCallback053 failed to callback'].	1234567890 = result ifFalse:		[self message: 'testCallback053 failed']"unsigned longtestCallback053(Callback053 aCallback053, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong){	return aCallback053(aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong);}"</body><body package="DLLCC Test Suite">runTestCallback054	&lt;test&gt;	| result invoked aCallback054 |		invoked := false.	aCallback054 := CCallback		do:		[:aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong| | ok localField |		 invoked := true.		 ok := 0.		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback054 failed in callback (bad parameter)'].		 -1234567890123456789]		ofType: self interface Callback054.	result := self interface testCallback054: aCallback054 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890.	invoked ifFalse: [self message: 'testCallback054 failed to callback'].	-1234567890123456789 = result ifFalse:		[self message: 'testCallback054 failed']"long longtestCallback054(Callback054 aCallback054, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong){	return aCallback054(aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong);}"</body><body package="DLLCC Test Suite">runTestCallback055	&lt;test&gt;	| result invoked aCallback055 |		invoked := false.	aCallback055 := CCallback		do:		[:aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong| | ok localField |		 invoked := true.		 ok := 0.		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback055 failed in callback (bad parameter)'].		 12345678901234567890]		ofType: self interface Callback055.	result := self interface testCallback055: aCallback055 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789.	invoked ifFalse: [self message: 'testCallback055 failed to callback'].	12345678901234567890 = result ifFalse:		[self message: 'testCallback055 failed']"unsigned long longtestCallback055(Callback055 aCallback055, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong){	return aCallback055(aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback056	&lt;test&gt;	| result invoked aCallback056 |		invoked := false.	aCallback056 := CCallback		do:		[:aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong| | ok localField |		 invoked := true.		 ok := 0.		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback056 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback056.	result := self interface testCallback056: aCallback056 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890.	invoked ifFalse: [self message: 'testCallback056 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback056 failed']"floattestCallback056(Callback056 aCallback056, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong){	return aCallback056(aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong);}"</body><body package="DLLCC Test Suite">runTestCallback057	&lt;test&gt;	| result invoked aCallback057 |		invoked := false.	aCallback057 := CCallback		do:		[:aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat| | ok localField |		 invoked := true.		 ok := 0.		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback057 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback057.	result := self interface testCallback057: aCallback057 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456.	invoked ifFalse: [self message: 'testCallback057 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback057 failed']"doubletestCallback057(Callback057 aCallback057, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat){	return aCallback057(aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat);}"</body><body package="DLLCC Test Suite">runTestCallback058	&lt;test&gt;	| result field invoked aCallback058 |		invoked := false.	aCallback058 := CCallback		do:		[:charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(2 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(3 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(4 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(5 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(6 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(7 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(8 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(10 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(11 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(12 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(13 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(14 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(15 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(16 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(17 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(18 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(19 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(20 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(21 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(22 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(24 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(26 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(27 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(28 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(29 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(30 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(31 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(32 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(34 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(35 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(36 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(37 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(38 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(39 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(40 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(41 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(42 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(43 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(44 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(45 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(46 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(48 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback058 failed in callback (bad parameter)'].		 self interface charStruct]		ofType: self interface Callback058.	result := self interface testCallback058: aCallback058 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8.	invoked ifFalse: [self message: 'testCallback058 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94) ifFalse:		[self message: 'testCallback058 failed']"CharStructtestCallback058(Callback058 aCallback058, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble){	return aCallback058(charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble);}"</body><body package="DLLCC Test Suite">runTestCallback059	&lt;test&gt;	| result field invoked aCallback059 |		invoked := false.	aCallback059 := CCallback		do:		[:smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(2 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(3 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(4 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(5 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(6 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(7 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(8 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(9 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(10 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(11 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(12 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(13 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(14 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(15 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(16 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(17 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(18 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(19 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(20 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(21 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(22 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(22 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(23 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(23 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(24 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(26 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(27 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(28 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(29 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(30 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(31 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(32 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(33 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(34 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(35 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(36 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(37 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(38 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(39 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(40 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(41 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(42 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(43 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(44 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(45 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(46 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(46 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(47 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(47 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(48 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback059 failed in callback (bad parameter)'].		 self interface smallStruct]		ofType: self interface Callback059.	result := self interface testCallback059: aCallback059 w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct.	invoked ifFalse: [self message: 'testCallback059 failed to callback'].	field := #(1 #aShort) -&gt; (result memberAt: #aShort).		(field value = -12345	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345]]) ifFalse:		[self message: 'testCallback059 failed']"SmallStructtestCallback059(Callback059 aCallback059, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct){	return aCallback059(smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct);}"</body><body package="DLLCC Test Suite">runTestCallback060	&lt;test&gt;	| result field invoked aCallback060 |		invoked := false.	aCallback060 := CCallback		do:		[:mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(2 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(3 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(4 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(5 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(6 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(7 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(8 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(9 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(10 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(11 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(12 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(13 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(14 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(15 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(16 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(17 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(18 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(19 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(19 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(20 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(20 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(21 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(22 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(23 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(24 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(26 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(27 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(28 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(29 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(30 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(31 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(32 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(33 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(34 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(35 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(36 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(37 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(38 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(39 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(40 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(41 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(42 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(43 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(43 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(44 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(44 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(45 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(46 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(47 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(48 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback060 failed in callback (bad parameter)'].		 self interface mediumStruct]		ofType: self interface Callback060.	result := self interface testCallback060: aCallback060 w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct.	invoked ifFalse: [self message: 'testCallback060 failed to callback'].	field := #(1 #anInt) -&gt; (result memberAt: #anInt).		(field value = -1234567890	and: [field := #(2 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]) ifFalse:		[self message: 'testCallback060 failed']"MediumStructtestCallback060(Callback060 aCallback060, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct){	return aCallback060(mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct);}"</body><body package="DLLCC Test Suite">runTestCallback061	&lt;test&gt;	| result field invoked aCallback061 |		invoked := false.	aCallback061 := CCallback		do:		[:largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(2 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(3 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(4 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(5 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(6 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(7 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(8 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(9 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(10 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(11 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(12 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(13 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(14 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(15 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(16 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(17 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(17 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(18 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(18 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(19 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(20 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(21 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(22 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(23 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(24 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(26 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(27 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(28 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(29 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(30 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(31 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(32 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(33 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(34 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(35 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(36 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(37 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(38 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(39 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(40 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(41 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(41 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(42 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(42 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(43 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(44 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(45 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(46 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(47 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(48 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback061 failed in callback (bad parameter)'].		 self interface largeStruct]		ofType: self interface Callback061.	result := self interface testCallback061: aCallback061 w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct.	invoked ifFalse: [self message: 'testCallback061 failed to callback'].	field := #(1 #aLong) -&gt; (result memberAt: #aLong).		(field value = -1234567890	and: [field := #(2 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(3 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(4 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]]]) ifFalse:		[self message: 'testCallback061 failed']"LargeStructtestCallback061(Callback061 aCallback061, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct){	return aCallback061(largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct);}"</body><body package="DLLCC Test Suite">runTestCallback062	&lt;test&gt;	| result field invoked aCallback062 |		invoked := false.	aCallback062 := CCallback		do:		[:bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(2 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(3 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(4 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(5 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(6 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(7 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(8 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(9 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(10 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(11 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(12 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(13 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(13 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(14 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(14 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(15 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(16 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(17 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(18 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(19 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(20 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(21 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(22 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(24 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(26 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(27 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(28 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(29 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(30 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(31 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(32 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(33 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(34 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(35 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(36 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(37 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(37 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(38 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(38 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(39 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(40 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(41 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(42 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(43 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(44 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(45 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(46 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(48 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback062 failed in callback (bad parameter)'].		 self interface bigStruct]		ofType: self interface Callback062.	result := self interface testCallback062: aCallback062 w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct.	invoked ifFalse: [self message: 'testCallback062 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aShort) -&gt; (result memberAt: #aShort).		field value = -12345	and: [field := #(4 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345	and: [field := #(5 #anInt) -&gt; (result memberAt: #anInt).		field value = -1234567890	and: [field := #(6 #aUInt) -&gt; (result memberAt: #aUInt).		field value = 1234567890	and: [field := #(7 #aLong) -&gt; (result memberAt: #aLong).		field value = -1234567890	and: [field := #(8 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(9 #aLongLong) -&gt; (result memberAt: #aLongLong).		field value = -1234567890123456789	and: [field := #(10 #aULongLong) -&gt; (result memberAt: #aULongLong).		field value = 12345678901234567890	and: [field := #(11 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456	and: [field := #(12 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(13 #charStruct) -&gt; (result memberAt: #charStruct).		field := #(13 #aChar) -&gt; (field value memberAt: #aChar).		field value = -94	and: [field := #(14 #smallStruct) -&gt; (result memberAt: #smallStruct).		field := #(14 #aShort) -&gt; (field value memberAt: #aShort).		field value = -12345]]]]]]]]]]]]]) ifFalse:		[self message: 'testCallback062 failed']"BigStructtestCallback062(Callback062 aCallback062, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct){	return aCallback062(bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct);}"</body><body package="DLLCC Test Suite">runTestCallback063	&lt;test&gt;	| result invoked aCallback063 |		invoked := false.	aCallback063 := CCallback		do:		[:bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct| | ok localField |		 invoked := true.		 ok := 0.		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback063 failed in callback (bad parameter)'].		 -94]		ofType: self interface Callback063.	result := self interface testCallback063: aCallback063 w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct.	invoked ifFalse: [self message: 'testCallback063 failed to callback'].	-94 = result ifFalse:		[self message: 'testCallback063 failed']"signed chartestCallback063(Callback063 aCallback063, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct){	return aCallback063(bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct);}"</body><body package="DLLCC Test Suite">runTestCallback064	&lt;test&gt;	| result invoked aCallback064 |		invoked := false.	aCallback064 := CCallback		do:		[:bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar| | ok localField |		 invoked := true.		 ok := 0.		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback064 failed in callback (bad parameter)'].		 99]		ofType: self interface Callback064.	result := self interface testCallback064: aCallback064 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93.	invoked ifFalse: [self message: 'testCallback064 failed to callback'].	99 = result ifFalse:		[self message: 'testCallback064 failed']"unsigned chartestCallback064(Callback064 aCallback064, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar){	return aCallback064(bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar);}"</body><body package="DLLCC Test Suite">runTestCallback065	&lt;test&gt;	| result invoked aCallback065 |		invoked := false.	aCallback065 := CCallback		do:		[:bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar| | ok localField |		 invoked := true.		 ok := 0.		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback065 failed in callback (bad parameter)'].		 -12345]		ofType: self interface Callback065.	result := self interface testCallback065: aCallback065 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100.	invoked ifFalse: [self message: 'testCallback065 failed to callback'].	-12345 = result ifFalse:		[self message: 'testCallback065 failed']"shorttestCallback065(Callback065 aCallback065, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar){	return aCallback065(bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar);}"</body><body package="DLLCC Test Suite">runTestCallback066	&lt;test&gt;	| result invoked aCallback066 |		invoked := false.	aCallback066 := CCallback		do:		[:bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort| | ok localField |		 invoked := true.		 ok := 0.		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback066 failed in callback (bad parameter)'].		 12345]		ofType: self interface Callback066.	result := self interface testCallback066: aCallback066 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344.	invoked ifFalse: [self message: 'testCallback066 failed to callback'].	12345 = result ifFalse:		[self message: 'testCallback066 failed']"unsigned shorttestCallback066(Callback066 aCallback066, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort){	return aCallback066(bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort);}"</body><body package="DLLCC Test Suite">runTestCallback067	&lt;test&gt;	| result invoked aCallback067 |		invoked := false.	aCallback067 := CCallback		do:		[:bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort| | ok localField |		 invoked := true.		 ok := 0.		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback067 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback067.	result := self interface testCallback067: aCallback067 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346.	invoked ifFalse: [self message: 'testCallback067 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback067 failed']"inttestCallback067(Callback067 aCallback067, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort){	return aCallback067(bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort);}"</body><body package="DLLCC Test Suite">runTestCallback068	&lt;test&gt;	| result invoked aCallback068 |		invoked := false.	aCallback068 := CCallback		do:		[:bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt| | ok localField |		 invoked := true.		 ok := 0.		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback068 failed in callback (bad parameter)'].		 1234567890]		ofType: self interface Callback068.	result := self interface testCallback068: aCallback068 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889.	invoked ifFalse: [self message: 'testCallback068 failed to callback'].	1234567890 = result ifFalse:		[self message: 'testCallback068 failed']"unsigned inttestCallback068(Callback068 aCallback068, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt){	return aCallback068(bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt);}"</body><body package="DLLCC Test Suite">runTestCallback069	&lt;test&gt;	| result invoked aCallback069 |		invoked := false.	aCallback069 := CCallback		do:		[:bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt| | ok localField |		 invoked := true.		 ok := 0.		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback069 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback069.	result := self interface testCallback069: aCallback069 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891.	invoked ifFalse: [self message: 'testCallback069 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback069 failed']"longtestCallback069(Callback069 aCallback069, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt){	return aCallback069(bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt);}"</body><body package="DLLCC Test Suite">runTestCallback070	&lt;test&gt;	| result invoked aCallback070 |		invoked := false.	aCallback070 := CCallback		do:		[:bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong| | ok localField |		 invoked := true.		 ok := 0.		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback070 failed in callback (bad parameter)'].		 1234567890]		ofType: self interface Callback070.	result := self interface testCallback070: aCallback070 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889.	invoked ifFalse: [self message: 'testCallback070 failed to callback'].	1234567890 = result ifFalse:		[self message: 'testCallback070 failed']"unsigned longtestCallback070(Callback070 aCallback070, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong){	return aCallback070(bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong);}"</body><body package="DLLCC Test Suite">runTestCallback071	&lt;test&gt;	| result invoked aCallback071 |		invoked := false.	aCallback071 := CCallback		do:		[:bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong| | ok localField |		 invoked := true.		 ok := 0.		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback071 failed in callback (bad parameter)'].		 -1234567890123456789]		ofType: self interface Callback071.	result := self interface testCallback071: aCallback071 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891.	invoked ifFalse: [self message: 'testCallback071 failed to callback'].	-1234567890123456789 = result ifFalse:		[self message: 'testCallback071 failed']"long longtestCallback071(Callback071 aCallback071, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong){	return aCallback071(bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong);}"</body><body package="DLLCC Test Suite">runTestCallback072	&lt;test&gt;	| result invoked aCallback072 |		invoked := false.	aCallback072 := CCallback		do:		[:bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong| | ok localField |		 invoked := true.		 ok := 0.		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback072 failed in callback (bad parameter)'].		 12345678901234567890]		ofType: self interface Callback072.	result := self interface testCallback072: aCallback072 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788.	invoked ifFalse: [self message: 'testCallback072 failed to callback'].	12345678901234567890 = result ifFalse:		[self message: 'testCallback072 failed']"unsigned long longtestCallback072(Callback072 aCallback072, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong){	return aCallback072(bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong);}"</body><body package="DLLCC Test Suite">runTestCallback073	&lt;test&gt;	| result invoked aCallback073 |		invoked := false.	aCallback073 := CCallback		do:		[:bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong| | ok localField |		 invoked := true.		 ok := 0.		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback073 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback073.	result := self interface testCallback073: aCallback073 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891.	invoked ifFalse: [self message: 'testCallback073 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback073 failed']"floattestCallback073(Callback073 aCallback073, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong){	return aCallback073(bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong);}"</body><body package="DLLCC Test Suite">runTestCallback074	&lt;test&gt;	| result invoked aCallback074 |		invoked := false.	aCallback074 := CCallback		do:		[:bDouble :charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat| | ok localField |		 invoked := true.		 ok := 0.		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback074 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback074.	result := self interface testCallback074: aCallback074 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456.	invoked ifFalse: [self message: 'testCallback074 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback074 failed']"doubletestCallback074(Callback074 aCallback074, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat){	return aCallback074(bDouble, charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat);}"</body><body package="DLLCC Test Suite">runTestCallback075	&lt;test&gt;	| result field invoked aCallback075 |		invoked := false.	aCallback075 := CCallback		do:		[:charStructA :smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(2 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(3 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(4 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(5 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(6 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(7 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(8 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(9 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(10 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		localField := #(11 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(12 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(13 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(14 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(15 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(16 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(17 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(18 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(19 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(20 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(21 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(22 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(23 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(23 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(24 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(24 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(26 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(27 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(28 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(29 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(30 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(31 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(32 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(33 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(34 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		localField := #(35 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(36 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(37 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(38 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(39 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(40 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(41 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(42 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(43 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(44 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(45 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(46 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(47 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(47 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(48 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(48 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback075 failed in callback (bad parameter)'].		 self interface charStruct]		ofType: self interface Callback075.	result := self interface testCallback075: aCallback075 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8.	invoked ifFalse: [self message: 'testCallback075 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94) ifFalse:		[self message: 'testCallback075 failed']"CharStructtestCallback075(Callback075 aCallback075, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble){	return aCallback075(charStructA, smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble);}"</body><body package="DLLCC Test Suite">runTestCallback076	&lt;test&gt;	| result field invoked aCallback076 |		invoked := false.	aCallback076 := CCallback		do:		[:smallStructA :mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(2 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(3 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(4 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(5 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(6 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(7 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(8 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(9 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		localField := #(10 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(11 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(12 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(13 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(14 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(15 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(16 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(17 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(18 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(19 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(20 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(21 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(22 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(22 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(23 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(23 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(24 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(26 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(27 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(28 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(29 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(30 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(31 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(32 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(33 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		localField := #(34 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(35 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(36 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(37 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(38 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(39 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(40 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(41 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(42 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(43 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(44 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(45 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(46 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(46 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(47 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(47 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(48 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback076 failed in callback (bad parameter)'].		 self interface smallStruct]		ofType: self interface Callback076.	result := self interface testCallback076: aCallback076 w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA.	invoked ifFalse: [self message: 'testCallback076 failed to callback'].	field := #(1 #aShort) -&gt; (result memberAt: #aShort).		(field value = -12345	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345]]) ifFalse:		[self message: 'testCallback076 failed']"SmallStructtestCallback076(Callback076 aCallback076, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA){	return aCallback076(smallStructA, mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA);}"</body><body package="DLLCC Test Suite">runTestCallback077	&lt;test&gt;	| result field invoked aCallback077 |		invoked := false.	aCallback077 := CCallback		do:		[:mediumStructA :largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(2 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(3 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(4 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(5 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(6 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		localField := #(7 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(8 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(9 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(10 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(11 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(12 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(13 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(14 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(15 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(16 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(17 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(18 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(19 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(19 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(20 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(20 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(21 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(22 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(23 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(24 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(26 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(27 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(28 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(29 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(30 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		localField := #(31 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(32 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(33 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(34 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(35 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(36 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(37 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(38 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(39 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(40 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(41 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(42 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(43 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(43 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(44 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(44 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(45 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(46 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(47 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(48 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback077 failed in callback (bad parameter)'].		 self interface mediumStruct]		ofType: self interface Callback077.	result := self interface testCallback077: aCallback077 w: self interface mediumStructA w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA.	invoked ifFalse: [self message: 'testCallback077 failed to callback'].	field := #(1 #anInt) -&gt; (result memberAt: #anInt).		(field value = -1234567890	and: [field := #(2 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]) ifFalse:		[self message: 'testCallback077 failed']"MediumStructtestCallback077(Callback077 aCallback077, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA){	return aCallback077(mediumStructA, largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA);}"</body><body package="DLLCC Test Suite">runTestCallback078	&lt;test&gt;	| result field invoked aCallback078 |		invoked := false.	aCallback078 := CCallback		do:		[:largeStructA :bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(2 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(3 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(4 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		localField := #(5 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(6 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(7 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(8 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(9 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(10 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(11 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(12 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(13 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(14 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(15 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(16 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(17 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(17 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(18 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(18 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(19 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(20 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(21 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(22 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(23 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(24 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(26 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(27 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(28 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		localField := #(29 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(30 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(31 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(32 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(33 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(34 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(35 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(36 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(37 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(38 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(39 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(40 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(41 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(41 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(42 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(42 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(43 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(44 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(45 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(46 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(47 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(48 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback078 failed in callback (bad parameter)'].		 self interface largeStruct]		ofType: self interface Callback078.	result := self interface testCallback078: aCallback078 w: self interface largeStructA w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA.	invoked ifFalse: [self message: 'testCallback078 failed to callback'].	field := #(1 #aLong) -&gt; (result memberAt: #aLong).		(field value = -1234567890	and: [field := #(2 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(3 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(4 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456]]]) ifFalse:		[self message: 'testCallback078 failed']"LargeStructtestCallback078(Callback078 aCallback078, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA){	return aCallback078(largeStructA, bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA);}"</body><body package="DLLCC Test Suite">runTestCallback079	&lt;test&gt;	| result field invoked aCallback079 |		invoked := false.	aCallback079 := CCallback		do:		[:bigStructA :aChar :aUChar :aShort :aUShort :anInt :aUInt :aLong :aULong :aLongLong :aULongLong :aFloat :aDouble :charStruct :smallStruct :mediumStruct :largeStruct :bigStruct :bChar :bUChar :bShort :bUShort :bnInt :bUInt :bLong :bULong :bLongLong :bULongLong :bFloat :bDouble :charStructA :smallStructA :mediumStructA :largeStructA| | ok localField |		 invoked := true.		 ok := 0.		localField := #(1 #aChar) -&gt; (bigStructA memberAt: #aChar).		(localField value = -93	and: [localField := #(2 #aUChar) -&gt; (bigStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(3 #aShort) -&gt; (bigStructA memberAt: #aShort).		localField value = -12344	and: [localField := #(4 #aUShort) -&gt; (bigStructA memberAt: #aUShort).		localField value = 12346	and: [localField := #(5 #anInt) -&gt; (bigStructA memberAt: #anInt).		localField value = -1234567889	and: [localField := #(6 #aUInt) -&gt; (bigStructA memberAt: #aUInt).		localField value = 1234567891	and: [localField := #(7 #aLong) -&gt; (bigStructA memberAt: #aLong).		localField value = -1234567889	and: [localField := #(8 #aULong) -&gt; (bigStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(9 #aLongLong) -&gt; (bigStructA memberAt: #aLongLong).		localField value = -1234567890123456788	and: [localField := #(10 #aULongLong) -&gt; (bigStructA memberAt: #aULongLong).		localField value = 12345678901234567891	and: [localField := #(11 #aFloat) -&gt; (bigStructA memberAt: #aFloat).		localField value = 124.456	and: [localField := #(12 #aDouble) -&gt; (bigStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(13 #charStruct) -&gt; (bigStructA memberAt: #charStruct).		localField := #(13 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -93	and: [localField := #(14 #smallStruct) -&gt; (bigStructA memberAt: #smallStruct).		localField := #(14 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12344]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		aChar = -94 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		aUChar = 99 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		aShort = -12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		aUShort = 12345 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		anInt = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		aUInt = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		aLong = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		aULong = 1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		aLongLong = -1234567890123456789 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		aULongLong = 12345678901234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		aFloat = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		aDouble = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		localField := #(15 #aChar) -&gt; (charStruct memberAt: #aChar).		(localField value = -94) ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		localField := #(16 #aShort) -&gt; (smallStruct memberAt: #aShort).		(localField value = -12345	and: [localField := #(17 #aUChar) -&gt; (smallStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(18 #aUShort) -&gt; (smallStruct memberAt: #aUShort).		localField value = 12345]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		localField := #(19 #anInt) -&gt; (mediumStruct memberAt: #anInt).		(localField value = -1234567890	and: [localField := #(20 #aFloat) -&gt; (mediumStruct memberAt: #aFloat).		localField value = 123.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		localField := #(21 #aLong) -&gt; (largeStruct memberAt: #aLong).		(localField value = -1234567890	and: [localField := #(22 #aDouble) -&gt; (largeStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(23 #aULong) -&gt; (largeStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(24 #aFloat) -&gt; (largeStruct memberAt: #aFloat).		localField value = 123.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		localField := #(25 #aChar) -&gt; (bigStruct memberAt: #aChar).		(localField value = -94	and: [localField := #(26 #aUChar) -&gt; (bigStruct memberAt: #aUChar).		localField value = 99	and: [localField := #(27 #aShort) -&gt; (bigStruct memberAt: #aShort).		localField value = -12345	and: [localField := #(28 #aUShort) -&gt; (bigStruct memberAt: #aUShort).		localField value = 12345	and: [localField := #(29 #anInt) -&gt; (bigStruct memberAt: #anInt).		localField value = -1234567890	and: [localField := #(30 #aUInt) -&gt; (bigStruct memberAt: #aUInt).		localField value = 1234567890	and: [localField := #(31 #aLong) -&gt; (bigStruct memberAt: #aLong).		localField value = -1234567890	and: [localField := #(32 #aULong) -&gt; (bigStruct memberAt: #aULong).		localField value = 1234567890	and: [localField := #(33 #aLongLong) -&gt; (bigStruct memberAt: #aLongLong).		localField value = -1234567890123456789	and: [localField := #(34 #aULongLong) -&gt; (bigStruct memberAt: #aULongLong).		localField value = 12345678901234567890	and: [localField := #(35 #aFloat) -&gt; (bigStruct memberAt: #aFloat).		localField value = 123.456	and: [localField := #(36 #aDouble) -&gt; (bigStruct memberAt: #aDouble).		localField value = 1.2345678901235d8	and: [localField := #(37 #charStruct) -&gt; (bigStruct memberAt: #charStruct).		localField := #(37 #aChar) -&gt; (localField value memberAt: #aChar).		localField value = -94	and: [localField := #(38 #smallStruct) -&gt; (bigStruct memberAt: #smallStruct).		localField := #(38 #aShort) -&gt; (localField value memberAt: #aShort).		localField value = -12345]]]]]]]]]]]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		bChar = -93 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		bUChar = 100 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		bShort = -12344 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		bUShort = 12346 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		bnInt = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		bUInt = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		bLong = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		bULong = 1234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		bLongLong = -1234567890123456788 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		bULongLong = 12345678901234567891 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		bFloat = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		bDouble = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		localField := #(39 #aChar) -&gt; (charStructA memberAt: #aChar).		(localField value = -93) ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		localField := #(40 #aShort) -&gt; (smallStructA memberAt: #aShort).		(localField value = -12344	and: [localField := #(41 #aUChar) -&gt; (smallStructA memberAt: #aUChar).		localField value = 100	and: [localField := #(42 #aUShort) -&gt; (smallStructA memberAt: #aUShort).		localField value = 12346]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		localField := #(43 #anInt) -&gt; (mediumStructA memberAt: #anInt).		(localField value = -1234567889	and: [localField := #(44 #aFloat) -&gt; (mediumStructA memberAt: #aFloat).		localField value = 124.456]) ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		localField := #(45 #aLong) -&gt; (largeStructA memberAt: #aLong).		(localField value = -1234567889	and: [localField := #(46 #aDouble) -&gt; (largeStructA memberAt: #aDouble).		localField value = 2.2345678901235d8	and: [localField := #(47 #aULong) -&gt; (largeStructA memberAt: #aULong).		localField value = 1234567891	and: [localField := #(48 #aFloat) -&gt; (largeStructA memberAt: #aFloat).		localField value = 124.456]]]) ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		17179869183 ~= ok ifTrue:			[self message: 'aCallback079 failed in callback (bad parameter)'].		 self interface bigStruct]		ofType: self interface Callback079.	result := self interface testCallback079: aCallback079 w: self interface bigStructA w: -94 w: 99 w: -12345 w: 12345 w: -1234567890 w: 1234567890 w: -1234567890 w: 1234567890 w: -1234567890123456789 w: 12345678901234567890 w: 123.456 w: 1.2345678901235d8 w: self interface charStruct w: self interface smallStruct w: self interface mediumStruct w: self interface largeStruct w: self interface bigStruct w: -93 w: 100 w: -12344 w: 12346 w: -1234567889 w: 1234567891 w: -1234567889 w: 1234567891 w: -1234567890123456788 w: 12345678901234567891 w: 124.456 w: 2.2345678901235d8 w: self interface charStructA w: self interface smallStructA w: self interface mediumStructA w: self interface largeStructA.	invoked ifFalse: [self message: 'testCallback079 failed to callback'].	field := #(1 #aChar) -&gt; (result memberAt: #aChar).		(field value = -94	and: [field := #(2 #aUChar) -&gt; (result memberAt: #aUChar).		field value = 99	and: [field := #(3 #aShort) -&gt; (result memberAt: #aShort).		field value = -12345	and: [field := #(4 #aUShort) -&gt; (result memberAt: #aUShort).		field value = 12345	and: [field := #(5 #anInt) -&gt; (result memberAt: #anInt).		field value = -1234567890	and: [field := #(6 #aUInt) -&gt; (result memberAt: #aUInt).		field value = 1234567890	and: [field := #(7 #aLong) -&gt; (result memberAt: #aLong).		field value = -1234567890	and: [field := #(8 #aULong) -&gt; (result memberAt: #aULong).		field value = 1234567890	and: [field := #(9 #aLongLong) -&gt; (result memberAt: #aLongLong).		field value = -1234567890123456789	and: [field := #(10 #aULongLong) -&gt; (result memberAt: #aULongLong).		field value = 12345678901234567890	and: [field := #(11 #aFloat) -&gt; (result memberAt: #aFloat).		field value = 123.456	and: [field := #(12 #aDouble) -&gt; (result memberAt: #aDouble).		field value = 1.2345678901235d8	and: [field := #(13 #charStruct) -&gt; (result memberAt: #charStruct).		field := #(13 #aChar) -&gt; (field value memberAt: #aChar).		field value = -94	and: [field := #(14 #smallStruct) -&gt; (result memberAt: #smallStruct).		field := #(14 #aShort) -&gt; (field value memberAt: #aShort).		field value = -12345]]]]]]]]]]]]]) ifFalse:		[self message: 'testCallback079 failed']"BigStructtestCallback079(Callback079 aCallback079, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, long long aLongLong, unsigned long long aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, long long bLongLong, unsigned long long bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA){	return aCallback079(bigStructA, aChar, aUChar, aShort, aUShort, anInt, aUInt, aLong, aULong, aLongLong, aULongLong, aFloat, aDouble, charStruct, smallStruct, mediumStruct, largeStruct, bigStruct, bChar, bUChar, bShort, bUShort, bnInt, bUInt, bLong, bULong, bLongLong, bULongLong, bFloat, bDouble, charStructA, smallStructA, mediumStructA, largeStructA);}"</body><body package="DLLCC Test Suite">runTestCallback080	&lt;test&gt;	| result invoked aCallback080 |		invoked := false.	aCallback080 := CCallback		do:		[:f0 :f1 :f2 :f3 :f4 :f5 :f6 :f7 :f8 :f9 :f10 :f11 :f12 :f13 :f14 :f15 :f16 :f17 :f18 :f19 :f20 :f21 :f22 :f23 :f24 :f25 :f26 :f27 :f28 :f29 :f30 :f31 :f32 :f33 :f34 :f35 :f36 :f37 :f38 :f39 :f40 :f41 :f42 :f43 :f44 :f45 :f46 :f47 :f48 :f49 :f50 :f51 :f52 :f53 :f54 :f55 :f56 :f57 :f58 :f59 :f60 :f61 :f62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback080 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback080.	result := self interface testCallback080: aCallback080 w: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 127.456 w: 128.456 w: 129.456 w: 130.456 w: 131.456 w: 132.456 w: 133.456 w: 134.456 w: 135.456 w: 136.456 w: 137.456 w: 138.456 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 147.456 w: 148.456 w: 149.456 w: 150.456 w: 151.456 w: 152.456 w: 153.456 w: 154.456 w: 155.456 w: 156.456 w: 157.456 w: 158.456 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: 167.456 w: 168.456 w: 169.456 w: 170.456 w: 171.456 w: 172.456 w: 173.456 w: 174.456 w: 175.456 w: 176.456 w: 177.456 w: 178.456 w: 179.456 w: 180.456 w: 181.456 w: 182.456 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	invoked ifFalse: [self message: 'testCallback080 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback080 failed']"floattestCallback080(Callback080 aCallback080, float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13, float f14, float f15, float f16, float f17, float f18, float f19, float f20, float f21, float f22, float f23, float f24, float f25, float f26, float f27, float f28, float f29, float f30, float f31, float f32, float f33, float f34, float f35, float f36, float f37, float f38, float f39, float f40, float f41, float f42, float f43, float f44, float f45, float f46, float f47, float f48, float f49, float f50, float f51, float f52, float f53, float f54, float f55, float f56, float f57, float f58, float f59, float f60, float f61, float f62, float f63){	return aCallback080(f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback081	&lt;test&gt;	| result invoked aCallback081 |		invoked := false.	aCallback081 := CCallback		do:		[:d0 :d1 :d2 :d3 :d4 :d5 :d6 :d7 :d8 :d9 :d10 :d11 :d12 :d13 :d14 :d15 :d16 :d17 :d18 :d19 :d20 :d21 :d22 :d23 :d24 :d25 :d26 :d27 :d28 :d29 :d30 :d31 :d32 :d33 :d34 :d35 :d36 :d37 :d38 :d39 :d40 :d41 :d42 :d43 :d44 :d45 :d46 :d47 :d48 :d49 :d50 :d51 :d52 :d53 :d54 :d55 :d56 :d57 :d58 :d59 :d60 :d61 :d62 :d63| | ok |		 invoked := true.		 ok := 0.		d0 = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		d1 = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		d2 = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		d3 = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		d4 = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		d5 = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		d6 = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		d7 = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		d8 = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		d9 = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		d10 = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		d11 = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		d12 = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		d13 = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		d14 = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		d15 = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		d16 = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		d17 = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		d18 = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		d19 = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		d20 = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		d21 = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		d22 = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		d23 = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		d24 = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		d25 = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		d26 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		d27 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		d28 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		d29 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		d30 = 3.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		d31 = 3.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		d32 = 3.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		d33 = 3.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		d34 = 3.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		d35 = 3.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		d36 = 3.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		d37 = 3.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		d38 = 3.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		d39 = 4.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		d40 = 4.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		d41 = 4.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		d42 = 4.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		d43 = 4.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		d44 = 4.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		d45 = 4.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		d46 = 4.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		d47 = 4.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		d48 = 4.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		d49 = 5.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		d50 = 5.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		d51 = 5.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		d52 = 5.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		d53 = 5.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		d54 = 5.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		d55 = 5.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		d56 = 5.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		d57 = 5.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		d58 = 5.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		d59 = 6.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		d60 = 6.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		d61 = 6.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		d62 = 6.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		d63 = 6.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback081 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback081.	result := self interface testCallback081: aCallback081 w: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: 4.2345678901235d8 w: 5.2345678901235d8 w: 6.2345678901235d8 w: 7.2345678901235d8 w: 8.2345678901235d8 w: 9.2345678901235d8 w: 1.0234567890124d9 w: 1.1234567890124d9 w: 1.2234567890123d9 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: 1.6234567890124d9 w: 1.7234567890123d9 w: 1.8234567890124d9 w: 1.9234567890124d9 w: 2.0234567890124d9 w: 2.1234567890124d9 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: 2.5234567890124d9 w: 2.6234567890124d9 w: 2.7234567890124d9 w: 2.8234567890124d9 w: 2.9234567890124d9 w: 3.0234567890124d9 w: 3.1234567890124d9 w: 3.2234567890124d9 w: 3.3234567890124d9 w: 3.4234567890124d9 w: 3.5234567890124d9 w: 3.6234567890124d9 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: 4.0234567890123d9 w: 4.1234567890123d9 w: 4.2234567890123d9 w: 4.3234567890123d9 w: 4.4234567890124d9 w: 4.5234567890123d9 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: 4.9234567890124d9 w: 5.0234567890123d9 w: 5.1234567890123d9 w: 5.2234567890123d9 w: 5.3234567890123d9 w: 5.4234567890124d9 w: 5.5234567890123d9 w: 5.6234567890123d9 w: 5.7234567890123d9 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: 6.4234567890124d9.	invoked ifFalse: [self message: 'testCallback081 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback081 failed']"doubletestCallback081(Callback081 aCallback081, double d0, double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11, double d12, double d13, double d14, double d15, double d16, double d17, double d18, double d19, double d20, double d21, double d22, double d23, double d24, double d25, double d26, double d27, double d28, double d29, double d30, double d31, double d32, double d33, double d34, double d35, double d36, double d37, double d38, double d39, double d40, double d41, double d42, double d43, double d44, double d45, double d46, double d47, double d48, double d49, double d50, double d51, double d52, double d53, double d54, double d55, double d56, double d57, double d58, double d59, double d60, double d61, double d62, double d63){	return aCallback081(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, d62, d63);}"</body><body package="DLLCC Test Suite">runTestCallback082	&lt;test&gt;	| result invoked aCallback082 |		invoked := false.	aCallback082 := CCallback		do:		[:d0 :f1 :d2 :f3 :d4 :f5 :d6 :f7 :d8 :f9 :d10 :f11 :d12 :f13 :d14 :f15 :d16 :f17 :d18 :f19 :d20 :f21 :d22 :f23 :d24 :f25 :d26 :f27 :d28 :f29 :d30 :f31 :d32 :f33 :d34 :f35 :d36 :f37 :d38 :f39 :d40 :f41 :d42 :f43 :d44 :f45 :d46 :f47 :d48 :f49 :d50 :f51 :d52 :f53 :d54 :f55 :d56 :f57 :d58 :f59 :d60 :f61 :d62 :f63| | ok |		 invoked := true.		 ok := 0.		d0 = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		d2 = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		d4 = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		d6 = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		d8 = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		d10 = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		d12 = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		d14 = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		d16 = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		d18 = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		d20 = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		d22 = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		d24 = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		d26 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		d28 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		d30 = 3.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		d32 = 3.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		d34 = 3.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		d36 = 3.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		d38 = 3.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		d40 = 4.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		d42 = 4.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		d44 = 4.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		d46 = 4.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		d48 = 4.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		d50 = 5.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		d52 = 5.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		d54 = 5.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		d56 = 5.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		d58 = 5.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		d60 = 6.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		d62 = 6.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback082 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback082.	result := self interface testCallback082: aCallback082 w: 1.2345678901235d8 w: 124.456 w: 3.2345678901235d8 w: 126.456 w: 5.2345678901235d8 w: 128.456 w: 7.2345678901235d8 w: 130.456 w: 9.2345678901235d8 w: 132.456 w: 1.1234567890124d9 w: 134.456 w: 1.3234567890124d9 w: 136.456 w: 1.5234567890123d9 w: 138.456 w: 1.7234567890123d9 w: 140.456 w: 1.9234567890124d9 w: 142.456 w: 2.1234567890124d9 w: 144.456 w: 2.3234567890124d9 w: 146.456 w: 2.5234567890124d9 w: 148.456 w: 2.7234567890124d9 w: 150.456 w: 2.9234567890124d9 w: 152.456 w: 3.1234567890124d9 w: 154.456 w: 3.3234567890124d9 w: 156.456 w: 3.5234567890124d9 w: 158.456 w: 3.7234567890124d9 w: 160.456 w: 3.9234567890124d9 w: 162.456 w: 4.1234567890123d9 w: 164.456 w: 4.3234567890123d9 w: 166.456 w: 4.5234567890123d9 w: 168.456 w: 4.7234567890123d9 w: 170.456 w: 4.9234567890124d9 w: 172.456 w: 5.1234567890123d9 w: 174.456 w: 5.3234567890123d9 w: 176.456 w: 5.5234567890123d9 w: 178.456 w: 5.7234567890123d9 w: 180.456 w: 5.9234567890124d9 w: 182.456 w: 6.1234567890123d9 w: 184.456 w: 6.3234567890123d9 w: 186.456.	invoked ifFalse: [self message: 'testCallback082 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback082 failed']"doubletestCallback082(Callback082 aCallback082, double d0, float f1, double d2, float f3, double d4, float f5, double d6, float f7, double d8, float f9, double d10, float f11, double d12, float f13, double d14, float f15, double d16, float f17, double d18, float f19, double d20, float f21, double d22, float f23, double d24, float f25, double d26, float f27, double d28, float f29, double d30, float f31, double d32, float f33, double d34, float f35, double d36, float f37, double d38, float f39, double d40, float f41, double d42, float f43, double d44, float f45, double d46, float f47, double d48, float f49, double d50, float f51, double d52, float f53, double d54, float f55, double d56, float f57, double d58, float f59, double d60, float f61, double d62, float f63){	return aCallback082(d0, f1, d2, f3, d4, f5, d6, f7, d8, f9, d10, f11, d12, f13, d14, f15, d16, f17, d18, f19, d20, f21, d22, f23, d24, f25, d26, f27, d28, f29, d30, f31, d32, f33, d34, f35, d36, f37, d38, f39, d40, f41, d42, f43, d44, f45, d46, f47, d48, f49, d50, f51, d52, f53, d54, f55, d56, f57, d58, f59, d60, f61, d62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback083	&lt;test&gt;	| result invoked aCallback083 |		invoked := false.	aCallback083 := CCallback		do:		[:f0 :d1 :f2 :d3 :f4 :d5 :f6 :d7 :f8 :d9 :f10 :d11 :f12 :d13 :f14 :d15 :f16 :d17 :f18 :d19 :f20 :d21 :f22 :d23 :f24 :d25 :f26 :d27 :f28 :d29 :f30 :d31 :f32 :d33 :f34 :d35 :f36 :d37 :f38 :d39 :f40 :d41 :f42 :d43 :f44 :d45 :f46 :d47 :f48 :d49 :f50 :d51 :f52 :d53 :f54 :d55 :f56 :d57 :f58 :d59 :f60 :d61 :f62 :d63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		d1 = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		d3 = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		d5 = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		d7 = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		d9 = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		d11 = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		d13 = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		d15 = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		d17 = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		d19 = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		d21 = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		d23 = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		d25 = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		d27 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		d29 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		d31 = 3.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		d33 = 3.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		d35 = 3.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		d37 = 3.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		d39 = 4.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		d41 = 4.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		d43 = 4.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		d45 = 4.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		d47 = 4.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		d49 = 5.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		d51 = 5.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		d53 = 5.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		d55 = 5.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		d57 = 5.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		d59 = 6.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		d61 = 6.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		d63 = 6.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback083 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback083.	result := self interface testCallback083: aCallback083 w: 123.456 w: 2.2345678901235d8 w: 125.456 w: 4.2345678901235d8 w: 127.456 w: 6.2345678901235d8 w: 129.456 w: 8.2345678901235d8 w: 131.456 w: 1.0234567890124d9 w: 133.456 w: 1.2234567890123d9 w: 135.456 w: 1.4234567890124d9 w: 137.456 w: 1.6234567890124d9 w: 139.456 w: 1.8234567890124d9 w: 141.456 w: 2.0234567890124d9 w: 143.456 w: 2.2234567890124d9 w: 145.456 w: 2.4234567890124d9 w: 147.456 w: 2.6234567890124d9 w: 149.456 w: 2.8234567890124d9 w: 151.456 w: 3.0234567890124d9 w: 153.456 w: 3.2234567890124d9 w: 155.456 w: 3.4234567890124d9 w: 157.456 w: 3.6234567890124d9 w: 159.456 w: 3.8234567890124d9 w: 161.456 w: 4.0234567890123d9 w: 163.456 w: 4.2234567890123d9 w: 165.456 w: 4.4234567890124d9 w: 167.456 w: 4.6234567890123d9 w: 169.456 w: 4.8234567890123d9 w: 171.456 w: 5.0234567890123d9 w: 173.456 w: 5.2234567890123d9 w: 175.456 w: 5.4234567890124d9 w: 177.456 w: 5.6234567890123d9 w: 179.456 w: 5.8234567890123d9 w: 181.456 w: 6.0234567890123d9 w: 183.456 w: 6.2234567890123d9 w: 185.456 w: 6.4234567890124d9.	invoked ifFalse: [self message: 'testCallback083 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback083 failed']"floattestCallback083(Callback083 aCallback083, float f0, double d1, float f2, double d3, float f4, double d5, float f6, double d7, float f8, double d9, float f10, double d11, float f12, double d13, float f14, double d15, float f16, double d17, float f18, double d19, float f20, double d21, float f22, double d23, float f24, double d25, float f26, double d27, float f28, double d29, float f30, double d31, float f32, double d33, float f34, double d35, float f36, double d37, float f38, double d39, float f40, double d41, float f42, double d43, float f44, double d45, float f46, double d47, float f48, double d49, float f50, double d51, float f52, double d53, float f54, double d55, float f56, double d57, float f58, double d59, float f60, double d61, float f62, double d63){	return aCallback083(f0, d1, f2, d3, f4, d5, f6, d7, f8, d9, f10, d11, f12, d13, f14, d15, f16, d17, f18, d19, f20, d21, f22, d23, f24, d25, f26, d27, f28, d29, f30, d31, f32, d33, f34, d35, f36, d37, f38, d39, f40, d41, f42, d43, f44, d45, f46, d47, f48, d49, f50, d51, f52, d53, f54, d55, f56, d57, f58, d59, f60, d61, f62, d63);}"</body><body package="DLLCC Test Suite">runTestCallback084	&lt;test&gt;	| result invoked aCallback084 |		invoked := false.	aCallback084 := CCallback		do:		[:f0 :l1 :l2 :f3 :l4 :l5 :f6 :l7 :l8 :f9 :l10 :l11 :f12 :l13 :l14 :f15 :l16 :l17 :f18 :l19 :l20 :f21 :l22 :l23 :f24 :l25 :l26 :f27 :l28 :l29 :f30 :l31 :l32 :f33 :l34 :l35 :f36 :l37 :l38 :f39 :l40 :l41 :f42 :l43 :l44 :f45 :l46 :l47 :f48 :l49 :l50 :f51 :l52 :l53 :f54 :l55 :l56 :f57 :l58 :l59 :f60 :l61 :l62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback084 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback084.	result := self interface testCallback084: aCallback084 w: 123.456 w: -1234567889 w: -1234567888 w: 126.456 w: -1234567886 w: -1234567885 w: 129.456 w: -1234567883 w: -1234567882 w: 132.456 w: -1234567880 w: -1234567879 w: 135.456 w: -1234567877 w: -1234567876 w: 138.456 w: -1234567874 w: -1234567873 w: 141.456 w: -1234567871 w: -1234567870 w: 144.456 w: -1234567868 w: -1234567867 w: 147.456 w: -1234567865 w: -1234567864 w: 150.456 w: -1234567862 w: -1234567861 w: 153.456 w: -1234567859 w: -1234567858 w: 156.456 w: -1234567856 w: -1234567855 w: 159.456 w: -1234567853 w: -1234567852 w: 162.456 w: -1234567850 w: -1234567849 w: 165.456 w: -1234567847 w: -1234567846 w: 168.456 w: -1234567844 w: -1234567843 w: 171.456 w: -1234567841 w: -1234567840 w: 174.456 w: -1234567838 w: -1234567837 w: 177.456 w: -1234567835 w: -1234567834 w: 180.456 w: -1234567832 w: -1234567831 w: 183.456 w: -1234567829 w: -1234567828 w: 186.456.	invoked ifFalse: [self message: 'testCallback084 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback084 failed']"floattestCallback084(Callback084 aCallback084, float f0, long l1, long l2, float f3, long l4, long l5, float f6, long l7, long l8, float f9, long l10, long l11, float f12, long l13, long l14, float f15, long l16, long l17, float f18, long l19, long l20, float f21, long l22, long l23, float f24, long l25, long l26, float f27, long l28, long l29, float f30, long l31, long l32, float f33, long l34, long l35, float f36, long l37, long l38, float f39, long l40, long l41, float f42, long l43, long l44, float f45, long l46, long l47, float f48, long l49, long l50, float f51, long l52, long l53, float f54, long l55, long l56, float f57, long l58, long l59, float f60, long l61, long l62, float f63){	return aCallback084(f0, l1, l2, f3, l4, l5, f6, l7, l8, f9, l10, l11, f12, l13, l14, f15, l16, l17, f18, l19, l20, f21, l22, l23, f24, l25, l26, f27, l28, l29, f30, l31, l32, f33, l34, l35, f36, l37, l38, f39, l40, l41, f42, l43, l44, f45, l46, l47, f48, l49, l50, f51, l52, l53, f54, l55, l56, f57, l58, l59, f60, l61, l62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback085	&lt;test&gt;	| result invoked aCallback085 |		invoked := false.	aCallback085 := CCallback		do:		[:l0 :f1 :l2 :l3 :f4 :l5 :l6 :f7 :l8 :l9 :f10 :l11 :l12 :f13 :l14 :l15 :f16 :l17 :l18 :f19 :l20 :l21 :f22 :l23 :l24 :f25 :l26 :l27 :f28 :l29 :l30 :f31 :l32 :l33 :f34 :l35 :l36 :f37 :l38 :l39 :f40 :l41 :l42 :f43 :l44 :l45 :f46 :l47 :l48 :f49 :l50 :l51 :f52 :l53 :l54 :f55 :l56 :l57 :f58 :l59 :l60 :f61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback085 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback085.	result := self interface testCallback085: aCallback085 w: -1234567890 w: 124.456 w: -1234567888 w: -1234567887 w: 127.456 w: -1234567885 w: -1234567884 w: 130.456 w: -1234567882 w: -1234567881 w: 133.456 w: -1234567879 w: -1234567878 w: 136.456 w: -1234567876 w: -1234567875 w: 139.456 w: -1234567873 w: -1234567872 w: 142.456 w: -1234567870 w: -1234567869 w: 145.456 w: -1234567867 w: -1234567866 w: 148.456 w: -1234567864 w: -1234567863 w: 151.456 w: -1234567861 w: -1234567860 w: 154.456 w: -1234567858 w: -1234567857 w: 157.456 w: -1234567855 w: -1234567854 w: 160.456 w: -1234567852 w: -1234567851 w: 163.456 w: -1234567849 w: -1234567848 w: 166.456 w: -1234567846 w: -1234567845 w: 169.456 w: -1234567843 w: -1234567842 w: 172.456 w: -1234567840 w: -1234567839 w: 175.456 w: -1234567837 w: -1234567836 w: 178.456 w: -1234567834 w: -1234567833 w: 181.456 w: -1234567831 w: -1234567830 w: 184.456 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback085 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback085 failed']"longtestCallback085(Callback085 aCallback085, long l0, float f1, long l2, long l3, float f4, long l5, long l6, float f7, long l8, long l9, float f10, long l11, long l12, float f13, long l14, long l15, float f16, long l17, long l18, float f19, long l20, long l21, float f22, long l23, long l24, float f25, long l26, long l27, float f28, long l29, long l30, float f31, long l32, long l33, float f34, long l35, long l36, float f37, long l38, long l39, float f40, long l41, long l42, float f43, long l44, long l45, float f46, long l47, long l48, float f49, long l50, long l51, float f52, long l53, long l54, float f55, long l56, long l57, float f58, long l59, long l60, float f61, long l62, long l63){	return aCallback085(l0, f1, l2, l3, f4, l5, l6, f7, l8, l9, f10, l11, l12, f13, l14, l15, f16, l17, l18, f19, l20, l21, f22, l23, l24, f25, l26, l27, f28, l29, l30, f31, l32, l33, f34, l35, l36, f37, l38, l39, f40, l41, l42, f43, l44, l45, f46, l47, l48, f49, l50, l51, f52, l53, l54, f55, l56, l57, f58, l59, l60, f61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback086	&lt;test&gt;	| result invoked aCallback086 |		invoked := false.	aCallback086 := CCallback		do:		[:f0 :d1 :l2 :f3 :d4 :l5 :f6 :d7 :l8 :f9 :d10 :l11 :f12 :d13 :l14 :f15 :d16 :l17 :f18 :d19 :l20 :f21 :d22 :l23 :f24 :d25 :l26 :f27 :d28 :l29 :f30 :d31 :l32 :f33 :d34 :l35 :f36 :d37 :l38 :f39 :d40 :l41 :f42 :d43 :l44 :f45 :d46 :l47 :f48 :d49 :l50 :f51 :d52 :l53 :f54 :d55 :l56 :f57 :d58 :l59 :f60 :d61 :l62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		d1 = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		d4 = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		d7 = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		d10 = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		d13 = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		d16 = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		d19 = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		d22 = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		d25 = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		d28 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		d31 = 3.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		d34 = 3.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		d37 = 3.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		d40 = 4.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		d43 = 4.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		d46 = 4.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		d49 = 5.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		d52 = 5.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		d55 = 5.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		d58 = 5.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		d61 = 6.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback086 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback086.	result := self interface testCallback086: aCallback086 w: 123.456 w: 2.2345678901235d8 w: -1234567888 w: 126.456 w: 5.2345678901235d8 w: -1234567885 w: 129.456 w: 8.2345678901235d8 w: -1234567882 w: 132.456 w: 1.1234567890124d9 w: -1234567879 w: 135.456 w: 1.4234567890124d9 w: -1234567876 w: 138.456 w: 1.7234567890123d9 w: -1234567873 w: 141.456 w: 2.0234567890124d9 w: -1234567870 w: 144.456 w: 2.3234567890124d9 w: -1234567867 w: 147.456 w: 2.6234567890124d9 w: -1234567864 w: 150.456 w: 2.9234567890124d9 w: -1234567861 w: 153.456 w: 3.2234567890124d9 w: -1234567858 w: 156.456 w: 3.5234567890124d9 w: -1234567855 w: 159.456 w: 3.8234567890124d9 w: -1234567852 w: 162.456 w: 4.1234567890123d9 w: -1234567849 w: 165.456 w: 4.4234567890124d9 w: -1234567846 w: 168.456 w: 4.7234567890123d9 w: -1234567843 w: 171.456 w: 5.0234567890123d9 w: -1234567840 w: 174.456 w: 5.3234567890123d9 w: -1234567837 w: 177.456 w: 5.6234567890123d9 w: -1234567834 w: 180.456 w: 5.9234567890124d9 w: -1234567831 w: 183.456 w: 6.2234567890123d9 w: -1234567828 w: 186.456.	invoked ifFalse: [self message: 'testCallback086 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback086 failed']"floattestCallback086(Callback086 aCallback086, float f0, double d1, long l2, float f3, double d4, long l5, float f6, double d7, long l8, float f9, double d10, long l11, float f12, double d13, long l14, float f15, double d16, long l17, float f18, double d19, long l20, float f21, double d22, long l23, float f24, double d25, long l26, float f27, double d28, long l29, float f30, double d31, long l32, float f33, double d34, long l35, float f36, double d37, long l38, float f39, double d40, long l41, float f42, double d43, long l44, float f45, double d46, long l47, float f48, double d49, long l50, float f51, double d52, long l53, float f54, double d55, long l56, float f57, double d58, long l59, float f60, double d61, long l62, float f63){	return aCallback086(f0, d1, l2, f3, d4, l5, f6, d7, l8, f9, d10, l11, f12, d13, l14, f15, d16, l17, f18, d19, l20, f21, d22, l23, f24, d25, l26, f27, d28, l29, f30, d31, l32, f33, d34, l35, f36, d37, l38, f39, d40, l41, f42, d43, l44, f45, d46, l47, f48, d49, l50, f51, d52, l53, f54, d55, l56, f57, d58, l59, f60, d61, l62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback087	&lt;test&gt;	| result invoked aCallback087 |		invoked := false.	aCallback087 := CCallback		do:		[:l0 :f1 :d2 :l3 :f4 :d5 :l6 :f7 :d8 :l9 :f10 :d11 :l12 :f13 :d14 :l15 :f16 :d17 :l18 :f19 :d20 :l21 :f22 :d23 :l24 :f25 :d26 :l27 :f28 :d29 :l30 :f31 :d32 :l33 :f34 :d35 :l36 :f37 :d38 :l39 :f40 :d41 :l42 :f43 :d44 :l45 :f46 :d47 :l48 :f49 :d50 :l51 :f52 :d53 :l54 :f55 :d56 :l57 :f58 :d59 :l60 :f61 :d62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		d2 = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		d5 = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		d8 = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		d11 = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		d14 = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		d17 = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		d20 = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		d23 = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		d26 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		d29 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		d32 = 3.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		d35 = 3.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		d38 = 3.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		d41 = 4.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		d44 = 4.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		d47 = 4.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		d50 = 5.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		d53 = 5.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		d56 = 5.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		d59 = 6.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		d62 = 6.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback087 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback087.	result := self interface testCallback087: aCallback087 w: -1234567890 w: 124.456 w: 3.2345678901235d8 w: -1234567887 w: 127.456 w: 6.2345678901235d8 w: -1234567884 w: 130.456 w: 9.2345678901235d8 w: -1234567881 w: 133.456 w: 1.2234567890123d9 w: -1234567878 w: 136.456 w: 1.5234567890123d9 w: -1234567875 w: 139.456 w: 1.8234567890124d9 w: -1234567872 w: 142.456 w: 2.1234567890124d9 w: -1234567869 w: 145.456 w: 2.4234567890124d9 w: -1234567866 w: 148.456 w: 2.7234567890124d9 w: -1234567863 w: 151.456 w: 3.0234567890124d9 w: -1234567860 w: 154.456 w: 3.3234567890124d9 w: -1234567857 w: 157.456 w: 3.6234567890124d9 w: -1234567854 w: 160.456 w: 3.9234567890124d9 w: -1234567851 w: 163.456 w: 4.2234567890123d9 w: -1234567848 w: 166.456 w: 4.5234567890123d9 w: -1234567845 w: 169.456 w: 4.8234567890123d9 w: -1234567842 w: 172.456 w: 5.1234567890123d9 w: -1234567839 w: 175.456 w: 5.4234567890124d9 w: -1234567836 w: 178.456 w: 5.7234567890123d9 w: -1234567833 w: 181.456 w: 6.0234567890123d9 w: -1234567830 w: 184.456 w: 6.3234567890123d9 w: -1234567827.	invoked ifFalse: [self message: 'testCallback087 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback087 failed']"longtestCallback087(Callback087 aCallback087, long l0, float f1, double d2, long l3, float f4, double d5, long l6, float f7, double d8, long l9, float f10, double d11, long l12, float f13, double d14, long l15, float f16, double d17, long l18, float f19, double d20, long l21, float f22, double d23, long l24, float f25, double d26, long l27, float f28, double d29, long l30, float f31, double d32, long l33, float f34, double d35, long l36, float f37, double d38, long l39, float f40, double d41, long l42, float f43, double d44, long l45, float f46, double d47, long l48, float f49, double d50, long l51, float f52, double d53, long l54, float f55, double d56, long l57, float f58, double d59, long l60, float f61, double d62, long l63){	return aCallback087(l0, f1, d2, l3, f4, d5, l6, f7, d8, l9, f10, d11, l12, f13, d14, l15, f16, d17, l18, f19, d20, l21, f22, d23, l24, f25, d26, l27, f28, d29, l30, f31, d32, l33, f34, d35, l36, f37, d38, l39, f40, d41, l42, f43, d44, l45, f46, d47, l48, f49, d50, l51, f52, d53, l54, f55, d56, l57, f58, d59, l60, f61, d62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback088	&lt;test&gt;	| result invoked aCallback088 |		invoked := false.	aCallback088 := CCallback		do:		[:d0 :l1 :f2 :d3 :l4 :f5 :d6 :l7 :f8 :d9 :l10 :f11 :d12 :l13 :f14 :d15 :l16 :f17 :d18 :l19 :f20 :d21 :l22 :f23 :d24 :l25 :f26 :d27 :l28 :f29 :d30 :l31 :f32 :d33 :l34 :f35 :d36 :l37 :f38 :d39 :l40 :f41 :d42 :l43 :f44 :d45 :l46 :f47 :d48 :l49 :f50 :d51 :l52 :f53 :d54 :l55 :f56 :d57 :l58 :f59 :d60 :l61 :f62 :d63| | ok |		 invoked := true.		 ok := 0.		d0 = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		d3 = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		d6 = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		d9 = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		d12 = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		d15 = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		d18 = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		d21 = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		d24 = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		d27 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		d30 = 3.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		d33 = 3.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		d36 = 3.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		d39 = 4.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		d42 = 4.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		d45 = 4.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		d48 = 4.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		d51 = 5.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		d54 = 5.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		d57 = 5.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		d60 = 6.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		d63 = 6.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback088 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback088.	result := self interface testCallback088: aCallback088 w: 1.2345678901235d8 w: -1234567889 w: 125.456 w: 4.2345678901235d8 w: -1234567886 w: 128.456 w: 7.2345678901235d8 w: -1234567883 w: 131.456 w: 1.0234567890124d9 w: -1234567880 w: 134.456 w: 1.3234567890124d9 w: -1234567877 w: 137.456 w: 1.6234567890124d9 w: -1234567874 w: 140.456 w: 1.9234567890124d9 w: -1234567871 w: 143.456 w: 2.2234567890124d9 w: -1234567868 w: 146.456 w: 2.5234567890124d9 w: -1234567865 w: 149.456 w: 2.8234567890124d9 w: -1234567862 w: 152.456 w: 3.1234567890124d9 w: -1234567859 w: 155.456 w: 3.4234567890124d9 w: -1234567856 w: 158.456 w: 3.7234567890124d9 w: -1234567853 w: 161.456 w: 4.0234567890123d9 w: -1234567850 w: 164.456 w: 4.3234567890123d9 w: -1234567847 w: 167.456 w: 4.6234567890123d9 w: -1234567844 w: 170.456 w: 4.9234567890124d9 w: -1234567841 w: 173.456 w: 5.2234567890123d9 w: -1234567838 w: 176.456 w: 5.5234567890123d9 w: -1234567835 w: 179.456 w: 5.8234567890123d9 w: -1234567832 w: 182.456 w: 6.1234567890123d9 w: -1234567829 w: 185.456 w: 6.4234567890124d9.	invoked ifFalse: [self message: 'testCallback088 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback088 failed']"doubletestCallback088(Callback088 aCallback088, double d0, long l1, float f2, double d3, long l4, float f5, double d6, long l7, float f8, double d9, long l10, float f11, double d12, long l13, float f14, double d15, long l16, float f17, double d18, long l19, float f20, double d21, long l22, float f23, double d24, long l25, float f26, double d27, long l28, float f29, double d30, long l31, float f32, double d33, long l34, float f35, double d36, long l37, float f38, double d39, long l40, float f41, double d42, long l43, float f44, double d45, long l46, float f47, double d48, long l49, float f50, double d51, long l52, float f53, double d54, long l55, float f56, double d57, long l58, float f59, double d60, long l61, float f62, double d63){	return aCallback088(d0, l1, f2, d3, l4, f5, d6, l7, f8, d9, l10, f11, d12, l13, f14, d15, l16, f17, d18, l19, f20, d21, l22, f23, d24, l25, f26, d27, l28, f29, d30, l31, f32, d33, l34, f35, d36, l37, f38, d39, l40, f41, d42, l43, f44, d45, l46, f47, d48, l49, f50, d51, l52, f53, d54, l55, f56, d57, l58, f59, d60, l61, f62, d63);}"</body><body package="DLLCC Test Suite">runTestCallback089	&lt;test&gt;	| result invoked aCallback089 |		invoked := false.	aCallback089 := CCallback		do:		[:f0 :f1 :l2 :l3 :l4 :l5 :f6 :f7 :l8 :l9 :l10 :l11 :f12 :f13 :l14 :l15 :l16 :l17 :f18 :f19 :l20 :l21 :l22 :l23 :f24 :f25 :l26 :l27 :l28 :l29 :f30 :f31 :l32 :l33 :l34 :l35 :f36 :f37 :l38 :l39 :l40 :l41 :f42 :f43 :l44 :l45 :l46 :l47 :f48 :f49 :l50 :l51 :l52 :l53 :f54 :f55 :l56 :l57 :l58 :l59 :f60 :f61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback089 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback089.	result := self interface testCallback089: aCallback089 w: 123.456 w: 124.456 w: -1234567888 w: -1234567887 w: -1234567886 w: -1234567885 w: 129.456 w: 130.456 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: -1234567852 w: -1234567851 w: -1234567850 w: -1234567849 w: 165.456 w: 166.456 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback089 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback089 failed']"floattestCallback089(Callback089 aCallback089, float f0, float f1, long l2, long l3, long l4, long l5, float f6, float f7, long l8, long l9, long l10, long l11, float f12, float f13, long l14, long l15, long l16, long l17, float f18, float f19, long l20, long l21, long l22, long l23, float f24, float f25, long l26, long l27, long l28, long l29, float f30, float f31, long l32, long l33, long l34, long l35, float f36, float f37, long l38, long l39, long l40, long l41, float f42, float f43, long l44, long l45, long l46, long l47, float f48, float f49, long l50, long l51, long l52, long l53, float f54, float f55, long l56, long l57, long l58, long l59, float f60, float f61, long l62, long l63){	return aCallback089(f0, f1, l2, l3, l4, l5, f6, f7, l8, l9, l10, l11, f12, f13, l14, l15, l16, l17, f18, f19, l20, l21, l22, l23, f24, f25, l26, l27, l28, l29, f30, f31, l32, l33, l34, l35, f36, f37, l38, l39, l40, l41, f42, f43, l44, l45, l46, l47, f48, f49, l50, l51, l52, l53, f54, f55, l56, l57, l58, l59, f60, f61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback090	&lt;test&gt;	| result invoked aCallback090 |		invoked := false.	aCallback090 := CCallback		do:		[:l0 :l1 :f2 :f3 :l4 :l5 :l6 :l7 :f8 :f9 :l10 :l11 :l12 :l13 :f14 :f15 :l16 :l17 :l18 :l19 :f20 :f21 :l22 :l23 :l24 :l25 :f26 :f27 :l28 :l29 :l30 :l31 :f32 :f33 :l34 :l35 :l36 :l37 :f38 :f39 :l40 :l41 :l42 :l43 :f44 :f45 :l46 :l47 :l48 :l49 :f50 :f51 :l52 :l53 :l54 :l55 :f56 :f57 :l58 :l59 :l60 :l61 :f62 :f63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback090 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback090.	result := self interface testCallback090: aCallback090 w: -1234567890 w: -1234567889 w: 125.456 w: 126.456 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: 131.456 w: 132.456 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: 137.456 w: 138.456 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: 149.456 w: 150.456 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: 155.456 w: 156.456 w: -1234567856 w: -1234567855 w: -1234567854 w: -1234567853 w: 161.456 w: 162.456 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: 167.456 w: 168.456 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: 179.456 w: 180.456 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: 185.456 w: 186.456.	invoked ifFalse: [self message: 'testCallback090 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback090 failed']"longtestCallback090(Callback090 aCallback090, long l0, long l1, float f2, float f3, long l4, long l5, long l6, long l7, float f8, float f9, long l10, long l11, long l12, long l13, float f14, float f15, long l16, long l17, long l18, long l19, float f20, float f21, long l22, long l23, long l24, long l25, float f26, float f27, long l28, long l29, long l30, long l31, float f32, float f33, long l34, long l35, long l36, long l37, float f38, float f39, long l40, long l41, long l42, long l43, float f44, float f45, long l46, long l47, long l48, long l49, float f50, float f51, long l52, long l53, long l54, long l55, float f56, float f57, long l58, long l59, long l60, long l61, float f62, float f63){	return aCallback090(l0, l1, f2, f3, l4, l5, l6, l7, f8, f9, l10, l11, l12, l13, f14, f15, l16, l17, l18, l19, f20, f21, l22, l23, l24, l25, f26, f27, l28, l29, l30, l31, f32, f33, l34, l35, l36, l37, f38, f39, l40, l41, l42, l43, f44, f45, l46, l47, l48, l49, f50, f51, l52, l53, l54, l55, f56, f57, l58, l59, l60, l61, f62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback091	&lt;test&gt;	| result invoked aCallback091 |		invoked := false.	aCallback091 := CCallback		do:		[:f0 :f1 :d2 :d3 :l4 :l5 :f6 :f7 :d8 :d9 :l10 :l11 :f12 :f13 :d14 :d15 :l16 :l17 :f18 :f19 :d20 :d21 :l22 :l23 :f24 :f25 :d26 :d27 :l28 :l29 :f30 :f31 :d32 :d33 :l34 :l35 :f36 :f37 :d38 :d39 :l40 :l41 :f42 :f43 :d44 :d45 :l46 :l47 :f48 :f49 :d50 :d51 :l52 :l53 :f54 :f55 :d56 :d57 :l58 :l59 :f60 :f61 :d62 :d63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		d2 = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		d3 = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		d8 = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		d9 = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		d14 = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		d15 = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		d20 = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		d21 = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		d26 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		d27 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		d32 = 3.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		d33 = 3.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		d38 = 3.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		d39 = 4.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		d44 = 4.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		d45 = 4.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		d50 = 5.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		d51 = 5.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		d56 = 5.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		d57 = 5.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		d62 = 6.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		d63 = 6.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback091 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback091.	result := self interface testCallback091: aCallback091 w: 123.456 w: 124.456 w: 3.2345678901235d8 w: 4.2345678901235d8 w: -1234567886 w: -1234567885 w: 129.456 w: 130.456 w: 9.2345678901235d8 w: 1.0234567890124d9 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 1.5234567890123d9 w: 1.6234567890124d9 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: 2.1234567890124d9 w: 2.2234567890124d9 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 2.7234567890124d9 w: 2.8234567890124d9 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 3.3234567890124d9 w: 3.4234567890124d9 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 3.9234567890124d9 w: 4.0234567890123d9 w: -1234567850 w: -1234567849 w: 165.456 w: 166.456 w: 4.5234567890123d9 w: 4.6234567890123d9 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 5.1234567890123d9 w: 5.2234567890123d9 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: 5.7234567890123d9 w: 5.8234567890123d9 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 6.3234567890123d9 w: 6.4234567890124d9.	invoked ifFalse: [self message: 'testCallback091 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback091 failed']"floattestCallback091(Callback091 aCallback091, float f0, float f1, double d2, double d3, long l4, long l5, float f6, float f7, double d8, double d9, long l10, long l11, float f12, float f13, double d14, double d15, long l16, long l17, float f18, float f19, double d20, double d21, long l22, long l23, float f24, float f25, double d26, double d27, long l28, long l29, float f30, float f31, double d32, double d33, long l34, long l35, float f36, float f37, double d38, double d39, long l40, long l41, float f42, float f43, double d44, double d45, long l46, long l47, float f48, float f49, double d50, double d51, long l52, long l53, float f54, float f55, double d56, double d57, long l58, long l59, float f60, float f61, double d62, double d63){	return aCallback091(f0, f1, d2, d3, l4, l5, f6, f7, d8, d9, l10, l11, f12, f13, d14, d15, l16, l17, f18, f19, d20, d21, l22, l23, f24, f25, d26, d27, l28, l29, f30, f31, d32, d33, l34, l35, f36, f37, d38, d39, l40, l41, f42, f43, d44, d45, l46, l47, f48, f49, d50, d51, l52, l53, f54, f55, d56, d57, l58, l59, f60, f61, d62, d63);}"</body><body package="DLLCC Test Suite">runTestCallback092	&lt;test&gt;	| result invoked aCallback092 |		invoked := false.	aCallback092 := CCallback		do:		[:l0 :l1 :f2 :f3 :d4 :d5 :l6 :l7 :f8 :f9 :d10 :d11 :l12 :l13 :f14 :f15 :d16 :d17 :l18 :l19 :f20 :f21 :d22 :d23 :l24 :l25 :f26 :f27 :d28 :d29 :l30 :l31 :f32 :f33 :d34 :d35 :l36 :l37 :f38 :f39 :d40 :d41 :l42 :l43 :f44 :f45 :d46 :d47 :l48 :l49 :f50 :f51 :d52 :d53 :l54 :l55 :f56 :f57 :d58 :d59 :l60 :l61 :f62 :f63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		d4 = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		d5 = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		d10 = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		d11 = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		d16 = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		d17 = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		d22 = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		d23 = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		d28 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		d29 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		d34 = 3.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		d35 = 3.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		d40 = 4.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		d41 = 4.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		d46 = 4.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		d47 = 4.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		d52 = 5.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		d53 = 5.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		d58 = 5.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		d59 = 6.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback092 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback092.	result := self interface testCallback092: aCallback092 w: -1234567890 w: -1234567889 w: 125.456 w: 126.456 w: 5.2345678901235d8 w: 6.2345678901235d8 w: -1234567884 w: -1234567883 w: 131.456 w: 132.456 w: 1.1234567890124d9 w: 1.2234567890123d9 w: -1234567878 w: -1234567877 w: 137.456 w: 138.456 w: 1.7234567890123d9 w: 1.8234567890124d9 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 2.3234567890124d9 w: 2.4234567890124d9 w: -1234567866 w: -1234567865 w: 149.456 w: 150.456 w: 2.9234567890124d9 w: 3.0234567890124d9 w: -1234567860 w: -1234567859 w: 155.456 w: 156.456 w: 3.5234567890124d9 w: 3.6234567890124d9 w: -1234567854 w: -1234567853 w: 161.456 w: 162.456 w: 4.1234567890123d9 w: 4.2234567890123d9 w: -1234567848 w: -1234567847 w: 167.456 w: 168.456 w: 4.7234567890123d9 w: 4.8234567890123d9 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: 5.3234567890123d9 w: 5.4234567890124d9 w: -1234567836 w: -1234567835 w: 179.456 w: 180.456 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: 185.456 w: 186.456.	invoked ifFalse: [self message: 'testCallback092 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback092 failed']"longtestCallback092(Callback092 aCallback092, long l0, long l1, float f2, float f3, double d4, double d5, long l6, long l7, float f8, float f9, double d10, double d11, long l12, long l13, float f14, float f15, double d16, double d17, long l18, long l19, float f20, float f21, double d22, double d23, long l24, long l25, float f26, float f27, double d28, double d29, long l30, long l31, float f32, float f33, double d34, double d35, long l36, long l37, float f38, float f39, double d40, double d41, long l42, long l43, float f44, float f45, double d46, double d47, long l48, long l49, float f50, float f51, double d52, double d53, long l54, long l55, float f56, float f57, double d58, double d59, long l60, long l61, float f62, float f63){	return aCallback092(l0, l1, f2, f3, d4, d5, l6, l7, f8, f9, d10, d11, l12, l13, f14, f15, d16, d17, l18, l19, f20, f21, d22, d23, l24, l25, f26, f27, d28, d29, l30, l31, f32, f33, d34, d35, l36, l37, f38, f39, d40, d41, l42, l43, f44, f45, d46, d47, l48, l49, f50, f51, d52, d53, l54, l55, f56, f57, d58, d59, l60, l61, f62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback093	&lt;test&gt;	| result invoked aCallback093 |		invoked := false.	aCallback093 := CCallback		do:		[:d0 :d1 :l2 :l3 :f4 :f5 :d6 :d7 :l8 :l9 :f10 :f11 :d12 :d13 :l14 :l15 :f16 :f17 :d18 :d19 :l20 :l21 :f22 :f23 :d24 :d25 :l26 :l27 :f28 :f29 :d30 :d31 :l32 :l33 :f34 :f35 :d36 :d37 :l38 :l39 :f40 :f41 :d42 :d43 :l44 :l45 :f46 :f47 :d48 :d49 :l50 :l51 :f52 :f53 :d54 :d55 :l56 :l57 :f58 :f59 :d60 :d61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		d0 = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		d1 = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		d6 = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		d7 = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		d12 = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		d13 = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		d18 = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		d19 = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		d24 = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		d25 = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		d30 = 3.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		d31 = 3.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		d36 = 3.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		d37 = 3.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		d42 = 4.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		d43 = 4.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		d48 = 4.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		d49 = 5.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		d54 = 5.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		d55 = 5.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		d60 = 6.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		d61 = 6.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback093 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback093.	result := self interface testCallback093: aCallback093 w: 1.2345678901235d8 w: 2.2345678901235d8 w: -1234567888 w: -1234567887 w: 127.456 w: 128.456 w: 7.2345678901235d8 w: 8.2345678901235d8 w: -1234567882 w: -1234567881 w: 133.456 w: 134.456 w: 1.3234567890124d9 w: 1.4234567890124d9 w: -1234567876 w: -1234567875 w: 139.456 w: 140.456 w: 1.9234567890124d9 w: 2.0234567890124d9 w: -1234567870 w: -1234567869 w: 145.456 w: 146.456 w: 2.5234567890124d9 w: 2.6234567890124d9 w: -1234567864 w: -1234567863 w: 151.456 w: 152.456 w: 3.1234567890124d9 w: 3.2234567890124d9 w: -1234567858 w: -1234567857 w: 157.456 w: 158.456 w: 3.7234567890124d9 w: 3.8234567890124d9 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 4.3234567890123d9 w: 4.4234567890124d9 w: -1234567846 w: -1234567845 w: 169.456 w: 170.456 w: 4.9234567890124d9 w: 5.0234567890123d9 w: -1234567840 w: -1234567839 w: 175.456 w: 176.456 w: 5.5234567890123d9 w: 5.6234567890123d9 w: -1234567834 w: -1234567833 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback093 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback093 failed']"doubletestCallback093(Callback093 aCallback093, double d0, double d1, long l2, long l3, float f4, float f5, double d6, double d7, long l8, long l9, float f10, float f11, double d12, double d13, long l14, long l15, float f16, float f17, double d18, double d19, long l20, long l21, float f22, float f23, double d24, double d25, long l26, long l27, float f28, float f29, double d30, double d31, long l32, long l33, float f34, float f35, double d36, double d37, long l38, long l39, float f40, float f41, double d42, double d43, long l44, long l45, float f46, float f47, double d48, double d49, long l50, long l51, float f52, float f53, double d54, double d55, long l56, long l57, float f58, float f59, double d60, double d61, long l62, long l63){	return aCallback093(d0, d1, l2, l3, f4, f5, d6, d7, l8, l9, f10, f11, d12, d13, l14, l15, f16, f17, d18, d19, l20, l21, f22, f23, d24, d25, l26, l27, f28, f29, d30, d31, l32, l33, f34, f35, d36, d37, l38, l39, f40, f41, d42, d43, l44, l45, f46, f47, d48, d49, l50, l51, f52, f53, d54, d55, l56, l57, f58, f59, d60, d61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback094	&lt;test&gt;	| result invoked aCallback094 |		invoked := false.	aCallback094 := CCallback		do:		[:f0 :f1 :f2 :l3 :l4 :l5 :l6 :l7 :l8 :f9 :f10 :f11 :l12 :l13 :l14 :l15 :l16 :l17 :f18 :f19 :f20 :l21 :l22 :l23 :l24 :l25 :l26 :f27 :f28 :f29 :l30 :l31 :l32 :l33 :l34 :l35 :f36 :f37 :f38 :l39 :l40 :l41 :l42 :l43 :l44 :f45 :f46 :f47 :l48 :l49 :l50 :l51 :l52 :l53 :f54 :f55 :f56 :l57 :l58 :l59 :l60 :l61 :l62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback094 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback094.	result := self interface testCallback094: aCallback094 w: 123.456 w: 124.456 w: 125.456 w: -1234567887 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: 132.456 w: 133.456 w: 134.456 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: 143.456 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: 150.456 w: 151.456 w: 152.456 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: -1234567851 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: -1234567842 w: -1234567841 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: 179.456 w: -1234567833 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: -1234567828 w: 186.456.	invoked ifFalse: [self message: 'testCallback094 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback094 failed']"floattestCallback094(Callback094 aCallback094, float f0, float f1, float f2, long l3, long l4, long l5, long l6, long l7, long l8, float f9, float f10, float f11, long l12, long l13, long l14, long l15, long l16, long l17, float f18, float f19, float f20, long l21, long l22, long l23, long l24, long l25, long l26, float f27, float f28, float f29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, long l48, long l49, long l50, long l51, long l52, long l53, float f54, float f55, float f56, long l57, long l58, long l59, long l60, long l61, long l62, float f63){	return aCallback094(f0, f1, f2, l3, l4, l5, l6, l7, l8, f9, f10, f11, l12, l13, l14, l15, l16, l17, f18, f19, f20, l21, l22, l23, l24, l25, l26, f27, f28, f29, l30, l31, l32, l33, l34, l35, f36, f37, f38, l39, l40, l41, l42, l43, l44, f45, f46, f47, l48, l49, l50, l51, l52, l53, f54, f55, f56, l57, l58, l59, l60, l61, l62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback095	&lt;test&gt;	| result invoked aCallback095 |		invoked := false.	aCallback095 := CCallback		do:		[:l0 :l1 :l2 :f3 :f4 :f5 :l6 :l7 :l8 :l9 :l10 :l11 :f12 :f13 :f14 :l15 :l16 :l17 :l18 :l19 :l20 :f21 :f22 :f23 :l24 :l25 :l26 :l27 :l28 :l29 :f30 :f31 :f32 :l33 :l34 :l35 :l36 :l37 :l38 :f39 :f40 :f41 :l42 :l43 :l44 :l45 :l46 :l47 :f48 :f49 :f50 :l51 :l52 :l53 :l54 :l55 :l56 :f57 :f58 :f59 :l60 :l61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback095 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback095.	result := self interface testCallback095: aCallback095 w: -1234567890 w: -1234567889 w: -1234567888 w: 126.456 w: 127.456 w: 128.456 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: -1234567870 w: 144.456 w: 145.456 w: 146.456 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: -1234567857 w: -1234567856 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: 162.456 w: 163.456 w: 164.456 w: -1234567848 w: -1234567847 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: -1234567839 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: -1234567834 w: 180.456 w: 181.456 w: 182.456 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback095 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback095 failed']"longtestCallback095(Callback095 aCallback095, long l0, long l1, long l2, float f3, float f4, float f5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, long l15, long l16, long l17, long l18, long l19, long l20, float f21, float f22, float f23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, long l33, long l34, long l35, long l36, long l37, long l38, float f39, float f40, float f41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, long l51, long l52, long l53, long l54, long l55, long l56, float f57, float f58, float f59, long l60, long l61, long l62, long l63){	return aCallback095(l0, l1, l2, f3, f4, f5, l6, l7, l8, l9, l10, l11, f12, f13, f14, l15, l16, l17, l18, l19, l20, f21, f22, f23, l24, l25, l26, l27, l28, l29, f30, f31, f32, l33, l34, l35, l36, l37, l38, f39, f40, f41, l42, l43, l44, l45, l46, l47, f48, f49, f50, l51, l52, l53, l54, l55, l56, f57, f58, f59, l60, l61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback096	&lt;test&gt;	| result invoked aCallback096 |		invoked := false.	aCallback096 := CCallback		do:		[:f0 :f1 :f2 :d3 :d4 :d5 :l6 :l7 :l8 :f9 :f10 :f11 :d12 :d13 :d14 :l15 :l16 :l17 :f18 :f19 :f20 :d21 :d22 :d23 :l24 :l25 :l26 :f27 :f28 :f29 :d30 :d31 :d32 :l33 :l34 :l35 :f36 :f37 :f38 :d39 :d40 :d41 :l42 :l43 :l44 :f45 :f46 :f47 :d48 :d49 :d50 :l51 :l52 :l53 :f54 :f55 :f56 :d57 :d58 :d59 :l60 :l61 :l62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		d3 = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		d4 = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		d5 = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		d12 = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		d13 = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		d14 = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		d21 = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		d22 = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		d23 = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		d30 = 3.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		d31 = 3.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		d32 = 3.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		d39 = 4.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		d40 = 4.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		d41 = 4.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		d48 = 4.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		d49 = 5.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		d50 = 5.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		d57 = 5.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		d58 = 5.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		d59 = 6.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback096 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback096.	result := self interface testCallback096: aCallback096 w: 123.456 w: 124.456 w: 125.456 w: 4.2345678901235d8 w: 5.2345678901235d8 w: 6.2345678901235d8 w: -1234567884 w: -1234567883 w: -1234567882 w: 132.456 w: 133.456 w: 134.456 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: -1234567875 w: -1234567874 w: -1234567873 w: 141.456 w: 142.456 w: 143.456 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: -1234567866 w: -1234567865 w: -1234567864 w: 150.456 w: 151.456 w: 152.456 w: 3.1234567890124d9 w: 3.2234567890124d9 w: 3.3234567890124d9 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: 4.0234567890123d9 w: 4.1234567890123d9 w: 4.2234567890123d9 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: 4.9234567890124d9 w: 5.0234567890123d9 w: 5.1234567890123d9 w: -1234567839 w: -1234567838 w: -1234567837 w: 177.456 w: 178.456 w: 179.456 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: -1234567828 w: 186.456.	invoked ifFalse: [self message: 'testCallback096 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback096 failed']"floattestCallback096(Callback096 aCallback096, float f0, float f1, float f2, double d3, double d4, double d5, long l6, long l7, long l8, float f9, float f10, float f11, double d12, double d13, double d14, long l15, long l16, long l17, float f18, float f19, float f20, double d21, double d22, double d23, long l24, long l25, long l26, float f27, float f28, float f29, double d30, double d31, double d32, long l33, long l34, long l35, float f36, float f37, float f38, double d39, double d40, double d41, long l42, long l43, long l44, float f45, float f46, float f47, double d48, double d49, double d50, long l51, long l52, long l53, float f54, float f55, float f56, double d57, double d58, double d59, long l60, long l61, long l62, float f63){	return aCallback096(f0, f1, f2, d3, d4, d5, l6, l7, l8, f9, f10, f11, d12, d13, d14, l15, l16, l17, f18, f19, f20, d21, d22, d23, l24, l25, l26, f27, f28, f29, d30, d31, d32, l33, l34, l35, f36, f37, f38, d39, d40, d41, l42, l43, l44, f45, f46, f47, d48, d49, d50, l51, l52, l53, f54, f55, f56, d57, d58, d59, l60, l61, l62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback097	&lt;test&gt;	| result invoked aCallback097 |		invoked := false.	aCallback097 := CCallback		do:		[:l0 :l1 :l2 :f3 :f4 :f5 :d6 :d7 :d8 :l9 :l10 :l11 :f12 :f13 :f14 :d15 :d16 :d17 :l18 :l19 :l20 :f21 :f22 :f23 :d24 :d25 :d26 :l27 :l28 :l29 :f30 :f31 :f32 :d33 :d34 :d35 :l36 :l37 :l38 :f39 :f40 :f41 :d42 :d43 :d44 :l45 :l46 :l47 :f48 :f49 :f50 :d51 :d52 :d53 :l54 :l55 :l56 :f57 :f58 :f59 :d60 :d61 :d62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		d6 = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		d7 = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		d8 = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		d15 = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		d16 = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		d17 = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		d24 = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		d25 = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		d26 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		d33 = 3.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		d34 = 3.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		d35 = 3.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		d42 = 4.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		d43 = 4.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		d44 = 4.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		d51 = 5.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		d52 = 5.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		d53 = 5.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		d60 = 6.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		d61 = 6.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		d62 = 6.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback097 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback097.	result := self interface testCallback097: aCallback097 w: -1234567890 w: -1234567889 w: -1234567888 w: 126.456 w: 127.456 w: 128.456 w: 7.2345678901235d8 w: 8.2345678901235d8 w: 9.2345678901235d8 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: 1.6234567890124d9 w: 1.7234567890123d9 w: 1.8234567890124d9 w: -1234567872 w: -1234567871 w: -1234567870 w: 144.456 w: 145.456 w: 146.456 w: 2.5234567890124d9 w: 2.6234567890124d9 w: 2.7234567890124d9 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: 3.4234567890124d9 w: 3.5234567890124d9 w: 3.6234567890124d9 w: -1234567854 w: -1234567853 w: -1234567852 w: 162.456 w: 163.456 w: 164.456 w: 4.3234567890123d9 w: 4.4234567890124d9 w: 4.5234567890123d9 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: 5.2234567890123d9 w: 5.3234567890123d9 w: 5.4234567890124d9 w: -1234567836 w: -1234567835 w: -1234567834 w: 180.456 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: -1234567827.	invoked ifFalse: [self message: 'testCallback097 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback097 failed']"longtestCallback097(Callback097 aCallback097, long l0, long l1, long l2, float f3, float f4, float f5, double d6, double d7, double d8, long l9, long l10, long l11, float f12, float f13, float f14, double d15, double d16, double d17, long l18, long l19, long l20, float f21, float f22, float f23, double d24, double d25, double d26, long l27, long l28, long l29, float f30, float f31, float f32, double d33, double d34, double d35, long l36, long l37, long l38, float f39, float f40, float f41, double d42, double d43, double d44, long l45, long l46, long l47, float f48, float f49, float f50, double d51, double d52, double d53, long l54, long l55, long l56, float f57, float f58, float f59, double d60, double d61, double d62, long l63){	return aCallback097(l0, l1, l2, f3, f4, f5, d6, d7, d8, l9, l10, l11, f12, f13, f14, d15, d16, d17, l18, l19, l20, f21, f22, f23, d24, d25, d26, l27, l28, l29, f30, f31, f32, d33, d34, d35, l36, l37, l38, f39, f40, f41, d42, d43, d44, l45, l46, l47, f48, f49, f50, d51, d52, d53, l54, l55, l56, f57, f58, f59, d60, d61, d62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback098	&lt;test&gt;	| result invoked aCallback098 |		invoked := false.	aCallback098 := CCallback		do:		[:d0 :d1 :d2 :l3 :l4 :l5 :f6 :f7 :f8 :d9 :d10 :d11 :l12 :l13 :l14 :f15 :f16 :f17 :d18 :d19 :d20 :l21 :l22 :l23 :f24 :f25 :f26 :d27 :d28 :d29 :l30 :l31 :l32 :f33 :f34 :f35 :d36 :d37 :d38 :l39 :l40 :l41 :f42 :f43 :f44 :d45 :d46 :d47 :l48 :l49 :l50 :f51 :f52 :f53 :d54 :d55 :d56 :l57 :l58 :l59 :f60 :f61 :f62 :d63| | ok |		 invoked := true.		 ok := 0.		d0 = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		d1 = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		d2 = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		d9 = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		d10 = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		d11 = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		d18 = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		d19 = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		d20 = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		d27 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		d28 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		d29 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		d36 = 3.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		d37 = 3.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		d38 = 3.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		d45 = 4.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		d46 = 4.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		d47 = 4.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		d54 = 5.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		d55 = 5.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		d56 = 5.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		d63 = 6.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback098 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback098.	result := self interface testCallback098: aCallback098 w: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: -1234567887 w: -1234567886 w: -1234567885 w: 129.456 w: 130.456 w: 131.456 w: 1.0234567890124d9 w: 1.1234567890124d9 w: 1.2234567890123d9 w: -1234567878 w: -1234567877 w: -1234567876 w: 138.456 w: 139.456 w: 140.456 w: 1.9234567890124d9 w: 2.0234567890124d9 w: 2.1234567890124d9 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 149.456 w: 2.8234567890124d9 w: 2.9234567890124d9 w: 3.0234567890124d9 w: -1234567860 w: -1234567859 w: -1234567858 w: 156.456 w: 157.456 w: 158.456 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: -1234567851 w: -1234567850 w: -1234567849 w: 165.456 w: 166.456 w: 167.456 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: -1234567842 w: -1234567841 w: -1234567840 w: 174.456 w: 175.456 w: 176.456 w: 5.5234567890123d9 w: 5.6234567890123d9 w: 5.7234567890123d9 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 6.4234567890124d9.	invoked ifFalse: [self message: 'testCallback098 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback098 failed']"doubletestCallback098(Callback098 aCallback098, double d0, double d1, double d2, long l3, long l4, long l5, float f6, float f7, float f8, double d9, double d10, double d11, long l12, long l13, long l14, float f15, float f16, float f17, double d18, double d19, double d20, long l21, long l22, long l23, float f24, float f25, float f26, double d27, double d28, double d29, long l30, long l31, long l32, float f33, float f34, float f35, double d36, double d37, double d38, long l39, long l40, long l41, float f42, float f43, float f44, double d45, double d46, double d47, long l48, long l49, long l50, float f51, float f52, float f53, double d54, double d55, double d56, long l57, long l58, long l59, float f60, float f61, float f62, double d63){	return aCallback098(d0, d1, d2, l3, l4, l5, f6, f7, f8, d9, d10, d11, l12, l13, l14, f15, f16, f17, d18, d19, d20, l21, l22, l23, f24, f25, f26, d27, d28, d29, l30, l31, l32, f33, f34, f35, d36, d37, d38, l39, l40, l41, f42, f43, f44, d45, d46, d47, l48, l49, l50, f51, f52, f53, d54, d55, d56, l57, l58, l59, f60, f61, f62, d63);}"</body><body package="DLLCC Test Suite">runTestCallback099	&lt;test&gt;	| result invoked aCallback099 |		invoked := false.	aCallback099 := CCallback		do:		[:f0 :f1 :f2 :f3 :l4 :l5 :l6 :l7 :l8 :l9 :l10 :l11 :f12 :f13 :f14 :f15 :l16 :l17 :l18 :l19 :l20 :l21 :l22 :l23 :f24 :f25 :f26 :f27 :l28 :l29 :l30 :l31 :l32 :l33 :l34 :l35 :f36 :f37 :f38 :f39 :l40 :l41 :l42 :l43 :l44 :l45 :l46 :l47 :f48 :f49 :f50 :f51 :l52 :l53 :l54 :l55 :l56 :l57 :l58 :l59 :f60 :f61 :f62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback099 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback099.	result := self interface testCallback099: aCallback099 w: 123.456 w: 124.456 w: 125.456 w: 126.456 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: 138.456 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 149.456 w: 150.456 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: 174.456 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	invoked ifFalse: [self message: 'testCallback099 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback099 failed']"floattestCallback099(Callback099 aCallback099, float f0, float f1, float f2, float f3, long l4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, long l16, long l17, long l18, long l19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	return aCallback099(f0, f1, f2, f3, l4, l5, l6, l7, l8, l9, l10, l11, f12, f13, f14, f15, l16, l17, l18, l19, l20, l21, l22, l23, f24, f25, f26, f27, l28, l29, l30, l31, l32, l33, l34, l35, f36, f37, f38, f39, l40, l41, l42, l43, l44, l45, l46, l47, f48, f49, f50, f51, l52, l53, l54, l55, l56, l57, l58, l59, f60, f61, f62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback100	&lt;test&gt;	| result invoked aCallback100 |		invoked := false.	aCallback100 := CCallback		do:		[:l0 :l1 :l2 :l3 :f4 :f5 :f6 :f7 :l8 :l9 :l10 :l11 :l12 :l13 :l14 :l15 :f16 :f17 :f18 :f19 :l20 :l21 :l22 :l23 :l24 :l25 :l26 :l27 :f28 :f29 :f30 :f31 :l32 :l33 :l34 :l35 :l36 :l37 :l38 :l39 :f40 :f41 :f42 :f43 :l44 :l45 :l46 :l47 :l48 :l49 :l50 :l51 :f52 :f53 :f54 :f55 :l56 :l57 :l58 :l59 :l60 :l61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback100 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback100.	result := self interface testCallback100: aCallback100 w: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: 127.456 w: 128.456 w: 129.456 w: 130.456 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: 151.456 w: 152.456 w: 153.456 w: 154.456 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: -1234567840 w: -1234567839 w: 175.456 w: 176.456 w: 177.456 w: 178.456 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback100 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback100 failed']"longtestCallback100(Callback100 aCallback100, long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, long l32, long l33, long l34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, long l44, long l45, long l46, long l47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63){	return aCallback100(l0, l1, l2, l3, f4, f5, f6, f7, l8, l9, l10, l11, l12, l13, l14, l15, f16, f17, f18, f19, l20, l21, l22, l23, l24, l25, l26, l27, f28, f29, f30, f31, l32, l33, l34, l35, l36, l37, l38, l39, f40, f41, f42, f43, l44, l45, l46, l47, l48, l49, l50, l51, f52, f53, f54, f55, l56, l57, l58, l59, l60, l61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback101	&lt;test&gt;	| result invoked aCallback101 |		invoked := false.	aCallback101 := CCallback		do:		[:f0 :f1 :f2 :f3 :d4 :d5 :d6 :d7 :l8 :l9 :l10 :l11 :f12 :f13 :f14 :f15 :d16 :d17 :d18 :d19 :l20 :l21 :l22 :l23 :f24 :f25 :f26 :f27 :d28 :d29 :d30 :d31 :l32 :l33 :l34 :l35 :f36 :f37 :f38 :f39 :d40 :d41 :d42 :d43 :l44 :l45 :l46 :l47 :f48 :f49 :f50 :f51 :d52 :d53 :d54 :d55 :l56 :l57 :l58 :l59 :f60 :f61 :f62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		d4 = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		d5 = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		d6 = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		d7 = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		d16 = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		d17 = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		d18 = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		d19 = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		d28 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		d29 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		d30 = 3.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		d31 = 3.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		d40 = 4.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		d41 = 4.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		d42 = 4.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		d43 = 4.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		d52 = 5.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		d53 = 5.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		d54 = 5.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		d55 = 5.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback101 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback101.	result := self interface testCallback101: aCallback101 w: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 5.2345678901235d8 w: 6.2345678901235d8 w: 7.2345678901235d8 w: 8.2345678901235d8 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: 135.456 w: 136.456 w: 137.456 w: 138.456 w: 1.7234567890123d9 w: 1.8234567890124d9 w: 1.9234567890124d9 w: 2.0234567890124d9 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: 147.456 w: 148.456 w: 149.456 w: 150.456 w: 2.9234567890124d9 w: 3.0234567890124d9 w: 3.1234567890124d9 w: 3.2234567890124d9 w: -1234567858 w: -1234567857 w: -1234567856 w: -1234567855 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: 4.1234567890123d9 w: 4.2234567890123d9 w: 4.3234567890123d9 w: 4.4234567890124d9 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: 171.456 w: 172.456 w: 173.456 w: 174.456 w: 5.3234567890123d9 w: 5.4234567890124d9 w: 5.5234567890123d9 w: 5.6234567890123d9 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	invoked ifFalse: [self message: 'testCallback101 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback101 failed']"floattestCallback101(Callback101 aCallback101, float f0, float f1, float f2, float f3, double d4, double d5, double d6, double d7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, double d28, double d29, double d30, double d31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, double d52, double d53, double d54, double d55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	return aCallback101(f0, f1, f2, f3, d4, d5, d6, d7, l8, l9, l10, l11, f12, f13, f14, f15, d16, d17, d18, d19, l20, l21, l22, l23, f24, f25, f26, f27, d28, d29, d30, d31, l32, l33, l34, l35, f36, f37, f38, f39, d40, d41, d42, d43, l44, l45, l46, l47, f48, f49, f50, f51, d52, d53, d54, d55, l56, l57, l58, l59, f60, f61, f62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback102	&lt;test&gt;	| result invoked aCallback102 |		invoked := false.	aCallback102 := CCallback		do:		[:l0 :l1 :l2 :l3 :f4 :f5 :f6 :f7 :d8 :d9 :d10 :d11 :l12 :l13 :l14 :l15 :f16 :f17 :f18 :f19 :d20 :d21 :d22 :d23 :l24 :l25 :l26 :l27 :f28 :f29 :f30 :f31 :d32 :d33 :d34 :d35 :l36 :l37 :l38 :l39 :f40 :f41 :f42 :f43 :d44 :d45 :d46 :d47 :l48 :l49 :l50 :l51 :f52 :f53 :f54 :f55 :d56 :d57 :d58 :d59 :l60 :l61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		d8 = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		d9 = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		d10 = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		d11 = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		d20 = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		d21 = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		d22 = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		d23 = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		d32 = 3.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		d33 = 3.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		d34 = 3.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		d35 = 3.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		d44 = 4.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		d45 = 4.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		d46 = 4.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		d47 = 4.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		d56 = 5.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		d57 = 5.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		d58 = 5.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		d59 = 6.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback102 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback102.	result := self interface testCallback102: aCallback102 w: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: 127.456 w: 128.456 w: 129.456 w: 130.456 w: 9.2345678901235d8 w: 1.0234567890124d9 w: 1.1234567890124d9 w: 1.2234567890123d9 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: 2.1234567890124d9 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: 151.456 w: 152.456 w: 153.456 w: 154.456 w: 3.3234567890124d9 w: 3.4234567890124d9 w: 3.5234567890124d9 w: 3.6234567890124d9 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: 4.5234567890123d9 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: -1234567842 w: -1234567841 w: -1234567840 w: -1234567839 w: 175.456 w: 176.456 w: 177.456 w: 178.456 w: 5.7234567890123d9 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback102 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback102 failed']"longtestCallback102(Callback102 aCallback102, long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, double d8, double d9, double d10, double d11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, double d32, double d33, double d34, double d35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, double d44, double d45, double d46, double d47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63){	return aCallback102(l0, l1, l2, l3, f4, f5, f6, f7, d8, d9, d10, d11, l12, l13, l14, l15, f16, f17, f18, f19, d20, d21, d22, d23, l24, l25, l26, l27, f28, f29, f30, f31, d32, d33, d34, d35, l36, l37, l38, l39, f40, f41, f42, f43, d44, d45, d46, d47, l48, l49, l50, l51, f52, f53, f54, f55, d56, d57, d58, d59, l60, l61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback103	&lt;test&gt;	| result invoked aCallback103 |		invoked := false.	aCallback103 := CCallback		do:		[:d0 :d1 :d2 :d3 :l4 :l5 :l6 :l7 :f8 :f9 :f10 :f11 :d12 :d13 :d14 :d15 :l16 :l17 :l18 :l19 :f20 :f21 :f22 :f23 :d24 :d25 :d26 :d27 :l28 :l29 :l30 :l31 :f32 :f33 :f34 :f35 :d36 :d37 :d38 :d39 :l40 :l41 :l42 :l43 :f44 :f45 :f46 :f47 :d48 :d49 :d50 :d51 :l52 :l53 :l54 :l55 :f56 :f57 :f58 :f59 :d60 :d61 :d62 :d63| | ok |		 invoked := true.		 ok := 0.		d0 = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		d1 = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		d2 = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		d3 = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		d12 = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		d13 = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		d14 = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		d15 = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		d24 = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		d25 = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		d26 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		d27 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		d36 = 3.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		d37 = 3.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		d38 = 3.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		d39 = 4.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		d48 = 4.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		d49 = 5.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		d50 = 5.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		d51 = 5.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		d60 = 6.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		d61 = 6.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		d62 = 6.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		d63 = 6.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback103 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback103.	result := self interface testCallback103: aCallback103 w: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: 4.2345678901235d8 w: -1234567886 w: -1234567885 w: -1234567884 w: -1234567883 w: 131.456 w: 132.456 w: 133.456 w: 134.456 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: 1.6234567890124d9 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 2.5234567890124d9 w: 2.6234567890124d9 w: 2.7234567890124d9 w: 2.8234567890124d9 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: 155.456 w: 156.456 w: 157.456 w: 158.456 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: 4.0234567890123d9 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: 167.456 w: 168.456 w: 169.456 w: 170.456 w: 4.9234567890124d9 w: 5.0234567890123d9 w: 5.1234567890123d9 w: 5.2234567890123d9 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: 179.456 w: 180.456 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: 6.4234567890124d9.	invoked ifFalse: [self message: 'testCallback103 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback103 failed']"doubletestCallback103(Callback103 aCallback103, double d0, double d1, double d2, double d3, long l4, long l5, long l6, long l7, float f8, float f9, float f10, float f11, double d12, double d13, double d14, double d15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, double d24, double d25, double d26, double d27, long l28, long l29, long l30, long l31, float f32, float f33, float f34, float f35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, float f44, float f45, float f46, float f47, double d48, double d49, double d50, double d51, long l52, long l53, long l54, long l55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63){	return aCallback103(d0, d1, d2, d3, l4, l5, l6, l7, f8, f9, f10, f11, d12, d13, d14, d15, l16, l17, l18, l19, f20, f21, f22, f23, d24, d25, d26, d27, l28, l29, l30, l31, f32, f33, f34, f35, d36, d37, d38, d39, l40, l41, l42, l43, f44, f45, f46, f47, d48, d49, d50, d51, l52, l53, l54, l55, f56, f57, f58, f59, d60, d61, d62, d63);}"</body><body package="DLLCC Test Suite">runTestCallback104	&lt;test&gt;	| result invoked aCallback104 |		invoked := false.	aCallback104 := CCallback		do:		[:f0 :f1 :f2 :f3 :f4 :l5 :l6 :l7 :l8 :l9 :l10 :l11 :l12 :l13 :l14 :f15 :f16 :f17 :f18 :f19 :l20 :l21 :l22 :l23 :l24 :l25 :l26 :l27 :l28 :l29 :f30 :f31 :f32 :f33 :f34 :l35 :l36 :l37 :l38 :l39 :l40 :l41 :l42 :l43 :l44 :f45 :f46 :f47 :f48 :f49 :l50 :l51 :l52 :l53 :l54 :l55 :l56 :l57 :l58 :l59 :f60 :f61 :f62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback104 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback104.	result := self interface testCallback104: aCallback104 w: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 127.456 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: 138.456 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: 156.456 w: 157.456 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: 171.456 w: 172.456 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: -1234567836 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	invoked ifFalse: [self message: 'testCallback104 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback104 failed']"floattestCallback104(Callback104 aCallback104, float f0, float f1, float f2, float f3, float f4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, long l35, long l36, long l37, long l38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, long l50, long l51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	return aCallback104(f0, f1, f2, f3, f4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, f15, f16, f17, f18, f19, l20, l21, l22, l23, l24, l25, l26, l27, l28, l29, f30, f31, f32, f33, f34, l35, l36, l37, l38, l39, l40, l41, l42, l43, l44, f45, f46, f47, f48, f49, l50, l51, l52, l53, l54, l55, l56, l57, l58, l59, f60, f61, f62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback105	&lt;test&gt;	| result invoked aCallback105 |		invoked := false.	aCallback105 := CCallback		do:		[:l0 :l1 :l2 :l3 :l4 :f5 :f6 :f7 :f8 :f9 :l10 :l11 :l12 :l13 :l14 :l15 :l16 :l17 :l18 :l19 :f20 :f21 :f22 :f23 :f24 :l25 :l26 :l27 :l28 :l29 :l30 :l31 :l32 :l33 :l34 :f35 :f36 :f37 :f38 :f39 :l40 :l41 :l42 :l43 :l44 :l45 :l46 :l47 :l48 :l49 :f50 :f51 :f52 :f53 :f54 :l55 :l56 :l57 :l58 :l59 :l60 :l61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback105 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback105.	result := self interface testCallback105: aCallback105 w: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: -1234567886 w: 128.456 w: 129.456 w: 130.456 w: 131.456 w: 132.456 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 147.456 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: 158.456 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: -1234567845 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: 175.456 w: 176.456 w: 177.456 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback105 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback105 failed']"longtestCallback105(Callback105 aCallback105, long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, long l10, long l11, long l12, long l13, long l14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, long l25, long l26, long l27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, long l55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63){	return aCallback105(l0, l1, l2, l3, l4, f5, f6, f7, f8, f9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, f20, f21, f22, f23, f24, l25, l26, l27, l28, l29, l30, l31, l32, l33, l34, f35, f36, f37, f38, f39, l40, l41, l42, l43, l44, l45, l46, l47, l48, l49, f50, f51, f52, f53, f54, l55, l56, l57, l58, l59, l60, l61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback106	&lt;test&gt;	| result invoked aCallback106 |		invoked := false.	aCallback106 := CCallback		do:		[:f0 :f1 :f2 :f3 :f4 :d5 :d6 :d7 :d8 :d9 :l10 :l11 :l12 :l13 :l14 :f15 :f16 :f17 :f18 :f19 :d20 :d21 :d22 :d23 :d24 :l25 :l26 :l27 :l28 :l29 :f30 :f31 :f32 :f33 :f34 :d35 :d36 :d37 :d38 :d39 :l40 :l41 :l42 :l43 :l44 :f45 :f46 :f47 :f48 :f49 :d50 :d51 :d52 :d53 :d54 :l55 :l56 :l57 :l58 :l59 :f60 :f61 :f62 :f63| | ok |		 invoked := true.		 ok := 0.		f0 = 123.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		f1 = 124.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		f2 = 125.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		f3 = 126.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		f4 = 127.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		d5 = 6.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		d6 = 7.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		d7 = 8.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		d8 = 9.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		d9 = 1.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		l10 = -1234567880 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		l11 = -1234567879 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		l12 = -1234567878 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		l13 = -1234567877 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		l14 = -1234567876 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		f15 = 138.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		f16 = 139.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		f17 = 140.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		f18 = 141.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		f19 = 142.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		d20 = 2.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		d21 = 2.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		d22 = 2.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		d23 = 2.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		d24 = 2.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		l25 = -1234567865 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		l26 = -1234567864 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		l27 = -1234567863 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		l28 = -1234567862 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		l29 = -1234567861 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		f30 = 153.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		f31 = 154.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		f32 = 155.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		f33 = 156.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		f34 = 157.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		d35 = 3.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		d36 = 3.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		d37 = 3.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		d38 = 3.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		d39 = 4.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		l40 = -1234567850 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		l41 = -1234567849 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		l42 = -1234567848 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		l43 = -1234567847 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		l44 = -1234567846 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		f45 = 168.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		f46 = 169.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		f47 = 170.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		f48 = 171.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		f49 = 172.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		d50 = 5.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		d51 = 5.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		d52 = 5.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		d53 = 5.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		d54 = 5.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		l55 = -1234567835 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		l56 = -1234567834 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		l57 = -1234567833 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		l58 = -1234567832 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		l59 = -1234567831 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		f60 = 183.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		f61 = 184.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		f62 = 185.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		f63 = 186.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback106 failed in callback (bad parameter)'].		 123.456]		ofType: self interface Callback106.	result := self interface testCallback106: aCallback106 w: 123.456 w: 124.456 w: 125.456 w: 126.456 w: 127.456 w: 6.2345678901235d8 w: 7.2345678901235d8 w: 8.2345678901235d8 w: 9.2345678901235d8 w: 1.0234567890124d9 w: -1234567880 w: -1234567879 w: -1234567878 w: -1234567877 w: -1234567876 w: 138.456 w: 139.456 w: 140.456 w: 141.456 w: 142.456 w: 2.1234567890124d9 w: 2.2234567890124d9 w: 2.3234567890124d9 w: 2.4234567890124d9 w: 2.5234567890124d9 w: -1234567865 w: -1234567864 w: -1234567863 w: -1234567862 w: -1234567861 w: 153.456 w: 154.456 w: 155.456 w: 156.456 w: 157.456 w: 3.6234567890124d9 w: 3.7234567890124d9 w: 3.8234567890124d9 w: 3.9234567890124d9 w: 4.0234567890123d9 w: -1234567850 w: -1234567849 w: -1234567848 w: -1234567847 w: -1234567846 w: 168.456 w: 169.456 w: 170.456 w: 171.456 w: 172.456 w: 5.1234567890123d9 w: 5.2234567890123d9 w: 5.3234567890123d9 w: 5.4234567890124d9 w: 5.5234567890123d9 w: -1234567835 w: -1234567834 w: -1234567833 w: -1234567832 w: -1234567831 w: 183.456 w: 184.456 w: 185.456 w: 186.456.	invoked ifFalse: [self message: 'testCallback106 failed to callback'].	123.456 = result ifFalse:		[self message: 'testCallback106 failed']"floattestCallback106(Callback106 aCallback106, float f0, float f1, float f2, float f3, float f4, double d5, double d6, double d7, double d8, double d9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, double d24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, double d35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, double d50, double d51, double d52, double d53, double d54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63){	return aCallback106(f0, f1, f2, f3, f4, d5, d6, d7, d8, d9, l10, l11, l12, l13, l14, f15, f16, f17, f18, f19, d20, d21, d22, d23, d24, l25, l26, l27, l28, l29, f30, f31, f32, f33, f34, d35, d36, d37, d38, d39, l40, l41, l42, l43, l44, f45, f46, f47, f48, f49, d50, d51, d52, d53, d54, l55, l56, l57, l58, l59, f60, f61, f62, f63);}"</body><body package="DLLCC Test Suite">runTestCallback107	&lt;test&gt;	| result invoked aCallback107 |		invoked := false.	aCallback107 := CCallback		do:		[:l0 :l1 :l2 :l3 :l4 :f5 :f6 :f7 :f8 :f9 :d10 :d11 :d12 :d13 :d14 :l15 :l16 :l17 :l18 :l19 :f20 :f21 :f22 :f23 :f24 :d25 :d26 :d27 :d28 :d29 :l30 :l31 :l32 :l33 :l34 :f35 :f36 :f37 :f38 :f39 :d40 :d41 :d42 :d43 :d44 :l45 :l46 :l47 :l48 :l49 :f50 :f51 :f52 :f53 :f54 :d55 :d56 :d57 :d58 :d59 :l60 :l61 :l62 :l63| | ok |		 invoked := true.		 ok := 0.		l0 = -1234567890 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		l1 = -1234567889 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		l2 = -1234567888 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		l3 = -1234567887 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		l4 = -1234567886 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		f5 = 128.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		f6 = 129.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		f7 = 130.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		f8 = 131.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		f9 = 132.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		d10 = 1.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		d11 = 1.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		d12 = 1.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		d13 = 1.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		d14 = 1.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		l15 = -1234567875 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		l16 = -1234567874 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		l17 = -1234567873 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		l18 = -1234567872 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		l19 = -1234567871 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		f20 = 143.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		f21 = 144.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		f22 = 145.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		f23 = 146.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		f24 = 147.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		d25 = 2.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		d26 = 2.7234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		d27 = 2.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		d28 = 2.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		d29 = 3.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		l30 = -1234567860 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		l31 = -1234567859 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		l32 = -1234567858 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		l33 = -1234567857 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		l34 = -1234567856 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		f35 = 158.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		f36 = 159.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		f37 = 160.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		f38 = 161.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		f39 = 162.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		d40 = 4.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		d41 = 4.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		d42 = 4.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		d43 = 4.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		d44 = 4.5234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		l45 = -1234567845 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		l46 = -1234567844 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		l47 = -1234567843 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		l48 = -1234567842 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		l49 = -1234567841 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		f50 = 173.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		f51 = 174.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		f52 = 175.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		f53 = 176.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		f54 = 177.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		d55 = 5.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		d56 = 5.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		d57 = 5.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		d58 = 5.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		d59 = 6.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		l60 = -1234567830 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		l61 = -1234567829 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		l62 = -1234567828 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		l63 = -1234567827 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback107 failed in callback (bad parameter)'].		 -1234567890]		ofType: self interface Callback107.	result := self interface testCallback107: aCallback107 w: -1234567890 w: -1234567889 w: -1234567888 w: -1234567887 w: -1234567886 w: 128.456 w: 129.456 w: 130.456 w: 131.456 w: 132.456 w: 1.1234567890124d9 w: 1.2234567890123d9 w: 1.3234567890124d9 w: 1.4234567890124d9 w: 1.5234567890123d9 w: -1234567875 w: -1234567874 w: -1234567873 w: -1234567872 w: -1234567871 w: 143.456 w: 144.456 w: 145.456 w: 146.456 w: 147.456 w: 2.6234567890124d9 w: 2.7234567890124d9 w: 2.8234567890124d9 w: 2.9234567890124d9 w: 3.0234567890124d9 w: -1234567860 w: -1234567859 w: -1234567858 w: -1234567857 w: -1234567856 w: 158.456 w: 159.456 w: 160.456 w: 161.456 w: 162.456 w: 4.1234567890123d9 w: 4.2234567890123d9 w: 4.3234567890123d9 w: 4.4234567890124d9 w: 4.5234567890123d9 w: -1234567845 w: -1234567844 w: -1234567843 w: -1234567842 w: -1234567841 w: 173.456 w: 174.456 w: 175.456 w: 176.456 w: 177.456 w: 5.6234567890123d9 w: 5.7234567890123d9 w: 5.8234567890123d9 w: 5.9234567890124d9 w: 6.0234567890123d9 w: -1234567830 w: -1234567829 w: -1234567828 w: -1234567827.	invoked ifFalse: [self message: 'testCallback107 failed to callback'].	-1234567890 = result ifFalse:		[self message: 'testCallback107 failed']"longtestCallback107(Callback107 aCallback107, long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, double d10, double d11, double d12, double d13, double d14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, double d25, double d26, double d27, double d28, double d29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, double d44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, double d55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63){	return aCallback107(l0, l1, l2, l3, l4, f5, f6, f7, f8, f9, d10, d11, d12, d13, d14, l15, l16, l17, l18, l19, f20, f21, f22, f23, f24, d25, d26, d27, d28, d29, l30, l31, l32, l33, l34, f35, f36, f37, f38, f39, d40, d41, d42, d43, d44, l45, l46, l47, l48, l49, f50, f51, f52, f53, f54, d55, d56, d57, d58, d59, l60, l61, l62, l63);}"</body><body package="DLLCC Test Suite">runTestCallback108	&lt;test&gt;	| result invoked aCallback108 |		invoked := false.	aCallback108 := CCallback		do:		[:d0 :d1 :d2 :d3 :d4 :l5 :l6 :l7 :l8 :l9 :f10 :f11 :f12 :f13 :f14 :d15 :d16 :d17 :d18 :d19 :l20 :l21 :l22 :l23 :l24 :f25 :f26 :f27 :f28 :f29 :d30 :d31 :d32 :d33 :d34 :l35 :l36 :l37 :l38 :l39 :f40 :f41 :f42 :f43 :f44 :d45 :d46 :d47 :d48 :d49 :l50 :l51 :l52 :l53 :l54 :f55 :f56 :f57 :f58 :f59 :d60 :d61 :d62 :d63| | ok |		 invoked := true.		 ok := 0.		d0 = 1.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 0)].		d1 = 2.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 1)].		d2 = 3.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 2)].		d3 = 4.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 3)].		d4 = 5.2345678901235d8 ifTrue:			[ok := ok bitOr: (1 bitShift: 4)].		l5 = -1234567885 ifTrue:			[ok := ok bitOr: (1 bitShift: 5)].		l6 = -1234567884 ifTrue:			[ok := ok bitOr: (1 bitShift: 6)].		l7 = -1234567883 ifTrue:			[ok := ok bitOr: (1 bitShift: 7)].		l8 = -1234567882 ifTrue:			[ok := ok bitOr: (1 bitShift: 8)].		l9 = -1234567881 ifTrue:			[ok := ok bitOr: (1 bitShift: 9)].		f10 = 133.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 10)].		f11 = 134.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 11)].		f12 = 135.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 12)].		f13 = 136.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 13)].		f14 = 137.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 14)].		d15 = 1.6234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 15)].		d16 = 1.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 16)].		d17 = 1.8234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 17)].		d18 = 1.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 18)].		d19 = 2.0234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 19)].		l20 = -1234567870 ifTrue:			[ok := ok bitOr: (1 bitShift: 20)].		l21 = -1234567869 ifTrue:			[ok := ok bitOr: (1 bitShift: 21)].		l22 = -1234567868 ifTrue:			[ok := ok bitOr: (1 bitShift: 22)].		l23 = -1234567867 ifTrue:			[ok := ok bitOr: (1 bitShift: 23)].		l24 = -1234567866 ifTrue:			[ok := ok bitOr: (1 bitShift: 24)].		f25 = 148.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 25)].		f26 = 149.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 26)].		f27 = 150.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 27)].		f28 = 151.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 28)].		f29 = 152.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 29)].		d30 = 3.1234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 30)].		d31 = 3.2234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 31)].		d32 = 3.3234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 32)].		d33 = 3.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 33)].		d34 = 3.5234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 34)].		l35 = -1234567855 ifTrue:			[ok := ok bitOr: (1 bitShift: 35)].		l36 = -1234567854 ifTrue:			[ok := ok bitOr: (1 bitShift: 36)].		l37 = -1234567853 ifTrue:			[ok := ok bitOr: (1 bitShift: 37)].		l38 = -1234567852 ifTrue:			[ok := ok bitOr: (1 bitShift: 38)].		l39 = -1234567851 ifTrue:			[ok := ok bitOr: (1 bitShift: 39)].		f40 = 163.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 40)].		f41 = 164.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 41)].		f42 = 165.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 42)].		f43 = 166.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 43)].		f44 = 167.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 44)].		d45 = 4.6234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 45)].		d46 = 4.7234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 46)].		d47 = 4.8234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 47)].		d48 = 4.9234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 48)].		d49 = 5.0234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 49)].		l50 = -1234567840 ifTrue:			[ok := ok bitOr: (1 bitShift: 50)].		l51 = -1234567839 ifTrue:			[ok := ok bitOr: (1 bitShift: 51)].		l52 = -1234567838 ifTrue:			[ok := ok bitOr: (1 bitShift: 52)].		l53 = -1234567837 ifTrue:			[ok := ok bitOr: (1 bitShift: 53)].		l54 = -1234567836 ifTrue:			[ok := ok bitOr: (1 bitShift: 54)].		f55 = 178.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 55)].		f56 = 179.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 56)].		f57 = 180.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 57)].		f58 = 181.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 58)].		f59 = 182.456 ifTrue:			[ok := ok bitOr: (1 bitShift: 59)].		d60 = 6.1234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 60)].		d61 = 6.2234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 61)].		d62 = 6.3234567890123d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 62)].		d63 = 6.4234567890124d9 ifTrue:			[ok := ok bitOr: (1 bitShift: 63)].		18446744073709551615 ~= ok ifTrue:			[self message: 'aCallback108 failed in callback (bad parameter)'].		 1.2345678901235d8]		ofType: self interface Callback108.	result := self interface testCallback108: aCallback108 w: 1.2345678901235d8 w: 2.2345678901235d8 w: 3.2345678901235d8 w: 4.2345678901235d8 w: 5.2345678901235d8 w: -1234567885 w: -1234567884 w: -1234567883 w: -1234567882 w: -1234567881 w: 133.456 w: 134.456 w: 135.456 w: 136.456 w: 137.456 w: 1.6234567890124d9 w: 1.7234567890123d9 w: 1.8234567890124d9 w: 1.9234567890124d9 w: 2.0234567890124d9 w: -1234567870 w: -1234567869 w: -1234567868 w: -1234567867 w: -1234567866 w: 148.456 w: 149.456 w: 150.456 w: 151.456 w: 152.456 w: 3.1234567890124d9 w: 3.2234567890124d9 w: 3.3234567890124d9 w: 3.4234567890124d9 w: 3.5234567890124d9 w: -1234567855 w: -1234567854 w: -1234567853 w: -1234567852 w: -1234567851 w: 163.456 w: 164.456 w: 165.456 w: 166.456 w: 167.456 w: 4.6234567890123d9 w: 4.7234567890123d9 w: 4.8234567890123d9 w: 4.9234567890124d9 w: 5.0234567890123d9 w: -1234567840 w: -1234567839 w: -1234567838 w: -1234567837 w: -1234567836 w: 178.456 w: 179.456 w: 180.456 w: 181.456 w: 182.456 w: 6.1234567890123d9 w: 6.2234567890123d9 w: 6.3234567890123d9 w: 6.4234567890124d9.	invoked ifFalse: [self message: 'testCallback108 failed to callback'].	1.2345678901235d8 = result ifFalse:		[self message: 'testCallback108 failed']"doubletestCallback108(Callback108 aCallback108, double d0, double d1, double d2, double d3, double d4, long l5, long l6, long l7, long l8, long l9, float f10, float f11, float f12, float f13, float f14, double d15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, long l24, float f25, float f26, float f27, float f28, float f29, double d30, double d31, double d32, double d33, double d34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, float f44, double d45, double d46, double d47, double d48, double d49, long l50, long l51, long l52, long l53, long l54, float f55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63){	return aCallback108(d0, d1, d2, d3, d4, l5, l6, l7, l8, l9, f10, f11, f12, f13, f14, d15, d16, d17, d18, d19, l20, l21, l22, l23, l24, f25, f26, f27, f28, f29, d30, d31, d32, d33, d34, l35, l36, l37, l38, l39, f40, f41, f42, f43, f44, d45, d46, d47, d48, d49, l50, l51, l52, l53, l54, f55, f56, f57, f58, f59, d60, d61, d62, d63);}"</body></methods><methods><class-id>External.DLLANDCTestInterface</class-id> <category>variables</category><body package="DLLCC Test Suite">globalBigStruct	&lt;C: BigStruct globalBigStruct&gt;</body><body package="DLLCC Test Suite">globalBigStruct: aValue	&lt;C: BigStruct globalBigStruct&gt;</body><body package="DLLCC Test Suite">globalChar	&lt;C: char globalChar&gt;</body><body package="DLLCC Test Suite">globalChar: aValue	&lt;C: char globalChar&gt;</body><body package="DLLCC Test Suite">globalCharStruct	&lt;C: CharStruct globalCharStruct&gt;</body><body package="DLLCC Test Suite">globalCharStruct: aValue	&lt;C: CharStruct globalCharStruct&gt;</body><body package="DLLCC Test Suite">globalDouble	&lt;C: double globalDouble&gt;</body><body package="DLLCC Test Suite">globalDouble: aValue	&lt;C: double globalDouble&gt;</body><body package="DLLCC Test Suite">globalFloat	&lt;C: float globalFloat&gt;</body><body package="DLLCC Test Suite">globalFloat: aValue	&lt;C: float globalFloat&gt;</body><body package="DLLCC Test Suite">globalInt	&lt;C: int globalInt&gt;</body><body package="DLLCC Test Suite">globalInt: aValue	&lt;C: int globalInt&gt;</body><body package="DLLCC Test Suite">globalLong	&lt;C: long globalLong&gt;</body><body package="DLLCC Test Suite">globalLong: aValue	&lt;C: long globalLong&gt;</body><body package="DLLCC Test Suite">globalShort	&lt;C: short globalShort&gt;</body><body package="DLLCC Test Suite">globalShort: aValue	&lt;C: short globalShort&gt;</body><body package="DLLCC Test Suite">unsignedChar	&lt;C: unsigned char unsignedChar&gt;</body><body package="DLLCC Test Suite">unsignedChar: aValue	&lt;C: unsigned char unsignedChar&gt;</body><body package="DLLCC Test Suite">unsignedInt	&lt;C: unsigned int unsignedInt&gt;</body><body package="DLLCC Test Suite">unsignedInt: aValue	&lt;C: unsigned int unsignedInt&gt;</body><body package="DLLCC Test Suite">unsignedLong	&lt;C: unsigned long unsignedLong&gt;</body><body package="DLLCC Test Suite">unsignedLong: aValue	&lt;C: unsigned long unsignedLong&gt;</body><body package="DLLCC Test Suite">unsignedShort	&lt;C: unsigned short unsignedShort&gt;</body><body package="DLLCC Test Suite">unsignedShort: aValue	&lt;C: unsigned short unsignedShort&gt;</body></methods><methods><class-id>External.DLLANDCTestInterface</class-id> <category>types</category><body package="DLLCC Test Suite">BigStruct	&lt;C: typedef struct {			signed char aChar;			unsigned char aUChar;			short aShort;			unsigned short aUShort;			int anInt;			unsigned int aUInt;			long aLong;			unsigned long aULong;			__int64 aLongLong;			unsigned __int64 aULongLong;			float aFloat;			double aDouble;			CharStruct charStruct;			SmallStruct smallStruct;		} BigStruct&gt;</body><body package="DLLCC Test Suite">Callback001	&lt;C: typedef void (* Callback001)(void)&gt;</body><body package="DLLCC Test Suite">Callback002	&lt;C: typedef signed char (* Callback002)(signed char aChar)&gt;</body><body package="DLLCC Test Suite">Callback003	&lt;C: typedef unsigned char (* Callback003)(unsigned char aUChar)&gt;</body><body package="DLLCC Test Suite">Callback004	&lt;C: typedef short (* Callback004)(short aShort)&gt;</body><body package="DLLCC Test Suite">Callback005	&lt;C: typedef unsigned short (* Callback005)(unsigned short aUShort)&gt;</body><body package="DLLCC Test Suite">Callback006	&lt;C: typedef int (* Callback006)(int anInt)&gt;</body><body package="DLLCC Test Suite">Callback007	&lt;C: typedef unsigned int (* Callback007)(unsigned int aUInt)&gt;</body><body package="DLLCC Test Suite">Callback008	&lt;C: typedef long (* Callback008)(long aLong)&gt;</body><body package="DLLCC Test Suite">Callback009	&lt;C: typedef unsigned long (* Callback009)(unsigned long aULong)&gt;</body><body package="DLLCC Test Suite">Callback010	&lt;C: typedef __int64 (* Callback010)(__int64 aLongLong)&gt;</body><body package="DLLCC Test Suite">Callback011	&lt;C: typedef unsigned __int64 (* Callback011)(unsigned __int64 aULongLong)&gt;</body><body package="DLLCC Test Suite">Callback012	&lt;C: typedef float (* Callback012)(float aFloat)&gt;</body><body package="DLLCC Test Suite">Callback013	&lt;C: typedef double (* Callback013)(double aDouble)&gt;</body><body package="DLLCC Test Suite">Callback014	&lt;C: typedef CharStruct (* Callback014)(CharStruct charStruct)&gt;</body><body package="DLLCC Test Suite">Callback015	&lt;C: typedef SmallStruct (* Callback015)(SmallStruct smallStruct)&gt;</body><body package="DLLCC Test Suite">Callback016	&lt;C: typedef MediumStruct (* Callback016)(MediumStruct mediumStruct)&gt;</body><body package="DLLCC Test Suite">Callback017	&lt;C: typedef LargeStruct (* Callback017)(LargeStruct largeStruct)&gt;</body><body package="DLLCC Test Suite">Callback018	&lt;C: typedef BigStruct (* Callback018)(BigStruct bigStruct)&gt;</body><body package="DLLCC Test Suite">Callback019	&lt;C: typedef __bool char (* Callback019)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback020	&lt;C: typedef __bool short (* Callback020)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback021	&lt;C: typedef __bool int (* Callback021)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback022	&lt;C: typedef __bool long (* Callback022)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback023	&lt;C: typedef __bool __int64 (* Callback023)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback024	&lt;C: typedef __bool char (* Callback024)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback025	&lt;C: typedef __bool short (* Callback025)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback026	&lt;C: typedef __bool int (* Callback026)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback027	&lt;C: typedef __bool long (* Callback027)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback028	&lt;C: typedef __bool __int64 (* Callback028)(__bool char aBoolChar, __bool short aBoolShort, __bool int aBoolInt, __bool long aBoolLong, __bool __int64 aBoolLongLong)&gt;</body><body package="DLLCC Test Suite">Callback029	&lt;C: typedef signed char (* Callback029)(signed char charA, signed char charB, signed char charC, signed char charD, signed char charE, signed char charF, signed char charG, signed char charH, signed char charI, signed char charJ, signed char charK, signed char charL, signed char charM, signed char charN, signed char charO, signed char charP, signed char charQ, signed char charR, signed char charS, signed char charT, signed char charU, signed char charV, signed char charW, signed char charX, signed char charY, signed char charZ, signed char char0, signed char char1, signed char char2, signed char char3)&gt;</body><body package="DLLCC Test Suite">Callback030	&lt;C: typedef unsigned char (* Callback030)(unsigned char uCharA, unsigned char uCharB, unsigned char uCharC, unsigned char uCharD, unsigned char uCharE, unsigned char uCharF, unsigned char uCharG, unsigned char uCharH, unsigned char uCharI, unsigned char uCharJ, unsigned char uCharK, unsigned char uCharL, unsigned char uCharM, unsigned char uCharN, unsigned char uCharO, unsigned char uCharP, unsigned char uCharQ, unsigned char uCharR, unsigned char uCharS, unsigned char uCharT, unsigned char uCharU, unsigned char uCharV, unsigned char uCharW, unsigned char uCharX, unsigned char uCharY, unsigned char uCharZ, unsigned char uChar0, unsigned char uChar1, unsigned char uChar2, unsigned char uChar3)&gt;</body><body package="DLLCC Test Suite">Callback031	&lt;C: typedef short (* Callback031)(short shortA, short shortB, short shortC, short shortD, short shortE, short shortF, short shortG, short shortH, short shortI, short shortJ, short shortK, short shortL, short shortM, short shortN, short shortO, short shortP, short shortQ, short shortR, short shortS, short shortT, short shortU, short shortV, short shortW, short shortX, short shortY, short shortZ, short short0, short short1, short short2, short short3)&gt;</body><body package="DLLCC Test Suite">Callback032	&lt;C: typedef unsigned short (* Callback032)(unsigned short uShortA, unsigned short uShortB, unsigned short uShortC, unsigned short uShortD, unsigned short uShortE, unsigned short uShortF, unsigned short uShortG, unsigned short uShortH, unsigned short uShortI, unsigned short uShortJ, unsigned short uShortK, unsigned short uShortL, unsigned short uShortM, unsigned short uShortN, unsigned short uShortO, unsigned short uShortP, unsigned short uShortQ, unsigned short uShortR, unsigned short uShortS, unsigned short uShortT, unsigned short uShortU, unsigned short uShortV, unsigned short uShortW, unsigned short uShortX, unsigned short uShortY, unsigned short uShortZ, unsigned short uShort0, unsigned short uShort1, unsigned short uShort2, unsigned short uShort3)&gt;</body><body package="DLLCC Test Suite">Callback033	&lt;C: typedef int (* Callback033)(int intA, int intB, int intC, int intD, int intE, int intF, int intG, int intH, int intI, int intJ, int intK, int intL, int intM, int intN, int intO, int intP, int intQ, int intR, int intS, int intT, int intU, int intV, int intW, int intX, int intY, int intZ, int int0, int int1, int int2, int int3)&gt;</body><body package="DLLCC Test Suite">Callback034	&lt;C: typedef unsigned int (* Callback034)(unsigned int uIntA, unsigned int uIntB, unsigned int uIntC, unsigned int uIntD, unsigned int uIntE, unsigned int uIntF, unsigned int uIntG, unsigned int uIntH, unsigned int uIntI, unsigned int uIntJ, unsigned int uIntK, unsigned int uIntL, unsigned int uIntM, unsigned int uIntN, unsigned int uIntO, unsigned int uIntP, unsigned int uIntQ, unsigned int uIntR, unsigned int uIntS, unsigned int uIntT, unsigned int uIntU, unsigned int uIntV, unsigned int uIntW, unsigned int uIntX, unsigned int uIntY, unsigned int uIntZ, unsigned int uInt0, unsigned int uInt1, unsigned int uInt2, unsigned int uInt3)&gt;</body><body package="DLLCC Test Suite">Callback035	&lt;C: typedef long (* Callback035)(long longA, long longB, long longC, long longD, long longE, long longF, long longG, long longH, long longI, long longJ, long longK, long longL, long longM, long longN, long longO, long longP, long longQ, long longR, long longS, long longT, long longU, long longV, long longW, long longX, long longY, long longZ, long long0, long long1, long long2, long long3)&gt;</body><body package="DLLCC Test Suite">Callback036	&lt;C: typedef unsigned long (* Callback036)(unsigned long uLongA, unsigned long uLongB, unsigned long uLongC, unsigned long uLongD, unsigned long uLongE, unsigned long uLongF, unsigned long uLongG, unsigned long uLongH, unsigned long uLongI, unsigned long uLongJ, unsigned long uLongK, unsigned long uLongL, unsigned long uLongM, unsigned long uLongN, unsigned long uLongO, unsigned long uLongP, unsigned long uLongQ, unsigned long uLongR, unsigned long uLongS, unsigned long uLongT, unsigned long uLongU, unsigned long uLongV, unsigned long uLongW, unsigned long uLongX, unsigned long uLongY, unsigned long uLongZ, unsigned long uLong0, unsigned long uLong1, unsigned long uLong2, unsigned long uLong3)&gt;</body><body package="DLLCC Test Suite">Callback037	&lt;C: typedef __int64 (* Callback037)(__int64 longLongA, __int64 longLongB, __int64 longLongC, __int64 longLongD, __int64 longLongE, __int64 longLongF, __int64 longLongG, __int64 longLongH, __int64 longLongI, __int64 longLongJ, __int64 longLongK, __int64 longLongL, __int64 longLongM, __int64 longLongN, __int64 longLongO, __int64 longLongP, __int64 longLongQ, __int64 longLongR, __int64 longLongS, __int64 longLongT, __int64 longLongU, __int64 longLongV, __int64 longLongW, __int64 longLongX, __int64 longLongY, __int64 longLongZ, __int64 longLong0, __int64 longLong1, __int64 longLong2, __int64 longLong3)&gt;</body><body package="DLLCC Test Suite">Callback038	&lt;C: typedef unsigned __int64 (* Callback038)(unsigned __int64 uLongLongA, unsigned __int64 uLongLongB, unsigned __int64 uLongLongC, unsigned __int64 uLongLongD, unsigned __int64 uLongLongE, unsigned __int64 uLongLongF, unsigned __int64 uLongLongG, unsigned __int64 uLongLongH, unsigned __int64 uLongLongI, unsigned __int64 uLongLongJ, unsigned __int64 uLongLongK, unsigned __int64 uLongLongL, unsigned __int64 uLongLongM, unsigned __int64 uLongLongN, unsigned __int64 uLongLongO, unsigned __int64 uLongLongP, unsigned __int64 uLongLongQ, unsigned __int64 uLongLongR, unsigned __int64 uLongLongS, unsigned __int64 uLongLongT, unsigned __int64 uLongLongU, unsigned __int64 uLongLongV, unsigned __int64 uLongLongW, unsigned __int64 uLongLongX, unsigned __int64 uLongLongY, unsigned __int64 uLongLongZ, unsigned __int64 uLongLong0, unsigned __int64 uLongLong1, unsigned __int64 uLongLong2, unsigned __int64 uLongLong3)&gt;</body><body package="DLLCC Test Suite">Callback039	&lt;C: typedef float (* Callback039)(float floatA, float floatB, float floatC, float floatD, float floatE, float floatF, float floatG, float floatH, float floatI, float floatJ, float floatK, float floatL, float floatM, float floatN, float floatO, float floatP, float floatQ, float floatR, float floatS, float floatT, float floatU, float floatV, float floatW, float floatX, float floatY, float floatZ, float float0, float float1, float float2, float float3)&gt;</body><body package="DLLCC Test Suite">Callback040	&lt;C: typedef double (* Callback040)(double doubleA, double doubleB, double doubleC, double doubleD, double doubleE, double doubleF, double doubleG, double doubleH, double doubleI, double doubleJ, double doubleK, double doubleL, double doubleM, double doubleN, double doubleO, double doubleP, double doubleQ, double doubleR, double doubleS, double doubleT, double doubleU, double doubleV, double doubleW, double doubleX, double doubleY, double doubleZ, double double0, double double1, double double2, double double3)&gt;</body><body package="DLLCC Test Suite">Callback041	&lt;C: typedef CharStruct (* Callback041)(CharStruct charStructA, CharStruct charStructB, CharStruct charStructC, CharStruct charStructD, CharStruct charStructE, CharStruct charStructF, CharStruct charStructG, CharStruct charStructH, CharStruct charStructI, CharStruct charStructJ, CharStruct charStructK, CharStruct charStructL, CharStruct charStructM, CharStruct charStructN, CharStruct charStructO, CharStruct charStructP, CharStruct charStructQ, CharStruct charStructR, CharStruct charStructS, CharStruct charStructT, CharStruct charStructU, CharStruct charStructV, CharStruct charStructW, CharStruct charStructX, CharStruct charStructY, CharStruct charStructZ, CharStruct charStruct0, CharStruct charStruct1, CharStruct charStruct2, CharStruct charStruct3)&gt;</body><body package="DLLCC Test Suite">Callback042	&lt;C: typedef SmallStruct (* Callback042)(SmallStruct smallStructA, SmallStruct smallStructB, SmallStruct smallStructC, SmallStruct smallStructD, SmallStruct smallStructE, SmallStruct smallStructF, SmallStruct smallStructG, SmallStruct smallStructH, SmallStruct smallStructI, SmallStruct smallStructJ, SmallStruct smallStructK, SmallStruct smallStructL, SmallStruct smallStructM, SmallStruct smallStructN, SmallStruct smallStructO, SmallStruct smallStructP, SmallStruct smallStructQ, SmallStruct smallStructR, SmallStruct smallStructS, SmallStruct smallStructT, SmallStruct smallStructU, SmallStruct smallStructV, SmallStruct smallStructW, SmallStruct smallStructX, SmallStruct smallStructY, SmallStruct smallStructZ, SmallStruct smallStruct0, SmallStruct smallStruct1, SmallStruct smallStruct2, SmallStruct smallStruct3)&gt;</body><body package="DLLCC Test Suite">Callback043	&lt;C: typedef MediumStruct (* Callback043)(MediumStruct mediumStructA, MediumStruct mediumStructB, MediumStruct mediumStructC, MediumStruct mediumStructD, MediumStruct mediumStructE, MediumStruct mediumStructF, MediumStruct mediumStructG, MediumStruct mediumStructH, MediumStruct mediumStructI, MediumStruct mediumStructJ, MediumStruct mediumStructK, MediumStruct mediumStructL, MediumStruct mediumStructM, MediumStruct mediumStructN, MediumStruct mediumStructO, MediumStruct mediumStructP, MediumStruct mediumStructQ, MediumStruct mediumStructR, MediumStruct mediumStructS, MediumStruct mediumStructT, MediumStruct mediumStructU, MediumStruct mediumStructV, MediumStruct mediumStructW, MediumStruct mediumStructX, MediumStruct mediumStructY, MediumStruct mediumStructZ, MediumStruct mediumStruct0, MediumStruct mediumStruct1, MediumStruct mediumStruct2, MediumStruct mediumStruct3)&gt;</body><body package="DLLCC Test Suite">Callback044	&lt;C: typedef LargeStruct (* Callback044)(LargeStruct largeStructA, LargeStruct largeStructB, LargeStruct largeStructC, LargeStruct largeStructD, LargeStruct largeStructE, LargeStruct largeStructF, LargeStruct largeStructG, LargeStruct largeStructH, LargeStruct largeStructI, LargeStruct largeStructJ, LargeStruct largeStructK, LargeStruct largeStructL, LargeStruct largeStructM, LargeStruct largeStructN, LargeStruct largeStructO, LargeStruct largeStructP, LargeStruct largeStructQ, LargeStruct largeStructR, LargeStruct largeStructS, LargeStruct largeStructT, LargeStruct largeStructU, LargeStruct largeStructV, LargeStruct largeStructW, LargeStruct largeStructX, LargeStruct largeStructY, LargeStruct largeStructZ, LargeStruct largeStruct0, LargeStruct largeStruct1, LargeStruct largeStruct2, LargeStruct largeStruct3)&gt;</body><body package="DLLCC Test Suite">Callback045	&lt;C: typedef BigStruct (* Callback045)(BigStruct bigStructA, BigStruct bigStructB, BigStruct bigStructC, BigStruct bigStructD, BigStruct bigStructE, BigStruct bigStructF, BigStruct bigStructG, BigStruct bigStructH, BigStruct bigStructI, BigStruct bigStructJ, BigStruct bigStructK, BigStruct bigStructL, BigStruct bigStructM, BigStruct bigStructN, BigStruct bigStructO, BigStruct bigStructP, BigStruct bigStructQ, BigStruct bigStructR, BigStruct bigStructS, BigStruct bigStructT, BigStruct bigStructU, BigStruct bigStructV, BigStruct bigStructW, BigStruct bigStructX, BigStruct bigStructY, BigStruct bigStructZ, BigStruct bigStruct0, BigStruct bigStruct1, BigStruct bigStruct2, BigStruct bigStruct3)&gt;</body><body package="DLLCC Test Suite">Callback046	&lt;C: typedef signed char (* Callback046)(signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA)&gt;</body><body package="DLLCC Test Suite">Callback047	&lt;C: typedef unsigned char (* Callback047)(unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar)&gt;</body><body package="DLLCC Test Suite">Callback048	&lt;C: typedef short (* Callback048)(short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar)&gt;</body><body package="DLLCC Test Suite">Callback049	&lt;C: typedef unsigned short (* Callback049)(unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort)&gt;</body><body package="DLLCC Test Suite">Callback050	&lt;C: typedef int (* Callback050)(int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort)&gt;</body><body package="DLLCC Test Suite">Callback051	&lt;C: typedef unsigned int (* Callback051)(unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt)&gt;</body><body package="DLLCC Test Suite">Callback052	&lt;C: typedef long (* Callback052)(long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt)&gt;</body><body package="DLLCC Test Suite">Callback053	&lt;C: typedef unsigned long (* Callback053)(unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong)&gt;</body><body package="DLLCC Test Suite">Callback054	&lt;C: typedef __int64 (* Callback054)(__int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong)&gt;</body><body package="DLLCC Test Suite">Callback055	&lt;C: typedef unsigned __int64 (* Callback055)(unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong)&gt;</body><body package="DLLCC Test Suite">Callback056	&lt;C: typedef float (* Callback056)(float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong)&gt;</body><body package="DLLCC Test Suite">Callback057	&lt;C: typedef double (* Callback057)(double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat)&gt;</body><body package="DLLCC Test Suite">Callback058	&lt;C: typedef CharStruct (* Callback058)(CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble)&gt;</body><body package="DLLCC Test Suite">Callback059	&lt;C: typedef SmallStruct (* Callback059)(SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct)&gt;</body><body package="DLLCC Test Suite">Callback060	&lt;C: typedef MediumStruct (* Callback060)(MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct)&gt;</body><body package="DLLCC Test Suite">Callback061	&lt;C: typedef LargeStruct (* Callback061)(LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct)&gt;</body><body package="DLLCC Test Suite">Callback062	&lt;C: typedef BigStruct (* Callback062)(BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct)&gt;</body><body package="DLLCC Test Suite">Callback063	&lt;C: typedef signed char (* Callback063)(signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct)&gt;</body><body package="DLLCC Test Suite">Callback064	&lt;C: typedef unsigned char (* Callback064)(unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar)&gt;</body><body package="DLLCC Test Suite">Callback065	&lt;C: typedef short (* Callback065)(short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar)&gt;</body><body package="DLLCC Test Suite">Callback066	&lt;C: typedef unsigned short (* Callback066)(unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort)&gt;</body><body package="DLLCC Test Suite">Callback067	&lt;C: typedef int (* Callback067)(int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort)&gt;</body><body package="DLLCC Test Suite">Callback068	&lt;C: typedef unsigned int (* Callback068)(unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt)&gt;</body><body package="DLLCC Test Suite">Callback069	&lt;C: typedef long (* Callback069)(long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt)&gt;</body><body package="DLLCC Test Suite">Callback070	&lt;C: typedef unsigned long (* Callback070)(unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong)&gt;</body><body package="DLLCC Test Suite">Callback071	&lt;C: typedef __int64 (* Callback071)(__int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong)&gt;</body><body package="DLLCC Test Suite">Callback072	&lt;C: typedef unsigned __int64 (* Callback072)(unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong)&gt;</body><body package="DLLCC Test Suite">Callback073	&lt;C: typedef float (* Callback073)(float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong)&gt;</body><body package="DLLCC Test Suite">Callback074	&lt;C: typedef double (* Callback074)(double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat)&gt;</body><body package="DLLCC Test Suite">Callback075	&lt;C: typedef CharStruct (* Callback075)(CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble)&gt;</body><body package="DLLCC Test Suite">Callback076	&lt;C: typedef SmallStruct (* Callback076)(SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA)&gt;</body><body package="DLLCC Test Suite">Callback077	&lt;C: typedef MediumStruct (* Callback077)(MediumStruct mediumStructA, LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA)&gt;</body><body package="DLLCC Test Suite">Callback078	&lt;C: typedef LargeStruct (* Callback078)(LargeStruct largeStructA, BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA)&gt;</body><body package="DLLCC Test Suite">Callback079	&lt;C: typedef BigStruct (* Callback079)(BigStruct bigStructA, signed char aChar, unsigned char aUChar, short aShort, unsigned short aUShort, int anInt, unsigned int aUInt, long aLong, unsigned long aULong, __int64 aLongLong, unsigned __int64 aULongLong, float aFloat, double aDouble, CharStruct charStruct, SmallStruct smallStruct, MediumStruct mediumStruct, LargeStruct largeStruct, BigStruct bigStruct, signed char bChar, unsigned char bUChar, short bShort, unsigned short bUShort, int bnInt, unsigned int bUInt, long bLong, unsigned long bULong, __int64 bLongLong, unsigned __int64 bULongLong, float bFloat, double bDouble, CharStruct charStructA, SmallStruct smallStructA, MediumStruct mediumStructA, LargeStruct largeStructA)&gt;</body><body package="DLLCC Test Suite">Callback080	&lt;C: typedef float (* Callback080)(float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13, float f14, float f15, float f16, float f17, float f18, float f19, float f20, float f21, float f22, float f23, float f24, float f25, float f26, float f27, float f28, float f29, float f30, float f31, float f32, float f33, float f34, float f35, float f36, float f37, float f38, float f39, float f40, float f41, float f42, float f43, float f44, float f45, float f46, float f47, float f48, float f49, float f50, float f51, float f52, float f53, float f54, float f55, float f56, float f57, float f58, float f59, float f60, float f61, float f62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback081	&lt;C: typedef double (* Callback081)(double d0, double d1, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11, double d12, double d13, double d14, double d15, double d16, double d17, double d18, double d19, double d20, double d21, double d22, double d23, double d24, double d25, double d26, double d27, double d28, double d29, double d30, double d31, double d32, double d33, double d34, double d35, double d36, double d37, double d38, double d39, double d40, double d41, double d42, double d43, double d44, double d45, double d46, double d47, double d48, double d49, double d50, double d51, double d52, double d53, double d54, double d55, double d56, double d57, double d58, double d59, double d60, double d61, double d62, double d63)&gt;</body><body package="DLLCC Test Suite">Callback082	&lt;C: typedef double (* Callback082)(double d0, float f1, double d2, float f3, double d4, float f5, double d6, float f7, double d8, float f9, double d10, float f11, double d12, float f13, double d14, float f15, double d16, float f17, double d18, float f19, double d20, float f21, double d22, float f23, double d24, float f25, double d26, float f27, double d28, float f29, double d30, float f31, double d32, float f33, double d34, float f35, double d36, float f37, double d38, float f39, double d40, float f41, double d42, float f43, double d44, float f45, double d46, float f47, double d48, float f49, double d50, float f51, double d52, float f53, double d54, float f55, double d56, float f57, double d58, float f59, double d60, float f61, double d62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback083	&lt;C: typedef float (* Callback083)(float f0, double d1, float f2, double d3, float f4, double d5, float f6, double d7, float f8, double d9, float f10, double d11, float f12, double d13, float f14, double d15, float f16, double d17, float f18, double d19, float f20, double d21, float f22, double d23, float f24, double d25, float f26, double d27, float f28, double d29, float f30, double d31, float f32, double d33, float f34, double d35, float f36, double d37, float f38, double d39, float f40, double d41, float f42, double d43, float f44, double d45, float f46, double d47, float f48, double d49, float f50, double d51, float f52, double d53, float f54, double d55, float f56, double d57, float f58, double d59, float f60, double d61, float f62, double d63)&gt;</body><body package="DLLCC Test Suite">Callback084	&lt;C: typedef float (* Callback084)(float f0, long l1, long l2, float f3, long l4, long l5, float f6, long l7, long l8, float f9, long l10, long l11, float f12, long l13, long l14, float f15, long l16, long l17, float f18, long l19, long l20, float f21, long l22, long l23, float f24, long l25, long l26, float f27, long l28, long l29, float f30, long l31, long l32, float f33, long l34, long l35, float f36, long l37, long l38, float f39, long l40, long l41, float f42, long l43, long l44, float f45, long l46, long l47, float f48, long l49, long l50, float f51, long l52, long l53, float f54, long l55, long l56, float f57, long l58, long l59, float f60, long l61, long l62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback085	&lt;C: typedef long (* Callback085)(long l0, float f1, long l2, long l3, float f4, long l5, long l6, float f7, long l8, long l9, float f10, long l11, long l12, float f13, long l14, long l15, float f16, long l17, long l18, float f19, long l20, long l21, float f22, long l23, long l24, float f25, long l26, long l27, float f28, long l29, long l30, float f31, long l32, long l33, float f34, long l35, long l36, float f37, long l38, long l39, float f40, long l41, long l42, float f43, long l44, long l45, float f46, long l47, long l48, float f49, long l50, long l51, float f52, long l53, long l54, float f55, long l56, long l57, float f58, long l59, long l60, float f61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback086	&lt;C: typedef float (* Callback086)(float f0, double d1, long l2, float f3, double d4, long l5, float f6, double d7, long l8, float f9, double d10, long l11, float f12, double d13, long l14, float f15, double d16, long l17, float f18, double d19, long l20, float f21, double d22, long l23, float f24, double d25, long l26, float f27, double d28, long l29, float f30, double d31, long l32, float f33, double d34, long l35, float f36, double d37, long l38, float f39, double d40, long l41, float f42, double d43, long l44, float f45, double d46, long l47, float f48, double d49, long l50, float f51, double d52, long l53, float f54, double d55, long l56, float f57, double d58, long l59, float f60, double d61, long l62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback087	&lt;C: typedef long (* Callback087)(long l0, float f1, double d2, long l3, float f4, double d5, long l6, float f7, double d8, long l9, float f10, double d11, long l12, float f13, double d14, long l15, float f16, double d17, long l18, float f19, double d20, long l21, float f22, double d23, long l24, float f25, double d26, long l27, float f28, double d29, long l30, float f31, double d32, long l33, float f34, double d35, long l36, float f37, double d38, long l39, float f40, double d41, long l42, float f43, double d44, long l45, float f46, double d47, long l48, float f49, double d50, long l51, float f52, double d53, long l54, float f55, double d56, long l57, float f58, double d59, long l60, float f61, double d62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback088	&lt;C: typedef double (* Callback088)(double d0, long l1, float f2, double d3, long l4, float f5, double d6, long l7, float f8, double d9, long l10, float f11, double d12, long l13, float f14, double d15, long l16, float f17, double d18, long l19, float f20, double d21, long l22, float f23, double d24, long l25, float f26, double d27, long l28, float f29, double d30, long l31, float f32, double d33, long l34, float f35, double d36, long l37, float f38, double d39, long l40, float f41, double d42, long l43, float f44, double d45, long l46, float f47, double d48, long l49, float f50, double d51, long l52, float f53, double d54, long l55, float f56, double d57, long l58, float f59, double d60, long l61, float f62, double d63)&gt;</body><body package="DLLCC Test Suite">Callback089	&lt;C: typedef float (* Callback089)(float f0, float f1, long l2, long l3, long l4, long l5, float f6, float f7, long l8, long l9, long l10, long l11, float f12, float f13, long l14, long l15, long l16, long l17, float f18, float f19, long l20, long l21, long l22, long l23, float f24, float f25, long l26, long l27, long l28, long l29, float f30, float f31, long l32, long l33, long l34, long l35, float f36, float f37, long l38, long l39, long l40, long l41, float f42, float f43, long l44, long l45, long l46, long l47, float f48, float f49, long l50, long l51, long l52, long l53, float f54, float f55, long l56, long l57, long l58, long l59, float f60, float f61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback090	&lt;C: typedef long (* Callback090)(long l0, long l1, float f2, float f3, long l4, long l5, long l6, long l7, float f8, float f9, long l10, long l11, long l12, long l13, float f14, float f15, long l16, long l17, long l18, long l19, float f20, float f21, long l22, long l23, long l24, long l25, float f26, float f27, long l28, long l29, long l30, long l31, float f32, float f33, long l34, long l35, long l36, long l37, float f38, float f39, long l40, long l41, long l42, long l43, float f44, float f45, long l46, long l47, long l48, long l49, float f50, float f51, long l52, long l53, long l54, long l55, float f56, float f57, long l58, long l59, long l60, long l61, float f62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback091	&lt;C: typedef float (* Callback091)(float f0, float f1, double d2, double d3, long l4, long l5, float f6, float f7, double d8, double d9, long l10, long l11, float f12, float f13, double d14, double d15, long l16, long l17, float f18, float f19, double d20, double d21, long l22, long l23, float f24, float f25, double d26, double d27, long l28, long l29, float f30, float f31, double d32, double d33, long l34, long l35, float f36, float f37, double d38, double d39, long l40, long l41, float f42, float f43, double d44, double d45, long l46, long l47, float f48, float f49, double d50, double d51, long l52, long l53, float f54, float f55, double d56, double d57, long l58, long l59, float f60, float f61, double d62, double d63)&gt;</body><body package="DLLCC Test Suite">Callback092	&lt;C: typedef long (* Callback092)(long l0, long l1, float f2, float f3, double d4, double d5, long l6, long l7, float f8, float f9, double d10, double d11, long l12, long l13, float f14, float f15, double d16, double d17, long l18, long l19, float f20, float f21, double d22, double d23, long l24, long l25, float f26, float f27, double d28, double d29, long l30, long l31, float f32, float f33, double d34, double d35, long l36, long l37, float f38, float f39, double d40, double d41, long l42, long l43, float f44, float f45, double d46, double d47, long l48, long l49, float f50, float f51, double d52, double d53, long l54, long l55, float f56, float f57, double d58, double d59, long l60, long l61, float f62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback093	&lt;C: typedef double (* Callback093)(double d0, double d1, long l2, long l3, float f4, float f5, double d6, double d7, long l8, long l9, float f10, float f11, double d12, double d13, long l14, long l15, float f16, float f17, double d18, double d19, long l20, long l21, float f22, float f23, double d24, double d25, long l26, long l27, float f28, float f29, double d30, double d31, long l32, long l33, float f34, float f35, double d36, double d37, long l38, long l39, float f40, float f41, double d42, double d43, long l44, long l45, float f46, float f47, double d48, double d49, long l50, long l51, float f52, float f53, double d54, double d55, long l56, long l57, float f58, float f59, double d60, double d61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback094	&lt;C: typedef float (* Callback094)(float f0, float f1, float f2, long l3, long l4, long l5, long l6, long l7, long l8, float f9, float f10, float f11, long l12, long l13, long l14, long l15, long l16, long l17, float f18, float f19, float f20, long l21, long l22, long l23, long l24, long l25, long l26, float f27, float f28, float f29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, long l48, long l49, long l50, long l51, long l52, long l53, float f54, float f55, float f56, long l57, long l58, long l59, long l60, long l61, long l62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback095	&lt;C: typedef long (* Callback095)(long l0, long l1, long l2, float f3, float f4, float f5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, long l15, long l16, long l17, long l18, long l19, long l20, float f21, float f22, float f23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, long l33, long l34, long l35, long l36, long l37, long l38, float f39, float f40, float f41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, long l51, long l52, long l53, long l54, long l55, long l56, float f57, float f58, float f59, long l60, long l61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback096	&lt;C: typedef float (* Callback096)(float f0, float f1, float f2, double d3, double d4, double d5, long l6, long l7, long l8, float f9, float f10, float f11, double d12, double d13, double d14, long l15, long l16, long l17, float f18, float f19, float f20, double d21, double d22, double d23, long l24, long l25, long l26, float f27, float f28, float f29, double d30, double d31, double d32, long l33, long l34, long l35, float f36, float f37, float f38, double d39, double d40, double d41, long l42, long l43, long l44, float f45, float f46, float f47, double d48, double d49, double d50, long l51, long l52, long l53, float f54, float f55, float f56, double d57, double d58, double d59, long l60, long l61, long l62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback097	&lt;C: typedef long (* Callback097)(long l0, long l1, long l2, float f3, float f4, float f5, double d6, double d7, double d8, long l9, long l10, long l11, float f12, float f13, float f14, double d15, double d16, double d17, long l18, long l19, long l20, float f21, float f22, float f23, double d24, double d25, double d26, long l27, long l28, long l29, float f30, float f31, float f32, double d33, double d34, double d35, long l36, long l37, long l38, float f39, float f40, float f41, double d42, double d43, double d44, long l45, long l46, long l47, float f48, float f49, float f50, double d51, double d52, double d53, long l54, long l55, long l56, float f57, float f58, float f59, double d60, double d61, double d62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback098	&lt;C: typedef double (* Callback098)(double d0, double d1, double d2, long l3, long l4, long l5, float f6, float f7, float f8, double d9, double d10, double d11, long l12, long l13, long l14, float f15, float f16, float f17, double d18, double d19, double d20, long l21, long l22, long l23, float f24, float f25, float f26, double d27, double d28, double d29, long l30, long l31, long l32, float f33, float f34, float f35, double d36, double d37, double d38, long l39, long l40, long l41, float f42, float f43, float f44, double d45, double d46, double d47, long l48, long l49, long l50, float f51, float f52, float f53, double d54, double d55, double d56, long l57, long l58, long l59, float f60, float f61, float f62, double d63)&gt;</body><body package="DLLCC Test Suite">Callback099	&lt;C: typedef float (* Callback099)(float f0, float f1, float f2, float f3, long l4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, long l16, long l17, long l18, long l19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback100	&lt;C: typedef long (* Callback100)(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, long l32, long l33, long l34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, long l44, long l45, long l46, long l47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback101	&lt;C: typedef float (* Callback101)(float f0, float f1, float f2, float f3, double d4, double d5, double d6, double d7, long l8, long l9, long l10, long l11, float f12, float f13, float f14, float f15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, float f24, float f25, float f26, float f27, double d28, double d29, double d30, double d31, long l32, long l33, long l34, long l35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, long l44, long l45, long l46, long l47, float f48, float f49, float f50, float f51, double d52, double d53, double d54, double d55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback102	&lt;C: typedef long (* Callback102)(long l0, long l1, long l2, long l3, float f4, float f5, float f6, float f7, double d8, double d9, double d10, double d11, long l12, long l13, long l14, long l15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, long l24, long l25, long l26, long l27, float f28, float f29, float f30, float f31, double d32, double d33, double d34, double d35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, double d44, double d45, double d46, double d47, long l48, long l49, long l50, long l51, float f52, float f53, float f54, float f55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback103	&lt;C: typedef double (* Callback103)(double d0, double d1, double d2, double d3, long l4, long l5, long l6, long l7, float f8, float f9, float f10, float f11, double d12, double d13, double d14, double d15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, double d24, double d25, double d26, double d27, long l28, long l29, long l30, long l31, float f32, float f33, float f34, float f35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, float f44, float f45, float f46, float f47, double d48, double d49, double d50, double d51, long l52, long l53, long l54, long l55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;</body><body package="DLLCC Test Suite">Callback104	&lt;C: typedef float (* Callback104)(float f0, float f1, float f2, float f3, float f4, long l5, long l6, long l7, long l8, long l9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, long l20, long l21, long l22, long l23, long l24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, long l35, long l36, long l37, long l38, long l39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, long l50, long l51, long l52, long l53, long l54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback105	&lt;C: typedef long (* Callback105)(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, long l10, long l11, long l12, long l13, long l14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, long l25, long l26, long l27, long l28, long l29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, long l40, long l41, long l42, long l43, long l44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, long l55, long l56, long l57, long l58, long l59, long l60, long l61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback106	&lt;C: typedef float (* Callback106)(float f0, float f1, float f2, float f3, float f4, double d5, double d6, double d7, double d8, double d9, long l10, long l11, long l12, long l13, long l14, float f15, float f16, float f17, float f18, float f19, double d20, double d21, double d22, double d23, double d24, long l25, long l26, long l27, long l28, long l29, float f30, float f31, float f32, float f33, float f34, double d35, double d36, double d37, double d38, double d39, long l40, long l41, long l42, long l43, long l44, float f45, float f46, float f47, float f48, float f49, double d50, double d51, double d52, double d53, double d54, long l55, long l56, long l57, long l58, long l59, float f60, float f61, float f62, float f63)&gt;</body><body package="DLLCC Test Suite">Callback107	&lt;C: typedef long (* Callback107)(long l0, long l1, long l2, long l3, long l4, float f5, float f6, float f7, float f8, float f9, double d10, double d11, double d12, double d13, double d14, long l15, long l16, long l17, long l18, long l19, float f20, float f21, float f22, float f23, float f24, double d25, double d26, double d27, double d28, double d29, long l30, long l31, long l32, long l33, long l34, float f35, float f36, float f37, float f38, float f39, double d40, double d41, double d42, double d43, double d44, long l45, long l46, long l47, long l48, long l49, float f50, float f51, float f52, float f53, float f54, double d55, double d56, double d57, double d58, double d59, long l60, long l61, long l62, long l63)&gt;</body><body package="DLLCC Test Suite">Callback108	&lt;C: typedef double (* Callback108)(double d0, double d1, double d2, double d3, double d4, long l5, long l6, long l7, long l8, long l9, float f10, float f11, float f12, float f13, float f14, double d15, double d16, double d17, double d18, double d19, long l20, long l21, long l22, long l23, long l24, float f25, float f26, float f27, float f28, float f29, double d30, double d31, double d32, double d33, double d34, long l35, long l36, long l37, long l38, long l39, float f40, float f41, float f42, float f43, float f44, double d45, double d46, double d47, double d48, double d49, long l50, long l51, long l52, long l53, long l54, float f55, float f56, float f57, float f58, float f59, double d60, double d61, double d62, double d63)&gt;</body><body package="DLLCC Test Suite">CharStruct	&lt;C: typedef struct {			signed char aChar;		} CharStruct&gt;</body><body package="DLLCC Test Suite">LargeStruct	&lt;C: typedef struct {			long aLong;			double aDouble;			unsigned long aULong;			float aFloat;		} LargeStruct&gt;</body><body package="DLLCC Test Suite">MediumStruct	&lt;C: typedef struct {			int anInt;			float aFloat;		} MediumStruct&gt;</body><body package="DLLCC Test Suite">OEbool	&lt;C: typedef enum {			OEFALSE, 			OETRUE		} OEbool&gt;</body><body package="DLLCC Test Suite">OEbyte	&lt;C: typedef unsigned char OEbyte&gt;</body><body package="DLLCC Test Suite">OEchar	&lt;C: typedef char OEchar&gt;</body><body package="DLLCC Test Suite">OEclassID	&lt;C: typedef enum {			OEnotAClassID, 			OEfixedSizeClassID, 			OEvariableSizeClassID		} OEclassID&gt;</body><body package="DLLCC Test Suite">OEdouble	&lt;C: typedef double OEdouble&gt;</body><body package="DLLCC Test Suite">OEerrorCodeID	&lt;C: typedef enum {			OEerrorNone, 			OEerrorCrange, 			OEerrorNonOop, 			OEerrorWrongClass, 			OEerrorObjectTooSmall, 			OEerrorAllocationFailed, 			OEerrorStoreFailure		} OEerrorCodeID&gt;</body><body package="DLLCC Test Suite">OEfloat	&lt;C: typedef float OEfloat&gt;</body><body package="DLLCC Test Suite">OEint	&lt;C: typedef long OEint&gt;</body><body package="DLLCC Test Suite">OEoopType	&lt;C: typedef enum {			OEpointerType, 			OEbyteType, 			OEimmediateType		} OEoopType&gt;</body><body package="DLLCC Test Suite">OEvoidFuncPtr	&lt;C: typedef void (* OEvoidFuncPtr)(void)&gt;</body><body package="DLLCC Test Suite">SmallStruct	&lt;C: typedef struct {			short aShort;			unsigned char aUChar;			unsigned short aUShort;		} SmallStruct&gt;</body><body package="DLLCC Test Suite">oe_oop	&lt;C: typedef _oop oe_oop&gt;</body></methods><methods><class-id>External.DLLANDCTestInterface</class-id> <category>heap management</category><body package="DLLCC Test Suite">gcCopyToHeap: anObject 	"Copy anObject to the external heap. Answer a pointer to the data that is registered	 for automatic garbage collection."	^anObject gcCopyToHeap</body><body package="DLLCC Test Suite">gcMalloc: aType	"Answer a new object (normally a CDatum or CPointer) for representing one value of this type.	 The datum's data resides in the foreign heap and will be released automatically when the	 answered object is no longer referenced."	^aType gcMalloc: 1</body></methods><methods><class-id>External.DLLANDCTestInterface</class-id> <category>default values</category><body package="DLLCC Test Suite">bigStruct	| bigStruct |	bigStruct := self BigStruct new.	bigStruct memberAt: #aChar put: -94.	bigStruct memberAt: #aUChar put: 99.	bigStruct memberAt: #aShort put: -12345.	bigStruct memberAt: #aUShort put: 12345.	bigStruct memberAt: #anInt put: -1234567890.	bigStruct memberAt: #aUInt put: 1234567890.	bigStruct memberAt: #aLong put: -1234567890.	bigStruct memberAt: #aULong put: 1234567890.	bigStruct memberAt: #aLongLong put: -1234567890123456789.	bigStruct memberAt: #aULongLong put: 12345678901234567890.	bigStruct memberAt: #aFloat put: 123.456.	bigStruct memberAt: #aDouble put: 1.2345678901235d8.	bigStruct memberAt: #charStruct put: self charStruct.	bigStruct memberAt: #smallStruct put: self smallStruct.	^bigStruct</body><body package="DLLCC Test Suite">bigStructA	| bigStructA |	bigStructA := self BigStruct new.	bigStructA memberAt: #aChar put: -93.	bigStructA memberAt: #aUChar put: 100.	bigStructA memberAt: #aShort put: -12344.	bigStructA memberAt: #aUShort put: 12346.	bigStructA memberAt: #anInt put: -1234567889.	bigStructA memberAt: #aUInt put: 1234567891.	bigStructA memberAt: #aLong put: -1234567889.	bigStructA memberAt: #aULong put: 1234567891.	bigStructA memberAt: #aLongLong put: -1234567890123456788.	bigStructA memberAt: #aULongLong put: 12345678901234567891.	bigStructA memberAt: #aFloat put: 124.456.	bigStructA memberAt: #aDouble put: 2.2345678901235d8.	bigStructA memberAt: #charStruct put: self charStructA.	bigStructA memberAt: #smallStruct put: self smallStructA.	^bigStructA</body><body package="DLLCC Test Suite">charStruct	| charStruct |	charStruct := self CharStruct new.	charStruct memberAt: #aChar put: -94.	^charStruct</body><body package="DLLCC Test Suite">charStructA	| charStructA |	charStructA := self CharStruct new.	charStructA memberAt: #aChar put: -93.	^charStructA</body><body package="DLLCC Test Suite">largeStruct	| largeStruct |	largeStruct := self LargeStruct new.	largeStruct memberAt: #aLong put: -1234567890.	largeStruct memberAt: #aDouble put: 1.2345678901235d8.	largeStruct memberAt: #aULong put: 1234567890.	largeStruct memberAt: #aFloat put: 123.456.	^largeStruct</body><body package="DLLCC Test Suite">largeStructA	| largeStructA |	largeStructA := self LargeStruct new.	largeStructA memberAt: #aLong put: -1234567889.	largeStructA memberAt: #aDouble put: 2.2345678901235d8.	largeStructA memberAt: #aULong put: 1234567891.	largeStructA memberAt: #aFloat put: 124.456.	^largeStructA</body><body package="DLLCC Test Suite">mediumStruct	| mediumStruct |	mediumStruct := self MediumStruct new.	mediumStruct memberAt: #anInt put: -1234567890.	mediumStruct memberAt: #aFloat put: 123.456.	^mediumStruct</body><body package="DLLCC Test Suite">mediumStructA	| mediumStructA |	mediumStructA := self MediumStruct new.	mediumStructA memberAt: #anInt put: -1234567889.	mediumStructA memberAt: #aFloat put: 124.456.	^mediumStructA</body><body package="DLLCC Test Suite">smallStruct	| smallStruct |	smallStruct := self SmallStruct new.	smallStruct memberAt: #aShort put: -12345.	smallStruct memberAt: #aUChar put: 99.	smallStruct memberAt: #aUShort put: 12345.	^smallStruct</body><body package="DLLCC Test Suite">smallStructA	| smallStructA |	smallStructA := self SmallStruct new.	smallStructA memberAt: #aShort put: -12344.	smallStructA memberAt: #aUChar put: 100.	smallStructA memberAt: #aUShort put: 12346.	^smallStructA</body></methods><methods><class-id>External.DLLANDCTestInterface class</class-id> <category>private subclassing</category><body package="DLLCC Test Suite">libraryDirectoriesString	"Reimplemented to produce a more readable class definition."	| stream tabs |	libraryDirectories isNil ifTrue: [^''].	stream := WriteStream on: (String new: 500).	tabs := String new: 7 withAll: Character tab.	tabs at: 1 put: Character cr.	(libraryDirectories ownCollect: [:lib | lib])		do: [:lib | stream nextPutAll: lib]		separatedBy: [stream nextPutAll: tabs].	^stream contents</body></methods><methods><class-id>External.DLLANDCTestInterface class</class-id> <category>private</category><body package="DLLCC Test Suite">libraryFilesSearchSignals	"Answer a SignalCollection used to handle exceptions raised when scanning for library files. The signals answered by this method will result in those signals being ignored by the library search machinery. Clients should not answer signals they wish to receive."	^ExternalLibraryHolder libraryNotFoundSignal</body></methods><methods><class-id>External.DLLANDCTestInterface class</class-id> <category>accessing</category><body package="DLLCC Test Suite">libraryFiles	"Override to select only the appropriate versions of the test dlls."	^super libraryFiles select: [:libraryFile | 'cptst*' match: libraryFile name]</body></methods><methods><class-id>External.DLLANDCTest</class-id> <category>test selector lists</category><body package="DLLCC Test Suite">testSelectorsNonUP	"These are the only tests that are generated"	^#(runTest001 runTest002 runTest003 runTest004 runTest005 runTest006 runTest007 runTest008 runTest009 runTest010 runTest011 runTest012 runTest013 runTest014 runTest015 runTest016 runTest017 runTest018 runTest019 runTest020 runTest021 runTest022 runTest023 runTest024 runTest025 runTest026 runTest027 runTest028 runTest029 runTest030 runTest031 runTest032 runTest033 runTest034 runTest035 runTest036 runTest037 runTest038 runTest039 runTest040 runTest041 runTest042 runTest043 runTest044 runTest045 runTest046 runTest047 runTest048 runTest049 runTest050 runTest051 runTest052 runTest053 runTest054 runTest055 runTest056 runTest057 runTest058 runTest059 runTest060 runTest061 runTest062 runTest063 runTest064 runTest065 runTest066 runTest067 runTest068 runTest069 runTest070 runTest071 runTest072 runTest073 runTest074 runTest075 runTest076 runTest077 runTest078 runTest079 runTest080 runTest081 runTest082 runTest083 runTest084 runTest085 runTest086 runTest087 runTest088 runTest089 runTest090 runTest091 runTest092 runTest093 runTest094 runTest095 runTest096 runTest097 runTest098 runTest099 runTest100 runTest101 runTest102 runTest103 runTest104 runTest105 runTest106 runTest107 runTest108 runTest109 runTest110 runTest111 runTest112 runTest113 runTest114 runTest115 runTest116 runTest117 runTest118 runTest119 runTest120 runTest121 runTest122 runTest123 runTest124 runTest125 runTest126 runTest127 runTest128 runTest129 runTest130 runTestCallback001 runTestCallback002 runTestCallback003 runTestCallback004 runTestCallback005 runTestCallback006 runTestCallback007 runTestCallback008 runTestCallback009 runTestCallback010 runTestCallback011 runTestCallback012 runTestCallback013 runTestCallback014 runTestCallback015 runTestCallback016 runTestCallback017 runTestCallback018 runTestCallback019 runTestCallback020 runTestCallback021 runTestCallback022 runTestCallback023 runTestCallback024 runTestCallback025 runTestCallback026 runTestCallback027 runTestCallback028 runTestCallback029 runTestCallback030 runTestCallback031 runTestCallback032 runTestCallback033 runTestCallback034 runTestCallback035 runTestCallback036 runTestCallback037 runTestCallback038 runTestCallback039 runTestCallback040 runTestCallback041 runTestCallback042 runTestCallback043 runTestCallback044 runTestCallback045 runTestCallback046 runTestCallback047 runTestCallback048 runTestCallback049 runTestCallback050 runTestCallback051 runTestCallback052 runTestCallback053 runTestCallback054 runTestCallback055 runTestCallback056 runTestCallback057 runTestCallback058 runTestCallback059 runTestCallback060 runTestCallback061 runTestCallback062 runTestCallback063 runTestCallback064 runTestCallback065 runTestCallback066 runTestCallback067 runTestCallback068 runTestCallback069 runTestCallback070 runTestCallback071 runTestCallback072 runTestCallback073 runTestCallback074 runTestCallback075 runTestCallback076 runTestCallback077 runTestCallback078 runTestCallback079 runTestCallback080 runTestCallback081 runTestCallback082 runTestCallback083 runTestCallback084 runTestCallback085 runTestCallback086 runTestCallback087 runTestCallback088 runTestCallback089 runTestCallback090 runTestCallback091 runTestCallback092 runTestCallback093 runTestCallback094 runTestCallback095 runTestCallback096 runTestCallback097 runTestCallback098 runTestCallback099 runTestCallback100 runTestCallback101 runTestCallback102 runTestCallback103 runTestCallback104 runTestCallback105 runTestCallback106 runTestCallback107 runTestCallback108 )</body><body package="DLLCC Test Suite">testSelectorsOE	^#(runtstOEbasicAt runtstOEbasicAtPut runtstOEbyteAt	runtstOEbyteAtPut runtstOEcopyCtoSTfloatArray	runtstOEcopyCtoSTIntArray runtstOEcopyCtoSTstring	runtstOEcopySTtoCfloatArray runtstOEcopySTtoCintArray	runtstOEcopySTtoCbytes runtstOEcopySTtoCstring runtstOECtoSTbool	runtstOECtoSTchar runtstOECtoSTfloat runtstOECtoSTint runtstOEfloatAt	runtstOEintegerAt runtstOEfloatAtPut runtstOEindexVarSize	runtstOEinstVarAt runtstOEinstVarAtPut runtstOEinstVarSize	runtstOEintegerAtPut runtstOEisArrayOfFloat runtstOEisArrayOfInteger	runtstOEisBoolean runtstOEisImmediate runtstOEisByteArray	runtstOEisCharacter runtstOEisFloat runtstOEisInteger runtstOEisString	runtstOEisByteLike runtstOEnil runtstOEreturnHandle runtstOEreturnNil runtstOEnestedReturn	runtstOEreturnTrue runtstOEreturnFalse runtstOESTtoCchar runtstOESTtoCfloat	runtstOESTtoCint runtstOEregHandleAt	runtstOEregHandleAtPut runtstOEallocFs runtstOEallocVs	runtstOEclassType runtstOEsignalSem runtstOEpostInt runtstOEisKindOf	runtstOEisDouble runtstOECtoSTdouble runtstOESTtoCdouble runtstOEclass	runtstOESTtoCbool runtstOEdoubleAt)</body><body package="DLLCC Test Suite">testSelectorsOEPerformance	^#(runOEPerformance)</body><body package="DLLCC Test Suite">testSelectorsOESendMessage	^#(runtstOESendMessageMany runtstOESendMessage0	runtstOESendMessage1 runtstOESendMessage2 runtstOESendMessage3	runtstOECSendMessage0 runtstOECSendMessage1 runtstOECSendMessage2 	runtstOECSendMessage3 runtstOECSendMessageMany runtstOESendMessage0IfFailNoReturn 	runtstOESendMessage0IfFailReturnFalse runtstOESendMessage0ReturnKeptReceiver)</body><body package="DLLCC Test Suite">testSelectorsUP	^#(runtstUPbasicAt runtstUPbasicAtPut runtstUPbyteAt	runtstUPbyteAtPut runtstUPcopyCtoSTfloatArray	runtstUPcopyCtoSTIntArray runtstUPcopyCtoSTstring	runtstUPcopySTtoCfloatArray runtstUPcopySTtoCintArray	runtstUPcopySTtoCbytes runtstUPcopySTtoCstring runtstUPCtoSTbool	runtstUPCtoSTchar runtstUPCtoSTfloat runtstUPCtoSTint runtstUPfloatAt	runtstUPintegerAt runtstUPfloatAtPut runtstUPindexVarSize	runtstUPinstVarAt runtstUPinstVarAtPut runtstUPinstVarSize	runtstUPintegerAtPut runtstUPisArrayOfFloat runtstUPisArrayOfInteger	runtstUPisBoolean runtstUPisImmediate runtstUPisByteArray	runtstUPisCharacter runtstUPisFloat runtstUPisInteger runtstUPisString	runtstUPisByteLike runtstUPnil runtstUPreturnHandle runtstUPreturnNil runtstUPnestedReturn	runtstUPreturnTrue runtstUPreturnFalse runtstUPSTtoCchar runtstUPSTtoCfloat	runtstUPSTtoCint runtstUPerrorHandler runtstUPregHandleAt	runtstUPregHandleAtPut runtstUPallocFs runtstUPallocVs	runtstUPclassType runtstUPsignalSem runtstUPpostInt runtstUPisKindOf	runtstUPisDouble runtstUPCtoSTdouble runtstUPSTtoCdouble runtstUPclass	runtstUPSTtoCbool	runtstUPmustBeArrayOfFloat runtstUPmustBeArrayOfInteger runtstUPmustBeBoolean	runtstUPmustBeByteArray runtstUPmustBeByteLike runtstUPmustBeCharacter	runtstUPmustBeInteger runtstUPmustBeString runtstUPdoubleAt)</body><body package="DLLCC Test Suite">testSelectorsUPPerformance	^#(runUPPerformance)</body><body package="DLLCC Test Suite">testSelectorsUPSendMessage	^#(runtstUPSendMessageMany runtstUPSendMessage0	runtstUPSendMessage1 runtstUPSendMessage2 runtstUPSendMessage3	runtstUPCSendMessage0 runtstUPCSendMessage1 runtstUPCSendMessage2 	runtstUPCSendMessage3 runtstUPCSendMessageMany runtstUPSendMessage0IfFailNoReturn 	runtstUPSendMessage0IfFailReturnFalse runtstUPSendMessage0ReturnKeptReceiver)</body></methods><methods><class-id>External.DLLANDCTest</class-id> <category>running</category><body package="DLLCC Test Suite">interface	"Return an interface object used to run tests."	nil == interface ifFalse: [^interface].	self interfaceClass isNil ifTrue: [self error: 'no interface for run mode'].	self interfaceClass optimizationLevel ~= self optimizationLevel		ifTrue: [self interfaceClass optimizationLevel: self optimizationLevel].	interface := self interfaceClass new.	^interface</body><body package="DLLCC Test Suite">interfaceClass	^nil</body><body package="DLLCC Test Suite">message: aString	self assert: false description: aString</body><body package="DLLCC Test Suite">optimizationLevel	"#full or #debug"	^#full</body></methods><methods><class-id>External.DLLANDCTest</class-id> <category>top level</category><body package="DLLCC Test Suite">nonUPTests	^#(runTest001 runTest002 runTest003 runTest004 runTest005 runTest006 runTest007 runTest008 runTest009 runTest010 runTest011 runTest012 runTest013 runTest014 runTest015 runTest016 runTest017 runTest018 runTest019 runTest020 runTest021 runTest022 runTest023 runTest024 runTest025 runTest026 runTest027 runTest028 runTest029 runTest030 runTest031 runTest032 runTest033 runTest034 runTest035 runTest036 runTest037 runTest038 runTest039 runTest040 runTest041 runTest042 runTest043 runTest044 runTest045 runTest046 runTest047 runTest048 runTest049 runTest050 runTest051 runTest052 runTest053 runTest054 runTest055 runTest056 runTest057 runTest058 runTest059 runTest060 runTest061 runTest062 runTest063 runTest064 runTest065 runTest066 runTest067 runTest068 runTest069 runTest070 runTest071 runTest072 runTest073 runTest074 runTest075 runTest076 runTest077 runTest078 runTest079 runTest080 runTest081 runTest082 runTest083 runTest084 runTest085 runTest086 runTest087 runTest088 runTest089 runTest090 runTest091 runTest092 runTest093 runTest094 runTest095 runTest096 runTest097 runTest098 runTest099 runTest100 runTest101 runTest102 runTest103 runTest104 runTest105 runTest106 runTest107 runTest108 runTest109 runTest110 runTest111 runTest112 runTest113 runTest114 runTest115 runTest116 runTest117 runTest118 runTest119 runTest120 runTest121 runTest122 runTest123 runTest124 runTest125 runTest126 runTest127 runTest128 runTest129 runTest130 runTestCallback001 runTestCallback002 runTestCallback003 runTestCallback004 runTestCallback005 runTestCallback006 runTestCallback007 runTestCallback008 runTestCallback009 runTestCallback010 runTestCallback011 runTestCallback012 runTestCallback013 runTestCallback014 runTestCallback015 runTestCallback016 runTestCallback017 runTestCallback018 runTestCallback019 runTestCallback020 runTestCallback021 runTestCallback022 runTestCallback023 runTestCallback024 runTestCallback025 runTestCallback026 runTestCallback027 runTestCallback028 runTestCallback029 runTestCallback030 runTestCallback031 runTestCallback032 runTestCallback033 runTestCallback034 runTestCallback035 runTestCallback036 runTestCallback037 runTestCallback038 runTestCallback039 runTestCallback040 runTestCallback041 runTestCallback042 runTestCallback043 runTestCallback044 runTestCallback045 runTestCallback046 runTestCallback047 runTestCallback048 runTestCallback049 runTestCallback050 runTestCallback051 runTestCallback052 runTestCallback053 runTestCallback054 runTestCallback055 runTestCallback056 runTestCallback057 runTestCallback058 runTestCallback059 runTestCallback060 runTestCallback061 runTestCallback062 runTestCallback063 runTestCallback064 runTestCallback065 runTestCallback066 runTestCallback067 runTestCallback068 runTestCallback069 runTestCallback070 runTestCallback071 runTestCallback072 runTestCallback073 runTestCallback074 runTestCallback075 runTestCallback076 runTestCallback077 runTestCallback078 runTestCallback079 runTestCallback080 runTestCallback081 runTestCallback082 runTestCallback083 runTestCallback084 runTestCallback085 runTestCallback086 runTestCallback087 runTestCallback088 runTestCallback089 runTestCallback090 runTestCallback091 runTestCallback092 runTestCallback093 runTestCallback094 runTestCallback095 runTestCallback096 runTestCallback097 runTestCallback098 runTestCallback099 runTestCallback100 runTestCallback101 runTestCallback102 runTestCallback103 runTestCallback104 runTestCallback105 runTestCallback106 runTestCallback107 runTestCallback108 )</body></methods><methods><class-id>External.DLLANDCTest class</class-id> <category>class initialization</category><body package="DLLCC Test Suite">initFailCodes	FailCodes := IdentityDictionary new: 20.	FailCodes at: 0 put: 'failure code lost'.	FailCodes at: -1 put: 'C argument out of range'.	FailCodes at: -2 put: 'Smalltalk argument out of range'.	FailCodes at: -3 put: 'argument not an object'.	FailCodes at: -4 put: 'object incorrect type'.	FailCodes at: -5 put: 'declared arg wrong type'.	FailCodes at: -6 put: 'C int was not a SmallInteger'.	FailCodes at: -7 put: 'C data structure too small'.	FailCodes at: -8 put: 'Smalltalk datum too small to be represented in C'.	FailCodes at: -9 put: 'Smalltalk datum too big to be represented in C'.	FailCodes at: -10 put: 'Smalltalk object memory allocation failed'.	FailCodes at: -11 put: 'arg count mismatch'.	FailCodes at: -12 put: 'user primitive is not installed'.	FailCodes at: -13 put: 'too many arguments'.	FailCodes at: -14 put: 'no value returned'.	FailCodes at: -15 put: 'assertion failure'</body><body package="DLLCC Test Suite">initialize	"DLLANDCTest initialize"	super initialize.	self initFailCodes</body></methods><methods><class-id>External.DLLANDCTest class</class-id> <category>Accessing</category><body package="DLLCC Test Suite">allTestSelectors	^self new testSelectorsNonUP</body></methods><methods><class-id>External.DLLANDCTest class</class-id> <category>testing</category><body package="DLLCC Test Suite">isAbstract	^self new interfaceClass isNil</body><body package="DLLCC Test Suite">shouldInheritSelectors	^true</body></methods><methods><class-id>External.DLLANDCBlockingTest</class-id> <category>running</category><body package="DLLCC Test Suite">interfaceClass	^DLLANDCTestBlockingInterface</body></methods><methods><class-id>External.DLLANDCBlockingTest class</class-id> <category>Accessing</category><body package="DLLCC Test Suite">allTestSelectors	^super allTestSelectors,		self new testSelectorsUP,		self new testSelectorsUPSendMessage,		self new testSelectorsUPPerformance,		self new testSelectorsOE,		self new testSelectorsOESendMessage,		self new testSelectorsOEPerformance</body></methods><methods><class-id>External.DLLANDCThreadedTest</class-id> <category>running</category><body package="DLLCC Test Suite">interfaceClass	^DLLANDCTestThreadedInterface</body></methods><initialize><class-id>External.DLLANDCTest</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>