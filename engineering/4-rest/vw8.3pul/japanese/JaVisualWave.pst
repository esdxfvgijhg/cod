<?xml version="1.0"?><st-source><!-- Name: JaVisualWaveNotice: Copyright © 2010-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This parcel supports the localization of the VisualWave for Japanese.DbIdentifier: bear73DbTrace: 364423DbUsername: nrossDbVersion: 7.9 - 2DevelopmentPrerequisites: #(#(#any 'Wave-Base' '') #(#any 'JaUIPainter' '') #(#any 'JaWavePreLoad' ''))HideSource: falsePackageName: JaVisualWaveParcel: #('JaVisualWave')ParcelName: JaVisualWavePrerequisiteParcels: #(#('Wave-Base' '') #('JaUIPainter' '') #('JaWavePreLoad' ''))PrintStringCache: (7.9 - 2,nross)SaveSource: trueVersion: 7.9 - 2Post-Load Block: 	[:package | #{VisualWave.StreamedService} ifDefinedDo: [:cls | cls initialize].#{VisualWave.ServerConsole} ifDefinedDo: [:cls | cls showMenuBar].#{VisualWave.WebLookPolicy} ifDefinedDo: [:cls | cls initialize].StreamEncoder updateEncoderDirectory.#{VariableSizeTextAttributes} ifDefinedDo:[:vstAttr | vstAttr initializeHTMLDefault]]Date: 7:26:57 AM March 2, 2012 --><time-stamp>From VisualWorks®, Pre-Release 7.9 (mar12.1) of March 2, 2012 on March 2, 2012 at 7:26:57 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><shared-variable><name>DefaultEncoding</name><environment>VisualWave.StreamedService</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><initializer>nil</initializer><attributes><package>JaVisualWave</package></attributes></shared-variable><methods><class-id>VisualWave.WebRequest</class-id> <category>accessing-data</category><body package="JaVisualWave">cookieAt: aString put: anObject	cookieData isNil ifTrue: [		cookieData := self initiator applicationWWWFormUrlEncoder ].	cookieData at: aString put: anObject.</body></methods><methods><class-id>VisualWave.WebRequest</class-id> <category>reading</category><body package="JaVisualWave">decodeCookieData		self HTTP_COOKIE size &gt; 0 ifTrue: 		[self cookieData: (self initiator applicationWWWFormUrlEncoder 					decodeCookieDataOver: (ReadStream on: self HTTP_COOKIE))]</body><body package="JaVisualWave">decodeQueryData	self QUERY_STRING size &gt; 0 ifTrue: 		[self queryData: (self initiator applicationWWWFormUrlEncoder 					decodeFormDataOver: (ReadStream on: self QUERY_STRING))]</body></methods><methods><class-id>VisualWave.WebRequest</class-id> <category>accessing-data</category><body package="JaVisualWave">queryDataAt: aString put: anObject	queryData isNil ifTrue: [		queryData := self initiator applicationWWWFormUrlEncoder ].	queryData at: aString put: anObject.</body></methods><methods><class-id>VisualWave.InternetMedia class</class-id> <category>reading</category><body package="JaVisualWave">receiveOver: aStream withHeaders: messageHeaders	"aStream should be positioned after the headers and the blank line"	| implementor media |	implementor := ImplementorDictionary at: (messageHeaders valueAt: 'Content-Type') ifAbsent: [DefaultImplementor]. 	media := implementor new.	media headers: messageHeaders.	(media isKindOf: IM_ApplicationWWWFormUrlEncoded)		ifTrue: [media isUninitialized ifTrue: [media initializeCharsetEncoder: aStream charset]].	media receiveEntityOver: aStream.	^media."	| media |self halt.	media := (self classForHeaders: messageHeaders) new.	media headers: messageHeaders.	media receiveEntityOver: aStream.	^media."</body></methods><methods><class-id>VisualWave.InternetMedia</class-id> <category>accessing</category><body package="JaVisualWave">mediaType	"Try reading the type from the headers. Subclasses which have an implied type should override."	| type |	type := self headers valueAt: 'Content-type'.	^type isNil		ifTrue: [self subclassResponsibility]		ifFalse: [type readStream upTo: $;]</body></methods><methods><class-id>VisualWave.HTMLTitle</class-id> <category>HTML-creation</category><body package="JaVisualWave">emitContentsOn: aStream	aStream nextPutAll: (HTMLText asHttp7bitFrom8bit: name)</body></methods><methods><class-id>VisualWave.IM_ApplicationWWWFormUrlEncoded</class-id> <category>accessing</category><body package="JaVisualWave">initializeCharsetEncoder: charset	charsetEncoder := charset isNil		ifTrue: [nil]		ifFalse: [StreamEncoder new: charset].</body></methods><methods><class-id>VisualWave.IM_ApplicationWWWFormUrlEncoded</class-id> <category>testing</category><body package="JaVisualWave">isUninitialized	^charsetEncoder == #uninitialized</body></methods><methods><class-id>VisualWave.IM_ApplicationWWWFormUrlEncoded</class-id> <category>reading</category><body package="JaVisualWave">receiveEntityOver: aStream	"Assuming aStream includes x-ww-form-url-encoded style data, from its current position to its content length, this method will properly populate this instance with a representation of that form data."	| substream  |		substream := (self headers headerAt: 'Content-Length') isNil 		ifTrue: [aStream]		ifFalse: [ReadStream on: (aStream nextAvailable: (self headers valueAt: 'Content-Length') asNumber)].	self decodeFormDataOver: substream.	aStream isText ifFalse: [aStream text].</body></methods><methods><class-id>VisualWave.ServerConsole</class-id> <category>menus</category><body package="JaVisualWave">availableEncodingsFor: encodingChannel	| menu encoderList nm itemConstructor items values allowedEncodingsOrNil |	menu := Menu new.	items := OrderedCollection new.	values := OrderedCollection new.	itemConstructor := [:label :val | | item |			item := MenuItem labeled: label.			item indication: [encodingChannel value = val ifTrue: [true] ifFalse: [nil]].			item enabled: [encodingChannel value notNil].			items add: item.			values add: [encodingChannel value: val]].	nm := (StreamEncoder lookupEncoderDirectory: #default) streamEncodingType asString.	itemConstructor value: (#Default &lt;&lt; #labels &gt;&gt;'Default') asString, ' (',nm,')' value: #default.	menu addItemGroup: items values: values.	items := OrderedCollection new.	values := OrderedCollection new.	allowedEncodingsOrNil := StreamedService allowedEncodings.	allowedEncodingsOrNil isNil		ifTrue: [encoderList := StreamEncoder availableEncodings asSortedStrings.				encoderList remove: #default.				encoderList remove: #Source.				encoderList remove: #URL.				encoderList do:					[:enc |					itemConstructor value: enc asString value: enc]]		ifFalse: [allowedEncodingsOrNil do:					[:enc | 					(StreamEncoder availableEncodings includes: enc)						ifTrue: [itemConstructor value: enc asString value: enc]]].	menu addItemGroup: items values: values.	^menu</body><body package="JaVisualWave">menuBar	| menuBar adaptor submenu |	menuBar := self class menuBar.	(menuBar atNameKey: #settingsID)		enabled: [#{VisualWave.WebSettings} isDefined].	(menuBar atNameKey: #loadID)		enabled: [#{VisualWave.WaveParcelManager} isDefined].	(menuBar atNameKey: #configureID)		enabled: [#{VisualWave.WaveParcelManager} isDefined].	adaptor := PluggableAdaptor on: self.	adaptor		getBlock: [:m | m allServers selection isNil						ifTrue: [nil]						ifFalse: [m allServers selection service encoding]]		putBlock: [:m :v | m allServers selection isNil						ifFalse: [m allServers selection service encoding: v]]		updateBlock: [:m :a :p | false].	submenu := self availableEncodingsFor: adaptor.	submenu		addItemGroup: (Array with:			((MenuItem labeled: (#SetToDefault &lt;&lt; #menus &gt;&gt; 'Set to Default') asString) enabled: [self allServers selection notNil]))		values: #(#serverEncodingToDefault).	(menuBar atNameKey: #encodingID)		submenu: submenu;		enabled: [true "self allServers selection notNil"].	^menuBar</body></methods><methods><class-id>VisualWave.ServerConsole</class-id> <category>actions</category><body package="JaVisualWave">serverEncodingToDefault	"Set the selected server's encoding to be the default."	StreamedService defaultEncoding: self allServers selection service encoding</body></methods><methods><class-id>VisualWave.WaveTransport</class-id> <category>private</category><body package="JaVisualWave">streamFromAccessor: anIOAccessor	| connection stream |"make indierct reference to connection class to allow subclassing"	connection := self connectionClass  new		input:  anIOAccessor;		output: anIOAccessor.	stream := (connection withEncoding: (self marshaler service encoding)) readAppendStream.	stream lineEndConvention: self defaultLineEndConvention.	^stream</body></methods><methods><class-id>OS.BufferedExternalStream</class-id> <category>accessing</category><body package="JaVisualWave">charset	^nil</body></methods><methods><class-id>Core.EncodedStream</class-id> <category>accessing</category><body package="JaVisualWave">charset	| encoding |	encoding := self encoding.	encoding == #'UTF-8'		ifTrue: [^'utf-8'].	encoding == #JIS		ifTrue: [^'iso-2022-jp'].	encoding == #JapaneseEUC		ifTrue: [^'euc-jp'].	(encoding == #ShiftJIS or: [encoding == #MS_CP_932])		ifTrue: [^'x-sjis'].	^nil</body></methods><methods><class-id>VisualWave.WebRequestService</class-id> <category>utilities</category><body package="JaVisualWave">applicationWWWFormUrlEncoder	| encoder |	encoder := IM_ApplicationWWWFormUrlEncoded new.	encoder initializeCharsetEncoder: encoding.	^encoder</body></methods><methods><class-id>VisualWave.WebRequestService</class-id> <category>private - serving requests</category><body package="JaVisualWave">composeRequestFrom: aStream	^self webRequestClass new		initiator: self;		receiveOver: aStream;		adjustPathForVirtualDirectory.</body></methods><methods><class-id>VisualWave.WebPage</class-id> <category>accessing</category><body package="JaVisualWave">label: aString	self htmlEntity title: (aString isNil ifTrue: [aString] ifFalse: [aString asString])</body></methods><methods><class-id>VisualWave.WebLookPolicy class</class-id> <category>class initialization</category><body package="JaVisualWave">initialize	"WebLookPolicy initialize." 	| characterAttributes textAttributes fontDescription |	useSystemFontOnWidgets := true.	characterAttributes := VariableCharacterAttributes newWithDefaultAttributes.	fontDescription := self portableFontDescription		family: #('ＭＳ Ｐゴシック' 'helv*' '*');		pixelSize: 14; boldness: 0.7. 	characterAttributes setDefaultQuery: fontDescription.	characterAttributes noScaling.	textAttributes := TextAttributes new.	textAttributes setCharacterAttributes: characterAttributes.	systemAttributes := textAttributes.	systemWidgetAttributes := textAttributes.	GrayPattern := Pattern from: (CachedImage on: (Image extent: 8@8 depth: 1 palette: MappedPalette whiteBlack bits: #[		2r10101010	 	2r01010101		2r10101010	 	2r01010101		2r10101010	 	2r01010101		2r10101010	 	2r01010101] pad: 8)).</body></methods><methods><class-id>VisualWave.WebLookPolicy</class-id> <category>private</category><body package="JaVisualWave">setTheLabelFor: spec component: c in: builder 	"GIF Label"	| lab aText |	lab := spec labelInBuilder: builder.	lab == nil ifTrue: [^self]. 	(spec hasCharacterOrientedLabel and: [spec enforceBoundaryWithGIF not])		ifTrue: [	self setStyleOf: c to: spec style.				aText := self setFontStyleOf: lab from: spec. 				c setLabelString: aText. 				^c].					"spec has visual label, or needs synthesized GIF"	spec enforceBoundaryWithGIF  		ifFalse: 			[lab := lab asWebVisual.			lab bounds: (spec layout rectangleRelativeTo: builder boundsReferent preferred: lab bounds).			lab javaScriptEventHandlers: spec javaScriptEventHandlers copy]		ifTrue: 			[spec hasCharacterOrientedLabel ifTrue: 				[lab := c makeTextLabelFor: lab asText allBold.				self setStyleOf: lab to: spec style.].			c colors: spec colors.			c useRendererWithWidgetPolicy: self widgetPolicy.			c renderer bounds: (0@0 extent: (spec layout rectangleRelativeTo: builder boundsReferent preferred: lab bounds) extent)].	c setLabel: lab</body></methods><methods><class-id>Graphics.VariableSizeTextAttributes class</class-id> <category>class initialization</category><body package="JaVisualWave">initializeHTMLDefault"self initializeHTMLDefault"	| style cStyle |	cStyle := VariableCharacterAttributes newWithDefaultAttributes.	cStyle setDefaultQuery: (FontDescription new			family: #('ＭＳ Ｐゴシック' 'helv' 'helvetica' 'arial' '*');			manufacturer: #('adobe' '*');			fixedWidth: false;			serif: false;			italic: false;			boldness: 0.5;			pixelSize: 12).	style := self new.	style setCharacterAttributes: cStyle. 	style scalingFactor: 1.2.	self doHTMLSmall: cStyle.		self doHTMLSmaller: cStyle.	self doHTMLSmallest: cStyle.	cStyle at: #larger put: [:query :value :fontPolicy | | size |						size := (cStyle defaultFontFor: fontPolicy) pixelSize.						size &lt; 16							ifTrue:	[size := size + 4]							ifFalse:	[size &lt; 36									ifTrue:	[size := size + 6]									ifFalse:	[size := size * 6 // 5]].						query pixelSize: size].	cStyle at: #largest put: [:query :value :fontPolicy | | size |						size := (cStyle defaultFontFor: fontPolicy) pixelSize.						size &lt; 16							ifTrue:	[size := size + 4]							ifFalse:	[size &lt; 36									ifTrue:	[size := size + 6]									ifFalse:	[size := size * 6 // 5]].						query pixelSize: size].	cStyle at: #anchorSource put: [ 	:query | query color: ColorValue blue; boldness: 0.5; underline: false].	cStyle at: #anchorDestination put: [ 	:query | query color: ColorValue blue; boldness: 0.75; underline: true].	cStyle at: #em put: [ 	:query | query  boldness: 0.5; italic: true].	cStyle at: #strong put: [ 	:query | query  boldness: 0.70; underline: false].	self styleNamed: #HTMLDefault put: style</body></methods><methods><class-id>Core.WriteStream</class-id> <category>accessing</category><body package="JaVisualWave">charset	^nil</body></methods><methods><class-id>VisualWave.HttpWebRequestService</class-id> <category>private - serving requests</category><body package="JaVisualWave">composeRequestFrom: aStream	| httpRequest webRequest |	httpRequest := self httpRequestClass receiveOver: aStream. 	webRequest := self webRequestClass new.	webRequest initiator: self.	webRequest fromHttpRequest: httpRequest server: self server stream: aStream.	webRequest adjustPathForVirtualDirectory.	^webRequest</body></methods><methods><class-id>Core.StreamEncoder class</class-id> <category>private</category><body package="JaVisualWave">updateEncoderDirectory	| ascii |	ascii := ByteCharacterEncoder new.	ascii name: #'US-ASCII'.	ascii streamEncodingType: #'US-ASCII'.	ascii alternateNames: #(#ASCII).	0 to: 127 do:		[:i |		ascii encode: i asCharacter as: i + 128.		ascii encode: i asCharacter as: i].	EncoderDirectory := (IdentityDictionary new)		at: #'UTF-8' put: #'UTF-8';		at: #default put: [Locale current defaultStreamEncoder];		at: #'utf-8' put: #UTF_8;		at: #'iso-2022-jp' put: #JIS;		at: #'euc-jp' put: #JapaneseEUC;		at: #'x-sjis' put: #MS_CP_932;		at: #source put: #UTF_8;		yourself.	ascii registerOn: EncoderDirectory.	CharacterEncoderPool localBindings do: [:bnd |		bnd value registerOn: EncoderDirectory].	StreamEncoder allSubclasses do:		[:class |		| sym |		sym := class streamEncodingType.		sym isNil ifFalse: [EncoderDirectory at: sym asLowercase asSymbol put: class].		class alternateNames do: [:nm |			EncoderDirectory at: nm asLowercase asSymbol put: class]]</body></methods><methods><class-id>VisualWave.HTMLText class</class-id> <category>utility</category><body package="JaVisualWave">asHttp7bitFrom8bit: aString 	| stream high7 high8 |	stream := WriteStream on: (String new: self size * 2).	high7 := Character value: 127.	high8 := Character value: 256.	aString do: 			[:c | 			((c &gt; high7) and:[c &lt; high8])				ifTrue: 					[| entity |					entity := CharacterEntities ifNil: [nil] ifNotNil: [CharacterEntities at: c ifAbsent: [nil]].					entity isNil 						ifTrue: 							[stream								nextPutAll: '&amp;#';								print: c asInteger;								nextPut: $;]						ifFalse: 							[stream								nextPutAll: '&amp;';								nextPutAll: entity;								nextPut: $;]]				ifFalse: [stream nextPut: c]].	^stream contents</body></methods><methods><class-id>VisualWave.HTMLText</class-id> <category>converting</category><body package="JaVisualWave">convertFromString: aString convertCRs: insertBreaks	"Form information on character mappings, see	http://www.utoronto.ca/webdocs/HTMLdocs/NewHTML/iso_table.html"	| writeStream readStream c idx |	writeStream := TextStream on: (String new: (aString size * 1.05) asInteger).	readStream := ReadStream on: aString.	idx := 0.	[readStream atEnd]		whileFalse: 			[idx := idx + 1.			writeStream emphasis: (self emphasisAt: idx).			c := readStream next.			('"' includes: c)				ifTrue: ["common special characters"						c == $"							ifTrue: [writeStream nextPutAll: '&amp;quot;']							ifFalse: [((c == Character cr) &amp; insertBreaks)									ifTrue: [writeStream nextPutAll: '&lt;BR&gt;' ]]]				ifFalse: [(c asInteger &gt; 191 and: [c asInteger &lt; 256])						ifTrue: [writeStream nextPutAll: '&amp;#'; nextPutAll: c asInteger printString; nextPut: $;]						ifFalse: [writeStream nextPut: c]]].	^writeStream contents asHTMLText</body></methods><methods><class-id>Kernel.UserMessage</class-id> <category>converting</category><body package="JaVisualWave">asDecodedString	| aString |	aString := self asString.	^aString stripHTMLEncodings</body><body package="JaVisualWave">asHTMLEncodedText	^self asString asHTMLEncodedText</body></methods><methods><class-id>VisualWave.StreamedService class</class-id> <category>defaults</category><body package="JaVisualWave">allowedEncodings	"Answer a collection of available encodings or nil for all."	^#(#'ISO-8859-1' #JapaneseEUC #JIS #MS_CP_932 #ShiftJIS #'UTF-8')</body><body package="JaVisualWave">defaultEncoding	"Answer the default encoding type."	^DefaultEncoding</body><body package="JaVisualWave">defaultEncoding: aSymbol	"Set the default encoding type."	DefaultEncoding := aSymbol</body></methods><methods><class-id>VisualWave.StreamedService class</class-id> <category>class initialization</category><body package="JaVisualWave">initialize	"StreamedService initialize"	DefaultEncoding := #default</body></methods><methods><class-id>VisualWave.StreamedService</class-id> <category>accessing</category><body package="JaVisualWave">encoding	"Answer encoding type."	encoding isNil		ifTrue: [encoding := self class defaultEncoding].	^encoding</body><body package="JaVisualWave">encoding: aSymbol	"Set encoding type."	encoding := aSymbol</body></methods><methods><class-id>VisualWave.StreamedService</class-id> <category>utility</category><body package="JaVisualWave">streamFromAccessor: anIOAccessor	| connection stream |	connection := self connectionClass  new		input:  anIOAccessor;		output: anIOAccessor.	stream := (connection withEncoding: self encoding) readAppendStream.	stream lineEndConvention: self defaultLineEndConvention.	^stream</body></methods><methods><class-id>VisualWave.HTMLPage</class-id> <category>internet media support</category><body package="JaVisualWave">sendHeadersOver: aStream	"Only absolutely necessary header is Content-type"	| charset |	aStream nextPutAll: 'Content-Type: text/html'.	charset := aStream charset.	charset isNil		ifFalse: [aStream nextPutAll: '; charset='; nextPutAll: charset].	aStream crlf.	self cookies isNil		ifFalse:			[self cookies do:				[:cookie | cookie isNil ifFalse:[aStream nextPutAll: 'Set-Cookie: ', cookie valueString; crlf]]]</body></methods><methods><class-id>VisualWave.IM_GenericViewer</class-id> <category>private</category><body package="JaVisualWave">updateCurrentText	self desiredFormat value == #text ifTrue: [^self currentText value: media entityBytes asString].	self desiredFormat value == #hex ifTrue: [^self currentText value: (self hexDumpFor: media entityBytes asByteArray)].	self currentText value: String new</body></methods><methods><class-id>VisualWave.ServerConsole class</class-id> <category>resources</category><body package="JaVisualWave">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_File 					#defaultString: '&amp;File' 					#catalogID: #WaveServerMenus ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Save 								#defaultString: '&amp;Save' 								#catalogID: #WaveServerMenus ) 							#value: #save ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Save_As 								#defaultString: 'Save &amp;As...' 								#catalogID: #WaveServerMenus ) 							#value: #saveAs ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Se_ttings 								#defaultString: 'Se&amp;ttings...' 								#catalogID: #WaveServerMenus ) 							#nameKey: #settingsID 							#value: #settings ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #E_xitVisualWave 								#defaultString: 'E&amp;xit VisualWave...' 								#catalogID: #WaveServerMenus ) 							#value: #quit ) ) #(2 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Server 					#defaultString: '&amp;Server' 					#catalogID: #WaveServerMenus ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Create 								#defaultString: '&amp;Create...' 								#catalogID: #WaveServerMenus ) 							#nameKey: #createID 							#value: #createServer ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Edit 								#defaultString: '&amp;Edit...' 								#catalogID: #WaveServerMenus ) 							#nameKey: #editID 							#value: #viewServer ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Start 								#defaultString: '&amp;Start' 								#catalogID: #WaveServerMenus ) 							#nameKey: #startID 							#value: #startServer ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Edit_Resolver 								#defaultString: 'Edit &amp;Resolver...' 								#catalogID: #WaveServerMenus ) 							#nameKey: #editResolverID 							#value: #viewResolver ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Shut_down 								#defaultString: 'Shut&amp;down' 								#catalogID: #WaveServerMenus ) 							#nameKey: #shutdownID 							#value: #shutdownServer ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Remove 								#defaultString: '&amp;Remove' 								#catalogID: #WaveServerMenus ) 							#nameKey: #removeID 							#value: #deleteServer ) ) #(1 3 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Encoding 					#defaultString: '&amp;Encoding' 					#catalogID: #menus ) 				#nameKey: #encodingID ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Applications 					#defaultString: '&amp;Applications' 					#catalogID: #WaveServerMenus ) 				#enablementSelector: #visualWaveIsLoaded 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Load 								#defaultString: '&amp;Load...' 								#catalogID: #WaveServerMenus ) 							#nameKey: #loadID 							#value: #loadApplications 							#enablementSelector: #visualwaveIsLoaded ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Configure 								#defaultString: '&amp;Configure...' 								#catalogID: #WaveServerMenus ) 							#nameKey: #configureID 							#value: #configureApplications 							#enablementSelector: #visualwaveIsLoaded ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Tools 					#defaultString: '&amp;Tools' 					#catalogID: #WaveServerMenus ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_BookmarkManager 								#defaultString: '&amp;Bookmark Manager' 								#catalogID: #WaveServerMenus ) 							#value: #openBookmarks ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Help 					#defaultString: '&amp;Help' 					#catalogID: #WaveServerMenus ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #About_VisualWave 								#defaultString: 'About &amp;VisualWave...' 								#catalogID: #WaveServerMenus ) 							#value: #helpAbout ) ) #(1 ) nil ) ) ) #(6 ) nil ) decodeAsLiteralArray</body></methods><initialize><class-id>VisualWave.StreamedService</class-id></initialize><initialize><class-id>VisualWave.WebLookPolicy</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>WebRequest</name><environment>VisualWave</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>httpRequest serverEnvironment queryData cookieData responseStream consumedPath unconsumedPath initiator entities webSite session isAnswered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Support-Web-Framework</category><attributes><package>Wave-Server</package></attributes></class><class><name>WriteStream</name><environment>Core</environment><super>Core.InternalStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class><class><name>InternetMedia</name><environment>VisualWave</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>headers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Net</category><attributes><package>Wave-Server</package></attributes></class><class><name>HTMLPage</name><environment>VisualWave</environment><super>VisualWave.HTMLEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>head body dtd cookies script noScript </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-HTML</category><attributes><package>Wave-Base</package></attributes></class><class><name>ServerConsole</name><environment>VisualWave</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>allServers serverChannel editor watcher menuBarHeight </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Server</category><attributes><package>Wave-Server</package></attributes></class><class><name>IM_ApplicationWWWFormUrlEncoded</name><environment>VisualWave</environment><super>VisualWave.InternetMedia</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nameValueDictionary orderedNameValues charsetEncoder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Net</category><attributes><package>Wave-Server</package></attributes></class><class><name>HTMLText</name><environment>VisualWave</environment><super>Core.Text</super><private>false</private><indexed-type>none</indexed-type><inst-vars>htmlTags visible </inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Wave-HTML</category><attributes><package>Wave-Base</package></attributes></class><class><name>StreamedService</name><environment>VisualWave</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>encoding </inst-vars><class-inst-vars></class-inst-vars><imports>			private IOConstants.*			</imports><category>Wave-Server</category><attributes><package>Wave-Server</package></attributes></class><class><name>WebLookPolicy</name><environment>VisualWave</environment><super>UI.UILookPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>userAgentPatterns userAgentStrings </class-inst-vars><imports></imports><category>Wave-Support-Builder</category><attributes><package>Wave-Base</package></attributes></class><class><name>UserMessage</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>defaultString key catalogID </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Internationalization</category><attributes><package>UIBasics-Internationalization</package></attributes></class><class><name>WebRequestService</name><environment>VisualWave</environment><super>VisualWave.StreamedService</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resolver server trapErrors logChannels logChannelsMutex loadLogChannel </inst-vars><class-inst-vars></class-inst-vars><imports>			private IOConstants.*			</imports><category>Wave-Server</category><attributes><package>Wave-Server</package></attributes></class><class><name>WaveTransport</name><environment>VisualWave</environment><super>Opentalk.StreamTransport</super><private>false</private><indexed-type>none</indexed-type><inst-vars>socket </inst-vars><class-inst-vars></class-inst-vars><imports>			private Net.*			private IOConstants.*			</imports><category>Opentalk-CGI</category><attributes><package>Wave-Server</package></attributes></class><class><name>BufferedExternalStream</name><environment>OS</environment><super>OS.ExternalStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lineEndCharacter binary lineEndConvention bufferType ioBuffer ioConnection </inst-vars><class-inst-vars></class-inst-vars><imports>			private OS.IOConstants.*			</imports><category>OS-Streaming</category><attributes><package>OS-Streaming</package></attributes></class><class><name>EncodedStream</name><environment>Core</environment><super>Core.PeekableStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>binary stream encoder policy lineEndConvention lineEndCharacter skipSize </inst-vars><class-inst-vars></class-inst-vars><imports>			private OS.IOConstants.*			</imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class><class><name>IM_GenericViewer</name><environment>VisualWave</environment><super>VisualWave.IM_Viewer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentText desiredFormat </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Net</category><attributes><package>Wave-Server</package></attributes></class><class><name>HTMLTitle</name><environment>VisualWave</environment><super>VisualWave.HTMLEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-HTML</category><attributes><package>Wave-Base</package></attributes></class><class><name>HttpWebRequestService</name><environment>VisualWave</environment><super>VisualWave.WebRequestService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private IOConstants.*			</imports><category>Wave-Server</category><attributes><package>Wave-Server</package></attributes></class><class><name>WebPage</name><environment>VisualWave</environment><super>VisualWave.WebDependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component application inlineDispatcher lookPreferences background masterPage sendWindowEvents receiveWindowEvents windowEventBlock downcastSubmit windowType phaseError dataError </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Support-Web-Views</category><attributes><package>Wave-Base</package></attributes></class></st-source>