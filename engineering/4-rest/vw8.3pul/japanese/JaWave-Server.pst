<?xml version="1.0"?><st-source><!-- Name: JaWave-ServerNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: This parcel supports the localization of Wave Server for Japanese.Note: UTF8 is used for the encoding of URL, QUERY_STRING, and HTTP_COOKIE. DbIdentifier: bear73DbTrace: 400896DbUsername: nrossDbVersion: 7.8DevelopmentPrerequisites: #(#(#parcel 'Wave-Server' ''))HideSource: falsePackageName: JaWave-ServerParcel: #('JaWave-Server')ParcelName: JaWave-ServerPrintStringCache: (7.8,nross)SaveSource: trueVersion: 7.8Post-Load Block: 	[:package | StreamEncoder flushEncoderDirectory.]Date: 7:27:15 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:27:15 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>VisualWave.HTTPCookie</class-id> <category>converting</category><body package="JaWave-Server">valueString	"Return a string describing the value part of this cookie header"	| valueStream |	(self name isNil or: [self value isNil]) ifTrue: [^String new].	valueStream := WriteStream on: (String new: 128).	valueStream		nextPutAll: ((VisualWave.URLEncoder new setEncoder: UTF8StreamEncoder new) encode: self name asString);		nextPut: $=;		nextPutAll: ((VisualWave.URLEncoder new setEncoder: UTF8StreamEncoder new) encode: value).	self expires isNil		ifFalse:			[valueStream				nextPutAll: '; ';				nextPutAll: 'expires=';				nextPutAll: self expiresDateString].	self path isNil		ifFalse:			[valueStream				nextPutAll: '; ';				nextPutAll: 'path=';				nextPutAll: self path].	self domain isNil		ifFalse:			[valueStream				nextPutAll: '; ';				nextPutAll: 'domain=';				nextPutAll: self domain].	self comment isNil		ifFalse: [			valueStream				nextPutAll: '; ';				nextPutAll: 'comment=';				nextPutAll: self comment].	self secure ifTrue: [valueStream nextPutAll: '; secure'].	^valueStream contents</body></methods><methods><class-id>VisualWave.WaveServerSettings class</class-id> <category>settings-encodings</category><body package="JaWave-Server">defaultEncoding	defaultEncoding isNil ifTrue: [defaultEncoding := #'utf-8'].	^defaultEncoding.</body></methods><methods><class-id>VisualWave.WebSettingsDomain class</class-id> <category>settings-encodings</category><body package="JaWave-Server">availableEncodingNames	| names encoders |	encoders := StreamEncoder encoderDirectory copy.	#( #'ms_cp_932' #'shiftjis' #japaneseeuc #jis ) do: [ :each | encoders removeKey: each ifAbsent: []].	encoders := encoders associations		asSortedCollection: [:a :b | a key &lt;= b key].	encoders := encoders		select: [:each | each key anySatisfy: [:eachChar | eachChar isLetter]].	encoders := encoders groupedBy: [:each | each value].	names := (encoders collect: [:each | each first key]) asSortedCollection		asOrderedCollection.	#(#url #source #compoundtext #base64)		do: [:each | names remove: each ifAbsent: []].	"names addFirst: Locale current defaultEncoding."	names addFirst: #'iso-8859-1'.	names addFirst: #'utf-8'.	^names.</body></methods><methods><class-id>VisualWave.IM_ApplicationWWWFormUrlEncoded</class-id> <category>accessing</category><body package="JaWave-Server">defaultCharset	| wtkSettings |	wtkSettings := VisualWave at: #WebToolkitSettings ifAbsent: [^#'utf-8'].	^wtkSettings formEncoding.</body></methods><methods><class-id>VisualWave.WebRequest</class-id> <category>encoding</category><body package="JaWave-Server">withCorrectEncodingFor: aService	| newRequest sessionEncoding sessionEncodingRequest existingSession |	WaveServerSettings alwaysUseDefaultEncoding ifTrue: [self setEncoding: aService defaultEncoding. ^self].	"self hasEncodedURL ifFalse: [self setEncoding: #'iso-8859-1'. ^self]."	"This is messy. We may not need to use a session, but we have to check for it first, because the act of trying to resolve may create an empty one"	existingSession := self existingWTKSession.	newRequest := self copy.	(newRequest canResolveAgainst: aService withEncoding: 'utf-8')		ifTrue: [self setEncoding: 'utf-8'. ^self].	(newRequest cachedSession notNil and: [newRequest cachedSession ~~ existingSession])		ifTrue: [newRequest cachedSession release].	sessionEncoding := existingSession isNil ifTrue: [aService defaultEncoding] ifFalse: [existingSession encoding].	sessionEncodingRequest := self copy.	(sessionEncodingRequest		canResolveAgainst: aService		withEncoding: sessionEncoding)		ifTrue:			[self setEncoding: sessionEncoding.			^self].		"Fall back on the default"	self setEncoding: aService defaultEncoding.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>HTTPCookie</name><environment>VisualWave</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name value expires path domain secure comment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Net</category><attributes><package>Wave-Server</package></attributes></class><class><name>WebRequest</name><environment>VisualWave</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>httpRequest serverEnvironment queryData cookieData responseStream consumedPath unconsumedPath initiator entities webSite session isAnswered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Support-Web-Framework</category><attributes><package>Wave-Server</package></attributes></class><class><name>IM_ApplicationWWWFormUrlEncoded</name><environment>VisualWave</environment><super>VisualWave.InternetMedia</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nameValueDictionary orderedNameValues charsetEncoder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Wave-Net</category><attributes><package>Wave-Server</package></attributes></class></st-source>