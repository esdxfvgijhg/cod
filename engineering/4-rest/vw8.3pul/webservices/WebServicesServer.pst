<?xml version="1.0"?><st-source><!-- Name: WebServicesServerNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: Loads all Web Services server packages.OverviewThis enables you to create and run an SOAP server. UsageFor details on using the SOAP Server see WebServices.pdf.There are two ways to create SOAP server. 1. Subclass your server from SOAPServer	- Add class methods:		#wsdlSchema - WSDL spec that describes the web services		#x2oBinding - XML to object specification. The X2O spec can be created using XMLTypesParser.		#serviceMap - the map provides information about a service class that implements services	- Start your server	- Use WsdlClient to send requests2. Create am instance of the server as:	server := SiouX.Server new.	- Parse WSDL to create configuration file:	config := (WsdlConfigurationDescriptor defaultReadFrom: wsdlSchema readStream) buildComponents.	binding := config bindings asArray first.	- Assign the service map to the binding:	binding loadServiceMapFrom:  serviceMap readStream.	- Create SOAPResponder that is going to process requests. The SOAPRequest is going to process all request with URL defined by the soap address in WSDL:	<soap:address location="http://localhost:7777/TimeNowService"/>	soapResponder := SOAPResponder fromBinding: binding.	- Add responder to the server	server addResponder: soapResponder.	- Define the server access address and listener on this address:	address := IPSocketAddress hostAddress: #[0 0 0 0] port: 7777.	listener := server listenOn: address  for: SiouX.NetHttpConnection.	There are two connection choices:	SiouX.NetHttpConnection – for HTTP connection	SiouX.NetHttpsConnection – for HTTPS connection	The listener default options can be changed:	listener reuseAddress: true.		Now we can test the server:		server start.	client := WsdlClient new config: config.	(client executeSelector: #TimeNow args: #()) inspect.	server stop.DbIdentifier: bear73DbTrace: 493900DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'SOAP-Server' ''))PackageName: WebServicesServerParcel: #('WebServicesServer')ParcelName: WebServicesServerPrerequisiteDescriptions: #(#(#name 'SOAP-Server' #componentType #package))PrerequisiteParcels: #(#('SOAP-Server' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 2:31:39 PM April 28, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (apr17.3) of April 28, 2017 on April 28, 2017 at 2:31:39 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it></st-source>