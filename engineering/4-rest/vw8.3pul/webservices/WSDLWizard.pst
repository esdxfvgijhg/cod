<?xml version="1.0"?><st-source><!-- Name: WSDLWizardNotice: Copyright 1999-2015 Cincom Systems, Inc.  All rights reserved.Comment: Contains a WsdlWizard Tool that helps to create Smalltalk classes from a Wsdl schema and a Wsdl schema from a service class. To open the Wizard use Tools->Web Services WizardDbIdentifier: bear73DbTrace: 493898DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'WSDLTool' '') #(#any 'XMLObjectBindingWizard' '') #(#any 'SOAP-Server' ''))PackageName: WSDLWizardParcel: #('WSDLWizard')ParcelName: WSDLWizardPrerequisiteDescriptions: #(#(#name 'WSDLTool') #(#name 'XMLObjectBindingWizard') #(#name 'SOAP-Server' #componentType #package))PrerequisiteParcels: #(#('WSDLTool' '') #('XMLObjectBindingWizard' '') #('SOAP-Server' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 2:31:39 PM April 28, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.3) of April 28, 2017 on April 28, 2017 at 2:31:39 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SelectWsdlBinding</name><environment>WebServices</environment><super>WebServices.SelectX2OBinding</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.SelectWsdlBinding</class-id><body>SelectWsdlBinding allows to select entries registered in WsdlBinding.WsdlBindings</body></comment><class><name>HeaderTreeItem</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>itemDescriptor children parent type name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.HeaderTreeItem</class-id><body>WSTreeItem is an abstract class for the headers tree view in the AddHeaderPage dialogInstance Variables	itemDescriptor	&lt;Struct&gt; fault or header description	children	&lt;(Collection of: OperationTreeItem)&gt; 	parent	&lt;HeaderTreeItem&gt; parent 	type	&lt;Symbol&gt; tree item type	name	&lt;String&gt; fault or header name</body></comment><class><name>GoodByePage</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>blurbHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.GoodByePage</class-id><body>GoodByePage is the last page in the Wsdl wizard.Instance Variables:	blurbHolder	&lt;ValueModel&gt;	holds the page text</body></comment><class><name>AddImportedBindings</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bindingListAspect x2oImports </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.AddImportedBindings</class-id><body>AddImportedBindings allows to add imported X2O binding. The binding complex types will be used to describe operation parameters, returns, headers and faultsInstance Variables	bindingListAspect	&lt;SelectionInList&gt;	bindingListAspect	x2oImports	&lt;OrderedCollection&gt;	  entries registered in XMLObjectBinding.XMLBindingRegistry</body></comment><class><name>AddInterfaceFault</name><environment>WebServices</environment><super>WebServices.WSDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nameAspect marshaler acceptBlock selectComplexType soapFaultCodes soapFaultCodeAspect soapFaultSubcodeAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.AddInterfaceFault</class-id><body>AddOperationFault dialog allows to add an interface exception Instance Variables	nameAspect	&lt;ValueModel&gt; the exception name	marshaler	&lt;XMLTypeMarshaler&gt; the exception type	acceptBlock	&lt;Object&gt; the block is called when Accept button is clicked	selectComplexType	&lt;Subcanvas&gt; allows to select a complex types	soapFaultCodes	&lt;Collection of: String&gt; Soap Fault Codes	soapFaultCodeAspect	&lt;String&gt; selected Soap Fault code	soapFaultSubcodeAspect	&lt;String&gt; Soap Fault Subcode</body></comment><class><name>AddSoapHeader</name><environment>WebServices</environment><super>WebServices.AddInterfaceFault</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mustUnderstand required </inst-vars><class-inst-vars>mustUnderstand required </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.AddSoapHeader</class-id><body>The dialog allows to add Soap header descriptor to an operationInstance Variables	mustUnderstand	&lt;Boolean&gt; mustUnderstand attribute value	required	&lt;Boolean&gt; required attribute valueClass Instance Variables	mustUnderstand	&lt;Booelan&gt; default	required	&lt;Boolean&gt; default</body></comment><class><name>CreateWSServiceClasses</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classDefinition classListAspect selectedRow </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.CreateWSServiceClasses</class-id><body>CreateWSServiceClasses is superclass for setting classes dialogsSubclasses must implement the following messages:	accessing		createClass		createClass:	actions		changedClassNS		changedPackageInstance Variables	classDefinition	&lt;DefinitionCreationDialog&gt; sets package and namespace values	classListAspect	&lt;SelectionInList&gt; classes to generate	selectedRow	&lt;ValueModel&gt; selected row in the listClass Instance Variables</body></comment><class><name>RemoveOperation</name><environment>WebServices</environment><super>WebServices.WSDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector includingMethod operationName operation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.RemoveOperation</class-id><body>The dialog removes an interface operation from a configuration descriptor and a corresponding service class selectorInstance Variables	includingSelector	&lt;ValueModel&gt;	if the option is true the service selector will be removed	operation	&lt;WsdlInterfaceOperationDescriptor&gt;	 operation descriptor	operationName	&lt;ValueHolder&gt;	operation name	selector	&lt;ValueHolder&gt;	service class selector</body></comment><class><name>SelectWsdlVersion</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>useAttribute11AspectChoices useAttribute11Aspect styleAttribute11AspectChoices styleAttribute11Aspect wsdlVersionAspect allTargetNamespaces selectedTargetNamespace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.SelectWsdlVersion</class-id><body>SelectWsdlVersion allows to select WSDL version to generate.Instance Variables	styleAttribute11Aspect	&lt;ValueModel&gt;	styleAttribute11Aspect	styleAttribute11AspectChoices	&lt;ValueHolder&gt;	styleAttribute11AspectChoices	useAttribute11Aspect	&lt;ValueModel&gt;	 useAttribute11Aspect	useAttribute11AspectChoices	&lt;ValueHolder&gt;	 useAttribute11AspectChoices	wsdlTargetNamespace	&lt;ValueModel&gt;	 wsdlTargetNamespace	wsdlVersionAspect	&lt;ValueModel&gt;	 wsdlVersionAspect</body></comment><class><name>DescribeInterfaceTabs</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superClassCBAspect serviceClassAspect methodsInProtocolList methodProtocolCBAspect superClassesAspect currentSuper currentCategory tabs client </inst-vars><class-inst-vars>clients </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.DescribeInterfaceTabs</class-id><body>DescribeInterfaceTabs allows to describe interface operations.Instance Variables	client	&lt;BrowseTypes&gt;		currentCategory	&lt;ValueHolder&gt;	current category with services	currentSuper	&lt;Class&gt;	current super for the service class	methodProtocolCBAspect	&lt;ValueModel&gt;	methodProtocolCBAspect	methodsInProtocolList	&lt;ValueModel&gt;	 methodsInProtocolList	serviceClassAspect	&lt;ValueModel&gt;	serviceClassAspect	superClassCBAspect	&lt;ValueModel&gt;	superClassCBAspect	superClassesAspect	&lt;ValueModel&gt;	 superClassesAspect	tabs	&lt;SelectionInList&gt;	tabsClass Instance Variables	clients &lt;OrderedCollection&gt; list of tab clients</body></comment><class><name>DescribeOperationsTab</name><environment>WebServices</environment><super>WebServices.BrowseTypes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeViews </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.DescribeOperationsTab</class-id><body>Helps to describe a service class methods as Web services operations.Instance Variables	typeViews	&lt;Collection of: OperationView&gt; interface operations</body></comment><class><name>CreateBindingClassesTab</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classListAspect selectedRow classDefinition xmlTargetNamespaceAspect xmlTargetNamespaces bindingClassesStruct </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.CreateBindingClassesTab</class-id><body>CreateBindingClasses dialog displays Smalltalk classes that will be created from the XML schema complex types. The dialog allows to provide new names for the duplicate bindingsInstance Variables	classListAspect	&lt;SelectionInListSortAware&gt; XML complex types and classes names	selectedRow	&lt;ValueModel&gt; selected duplicate binding	classDefinition	&lt;Tools.DefinitionCreationDialog&gt; 	xmlTargetNamespaceAspect	&lt;ValueModel&gt; selected target namespace	xmlTargetNamespaces	&lt;ValueModel&gt; all target namespaces	bindingClassesStruct	&lt;Struct&gt; keys are target namespaces. values are Struct's with class names</body></comment><class><name>GenerateClass</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classNamespaceAspect urlString generateClassCBAspect classDefinition classNameAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.GenerateClass</class-id><body>GenerateOpentalkClass is super class to generate an Opentalk server/client classesInstance Variables	classNamespaceAspect	&lt;ValueModel&gt; the class namespace	urlString	&lt;ValueModel&gt; the access point	generateClassCBAspect	&lt;ValueModel&gt; value of true or false. Defines where or not to generate the class	classDefinition	&lt;DefinitionCreationDialog&gt; to enter class namespace and package where the class will be created	classNameAspect	&lt;ValueHolder&gt; a client name</body></comment><class><name>GenerateResponder</name><environment>WebServices</environment><super>WebServices.GenerateClass</super><private>false</private><indexed-type>none</indexed-type><inst-vars>documentationText wsdlPortName wsdlServiceNameAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.GenerateResponder</class-id><body>The class generates a SOAP responder class.Instance Variables	documentationText	&lt;ValueModel&gt;	the documentation text. The text will be used in the port pragma description and a wsdl schema &lt;port&gt; element.	wsdlPortName	&lt;ValueModel&gt;	the wsdl port name	wsdlServiceNameAspect	&lt;ValueModel&gt;	service name that will be used for a wsdl binding name.</body></comment><class><name>WsdlClassBuilderModel</name><environment>WebServices</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientClasses accessPoints selectedAccessPoint serviceClasses responderClass classBuilder bindingType createClientClasses createResponderClass createServiceClasses </inst-vars><class-inst-vars>bindingType createClientClasses createResponderClass createServiceClasses </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.WsdlClassBuilderModel</class-id><body>WsdlClassBuilderModel is the class model for generating classes from a wsdl schemaInstance Variables	clientClasses	&lt;OrderedCollection of: Class&gt; collection of WsdlClient subclasses created from the schema	accessPoints	&lt;OrderedCollection of: String&gt; list of access points to load a wsdl schema	selectedAccessPoint	&lt;String&gt; selected access point	serviceClasses	&lt;Class&gt; a service class	serverClass	&lt;String&gt; Opentalk server name	classBuilder	&lt;WsdlClassBuilder&gt; server, client  and service class builder	bindingType	&lt;Symbol&gt; #object or #default	createClientClasses	&lt;Boolean&gt; should create the client classes	createServerClass	&lt;Boolean&gt; should create the server class	createServiceClasses	&lt;Boolean&gt; should create the service classesClass Instance Variables	bindingType	&lt;Symbol&gt; #object or #default	createClientClasses	&lt;Boolean&gt; should create the client classes	createServerClass	&lt;Boolean&gt; should create the server class	createServiceClasses	&lt;Boolean&gt; should create the service classesShared Variables	AccessPoints	&lt;Collection&gt; currently used access points</body></comment><class><name>OperationView</name><environment>WebServices</environment><super>WebServices.TypeView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>operation model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WSDLToolUI</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.OperationView</class-id><body>OperationView provides operation view for BrowseOperations interfaceInstance Variables	operation	&lt;WsdlInterfaceOperationDescriptor&gt;	the operation description	model	&lt;WsdlBuilderModel&gt;		interface  &lt;WsdlInterfaceDescriptor&gt;	fault      &lt;Struct&gt;</body></comment><class><name>ImportedBindingView</name><environment>WebServices</environment><super>WebServices.TypeView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>included binding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WSDLToolUI</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.ImportedBindingView</class-id><body>ImportedBindingView is a wrapper for X2O binding. The view icon shows if the binding is imported in the WSDL.Instance Variables	binding		&lt;XMLObjectBinding&gt;	imported binding	included	&lt;Boolean&gt;	included if true the binding is imported by WSDL</body></comment><class><name>SetOperationTypes</name><environment>WebServices</environment><super>WebServices.SetTypesMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>descriptionAspect nameAspect classNameAspect methodSelectorAspect pattern </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.SetOperationTypes</class-id><body>SetOperationTypes allows to specify an operation parameter typesInstance Variables	descriptionAspect	&lt;ValueModel&gt; holds the operation description	nameAspect	&lt;ValueModel&gt; holds the operation name	classNameAspect	&lt;ValueHolder&gt; holds the operation class name	methodSelectorAspect	&lt;ValueHolder&gt; holds the method selector	pattern	&lt;Symbol&gt; operation MEP </body></comment><class><name>UserPasswordDialog</name><environment>WebServices</environment><super>WebServices.WSDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serverName userNameAspect passwordAspect actionBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.UserPasswordDialog</class-id><body>UserPasswordDialog requests the user name and password if the http server returns 407/401 replies.Instance Variables:	actionBlock	&lt;BlockClosure&gt;	actionBlock returns user name and password from the dialog 	passwordAspect	&lt;ValueHolder&gt;	password aspect	serverName	&lt;ValueHolder&gt;	server name	userNameAspect	&lt;ValueHolder&gt;	user name aspect</body></comment><class><name>MissingMethods</name><environment>WebServices</environment><super>WebServices.WSDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>operationsTableAspect serviceClassAspect selectedRow allSelectors operations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.MissingMethods</class-id><body>The dialog warns about inteface operations which selectors don't have corresponding service class methods. The dialog suggests to cancel the Web services Wizard and restore the methods or skip these interface operations and proceed the Wizard.  Instance Variables	operationsTableAspect	&lt;SelectionInList&gt; operations that are missing service methods	serviceClassAspect	&lt;ValueHolder&gt; service class	selectedRow	&lt;ValueHolder&gt; selected row	allSelectors	&lt;OrderedCollection of Symbol&gt; the service class selectors	operations	&lt;WsdlInterfaceOperationDescriptor&gt; operations with missing service methods</body></comment><class><name>GenerateClient</name><environment>WebServices</environment><super>WebServices.GenerateClass</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.GenerateClient</class-id><body>GenerateClient generates an Opentalk client classInstance Variables:	portNumber	&lt;ValueModel&gt;	holds the client port number</body></comment><class><name>SelectComplexType</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nameAspect typesAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.SelectComplexType</class-id><body>The dialog selects a complex type from XML object bindingInstance Variables	nameAspect	&lt;ValueModel&gt;	selected type name	typesAspect	&lt;SelectionInList&gt;	list of complex types</body></comment><class><name>DescribeFaultsTab</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>faultTreeView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.DescribeFaultsTab</class-id><body>DescribeFaultsTab allows to describe Wsdl spec faultsInstance Variables	faultTreeView	&lt;SelectionInTree&gt; interface faults as a tree view</body></comment><class><name>OperationTypeRow</name><environment>WebServices</environment><super>WebServices.DataSetRow</super><private>false</private><indexed-type>none</indexed-type><inst-vars>part inout interface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.OperationTypeRow</class-id><body>OperationTypeRow holds operation parameter/type description Instance Variables	inout	&lt;Symbol&gt;	either #in or #out	part	&lt;Symbol&gt;	the operation parameter name	interface &lt;WsdlInterfaceDescriptor&gt;</body></comment><class><name>WsdlWizard</name><environment>WebServices</environment><super>WebServices.WSWizard</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classBuilderModelClass wsdlBuilderModelClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.WsdlWizard</class-id><body>WsdlWizard is a GUI tool that provides a step-by-step guide to exposing an existing Smalltalk application as a web service. Alternatively, given a WSDL schema, it can generate Smalltalk classes required to access (or implement) the service. Instance Variables	classBuilderModelClass	&lt;Class&gt; class builder model	wsdlBuilderModelClass	&lt;WsdlBuilderModel&gt; </body></comment><class><name>CreateWSDL</name><environment>WebServices</environment><super>WebServices.CreateSpecification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedSchemaType schemaTypeList typeListAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.CreateWSDL</class-id><body>GenerateSchema generates a Wsdl schemaInstance Variables	schemaTypeList	&lt;(SequenceableCollection of: Symbol)&gt;	list of schema type to generate	selectedSchemaType	&lt;Symbol&gt;	the selected schema type	typeListAspect	&lt;SelectionInList&gt;	selection in schema types list</body></comment><class><name>WsdlBuilderModel</name><environment>WebServices</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serviceSupers clientClass responderClass responderUpdated clientUpdated descriptor serviceClass classBuildOptions completeDescriptor soapHeaders operationHeaders faults classBuilderClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.WsdlBuilderModel</class-id><body>WsdlBuilderModel is the class model for generating a wsdl schema Instance Variables	serviceSupers	&lt;SequenceableCollection of: Classes&gt; the service class supers to include methods from	clientClass	&lt;Class&gt;  client class	responderClass	&lt;Class&gt;  responder class	responderUpdated	&lt;Boolean&gt; the flag indicates if the responder should be updated	clientUpdated	&lt;Boolean&gt; the flag indicates if the client should be updated	descriptor	&lt;WsdlConfigurationDescriptor&gt; descriptor that collects interface information	serviceClass	&lt;Class&gt;  service class	classBuildOptions	&lt;WsdlClassBuildOptions&gt; options to build client and server classes	completeDescriptor	&lt;WsdlConfigurationDescriptor&gt; descriptor that is used to create WSDL	soapHeaders	&lt;OrderedCollection of Associations&gt; Key: soap header name Value: soap header marshaler	operationHeaders	&lt;Dictionary&gt; Key: operation name Value: associations of a header name and type (in/out)	faults	&lt;Struct&gt; holds fault interface and binding information. For Wsdl 2.0 the struct includes information about Soap headers.	classBuilderClass	&lt;WsdlClassBuilder&gt; class builder</body></comment><class><name>DescribeSoapHeadersTab</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>headersTreeView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.DescribeSoapHeadersTab</class-id><body>DescribeSoapHeadersTab allows to describe Soap header types.Instance Variables	headersTreeView	&lt;SelectionInList&gt;	 headers view</body></comment><class><name>CreateResponderClassTab</name><environment>WebServices</environment><super>WebServices.CreateWSServiceClasses</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classNameAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.CreateResponderClassTab</class-id><body>CreateResponderClassTab allows to specify a package, Smalltalk namespace and change default name for responder classInstance Variables	classNameAspect	&lt;ValueModel&gt;	the server name</body></comment><class><name>ComplexTypesDialog</name><environment>WebServices</environment><super>WebServices.WSDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resultBlock complexTypes typesView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.ComplexTypesDialog</class-id><body>ComplexTypesDialog allows to select complex type to describe operation parameters and returnsInstance Variables	complexTypes	&lt;SelectionInList&gt;	description of complexTypes	resultBlock	&lt;BlockClosure&gt;		typesView	&lt;OrderedCollection of OperationView&gt;	 typesView</body></comment><class><name>CreateClientClassesTab</name><environment>WebServices</environment><super>WebServices.CreateWSServiceClasses</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.CreateClientClassesTab</class-id><body>CreateClientClassesTab allows to specify a package, Smalltalk namespace and change default names for client classes</body></comment><class><name>TestClientServer</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>workspaceAspect clients </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.TestClientServer</class-id><body>TestClientServer helps you to test the Web services. The page generates the code that helps to start the Opentalk-SOAP server and client and invoke operations from the service provider.Instance Variables	clients	&lt;OrderedCollection of WSOpentalkClient&gt; clients that use the Wsdl schema target namespace	workspaceAspect	&lt;Workbook&gt;	 workspace</body></comment><class><name>X2OView</name><environment>WebServices</environment><super>WebServices.WSDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bindingText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.X2OView</class-id><body>X2OView text displays XML to Object binding specInstance Variables:	bindingText	&lt;ValueHolder&gt;	XML to Object binding spec</body></comment><class><name>WelcomePage</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>buildFromAspect blurbHolder createUpdateAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.WelcomePage</class-id><body>WelcomePage is the first page for the Wsdl wizardInstance Variables	buildFromAspect	&lt;ValueModel&gt; holds an option to generate a wsdl schema or create classes from a schema	blurbHolder	&lt;ValueModel&gt; holds the page text	createUpdateAspect	&lt;ValueHolder&gt; #create/#update</body></comment><class><name>LoadSchema</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>createServicesAspect clientAspect bindingAspect createResponderAspect accessPoints accessPointAspect createClientsAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.LoadSchema</class-id><body>LoadSchema allows to load a Wsdl schema, create XML to object binding and classes from the schema.Instance Variables:	accessPointAspect	&lt;ValueModel&gt;	holds selected url to load the schema	accessPoints	&lt;ValueHolder&gt;	holds list of used access points. The list is saved in WsdlClassBuilderModel.AccessPoints	bindingAspect	&lt;ValueModel&gt;	holds binding type. Can be either #object or #dictionary. The #object type creates XML to Smalltalk object binding and generates the binding classes. The #dictionary type will map XML complex types to dictionaries. 	clientAspect	&lt;ValueModel&gt;	holds client type. Can be either wsdl client or opentalk client. The wsdl client can make requests to a remote server. Creating Opentalk client and server allows to test client-server communication in the same image.	createServerAspect	&lt;ValueModel&gt;	defines whether or not to create an Opentalk server	createServiceAspect	&lt;ValueModel&gt;	defines whether or not to create an service class	serverNameAspect	&lt;ValueModel&gt;	holds an Opentalk server name</body></comment><class><name>AddOperation</name><environment>WebServices</environment><super>WebServices.WSDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>operationName serviceClassNameAspect interface superClassesAspect serviceClassCBAspect methodSignatures methodSignatureAspect methods </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.AddOperation</class-id><body>The dialog adds a new interface operation descriptor and a selector to a service class.Instance Variables	operationName	&lt;ValueModel&gt; operation name	serviceClassNameAspect	&lt;ValueModel&gt; service class name	interface	&lt;WsdlInterfaceOperationDescriptor &gt;  the operation interface	superClassesAspect	&lt;String&gt; the service class superclasses	serviceClassCBAspect	&lt;String&gt; the operation service class	methodSignatures	&lt;String&gt; 	methodSignatureAspect	&lt;ValueModel&gt; 	methods	&lt;Dictionary&gt;  keys are service classes, values are collection of methods</body></comment><class><name>CreateClassesSettingsTabs</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs client clients </inst-vars><class-inst-vars>clients </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.CreateClassesSettingsTabs</class-id><body>CreateClassesSettingsTabs helps to specify class names and set packages/Smalltalk namespaces for generating client, server, service and binding classes.Instance Variables	tabs	&lt;SelectionInList&gt; 	client	&lt;WSSubcanvas&gt; current client	clients	&lt;(Collection of: (CreateBindingClassesTab | CreateClientClassesTab | CreateServerClassTab | CreateServiceClassesTab ))&gt; Class Instance Variables	clients	&lt;Collection of Class&gt; default clients</body></comment><class><name>CreateServiceClassesTab</name><environment>WebServices</environment><super>WebServices.CreateWSServiceClasses</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLWizard</package></attributes></class><comment><class-id>WebServices.CreateServiceClassesTab</class-id><body>CreateServiceClassesTab allows to specify a package, Smalltalk namespace and change default names for service classes</body></comment><shared-variable><name>AccessPoints</name><environment>WebServices.WsdlClassBuilderModel</environment><private>false</private><constant>false</constant><category>access points</category><initializer>nil</initializer><attributes><package>WSDLWizard</package></attributes></shared-variable><methods><class-id>WebServices.SelectWsdlBinding</class-id> <category>accessing</category><body package="WSDLWizard">targetNamespaces	^self model bindingListToUpdate</body></methods><methods><class-id>WebServices.SelectWsdlBinding</class-id> <category>actions</category><body package="WSDLWizard">acceptSelectedBinding	(self model tryToFindServiceClassFor: bindingListAspect selection value)		ifNil: [(IncrementalSearchDialog selectClass: (#SelectServiceClassForBinding &lt;&lt; #webservices &gt;&gt; 'Select service class for the binding' ))		ifNotNil: [:class | bindingListAspect selection value serviceClass: class ]].	bindingListAspect selection value serviceClass ifNil: [^false].	self model 		initializeDescriptorFromWsdlBinding: bindingListAspect selection value		onMissingMethodsDo: [ :missingMethods | 				(MissingMethods model: self model operations: missingMethods) open 					ifFalse: [self parent closeRequest] ].	^true</body><body package="WSDLWizard">removeSelectedBinding	| request |	(WsdlClient findClient: bindingListAspect selection value name) ifNotNil: [ :client |		request := ((#ThereIsClientClassDoYouWantToRemove &lt;&lt; #webservices&gt;&gt; 'There is the client class: &lt;1s&gt; that is using this binding. Do you want to remove the class?') expandMacrosWith: client fullName ).		(Dialog confirm: request ) ifFalse: [^nil].		client removeFromSystem. ].			self model removeOperationMarshalersFor: (WsdlBinding bindingAt: bindingListAspect selection value name ifAbsent: []).	WsdlBinding removeKey: bindingListAspect selection value name ifAbsent: [].	(WsdlPort portRegistry values detect: [ :px  | px binding notNil and: [px binding name = bindingListAspect selection value name]] ifNone: [nil]) ifNotNil: [ :port | 		(WsdlService servicesForPorts: (OrderedCollection with: port)) 			do: [ :service | 				service ports remove: port.				service ports isEmpty ifTrue: [WsdlService registry removeKey: service name] ].		WsdlPort portRegistry removeKey: port name 	]</body></methods><methods><class-id>WebServices.SelectWsdlBinding class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#SelectToUpdateOrCreateNewWsdl &lt;&lt; #webservices &gt;&gt; 'Select to update or create a new WSDL document'</body><body package="WSDLWizard">helpText	^#SelectToUpdateOrCreateNewWsdlHelp &lt;&lt; #webservices &gt;&gt;'Select to update or create a new WSDL document '</body></methods><methods><class-id>WebServices.HeaderTreeItem</class-id> <category>accessing</category><body package="WSDLWizard">addChild: anItem	children ifNil: [children := OrderedCollection new].	children add: anItem.	anItem parent: self.</body><body package="WSDLWizard">children	^children</body><body package="WSDLWizard">children: aCollection	children := aCollection</body><body package="WSDLWizard">itemDescriptor	^itemDescriptor</body><body package="WSDLWizard">itemDescriptor: anItemDescriptor	itemDescriptor := anItemDescriptor</body><body package="WSDLWizard">name	^name</body><body package="WSDLWizard">name: anObject	name := anObject</body><body package="WSDLWizard">parent	^parent</body><body package="WSDLWizard">parent: aTreeItem	parent := aTreeItem.</body><body package="WSDLWizard">size	self children ifNil: [^0].	^self children size</body><body package="WSDLWizard">type	^type</body><body package="WSDLWizard">type: anObject	type := anObject</body></methods><methods><class-id>WebServices.HeaderTreeItem</class-id> <category>testing</category><body package="WSDLWizard">hasChildren	^children notNil</body><body package="WSDLWizard">isFault	^type = #fault</body><body package="WSDLWizard">isHeader	^#header = type</body><body package="WSDLWizard">isRoot	^type = #root</body></methods><methods><class-id>WebServices.HeaderTreeItem</class-id> <category>printing</category><body package="WSDLWizard">displayString	^self itemDescriptor notNil		ifTrue: [ name ]		ifFalse: [ type asString ]</body><body package="WSDLWizard">printOn: aStream	aStream nextPutAll: self displayString</body></methods><methods><class-id>WebServices.HeaderTreeItem</class-id> <category>visuals</category><body package="WSDLWizard">treeIcon	type = #fault ifTrue: [^TypeView exceptionTypeIcon].	^X2OIcons tag</body></methods><methods><class-id>WebServices.HeaderTreeItem class</class-id> <category>instance creation</category><body package="WSDLWizard">fault: aString	^self new		itemDescriptor: aString;		name: aString;		type: #fault;		yourself.</body><body package="WSDLWizard">header: aStruct	| header |	header := self new		itemDescriptor: aStruct;		name: aStruct headerName;		type: #header;		yourself.	(aStruct at: #faults ifAbsent: [#()]) do: [ :assoc | header addChild: (HeaderTreeItem fault: assoc key)].	^header</body></methods><methods><class-id>WebServices.GoodByePage</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	self blurbHolder value: self class blurbText asString</body></methods><methods><class-id>WebServices.GoodByePage</class-id> <category>aspects</category><body package="WSDLWizard">blurbHolder	^blurbHolder isNil		ifTrue: [blurbHolder := String new asValue]		ifFalse: 	[blurbHolder]</body></methods><methods><class-id>WebServices.GoodByePage</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self parent enableBack.</body></methods><methods><class-id>WebServices.GoodByePage class</class-id> <category>accessing</category><body package="WSDLWizard">blurbText	^#WsdlWizardFinishingBlurbText &lt;&lt; #webservices &gt;&gt;'To generate another document, click the Back button.To close the wizard, click Finish.'</body><body package="WSDLWizard">header	^#FinishingWebServicesWizard &lt;&lt; #webservices &gt;&gt; 'Finishing the Web Services Wizard'</body><body package="WSDLWizard">helpText	^'Thank you for using the Wizard!'</body></methods><methods><class-id>WebServices.AddImportedBindings</class-id> <category>interface opening</category><body package="WSDLWizard">labelAtIndex: anIndex inView: aView 	^(self bindingListAspect list at: anIndex) 	labelAndIconWith: anIndex inView: aView</body><body package="WSDLWizard">postBuildWith: aBuilder 	| cwidget |	super  postBuildWith: aBuilder. 	self model targetNamespace isNil ifTrue: [ self parent disableNext ].	cwidget := self widgetAt: #bindingListAspect.	cwidget visualBlock: [ :view :index | self labelAtIndex: index inView: view ].	cwidget selectedVisualBlock: [ :view :index | self reverseLabel: (self labelAtIndex: index inView: view) ].	self parent disableBack.</body><body package="WSDLWizard">reverseLabel: aLabel 	"Build the wrappers needed to reverse the label to show it selected."	| rw |	rw := ReversingWrapper on: aLabel.	rw reverse setValue: true.	^BoundedWrapper on: rw</body></methods><methods><class-id>WebServices.AddImportedBindings</class-id> <category>actions</category><body package="WSDLWizard">closeRequestFromParent	self model addImports: ((x2oImports select: [ :view | view included ]) collect: [ :view |  view binding ]).	^true</body><body package="WSDLWizard">x2oSelectionIndexChange: selection	selection ifNotNil: [	selection included: selection included not.	self bindingListAspect listHolder changed: #value].</body></methods><methods><class-id>WebServices.AddImportedBindings</class-id> <category>accessing</category><body package="WSDLWizard">x2oImports	^x2oImports</body></methods><methods><class-id>WebServices.AddImportedBindings</class-id> <category>aspects</category><body package="WSDLWizard">bindingListAspect	^bindingListAspect</body></methods><methods><class-id>WebServices.AddImportedBindings</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	x2oImports := self model x2oImports.	bindingListAspect := SelectionInList									adapt: self 									aspect: #selectedImport									list: #x2oImports									selection: #x2oSelectionIndexChange:.</body></methods><methods><class-id>WebServices.AddImportedBindings class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#AddDomainTypeDescription &lt;&lt; #webservices &gt;&gt; 'Add domain type description'</body><body package="WSDLWizard">helpText	^#AddDomainTypeDescriptionHelp &lt;&lt; #webservices &gt;&gt; 'The page allows to import XML to object bindings. The bindings should describe complex types that will be used as parameters in Web Services operations, faults and headers'</body></methods><methods><class-id>WebServices.AddInterfaceFault</class-id> <category>accessing</category><body package="WSDLWizard">acceptBlock	^acceptBlock</body><body package="WSDLWizard">acceptBlock: anObject	acceptBlock := anObject</body></methods><methods><class-id>WebServices.AddInterfaceFault</class-id> <category>aspects</category><body package="WSDLWizard">nameAspect	^selectComplexType nameAspect</body><body package="WSDLWizard">selectComplexType	^selectComplexType</body><body package="WSDLWizard">soapFaultCodeAspect	^soapFaultCodeAspect</body><body package="WSDLWizard">soapFaultCodes	^soapFaultCodes</body><body package="WSDLWizard">soapFaultSubcodeAspect	^soapFaultSubcodeAspect</body><body package="WSDLWizard">typeMarshalers	^self model exceptionTypeMarshalers</body><body package="WSDLWizard">typesAspect	^selectComplexType typesAspect</body></methods><methods><class-id>WebServices.AddInterfaceFault</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	soapFaultCodes := Wsdl20SoapFaultDescriptor soapFaultCodes asValue.	soapFaultCodeAspect := 'any' asValue.	soapFaultSubcodeAspect := 'any' asValue.	self initializeSubcanvas</body><body package="WSDLWizard">initializeFromFault: aFault	soapFaultCodeAspect := (aFault  faultBinding soapFaultCode = '#any'		ifTrue: [#any]		ifFalse: [ aFault  faultBinding soapFaultCode type]) asValue.	soapFaultSubcodeAspect :=  (aFault  faultBinding soapFaultSubcode = '#any' 			ifTrue: [ 'any']			ifFalse: [ aFault  faultBinding soapFaultSubcode first type]) asValue.	marshaler := aFault.</body><body package="WSDLWizard">initializeSubcanvas	selectComplexType := SelectComplexType model: self model parent: self</body></methods><methods><class-id>WebServices.AddInterfaceFault</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder 	| faultMarshaler |	super  postBuildWith: aBuilder. 	self model isWsdl11 ifTrue: [ 		(self builder componentAt: #soapFaultCodeLabel ) beInvisible.		(self builder componentAt: #soapFaultSubcodeLabel ) beInvisible.		(self builder componentAt:  #soapFaultCodes) beInvisible.		(self builder componentAt: #soapFaultSubcode ) beInvisible ].	marshaler ifNotNil: [ 		faultMarshaler := self model faultMarshalerFor: marshaler faultName type.		(self builder componentAt: #selectComplexType ) isEnabled: false.		(self typesAspect list detect: [ :descriptor | descriptor type  = faultMarshaler ] ifNone: [nil])			ifNotNil: [ :descriptor | self typesAspect selection: descriptor ].		self nameAspect value: marshaler faultName type ]</body></methods><methods><class-id>WebServices.AddInterfaceFault</class-id> <category>actions</category><body package="WSDLWizard">acceptType	(self nameAspect value isEmpty or: [self  typesAspect selection  isNil ]) ifTrue: [ ^nil ].	acceptBlock ifNotNil: [acceptBlock value: (Array 												with: self nameAspect value  												with: self typesAspect selection type												with: self soapFaultCodeAspect value												with: self soapFaultSubcodeAspect value )].	^self accept value: true</body><body package="WSDLWizard">nameChanged	(self builder componentAt: #acceptButton) widget		isEnabled: (self nameAspect value notEmpty and: [self typesAspect selection notNil])</body></methods><methods><class-id>WebServices.AddInterfaceFault class</class-id> <category>instance creation</category><body package="WSDLWizard">updateFaultProperties:  aFault model: aWsdlBuilderModel	^self new 		setModel: aWsdlBuilderModel;		initializeFromFault: aFault;		yourself</body></methods><methods><class-id>WebServices.AddSoapHeader</class-id> <category>aspects</category><body package="WSDLWizard">mustUnderstand	^mustUnderstand</body><body package="WSDLWizard">required	^required</body><body package="WSDLWizard">typeMarshalers	^self model complexTypeMarshalers</body></methods><methods><class-id>WebServices.AddSoapHeader</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	mustUnderstand := self class mustUnderstand asValue.	required := self class required asValue.	self initializeSubcanvas</body><body package="WSDLWizard">initializeFromHeader: aSoapHeader	mustUnderstand := aSoapHeader mustUnderstand asValue.	required := aSoapHeader required asValue.	nameAspect := aSoapHeader headerName asValue.	marshaler := aSoapHeader.</body></methods><methods><class-id>WebServices.AddSoapHeader</class-id> <category>actions</category><body package="WSDLWizard">acceptType	(self nameAspect value isEmpty or: [self  typesAspect selection  isNil ]) ifTrue: [ ^nil ].	self class required: self required value.	self class mustUnderstand: self mustUnderstand value.	acceptBlock ifNotNil: [acceptBlock value: ( Array 										with: self nameAspect value 										with:  self typesAspect selection type										with: self required value										with: self mustUnderstand value) ].	^self accept value: true</body></methods><methods><class-id>WebServices.AddSoapHeader</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	| headerMarshaler |	self model isWsdl11 ifTrue: [ 		(self builder componentAt: #mustUnderstand ) beInvisible.		(self builder componentAt: #required ) beInvisible.].	marshaler ifNotNil: [ 		headerMarshaler := marshaler headerMarshaler.		(self builder componentAt: #selectComplexType ) isEnabled: false.		(self typesAspect list detect: [ :header | header type  = headerMarshaler ] ifNone: [nil])			ifNotNil: [ :header | self typesAspect selection: header ].		self nameAspect value: marshaler headerName]</body></methods><methods><class-id>WebServices.AddSoapHeader class</class-id> <category>accessing</category><body package="WSDLWizard">mustUnderstand	^mustUnderstand ifNil: [ mustUnderstand := true]</body><body package="WSDLWizard">mustUnderstand: aBoolean		mustUnderstand := aBoolean</body><body package="WSDLWizard">required	^required ifNil: [required := true]</body><body package="WSDLWizard">required: aBoolean	required := aBoolean</body></methods><methods><class-id>WebServices.AddSoapHeader class</class-id> <category>instance creation</category><body package="WSDLWizard">updateHeaderProperties:  aSoapHeader model: aWsdlBuilderModel	^self new 		setModel: aWsdlBuilderModel;		initializeFromHeader: aSoapHeader;		yourself</body></methods><methods><class-id>WebServices.CreateWSServiceClasses</class-id> <category>aspects</category><body package="WSDLWizard">classListAspect	^classListAspect</body><body package="WSDLWizard">selectedRow	^selectedRow isNil		ifTrue: [selectedRow := nil asValue]		ifFalse: [selectedRow]</body></methods><methods><class-id>WebServices.CreateWSServiceClasses</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	self classDefinition packageModule value: self classPackage.	self classDefinition namespaceModule value: self classNS.	self classDefinition packageModule entryHolder onChangeSend: #changedPackage to: self.	self classDefinition namespaceModule entryHolder onChangeSend: #changedClassNS to: self.	self initializeClassNameAspect</body><body package="WSDLWizard">initializeClassNameAspect	classListAspect := SelectionInListSortAware new.	self classListAspect selectionIndexHolder compute: [ :v | self selectedRow value: self classListAspect selection].	self classListAspect list: OrderedCollection new.	self initializeClassTable</body><body package="WSDLWizard">initializeClassTable	self classListAspect list:		(self classMap associations collect: [ :assoc | 					Struct new						portName: assoc key;						className: assoc value;						yourself ])</body></methods><methods><class-id>WebServices.CreateWSServiceClasses</class-id> <category>actions</category><body package="WSDLWizard">changedClassNS	^self subclassResponsibility</body><body package="WSDLWizard">changedPackage	^self subclassResponsibility</body><body package="WSDLWizard">classNameChanged	| nm |	nm := self selectedRow value className.	self validateClassName: nm.	self classMap 		at: self selectedRow value portName 		put: nm</body><body package="WSDLWizard">validateClassName: aString	((self classNS, '.',aString) asSymbol asQualifiedReference isDefined and: [self classBuilder buildOptions useExistingClassNames not])		ifTrue: [Dialog warn: ((#NewClassNameHasDuplicateBinding&lt;&lt; #webservices &gt;&gt; 'New class name &lt;1s&gt; has duplicate binding in the &lt;2s&gt; namespace') expandMacrosWith: aString with: self classNS ). ].	^aString</body></methods><methods><class-id>WebServices.CreateWSServiceClasses</class-id> <category>accessing</category><body package="WSDLWizard">classBuilder		^self model classBuilder</body><body package="WSDLWizard">classDefinition	^classDefinition isNil		ifTrue: [classDefinition := Tools.DefinitionCreationDialog new]		ifFalse: [classDefinition]</body><body package="WSDLWizard">classMap</body><body package="WSDLWizard">classNS	^self classBuilder buildOptions classNamespace</body><body package="WSDLWizard">classPackage	^self classBuilder buildOptions package</body><body package="WSDLWizard">createClass	^self subclassResponsibility</body><body package="WSDLWizard">createClass: aBoolean	^self subclassResponsibility</body></methods><methods><class-id>WebServices.RemoveOperation</class-id> <category>aspects</category><body package="WSDLWizard">includingMethod	^includingMethod</body><body package="WSDLWizard">operationName	^operationName</body><body package="WSDLWizard">selector	^selector</body></methods><methods><class-id>WebServices.RemoveOperation</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	| serviceClass |	serviceClass := (self model serviceClass findSelector: operation selector) 			ifNotNil: [ :col | col first ]			ifNil: [self model serviceClass].	selector := (serviceClass name, '&gt;&gt;', operation selector asString) asValue.	operationName := operation name type  asValue.	includingMethod := true asValue</body></methods><methods><class-id>WebServices.RemoveOperation</class-id> <category>accessing</category><body package="WSDLWizard">operation	^operation</body><body package="WSDLWizard">operation: anOperation	operation := anOperation</body></methods><methods><class-id>WebServices.RemoveOperation</class-id> <category>actions</category><body package="WSDLWizard">removeOperation	self model removeOperation: operation includingSelector: self includingMethod value.	^self accept value: true</body></methods><methods><class-id>WebServices.RemoveOperation class</class-id> <category>instance creation</category><body package="WSDLWizard">model: aWsdlBuilderModel operation: anOperation	^self new		operation: anOperation;		setModel: aWsdlBuilderModel;		yourself</body></methods><methods><class-id>WebServices.SelectWsdlVersion</class-id> <category>aspects</category><body package="WSDLWizard">allTargetNamespaces	^allTargetNamespaces</body><body package="WSDLWizard">selectedTargetNamespace	^selectedTargetNamespace</body><body package="WSDLWizard">styleAttribute11Aspect	^styleAttribute11Aspect</body><body package="WSDLWizard">styleAttribute11AspectChoices	^styleAttribute11AspectChoices isNil		ifTrue: [styleAttribute11AspectChoices := #(#document #rpc) asValue]		ifFalse: [styleAttribute11AspectChoices]</body><body package="WSDLWizard">useAttribute11Aspect	^useAttribute11Aspect</body><body package="WSDLWizard">useAttribute11AspectChoices	^useAttribute11AspectChoices isNil		ifTrue: [useAttribute11AspectChoices := #(#literal #encoded) asValue]		ifFalse: 	[useAttribute11AspectChoices]</body><body package="WSDLWizard">wsdlVersionAspect	^wsdlVersionAspect</body></methods><methods><class-id>WebServices.SelectWsdlVersion</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder 	super  postBuildWith: aBuilder. 	self model targetNamespace 		ifNil: [ self parent disableNext ]		ifNotNil: [self parent enableNext.				(self widgetAt: #targetNamespaces) isEnabled: false.].	(self widgetAt: #targetNamespaces) controller continuousAccept: true.	self versionSelectionChanged</body><body package="WSDLWizard">versionSelectionChanged	self wsdlVersionAspect value = #wsdl20		ifTrue: [(self widgetAt: #styleAttribute11Aspect)  editor isEnabled: false.				(self widgetAt: #styleLabel) isEnabled: false.				(self widgetAt: #useAttribute11Aspect)   editor isEnabled: false.				(self widgetAt: #useLabel) isEnabled: false.]		ifFalse: [(self widgetAt: #styleAttribute11Aspect) editor isEnabled: self model targetNamespace isNil.				(self widgetAt: #styleLabel) isEnabled: self model targetNamespace isNil.				(self widgetAt: #useAttribute11Aspect)  editor isEnabled: self model targetNamespace isNil.				(self widgetAt: #useLabel) isEnabled: self model targetNamespace isNil.].</body></methods><methods><class-id>WebServices.SelectWsdlVersion</class-id> <category>actions</category><body package="WSDLWizard">changedTargetNamespace	(self selectedTargetNamespace value notNil and: [self selectedTargetNamespace value notEmpty ])		ifTrue: [ self parent enableNext ]</body><body package="WSDLWizard">closeRequestFromParent	| options aClass |	options := Struct new.	aClass := self wsdlVersionAspect value = #wsdl11		ifTrue: [ options use: self useAttribute11Aspect value.				options style: self styleAttribute11Aspect value.				Wsdl11ConfigurationDescriptor] 		ifFalse: [Wsdl20ConfigurationDescriptor].	self model initializeDescriptor: aClass options: options targetNamespace: self selectedTargetNamespace value.	^true</body><body package="WSDLWizard">targetNamespaceChanged	(WsdlBinding bindingAt: self selectedTargetNamespace value ifAbsent: [nil])		ifNotNil: [ :b | 			self wsdlVersionAspect value: (( b bindingDescriptor isKindOf: Wsdl20BindingDescriptor) 					ifTrue: [ #wsdl20]					ifFalse: [ #wsdl11]).			self versionSelectionChanged]</body></methods><methods><class-id>WebServices.SelectWsdlVersion</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	| set |	wsdlVersionAspect := self model defaultSchemaVersion asValue.	styleAttribute11Aspect := self model defaultStyleAttribute11 asValue. 	useAttribute11Aspect := self model defaultUseAttribute11 asValue.	selectedTargetNamespace := String new asValue.	set := Set new.	WsdlBinding wsdlBindings values do: [ :b | set add: b targetNamespace ].	allTargetNamespaces := set asOrderedCollection asValue.	self selectedTargetNamespace compute: [:aValue | aValue isNotEmpty ifTrue: [self parent enableNext ]].	self wsdlVersionAspect compute: [:aValue | self versionSelectionChanged ]</body></methods><methods><class-id>WebServices.SelectWsdlVersion class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#SelectWsdlVersion &lt;&lt; #webservices &gt;&gt; 'Select WSDL Version'</body><body package="WSDLWizard">helpText	^#SelectWsdlVersionHelp &lt;&lt; #webservices &gt;&gt; 'Select WSDL Version.WSDL target namespace - To specify the WSDL document attribute: "targetNamespace"WSDL versionWSDL 2.0 option creates the document with the following operation description:pattern="http://www.w3.org/ns/wsdl/in-out" style="http://www.w3.org/ns/wsdl/style/iri"type="http://www.w3.org/ns/wsdl/soap" wsoap:mepDefault="http://www.w3.org/2003/05/soap/mep/request-response/" wsoap:protocol="http://www.w3.org/2003/05/soap/bindings/HTTP/" wsoap:version="1.2"WSDL 1.1 option allows to create Document or RPC style and Literal or Encoded use.'</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs</class-id> <category>aspects</category><body package="WSDLWizard">methodProtocolCBAspect	^methodProtocolCBAspect isNil		ifTrue: [methodProtocolCBAspect := String new asValue]		ifFalse: 	[methodProtocolCBAspect]</body><body package="WSDLWizard">methodsInProtocolList	^methodsInProtocolList isNil		ifTrue: [methodsInProtocolList := List new asValue]		ifFalse: 	[methodsInProtocolList]</body><body package="WSDLWizard">serviceClassAspect	^serviceClassAspect isNil		ifTrue: [serviceClassAspect := String new asValue]		ifFalse:	[serviceClassAspect]</body><body package="WSDLWizard">superClassCBAspect	^superClassCBAspect isNil		ifTrue: [superClassCBAspect := String new asValue]		ifFalse: 	[superClassCBAspect]</body><body package="WSDLWizard">superClassesAspect	^superClassesAspect isNil		ifTrue: [superClassesAspect := self superClassesList asValue]		ifFalse: [superClassesAspect]</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs</class-id> <category>accessing</category><body package="WSDLWizard">changedServiceProtocol	currentCategory = self methodProtocolCBAspect value  ifTrue: [ ^nil ].	currentCategory := self methodProtocolCBAspect value.	self model initializeOperationsFromProtocol:  currentCategory.	client updateView</body><body package="WSDLWizard">changedSuperClass	| cl |	self superClassCBAspect value asString = currentSuper fullName ifTrue: [ ^nil].	cl := self superClassCBAspect value asQualifiedReference value.	self model addOperationsFromSuper: cl.	currentSuper := cl.	self setCategories.	client updateView</body><body package="WSDLWizard">clients	^self class clients</body><body package="WSDLWizard">helpText	^self</body><body package="WSDLWizard">labelArray	^self clients collect: [ :each | each first ]</body><body package="WSDLWizard">setCategories	self methodsInProtocolList value: currentSuper organization categories</body><body package="WSDLWizard">specArray	^self clients collect: [ :each | each last ]</body><body package="WSDLWizard">tabs	^tabs</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs</class-id> <category>actions</category><body package="WSDLWizard">changedServiceClass	tabs selectionIndex = 1 ifTrue: [ client selectionChanged ]</body><body package="WSDLWizard">closeRequestFromParent	^self safelyExecute: [		[self model createCompleteDescriptor] 			on: UnresolvedReferenceSignal			do: [ :ex | Dialog warn: ex description, ('\Use X2O Tool to describe unresolved types and then add X2O Binding to WSDL' withCRs). ^false ].		true].</body><body package="WSDLWizard">displayHelpText	^client displayHelpText</body><body package="WSDLWizard">initializeOperationsFromClass: aClass	self model  initializeDescriptorFromServiceClass:  aClass.	tabs selectionIndex: 1.	client updateView.</body><body package="WSDLWizard">selectClass	| cl |	tabs selectionIndex: 1.	(client notNil and: [client typeViews notEmpty ])		ifTrue: 			[ Dialog warn: ((#YouAreGoingToLoseOperationTypeDescription &lt;&lt; #webservices &gt;&gt; 'You are going to lose operation type description for class: &lt;1s&gt;') expandMacrosWith: self model serviceClass fullName)].	(cl := IncrementalSearchDialog selectClass: '') notNil		ifTrue: 			[self parent notNil ifTrue: [ parent enableNext].			currentSuper := cl.			self safelyExecute: [self initializeOperationsFromClass: cl].			self serviceClassAspect value: cl fullName.			self superClassesAspect value: self superClassesList.			self superClassCBAspect value: cl fullName asSymbol.			self setCategories.]</body><body package="WSDLWizard">tabsChanged	| index  |	index := self tabs selectionIndex.	(self builder componentAt: #tabs) widget 		client: (client := ( self specArray at: index) model: model parent: self )		spec: #windowSpec</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	tabs selectionIndex: 1.	(self parent notNil and: [self model serviceClass isNil]) 		ifTrue: [ self parent disableNext ].	self parent enableBack.</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	super initializeAspects.	tabs := SelectionInList with: self labelArray.	tabs selectionIndexHolder onChangeSend: #tabsChanged to: self.	methodProtocolCBAspect := self model serviceProtocol asValue.	currentCategory := self model serviceProtocol.	self model serviceClass notNil		ifTrue: 			[currentSuper := self model superClass.			self serviceClassAspect value: self model serviceClass fullName.			self superClassCBAspect value: currentSuper fullName.			self setCategories.].		self methodProtocolCBAspect onChangeSend: #changedServiceProtocol to: self.	self superClassCBAspect onChangeSend: #changedSuperClass to: self.	self serviceClassAspect  onChangeSend: #changedServiceClass to: self.</body><body package="WSDLWizard">superClassesList	^self model superClassesList</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#DescribeInterface &lt;&lt; #webservices &gt;&gt; 'Describe Interface'</body><body package="WSDLWizard">helpText	^''</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs class</class-id> <category>defaults</category><body package="WSDLWizard">clients 		^clients ifNil: [ clients := self defaultClients ]</body><body package="WSDLWizard">clients: anOrderedCollection		clients := anOrderedCollection</body><body package="WSDLWizard">defaultClients	^(OrderedCollection new: 3)		add: (Array with: X2OIcons allMapped -&gt; 'Operations'  with: DescribeOperationsTab);		add:  (Array with: X2OIcons lightning -&gt; 'Faults' with: DescribeFaultsTab );		add: (Array with: X2OIcons tag -&gt; 'Soap Headers' with: DescribeSoapHeadersTab);		yourself</body></methods><methods><class-id>WebServices.DescribeOperationsTab</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self selectionChanged</body></methods><methods><class-id>WebServices.DescribeOperationsTab</class-id> <category>actions</category><body package="WSDLWizard">addDescription	(self selectedTypeView isNil		or: [self selectedTypeView isEmpty]) ifTrue: [^nil].	(SetOperationTypes  			model: self model			operationView: self selectedTypeView first			callback: [ self setTypeView.						self typeViewsAspect listHolder changed: #value ]	 ) open.	self selectionChanged</body><body package="WSDLWizard">addFaultToSelectedOperations	| text operations faultNames |	faultNames := self model faultNames.	text := #AddFaultToSelectedOperations &lt;&lt;#webservices &gt;&gt; 'Add Fault to selected operations' .	(Dialog 		choose: text		fromList: faultNames		values: faultNames		lines: faultNames size 		cancel: [nil]) ifNotNil: [ :fault | 			operations := self selectedTypeView collect: [ :view | view operation ].			self model addFault: fault  toOperations: operations ]</body><body package="WSDLWizard">addHeaderToOperations: aSymbol 	| headerNames text operations |	headerNames := self model soapHeaders collect: [ :header | header headerName ].	text := (#Add1sSoapHeaderToSelectedOperations &lt;&lt;#webservices &gt;&gt; 'Add &lt;1s&gt; Soap Header to selected operations') expandMacrosWith: (aSymbol = #in ifTrue: [ 'input' ] ifFalse: [ 'output'] ) .	(Dialog 		choose: text		fromList: headerNames		values: headerNames		lines: self model soapHeaders size 		cancel: [nil]) ifNotNil: [ :header | 			operations := self selectedTypeView collect: [ :view | view operation ].			"Reject output headers for one-way operations"			operations := operations reject: [ :op | op isOneWay and: [aSymbol = #out]].			self model addHeader: header type: aSymbol toOperations: operations ]</body><body package="WSDLWizard">addInputHeaderToSelectedOperations	self addHeaderToOperations: #in</body><body package="WSDLWizard">addOperation	(AddOperation model: self model) open ifTrue: [ self updateView ].</body><body package="WSDLWizard">addOutputHeaderToSelectedOperations	self addHeaderToOperations: #out</body><body package="WSDLWizard">removeOperation	self selectedTypeView ifNil: [^nil].	(RemoveOperation model: self model operation: self selectedTypeView first operation ) open.	self updateView.</body><body package="WSDLWizard">updateView	self setTypeView.	self typeViewsAspect listHolder changed: #value.</body></methods><methods><class-id>WebServices.DescribeOperationsTab</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeTypeViews	typeViewsAspect := MultiSelectionInList new.	typeViewsAspect listHolder: ((AspectAdaptor subject: self sendsUpdates: true) forAspect: #typeViews).	typeViewsAspect selectionIndexHolder compute: [self perform: #selectedTypeView: with: typeViewsAspect selections].</body><body package="WSDLWizard">setTypeView		typeViews := OrderedCollection new.	self model descriptor interfaces do: [ :interface | 		interface operations do: [ :operation | 			typeViews add: (OperationView new 									model: self model;								operation: operation;  								yourself) ]].	^typeViews</body></methods><methods><class-id>WebServices.DescribeOperationsTab</class-id> <category>accessing</category><body package="WSDLWizard">typeViews	typeViews ifNil: [self setTypeView].	^typeViews</body></methods><methods><class-id>WebServices.DescribeOperationsTab</class-id> <category>private</category><body package="WSDLWizard">selectionChanged	| selected |	selected := self selectedTypeView notNil and: [ self selectedTypeView size = 1].	(self builder componentAt: #addDescriptionButton ) widget isEnabled: selected.	(self builder componentAt: #removeOperationButton ) widget isEnabled: selected.	(self builder componentAt: #addOperationButton ) widget isEnabled: self model serviceClass notNil.	selected := (self selectedTypeView notNil and: [ self selectedTypeView size &gt; 0 ]).	(self builder componentAt: #addInputHeaderToSelectedOperations ) widget isEnabled: (selected and: [self model soapHeaders notEmpty]).	(self builder componentAt: #addOutputHeaderToSelectedOperations ) widget isEnabled: (selected and: [self model soapHeaders notEmpty]).	(self builder componentAt: #addFaultToSelectedOperations ) widget isEnabled: (selected and: [self model faults notEmpty]).</body></methods><methods><class-id>WebServices.DescribeOperationsTab class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#DescribeInterfaceOperations &lt;&lt; #webservices &gt;&gt; 'Describe Interface operations'</body><body package="WSDLWizard">helpText	^#DescribeInterfaceOperationsTabHelp &lt;&lt; #webservices &gt;&gt;'Operations page allows you to select the class that will provide a service, and specify its interfaces. Interfaces must be in a single protocol (default: ''public api'') but may include interfaces from superclasses.	Service class - Click Select... to select the class that provides the service. In the dialog that is opened, you can either enter the class name or select the class by browsing packages or namespaces.Use methods in protocol - The wizard will represent the operations in one protocol as the access API for the service. The default protocol is "public api". You may select a different protocol from the drop-down list. Including super class - The access API can include superclass methods as well. To do so, select the superclass up to which methods are to be included.When the class and protocol are selected, a list of operations is displayed. To describe an operation click on Describe... To add a new operation and the corresponding service class selector click on Add...To remove a selected operation and the corresponding service class selector click on Remove...Input Header button allows to select a Soap header and add it to all selected operation as input header.Output Header button allows to select a Soap header and add it to all selected operation as output header.Fault button allows to select a Fault and add it to all selected operation as output fault.If your interfaces are going to use interface Fault''s or Soap Headers you need to provide this information first before you start describing an operation. Use Faults and Soap Headers tabs to add Fault and Soap Header description'</body></methods><methods><class-id>WebServices.CreateBindingClassesTab</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	xmlTargetNamespaceAspect := String new asValue.	xmlTargetNamespaces := OrderedCollection new asValue.	classListAspect :=  SelectionInListSortAware new.	self classListAspect selectionIndexHolder compute: [ :v | self selectedRow value: self classListAspect selection].	self  initializeAspectsFromObject.	self classDefinition packageModule entryHolder onChangeSend: #changedPackage to: self.	self classDefinition namespaceModule entryHolder onChangeSend: #changedClassNS to: self.</body><body package="WSDLWizard">initializeAspectsFromObject	self initializeBindingClassesStruct.	self xmlTargetNamespaceAspect value: self bindingClassesStruct keys first.	self xmlTargetNamespaces value: self bindingClassesStruct keys.	self initializeClassViewForTargetNS.</body><body package="WSDLWizard">initializeBindingClassesStruct	| struct |	bindingClassesStruct := Struct new. 	self bindingClassBuilder x2oDocuments do: [ :x2oElement | 		struct := Struct new.		struct at: #classes put: (self bindingClassBuilder complexTypesClassesFrom: x2oElement).		struct classes notEmpty ifTrue: [ 			struct at: #x2oElement put: x2oElement. 			self bindingClassesStruct 				at: (self bindingClassBuilder targetNamespaceFrom: x2oElement) 				put: struct]].</body><body package="WSDLWizard">initializeClassViewForTargetNS	self classDefinition packageModule		value: (self bindingClassBuilder buildOptions packageAt: self xmlTargetNamespaceAspect value).	self classDefinition namespaceModule 		value: (self bindingClassBuilder classNamespaceFrom: self currentTargetNamespaceStruct x2oElement).	self classListAspect list: self currentTargetNamespaceStruct classes.</body></methods><methods><class-id>WebServices.CreateBindingClassesTab</class-id> <category>accessing</category><body package="WSDLWizard">bindingClassBuilder	^self model bindingClassBuilder</body><body package="WSDLWizard">bindingClassesStruct	^bindingClassesStruct</body><body package="WSDLWizard">currentTargetNamespaceStruct	self xmlTargetNamespaceAspect value isEmpty ifTrue: [^nil].	^self bindingClassesStruct at: self xmlTargetNamespaceAspect value</body><body package="WSDLWizard">tabLabel	^X2OIcons allMapped -&gt; 'Binding Classes'</body></methods><methods><class-id>WebServices.CreateBindingClassesTab</class-id> <category>aspects</category><body package="WSDLWizard">classDefinition	^classDefinition isNil		ifTrue: [classDefinition := Tools.DefinitionCreationDialog new]		ifFalse: [classDefinition]</body><body package="WSDLWizard">classListAspect	^classListAspect</body><body package="WSDLWizard">selectedRow	^selectedRow isNil		ifTrue: [selectedRow := nil asValue]		ifFalse: [selectedRow]</body><body package="WSDLWizard">xmlTargetNamespaceAspect	^xmlTargetNamespaceAspect</body><body package="WSDLWizard">xmlTargetNamespaces	^xmlTargetNamespaces</body></methods><methods><class-id>WebServices.CreateBindingClassesTab</class-id> <category>actions</category><body package="WSDLWizard">changedClassNS	self currentTargetNamespaceStruct ifNil: [^nil].	self bindingClassBuilder		setClassNamespaceFrom: self currentTargetNamespaceStruct x2oElement 		to: self classDefinition namespaceModule value.</body><body package="WSDLWizard">changedPackage	self currentTargetNamespaceStruct ifNil: [^nil].	self bindingClassBuilder buildOptions packageMap 		at: self xmlTargetNamespaceAspect value 		put: self classDefinition packageModule value.</body><body package="WSDLWizard">classNameChanged	| nm cl ns systemNamespaces |	nm := self selectedRow value smalltalkClassName.	ns := self classDefinition namespaceModule value.	systemNamespaces := (ns = 'Smalltalk' ifTrue: [self class systemNamespaces] ifFalse: [OrderedCollection new]).	(systemNamespaces notEmpty		and: [(cl := (ns, '.',nm) asSymbol asQualifiedReference) isDefined			and: [systemNamespaces includes: cl value environment name ]])			ifTrue: [Dialog warn: ((#NewClassNameHasSmalltalkBinding&lt;&lt; #webservices &gt;&gt; 'New class name &lt;1s&gt; has duplicate binding in the Smalltalk namespace') expandMacrosWith: nm).].	self selectedRow value smalltalkClassAttribute value: nm.</body><body package="WSDLWizard">viewX2O	(X2OView model: self model) open</body><body package="WSDLWizard">xmlTargetNamespaceChanged	self xmlTargetNamespaceAspect value notEmpty 		ifTrue: [ self initializeClassViewForTargetNS ]</body></methods><methods><class-id>WebServices.CreateBindingClassesTab class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#CreateBindingClassesDialogHelp &lt;&lt; #webservices &gt;&gt;'The Create Binding classes dialog displays classes that will be generated from the X2O specification. You can see the specificafion if you press "View X2O..." button.XML target namespace - allows to select XML Schema and specify Package and Namespace for this Schema.Package - package name where the binding classes for the selected XML target namespace will be createdNamespace - Smalltalk namespace where the classes will be definedXMLComplex types to Smalltalk classes binding - the table defines two columns where the left list column shows list of XML Complex Types as they defined by XML Schema. The right list column shows list of suggested class names as they are specified by the "smalltalkClass" attribute in the X2O specification. The left column allows to change the suggested class names.If there are the classes with number suffixes it indicates that these classes have duplicated bindings in the namespace specified by settings.Pressing Next button generates classes'</body><body package="WSDLWizard">systemNamespaces	^OrderedCollection new		add: #Core;		add: #Database;		add: #OS;		add: #UI;		add: #Graphics;		yourself</body></methods><methods><class-id>WebServices.CreateBindingClassesTab class</class-id> <category>testing</category><body package="WSDLWizard">shouldCreateClasses: aModel	^aModel bindingType = #object</body></methods><methods><class-id>WebServices.GenerateClass</class-id> <category>actions</category><body package="WSDLWizard">changedClassName	self classNameAspect value isString		ifFalse: 			[self disableGenerate.			self selectedClass: self classNameAspect value.			self classNameAspect value: self classNameAspect value name asString ].</body><body package="WSDLWizard">changedGenerateCB	| shouldEnable |	shouldEnable := self generateClassCBAspect value.	(self widgetAt: #Name) isEnabled: shouldEnable.	(self wrapperAt: #classDefinition)		isEnabled: shouldEnable;		invalidate.	(self wrapperAt: #className) 		isEnabled: shouldEnable; 		invalidate.</body><body package="WSDLWizard">closeRequestFromParent	(self urlString value isNil or: [ self urlString value isEmpty]) 		ifTrue: [Dialog warn: (#AccessURLIsEmpty &lt;&lt; #webservices&gt;&gt;'Access URL is empty!'). ^false].	self generateClassCBAspect  value		ifTrue: [ ^self generate].	^true</body><body package="WSDLWizard">disableGenerate</body><body package="WSDLWizard">enableGenerate</body><body package="WSDLWizard">generate</body><body package="WSDLWizard">generateDo: aBlock	| res |	^self safelyExecute: 		[Cursor execute showWhile: 			[res := aBlock value.			((res isKindOf: Boolean) and: [res ])				ifTrue:  [	self disableGenerate. res]				ifFalse: [ false ]]]</body><body package="WSDLWizard">selectedClass: aClass	#{Store.Registry} isDefined		ifTrue: [ 	self classDefinition packageModule value: (Store.Registry packagesContaining: aClass) first name].	self classDefinition namespaceModule value: aClass environment name asString.</body></methods><methods><class-id>WebServices.GenerateClass</class-id> <category>aspects</category><body package="WSDLWizard">classDefinition	^classDefinition isNil		ifTrue: [classDefinition := Tools.DefinitionCreationDialog new]		ifFalse: 	[classDefinition]</body><body package="WSDLWizard">classNameAspect	^classNameAspect</body><body package="WSDLWizard">classNamespaceAspect	^classNamespaceAspect</body><body package="WSDLWizard">generateClassCBAspect	^generateClassCBAspect</body><body package="WSDLWizard">nameAspect	^self classNameAspect value</body><body package="WSDLWizard">nameAspect: aString	self classNameAspect value: aString</body><body package="WSDLWizard">urlString	^urlString</body></methods><methods><class-id>WebServices.GenerateClass</class-id> <category>initialize-release</category><body package="WSDLWizard">defaultName	^String new</body><body package="WSDLWizard">defaultURL	^'http://localhost:4920/'</body><body package="WSDLWizard">initializeAspects	classNamespaceAspect :=  self model classBuildOptions responderNS asValue. 	 urlString := (self model portUrl 		ifNotNil: [ :portUrl | portUrl ]		ifNil: [ self defaultURL, self model serviceClass name asString]) asValue.	generateClassCBAspect := self shouldUpdate asValue.	self generateClassCBAspect onChangeSend: #changedGenerateCB to: self.	classNameAspect := EntryWithPasteButtonModule new.	classNameAspect pasteBlock: 		[ IncrementalSearchDialog selectClass ifNotNil: [ :cl | self selectedClass: cl. cl name]].</body><body package="WSDLWizard">serviceClassName	^(self model serviceClass 		ifNotNil: [self model serviceClass name asString ] 		ifNil: [ String new ])</body></methods><methods><class-id>WebServices.GenerateClass</class-id> <category>testing</category><body package="WSDLWizard">shouldUpdate</body></methods><methods><class-id>WebServices.GenerateClass</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	| w |	super postBuildWith: aBuilder.	w := self widgetAt: #generateClassCBAspect.	self nameAspect notEmpty		ifTrue: [ w  labelString: (#UpdateClass &lt;&lt; #webservices &gt;&gt; 'Update class') asString].	self changedGenerateCB</body></methods><methods><class-id>WebServices.GenerateResponder</class-id> <category>testing</category><body package="WSDLWizard">shouldUpdate	^self model shouldUpdateResponder</body></methods><methods><class-id>WebServices.GenerateResponder</class-id> <category>initialize-release</category><body package="WSDLWizard">defaultName	^self serviceClassName, 'Responder'</body><body package="WSDLWizard">initializeAspects	self model findResponder.	super initializeAspects. 	self nameAspect:  (self model responderClass ifNotNil: [self model responderClassName ] ifNil: [self defaultName  ]).	wsdlPortName := self serviceClassName asValue.	wsdlServiceNameAspect := (self model serviceNameForPort: wsdlPortName value ) asValue.	documentationText := ((self model portDocumentationForPort: wsdlPortName value ) ifNotNil: [ :doc | doc ] ifNil: [ String new ]) asValue.	self classDefinition packageModule value: self model classBuildOptions responderPackage.	self classDefinition namespaceModule value: self model classBuildOptions responderNS.</body></methods><methods><class-id>WebServices.GenerateResponder</class-id> <category>actions</category><body package="WSDLWizard">changedGenerateCB	| shouldEnable |	super changedGenerateCB.	shouldEnable := self generateClassCBAspect value.	#( wsdlServiceLabel interfaceNameLabel accessUrlLabel documentationLabel wsdlServiceNameAspect wsdlPortName urlString documentationText ) do:		[:each | (self widgetAt: each) isEnabled: shouldEnable].</body><body package="WSDLWizard">generate	self nameAspect isEmpty ifTrue: [^false].	^self generateDo: 		[self urlString value asURI.		self model classBuildOptions responderNS: self classDefinition namespaceModule value.		self model classBuildOptions responderPackage: self classDefinition packageModule value.		self model 			generateResponder: self nameAspect 			documentation: self documentationText value string			url: self urlString value			serviceName: self wsdlServiceNameAspect value ]</body><body package="WSDLWizard">selectedClass: aClass	super selectedClass: aClass.	self model responderClass: aClass.	self urlString value: self model portUrl.	self documentationText value: (self model portDocumentation ifNil: [String new]).	self model classBuildOptions responderPackage: self classDefinition packageModule value.	self model classBuildOptions responderNS:self classDefinition namespaceModule value</body></methods><methods><class-id>WebServices.GenerateResponder</class-id> <category>aspects</category><body package="WSDLWizard">documentationText	^documentationText</body><body package="WSDLWizard">wsdlPortName	^wsdlPortName</body><body package="WSDLWizard">wsdlServiceNameAspect	^wsdlServiceNameAspect</body></methods><methods><class-id>WebServices.GenerateResponder class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#GenerateSOAPResponder &lt;&lt; #webservices &gt;&gt; 'Generate SOAP Responder class'</body><body package="WSDLWizard">helpText	^#GenerateResponderHelp &lt;&lt; #webservices &gt;&gt;'This page specifies settings to generate an SOAP Responder class.   To generate the responder class, check the Generate class box, then provide the settings.Responder class section:Name - a name for the SOAP Responder classPackage - the package to contain the class definitionName Space - the name space to contain the class definitionWsdl document section:Service name - the Wsdl &lt;service&gt; element nameInterface name - the interface name, same as the service class nameAddress URL - the port access point URL, including the port number Documentation - a description for the port '</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel</class-id> <category>accessing</category><body package="WSDLWizard">bindingClassBuilder	^self classBuilder bindingClassBuilder.</body><body package="WSDLWizard">bindingListToUpdate	^WsdlBuilderModel bindingListToUpdate</body><body package="WSDLWizard">bindingType	^bindingType ifNil: [ bindingType := self class bindingType]</body><body package="WSDLWizard">bindingType: aSymbol	bindingType := aSymbol</body><body package="WSDLWizard">classBuilder	^classBuilder</body><body package="WSDLWizard">clientClasses	^clientClasses isNil		ifTrue: [ OrderedCollection new ]		ifFalse: [ clientClasses ]</body><body package="WSDLWizard">clientClasses: aCollection	clientClasses := aCollection</body><body package="WSDLWizard">createClientClasses	^createClientClasses ifNil: [createClientClasses := self class createClientClasses]</body><body package="WSDLWizard">createClientClasses: aBoolean	createClientClasses := aBoolean</body><body package="WSDLWizard">createResponderClass	^createResponderClass ifNil: [ createResponderClass := self class createResponderClass ]</body><body package="WSDLWizard">createResponderClass: aBoolean	createResponderClass := aBoolean</body><body package="WSDLWizard">createServiceClasses	^createServiceClasses ifNil: [ createServiceClasses:= self class createServiceClasses ]</body><body package="WSDLWizard">createServiceClasses: aBoolean	createServiceClasses := aBoolean</body><body package="WSDLWizard">responderClass	^responderClass</body><body package="WSDLWizard">responderClass: aClass 	responderClass := aClass</body><body package="WSDLWizard">selectedAccessPoint	^selectedAccessPoint</body><body package="WSDLWizard">selectedAccessPoint: aString	selectedAccessPoint := aString</body><body package="WSDLWizard">serviceClasses	^serviceClasses</body><body package="WSDLWizard">serviceClasses: anObject 	serviceClasses := anObject</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel</class-id> <category>initialize-release</category><body package="WSDLWizard">initialize	super initialize. 	accessPoints := self class accessPoints.	classBuilder := WsdlClassBuilder new.</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel</class-id> <category>load schema</category><body package="WSDLWizard">accessPoints	^accessPoints</body><body package="WSDLWizard">accessPoints: aCollection	accessPoints := aCollection</body><body package="WSDLWizard">addAccessPoint: aString	self accessPoints 		detect: [ :str | aString match: str ]		ifNone: [ self accessPoints addFirst: aString ]</body><body package="WSDLWizard">buildConfig	[self classBuilder buildConfig.] 		on:  NonDeterministicContentModel 		do: [ :ex | Transcript cr; show: ex parameter printString, ' - ', ex errorString; cr. ex proceed ].</body><body package="WSDLWizard">createClasses	self buildConfig.	self createServiceClasses ifTrue: [ self serviceClasses: self classBuilder createServiceClasses ].	self createClientClasses ifTrue: [ self clientClasses: self classBuilder createClientClasses ].	self createResponderClass ifTrue: [ self responderClass: self classBuilder createResponderClass ].</body><body package="WSDLWizard">initializeBuilderFor: anURL bindingType: aSymbol	self selectedAccessPoint: anURL.	self bindingType: aSymbol.	^self initializeClassBuilder.</body><body package="WSDLWizard">initializeClassBuilder	self bindingType = #object		ifTrue: [  self classBuilder readFrom: self selectedAccessPoint]		ifFalse: [ self classBuilder readDocumentsWithDefaultBindingFrom: self selectedAccessPoint].	self classBuilder bindingClassBuilder documents: self classBuilder x2oDocuments.	^self classBuilder</body><body package="WSDLWizard">responderName	| name |	name := self classBuilder 		validateClassName: (self classBuilder descriptor services first name type, 'Responder') 		in: self classBuilder responderNS.	self classBuilder buildOptions responderName:  name.	^self classBuilder buildOptions responderName</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel</class-id> <category>bindings</category><body package="WSDLWizard">x2oView	| stream |	stream := String new writeStream.	self classBuilder x2oDocuments		do: [ :x2o | 			x2o wsPrintOn: stream depth: 0.			stream cr; cr ].	^stream contents</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel</class-id> <category>test client-server</category><body package="WSDLWizard">scriptHeader	| stream |	^(self serviceClasses notNil and: [self  serviceClasses notEmpty])		ifTrue: 			[stream := String new writeStream.			stream 				nextPutAll: (#BeforeUsingScriptAddCorrectImplementation &lt;&lt; #webservices &gt;&gt;'"Before using this script, add correct implementation code to the service classes.' ) asString;				cr;nextPutAll: (#ForDetailsReferToWSGuide &lt;&lt; #webservices &gt;&gt; 'For examples, please refer to the Web Services Demo."') asString.			self serviceClasses do: [ :sc | stream crtab; nextPutAll: 'RefactoringBrowser newOnClass: ', sc fullName, '.' ].			stream cr.			stream contents]		ifFalse: 			[" The service class was not created " 			String new ].</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel class</class-id> <category>access points</category><body package="WSDLWizard">accessPoints	^AccessPoints isNil		ifTrue: [AccessPoints := OrderedCollection new]		ifFalse: [AccessPoints]</body><body package="WSDLWizard">accessPoints: aCollection	AccessPoints := aCollection</body><body package="WSDLWizard">resetAccessPoints	"self resetAccessPoints"	AccessPoints := nil.</body><body package="WSDLWizard">setAccessPointsSamples	"self setAccessPointsSamples"	^AccessPoints := #('http://www.hundhausen.com/euro2004/schedule.asmx?WSDL' 'http://www.strikeiron.com/webservices/usdadata.asmx?wsdl' 'http://services.xmethods.net/soap/urn:xmethods-delayed-quotes.wsdl' 'http://ws-i.gotdotnet.com/wsi/configurator/configurator.asmx?wsdl''http://www.xmethods.net/sd/2001/BabelFishService.wsdl' 'http://www.xmethods.net/sd/2001/CurrencyExchangeService.wsdl''http://www.xignite.com/xCurrencies.asmx?WSDL' 'http://dotnet.rus.uni-stuttgart.de/ws_konrad/sayings/service.asmx?wsdl' 'http://service.bulletinconnect.net/services/BulletinServer?wsdl' 'http://openmozart.net/servlet/services/Koechel?wsdl' 'http://moo.tradevisa.net/pls/soap/wsdl?service=smcp.uddi_v2' ) asOrderedCollection</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel class</class-id> <category>instance creation</category><body package="WSDLWizard">new	^super new initialize</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel class</class-id> <category>default values</category><body package="WSDLWizard">bindingTypeValue		^#object</body><body package="WSDLWizard">createClientClassesValue	^true</body><body package="WSDLWizard">createResponderClassValue		^true</body><body package="WSDLWizard">createServiceClassesValue	^true</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel class</class-id> <category>defaults</category><body package="WSDLWizard">bindingType	^bindingType ifNil: [ bindingType := self bindingTypeValue]</body><body package="WSDLWizard">bindingType: aSymbol	bindingType := aSymbol</body><body package="WSDLWizard">createClientClasses	^createClientClasses ifNil: [ createClientClasses := self createClientClassesValue]</body><body package="WSDLWizard">createClientClasses: aBoolean	createClientClasses := aBoolean</body><body package="WSDLWizard">createResponderClass	^createResponderClass  ifNil: [ createResponderClass := self createResponderClassValue]</body><body package="WSDLWizard">createResponderClass: anObject	createResponderClass := anObject</body><body package="WSDLWizard">createServiceClasses	^createServiceClasses  ifNil: [ createServiceClasses := self createServiceClassesValue]</body><body package="WSDLWizard">createServiceClasses: anObject	createServiceClasses := anObject</body></methods><methods><class-id>WebServices.WsdlClassBuilderModel class</class-id> <category>utilities</category><body package="WSDLWizard">createClientScriptFrom: aWsdlBinding responderName: responderName client: aClient	| stream | 	stream := String new writeStream. 	stream		cr;		nextPutAll: (#AServerWithMathingAddress &lt;&lt; #webservices &gt;&gt; '"Add the application responder to a server.A server with matching address is found or a new one is created. If a new server is created it will also be started automatically."') asString; 		crtab; nextPutAll: responderName, ' addToServer.';cr;cr;		nextPutAll: aClient createScript; cr;		cr;nextPutAll: (#ReleaseResponderFromServer &lt;&lt; #webservices &gt;&gt; '"Release responders from the server and reset responder instances. "') asString;		crtab; nextPutAll: responderName, ' flushResponders.'; cr;cr.	^stream contents</body></methods><methods><class-id>WebServices.OperationView</class-id> <category>accessing</category><body package="WSDLWizard">model	^model</body><body package="WSDLWizard">model: aWsdlBuilderModel	model := aWsdlBuilderModel</body><body package="WSDLWizard">operation	^operation</body><body package="WSDLWizard">operation: anInterfaceOperationDescriptor	operation := anInterfaceOperationDescriptor</body><body package="WSDLWizard">selector	^self operation selector</body><body package="WSDLWizard">serviceClass	^self model serviceClass</body></methods><methods><class-id>WebServices.OperationView</class-id> <category>view</category><body package="WSDLWizard">label	icon := (self operation isResolved				ifTrue: [self resolvedTypeIcon]				ifFalse: [self unresolvedTypeIcon]).	^Core.Text fromString: self operation name type</body></methods><methods><class-id>WebServices.OperationView</class-id> <category>printing</category><body package="WSDLWizard">printOn: aStream		aStream nextPutAll: self operation name type.</body></methods><methods><class-id>WebServices.ImportedBindingView</class-id> <category>printing</category><body package="WSDLWizard">printOn: aStream	aStream nextPutAll: 'Binding at: ',self namespace.</body></methods><methods><class-id>WebServices.ImportedBindingView</class-id> <category>accessing</category><body package="WSDLWizard">binding	^binding</body><body package="WSDLWizard">binding: aXMLObjectBinding	binding := aXMLObjectBinding</body><body package="WSDLWizard">included	^included</body><body package="WSDLWizard">included: anObject	included := anObject</body><body package="WSDLWizard">namespace	^binding targetNamespace</body></methods><methods><class-id>WebServices.ImportedBindingView</class-id> <category>view</category><body package="WSDLWizard">label	icon := (included				ifTrue: [X2OIcons visualFor: #checkmark]				ifFalse: [self unresolvedTypeIcon ]).	^Core.Text fromString: self namespace</body></methods><methods><class-id>WebServices.SetOperationTypes</class-id> <category>private</category><body package="WSDLWizard">acceptComplexType: aClass	^(self model complexTypeMarshalers  detect: [ :view | view type  smalltalkClass = aClass] ifNone: [^nil]) type</body><body package="WSDLWizard">setTypeInSelection: typeStringOrArray displayString: displayString	self selectedRow value isNil ifTrue: [ ^nil].	self selectedRow value part = #return ifTrue: [self pattern value: #beInOut].	super setTypeInSelection: typeStringOrArray displayString: displayString.</body><body package="WSDLWizard">transplantDataSetController	"A few hoops need to be jumped in order for the replacement controller to function.	Note that the keyboard processor does not need to be notified of the controller change	since it holds onto the view rather than the controller."	| view oldController newController |	view := self widgetAt: #DatasetPartTableAspect.	oldController := view controller.	newController := DataSetController new.	newController		menuHolder: oldController menuHolder;		performer: oldController performer;		keyboardProcessor: oldController keyboardProcessor.	view controller: newController</body><body package="WSDLWizard">typeColumnIndex	^4</body></methods><methods><class-id>WebServices.SetOperationTypes</class-id> <category>accessing</category><body package="WSDLWizard">inoutList	^#(#in #out) asValue</body><body package="WSDLWizard">operation	^tableItemView operation</body><body package="WSDLWizard">serviceClass	^self model serviceClass</body></methods><methods><class-id>WebServices.SetOperationTypes</class-id> <category>aspects</category><body package="WSDLWizard">classNameAspect	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^classNameAspect isNil		ifTrue:			[classNameAspect := String new asValue]		ifFalse:			[classNameAspect]</body><body package="WSDLWizard">descriptionAspect	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	| str |	^descriptionAspect isNil		ifTrue:			[str := self operation notNil				ifTrue: [ self operation documentation ]				ifFalse: [String new ].			descriptionAspect := str asValue ]		ifFalse:			[descriptionAspect]</body><body package="WSDLWizard">methodSelectorAspect	^methodSelectorAspect</body><body package="WSDLWizard">nameAspect	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	| str |	^nameAspect isNil		ifTrue:			[str := self operation notNil				ifTrue: [ self operation name ]				ifFalse: [String new ].			nameAspect := str asValue ]		ifFalse:			[nameAspect]</body><body package="WSDLWizard">pattern	^pattern isNil		ifTrue: [pattern := #beInOut asValue]		ifFalse:	[pattern]</body></methods><methods><class-id>WebServices.SetOperationTypes</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	| st menu |	super initializeAspects.	descriptionAspect := self operation documentation asValue.	nameAspect := self operation name type asValue.	classNameAspect :=  ( self model serviceClass findSelector: self operation selector) first name asValue.	self operation pattern = self operation class defaultPattern 		ifTrue: [self pattern value: #beInOut ]		ifFalse: [self pattern value: #beRobustInOnly ].	methodSelectorAspect := (self model 								methodSgntFor: self model serviceClass 								selector: self operation selector) asValue.	st := typesMenu menuItemWithValue: #addFault.	menu := Menu new.	self model faultNames do: [ :each |		menu addItemLabel: each asString value: [ self addFault: each ] ].	st submenu: menu.	st := typesMenu menuItemWithValue: #addInputSoapHeader.	menu := Menu new.	self model soapHeaderNames do: [ :each |		menu addItemLabel: each asString value: [ self addInputHeader: each ] ].	st submenu: menu.	st := typesMenu menuItemWithValue: #addOutputSoapHeader.	menu := Menu new.	self model soapHeaderNames do: [ :each |		menu addItemLabel: each asString value: [ self addOutputHeader: each ] ].	st submenu: menu.	self initializeDataset</body><body package="WSDLWizard">initializeDataset	| tokens binding  parameterName inMarshalers outMarshalers |	binding := self model operationX2OBinding.	inMarshalers := binding ifNotNil: [self operation inputMarshalersFromBinding: binding ].	tokens := self operation selector tokensBasedOn: $:.	1 to: tokens size - 1 do: [ :ind |		parameterName := (inMarshalers notNil and: [ inMarshalers notEmpty]) 			ifTrue: [(inMarshalers at: ind) tag type]			ifFalse: [tokens at: ind].		self 			newRow: #parameter 			name: parameterName 			inout: #in			marshalers: ((inMarshalers notNil and: [ inMarshalers notEmpty]) ifTrue: [inMarshalers at: ind]) ].	outMarshalers := binding ifNotNil: [ self operation returnMarshalerFromBinding: binding ].	(outMarshalers notNil		or: ["the operation is not described yet"outMarshalers isNil and:[inMarshalers isNil or: [inMarshalers isEmpty]]])		ifTrue: [self pattern value: #beInOut.				self 					newRow: #return 					name: '--' 					inout: '--'					marshalers: outMarshalers]		ifFalse: [self pattern value: #beRobustInOnly].			binding ifNotNil: 		[ ( self operation faultMarshalersFromBinding: binding  interfaceFaults: self model faults )			do: [ :assoc |				self 					newRow: #fault 					name: assoc key 					inout: #out					marshalers: assoc value  ]].	(self model operationHeaders at: self operation name ifAbsent: [ nil ])		ifNotNil: [ :coll | coll do: [ :assoc | 					assoc key = #in ifTrue: [self addInputHeader: assoc value ] ifFalse: [self addOutputHeader: assoc value]] ].	self datasetAspect list notEmpty ifTrue: [ self datasetAspect selectionIndex: 1 ].	self datasetAspect list do: [ :row | row clean: true]</body><body package="WSDLWizard">model: aWsdlBuiderModel operationView: anOperationView	tableItemView := anOperationView.	self setModel: aWsdlBuiderModel.</body><body package="WSDLWizard">newRow: partString name: nameString inout: aSymbol marshalers: anXMLTypeMarshaler	| row |	row := OperationTypeRow new.	row		"part: #parameter #return #exception #header "		part: partString asSymbol;		"attribute #name "		name: nameString;		"part type: #in #out #inout "		inout: aSymbol;		"Type array. Will be used to create an operation part marshaler"		typeArray: anXMLTypeMarshaler;		"The string will be displayed in the dataset type column  "		displayString: (anXMLTypeMarshaler ifNotNil: [ anXMLTypeMarshaler  typeMarshaler typeDescription] ifNil: ['']).	self datasetAspect list add: row.	^row</body></methods><methods><class-id>WebServices.SetOperationTypes</class-id> <category>actions</category><body package="WSDLWizard">acceptType	| rows |	rows := self datasetAspect list.	(rows 		detect: [ :row | row part = #parameter and: [ row typeArray isNil]]		ifNone: [nil]) ifNotNil: [ :row | ^Dialog warn: (( #MissingTypeValueFor1sParameter &lt;&lt; #webservices &gt;&gt;  'There is missing Type value for #&lt;1s&gt; parameter') expandMacrosWith:  row name) ].	self pattern value = #beInOut ifTrue: [	 	(rows 			detect: [ :row | row part = #return and: [ row typeArray isNil]]			ifNone: [nil]) ifNotNil: [ :row | ^Dialog warn: ( #MissingReturnTypeValueForRequest &lt;&lt; #webservices &gt;&gt;  'There is missing return Type value for Request-Response operation pattern.') ]].	self operation name type ~= self  nameAspect value		ifTrue: [self model changeOperationName: self operation to: self  nameAspect value ].	self operation perform: self pattern value.	self model setInput: (rows select: [ :row | row part = #parameter ]) for: self operation.	self model setOutput: (rows detect: [ :row | row part = #return ] ifNone: [nil]) for: self operation.	self model setFaults: (rows select: [ :row | row part = #fault ]) for: self operation.	self model setSoapHeaders: (rows select: [ :row | '*soapheader*' match: row part asString ]) for: self operation.	self operation documentation: (self descriptionAspect value ifNotNil: [ :val | val string]).	callback notNil ifTrue: [callback value ].	self model setUpdated.	self closeRequest</body><body package="WSDLWizard">addFault: aString	(self datasetAspect list anySatisfy: [ :row | row part = #fault  and: [row name = aString ]]) ifTrue: [^nil].	self 		newRow: #fault 		name: aString 		inout: #out		marshalers: (self model faultMarshalerFor: aString).</body><body package="WSDLWizard">addInputHeader: aString	(self datasetAspect list anySatisfy: [ :row | row part = #inputSoapHeader  and: [row name = aString ]]) ifTrue: [^nil].	self 		newRow: #inputSoapHeader 		name: aString 		inout: #in		marshalers: (self model soapHeaderMarshalerFor: aString).</body><body package="WSDLWizard">addOutputHeader: aString	(self datasetAspect list anySatisfy: [ :row | row part = #outputSoapHeader  and: [row name = aString ]]) ifTrue: [^nil].	self pattern value = #beInOut ifTrue: [ 		self 			newRow: #outputSoapHeader 			name: aString 			inout: #out			marshalers: (self model soapHeaderMarshalerFor: aString) ]</body><body package="WSDLWizard">browseMethod	self 		browseClass: self  model serviceClass 		method: self  operation  selector</body><body package="WSDLWizard">getComplexTypeDialog	^self selectComplexTypeDialog ifNotNil: [ :complexType | complexType type smalltalkClass ]</body><body package="WSDLWizard">onPatternChange	self pattern value = #beRobustInOnly ifTrue: [ 		(self datasetAspect list select: [ :row | row part = #return ]) 			do: [ :return | self datasetAspect list remove: return.].		(self datasetAspect list select: [ :row | row part = #outputSoapHeader ])			do: [ :each | self datasetAspect list remove: each].		(self datasetAspect list select: [ :row | row part = #parameter and: [row inout = #out]])			do: [ :each | each inout: #in ]].	self pattern value = #beInOut ifTrue: [ 		self datasetAspect list 			detect: [ :row | row part = #return ] 			ifNone: [ (self newRow: #return name: '--' inout: '--' marshalers: nil) ]].		self datasetAspect listHolder changed: #value.</body><body package="WSDLWizard">removeFault	self selectedRow value  ifNil: [^nil].	self selectedRow value part = #fault		ifTrue: [self datasetAspect list remove: self selectedRow value ifAbsent: [nil] ]</body><body package="WSDLWizard">removeSoapHeader	self selectedRow value ifNil: [^nil].	('*SoapHeader' match: self selectedRow value part asString)		ifTrue: [self datasetAspect list remove: self selectedRow value ifAbsent: [nil] ]</body><body package="WSDLWizard">selectComplexTypeDialog	| selected |	ComplexTypesDialog new		typesView: self model complexTypeMarshalers;		setModel: self model;		resultBlock: [ :selection | selected := selection ];		open.	^selected</body><body package="WSDLWizard">setCollectionType	CollectionDialog openWith: self</body><body package="WSDLWizard">setComplexType	self selectComplexTypeDialog		ifNotNil: [ :selection | self setComplexTypeInSelection: selection ]</body><body package="WSDLWizard">setComplexTypeInSelection:  aTypeMarshalerView	(self selectedRow value isNil 		or: [aTypeMarshalerView isNil 			or: [aTypeMarshalerView type isNil]]) ifTrue: [ ^nil].	self 		setTypeInSelection: aTypeMarshalerView type 		displayString:  (aTypeMarshalerView type ifNotNil: [ :m | m typeMarshaler typeDescription] ifNil: ['']).	self datasetChanged</body></methods><methods><class-id>WebServices.SetOperationTypes</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self transplantDataSetController.</body></methods><methods><class-id>WebServices.SetOperationTypes class</class-id> <category>instance creation</category><body package="WSDLWizard">model: aWsdlBuiderModel operationView: aOperationView callback: aBlock	^self new		model: aWsdlBuiderModel operationView: aOperationView;		callback: aBlock;		yourself</body></methods><methods><class-id>WebServices.SetOperationTypes class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#SetOperationTypesHelp &lt;&lt; #webservices &gt;&gt;'This dialog allows you to set the operation name, input/output parameters, data types, faults, and documentation for an interface method.  The name, type, and in/out settings are required before a document can be generated.Name - Give a name to the operation, to be used for the &lt;operation&gt; element in the WSDL &lt;portType&gt; or &lt;interface&gt; element.Description - Enter a description of the operation.Request-Response and One-Way options  define the operation message exchange pattern. Setting One-Way on 	- In Wsdl 1.1 spec the operation output message won''t be created.	- In Wsdl 2.0 spec the operation pattern will be set to "http://www.w3.org/ns/wsdl/robust-in-only". (http://www.w3.org/TR/2007/REC-wsdl20-adjuncts-20070626/#robust-in-only)Using #One-Way option will remove the operation return Type  and output Soap Headers.Part column - identifies the item as either a parameter, result, fault, inputSoapHeader, or outputSoapHeader.Name column - provides a name for the message part in the Wsdl document.Type column - sets the type for the message part. The types are provided in a pop-up list, and will be stored as a pragma in the service class operation.In/Out - indentifies the parameter as an input or output parameter. The value of this column is used only for RPC-style document.  Right click menu actions:Simple and Complex - set the operation return or parameter typeCollection, Struct, or Choice - create a new type and set  the operation return or parameter type.Add fault - adds a new fault part to the operation.  For WSDL 2.0 it adds &lt;outfault&gt; for the operation. A dialog will prompt you to select a complex type that is derived from the exception class.Remove fault - removes fault from the operation.Add Input Soap Header - adds a header to the operation binding input messageAdd Output Soap Header - adds a header to the operation binding output message'</body></methods><methods><class-id>WebServices.UserPasswordDialog</class-id> <category>actions</category><body package="WSDLWizard">acceptUserInfo	actionBlock value: self userNameAspect value value: self passwordAspect value.	^self accept value: true</body></methods><methods><class-id>WebServices.UserPasswordDialog</class-id> <category>aspects</category><body package="WSDLWizard">passwordAspect	^passwordAspect isNil		ifTrue:[passwordAspect := String new asValue]		ifFalse:	[passwordAspect]</body><body package="WSDLWizard">serverName	^serverName isNil		ifTrue:[serverName := String new asValue]		ifFalse:[serverName]</body><body package="WSDLWizard">serverName: aString	serverName := aString asValue</body><body package="WSDLWizard">userNameAspect	^userNameAspect isNil		ifTrue:[userNameAspect := String new asValue]		ifFalse:[userNameAspect]</body></methods><methods><class-id>WebServices.UserPasswordDialog</class-id> <category>accessing</category><body package="WSDLWizard">actionBlock	^actionBlock</body><body package="WSDLWizard">actionBlock: anObject	actionBlock := anObject</body></methods><methods><class-id>WebServices.MissingMethods</class-id> <category>aspects</category><body package="WSDLWizard">allSelectors	^allSelectors asValue</body><body package="WSDLWizard">operationsTableAspect	^operationsTableAspect</body><body package="WSDLWizard">selectedRow	^selectedRow isNil		ifTrue: [selectedRow := nil asValue]		ifFalse: 	[selectedRow]</body><body package="WSDLWizard">serviceClassAspect	^serviceClassAspect</body></methods><methods><class-id>WebServices.MissingMethods</class-id> <category>accessing</category><body package="WSDLWizard">operations	^operations</body><body package="WSDLWizard">operations: aCollection	operations := aCollection</body></methods><methods><class-id>WebServices.MissingMethods</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	| selectors |	serviceClassAspect := self model serviceClass fullName asValue.	operationsTableAspect :=  SelectionInList new.	operationsTableAspect selectionIndexHolder compute: [ :v | self selectedRow value: operationsTableAspect selection].	selectors := Dictionary new.	self model descriptor collectProtocolSelectorsFrom: self model serviceClass in: selectors.	allSelectors := OrderedCollection new.	selectors keysAndValuesDo: [ :key :value | value do: [ :sel | allSelectors add: (key name, '&gt;&gt;', sel)]].	self setOperationTableAspect.</body><body package="WSDLWizard">setOperationTableAspect	| coll |	coll := OrderedCollection new.	self operations do: [ :op | 		coll add: ( Struct new					operationName: op name type;					selector: (op selector ifNil: ['--'] ifNotNil: [op selector]);					yourself)].	self operationsTableAspect list: coll.	self operationsTableAspect  listHolder changed: #value</body></methods><methods><class-id>WebServices.MissingMethods</class-id> <category>actions</category><body package="WSDLWizard">cancelWizard	^self close</body><body package="WSDLWizard">proceed	^self accept value: true</body><body package="WSDLWizard">selectorChanged	| tokens operation |	operation := self operations detect: [ :op | op name type = selectedRow value operationName ] ifNone: [nil].	(allSelectors includes: selectedRow value selector) ifFalse: [selectedRow value selector: '--'. ^nil ].	self operations remove: operation.	tokens := selectedRow value selector tokensBasedOn:$&gt;.	operation selector: tokens last asSymbol.	self setOperationTableAspect</body></methods><methods><class-id>WebServices.MissingMethods class</class-id> <category>instance creation</category><body package="WSDLWizard">model: aModel operations: aCollection		^self new		operations: aCollection;		setModel: aModel;		yourself</body></methods><methods><class-id>WebServices.MissingMethods class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#MissingMethodsDialogHelp &lt;&lt; #webservices &gt;&gt;'The Missing Methods dialog displays interface operations that are missing corresponding methods in the service class or its superclasses. If you press on Proceed button the wizard proceeds and allows updating only the operations that have the service class methods.If you press on Close Wizard button the Wizard will be closed and you can try to restore the missing services'</body></methods><methods><class-id>WebServices.GenerateClient</class-id> <category>initialize-release</category><body package="WSDLWizard">defaultName	^self serviceClassName, 'Client'</body><body package="WSDLWizard">defaultURL	^String new</body><body package="WSDLWizard">initializeAspects	self model findClient.	super initializeAspects.	self nameAspect: (self model clientClass notNil 		ifTrue: [ self model clientClassName ]		ifFalse: [self defaultName]).	self classDefinition packageModule value:  		(self model classBuildOptions clientPackage = self model classBuildOptions package			ifTrue: [ self model classBuildOptions responderPackage]			ifFalse: [ self model classBuildOptions clientPackage ]).	self classDefinition namespaceModule value: (		self model classBuildOptions clientNS = self model classBuildOptions classNamespace			ifTrue: [self model classBuildOptions responderNS ]			ifFalse: [ self model classBuildOptions clientNS ]).</body></methods><methods><class-id>WebServices.GenerateClient</class-id> <category>testing</category><body package="WSDLWizard">shouldUpdate	^self model shouldUpdateClient</body></methods><methods><class-id>WebServices.GenerateClient</class-id> <category>actions</category><body package="WSDLWizard">changedGenerateCB	| shouldEnable |	super changedGenerateCB.	shouldEnable := self generateClassCBAspect value.	#(serviceUrlLabel urlString  connectTo ) do:		[:each | (self widgetAt: each) isEnabled: shouldEnable].</body><body package="WSDLWizard">generate	self nameAspect isEmpty ifTrue: [^false].	^self generateDo: 		[self urlString value asURI.		self model classBuildOptions clientPackage: self classDefinition packageModule value.		self model classBuildOptions clientNS: self classDefinition namespaceModule value.		self model generateClient: self nameAspect portUrl: self urlString value asURI  ]</body><body package="WSDLWizard">selectedClass: aClass	super selectedClass: aClass.	self model clientClass: aClass.	self model classBuildOptions clientNS: self classDefinition namespaceModule value.	self model classBuildOptions clientPackage: self classDefinition packageModule value.</body></methods><methods><class-id>WebServices.GenerateClient class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#GenerateClientClass &lt;&lt; #webservices &gt;&gt; 'Generate Client class'</body><body package="WSDLWizard">helpText	^#GenerateClientHelp &lt;&lt; #webservices &gt;&gt;'Check the Generate class box to generate an Client class for this service. Client class optionsName - the name for the client classPackage - the name of the containing packageName Space - the name of the containing name spaceConnect to sectionService URL - the URL at which the service will be requestedPort - the port on which the service will be offered'</body></methods><methods><class-id>WebServices.SelectComplexType</class-id> <category>actions</category><body package="WSDLWizard">selectionIndexChange	self typesAspect selection  ifNil: [^nil].	self nameAspect value: self typesAspect selection type name type.	parent nameChanged</body></methods><methods><class-id>WebServices.SelectComplexType</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	nameAspect := String new asValue.	typesAspect := SelectionInList with: self parent typeMarshalers.	typesAspect selectionIndexHolder onChangeSend: #selectionIndexChange to: self</body></methods><methods><class-id>WebServices.SelectComplexType</class-id> <category>interface opening</category><body package="WSDLWizard">labelAtIndex: index inView: view 	^(self typesAspect list at: index) labelAndIconWith: index inView: view</body><body package="WSDLWizard">postBuildWith: aBuilder	| cwidget |	cwidget := self widgetAt: #types.	cwidget visualBlock: [ :view :index | self labelAtIndex: index inView: view ].	cwidget selectedVisualBlock: [ :view :index | self reverseLabel: (self labelAtIndex: index inView: view) ].	(self widgetAt: #nameAspect) controller continuousAccept: true.</body><body package="WSDLWizard">reverseLabel: aLabel 	"Build the wrappers needed to reverse the label to show it selected."	| rw |	rw := ReversingWrapper on: aLabel.	rw reverse setValue: true.	^BoundedWrapper on: rw</body></methods><methods><class-id>WebServices.SelectComplexType</class-id> <category>aspects</category><body package="WSDLWizard">nameAspect	^nameAspect</body><body package="WSDLWizard">typesAspect	^typesAspect</body></methods><methods><class-id>WebServices.DescribeFaultsTab</class-id> <category>actions</category><body package="WSDLWizard">addFault	| root ch |	(AddInterfaceFault model: self model)		acceptBlock: [ :args |			root := self faultTreeView list root.			(self model addInterfaceFaultName: args ) ifNotNil: [ :struct |				root addChild: (ch := self newFaultItemFor: struct ).				self refreshTree.				self faultTreeView selection: ch ]];		open.</body><body package="WSDLWizard">addFaultHeader	| newHeader ch fault |	(AddSoapHeader model: self model)		acceptBlock: [ :args | 			fault := self  faultTreeView selection.			self faultTreeView selection isHeader ifTrue: [fault := fault parent].			newHeader := self model addSoapHeaderNamed: (args at: 1) type: (args at: 2) toFault:  fault itemDescriptor.			newHeader				required: (args at: 3);				mustUnderstand: (args at: 4).			ch := self newHeaderItemFor: newHeader.			fault addChild: ch.			self refreshTree.			self faultTreeView selection: ch ];		open.</body><body package="WSDLWizard">faultSelected	(self widgetAt: #remove) isEnabled: self faultTreeView selection notNil.	(self widgetAt: #properties ) isEnabled: (self faultTreeView selection notNil and: [self faultTreeView selection isFault ]).	(self widgetAt: #addHeader ) isEnabled: (self faultTreeView selection notNil and: [self faultTreeView selection isFault ]).</body><body package="WSDLWizard">refreshTree	self faultTreeView list refreshRoot.	self faultTreeView list expandToLevel: 1.</body><body package="WSDLWizard">removeFault	self model removeInterfaceFaultName: (self faultTreeView selection itemDescriptor faultName) type.</body><body package="WSDLWizard">removeFaultHeader	| fault |	 fault := self faultTreeView selection parent itemDescriptor at: #faultBinding.	(fault soapHeaders detect: [ :header | header element type = self faultTreeView selection name ] ifNone: [nil])		ifNotNil: [ :header | fault soapHeaders remove: header ].</body><body package="WSDLWizard">removeFaultOrHeader	self faultTreeView selection ifNil: [^nil].	self faultTreeView selection isFault 		ifTrue: [ 	self removeFault ]		ifFalse: [ self removeFaultHeader ].	self setFaultTreeViews</body><body package="WSDLWizard">updateFaultProperties	| fault |	self faultTreeView selection ifNil: [^nil].	fault := self faultTreeView selection itemDescriptor.	(AddInterfaceFault updateFaultProperties:  fault model: self model)		acceptBlock: [ :args |			fault faultBinding				addSoapFaultCodeNamed: (args at: 3) asString;				addSoapFaultSubcodeNamed: (args at: 4) asString trimBlanks.			 ];		open.</body><body package="WSDLWizard">updateView	self setFaultTreeViews</body></methods><methods><class-id>WebServices.DescribeFaultsTab</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	faultTreeView := SelectionInTree new.	self setFaultTreeViews.	self faultTreeView selectionIndexHolder onChangeSend: #faultSelected to: self.</body><body package="WSDLWizard">newFaultItemFor: aStruct	| faultItem |	faultItem := HeaderTreeItem new		itemDescriptor: aStruct;		name: aStruct faultName type;		type: #fault;		yourself.	(aStruct at: #faultBinding ifAbsent: [nil]) ifNotNil: [ :faultBinding |  		faultBinding soapHeaders do: [ :header |			faultItem addChild: (self newHeaderItemFor: header). ]].	^faultItem</body><body package="WSDLWizard">newHeaderItemFor: aHeader	^HeaderTreeItem new 		itemDescriptor: aHeader; 		type: #header; 		name: aHeader element type; 		yourself.</body><body package="WSDLWizard">setFaultTreeViews	| headerTree modelx |	(headerTree :=  HeaderTreeItem new) type: #root.	headerTree children: (self model faults collect: [ :struct | self newFaultItemFor: struct ]).	modelx := TreeModel		on: headerTree		displayRoot: false		childrenWith: [:item | item children]		testHasChildrenWith: [:item | item hasChildren].	self faultTreeView list: modelx.	self refreshTree</body></methods><methods><class-id>WebServices.DescribeFaultsTab</class-id> <category>aspects</category><body package="WSDLWizard">faultTreeView	^faultTreeView</body></methods><methods><class-id>WebServices.DescribeFaultsTab</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	(builder componentAt: #faultTreeView) widget useImage: #treeIcon.	self model isWsdl11			ifTrue: [ 	(self  widgetAt: #addHeader ) isVisible: false.				(self  widgetAt: #properties ) isVisible: false]		ifFalse: [(self widgetAt: #addHeader )  isEnabled: false.				(self widgetAt: #properties )  isEnabled: false.].	(self builder componentAt: #addFault ) widget isEnabled: 		(self model exceptionTypeMarshalers notEmpty and: [self model serviceClass notNil]).	(self widgetAt: #remove )  isEnabled: false</body></methods><methods><class-id>WebServices.DescribeFaultsTab class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#DescribeFaultsTabHelp &lt;&lt; #webservices &gt;&gt;'Faults page allows you to add or remove Faults from an operation or Soap Headers for Wsdl 1.1.	Add Fault button allows to add a fault. The Add Fault dialog will display only classes that are derived from the Exception class. These fauls will be used to describe operations in the operations tab Description dialog. For Wsdl 2.0 these faults will be included in interface faults. The Add Fault dialog displays the fault name as the selected exception class name. The fault name can be changed. The fault names are unique for an interface. For WSDL 2.0 the dialog allows to set Soap Fault code and subcode. Remove  button allows to remove selected fault. The fault will be removed from all operations.Properties button is dispayed for WSDL 2.0 version and allows to update Soap Fault code and subcode.Add Header button is dispalayed for WSDL 2.0 version and allows to add Soap headers to the selected interface fault.'</body></methods><methods><class-id>WebServices.OperationTypeRow</class-id> <category>accessing</category><body package="WSDLWizard">inout	^inout</body><body package="WSDLWizard">inout: anObject	inout := anObject.	self setDirty</body><body package="WSDLWizard">inoutList	#(#in #out) asValue</body><body package="WSDLWizard">interface	^interface</body><body package="WSDLWizard">interface: anInterfaceDescriptor	interface := anInterfaceDescriptor</body><body package="WSDLWizard">part	^part</body><body package="WSDLWizard">part: anObject	part := anObject</body></methods><methods><class-id>WebServices.WsdlWizard</class-id> <category>initialize-release</category><body package="WSDLWizard">fromSchemaPages	| pagesx |	pagesx := Array new: 4.	pagesx 		at: 1 put: WelcomePage;		at: 2 put: LoadSchema;		at: 3 put: CreateClassesSettingsTabs;		at: 4 put: TestClientServer.	model := self classBuilderModelClass new.	^pagesx</body><body package="WSDLWizard">initializeModel</body><body package="WSDLWizard">initializePages	pages := self fromSchemaPages.</body><body package="WSDLWizard">newServicePages	| pagesx |	pagesx := Array new: 9.	pagesx 		at: 1 put: WelcomePage; 		at: 2 put: SelectWsdlVersion;		at: 3 put: AddImportedBindings;		at: 4 put: DescribeInterfaceTabs;		at: 5 put: GenerateResponder;		at: 6 put: GenerateClient;		at: 7 put: TestClientServer;		at: 8 put: CreateWSDL;		at: 9 put: GoodByePage.	model := self wsdlBuilderModelClass new.	^pagesx</body><body package="WSDLWizard">setPagesFor: aSymbol	aSymbol = #buildFromSchema ifTrue: [pages :=  self fromSchemaPages ].	aSymbol = #buildNewService ifTrue: [pages :=  self newServicePages ].	aSymbol = #updateService ifTrue: [pages :=  self updateServicePages ].	pageIndex := 1.	(self builder componentAt: #next) widget isEnabled: true</body><body package="WSDLWizard">setPagesForClassBuilding	pages := self fromSchemaPages.	pageIndex := 1.</body><body package="WSDLWizard">updateServicePages	| pagesx |	pagesx := Array new: 9.	pagesx 		at: 1 put: WelcomePage; 		at: 2 put: SelectWsdlBinding;		at: 3 put: AddImportedBindings;		at: 4 put: DescribeInterfaceTabs;		at: 5 put: GenerateResponder;		at: 6 put: GenerateClient;		at: 7 put: TestClientServer;		at: 8 put: CreateWSDL;		at: 9 put: GoodByePage.	model := self wsdlBuilderModelClass new.	^pagesx</body></methods><methods><class-id>WebServices.WsdlWizard</class-id> <category>accessing</category><body package="WSDLWizard">classBuilderModelClass	^classBuilderModelClass ifNil: [ classBuilderModelClass := self defaultClassBuilderModelClass ]</body><body package="WSDLWizard">defaultClassBuilderModelClass	^WsdlClassBuilderModel</body><body package="WSDLWizard">defaultModelClass	^WsdlBuilderModel</body><body package="WSDLWizard">wsdlBuilderModelClass	^wsdlBuilderModelClass ifNil: [ wsdlBuilderModelClass := self defaultModelClass ]</body></methods><methods><class-id>WebServices.WsdlWizard</class-id> <category>actions</category><body package="WSDLWizard">cancel	pages size = pageIndex  ifTrue: [^self closeRequest].	(Dialog			choose: 'Are you sure you want to cancel?'			labels: (Array with: 'Yes' with: 'No' )			values: #(#yes #no )			default: #no)  = #yes ifTrue: [^self closeRequest ].</body></methods><methods><class-id>WebServices.WsdlWizard class</class-id> <category>accessing</category><body package="WSDLWizard">wizardHeader	^#WebServicesWizard &lt;&lt; #webservices &gt;&gt; 'Web Services Wizard'</body></methods><methods><class-id>WebServices.CreateWSDL</class-id> <category>accessing</category><body package="WSDLWizard">defaultFileExtension	^'*.wsdl'</body><body package="WSDLWizard">selectedSchemaType	^selectedSchemaType</body><body package="WSDLWizard">selectedSchemaType: aString	selectedSchemaType := aString</body><body package="WSDLWizard">types	^schemaTypeList collect: [:type | type key]</body></methods><methods><class-id>WebServices.CreateWSDL</class-id> <category>actions</category><body package="WSDLWizard">closeRequestFromParent	^self generateCBAspect  value		ifTrue: [self generate]		ifFalse: [true ]</body><body package="WSDLWizard">enableGenerate: aBoolean	(self widgetAt: #GenerateButton) isEnabled: aBoolean</body><body package="WSDLWizard">generate	| xmlDoc w |	^self safelyExecute: 		[ 	xmlDoc := self model createXMLDoc: (schemaTypeList at: self typeListAspect selectionIndex) value.			self perform: ('generateTo', self destinationType value,':' ) asSymbol with: xmlDoc.			(w := self widgetAt: #GenerateButton) notNil ifTrue: [ w isEnabled: false].			true		]</body><body package="WSDLWizard">selectedSchemaChanged	self destinationChanged</body></methods><methods><class-id>WebServices.CreateWSDL</class-id> <category>aspects</category><body package="WSDLWizard">defaultMethodName	^'wsdlSchema'</body><body package="WSDLWizard">typeListAspect	typeListAspect isNil		ifTrue: 			[(typeListAspect := SelectionInList						adapt: self						aspect: #selectedSchemaType						list: #types						selection: #selectedSchemaType:) selectionIndex: 1.			^typeListAspect].	^typeListAspect</body></methods><methods><class-id>WebServices.CreateWSDL</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	#(fileNameAspect postURLAspect) do: [:each | (self controllerAt: each) continuousAccept: true].	self generateCBChanged.	self parent enableBack.</body></methods><methods><class-id>WebServices.CreateWSDL</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeSpecificationAspect	(schemaTypeList := Array new: 2) 		at: 1 put: (Association key: #'Wsdl document' value: #createSpec); 		at: 2 put: (Association key: #'XML to object binding specification' value: #createSmalltalkBinding).	selectedSchemaType := schemaTypeList first key.</body></methods><methods><class-id>WebServices.CreateWSDL class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#GeneratingDocuments &lt;&lt; #webservices &gt;&gt; 'Generating Documents'</body><body package="WSDLWizard">helpText	^#GenerateWsdlSchemaHelp &lt;&lt; #webservices &gt;&gt;'To generate a WSDL document, check the Generate box and set the options, then click Next. The document will be generated from the service class or the SOAP Server that provides a web service description. Schemas section.  Select one of the schema types:Wsdl document - Generates a Wsdl document.  A &lt;service&gt; element is included only if a SOAP Server class has been created.XML to object binding - Generates only the &lt;schemaBindings&gt; section for a schema.Destination section:Method - saves the document to a class method with the specified name in the selected class.File out - saves the document to an external text filePOST - posts the document on the Http server using specified url'</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>accessing</category><body package="WSDLWizard">classBuildOptions	^classBuildOptions</body><body package="WSDLWizard">classBuildOptions: anObject	classBuildOptions := anObject</body><body package="WSDLWizard">clientClass	^clientClass</body><body package="WSDLWizard">clientClass: aClass 	clientClass := aClass</body><body package="WSDLWizard">completeDescriptor	^completeDescriptor</body><body package="WSDLWizard">descriptor	^descriptor</body><body package="WSDLWizard">responderClass	^responderClass</body><body package="WSDLWizard">responderClass: aClass 	responderClass := aClass.</body><body package="WSDLWizard">responderClassName	^self responderClass name asString</body><body package="WSDLWizard">serviceClass	^serviceClass</body><body package="WSDLWizard">serviceClass: aClass			serviceClass := aClass</body><body package="WSDLWizard">superClassesList	| list |	list := OrderedCollection new.	self serviceClass notNil		ifTrue: 			[list add: self serviceClass fullName asSymbol.			self serviceClass allSuperclasses do: [ :cl | 				(BindingBuilder excludedSupersHolder value includes: cl name)					ifFalse: [ list add: cl fullName asSymbol  ]]].	^list</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>select Wsdl version</category><body package="WSDLWizard">defaultOperationStyle20	(descriptor isNil or: [descriptor isKindOf: Wsdl11ConfigurationDescriptor]) ifTrue: [^#iri].	^self schemaBuildOptions styleDefaultTail asSymbol</body><body package="WSDLWizard">defaultSchemaVersion	descriptor ifNil: [^#wsdl20].	^descriptor  class = Wsdl11ConfigurationDescriptor		ifTrue: [#wsdl11]		ifFalse: [#wsdl20]</body><body package="WSDLWizard">defaultStyleAttribute11	(descriptor isNil or: [descriptor isKindOf: Wsdl20ConfigurationDescriptor]) ifTrue: [^#document ].	^self schemaBuildOptions soapStyle</body><body package="WSDLWizard">defaultUseAttribute11	(descriptor isNil or: [ descriptor isKindOf: Wsdl20ConfigurationDescriptor ]) ifTrue: [^#literal ].	^self schemaBuildOptions useType</body><body package="WSDLWizard">initializeDescriptor: aClass options: aStruct targetNamespace: aString	descriptor := aClass new.	descriptor targetNamespace: aString.	descriptor initializeX2OBuilder. 	descriptor buildOptions setOptionsFrom: aStruct.	descriptor buildOptions useServerSuperclass: false.</body><body package="WSDLWizard">schemaBuildOptions	^descriptor buildOptions</body><body package="WSDLWizard">serviceProtocol	^descriptor buildOptions serviceProtocol</body><body package="WSDLWizard">serviceProtocol: aString 	descriptor buildOptions serviceProtocol: aString</body><body package="WSDLWizard">targetNamespace	^descriptor  ifNotNil: [descriptor  targetNamespace]</body><body package="WSDLWizard">targetNamespace:  aString	descriptor targetNamespace:  aString.</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>set operation types</category><body package="WSDLWizard">buildObjectMarshaler:  aClass"do nothing here. it comes from Struct/Choice dialog. The marshaler has been already built "</body><body package="WSDLWizard">changeOperationName: anOperation to: aString"For doc/lit and wsdl 2.0 we need to reset operation name type and remove operation marshalers "			(self operationX2OBinding marshalers 		detect: [ :marshaler |  marshaler isRelationMarshaler and: [marshaler name = anOperation name]]		ifNone: [nil]) 			ifNotNil: [ :marshaler | self operationX2OBinding marshalers remove: marshaler ].				anOperation name resetTypeTo: aString.</body><body package="WSDLWizard">complexTypeMarshalers	^(self selectMarshalersDo: [ :marshaler | (marshaler smalltalkClass inheritsFrom: Exception) not])		asSortedCollection: [:a :b | a type path type  &lt;= b  type path type ]</body><body package="WSDLWizard">faultMarshalerFor: aString	^(faults detect: [ :fault | fault faultName type = aString ] ifNone: [^nil])		ifNotNil: [ :fault |			(descriptor x2oBuilder binding marshalers 						detect: [ :marshaler | marshaler isRelationMarshaler and: [ marshaler path type = aString]]						ifNone: [^nil]) typeMarshaler ]</body><body package="WSDLWizard">faultNames	^faults collect: [ :fault | fault faultName type ]</body><body package="WSDLWizard">interfaceFaults	^descriptor interfaces first faults</body><body package="WSDLWizard">operationHeaders	^operationHeaders</body><body package="WSDLWizard">operationX2OBinding	^descriptor buildOptions x2oBuilder ifNotNil: [ :builder | builder binding ]</body><body package="WSDLWizard">removeFault: anOperationTypeRow	descriptor 			removeFaultNamed: anOperationTypeRow name 			fromOperation: anOperationTypeRow operation 			fromInterface: anOperationTypeRow interface</body><body package="WSDLWizard">selectMarshalersDo: aBlock	| marshalers bindings |	marshalers := OrderedCollection new.	(bindings := OrderedCollection with: descriptor x2oBuilder binding)		addAll: descriptor x2oBuilder binding importedBindings.	bindings do: [ :binding | 		binding marshalers do: [ :marshaler | 			(marshaler isComplexTypeMarshaler 				and: [ marshaler isStructMarshaler not					and: [aBlock value: marshaler ]]) 				ifTrue: [marshalers add: marshaler]]].	^marshalers collect: [ :marshaler | 			TypeMarshalerView  new 				type: marshaler; 				model: self;				yourself]</body><body package="WSDLWizard">setFaults: aOperationTypeRows for: interfaceOperation	interfaceOperation resetOutFaults.	aOperationTypeRows isEmpty ifTrue: [^nil].	aOperationTypeRows do: [ :row |		descriptor 			addFaultNamed: row name 			type: row typeArray smalltalkClass			toOperation: interfaceOperation ]</body><body package="WSDLWizard">setInput: aOperationTypeRows for: interfaceOperation	| coll |	(aOperationTypeRows anySatisfy: [ :row | row isDirty]) ifFalse: [^nil].	coll := OrderedCollection new.	aOperationTypeRows do: [ :row | coll add: (Array with: row name with: row typeArray  )].	descriptor setInputParameters: coll interfaceOperation: interfaceOperation</body><body package="WSDLWizard">setOutput: aOperationTypeRow for: interfaceOperation	(aOperationTypeRow notNil 		and: [ aOperationTypeRow typeArray notNil 			and: [aOperationTypeRow clean not]]) ifTrue: [		descriptor 			setOutputParameter:  (Array with: aOperationTypeRow typeArray)  			interfaceOperation: interfaceOperation ]</body><body package="WSDLWizard">setSoapHeaders: aOperationTypeRows for: interfaceOperation	operationHeaders 		at: interfaceOperation name 		put: (aOperationTypeRows collect: [ :row | row inout -&gt; row name ])</body><body package="WSDLWizard">soapHeaderMarshalerFor: aString	^(soapHeaders detect: [ :struct | struct headerName = aString  ] ifNone: [^nil]) headerMarshaler</body><body package="WSDLWizard">soapHeaderNames	^soapHeaders collect: [ :struct | struct headerName ]</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>create WSDL</category><body package="WSDLWizard">createXMLDoc: aSymbol	aSymbol = #createSpec ifTrue: [^completeDescriptor asWsdl ].	aSymbol = #createSmalltalkBinding ifTrue: [^completeDescriptor x2oBuilder asX2OSpecification ].</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>generate client</category><body package="WSDLWizard">classBuilderClass	^classBuilderClass ifNil: [classBuilderClass := self defaultClassBuilder ]</body><body package="WSDLWizard">classBuilderClass: aClass	classBuilderClass := aClass</body><body package="WSDLWizard">clientClassName	^clientClass name asString</body><body package="WSDLWizard">defaultClassBuilder	^WsdlClassBuilder</body><body package="WSDLWizard">findClient	(clientClass := WsdlClient findClient: completeDescriptor bindings first name) ifNil: [ ^nil].	#{Store.Registry} isDefined		ifTrue: [self classBuildOptions clientPackage: (Store.Registry packagesContaining: clientClass) first name].	self classBuildOptions clientNS: clientClass environment shortName.</body><body package="WSDLWizard">generateClient: classString portUrl: anUrl	|  existingClient str port builder |	self serviceClass ifNil: [ ^nil ]. 	existingClient := (self classBuildOptions clientNS, '.',classString) asSymbol asQualifiedReference valueOrDo: [nil].	(existingClient notNil and: [existingClient ~~ clientClass])		ifTrue: [str := (#ClientClassExistsInSystemDoYouWantToUse &lt;&lt; #webservices &gt;&gt; 'The client class &lt;1s&gt; is already in the system. Do you still want to use this name?' expandMacrosWith: classString) asString.			(Dialog confirm: str initialAnswer: false) ifFalse: [^nil ]].	builder := self newClassBuilder.	builder config services 		detect: [ :service | (port := service ports detect: [ :portx | portx address = anUrl ] ifNone: [nil]) notNil ] 		ifNone: [^nil].	clientClass :=  (existingClient		ifNotNil: [builder updateClientClass: existingClient binding: port binding]		ifNil: [builder createClientClass: classString from: port ]).	clientUpdated := false.	^true</body><body package="WSDLWizard">newClassBuilder	| aClassBuilder |	aClassBuilder := self classBuilderClass new.	aClassBuilder buildOptions:  self classBuildOptions.	aClassBuilder initializeConfigFrom: completeDescriptor.	^aClassBuilder</body><body package="WSDLWizard">saveDocument: doc intoFile:  fileName	XML.Document saveDocument: doc intoFile: fileName</body><body package="WSDLWizard">shouldUpdateClient	^self clientClass notNil and: [ clientUpdated ]</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>test server</category><body package="WSDLWizard">canCreateScript	^(self responderClass notNil and: [ self clientClass notNil ])		ifTrue: [ true ]		ifFalse: [ false ]</body><body package="WSDLWizard">clientClasses	^WsdlClient subclasses select: [ :clx | clx bindingTargetNamespace = self targetNamespace ].</body><body package="WSDLWizard">createScript	| config |	self responderClass ifNil: [ ^nil]. 	config := completeDescriptor configurationBuilder buildComponents.	^WsdlClassBuilderModel		createClientScriptFrom: config services first port binding		responderName: self responderClass fullName		client: self clientClass</body><body package="WSDLWizard">scriptHeader	^String new</body><body package="WSDLWizard">serviceClasses	^OrderedCollection with: serviceClass</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>initialize-release</category><body package="WSDLWizard">initialize	super initialize.	self reset.</body><body package="WSDLWizard">reset	serviceSupers := OrderedCollection new.	responderUpdated := false.	clientUpdated := false.	classBuildOptions := WsdlClassBuildOptions new.	descriptor := nil.	completeDescriptor := nil.	clientClass := nil.	responderClass := nil. 	serviceClass := nil.	soapHeaders := OrderedCollection new.	operationHeaders := Dictionary new.	faults := OrderedCollection new.</body><body package="WSDLWizard">resetUpdate	self responderClass  ifNotNil: [responderUpdated := false].	self clientClass  ifNotNil: [clientUpdated := false].</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>select WsdlBinding</category><body package="WSDLWizard">bindingListToUpdate	^self class bindingListToUpdate</body><body package="WSDLWizard">initializeDescriptorFromWsdlBinding: wsdlBinding onMissingMethodsDo: aBlock	| missingMethods |	serviceClass := wsdlBinding serviceClass.	descriptor := wsdlBinding bindingDescriptor configurationDescriptorClass new.	"Initialize X2O builder and set operation binding.  Find a selector for each operation "	descriptor initializeFromWsdlBinding: wsdlBinding serviceClass: serviceClass.	"Check each interface operation if it has corresponding service method "	(missingMethods := self validateOperationsFor: wsdlBinding interfaceDescriptor) notEmpty 		ifTrue: [aBlock value: missingMethods ]. 	"Using operation selectors try to find the service class superclasses. 	Create interface descriptors for each superclass "	self setServiceAndSuperOperationsFrom: wsdlBinding interfaceDescriptor.	"If there are new service class methods add them to interface operations "	descriptor addUndescribedOperationsFromClassMethods: serviceClass.	"Collect soap headers from the binding in to #soapHeaders and #operationHeaders "	self setSoapHeadersFrom: wsdlBinding.	"For Wsdl 1.1 collect operation faults in to interface faults. We will use them as references in Set operation types.	For Wsdl 2.0 set information for fault bindings which includes headers, soap code and subcode"	faults := descriptor createInterfaceAndBindingFaultDescription: wsdlBinding bindingDescriptor.</body><body package="WSDLWizard">removeOperationMarshalersFor: wsdlBinding	wsdlBinding operations do: [ :operation |		operation inputBodyMarshaler ifNotNil: [ :inputBinding | inputBinding partMarshalers do: [ :each | each removeOperationFromBinding]].		operation outputBodyMarshaler ifNotNil: [ :outputBinding | outputBinding partMarshalers do: [ :each | each removeOperationFromBinding]]]</body><body package="WSDLWizard">setServiceAndSuperOperationsFrom: interfaceDescriptor	| intClasses int all    |	"Using operation selectors try to find the service class superclasses "	intClasses := Dictionary new.	interfaceDescriptor operations do: [ :op | 		(serviceClass findSelector: op selector) ifNotNil: [ :coll | 			( BindingBuilder excludedSupersHolder value includes: coll first name ) 				ifFalse: [ (intClasses at: coll first ifAbsentPut: [OrderedCollection new])  add: op copy]]].	intClasses isEmpty ifTrue: 		[int := descriptor addInterfaceNamed: interfaceDescriptor name type.		^int 			serviceClass: serviceClass;			operations: OrderedCollection new ].	all := serviceClass allSuperclasses.	serviceSupers := Array new: intClasses keys size - 1.	"Create interface for each service superclass "	intClasses keysAndValuesDo: [ :aclass :operations |			int :=  aclass = serviceClass				ifTrue: [descriptor addInterfaceNamed:  interfaceDescriptor name type]				ifFalse: [serviceSupers at: (all indexOf: aclass) put: aclass.						descriptor addInterfaceNamed: aclass name].			int 				serviceClass: aclass;				operations: operations.		aclass = serviceClass ifTrue: [ int faults: interfaceDescriptor faults]].	serviceSupers := serviceSupers asOrderedCollection.</body><body package="WSDLWizard">setSoapHeadersFrom: wsdlBinding	| inOutHeaders |	wsdlBinding operations do: [ :operation |		operation addSoapHeadersAsStructTo: soapHeaders.		inOutHeaders := operation inputSoapHeaderNames, operation outputSoapHeaderNames.		inOutHeaders notEmpty ifTrue: [ operationHeaders at: operation name put: inOutHeaders asOrderedCollection ]]</body><body package="WSDLWizard">tryToFindServiceClassFor: wsdlBinding	wsdlBinding serviceClass ifNotNil: [^wsdlBinding serviceClass].	"Check server pragmas  "	^nil</body><body package="WSDLWizard">validateOperationsFor: interfaceDescriptor	| missingMethods |	missingMethods := OrderedCollection new.		interfaceDescriptor operations do: [ :op | 		(serviceClass findSelector: op selector) ifNil: [ missingMethods add: op ]].	^missingMethods</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>testing</category><body package="WSDLWizard">isWsdl11	^descriptor isKindOf: Wsdl11ConfigurationDescriptor</body><body package="WSDLWizard">isWsdl20	^descriptor isKindOf: Wsdl20ConfigurationDescriptor</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>complete descriptor</category><body package="WSDLWizard">addImportedX2OBinding: x2o to: aDescriptor	aDescriptor x2oBuilder binding targetNamespace = x2o targetNamespace		ifTrue: [x2o marshalers  do: [ :marshaler |				aDescriptor x2oBuilder binding marshalers 					detect: [ :m | m name = marshaler name and: [m symbolSpace = marshaler symbolSpace]]					ifNone: [aDescriptor x2oBuilder binding marshalers add: marshaler ]]]		ifFalse: [aDescriptor x2oBuilder addImportedBinding: x2o]</body><body package="WSDLWizard">anyReferenceTo: aMarshaler	| fb |	(operationHeaders associations anySatisfy: [ :assoc | assoc value notEmpty ])		ifTrue: [ 	soapHeaders do: [ :struct | 					struct headerMarshaler = aMarshaler typeMarshaler ifTrue: [^true].					(struct at: #faults ifAbsent: [OrderedCollection new]) 						do: [ :assoc | assoc value = aMarshaler typeMarshaler ifTrue: [^true]]]].	completeDescriptor interfaces do: [ :int |		int operations do: [ :op | (op hasReferenceTo: aMarshaler) ifTrue: [^true]]].	faults do: [ :struct |		((struct element = aMarshaler path 			and: [aMarshaler isRelationMarshaler])				or: [(fb := struct at: #faultBinding ifAbsent: [nil]) notNil and: [ fb hasReferenceTo: aMarshaler]]) ifTrue: [^true]].	^false</body><body package="WSDLWizard">completeDescriptorBinding	|   binding header |	completeDescriptor bindings: OrderedCollection new.	completeDescriptor  interfaces do: [ :interfacex | completeDescriptor  buildDefaultBindingDescriptorFor: interfacex ].	binding := completeDescriptor bindings first.				"Add Soap headers to the binding"	binding operations ifNil: [binding operations: OrderedCollection new. ^binding].	binding operations do: [ :operation |		(operationHeaders at: operation name ifAbsent: [nil]) ifNotNil: [ :list | 			list do: [ :assoc |				(soapHeaders detect: [ :struct | struct headerName = assoc value ] ifNone: [ nil]) ifNotNil: [ :struct |					header := descriptor createSoapHeaderFrom: struct.					assoc key = #in						ifTrue: [ 	operation addInputSoapHeader: header ]						ifFalse: [ operation addOutputSoapHeader: header ]]]]].	"Set binding faults from #faults"	binding setBindingFaultsTo:  faults.	^binding</body><body package="WSDLWizard">completeDescriptorInterface"We are done updating interface operations. Create a new binding and verify the descriptor "	| interface  |	interface := descriptor interfaces detect: [ :int | int serviceClass = serviceClass] ifNone: [ nil].	completeDescriptor  interfaces: (OrderedCollection with: interface copy).	completeDescriptor  interfaces first operations: OrderedCollection new.	"Add an operation if  input and output parameters were resolved"	interface operations do: [ :operation |		operation hasDescription ifTrue: [completeDescriptor  interfaces first addOperation: operation ]].	"Collect all super operations in one interface "	descriptor interfaces size &gt; 1		ifTrue: [descriptor interfaces do: [ :interfacex |					interfacex ~= interface ifTrue: [						interfacex operations do: [ :operation |							interface operations 								detect: [:opx | opx name = operation name] 								ifNone: [(operation input notNil or: [operation output notNil]) ifTrue: [completeDescriptor  interfaces first  addOperation: operation]]]]]].	interface := completeDescriptor interfaces first.	"Add interface faults "	 interface faults: ( faults collect: [ :fault | Struct new 													at: #name put: fault faultName;													at: #element put: fault element;													yourself]).	^interface.</body><body package="WSDLWizard">completeDescriptorServices"See if there are WsdlService's for this target namespace. Add them to generate full schema "	completeDescriptor services:		((WsdlService registry values select: [ :service | service name namespace = completeDescriptor targetNamespace])			collect: [ :each | each serviceDescriptor]).		(completeDescriptor services detect: [ :service | service ports anySatisfy: [:port | port name = completeDescriptor interfaces first name ] ] ifNone: [nil]) 		ifNotNil: [ :service | completeDescriptor buildOptions serviceName: service name type].</body><body package="WSDLWizard">createCompleteDescriptor"We are done updating interface operations. Create a new binding and verify the descriptor "	| interface  binding notReferencedMarshalers |	completeDescriptor :=  descriptor copy.	interface := self completeDescriptorInterface.	binding := self completeDescriptorBinding.	"See if there are WsdlService's for this target namespace. Add them to generate full schema "	self completeDescriptorServices.	"Add all others registered interfaces and bindings for this target namespace"	self finishCompleteDescriptor: interface binding: binding.	"If we updated binding with operations (extension _WSDLOperations) we can remove not used marshalers. 	If the binding holds operation and domain marshalers leave it as it is"	descriptor wsdlOperationsTargetNamespace = completeDescriptor x2oBuilder binding targetNamespace		ifTrue: [ 	notReferencedMarshalers := Set new.				completeDescriptor x2oBuilder binding marshalers do: [ :marshaler |					(self anyReferenceTo: marshaler ) ifFalse: [ notReferencedMarshalers add: marshaler]].				notReferencedMarshalers do: [ :marshaler | completeDescriptor x2oBuilder binding marshalers remove: marshaler ].				[XMLObjectDriver buildBindingFromElements: (OrderedCollection with: completeDescriptor x2oBuilder binding asX2OSpecification)				] 	on: UnresolvedReferenceSignal 					do: [ :ex | 							ex parameter needToResolveList do: [ :assoc | 								notReferencedMarshalers do: [ :m |									assoc key = m path ifTrue: [ completeDescriptor x2oBuilder binding addElementMarshaler: m ]]].							ex parameter needToResolveTypes do: [ :assoc | 								notReferencedMarshalers do: [ :m |									assoc key = m path ifTrue: [ completeDescriptor x2oBuilder binding addElementMarshaler: m ]]].							]].	completeDescriptor complete.	^completeDescriptor</body><body package="WSDLWizard">finishCompleteDescriptor: interface binding: binding"Add all others registered interfaces and bindings for this target namespace"	completeDescriptor services do: [ :service |		service ports do: [ :port | 			port binding ~= binding name				ifTrue: [ | portBinding |						((portBinding := WsdlBinding bindingAt: port binding ifAbsent: [nil]) notNil							and: [(completeDescriptor bindings anySatisfy: [ :b | b name = portBinding name]) not])  							ifTrue: [ 	completeDescriptor bindings add: portBinding bindingDescriptor.								"Add  x2o bindings from portBinding as imported   "								portBinding importedBindings do: [ :x2o | self addImportedX2OBinding: x2o to: completeDescriptor ].								"We may need to add another interface "								portBinding interfaceDescriptor name ~= interface name 									ifTrue: [completeDescriptor  interfaces add: portBinding interfaceDescriptor.										"Try to fix old code that doesn't have #serviceMap. Set service class and selectors "										self tryToFindServiceClassFor: portBinding.										descriptor setSelectorsForOperations: portBinding ]]]]].</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>describe faults</category><body package="WSDLWizard">addInterfaceFaultName: anArray	| struct elMarshaler faultName faultBinding |	faultName := anArray first.	(faults anySatisfy: [ :faultx | ( faultx at: #faultName) type = faultName ]) ifTrue: [^nil].	elMarshaler := descriptor x2oBuilder addElementMarshalerName: faultName refClass: (anArray at: 2) smalltalkClass.	(struct := Struct new)		at: #faultName put: (NodeTag qualifier: '' ns: descriptor targetNamespace type: faultName);		at: #element put: elMarshaler path.	faults add: struct.	self isWsdl20 ifTrue: [ 		struct at: #faultBinding put: (faultBinding := descriptor defaultFaultBindingFor: faultName).		faultBinding addSoapFaultCodeNamed: (anArray at: 3) asString.		faultBinding addSoapFaultSubcodeNamed: (anArray at: 4) asString trimBlanks].	^struct</body><body package="WSDLWizard">addSoapHeaderNamed: headerName type: aComplexMarshaler toFault:  aStruct	| header |	header := descriptor createSoapHeaderNamed: headerName type: aComplexMarshaler smalltalkClass.	(aStruct at: #faultBinding ) addSoapHeader: header.	^header</body><body package="WSDLWizard">exceptionTypeMarshalers	^(self selectMarshalersDo: [ :marshaler | (marshaler smalltalkClass inheritsFrom: Exception) ])		asSortedCollection: [:a :b | a type path type  &lt;= b  type path type ]</body><body package="WSDLWizard">faults	^faults</body><body package="WSDLWizard">removeInterfaceFaultName: aString 	(faults detect: [ :faultx | faultx faultName type = aString ] ifNone: [nil])	ifNotNil: [ :faultx | 		faults remove: faultx.		(descriptor x2oBuilder binding marshalers 			detect: [ :each | each isRelationMarshaler and: [each path = faultx element] ] 			ifNone: [ nil]) ifNotNil:				[ :marshaler | descriptor x2oBuilder binding marshalers remove: marshaler ].		descriptor interfaces do: [ :interface | 	interface operations do: [ :op | op removeFaultType: faultx]]]</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>describe operations</category><body package="WSDLWizard">addFault: faultName toOperations: aCollection	aCollection do: [ :interfaceOperation | 		descriptor 			addFaultNamed: faultName 			type: (self  faultMarshalerFor: faultName) smalltalkClass			toOperation: interfaceOperation ]</body><body package="WSDLWizard">addHeader: headerName type: aSymbol  toOperations: aCollection	| headers |	aCollection do: [ :interfaceOperation | 		headers := operationHeaders at: interfaceOperation name ifAbsentPut: [ OrderedCollection new].		headers 			detect: [ :each | each value = headerName and: [each key = aSymbol] ]			ifNone: [ headers add:  aSymbol -&gt; headerName ]]</body><body package="WSDLWizard">addOperation: operationName method: aSelector class: aClass	(descriptor interfaces detect: [ :int | int serviceClass = aClass ] ifNone: [^nil]) ifNotNil: [ :interface |		descriptor  addOperationNamed: operationName selector: aSelector  to:  interface ]</body><body package="WSDLWizard">addOperationsFromSuper: aClass	| supers |	supers := self supersFrom: aClass.	(descriptor interfaces select: [ :interface | (supers includes: interface serviceClass) not and: [interface serviceClass ~= serviceClass ]])		do: [ :rejected | 			descriptor interfaces remove: rejected.			rejected operations ifNotNil: [	rejected operations do: [ :operation | self removeOperationMarshalers: operation]]].		supers do: [ :aSuperclass |		descriptor interfaces 				detect: [ :interface | interface serviceClass = aSuperclass ] 				ifNone: [ self initializeOperationsFromClass:  aSuperclass ]].</body><body package="WSDLWizard">initializeDescriptorFromServiceClass:  aClass	serviceClass := aClass.	self classBuildOptions package: (Store.Registry packagesContaining: aClass) first name.	self classBuildOptions classNamespace: aClass environment fullName.	self descriptor buildOptions serviceName ifNil: [ self descriptor buildOptions serviceName:  aClass name asString ].	descriptor interfaces: OrderedCollection new.	self initializeOperationsFromClass:  aClass.</body><body package="WSDLWizard">initializeOperationsFromClass:  aClass	| interface |	interface := descriptor  buildInterfaceDescriptorFor: aClass.	"Collect operation faults to use them in Browse operations as references "	faults := descriptor createInterfaceAndBindingFaultDescription: nil.	"We set interface faults when we complete descriptor from #faults "	interface faults: OrderedCollection new.	interface operations ifNil: [interface operations: OrderedCollection new].	descriptor addUndescribedOperationsFromClassMethods:  aClass.</body><body package="WSDLWizard">initializeOperationsFromProtocol:  aSymbol	self  serviceProtocol: aSymbol.	self initializeDescriptorFromServiceClass:  serviceClass</body><body package="WSDLWizard">methodSgntFor: aClass selector: selSymbol	| cm |	cm := ( aClass findSelector: selSymbol) last.	^(cm getSource string readStream) upTo: Character cr.</body><body package="WSDLWizard">removeOperation: anOperation includingSelector: aBoolean	| aClass |	aClass := serviceClass whichClassIncludesSelector: anOperation selector.	(descriptor interfaces detect: [ :int | int serviceClass = aClass ] ifNone: [^nil]) ifNotNil: [ :interface |		descriptor  removeOperation: anOperation from:  interface includingMethod: aBoolean ]</body><body package="WSDLWizard">removeOperationMarshalers: operation	descriptor removeOperationMarshalers: operation</body><body package="WSDLWizard">superClass	^serviceSupers isEmpty		ifTrue: [ self serviceClass]		ifFalse: [ serviceSupers last ]</body><body package="WSDLWizard">supersFrom: aClass	| all |	all := self serviceClass allSuperclasses.	serviceSupers := all copyFrom: 1 to: (all indexOf: aClass).	^serviceSupers</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>describe soap headers</category><body package="WSDLWizard">addSoapHeaderName: aString marshaler: marshaler	(soapHeaders anySatisfy: [ :header | header headerName = aString and: [ header headerMarshaler = marshaler ]]) ifTrue: [^nil].	^soapHeaders add: ( WebServices.Struct new						headerName: aString;						headerMarshaler: marshaler;						yourself)</body><body package="WSDLWizard">removeSoapHeaderName: aString	(soapHeaders detect: [ :header | header headerName = aString ]  ifNone: [^nil]) ifNotNil: [ :header |		soapHeaders remove: header.		operationHeaders values do: [ :list | 			( list select: [ :assoc | assoc value = aString] ) do: [ :hd | list remove: hd ]]].</body><body package="WSDLWizard">soapHeaders	^soapHeaders</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>add imported bindings</category><body package="WSDLWizard">addImports: aCollection		descriptor x2oBuilder resetImportedBindingTo: aCollection</body><body package="WSDLWizard">x2oImports	| view imported  bindings x2oImports |	x2oImports :=  OrderedCollection new.	imported := descriptor importedX2OBindings.	bindings := XMLObjectBinding userBindings asOrderedCollection.	bindings do: [ :binding | 				view := ImportedBindingView new.				view binding: binding.				view included: (imported includes: binding ).				view included ifTrue: [ x2oImports addFirst: view] ifFalse: [x2oImports add: view]].	^x2oImports</body></methods><methods><class-id>WebServices.WsdlBuilderModel</class-id> <category>generate responder</category><body package="WSDLWizard">findResponder	"First try to read old pragmas "	| cls |	"Read #serviceMap "	cls := SOAPResponder subclasses select: [:clx |		clx serviceMap			ifNotNil: 				[(ServiceMap loadFrom: clx serviceMap readStream)					anySatisfy: [:map | map interface namespace = self targetNamespace]]			ifNil: [false]].	cls isEmpty ifTrue: [^nil].	responderClass := cls size &gt; 1				ifTrue: 					[Dialog						choose: (#ThereAreFewServers &lt;&lt; #webservices								&gt;&gt; 'There are a few servers that are using this service. &lt;n&gt;Select the server you want to update:')									expandMacros						fromList: (cls collect: [:c | c fullName])						values: cls						lines: 6						cancel: [nil]]				ifFalse: [cls first].	responderClass ifNil: [^nil].	#{Store.Registry} isDefined		ifTrue: 			[self classBuildOptions				responderPackage: (Store.Registry packagesContaining: responderClass) first name].	self classBuildOptions responderNS: responderClass environment shortName</body><body package="WSDLWizard">generateResponder: classString documentation: docString url: urlString serviceName: serviceName	|  existingServer port   service |	self serviceClass ifNil: [ ^nil ]. 	existingServer := (self classBuildOptions responderNS, '.',classString) asSymbol asQualifiedReference valueOrDo: [nil].	completeDescriptor ifNil: [ self createCompleteDescriptor ].		"Find existing wsdl service or create a new one "	service := completeDescriptor addServiceNamed: serviceName binding: completeDescriptor bindings first. 	port := completeDescriptor setPortAddress: urlString inService: service forBindingNamed: self serviceClass name asString.	(docString notNil and: [ docString notEmpty ]) ifTrue: [ port documentation: docString ].	self classBuildOptions responderName: classString.	(self responderClass notNil and: [ existingServer == self responderClass])		ifTrue: [ self newClassBuilder updateResponder: self responderClass ]		ifFalse: [responderClass := self newClassBuilder createResponderClass].	responderUpdated := false.	^true</body><body package="WSDLWizard">portDocumentation	completeDescriptor services notEmpty ifTrue: [		 completeDescriptor services first ports notEmpty ifTrue: [  ^completeDescriptor services first ports first documentation ]].	^nil</body><body package="WSDLWizard">portDocumentationForPort: portName	completeDescriptor services do: [ :service |		(service ports detect: [ :port | port name type = portName ] ifNone: [nil]) ifNotNil: [ :port | port documentation ] ].	^nil</body><body package="WSDLWizard">portUrl	| bindings |	completeDescriptor services isEmpty ifTrue: [ ^nil].	bindings := (WsdlBinding bindingsAtNamespace: self targetNamespace) select: [ :b | b serviceClass = self serviceClass].	^bindings first portAddress ifNil: [nil] ifNotNil: [ :p | p asString ]</body><body package="WSDLWizard">serviceNameForPort: portName	completeDescriptor services do: [ :service |		(service ports detect: [ :port | port name type = portName ] ifNone: [nil]) ifNotNil: [ ^service name type] ].	^completeDescriptor buildOptions serviceName</body><body package="WSDLWizard">setUpdated	self responderClass  ifNotNil: [responderUpdated := true].	self clientClass  ifNotNil: [clientUpdated := true].</body><body package="WSDLWizard">shouldUpdateResponder	^self responderClass notNil and: [ responderUpdated ]</body></methods><methods><class-id>WebServices.WsdlBuilderModel class</class-id> <category>instance creation</category><body package="WSDLWizard">describeInterfacesIn: aClass	^self new		initializeInterfaceFrom: aClass;		yourself</body><body package="WSDLWizard">describeTypesInClass: aClass	^self 		describeTypesInClasses: (OrderedCollection with: aClass) 		inNamespace: aClass environment name asString</body><body package="WSDLWizard">describeTypesInClasses: aCollOfClasses inNamespace: aString	^self new		describeTypesInClasses: aCollOfClasses inNamespace: aString;		yourself</body><body package="WSDLWizard">new	^self basicNew initialize</body><body package="WSDLWizard">serviceClass: aClass	^self new		serviceClass: aClass;		yourself</body></methods><methods><class-id>WebServices.WsdlBuilderModel class</class-id> <category>accessing</category><body package="WSDLWizard">bindingListToUpdate	| bindings |	bindings := WsdlBinding wsdlBindings values reject: [ :binding | 					(WsdlBinding systemTargetNamespaces includes: binding targetNamespace) 				or: [binding targetNamespace isEmpty] ].	^bindings collect: [ :binding | WSLabelAndValue key: (binding name expandedName) value: binding ]</body></methods><methods><class-id>WebServices.DescribeSoapHeadersTab</class-id> <category>actions</category><body package="WSDLWizard">addHeaderFault	| faults ch header |	(AddInterfaceFault model: self model)		acceptBlock: [ :args | 			 header := self headersTreeView selection.			self headersTreeView selection isFault ifTrue: [header := header parent].			faults := header itemDescriptor at: #faults ifAbsentPut: [OrderedCollection new].			faults add: (args first -&gt; (args at: 2)).			header addChild: (ch := HeaderTreeItem fault: args first).			self refreshTree.			self headersTreeView selection: ch.];		open.</body><body package="WSDLWizard">addSoapHeader	| newHeader root ch |	(AddSoapHeader model: self model)		acceptBlock: [ :args |			(newHeader :=self model addSoapHeaderName: (args at: 1) marshaler: (args at: 2)) ifNotNil: [ 				newHeader					required: (args at: 3);					mustUnderstand: (args at: 4)].			 ];		open.	newHeader ifNotNil: [		root := self headersTreeView list root.		root addChild: (ch := HeaderTreeItem header: newHeader).		self refreshTree.		self headersTreeView selection: ch ]</body><body package="WSDLWizard">headerSelected	#(#remove #properties ) do: [ :each | (self widgetAt: each) isEnabled: self headersTreeView selection notNil].	(self  widgetAt: #addHeaderFault ) isEnabled: ( self headersTreeView selection notNil and: [ self headersTreeView selection isHeader])</body><body package="WSDLWizard">refreshTree	self headersTreeView list refreshRoot.	self headersTreeView list  expandToLevel: 1.</body><body package="WSDLWizard">removeFaultOrHeader	self headersTreeView selection ifNil: [^nil].	self headersTreeView selection isHeader		ifTrue: [ self removeSoapHeader ]		ifFalse: [ self removeHeaderFault].	self setHeadersTreeViews.</body><body package="WSDLWizard">removeHeaderFault	| faults |	faults := self headersTreeView selection parent itemDescriptor at: #faults ifAbsent: [^nil].	(faults detect: [ :assoc | assoc key = self headersTreeView selection name ] ifNone: [nil])		ifNotNil: [ :fault | faults remove: fault ].</body><body package="WSDLWizard">removeSoapHeader	self model removeSoapHeaderName: self headersTreeView selection itemDescriptor headerName.</body><body package="WSDLWizard">updateHeaderProperties	| header |	header := self headersTreeView selection itemDescriptor.	(AddSoapHeader updateHeaderProperties:  header model: self model)		acceptBlock: [ :args |			header				required: (args at: 3);				mustUnderstand: (args at: 4).			 ];		open.</body><body package="WSDLWizard">updateView	self setHeadersTreeViews</body></methods><methods><class-id>WebServices.DescribeSoapHeadersTab</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	headersTreeView := SelectionInTree new.	self setHeadersTreeViews.	self headersTreeView selectionIndexHolder onChangeSend: #headerSelected to: self.</body><body package="WSDLWizard">setHeadersTreeViews	| headerTree modelx |	(headerTree :=  HeaderTreeItem new) type: #root.	headerTree children: (self model soapHeaders collect: [ :struct | HeaderTreeItem header: struct.]).	modelx := TreeModel		on: headerTree		displayRoot: false		childrenWith: [:item | item children]		testHasChildrenWith: [:item | item hasChildren].	self headersTreeView list: modelx.	self refreshTree</body></methods><methods><class-id>WebServices.DescribeSoapHeadersTab</class-id> <category>private</category><body package="WSDLWizard">selectionChanged</body></methods><methods><class-id>WebServices.DescribeSoapHeadersTab</class-id> <category>aspects</category><body package="WSDLWizard">headersTreeView	^headersTreeView</body></methods><methods><class-id>WebServices.DescribeSoapHeadersTab</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	(builder componentAt: #headers) widget useImage:  #treeIcon.	(self  widgetAt:  #addSoapHeader) isEnabled: (self model serviceClass notNil and: [self model complexTypeMarshalers notEmpty]).	(self  widgetAt:  #remove) isEnabled: false.	self model isWsdl20 		ifTrue: [ (self  widgetAt: #addHeaderFault ) isVisible: false]		ifFalse: [(self  widgetAt: #addHeaderFault ) isEnabled: false.				(self  widgetAt: #properties ) isVisible: false].	self refreshTree.	self headerSelected.</body></methods><methods><class-id>WebServices.DescribeSoapHeadersTab class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#DescribeSoapHeadersTabHelp &lt;&lt; #webservices &gt;&gt;'Soap Headers page allows you to add or remove Soap Headers to Wsdl document binding.Add Header button allows to add a Soap Header to the binding. These headers will be used to describe operations in Descriptions... The Add Header dialog for WSDL 2.0 has options for #mustUnderstand and #required attributes.For Wsdl 1.1 you can add header faults. To add or remove Header Fault use  Add Fault.. and Remove FaultRemove button allows to remove a Soap Header. The header will be removed from all operations also.Properties button is displayed for WSDL 2.0 and allows to update Soap Header attributes as #mustUnderstand and #required'</body></methods><methods><class-id>WebServices.CreateResponderClassTab</class-id> <category>accessing</category><body package="WSDLWizard">classNS	^self classBuilder buildOptions responderNS</body><body package="WSDLWizard">classPackage	^self classBuilder buildOptions responderPackage</body><body package="WSDLWizard">tabLabel	^X2OIcons allMapped -&gt; 'Responder Class'</body></methods><methods><class-id>WebServices.CreateResponderClassTab</class-id> <category>actions</category><body package="WSDLWizard">changedClassNS	self classBuilder buildOptions responderNS: self classDefinition namespaceModule value.</body><body package="WSDLWizard">changedPackage	self classDefinition packageModule value notEmpty ifTrue: [ 		self classBuilder buildOptions responderPackage: self classDefinition packageModule value].</body><body package="WSDLWizard">classNameChanged	self classBuilder buildOptions responderName: (self validateClassName: self classNameAspect value )</body></methods><methods><class-id>WebServices.CreateResponderClassTab</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeClassNameAspect	classNameAspect := self model responderName asValue.	self classNameAspect onChangeSend: #classNameChanged to: self.</body></methods><methods><class-id>WebServices.CreateResponderClassTab</class-id> <category>aspects</category><body package="WSDLWizard">classNameAspect	^classNameAspect</body></methods><methods><class-id>WebServices.CreateResponderClassTab class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#CreateResponderClassTabHelp &lt;&lt; #webservices &gt;&gt;'The Create Responder class dialog displays settings for SOAP Responder class that will be generated from the WSDL specification. Package - package name where the server class will be createdNamespace - Smalltalk namespace where the class will be definedClass name - the server class name.Pressing Next button generates classes'</body></methods><methods><class-id>WebServices.CreateResponderClassTab class</class-id> <category>testing</category><body package="WSDLWizard">shouldCreateClasses: aModel	^aModel createResponderClass</body></methods><methods><class-id>WebServices.ComplexTypesDialog</class-id> <category>accessing</category><body package="WSDLWizard">resultBlock	^resultBlock</body><body package="WSDLWizard">resultBlock: anObject	resultBlock := anObject</body><body package="WSDLWizard">typesView	^typesView</body><body package="WSDLWizard">typesView: anObject	typesView := anObject</body></methods><methods><class-id>WebServices.ComplexTypesDialog</class-id> <category>interface opening</category><body package="WSDLWizard">labelAtIndex: index inView: view 	^(self complexTypes list at: index) labelAndIconWith: index inView: view</body><body package="WSDLWizard">postBuildWith: aBuilder 	| cwidget |	super  postBuildWith: aBuilder. 	cwidget := self widgetAt: #complexTypes.	cwidget visualBlock: [ :view :index | self labelAtIndex: index inView: view ].	cwidget selectedVisualBlock: [ :view :index | self reverseLabel: (self labelAtIndex: index inView: view) ].</body><body package="WSDLWizard">reverseLabel: aLabel 	"Build the wrappers needed to reverse the label to show it selected."	| rw |	rw := ReversingWrapper on: aLabel.	rw reverse setValue: true.	^BoundedWrapper on: rw</body></methods><methods><class-id>WebServices.ComplexTypesDialog</class-id> <category>aspects</category><body package="WSDLWizard">complexTypes	^complexTypes</body><body package="WSDLWizard">selectionIndexChange: aComplexTypeMarshaler</body></methods><methods><class-id>WebServices.ComplexTypesDialog</class-id> <category>actions</category><body package="WSDLWizard">closeView	resultBlock ifNotNil: [ resultBlock value:  self complexTypes selection].	^self accept value: true</body></methods><methods><class-id>WebServices.ComplexTypesDialog</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects 		complexTypes :=  SelectionInList with: typesView.	complexTypes selectionIndexHolder		onChangeSend: #selectionIndexChange:		to: self.</body></methods><methods><class-id>WebServices.CreateClientClassesTab</class-id> <category>accessing</category><body package="WSDLWizard">classMap	^self classBuilder buildOptions clientClassMap</body><body package="WSDLWizard">classNS	^self classBuilder buildOptions clientNS</body><body package="WSDLWizard">classPackage	^self classBuilder buildOptions clientPackage</body><body package="WSDLWizard">tabLabel	^X2OIcons allMapped -&gt; 'Client Classes'</body></methods><methods><class-id>WebServices.CreateClientClassesTab</class-id> <category>actions</category><body package="WSDLWizard">changedClassNS	self classBuilder buildOptions clientNS: self classDefinition namespaceModule value.</body><body package="WSDLWizard">changedPackage	self classDefinition packageModule value notEmpty ifTrue: [ 		self classBuilder buildOptions clientPackage: self classDefinition packageModule value].</body></methods><methods><class-id>WebServices.CreateClientClassesTab class</class-id> <category>testing</category><body package="WSDLWizard">shouldCreateClasses: aModel	^aModel createClientClasses</body></methods><methods><class-id>WebServices.CreateClientClassesTab class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#CreateClientClassesTabHelp &lt;&lt; #webservices &gt;&gt;'The Create Client classes dialog displays settings for client classes that will be generated from the WSDL specification. Package - package name where the client classes will be createdNamespace - Smalltalk namespace where the classes will be definedThe table has two columns where the left column shows list of WSDL port names. The right list column shows the list of suggested client class names. The left column allows to change the class names.Pressing Next button generates classes'</body></methods><methods><class-id>WebServices.TestClientServer</class-id> <category>accessing</category><body package="WSDLWizard">clients	^clients</body></methods><methods><class-id>WebServices.TestClientServer</class-id> <category>aspects</category><body package="WSDLWizard">workspaceAspect	^workspaceAspect</body></methods><methods><class-id>WebServices.TestClientServer</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self workspaceAspect selectPageNumber: 1.	self workspaceAspect pageChanged</body></methods><methods><class-id>WebServices.TestClientServer</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	| page |	workspaceAspect := Workbook new.	clients := self model clientClasses.	clients doWithIndex: [ :client :index |		page := WorkspacePage 					labeled: client name asString					with: (self createScriptForClient: client).		index = 1			ifTrue: [ workspaceAspect replaceAllTextPagesWith: page]			ifFalse: [	workspaceAspect addPage: page ]].		self parent disableBack.</body></methods><methods><class-id>WebServices.TestClientServer</class-id> <category>actions</category><body package="WSDLWizard">createScriptForClient: aClient	|  string |	string := (self model responderClass notNil		ifTrue: 			[WsdlClassBuilderModel				createClientScriptFrom: aClient binding				responderName: self model responderClass fullName				client: aClient ]		ifFalse: [ aClient createScript. ]).	^self model scriptHeader, string</body></methods><methods><class-id>WebServices.TestClientServer class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#WebServicesWorkspace &lt;&lt; #webservices &gt;&gt; 'Web Services Workspace'</body><body package="WSDLWizard">helpText	^#TestServerClientScriptHelp &lt;&lt; #webservices &gt;&gt;'If there are a Server and Client for the WSDL targetNamespace, this page helps you to test the Web services. The script includes code that helps you to start the SOAP Server and invoke operations from the service provider. You will need to replace the parameter types with real values.If services require to use Soap headers the script won''t work until you implement interceptor classes. For more information see Web Services Demo  '</body></methods><methods><class-id>WebServices.X2OView</class-id> <category>aspects</category><body package="WSDLWizard">bindingText	^bindingText isNil		ifTrue: [bindingText := self model x2oView asValue]		ifFalse: [bindingText]</body></methods><methods><class-id>WebServices.X2OView</class-id> <category>actions</category><body package="WSDLWizard">closeView	^self accept value: true</body></methods><methods><class-id>WebServices.WelcomePage</class-id> <category>actions</category><body package="WSDLWizard">changedSelection	self parent setPagesFor: self buildFromAspect value.</body></methods><methods><class-id>WebServices.WelcomePage</class-id> <category>aspects</category><body package="WSDLWizard">blurbHolder	^blurbHolder isNil 		ifTrue: [blurbHolder := String new asValue]		ifFalse: 	[blurbHolder]</body><body package="WSDLWizard">buildFromAspect	^buildFromAspect isNil		ifTrue: [buildFromAspect := #buildFromSchema asValue]		ifFalse: 	[buildFromAspect]</body><body package="WSDLWizard">createUpdateAspect	^createUpdateAspect isNil		ifTrue: [createUpdateAspect := #create asValue]		ifFalse: 	[createUpdateAspect]</body></methods><methods><class-id>WebServices.WelcomePage</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self blurbHolder value: self class blurbText.	(self builder componentAt: #updateServiceButton) widget  isEnabled: self model bindingListToUpdate notEmpty.	self changedSelection</body></methods><methods><class-id>WebServices.WelcomePage class</class-id> <category>accessing</category><body package="WSDLWizard">blurbText	^(#WsdlWizardWelcomeBlurbText &lt;&lt; #webservices &gt;&gt;	'This wizard guides you through the steps of exposing an existing Smalltalk application as a web service. Alternatively, given a WSDL document, it can generate Smalltalk classes to access (or implement) the service.&lt;nn&gt;Select one of the options:')  expandMacros</body><body package="WSDLWizard">exposeApplicationChoice	^#ExposeApplicationAsService &lt;&lt; #webservices &gt;&gt; 'Expose an application as a web service'</body><body package="WSDLWizard">fromSchemaHelpText	^#FromWSDLSchemaHelpText&lt;&lt; #webservices &gt;&gt; 'This option helps you to 	load a WSDL document,	create Smalltalk classes from XML schema complex types,	create client classes,	create an server and service classes,	invoke web service requests.'</body><body package="WSDLWizard">fromServiceHelpText	^#FromApplicationHelpText &lt;&lt; #webservices &gt;&gt; 'This option helps you to 	Build new Web Services		describe web services interfaces,		describe types for interface parameters,		create a server class,		create a client class,		test client-server communication,		create a WSDL document	Update existing WebServices'</body><body package="WSDLWizard">generateClassesChoice	^#CreateApplicationFromWSDL &lt;&lt; #webservices &gt;&gt; 'Create an application from a WSDL document'</body><body package="WSDLWizard">header	^#WelcomeToWebServicesWizard &lt;&lt; #webservices &gt;&gt; 'Welcome to the Web Services Wizard'</body><body package="WSDLWizard">helpText	^self generateClassesChoice asString,	'\' withCRs,	self fromSchemaHelpText asString,	'\\' withCRs,	self exposeApplicationChoice asString,	'\' withCRs,	self fromServiceHelpText asString</body></methods><methods><class-id>WebServices.LoadSchema</class-id> <category>interface opening</category><body package="WSDLWizard">keyPress: ev	| ch b |	ch := ev keyValue. 	[b := ch isAlphaNumeric] on: Error do: [ :ex | ^ev].	((b and: [ ch ~= Character space ])		or: [ ch asInteger = 22 "paste" ])		ifTrue: [ self enableAll: true].	^ev</body><body package="WSDLWizard">postBuildWith: aBuilder	| ctrlr |	super postBuildWith: aBuilder.	ctrlr := self controllerAt: #accessPointList.	ctrlr keyboardHook: [ :ev :c | self keyPress: ev ].	self enableAll: (self accessPointAspect value notEmpty)</body></methods><methods><class-id>WebServices.LoadSchema</class-id> <category>actions</category><body package="WSDLWizard">addAccessPoint: aString	self model addAccessPoint: aString.	self accessPointAspect value:  aString.</body><body package="WSDLWizard">browseFile	| fname |	(fname := Dialog requestFileName: #PleaseTypeAFileName &lt;&lt; #webservices &gt;&gt; 'Please type a file name: ' default: '*.wsdl') notEmpty 		ifTrue: [self accessPointAspect value: ('file:///', (fname replaceAll: $\ with: $/ )).				self urlEntered]</body><body package="WSDLWizard">closeRequestFromParent	self model createClientClasses: self createClientsAspect value.	self model createResponderClass: self createResponderAspect value.	self model createServiceClasses: self createServicesAspect value.	self safelyExecute: [self privateLoadSchema ifFalse: [ ^false].].	^true</body><body package="WSDLWizard">enableAll: aBoolean	#(bindingType object default createBox createClients createResponder createServices )		do: [ :each | ( self widgetAt: each )  isEnabled: aBoolean ].	self enableNext: aBoolean.</body><body package="WSDLWizard">enableNext	^self enableNext: self canEnableNext</body><body package="WSDLWizard">enableNext: aBoolean	self parent isNil ifTrue: [ ^nil].	aBoolean		ifTrue: [self parent enableNext ]		ifFalse: [self parent disableNext ].</body><body package="WSDLWizard">urlEntered	self model addAccessPoint: self accessPointAspect value.	self enableAll: (self accessPointAspect value notEmpty)</body></methods><methods><class-id>WebServices.LoadSchema</class-id> <category>aspects</category><body package="WSDLWizard">accessPointAspect	^accessPointAspect</body><body package="WSDLWizard">accessPoints	^accessPoints</body><body package="WSDLWizard">bindingAspect	^bindingAspect</body><body package="WSDLWizard">createClientsAspect	^createClientsAspect</body><body package="WSDLWizard">createResponderAspect	^createResponderAspect</body><body package="WSDLWizard">createServicesAspect	^createServicesAspect</body></methods><methods><class-id>WebServices.LoadSchema</class-id> <category>testing</category><body package="WSDLWizard">canEnableNext	^self accessPointAspect value notEmpty</body></methods><methods><class-id>WebServices.LoadSchema</class-id> <category>private</category><body package="WSDLWizard">errorString: exception	 | errorString string |	errorString := exception errorString.	((MalformedSignal accepts: exception class) 		and: [ exception parameter notNil])		ifTrue: 			[ string := (#WsdlDocumentURLContents &lt;&lt; #webservices &gt;&gt; '\\Wsdl document URL contents:\') asString.			errorString := errorString, string withCRs, exception parameter printString].	^errorString</body><body package="WSDLWizard">privateLoadSchema	| count url str res |	count := 2.	(url := self accessPointAspect value trimBlanks) isEmpty ifTrue: [^false].	url := url asURI.	^[	self model selectedAccessPoint: url.		self model bindingType: self bindingAspect value.		self model initializeClassBuilder.		true	]			on: Net.HttpUnauthorizedError		do: [ :ex |  			str := count = 2				ifTrue: [ String new]				ifFalse: ['    login failed'].			res := UserPasswordDialog new				responderName: 'Server: ', url host, '  Port: ', url port printString, str;				actionBlock: [ :userx :passx | url user: (NetUser username: userx password: passx )];				open.			res 				ifTrue: [	(count := count - 1) &lt; 0							ifTrue: [ ex return: false ]							ifFalse: [ ex retry ]]				ifFalse: [ex return: false ] ].</body></methods><methods><class-id>WebServices.LoadSchema</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	accessPoints := self model accessPoints asValue.	accessPointAspect := (self model accessPoints notEmpty		ifTrue: [ self model accessPoints first]		ifFalse: [ String new ]) asValue.	bindingAspect := self model bindingType asValue.	createClientsAspect := self model createClientClasses asValue.	createResponderAspect := self model createResponderClass asValue.	createServicesAspect := self model createServiceClasses asValue.</body></methods><methods><class-id>WebServices.LoadSchema class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#LoadWsdlDocument &lt;&lt; #webservices &gt;&gt; 'Load Wsdl document'</body><body package="WSDLWizard">helpText	^#LoaddocumentHelp &lt;&lt; #webservices &gt;&gt;'This page specifies the Wsdl document from which to generate classes and class generation settings."Wsdl document URL" section - Identify the document either as an Http or file URL, or from a file (click Browse file...). "Bind XML types to" sectionClasses - creates a Smalltalk class for each XML complex typeDictionaries - maps each XML complex type to a WebServices.Struct"Create Classes" sectionClients - Check this box to create client classes for issuing requests via an HttpClientServer  - Check this box to generate an SOAP Server for this documentServices  - Check this box to create a stub class and methods to implement the service described by the document.Pressing Next button displays dialogs to review and change the default settings for creating classes'</body></methods><methods><class-id>WebServices.AddOperation</class-id> <category>accessing</category><body package="WSDLWizard">currentClass	^self serviceClassCBAspect value asQualifiedReference value</body><body package="WSDLWizard">interface	^interface</body><body package="WSDLWizard">interface: anObject	interface := anObject</body><body package="WSDLWizard">selector	self methodSignatureAspect value isEmpty ifTrue: [^nil].	^methods at: self methodSignatureAspect value</body></methods><methods><class-id>WebServices.AddOperation</class-id> <category>aspects</category><body package="WSDLWizard">methodSignatureAspect	^methodSignatureAspect</body><body package="WSDLWizard">methodSignatures	^methodSignatures isNil		ifTrue:			[methodSignatures := List new asValue]		ifFalse:			[methodSignatures]</body><body package="WSDLWizard">operationName	^operationName</body><body package="WSDLWizard">serviceClassCBAspect	^serviceClassCBAspect</body><body package="WSDLWizard">superClassesAspect	^superClassesAspect</body></methods><methods><class-id>WebServices.AddOperation</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	operationName := String new asValue.	serviceClassCBAspect := self model serviceClass fullName asValue.	serviceClassCBAspect onChangeSend: #serviceClassChanged to: self.	superClassesAspect := self model superClassesList asValue.	methodSignatures := OrderedCollection new asValue.	self setMethodSignatures.	methodSignatureAspect := String new asValue.</body><body package="WSDLWizard">setMethodSignatures	| selectors |	selectors := Dictionary new.	self model descriptor collectProtocolSelectorsFrom: self currentClass in: selectors.	methods := Dictionary new.	(selectors at: self currentClass) do: [ :sel | 		methods at: ((self currentClass sourceCodeAt: sel ) string copyUpTo: Character cr) put: sel].	methodSignatures value: methods keys asOrderedCollection.</body></methods><methods><class-id>WebServices.AddOperation</class-id> <category>actions</category><body package="WSDLWizard">acceptOperation	| signature selector |	signature := self methodSignatureAspect value.	selector := methods 		at: signature 		ifAbsent: [self currentClass					compile: signature 					classified: self model descriptor buildOptions serviceProtocol					notifying:  (TextEditorController new 							view:  (self widgetAt: #methodSignature) editor;							yourself)] .	selector ifNotNil: [		methods at: signature put: selector.		self model 			addOperation: self operationName value 			method: selector 			class: self currentClass.		WSSubcanvas browseClass: self currentClass  method: selector.		^self accept value: true].	^false</body><body package="WSDLWizard">serviceClassChanged	self setMethodSignatures</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs</class-id> <category>initialize-release</category><body package="WSDLWizard">initializeAspects	super initializeAspects.	clients := OrderedCollection new.	self class clients do: [ :cl | 		(cl shouldCreateClasses: self model) ifTrue: [			clients add: ( cl model: self model parent: self )]].	tabs := SelectionInList with:  ( clients collect: [ :cl | cl tabLabel ]).	tabs selectionIndexHolder onChangeSend: #tabsChanged to: self.</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs</class-id> <category>accessing</category><body package="WSDLWizard">clients	^clients</body><body package="WSDLWizard">helpText	^self</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs</class-id> <category>aspects</category><body package="WSDLWizard">tabs	^tabs isNil		ifTrue:			[tabs := SelectionInList new]		ifFalse:			[tabs]</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs</class-id> <category>actions</category><body package="WSDLWizard">closeRequestFromParent	| text |	text := 'Do you want to proceed with generating: \' withCRs.	self model bindingType = #object ifTrue: [ text := text, ' Binding classes '].	self model createClientClasses ifTrue: [  text := text, ' Client '  ].	self  model createServiceClasses ifTrue: [ text := text, ' Service ' ].	self model createResponderClass  ifTrue: [  text := text, ' Responder '  ].	text := text, '?'.	(Dialog			choose: text			labels: (Array with: 'Yes' with: 'Cancel' )			values: #(#yes #cancel )			default: #yes)  = #cancel ifTrue: [^false ].	^self safelyExecute: [		Notice			show: #GeneratingClasses &lt;&lt; #webservices &gt;&gt; 'Generating classes....'			while: [self createClasses ]].</body><body package="WSDLWizard">createClasses	^[self model createClasses.	true] 			on: WSDuplicateBindingsError 			do: [ :ex | |stream|				stream := String new writeStream.				ex parameter difference do: [:clx | stream nextPutAll: clx fullName , ' '].				Dialog warn: ((#DuplicateBindingsFoundFor1s &lt;&lt; #webservices &gt;&gt; 'Duplicate bindings have been found for "&lt;1s&gt;" ') expandMacrosWith: stream contents ). 				^false ]</body><body package="WSDLWizard">displayHelpText	^client displayHelpText</body><body package="WSDLWizard">tabsChanged	| index  |	index := self tabs selectionIndex.	(self builder componentAt: #tabs) widget 		client: (client := self clients at: index )		spec: #windowSpec</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs</class-id> <category>interface opening</category><body package="WSDLWizard">postBuildWith: aBuilder	super postBuildWith: aBuilder.	tabs selectionIndex: 1.</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs class</class-id> <category>accessing</category><body package="WSDLWizard">header	^#ReviewParametersToGenerateClasses &lt;&lt; #webservices &gt;&gt; 'Review parameters to generate classes'</body><body package="WSDLWizard">helpText	^''</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs class</class-id> <category>defaults</category><body package="WSDLWizard">clients 		^clients ifNil: [ clients := self defaultClients ]</body><body package="WSDLWizard">clients: anOrderedCollection		clients := anOrderedCollection</body><body package="WSDLWizard">defaultClients	^(OrderedCollection new: 3)		add: CreateBindingClassesTab;		add: CreateClientClassesTab;		add: CreateServiceClassesTab;		add: CreateResponderClassTab;		yourself</body></methods><methods><class-id>WebServices.CreateServiceClassesTab</class-id> <category>accessing</category><body package="WSDLWizard">classMap	^self classBuilder buildOptions serviceClassMap</body><body package="WSDLWizard">classNS	^self classBuilder buildOptions serviceNS</body><body package="WSDLWizard">classPackage	^self classBuilder buildOptions servicePackage</body><body package="WSDLWizard">tabLabel	^X2OIcons allMapped -&gt; 'Service Classes'</body></methods><methods><class-id>WebServices.CreateServiceClassesTab</class-id> <category>actions</category><body package="WSDLWizard">changedClassNS	self classBuilder buildOptions serviceNS: self classDefinition namespaceModule value.</body><body package="WSDLWizard">changedPackage	self classDefinition packageModule value notEmpty ifTrue: [ 		self classBuilder buildOptions servicePackage: self classDefinition packageModule value].</body></methods><methods><class-id>WebServices.CreateServiceClassesTab class</class-id> <category>accessing</category><body package="WSDLWizard">helpText	^#CreateServiceClassesTabHelp &lt;&lt; #webservices &gt;&gt;'The Create Service classes dialog displays settings for service classes that will be generated from the WSDL specification. Package - package name where the service classes will be createdNamespace - Smalltalk namespace where the classes will be definedThe table has two columns where the left column shows list of WSDL interface names. The right list column shows the list of suggested service class names. The left column allows to change the class names.Pressing Next button generates classes'</body></methods><methods><class-id>WebServices.CreateServiceClassesTab class</class-id> <category>testing</category><body package="WSDLWizard">shouldCreateClasses: aModel	^aModel createServiceClasses</body></methods><methods><class-id>WebServices.SoapWsdl11OperationBinding</class-id> <category>tool</category><body package="WSDLWizard">addSoapHeadersAsStructTo: aCollection	self soapHeadersAsStructFor: self inputHeaderBindings to: aCollection.	self soapHeadersAsStructFor: self outputHeaderBindings to: aCollection.</body><body package="WSDLWizard">inputSoapHeaderNames	^self inputHeaderBindings collect: [ :header |  #in -&gt; header partNames first asString ].</body><body package="WSDLWizard">outputSoapHeaderNames	^self outputHeaderBindings collect: [ :header |  #out -&gt; header partNames first asString ].</body><body package="WSDLWizard">removeOperationMarshalersFrom: x2oBinding	self isRpc ifTrue: [^nil].	self inputBodyMarshaler ifNotNil:  		[ self inputBodyMarshaler marshalers do: [ :m | x2oBinding marshalers remove: m ifAbsent: [nil]]].	self outputBodyMarshaler ifNotNil: 		[self outputBodyMarshaler marshalers do: [ :m | x2oBinding marshalers remove: m ifAbsent: [nil] ]].</body><body package="WSDLWizard">soapHeadersAsStructFor: headerBinding to: headers	|  str |	headerBinding do: [ :header |		headers detect: [ :hd | hd headerName = header partNames first asString ] ifNone: [			headers add: ( str := WebServices.Struct new						headerName: header partNames first asString;						headerMarshaler: header valueMarshaler;						faults: OrderedCollection new;						yourself).			header faults ifNotNil: [ :faults | faults do: [ :fault | str faults add: (fault partNames first asString -&gt; fault valueMarshaler) ]].		]]</body></methods><methods><class-id>WebServices.SoapOperationBinding</class-id> <category>tool</category><body package="WSDLWizard">removeOperationMarshalersFrom: aX2OBinding</body></methods><methods><class-id>WebServices.Wsdl11InterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">faultMarshalersFromBinding: xmlObjectBinding	| parts ms |	(self faults isNil or: [self faults isEmpty]) ifTrue: [^OrderedCollection new].	^self faults collect: [ :fault | 		parts := fault message parts.		ms := self partMarshalers:  fault message parts fromBinding: xmlObjectBinding.		parts first name type-&gt;ms first ]</body><body package="WSDLWizard">faultMarshalersFromBinding: xmlObjectBinding interfaceFaults: aFaultColl	| parts ms |	(self faults isNil or: [self faults isEmpty]) ifTrue: [^OrderedCollection new].	^self faults collect: [ :fault | 		parts := fault message parts.		ms := self partMarshalers:  fault message parts fromBinding: xmlObjectBinding.		parts first name type-&gt;ms first ]</body><body package="WSDLWizard">faultNamesFromBinding: xmlObjectBinding	| p |	(self faults isNil or: [self faults isEmpty]) ifTrue: [^OrderedCollection new].	^self faults collect: [ :fault | 			p := fault message parts first.			p elementName ifNotNil: [p elementName type] ifNil: [p typeName type].].</body></methods><methods><class-id>WebServices.Wsdl11InterfaceOperationDescriptor</class-id> <category>testing</category><body package="WSDLWizard">hasReferenceTo: aMarshaler	(output notNil and: [ output message parts size &gt; 0 ]) ifTrue: 		[ (output message parts anySatisfy: [ :part | part isResolvedBy: aMarshaler ]) ifTrue: [^true]].	(input notNil and: [ input message parts size &gt; 0 ]) ifTrue: 		[ (input message parts anySatisfy: [ :part | part isResolvedBy: aMarshaler ]) ifTrue: [^true]].	faults do: [ :fault | (fault message parts anySatisfy: [ :part | part isResolvedBy: aMarshaler ]) ifTrue: [^true]].		^false</body></methods><methods><class-id>WebServices.Wsdl11InterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">inputMarshalersFromBinding: xmlObjectBinding	self input ifNil: [^nil].	^self partMarshalers: self input message parts fromBinding: xmlObjectBinding</body></methods><methods><class-id>WebServices.Wsdl11InterfaceOperationDescriptor</class-id> <category>testing</category><body package="WSDLWizard">isResolved	| args |	args := (self selector tokensBasedOn: $:) size - 1.	(args = 0 and: [output notNil and: [ output message parts size &gt; 0 ]]) ifTrue: [^true].	^args &gt; 0		and: [ input notNil 			and: [ input message parts size &gt; 0 ]]</body></methods><methods><class-id>WebServices.Wsdl11InterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">partMarshalers: parts fromBinding: xmlObjectBinding	| marshalers struct |	marshalers := OrderedCollection new.	parts do: [ :p | 		struct := WebServices.Struct new.		struct			elementName: p elementName;			typeName: p typeName.		marshalers addAll: (self parameterMarshalersFor: struct fromBinding: xmlObjectBinding)].	^marshalers</body><body package="WSDLWizard">removeFaultType: aStruct	(self  faults detect: [ :fault | fault key  = aStruct faultName ] ifNone: [nil]) 		ifNotNil: [ :fault | self  faults remove: fault ]</body><body package="WSDLWizard">returnMarshalerFromBinding: xmlObjectBinding	| ms |	self output ifNil: [^nil].	ms := self partMarshalers: self output message parts fromBinding: xmlObjectBinding.	^ms isEmpty ifTrue: [ nil ] ifFalse: [ ms first  ]</body></methods><methods><class-id>WebServices.Wsdl20BuildOptions</class-id> <category>initialize-release</category><body package="WSDLWizard">setOptionsFrom: aStruct		(aStruct at: #defaultOperationStyle ifAbsent: [nil]) 		ifNotNil: [ :style |			style = #iri ifTrue: [ styleDefault := WsdlBinding wsdl20_iri ].			style = #rpc ifTrue: [ styleDefault := WsdlBinding wsdl20_rpc_uri ].			style = #multipart ifTrue: [ styleDefault := WsdlBinding wsdl20_style_multipart].].</body></methods><methods><class-id>WebServices.Wsdl11MessagePartDescriptor</class-id> <category>testing</category><body package="WSDLWizard">isResolvedBy: aMarshaler	| myMarshaler |	myMarshaler := self elementName 		ifNotNil: [ aMarshaler binding elementMarshalerForTag: self elementName ifAbsent: [nil]]		ifNil: [aMarshaler binding typeMarshalerForTag:  self typeName ifAbsent: [nil] ].	myMarshaler ifNil: [^false].	myMarshaler 		nodesDo: [ :node |			(node isTypeMarshaler 				and: [ node path = aMarshaler path					or: [ node typeMarshaler path = aMarshaler path]]) ifTrue: [^true ]]		withRegistry: (IdentitySet new: 64).	^false</body></methods><methods><class-id>WebServices.Wsdl20ConfigurationDescriptor</class-id> <category>building services</category><body package="WSDLWizard">addServiceNamed: aString binding: bindingDescriptor	^(self services 		detect: [ :service | service interface  = bindingDescriptor interfaceDescriptor name ]		ifNone: [nil])			ifNil: [ self addServiceNamed: aString interface: bindingDescriptor interfaceDescriptor ]			ifNotNil: [ :service | 					self renameService: service to: aString.					service ]</body></methods><methods><class-id>WebServices.Wsdl20ConfigurationDescriptor</class-id> <category>building interface</category><body package="WSDLWizard">createInterfaceAndBindingFaultDescription: aWsdl20BindingDescriptor	| faults struct |	faults := OrderedCollection new.	self interfaces do: [ :interface |		interface faults do: [ :fault |				struct := Struct new							at: #faultName put: (fault at: #name ifAbsent: ['']);							at: #element put: fault element;							yourself.				aWsdl20BindingDescriptor ifNotNil: [					(aWsdl20BindingDescriptor faults detect: [ :faultBinding | faultBinding name =  struct faultName ] ifNone: [nil]) 						ifNotNil: [ :faultBinding | struct at: #faultBinding put: faultBinding ]].				faults add: struct. ]].	faults do: [ :fault | fault at: #faultBinding ifAbsentPut: [self defaultFaultBindingFor:  fault faultName type]  ].	^faults</body></methods><methods><class-id>WebServices.Wsdl20ConfigurationDescriptor</class-id> <category>building binding</category><body package="WSDLWizard">createSoapHeaderFrom: aStruct	^(self createSoapHeaderNamed: aStruct headerName type: aStruct headerMarshaler smalltalkClass)		mustUnderstand: true;		required: true;		yourself</body></methods><methods><class-id>WebServices.SoapWsdl20OperationBinding</class-id> <category>tool</category><body package="WSDLWizard">addSoapHeadersAsStructFor: headerBinding to: aCollection	|  str |	headerBinding ifNil: [^nil].	headerBinding do: [ :header |		aCollection detect: [ :hd | hd headerName = header elementType type ] ifNone: [			aCollection add: ( str := WebServices.Struct new						headerName: header elementType type;						headerMarshaler: header partMarshaler typeMarshaler valueMarshaler;						mustUnderstand: header mustUnderstand;						required: header required;						yourself).		]]</body><body package="WSDLWizard">addSoapHeadersAsStructTo: aCollection	self addSoapHeadersAsStructFor: self inputBodyMarshaler headers to: aCollection.	self outputBodyMarshaler ifNotNil: [ self addSoapHeadersAsStructFor: self outputBodyMarshaler headers to: aCollection].</body><body package="WSDLWizard">inputSoapHeaderNames	^self inputBodyMarshaler headers 		ifNil: [ #() ]		ifNotNil: [ self inputBodyMarshaler headers collect: [ :header |  #in -&gt; header elementType type ]].</body><body package="WSDLWizard">outputSoapHeaderNames	^(self outputBodyMarshaler isNil or: [ self outputBodyMarshaler headers isNil])		ifTrue: [#()]		ifFalse: [ self outputBodyMarshaler headers collect: [ :header |  #out -&gt; header elementType type ]].</body><body package="WSDLWizard">removeOperationMarshalersFrom: aX2OBinding	self inputBodyMarshaler partMarshalers do: [ :m | aX2OBinding marshalers remove: m ifAbsent: [nil]].	self outputBodyMarshaler ifNotNil: [ self outputBodyMarshaler partMarshalers do: [ :m | aX2OBinding marshalers remove: m ifAbsent: [nil]]].</body></methods><methods><class-id>WebServices.RelationMarshaler</class-id> <category>tool</category><body package="WSDLWizard">removeOperationFromBinding	(XMLObjectBinding bindingAtNamespace:  self path namespace) marshalers remove: self ifAbsent: []</body></methods><methods><class-id>WebServices.WsdlBuildOptions</class-id> <category>initialize-release</category><body package="WSDLWizard">setOptionsFrom: aStruct	^self subclassResponsibility</body></methods><methods><class-id>WebServices.Wsdl20BindingDescriptor</class-id> <category>tools</category><body package="WSDLWizard">setBindingFaultsTo: aCollection		faults := OrderedCollection new.	aCollection do: [ :faultStruct |		(faultStruct at: #faultBinding ifAbsent: [nil]) 				ifNotNil: [ :fBinding | 	faults add: fBinding]]</body></methods><methods><class-id>WebServices.Wsdl20InterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">faultMarshalersFromBinding:  xmlObjectBinding	self outfaults isEmpty ifTrue: [^#() ].	^self outfaults collect: [ :fault |		fault element type -&gt; (self partMarshalers: (OrderedCollection with: fault) fromBinding: xmlObjectBinding) first ]</body><body package="WSDLWizard">faultMarshalersFromBinding:  xmlObjectBinding  interfaceFaults: intFaults	| coll |	self outfaults isEmpty ifTrue: [^#() ].	coll := OrderedCollection new.	self outfaults do: [ :fault |		(intFaults detect: [ :intFault | intFault faultName = (fault at: #name) ] ifNone: [nil]) ifNotNil: [ :intFault |			coll add: (intFault element type -&gt; (self partMarshalers: (OrderedCollection with: intFault) fromBinding: xmlObjectBinding) first )]].	^coll</body></methods><methods><class-id>WebServices.Wsdl20InterfaceOperationDescriptor</class-id> <category>testing</category><body package="WSDLWizard">hasReferenceTo: aMarshaler	(output anySatisfy: [ :each | each element = aMarshaler path ]) ifTrue: [^true].	(input notEmpty and: [ input first element ~= '#none' ]) ifTrue: [ 		(input anySatisfy: [ :each | each element = aMarshaler path ]) ifTrue: [^true]].	^false</body></methods><methods><class-id>WebServices.Wsdl20InterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">inputMarshalersFromBinding: xmlObjectBinding	(self input isNil or: [self input first element = '#none']) ifTrue: [^nil].	^self partMarshalers: self input fromBinding: xmlObjectBinding</body></methods><methods><class-id>WebServices.Wsdl20InterfaceOperationDescriptor</class-id> <category>testing</category><body package="WSDLWizard">isResolved	| args |	args := (self selector tokensBasedOn: $:) size - 1.	(args = 0 and: [output notEmpty]) ifTrue: [^true].	^args  &gt; 0		and: [ input notEmpty			and: [ input first element ~= '#none' ]]</body></methods><methods><class-id>WebServices.Wsdl20InterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">partMarshalers: structs fromBinding: xmlObjectBinding	| marshalers |	marshalers := OrderedCollection new.	structs do: [ :struct |			marshalers addAll: (self parameterMarshalersFor: (Struct new at: #elementName put: struct element; yourself) fromBinding: xmlObjectBinding)].	^marshalers</body><body package="WSDLWizard">removeFaultType: aStruct	(self  outfaults detect: [ :fault | (fault at: #name ifAbsent: [nil]) = aStruct faultName ] ifNone: [nil]) 		ifNotNil: [ :fault | self outfaults remove: fault ]</body><body package="WSDLWizard">resetOutFaults 	outfaults := OrderedCollection new.</body><body package="WSDLWizard">returnMarshalerFromBinding: xmlObjectBinding	(self output isNil or: [self output isEmpty or: [self output first element = '#none']]) ifTrue: [^nil].	^(self 		parameterMarshalersFor: (Struct new at: #elementName put: self output first element; yourself) 		fromBinding: xmlObjectBinding) first.</body></methods><methods><class-id>WebServices.WsdlBindingDescriptor</class-id> <category>tools</category><body package="WSDLWizard">setBindingFaultsTo: aCollection</body></methods><methods><class-id>WebServices.WsdlInterfaceOperationDescriptor</class-id> <category>testing</category><body package="WSDLWizard">hasReferenceTo: aMarshaler	^self subclassResponsibility</body></methods><methods><class-id>WebServices.WsdlInterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">inputMarshalersFromBinding: xmlObjectBinding</body></methods><methods><class-id>WebServices.WsdlInterfaceOperationDescriptor</class-id> <category>testing</category><body package="WSDLWizard">isResolved</body></methods><methods><class-id>WebServices.WsdlInterfaceOperationDescriptor</class-id> <category>accessing</category><body package="WSDLWizard">parameterMarshalersFor: aStruct fromBinding: xmlObjectBinding	| marshalers ms tag m marshaler |	marshalers := OrderedCollection new.	tag := aStruct elementName ifNotNil: [aStruct elementName] ifNil: [aStruct typeName].	ms := ('http://www.w3.org*' match: tag namespace)			ifTrue: [ xmlObjectBinding findMarshalersLike: tag ifAbsent: [nil]]			ifFalse: [ xmlObjectBinding findLocalMarshalersLike: tag ifAbsent: [nil]].	aStruct elementName 		ifNotNil: [marshaler := ms size = 1 					ifTrue: [ ms first ]					ifFalse: [ms detect: [ :mx | mx symbolSpace = #element ] ifNone: [nil]].				marshaler ifNotNil: [				 	m := marshaler typeMarshaler.					(m isObjectTypeMarshaler and: [m isDictionaryType and: [m relations notEmpty]])						ifTrue: [  marshalers addAll: m relations ]						ifFalse: [marshalers add:  m ]]] 		ifNil: [ (ms detect: [ :mx | mx isType ] ifNone: [nil]) ifNotNil: [ :type | marshalers add: type ]].	^marshalers</body><body package="WSDLWizard">resetOutFaults 	faults := OrderedCollection new.</body><body package="WSDLWizard">returnMarshalerFromBinding: xmlObjectBinding</body></methods><methods><class-id>WebServices.Wsdl11BuildOptions</class-id> <category>initialize-release</category><body package="WSDLWizard">setOptionsFrom: aStruct		(aStruct at: #use ifAbsent: [nil]) ifNotNil: [ :use | soapUse := use ].	(aStruct at: #style ifAbsent: [nil]) ifNotNil: [ :style | soapStyle := style ].</body></methods><methods><class-id>WebServices.Wsdl11ConfigurationDescriptor</class-id> <category>building services</category><body package="WSDLWizard">addServiceNamed: aString binding: bindingDescriptor	^(self services 		detect: [ :service | (service ports detect: [ :port | port binding = bindingDescriptor name ] ifNone: [nil]) notNil ] 		ifNone: [nil ]) 			ifNil: [self addServiceNamed: aString ]			ifNotNil: [ :service | 					self renameService: service to: aString.					service ]</body></methods><methods><class-id>WebServices.Wsdl11ConfigurationDescriptor</class-id> <category>building interface</category><body package="WSDLWizard">createInterfaceAndBindingFaultDescription: aWsdl20BindingDescriptor	| faults struct |	faults := OrderedCollection new.	self interfaces do: [ :interface |		interface faults:  OrderedCollection new.		interface operations ifNil: [interface operations: OrderedCollection new].		interface operations do: [ :operation | 			operation faults  do: [ :fault |				struct := Struct new							at: #faultName put: fault name;							at: #element put: (fault message parts first marshalerName);							yourself.				faults detect: [ :str | str name= struct name and: [str  element = struct element ] ] ifNone: [faults add: struct].] ]].	^faults</body></methods><methods><class-id>WebServices.Wsdl11ConfigurationDescriptor</class-id> <category>building binding</category><body package="WSDLWizard">createSoapHeaderFrom: aStruct	| header fault |	header := self createSoapHeaderNamed: aStruct headerName type: aStruct headerMarshaler smalltalkClass.	header use: self buildOptions soapUse.	(aStruct at: #faults ifAbsent: [#()]) do: [ :assoc | 		(fault := self createSoapHeaderFaultNamed: assoc key  type: assoc value smalltalkClass) use: self buildOptions soapUse.		header faults add: fault ].	^header</body></methods><methods><class-id>WebServices.WsdlConfigurationDescriptor</class-id> <category>building services</category><body package="WSDLWizard">addServiceNamed: aServiceName binding: bindingDescriptor</body></methods><methods><class-id>WebServices.WsdlConfigurationDescriptor</class-id> <category>building interface</category><body package="WSDLWizard">createInterfaceAndBindingFaultDescription: aWsdl20BindingDescriptor</body></methods><methods><class-id>WebServices.WsdlConfigurationDescriptor</class-id> <category>building services</category><body package="WSDLWizard">renameService: aService to: aString	 aService name type =  aString ifTrue: [^nil].	"Remove old service entry from the registry"	WsdlService registry removeKey: aService name ifAbsent: [].	aService name: (NodeTag qualifier: '' ns: self targetNamespace type: aString).</body></methods><methods><class-id>WebServices.SelectWsdlBinding class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #SelectingXMLToObjectBinding1 				#defaultString: 'Selecting XML To Object Binding' 				#catalogID: #webservices ) 			#bounds: #(#{Graphics.Rectangle} 614 272 1306 769 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 60 0 -16 1 -15 1 ) 					#name: #BindingListAspect 					#model: #bindingListAspect 					#menu: #selectionMenu 					#multipleSelections: false 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 19 0 26 0 0 0 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #SelectWsdl 						#defaultString: 'Select WSDL' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.GoodByePage class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeAutoSave true #positionAutoSave true #sizeType #lastSavedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #welcomeToWsdlWizard 				#defaultString: 'Welcome to the WSDL Wizard' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 736 286 1226 640 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 40 0 -15 1 140 0 ) 					#name: #TextEditor1 					#flags: 4 					#model: #blurbHolder 					#tabable: false 					#style: #system 					#isReadOnly: true 					#tabRequiresControl: false ) ) ) )</body></methods><methods><class-id>WebServices.AddImportedBindings class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ImportXMLObjectBindings 				#defaultString: 'Import XML Object Bindings' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 250 342 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 752 300 1168 741 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 35 0 -34 1 -26 1 ) 					#name: #bindingListAspect 					#flags: 15 					#model: #bindingListAspect 					#multipleSelections: false 					#style: #system 					#selectionType: #highlight 					#autoSelect: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 10 0 -19 1 -12 1 ) 					#name: #RegisteredX2OBindings 					#label: 					#(#{Kernel.UserMessage} 						#key: #RegisteredX2OBindings 						#defaultString: 'Registered X2O Bindings' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.AddInterfaceFault class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #CreateInterfaceFault 				#defaultString: 'Create Interface Fault' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 478 495 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 721 273 1199 768 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -210 1 -40 1 -110 1 -16 1 ) 					#name: #acceptButton 					#model: #acceptType 					#label: 					#(#{Kernel.UserMessage} 						#key: #Accept 						#defaultString: 'Accept' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -100 1 -40 1 -20 1 -15 1 ) 					#name: #Cancel 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 -107 1 ) 					#name: #selectComplexType 					#flags: 0 					#majorKey: #{WebServices.SelectComplexType} 					#minorKey: #windowSpec 					#clientKey: #selectComplexType ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 -111 1 118 0 -86 1 ) 					#name: #soapFaultCodeLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #SoapFaultCode 						#defaultString: 'Soap Fault Code' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 -80 1 147 0 -55 1 ) 					#name: #soapFaultSubcodeLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #SoapFaultSubcode 						#defaultString: 'Soap Fault Subcode' 						#catalogID: #webservices ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 170 0 -111 1 -20 1 -86 1 ) 					#name: #soapFaultCodes 					#model: #soapFaultCodeAspect 					#comboList: #soapFaultCodes ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 170 0 -80 1 -20 1 -55 1 ) 					#name: #soapFaultSubcode 					#model: #soapFaultSubcodeAspect ) ) ) )</body></methods><methods><class-id>WebServices.AddSoapHeader class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #CreateSoapHeader 				#defaultString: 'Create Soap Header' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 471 503 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 725 269 1196 772 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -210 1 -40 1 -110 1 -16 1 ) 					#name: #acceptButton 					#model: #acceptType 					#label: 					#(#{Kernel.UserMessage} 						#key: #Accept 						#defaultString: 'Accept' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -100 1 -40 1 -20 1 -15 1 ) 					#name: #Cancel 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 -106 1 147 0 -80 1 ) 					#name: #mustUnderstand 					#model: #mustUnderstand 					#label: 					#(#{Kernel.UserMessage} 						#key: #MustUnderstand 						#defaultString: 'must understand' 						#catalogID: #webservices ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 -78 1 149 0 -56 1 ) 					#name: #required 					#model: #required 					#label: 					#(#{Kernel.UserMessage} 						#key: #Required 						#defaultString: 'required' 						#catalogID: #webservices ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 1 0 0 1 -105 1 ) 					#name: #selectComplexType 					#flags: 0 					#majorKey: #{WebServices.SelectComplexType} 					#minorKey: #windowSpec 					#clientKey: #selectComplexType ) ) ) )</body></methods><methods><class-id>WebServices.RemoveOperation class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Remove interface operation' 			#min: #(#{Core.Point} 446 170 ) 			#max: #(#{Core.Point} 446 170 ) 			#bounds: #(#{Graphics.Rectangle} 737 431 1183 601 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 262 30 435 55 ) 					#name: #InputField1 					#flags: 0 					#model: #operationName 					#tabable: false 					#style: #default 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 185 75 437 100 ) 					#name: #selector 					#flags: 0 					#model: #selector 					#tabable: false 					#style: #default 					#isReadOnly: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 346 135 427 170 ) 					#name: #Cancel 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #webservices ) 					#style: #default 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 259 135 340 170 ) 					#name: #RemoveOperation 					#model: #removeOperation 					#label: 					#(#{Kernel.UserMessage} 						#key: #Remove 						#defaultString: 'Remove' 						#catalogID: #webservices ) 					#style: #default 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 15 30 255 55 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #DoYouWantToRemove 						#defaultString: 'Do want to remove the operation?' 						#catalogID: #webservices ) 					#style: #default ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.Rectangle} 15 75 155 100 ) 					#name: #includingMethod 					#model: #includingMethod 					#label: 					#(#{Kernel.UserMessage} 						#key: #IncludingMethod 						#defaultString: 'Including method:' 						#catalogID: #webservices ) 					#style: #default ) ) ) )</body></methods><methods><class-id>WebServices.SelectWsdlVersion class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #SelectingWsdlDocumentVersion 				#defaultString: 'Selecting Wsdl document version' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 480 330 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 726 359 1194 673 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 50 0 -15 1 -9 1 ) 					#name: #wsdlSchemaVersion 					#label: 					#(#{Kernel.UserMessage} 						#key: #wsdlDocumentVersion 						#defaultString: 'Wsdl document version' 						#catalogID: #webservices ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.5 170 0 -140 1 195 0 ) 					#name: #styleAttribute11Aspect 					#model: #styleAttribute11Aspect 					#comboList: #styleAttribute11AspectChoices ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.100427 76 0 -328 1 96 0 ) 					#name: #wsdl20VersionAspect 					#model: #wsdlVersionAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #Wsdl20 						#defaultString: 'WSDL 2.0' 						#catalogID: #webservices ) 					#style: #systemDefault 					#select: #wsdl20 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.104701 147 0 -337 1 166 0 ) 					#name: #wsdl11VersionAspect 					#model: #wsdlVersionAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #wsdl11 						#defaultString: 'WSDL 1.1' 						#catalogID: #webservices ) 					#style: #systemDefault 					#select: #wsdl11 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.17 170 0 -315 1 195 0 ) 					#name: #styleLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Style 						#defaultString: 'Style' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.17 200 0 -328 1 225 0 ) 					#name: #useLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Use 						#defaultString: 'Use' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 21 0 18 0 0 0 ) 					#name: #Label3 					#label: 					#(#{Kernel.UserMessage} 						#key: #TargetNamespace 						#defaultString: 'Target Namespace' 						#catalogID: #webservices ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.5 200 0 -140 1 225 0 ) 					#name: #useAttribute11Aspect 					#model: #useAttribute11Aspect 					#comboList: #useAttribute11AspectChoices ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -250 1 14 0 -18 1 39 0 ) 					#name: #targetNamespaces 					#model: #selectedTargetNamespace 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #targetNamespaceChanged ) 					#isReadOnly: false 					#comboList: #allTargetNamespaces ) ) ) )</body></methods><methods><class-id>WebServices.DescribeInterfaceTabs class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #InterfaceDescription 				#defaultString: 'Interface description' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 560 441 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 643 287 1203 728 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 15 0 67 0 0 1 ) 					#name: #UseMethodsInProtocol 					#label: 					#(#{Kernel.UserMessage} 						#key: #UseMethodsInProtocol 						#defaultString: 'Use methods in protocol' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 15 0 37 0 0 1 ) 					#name: #ServiceClass 					#label: 					#(#{Kernel.UserMessage} 						#key: #ServiceClass 						#defaultString: 'Service class' 						#catalogID: #webservices ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.379699 15 0 -118 1 38 0 ) 					#name: #serviceClassAspect 					#model: #serviceClassAspect 					#isReadOnly: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 15 0 100 0 0 1 ) 					#name: #IncludingSuperClass 					#label: 					#(#{Kernel.UserMessage} 						#key: #IncludingSuperClass 						#defaultString: 'Including super class' 						#catalogID: #webservices ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 15 0 -10 1 40 0 ) 					#name: #Select 					#model: #selectClass 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #SelectClassThatProvidesServices 						#defaultString: 'Select the class that provides the service' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #SelectDots 						#defaultString: 'Select...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.379699 45 0 -118 1 68 0 ) 					#name: #methodProtocolCBAspect 					#model: #methodProtocolCBAspect 					#comboList: #methodsInProtocolList ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.379699 78 0 -118 1 101 0 ) 					#name: #superClassCBAspect 					#model: #superClassCBAspect 					#comboList: #superClassesAspect ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 105 0 -1 1 -1 1 ) 					#name: #tabs 					#model: #tabs 					#labels: #() ) ) ) )</body></methods><methods><class-id>WebServices.DescribeOperationsTab class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #InterfaceOperations 				#defaultString: 'Interface operations' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 532 344 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 654 299 1186 643 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -125 1 -5 1 ) 					#name: #typeViewsAspect 					#model: #typeViewsAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectionChanged ) 					#helpText: '' 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 25 0 -10 1 50 0 ) 					#name: #addDescriptionButton 					#model: #addDescription 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #DescribeOperationParametersReturnFaultsHeaders 						#defaultString: 'Describe operation parameters, return, faults and headers' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Describe1 						#defaultString: 'Describe...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -113 1 125 0 -8 1 150 0 ) 					#name: #addInputHeaderToSelectedOperations 					#model: #addInputHeaderToSelectedOperations 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #AddInputHeaderToSelectedOperations 						#defaultString: 'Add Input Header to selected operations ' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #InputHeaderDot 						#defaultString: 'Input Header...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -113 1 195 0 -8 1 220 0 ) 					#name: #addFaultToSelectedOperations 					#model: #addFaultToSelectedOperations 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #AddFaultToSelectedOperations 						#defaultString: 'Add Fault to selected operations' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #FaultDot 						#defaultString: 'Fault...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -113 1 155 0 -8 1 180 0 ) 					#name: #addOutputHeaderToSelectedOperations 					#model: #addOutputHeaderToSelectedOperations 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #AddOutputHeaderToSelectedOperations 						#defaultString: 'Add Output Header to selected operations' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #OutputHeaderDot 						#defaultString: 'Output Header...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 55 0 -10 1 80 0 ) 					#name: #addOperationButton 					#model: #addOperation 					#label: 					#(#{Kernel.UserMessage} 						#key: #AddDot 						#defaultString: 'Add...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 85 0 -10 1 110 0 ) 					#name: #removeOperationButton 					#model: #removeOperation 					#label: 					#(#{Kernel.UserMessage} 						#key: #RemoveDot 						#defaultString: 'Remove...' 						#catalogID: #webservices ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>WebServices.CreateBindingClassesTab class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #GenerateClasses 				#defaultString: 'Generate Classes' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 478 436 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 784 285 1262 721 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -120 1 -30 1 -20 1 -5 1 ) 					#name: #viewX2OButton 					#model: #viewX2O 					#label: 					#(#{Kernel.UserMessage} 						#key: #ViewX2O 						#defaultString: 'View X2O...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showVerticalLines true #allowColumnReordering false #rowSize 25 #allowColumnResizing true #rowLabelsAsButtons true #showHorizontalLines true ) 					#layout: #(#{Graphics.LayoutFrame} 20 0 167 0 -19 1 -38 1 ) 					#name: #classListAspect 					#model: #classListAspect 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false #allowResizing true ) 							#model: #'selectedRow complexTypeName' 							#label: 							#(#{Kernel.UserMessage} 								#key: #XMLComplexType 								#defaultString: 'XML Complex Type' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 260 							#rendererType: #Text 							#editorType: #None 							#font: #default 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false #allowResizing true ) 							#model: #'selectedRow smalltalkClassName' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #classNameChanged ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #ClassName 								#defaultString: 'Class Name' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 240 							#editorType: #InputField 							#font: #default 							#noScroll: false 							#labelsAsButtons: true ) ) 					#labelsAsButtons: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 57 0 -20 1 119 0 ) 					#name: #classDefinition 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage 					#clientKey: #classDefinition ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 170 0 25 0 -20 1 50 0 ) 					#name: #xmlTargetNamespace 					#model: #xmlTargetNamespaceAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #xmlTargetNamespaceChanged ) 					#comboList: #xmlTargetNamespaces ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 20 25 163 50 ) 					#name: #targetNamespaceLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #XMLTargetNamespace 						#defaultString: 'XML target namespace:' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 140 0 -10 1 160 0 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #XMLComplexTypesSmalltalkClassesBinding 						#defaultString: 'XML Complex types to Smalltalk classes binding:' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.GenerateResponder class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #GenerateSOAPResponder 				#defaultString: 'Generate SOAP Responder class' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 717 344 1204 689 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 155 0 -13 1 -11 1 ) 					#name: #WsdlSchema 					#label: 					#(#{Kernel.UserMessage} 						#key: #WsdlDocument 						#defaultString: 'Wsdl document' 						#catalogID: #webservices ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 35 0 -15 1 150 0 ) 					#name: #responderClass 					#label: 					#(#{Kernel.UserMessage} 						#key: #ResponderClass 						#defaultString: 'Responder class' 						#catalogID: #webservices ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 207 0 -23 1 232 0 ) 					#name: #wsdlPortName 					#model: #wsdlPortName 					#isReadOnly: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 30 0 266 0 0 1 ) 					#name: #accessUrlLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #AccessURL 						#defaultString: 'Access URL' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 30 0 300 0 0 1 ) 					#name: #documentationLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #documentation 						#defaultString: 'Documentation' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 30 0 232 0 0 1 ) 					#name: #interfaceNameLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #InterfaceName 						#defaultString: 'Interface name' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 26 0 80 0 0 1 ) 					#name: #Name 					#label: 					#(#{Kernel.UserMessage} 						#key: #Name 						#defaultString: 'Name' 						#catalogID: #webservices ) ) 				#(#{UI.CheckBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutOrigin} 15 0 13 0 ) 					#name: #generateClassCBAspect 					#model: #generateClassCBAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #GenerateClass 						#defaultString: 'Generate class' 						#catalogID: #webservices ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0 85 0 -25 1 140 0 ) 					#name: #classDefinition 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage 					#clientKey: #classDefinition ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 239 0 -23 1 264 0 ) 					#name: #urlString 					#model: #urlString 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #enableGenerate 						#valueChangeSelector: #enableGenerate ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 271 0 -24 1 -32 1 ) 					#name: #documentationText 					#model: #documentationText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #enableGenerate ) 					#tabable: true 					#style: #system 					#tabRequiresControl: false ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 175 0 52 0 -25 1 82 0 ) 					#name: #className 					#flags: 0 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #classNameAspect ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 30 0 177 0 ) 					#name: #wsdlServiceLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #wsdlServiceName 						#defaultString: 'Service name' 						#catalogID: #webservices ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 175 0 -23 1 200 0 ) 					#name: #wsdlServiceNameAspect 					#model: #wsdlServiceNameAspect ) ) ) )</body></methods><methods><class-id>WebServices.SetOperationTypes class</class-id> <category>resources</category><body package="WSDLWizard">additionalMenu	"Tools.MenuEditor new openOnClass: self andSelector: #additionalMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AddFault 					#defaultString: 'Add Fault' 					#catalogID: #webservices ) 				#nameKey: #AddFault 				#value: #addFault ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RemoveFault 					#defaultString: 'Remove Fault' 					#catalogID: #webservices ) 				#nameKey: #RemoveFault 				#value: #removeFault ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AddInputSoapHeader 					#defaultString: 'Add Input Soap Header' 					#catalogID: #webservices ) 				#nameKey: #addInputSoapHeader 				#value: #addInputSoapHeader ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AddOutputSoapHeader 					#defaultString: 'Add Output Soap Header' 					#catalogID: #webservices ) 				#nameKey: #addOutputSoapHeader 				#value: #addOutputSoapHeader ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RemoveSoapHeader 					#defaultString: 'Remove Soap Header' 					#catalogID: #webservices ) 				#nameKey: #removeSoapHeader 				#value: #removeSoapHeader ) ) #(2 3 ) nil ) decodeAsLiteralArray</body><body package="WSDLWizard">additionalTypeMenu	"Tools.MenuEditor new openOnClass: self andSelector: #additionalTypeMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #CollectionTypeDotDotDot 					#defaultString: 'Collection type...' 					#catalogID: #webservices ) 				#nameKey: #setCollectionType 				#value: #setCollectionType ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>WebServices.SetOperationTypes class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #OperationDescription 				#defaultString: 'Operation Description' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 670 494 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 1109 476 1779 970 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 20 0 -100 1 36 0 ) 					#name: #classNameAspect 					#flags: 0 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 786 786 786 ) ) 					#model: #classNameAspect 					#tabable: false 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 97 0 50 0 -100 1 66 0 ) 					#name: #methodSelectorAspect 					#flags: 0 					#model: #methodSelectorAspect 					#tabable: false 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 174 0 120 0 -30 1 148 0 ) 					#name: #nameAspect 					#model: #nameAspect ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 175 0 150 0 -29 1 220 0 ) 					#name: #descriptionAspect 					#model: #descriptionAspect 					#style: #system 					#tabRequiresControl: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 30 0 260 0 -30 1 -55 1 ) 					#name: #DatasetPartTableAspect 					#isOpaque: true 					#model: #datasetAspect 					#menu: #typesMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow part' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Part 								#defaultString: 'Message Part' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow name' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Name 								#defaultString: 'Name' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 150 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow displayString' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Type 								#defaultString: 'Type' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 260 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow inout' 							#label: 							#(#{Kernel.UserMessage} 								#key: #InOut 								#defaultString: 'In/Out' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 55 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #inoutList 							#noScroll: true ) ) 					#verticalPolicy: #wrap 					#labelsAsButtons: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -223 1 -35 1 -125 1 -10 1 ) 					#name: #acceptButton 					#model: #acceptType 					#label: 					#(#{Kernel.UserMessage} 						#key: #Accept 						#defaultString: 'Accept' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -117 1 -35 1 -20 1 -10 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0 -35 1 110 0 -10 1 ) 					#name: #displayHelpText 					#model: #displayHelpText 					#label: 'Help' 					#defaultable: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 84 0 -20 1 -45 1 ) 					#name: #WsdlOperation 					#label: 					#(#{Kernel.UserMessage} 						#key: #WsdlOperation 						#defaultString: 'Wsdl operation' 						#catalogID: #webservices ) ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.Rectangle} 212 225 324 250 ) 					#name: #beRobustInOnly 					#model: #pattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #onPatternChange ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #OneWay 						#defaultString: 'One-Way' 						#catalogID: #webservices ) 					#select: #beRobustInOnly ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -95 1 50 0 -20 1 75 0 ) 					#name: #browseMethod 					#model: #browseMethod 					#label: 					#(#{Kernel.UserMessage} 						#key: #BrowseDots 						#defaultString: 'Browse...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 20 20 73 36 ) 					#name: #Class 					#label: 					#(#{Kernel.UserMessage} 						#key: #Class 						#defaultString: 'Class: ' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 20 50 76 66 ) 					#name: #Method 					#label: 					#(#{Kernel.UserMessage} 						#key: #MethodC 						#defaultString: 'Method:' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 30 120 105 145 ) 					#name: #Name 					#label: 					#(#{Kernel.UserMessage} 						#key: #Name 						#defaultString: 'Name' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 30 160 132 184 ) 					#name: #Description 					#label: 					#(#{Kernel.UserMessage} 						#key: #Description 						#defaultString: 'Description' 						#catalogID: #webservices ) ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.Rectangle} 30 225 180 250 ) 					#name: #beInOut 					#model: #pattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #onPatternChange ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #RequestResponse 						#defaultString: 'Request-Response' 						#catalogID: #webservices ) 					#select: #beInOut ) ) ) )</body></methods><methods><class-id>WebServices.UserPasswordDialog class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #ConnectTo 				#defaultString: 'Connect to' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 420 151 ) 			#max: #(#{Core.Point} 420 151 ) 			#bounds: #(#{Graphics.Rectangle} 742 296 1162 447 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 34 12 397 41 ) 					#name: #serverName 					#flags: 0 					#model: #serverName 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 167 70 404 97 ) 					#name: #passwordAspect 					#model: #passwordAspect 					#type: #password ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.57377 0 0.769231 0 0.754098 0 0.91716 ) 					#name: #accept 					#model: #acceptUserInfo 					#label: 					#(#{Kernel.UserMessage} 						#key: #Accept 						#defaultString: 'Accept' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.779859 0 0.769231 0 0.960187 0 0.91716 ) 					#name: #cancel 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 37 32 105 53 ) 					#name: #username 					#label: 					#(#{Kernel.UserMessage} 						#key: #username 						#defaultString: 'User name' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 38 0 67 0 88 0 88 0 ) 					#name: #passwordLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Password 						#defaultString: 'Password' 						#catalogID: #webservices ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 167 32 404 59 ) 					#name: #userNameAspect 					#model: #userNameAspect ) ) ) )</body></methods><methods><class-id>WebServices.MissingMethods class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #OperationsWithMissingMethods 				#defaultString: 'Operations with missing methods' 				#catalogID: #webservices ) 			#bounds: #(#{Graphics.Rectangle} 728 328 1236 743 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 36 19 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #OperationsDontHaveAsiggnedMethods 						#defaultString: 'The following operations don''t have assigned methods from the service class:' 						#catalogID: #webservices ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 36 46 388 73 ) 					#name: #InputField1 					#flags: 0 					#model: #serviceClassAspect 					#alignment: #center 					#isReadOnly: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showVerticalLines true #allowColumnReordering false #rowSize 25 #allowColumnResizing true #rowLabelsAsButtons false #showHorizontalLines true ) 					#layout: #(#{Graphics.Rectangle} 20 106 490 357 ) 					#name: #operationsTableAspect 					#model: #operationsTableAspect 					#tabable: true 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting true #allowResizing true ) 							#model: #'selectedRow operationName' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Operation 								#defaultString: 'Operation' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 220 							#rendererType: #Text 							#editorType: #None 							#font: #default 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting true #allowResizing true ) 							#model: #'selectedRow selector' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #selectorChanged ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #Method 								#defaultString: 'Method' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 230 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #allSelectors 							#font: #default 							#noScroll: true ) ) 					#labelsAsButtons: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 386 372 490 399 ) 					#name: #cancelWizard 					#model: #cancelWizard 					#label: 					#(#{Kernel.UserMessage} 						#key: #CancelWizard 						#defaultString: 'Cancel Wizard' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 278 372 382 399 ) 					#name: #Proceed 					#model: #proceed 					#label: 					#(#{Kernel.UserMessage} 						#key: #Procced 						#defaultString: 'Proceed' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 20 372 124 399 ) 					#name: #Help 					#model: #displayHelpText 					#label: 					#(#{Kernel.UserMessage} 						#key: #HelpDots						#defaultString: 'Help...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 36 79 ) 					#name: #Label2 					#label: 					#(#{Kernel.UserMessage} 						#key: #AssignThemHereOrTheyRemoved 						#defaultString: 'Assign methods here or the operations will be removed from the binding.' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.GenerateClient class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #GenerateClientClass 				#defaultString: 'Generate Client class' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 717 348 1204 693 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 180 0 -15 1 259 0 ) 					#name: #connectTo 					#label: 					#(#{Kernel.UserMessage} 						#key: #ConnectTo 						#defaultString: 'Connect to' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 27 0 230 0 0 1 ) 					#name: #serviceUrlLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ServiceURL 						#defaultString: 'Service URL' 						#catalogID: #webservices ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 47 0 -15 1 162 0 ) 					#name: #ClientClass 					#label: 					#(#{Kernel.UserMessage} 						#key: #ClientClass 						#defaultString: 'Client class' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 25 0 84 0 0 1 ) 					#name: #Name 					#label: 					#(#{Kernel.UserMessage} 						#key: #Name 						#defaultString: 'Name' 						#catalogID: #webservices ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 15 13 ) 					#name: #generateClassCBAspect 					#model: #generateClassCBAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #GenerateClass 						#defaultString: 'Generate class' 						#catalogID: #webservices ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0 97 0 -25 1 152 0 ) 					#name: #classDefinition 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage 					#clientKey: #classDefinition ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 173 0 207 0 -27 1 232 0 ) 					#name: #urlString 					#model: #urlString 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #enableGenerate ) 					#isReadOnly: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 175 0 64 0 -25 1 94 0 ) 					#name: #className 					#flags: 0 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #classNameAspect ) ) ) )</body></methods><methods><class-id>WebServices.SelectComplexType class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ComplexTypes 				#defaultString: 'Complex Types' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 402 330 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 759 355 1161 685 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 170 0 -39 1 -20 1 -14 1 ) 					#name: #nameAspect 					#model: #nameAspect 					#type: #string ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 -39 1 70 0 -14 1 ) 					#name: #Name 					#label: 					#(#{Kernel.UserMessage} 						#key: #Name 						#defaultString: 'Name' 						#catalogID: #webservices ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 26 0 -20 1 -60 1 ) 					#name: #types 					#model: #typesAspect 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -50 1 ) 					#name: #selectType 					#label: 					#(#{Kernel.UserMessage} 						#key: #SelectType 						#defaultString: 'Select Type' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.DescribeFaultsTab class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #OperationFaults 				#defaultString: 'Operation Faults' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 532 344 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 736 286 1268 630 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 25 0 -10 1 50 0 ) 					#name: #addFault 					#model: #addFault 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #AddInterfaceFault 						#defaultString: 'Add Interface Fault' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #AddFaultDot 						#defaultString: 'Add Fault...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 115 0 -10 1 140 0 ) 					#name: #addHeader 					#model: #addFaultHeader 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #AddFaultHeader 						#defaultString: 'Add Fault Header' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #AddHeaderDot 						#defaultString: 'Add Header...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -125 1 -5 1 ) 					#name: #faultTreeView 					#model: #faultTreeView 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 55 0 -10 1 80 0 ) 					#name: #remove 					#model: #removeFaultOrHeader 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #RemoveSelection 						#defaultString: 'Remove selection' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Remove 						#defaultString: 'Remove' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 85 0 -10 1 110 0 ) 					#name: #properties 					#model: #updateFaultProperties 					#label: 					#(#{Kernel.UserMessage} 						#key: #PropertiesDot 						#defaultString: 'Properties...' 						#catalogID: #webservices ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>WebServices.CreateWSDL class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #GeneratingWsdlDocuments 				#defaultString: 'Generating Wsdl documents' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 717 344 1204 689 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 -162 1 -15 1 -20 1 ) 					#name: #Destination 					#label: 					#(#{Kernel.UserMessage} 						#key: #Destination 						#defaultString: 'Destination' 						#catalogID: #webservices ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -234 1 -138 1 -119 1 -111 1 ) 					#name: #classNameAspect 					#model: #classNameAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #methodChanged ) 					#isReadOnly: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0 -59 1 -376 1 -34 1 ) 					#name: #post 					#model: #destinationType 					#label: 					#(#{Kernel.UserMessage} 						#key: #POST 						#defaultString: 'POST url' 						#catalogID: #webservices ) 					#select: #Post ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} -252 1 -138 1 -236 1 -113 1 ) 					#name: #inLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #in 						#defaultString: 'in' 						#catalogID: #webservices ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 11 0 ) 					#name: #generateCBAspect 					#model: #generateCBAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #Generate 						#defaultString: 'Generate' 						#catalogID: #webservices ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 69 0 -15 1 -170 1 ) 					#name: #typeListAspect 					#model: #typeListAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectedSchemaChanged ) 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0 -138 1 -388 1 -111 1 ) 					#name: #method 					#model: #destinationType 					#label: 					#(#{Kernel.UserMessage} 						#key: #Method 						#defaultString: 'Method' 						#catalogID: #webservices ) 					#select: #Method ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 114 0 -138 1 -253 1 -113 1 ) 					#name: #methodName 					#model: #methodName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #methodChanged ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 -138 1 -25 1 -113 1 ) 					#name: #selectClassButton 					#model: #selectClass 					#label: 					#(#{Kernel.UserMessage} 						#key: #SelectDots 						#defaultString: 'Select...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0 -96 1 -389 1 -77 1 ) 					#name: #file 					#model: #destinationType 					#label: 					#(#{Kernel.UserMessage} 						#key: #Fileout 						#defaultString: 'File out' 						#catalogID: #webservices ) 					#select: #File ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 114 0 -96 1 -119 1 -71 1 ) 					#name: #fileNameAspect 					#model: #fileNameAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #fileChanged ) 					#isReadOnly: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 -95 1 -25 1 -70 1 ) 					#name: #browseFileButton 					#model: #browseFile 					#label: 					#(#{Kernel.UserMessage} 						#key: #BrowseDots 						#defaultString: 'Browse...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 114 0 -57 1 -119 1 -32 1 ) 					#name: #postURLAspect 					#model: #postURLAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #postUrlChanged ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 15 0 68 0 0 1 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #Documents 						#defaultString: 'Documents' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.DescribeSoapHeadersTab class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #SoapHeaders 				#defaultString: 'Soap Headers' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 532 344 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 736 286 1268 630 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 25 0 -10 1 50 0 ) 					#name: #addSoapHeader 					#model: #addSoapHeader 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #CreateSoapHeader 						#defaultString: 'Create Soap Header' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #AddHeaderDot 						#defaultString: 'Add Header...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 115 0 -10 1 140 0 ) 					#name: #addHeaderFault 					#model: #addHeaderFault 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #AddHeaderFault 						#defaultString: 'Add Header Fault' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #AddFaultDot 						#defaultString: 'Add Fault...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -125 1 -5 1 ) 					#name: #headers 					#model: #headersTreeView 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 55 0 -10 1 80 0 ) 					#name: #remove 					#model: #removeFaultOrHeader 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #RemoveSelection 						#defaultString: 'Remove selection' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Remove 						#defaultString: 'Remove' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -115 1 85 0 -10 1 110 0 ) 					#name: #properties 					#model: #updateHeaderProperties 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #UpdateSoapHeaderProperties 						#defaultString: 'Update Soap Header properties: #required/#mustUnderstand' 						#catalogID: #webservices ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #PropertiesDot 						#defaultString: 'Properties...' 						#catalogID: #webservices ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>WebServices.CreateResponderClassTab class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #CreateServerClass 				#defaultString: 'Create Server Class' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 784 285 1271 630 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -10 1 90 0 ) 					#name: #classDefinition 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage 					#clientKey: #classDefinition ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 100 0 -10 1 125 0 ) 					#name: #classListAspect 					#model: #classNameAspect ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 10 100 91 125 ) 					#name: #classNameAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #ClassNameC 						#defaultString: 'Class name:' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.ComplexTypesDialog class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ComplexType 				#defaultString: 'Complex Type' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 495 392 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 713 324 1208 716 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -112 1 -36 1 -10 1 -9 1 ) 					#name: #closeViewButton 					#model: #closeView 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -10 1 -45 1 ) 					#name: #complexTypes 					#model: #complexTypes 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>WebServices.CreateClientClassesTab class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #CreateClientClassesTab 				#defaultString: 'Create Client Classes' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 628 281 1115 626 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -10 1 90 0 ) 					#name: #classDefinition 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage 					#clientKey: #classDefinition ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 10 0 95 0 -10 1 -10 1 ) 					#name: #classListAspect 					#model: #classListAspect 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false #allowResizing true ) 							#model: #'selectedRow portName' 							#label: 							#(#{Kernel.UserMessage} 								#key: #PortName 								#defaultString: 'Port name' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 250 							#rendererType: #Text 							#editorType: #None 							#font: #default 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false #allowResizing true ) 							#model: #'selectedRow className' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #classNameChanged ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #ClientClassName 								#defaultString: 'Client class name' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 250 							#editorType: #InputField 							#font: #default 							#noScroll: false 							#labelsAsButtons: true ) ) 					#labelsAsButtons: true ) ) ) )</body></methods><methods><class-id>WebServices.TestClientServer class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeAutoSave true #positionAutoSave true #sizeType #lastSavedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #TestingWsdlClient 				#defaultString: 'Testing Wsdl client' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 852 611 1342 965 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -15 1 -10 1 ) 					#name: #workspace 					#flags: 0 					#majorKey: #{Tools.Workbook} 					#minorKey: #windowSpec 					#clientKey: #workspaceAspect ) ) ) )</body></methods><methods><class-id>WebServices.X2OView class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ViewXMLToObjectBinding 				#defaultString: 'View XML To Object Binding' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 679 465 ) 			#max: #(#{Core.Point} 679 465 ) 			#bounds: #(#{Graphics.Rectangle} 621 288 1300 753 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 12 0 -12 1 -38 1 ) 					#name: #bindingText 					#model: #bindingText 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -110 1 -32 1 -12 1 -7 1 ) 					#name: #closeViewButton 					#model: #closeView 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #webservices ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>WebServices.WelcomePage class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeAutoSave true #positionAutoSave true #sizeType #lastSavedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #welcomeToWsdlWizard 				#defaultString: 'Welcome to the WSDL Wizard' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 742 296 1232 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 48 129 ) 					#name: #fromSchema 					#model: #buildFromAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelection ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #CreateApplicationFromWSDL 						#defaultString: 'Create an application from a WSDL document' 						#catalogID: #webservices ) 					#select: #buildFromSchema ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 20 0 -15 1 128 0 ) 					#name: #TextEditor1 					#flags: 4 					#model: #blurbHolder 					#tabable: false 					#style: #system 					#isReadOnly: true 					#tabRequiresControl: false ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 85 192 ) 					#name: #buildNewServiceButton 					#model: #buildFromAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelection ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #CreateNewWebServices 						#defaultString: 'Build new Web Services' 						#catalogID: #webservices ) 					#select: #buildNewService ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 85 223 ) 					#name: #updateServiceButton 					#model: #buildFromAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelection ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #UpadteWebServices 						#defaultString: 'Update Web Services' 						#catalogID: #webservices ) 					#select: #updateService ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 66 159 ) 					#name: #Label1 					#label: 'Expose an application as a web service' ) ) ) )</body></methods><methods><class-id>WebServices.LoadSchema class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #LoadWsdlDocument 				#defaultString: 'Load Wsdl document' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 742 296 1229 641 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 126 0 -15 1 188 0 ) 					#name: #bindingType 					#label: 					#(#{Kernel.UserMessage} 						#key: #BindXMLType 						#defaultString: 'Bind  XML Types to ' 						#catalogID: #webservices ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 222 0 -15 1 342 0 ) 					#name: #createBox 					#label: 					#(#{Kernel.UserMessage} 						#key: #CreateClasses 						#defaultString: 'Create Classes' 						#catalogID: #webservices ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 18 0 -15 1 104 0 ) 					#name: #WsdlSchemaURL 					#label: 					#(#{Kernel.UserMessage} 						#key: #WsdlDocumentURL 						#defaultString: 'Wsdl document URL' 						#catalogID: #webservices ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 28 0 54 0 -162 1 79 0 ) 					#name: #accessPointList 					#model: #accessPointAspect 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #urlEntered ) 					#isReadOnly: false 					#comboList: #accessPoints ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -154 1 54 0 -29 1 79 0 ) 					#name: #browseFile 					#model: #browseFile 					#label: 					#(#{Kernel.UserMessage} 						#key: #BrowseFile 						#defaultString: 'Browse file...' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 78 0 152 0 198 0 175 0 ) 					#name: #object 					#model: #bindingAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #Classes 						#defaultString: 'Classes' 						#catalogID: #webservices ) 					#select: #object ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 318 0 150 0 438 0 173 0 ) 					#name: #default 					#model: #bindingAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #Dictionaries 						#defaultString: 'Dictionaries' 						#catalogID: #webservices ) 					#select: #default ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 310 0 200 0 332 0 ) 					#name: #createServices 					#model: #createServicesAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #Services 						#defaultString: 'Services' 						#catalogID: #webservices ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 246 0 200 0 268 0 ) 					#name: #createClients 					#model: #createClientsAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #Clients 						#defaultString: 'Clients' 						#catalogID: #webservices ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 278 0 200 0 300 0 ) 					#name: #createResponder 					#model: #createResponderAspect 					#label: 					#(#{Kernel.UserMessage} 						#key: #Responder 						#defaultString: 'Responder' 						#catalogID: #webservices ) ) ) ) )</body></methods><methods><class-id>WebServices.AddOperation class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #AddInterfaceOperation 				#defaultString: 'Add interface operation' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 452 198 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 734 421 1186 619 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 145 0 30 0 -20 1 55 0 ) 					#name: #InputField1 					#model: #operationName ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 145 0 70 0 -20 1 95 0 ) 					#name: #serviceClassCBAspect 					#model: #serviceClassCBAspect 					#comboList: #superClassesAspect ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 1 160 0 -115 1 183 0 ) 					#name: #AcceptOperation 					#model: #acceptOperation 					#label: 					#(#{Kernel.UserMessage} 						#key: #Accept 						#defaultString: 'Accept' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -110 1 160 0 -20 1 183 0 ) 					#name: #Cancel 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #webservices ) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 19 32 ) 					#name: #OperationName 					#label: 					#(#{Kernel.UserMessage} 						#key: #OperationName 						#defaultString: 'Operation name:' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 19 71 ) 					#name: #ServiceClass 					#label: 					#(#{Kernel.UserMessage} 						#key: #Serviceclass 						#defaultString: 'Service class:' 						#catalogID: #webservices ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 19 110 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #MethodSignature 						#defaultString: 'Method signature:' 						#catalogID: #webservices ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 145 0 110 0 -20 1 135 0 ) 					#name: #methodSignature 					#model: #methodSignatureAspect 					#isReadOnly: false 					#comboList: #methodSignatures ) ) ) )</body></methods><methods><class-id>WebServices.CreateClassesSettingsTabs class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #ReviewParametersForClassesGeneration 				#defaultString: 'Review parameters for classes generation' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 643 268 1130 613 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -1 1 -1 1 ) 					#name: #tabs 					#model: #tabs 					#labels: #() ) ) ) )</body></methods><methods><class-id>WebServices.CreateServiceClassesTab class</class-id> <category>interface specs</category><body package="WSDLWizard">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionAutoSave true #sizeType #specifiedSize #openType #advanced #positionType #lastSavedPosition ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #CreateServiceClassesTab 				#defaultString: 'Create Service Classes' 				#catalogID: #webservices ) 			#min: #(#{Core.Point} 487 345 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 784 285 1271 630 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 25 0 -10 1 90 0 ) 					#name: #classDefinition 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage 					#clientKey: #classDefinition ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 10 0 95 0 -10 1 -10 1 ) 					#name: #classListAspect 					#model: #classListAspect 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #allowSorting false #allowResizing true ) 							#model: #'selectedRow portName' 							#label: 							#(#{Kernel.UserMessage} 								#key: #InterfaceName 								#defaultString: 'Interface name' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 250 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting false #labelFromApplication false #allowResizing true ) 							#model: #'selectedRow className' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #classNameChanged ) 							#label: 							#(#{Kernel.UserMessage} 								#key: #ServiceClassName 								#defaultString: 'Service class name' 								#catalogID: #webservices ) 							#labelIsImage: false 							#width: 250 							#editorType: #InputField 							#noScroll: false ) ) 					#labelsAsButtons: true ) ) ) )</body></methods><methods><class-id>UI.CommandRegistry class</class-id> <category>commands - web</category><body package="WSDLWizard">webServicesWizardCommand	&lt;command: #wsdlWizard&gt;	^Command		label: (#Web_ServicesWizard &lt;&lt; #menus &gt;&gt; 'Web &amp;Services Wizard' )		group: #web		bindings: #(			#isMacOSX #(F9)			#isMSWindows #(F9)			#isX11 #(F9)		)</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="WSDLWizard">wsapplied16x16	"UIMaskEditor new openOnClass: self andSelector: #applied16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7131 7388)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2570 3501 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7035 7227 7549)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2377 3212 4690)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 3276 4754)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1767 2409 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7003 7163 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7035 7195 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2345 3212 4658)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7067 7259 7581)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2377 3244 4754)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2827 3855 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2570 3533 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1735 2377 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 3405 4979)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2249 3084 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7003 7195 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2152 2955 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 3276 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7099 7292 7613)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 2698 3919)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2184 3019 4401)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 3662 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1767 2409 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 3694 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2024 2795 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1799 2473 3598)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 3758 5493)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2249 3052 4465)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 2570 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2891 4208)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1542 2088 3052)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2570 3533 5172)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1478 2024 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 2666 3887)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 3630 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1992 2730 3951)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2024 2762 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1574 2184 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 2216 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2281 3148 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 2538 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 2666 3855)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1735 2377 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2216 3019 4401)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDADA@PDA@A@PDA@PDA@PD-A@HYCA$BAB4A@PDA@PDRB2P\GA0\GBPKD DA@PDAGP4WE1\WE1\TCQ4A@PDAF $!HRD!HRDJB (IF DA@QTSC0LOC0&lt;C@0LOD1TA@PD^AP HBALHB@ SD0T^@PDAF24)DQDQDQD)JR$-F0DA@R0%E!XGA0\VE!XVIR0A@PDAFA(_G0@_G1&lt;_F! A@PDA@R\NH2X&amp;I"X&amp;H08''@PDA@PDAHB FJ",*A"  @PDA@PDA@PDAH"H"H"HA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="WSDLWizard">wsapplied16x16mask	"UIMaskEditor new openOnClass: self andSelector: #applied16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 192 0 0 31 240 0 0 63 248 0 0 63 248 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 248 0 0 63 248 0 0 31 240 0 0 7 192 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - web</category><body package="WSDLWizard">menuItemWebServicesWizard	"Open the WS Wizard"	&lt;vwPrivileged&gt;	&lt;menuItemForCommand: #wsdlWizard		icon: #web		nameKey: nil		menu: #(#menuBar tools)		position: 40.02&gt;	WebServices.WsdlWizard open.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SoapOperationBinding</name><environment>WebServices</environment><super>WebServices.OperationBinding</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>rpcResultAsStruct </class-inst-vars><imports></imports><category>Web Services-SOAP</category><attributes><package>WSDLBinding</package></attributes></class><class><name>WsdlBuildOptions</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x2oBuilder serviceProtocol serviceName defaultClassNamespace useServerSuperclass schemaTargetNamespace addSuperClassType bindingBuilderClass elementFormDefault attributeFormDefault </inst-vars><class-inst-vars>defaultServiceProtocol useServerSuperclass elementFormDefault attributeFormDefault </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLTool</package></attributes></class><class><name>Wsdl20BuildOptions</name><environment>WebServices</environment><super>WebServices.WsdlBuildOptions</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bindingType httpVerb mep transportProtocol soapMep styleDefault </inst-vars><class-inst-vars>httpVerb mep bindingType transportProtocol soapMep styleDefault </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLTool</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>WsdlBindingDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlComponentDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name soapTransportBinding operations interfaceDescriptor protocol </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>DataSetRow</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name displayString clean typeArray relationMarshaler typeMarshaler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingWizard</package></attributes></class><class><name>Wsdl20BindingDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlBindingDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>faults type httpTransportBinding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>WSSubcanvas</name><environment>WebServices</environment><super>Tools.SequenceableSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WizardSupport</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>CreateSpecification</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>destinationType methodName postURLAspect generateCBAspect classNameAspect fileNameAspect classToSaveMethod specificationAspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingWizard</package></attributes></class><class><name>WsdlConfigurationDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlComponentDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetNamespace imports interfaces bindings services schemaBindings types buildOptions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>Wsdl11ConfigurationDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlConfigurationDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>messages soapEncoding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>WSDialog</name><environment>WebServices</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WizardSupport</package></attributes></class><class><name>RelationMarshaler</name><environment>WebServices</environment><super>WebServices.XMLTypeMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>relation marshaler </inst-vars><class-inst-vars>defaultRefType </class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class><class><name>Wsdl11BuildOptions</name><environment>WebServices</environment><super>WebServices.WsdlBuildOptions</super><private>false</private><indexed-type>none</indexed-type><inst-vars>soapStyle soapUse inputPartName outputPartName </inst-vars><class-inst-vars>soapStyle soapUse inputPartName outputPartName </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WSDLTool</package></attributes></class><class><name>BrowseTypes</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeViewsAspect selectedTypeView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingWizard</package></attributes></class><class><name>SoapWsdl11OperationBinding</name><environment>WebServices</environment><super>WebServices.SoapOperationBinding</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputHeaderBindings inputHeaderMarshaler outputHeaderMarshaler outputHeaderBindings faultMarshalers </inst-vars><class-inst-vars>usePart1InSelector defaultUseOldDocStyleInvocation wrapDocumentLiteralResult </class-inst-vars><imports></imports><category>Web Services-SOAP</category><attributes><package>WSDLBinding</package></attributes></class><class><name>TypeView</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>icon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingWizard</package></attributes></class><class><name>Wsdl20ConfigurationDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlConfigurationDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>WSWizard</name><environment>WebServices</environment><super>Tools.PageSequence</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>WizardSupport</package></attributes></class><class><name>SelectX2OBinding</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bindingListAspect selectionMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingWizard</package></attributes></class><class><name>SetTypesMenu</name><environment>WebServices</environment><super>WebServices.WSSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>simpleTypes proxy typesMenu callback selectedRow datasetAspect tableItemView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingWizard</package></attributes></class><class><name>SoapWsdl20OperationBinding</name><environment>WebServices</environment><super>WebServices.SoapOperationBinding</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outputFaultMarshalers inputFaultMarshalers interfaceDescriptor style rpcSignature </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-SOAP</category><attributes><package>WSDLBinding</package></attributes></class><class><name>WsdlInterfaceOperationDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlComponentDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name input output faults style selector pattern </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>Wsdl20InterfaceOperationDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlInterfaceOperationDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outfaults rpcSignature </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>Wsdl11MessagePartDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlComponentDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name typeName elementName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class><class><name>Wsdl11InterfaceOperationDescriptor</name><environment>WebServices</environment><super>WebServices.WsdlInterfaceOperationDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parameterOrder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-WSDL</category><attributes><package>WSDLDescriptors</package></attributes></class></st-source>