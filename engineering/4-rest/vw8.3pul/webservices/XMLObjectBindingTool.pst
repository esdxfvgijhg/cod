<?xml version="1.0"?><st-source><!-- Name: XMLObjectBindingToolNotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Comment: XMLObjectBindingTool provides support for building Smalltalk classes from an XML to object binding. BindingClassBuilder is using the xmlToSmalltalkBinding elements to generate smalltalk classes. The attribute "smalltalkClass" is used for the smalltalk class name and the aspects are used to generate  instance variables and accessors. For example:schema := '<schema targetNamespace="urn:vwservices/CustomerSchema" elementFormDefault="qualified" xmlns:ns="urn:vwservices/CustomerSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns="http://www.w3.org/2001/XMLSchema">	<element name="AddressType" type="ns:Address"/>	 <complexType name="Address">	  <sequence>	   <element name="street" type="string"/>	   <element name="city" type="string"/>	 </sequence>	</complexType></schema>'.xmlToObjBinding := XMLTypesParser 	useObjectBindingReadFrom: schema readStream	inNamespace: 'Smalltalk'.builder := BindingClassBuilder new.builder  package: 'WSTest'.classes := builder createClassesFromBinding: ( OrderedCollection with: xmlToObjBinding ).DbIdentifier: bear73DbTrace: 493890DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'XMLObjectMarshalers' ''))PackageName: XMLObjectBindingToolParcel: #('XMLObjectBindingTool')PrerequisiteDescriptions: #(#(#name 'XMLObjectMarshalers'))PrerequisiteParcels: #(#('XMLObjectMarshalers' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 2:31:38 PM April 28, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.3) of April 28, 2017 on April 28, 2017 at 2:31:38 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BindingClassBuilder</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes documents buildOptions x2oBindings currentBindingPackage objectElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingTool</package></attributes></class><comment><class-id>WebServices.BindingClassBuilder</class-id><body>BindingClassBuilder creates Smalltalk classes with accessors from XML to object binding.Instance Variables	classes	&lt;OrderedCollection of: Classes&gt; collection of created classes from XML schema complex types	documents	&lt;Collection of: XML.Elements&gt; collection of &lt;xmlToSmalltalkBinding&gt; elements	buildOptions	&lt;X2OClassBuildOption&gt; class build option	x2oBindings	&lt;XMLObjectBinding&gt; 	currentBindingPackage	&lt;String&gt; current binding package to create classes	objectElements	&lt;OrderedCollection&gt; &lt;object&gt; elementsShared Variables	DefaultType	&lt;Symbol&gt; #String</body></comment><class><name>X2OClassBuildOptions</name><environment>WebServices</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>category packageMap </inst-vars><class-inst-vars>defaultCategory defaultPackage </class-inst-vars><imports></imports><category>Web Services-Tools</category><attributes><package>XMLObjectBindingTool</package></attributes></class><comment><class-id>WebServices.X2OClassBuildOptions</class-id><body>X2OClassBuildOptions represents options to build XML to Object binding specification.Instance Variables	category	&lt;String&gt; category	packageMap	&lt;Dictionary&gt; the dictionary is used to create classes from X2O binding in to a specified package. The key is X2O target namespace, the value is a package name.	useExistingClassName	&lt;Boolean&gt; if false creates a new class name based on XML complex type name.Class Instance Variables	defaultCategory	&lt;String&gt; 	defaultPackage	&lt;String&gt; </body></comment><shared-variable><name>DefaultType</name><environment>WebServices.BindingClassBuilder</environment><private>false</private><constant>false</constant><category>defaults</category><initializer></initializer><attributes><package>XMLObjectBindingTool</package></attributes></shared-variable><methods><class-id>WebServices.BindingClassBuilder</class-id> <category>compiling</category><body package="XMLObjectBindingTool">addInstVars: aCollection to: aClass	^self class addInstVars: aCollection to: aClass</body><body package="XMLObjectBindingTool">addMethod: selString to: aClass methodText: methString category: protocolString	^self class 		addMethod: selString 		to: aClass 		methodText: methString 		category: protocolString</body><body package="XMLObjectBindingTool">createClassDefinition: aString	^self createClassDefinition: aString in: buildOptions classNamespace</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString	^self createClassDefinition: aString in: nsString instVars: ''</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString instVars: instVarNames	^self 		createClassDefinition: aString 		in: nsString 		instVars: instVarNames 		classVars: ''</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString instVars: instVarNames classVars: classVarsNames	^self 		createClassDefinition: aString 		in: nsString 		instVars: instVarNames 		classVars: classVarsNames 		super: 'Core.Object'</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString instVars: instVarNames classVars: classVarsNames super: superString		| attributes indexedType seqs max |	indexedType := #none.	objectElements notNil ifTrue:		[attributes := objectElements select: [ :attr | attr value = aString].		attributes size = 1			ifTrue: [ seqs := attributes first parent realElements select: [ :el | el tag type = 'sequence' or: [el tag type = 'choice'  or: [el tag type = 'group' ]]].				(seqs size = 1 					and: [ (max := seqs first valueOfAttribute: 'maxOccurs' ifAbsent: [nil]) notNil 						and: [ max ~= '1' or: [ max ~= '0' ]]])					ifTrue: [ indexedType := #objects]]].	^self class 		createClassDefinition: aString 		in: nsString 		instVars: instVarNames 		classVars: classVarsNames 		super: superString 		indexedType: indexedType 		imports: '' 		category: self category</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString instVars: instVarNames super: superString	^self createClassDefinition: aString in: nsString instVars: instVarNames classVars: '' super: superString.</body><body package="XMLObjectBindingTool">instName: aString	^self class instName: aString</body></methods><methods><class-id>WebServices.BindingClassBuilder</class-id> <category>accessing</category><body package="XMLObjectBindingTool">bindingClasses	^self classes</body><body package="XMLObjectBindingTool">bindingClasses: anObject	self classes: anObject</body><body package="XMLObjectBindingTool">buildOptions	^buildOptions</body><body package="XMLObjectBindingTool">buildOptions: aX2OClassBuildOptions	buildOptions := aX2OClassBuildOptions</body><body package="XMLObjectBindingTool">category	^buildOptions category</body><body package="XMLObjectBindingTool">category: anObject	buildOptions category: anObject</body><body package="XMLObjectBindingTool">classBuildOptions	^X2OClassBuildOptions</body><body package="XMLObjectBindingTool">classes	^classes isNil		ifTrue: [ classes := OrderedCollection new]		ifFalse: [ classes ]</body><body package="XMLObjectBindingTool">classes: anObject	classes := anObject</body><body package="XMLObjectBindingTool">currentBindingPackage	^currentBindingPackage ifNil: [self package ]</body><body package="XMLObjectBindingTool">documents	^documents</body><body package="XMLObjectBindingTool">documents: anObject	documents := anObject</body><body package="XMLObjectBindingTool">methodComment	^(#MethodGeneratedByWSTool &lt;&lt; #webservices &gt;&gt; '"This method was generated by Web Services Tool."') asString.</body><body package="XMLObjectBindingTool">package	^buildOptions package</body><body package="XMLObjectBindingTool">package: aString		buildOptions package: aString</body><body package="XMLObjectBindingTool">packageMap	^buildOptions packageMap</body><body package="XMLObjectBindingTool">packageMap: aDictionary	buildOptions packageMap: aDictionary</body><body package="XMLObjectBindingTool">x2oBindings	^x2oBindings</body><body package="XMLObjectBindingTool">x2oBindings: anXMLObjectBinding	^x2oBindings := anXMLObjectBinding</body><body package="XMLObjectBindingTool">x2oDocuments	| xpath coll elx |	coll := OrderedCollection new.	documents 		do: [ :docx | 			xpath := XPathParser new 				parse: 'descendant-or-self::*[self::xmlToSmalltalkBinding]' as: #locationPath.			elx := docx isDocument 	ifTrue: [docx root] ifFalse: [docx].			coll addAll: (xpath xpathValueFor: elx variables: nil) sortedNodes ].	^coll</body></methods><methods><class-id>WebServices.BindingClassBuilder</class-id> <category>create accessors</category><body package="XMLObjectBindingTool">createAccessors	self bindingClasses do: 	[ :clx | self createAccessorsForClass: clx ]</body><body package="XMLObjectBindingTool">createAccessors: theClass from: anXMLTypeMarshaler 	self 		createClassesInPackage: (Store.Registry  allContainingPackagesForClass: theClass) first name		do: [ self class createAccessors: theClass from: anXMLTypeMarshaler ]</body><body package="XMLObjectBindingTool">createAccessorsForClass: aClass	| anXMLTypeMarshaler coll relations |	(anXMLTypeMarshaler := XMLObjectBinding marshalerForClass: aClass ifAbsent: [nil]) isNil		ifTrue: [ self error: (	(#NoMarshalerFor &lt;&lt; #webservices &gt;&gt; 'No marshaler for: &lt;1s&gt;')					expandMacrosWith: aClass name)]. 	self setSuperForClass: aClass marshaler: anXMLTypeMarshaler.	relations := anXMLTypeMarshaler aspectRelations.	anXMLTypeMarshaler baseType ifNotNil: [ :base | |  baseInstVars |		baseInstVars := base aspectRelations collect: [ :rx | ( self instName: rx instVarName )].		relations := relations reject: [ :rel | baseInstVars includes: ( self instName: rel instVarName )]].	(coll := relations collect: [ :rx | ( self instName: rx instVarName )])  notEmpty ifTrue: [self addInstVars: coll to: aClass].	relations do: [ :marshaler | self createAccessors: aClass from: marshaler ].</body><body package="XMLObjectBindingTool">setSuperForClass: aClass marshaler: anXMLTypeMarshaler	(anXMLTypeMarshaler baseType notNil		and: [ anXMLTypeMarshaler baseType isComplexTypeMarshaler ])			ifTrue: 				[ aClass classBuilder					currentClass: aClass;					superclass:  anXMLTypeMarshaler baseType smalltalkClass;					instanceVariables: aClass instVarNames copy;					format: aClass format;					reviseSystem]</body></methods><methods><class-id>WebServices.BindingClassBuilder</class-id> <category>public api</category><body package="XMLObjectBindingTool">classNamespaceFrom: aElement	| xpath nodes ns |	xpath := XPathParser new 				parse: 'attribute::defaultClassNamespace' as: #locationPath.	ns := (nodes := (xpath xpathValueFor: aElement variables: nil) sortedNodes) notEmpty		ifTrue: [nodes first value]		ifFalse: [ XMLObjectBindingPolicy defaultClassNamespace].	^ns</body><body package="XMLObjectBindingTool">createBindingClasses	| ns |	SystemUtils modifySystem: 	[		self x2oDocuments do: [:elx |  			(objectElements := self selectClassAttributes: elx) notEmpty				ifTrue: [ 	currentBindingPackage := buildOptions packageAt: elx targetNamespace.						ns := self createClassNamespaceFrom: elx.						self 							createBindingClasses: (self checkClassesFor: elx in: ns) 							in: ns]]].	^self bindingClasses</body><body package="XMLObjectBindingTool">createBindingClasses: aColl in: aNamespace	self 		createClassesInPackage: self currentBindingPackage 		do: [ aColl do: [ :nm | self bindingClasses add: (self createClassDefinition: nm in: aNamespace) ]]</body><body package="XMLObjectBindingTool">createClassNamespaceFrom: aElement	| ns |	self 		createClassesInPackage: self currentBindingPackage 		do: [self class 				createNS: (ns := self classNamespaceFrom: aElement) 				inCategory: self category].	^ns</body><body package="XMLObjectBindingTool">createClassesFromBinding: aCollectionOfXMLElements"This method allows to load binding and create Smalltalk classes from xmlToSmalltalk bindings. The expected collection includes xml like this:#(&lt;xmlToSmalltalkBinding ...  &lt;/xmlToSmalltalkBinding&gt;, ..&lt;xmlToSmalltalkBinding ..  &lt;/xmlToSmalltalkBinding&gt;)Returns: Collection of  classes created from XML to Smalltalk Binding"	documents := OrderedCollection new.	aCollectionOfXMLElements do:		[ :elx | 		elx tag type = 'schemaBindings'			ifTrue: [ documents addAll: elx realElements]			ifFalse:  [documents add: elx] ].	self createBindingClasses.	x2oBindings := XMLObjectBinding buildBindings: documents.	self createAccessors.	^self bindingClasses</body><body package="XMLObjectBindingTool">createClassesFromStream: aStream"This method allows to load binding and create Smalltalk classes from xmlToSmalltalk bindings. The expected stream has to be:&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding ...  &lt;/xmlToSmalltalkBinding&gt;	&lt;xmlToSmalltalkBinding ..  &lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;Returns: Collection of  classes created from XML to Smalltalk Binding"	^self createClassesFromBinding: 				((XMLParser on: aStream)					validate: false;					scanDocument) root realElements.</body><body package="XMLObjectBindingTool">setClassNamespaceFrom: aElement to: aString	| xpath nodes |	xpath := XPathParser new 				parse: 'attribute::defaultClassNamespace' as: #locationPath.	(nodes := (xpath xpathValueFor: aElement variables: nil) sortedNodes) notEmpty		ifTrue: [nodes first value: aString ].</body><body package="XMLObjectBindingTool">targetNamespaceFrom: aElement	| xpath nodes  |	xpath := XPathParser new 				parse: 'attribute::targetNamespace' as: #locationPath.	^(nodes := (xpath xpathValueFor: aElement variables: nil) sortedNodes) notEmpty		ifTrue: [nodes first value]		ifFalse: [ String new].</body></methods><methods><class-id>WebServices.BindingClassBuilder</class-id> <category>private</category><body package="XMLObjectBindingTool">checkClassesFor: aBinding in: namespace 	| newList res stream struct |	struct := self classesFor: aBinding in: namespace.	(struct asQualifiedRef size = struct asStrictRef size) ifTrue: [^struct asQualifiedRef].		stream := String new writeStream.	struct difference do: [:clx | stream nextPutAll: clx fullName , ' '].	res := WSDuplicateBindingsError raiseRequestWith: struct				errorString: (#DuplicateBindingsFoundFor1sFrom2s &lt;&lt; #webservices 						&gt;&gt; 'Duplicate bindings have been found for "&lt;1s&gt;" from &lt;2s&gt;. The classes won''t be created if the exception proceeds. New classes will be created in &lt;2s&gt; if the exception resumes with #createAll parameter' 							expandMacrosWith: stream contents with: namespace).	(newList :=struct at: #createClassesList ifAbsent: [nil]) isNil		ifTrue: 			[newList := res isNil 				ifTrue: [struct asQualifiedRef] 				ifFalse: [struct asStrictRef]].	^newList</body><body package="XMLObjectBindingTool">classesFor: aBinding in: namespace 	| diff struct classNames |	struct := Struct new.	classNames := 	objectElements collect: [ :attr |  attr value ].	struct at: #asQualifiedRef put: (self selectNewAsQualifiedRefFrom: classNames in: namespace).	struct at: #asStrictRef put: (self selectNewAsStrictRefFrom: classNames in: namespace).	diff := OrderedCollection new. 	struct asStrictRef 		do: [:clName | 			(struct asQualifiedRef includes: clName) 	ifFalse: [diff add: clName asQualifiedReference value]].	struct at: #difference put: diff.	^struct</body><body package="XMLObjectBindingTool">complexTypesClassesFrom: aBinding	| struct xpath collection smAttr |	collection := OrderedCollection new.	xpath := XPathParser new parse: 'descendant-or-self::object' as: #locationPath.	(xpath xpathValueFor: aBinding variables: nil) sortedNodes do: [ :elx |		collection add: (struct := Struct new).		struct at: #complexTypeName put: (elx attributeNamed: 'name' ifAbsent: [nil]) value.		struct at: #smalltalkClassAttribute put: (smAttr := elx attributeNamed: 'smalltalkClass' ifAbsent: [nil]).		struct at: #smalltalkClassName put: smAttr value.].	^collection</body><body package="XMLObjectBindingTool">createClassesInPackage: storePackage do: aBlock	| curPackage pkg |	^[(storePackage notNil and: [ #{Store.Policies} isDefined ])		ifTrue: 			[curPackage := Store.Registry currentPackage. 			pkg := Store.Registry packageNamedOrCreate: storePackage.			Store.Registry currentPackage: pkg. ].	  	aBlock value	]		ensure: 				[curPackage notNil ifTrue: [ Store.Registry currentPackage: curPackage]]</body><body package="XMLObjectBindingTool">createClassesInPackageDo: aBlock	^self createClassesInPackage: self currentBindingPackage do: aBlock</body></methods><methods><class-id>WebServices.BindingClassBuilder</class-id> <category>enumerating</category><body package="XMLObjectBindingTool">selectAllClassNames: anElement	^(self selectClassAttributes: anElement) collect: [ :attr |  attr value ].</body><body package="XMLObjectBindingTool">selectClassAttributes: anElement	^((XPathParser new parse: 'descendant-or-self::object/@smalltalkClass' as: #locationPath)		xpathValueFor: anElement  variables: nil) 			sortedNodes</body><body package="XMLObjectBindingTool">selectNewAsQualifiedRefFrom: classNames in: aNamespace 	| cl coll |	coll := OrderedCollection new.	classNames 		do: [:name | 			cl := (name tokensBasedOn: $. ) size = 1				ifTrue: [ aNamespace , '.' , name ]				ifFalse: [name ].			(cl asQualifiedReference valueOrDo: [nil]) isNil ifTrue: [ coll add: name ]].	^coll</body><body package="XMLObjectBindingTool">selectNewAsStrictRefFrom: classNames in: aNamespace 	| cl coll |	coll := OrderedCollection new.	classNames		do: [:name | 			cl := (name tokensBasedOn: $. ) size = 1				ifTrue: [ aNamespace , '.' , name ]				ifFalse: [name ].			(cl asStrictReference valueOrDo: [nil]) isNil				ifTrue: [coll add: name]].	^coll</body></methods><methods><class-id>WebServices.BindingClassBuilder</class-id> <category>initialize-release</category><body package="XMLObjectBindingTool">initialize		buildOptions := self classBuildOptions new.</body></methods><methods><class-id>WebServices.BindingClassBuilder class</class-id> <category>defaults</category><body package="XMLObjectBindingTool">defaultClassNamespace	^XMLObjectBindingPolicy defaultClassNamespace</body><body package="XMLObjectBindingTool">defaultClassNamespace: aString	XMLObjectBindingPolicy defaultClassNamespace: aString</body><body package="XMLObjectBindingTool">defaultType	^DefaultType</body><body package="XMLObjectBindingTool">defaultType: aString	DefaultType := aString</body><body package="XMLObjectBindingTool">useExistingClassName	" self useExistingClassName "	^XMLObjectBindingPolicy useExistingClassName</body><body package="XMLObjectBindingTool">useExistingClassName: aBoolean	XMLObjectBindingPolicy useExistingClassName: aBoolean</body></methods><methods><class-id>WebServices.BindingClassBuilder class</class-id> <category>compiling</category><body package="XMLObjectBindingTool">addInstVars: aCollection to: aClass	aClass addInstVarNames: aCollection</body><body package="XMLObjectBindingTool">addMethod: selString to: aClass methodText: methString 	self addMethod: selString to: aClass methodText: methString category: X2OClassBuildOptions defaultCategory</body><body package="XMLObjectBindingTool">addMethod: selString to: aClass methodText: methString category: protocolString	| stream |	stream  := (String new: 128) writeStream.	stream 		nextPut: selString first asLowercase; 		nextPutAll: (selString copyFrom: 2 to: selString size);		cr; tab;		nextPutAll: methString.	aClass compile: stream contents classified: protocolString.</body><body package="XMLObjectBindingTool">createAccessors: theClass from: anXMLTypeMarshaler 	| instvarname |	(instvarname := anXMLTypeMarshaler instVarName) == nil ifTrue: [^nil].	instvarname := self instName: instvarname.	self 		buildSetSelector: anXMLTypeMarshaler relation setSelector 		class: theClass 		instVar: instvarname		param: anXMLTypeMarshaler selectorType.	self 		buildGetSelector: anXMLTypeMarshaler relation getSelector 		class: theClass 		instVar: instvarname</body><body package="XMLObjectBindingTool">createClassDefinition: aString	^self 		createClassDefinition: aString 		in: XMLObjectBindingPolicy defaultClassNamespace		instVars: '' 		classVars: '' 		super:  'Core.Object'		category: X2OClassBuildOptions defaultCategory</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString instVars: instVarNames classVars: classVarsNames super: superString category: cString		^self 		createClassDefinition: aString 		in: nsString 		instVars: instVarNames 		classVars: classVarsNames 		super: superString 		imports: '' 		category: cString</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString instVars: instVarNames classVars: classVarsNames super: superString imports: impString category: cString		^self createClassDefinition: aString 		in: nsString 		instVars: instVarNames 		classVars: classVarsNames 		super: superString 		indexedType: #none 		imports: impString 		category: cString</body><body package="XMLObjectBindingTool">createClassDefinition: aString in: nsString instVars: instVarNames classVars: classVarsNames super: superString indexedType: indexedTypeSymbol imports: impString category: cString	| ns namex tokens clName namespace |	IncrementNotification raiseSignal.	tokens := aString tokensBasedOn: $..	clName := tokens last.	tokens size &gt; 1		ifTrue: [ ns := aString copyFrom: 1 to: ( aString size - clName size - 1) ]		ifFalse: [ ns := nsString].	namespace := self createNS: nsString inCategory: cString.			namex := self createSmalltalkClassNameFrom: tokens last inNamespace: ns.	^namespace defineClass: namex asSymbol			superclass: superString asQualifiedReference			indexedType: indexedTypeSymbol			private: false			instanceVariableNames: instVarNames 			classInstanceVariableNames: classVarsNames 			imports: impString			category: cString.</body><body package="XMLObjectBindingTool">createNS: nameSpaceName inCategory: categoryString 	" (self createNS: 'WebServices' inCategory: 'WebServices') "	" (self createNS: 'WebServices.Test' inCategory: 'WebServices') "	"Create a Name Space named aString.  If a Name Space named aString already exists, then	simply return that Name Space "	^nameSpaceName asQualifiedReference 		ifDefinedDo: [ :value | self checkNamespace: value] 		elseDo: [self privateCreateNameSpaceNamed: nameSpaceName category: categoryString]</body></methods><methods><class-id>WebServices.BindingClassBuilder class</class-id> <category>instance creation</category><body package="XMLObjectBindingTool">createClassesFromBinding: aCollectionOfXMLElements"This method allows to load binding and create Smalltalk classes from xmlToSmalltalk bindings. The expected collection includes xml like this:#(&lt;xmlToSmalltalkBinding ...  &lt;/xmlToSmalltalkBinding&gt;, ..&lt;xmlToSmalltalkBinding ..  &lt;/xmlToSmalltalkBinding&gt;)Returns: Collection of  classes created from XML to Smalltalk Binding"	^self new createClassesFromBinding: aCollectionOfXMLElements</body><body package="XMLObjectBindingTool">createClassesFromStream: aStream"This method allows to load binding and create Smalltalk classes from xmlToSmalltalk bindings. The expected stream includes xml like this:&lt;schemaBindings&gt;	&lt;xmlToSmalltalkBinding ...  &lt;/xmlToSmalltalkBinding&gt;	&lt;xmlToSmalltalkBinding ..  &lt;/xmlToSmalltalkBinding&gt;&lt;/schemaBindings&gt;Returns: Collection of  classes created from XML to Smalltalk Binding"	^self new createClassesFromStream: aStream</body><body package="XMLObjectBindingTool">new	^self basicNew initialize</body></methods><methods><class-id>WebServices.BindingClassBuilder class</class-id> <category>utilities</category><body package="XMLObjectBindingTool">createSmalltalkClassNameFrom: aString inNamespace: nsString	^XMLObjectBindingPolicy createSmalltalkClassNameFrom: aString inNamespace: nsString</body></methods><methods><class-id>WebServices.BindingClassBuilder class</class-id> <category>private-compiling</category><body package="XMLObjectBindingTool">buildGetSelector: aSymbol class: aClass instVar: instVarString 	| stream |	(instVarString isNil or: [instVarString isEmpty]) ifTrue: [ ^nil].	^aClass methodDictionary 		at: aSymbol 		ifAbsent: [stream := String new writeStream.				stream nextPutAll: aSymbol asString; crtab.				(aClass instVarNames includes: instVarString) ifTrue: [ stream nextPutAll: '^', instVarString].				aClass compile: stream contents classified: 'accessing'.				aClass compiledMethodAt: aSymbol ]</body><body package="XMLObjectBindingTool">buildSetSelector: aSymbol class: aClass instVar: instVarString param: paramString 	^aClass methodDictionary 		at: aSymbol 		ifAbsent: 			[| stream token |			stream := String new writeStream.			token := (paramString tokensBasedOn: $.) last.			stream nextPutAll: aSymbol asString , ' ' , token;	cr.			(instVarString notEmpty and: [aClass instVarNames includes: instVarString])				 ifTrue: [ stream 	tab; nextPutAll: instVarString , ' := ' , token].			aClass compile: stream contents classified: 'accessing'.			aClass compiledMethodAt: aSymbol.].</body><body package="XMLObjectBindingTool">checkNamespace: aNamespace	^aNamespace isNameSpace 		ifTrue: [aNamespace]		ifFalse: 			[self error: ((#NameAlreadyExist &lt;&lt; #webservices &gt;&gt; '&lt;1s&gt; already exists and is not a NameSpace')						expandMacrosWith: aNamespace)]</body><body package="XMLObjectBindingTool">instName: aString	| stream |	stream := (String new: 32) writeStream.	stream 		nextPut: aString first asLowercase; 		nextPutAll: (aString copyFrom: 2 to: aString size).	^stream contents</body><body package="XMLObjectBindingTool">privateCreateNameSpaceNamed: nameSpaceName category: categoryString 	"Create and return a Name Space named nameSpaceName and organize it in categoryString.	 This method has a side-effect of creating any parent Name Spaces it might need.  For example,	 if nameSpaceName is 'Foo.Bar', it will create the Name Space Foo if it does not exist, before 	 trying to create the Bar Name Space."	| nameSpace reference |	nameSpace := Smalltalk.	(GeneralBindingReference parseString: nameSpaceName) do: 			[:token | 			reference := token asQualifiedReference.			nameSpace := reference 						ifDefinedDo: [:value | self checkNamespace: value] 						elseDo: 							[nameSpace 								defineNameSpace: token								private: false								imports: 'private Smalltalk.*'								category: categoryString]].	^nameSpace</body></methods><methods><class-id>WebServices.X2OClassBuildOptions</class-id> <category>accessing</category><body package="XMLObjectBindingTool">category	category isNil		ifTrue: [ category := self class defaultCategory].	^category</body><body package="XMLObjectBindingTool">category: anObject	category := anObject</body><body package="XMLObjectBindingTool">package		^self packageMap at: '*' ifAbsent: [self class defaultPackage].</body><body package="XMLObjectBindingTool">package: aString	self packageMap at: '*' put: aString</body><body package="XMLObjectBindingTool">packageAt: aString	^aString		ifNil: [self package]		ifNotNil: [self packageMap at: aString ifAbsent: [self package ]]</body><body package="XMLObjectBindingTool">packageMap	^packageMap ifNil: [packageMap := Dictionary new]</body><body package="XMLObjectBindingTool">packageMap: aDictionary	packageMap := aDictionary</body></methods><methods><class-id>WebServices.X2OClassBuildOptions</class-id> <category>testing</category><body package="XMLObjectBindingTool">hasDefaultPackage		^self package = self class defaultPackageValue</body></methods><methods><class-id>WebServices.X2OClassBuildOptions class</class-id> <category>defaults</category><body package="XMLObjectBindingTool">defaultCategory	^defaultCategory isNil		ifTrue: [defaultCategory := self defaultCategoryValue]		ifFalse: [defaultCategory]</body><body package="XMLObjectBindingTool">defaultCategory: aString	defaultCategory := aString</body><body package="XMLObjectBindingTool">defaultPackage	^defaultPackage isNil		ifTrue: [defaultPackage := self defaultPackageValue]		ifFalse: [defaultPackage]</body><body package="XMLObjectBindingTool">defaultPackage: aString	defaultPackage := aString</body></methods><methods><class-id>WebServices.X2OClassBuildOptions class</class-id> <category>default values</category><body package="XMLObjectBindingTool">defaultCategoryValue	^'Web Services'</body><body package="XMLObjectBindingTool">defaultPackageValue	^'WSBindingPackage'</body></methods><methods><class-id>WebServices.CollectionObjectMarshaler</class-id> <category>tool</category><body package="XMLObjectBindingTool">selectorType	^'aCollectionOf', (self elementMarshaler smalltalkClassName tokensBasedOn: $. ) last</body></methods><methods><class-id>WebServices.RelationMarshaler</class-id> <category>accessing</category><body package="XMLObjectBindingTool">instVarName	^self relation name</body></methods><methods><class-id>WebServices.RelationMarshaler</class-id> <category>tool</category><body package="XMLObjectBindingTool">selectorType	^self relation isManyRelation		ifTrue: [ 'an', self relation collectionClass name, 'Of', self typeMarshaler selectorType]		ifFalse: [ self typeMarshaler selectorType ]</body><body package="XMLObjectBindingTool">spawnWith: aBindingBuilder		| copy |	copy := super spawnWith: aBindingBuilder.	copy typeMarshaler spawnWith: aBindingBuilder.	^copy</body></methods><methods><class-id>WebServices.ChoiceMarshaler</class-id> <category>tool</category><body package="XMLObjectBindingTool">selectorType	^self relation isManyRelation 		ifTrue: [self class useStructAsChoiceValue ifTrue: [  'aCollectionOfStructs' ] ifFalse: [ 'aCollectionOfAssociations' ]]		ifFalse: [self class useStructAsChoiceValue ifTrue: [ 'aStruct' ] ifFalse: [ 'anAssociation' ]]</body></methods><methods><class-id>Core.Class</class-id> <category>instance variables</category><body package="XMLObjectBindingTool">addInstVarNames: aCollection	"Add collection of  arguments as the receiver's instance variables."	self classBuilder		currentClass: self;		superclass: superclass;		instanceVariables: aCollection asArray;		format: self format;		reviseSystem</body></methods><methods><class-id>WebServices.CompositorMarshaler</class-id> <category>accessing</category><body package="XMLObjectBindingTool">instVarName	^self relation name</body></methods><methods><class-id>WebServices.AnyRelationMarshaler</class-id> <category>tool</category><body package="XMLObjectBindingTool">selectorType	^'anObject'</body></methods><methods><class-id>WebServices.SequentialMarshaler</class-id> <category>tool</category><body package="XMLObjectBindingTool">selectorType	^'aStruct'</body></methods><methods><class-id>WebServices.XMLTypeMarshaler</class-id> <category>tool</category><body package="XMLObjectBindingTool">selectorType	^'a', (self smalltalkClassName tokensBasedOn: $.) last</body><body package="XMLObjectBindingTool">spawnWith: aBindingBuilder	^self copy		tag: (NodeTag qualifier: self tag qualifier ns: aBindingBuilder targetNamespace type: self tag type);		name: (NodeTag qualifier: self name qualifier ns: aBindingBuilder targetNamespace type: self name type);		yourself.</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="XMLObjectBindingTool">webServicesClassBuilderPage	&lt;settingsPage: #(webservices classBuilder)&gt;	^ModularSettingsPage new		label: #WebServicesClassBuilder &lt;&lt; #webservices &gt;&gt; 'Class Builder';		icon: (ListIconLibrary visualFor: #web);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(webservices classBuilder));		yourself</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-ws-classbuilder</category><body package="XMLObjectBindingTool">ws1DefaultBindingPackage	&lt;setting: #(webservices classBuilder defaultBindingPackage ) position: 20&gt;	^(StringSetting on: WebServices.X2OClassBuildOptions aspect: #defaultPackage)		label: #DefaultBindingPackage &lt;&lt; #webservices &gt;&gt; 'Default binding package';		default: WebServices.X2OClassBuildOptions defaultPackageValue;		helpText: #DefaultBindingPackageHelpText &lt;&lt; #webservices &gt;&gt; 'The package in which all classes that are generated from a X2O specification are placed, by default. If the package name does not exist in the system, it will be created. ';		yourself</body><body package="XMLObjectBindingTool">ws3DefaultCategory	&lt;setting: #(webservices classBuilder defaultCategory) position: 60&gt;	^(StringSetting on: WebServices.X2OClassBuildOptions aspect: #defaultCategory )		label: #defaultCategory &lt;&lt; #webservices &gt;&gt; 'Default category';		default: WebServices.X2OClassBuildOptions defaultCategoryValue;		helpText: #defaultCategoryHelpText &lt;&lt; #webservices &gt;&gt; 'The category in which all classes that are generated from a WSDL schema are placed, by default.';		yourself</body><body package="XMLObjectBindingTool">wsdl1DefaultClassNamespace	&lt;setting: #(webservices classBuilder defaultClassNamespace ) position: 40&gt;	^(StringSetting on: WebServices.XMLObjectBindingPolicy aspect: #defaultClassNamespace )		label: #DefaultClassNamespace &lt;&lt; #webservices &gt;&gt; 'Default class namespace';		default: WebServices.XMLObjectBindingPolicy defaultClassNamespaceValue;		helpText: #Default1ClassNamespaceHelpText &lt;&lt; #webservices &gt;&gt; 'The name space in which all classes that are generated from a WSDL schema are placed, by default. While generating a Wsdl schema the types are resolved in this name space ';		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>XMLTypeMarshaler</name><environment>WebServices</environment><super>WebServices.XMLMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xpath keyRefMarshaler qualified binding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class><class><name>RelationMarshaler</name><environment>WebServices</environment><super>WebServices.XMLTypeMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>relation marshaler </inst-vars><class-inst-vars>defaultRefType </class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class><class><name>AnyRelationMarshaler</name><environment>WebServices</environment><super>WebServices.RelationMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>namespaces processContents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class><class><name>CompositorMarshaler</name><environment>WebServices</environment><super>WebServices.XMLTypeMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>relation marshalers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class><class><name>SequentialMarshaler</name><environment>WebServices</environment><super>WebServices.CompositorMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aspectImplementation inheritedIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class><class><name>CollectionObjectMarshaler</name><environment>WebServices</environment><super>WebServices.ObjectMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elementMarshaler </inst-vars><class-inst-vars>defaultSmalltalkClass </class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>ChoiceMarshaler</name><environment>WebServices</environment><super>WebServices.SequentialMarshaler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>useStructAsChoiceValue </class-inst-vars><imports></imports><category>XML-To-Object</category><attributes><package>XMLObjectMarshalers</package></attributes></class></st-source>