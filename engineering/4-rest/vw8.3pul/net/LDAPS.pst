<?xml version="1.0"?><st-source><!-- Name: LDAPSNotice: Copyright 2016 Cincom Systems, Inc.  All rights reserved.Comment: The package implements LDAP over TLS secure extensions from specificationhttps://tools.ietf.org/html/rfc4513 Where a client intends to perform both a Bind operation and a StartTLS operation, it SHOULD first perform the StartTLS operation so that the Bind request and response messages are protected by the data security services established by the StartTLS operation.The goals of using the TLS protocol with LDAP are to ensure data confidentiality and integrity, and to optionally provide for authentication. Though technically the server may use any identity information established at any lower level, typically the server will use the identity information established by TLS.Servers also often support the non-standard "LDAPS" ("Secure LDAP", commonly known as "LDAP over SSL") protocol on a separate port, by default 636. LDAPS differs from LDAP in two ways: 1) upon connect, the client and server establish TLS before any LDAP messages are transferred (without a StartTLS operation) and 2) the LDAPS connection must be closed upon TLS closure.It should be noted that some "LDAPS" client libraries only encrypt communication; they do not check the host name against the name in the supplied certificateUsage:1. using startTLS  port: 389	connection := LDAPSConnection new				tlsSubjectVerifier: [:cert :conn | true];				yourself.	"Establish regular connection"	connection connectToHost: 'localhost' port: 389.	[	"Apply TLS layer"			connection performStartTLS.	] on: Xtreams.TLSCertificateWarning do: [ :ex | ex resume. nil ].	"Authenticate"	connection authenticateAs: 'dc=mydc' password: 'mypassword' constraints: connection defaultConstraints.or:		connection := LDAPSConnection new				tlsSubjectVerifier: [:cert :conn | true];				yourself.	"Establish regular connection"	connection connectToHost: 'localhost' port: 389.	[	"Apply TLS layer and authenticate"		connection authenticateAs: 'dc=mydc' password: 'mypassword' constraints: connection defaultConstraints.	] on: Xtreams.TLSCertificateWarning do: [ :ex | ex resume. nil ].2. LDAPS (LDAP over TLS  port: 636)	connection := LDAPSConnection new				tlsSubjectVerifier: [:cert :conn | true];				useLDAPS: true; <-  the option tells to establish TLS connection right after connecting to the server				yourself.	[connection connectToHost: 'localhost'			port: 636 			dn:  'dc=mydc'			password: 'mypassword'.		] on: Xtreams.TLSCertificateWarning do: [ :ex | ex resume. nil ].DbIdentifier: bear73DbTrace: 493292DbUsername: tkoganDbVersion: 8.3 - 0DevelopmentPrerequisites: #(#(#any 'TLS' '') #(#any 'LDAP' '') #(#any 'TLS-Classic' ''))PackageName: LDAPSParcel: #('LDAPS')ParcelName: LDAPSPrerequisiteDescriptions: #(#(#name 'TLS' #componentType #package) #(#name 'LDAP' #componentType #package) #(#name 'TLS-Classic' #componentType #package))PrerequisiteParcels: #(#('TLS' '') #('LDAP' '') #('TLS-Classic' ''))PrintStringCache: (8.3 - 0,tkogan)Version: 8.3 - 0Date: 2:30:32 PM April 28, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (apr17.3) of April 28, 2017 on April 28, 2017 at 2:30:32 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>LDAPSConnThread</name><environment>Net</environment><super>Net.LDAPConnThread</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tlsConnection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LDAP</category><attributes><package>LDAPS</package></attributes></class><comment><class-id>Net.LDAPSConnThread</class-id><body>The class opens TLS connectionInstance Variables:	tlsConnection	&lt;TLSConnection&gt;	 tlsConnection</body></comment><class><name>LDAPSConnection</name><environment>Net</environment><super>Net.LDAPConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tlsContext tlsSubjectVerifier useLDAPS </inst-vars><class-inst-vars>tlsContext tlsSubjectVerifier useLDAPS </class-inst-vars><imports></imports><category>LDAP</category><attributes><package>LDAPS</package></attributes></class><comment><class-id>Net.LDAPSConnection</class-id><body>Implements StartTLS operation and allow using LDAP over TLS. By default the implementation will use StartTLS operation to establish secure connectionInstance Variables:	tlsContext	&lt;TLSContext&gt;	 TLS connection configuration	tlsSubjectVerifier	&lt;BlockClosure&gt; certificate validation block	useLDAPS		&lt;Boolean&gt; the option defines if the LDAP over TLS should start on 636Class Instance Variables:	tlsContext	&lt;TLSContext&gt;	 default TLS connection configuration	tlsSubjectVerifier	&lt;BlockClosure&gt; default certificate validation block	useLDAPS	&lt;Boolean&gt;	the default option defines if the LDAPS should start on 636. The default value is false. Usage:See the package comments</body></comment><methods><class-id>Net.LDAPSConnThread</class-id> <category>initialize-release</category><body package="LDAPS">cleanUp	super cleanUp.	tlsConnection ifNotNil: [tlsConnection close]</body><body package="LDAPS">newForHost: hostString port: portInteger tlsContext: aTLSContext subjectVerifier: aTLSSubjectVerifier	"Constructs a connection thread that maintains its connection to the LDAP server."	self connectTo: hostString port: portInteger.	self tlsConnect: aTLSContext subjectVerifier: aTLSSubjectVerifier host: hostString port: portInteger.	self startProcess</body></methods><methods><class-id>Net.LDAPSConnThread</class-id> <category>accessing</category><body package="LDAPS">tlsConnection	^tlsConnection</body></methods><methods><class-id>Net.LDAPSConnThread</class-id> <category>private</category><body package="LDAPS">tlsConnect: aTLSContext subjectVerifier: aTLSSubjectVerifier host: hostName port: port" Implementations supporting TLS MUST support the TLS_RSA_WITH_3DES_EDE_CBC_SHA ciphersuite and SHOULD support the   TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA ciphersuite."	tlsConnection := aTLSContext newConnection: socket.	tlsConnection sessionKey: ('&lt;1s&gt;:&lt;2p&gt;' expandMacrosWith: hostName with: port).	[	tlsConnection connect: [ :cert | aTLSSubjectVerifier cull: cert cull: self ].	] ifCurtailed: [ 		tlsConnection close. 		(LDAPException newForResultCode: 80) raiseSignal: 'StartTLS operation failed to establish connection'].	mServerStream := ( tlsConnection withEncoding: #default ) readAppendStream						lineEndConvention: LineEndTransparent;						binary.</body></methods><methods><class-id>Net.LDAPSConnThread</class-id> <category>startTLS connection</category><body package="LDAPS">startTLSWith: aTLSContext subjectVerifier: aTLSSubjectVerifier host: hostName port: port	tlsConnection ifNotNil: [ "TLS already started" ^nil ].	mDisconnected ifTrue: [mDisconnected := false].	self stopProcess.	self tlsConnect: aTLSContext subjectVerifier: aTLSSubjectVerifier host: hostName port: port.	self startProcess</body></methods><methods><class-id>Net.LDAPSConnection</class-id> <category>accessing</category><body package="LDAPS">tlsContext	^tlsContext ifNil: [ tlsContext := self class tlsContext]</body><body package="LDAPS">tlsContext: aTLSContext	tlsContext := aTLSContext</body><body package="LDAPS">tlsSubjectVerifier	^tlsSubjectVerifier ifNil: [tlsSubjectVerifier := self class tlsSubjectVerifier]</body><body package="LDAPS">tlsSubjectVerifier: aBlock	tlsSubjectVerifier := aBlock</body><body package="LDAPS">useLDAPS	^useLDAPS ifNil: [useLDAPS := self class useLDAPS]</body><body package="LDAPS">useLDAPS: aBoolean	useLDAPS := aBoolean</body></methods><methods><class-id>Net.LDAPSConnection</class-id> <category>startTSL operation</category><body package="LDAPS">performStartTLS"https://tools.ietf.org/html/rfc4511#section-4.14A client requests TLS establishment by transmitting a StartTLS request message to the server.  The StartTLS request is defined in terms of an ExtendedRequest. The requestName is 1.3.6.1.4.1.1466.20037, and the requestValue field is always absent."	| myListener  |	connThread ifNil: [(LDAPException newForResultCode: 80) raiseSignal: 'The connection is not available'].			myListener := self getResponseListener.	self 		sendRequest: (JDAPExtendedRequest new oid: '1.3.6.1.4.1.1466.20037'; yourself)		notify: myListener		constraints: defaultConstraints.	"https://tools.ietf.org/html/rfc4511#section-4.14.2"	self checkMsg: myListener getResponse.	bound := false.	"If the server is willing and able to negotiate TLS, it returns the StartTLS response with the resultCode set to success.  Upon client receipt of a successful StartTLS response, protocol peers may commence with TLS negotiation"	connThread 		startTLSWith: self tlsContext 		subjectVerifier: self tlsSubjectVerifier		host: self host 		port: self port</body></methods><methods><class-id>Net.LDAPSConnection</class-id> <category>private</category><body package="LDAPS">bindWithConstraints: cons	(connThread isNil 		or: [ connThread notNil and: [connThread tlsConnection isNil]])		ifTrue: [self performStartTLS].	super bindWithConstraints: cons</body><body package="LDAPS">newThreadConnectTo: aHost port: aPort 	^self useLDAPS		ifTrue: [ LDAPSConnThread new					newForHost: aHost port: aPort tlsContext: self tlsContext subjectVerifier: self tlsSubjectVerifier;					yourself ]		ifFalse: [LDAPSConnThread newForHost: aHost port: aPort ]</body><body package="LDAPS">processConnectionError: anError		(anError isKindOf: Xtreams.TLSProtocolWarning) ifTrue: [^anError pass].	super processConnectionError: anError</body><body package="LDAPS">startConnectionRebinding: rebindBoolean	super startConnectionRebinding: rebindBoolean.		"The secure connection has to have TLS layer"	connThread tlsConnection ifNil: [ self performStartTLS ].</body></methods><methods><class-id>Net.LDAPSConnection class</class-id> <category>accessing</category><body package="LDAPS">tlsContext	^tlsContext ifNil: [tlsContext := self defaultTLSContext]</body><body package="LDAPS">tlsContext: anObject	tlsContext := anObject</body><body package="LDAPS">tlsSubjectVerifier	^tlsSubjectVerifier</body><body package="LDAPS">tlsSubjectVerifier: aBlock"aBlock is two-arguments block for server's identity verification. The block must return a boolean.The server's identity may also be verified by comparing the reference identity to the Common Name (CN) [RFC4519] value in the leaf Relative Distinguished Name (RDN) of the subjectName field of the server's certificate.[ :cert :conn | commonName := cert subject commonName. true ]https://tools.ietf.org/html/rfc4513#section-3.1.3.1"	tlsSubjectVerifier := aBlock</body><body package="LDAPS">useLDAPS	^useLDAPS ifNil: [ useLDAPS := self useLDAPSDefault ]</body><body package="LDAPS">useLDAPS: aBoolean	useLDAPS := aBoolean</body><body package="LDAPS">useLDAPSDefault	^false</body></methods><methods><class-id>Net.LDAPSConnection class</class-id> <category>defaults</category><body package="LDAPS">defaultTLSContext	^Xtreams.TLSContext newClientWithDefaults</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>LDAPConnection</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>defaultConstraints responseListeners searchListeners bound host mHostList port mPortList mDefaultPort prevBoundDN prevBoundPasswd boundDN boundPasswd protocolVersion connThread mAttachedList mResponseControlTable mAnonymousBound saslBind mReferralConnection lock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>LDAP</category><attributes><package>LDAP</package></attributes></class><class><name>LDAPConnThread</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mHighMsgId mServerStream mRequests mMessages mRegistered mDisconnected mSecurityLayer mMaxBacklog lock backlogSemaphore socket process </inst-vars><class-inst-vars>defaultTimeout </class-inst-vars><imports></imports><category>LDAP</category><attributes><package>LDAP</package></attributes></class></st-source>