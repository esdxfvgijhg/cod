<?xml version="1.0"?><st-source><!-- Name: GlorpAtlasSystemsInVWNotice: Copyright 2013-2015 Cincom Systems, Inc.  All rights reserved.Comment: Use this utility in VisualWorks only, not ObjectStudio.If a Glorp model has been prepared in ObjectStudio's Modelling and Mapping tools and saved to a parcel or package, load this utility to enable loading that component into a VisualWorks image.See the comment of the Atlas namespace for why its definition in VisualWorks differs very slightly from its definition in ObjectStudio.DbIdentifier: bear73DbTrace: 462261DbUsername: nrossDbVersion: 8.1 - 1DevelopmentPrerequisites: #(#(#any 'GlorpActiveRecord' ''))PackageName: GlorpAtlasSystemsInVWParcel: #('GlorpAtlasSystemsInVW')ParcelName: GlorpAtlasSystemsInVWPrerequisiteDescriptions: #(#(#name 'GlorpActiveRecord' #componentType #package))PrerequisiteParcels: #(#('GlorpActiveRecord' ''))PrintStringCache: (8.1 - 1,nross)Version: 8.1 - 1Date: 12:56:07 PM February 5, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (feb16.1) of February 5, 2016 on February 5, 2016 at 12:56:07 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>ObjectStudio</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private Smalltalk.ObjectStudio.*			private Smalltalk.Glorp.*			</imports><category>ObjectStudio Base</category><attributes><package>GlorpAtlasSystemsInVW</package></attributes></name-space><comment><name-space-id>ObjectStudio</name-space-id><body>This partial clone of the ObjectStudio root namespace supports loading Glorp models prepared in ObjectStudio into VisualWorks images.</body></comment><name-space><name>Atlas</name><environment>ObjectStudio</environment><private>false</private><imports>			private Smalltalk.*			private Smalltalk.ObjectStudio.*			private Smalltalk.Glorp.*			</imports><category></category><attributes><package>GlorpAtlasSystemsInVW</package></attributes></name-space><comment><name-space-id>ObjectStudio.Atlas</name-space-id><body>This clone of the Atlas namespace allows Glorp models prepared in ObjectStudio's Modelling and Mapping tools to be loaded into VisualWorks images.It differs from ObjectStudio only in the very minor detail that some classes defined in it in ObjectStudio packages are defined in Glorp in VisualWorks packages GlorpAtlasSystemGeneration and GlorpAtlasClassGeneration.  (These classes are ForeignKeyConstraintHelper, WriteAtlasHelper, ClassBuilderHelper, ClassModelHelper, ClassModelVariableHelper, GlorpMetaProcess and MappingHelper with all its subclasses: DirectMappingHelper, RelationshipMappingHelper, OneToOneMappingHelper ToManyMappingHelper.)  These classes remain visible in Atlas in VisualWorks because Atlas imports Glorp but, because it imports Glorp privately, they are no longer visible in any namespace that imports Atlas, unlike the case for ObjectStudio's Atlas.  In the very unlikely event that this matters when loading an ObjecStudio-developed model into VisualWorks, redefine this namespace to import the needed class(es) specifically.</body></comment><class><name>AtlasDescriptorSystem</name><environment>ObjectStudio.Atlas</environment><super>Glorp.DescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpAtlasSystemsInVW</package></attributes></class><comment><class-id>ObjectStudio.Atlas.AtlasDescriptorSystem</class-id><body>I am the superclass of descriptor system classes generated by ObjectStudio's mapping tool, when those descriptor systems are for general database schemas, not ones that fit the ActiveRecord pattern.</body></comment><class><name>MoreInspectableMessageArchiver</name><environment>Glorp</environment><super>Glorp.MessageArchiver</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpAtlasSystemsInVW</package></attributes></class><comment><class-id>Glorp.MoreInspectableMessageArchiver</class-id><body>This clunckily-named class is simply a message archiver that can survive e.g. being put in a shared variable without producing annoying DNUs.</body></comment><class><name>AtlasActiveRecordDescriptorSystem</name><environment>ObjectStudio.Atlas</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpAtlasSystemsInVW</package></attributes></class><comment><class-id>ObjectStudio.Atlas.AtlasActiveRecordDescriptorSystem</class-id><body>I am the superclass of descriptor system classes generated by ObjectStudio's mapping tool, when those descriptor systems fit the specifics of the ActiveRecord pattern.</body></comment><shared-variable><name>AssociationRelation</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>Relation subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>DomainManager</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>Domain manager equivalent</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>AggregationRelation</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>Relation subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>OMEditorConnection</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>RelationConnection subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>OMConnection</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>RelationConnection subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>OMEditorRelation</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>Relation subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>CascadedConnection</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>RelationConnection subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>UnreferencedConnection</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>RelationConnection subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>SetNullConnection</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>RelationConnection subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>OMRelation</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>Relation subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><shared-variable><name>RestrictedConnection</name><environment>ObjectStudio</environment><private>false</private><constant>false</constant><category>RelationConnection subclass equivalents</category><initializer>MoreInspectableMessageArchiver new</initializer><attributes><package>GlorpAtlasSystemsInVW</package></attributes></shared-variable><methods><class-id>ObjectStudio.Atlas.AtlasDescriptorSystem</class-id> <category>export</category><body package="GlorpAtlasSystemsInVW">classBase	^AtlasDescriptorSystem</body></methods><methods><class-id>Glorp.MoreInspectableMessageArchiver</class-id> <category>debugging</category><body package="GlorpAtlasSystemsInVW">class	^MoreInspectableMessageArchiver</body><body package="GlorpAtlasSystemsInVW">printString	^'a MoreInspectableMessageArchiver'</body></methods><methods><class-id>Glorp.MoreInspectableMessageArchiver</class-id> <category>expression protocol</category><body package="GlorpAtlasSystemsInVW">get: aSymbol 	^MoreInspectableMessageArchiver receiver: self		selector: aSymbol		arguments: #().</body><body package="GlorpAtlasSystemsInVW">get: aSymbol withArguments: anArray 	| arguments |	arguments := anArray collect: [:each | each glorpIsBlock 		ifTrue: [(Dialect argumentCountFor: each) = 1			ifTrue: [each value: self]			ifFalse: [each value]]		ifFalse: [each]].	^MoreInspectableMessageArchiver receiver: self		selector: aSymbol		arguments: arguments.</body></methods><methods><class-id>Glorp.MoreInspectableMessageArchiver</class-id> <category>displaying</category><body package="GlorpAtlasSystemsInVW">baseline	^self toolListIcon baseline</body><body package="GlorpAtlasSystemsInVW">preferredBounds	^self toolListIcon preferredBounds</body><body package="GlorpAtlasSystemsInVW">preferredExtent	^self toolListIcon preferredExtent</body><body package="GlorpAtlasSystemsInVW">preferredHeight	^self toolListIcon preferredHeight</body><body package="GlorpAtlasSystemsInVW">toolListIcon	"This method avoids DNU in the RB if an instance of this class is assigned to a shared variable."	^BehaviorIcons Proxy</body></methods><methods><class-id>Glorp.MoreInspectableMessageArchiver</class-id> <category>debugging - dialect-specific</category><body package="GlorpAtlasSystemsInVW">inspect: anObjectWhichIsMyself	"The message eating behaviour of MessageArchiver means #inspectorClass, sent to it, will return it, so it will then be sent inspect: with itself as parameter.  We switch to a wrapping array at that point (i.e. using the same pattern as lets us handle #inspect in the superclass)."	| inspectableSubstitute |	inspectableSubstitute := Array with: self.	^inspectableSubstitute inspectorClass inspect: inspectableSubstitute</body></methods><methods><class-id>ObjectStudio.Atlas.AtlasActiveRecordDescriptorSystem</class-id> <category>export</category><body package="GlorpAtlasSystemsInVW">classBase	^AtlasActiveRecordDescriptorSystem</body></methods><methods><class-id>Glorp.DescriptorSystem</class-id> <category>api</category><body package="GlorpAtlasSystemsInVW">tables	^tables</body><body package="GlorpAtlasSystemsInVW">tables: someGlorpTables	tables := someGlorpTables</body></methods><methods><class-id>Core.Object</class-id> <category>methods</category><body package="GlorpAtlasSystemsInVW">customInitialize	"In the ObjectStudio mapping tool, this is overridden for specific domain classes.  When a model is loaded in VW, this is the only method that will be called."</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>DescriptorSystem</name><environment>Glorp</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session platform descriptors tables sequences typeResolvers cachePolicy allClasses useDirectAccessForMapping classModels useJoinsForAnySatisfy </inst-vars><class-inst-vars>validateDescriptorSystem </class-inst-vars><imports></imports><category>Glorp</category><attributes><package>GlorpMappings</package></attributes></class><class><name>ActiveRecordDescriptorSystem</name><environment>Glorp.ActiveRecords</environment><super>Glorp.DescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metadataSession inflector currentDescriptor deferredDescriptorOperations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpActiveRecord</package></attributes></class><class><name>MessageArchiver</name><environment>Glorp</environment><super>ProtoObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mySelector myArguments myReceiver query </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Glorp-Expressions</category><attributes><package>GlorpQueries</package></attributes></class></st-source>