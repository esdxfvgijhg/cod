<?xml version="1.0"?><st-source><!-- Name: GlorpAtlasTestsNotice: Copyright 2013-2015 Cincom Systems, Inc.  All rights reserved.Comment: My tests use the various schemas generated by GlorpTest, GlorpActiveRecordTests and Store as their starting points.  They get the database login to use for testing from the GlorpDatabaseLoginResource.  They ensure the tables and columns of each schema have been created, then read the metadata of those tables and columns.  Thus the tests create descriptor system(s) from the database schema(s) metadata, and so generate	a)  classes that map to the tablesor	b) a descriptor system subclass, with classFor<Name>:, descriptorFor<Name>: and tableForName: methods, from this descriptor systemTests verify that something has been created (but do not yet exhaustively check all created items).DbIdentifier: bear73DbTrace: 462260DbUsername: nrossDbVersion: 8.1 - 1DevelopmentPrerequisites: #(#(#any 'GlorpAtlasSystemsInVW' '') #(#any 'GlorpAtlasClassGeneration' '') #(#any 'GlorpActiveRecordTests' '') #(#any 'StoreBase' ''))PackageName: GlorpAtlasTestsParcel: #('GlorpAtlasTests')ParcelName: GlorpAtlasTestsPrerequisiteDescriptions: #(#(#name 'GlorpAtlasSystemsInVW' #componentType #package) #(#name 'GlorpAtlasClassGeneration' #componentType #package) #(#name 'GlorpActiveRecordTests' #componentType #package) #(#name 'StoreBase' #componentType #bundle))PrerequisiteParcels: #(#('GlorpAtlasSystemsInVW' '') #('GlorpAtlasClassGeneration' '') #('GlorpActiveRecordTests' '') #('StoreBase' ''))PrintStringCache: (8.1 - 1,nross)Version: 8.1 - 1Date: 12:56:10 PM February 5, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (feb16.1) of February 5, 2016 on February 5, 2016 at 12:56:10 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DescriptorClassGenerationTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session </inst-vars><class-inst-vars></class-inst-vars><imports>			private Smalltalk.*			private Store.Glorp.*			private Glorp.*			private Glorp.ActiveRecords.*			ObjectStudio.Atlas.*			</imports><category>Atlas Tests</category><attributes><package>GlorpAtlasTests</package></attributes></class><comment><class-id>DescriptorClassGenerationTest</class-id><body>Test reading tables from a schema and generating classes from those tables, and a descriptor system to map between them.</body></comment><class><name>DescriptorSystemGenerationTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>systemToGenerate descriptorClassName </inst-vars><class-inst-vars></class-inst-vars><imports>			private Smalltalk.*			private Store.Glorp.*			private Glorp.*			private GlorpActiveRecordTests.*			</imports><category>Atlas Tests</category><attributes><package>GlorpAtlasTests</package></attributes></class><comment><class-id>DescriptorSystemGenerationTest</class-id><body>Test regenerating a range of descriptor system classes.</body></comment><methods><class-id>DescriptorClassGenerationTest</class-id> <category>running</category><body package="GlorpAtlasTests">removeGeneratedClasses	"This is potential clean-up of the last run.  Not all tables are simply generated from allTables, so we initialize"	| classesGenerated inflector |	classesGenerated := Set withAll:		#('AirlineMeal' 'EncycBio' 'Flight' 'FlightPass' 'Gallery' 'GalleryLink' 'Imagetags' 'TestAcctHolder' 'TestBankAcct').	inflector := Inflector new.	GlorpTestDescriptorSystem glorpAllSubclasses do: 		[:eachSystem |		eachSystem new allTableNames			do: [:eachTable | classesGenerated add: (inflector classify: eachTable)]].	classesGenerated do: 		[:each || eachClassReference |		eachClassReference := ('ObjectStudio.' , each) asQualifiedReference.		(eachClassReference isDefined			and: [eachClassReference binding environment = ObjectStudio])				ifTrue: [eachClassReference removeFromSystem]].</body><body package="GlorpAtlasTests">setUp	"We may have left the generated classes for possible inspection at the end of the test, so ensure their removal at its start."	| accessor |	self removeGeneratedClasses.	accessor := DatabaseAccessor forLogin: GlorpDatabaseLoginResource current login.	session := GlorpSession new		accessor: accessor;		system: (MetadataDescriptorSystem forPlatform: accessor platform).	session login.</body><body package="GlorpAtlasTests">tearDown	session logout.</body><body package="GlorpAtlasTests">testSystemAndDSClassGenerationFromTablesInPublicSchema	GlorpMetaProcess		fromTablesIn: session accessor currentLogin		schema: 'public'		generateClassesIn: 'ObjectStudio'		packageName: 'Junk'		descriptorSystemClass: 'JustTest'.	self assert: 'ObjectStudio.JustTestActiveRecordDescriptorSystem' asQualifiedReference isDefined.</body><body package="GlorpAtlasTests">testSystemGenerationFromTablesInPublicSchema	| tables metaProcess classBuilderHelper classes classModels system |	system := ActiveRecordDescriptorSystem new.	tables := self testTablesInPublicSchema.	system tables: tables.	metaProcess := GlorpMetaProcess new.	classBuilderHelper := metaProcess defineUsedClassesAndVariablesForTables: tables in: 'ObjectStudio'.	classBuilderHelper system: system.	classes := classBuilderHelper generateClassesFromTables.	classModels := classBuilderHelper generateClassModelsFromTables.	[classBuilderHelper createMappingsForActiveRecord]		on: CannotAutomaticallyMapRelationship		do: [:ex |			Transcript cr; show: ex varClassName; crtab; show: ex variable.			ex resume].	system validate.	^system</body><body package="GlorpAtlasTests">testTablesInPublicSchema	"If the database does not support schemas (e.g. SQLite), just get the tables."	| tables dbPlatform |	dbPlatform := session platform.	tables := dbPlatform		getTablesForSchema:			(dbPlatform supportsSchemas ifTrue:				[self assert: ((dbPlatform readSchemasForSession: session) includes: 'public')					description: 'This test''s hardcoded use of public schema'.				'public'])		forSession: session.	self assert: tables notEmpty.	^tables</body></methods><methods><class-id>DescriptorClassGenerationTest class</class-id> <category>accessing</category><body package="GlorpAtlasTests">resources	^Array with: GlorpSessionResource</body></methods><methods><class-id>DescriptorSystemGenerationTest</class-id> <category>utilities</category><body package="GlorpAtlasTests">assertClassFullName: aString generatedIn: aBlock	| descriptorClassReference |	descriptorClassReference := aString asQualifiedReference.	descriptorClassReference isDefined ifTrue:		[descriptorClassReference removeFromSystem].	aBlock value.	self assert: descriptorClassReference isDefined.</body></methods><methods><class-id>DescriptorSystemGenerationTest</class-id> <category>running</category><body package="GlorpAtlasTests">tearDown	WriteAtlasHelper system: nil.	super tearDown.</body><body package="GlorpAtlasTests">testRegenerateActiveRecordTestDescriptorSystem	| session |	session := ActiveRecordSessionResource current session.	(Array with: TestActiveRecordDescriptorSystem) do:		[:each || eachRegenerateName | eachRegenerateName := 'Re' , each name.		session system: (each forPlatform: GlorpDatabaseLoginResource defaultPlatform).		WriteAtlasHelper system: session system.		self			assertClassFullName: each environment fullName, '.', eachRegenerateName, session system class atlasNameExtension			generatedIn: [session system writeAtlas: eachRegenerateName in: each environment]].</body><body package="GlorpAtlasTests">testRegenerateGlorpTestDescriptorSystemSubclasses	"In postgres, is tableForRECORD_WITH_UPDATE: not writing types in correct syntax?"	| session |	session := GlorpSessionResource current newSession.	GlorpTestDescriptorSystem glorpAllSubclasses		remove: GlorpLinkTableAnywhereDescriptorSystem;		remove: GlorpDemoDescriptorSystem;		do: [:each || eachRegenerateName | eachRegenerateName := 'Re' , each name.			session system: (each forPlatform: GlorpDatabaseLoginResource defaultPlatform).			WriteAtlasHelper system: session system.			self				assertClassFullName: each environment fullName, '.', eachRegenerateName, session system class atlasNameExtension				generatedIn: [session system writeAtlas: eachRegenerateName in: each environment]].</body><body package="GlorpAtlasTests">testRegenerateStoreDescriptorSystems	| system |	(Array with: Store73DescriptorSystem with: Store74DescriptorSystem) do:		[:each || eachRegenerateName | eachRegenerateName := 'Re' , each name.		system := (each sessionForLogin: GlorpDatabaseLoginResource defaultLogin) system.		WriteAtlasHelper system: system.		self			assertClassFullName: each environment fullName, '.', eachRegenerateName, system class atlasNameExtension			generatedIn: [system writeAtlas: eachRegenerateName in: each environment]].</body></methods><methods><class-id>DescriptorSystemGenerationTest class</class-id> <category>accessing</category><body package="GlorpAtlasTests">resources	^Array with: GlorpSessionResource with: ActiveRecordSessionResource</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>