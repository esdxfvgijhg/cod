<?xml version="1.0"?><st-source><!-- Name: GlorpMigrationTestsNotice: The code is Copyright 2008-2016 Cincom Systems, Inc.  All rights reserved.These tests are made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: This holds tests for migrating one ActiveRecord schema to anotherDbIdentifier: bear73DbTrace: 491365DbUsername: dwallenDbVersion: 8.2 - 3DevelopmentPrerequisites: #(#(#any 'GlorpMigration' '') #(#any 'GlorpTest' ''))PackageName: GlorpMigrationTestsParcel: #('GlorpMigrationTests')ParcelName: GlorpMigrationTestsPrerequisiteDescriptions: #(#(#name 'GlorpMigration') #(#name 'GlorpTest' #componentType #bundle))PrerequisiteParcels: #(#('GlorpMigration' '') #('GlorpTest' ''))PrintStringCache: (8.2 - 3,dwallen)Version: 8.2 - 3Date: 1:31:12 PM June 3, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (jun16.1) of June 3, 2016 on June 3, 2016 at 1:31:12 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>GlorpMigrationTests</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private Glorp.*			</imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></name-space><class><name>ActiveRecordMigrationTest</name><environment>GlorpMigrationTests</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session v1 v2 meta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecordTests</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystem</name><environment>GlorpMigrationTests</environment><super>Glorp.DescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystemV6</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV6</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestActiveRecordSystemV3</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecordTests</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestActiveRecordSystemV3</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another. This represents the third version of the system.</body></comment><class><name>TestDescriptorSystemV3</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecordTests</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV3</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another. This represents the third version of the system.</body></comment><class><name>TestDescriptorSystemV42</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV42</class-id><body>      </body></comment><class><name>TestDescriptorSystemV61</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV61</class-id><body>   This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV44</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV44</class-id><body>            </body></comment><class><name>TestDescriptorSystemV1</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV1</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV8</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV8</class-id><body> This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV201</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystemV102</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystemV43</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV43</class-id><body>         </body></comment><class><name>TestDescriptorSystemV603</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV603</class-id><body>    This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>MigrationSessionResource</name><environment>GlorpMigrationTests</environment><super>Glorp.GlorpSessionResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessor system </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecordTests</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystemV62</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV62</class-id><body>      This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV4</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV4</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another. This represents the forth version of the system.</body></comment><class><name>TestDescriptorSystemV202</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV202</class-id><body>   </body></comment><class><name>TestDescriptorSystemV602</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV602</class-id><body> This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV46</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV46</class-id><body>TestDescriptorSystemV46 has the 3-column pkey/fkeys.</body></comment><class><name>TestDescriptorSystemV601</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV601</class-id><body>      This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV101</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV101</class-id><body>   This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV45</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV45</class-id><body>TestDescriptorSystemV45 creates a 3rd column, which will migrate to part of the pkey in 46.</body></comment><class><name>TestDescriptorSystemV41</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV41</class-id><body>   </body></comment><class><name>TestDescriptorSystemV2</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV2</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another. This represents the second version of the system.</body></comment><class><name>TestActiveRecordSystemV4</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystemV7</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV7</class-id><body> This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestActiveRecordSystemV1</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestActiveRecordSystemV1</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestActiveRecordSystemV2</name><environment>GlorpMigrationTests</environment><super>Glorp.ActiveRecords.ActiveRecordDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestActiveRecordSystemV2</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another. This represents the second version of the system.</body></comment><class><name>TestDescriptorSystemV5</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><comment><class-id>GlorpMigrationTests.TestDescriptorSystemV5</class-id><body>This is a test descriptor system for testing migrating from one version of a schema to another.</body></comment><class><name>TestDescriptorSystemV10</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>MigrationTest</name><environment>GlorpMigrationTests</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session v1 v2 meta metadataSession tableNamesForTesting </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecordTests</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystemV103</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><class><name>TestDescriptorSystemV9</name><environment>GlorpMigrationTests</environment><super>GlorpMigrationTests.TestDescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpMigrationTests</package></attributes></class><methods><class-id>GlorpMigrationTests.ActiveRecordMigrationTest</class-id> <category>support</category><body package="GlorpMigrationTests">baseDescriptorClassName	| namespace |	namespace := Dialect isVisualWorks ifTrue: [self class environment fullName, '.'] ifFalse: [''].	^namespace, 'TestActiveRecordSystemV'.</body><body package="GlorpMigrationTests">checkDatabaseMatchesMetadata: aSession	"Check that what we think we have in metadata description agrees with what's in the database. Make sure that we read the database table from the same session that would have done the table operations, because they may not have become visible to other sessions yet."	self tableNamesForTesting do: [:each |		self checkTable: each matchesMetadata: aSession].</body><body package="GlorpMigrationTests">checkTable: aTableName matchesMetadata: aSession	"Check that what we think we have in metadata description agrees with what's in the database. Make sure that we read the database table from the same session that would have done the table operations, because they may not have become visible to other sessions yet."	| tableFromMethod tableFromDatabase |	tableFromMethod := aSession system		tableNamedFromMethod: aTableName		ifNone: [nil].	aSession reset.	aSession system initialize.	session reset.	session system initialize.	tableFromDatabase := session system tableNamedFromDatabase: aTableName.	self assert: (tableFromDatabase isTheSameAs: tableFromMethod).		"Just to validate that one is really coming from the database and one isn't."	self assert: tableFromDatabase schema isEmpty not.	session system initialize.	session reset.</body><body package="GlorpMigrationTests">checkUpgradeFrom: fromVersionNumber to: toVersionNumber	"Test upgrading from version 1 to version 2, and validate that the tables look like we expect in each case. Involves a bunch of resetting to avoid caches, and dropping and recreating stuff."	"Just to validate that one is really coming from the database and one isn't."	v1 := self sessionFor: fromVersionNumber.	v2 := self sessionFor: toVersionNumber.	v1 recreateTables.	meta := session system metadataSession.	self checkDatabaseMatchesMetadata: v1.	v1 system initialize.	meta reset.	session migrateFromSystem: v1 system toSystem: v2 system.	self checkDatabaseMatchesMetadata: v2.</body><body package="GlorpMigrationTests">descriptorClassFor: anInteger	^(Dialect smalltalkAt: (self baseDescriptorClassName, anInteger printString))</body><body package="GlorpMigrationTests">sessionFor: anInteger	^(self descriptorClassFor: anInteger) sessionForLogin: session currentLogin</body><body package="GlorpMigrationTests">tableNameForTesting	^'TEST_BANK_ACCT'.</body><body package="GlorpMigrationTests">tableNamesForTesting	^#('TEST_BANK_ACCT' 'TEST_ACCT_HOLDER').</body></methods><methods><class-id>GlorpMigrationTests.ActiveRecordMigrationTest</class-id> <category>tests</category><body package="GlorpMigrationTests">testDowngradeConstraints	| constraints |	self checkUpgradeFrom: 4 to: 3.	"Just to be on the safe side, validate the constraint we think ought to not be there specifically."	constraints := meta read: ForeignKeyConstraint where:		[:constraint | 		constraint tableName asUppercase = 'TEST_ACCT_HOLDER' AND: [constraint type = meta system foreignKeyConstraintTypeString]].	self assert: constraints size = 0.</body><body package="GlorpMigrationTests">testUpgrade1To2	self checkUpgradeFrom: 1 to: 2.</body><body package="GlorpMigrationTests">testUpgrade1To3	self checkUpgradeFrom: 1 to: 3.</body><body package="GlorpMigrationTests">testUpgrade2To3	self checkUpgradeFrom: 2 to: 3.</body><body package="GlorpMigrationTests">testUpgrade3To1	self checkUpgradeFrom: 3 to: 1.</body><body package="GlorpMigrationTests">testUpgradeConstraints	| constraints |	self checkUpgradeFrom: 3 to: 4.	"Just to be on the safe side, validate the constraint we think ought to be there specifically."	constraints := meta read: ForeignKeyConstraint where: [:constraint | 			(constraint tableName asUppercase = 'TEST_ACCT_HOLDER') AND: [constraint type = meta system foreignKeyConstraintTypeString]].	self assert: constraints size = 1.</body></methods><methods><class-id>GlorpMigrationTests.ActiveRecordMigrationTest</class-id> <category>Running</category><body package="GlorpMigrationTests">setUp		super setUp.	session := MigrationSessionResource current session	"			on: InvalidSessionSetup				do: [:ex | ex resume]".	session login</body><body package="GlorpMigrationTests">tearDown	v2 dropTables.	super tearDown.	session isNil ifFalse: [		session reset. 		session system initialize].	v1 logout.	v2 logout.	Glorp.ActiveRecords.ActiveRecord resetAllProcessVariables.</body></methods><methods><class-id>GlorpMigrationTests.ActiveRecordMigrationTest class</class-id> <category>resources</category><body package="GlorpMigrationTests">resources		^Array with: MigrationSessionResource</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV6</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_NEW: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'NICKNAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_OLD: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'OPEN_BALANCE' type: platform integer.	aTable createFieldNamed: 'CLOSE_BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV6 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV5</body></methods><methods><class-id>GlorpMigrationTests.TestActiveRecordSystemV3</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV3</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV3 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV2</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV42</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable addForeignKeyFrom: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') to: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID').</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform double ) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV42 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV4</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV61</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_NEW: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'NICKNAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_OLD: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'OPEN_BALANCE' type: platform integer.	aTable createFieldNamed: 'CLOSE_BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV61 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV6</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV44</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	| fromFields toFields |	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	(aTable createFieldNamed: 'NAME' type: (platform varchar: 255)) beNullable: false.	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable createFieldNamed: 'TEST_BANK_ACCT_BANK_CODE' type: (platform varChar: 10).	fromFields := OrderedCollection 					with: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') 					with: (aTable fieldNamed: 'TEST_BANK_ACCT_BANK_CODE').	toFields := OrderedCollection 				with: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID') 				with: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'BANK_CODE').	aTable addForeignKeyFromAll: fromFields  toAll: toFields.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer ) bePrimaryKey.	(aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10)) bePrimaryKey.	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV44 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV43</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV1</class-id> <category>migration - api</category><body package="GlorpMigrationTests">ideaBagMigrateToTestMigrationDescriptorSystemV2: migration	migration dropTable: (migration destinationTableNamed: 'tableToDrop').	migration dropTable: (self tableNamed: 'tableToDrop').	migration createTablesNamed: #('Table3' 'Table5').	migration createTable: (migration destinationTableNamed: 'tableToCreate').	migration		dropFieldNamed: 'columnA'		fromTable: (migration destinationTableNamed: 'tableToDropFieldFrom').	migration		addFieldNamed: 'columnA'		toTableNamed: 'tableX'.	migration		copyDataFrom: #('fromField1' 'fromField2')		inTableNamed: 'fromTable'		to: #('toField1' 'toField2')		inTableNamed: 'toTable'.	migration execute: 'sql statement'.	migration createConstraint: 'something' onField: 'someField' inTable: 'someTable'.	migration dropConstraint: 'something' fromField: 'someField'.	" other possible operations: "</body><body package="GlorpMigrationTests">migrateAndPopulateBalanceToV2: aMigrationChangeSet	"Changed to populate 'BALANCE' with some value "	aMigrationChangeSet		addFieldNamed: 'BALANCE'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		populateFieldNamed: 'BALANCE'		inTableNamed: 'TEST_BANK_ACCT'		with: 100</body><body package="GlorpMigrationTests">migrateWithExceptionToV2: aMigrationChangeSet	"Changed to populate 'BALANCE' with some value "	aMigrationChangeSet		addFieldNamed: 'BALANCE'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		populateFieldNamed: 'BALANCE'		inTableNamed: 'TEST_BANK_ACCT'		with: (Dictionary new			at: 'bogusKey' put: 'some object that should not be possible to insert';			yourself)</body><body package="GlorpMigrationTests">migrateWithScriptErrorsToV2: aMigrationChangeSet	"Testing script errors "	aMigrationChangeSet		addFieldNamed: 'BALANCEXX'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		populateFieldNamed: 'BALANCE'		inTableNamed: 'TEST_BANK_ACCTXXX'		with: 111</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV1</class-id> <category>tables</category><body package="GlorpMigrationTests">createTestRows	"TEST_ACCT_HOLDER	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	TEST_BANK_ACCT	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10)."	self session login.	[ self session inTransactionDo: [	| table |	table := self tableNamed: 'TEST_ACCT_HOLDER'.	#(		#(1 'Yogi Berra' 1)		#(2 'Pooh Bear' 2)		#(3 'Albert Einstein' 2) ) do: [ :each |			| row command |			(row := Glorp.DatabaseRow newForTable: table)				atFieldNamed: 'ID' put: (each at: 1);				atFieldNamed: 'NAME' put: (each at: 2);				atFieldNamed: 'TEST_BANK_ACCT_ID' put: (each at: 3).			command := self session commandForRow: row.			self session accessor executeCommand: command ].	table := self tableNamed: 'TEST_BANK_ACCT'.	#(		#(1 '004' '101010' '0123456789')		#(2 '004' '101010' '1234567890') ) do: [ :each |			| row command |			(row := Glorp.DatabaseRow newForTable: table)				atFieldNamed: 'ID' put: (each at: 1);				atFieldNamed: 'BANK_CODE' put: (each at: 2);				atFieldNamed: 'BRANCH_NO' put: (each at: 3);				atFieldNamed: 'ACCT_NO' put: (each at: 4).			command := self session commandForRow: row.			self session accessor executeCommand: command ].	] ] ensure: [ self session logout ]</body><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV1 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystem</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV8</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'BANK_ID' type: platform integer)  beNullable: false.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV8 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV7</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV201</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable addForeignKeyFrom: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') to: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID').</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV201 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystem</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV102</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV102 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV1</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV43</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	(aTable createFieldNamed: 'NAME' type: (platform varchar: 255)) bePrimaryKey.	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable addForeignKeyFrom: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') to: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID').</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer ) bePrimaryKey.	(aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10)) beNullable: false.	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV43 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV4</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV603</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV603 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV602</body></methods><methods><class-id>GlorpMigrationTests.MigrationSessionResource</class-id> <category>setup</category><body package="GlorpMigrationTests">glorpTestsSystem		GlorpDemoTablePopulatorResource current.	system isNil		ifTrue:			[system := TestActiveRecordSystemV1				forPlatform: GlorpDatabaseLoginResource defaultLogin database].	^system</body><body package="GlorpMigrationTests">setAccessor	"Don't set up the accessor, explicitly get a new login. Something gets fouled up with Oracle transactions if we don't"	accessor isNil 		ifTrue: [accessor := session accessor]		ifFalse: [session accessor: accessor].</body><body package="GlorpMigrationTests">tearDown	accessor := nil.	super tearDown.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV62</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_NEW: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'NICKNAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'OPEN_BALANCE' type: platform integer.	aTable createFieldNamed: 'CLOSE_BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV62 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV61</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV4</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable addForeignKeyFrom: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') to: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID').</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV4</class-id> <category>migration scripts</category><body package="GlorpMigrationTests">errorScriptV603: aMigrationChangeSet	aMigrationChangeSet createTableNamed: 'TEST_ACCT_HOLDER_NEW'.	aMigrationChangeSet createTableNamed: 'TEST_ACCT_HOLDER_OLD'.	aMigrationChangeSet dropTableNamed: 'TEST_ACCT_HOLDER'.	aMigrationChangeSet dropFieldNamed: 'BALANCE' fromTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed: 'BRANCH_NO' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed:'OPEN_BALANCE' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed:'CLOSE_BALANCE' toTableNamed:'TEST_BANK_ACCT'.		aMigrationChangeSet dropTableNamed:'TEST_ACCT_HOLDER_OLD'.	aMigrationChangeSet dropTableNamed:'TEST_ACCT_HOLDER_NEW'.	aMigrationChangeSet addFieldNamed:'CLOSE_BALANCEX' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed:'ACCT_DESCRIPTION' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet copyDataFromFieldNamed:'ACCT_NO' toFieldNamed:'ACCT_DESCRIPTION' inTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'ACCT_NO' fromTableNamed:'TEST_BANK_ACCT'.		aMigrationChangeSet dropFieldNamed:'OPEN_BALANCE' fromTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'CLOSE_BALANCEX' fromTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'CLOSE_BALANCE' fromTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'ACCT_DESCRIPTION' fromTableNamed:'TEST_BANK_ACCT'</body><body package="GlorpMigrationTests">scriptV603: aMigrationChangeSet	aMigrationChangeSet operationsFrom: 'GlorpMigrationTests.TestDescriptorSystemV4' to: 'GlorpMigrationTests.TestDescriptorSystemV601'.	aMigrationChangeSet createTableNamed: 'TEST_ACCT_HOLDER_NEW'.	aMigrationChangeSet createTableNamed: 'TEST_ACCT_HOLDER_OLD'.	aMigrationChangeSet dropTableNamed: 'TEST_ACCT_HOLDER'.	aMigrationChangeSet dropFieldNamed: 'BALANCE' fromTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed: 'BRANCH_NO' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed:'OPEN_BALANCE' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed:'CLOSE_BALANCE' toTableNamed:'TEST_BANK_ACCT'.		aMigrationChangeSet operationsFrom: 'GlorpMigrationTests.TestDescriptorSystemV601' to: 'GlorpMigrationTests.TestDescriptorSystemV602'.	aMigrationChangeSet dropTableNamed:'TEST_ACCT_HOLDER_OLD'.	aMigrationChangeSet dropTableNamed:'TEST_ACCT_HOLDER_NEW'.	aMigrationChangeSet addFieldNamed:'CLOSE_BALANCEX' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed:'ACCT_DESCRIPTION' toTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet copyDataFromFieldNamed:'ACCT_NO' toFieldNamed:'ACCT_DESCRIPTION' inTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'ACCT_NO' fromTableNamed:'TEST_BANK_ACCT'.		aMigrationChangeSet operationsFrom: 'GlorpMigrationTests.TestDescriptorSystemV602' to:'GlorpMigrationTests.TestDescriptorSystemV603'.	aMigrationChangeSet dropFieldNamed:'OPEN_BALANCE' fromTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'CLOSE_BALANCEX' fromTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'CLOSE_BALANCE' fromTableNamed:'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed:'ACCT_DESCRIPTION' fromTableNamed:'TEST_BANK_ACCT'</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV4 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV3</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV202</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable addForeignKeyFrom: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') to: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID').</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV202 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV201</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV602</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'OPEN_BALANCE' type: platform integer.	aTable createFieldNamed: 'CLOSE_BALANCEX' type: platform integer.	aTable createFieldNamed: 'CLOSE_BALANCE' type: platform integer.	aTable createFieldNamed: 'ACCT_DESCRIPTION' type: (platform varChar: 100).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV602 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV601</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV46</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	| fromFields toFields |	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	(aTable createFieldNamed: 'NAME' type: (platform varchar: 255)) beNullable: false.	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable createFieldNamed: 'TEST_BANK_ACCT_BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'TEST_BANK_ACCT_BANK_ZIP' type: (platform varChar: 5).	fromFields := OrderedCollection 					with: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') 					with: (aTable fieldNamed: 'TEST_BANK_ACCT_BANK_CODE')					with: (aTable fieldNamed: 'TEST_BANK_ACCT_BANK_ZIP').	toFields := OrderedCollection 				with: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID') 				with: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'BANK_CODE')				with: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'BANK_ZIP').	aTable addForeignKeyFromAll: fromFields  toAll: toFields.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer ) bePrimaryKey.	(aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10)) bePrimaryKey.	(aTable createFieldNamed: 'BANK_ZIP' type: (platform varChar: 5)) bePrimaryKey.	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV46 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV45</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV601</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_NEW: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'NICKNAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_OLD: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'OPEN_BALANCE' type: platform integer.	aTable createFieldNamed: 'CLOSE_BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV601 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV6</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV101</class-id> <category>migration - api</category><body package="GlorpMigrationTests">ideaBagMigrateToTestMigrationDescriptorSystemV2: migration	migration dropTable: (migration destinationTableNamed: 'tableToDrop').	migration dropTable: (self tableNamed: 'tableToDrop').	migration createTablesNamed: #('Table3' 'Table5').	migration createTable: (migration destinationTableNamed: 'tableToCreate').	migration		dropFieldNamed: 'columnA'		fromTable: (migration destinationTableNamed: 'tableToDropFieldFrom').	migration		addFieldNamed: 'columnA'		toTableNamed: 'tableX'.	migration		copyDataFrom: #('fromField1' 'fromField2')		inTableNamed: 'fromTable'		to: #('toField1' 'toField2')		inTableNamed: 'toTable'.	migration execute: 'sql statement'.	migration createConstraint: 'something' onField: 'someField' inTable: 'someTable'.	migration dropConstraint: 'something' fromField: 'someField'.	" other possible operations: "</body><body package="GlorpMigrationTests">migrateAndPopulateBalanceToV2: aMigrationChangeSet	"Changed to populate 'BALANCE' with some value "	aMigrationChangeSet		addFieldNamed: 'BALANCE'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		populateFieldNamed: 'BALANCE'		inTableNamed: 'TEST_BANK_ACCT'		with: 100</body><body package="GlorpMigrationTests">migrateWithExceptionToV2: aMigrationChangeSet	"Changed to populate 'BALANCE' with some value "	aMigrationChangeSet		addFieldNamed: 'BALANCE'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		populateFieldNamed: 'BALANCE'		inTableNamed: 'TEST_BANK_ACCT'		with: (Dictionary new			at: 'bogusKey' put: 'some object that should not be possible to insert';			yourself)</body><body package="GlorpMigrationTests">migrateWithScriptErrorsToV2: aMigrationChangeSet	"Testing script errors "	aMigrationChangeSet		addFieldNamed: 'BALANCEXX'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		populateFieldNamed: 'BALANCE'		inTableNamed: 'TEST_BANK_ACCTXXX'		with: 111</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV101</class-id> <category>tables</category><body package="GlorpMigrationTests">createTestRows	"TEST_ACCT_HOLDER	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	TEST_BANK_ACCT	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10)."	self session login.	[ self session inTransactionDo: [	| table |	table := self tableNamed: 'TEST_ACCT_HOLDER'.	#(		#(1 'Yogi Berra' 1)		#(2 'Pooh Bear' 2)		#(3 'Albert Einstein' 2) ) do: [ :each |			| row command |			(row := Glorp.DatabaseRow newForTable: table)				atFieldNamed: 'ID' put: (each at: 1);				atFieldNamed: 'NAME' put: (each at: 2);				atFieldNamed: 'TEST_BANK_ACCT_ID' put: (each at: 3).			command := self session commandForRow: row.			self session accessor executeCommand: command ].	table := self tableNamed: 'TEST_BANK_ACCT'.	#(		#(1 '004' '101010' '0123456789')		#(2 '004' '101010' '1234567890') ) do: [ :each |			| row command |			(row := Glorp.DatabaseRow newForTable: table)				atFieldNamed: 'ID' put: (each at: 1);				atFieldNamed: 'BANK_CODE' put: (each at: 2);				atFieldNamed: 'BRANCH_NO' put: (each at: 3);				atFieldNamed: 'ACCT_NO' put: (each at: 4).			command := self session commandForRow: row.			self session accessor executeCommand: command ].	] ] ensure: [ self session logout ]</body><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV101 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystem</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV45</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	| fromFields toFields |	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	(aTable createFieldNamed: 'NAME' type: (platform varchar: 255)) beNullable: false.	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable createFieldNamed: 'TEST_BANK_ACCT_BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'TEST_BANK_ACCT_BANK_ZIP' type: (platform varChar: 5).	fromFields := OrderedCollection 					with: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') 					with: (aTable fieldNamed: 'TEST_BANK_ACCT_BANK_CODE').	toFields := OrderedCollection 				with: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID') 				with: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'BANK_CODE').	aTable addForeignKeyFromAll: fromFields  toAll: toFields.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	"DB2 requires a default value for NOT NULL columns. Some other platforms assign something automatically."	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	(aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10)) bePrimaryKey.	(aTable createFieldNamed: 'BANK_ZIP' type: (platform varChar: 5))		beNullable: false;		dbDefaultValue: (session platform isDB2Platform ifTrue: [''] ifFalse: [nil]).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV45 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV44</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV41</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform double) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable addForeignKeyFrom: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') to: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID').</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer ) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV41 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV4</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV2</class-id> <category>migration - api</category><body package="GlorpMigrationTests">migrateAndCopyDataToV6: aMigrationChangeSet	" Modified to add 'copy data' steps before dropping BALANCE field."	aMigrationChangeSet		createTableNamed: 'TEST_ACCT_HOLDER_NEW';		copyDataFromTableNamed: 'TEST_ACCT_HOLDER'		toTableNamed: 'TEST_ACCT_HOLDER_NEW';		populateFieldNamed: 'NICKNAME'		inTableNamed: 'TEST_ACCT_HOLDER_NEW'		with: '&lt;undefined&gt;';		renameTableNamed: 'TEST_ACCT_HOLDER'		to: 'TEST_ACCT_HOLDER_OLD'.	aMigrationChangeSet		addFieldNamed: 'OPEN_BALANCE'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		addFieldNamed: 'CLOSE_BALANCE'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		populateFieldNamed: 'OPEN_BALANCE'		inTableNamed: 'TEST_BANK_ACCT'		with: 0.	aMigrationChangeSet		copyDataFromFieldNamed: 'BALANCE'		toFieldNamed: 'CLOSE_BALANCE'		inTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		dropFieldNamed: 'BALANCE'		fromTableNamed: 'TEST_BANK_ACCT'.</body><body package="GlorpMigrationTests">migrateAndRenameColumnToV6: aMigrationChangeSet	"Modified to rename BALANCE field to CLOSE_BALANCE."	aMigrationChangeSet createTableNamed: 'TEST_ACCT_HOLDER_NEW'.	aMigrationChangeSet		renameFieldNamed: 'BALANCE'		inTableNamed: 'test_bank_acct'		to: 'CLOSE_BALANCE'.	aMigrationChangeSet		addFieldNamed: 'OPEN_BALANCE'		toTableNamed: 'test_bank_acct'.	aMigrationChangeSet		populateFieldNamed: 'OPEN_BALANCE'		inTableNamed: 'test_bank_acct'		with: 0.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV2</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV2 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV1</body></methods><methods><class-id>GlorpMigrationTests.TestActiveRecordSystemV4</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.	aTable addForeignKeyFrom: (aTable fieldNamed: 'TEST_BANK_ACCT_ID') to: ((self tableNamed: 'TEST_BANK_ACCT') fieldNamed: 'ID').</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV7</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer)  beNullable: false.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'BANK_ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV7 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV6</body></methods><methods><class-id>GlorpMigrationTests.TestActiveRecordSystemV1</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).</body></methods><methods><class-id>GlorpMigrationTests.TestActiveRecordSystemV2</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV5</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER_NEW: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'NICKNAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).	aTable createFieldNamed: 'BALANCE' type: platform integer.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV5 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV4</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV10</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	| f f1 f2 |	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.		f := DatabaseField named: 'NAME' type: (platform varchar: 100).	f beNullable: false.	aTable addField: f.	f1 := DatabaseField named: 'SSN' type: (platform number precision: 9; scale: 2; yourself).	f1 beNullable: true.	aTable addField: f1.	f2 := DatabaseField named: 'ADDRESS' type: (platform varchar: 200).	aTable addField: f2.	(aTable createFieldNamed: 'ACCOUNT_NUMBER' type: platform integer).</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'BANK_ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV10 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV9</body></methods><methods><class-id>GlorpMigrationTests.MigrationTest</class-id> <category>support</category><body package="GlorpMigrationTests">baseDescriptorClassName	| namespace |	namespace := Dialect isVisualWorks ifTrue: [self class environment fullName, '.'] ifFalse: [''].	^namespace, 'TestDescriptorSystemV'.</body><body package="GlorpMigrationTests">checkDatabaseMatchesMetadata: aSession	"Check that what we think we have in metadata description agrees with what's in the database. Make sure that we read the database table from the same session that would have done the table operations, because they may not have become visible to other sessions yet."	self		checkDatabaseTables: self tableNamesForTesting		matchMetadata: aSession</body><body package="GlorpMigrationTests">checkDatabaseTables: anArray matchMetadata: aSession	"Check that what we think we have in metadata description agrees with what's in the database. Make sure that we read the database table from the same session that would have done the table operations, because they may not have become visible to other sessions yet."	anArray do: [:each |		self checkTable: each matchesMetadata: aSession].</body><body package="GlorpMigrationTests">checkTable: aTableName matchesMetadata: aSession	"Check that what we think we have in metadata description agrees with what's in the database. Make sure that we read the database table from the same session that would have done the table operations, because they may not have become visible to other sessions yet."	| tableFromMethod tableFromDatabase |	tableFromMethod := aSession system tableNamed: aTableName ifNone: [nil].	aSession reset.	aSession system initialize.	session reset.	session system initialize.	metadataSession reset. "Get the metadata session to take a new look at its tables."	tableFromDatabase := metadataSession readOneOf: DatabaseTable where: [:each | each name asUppercase = aTableName asUppercase].	self assert: (tableFromDatabase isTheSameAs: tableFromMethod).		"Just to validate that one is really coming from the database and one isn't."	self assert: tableFromDatabase schema isEmpty not.	session system initialize.	session reset.</body><body package="GlorpMigrationTests">checkUpgradeFrom: fromVersionNumber to: toVersionNumber	"Test upgrading from version 1 to version 2, and validate that the tables look like we expect in each case. Involves a bunch of resetting to avoid caches, and dropping and recreating stuff."	"Just to validate that one is really coming from the database and one isn't."		v1 := self sessionFor: fromVersionNumber.	v2 := self sessionFor: toVersionNumber.	v1 recreateTables.	self checkDatabaseMatchesMetadata: v1.	v1 system initialize.	metadataSession reset.	session platform class = Glorp.SQLServerPlatform ifTrue:		[self tableNamesForTesting do:			[:tableName || aTable |			aTable := v1 system				tableNamed: tableName				ifNone: [self assert: false description: 'Expected to find table ', tableName].			session platform refreshTable: aTable withMetadataSession: metadataSession]].	session migrateFromSystem: v1 system toSystem: v2 system.	self checkDatabaseMatchesMetadata: v2</body><body package="GlorpMigrationTests">defaultTableNamesForTesting	^ #('TEST_BANK_ACCT' 'TEST_ACCT_HOLDER')</body><body package="GlorpMigrationTests">descriptorClassFor: anInteger	^(Dialect smalltalkAt: (self baseDescriptorClassName, anInteger printString))</body><body package="GlorpMigrationTests">descriptorFor: aNumber	^(v1 := self sessionFor: aNumber) system</body><body package="GlorpMigrationTests">destinationSystemFor: aNumber	^(v2 := self sessionFor: aNumber) system</body><body package="GlorpMigrationTests">forcePackageWhile: aBlock 	| package |	package := Store.Registry packageNamedOrCreate: '(none)'.	Store.Policies packagePolicy forcePackage: package  while: aBlock</body><body package="GlorpMigrationTests">sessionFor: anInteger	^(self descriptorClassFor: anInteger) sessionForLogin: session currentLogin</body><body package="GlorpMigrationTests">sourceSystemFor: aNumber	^ self		sourceSystemFor: aNumber		recreateTables: false</body><body package="GlorpMigrationTests">sourceSystemFor: aNumber recreateTables: recreateTables	v1 := self sessionFor: aNumber.	v1 login.	recreateTables ifTrue: [ v1 recreateTables ].	self checkDatabaseMatchesMetadata: v1.	v1 system initialize.	metadataSession reset.	^v1 system</body><body package="GlorpMigrationTests">tableNameForTesting	^'TEST_BANK_ACCT'.</body><body package="GlorpMigrationTests">tableNamesForTesting	^tableNamesForTesting ifNil: [tableNamesForTesting  := self defaultTableNamesForTesting ]</body><body package="GlorpMigrationTests">tableNamesForTesting: aCollection		tableNamesForTesting := aCollection</body></methods><methods><class-id>GlorpMigrationTests.MigrationTest</class-id> <category>tests - migration</category><body package="GlorpMigrationTests">migrateFrom: version1 to: version2 	self migrateFrom: version1 to: version2 beforeMigrateDo: nil</body><body package="GlorpMigrationTests">migrateFrom: version1 to: version2 beforeMigrateDo: aBlock	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: version1 recreateTables: true.	descriptor2 := self destinationSystemFor: version2.	aBlock ifNotNil: [ aBlock value: descriptor1].	[self forcePackageWhile: [ descriptor1 createScriptAndMigrateTo: descriptor2 ].		] ensure: [ descriptor1 class removeSelector: (descriptor1 defaultDeltaScriptSelectorFor: descriptor2) asSymbol].	self checkDatabaseMatchesMetadata: v2.</body><body package="GlorpMigrationTests">testAddDropFieldToFromPrimaryKeyV43V44" the primary key is referenced in a foreign key""ALTER TABLE PUBLIC.TEST_ACCT_HOLDER  ADD  COLUMN TEST_BANK_ACCT_BANK_CODE character varying(10)  NULL ALTER TABLE PUBLIC.TEST_ACCT_HOLDER DROP CONSTRAINT TEST_ACCT__TO_test_bank__REF1ALTER TABLE PUBLIC.TEST_BANK_ACCT DROP CONSTRAINT test_bank_acct_PKALTER TABLE PUBLIC.TEST_ACCT_HOLDER DROP CONSTRAINT test_acct_holder_PKALTER TABLE PUBLIC.TEST_BANK_ACCT ADD CONSTRAINT test_bank_acct_PK PRIMARY KEY  (ID,BANK_CODE), ADD CONSTRAINT test_bank_acct_UNIQ UNIQUE  (ID,BANK_CODE)ALTER TABLE PUBLIC.TEST_ACCT_HOLDER ADD CONSTRAINT test_acct_holder_PK PRIMARY KEY  (ID), ADD CONSTRAINT test_acct_holder_UNIQ UNIQUE  (ID)ALTER TABLE PUBLIC.TEST_ACCT_HOLDER ADD CONSTRAINT TEST_ACCT__TO_test_bank__REF1 FOREIGN KEY (TEST_BANK_ACCT_ID,TEST_BANK_ACCT_BANK_CODE) REFERENCES public.test_bank_acct (ID,BANK_CODE)"	self migrateFrom: 43 to: 44.</body><body package="GlorpMigrationTests">testAddDropFieldToFromPrimaryKeyV44V45	self migrateFrom: 44 to: 45</body><body package="GlorpMigrationTests">testAddDropFieldToFromPrimaryKeyV45V46	self migrateFrom: 45 to: 46</body><body package="GlorpMigrationTests">testAddFieldAndCopyDataV1V2	| result |	self 		migrateFrom: 1 		to: 2 		beforeMigrateDo: [ :descriptor1 | descriptor1 createTestRows].	v2 accessor login.	[result := v2 accessor executeSQLString: 'SELECT * FROM  TEST_BANK_ACCT'.	self assert: result size = 2.	self assert: (result first printString =  '#(1 ''004'' 101010 ''0123456789'' nil)' ).	self assert: (result last printString =   '#(2 ''004'' 101010 ''1234567890'' nil)').	result := v2 accessor executeSQLString: 'SELECT * FROM  TEST_ACCT_HOLDER'.	self assert: result size = 3.	self assert: (result first printString =   '#(1 ''Yogi Berra'' 1)' ).	self assert: (result last printString =   '#(3 ''Albert Einstein'' 2)' ).	] ensure: [ v2 accessor logout]</body><body package="GlorpMigrationTests">testAddFieldToPrimaryKeyV4V43" the primary key is not referenced in a foreign key"	self migrateFrom: 4 to: 43.</body><body package="GlorpMigrationTests">testAddForeignKeyConstraintsV3V4	| constraints |	constraints := metadataSession read: ForeignKeyConstraint where: [:constraint | 			(constraint tableName asUppercase = 'TEST_ACCT_HOLDER') 				AND: [constraint type = metadataSession system foreignKeyConstraintTypeString]].	self assert: constraints size = 0.	self migrateFrom: 3 to: 4. 	constraints := metadataSession read: ForeignKeyConstraint where: [:constraint | 			(constraint tableName asUppercase = 'TEST_ACCT_HOLDER') 				AND: [constraint type = metadataSession system foreignKeyConstraintTypeString]].	self assert: constraints size = 1.	self assert: ( constraints first  name asLowercase = 'test_acct__to_test_bank__ref1').</body><body package="GlorpMigrationTests">testAddPrimaryKeyConstraintsV7V8	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: 7 recreateTables: true.	descriptor2 := self destinationSystemFor: 8.	self forcePackageWhile: [ descriptor1 migrateTo: descriptor2 ].	self checkDatabaseMatchesMetadata: v2.</body><body package="GlorpMigrationTests">testAlterFieldV9V10	self migrateFrom: 9 to: 10.</body><body package="GlorpMigrationTests">testAlterPrimaryKeyFieldV4V41" the primary key is not referenced in a foreign key""ALTER TABLE TEST_ACCT_HOLDER ALTER COLUMN ID  TYPE double precisionALTER TABLE TEST_ACCT_HOLDER DROP CONSTRAINT TEST_ACCT_HOLDER_PKALTER TABLE TEST_ACCT_HOLDER ADD CONSTRAINT TEST_ACCT_HOLDER_PK PRIMARY KEY  (ID), ADD CONSTRAINT TEST_ACCT_HOLDER_UNIQ UNIQUE  (ID)"	self migrateFrom: 4 to: 41.</body><body package="GlorpMigrationTests">testAlterPrimaryKeyFieldV4V42	"This test migrates from		fkey(int) -&gt; pkey(int)to		fkey(int) -&gt; pkey(float)Skip this test for SQL Server, MySQL, Oracle - it has never worked on those platforms.  This test fails on SQL Server with the message:		dbo.TEST_BANK_ACCT.ID is not the same data type as referencing column TEST_ACCT_HOLDER.TEST_BANK_ACCT_ID		in foreign key ''TEST_ACCT__TO_TEST_BANK__REF1.	the primary key is referenced in a foreign keyALTER TABLE TEST_BANK_ACCT ALTER COLUMN ID  TYPE double precisionALTER TABLE TEST_ACCT_HOLDER DROP CONSTRAINT TEST_ACCT__TO_TEST_BANK__REF1ALTER TABLE TEST_BANK_ACCT DROP CONSTRAINT TEST_BANK_ACCT_PKALTER TABLE TEST_BANK_ACCT ADD CONSTRAINT TEST_BANK_ACCT_PK PRIMARY KEY  (ID), ADD CONSTRAINT TEST_BANK_ACCT_UNIQ UNIQUE  (ID)ALTER TABLE PUBLIC.TEST_ACCT_HOLDER ADD CONSTRAINT TEST_ACCT__TO_test_bank__REF1 FOREIGN KEY (TEST_BANK_ACCT_ID) REFERENCES public.test_bank_acct (ID)"	((Array with: SQLServerPlatform with: MySQLPlatform with: OraclePlatform) includes: ((self sessionFor: 4) platform class))		ifFalse: [self migrateFrom: 4 to: 42]		ifTrue: [Transcript cr; show: 'Skipped ', self class name, '&gt;&gt;testAlterPrimaryKeyFieldV4V42 on ', (self sessionFor: 4) platform class name; cr].</body><body package="GlorpMigrationTests">testCalculatingChangeSetErrorV10V101	| descriptor1 descriptor2 |	v1 := self sessionFor: 10.	v1 login.	v1 system initialize.	metadataSession reset.	descriptor1 := v1 system.	descriptor2 := self destinationSystemFor: 101.	[ descriptor1 migrateTo: descriptor2.	self assert: false]		on: Glorp.Migration.CalculatingChangeSetError do: [ :ex |  				self assert: ('The databaseSchemas TestDescriptorSystemV10 and TestDescriptorSystemV101 are not in a direct migration path*' match: ex messageText  )].</body><body package="GlorpMigrationTests">testCreateDataV1V2V6	| descriptor1 descriptorX descriptor6 |	descriptor1 := self sourceSystemFor: 1 recreateTables: true.	descriptorX := self destinationSystemFor: 2.	descriptor1 createTestRows.	descriptor1		migrateTo: descriptorX		using: #migrateAndPopulateBalanceToV2:.	self		checkDatabaseTables: #('TEST_BANK_ACCT' 'TEST_ACCT_HOLDER')		matchMetadata: v2.	descriptorX := self sourceSystemFor: 2 recreateTables: false.	descriptor6 := self destinationSystemFor: 6.	descriptorX		migrateTo: descriptor6		using: #migrateAndCopyDataToV6:.	self		checkDatabaseTables: #('TEST_BANK_ACCT' 'TEST_ACCT_HOLDER_OLD' 'TEST_ACCT_HOLDER_NEW')		matchMetadata: v2.</body><body package="GlorpMigrationTests">testCreateTableV1V102	| descriptor1 descriptor2  |	tableNamesForTesting  := OrderedCollection with: 'TEST_BANK_ACCT'.	descriptor1 := self sourceSystemFor: 102 recreateTables: true.	descriptor2 := self destinationSystemFor: 103.	descriptor1 migrateTo: descriptor2.	tableNamesForTesting  := self defaultTableNamesForTesting.	self checkDatabaseMatchesMetadata: v2.	self assert: ('*(TEST_ACCT_HOLDER_ID_seq)*' match: v2 system allSequences printString).	self assert: ('*(TEST_BANK_ACCT_ID_seq)*' match: v2 system allSequences printString)</body><body package="GlorpMigrationTests">testDropForeignKeyConstraintsV4V3	| constraints |	self migrateFrom: 4 to: 3.	constraints := metadataSession read: ForeignKeyConstraint where: [:constraint | 			(constraint tableName asUppercase = 'TEST_ACCT_HOLDER')				AND: [constraint type = metadataSession system foreignKeyConstraintTypeString]].		self assert: constraints size = 0.</body><body package="GlorpMigrationTests">testDropTableV103V102	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: 103 recreateTables: true.	descriptor2 := self destinationSystemFor: 102.	descriptor1 migrateTo: descriptor2.	self checkDatabaseTables: #('TEST_BANK_ACCT' ) matchMetadata: v2.</body><body package="GlorpMigrationTests">testExceptionV1V2	| descriptor1 descriptor2 |	descriptor1 := self sourceSystemFor: 1 recreateTables: true.	descriptor2 := self destinationSystemFor: 2.	descriptor1 createTestRows.	[ descriptor1			migrateTo: descriptor2			using: #migrateWithExceptionToV2:.	self assert: false]		on: Glorp.Migration.MigrationError do: [ :ex | 				self assert: ('Can not execute the script line: 	migration populateFieldNamed: ''BALANCE'' inTableNamed: ''TEST_BANK_ACCT'' with: Dictionary (''bogusKey''*-&gt;*''some object that should not be possible to insert'' ).Message not understood: #asNumber'  match: ex messageText) ]."Testing database error:The #messageText should return on Postgres:PostgreSQLErrorERROR:  column balance of relation test_bank_acct already exists"	[ descriptor1			migrateTo: descriptor2			using: #migrateWithExceptionToV2:.	self assert: false]		on: Glorp.Migration.MigrationError do: [ :ex | 				self assert: ('Can not execute the script line: 	migration addFieldNamed: ''BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.*'  match: ex messageText) ].	self		checkDatabaseTables: #('TEST_BANK_ACCT' 'TEST_ACCT_HOLDER')		matchMetadata: v2.</body><body package="GlorpMigrationTests">testMigrateFromV1ToV4	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: 1 recreateTables: true.	descriptor2 := self destinationSystemFor: 4.	descriptor1 migrateTo: descriptor2.	self checkDatabaseMatchesMetadata: v2.</body><body package="GlorpMigrationTests">testMigrateFromV3V1	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: 3 recreateTables: true.	descriptor2 := self destinationSystemFor: 1.	descriptor1 migrateTo: descriptor2.	self checkDatabaseMatchesMetadata: v2.</body><body package="GlorpMigrationTests">testMigrateFromV4ToV602	| descriptor1 descriptor2  table |	descriptor1 := self sourceSystemFor: 4 recreateTables: true.	descriptor2 := self destinationSystemFor: 602.	descriptor1 migrateTo: descriptor2.	metadataSession reset.	self checkTable: 'TEST_BANK_ACCT'  matchesMetadata: v2.	table := metadataSession readOneOf: DatabaseTable where: [:each | each name asUppercase = 'TEST_ACCT_HOLDER'].	self assert: table isNil.</body><body package="GlorpMigrationTests">testMigrateFromV4ToV603	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: 4 recreateTables: true.	descriptor2 := self destinationSystemFor: 603.	descriptor1 migrateTo: descriptor2. 	metadataSession reset.	self checkTable: 'TEST_BANK_ACCT'  matchesMetadata: v2.	self assert: (metadataSession readOneOf: DatabaseTable where: [:each | each name asUppercase = 'TEST_ACCT_HOLDER']) isNil.</body><body package="GlorpMigrationTests">testMigrateFromV4ToV603UsingErrorScript	| descriptor1  descriptor6 |	descriptor1 := self sourceSystemFor: 4 recreateTables: true.	descriptor6 := self destinationSystemFor: 603.	[descriptor1 migrateTo: descriptor6 using: #errorScriptV603:.	self assert: false]		on: Glorp.Migration.ScriptErrors		do: [ :ex | self assert: ( 'Errors in #errorScriptV603: scriptDestination schema: TestDescriptorSystemV603 error: No table initializer found for a Glorp.DatabaseTable(TEST_ACCT_HOLDER_NEW)Destination schema: TestDescriptorSystemV603 error: No table initializer found for a Glorp.DatabaseTable(TEST_ACCT_HOLDER_OLD)The field named OPEN_BALANCE does not existThe field named CLOSE_BALANCE does not existSource schema: TestDescriptorSystemV4 error: No table initializer found for a Glorp.DatabaseTable(TEST_ACCT_HOLDER_OLD)Source schema: TestDescriptorSystemV4 error: No table initializer found for a Glorp.DatabaseTable(TEST_ACCT_HOLDER_NEW)The field named CLOSE_BALANCEX does not existThe field named ACCT_DESCRIPTION does not existThe field named ACCT_DESCRIPTION does not existThe field named OPEN_BALANCE does not existThe field named CLOSE_BALANCEX does not existThe field named CLOSE_BALANCE does not existThe field named ACCT_DESCRIPTION does not exist*' match: ex description )].</body><body package="GlorpMigrationTests">testMigrateFromV4ToV603UsingScript	| descriptor1  descriptor6 |	descriptor1 := self sourceSystemFor: 4 recreateTables: true.	descriptor6 := self destinationSystemFor: 603.	descriptor1 	migrateTo: descriptor6 using: #scriptV603:.	self checkDatabaseTables: #('TEST_BANK_ACCT' ) matchMetadata: v2.</body><body package="GlorpMigrationTests">testMigrateFromV5ToV62	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: 5 recreateTables: true.	descriptor2 := self destinationSystemFor: 62.	[descriptor1 migrateTo: descriptor2.	self assert: false]		on: Glorp.Migration.ScriptErrors do: [ :ex | 				self assert: ('*The field named BALANCE does not existThe field named OPEN_BALANCEX does not existfield CLOSE_BALANCE already exists*' match: ex messageText  )].</body><body package="GlorpMigrationTests">testMigrationWithoutScriptV2V3	| descriptor1 descriptor2  |	descriptor1 := self sourceSystemFor: 2 recreateTables: true.	descriptor2 := self destinationSystemFor: 3.	descriptor1 migrateTo: descriptor2.	self checkDatabaseMatchesMetadata: v2.</body><body package="GlorpMigrationTests">testScriptErrorsV1V2	| descriptor1 descriptor2 |	descriptor1 := self sourceSystemFor: 1 recreateTables: true.	descriptor2 := self destinationSystemFor: 2.	descriptor1 createTestRows.	[ descriptor1			migrateTo: descriptor2			using: #migrateWithScriptErrorsToV2:.	self assert: false]		on: Glorp.Migration.ScriptErrors do: [ :ex |  				self assert: ('Errors in #migrateWithScriptErrorsToV2: scriptThe field named BALANCEXX does not existDestination schema: TestDescriptorSystemV2 error: No table initializer found for a Glorp.DatabaseTable(TEST_BANK_ACCTXXX)' match: ex messageText )].</body><body package="GlorpMigrationTests">testSynchonizeDBTablesWithV201	|  migrationChangeSet |	v1 := self sessionFor: 201.	v1 login; recreateTables.	v1 system initialize.	metadataSession reset.	migrationChangeSet := v1 system calculateSynchronizeChangeSet.	self assert: migrationChangeSet operations isEmpty</body></methods><methods><class-id>GlorpMigrationTests.MigrationTest</class-id> <category>tests - scripts</category><body package="GlorpMigrationTests">createDefaultDeltaScriptFrom: firstVersion to: secondVersion	self createDefaultDeltaScriptFrom: firstVersion to: secondVersion validateScript: nil</body><body package="GlorpMigrationTests">createDefaultDeltaScriptFrom: firstVersion to: secondVersion validateScript: aBlock	| descriptor1 descriptor2 pragma |	v1 := self sessionFor: firstVersion.	v2 := self sessionFor: secondVersion.	descriptor1 := v1 system.	descriptor2 := v2 system.	self forcePackageWhile: [		[self assert: (pragma := descriptor1 createDefaultMigrationScript: self migrationSelector  for: descriptor2) notNil.		self assert: pragma method getSource string isNotEmpty.		aBlock ifNotNil: [ aBlock value: pragma method getSource string].		self assert: (descriptor1 respondsTo: self migrationSelector )			] ensure: [descriptor1 class removeSelector: self migrationSelector ] ]</body><body package="GlorpMigrationTests">testCreateDefaultDeltaScripts	2 to: 6 do: [ :version |		self createDefaultDeltaScriptFrom: 1 to: version].	2 to: 5 do: [ :version |		self createDefaultDeltaScriptFrom: version to: version + 1 ]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV1ToV2	self 		createDefaultDeltaScriptFrom: 1 		to: 2 		validateScript: [ :script | '*aMigrationChangeSet addFieldNamed: ''BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.*' match: script		]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV1ToV3	self 		createDefaultDeltaScriptFrom: 1 		to: 3 		validateScript: [ :script | '*aMigrationChangeSet dropFieldNamed: ''BRANCH_NO'' fromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addFieldNamed: ''BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.*' match: script		]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV1ToV4	self 		createDefaultDeltaScriptFrom: 1 		to: 4 		validateScript: [ :script | '*aMigrationChangeSet dropFieldNamed: ''BRANCH_NO'' fromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addFieldNamed: ''BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addForeignKeyFromTable: ''TEST_ACCT_HOLDER'' fromField: ''TEST_BANK_ACCT_ID'' toTable: ''TEST_BANK_ACCT'' toField: ''ID''.*' match: script ]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV1ToV5	self 		createDefaultDeltaScriptFrom: 1 		to: 5 		validateScript: [ :script | '*aMigrationChangeSet createTableNamed: ''TEST_ACCT_HOLDER_NEW''.	aMigrationChangeSet addFieldNamed: ''BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.*' match: script ]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV1ToV6	self 		createDefaultDeltaScriptFrom: 1 		to: 6 		validateScript: [ :script | '*aMigrationChangeSet createTableNamed: ''TEST_ACCT_HOLDER_NEW''.	aMigrationChangeSet addFieldNamed: ''OPEN_BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addFieldNamed: ''CLOSE_BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.*' match: script ]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV2ToV6	self 		createDefaultDeltaScriptFrom: 2 		to: 6 		validateScript: [ :script | '*aMigrationChangeSet createTableNamed: ''TEST_ACCT_HOLDER_NEW''.	aMigrationChangeSet dropFieldNamed: ''BALANCE'' fromTableNamed: ''test_bank_acct''.	aMigrationChangeSet addFieldNamed: ''OPEN_BALANCE'' toTableNamed: ''test_bank_acct''.	aMigrationChangeSet addFieldNamed: ''CLOSE_BALANCE'' toTableNamed: ''test_bank_acct''.*' match: script]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV4ToV603	self 		createDefaultDeltaScriptFrom: 4 		to: 603		validateScript: [ :script | self assert: ( 'testSomeMigrateScriptSelector: aMigrationChangeSet	&lt;migrationScriptTo: #TestDescriptorSystemV603&gt;	aMigrationChangeSet operationsFrom: ''GlorpMigrationTests.TestDescriptorSystemV4'' to: ''GlorpMigrationTests.TestDescriptorSystemV601''.	aMigrationChangeSet addFieldNamed: ''BRANCH_NO'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addFieldNamed: ''OPEN_BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addFieldNamed: ''CLOSE_BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet createTableNamed: ''TEST_ACCT_HOLDER_NEW''.	aMigrationChangeSet createTableNamed: ''TEST_ACCT_HOLDER_OLD''.	aMigrationChangeSet dropTableNamed: ''TEST_ACCT_HOLDER''.	aMigrationChangeSet dropFieldNamed: ''BALANCE'' fromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet operationsFrom: ''GlorpMigrationTests.TestDescriptorSystemV601'' to: ''GlorpMigrationTests.TestDescriptorSystemV602''.	aMigrationChangeSet dropTableNamed: ''TEST_ACCT_HOLDER_OLD''.	aMigrationChangeSet dropTableNamed: ''TEST_ACCT_HOLDER_NEW''.	aMigrationChangeSet addFieldNamed: ''CLOSE_BALANCEX'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addFieldNamed: ''ACCT_DESCRIPTION'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet copyDataFromFieldNamed: ''ACCT_NO'' toFieldNamed: ''ACCT_DESCRIPTION'' inTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet dropFieldNamed: ''ACCT_NO'' fromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet operationsFrom: ''GlorpMigrationTests.TestDescriptorSystemV602'' to: ''GlorpMigrationTests.TestDescriptorSystemV603''.	aMigrationChangeSet dropFieldNamed: ''OPEN_BALANCE'' fromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet dropFieldNamed: ''CLOSE_BALANCEX'' fromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet dropFieldNamed: ''CLOSE_BALANCE'' fromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet dropFieldNamed: ''ACCT_DESCRIPTION'' fromTableNamed: ''TEST_BANK_ACCT''.'  match: script ) ]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV5ToV6	self 		createDefaultDeltaScriptFrom: 5 		to: 6 		validateScript: [ :script | '*aMigrationChangeSet createTableNamed: ''TEST_ACCT_HOLDER_NEW''.	aMigrationChangeSet addFieldNamed: ''OPEN_BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet addFieldNamed: ''CLOSE_BALANCE'' toTableNamed: ''TEST_BANK_ACCT''.*' match: script ]</body><body package="GlorpMigrationTests">testCreateDeltaScriptV7ToV8	self 		createDefaultDeltaScriptFrom: 7 		to: 8		validateScript: [ :script | 	self assert:('testSomeMigrateScriptSelector: aMigrationChangeSet	&lt;migrationScriptTo: #TestDescriptorSystemV8&gt;	aMigrationChangeSet dropPrimaryKeyFromTableNamed: ''TEST_BANK_ACCT''.	aMigrationChangeSet setAsPrimaryKeyFieldNamed:  ''ID'' inTableNamed: ''TEST_ACCT_HOLDER'' .' match: script ) ]</body><body package="GlorpMigrationTests">testEmptyScriptV201ToV202	self 		createDefaultDeltaScriptFrom: 201 		to: 202 		validateScript: [ :script | self assert: script = 'testSomeMigrateScriptSelector: aMigrationChangeSet	&lt;migrationScriptTo: #TestDescriptorSystemV202&gt;' ]</body></methods><methods><class-id>GlorpMigrationTests.MigrationTest</class-id> <category>Running</category><body package="GlorpMigrationTests">setUp		super setUp.	session := (TestDescriptorSystemV1 forPlatform: GlorpDatabaseLoginResource defaultLogin database)		sessionForLogin: GlorpDatabaseLoginResource current login.	session login.	metadataSession := MetadataDescriptorSystem sessionForLogin:  session accessor currentLogin.	metadataSession accessor:  session accessor.	metadataSession isLoggedIn ifFalse: [metadataSession login].</body><body package="GlorpMigrationTests">tearDown	v2 ifNotNil: [		v2 login.		v2 dropTables.		v2 logout].	super tearDown.	session isNil ifFalse: [ 		session reset.  		session system initialize].	v1 ifNotNil: [v1 logout ]</body></methods><methods><class-id>GlorpMigrationTests.MigrationTest</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationSelector	^#'testSomeMigrateScriptSelector:'</body></methods><methods><class-id>GlorpMigrationTests.MigrationTest class</class-id> <category>resources</category><body package="GlorpMigrationTests">resources		^Array with: MigrationSessionResource</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV103</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	(aTable createFieldNamed: 'ID' type: platform serial ) bePrimaryKey.	aTable createFieldNamed: 'NAME' type: (platform varchar: 255).	aTable createFieldNamed: 'TEST_BANK_ACCT_ID' type: platform integer.</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'ID' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).	aTable createFieldNamed: 'ACCT_NO' type: (platform varChar: 10).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV103 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV102</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV9</class-id> <category>tables</category><body package="GlorpMigrationTests">tableForTEST_ACCT_HOLDER: aTable	| f f1 |	(aTable createFieldNamed: 'ID' type: platform integer) bePrimaryKey.	f := DatabaseField named: 'NAME' type: ( platform varchar: 10).	f beNullable: true.	"f	isUnique: true."	aTable addField: f.	f1 := DatabaseField named: 'SSN' type: ( platform integer).	f1 beNullable: false.	aTable addField: f1.	aTable createFieldNamed: 'ADDRESS' type: ( platform varchar: 10). 	aTable createFieldNamed: 'ACCOUNT_NUMBER' type: ( platform integer).</body><body package="GlorpMigrationTests">tableForTEST_BANK_ACCT: aTable	(aTable createFieldNamed: 'BANK_ID' type: platform integer) bePrimaryKey.	aTable createFieldNamed: 'BANK_CODE' type: (platform varChar: 10).	aTable createFieldNamed: 'BRANCH_NO' type: (platform integer).</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV9 class</class-id> <category>accessing</category><body package="GlorpMigrationTests">migrationAncestor	"The schema ancestor. The method is used in the schema migration "	^TestDescriptorSystemV8</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV61</class-id> <category>migration scripts</category><body package="GlorpMigrationTests">migrateScriptForTestDescriptorSystemV62: aMigrationChangeSet	&lt;migrationScriptTo: #TestDescriptorSystemV62&gt;	" Generated by TestDescriptorSystemV5 on August 5, 2008 15:45:43.988 "	aMigrationChangeSet dropTableNamed: 'TEST_ACCT_HOLDER_OLD'.	aMigrationChangeSet		dropFieldNamed: 'BALANCE'		fromTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		addFieldNamed: 'OPEN_BALANCEX'		toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet		createFieldNamed: 'CLOSE_BALANCE'		type: (platform varChar: 10)		inTableNamed: 'TEST_BANK_ACCT'.</body></methods><methods><class-id>GlorpMigrationTests.TestDescriptorSystemV601</class-id> <category>migration scripts</category><body package="GlorpMigrationTests">migrateScriptForTestDescriptorSystemV602: aMigrationChangeSet	&lt;migrationScriptTo: #TestDescriptorSystemV602&gt;	" Generated by TestDescriptorSystemV5 on August 5, 2008 15:45:43.988 "	aMigrationChangeSet dropTableNamed: 'TEST_ACCT_HOLDER_OLD'.	aMigrationChangeSet dropTableNamed: 'TEST_ACCT_HOLDER_NEW'.	aMigrationChangeSet addFieldNamed: 'CLOSE_BALANCEX' toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet addFieldNamed: 'ACCT_DESCRIPTION' toTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet copyDataFromFieldNamed: 'ACCT_NO' toFieldNamed: 'ACCT_DESCRIPTION' inTableNamed: 'TEST_BANK_ACCT'.	aMigrationChangeSet dropFieldNamed: 'ACCT_NO' fromTableNamed: 'TEST_BANK_ACCT'.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>GlorpSessionResource</name><environment>Glorp</environment><super>XProgramming.SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpTest</category><attributes><package>GlorpDBTests</package></attributes></class><class><name>DescriptorSystem</name><environment>Glorp</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session platform descriptors tables sequences typeResolvers cachePolicy allClasses useDirectAccessForMapping classModels useJoinsForAnySatisfy </inst-vars><class-inst-vars>validateDescriptorSystem </class-inst-vars><imports></imports><category>Glorp</category><attributes><package>GlorpMappings</package></attributes></class><class><name>ActiveRecordDescriptorSystem</name><environment>Glorp.ActiveRecords</environment><super>Glorp.DescriptorSystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metadataSession inflector currentDescriptor deferredDescriptorOperations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GlorpActiveRecord</category><attributes><package>GlorpActiveRecord</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>