<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd" [

<!-- Begin Document Specific Declarations -->

<!-- End Document Specific Declarations -->

]>

<dita>
<topic id = "vw.help.inetClient.imap"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>IMAP</title>
<topic id = "vw.help.inetClient.imap.getMailboxCount"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Determine the number of messages in the inbox</title>
<body><p><indexterm>imap<indexterm>get number of messages</indexterm></indexterm>The
following code determines the number of messages in the inbox mailbox
of user <codeph>jdoe@abc.com</codeph>. The password for <codeph>jdoe@abc.com</codeph> is <codeph>passwordforjoe</codeph>.</p>
<p>The IMAP host name is <codeph>mail.yourserver.com</codeph>. The
name could also be just machine name (for example, POSTMAN) if the
network resolves its full name, or its IP address.</p>
<p>Even though the <apiname>IMAPClient</apiname> object uses inbox
as the default mailbox location, you are required to select one.</p>
<p>When all processing on the mailbox is concluded, you are required
to <apiname>logout</apiname> from the connection. 
<codeblock otherprops="smalltalk expression">| client |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
Dialog warn: 'Your inbox contains ', client messageCount printString , 
	' message(s)'.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.mailboxStatus"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Get mailbox status information</title>
<body><p><indexterm>imap<indexterm>get mailbox status</indexterm></indexterm>The
following code determines the number of messages in the <codeph>xxxxxx</codeph> mailbox:
<codeblock otherprops="smalltalk expression">| client |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
(client status: 'xxxxxx' criteria: 'messages') inspect. 
client logout.</codeblock></p>
<p>To get multiple status items, pass an
array of criteria:
<codeblock otherprops="smalltalk expression">client status: 'xxxxxx' criteria: #('messages' 'unseen').</codeblock></p>
<p>There are a large number of possible criteria supported by IMAP. Refer
to RFC 2060 for the full list.</p></body></topic>
<topic id = "vw.help.inetClient.imap.createMailbox"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Create a new mailbox</title>
<body><p><indexterm>imap<indexterm>create mailbox</indexterm></indexterm>The
following code creates a new mailbox called <b>WOW</b>:
<codeblock otherprops="smalltalk expression">| client |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client create: 'WOW'.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.renameMailbox"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Rename a mailbox</title>
<body><p><indexterm>imap<indexterm>rename mailbox</indexterm></indexterm>The
following code renames the <codeph>WOW</codeph> mailbox as <codeph>WOW2</codeph>:
<codeblock otherprops="smalltalk expression">| client |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client rename: 'WOW' newName: 'WOW2'. 
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.copyMessage"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Copy a message from one mailbox to another</title>
<body><p><indexterm>imap<indexterm>copy message</indexterm></indexterm>The
following code copies message #1 from inbox to the <b>WOW2</b> mailbox.
The message will remain in the . To implement a "move", copy the
message, then delete it from its original mailbox.
<codeblock otherprops="smalltalk expression">| client |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
client copy: #(1) to: 'WOW2'. 
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.deleteMailbox"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Delete a mailbox</title>
<body><p><indexterm>imap<indexterm>delete mailbox</indexterm></indexterm>The
following code deletes the mailbox called <b>WOW2</b>. The folder need
not be empty. Any messages in the folder will be deleted as well.
<codeblock otherprops="smalltalk expression">| client |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client delete: 'WOW2'.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.readMessage"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Read a message from the "inbox"</title>
<body><p><indexterm>imap<indexterm>read message</indexterm></indexterm>The
following code reads message #1 from the inbox. The <apiname>fetchMessage:</apiname> method
returns a <apiname>Dictionary</apiname> containing a key and a ByteString
(which is inspected). The <apiname>ByteString</apiname> is then read
in as a stream to the <b>MailMessage</b> object (which is also inspected).
This practice will also be used in later examples. The text of the
message is then inspected.
<codeblock otherprops="smalltalk expression">| client message messageString |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
(client fetchMessage: 1) inspect.
messageString := ((client fetchMessage: 1) value first).
message := MailMessage readFrom: messageString readStream. 
message inspect. 
" just the text "
message text inspect. 
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.checkAttach"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Determine if there are any attachments to a message</title>
<body><p><indexterm>imap<indexterm>check for attachments</indexterm></indexterm>The
following code determines if any attachments were included as part
of message #1:
<codeblock otherprops="smalltalk expression">| client message messageString list |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
messageString := ((client fetchMessage: 1) value first).
message := MailMessage readFrom: messageString readStream. 
list := message attachmentNames.
list inspect.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.saveAttachment"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Save an attachment</title>
<body><p><indexterm>imap<indexterm>save attachment</indexterm></indexterm>The
following code assumes that at least one attachment was included
as part of the entire message. The first attachment (in case there
is more than one) is then saved to an external file.
<codeblock otherprops="smalltalk expression">| client message messageString attachment |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
messageString := ((client fetchMessage: 1) value first).
message := MailMessage readFrom: messageString readStream. 
attachment := message attachmentAt: 1.
attachment removeContentTransferEncoding.
attachment writeContentsOn: ('filename.whatever' asFilename writeStream).
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.bestText"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Extract best text representation</title>
<body><p><indexterm>imap<indexterm>get best text</indexterm></indexterm>Some
SMTP servers, such as Microsoft's Exchange server, will take an
existing (simple) message and send it out in multiple parts:  plain text
and HTML. The following code assumes that message #42 is in multi-part
format and demonstrates how the message can be extracted in those
two formats.
<codeblock otherprops="smalltalk expression">| client message messageString text1 text2 |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
messageString := ((client fetchMessage: 42) value first).
message := MailMessage readFrom: messageString readStream. 
text1 := message textInPreferenceOrder: #('html' 'plain' '*').
text1 inspect.
text2 := message textInPreferenceOrder: #('plain' 'html' '*').
text2 inspect.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.messageInfo"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Extract message information</title>
<body><p><indexterm>imap<indexterm>get message information</indexterm></indexterm>The
following code displays parts of the message header in the System
Transcript:
<codeblock otherprops="smalltalk expression">| client message messageString |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
messageString := ((client fetchMessage: 42) value first).
message := MailMessage readFrom: messageString readStream. 
Transcript clear;
 show: 'Charset: ', message charset; cr;
 show: 'Date of message: ', message date printString; cr;
 show: 'From: ', message from printString; cr;
 show: 'Content type: ', message contentType; cr;
 show: 'Type: ', message type; cr;
 show: 'Subtype: ', message subtype; cr;
 show: 'Contents: ', message contents printString; cr.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.parseMultipart"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Parse a multi-part message</title>
<body><p><indexterm>imap<indexterm>parse multi-part message</indexterm></indexterm>The
following code assumes that message #42 is in multi-part format and
inspects the various "parts" of the message:
<codeblock otherprops="smalltalk expression">| client message messageString |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
messageString := ((client fetchMessage: 42) value first).
message := RFC822Message readFrom: messageString readStream.
message parts inspect.
(message parts size) inspect.
((message partAt: 1) contentType) inspect.
((message parts first contents)) inspect.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.fetchHeaders"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Fetch messages and their headers</title>
<body><p><indexterm>imap<indexterm>get headers</indexterm></indexterm>The
following code shows the various ways in which multiple messages
can be fetched:
<codeblock otherprops="smalltalk expression">| client oc1 oc2 oc3 oc4 oc5 |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
oc1 := client fetch: #( 3 8 ) with: #('RFC822'). 
oc2 := client fetchMessages: #( 1 3 ). 
oc3 := client fetchMessageHeaders: #( 1 3 ). 
oc4 := client fetch: #(1 4 5 6 ) with: #(RFC822.SIZE).
oc5 := client fetchMessage: 1.
oc1 inspect.
oc2 inspect.
oc3 inspect.
oc4 inspect.
oc5 inspect.
client logout.</codeblock></p>
<p>A summary of the ways to fetch multiple messages is given here:<dl>
<dlentry><dt>fetchMessage: <option>messageNumber</option></dt>
<dd>Returns an association in which "key" is the message number and
"value" is the message</dd></dlentry>
<dlentry><dt>fetchMessageHeaders: <option>anArrayOfNumbers</option></dt>
<dd>Returns an OrderedCollection of associations in which "key"
is the message number and "value" is the message header.</dd></dlentry>
<dlentry><dt>fetchMessages: <option>anArrayOfNumbers</option></dt>
<dd>Returns an OrderedCollection of associations in which "key"
is the message number and "value" is the message.</dd></dlentry>
<dlentry><dt>fetchRFC822MessageHeaders: <option>anArrayOfNumbers</option></dt>
<dd>Returns an OrderedCollection of associations in which "key"
is the message number and "value" is the message header.</dd></dlentry>
<dlentry><dt>fetchRFC822Messages: <option>anArrayOfNumbers</option></dt>
<dd>Returns an OrderedCollection of associations in which "key"
is the message number and "value" is the message.</dd></dlentry>
<dlentry><dt>fetch: anArrayOfNumbers with: <option>qualifierOrListOfQualifiers</option></dt>
<dd>Returns an OrderedCollection of associations in which "key"
is the message number and "value" is the message.</dd></dlentry></dl></p></body></topic>
<topic id = "vw.help.inetClient.imap.deleteMessage"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Delete a message</title>
<body><p><indexterm>imap<indexterm>delete message</indexterm></indexterm>The
following code shows how to mark a message for deletion as well
as how to actually delete a message:
<codeblock otherprops="smalltalk expression">client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
client markForDelete: #( 2 ).
(client searchMessages: 'deleted') inspect.
client expunge.
(client searchMessages: 'deleted') inspect.
client logout.</codeblock></p></body></topic>
<topic id = "vw.help.inetClient.imap.searchMessages"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Search for messages</title>
<body><p><indexterm>imap<indexterm>search for messages</indexterm></indexterm>The
following code shows the various ways in which messages can be searched
based upon certain criteria:
<codeblock otherprops="smalltalk expression">| client oc1 oc2 oc3 mNumbers |
client := IMAPClient loginToHost: 'mail.yourserver.com'
	asUser: 'jdoe@abc.com' withPassword: 'passwordforjoe'.
client select: 'inbox'.
mNumbers := client searchMessages: 'UNSEEN FROM "Fred"'.
oc1 := client fetchMessages: mNumbers.
oc1 inspect.
mNumbers := client searchMessages: 'BEFORE 1-Feb-1999'.
oc2 := client fetchMessages: mNumbers.
oc2 inspect.
mNumbers := client searchMessages:
'FLAGGED SINCE 1-Feb-1999 NOT FROM "Smith"‘
oc3 := client fetchMessages: mNumbers.
oc3 inspect.
client logout.</codeblock></p></body></topic></topic></dita>
