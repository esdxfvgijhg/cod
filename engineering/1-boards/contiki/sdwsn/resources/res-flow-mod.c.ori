/*
 * Copyright (c) 2013, Institute for Pervasive Computing, ETH Zurich
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 */

/**
 * \file
 *      Flow-mod
 * \author
 *      Matthias Kovatsch <kovatsch@inf.ethz.ch>
 *      Marcio Miguel <marcio.miguel@gmail.com>
 */

#include <stdlib.h>
#include <string.h>
#include "rest-engine.h"
#define DEBUG DEBUG_PRINT
#include "net/ip/uip-debug.h"
#include "res-flow-mod.h"
struct flow_s flow_table[30];

uip_ipaddr_t * get_next_hop_by_flow(uip_ipaddr_t *srcaddress,uip_ipaddr_t *dstaddress,uint16_t *srcport,uint16_t *dstport,uint8_t *proto){
	uip_ipaddr_t ipaddr;
	//PRINTF("\nget_next_hop_by_flow srcaddress:");
	//PRINT6ADDR(srcaddress);
	//PRINTF("\nget_next_hop_by_flow dstaddress:");
	//PRINT6ADDR(dstaddress);
	//PRINTF("\n");
	uip_ip6addr(&ipaddr, 0xfd00, 0, 0, 0, 0x200, 0, 0, 1); //upward traffic

	if(uip_ipaddr_cmp(dstaddress,&ipaddr)){
		return flow_table[2].nhipaddr;
	} else {
		return NULL;
	}
}

static void
flow_mod_handler(void *request, void *response, char *buffer,
		uint16_t preferred_size, int32_t *offset);

RESOURCE(res_flow_mod, "title=\"Flow-mod\";rt=\"Text\"", NULL, //get
		NULL,//post
		flow_mod_handler,//put
		NULL);//delete

static void
flow_mod_handler(void *request, void *response, char *buffer,
		uint16_t preferred_size, int32_t *offset) {
	const char *str = NULL;
	int len = 0;
	static uip_ipaddr_t tmp_addr;
	static int flowid_temp;

	len = REST.get_query(request, &str);
	snprintf((char *) buffer, REST_MAX_CHUNK_SIZE - 1, "%.*s", len, str);
	PRINTF("len %d\n", len); PRINTF("Query-all: %s\n", buffer);

	len = REST.get_query_variable(request, "action", &str);
	snprintf((char *) buffer, REST_MAX_CHUNK_SIZE - 1, "%.*s", len, str);
	PRINTF("action: %s\n", buffer);

	if ((len = REST.get_query_variable(request, "flowid", &str))) {
		snprintf((char *) buffer, REST_MAX_CHUNK_SIZE - 1, "%.*s", len, str);
		flowid_temp=atoi(buffer);
		flow_table[flowid_temp].flowid=flowid_temp;
		PRINTF("flowid: %d\n", flow_table[flowid_temp].flowid);
	}
	if ((len = REST.get_query_variable(request, "ipv6src", &str))) {
		snprintf((char *) buffer, REST_MAX_CHUNK_SIZE - 1, "%.*s", len, str);
		uiplib_ip6addrconv(buffer, &tmp_addr);
		flow_table[flowid_temp].ipv6src=&tmp_addr;
		PRINTF("ipv6src: ");
		PRINT6ADDR(flow_table[flowid_temp].ipv6src);
		PRINTF("\n");
	}
	if ((len = REST.get_query_variable(request, "ipv6dst", &str))) {
		snprintf((char *) buffer, REST_MAX_CHUNK_SIZE - 1, "%.*s", len, str);
		uiplib_ip6addrconv(buffer, &tmp_addr);
		flow_table[flowid_temp].ipv6dst=&tmp_addr;
		PRINTF("ipv6dst: ");
		PRINT6ADDR(flow_table[flowid_temp].ipv6dst);
		PRINTF("\n");
	}
	if ((len = REST.get_query_variable(request, "nhipaddr", &str))) {
		snprintf((char *) buffer, REST_MAX_CHUNK_SIZE - 1, "%.*s", len, str);
		uiplib_ip6addrconv(buffer, &tmp_addr);
		flow_table[flowid_temp].nhipaddr=&tmp_addr;
		PRINTF("nhipaddr: ");
		PRINT6ADDR(flow_table[flowid_temp].nhipaddr);
		PRINTF("\n");
	}
	if ((len = REST.get_query_variable(request, "txpwr", &str))) {
		snprintf((char *) buffer, REST_MAX_CHUNK_SIZE - 1, "%.*s", len, str);
		flow_table[flowid_temp].txpwr=atoi(buffer);
		PRINTF("txpwr: %d\n", flow_table[flowid_temp].txpwr);
	}
	// REST.set_response_status(response, REST.status.CHANGED);
}
