#!/usr/bin/env Rscript
DATAPATH <- Sys.getenv("DATAPATH")

xyplot(y~tempx|varind,data=df1,layout=c(3,1),xlim=c(-2,2),
ylab="Ceramic Strength",xlab="Factor Levels",
main="Batch 1")
## Comute grand mean for batch 1.
ybar = mean(m[ m[,14]==1,5])
## Generate DEX mean plot.
interaction.plot(df1$tempxc,df1$varind,df1$y,fun=mean,
ylab="Ceramic Strength",xlab="",main="Batch 1 Means",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=ybar)
## Comute overall standard deviation for batch 1.
sdy = sd(m[ m[,14]==1,5])
## Generate DEX standard deviation plot.
interaction.plot(df1$tempxc,df1$varind,df1$y,fun=sd,
ylab="Ceramic Strength",xlab="",
main="Batch 1 Standard Deviations",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=sdy)
## Create a dataframe with batch 2 data.
df2 = df[df$batch==2,]
## Attach lattice library and generate the DEX scatter plot.
library(lattice)
xyplot(y~tempx|varind,data=df2,layout=c(3,1),xlim=c(-2,2),
ylab="Ceramic Strength",xlab="Factor Levels",
main="Batch 2")
## Comute grand mean for batch 2.
ybar = mean(m[ m[,14]==2,5])
## Generate DEX mean plot.
interaction.plot(df2$tempxc,df2$varind,df2$y,fun=mean,
ylab="Ceramic Strength",xlab="",main="Batch 2 Means",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=ybar)
## Comute grand mean for batch 2.
sdy = sd(m[ m[,14]==2,5])
## Generate DEX standard deviation plot.
interaction.plot(df2$tempxc,df2$varind,df2$y,fun=sd,
ylab="Ceramic Strength",xlab="",
main="Batch 2 Standard Deviations",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=sdy)
## Create dataframe.
x12 = x1*x2
x13 = x1*x3
x23 = x2*x3
fx1 = factor(x1)
fx2 = factor(x2)
fx3 = factor(x3)
fx12 = factor(x12)
fx13 = factor(x13)
fx23 = factor(x23)
dfip = data.frame(y,batch,fx1,fx2,fx3,fx12,fx13,fx23)
## Create a dataframe for batch 1 data.
dfip1 = dfip[dfip$batch==1,]
## Compute overall batch mean.
ybar1 = mean(dfip1$y)
## Compute effect estimates and factor means.
q = aggregate(x=dfip1$y,by=list(dfip1$fx1),FUN="mean")
x1lo = q[1,2]
x1hi = q[2,2]
e1 = x1lo-x1hi
q = aggregate(x=dfip1$y,by=list(dfip1$fx2),FUN="mean")
x2lo = q[1,2]
x2hi = q[2,2]
e2 = x2lo - x2hi
q = aggregate(x=dfip1$y,by=list(dfip1$fx3),FUN="mean")
x3lo = q[1,2]
x3hi = q[2,2]
e3 = x3lo - x3hi
q = aggregate(x=dfip1$y,by=list(dfip1$fx12),FUN="mean")
x12lo = q[1,2]
x12hi = q[2,2]
e12 = x12lo - x12hi
q = aggregate(x=dfip1$y,by=list(dfip1$fx13),FUN="mean")
x13lo = q[1,2]
x13hi = q[2,2]
e13 = x13lo - x13hi
q = aggregate(x=dfip1$y,by=list(dfip1$fx23),FUN="mean")
x23lo = q[1,2]
x23hi = q[2,2]
e23 = x23lo - x23hi
## Create factor labels from effect values.
e = round(c(e3,e2,e23,e1,e12,e13),2)
textlabs = c("X3 Effect =","X2 Effect =","X2*X3 Effect =",
"X1 Effect =","X1*X2 Effect =","X1*X3 Effect =")
labs = paste(textlabs,e)
group = factor(c(1:6),labels=labs)
## Create data frame with factor level means.
x = c(x3lo,x2lo,x23lo,x1lo,x12lo,x13lo)
xlev = rep(-1,6)
xlo = cbind(x,xlev,group)
x = c(x3hi,x2hi,x23hi,x1hi,x12hi,x13hi)
xlev = rep(1,6)
xhi = cbind(x,xlev,group)
m = rbind(xlo,xhi)
m = as.data.frame(m)
## Customize Lattice plot layout and color.
sp = c(T,T,F,T,F,F,F,F,F)
strip.bg_custom = trellis.par.get("strip.background")
strip.bg_custom$col =c("#cce6ff","#ffe5cc","#ccffcc","#ccffff","#ffccff",
"#ffcccc","#ffffcc")
strip.sh_custom = strip.bg_custom
trellis.par.set("strip.background", strip.bg_custom)
trellis.par.set("strip.shingle", strip.sh_custom)
## Generate plot.
xyplot(x~xlev | group, data=m, type="b", xlim=c(-2,2),
layout=c(3,3), skip=sp, col=c(4),
strip = function(..., style,factor.levels,strip.levels,strip.names)
strip.default(..., style = 1,factor.levels=labs,
strip.levels=c(F,T),strip.names=c(T,F)),
xlab="Factor Level", ylab="Strength", main="Batch 1",
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = ybar1, lty = 2, col = 2)
}
)
## Create a dataframe for batch 2 data.
dfip2 = dfip[dfip$batch==2,]
## Compute overall batch mean.
ybar2 = mean(dfip2$y)
## Compute effect estimates and factor means.
q = aggregate(x=dfip2$y,by=list(dfip2$fx1),FUN="mean")
x1lo = q[1,2]
x1hi = q[2,2]
e1 = x1lo-x1hi
q = aggregate(x=dfip2$y,by=list(dfip2$fx2),FUN="mean")
x2lo = q[1,2]
x2hi = q[2,2]
e2 = x2lo - x2hi
q = aggregate(x=dfip2$y,by=list(dfip2$fx3),FUN="mean")
x3lo = q[1,2]
x3hi = q[2,2]
e3 = x3lo - x3hi
q = aggregate(x=dfip2$y,by=list(dfip2$fx12),FUN="mean")
x12lo = q[1,2]
x12hi = q[2,2]
e12 = x12lo - x12hi
q = aggregate(x=dfip2$y,by=list(dfip2$fx13),FUN="mean")
x13lo = q[1,2]
x13hi = q[2,2]
e13 = x13lo - x13hi
q = aggregate(x=dfip2$y,by=list(dfip2$fx23),FUN="mean")
x23lo = q[1,2]
x23hi = q[2,2]
e23 = x23lo - x23hi
## Create factor labels from effect values.
e = round(c(e3,e2,e23,e1,e12,e13),2)
## Read data from file.
x <- read.table("../res/mass.dat", header=FALSE, skip=4)
## Read data from file.
x <- read.table("../res/mass.dat", header=FALSE, skip=4)
## Read data from file.
x <- read.table("../res/mass.dat", header=FALSE, skip=25)
colnames(x) <- c("date_year", "std_id", "std_value","balance_id",
"std_dev", "design_id")
## Compute pooled standard deviation.
sp=sqrt(mean(x$std_dev^2))
## Determine control limit.
f = sqrt(qf(.99,3,351))
sul = f*sp
## Generate control chart with reference lines.
plot(x$date_year, x$std_dev, cex.sub=0.9,
xlab="Time, years", ylab="Standard Deviation, micrograms",
main="Control Chart for Precision for Balance #12",
sub="Standard deviations with 3 degrees of freedom plotted vs year")
abline(h=sp)
abline(h=sul, lty=2,col="dark green")
text(86,0.072,"Control limit = 0.067 micrograms",cex=0.9)
## Read data from data file.
x <- read.table("../res/mass.dat", header=FALSE, skip=4)
colnames(x) <- c("date_year", "std_id", "std_value","balance_id",
"std_dev", "design_id")
## Read data from data file.
x <- read.table("../res/mass.dat", header=FALSE, skip=24)
## Read data from data file.
x <- read.table("../res/mass.dat", header=FALSE, skip=25)
colnames(x) <- c("date_year", "std_id", "std_value","balance_id",
"std_dev", "design_id")
## Generate control limits based on years prior to 1985.
mn = mean(x[x$date_year<85,3])
std =  sd(x[x$date_year<85,3])
lcl = mn - 3*std
ucl = mn + 3*std
## Generate control chart with reference lines.
par(bg=rgb(1,1,0.8))
plot(x$date_year, x$std_value, ylim=c(-19.6,-19.3),
xlab="Time, years", ylab="Corrections, micrograms",
main="Shewhart control chart for kilogram calibrations")
abline(h=mn)
abline(h=lcl,lty=2,col="dark green")
abline(h=ucl,lty=2,col="dark green")
text(80, ucl+.006, cex=0.8,
paste("UCL = mean + 3s =", round(ucl, digits=2)," micrograms"))
text(80, lcl-.006, cex=0.8,
paste("LCL = mean - 3s =", round(lcl, digits=2)," micrograms"))
## Generate control limits based on years after 1985.
astd =  sd(x[x$date_year#>85,3])
## Generate control limits based on years after 1985.
amn = mean(x[x$date_year>85,3])
astd =  sd(x[x$date_year>85,3])
alcl = amn - 3*astd
aucl = amn + 3*astd
## Define colors for plotting.
color <- rep("black", nrow(x))
color[x[,1] <= 85] <- "black"
color[x[,1] > 85] <- "dark green"
## Generate revised control chart.
par(bg=rgb(1,1,0.8))
plot(x[,1], x[,3], type="p", col=color,
xlim=c(75,90), ylim=c(-19.6,-19.3),
main="Revised control chart for kilogram calibrations",
xlab="Time, years", ylab="Corrections, micrograms")
segments(x0=75,y0=mn,x1=85,y1=mn)
segments(x0=85,y0=amn,x1=90,y1=amn)
segments(x0=75,y0=lcl,x1=85,y1=lcl,lty=2,col="dark green")
segments(x0=85,y0=alcl,x1=90,y1=alcl,lty=2,col="dark green")
segments(x0=75,y0=ucl,x1=85,y1=ucl,lty=2,col="dark green")
segments(x0=85,y0=aucl,x1=90,y1=aucl,lty=2,col="dark green")
text(87.5, aucl+0.006, paste("UCL = ", round(aucl,2),"micrograms"), cex=0.8)
text(87.5, alcl-0.006, paste("LCL = ", round(alcl,2),"micrograms"), cex=0.8)
## Read data from file.
x = read.table("../res/mass.dat", header=FALSE, skip=4)
colnames(x) = c("date_year", "std_id", "std_value","balance_id",
"std_dev", "design_id")
## Index of the limit for historical data.
ind = which(x[,1] > 85)
ind85 = ind[1]
color = rep("black", nrow(x))
color[x[,1] <= 85] = "black"
color[x[,1] > 85] = "dark green"
## Generate EWMA chart.
par(bg=rgb(1,1,0.8))
plot(x[,1], x[,3], type="p", pch=4, col=color, xlim=c(75,92),
main=expression( paste( "EWMA control chart for mass calibrations, ",
lambda," = 0.2") ), xlab="Time in years", ylab="Corrections (mg)")
## Year limit for historical data.
abline(v=85, col="dark green")
## Compute the average of the historical data
target = mean(x[1:(ind85-1),3])
segments(x0=75, y0=target, x1=x[nrow(x),1], y1=target, col="dark green")
text(x[nrow(x),1], target, paste("target = ", as.character(round(target,
digits=3))),	pos=4, cex=0.8, col="dark green")
## Standard deviation of the historical data.
s = sd(x[1:(ind85-1),3])
lambda = 0.2
k = 3
## Compute the upper control limit.
ucl = target + s*k*sqrt(lambda / (2-lambda))
segments(x0=85, y0=ucl, x1=x[nrow(x),1], y1=ucl, col="red")
text(x[nrow(x),1], ucl, paste("UCL = ", as.character(round(ucl, digits=3))),
pos=4, cex=0.8, col="red")
## Compute the lower control limit.
lcl = target - s*k*sqrt(lambda / (2-lambda))
segments(x0=85, y0=lcl, x1=x[nrow(x),1], y1=lcl, col="red")
text(x[nrow(x),1], lcl, paste("LCL = ", as.character(round(lcl, digits=3))),
pos=4, cex=0.8, col="red")
## Determine EWMA signals.
iter = 1
meani = array(target,dim=length(ind))
for (i in ind)
{
yi = x[i,3]
meanip1 = lambda*yi + (1 - lambda)*meani[iter]
iter = iter+1
meani[iter] = meanip1
}
points(x[ind,1], meani[1:iter-1], type="p", pch=20, col="black")
points(x[ind,1], meani[1:iter-1], type="l", lwd=2, col="black")
alpha = 0.05
k = 6
t = qt(1-alpha/2, k-1)
t
## Read the data and define variables.
m = matrix(scan(paste(DATAPATH,"loadcell.dat",sep="/"),skip=2),ncol=2,byrow=T)
y = m[,2]
x = m[,1]
x2 = x^2
## Fit the quadratic model.
z = lm(y ~ x + x2)
summary(z)
## Perform lack-of-fit test.
lof = lm(y~factor(x))
## Print results.
anova(z,lof)
## Read data and save variables.
m = matrix(scan(paste(DATAPATH,"loadcell.dat",sep="/"),skip=1),ncol=2,byrow=T)
## Read data and save variables.
m = matrix(scan(paste(DATAPATH,"loadcell.dat",sep="/"),skip=25),ncol=2,byrow=T)
x = m[,1]
y = m[,2]
x2 = x*x
## Generate quadratic regression curve and print results.
z = lm(y ~ x + x2)
zz = summary(z)
zz
## Print covariance matrix.
v = vcov(z)
v
## Save coefficients and variances.
a = z$coef[1]
b = z$coef[2]
c = z$coef[3]
sa2 = v[1,1]
sb2 = v[2,2]
sc2 = v[3,3]
sy2 = zz$sigma**2
## Generate additional points on the x-axis for plotting.
xnew = seq(2,21,by=.1)
xnew2 = xnew^2
xp = data.frame(x=xnew,x2=xnew2)
## Predict response for given X' values.
yp = predict(z,new=xp)
## Generate calibration curve plot.
plot(x,y, main="Quadratic Calibration Curve for Load Cell 32066",
xlab="Load, psi", ylab="Readings")
lines(xp$x,yp)
llab = paste("Y = ", round(a,7), " + ", round(b,7),
"*X + ", round(c,7), "*X*X",sep="")
text(8,2,llab)
segments(x0=0,y0=1.344,x1=13.417,y1=1.344,lty=2,col="blue")
text(6,1.4, "Y'=1.344",col="blue")
segments(x0=13.417,y0=1.344,x1=13.417,y1=0,lty=2,col="blue")
text(15,0.6, "X'=13.417",col="blue")
dfdy = 1/sqrt(b^2 - 4*c*(a-y))
dfda = -1/sqrt(b^2 - 4*c*(a-y))
dfdb = (-1 + b/sqrt(b^2 - 4*c*(a-y)))/(2*c)
dfdc = (-4*a + 4*y)/(sqrt(b^2 - 4*c*(a-y))*(4*c)) -
(-b + sqrt(b^2 - 4*c*(a-y)))/(2*c^2)
## The standard deviation of X' is defined from propagation of error.
u = sqrt(dfdy^2*sy2 + dfda^2*sa2 + dfdb^2*sb2 + dfdc^2*sc2)
## Plot uncertainty versus X'.
plot(y,u,type="n",xlab="Scale for Instrument Response",
ylab="psi",
main="Standard deviation of calibrated value X' for a given response Y'")
lines(spline(y,u))
## Print the covariance matrix for the loadcell data.
v
## Save covariances.
sab = v[1,2]
sac = v[1,3]
sbc = v[2,3]
## Compute updated uncertainty.
unew = sqrt(u^2 + 2*dfda*dfdb*sab + 2*dfda*dfdc*sac + 2*dfdb*dfdc*sbc)
## Plot predicted value versus X'.
plot(y,unew,type="n",xlab="Scale for Instrument Response",
ylab="psi",
main="Standard deviation of calibrated value X' for a given response Y'")
lines(spline(y,unew))
## Read data and define variables.
m = read.table("../res/linewid.dat", header=FALSE, skip=2)
colnames(m) = c("day", "pos", "x", "y")
## Specify regression coefficients from calibration experiment.
b0 = 0.2357
b1 = 0.9870
## Compute the calibration standard deviation.
w = ((m$y - b0)/b1) - m$x
sdcal = sd(w)
## The calibration standard deviation is:
sdcal
## Read data and save relevant variables.
m = matrix(scan(paste(DATAPATH,"calibrationline.dat",sep="/")),ncol=5,byrow=T)
## Read data and save relevant variables.
m = matrix(scan(paste(DATAPATH,"calibrationline.dat",sep="/"), skip = 25),ncol=5,byrow=T)
x = m[,1]
y = m[,2]
## Fit the linear calibration model and print the estimated
## coefficients.
z = lm(y ~ x)
zz = summary(z)
zz$coefficients
## print the covariance matrix.
v = vcov(z)
v
## Save model parameters and variances in convenient variables.
a = z$coef[1]
b = z$coef[2]
sa2 = v[1,1]
sb2 = v[2,2]
sab = v[1,2]
sy2 = zz$sigma^2
## Generate new Y' values for plotting.
ynew = seq(0,12,by=.25)
## Compute uncertainty for values of y.
u2 = sa2/b^2 + (ynew-a)^2*sb2/b^4 + sy2/b^2 + 2*(ynew-a)*sab/b^3
u = sqrt(u2)
## Plot uncertainty versus Y'.
plot(ynew,u,type="l",xlab="Instrument Response, micrometers",
ylab="micrometers",
main="Standard deviation of calibrated value X' for a given response Y'")#R commands and output:
alpha = 0.05
m = 3
v = 38
zeta = .5*(1 - exp(log(1-alpha)/m))
TSTAR = qt(zeta, v, lower.tail=FALSE)
TSTAR
## Read the data.
m = read.table(linewid.dat, header=FALSE, skip=2)
day = m[,1]
position = m[,2]
x = m[,3]
y = m[,4]
## Define the initial calibration experiment.
intercept = 0.2357	## intercept
slope = 0.9870		## slope
sd = 0.06203		## residual standard deviation
df = 38		      ## degrees of freedom
alpha = 0.05	      ## significance level
m = 3		            ## linear calibration line at 3 points
## Percentile for t* critical value.
zeta = 0.5*(1 - exp(log(1 - alpha)/m))
## Find the upper quantile of Student distribution.
tstar = qt(p=zeta, df=df, lower.tail=FALSE)
## Control values of the calibration.
w = ((y - intercept)/slope) - x
center = 0
## Generate the control chart.
par(bg=rgb(1,1,0.8), oma=c(4, 0, 0, 0))
plot(day, w, type="p", pch=8, xlim=c(0,10), ylim=c(-0.3,0.4),
main="Control chart for optical imaging system",
xlab="Time in days", ylab=expression(paste("control values ( ",mu,"m)")),
xaxs="i", yaxs="i")
axis(1,1:10)
segments(x0=1, y0=center, x1=9.75, y1=center)
## Compute upper and lower control limits.
lcl = center + sd*tstar/slope
ucl = center - sd*tstar/slope
## Add control limits to plot.
segments(x0=1, y0=ucl, x1=6, y1=ucl, col=grey(0.7))
segments(x0=6, y0=ucl, x1=9.75, y1=ucl, lty="dashed")
segments(x0=1, y0=lcl, x1=6, y1=lcl, col=grey(0.7))
segments(x0=6, y0=lcl, x1=9.75, y1=lcl, lty="dashed")
## Add subtitle and text to plot.
title(outer=TRUE, line=1,sub= "Linewidths corrected for linear calibration
control values at lower, mid, and upper range of calibration interval")
text(8,0,srt=45,col="gray","future control values")
## Read the data and save relevant variables.
m <- read.table("../res/mpc411.dat", header=FALSE, skip=2)
## Read data.
m <- matrix(scan(paste(DATAPATH,"jahanmi2.dat",sep="/"),skip=50),ncol=16,byrow=T)
head(m)
y = m[,5]
x1 = m[,6]
x2 = m[,7]
x3 = m[,8]
x4 = m[,9]
lab = m[,2]
batch = m[,14]
## Compute summary statistics.
ybar = round(mean(y),5)
std = round(sd(y),5)
n = round(length(y),0)
stderr = round(std/sqrt(n),5)
v = round(var(y),5)
# Compute the five number summary.
# min, lower hinge, Median, upper hinge, max
z = fivenum(y)
lhinge = round(z[2],5)
uhinge = round(z[4],5)
rany = round((max(y)-min(y)),5)
## Compute the inter-quartile range.
iqry = round(IQR(y),5)
## Compute the lag 1 autocorrelation.
z = acf(y)
ac = round(z$acf[2],5)
## Format results for printing.
Statistics = c(n,ybar,std,stderr,v,rany,lhinge,uhinge,iqry,ac)
names(Statistics)= c("Number of Observations ", "Mean", "Std. Dev.",
"Std. Dev. of Mean", "Variance", "Range",
"Lower Hinge", "Upper Hinge", "Inter-Quartile Range",
"Autocorrelation")
data.frame(Statistics)
summary(y)
## Generate a 4-plot of the data.
library(Hmisc)
par(mfrow = c(2, 2),
oma = c(0, 0, 2, 0),
mar = c(5.1, 4.1, 2.1, 2.1))
plot(y,ylab="Y",xlab="Run Sequence")
plot(y,Lag(y),xlab="Y[i-1]",ylab="Y[i]")
hist(y,main="",xlab="Y")
qqnorm(y,main="")
mtext("Strength of Ceramic Material: 4-Plot", line = 0.5, outer = TRUE)
qnorm(y,main="")
qnorm(y)
pnorm(y)
qqnorm(y)
ppnorm(y)
## Generate a 4-plot of the data.
library(Hmisc)
par(mfrow = c(2, 2),
oma = c(0, 0, 2, 0),
mar = c(5.1, 4.1, 2.1, 2.1))
plot(y,ylab="Y",xlab="Run Sequence")
plot(y,Lag(y),xlab="Y[i-1]",ylab="Y[i]")
hist(y,main="",xlab="Y")
qqnorm(y,main="")
mtext("Strength of Ceramic Material: 4-Plot", line = 0.5, outer = TRUE)
