#!/usr/bin/env Rscript
DATAPATH <- Sys.getenv("DATAPATH")

plot(out$residuals[2:len],out$residuals[1:len-1],ylab="Residuals",
xlab="Lag 1 Residuals",main="Lag Plot")
hist(out$residuals,ylab="Frequency",xlab="Residuals",main="Histogram")
qqnorm(out$residuals,main="Normal Probability Plot")
par(mfrow=c(1,1))
## Perform lack-of-fit test
lof = lm(deflection~factor(load))
## Print results.
anova(out,lof)
## Create variable with squared load
load2 = load*load
## Fit quadratic model
outq = lm(deflection~load + load2)
qq = summary(outq)
qq
## Sort data for plotting
upred = deflection - outq$resid
udfout = data.frame(upred,load)
udfout = udfout[order(load),]
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,deflection,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue")
lines(udfout$load,udfout$upred)
## Plot residuals versus independent variable, load
par(mfrow=c(1,1),cex=1.25)
plot(load,outq$residuals,xlab="Load",ylab="Residuals",
pch=16, cex=1.25, col="blue")
## Plot residuals versus predicted deflection
par(mfrow=c(1,1),cex=1.25)
plot(outq$fitted.values,outq$residuals,
ylab="Residuals",xlab="Predicted Values from Quadratic Model",
pch=16, cex=1.25, col="blue")
plot(outq$fitted.values,outq$residuals,
ylab="Residuals",xlab="Predicted Values from Quadratic Model",
pch=16, cex=1.25, col="blue")
plot(outq$fitted.values,outq$residuals,
ylab="Residuals",xlab="Predicted Values from Quadratic Model",
pch=16, cex=1.25, col="blue")
source('~/S11/code/src/4_pmd_model/pmd611.r', echo=TRUE)
source('~/S11/code/src/4_pmd_model/pmd611.r', echo=TRUE)
## Create vector with dependent variable, deflection
deflection = c(0.11019, 0.21956, 0.32949, 0.43899, 0.54803, 0.65694,
0.76562, 0.87487, 0.98292, 1.09146, 1.20001, 1.30822,
1.41599, 1.52399, 1.63194, 1.73947, 1.84646, 1.95392,
2.06128, 2.16844, 0.11052, 0.22018, 0.32939, 0.43886,
0.54798, 0.65739, 0.76596, 0.87474, 0.98300, 1.09150,
1.20004, 1.30818, 1.41613, 1.52408, 1.63159, 1.73965,
1.84696, 1.95445, 2.06177, 2.16829)
## Create vector with independent variable, load
load = c(150000, 300000, 450000, 600000, 750000, 900000, 1050000,
1200000, 1350000, 1500000, 1650000, 1800000, 1950000,
2100000, 2250000, 2400000, 2550000, 2700000, 2850000,
3000000, 150000, 300000, 450000, 600000, 750000, 900000,
1050000, 1200000, 1350000, 1500000, 1650000, 1800000,
1950000, 2100000, 2250000, 2400000, 2550000, 2700000,
2850000, 3000000)
## Determine the number of observations
len = length(load)
## Generate regression analysis results
out = lm(deflection~load)
summary(out)
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,deflection,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue" )
abline(reg=out)
## Plot residuals versus the independent variable, load
par(mfrow=c(1,1),cex=1.25)
plot(load,out$residuals, xlab="Load", ylab="Residuals",
pch=16, cex=1.25, col="blue")
## Plot residual versus predicted values
par(mfrow=c(1,1),cex=1.25)
plot(out$fitted.values,out$residuals,
xlab="Predicted Values from the Straight-Line Model",
ylab="Residuals", pch=16, cex=1.25, col="blue")
## 4-Plot of residuals
par(mfrow=c(2,2))
plot(out$residuals,ylab="Residuals",xlab="Observation Number",
main="Run Order Plot")
plot(out$residuals[2:len],out$residuals[1:len-1],ylab="Residuals",
xlab="Lag 1 Residuals",main="Lag Plot")
hist(out$residuals,ylab="Frequency",xlab="Residuals",main="Histogram")
qqnorm(out$residuals,main="Normal Probability Plot")
par(mfrow=c(1,1))
## Perform lack-of-fit test
lof = lm(deflection~factor(load))
## Print results.
anova(out,lof)
## Create variable with squared load
load2 = load*load
## Fit quadratic model
outq = lm(deflection~load + load2)
qq = summary(outq)
qq
## Sort data for plotting
upred = deflection - outq$resid
udfout = data.frame(upred,load)
udfout = udfout[order(load),]
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,deflection,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue")
lines(udfout$load,udfout$upred)
## Plot residuals versus independent variable, load
par(mfrow=c(1,1),cex=1.25)
plot(load,outq$residuals,xlab="Load",ylab="Residuals",
pch=16, cex=1.25, col="blue")
## Plot residuals versus predicted deflection
par(mfrow=c(1,1),cex=1.25)
plot(outq$fitted.values,outq$residuals,
ylab="Residuals",xlab="Predicted Values from Quadratic Model",
pch=16, cex=1.25, col="blue")
## 4-Plot of residuals
par(mfrow=c(2,2))
plot(outq$residuals,ylab="Residuals",xlab="Observation Number",
main="Run Order Plot")
plot(outq$residuals[2:len],outq$residuals[1:len-1],ylab="Residuals",
xlab="Lag 1 Residuals",main="Lag Plot")
hist(outq$residuals,ylab="Frequency",xlab="Residuals",main="Histogram")
qqnorm(outq$residuals,main="Normal Probability Plot")
par(mfrow=c(1,1))
## Perform lack-of-fit test
lof = lm(deflection~factor(load))
## Print results.
anova(outq,lof)
## Solve the regression function for Load
nd = 1.239722
tval = qt(.975,outq$df.residual)
f = function(load) {outq$coef%*%c(1,load,load^2)-nd}
nl = uniroot(f,c(min(load),max(load)))$root
nl
## Plot regression line and desired calibration point
par(mfrow=c(1,1),cex=1.25,srt=0)
plot(load,deflection,ylab="Deflection",xlab="Load",
pch=16, cex=1.25, col="blue")
abline(h=nd)
text(750000,1.3,"Deflection = 1.239722")
abline(v=nl)
par(srt=-90)
text(1800000,.7,"Load = ???")
## Compute confidence interval for calibration value
## Create function to calculate the upper lmit
lo = function(load){
rsdm = sqrt(1 + c(1,load,load^2)%*%qq$cov.unscaled%*%c(1,load,load^2))
f(load) + tval*qq$sigma*rsdm
}
## Create function to calculate the lower limit
up = function(load){
rsdm = sqrt(1 + c(1,load,load^2)%*%qq$cov.unscaled%*%c(1,load,load^2))
f(load) - tval*qq$sigma*rsdm
}
## Use the two functions to find the roots
local = uniroot(lo,lower=min(load),upper=max(load))
local$root
upcal = uniroot(up,lower=min(load),upper=max(load))
upcal$root
#> [1] 1705698
#> [1] 1705698
#> [1] 1705698
source('~/S11/code/R/src/4_pmd_model/pmd611.r', echo=TRUE)
source('~/S11/code/R/src/4_pmd_model/pmd611.r', echo=TRUE)
## Create vector with dependent variable, deflection
deflection = c(0.11019, 0.21956, 0.32949, 0.43899, 0.54803, 0.65694,
0.76562, 0.87487, 0.98292, 1.09146, 1.20001, 1.30822,
1.41599, 1.52399, 1.63194, 1.73947, 1.84646, 1.95392,
2.06128, 2.16844, 0.11052, 0.22018, 0.32939, 0.43886,
0.54798, 0.65739, 0.76596, 0.87474, 0.98300, 1.09150,
1.20004, 1.30818, 1.41613, 1.52408, 1.63159, 1.73965,
1.84696, 1.95445, 2.06177, 2.16829)
## Create vector with independent variable, load
load = c(150000, 300000, 450000, 600000, 750000, 900000, 1050000,
1200000, 1350000, 1500000, 1650000, 1800000, 1950000,
2100000, 2250000, 2400000, 2550000, 2700000, 2850000,
3000000, 150000, 300000, 450000, 600000, 750000, 900000,
1050000, 1200000, 1350000, 1500000, 1650000, 1800000,
1950000, 2100000, 2250000, 2400000, 2550000, 2700000,
2850000, 3000000)
## Determine the number of observations
len = length(load)
## Generate regression analysis results
out = lm(deflection~load)
summary(out)
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,deflection,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue" )
abline(reg=out)
## Plot residuals versus the independent variable, load
par(mfrow=c(1,1),cex=1.25)
plot(load,out$residuals, xlab="Load", ylab="Residuals",
pch=16, cex=1.25, col="blue")
## Plot residual versus predicted values
par(mfrow=c(1,1),cex=1.25)
plot(out$fitted.values,out$residuals,
xlab="Predicted Values from the Straight-Line Model",
ylab="Residuals", pch=16, cex=1.25, col="blue")
## 4-Plot of residuals
par(mfrow=c(2,2))
plot(out$residuals,ylab="Residuals",xlab="Observation Number",
main="Run Order Plot")
plot(out$residuals[2:len],out$residuals[1:len-1],ylab="Residuals",
xlab="Lag 1 Residuals",main="Lag Plot")
hist(out$residuals,ylab="Frequency",xlab="Residuals",main="Histogram")
qqnorm(out$residuals,main="Normal Probability Plot")
par(mfrow=c(1,1))
## Perform lack-of-fit test
lof = lm(deflection~factor(load))
## Print results.
anova(out,lof)
## Create variable with squared load
load2 = load*load
## Fit quadratic model
outq = lm(deflection~load + load2)
qq = summary(outq)
qq
## Sort data for plotting
upred = deflection - outq$resid
udfout = data.frame(upred,load)
udfout = udfout[order(load),]
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,deflection,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue")
lines(udfout$load,udfout$upred)
## Plot residuals versus independent variable, load
par(mfrow=c(1,1),cex=1.25)
plot(load,outq$residuals,xlab="Load",ylab="Residuals",
pch=16, cex=1.25, col="blue")
## Plot residuals versus predicted deflection
par(mfrow=c(1,1),cex=1.25)
plot(outq$fitted.values,outq$residuals,
ylab="Residuals",xlab="Predicted Values from Quadratic Model",
pch=16, cex=1.25, col="blue")
## 4-Plot of residuals
par(mfrow=c(2,2))
plot(outq$residuals,ylab="Residuals",xlab="Observation Number",
main="Run Order Plot")
plot(outq$residuals[2:len],outq$residuals[1:len-1],ylab="Residuals",
xlab="Lag 1 Residuals",main="Lag Plot")
hist(outq$residuals,ylab="Frequency",xlab="Residuals",main="Histogram")
qqnorm(outq$residuals,main="Normal Probability Plot")
par(mfrow=c(1,1))
## Perform lack-of-fit test
lof = lm(deflection~factor(load))
## Print results.
anova(outq,lof)
## Solve the regression function for Load
nd = 1.239722
tval = qt(.975,outq$df.residual)
f = function(load) {outq$coef%*%c(1,load,load^2)-nd}
nl = uniroot(f,c(min(load),max(load)))$root
nl
## Plot regression line and desired calibration point
par(mfrow=c(1,1),cex=1.25,srt=0)
plot(load,deflection,ylab="Deflection",xlab="Load",
pch=16, cex=1.25, col="blue")
abline(h=nd)
text(750000,1.3,"Deflection = 1.239722")
abline(v=nl)
par(srt=-90)
text(1800000,.7,"Load = ???")
## Compute confidence interval for calibration value
## Create function to calculate the upper lmit
lo = function(load){
rsdm = sqrt(1 + c(1,load,load^2)%*%qq$cov.unscaled%*%c(1,load,load^2))
f(load) + tval*qq$sigma*rsdm
}
## Create function to calculate the lower limit
up = function(load){
rsdm = sqrt(1 + c(1,load,load^2)%*%qq$cov.unscaled%*%c(1,load,load^2))
f(load) - tval*qq$sigma*rsdm
}
## Use the two functions to find the roots
local = uniroot(lo,lower=min(load),upper=max(load))
local$root
upcal = uniroot(up,lower=min(load),upper=max(load))
upcal$root
#> [1] 1705698
#> [1] 1705698
#> [1] 1705698
#> [1] 1705698
#> [1] 1705698
source('~/S11/code/R/src/4_pmd_model/pmd611.r', echo=TRUE)
## Create vector with dependent variable, deflection
deflection = c(0.11019, 0.21956, 0.32949, 0.43899, 0.54803, 0.65694,
0.76562, 0.87487, 0.98292, 1.09146, 1.20001, 1.30822,
1.41599, 1.52399, 1.63194, 1.73947, 1.84646, 1.95392,
2.06128, 2.16844, 0.11052, 0.22018, 0.32939, 0.43886,
0.54798, 0.65739, 0.76596, 0.87474, 0.98300, 1.09150,
1.20004, 1.30818, 1.41613, 1.52408, 1.63159, 1.73965,
1.84696, 1.95445, 2.06177, 2.16829)
## Create vector with independent variable, load
load = c(150000, 300000, 450000, 600000, 750000, 900000, 1050000,
1200000, 1350000, 1500000, 1650000, 1800000, 1950000,
2100000, 2250000, 2400000, 2550000, 2700000, 2850000,
3000000, 150000, 300000, 450000, 600000, 750000, 900000,
1050000, 1200000, 1350000, 1500000, 1650000, 1800000,
1950000, 2100000, 2250000, 2400000, 2550000, 2700000,
2850000, 3000000)
## Determine the number of observations
len = length(load)
## Generate regression analysis results
out = lm(deflection~load)
summary(out)
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,deflection,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue" )
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,load,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue" )
## Plot data overlaid with estimated regression function
par(mfrow=c(1,1),cex=1.25)
plot(load,deflection,xlab="Load",ylab="Deflection",
pch=16, cex=1.25, col="blue" )
abline(reg=out)
## Plot residuals versus the independent variable, load
par(mfrow=c(1,1),cex=1.25)
plot(load,out$residuals, xlab="Load", ylab="Residuals",
pch=16, cex=1.25, col="blue")
##  Load VGAM package.
require(VGAM)
## Define constants gamma and mu.
mu = 5000
gamma = 2
t = 4000
## Compute the PDF at t=4000.
PDF = dbisa(t, shape=gamma, scale=mu)
PDF
## Compute the CDF.
CDF = pbisa(t, shape=gamma, scale=mu)
CDF
## Generate 100 random numbers from the Birnbaum-Saunders
## distribution.
data.bs= rbisa (100, shape=2, scale=5000)
## Load lattice package for probability plot.
require(lattice)
## Generate probability plot.
qqmath(data.bs, distribution=function(p) qbisa(p, shape=2),
ylab="Time", xlab="Expected Value")
## Functions to estimate scale and shape parameters from data.
harmon=function(x) {1/(mean(1/x))}
scale.mm = function(y) {sqrt(mean(y)*harmon(y))}
shape.mm= function(y) {sqrt(2*sqrt(mean(y)/harmon(y))-1)}
## Calculate shape parameter.
shape.est=shape.mm(data.bs)
shape.est
## Calculate scale parameter.
scale.mm(data.bs)
## Generate probability plot.
qqmath(data.bs, distribution=function(p) qbisa(p, shape=shape.est))
## Create vector with dependent variable, coefficient of thermal expansion
tec = c(0.591,1.547,2.902,2.894,4.703,6.307,7.030,7.898,9.470,9.484,10.072,
10.163,11.615,12.005,12.478,12.982,12.970,13.926,14.452,14.404,
15.190,15.550,15.528,15.499,16.131,16.438,16.387,16.549,16.872,
16.830,16.926,16.907,16.966,17.060,17.122,17.311,17.355,17.668,
17.767,17.803,17.765,17.768,17.736,17.858,17.877,17.912,18.046,
18.085,18.291,18.357,18.426,18.584,18.610,18.870,18.795,19.111,
0.367,0.796,0.892,1.903,2.150,3.697,5.870,6.421,7.422,9.944,11.023,
11.870,12.786,14.067,13.974,14.462,14.464,15.381,15.483,15.590,
16.075,16.347,16.181,16.915,17.003,16.978,17.756,17.808,17.868,
18.481,18.486,19.090,16.062,16.337,16.345,16.388,17.159,17.116,
17.164,17.123,17.979,17.974,18.007,17.993,18.523,18.669,18.617,
19.371,19.330,0.080,0.248,1.089,1.418,2.278,3.624,4.574,5.556,
7.267,7.695,9.136,9.959,9.957,11.600,13.138,13.564,13.871,13.994,
14.947,15.473,15.379,15.455,15.908,16.114,17.071,17.135,17.282,
17.368,17.483,17.764,18.185,18.271,18.236,18.237,18.523,18.627,
18.665,19.086,0.214,0.943,1.429,2.241,2.951,3.782,4.757,5.602,
7.169,8.920,10.055,12.035,12.861,13.436,14.167,14.755,15.168,
15.651,15.746,16.216,16.445,16.965,17.121,17.206,17.250,17.339,
17.793,18.123,18.490,18.566,18.645,18.706,18.924,19.100,0.375,
0.471,1.504,2.204,2.813,4.765,9.835,10.040,11.946,12.596,13.303,
13.922,14.440,14.951,15.627,15.639,15.814,16.315,16.334,16.430,
16.423,17.024,17.009,17.165,17.134,17.349,17.576,17.848,18.090,
18.276,18.404,18.519,19.133,19.074,19.239,19.280,19.101,19.398,
19.252,19.890,20.007,19.929,19.268,19.324,20.049,20.107,20.062,
20.065,19.286,19.972,20.088,20.743,20.830,20.935,21.035,20.930,
21.074,21.085,20.935)
## Create vector with independent variable, temperature (K)
temp = c(24.41,34.82,44.09,45.07,54.98,65.51,70.53,75.70,89.57,91.14,96.40,
97.19,114.26,120.25,127.08,133.55,133.61,158.67,172.74,171.31,
202.14,220.55,221.05,221.39,250.99,268.99,271.80,271.97,321.31,
321.69,330.14,333.03,333.47,340.77,345.65,373.11,373.79,411.82,
419.51,421.59,422.02,422.47,422.61,441.75,447.41,448.70,472.89,
476.69,522.47,522.62,524.43,546.75,549.53,575.29,576.00,625.55,
20.15,28.78,29.57,37.41,39.12,50.24,61.38,66.25,73.42,95.52,
107.32,122.04,134.03,163.19,163.48,175.70,179.86,211.27,217.78,
219.14,262.52,268.01,268.62,336.25,337.23,339.33,427.38,428.58,
432.68,528.99,531.08,628.34,253.24,273.13,273.66,282.10,346.62,
347.19,348.78,351.18,450.10,450.35,451.92,455.56,552.22,553.56,
555.74,652.59,656.20,14.13,20.41,31.30,33.84,39.70,48.83,54.50,
60.41,72.77,75.25,86.84,94.88,96.40,117.37,139.08,147.73,158.63,
161.84,192.11,206.76,209.07,213.32,226.44,237.12,330.90,358.72,
370.77,372.72,396.24,416.59,484.02,495.47,514.78,515.65,519.47,
544.47,560.11,620.77,18.97,28.93,33.91,40.03,44.66,49.87,55.16,
60.90,72.08,85.15,97.06,119.63,133.27,143.84,161.91,180.67,
198.44,226.86,229.65,258.27,273.77,339.15,350.13,362.75,371.03,
393.32,448.53,473.78,511.12,524.70,548.75,551.64,574.02,623.86,
21.46,24.33,33.43,39.22,44.18,55.02,94.33,96.44,118.82,128.48,
141.94,156.92,171.65,190.00,223.26,223.88,231.50,265.05,269.44,
271.78,273.46,334.61,339.79,349.52,358.18,377.98,394.77,429.66,
468.22,487.27,519.54,523.03,612.99,638.59,641.36,622.05,631.50,
663.97,646.90,748.29,749.21,750.14,647.04,646.89,746.90,748.43,
747.35,749.27,647.61,747.78,750.51,851.37,845.97,847.54,849.93,
851.61,849.75,850.98,848.23)
## Determine number of observations
len = length(tec)
## Save labels for plots
xax = "Temperature (K)"
yax = "Coefficient of Thermal Expansion"
ttl = "Thermal Expansion of Copper Data"
ttl2 = "Q/Q Rational Function Model"
## Plot the data
par(mfrow=c(1,1),cex=1.25)
plot(temp,tec,xlab=xax,ylab=yax,main=ttl,col="blue")
## Create vector with dependent variable, coefficient of thermal expansion
tec = c(0.591,1.547,2.902,2.894,4.703,6.307,7.030,7.898,9.470,9.484,10.072,
10.163,11.615,12.005,12.478,12.982,12.970,13.926,14.452,14.404,
15.190,15.550,15.528,15.499,16.131,16.438,16.387,16.549,16.872,
16.830,16.926,16.907,16.966,17.060,17.122,17.311,17.355,17.668,
17.767,17.803,17.765,17.768,17.736,17.858,17.877,17.912,18.046,
18.085,18.291,18.357,18.426,18.584,18.610,18.870,18.795,19.111,
0.367,0.796,0.892,1.903,2.150,3.697,5.870,6.421,7.422,9.944,11.023,
11.870,12.786,14.067,13.974,14.462,14.464,15.381,15.483,15.590,
16.075,16.347,16.181,16.915,17.003,16.978,17.756,17.808,17.868,
18.481,18.486,19.090,16.062,16.337,16.345,16.388,17.159,17.116,
17.164,17.123,17.979,17.974,18.007,17.993,18.523,18.669,18.617,
19.371,19.330,0.080,0.248,1.089,1.418,2.278,3.624,4.574,5.556,
7.267,7.695,9.136,9.959,9.957,11.600,13.138,13.564,13.871,13.994,
14.947,15.473,15.379,15.455,15.908,16.114,17.071,17.135,17.282,
17.368,17.483,17.764,18.185,18.271,18.236,18.237,18.523,18.627,
18.665,19.086,0.214,0.943,1.429,2.241,2.951,3.782,4.757,5.602,
7.169,8.920,10.055,12.035,12.861,13.436,14.167,14.755,15.168,
15.651,15.746,16.216,16.445,16.965,17.121,17.206,17.250,17.339,
17.793,18.123,18.490,18.566,18.645,18.706,18.924,19.100,0.375,
0.471,1.504,2.204,2.813,4.765,9.835,10.040,11.946,12.596,13.303,
13.922,14.440,14.951,15.627,15.639,15.814,16.315,16.334,16.430,
16.423,17.024,17.009,17.165,17.134,17.349,17.576,17.848,18.090,
18.276,18.404,18.519,19.133,19.074,19.239,19.280,19.101,19.398,
19.252,19.890,20.007,19.929,19.268,19.324,20.049,20.107,20.062,
20.065,19.286,19.972,20.088,20.743,20.830,20.935,21.035,20.930,
21.074,21.085,20.935)
## Create vector with independent variable, temperature (K)
temp = c(24.41,34.82,44.09,45.07,54.98,65.51,70.53,75.70,89.57,91.14,96.40,
97.19,114.26,120.25,127.08,133.55,133.61,158.67,172.74,171.31,
202.14,220.55,221.05,221.39,250.99,268.99,271.80,271.97,321.31,
321.69,330.14,333.03,333.47,340.77,345.65,373.11,373.79,411.82,
419.51,421.59,422.02,422.47,422.61,441.75,447.41,448.70,472.89,
476.69,522.47,522.62,524.43,546.75,549.53,575.29,576.00,625.55,
20.15,28.78,29.57,37.41,39.12,50.24,61.38,66.25,73.42,95.52,
370.77,372.72,396.24,416.59,484.02,495.47,514.78,515.65,519.47,
544.47,560.11,620.77,18.97,28.93,33.91,40.03,44.66,49.87,55.16,
60.90,72.08,85.15,97.06,119.63,133.27,143.84,161.91,180.67,
198.44,226.86,229.65,258.27,273.77,339.15,350.13,362.75,371.03,
393.32,448.53,473.78,511.12,524.70,548.75,551.64,574.02,623.86,
21.46,24.33,33.43,39.22,44.18,55.02,94.33,96.44,118.82,128.48,
161.84,192.11,206.76,209.07,213.32,226.44,237.12,330.90,358.72,
370.77,372.72,396.24,416.59,484.02,495.47,514.78,515.65,519.47,
544.47,560.11,620.77,18.97,28.93,33.91,40.03,44.66,49.87,55.16,
60.90,72.08,85.15,97.06,119.63,133.27,143.84,161.91,180.67,
198.44,226.86,229.65,258.27,273.77,339.15,350.13,362.75,371.03,
393.32,448.53,473.78,511.12,524.70,548.75,551.64,574.02,623.86,
21.46,24.33,33.43,39.22,44.18,55.02,94.33,96.44,118.82,128.48,
141.94,156.92,171.65,190.00,223.26,223.88,231.50,265.05,269.44,
271.78,273.46,334.61,339.79,349.52,358.18,377.98,394.77,429.66,
468.22,487.27,519.54,523.03,612.99,638.59,641.36,622.05,631.50,
663.97,646.90,748.29,749.21,750.14,647.04,646.89,746.90,748.43,
747.35,749.27,647.61,747.78,750.51,851.37,845.97,847.54,849.93,
851.61,849.75,850.98,848.23)
## Determine number of observations
len = length(tec)
## Save labels for plots
xax = "Temperature (K)"
yax = "Coefficient of Thermal Expansion"
ttl = "Thermal Expansion of Copper Data"
ttl2 = "Q/Q Rational Function Model"
## Plot the data
par(mfrow=c(1,1),cex=1.25)
plot(temp,tec,xlab=xax,ylab=yax,main=ttl,col="blue")
source('~/S11/code/R/src/4_pmd_model/pmd641_Thermal Expansion of Copper.r', echo=TRUE)
source('~/aghiles/code/R/src/4_pmd_model/pmd631_Ultrasonic Reference Block.r')
source('~/aghiles/code/R/src/8_apr_reliability/apr165_Gamma distribution.r')
source('~/aghiles/code/R/src/8_apr_reliability/apr165_Gamma distribution.r')
source('~/aghiles/code/R/src/8_apr_reliability/apr165_Gamma distribution.r')
source('~/aghiles/code/R/src/8_apr_reliability/apr165_Gamma distribution.r')
source('~/aghiles/code/R/src/5_pri_improve/pri611_Eddy current probe sensitivity study.r')
install.packages("memisc")
install.packages("repr")
source('~/aghiles/code/R/src/3_ppc_characterize/ppc521_Machine Screw Case Study.r')
## Create vector with dependent variable, deflection
deflection = c(0.11019, 0.21956, 0.32949, 0.43899, 0.54803, 0.65694,
0.76562, 0.87487, 0.98292, 1.09146, 1.20001, 1.30822,
1.41599, 1.52399, 1.63194, 1.73947, 1.84646, 1.95392,
2.06128, 2.16844, 0.11052, 0.22018, 0.32939, 0.43886,
0.54798, 0.65739, 0.76596, 0.87474, 0.98300, 1.09150,
1.20004, 1.30818, 1.41613, 1.52408, 1.63159, 1.73965,
1.84696, 1.95445, 2.06177, 2.16829)
## Create vector with independent variable, load
load = c(150000, 300000, 450000, 600000, 750000, 900000, 1050000,
1200000, 1350000, 1500000, 1650000, 1800000, 1950000,
2100000, 2250000, 2400000, 2550000, 2700000, 2850000,
3000000, 150000, 300000, 450000, 600000, 750000, 900000,
1050000, 1200000, 1350000, 1500000, 1650000, 1800000,
1950000, 2100000, 2250000, 2400000, 2550000, 2700000,
2850000, 3000000)
## Determine the number of observations
len = length(load)
## Generate regression analysis results
out = lm(deflection~load)
summary(out)
