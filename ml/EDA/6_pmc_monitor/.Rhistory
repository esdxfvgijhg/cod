#!/usr/bin/env Rscript
DATAPATH <- Sys.getenv("DATAPATH")

contributors()
## Read the data and save as a time series object.
table = matrix(scan(g_series.dat), ncol=1, byrow=TRUE)
## Read the data and save as a time series object.
table = matrix(scan(paste(DATAPATH,"g_series.dat",sep="/")), ncol=1, byrow=TRUE)
## Read the data and save as a time series object.
table = matrix(scan(paste(DATAPATH,"g_series.dat",sep="/")), ncol=1, byrow=TRUE)
## Read the data and save as a time series object.
table = matrix(scan(paste(DATAPATH,"g_series.dat",sep="/"), skip = 25), ncol=1, byrow=TRUE)
vec = ts(table)
## Load the necessary libraries.
library(stats)
library(lawstat)
## Plot the data print summary statistics.
par(mfrow=c(1,1), cex=1.2)
## Load the necessary libraries.
library(stats)
install.packages(lawstat)
## Load the necessary libraries.
library(stats)
install.packages("lawstat")
library(lawstat)
## Read the data and save as a time series object.
table = matrix(scan(paste(DATAPATH,"g_series.dat",sep="/"), skip = 25), ncol=1, byrow=TRUE)
vec = ts(table)
## Load the necessary libraries.
library(stats)
install.packages("lawstat")
## Load the necessary libraries.
library(stats)
installed.packages("lawstat")
library(lawstat)
## Plot the data print summary statistics.
par(mfrow=c(1,1), cex=1.2)
plot(1:length(vec),vec, type="o", pch=18, col="blue",
xlab = "Observation", ylab="Series G")
print(summary(vec))
## Take natural log of original series and plot the results.
lvec = log(vec)
par(mfrow=c(1,1), cex=1.2)
plot(1:length(vec),lvec, type="o", pch=18, col="red",
xlab = "Observation", ylab="ln(Series G)")
## Take first differences of transformed series to remove trend
## and plot the transformed and differenced data.
fd = diff(lvec)
par(mfrow=c(1,1), cex=1.2)
plot(fd, type="o", pch=18,  col="darkblue",
xlab = "Observation", ylab="Differenced ln(Series G)")
## Compute the autocorrelation of the transformed and differenced series.
ac <- acf(fd, type = c("correlation"), lag.max=36, main="Autocorrelation of Series G")
## Print ACF for first 36 lags.
round(c(ac$acf),4)
## Plot the ACF with 95 % confidence limits.
par(mfrow=c(1,1), cex=1.2)
plot(ac, ci=.95, ci.type="ma", main="ACF with 95 % Confidence Limits",
ylim=c(-1,1))
##  Take seasonal differences of the transformed and differenced series.
sfd = diff(fd, lag=12)
## Plot final time series.
par(mfrow=c(1,1), cex=1.2)
plot(sfd, type="o", pch=18,  col="red", xlab = "Observation",
ylab="Seasonal and First Differenced ln(Series G)")
## Compute autocorrelation of final series.
sac = acf(sfd, type = c("correlation"), lag.max=36,
main="Autocorrelation of Series G")
## Plot the ACF of differenced series with 95 % confidence limits.
par(mfrow=c(1,1), cex=1.2)
plot(sac, ci=.95, ci.type="ma", main="ACF with 95 % Confidence Limits",
ylim = c(-1,1))
## Fit a MA model to original series.  The arima function will
## perform the necessary differences.
ma = arima(log(vec), order = c(0, 1, 1),
seasonal=list(order=c(0,1,1), period=12))
ma
## Use the Box-Ljung test to determine if the residuals are
## random up to 30 lags.
BT = Box.test(ma$residuals, lag=30, type = "Ljung-Box", fitdf=2)
BT
## Although the output indicates that the degrees of freedom for
## the test are 30, the p-value is based on df-fitdf = 30-2 = 28.
1-pchisq(29.4935,28)
## Determine critical region.
qchisq(0.95,28)
## Generate predictions of 12 future values.
p = predict(ma,12)
## Compute 90% confidence intervals for each prediction
## and convert back to original units.
L90 = exp(p$pred - 1.645*p$se)
U90 = exp(p$pred + 1.645*p$se)
## Generate forecasts in original units.  To avoid under-predicting,
## the forecasts are adjusted to account for log transformation.
Forecast = exp(p$pred + ma$sigma2/2)
## Print the forecast results.
Period = c((length(vec)+1):(length(vec)+12))
df = data.frame(Period,L90,Forecast,U90)
print(df,row.names=FALSE)
## Plot last 36 observations and the predictions with confidence limits.
par(mfrow=c(1,1), cex=1.2)
plot(c(108:144),table[108:144],xlim=c(108,160),ylim=c(300,800), type="o",
ylab="Series G", xlab="Observation", col="black",
main="12 Forecasts and 90% Confidence Intervals")
points(Forecast, pch=16, col="blue")
lines(c(145:156), L90, col="red")
lines(c(145:156), U90, col="red")
.libPaths()
.libPaths("/home/aghiles/.R/x86_64-pc-linux-gnu-library/3.2")
.libPaths()
install.packages("stats")
install.packages("snlme")
install.packages("nlme")
install.packages("ape")
install.packages("nlme")
install.packages("MASS")
install.packages("psych")
install.packages("lattice")
install.packages("memisc")
install.packages(""nlme")
install.packages(""nlme")
install.packages(""nlme"")
install.packages("lattice")
install.packages("memisc")
install.packages("nortest")
install.packages("outliers")
install.packages("nlme")
install.packages(nlme)
install.packages("Hmisc")
install.packages("gap")
install.packages("car")
install.packages("tolerance")
source('~/S11/code/R/src/1_eda_explore/eda33e5.r', echo=TRUE)
source('~/S11/code/R/src/1_eda_explore/eda33e5.r', echo=TRUE)
source('~/S11/code/R/src/1_eda_explore/eda33e5.r', echo=TRUE)
source('~/S11/code/R/src/1_eda_explore/eda352.r', echo=TRUE)
source('~/S11/code/R/src/1_eda_explore/eda353.r', echo=TRUE)
source('~/S11/code/R/src/1_eda_explore/eda354.r', echo=TRUE)
source('~/S11/code/R/src/1_eda_explore/eda355.r', echo=TRUE)
source('~/S11/code/R/src/1_eda_explore/eda357.r', echo=TRUE)
source('~/aghiles/code/R/src/6_pmc_monitor/pmc621_Box-Jenkins Modeling Example.r')
source('~/aghiles/code/R/src/5_pri_improve/pri5323_Multiple response case.r')
install.packages(c("data.table", "gap", "highr", "htmlTable", "memisc", "pillar", "Rcpp", "rlang", "utf8"))
install.packages("htmlTable")
