#!/usr/bin/env Rscript
DATAPATH <- Sys.getenv("DATAPATH")

xb.wei = try(mle(negloglik.wei, method="Nelder-Mead",
start=list(xi=100, beta=2, eta=15)))
if (any(c(class(xb.gau), class(xb.gam), class(xb.wei)) == "try-error")) {next} else {
bic = c(GAU=AIC(x.gau, k=log(nx)),
GAM=AIC(x.gam, k=log(nx)),
WEI=AIC(x.wei, k=log(nx)))
ib = which.min(bic)
percentile[jb] = switch(ib,
qnorm(0.001, mean=xb.gau@coef[1],sd=xb.gau@coef[2]),
qgamma(0.001, alpha=xb.gam@coef[1],lambda=xb.gam@coef[2]),
qweibull(0.001, beta=xb.wei@coef[2],eta=xb.wei@coef[3])) }
}
for (jb in 1:nb)
{
if (jb %% 100 == 0) {cat(jb, "of", nb, "\n")}
x = sample(xDATA, size=nx, replace=TRUE)
xb.gau = try(mle(negloglik.gau, method="Nelder-Mead",
start=list(mu=mean(x), sigma=sd(x))))
xb.gam = try(mle(negloglik.gam, method="Nelder-Mead",
start=list(alpha=(mean(x)/sd(x))^2,
lambda=mean(x)/var(x))))
xb.wei = try(mle(negloglik.wei, method="Nelder-Mead",
start=list(xi=100, beta=2, eta=15)))
if (any(c(class(xb.gau), class(xb.gam), class(xb.wei)) == "try-error")) {next} else {
bic = c(GAU=AIC(x.gau, k=log(nx)),
GAM=AIC(x.gam, k=log(nx)),
WEI=AIC(x.wei, k=log(nx)))
ib = which.min(bic)
percentile[jb] = switch(ib,
qnorm(0.001, mean=xb.gau@coef[1],sd=xb.gau@coef[2]),
# qgamma(0.001, alpha=xb.gam@coef[1],lambda=xb.gam@coef[2]),
qweibull(0.001, beta=xb.wei@coef[2],eta=xb.wei@coef[3])
)
}
}
for (jb in 1:nb)
{
if (jb %% 100 == 0) {cat(jb, "of", nb, "\n")}
x = sample(xDATA, size=nx, replace=TRUE)
xb.gau = try(mle(negloglik.gau, method="Nelder-Mead",
start=list(mu=mean(x), sigma=sd(x))))
xb.gam = try(mle(negloglik.gam, method="Nelder-Mead",
start=list(alpha=(mean(x)/sd(x))^2,
lambda=mean(x)/var(x))))
xb.wei = try(mle(negloglik.wei, method="Nelder-Mead",
start=list(xi=100, beta=2, eta=15)))
if (any(c(class(xb.gau), class(xb.gam), class(xb.wei)) == "try-error")) {next} else {
bic = c(GAU=AIC(x.gau, k=log(nx)),
GAM=AIC(x.gam, k=log(nx)),
WEI=AIC(x.wei, k=log(nx)))
ib = which.min(bic)
percentile[jb] = switch(ib,
qnorm(0.001, mean=xb.gau@coef[1],sd=xb.gau@coef[2]),
qgamma(0.001, alpha=xb.gam@coef[1],lambda=xb.gam@coef[2]),
qgamma(0.001, alpha=xb.bs@coef[1], beta=xb.bs@coef[2]),
xb.wei@coef[1] +
qweibull(0.001, beta=xb.wei@coef[2],eta=xb.wei@coef[3])
)
}
}
signif(quantile(percentile, probs=c(0.025, 0.975), na.rm=TRUE), 3)
## Read data.
fname <- "../../res/jahanmi2.dat"
m <- matrix(scan(fname,skip=50),ncol=16,byrow=T)
## Read data.
fname <- "../../../res/jahanmi2.dat"
m <- matrix(scan(fname,skip=50),ncol=16,byrow=T)
y = m[,5]
x1 = m[,6]
x2 = m[,7]
x3 = m[,8]
x4 = m[,9]
lab = m[,2]
batch = m[,14]
## Compute summary statistics.
ybar = round(mean(y),5)
std = round(sd(y),5)
n = round(length(y),0)
stderr = round(std/sqrt(n),5)
v = round(var(y),5)
## Compute the five number summary.
## min, lower hinge, Median, upper hinge, max
z = fivenum(y)
lhinge = round(z[2],5)
uhinge = round(z[4],5)
rany = round((max(y)-min(y)),5)
## Compute the inter-quartile range.
iqry = round(IQR(y),5)
## Compute the lag 1 autocorrelation.
z = acf(y)
ac = round(z$acf[2],5)
## Format and print results.
Statistics = c(n,ybar,std,stderr,v,rany,lhinge,uhinge,iqry,ac)
names(Statistics)= c("Number of Observations ", "Mean", "Std. Dev.",
"Std. Dev. of Mean", "Variance", "Range",
"Lower Hinge", "Upper Hinge", "Inter-Quartile Range",
"Autocorrelation")
data.frame(Statistics)
summary(y)
## Generate a 4-plot of the data.
library(Hmisc)
par(mfrow = c(2, 2),
oma = c(0, 0, 2, 0),
mar = c(5.1, 4.1, 2.1, 2.1))
plot(y,ylab="Y",xlab="Run Sequence")
plot(y,Lag(y),xlab="Y[i-1]",ylab="Y[i]")
hist(y,main="",xlab="Y")
qqnorm(y,main="")
mtext("Strength of Ceramic Material: 4-Plot", line = 0.5, outer = TRUE)
par(mfrow=c(1,1))
## Generate bihistogram.
library(Hmisc)
histbackback(split(y,batch),ylab="Strength of Ceramic",
brks=seq(300,900,by=25))
## Generate a quantile-quantile plot for the two batches.
df = data.frame(y,batch)
y1 = df[batch==1,1]
y2 = df[batch==2,1]
qqplot(y2,y1)
abline(0,1)
title(sub="Quantile-Quantile Plot Y1 Y2")
## Generate a box plot for each batch.
boxplot(y~batch,ylab="Ceramic Strength",xlab="Batch")
title("Box Plot by Batch")
## Save variables as factors.
fx1 = factor(x1)
fx2 = factor(x2)
fx3 = factor(x3)
flab = factor(lab)
fbatch = factor(batch)
df = data.frame(y,fbatch,flab,fx1,fx2,fx3)
## Generate four plots on one page.
par(mfrow=c(2,2))
## Plot #1
## Compute the batch means for each laboratory.
avg = aggregate(x=df$y, by=list(df$flab,df$fbatch), FUN="mean")
## Generate the block plot.
boxplot(avg$x ~ avg$Group.1, medlty="blank",
ylab="Ceramic Strength",xlab="Laboratory",
main="Batch Means for Each Laboratory")
## Add labels for the batch means.
text(avg$Group.1[avg$Group.2==1], avg$x[avg$Group.2==1],
labels=avg$Group.2[avg$Group.2==1], pos=1)
text(avg$Group.1[avg$Group.2==2], avg$x[avg$Group.2==2],
labels=avg$Group.2[avg$Group.2==2], pos=3)
## Plot #2
## Generate the block plot for the first factor.
## Create new variable that indicates batch*x1.
## The new variable is necessary to preserve the order
## of the blocks within laboratory.
newx1 = x1/5
lx1 = factor(lab + newx1)
df = data.frame(y,fbatch,lx1)
## Compute the batch means for each laboratory and level of x1.
avg = aggregate(x=df$y, by=list(df$fbatch,df$lx1), FUN="mean")
## Specify locations of the bars on the x axis.
xpos = c(1,5,8,10,13:14,16:17,19:20,22:23)
boxplot(avg$x ~ avg$Group.2, medlty="blank", xlim=c(1,24),
ylab="Ceramic Strength",xlab="Laboratory and x1",
at=xpos,xaxt="n",main="Batch Means:  Lab and x1")
axis(side=1,at=c(1.5,4.5,7.5,10.5,13.5,16.5,19.5,22.5),
labels=c("1","2","3","4","5","6","7","8"))
## Add labels for the batch means.
text(xpos,avg$x[avg$Group.1==1],
labels=avg$Group.1[avg$Group.1==1], pos=1)
text(xpos,avg$x[avg$Group.1==2],
labels=avg$Group.1[avg$Group.1==2], pos=3)
## Plot #3
## Generate the block plot for the second factor.
## Create new variable that indicates batch*x2.
newx2 = x2/5
lx2 = factor(lab + newx2)
df = data.frame(y,fbatch,lx2)
## Compute the batch means for each laboratory and level of x2.
avg = aggregate(x=df$y, by=list(df$fbatch,df$lx2), FUN="mean")
## Specify locations of the bars on the x axis.
xpos = c(1:2,4:5,7:8,10:11,13,17,20,22)
boxplot(avg$x ~ avg$Group.2, medlty="blank", xlim=c(1,24),
ylab="Ceramic Strength",xlab="Laboratory and x2",
at=xpos ,xaxt="n",main="Batch Means:  Lab and x2")
axis(side=1,at=c(1.5,4.5,7.5,10.5,13.5,16.5,19.5,22.5),
labels=c("1","2","3","4","5","6","7","8"))
## Add labels for the batch means.
text(xpos, avg$x[avg$Group.1==1],
labels=avg$Group.1[avg$Group.1==1], pos=1)
text(xpos, avg$x[avg$Group.1==2],
labels=avg$Group.1[avg$Group.1==2], pos=3)
## Plot #4
## Generate the block plot for the third factor.
## Create new variable that indicates batch*x3.
newx3 = x3/5
lx3 = factor(lab + newx3)
df = data.frame(y,fbatch,lx3)
## Compute the batch means for each laboratory and level of x3.
avg = aggregate(x=df$y, by=list(df$fbatch,df$lx3), FUN="mean")
## Specify locations of the bars on the x axis.
xpos = c(1:2,4:5,7:8,10:11,13:14,16:17,19:20,22:23)
boxplot(avg$x ~ avg$Group.2, medlty="blank", xlim=c(1,24),
ylab="Ceramic Strength",xlab="Laboratory and x3",
at=xpos ,xaxt="n",main="Batch Means:  Lab and x3")
axis(side=1,at=c(1.5,4.5,7.5,10.5,13.5,16.5,19.5,22.5),
labels=c("1","2","3","4","5","6","7","8"))
## Add labels for the batch means.
text(xpos, avg$x[avg$Group.1==1],
labels=avg$Group.1[avg$Group.1==1], pos=1)
text(xpos, avg$x[avg$Group.1==2],
labels=avg$Group.1[avg$Group.1==2], pos=3)
par(mfrow=c(1,1))
## Perform an F-test to compare two variances.
var.test(y~batch)
## Perform a two-sample T-test for the case where group variances
## are equal.
t.test(y~batch,var.equal=TRUE,alternative="greater")
## Generate box plot for each laboratory.
boxplot(y~lab,ylab="Ceramic Strength",xlab="Laboratory")
## Create a dataframe with batch 1 data and generate the box plot.
df = data.frame(y,lab,batch)
df1 = df[df$batch==1,]
boxplot(y~lab,data=df1,ylab="Ceramic Strength",xlab="Laboratory")
title("Batch Number 1")
## Create a dataframe with batch 2 data and generate the box plot.
df2 = df[df$batch==2,]
boxplot(y~lab,data=df2,ylab="Ceramic Strength",xlab="Laboratory")
title("Batch Number 2")
## Generate DEX scatter plot for batch 1.
batch = factor(m[,14])
## Restructure data so that x1, x2, and x3 are in a single column.
## Also, save re-coded version of the factor levels for DEX mean plot.
tempx  = x1
tempxc = x1 + 1
dm1 = cbind(y,lab,batch,tempx,tempxc)
tempx  = x2
tempxc = x2 + 4
dm2 = cbind(y,lab,batch,tempx,tempxc)
tempx  = x3
tempxc = x3 + 7
dm3 = cbind(y,lab,batch,tempx,tempxc)
dm4 = rbind(dm1,dm2,dm3)
## Generate factor ID variable.
n = length(y)
varind = c(rep("Table Speed",n),rep("Feed Rate",n),rep("Wheel Grit Size",n))
varind = as.factor(varind)
## Create a dataframe with "stacked" factors and data.
df = data.frame(dm4,varind)
## Create a dataframe for batch 1 data.
df1 = df[df$batch==1,]
## Attach lattice library and generate the DEX scatter plot.
library(lattice)
xyplot(y~tempx|varind,data=df1,layout=c(3,1),xlim=c(-2,2),
ylab="Ceramic Strength",xlab="Factor Levels",
main="Batch 1")
## Comute grand mean for batch 1.
ybar = mean(m[ m[,14]==1,5])
## Generate DEX mean plot.
interaction.plot(df1$tempxc,df1$varind,df1$y,fun=mean,
ylab="Ceramic Strength",xlab="",main="Batch 1 Means",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=ybar)
## Comute overall standard deviation for batch 1.
sdy = sd(m[ m[,14]==1,5])
## Generate DEX standard deviation plot.
interaction.plot(df1$tempxc,df1$varind,df1$y,fun=sd,
ylab="Ceramic Strength",xlab="",
main="Batch 1 Standard Deviations",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=sdy)
## Create a dataframe with batch 2 data.
df2 = df[df$batch==2,]
## Attach lattice library and generate the DEX scatter plot.
library(lattice)
xyplot(y~tempx|varind,data=df2,layout=c(3,1),xlim=c(-2,2),
ylab="Ceramic Strength",xlab="Factor Levels",
main="Batch 2")
## Comute grand mean for batch 2.
ybar = mean(m[ m[,14]==2,5])
## Generate DEX mean plot.
interaction.plot(df2$tempxc,df2$varind,df2$y,fun=mean,
ylab="Ceramic Strength",xlab="",main="Batch 2 Means",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=ybar)
## Comute grand mean for batch 2.
sdy = sd(m[ m[,14]==2,5])
## Generate DEX standard deviation plot.
interaction.plot(df2$tempxc,df2$varind,df2$y,fun=sd,
ylab="Ceramic Strength",xlab="",
main="Batch 2 Standard Deviations",
trace.label="Factor",type="b",pch=19,
legend=FALSE,xaxt="n")
xpos = c(1.5,3.5,5.5)
xlabel = c("Table Speed","Feed Rate","Wheel Grit Size")
axis(side=1,at=xpos,labels=xlabel)
abline(h=sdy)
## Read normal data.
y <- scan(paste(DATAPATH,"randn.dat",sep="/"),skip=25)
## Generate a 4-plot of the data.
library(Hmisc)
t = 1:length(y)
par(mfrow = c(2, 2),
oma = c(0, 0, 2, 0),
mar = c(5.1, 4.1, 2.1, 2.1))
plot(t,y,ylab="Y",xlab="Run Sequence",type="l")
plot(y,Lag(y),xlab="Y[i-1]",ylab="Y[i]")
hist(y,main="",xlab="Y")
qqnorm(y,main="")
mtext("Normal Random Numbers:  4-Plot", line = 0.5, outer = TRUE)
## Generate separate plots to show more detail.
par(mfrow=c(1,1))
plot(t,y,ylab="Y",xlab="Index",type="l")
plot(y,Lag(y),xlab="Y[i-1]",ylab="Y[i]")
hist(y,main="",xlab="Y",freq=FALSE)
curve(dnorm(x,mean=mean(y),sd=sd(y)), add=TRUE, col="blue")
qqnorm(y,main="")
qqline(y,col=2)
## Compute summary statistics.
n = round(length(y),0)
ybar = round(mean(y),5)
std = round(sd(y),5)
stderr = round(std/sqrt(n),5)
v = round(var(y),5)
rany = round((max(y)-min(y)),5)
# Compute the five number summary.
# min, lower hinge, Median, upper hinge, max
z = fivenum(y)
z
lhinge = round(z[2],5)
uhinge = round(z[4],5)
## Compute the inter-quartile range.
iqry = round(IQR(y),5)
## Compute the lag 1 autocorrelation.
z = acf(y)
ac = round(z$acf[2],5)
## Format results for printing.
Statistics = c(n,ybar,std,stderr,v,rany,lhinge,uhinge,iqry,ac)
names(Statistics)= c("Number of Observations ", "Mean", "Std. Dev.",
"Std. Dev. of Mean", "Variance", "Range",
"Lower Hinge", "Upper Hinge", "Inter-Quartile Range",
"Autocorrelation")
data.frame(Statistics)
summary(y)
## Generate index variable and fit straight line.
x = c(1:length(y))
lm(y ~ 1 + x)
summary(lm(y ~ 1 + x))
## Generate arbitrary interval indicator variable and
## run Bartlett's test.
int = as.factor(rep(1:4,each=125))
bartlett.test(y~int)
## Determine critical value for the test.
qchisq(.95,3)
## Generate and plot the autocorrelation function.
z = acf(y,lag.max=21)
plot(z,ci=c(.90,.95),main="",ylab="Autocorrelation")
## Load the lawstat library and perform runs test.
library(lawstat)
runs.test(y)
## Load the nortest library and perform the Anderson-Darling
## normality test.
library(nortest)
ad.test(y)
## Load the outliers library and perform the Grubbs test.
library(outliers)
grubbs.test(y,type=10)
#>         Grubbs test for one outlier
#>         Grubbs test for one outlier
#>
#>         Grubbs test for one outlier
#>
#> data:  y
#>         Grubbs test for one outlier
#>
#> data:  y
#> G = 3.3681, U = 0.9772, p-value = 0.1774
## Read uniform data.
y = scan(paste(DATAPATH,"randu.dat",sep="/"),skip=25)
## Read uniform data.
y = scan("~/Aghiles/R/src/lib/Handbook/res/randu.dat",skip=25)
## Generate a 4-plot of the data.
library(Hmisc)
t = 1:length(y)
par(mfrow = c(2, 2),
oma = c(0, 0, 2, 0),
mar = c(5.1, 4.1, 2.1, 2.1))
plot(t,y,ylab="Y",xlab="Run Sequence",type="l")
plot(y,Lag(y),xlab="Y[i-1]",ylab="Y[i]")
hist(y,main="",xlab="Y")
qqnorm(y,main="")
mtext("Uniform Random Numbers:  4-Plot", line = 0.5, outer = TRUE)
## Generate separate plots to show more detail.
par(mfrow=c(1,1))
plot(t,y,ylab="Y",xlab="Index",type="l")
plot(y,Lag(y),xlab="Y[i-1]",ylab="Y[i]")
## Plot histogram with overlayed normal distribution.
hist(y,main="",xlab="Y",freq=FALSE,ylim=c(0,1.5))
curve(dnorm(x,mean=mean(y),sd=sd(y)), add=TRUE, col="blue")
## Plot histogram with overlayed uniform distribution.
hist(y,main="",xlab="Y",freq=FALSE,ylim=c(0,1.5))
curve(dunif(x), add=TRUE, col="blue")
## Normal probability plot.
qqnorm(y,main="")
qqline(y,col=2)
## Uniform probability plot.
library(gap)
qqunif(y,main="")
## Attach boot library and generate values for bootstrap plot.
library(boot)
## Bootstrap and CI for mean.  d is a vector of integer indexes
samplemean <- function(x, d) {
return(mean(x[d]))
}
b1 = boot(y, samplemean, R=500)
z1 = boot.ci(b1, conf=0.9, type="basic")
meanci = paste("90% CI: ", "(", round(z1$basic[4],4), ", ",
round(z1$basic[5],4), ")", sep="" )
## Bootstrap and CI for median.
samplemedian <- function(x, d) {
return(median(x[d]))
}
b2 = boot(y, samplemedian, R=500)
z2 = boot.ci(b2, conf=0.90, type="basic")
medci = paste("90% CI: ", "(", round(z2$basic[4],4), ", ",
round(z2$basic[5],4), ")", sep="" )
## Bootstrap and CI for midrange.
samplemidran <- function(x, d) {
return( (max(x[d])+min(x[d]))/2 )
}
b3 = boot(y, samplemidran, R=500)
z3 = boot.ci(b3, conf=0.90, type="basic")
midci = paste("90% CI: ", "(", round(z3$basic[4],4), ", ",
round(z3$basic[5],4), ")", sep="" )
## Generate bootstrap plot.
par(mfrow=c(2,3))
plot(b1$t,type="l",ylab="Mean",main=meanci)
plot(b2$t,type="l",ylab="Median",main=medci)
plot(b3$t,type="l",ylab="Midrange",main=midci)
hist(b1$t,main="Bootstrap Mean",xlab="Mean")
hist(b2$t,main="Bootstrap Median",xlab="Median")
hist(b3$t,main="Bootstrap Midrange",xlab="Midrange")
par(mfrow=c(1,1))
## Compute summary statistics.
ybar = round(mean(y),5)
std = round(sd(y),5)
n = round(length(y),0)
stderr = round(std/sqrt(n),5)
v = round(var(y),5)
# Compute the five number summary.
# min, lower hinge, Median, upper hinge, max
z = fivenum(y)
lhinge = round(z[2],5)
uhinge = round(z[4],5)
rany = round((max(y)-min(y)),5)
## Compute the inter-quartile range.
iqry = round(IQR(y),5)
## Compute the lag 1 autocorrelation.
z = acf(y)
ac = round(z$acf[2],5)
## Format results for printing.
Statistics = c(n,ybar,std,stderr,v,rany,lhinge,uhinge,iqry,ac)
names(Statistics)= c("Number of Observations ", "Mean", "Std. Dev.",
"Std. Dev. of Mean", "Variance", "Range",
"Lower Hinge", "Upper Hinge", "Inter-Quartile Range",
"Autocorrelation")
data.frame(Statistics)
summary(y)
## Compute probabilty plot correlation coefficients (PPCC)
## for normal and uniform distributions
x = qqnorm(y)
cor(x$x,y)
#> [1] 0.9762727
#install.packages("gap")
library(gap)
u = qqunif(y,logscale=FALSE)
cor(u$x,sort(y))
## Generate index variable and fit straight line.
x = c(1:length(y))
summary(lm(y ~ 1 + x))
## Critical value to test that the slope is different from zero.
qt(.975,498)
## Load the car library, generate an arbitrary interval indicator
## variable and run Levene's test.
int = as.factor(rep(1:4,each=125))
library(car)
leveneTest(y,int)
## Upper critical value for the F test.
qf(.95,3,496)
## Generate and plot the autocorrelation function.
z = acf(y,lag.max=21)
plot(z,ci=c(.90,.95),main="",ylab="Autocorrelation")
## Load the lawstat library and perform runs test.
library(lawstat)
runs.test(y)
qnorm(.975)
## Load the nortest library and perform the Anderson-Darling
## normality test.
library(nortest)
ad.test(y)
#>         Anderson-Darling normality test
## Read data.
y <- scan(paste(DATAPATH,"mavro.dat",sep="/"),skip=25)
## Read data.
y <- scan(paste(DATAPATH,"mavro.dat",sep="/"),skip=25)
