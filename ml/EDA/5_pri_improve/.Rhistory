#!/usr/bin/env Rscript
DATAPATH <- Sys.getenv("DATAPATH")

dfip = data.frame(y,fx1,fx2,fx3,fx4,fx5,fx6,fx7,
fx12,fx13,fx14,fx15,fx16,fx17,
fx23,fx24,fx25,fx26,fx27,
fx34,fx35,fx36,fx37,
fx45,fx46,fx47,
fx56,fx57,
fx67,fx124)
## Compute effect estimates and factor means.
fmeans = function(x,fac){
q = aggregate(x=x,by=list(fac),FUN="mean")
lo = q[1,2]
hi = q[2,2]
e = hi-lo
ret = c(lo,hi,e)
}
e1 = fmeans(dfip$y,dfip$fx1)
e2 = fmeans(dfip$y,dfip$fx2)
e3 = fmeans(dfip$y,dfip$fx3)
e4 = fmeans(dfip$y,dfip$fx4)
e5 = fmeans(dfip$y,dfip$fx5)
e6 = fmeans(dfip$y,dfip$fx6)
e7 = fmeans(dfip$y,dfip$fx7)
e12 = fmeans(dfip$y,dfip$fx12)
e13 = fmeans(dfip$y,dfip$fx13)
e14 = fmeans(dfip$y,dfip$fx14)
e15 = fmeans(dfip$y,dfip$fx15)
e16 = fmeans(dfip$y,dfip$fx16)
e17 = fmeans(dfip$y,dfip$fx17)
e23 = fmeans(dfip$y,dfip$fx23)
e24 = fmeans(dfip$y,dfip$fx24)
e25 = fmeans(dfip$y,dfip$fx25)
e26 = fmeans(dfip$y,dfip$fx26)
e27 = fmeans(dfip$y,dfip$fx27)
e34 = fmeans(dfip$y,dfip$fx34)
e35 = fmeans(dfip$y,dfip$fx35)
e36 = fmeans(dfip$y,dfip$fx36)
e37 = fmeans(dfip$y,dfip$fx37)
e45 = fmeans(dfip$y,dfip$fx45)
e46 = fmeans(dfip$y,dfip$fx46)
e47 = fmeans(dfip$y,dfip$fx47)
e56 = fmeans(dfip$y,dfip$fx56)
e57 = fmeans(dfip$y,dfip$fx57)
e67 = fmeans(dfip$y,dfip$fx67)
# Create factor labels from effect values.
e = round(rbind(e7,e6,e67,e5,e56,e57,e4,e45,e46,e47,
e3,e34,e35,e36,e37,e2,e23,e24,e25,e26,e27,
e1,e12,e13,e14,e15,e16,e17),1)
textlabs = c("X7 =",
"X6 =", "X67 =",
"X5 =", "X56 =", "X57 =",
"X4 =", "X45 =", "X46 =", "X47 =",
"X3 =", "X34 =", "X35 =", "X36 =", "X37 =",
"X2 =", "X23 =", "X24 =", "X25 =", "X26 =", "X27 =",
"X1 =", "X12 =", "X13 =", "X14 =", "X15 =", "X16 =", "X17 =")
labs = paste(textlabs,e[,3])
group = factor(c(1:28),labels=labs)
# Create data frame with factor level means.
x = e[,1]
xlev = rep(-1,28)
xlo = cbind(x,xlev,group)
x = e[,2]
xlev = rep(1,28)
xhi = cbind(x,xlev,group)
mm = rbind(xlo,xhi)
mm = as.data.frame(mm)
# Customize Lattice plot layout and color.
sp = c(T,T,T,T,T,T,F,
T,T,T,T,T,F,F,
T,T,T,T,F,F,F,
T,T,T,F,F,F,F,
T,T,F,F,F,F,F,
T,F,F,F,F,F,F,
F,F,F,F,F,F,F)
strip.bg_custom = trellis.par.get("strip.background")
strip.bg_custom$col =c("#cce6ff","#ffe5cc","#ccffcc","#ccffff","#ffccff",
"#ffcccc","#ffffcc")
strip.sh_custom = strip.bg_custom
trellis.par.set("strip.background", strip.bg_custom)
trellis.par.set("strip.shingle", strip.sh_custom)
trellis.par.set(list(fontsize=list(text=10)))
# Generate plot.
xyplot(x~xlev | group, data=mm, type="b", xlim=c(-2,2),
layout=c(7,7), skip=sp, col=c(4),
strip = function(..., style,factor.levels,strip.levels,strip.names)
strip.default(..., style = 1,factor.levels=labs,
strip.levels=c(F,T),strip.names=c(T,F)),
xlab="Factor Level", ylab="Light Intensity",
main="DEX Mean Plot for Sonoluminescense Light Intensity",
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = ybar, lty = 2, col = 2)
}
)
## Create dataframe with factors.
fid1 = factor(id23)
fid2 = factor(id13)
fid3 = factor(id12)
df2 = data.frame(y,fx1,fx2,fx3,fx4,fx5,fx6,fx7,
fid1,fid2,fid3)
## Generate seven plots on one page.
par(mfrow=c(3,3),las=0)
## Generate level means.
ag = aggregate(x=df2$y,by=list(df2$fx1,df2$fx2,df2$fx3),FUN="mean")
## Recode variables for plotting.
ag1 = recode(ag$Group.1,"+" <- c(1),"-" <- c(-1))
ag2 = recode(ag$Group.2,"+" <- c(1),"-" <- c(-1))
ag3 = recode(ag$Group.3,"+" <- c(1),"-" <- c(-1))
ag12 = paste(ag1,ag2,sep="")
ag13 = paste(ag1,ag3,sep="")
ag23 = paste(ag2,ag3,sep="")
dfag = data.frame(ag$x,ag$Group.1,ag$Group.2,ag$Group.3,ag12,ag13,ag23)
## Generate the block plot for factor 1.
boxplot(dfag$ag.x ~ dfag$ag23, medlty="blank", boxwex=.5,
ylab="Light Intensity",xlab="Factor Levels of X2,X3",
main="Primary Factor X1", cex.main=1)
## Add points for the effects.
points(dfag$ag23[dfag$ag.Group.1==1],dfag$ag.x[dfag$ag.Group.1==1],
pch=19,col="blue")
points(dfag$ag23[dfag$ag.Group.1==-1],dfag$ag.x[dfag$ag.Group.1==-1],
col="blue")
## Add legend.
legend(3.25,350,c("+","-"),pch=c(19,1), col="blue", bty="o",
x.intersp=.75, title="X1 Level", cex=.7, horiz=TRUE)
## Generate the block plot for factor 2.
boxplot(dfag$ag.x ~ dfag$ag13, medlty="blank", boxwex=.5,
ylab="Sensitivity",xlab="Factor Levels of X1 X3",
main="Primary Factor X2", cex.main=1)
## Add points for the effect means.
points(dfag$ag13[dfag$ag.Group.2==1],dfag$ag.x[dfag$ag.Group.2==1],
pch=19,col="blue")
points(dfag$ag13[dfag$ag.Group.2==-1],dfag$ag.x[dfag$ag.Group.2==-1],
col="blue")
## Add legend.
legend(.5,350,c("+","-"),pch=c(19,1), col="blue", bty="o",
x.intersp=.75, title="X2 Level", cex=.7, horiz=TRUE)
## Generate the block plot for factor 3.
boxplot(dfag$ag.x ~ dfag$ag12, medlty="blank", boxwex=.5,
ylab="Sensitivity",xlab="Factor Levels of X1 X2",
main="Primary Factor X3", cex.main=1)
## Add points for the effects.
points(dfag$ag12[dfag$ag.Group.3==1],dfag$ag.x[dfag$ag.Group.3==1],
pch=19,col="blue")
points(dfag$ag12[dfag$ag.Group.3==-1],dfag$ag.x[dfag$ag.Group.3==-1],
col="blue")
## Add legend.
legend(0.5,350,c("+","-"),pch=c(19,1), col="blue", bty="o",
x.intersp=.75, title="X3 Level", cex=.7, horiz=TRUE)
## Generate level means for factor 4.
ag = aggregate(x=df2$y,by=list(df2$fx4,df2$fx1,df2$fx2),FUN="mean")
## Recode variables for plotting.
ag1 = recode(ag$Group.2,"+" <- c(1),"-" <- c(-1))
ag2 = recode(ag$Group.3,"+" <- c(1),"-" <- c(-1))
ag12 = paste(ag1,ag2,sep="")
dfag = data.frame(ag$x,ag$Group.1,ag12)
## Generate the block plot for factor 4.
boxplot(dfag$ag.x ~ dfag$ag12, medlty="blank", boxwex=.5,
ylab="Light Intensity",xlab="Factor Levels of X1,X2",
main="Primary Factor X4", cex.main=1)
## Add points for the effects.
points(dfag$ag12[dfag$ag.Group.1==1],dfag$ag.x[dfag$ag.Group.1==1],
pch=19,col="blue")
points(dfag$ag12[dfag$ag.Group.1==-1],dfag$ag.x[dfag$ag.Group.1==-1],
col="blue")
## Add legend.
legend(.5,220,c("+","-"),pch=c(19,1), col="blue", bty="o",
x.intersp=.75, title="X4 Level", cex=.7, horiz=TRUE)
## Generate level means for factor 5.
ag = aggregate(x=df2$y,by=list(df2$fx5,df2$fx1,df2$fx2),FUN="mean")
## Recode variables for plotting.
ag1 = recode(ag$Group.2,"+" <- c(1),"-" <- c(-1))
ag2 = recode(ag$Group.3,"+" <- c(1),"-" <- c(-1))
ag12 = paste(ag1,ag2,sep="")
dfag = data.frame(ag$x,ag$Group.1,ag12)
## Generate the block plot for factor 5.
boxplot(dfag$ag.x ~ dfag$ag12, medlty="blank", boxwex=.5,
ylab="Light Intensity",xlab="Factor Levels of X1,X2",
main="Primary Factor X5", cex.main=1)
## Add points for the effects.
points(dfag$ag12[dfag$ag.Group.1==1],dfag$ag.x[dfag$ag.Group.1==1],
pch=19,col="blue")
points(dfag$ag12[dfag$ag.Group.1==-1],dfag$ag.x[dfag$ag.Group.1==-1],
col="blue")
## Add legend.
legend(.5,225,c("+","-"),pch=c(19,1), col="blue", bty="o",
x.intersp=.75, title="X5 Level", cex=.7, horiz=TRUE)
## Generate level means for factor 6.
ag = aggregate(x=df2$y,by=list(df2$fx6,df2$fx1,df2$fx2),FUN="mean")
## Recode variables for plotting.
ag1 = recode(ag$Group.2,"+" <- c(1),"-" <- c(-1))
ag2 = recode(ag$Group.3,"+" <- c(1),"-" <- c(-1))
ag12 = paste(ag1,ag2,sep="")
dfag = data.frame(ag$x,ag$Group.1,ag12)
## Generate the block plot for factor 6.
boxplot(dfag$ag.x ~ dfag$ag12, medlty="blank", boxwex=.5,
ylab="Light Intensity",xlab="Factor Levels of X1,X2",
main="Primary Factor X6", cex.main=1)
## Add points for the effects.
points(dfag$ag12[dfag$ag.Group.1==1],dfag$ag.x[dfag$ag.Group.1==1],
pch=19,col="blue")
points(dfag$ag12[dfag$ag.Group.1==-1],dfag$ag.x[dfag$ag.Group.1==-1],
col="blue")
## Add legend.
legend(.5,225,c("+","-"),pch=c(19,1), col="blue", bty="o",
x.intersp=.75, title="X6 Level", cex=.7, horiz=TRUE)
## Generate level means for factor 7.
ag = aggregate(x=df2$y,by=list(df2$fx7,df2$fx1,df2$fx2),FUN="mean")
## Recode variables for plotting.
ag1 = recode(ag$Group.2,"+" <- c(1),"-" <- c(-1))
ag2 = recode(ag$Group.3,"+" <- c(1),"-" <- c(-1))
ag12 = paste(ag1,ag2,sep="")
dfag = data.frame(ag$x,ag$Group.1,ag12)
## Generate the block plot for factor 7.
boxplot(dfag$ag.x ~ dfag$ag12, medlty="blank", boxwex=.5,
ylab="Light Intensity",xlab="Factor Levels of X1,X2",
main="Primary Factor X7", cex.main=1)
## Add points for the effects.
points(dfag$ag12[dfag$ag.Group.1==1],dfag$ag.x[dfag$ag.Group.1==1],
pch=19,col="blue")
points(dfag$ag12[dfag$ag.Group.1==-1],dfag$ag.x[dfag$ag.Group.1==-1],
col="blue")
## Add legend.
legend(.5,350,c("+","-"),pch=c(19,1), col="blue", bty="o",
x.intersp=.75, title="X7 Level", cex=.7, horiz=TRUE)
par(mfrow=c(1,1))
## Generate averages for each factor and level.
q1 = aggregate(x=dfip$y,by=list(dfip$fx1),FUN="mean")
qt1 = t(q1$x)
q2 = aggregate(x=dfip$y,by=list(dfip$fx2),FUN="mean")
qt2 = t(q2$x)
q3 = aggregate(x=dfip$y,by=list(dfip$fx3),FUN="mean")
qt3 = t(q3$x)
q4 = aggregate(x=dfip$y,by=list(dfip$fx4),FUN="mean")
qt4 = t(q4$x)
q5 = aggregate(x=dfip$y,by=list(dfip$fx5),FUN="mean")
qt5 = t(q5$x)
q6 = aggregate(x=dfip$y,by=list(dfip$fx6),FUN="mean")
qt6 = t(q6$x)
q7 = aggregate(x=dfip$y,by=list(dfip$fx7),FUN="mean")
qt7 = t(q7$x)
q12 = aggregate(x=dfip$y,by=list(dfip$fx12),FUN="mean")
qt12 = t(q12$x)
q13 = aggregate(x=dfip$y,by=list(dfip$fx13),FUN="mean")
qt13 = t(q13$x)
q14 = aggregate(x=dfip$y,by=list(dfip$fx14),FUN="mean")
qt14 = t(q14$x)
q15 = aggregate(x=dfip$y,by=list(dfip$fx15),FUN="mean")
qt15 = t(q15$x)
q16 = aggregate(x=dfip$y,by=list(dfip$fx16),FUN="mean")
qt16 = t(q16$x)
q17 = aggregate(x=dfip$y,by=list(dfip$fx17),FUN="mean")
qt17 = t(q17$x)
q24 = aggregate(x=dfip$y,by=list(dfip$fx24),FUN="mean")
qt24 = t(q24$x)
q124 = aggregate(x=dfip$y,by=list(dfip$fx124),FUN="mean")
qt124 = t(q124$x)
yp = rbind(qt1,qt2,qt3,qt4,qt5,qt6,qt7,
qt12,qt13,qt14,qt15,qt16,qt17,qt24,qt124)
## Generate names for effect estimates.
z = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 +
x12 + x13 + x14 + x15 + x16 + x17 + x24 + x124)
zz = summary(z)
effects = coef(z)[-1]*2
## Generate Youden plot.
plot(yp[,1],yp[,2], xlim=c(70,155), ylim=c(70,155),
xlab="Average Response for -1 Settings",
ylab="Average Response for +1 Settings",
main="Youden Plot for Sonoluminescense Data")
text(yp[,1],yp[,2],labels=names(effects),pos=4,cex=.75)
abline(h=ybar)
abline(v=ybar)
## Save effects in decreasing order.
torder = zz$coefficients[order(abs(zz$coefficients[,1]),decreasing=TRUE),]
torder[,1]
yvar = torder[-1,1]*2
lvar16 = rownames(torder)
lvar = lvar16[-1]
xvar = c(1:length(lvar))
## Plot absolute values of effects in decreasing order.
plot(xvar,abs(yvar), xlim=c(1,16),
main = "Sonoluminescent Light Intensity",
ylab="|Effect|", xlab="", xaxt="n")
text(xvar,abs(yvar), labels=lvar, pos=4, cex=.8)
## Generate half-normal probability plot of effect estimates.
library(faraway)
halfnorm(effects,nlab=length(effects), cex=.8,
labs=names(effects),
ylab="Ordered |Effects|",
main="Half-Normal Probability Plot of Sonoluminescent Data")
## Compute the residual standard deviation for cumulative
## models (mean plus cumulative terms).
z = lm(y ~ 1)
ese = summary(z)$sigma
z = update(z, . ~ . + x2)
se1 = summary(z)$sigma
z = update(z, . ~ . + x7)
se2 = summary(z)$sigma
z = update(z, . ~ . + x13)
se3 = summary(z)$sigma
z = update(z, . ~ . + x1)
se4 = summary(z)$sigma
z = update(z, . ~ . + x3)
se5 = summary(z)$sigma
z = update(z, . ~ . + x17)
se6 = summary(z)$sigma
z = update(z, . ~ . + x12)
se7 = summary(z)$sigma
z = update(z, . ~ . + x16)
se8 = summary(z)$sigma
z = update(z, . ~ . + x14)
se9 = summary(z)$sigma
z = update(z, . ~ . + x6)
se10 = summary(z)$sigma
z = update(z, . ~ . + x5)
se11 = summary(z)$sigma
z = update(z, . ~ . + x124)
se12 = summary(z)$sigma
z = update(z, . ~ . + x4)
se13 = summary(z)$sigma
z = update(z, . ~ . + x24)
se14 = summary(z)$sigma
z = update(z, . ~ . + x15)
se15 = summary(z)$sigma
Eff.SE = rbind(ese,se1,se2,se3,se4,se5,se6,se7,se8,se9,
se10,se11,se12,se13,se14,se15)
## Plot residual standard deviation for cummulative models.
plot(Eff.SE, main = "Sonoluminescent Light Intensity",
ylab="Cummulative Residual Standard Deviation", xlab="Additional Term",
xaxt="n")
text(c(1:length(Eff.SE)) ,Eff.SE, labels=lvar16, pos=4, cex=.8)
## Generate level means for plotting.
q = aggregate(x=dfip$y,by=list(dfip$fx2,dfip$fx7),FUN="mean")
qv1 = as.vector(q$Group.1,mode="numeric")-1
qv2 = as.vector(q$Group.2,mode="numeric")-1
qv1[qv1==0] = -1
qv2[qv2==0] = -1
## Contour plot y(x7),x(x2)
## Generate x and y data for plotting.
xord = seq(-2,2,by=.1)
yord = seq(-2,2,by=.1)
## Fit model with two factors, x2 and x7, and their interaction
## for predicting the surface.
z = lm(y ~ 1 + x2 + x7 + x27)
## Generate predicted response surface and generate matrix of surface.
model = function (a, b){
z$coefficients[1] +
z$coefficients[2]*a +
z$coefficients[3]*b +
z$coefficients[4]*a*b}
pmatu = outer(xord,yord,model)
## Generate contour plot, add design points and labels.
contour(xord, yord, pmatu, nlevels=15, main="Contour Plot",
xlab="x2", ylab="x7", col="blue")
points(qv1,qv2,pch=19)
text(c(qv1[1],qv1[3]),c(qv2[1],qv2[3]),labels=c(q$x[1],q$x[3]),pos=2)
text(c(qv1[2],qv1[4]),c(qv2[2],qv2[4]),labels=c(q$x[2],q$x[4]),pos=4)
lines(c(-1,1,1,-1,-1),c(-1,-1,1,1,-1))
.libPaths()
source('~/S11/code/R/src/5_pri_improve/pri5323_Multiple response case.r', echo=TRUE)
.libPaths()
.libPaths()
.libPaths()
## Input data.
m = matrix(
c(0.0, 0.0, 1.0, 16.8,
0.0, 0.0, 1.0, 16.0,
0.0, 0.5, 0.5, 10.0,
0.0, 0.5, 0.5,  9.7,
0.0, 0.5, 0.5, 11.8,
0.0, 1.0, 0.0,  8.8,
0.0, 1.0, 0.0, 10.0,
0.5, 0.0, 0.5, 17.7,
0.5, 0.0, 0.5, 16.4,
0.5, 0.0, 0.5, 16.6,
0.5, 0.5, 0.0, 15.0,
0.5, 0.5, 0.0, 14.8,
0.5, 0.5, 0.0, 16.1,
1.0, 0.0, 0.0, 11.0,
1.0, 0.0, 0.0, 12.4), ncol=4, byrow=T)
x1 = m[,1]
x2 = m[,2]
x3 = m[,3]
y  = m[,4]
## Fit model to data.
m1 = lm(y ~ -1 + x1 + x2 + x3 + x1*x2 + x1*x3 + x2*x3)
## Combine model effects for F test.
q = anova(m1)
mss = sum(q[1:6,2])
mdof = round(sum(q[1:6,1]),1)
mmse = mss/mdof
rss = q[7,2]
rdof = q[7,1]
mse = rss/rdof
## Combine and print results.
residual = c(rdof,rss,mse,NA,NA)
model = c(mdof,mss,mmse,mmse/mse,df(mmse/mse,mdof,rdof))
a = data.frame(rbind(model,residual))
names(a) = c("DOF","Sum-of-Squares","MSE","F Value","Prob #> F")
a
## Print summary of model fit.
summary(m1)
## Generate triangular plot.
## Attach lattice library.
library(lattice)
## Generate triangular area for plotting.
trian <- expand.grid(base=seq(0,1,l=100*2), high=seq(0,sin(pi/3),l=87*2))
trian <- subset(trian, (base*sin(pi/3)*2)>high)
trian <- subset(trian, ((1-base)*sin(pi/3)*2)>high)
new <- data.frame(x2=trian$high*2/sqrt(3))
new$x3 <- trian$base-trian$high/sqrt(3)
new$x1 <- 1-new$x3-new$x2
## Predict triangular surface based on regression model.
trian$yhat <- predict(m1, newdata=new)
## Create function to place grid lines and axis labels on the plot.
grade.trellis <- function(from=0.2, to=0.8, step=0.2, col=1, lty=2, lwd=0.5){
x1 <- seq(from, to, step)
x2 <- x1/2
y2 <- x1*sqrt(3)/2
x3 <- (1-x1)*0.5+x1
y3 <- sqrt(3)/2-x1*sqrt(3)/2
panel.segments(x1, 0, x2, y2, col=col, lty=lty, lwd=lwd)
panel.text(x1, 0, label=x1, pos=1)
panel.segments(x1, 0, x3, y3, col=col, lty=lty, lwd=lwd)
panel.text(x2, y2, label=rev(x1), pos=2)
panel.segments(x2, y2, 1-x2, y2, col=col, lty=lty, lwd=lwd)
panel.text(x3, y3, label=rev(x1), pos=4)
}
## Generate triangular contour plot.
levelplot(yhat~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,0.96),
xlab=NULL, ylab=NULL, contour=TRUE, labels=FALSE, colorkey=TRUE,
par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))
trellis.focus("panel", 1, 1, highlight=FALSE)
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))
grade.trellis()
panel.text(.9,.45,label="x2",pos=2)
panel.text(.1,.45,label="x1",pos=4)
panel.text(.5,-.05,label="x3",pos=1)
trellis.unfocus()
## Read data and save relevant variables.
m = matrix(scan(paste(DATAPATH,"ceramic.dat",sep="/"),skip=1),ncol=7,byrow=T)
strength = m[,6]
## Read data and save relevant variables.
m = matrix(scan(paste(DATAPATH,"ceramic.dat",sep="/"),skip=25),ncol=7,byrow=T)
strength = m[,6]
order = m[,7]
## Save variables as factors.
speed = as.factor(m[,1])
rate = as.factor(m[,2])
grit = as.factor(m[,3])
direction = as.factor(m[,4])
batch = as.factor(m[,5])
## Save numeric variables and interactions.
s = m[,1]
r = m[,2]
g = m[,3]
d = m[,4]
b = m[,5]
db = d*b
gd = g*d
gb = g*b
rg = r*g
rd = r*d
rb = r*b
sr = s*r
sg = s*g
ds = s*d
sb = s*b
df = data.frame(speed,rate,grit,direction,batch,strength,order,
s,r,g,d,b,db,gd,gb,rg,rd,rb,sr,sg,ds,sb)
df[,1:7]
## Generate four plots.
par(bg=rgb(1,1,0.8), mfrow=c(2,2))
qqnorm(strength)
qqline(strength, col = 2)
boxplot(strength, horizontal=TRUE, main="Box Plot", xlab="Strength")
hist(strength, main="Histogram", xlab="Strength")
plot(order, strength, xlab="Actual Run Order", ylab="Strength",
main="Run Order Plot")
par(mfrow=c(1,1))
par(bg=rgb(1,1,0.8),mfrow=c(2,3))
boxplot(strength~speed, data=df, main="Strength by Table Speed",
xlab="Table Speed",ylab="Strength")
boxplot(strength~rate, data=df, main="Strength by Feed Rate",
xlab="Feed Rate",ylab="Strength")
boxplot(strength~grit, data=df, main="Strength by Wheel Grit",
xlab="Wheel Grit",ylab="Strength")
boxplot(strength~direction, data=df, main="Strength by Direction",
xlab="Direction",ylab="Strength")
boxplot(strength~batch, data=df, main="Strength by Batch",
xlab="Batch",ylab="Strength")
par(mfrow=c(1,1))
## Fit a model with up to third order interactions.
q = aov(strength~(speed+rate+grit+direction+batch)^3,data=df)
summary(q)
## Stepwise regression based on AIC.
sreg = step(q,direction="backward")
summary(sreg)
## Remove non-significant terms from the stepwise model.
redmod = aov(formula = strength ~ speed + rate + grit + direction +
batch + speed:rate + speed:grit + speed:direction +
rate:direction + grit:direction + direction:batch +
speed:rate:direction, data = df)
summary(redmod)
## Print adjusted R squared.
summary.lm(redmod)$adj.r.squared
## Fit a model with all effects.
q = aov(strength~(speed+rate+grit+direction+batch)^5,data=df)
## Save effects in a vector, but remove intercept.
qef = q$effects
qef = qef[-1]
## Sort effects and save labels.
sef = qef[order(qef)]
qlab = names(sef)
