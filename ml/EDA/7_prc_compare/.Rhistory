#!/usr/bin/env Rscript
DATAPATH <- Sys.getenv("DATAPATH")

source('~/S11/code/R/src/7_prc_compare/prc232.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc232.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc241.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc263.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc474.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc474.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc474.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc232.r', echo=TRUE)
source('~/S11/code/R/src/7_prc_compare/prc241.r', echo=TRUE)
## Input constants.
d=55
v = 100
r = 1 + d/v
## Find the root of the function.
cnu = function(nu){pchisq(qchisq(.95,nu)/r,nu) - 0.01}
size = uniroot(cnu,c(1,200))
size$root
## Generate table of sample sizes.
x=matrix(nrow=200, ncol=3)
for(nu in (1:200)){
bnu = qchisq(.95,nu)
bnu=bnu/r
cnu=pchisq(bnu,nu)
x[nu,1] = nu
x[nu,2] = bnu
x[nu,3] = cnu}
print(x[165:175,])
#>      nu      bnu         cnu
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
critical.range = c(critical.range,
sqrt(qchisq(.95,4))*sqrt(p[i]*(1-p[i])/300 + p[j]*(1-p[j])/300))
#>       value critical.range
#>       value critical.range
#>  [1,] 0.033          0.086
#>       value critical.range
#>  [1,] 0.033          0.086
#>  [2,] 0.020          0.085
#>       value critical.range
#>  [1,] 0.033          0.086
#>  [2,] 0.020          0.085
#>  [3,] 0.090          0.093
source('~/aghiles/code/R/src/7_prc_compare/prc474_Comparing multiple proportions_ The Marascuillo procedure.r')
source('~/aghiles/code/R/src/8_apr_reliability/apr250_Gamma distribution.r')
source('/media/aghiles/ADATA HD650/Disque_100GB/UBUNTU_2018/aghiles1/code/R/src/7_prc_compare/prc263_Location of Population Values.r')
source('~/aghiles/code/R/src/8_apr_reliability/apr163_Extreme value distribution.r')
.libPaths()
.libPaths("/home/aghiles/aghiles/code/R/lib/3.2")
.libPaths()
source('/media/aghiles/ADATA HD650/Disque_100GB/UBUNTU_2018/aghiles1/code/R/src/7_prc_compare/prc263_Location of Population Values.r')
.libPaths()
.libPaths()
source('~/aghiles/code/R/src/7_prc_compare/prc263_Location of Population Values.r')
## Input constants.
d=55
v = 100
r = 1 + d/v
## Find the root of the function.
cnu = function(nu){pchisq(qchisq(.95,nu)/r,nu) - 0.01}
size = uniroot(cnu,c(1,200))
size$root
## Generate table of sample sizes.
x=matrix(nrow=200, ncol=3)
for(nu in (1:200)){
bnu = qchisq(.95,nu)
bnu=bnu/r
cnu=pchisq(bnu,nu)
x[nu,1] = nu
x[nu,2] = bnu
x[nu,3] = cnu}
print(x[165:175,])
## Set the proportions of interest.
p = c(0.120, 0.153, 0.140, 0.210, 0.127)
N = length(p)
value = critical.range = c()
## Compute critical values.
for (i in 1:(N-1))
{ for (j in (i+1):N)
{
value = c(value,(abs(p[i]-p[j])))
critical.range = c(critical.range,
sqrt(qchisq(.95,4))*sqrt(p[i]*(1-p[i])/300 + p[j]*(1-p[j])/300))
}
}
round(cbind(value,critical.range),3)
## Input constants.
d=55
v = 100
r = 1 + d/v
## Find the root of the function.
cnu = function(nu){pchisq(qchisq(.95,nu)/r,nu) - 0.01}
size = uniroot(cnu,c(1,200))
size$root
## Generate table of sample sizes.
x=matrix(nrow=200, ncol=3)
for(nu in (1:200)){
bnu = qchisq(.95,nu)
bnu=bnu/r
cnu=pchisq(bnu,nu)
x[nu,1] = nu
x[nu,2] = bnu
x[nu,3] = cnu}
print(x[165:175,])
#>      nu      bnu         cnu
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#>      nu      bnu         cnu
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 165 165 126.4344 0.011366199
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 175 175 133.4625 0.008452517
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 175 175 133.4625 0.008452517
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 175 175 133.4625 0.008452517
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 175 175 133.4625 0.008452517
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 175 175 133.4625 0.008452517
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 175 175 133.4625 0.008452517
#> 166 166 127.1380 0.011035681
#> 167 167 127.8414 0.010714513
#> 168 168 128.5446 0.010402441
#> 169 169 129.2477 0.010099215
#> 170 170 129.9506 0.009804594
#> 171 171 130.6533 0.009518341
#> 172 172 131.3558 0.009240228
#> 173 173 132.0582 0.008970030
#> 174 174 132.7604 0.008707531
#> 175 175 133.4625 0.008452517
