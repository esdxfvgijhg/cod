## 3. How much does concurrency matter?
# We conduct simulations, varying concurrency by 3 levels
mails.important.net <- network(mails_caliopen.important, matrix.type ="edgelist", weighted = TRUE, directed=FALSE)
est <- netest(mails_caliopen.important.net, formation, target.stats, coef.diss, verbose = FALSE)
param <- param.net(inf.prob = 0.5, act.rate = 2, rec.rate=0.01)
init <- init.net(i.num = 10)
control <- control.net(type = "SIS", nsteps = 500, nsims = 5, verbose = FALSE)
sim <- netsim(est, param, init, control)
est <- netest(mails_caliopen.important.net, formation, target.stats, coef.diss, verbose = FALSE)
## 3. How much does concurrency matter?
# We conduct simulations, varying concurrency by 3 levels
mails.important.net <- network(mails_caliopen.important, matrix.type ="edgelist", weighted = TRUE, directed=FALSE)
vcount(mails.important.net)
formation <- ~edges
mean.edge<-0.7
target.stats<-mean.edge*(nn/2)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 100)
est <- netest(mails_caliopen.important.net, formation, target.stats, coef.diss, verbose = FALSE)
mails_caliopen.important.net <- network(mails_caliopen.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
mails_caliopen.important.net <- network(mails_caliopen.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
library(network)
mails_caliopen.important.net <- network(mails_caliopen.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
mails_caliopen.important.net <- network(mails_caliopen.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
# Centrality
for (i in 1:length_cent){
mails_caliopen.important.net %v% names(calc_cent)[i] <- calc_cent[[i]]
}
propag <- propagation(wgtmat, 0.8, op, 25)
for (i in c(1:20)) {
png(cbind(i,".png"), width = 1888, height = 1391)
dr1 <- ecdf(unlist(propag[i]))(unlist(propag[i]))
plot_aghiles(mails_caliopen.important.g, dr1, , "", "", "")
dev.off()
}
source("script/setup.r")
source("script/setup.r")
source("script/setup.r")
propag <- propagation(wgtmat, 0.8, op, 25)
for (i in c(1:20)) {
png(cbind(i,".png"), width = 1888, height = 1391)
dr1 <- ecdf(unlist(propag[i]))(unlist(propag[i]))
plot_aghiles(mails_caliopen.important.g, dr1, , "", "", "")
dev.off()
}
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
propag <- propagation(wgtmat, 0.8, op, 25)
for (i in c(1:2)) {
png(cbind(i,".png"), width = 1888, height = 1391)
dr1 <- ecdf(unlist(propag[i]))(unlist(propag[i]))
plot_aghiles(mails_caliopen.important.g, dr1, , "", "", "")
dev.off()
}
# sed -i "1s/.*/From;To;Content;Date;x/" mails_caliopen.csv
# source("script/read.r")
# write.csv(mails_caliopen, "mails_caliopen.csv", row.names=FALSE)
mails_caliopen <- read.csv(file="../res/mails_caliopen.csv", header=TRUE, sep=";")
# sed -i "1s/.*/From;To;Content;Date;x/" mails_caliopen.csv
# source("script/read.r")
# write.csv(mails_caliopen, "mails_caliopen.csv", row.names=FALSE)
mails_caliopen <- read.csv(file="~Downloads/dataset/mails_caliopen.csv", header=TRUE, sep=";")
# sed -i "1s/.*/From;To;Content;Date;x/" mails_caliopen.csv
# source("script/read.r")
# write.csv(mails_caliopen, "mails_caliopen.csv", row.names=FALSE)
mails_caliopen <- read.csv(file="~/Downloads/dataset/mails_caliopen.csv", header=TRUE, sep=";")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
mails_caliopen.counted <- ddply(mails_caliopen, .(From, To, Content, Date, x), summarise, weight = length(To))
mails_caliopen.sender <- unique(mails_caliopen.counted$From)
mails_caliopen.connected <- subset(mails_caliopen.counted, To %in% mails_caliopen.sender)
mails_caliopen.receiver <- unique(mails_caliopen.connected$To)
mails_caliopen.connected <- subset(mails_caliopen.connected, From %in% mails_caliopen.receiver)
mails_caliopen.important <- subset(mails_caliopen.connected, weight > 0)
mails_caliopen.important.g <- graph_from_data_frame(mails_caliopen.important, directed=F)
mails_caliopen.important.g <- graph_from_adjacency_matrix(as_adjacency_matrix(mails_caliopen.important.g), mode = "undirected", weighted = TRUE)
mails_caliopen.important.g <- simplify(mails_caliopen.important.g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
mails_caliopen.important.g <- delete.vertices(mails_caliopen.important.g, which(degree(mails_caliopen.important.g) < 1))
clique <- largest.cliques(mails_caliopen.important.g)
lk <- unlist(adjacent_vertices(mails_caliopen.important.g, clique[[1]], mode = "all"))
lk2 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk, mode = "all"))
lk3 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk2, mode = "all"))
mails_caliopen.important.g <- induced.subgraph(graph=mails_caliopen.important.g,vids=lk3)
propag <- propagation(wgtmat, 0.8, op, 25)
for (i in c(1:2)) {
png(cbind(i,".png"), width = 1888, height = 1391)
dr1 <- ecdf(unlist(propag[i]))(unlist(propag[i]))
plot_aghiles(mails_caliopen.important.g, dr1, , "", "", "")
dev.off()
}
propag <- propagation(wgtmat, 0.8, op, 25)
for (i in c(1:2)) {
png(cbind(i,".png"), width = 1888, height = 1391)
dr1 <- ecdf(unlist(propag[i]))(unlist(propag[i]))
plot_aghiles(mails_caliopen.important.g, dr1, , "", "", "")
dev.off()
}
# sed -i "1s/.*/From;To;Content;Date;x/" mails_caliopen.csv
# source("script/read.r")
# write.csv(mails_caliopen, "mails_caliopen.csv", row.names=FALSE)
mails_caliopen <- read.csv(file="~/Downloads/dataset/mails_caliopen.csv", header=TRUE, sep=";")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
mails_caliopen.counted <- ddply(mails_caliopen, .(From, To, Content, Date, x), summarise, weight = length(To))
mails_caliopen.sender <- unique(mails_caliopen.counted$From)
mails_caliopen.connected <- subset(mails_caliopen.counted, To %in% mails_caliopen.sender)
mails_caliopen.receiver <- unique(mails_caliopen.connected$To)
mails_caliopen.connected <- subset(mails_caliopen.connected, From %in% mails_caliopen.receiver)
mails_caliopen.important <- subset(mails_caliopen.connected, weight > 0)
mails_caliopen.important.g <- graph_from_data_frame(mails_caliopen.important, directed=F)
mails_caliopen.important.g <- graph_from_adjacency_matrix(as_adjacency_matrix(mails_caliopen.important.g), mode = "undirected", weighted = TRUE)
mails_caliopen.important.g <- simplify(mails_caliopen.important.g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
mails_caliopen.important.g <- delete.vertices(mails_caliopen.important.g, which(degree(mails_caliopen.important.g) < 1))
clique <- largest.cliques(mails_caliopen.important.g)
lk <- unlist(adjacent_vertices(mails_caliopen.important.g, clique[[1]], mode = "all"))
lk2 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk, mode = "all"))
lk3 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk2, mode = "all"))
mails_caliopen.important.g <- induced.subgraph(graph=mails_caliopen.important.g,vids=lk3)
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
plot_aghiles(mails_caliopen.important.g, dr2, , "", "", "")
mails_caliopen.important.g <- induced.subgraph(graph=mails_caliopen.important.g,vids=lk3)
mails_caliopen.important.g <- graph_from_data_frame(mails_caliopen.important, directed=F)
mails_caliopen.important.g <- graph_from_adjacency_matrix(as_adjacency_matrix(mails_caliopen.important.g), mode = "undirected", weighted = TRUE)
mails_caliopen.important.g <- simplify(mails_caliopen.important.g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
mails_caliopen.important.g <- delete.vertices(mails_caliopen.important.g, which(degree(mails_caliopen.important.g) < 1))
clique <- largest.cliques(mails_caliopen.important.g)
lk <- unlist(adjacent_vertices(mails_caliopen.important.g, clique[[1]], mode = "all"))
lk2 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk, mode = "all"))
lk3 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk2, mode = "all"))
mails_caliopen.important.g <- induced.subgraph(graph=mails_caliopen.important.g,vids=lk3)
clique <- largest.cliques(mails_caliopen.important.g)
lk <- unlist(adjacent_vertices(mails_caliopen.important.g, clique[[1]], mode = "all"))
mails_caliopen.important.g <- induced.subgraph(graph=mails_caliopen.important.g,vids=lk)
plot_aghiles(mails_caliopen.important.g)
clique <- largest.cliques(mails_caliopen.important.g)
lk <- unlist(adjacent_vertices(mails_caliopen.important.g, clique[[1]], mode = "all"))
lk2 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk, mode = "all"))
mails_caliopen.important.g <- induced.subgraph(graph=mails_caliopen.important.g,vids=lk2)
plot_aghiles(mails_caliopen.important.g)
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Reputation level")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Reputation level")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Reputation level")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
source("script/setup.r")
library(mc2d)  ## needed for dtriang
source("script/setup.r")
library(formattable)
source("script/setup.r")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Reputation level")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
op
op[200]
dr1
dr1[200]
op[200]
dr1[200]
library(gridExtra)
library(grid)
d <- head(op[,1:3])
d <- head(op[1:3])
grid.table(d)
d <- c(op[1:3], dr1[1:3])
grid.table(d)
d <- cbind(op[1:3], dr1[1:3])
grid.table(d)
library(gridExtra)
library(grid)
d <- cbind(op[1:3], dr1[1:3])
grid.table(d)
d <- cbind(op[1:10], dr1[1:10])
grid.table(d)
d <- cbind(op[1:20], dr1[1:20])
grid.table(d)
d <- cbind(op[1:10], dr1[1:10])
d <- cbind(op[1:3], dr1[1:3])
grid.table(d)
d <- cbind(op[1:3], dr1[1:3])
grid.table(d)
d <- cbind("t", "s")
d1 <- cbind(op[1:3], dr1[1:3])
d <- c(d, d1)
grid.table(d)
d <- cbind("t", "s")
d1 <- cbind(op[1:3], dr1[1:3])
d <- cbind(d, d1)
d <- cbind("t", "s")
d1 <- cbind(op[1:3], dr1[1:3])
d2 <- cbind(d, d1)
grid.table(d2)
d <- cbind("t", "s")
d1 <- cbind(op[1:3], dr1[1:3])
d2 <- cbind(d, d1)
d <- cbind("t", "s")
d1 <- cbind(op[1:3], dr1[1:3])
d2 <- rbind(d, d1)
grid.table(d2)
d <- cbind("technical index", "social index")
d1 <- cbind(op[1:3], dr1[1:3])
d2 <- rbind(d, d1)
grid.table(d2)
d <- cbind("Technical index", "Social index")
d1 <- cbind(op[1:3], dr1[1:3])
d2 <- rbind(d, d1)
grid.table(d2)
library(gridExtra)
library(grid)
d <- cbind("Technical index", "Social index")
d1 <- cbind(op[1:3], dr1[1:3])
d2 <- rbind(d, d1)
grid.table(d2)
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Reputation level")
grid.table(d2)
grid.table(d2)
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Trust level")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Trust level")
grid.table(d2)
library(gridExtra)
library(grid)
grid.table(d2)
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Trust level")
grid.table(d2)
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Trust level")
library(gridExtra)
library(grid)
grid.table(d2)
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
results2.df
write(results2.df, file = "results",
ncolumns = if(is.character(results2.df)) 1 else 5,
append = FALSE, sep = " ")
fil <- tempfile("data")
# the file data contains x, two rows, five cols
# 1 3 5 7 9 will form the first row
write(t(results2.df), fil)
if(interactive()) file.show(fil)
unlink(fil) # tidy up
write(results2.df, file = "results",
ncolumns = if(is.character(results2.df)) 1 else 5,
append = FALSE, sep = " ")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Trust level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
diameter(mails_mails.important.g)
diameter(mails_caliopen.important.g)
# edge_density(mails_caliopen.important.g)
modularity(mails_caliopen.important.g)
wtc <- cluster_walktrap(mails_caliopen.important.g)
modularity(wtc)
# mean(degree(mails_caliopen.important.g))
mean_distance(mails_caliopen.important.g)
edge_density(mails_caliopen.important.g)
mean(degree(mails_caliopen.important.g))
size(V(mails_caliopen.important.g))
length(V(mails_caliopen.important.g))
length(E(mails_caliopen.important.g))
#!/usr/bin/env Rscript
setwd("caliopen")
# sed -i "1s/.*/From;To;Content;Date;x/" mails_caliopen.csv
# source("script/read.r")
# write.csv(mails_caliopen, "mails_caliopen.csv", row.names=FALSE)
mails_caliopen <- read.csv(file="~/res/mails_caliopen.csv", header=TRUE, sep=";")
# sed -i "1s/.*/From;To;Content;Date;x/" mails_caliopen.csv
# source("script/read.r")
# write.csv(mails_caliopen, "mails_caliopen.csv", row.names=FALSE)
mails_caliopen <- read.csv(file="res/mails_caliopen.csv", header=TRUE, sep=";")
# sed -i "1s/.*/From;To;Content;Date;x/" mails_caliopen.csv
# source("script/read.r")
# write.csv(mails_caliopen, "mails_caliopen.csv", row.names=FALSE)
mails_caliopen <- read.csv(file="../res/mails_caliopen.csv", header=TRUE, sep=";")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
mails_caliopen.counted <- ddply(mails_caliopen, .(From, To, Content, Date, x), summarise, weight = length(To))
mails_caliopen.sender <- unique(mails_caliopen.counted$From)
mails_caliopen.connected <- subset(mails_caliopen.counted, To %in% mails_caliopen.sender)
mails_caliopen.receiver <- unique(mails_caliopen.connected$To)
mails_caliopen.connected <- subset(mails_caliopen.connected, From %in% mails_caliopen.receiver)
mails_caliopen.important <- subset(mails_caliopen.connected, weight > 0)
mails_caliopen.important.g <- graph_from_data_frame(mails_caliopen.important, directed=F)
mails_caliopen.important.g <- graph_from_adjacency_matrix(as_adjacency_matrix(mails_caliopen.important.g), mode = "undirected", weighted = TRUE)
mails_caliopen.important.g <- simplify(mails_caliopen.important.g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
mails_caliopen.important.g <- delete.vertices(mails_caliopen.important.g, which(degree(mails_caliopen.important.g) < 1))
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
mails_caliopen.connected <- subset(mails_caliopen.counted, To %in% mails_caliopen.sender)
mails_caliopen.receiver <- unique(mails_caliopen.connected$To)
mails_caliopen.connected <- subset(mails_caliopen.connected, From %in% mails_caliopen.receiver)
mails_caliopen.important <- subset(mails_caliopen.connected, weight > 0)
mails_caliopen.important.g <- graph_from_data_frame(mails_caliopen.important, directed=F)
mails_caliopen.important.g <- graph_from_adjacency_matrix(as_adjacency_matrix(mails_caliopen.important.g), mode = "undirected", weighted = TRUE)
mails_caliopen.important.g <- simplify(mails_caliopen.important.g, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
mails_caliopen.important.g <- delete.vertices(mails_caliopen.important.g, which(degree(mails_caliopen.important.g) < 1))
clique <- largest.cliques(mails_caliopen.important.g)
lk <- unlist(adjacent_vertices(mails_caliopen.important.g, clique[[1]], mode = "all"))
lk2 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk, mode = "all"))
lk3 <- unlist(adjacent_vertices(mails_caliopen.important.g, lk2, mode = "all"))
mails_caliopen.important.g <- induced.subgraph(graph=mails_caliopen.important.g,vids=lk2)
length(V(mails_caliopen.important.g))
length(E(mails_caliopen.important.g))
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
nn <- vcount(mails_caliopen.important.g)
p_cum1 <- propagation2(0.8,25); p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
update_diffuser <- function (diffusers, p){
nearest_neighbors <- setdiff(unlist(ego(g,1,diffusers)), diffusers)
is.infected <- sample(c(1,0), length(nearest_neighbors), replace=T, prob=c(p,1-p))
new.infected <- nearest_neighbors[which(is.infected==1)]
diffusers <- unique (c(diffusers, new.infected))
return(diffusers)
}
propagation2 <- function(p,t){
infected <- list(sample(1:vcount(g), 1))
for(i in 1:t){
infected[[i+1]] = update_diffuser(infected[[i]], p) %>% sort()
print(paste("Trick:",i,"Infected;",length(infected[[i]])))
i <- i+1
}
num_cum <- lapply(1:i, function(x) length(infected[[x]])) %>% unlist()
p_cum <- num_cum/max(num_cum)
return(p_cum)
}
wgtmat <- apply(get.adjacency(g) %>% as.matrix, 1, function(x) x/sum(x))
propagation <- function(wmat,trust, op,t) {
# a trust level # wmat weight matrix # op opinion # t iteration
Y <- list(op)
for(i in 1:t){ Y[[i+1]] <- (1-trust) * Y[[i]] + trust * (wgtmat %*% Y[[i]])}
return(Y)
}
library(network)
mails_caliopen.important.net <- network(mails_caliopen.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
nn <- vcount(mails_caliopen.important.g)
p_cum1 <- propagation2(0.8,25); p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
results2.df <- rbind(cbind(0.8, p_cum1), cbind(0.6, p_cum2), cbind(0.4, p_cum3), cbind(0.2, p_cum4)) %>% as.data.frame
results2.df$`Time` <- c(1:length(p_cum1),1:length(p_cum2),1:length(p_cum3),1:length(p_cum4))
p_cum1 <- propagation2(0.8,25); p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
p_cum1 <- propagation2(0.8,25); p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
p_cum1 <- propagation2(0.8,25);
g <- mails_caliopen.important.g
p_cum1 <- propagation2(0.8,25);
p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
results2.df <- rbind(cbind(0.8, p_cum1), cbind(0.6, p_cum2), cbind(0.4, p_cum3), cbind(0.2, p_cum4)) %>% as.data.frame
results2.df$`Time` <- c(1:length(p_cum1),1:length(p_cum2),1:length(p_cum3),1:length(p_cum4))
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
p <- ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Trust level")
write.csv(p$data, file = "MyData.csv")
# How trust changes deffusion process
pmal = ecdf(calc_cent$`Diffusion Degree`)(calc_cent$`Diffusion Degree`)
r1 <- rnorm(nn*2); r2 <- rexp(nn*2); r3 <- rweibull(nn*2,shape = 1); r4 <- rlnorm(nn*2); r5 <- rgamma(nn*2, shape = 1); r6 <- rlogis(nn*2); r7 <- rcauchy(nn*2); r8 <- rbinom(nn*2, size=2, prob = 0.5); r9 <- rtriang(nn*2)
# r1,r6,r7,r9
op <- matrix(r1, vcount(g), 1)
results.df <- rbind(
# cbind(1  , sapply(propagation(wgtmat, 1  , op, 25), function(x) mean(dist(x)))),
cbind(0.8, sapply(propagation(wgtmat, 0.8, op, 25), function(x) mean(dist(x)))),
cbind(0.6, sapply(propagation(wgtmat, 0.6, op, 25), function(x) mean(dist(x)))),
cbind(0.4, sapply(propagation(wgtmat, 0.4, op, 25), function(x) mean(dist(x)))),
cbind(0.2, sapply(propagation(wgtmat, 0.2, op, 25), function(x) mean(dist(x))))
# cbind(0, sapply(propagation(wgtmat, 0, op, 20), function(x) mean(dist(x))))
) %>% as.data.frame
wgtmat <- apply(get.adjacency(g) %>% as.matrix, 1, function(x) x/sum(x))
results.df <- rbind(
# cbind(1  , sapply(propagation(wgtmat, 1  , op, 25), function(x) mean(dist(x)))),
cbind(0.8, sapply(propagation(wgtmat, 0.8, op, 25), function(x) mean(dist(x)))),
cbind(0.6, sapply(propagation(wgtmat, 0.6, op, 25), function(x) mean(dist(x)))),
cbind(0.4, sapply(propagation(wgtmat, 0.4, op, 25), function(x) mean(dist(x)))),
cbind(0.2, sapply(propagation(wgtmat, 0.2, op, 25), function(x) mean(dist(x))))
# cbind(0, sapply(propagation(wgtmat, 0, op, 20), function(x) mean(dist(x))))
) %>% as.data.frame
results.df$`Time` <- rep(1:26,4)
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Trust level")
write.csv(p$data, file = "MyData2.csv")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
library(plyr)
library("fitdistrplus")
library(mc2d)  ## needed for dtriang
library(formattable)
source("script/setup.r")
library(network)
p2 <- ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Contagion process convergence") +labs(colour="Trust level")
write.csv(p2$data, file = "MyData2.csv")
p2
