par(mar=c(1,1,3,1))
plot_djoudi(mails.important.g, membership(communities[[x]]), main = name)
})
plot_djoudi(mails.important.g, membership(communities[[1]]), main = name)
communities <- list()
### cluster_edge_betweenness
ceb <- cluster_edge_betweenness(mails.important.g,weights = NULL)
communities$Edge_betweenness <- ceb
### cluster_fast_greedy
cfg <- cluster_fast_greedy(mails.important.g)
communities$Fast_greedy <- cfg
### cluster_leading_eigen
cle <- cluster_leading_eigen(mails.important.g)
communities$Leading_eigenvector <- cle
### cluster_spinglass
cs <- cluster_spinglass(mails.important.g, spins=10)
communities$Spinglass <- cs
### cluster_walktrap
cw <- cluster_walktrap(mails.important.g)
communities$Walktrap <- cw
### cluster_label_prop
clp <- cluster_label_prop(mails.important.g)
communities$Label_propagation <- clp
# cluster_louvain
cl <- cluster_louvain(mails.important.g)
communities$Louvain <- cl
membership <- lapply(lapply(communities, membership), as.numeric)
##############################################################" Plot Community ##################################################
pdf("../bin/communities_graphxx.pdf")
layout(rbind(1:4, 5:8))
lapply(seq_along(communities), function(x) {
name <- paste(names(communities)[x], "\n", "Modularity:", round(modularity(communities[[x]]), 4))
par(mar=c(1,1,3,1))
plot_djoudi(mails.important.g, membership(communities[[x]]), main = name)
})
dev.off()
install.packages("devtools") # run this to install the devtools package
install.packages("devtools")
devtools::install_github("carloscinelli/NetworkRiskMeasures", build_vignettes = TRUE)
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
sm <- sir(mails.important.g, beta=5, gamma=1)
plot(sm)
sm
sm[[2]]
head(sm)
sm
sm$1
sm[1]
sm[1]$NR
sm[[1]]$NR
sm[[1]]$NR[500]
sm[[1]]$NR[800]
sm[[1]]$NR[900]
sm[[1]]$NR[9000]
sm[[1]]$NR[1200]
sm[[1]]$NR[1700]
sm[[1]]$NR[1500]
sm[[1]]$NR[1400]
sm[[1]]$NR[1300]
sm[[1]]$NR[1300]
sm[[1]]$NR[1200]
sm[[1]]$NR[1100]
sm[[1]]$NR[1000]
sm[[1]]$NR[1000]
plot(sm)
V(mails.important.g)
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
V(mails.important.g)
diameter(mails.important.g)
edge_density(mails.important.g)
edge_density(mails.important.g)
modularity(mails.important.g)
wtc <- cluster_walktrap(mails.important.g)
modularity(wtc)
degree_distribution(mails.important.g)
degree(mails.important.g)
mean(degree(mails.important.g))
mean_distance(mails.important.g)
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Mean distance") +labs(colour="Reputation level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
fr <- ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
fr
head(fr)
fr$data
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
f <- ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
View(f)
View(f[["data"]])
write.table(f$data, "dataytyt.csv", sep="\t", row.names=FALSE, col.names=FALSE)
ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
p
p <- ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
p <- ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks.x = element_text(color="blue", size=14, face="bold"),
axis.ticks.y = element_text(color="#993333", size=14, face="bold")
)
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks.x = element_text(color="blue", size=14, face="bold"),
axis.ticks.y = element_text(color="#993333", size=14, face="bold")
)
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks.x = element_line(color="blue", size=14, face="bold"),
axis.ticks.y = element_line(color="#993333", size=14, face="bold")
)
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold"),
axis.ticks.x = element_line(color="blue", size=14),
axis.ticks.y = element_line(color="#993333", size=14)
)
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
p + theme(axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
p + theme(axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = .5, face = "plain"))
p + theme(axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
p + theme(axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain")
#      axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain")
)
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
p
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Mean distance") +labs(colour="Reputation level")
p <- ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Mean distance") +labs(colour="Reputation level")
View(p)
View(p)
View(p[["data"]])
save.image("~/Downloads/kk.RData")
write.csv(d$data, file = "MyData.csv")
write.csv(p$data, file = "MyData.csv")
library("CINNA")
library("igraph")
library("ggplot2")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
# setwd("enron")
# set.seed(1)
# source("script/read.r")
# write.csv(mails, "mails.csv", row.names=FALSE)
mails <- read.csv(file="../res/mails_enron.csv", header=TRUE, sep=",")
library("CINNA")
install.packages("CINNA")
install.packages(c("pbkrtest", "lme4", "car"))
install.packages("igraph")
install.packages("CINNA")
install.packages("GGally")
install.packages("fitdistrplus")
install.packages("mc2d")
install.packages("formattable")
install.packages("ggplot2")
library(Hmisc)
# ##################################################
library("EpiModel")
install.packages("EpiModel")
layout(rbind(1:2, 3:4))
lapply(seq_along(calc_dist), function(i) {
tryCatch({qqcomp(calc_dist[[i]], xlab=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
library(igraph)
install.packages("igraph")
library(igraph)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2000-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2001-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2002-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2003-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
library(ndtv)
install.packages("ndtv")
install.packages("network")
install.packages("network")
library(igraph)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2000-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2001-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2002-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
test1 <- delete.edges   (mails.important.g, which (E(mails.important.g)$date > as.Date("2003-01-01")))
test1 <- delete.vertices(test1, which(degree(test1) < 1))
plot(test1, edge.label=NA, vertex.label=NA, vertex.size=6)
library(ndtv)
install.packages("ndtv")
install.packages("network")
install.packages("network")
library(intergraph)
detach("package:arcdiagram")
detach("package:igraph")
net3 <- network(mails.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
library(network)
net3 <- network(mails.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
set.vertex.attribute(net3, "attr1", attr1[,1])
## Network
library(network)
library(intergraph)
library('Hmisc')
## Network
library(network)
library('Hmisc')
library(igraph)
mails.important.net <- network(mails.important, matrix.type ="edgelist", weighted = TRUE, directed=FALSE)
# Centrality
for (i in 1:length_cent){
mails.important.net %v% names(calc_cent)[i] <- calc_cent[[i]]
}
table(mails.important.net %v% names(calc_cent)[2])
mixingmatrix(mails.important.net, names(calc_cent)[2])
library(ergm)
library(ergm)
library(sna)
library(sna)
library(statnet)
install.packages("statnet")
library(statnet)
library(statnet)
library(coda)
library(latentnet)
install.packages("latentnet")
library(latentnet)
library(latentnet)
start.time <- Sys.time()
latent.fit <- ergmm(mails.important.net ~ euclidean(d = 2))
library("CINNA")
install.packages("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
install.packages("formattable")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
install.packages("CINNA")
install.packages("FactoMineR")
install.packages("lme4")
set.seed(2016)
g <- mails.important.g
diameter(mails.important.g)
edge_density(mails.important.g)
modularity(mails.important.g)
wtc <- cluster_walktrap(mails.important.g)
modularity(wtc)
mean(degree(mails.important.g))
mean_distance(mails.important.g)
update_diffuser <- function (diffusers, p){
nearest_neighbors <- setdiff(unlist(ego(g,1,diffusers)), diffusers)
is.infected <- sample(c(1,0), length(nearest_neighbors), replace=T, prob=c(p,1-p))
new.infected <- nearest_neighbors[which(is.infected==1)]
diffusers <- unique (c(diffusers, new.infected))
return(diffusers)
}
propagation2 <- function(p,t){
infected <- list(sample(1:vcount(g), 1))
for(i in 1:t){
infected[[i+1]] = update_diffuser(infected[[i]], p) %>% sort()
print(paste("Trick:",i,"Infected;",length(infected[[i]])))
i <- i+1
}
num_cum <- lapply(1:i, function(x) length(infected[[x]])) %>% unlist()
p_cum <- num_cum/max(num_cum)
return(p_cum)
}
wgtmat <- apply(get.adjacency(g) %>% as.matrix, 1, function(x) x/sum(x))
propagation <- function(wmat,trust, op,t) {
# a trust level # wmat weight matrix # op opinion # t iteration
Y <- list(op)
for(i in 1:t){ Y[[i+1]] <- (1-trust) * Y[[i]] + trust * (wgtmat %*% Y[[i]])}
return(Y)
}
# ##################################################
library("EpiModel")
library("ndtv")
library("ndtv")
install.packages("ndtv")
install.packages("magick")
install.packages("ndtv")
mails.important.net <- network(mails.important, matrix.type ="edgelist", weighted = TRUE , directed=FALSE)
# Centrality
for (i in 1:length_cent){
mails.important.net %v% names(calc_cent)[i] <- calc_cent[[i]]
}
###################################################"
p_cum1 <- propagation2(0.8,25); p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
results2.df <- rbind(cbind(0.8, p_cum1), cbind(0.6, p_cum2), cbind(0.4, p_cum3), cbind(0.2, p_cum4)) %>% as.data.frame
results2.df$`Time` <- c(1:length(p_cum1),1:length(p_cum2),1:length(p_cum3),1:length(p_cum4))
p <- ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
############################### Trust and diffusion metrics
# How trust changes deffusion process
pmal = ecdf(calc_cent$`Diffusion Degree`)(calc_cent$`Diffusion Degree`)
r1 <- rnorm(958*2); r2 <- rexp(958*2); r3 <- rweibull(958*2,shape = 1); r4 <- rlnorm(958*2); r5 <- rgamma(958*2, shape = 1); r6 <- rlogis(958*2); r7 <- rcauchy(958*2); r8 <- rbinom(958*2, size=2, prob = 0.5); r9 <- rtriang(958*2)
# r1,r6,r7,r9
op <- matrix(r1, vcount(g), 1)
results.df <- rbind(
# cbind(1  , sapply(propagation(wgtmat, 1  , op, 25), function(x) mean(dist(x)))),
cbind(0.8, sapply(propagation(wgtmat, 0.8, op, 25), function(x) mean(dist(x)))),
cbind(0.6, sapply(propagation(wgtmat, 0.6, op, 25), function(x) mean(dist(x)))),
cbind(0.4, sapply(propagation(wgtmat, 0.4, op, 25), function(x) mean(dist(x)))),
cbind(0.2, sapply(propagation(wgtmat, 0.2, op, 25), function(x) mean(dist(x))))
# cbind(0, sapply(propagation(wgtmat, 0, op, 20), function(x) mean(dist(x))))
) %>% as.data.frame
results.df$`Time` <- rep(1:26,4)
p <- ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Mean distance") +labs(colour="Reputation level")
write.csv(p$data, file = "MyData.csv")
library(Hmisc)
# layout(rbind(1:2))
dr <- ecdf(unlist(propagation(wgtmat, 0.8, op, 25)[1 ]))(unlist(propagation(wgtmat, 0.8, op, 25)[1 ]))
plot_aghiles(mails.important.g, dr, , "", "", "")
###################################################"
p_cum1 <- propagation2(0.8,25); p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
library("CINNA")
library("igraph")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("formattable")
library("ggplot2")
###################################################"
p_cum1 <- propagation2(0.8,25); p_cum2 <- propagation2(0.6,25); p_cum3 <- propagation2(0.4,25); p_cum4 <- propagation2(0.2,25);
results2.df <- rbind(cbind(0.8, p_cum1), cbind(0.6, p_cum2), cbind(0.4, p_cum3), cbind(0.2, p_cum4)) %>% as.data.frame
results2.df$`Time` <- c(1:length(p_cum1),1:length(p_cum2),1:length(p_cum3),1:length(p_cum4))
p <- ggplot(results2.df, aes(x=`Time`, y=p_cum1, colour=factor(V1))) + geom_line()+ geom_point() + ylab("CDF of infected users") +labs(colour="Reputation level")
p + theme(
plot.title   = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
p + theme(
plot.title   = element_text(color="red", size=14, face="bold.italic"),
axis.text.x  = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"),
axis.text.y  = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain")
)
############################### Trust and diffusion metrics
# How trust changes deffusion process
pmal = ecdf(calc_cent$`Diffusion Degree`)(calc_cent$`Diffusion Degree`)
r1 <- rnorm(958*2); r2 <- rexp(958*2); r3 <- rweibull(958*2,shape = 1); r4 <- rlnorm(958*2); r5 <- rgamma(958*2, shape = 1); r6 <- rlogis(958*2); r7 <- rcauchy(958*2); r8 <- rbinom(958*2, size=2, prob = 0.5); r9 <- rtriang(958*2)
# r1,r6,r7,r9
op <- matrix(r1, vcount(g), 1)
results.df <- rbind(
# cbind(1  , sapply(propagation(wgtmat, 1  , op, 25), function(x) mean(dist(x)))),
cbind(0.8, sapply(propagation(wgtmat, 0.8, op, 25), function(x) mean(dist(x)))),
cbind(0.6, sapply(propagation(wgtmat, 0.6, op, 25), function(x) mean(dist(x)))),
cbind(0.4, sapply(propagation(wgtmat, 0.4, op, 25), function(x) mean(dist(x)))),
cbind(0.2, sapply(propagation(wgtmat, 0.2, op, 25), function(x) mean(dist(x))))
# cbind(0, sapply(propagation(wgtmat, 0, op, 20), function(x) mean(dist(x))))
) %>% as.data.frame
results.df$`Time` <- rep(1:26,4)
p <- ggplot(results.df, aes(x=`Time`, y=V2, colour=factor(V1))) + geom_line()+ geom_point() + ylab("Mean distance") +labs(colour="Reputation level")
write.csv(p$data, file = "MyData.csv")
library(Hmisc)
# layout(rbind(1:2))
dr <- ecdf(unlist(propagation(wgtmat, 0.8, op, 25)[1 ]))(unlist(propagation(wgtmat, 0.8, op, 25)[1 ]))
plot_aghiles(mails.important.g, dr, , "", "", "")
View(calc_cent)
write.csv(calc_cent, file = "calc_cent.csv")
View(calc_cent)
type(calc_cent)
calc_cent
class(calc_cent)
