library(plyr)
# Function to read a single email message's headers from a file.
# Adapted from Conway, White: Machine Learning for Hackers
get.message.headers  <- function(path){
tryCatch({
con <- file(path, open="rt", encoding="ascii")
text <- readLines(con)
# Headers of an email end with the first empty line in the file.
headers <- text[seq(1,which(text=="")[1]-1, 1)]
close(con)
return(headers)
},
error = function(e){
# Return NA if there was an error. A proper script would need error handling here.
return(NA)
})
}
#R
# This function extracts the "To:" and "From:" fields from email headers.
parse.message <- function(headers){
if(is.na(headers)){
return(c(NA, NA, NA))
}
from <- grep("^from:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the From: field
from <- sub("^From:\\s*", "", from, ignore.case=TRUE)
to <- grep("^to:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the To: field
to <- sub("^to:\\s*", "", to, ignore.case=TRUE)
date <- grep("^Date:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the To: field
date <- sub("^Date:\\s*", "", to, ignore.case=TRUE)
# If the email was sent to several receipients, they are separeted by commata and appear
# on several consecutive lines.
# This would require a proper parser. Given the time constraints while developing this script,
# we throw away emails that have more than one receipient at this point.
if(!is.na(to)){
if(regexpr(",",to,fixed=TRUE)[1] != -1){
to <- NA
}
}
return(c(from, to, date))
}
# Get all 'Sent' folders from the mailboxes contained in the dataset
mail_folders <- file("script/sent_folders", open="rt", encoding="ascii")
# Get all 'Sent' folders from the mailboxes contained in the dataset
mail_folders <- file("sent_folders", open="rt", encoding="ascii")
mail_files_paths <- readLines(mail_folders)
close(mail_folders)
# Construct paths for all files contained in the above folders
mail_files <- unlist(lapply(mail_files_paths, function(path){
paste(path, dir(path), sep="/")
}))
# Read and parse all mails (this step takes time)
mails <- sapply(mail_files, function(filename){
parse.message(get.message.headers(filename))
})
#R
# Turn mail data into an R data frame, removing cases that could not be parsed above.
mails <- na.omit(data.frame(mails[1,], mails[2,]))
colnames(mails) <- c("From", "To", "Date")
#R
# Turn mail data into an R data frame, removing cases that could not be parsed above.
mails <- na.omit(data.frame(mails[1,], mails[2,], mails[3,]))
colnames(mails) <- c("From", "To", "Date")
# Get all mail addresses from which mails originated.
mails.sender <- unique(mails$From)
# Keep only those mails that were sent to one of these people.
mails.connected <- subset(mails, To %in% mails.sender)
# Count how many mails were sent from Person A to Person B. This will create a
# data frame with entries $From $To $weight where $weight is the number
# of mails sent $From -> $To
mails.counted <- ddply(mails.connected, .(From, To), summarise, weight = length(To))
# Remove @enron.com domain for better readability
mails.counted$From <- sub("@enron.com", "",mails.counted$From)
mails.counted$To <- sub("@enron.com", "",mails.counted$To)
#
important.people <- c("louise.kitchen@enron.com",
"mike.grigsby@enron.com",
"greg.whalley@enron.com",
"scott.neal@enron.com",
"kenneth.lay@enron.com")
# Get all 'Sent' folders from the mailboxes contained in the dataset
mail_folders <- file("sent_folders", open="rt", encoding="ascii")
mail_files_paths <- readLines(mail_folders)
close(mail_folders)
# Construct paths for all files contained in the above folders
mail_files <- unlist(lapply(mail_files_paths, function(path){
paste(path, dir(path), sep="/")
}))
# Read and parse all mails (this step takes time)
mails <- sapply(mail_files, function(filename){
parse.message(get.message.headers(filename))
})
View(mails)
#R
# This function extracts the "To:" and "From:" fields from email headers.
parse.message <- function(headers){
if(is.na(headers)){
return(c(NA, NA, NA))
}
from <- grep("^from:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the From: field
from <- sub("^From:\\s*", "", from, ignore.case=TRUE)
to <- grep("^to:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the To: field
to <- sub("^to:\\s*", "", to, ignore.case=TRUE)
date <- grep("^Date:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the To: field
date <- sub("^Date:\\s*", "", to, ignore.case=TRUE)
date
# If the email was sent to several receipients, they are separeted by commata and appear
# on several consecutive lines.
# This would require a proper parser. Given the time constraints while developing this script,
# we throw away emails that have more than one receipient at this point.
if(!is.na(to)){
if(regexpr(",",to,fixed=TRUE)[1] != -1){
to <- NA
}
}
return(c(from, to, date))
}
# Get all 'Sent' folders from the mailboxes contained in the dataset
mail_folders <- file("sent_folders", open="rt", encoding="ascii")
mail_files_paths <- readLines(mail_folders)
close(mail_folders)
# Construct paths for all files contained in the above folders
mail_files <- unlist(lapply(mail_files_paths, function(path){
paste(path, dir(path), sep="/")
}))
# Read and parse all mails (this step takes time)
mails <- sapply(mail_files, function(filename){
parse.message(get.message.headers(filename))
})
#R
# Turn mail data into an R data frame, removing cases that could not be parsed above.
mails <- na.omit(data.frame(mails[1,], mails[2,], mails[3,]))
colnames(mails) <- c("From", "To", "Date")
# Get all mail addresses from which mails originated.
mails.sender <- unique(mails$From)
# Turn mail data into an R data frame, removing cases that could not be parsed above.
mails <- na.omit(data.frame(mails[1,], mails[2,], mails[3,]))
library(plyr)
# Function to read a single email message's headers from a file.
# Adapted from Conway, White: Machine Learning for Hackers
get.message.headers  <- function(path){
tryCatch({
con <- file(path, open="rt", encoding="ascii")
text <- readLines(con)
# Headers of an email end with the first empty line in the file.
headers <- text[seq(1,which(text=="")[1]-1, 1)]
close(con)
return(headers)
},
error = function(e){
# Return NA if there was an error. A proper script would need error handling here.
return(NA)
})
}
# This function extracts the "To:" and "From:" fields from email headers.
parse.message <- function(headers){
if(is.na(headers)){
return(c(NA, NA, NA))
}
date <- grep("^date:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the Date: field
date <- sub("^Date:\\s*", "", to, ignore.case=TRUE)
from <- grep("^from:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the From: field
from <- sub("^From:\\s*", "", from, ignore.case=TRUE)
to <- grep("^to:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the To: field
to <- sub("^to:\\s*", "", to, ignore.case=TRUE)
# If the email was sent to several receipients, they are separeted by commata and appear
# on several consecutive lines.
# This would require a proper parser. Given the time constraints while developing this script,
# we throw away emails that have more than one receipient at this point.
if(!is.na(to)){
if(regexpr(",",to,fixed=TRUE)[1] != -1){
to <- NA
}
}
return(c(from, to, date))
}
# Get all 'Sent' folders from the mailboxes contained in the dataset
mail_folders <- file("sent_folders", open="rt", encoding="ascii")
mail_files_paths <- readLines(mail_folders)
close(mail_folders)
# Construct paths for all files contained in the above folders
mail_files <- unlist(lapply(mail_files_paths, function(path){
paste(path, dir(path), sep="/")
}))
# Read and parse all mails (this step takes time)
mails <- sapply(mail_files, function(filename){
parse.message(get.message.headers(filename))
})
View(mails)
# Turn mail data into an R data frame, removing cases that could not be parsed above.
mails <- na.omit(data.frame(mails[1,], mails[2,], mails[3,]))
colnames(mails) <- c("From", "To", "Date")
View(mails)
# Turn mail data into an R data frame, removing cases that could not be parsed above.
mails <- na.omit(data.frame(mails[1,], mails[2,]))
colnames(mails) <- c("From", "To", "Date")
View(mails)
library(plyr)
# Function to read a single email message's headers from a file.
# Adapted from Conway, White: Machine Learning for Hackers
get.message.headers  <- function(path){
tryCatch({
con <- file(path, open="rt", encoding="ascii")
text <- readLines(con)
# Headers of an email end with the first empty line in the file.
headers <- text[seq(1,which(text=="")[1]-1, 1)]
close(con)
return(headers)
},
error = function(e){
# Return NA if there was an error. A proper script would need error handling here.
return(NA)
})
}
# This function extracts the "To:" and "From:" fields from email headers.
parse.message <- function(headers){
if(is.na(headers)){
return(c(NA, NA))
}
from <- grep("^from:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the From: field
from <- sub("^From:\\s*", "", from, ignore.case=TRUE)
to <- grep("^to:",headers,ignore.case=TRUE,value=TRUE)[1]
# Just keep the email address without the To: field
to <- sub("^to:\\s*", "", to, ignore.case=TRUE)
# If the email was sent to several receipients, they are separeted by commata and appear
# on several consecutive lines.
# This would require a proper parser. Given the time constraints while developing this script,
# we throw away emails that have more than one receipient at this point.
if(!is.na(to)){
if(regexpr(",",to,fixed=TRUE)[1] != -1){
to <- NA
}
}
return(c(from, to))
}
# Get all 'Sent' folders from the mailboxes contained in the dataset
mail_folders <- file("script/sent_folders", open="rt", encoding="ascii")
# Get all 'Sent' folders from the mailboxes contained in the dataset
mail_folders <- file("sent_folders", open="rt", encoding="ascii")
mail_files_paths <- readLines(mail_folders)
close(mail_folders)
# Construct paths for all files contained in the above folders
mail_files <- unlist(lapply(mail_files_paths, function(path){
paste(path, dir(path), sep="/")
}))
# Read and parse all mails (this step takes time)
mails <- sapply(mail_files, function(filename){
parse.message(get.message.headers(filename))
})
# Turn mail data into an R data frame, removing cases that could not be parsed above.
mails <- na.omit(data.frame(mails[1,], mails[2,]))
colnames(mails) <- c("From", "To")
